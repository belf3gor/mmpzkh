#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИменаПолейДляОткрытияУточнения = 
		"ТоварыНоменклатура,ТоварыХарактеристика,ТоварыСерия,ТоварыИдентификаторПартии,ТоварыНоменклатураЕдиницаИзмерения,"
		+"ТоварыКоличество,ТоварыЕдиницаИзмеренияВЕТИС,ТоварыКоличествоВЕТИС,ТоварыКоличествоРасхождений";
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыВЕТИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("Основание") Тогда
			ЗаполнитьДанныеАдресовМаршрутаПоОснованиям(Параметры.Основание);
		КонецЕсли;
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,,"ДокументОснование");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПродукцияВЕТИСПустаяСсылка = Справочники.ПродукцияВЕТИС.ПустаяСсылка();
	Элементы.ТоварыПродукция.СписокВыбора.Добавить(ПродукцияВЕТИСПустаяСсылка, НСтр("ru='<Произвольная>'"));
	Элементы.ТоварыБезРазбиенияПродукция.СписокВыбора.Добавить(ПродукцияВЕТИСПустаяСсылка, НСтр("ru='<Произвольная>'"));
	
КонецПроцедуры


// Заполняет адреса маршрута
// 
// Параметры:
// 	Основания - Массив, СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС - ВСД(1 или массив)-источник заполнения
&НаСервере
Процедура ЗаполнитьДанныеАдресовМаршрутаПоОснованиям(Основания)
	
	ВСДДляЗаполнения = Неопределено;
	
	Если ТипЗнч(Основания) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		ВСДДляЗаполнения = Основания;
	ИначеЕсли ТипЗнч(Основания) = Тип("Массив")
		И Основания.Количество() > 0
		И ТипЗнч(Основания[0]) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		ВСДДляЗаполнения = Основания[0];
	КонецЕсли;
	Если НЕ ВСДДляЗаполнения = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВСДДляЗаполнения", ВСДДляЗаполнения);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Маршрут.Предприятие КАК Предприятие,
		|	Маршрут.НомерСтроки КАК НомерСтроки,
		|	Маршрут.Адрес КАК Адрес,
		|	Маршрут.АдресПредставление КАК АдресПредставление,
		|	Маршрут.ДанныеАдреса КАК ДанныеАдреса
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК Маршрут
		|ГДЕ
		|	Маршрут.Ссылка = &ВСДДляЗаполнения
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		МаршрутыВСД = Запрос.Выполнить().Выбрать();
		Если МаршрутыВСД.Количество() = Объект.Маршрут.Количество() Тогда
			Пока МаршрутыВСД.Следующий() Цикл
				СтрокаТЧ = Объект.Маршрут[МаршрутыВСД.НомерСтроки - 1];
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Предприятие)
				   И СтрокаТЧ.Адрес = МаршрутыВСД.Адрес
				   И СтрокаТЧ.АдресПредставление = МаршрутыВСД.АдресПредставление Тогда
					СтрокаТЧ.ДанныеАдресаСтруктура = МаршрутыВСД.ДанныеАдреса.Получить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.Маршрут Цикл
		СтрокаТЧОбъект = Объект.Маршрут[ТекущийОбъект.Маршрут.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.МаршрутВозврата Цикл
		СтрокаТЧОбъект = Объект.МаршрутВозврата[ТекущийОбъект.МаршрутВозврата.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Маршрут.Очистить();
	
	Для Каждого СтрокаТЧОбъект Из Объект.Маршрут Цикл
		
		СтрокаТЧТекущийОбъект = ТекущийОбъект.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТекущийОбъект, СтрокаТЧОбъект);
		СтрокаТЧТекущийОбъект.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
	ТекущийОбъект.МаршрутВозврата.Очистить();
	
	Для Каждого СтрокаТЧОбъект Из Объект.МаршрутВозврата Цикл
		
		СтрокаТЧТекущийОбъект = ТекущийОбъект.МаршрутВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТекущийОбъект, СтрокаТЧОбъект);
		СтрокаТЧТекущийОбъект.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ХозяйствующиеСубъектыВЕТИС" Тогда
		Если Параметр = Объект.ГрузоотправительХозяйствующийСубъект Тогда
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузоотправительХозяйствующийСубъект");
		ИначеЕсли Параметр = Объект.ГрузополучательХозяйствующийСубъект Тогда
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузополучательХозяйствующийСубъект");
		ИначеЕсли Параметр = Объект.ПеревозчикХозяйствующийСубъект Тогда
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПеревозчикХозяйствующийСубъект");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВетеринарноСопроводительныйДокументВЕТИС" И УникальныйИдентификатор = Параметр.УникальныйИдентификаторВладельца Тогда
		Элементы.Товары.ТекущиеДанные.ВетеринарноСопроводительныйДокумент = Источник;
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВЕТИСВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		
		Если Объект.Товары.Количество() > 1 Тогда
			ТекущийЭлемент = Элементы.Товары;
			Элементы.Товары.ТекущаяСтрока = Параметр;
			ПереключательРасшифровки = 1;
		Иначе
			ТекущийЭлемент = Элементы.СтраницаТоварыБезРазбиения;
			Элементы.Товары.ТекущаяСтрока = Параметр;
			ПереключательРасшифровки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, "ТоварыНоменклатура");
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, ВыбранноеЗначение,
		ИсточникВыбора);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, "ТоварыСерия");
		
		ПараметрыЗаполнения = Новый Структура("ОписаниеОповещения", ОписаниеОповещения);
		
		СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
																	ПараметрыУказанияСерий.Товары,
																	ВыбранноеЗначение,
																	ИсточникВыбора,
																	ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		Элементы.Товары.ТекущиеДанные.ВетеринарноСопроводительныйДокумент = НовыйОбъект;
		ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыВСД", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
		ОбновитьДанные(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыйОбъект), ПараметрыОбновления);
	КонецЕсли;
	
	ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОбновления);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму") Тогда
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму", "");
		Если ИмяТабличнойЧасти = "Маршрут" Тогда
			ИмяОбщейФормы = "ПунктыМаршрутаВЕТИС";
			ПараметрыФормы = Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилищеТабличнойЧастиПунктыМаршрута());
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
			ПараметрыФормы.Вставить("РежимРаботыФормы", Новый Структура("ИзменятьСоставСтрок", Ложь));
			ПараметрыФормы.РежимРаботыФормы.Вставить("ВидПунктаМаршрута", Новый Структура("ТолькоПросмотр", Истина));
			ПараметрыФормы.РежимРаботыФормы.Вставить("ТипТранспорта", Новый Структура("ТолькоПросмотр", Истина));
			ПараметрыОповещения = ИмяТабличнойЧасти;
		ИначеЕсли ИмяТабличнойЧасти = "МаршрутВозврата" Тогда
			РезультатВыгрузкиТабличныхЧастей = АдресаТабличныхЧастейДляФормыРедактированияМаршрута();
			
			ИмяОбщейФормы = "ПунктыМаршрутаВЕТИС";
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилище);
			ПараметрыФормы.Вставить("АдресВоВременномХранилищеТовары", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилищеТовары);
			ПараметрыФормы.Вставить("АдресВоВременномХранилищеРегионализация", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилищеРегионализация);
			ПараметрыФормы.Вставить("ИмяПоляВидПродукции", "ВидПродукцииВСД");
			ПараметрыФормы.Вставить("УказываетсяРегионализация", Истина);
			ПараметрыФормы.Вставить("БлокироватьПервуюСтроку",   Истина);
			ПараметрыФормы.Вставить("ВладелецСсылка", Объект.Ссылка);
			ПараметрыФормы.Вставить("ХозяйствующийСубъект", Объект.ГрузоотправительХозяйствующийСубъект);
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
			ПараметрыФормы.Вставить("ЭтоМаршрутВозврата");
			
			ПараметрыОповещения = ИмяТабличнойЧасти;
		ИначеЕсли ИмяТабличнойЧасти = "СвязанныеДокументы" Тогда
			ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
			ПараметрыФормы.ТаблицаСвязанныхДокументов = Объект.СвязанныеДокументы;
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
			ИмяОбщейФормы = "СвязанныеДокументыВЕТИС";
			ПараметрыОповещения = ИмяТабличнойЧасти;
		ИначеЕсли ИмяТабличнойЧасти = "СвязанныеДокументыВозврата" Тогда
			ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
			ПараметрыФормы.ТаблицаСвязанныхДокументов = Объект.СвязанныеДокументыВозврата;
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
			ИмяОбщейФормы = "СвязанныеДокументыВЕТИС";
			ПараметрыОповещения = ИмяТабличнойЧасти;
		ИначеЕсли ИмяТабличнойЧасти = "ТранспортноеСредство" Тогда
			ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхПунктаМаршрута();
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
			РежимРаботыФормы = Новый Структура("ВидПунктаМаршрута");
			РежимРаботыФормы.ВидПунктаМаршрута = Новый Структура("Видимость", Ложь);
			ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
			ИмяОбщейФормы = "ПунктМаршрутаВЕТИС";
			ПараметрыОповещения = ИмяТабличнойЧасти;
		ИначеЕсли ИмяТабличнойЧасти = "ПроизводственныеПартии" Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПроизводственныеПартииТекущейСтроки = Объект.ТоварыУточнение.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
			МассивПроизводственныхПартий = Новый Массив;
			Если ПроизводственныеПартииТекущейСтроки.Количество() = 0 И ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторПартии) Тогда
				СтруктураПроизводственнойПартии = Новый Структура("ИдентификаторПартии", ТекущаяСтрока.ИдентификаторПартии);
				МассивПроизводственныхПартий.Добавить(СтруктураПроизводственнойПартии);
			Иначе
				Партии = Новый Массив;
				Для каждого ТекущаяПроизводственнаяПартия Из ПроизводственныеПартииТекущейСтроки Цикл
					Если ЗначениеЗаполнено(ТекущаяПроизводственнаяПартия.ИдентификаторПартии)
						И Партии.Найти(ТекущаяПроизводственнаяПартия.ИдентификаторПартии) = Неопределено Тогда
						СтруктураПроизводственнойПартии = Новый Структура("ИдентификаторПартии", ТекущаяПроизводственнаяПартия.ИдентификаторПартии);
						МассивПроизводственныхПартий.Добавить(СтруктураПроизводственнойПартии);
						Партии.Добавить(ТекущаяПроизводственнаяПартия.ИдентификаторПартии);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПроизводственныеПартии, ТолькоПросмотр", МассивПроизводственныхПартий, Истина);
			ИмяОбщейФормы = "ПроизводственныеПартииВЕТИС";
			ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", ИмяТабличнойЧасти, ТекущаяСтрока.ПолучитьИдентификатор());
		ИначеЕсли ИмяТабличнойЧасти = "УпаковкиВЕТИС" Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", ИмяТабличнойЧасти, ТекущаяСтрока.ПолучитьИдентификатор());
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
			ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(ЭтотОбъект, Объект, ТекущаяСтрока, ОписаниеОповещения, РедактированиеФормыНедоступно);
			Возврат;
		ИначеЕсли ИмяТабличнойЧасти = "Производители" Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПроизводителиТекущейСтроки = ТекущаяСтрока.ДанныеВСД.АдресаТабличныхЧастей.Производители;
			ПараметрыФормы = Новый Структура("АдресПроизводители, ТолькоПросмотр", ПроизводителиТекущейСтроки, Истина);
			ИмяОбщейФормы = "ПроизводителиВЕТИС";
			ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", ИмяТабличнойЧасти, ТекущаяСтрока.ПолучитьИдентификатор());
		Иначе
			Возврат;
		КонецЕсли;
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
		ОткрытьФорму("ОбщаяФорма." + ИмяОбщейФормы, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработкаОповещения);
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "РедактироватьПериод") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИмяРедактируемогоПоля = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "РедактироватьПериод", "");
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ИмяРедактируемогоПоля);
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Если ИмяРедактируемогоПоля = "ДатаПоступленияГруза" Тогда
			ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияДатыПоступления(ЭтотОбъект, Объект, ОбработчикОповещения, ТолькоПросмотр Или РедактированиеФормыНедоступно);
		ИначеЕсли ИмяРедактируемогоПоля = "ДатаПроизводства" Тогда
			СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, ИмяРедактируемогоПоля);
			ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияДатыПроизводства(ЭтотОбъект, Элементы.Товары.ТекущиеДанные.ДанныеВСД, ОбработчикОповещения, Истина, СписокДоступнойТочности);
		ИначеЕсли ИмяРедактируемогоПоля = "СрокГодности" Тогда
			СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, ИмяРедактируемогоПоля);
			ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияСрокаГодности(ЭтотОбъект, Элементы.Товары.ТекущиеДанные, ОбработчикОповещения, ТолькоПросмотр Или РедактированиеФормыНедоступно, СписокДоступнойТочности);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиент.ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.Маршрут Цикл
		СтрокаТЧОбъект = Объект.Маршрут[ТекущийОбъект.Маршрут.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.МаршрутВозврата Цикл
		СтрокаТЧОбъект = Объект.МаршрутВозврата[ТекущийОбъект.МаршрутВозврата.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	ПриСозданииЧтенииНаСервере();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ИнтеграцияВЕТИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки И Объект.Товары.Количество() > 1 Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в таблице товаров введено более одной строки!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
				
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПереключательРасшифровки");

КонецПроцедуры

&НаКлиенте
Процедура ПереключательТТНПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПереключательТТН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюЭлементФормыПриИзменении(Элемент)
	
	ОбновитьДанные(Объект[Элемент.Имя], Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
				
	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Или НЕ Объект.Проведен)
		И НажатиеНавигационнойСсылкиТребуетЗаписиДокумента(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НажатиеНавигационнойСсылкиТребуетЗаписиДокумента(НавигационнаяСсылкаФорматированнойСтроки)
	
	Результат = Истина;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуРегионализации"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеУсловияПеремещения"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "УказатьНомераТранспортныхСредств" Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыИндексКартинкиРегионализации"
		ИЛИ Поле.Имя = "ТоварыРезультатПроверкиПравилРегионализации" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.РезультатПроверкиПравилРегионализации =
			ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий") Тогда
			ОткрытьФормуРегионализации(Новый Структура("ВидПродукцииВЕТИС", ТекущиеДанные.ВидПродукцииВСД));
		КонецЕсли;
	КонецЕсли;
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормВЕТИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьУточнения И СтрНайти(ИменаПолейДляОткрытияУточнения, Поле.Имя) Тогда
		УточнитьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
			КэшированныеЗначения, ПараметрыУказанияСерий.Товары);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(ЭтотОбъект,
										Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.Товары, Истина);
	
	Иначе
		НеобходимоОбновитьСтатусыСерий = Ложь;
	КонецЕсли;
	
	Действия = ДействияРасчетаСтрокиТабличнойЧастиТовары();
	Действия.ОбновитьСтатусИПараметрыДополнения = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшируемыеПараметрыРегионализации", КэшируемыеПараметрыРегионализации);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		Действия.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ = Истина;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаИдентификатор", Неопределено);
		ДополнительныеПараметры.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	КонецЕсли;
	
	РасчетСтрокиТоваровСервер(Неопределено, Действия, ДополнительныеПараметры);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
			КэшированныеЗначения, ПараметрыУказанияСерий.Товары);
	КонецЕсли;
		
	ОбновитьДанные("Удаление", "Товары");
	
	ПереключательРасшифровки = 0;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПереключательРасшифровки");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
			КэшированныеЗначения, ПараметрыУказанияСерий.Товары, Копирование);
	КонецЕсли;
		
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Или Копирование Тогда
			ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ОбновитьДанные("Добавление", "Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЕстьДействия = Ложь;
	Действия = ДействияРасчетаСтрокиТабличнойЧастиТовары();
	
	ДополнительныеПараметры = Новый Структура;
	Если НоваяСтрока И Объект.ГрузоотправительПредприятие <> Объект.ГрузополучательПредприятие Тогда
		Действия.РассчитатьРеквизитыРегионализации = Истина;
		Действия.ОбновитьСтатусИПараметрыДополнения = Истина;
		ЕстьДействия = Истина;
		
		ДополнительныеПараметры.Вставить("КэшируемыеПараметрыРегионализации", КэшируемыеПараметрыРегионализации);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(ЭтотОбъект,
										Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.Товары);
	
	Иначе
		НеобходимоОбновитьСтатусыСерий = Ложь;
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		Действия.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ = Истина;
		ЕстьДействия = Истина;
		НеобходимоОбновитьСтатусыСерий = Истина;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	КонецЕсли;
	
	Если ЕстьДействия Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		РасчетСтрокиТоваровСервер(ТекущаяСтрокаИдентификатор, Действия, ДополнительныеПараметры);
	КонецЕсли;
	
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
			КэшированныеЗначения, ПараметрыУказанияСерий.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			Элементы.Товары.ТекущаяСтрока = Объект.Товары.Получить(0).ПолучитьИдентификатор();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		Отбор = Новый Структура("Продукция", ТекущиеДанные.Продукция);
		МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Номенклатура", НоменклатураДляВыбора, Отбор);
		Элементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		Отбор = Новый Структура("Продукция, Номенклатура", ТекущиеДанные.Продукция, ТекущиеДанные.Номенклатура);
		МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Характеристика", НоменклатураДляВыбора, Отбор);
		Элементы.ТоварыХарактеристика.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
		
	КонецЕсли;
	
	Элементы.ТоварыВозвращаемоеКоличествоВЕТИС.МаксимальноеЗначение = ТекущиеДанные.КоличествоВЕТИС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВетеринарноСопроводительныйДокументПриИзменении(Элемент)
	ВыбранныйВСД = Элементы.Товары.ТекущиеДанные.ВетеринарноСопроводительныйДокумент;
	ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыВСД", Элементы.Товары.ТекущаяСтрока);
	ОбновитьДанные(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныйВСД), ПараметрыОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВетеринарноСопроводительныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыВСД", Элементы.Товары.ТекущаяСтрока);
	ОткрытьФормуПодбораВСД(ПараметрыОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Продукция);
		ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыПродукция", ТекущиеДанные.ПолучитьИдентификатор());
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьФорму(
			"Справочник.ПродукцияВЕТИС.Форма.ПроизвольнаяПродукция",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Оповещение);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияПриИзменении(Элемент)
	ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыПродукция", Элементы.Товары.ТекущаяСтрока);
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Продукция, ПараметрыОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемоеКоличествоВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	Если Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВозвращаемоеКоличествоВЕТИС = 0 Тогда
		ТекущиеДанные.РезультатПроверкиПравилРегионализации =
			ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка");
		ТекущиеДанные.УсловияРегионализацииВыполнены = Ложь;
	КонецЕсли;
	
	Если Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ДействияРасчетаСтрокиТабличнойЧастиТовары();
	Действия.РассчитатьРеквизитыРегионализации = Истина;
	Действия.ОбновитьСтатусИПараметрыДополнения = Истина;
	Действия.ЗаполнитьМаршрутВозврата = Истина;
	ДополнительныеПараметры = Новый Структура;
	
	РасчетСтрокиТоваровСервер(ТекущиеДанные.ПолучитьИдентификатор(), Действия, ДополнительныеПараметры);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор(), "ТоварыВозвращаемоеКоличествоВЕТИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Номенклатура, "ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСопоставлениеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьДанные(ВыбранноеЗначение, "ТоварыНоменклатура");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(ТекущиеДанные.Продукция,
								ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	Если ТекущиеДанные.ДанныеВСД <> Неопределено И
		ЗначениеЗаполнено(ТекущиеДанные.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		
		ПараметрыНоменклатуры.Вставить("СтранаПроизводства", ТекущиеДанные.ДанныеВСД.СтранаПроизводства);
		ПараметрыНоменклатуры.Вставить("Производители", ТекущиеДанные.ДанныеВСД.АдресаТабличныхЧастей.Производители);
		
	КонецЕсли;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.Продукция,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	Если ТекущиеДанные.ДанныеВСД <> Неопределено И
		ЗначениеЗаполнено(ТекущиеДанные.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		
		ПараметрыНоменклатуры.Вставить("СтранаПроизводства", ТекущиеДанные.ДанныеВСД.СтранаПроизводства);
		ПараметрыНоменклатуры.Вставить("Производители", ТекущиеДанные.ДанныеВСД.АдресаТабличныхЧастей.Производители);
		
	КонецЕсли;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСопоставлениеНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаПолученияДанныхВыбораНоменклатуры(ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Характеристика, "ТоварыХарактеристика");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьДанные(ВыбранноеЗначение, "ТоварыХарактеристика");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормВЕТИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	Если Элемент.Имя = "ТоварыПредставлениеХарактеристика" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыХарактеристика", ТекущаяСтрока.ПолучитьИдентификатор());
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
		ПараметрыФормы = Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура);
		СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораХарактеристикиНоменклатуры(ЭтотОбъект, ОбработкаОповещения, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормВЕТИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Серия, "ТоварыСерия");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	
	Если РедактированиеФормыНедоступно Тогда
		
		ВведенноеЗначение = ТекущиеДанные.Количество;
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		Если НЕ ВведенноеЗначение = ТекущиеДанные.Количество Тогда
			ТекстСообщения = НСтр("ru='Документ был передан в информационную систему ВетИС.
				|Количество номенклатуры должно соответствовать количеству ВетИС с учетом коэффициентов пересчета.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		КоличествоРасхождений = ТекущиеДанные.КоличествоРасхождений;
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ТекущиеДанные, "КоличествоВЕТИС", ДополнительныеПараметры);
		КоличествоОтличается = ТекущиеДанные.КоличествоРасхождений <> КоличествоРасхождений;
		ИзменяемыеДанные = "ТоварыКоличествоВЕТИС" + ?(КоличествоОтличается, ", ЕстьОтклонения", "");
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор(), ИзменяемыеДанные);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииЕдиницыИзмеренияВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
		
	КоличествоРасхождений = ТекущиеДанные.КоличествоРасхождений;
	ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыТоваров(ТекущиеДанные, "КоличествоВЕТИС", ДополнительныеПараметры);
	КоличествоОтличается = ТекущиеДанные.КоличествоРасхождений <> КоличествоРасхождений;
	ИзменяемыеДанные = "ТоварыКоличествоВЕТИС" + ?(КоличествоОтличается, ", ЕстьОтклонения", "");
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор(), ИзменяемыеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕТИСПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
		
	КоличествоРасхождений = ТекущиеДанные.КоличествоРасхождений;
	ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыТоваров(ТекущиеДанные, "КоличествоВЕТИС", ДополнительныеПараметры);
	КоличествоОтличается = ТекущиеДанные.КоличествоРасхождений <> КоличествоРасхождений;
	ИзменяемыеДанные = "ТоварыКоличествоВЕТИС" + ?(КоличествоОтличается, ", ЕстьОтклонения", "");
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор(), ИзменяемыеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВСД(Команда)
	
	ОткрытьФормуПодбораВСД("ТоварыВСД", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьНоменклатуру(Команда)
	
	РеквизитыУточнения = "Номенклатура, Характеристика, Серия, Количество, КоличествоВЕТИС, ИдентификаторСтроки, ИдентификаторПартии";
	ДопРеквизитыУточнения = "СопоставлениеНоменклатура, Сопоставлено, ХарактеристикиИспользуются, СопоставленоКоличество,
	| СопоставлениеХарактеристика, СтатусУказанияСерий, ТипНоменклатуры, Артикул, ЕдиницаИзмерения";
	
	ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
	ОтборТекущейСтроки = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТоварыУточненияТекущейСтроки = Объект.ТоварыУточнение.НайтиСтроки(ОтборТекущейСтроки);
	МассивУточнений = Новый Массив;
	Для каждого ТекущееУточнение Из ТоварыУточненияТекущейСтроки Цикл
		СтруктураУточнения = Новый Структура(РеквизитыУточнения + ", " + ДопРеквизитыУточнения);
		ЗаполнитьЗначенияСвойств(СтруктураУточнения, Элементы.Товары.ТекущиеДанные);
		ЗаполнитьЗначенияСвойств(СтруктураУточнения, ТекущееУточнение, РеквизитыУточнения);
		МассивУточнений.Добавить(СтруктураУточнения);
	КонецЦикла;
	Если МассивУточнений.Количество() = 0 Тогда
		СтруктураУточнения = Новый Структура(РеквизитыУточнения + ", " + ДопРеквизитыУточнения);
		ЗаполнитьЗначенияСвойств(СтруктураУточнения, Элементы.Товары.ТекущиеДанные);
		МассивУточнений.Добавить(СтруктураУточнения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ВетеринарноСопроводительныйДокумент, Продукция, КоличествоВЕТИС, ЕдиницаИзмеренияВЕТИС, ИдентификаторСтроки, ЗаписьСкладскогоЖурнала, ПредставлениеЗаписьСкладскогоЖурнала");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Элементы.Товары.ТекущиеДанные);
	
	НоменклатураПустая = Истина;
	Для Каждого СтрокаУточнений Из МассивУточнений Цикл
		Если ЗначениеЗаполнено(СтрокаУточнений.Номенклатура) Тогда
			НоменклатураПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НоменклатураПустая Тогда
		Для Каждого СтрокаУточнений Из МассивУточнений Цикл
			СтрокаУточнений.Номенклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
		КонецЦикла;
	КонецЕсли;
	
	ХарактеристикаПустая = Истина;
	Для Каждого СтрокаУточнений Из МассивУточнений Цикл
		Если ЗначениеЗаполнено(СтрокаУточнений.Характеристика) Тогда
			ХарактеристикаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ХарактеристикаПустая Тогда
		Для Каждого СтрокаУточнений Из МассивУточнений Цикл
			СтрокаУточнений.Характеристика = Элементы.Товары.ТекущиеДанные.Характеристика;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТоварыУточнение", МассивУточнений);
	ПараметрыФормы.Вставить("Документ",        Объект.Ссылка);
	ПараметрыФормы.Вставить("ТорговыйОбъект",  Объект.ТорговыйОбъект);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ТоварыУточнение);	
	КонецЕсли;
	
	МассивНоменклатурыДляВыбора = Новый Массив;
	Для каждого ТекущаяНоменклатураДляВыбора Из НоменклатураДляВыбора Цикл
		СтруктураНоменклатурыДляВыбора = Новый Структура("Продукция, Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатурыДляВыбора, ТекущаяНоменклатураДляВыбора);
		МассивНоменклатурыДляВыбора.Добавить(СтруктураНоменклатурыДляВыбора);
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивНоменклатурыДляВыбора", МассивНоменклатурыДляВыбора);
	ПараметрыФормы.Вставить("ПараметрыФункциональныхОпций", ПолучитьПараметрыФункциональныхОпцийФормы());
	
	ПараметрыФормы.Вставить("РедактированиеФормыНедоступно",РедактированиеФормыНедоступно);
	ПараметрыФормы.Вставить("ТолькоПросмотр",ТолькоПросмотр);
	
	ПараметрыОповещения = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыУточнение", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ТоварыУточнение", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБумажныйВСД(Команда)
	
	ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ИзменяемаяСтрока.ВетеринарноСопроводительныйДокумент) Тогда
		ДанныеОтбора = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
		ДанныеОтбора.Вставить("Статус",ПредопределенноеЗначение("Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Оформлен"));
		ЗаполнитьЗначенияСвойств(ДанныеОтбора, Объект);
		Если ЗначениеЗаполнено(ТранспортноеСредствоПоДаннымВСД) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеОтбора, ТранспортноеСредствоПоДаннымВСД);
		КонецЕсли;
		ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыВСД", ИзменяемаяСтрока.ПолучитьИдентификатор());
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОбновления);
		ОткрытьФорму("Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ФормаОбъекта",
			Новый Структура("Основание", ДанныеОтбора), ЭтотОбъект,,,, Оповещение, 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзВСД(Команда)
	
	ОчиститьСообщения();
	
	ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ИзменяемаяСтрока <> Неопределено Тогда
		ВыбранныйВСД = ИзменяемаяСтрока.ВетеринарноСопроводительныйДокумент;
		ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыВСД", ИзменяемаяСтрока.ПолучитьИдентификатор());
		ОбновитьДанные(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныйВСД), ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	ПанельВСДСвернута = Не ПанельВСДСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПанельВСДСвернута");
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусВЕТИС(Форма, УстановитьПараметрыОбновленияСтатуса = Ложь)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") = 0 Или 
		Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие Тогда
		Элементы.ТоварыГруппаОтображениеРегионализации.Видимость = Ложь;
		Элементы.ПредставлениеПунктовМаршрутаВозврата.Видимость = Ложь;
		Элементы.ПредставлениеСвязанныхДокументовВозврата.Видимость = Ложь;
		Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Видимость = Ложь;
	Иначе
		Элементы.ТоварыГруппаОтображениеРегионализации.Видимость = Истина;
		Элементы.ПредставлениеПунктовМаршрутаВозврата.Видимость = Истина;
		Элементы.ПредставлениеСвязанныхДокументовВозврата.Видимость = Истина;
		Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Видимость = Истина;
	КонецЕсли;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(Объект,
	                                             Форма.ПараметрыОбновленияСтатуса,
	                                             ПараметрыДополненияСтатусаВЕТИС(Форма),
	                                             УстановитьПараметрыОбновленияСтатуса,
	                                             Объект.ГрузополучательХозяйствующийСубъект);
	
	Если Объект.ГрузоотправительПредприятие <> Объект.ГрузополучательПредприятие Тогда
		ДополнитьНадписьМаршрутВозвратаСтатусомРегионализации(Форма);
	КонецЕсли;
	
	Форма.СтатусВЕТИС = ПараметрыСтатуса.СтатусВЕТИС;
	Форма.СтатусВЕТИСПредставление = ПараметрыСтатуса.СтатусВЕТИСПредставление;
	Элементы.СтатусВЕТИС.Высота = ПараметрыСтатуса.СтатусВЕТИСПредставлениеВысота;
	
	#Область ОшибкиВетИС
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.ЕстьОшибки = 0;
		СтрокаТоваров.Ошибка     = "";
	КонецЦикла;
	Если Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка") Тогда
		ТаблицаОшибок = ИнтеграцияВЕТИСВызовСервера.ПолучитьТаблицуОшибок(Объект.Ссылка);
		Если ТаблицаОшибок <> Неопределено Тогда
			Для Каждого Ошибка Из ТаблицаОшибок Цикл
				СтрокиТоваровПоНомеру = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Ошибка.НомерСтрокиСОшибкой));
				Для Каждого СтрокаТоваров Из СтрокиТоваровПоНомеру Цикл
					СтрокаТоваров.ЕстьОшибки = 1;
					СтрокаТоваров.Ошибка     = Ошибка.КодОшибки+": "+Ошибка.ОписаниеОшибки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормы(Форма, Неопределено, "СтатусВЕТИС");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьНадписьМаршрутВозвратаСтатусомРегионализации(Форма)
	
	Если Форма.Объект.ГрузоотправительПредприятие = Форма.Объект.ГрузополучательПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.МаршрутВозврата.Итог("РегионализацияНеЗаполнено") > 0
	 ИЛИ Форма.Объект.МаршрутВозврата.Количество() = 0 Тогда
		Форма.ПредставлениеПунктовМаршрутаВозврата = Новый ФорматированнаяСтрока(Форма.ПредставлениеПунктовМаршрутаВозвратаКэш);
	ИначеЕсли Форма.Объект.МаршрутВозврата.Итог("РегионализацияЗапрещено") > 0 Тогда
		Форма.ПредставлениеПунктовМаршрутаВозврата = Новый ФорматированнаяСтрока(Форма.ПредставлениеПунктовМаршрутаВозвратаКэш, БиблиотекаКартинок.ОтгрузкаЗапрещена);
	ИначеЕсли Форма.Объект.МаршрутВозврата.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") > 0 Тогда
		Форма.ПредставлениеПунктовМаршрутаВозврата = Новый ФорматированнаяСтрока(Форма.ПредставлениеПунктовМаршрутаВозвратаКэш, БиблиотекаКартинок.Предупреждение);
	Иначе
		Форма.ПредставлениеПунктовМаршрутаВозврата = Новый ФорматированнаяСтрока(Форма.ПредставлениеПунктовМаршрутаВозвратаКэш, БиблиотекаКартинок.ОтгрузкаРазрешена);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект, ПараметрыОбновленияСтатуса, ПараметрыДополненияСтатусаВЕТИС, УстановитьПараметрыОбновленияСтатуса, ХозяйствующийСубъект)
	
	Если УстановитьПараметрыОбновленияСтатуса Тогда
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатусаВЕТИС);
	КонецЕсли;
	
	Ссылка = ДокументОбъект.Ссылка;
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусВЕТИС");
	Результат.Вставить("СтатусВЕТИСПредставление");
	Результат.Вставить("СтатусВЕТИСПредставлениеВысота");
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	СтатусВЕТИС        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = Новый Массив;
	ДальнейшееДействиеПоУмолчанию = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(
		ПараметрыДополненияСтатусаВЕТИС.ПроверятьНаРегионализацию, ПараметрыДополненияСтатусаВЕТИС.ЕстьОтклонения,
		ПараметрыДополненияСтатусаВЕТИС.НомерТранспортногоСредстваНеУказан
		Или ПараметрыДополненияСтатусаВЕТИС.НомерТранспортногоСредстваВСДНеУказан);
	ДальнейшееДействие.Добавить(ДальнейшееДействиеПоУмолчанию);
	ОперацииДопустимыхДействий = МенеджерОбъекта.ОперацииДопустимыхДействий();
	
	Если ЗначениеЗаполнено(Ссылка)
		И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияВЕТИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусВЕТИС = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусВЕТИС = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);
		
	КонецЕсли;
	
	Документы.ВходящаяТранспортнаяОперацияВЕТИС.ДействияВместоПередачиДанных(ДальнейшееДействие, ПараметрыДополненияСтатусаВЕТИС);
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	Если Не СтатусВЕТИС = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb Тогда
		ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	КонецЕсли;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	НедоступныеДействия = ПользователиВЕТИС.НедоступныеДальнейшиеДействия(ДокументОбъект, ДопустимыеДействия, ОперацииДопустимыхДействий, ХозяйствующийСубъект);
	
	СтатусВЕТИСПредставление = ИнтеграцияВЕТИС.ПредставлениеСтатусаВЕТИС(
		СтатусВЕТИС,
		ДальнейшееДействие,
		ДопустимыеДействия,
		НедоступныеДействия);
	
	Результат.СтатусВЕТИС                    = СтатусВЕТИС;
	Результат.СтатусВЕТИСПредставление       = СтатусВЕТИСПредставление;
	Результат.СтатусВЕТИСПредставлениеВысота = 1;
	
	ДополнитьСтрокуПредставленияСтатусаВЕТИС(Результат, ПараметрыДополненияСтатусаВЕТИС);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтрокуПредставленияСтатусаВЕТИС(ПараметрыСтатуса, ПараметрыДополненияСтатусаВЕТИС)
	
	СтатусВЕТИСПредставление = ПараметрыСтатуса.СтатусВЕТИСПредставление;
	СтатусВЕТИС = ПараметрыСтатуса.СтатусВЕТИС;
	
	ИтоговыеСтрокиСтатуса = Новый Массив;
	ИтоговыеСтрокиСтатуса.Добавить(СтатусВЕТИСПредставление);
	
	ДополнитьСтрокуСтатуса = (СтатусыПослеПринятияОтветаРегионализации().Найти(СтатусВЕТИС) <> Неопределено);
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb
	   И НЕ ПараметрыДополненияСтатусаВЕТИС.ПравилаРегионализацииЗаполнены Тогда
		ДополнитьСтрокуСтатуса = Ложь;
	КонецЕсли;
	
	Если ДополнитьСтрокуСтатуса Тогда
		
		//выводим самое строгое условие и отдельно сообщаем о необходимости проверить условия регионализации
		ЕстьДополнительнаяСтрока = Ложь;
		ЕстьГиперссылка = Ложь;
		Если ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСЗапретом > 0 Тогда
			
			НачалоСтрокиУсловий = НСтр("ru = 'Отгрузка запрещена по'");
			ПозицийМаршрутовВозврата = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСЗапретом;
			ПозицийТоваров           = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом;
			
			ЕстьДополнительнаяСтрока = Истина;
			
		ИначеЕсли ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями > 0 Тогда
			
			НачалоСтрокиУсловий = НСтр("ru = 'Требуется подтверждение условий по'");
			ПозицийМаршрутовВозврата = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями;
			ПозицийТоваров           = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями;
			
			ЕстьДополнительнаяСтрока = Истина;
			ЕстьГиперссылка = Истина;
			
		ИначеЕсли ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСВыполненнымиУсловиями > 0 Тогда
			
			НачалоСтрокиУсловий = НСтр("ru = 'Указано подтверждение условий по'");
			ПозицийМаршрутовВозврата = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСВыполненнымиУсловиями;
			ПозицийТоваров           = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями;
			
			ЕстьДополнительнаяСтрока = Истина;
			ЕстьГиперссылка = Истина;
			
		КонецЕсли;
		
		Если ЕстьДополнительнаяСтрока Тогда
			
			ДополнительныеСтрокиУсловий = Новый Массив;
			ДополнительныеСтрокиУсловий.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + НачалоСтрокиУсловий + " "));
			
			ФорматнаяСтрока = "Л = ru_RU;НП=Истина";
			ПараметрПредметаИсчисленияПродукции = НСтр("ru = '|позиции,|позициям,|позициям,ж,,,,,0'");
			ПараметрПредметаИсчисленияМаршрутаВозврата = НСтр("ru = '|пункту маршрута возврата,|пунктам маршрута возврата,|пунктам маршрута возврата,м,,,,,0'");
			ПредставлениеПредметаПродукции = ЧислоПрописью(ПозицийТоваров, ФорматнаяСтрока, ПараметрПредметаИсчисленияПродукции);
			ПредставлениеПредметаМаршрутаВозврата  = ЧислоПрописью(ПозицийМаршрутовВозврата, ФорматнаяСтрока, ПараметрПредметаИсчисленияМаршрутаВозврата);
			
			ПредставлениеПредметаПродукции = Сред(ПредставлениеПредметаПродукции, Найти(ПредставлениеПредметаПродукции, "|") + 1);
			ПредставлениеПредметаМаршрутаВозврата = Сред(ПредставлениеПредметаМаршрутаВозврата, Найти(ПредставлениеПредметаМаршрутаВозврата, "|") + 1);
			
			ПредставлениеСтрокиУсловий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 и %3 %4'"),
				Формат(ПозицийТоваров, "ЧН=0; ЧГ=0"),
				ПредставлениеПредметаПродукции,
				Формат(ПозицийМаршрутовВозврата, "ЧН=0; ЧГ=0"),
				ПредставлениеПредметаМаршрутаВозврата);
				
			Если ЕстьГиперссылка Тогда
				ПредставлениеСтрокиУсловий = Новый ФорматированнаяСтрока(ПредставлениеСтрокиУсловий, Новый Шрифт(,,,,Истина),
					ЦветаСтиля.ЦветГиперссылкиГосИС,, "ОткрытьФормуРегионализации");
			Иначе
				ПредставлениеСтрокиУсловий = Новый ФорматированнаяСтрока(ПредставлениеСтрокиУсловий,,,,);
			КонецЕсли;
				
			ДополнительныеСтрокиУсловий.Добавить(ПредставлениеСтрокиУсловий);
			
			ИтоговыеСтрокиСтатуса.Добавить(Новый ФорматированнаяСтрока(ДополнительныеСтрокиУсловий));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыДополненияСтатусаВЕТИС.Свойство("АктНесоответствия") Тогда
		ИтоговыеСтрокиСтатуса.Добавить(ПараметрыДополненияСтатусаВЕТИС.АктНесоответствия);
	КонецЕсли;
	
	ПараметрыСтатуса.СтатусВЕТИСПредставлениеВысота = ИтоговыеСтрокиСтатуса.Количество();
	ПараметрыСтатуса.СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(ИтоговыеСтрокиСтатуса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПеремещениеМеждуРегионамиСервер(Маршрут)
	Возврат РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(Маршрут);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьПеремещениеМеждуРегионамиПриВозврате(Форма)
	
	МассивСтрок = Новый Массив;
	
	// В табличной части Маршрут возврата предполагается небольшое количество строк.
	Для каждого СтрокаТЧ Из Форма.Объект.МаршрутВозврата Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Предприятие", СтрокаТЧ.Предприятие);
		ДанныеСтроки.Вставить("ДанныеАдреса", СтрокаТЧ.ДанныеАдресаСтруктура);
		МассивСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Предприятие", Форма.Объект.ГрузоотправительПредприятие);
	ДанныеСтроки.Вставить("ДанныеАдреса", Неопределено);
	МассивСтрок.Добавить(ДанныеСтроки);
	
	Если МассивСтрок.Количество() < 2 Тогда
		Возврат Ложь;
	Иначе
		Возврат ЕстьПеремещениеМеждуРегионамиСервер(МассивСтрок);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДополненияСтатусаВЕТИС(Форма)
	
	Объект = Форма.Объект;
	НетПеревозки = Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие И ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие);
	Если НетПеревозки Тогда
		ЕстьПеремещениеМеждуРегионами = Ложь;
	Иначе
		ЕстьПеремещениеМеждуРегионами = ЕстьПеремещениеМеждуРегионамиПриВозврате(Форма);
	КонецЕсли;
	
	ПараметрыДополнения = Новый Структура;
	ПараметрыДополнения.Вставить("ПозицийТоваровСЗапретом",                  ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.Товары.Итог("РегионализацияЗапрещено")));
	ПараметрыДополнения.Вставить("ПозицийТоваровСРазрешением",               ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.Товары.Итог("РегионализацияРазрешено")));
	ПараметрыДополнения.Вставить("ПозицийТоваровСВыполненнымиУсловиями",     ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.Товары.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями")));
	ПараметрыДополнения.Вставить("ПозицийТоваровСНеВыполненнымиУсловиями",   ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.Товары.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями")));
	ПараметрыДополнения.Вставить("ПозицийТоваровНаПроверку",                 ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.Товары.Итог("РегионализацияНеЗаполнено")));
	
	ПараметрыДополнения.Вставить("ПроверятьНаРегионализацию",                ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, Ложь, Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") > 0));
	ПараметрыДополнения.Вставить("ЕстьОтклонения",                           Форма.СтатусОтклонений = 2 И Не ЗначениеЗаполнено(Объект.НомерАктаНесоответствия));
	ПараметрыДополнения.Вставить("НезначительныеОтклонения",                 Форма.СтатусОтклонений = 1 И Не ЗначениеЗаполнено(Объект.НомерАктаНесоответствия));
	
	ПараметрыДополнения.Вставить("НомерТранспортногоСредстваНеУказан",       ?(НетПеревозки, Ложь, Форма.НомерВМаршрутеНеУказан));
	ПараметрыДополнения.Вставить("НомерТранспортногоСредстваВСДНеУказан",    ?(НетПеревозки, Ложь, Форма.НомерВМаршрутеВСДНеУказан И Не Форма.ОформлениеБумажногоВСД));
	
	ПараметрыДополнения.Вставить("ПозицийМаршрутовВозвратаСЗапретом",                ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.МаршрутВозврата.Итог("РегионализацияЗапрещено")));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовВозвратаСРазрешением",             ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.МаршрутВозврата.Итог("РегионализацияРазрешено")));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовВозвратаСВыполненнымиУсловиями",   ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.МаршрутВозврата.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями")));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями", ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.МаршрутВозврата.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями")));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовВозвратаНаПроверку",               ?(НетПеревозки или НЕ ЕстьПеремещениеМеждуРегионами, 0, Объект.МаршрутВозврата.Итог("РегионализацияНеЗаполнено")));
	
	ПараметрыДополнения.Вставить("УсловияВыполнены", (ПараметрыДополнения.ПозицийТоваровСНеВыполненнымиУсловиями = 0
	                                                И ПараметрыДополнения.ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями = 0));
	
	ПараметрыДополнения.Вставить("ПравилаРегионализацииЗаполнены", (ПараметрыДополнения.ПозицийТоваровНаПроверку = 0
	                                                              И ПараметрыДополнения.ПозицийМаршрутовВозвратаНаПроверку = 0));
	
	Если ЗначениеЗаполнено(Объект.НомерАктаНесоответствия) Тогда
		МассивПредставлений = Новый Массив;
		МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + НСтр("ru = 'Расхождения оформлены в'") + " "));
		ПредставлениеАктаНесоответствия = НСтр("ru = 'акте несоответствия №%1 от %2%3'");
		ПредставлениеСерии = "";
		Если ЗначениеЗаполнено(Объект.СерияАктаНесоответствия)Тогда
			ПредставлениеСерии = СтрШаблон(НСтр("ru = ', серия %1'"),Объект.СерияАктаНесоответствия);
		КонецЕсли;
		ПредставлениеАктаНесоответствия = СтрШаблон(ПредставлениеАктаНесоответствия, Объект.НомерАктаНесоответствия, Формат(Объект.ДатаАктаНесоответствия, "ДЛФ=D"), ПредставлениеСерии);
		ПредставлениеАктаНесоответствия = Новый ФорматированнаяСтрока(ПредставлениеАктаНесоответствия,,,, "ОткрытьАктОНесоответствии");
		МассивПредставлений.Добавить(ПредставлениеАктаНесоответствия);
		ПараметрыДополнения.Вставить("АктНесоответствия", Новый ФорматированнаяСтрока(МассивПредставлений));
	КонецЕсли;
	
	Возврат ПараметрыДополнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатусаВЕТИС)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ПроверятьНаРегионализацию", ПараметрыДополненияСтатусаВЕТИС.ПроверятьНаРегионализацию);
	ДанныеДокумента.Вставить("ЕстьОтклонения", ПараметрыДополненияСтатусаВЕТИС.ЕстьОтклонения);
	ДанныеДокумента.Вставить("НезначительныеОтклонения", ПараметрыДополненияСтатусаВЕТИС.НезначительныеОтклонения);
	ДанныеДокумента.Вставить("ЕстьНеПроверенныеСтроки", НЕ ПараметрыДополненияСтатусаВЕТИС.ПравилаРегионализацииЗаполнены);
	ДанныеДокумента.Вставить("ПеремещениеЗапрещено",
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСЗапретом <> 0);
	ДанныеДокумента.Вставить("ПеремещениеРазрешеноПриВыполненииУсловий", 
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями <> 0);
	ДанныеДокумента.Вставить("ПеремещениеРазрешено", 
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСРазрешением <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовВозвратаСРазрешением <> 0);
	ДанныеДокумента.Вставить("УсловияВыполнены", ПараметрыДополненияСтатусаВЕТИС.УсловияВыполнены);
	
	ДанныеДокумента.Вставить("НомерТранспортногоСредстваНеУказан", ПараметрыДополненияСтатусаВЕТИС.НомерТранспортногоСредстваНеУказан);
	ДанныеДокумента.Вставить("НомерТранспортногоСредстваВСДНеУказан", ПараметрыДополненияСтатусаВЕТИС.НомерТранспортногоСредстваВСДНеУказан);
	
	СтатусИДальнейшиеДействия = Документы.ВходящаяТранспортнаяОперацияВЕТИС.СтатусИДальнейшиеДейстияВозможностиПеремещения(
		ДанныеДокумента);
	
	Возврат РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусИДальнейшиеДействия.Статус,
		СтатусИДальнейшиеДействия.ДальнейшиеДействия)
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусыПослеПринятияОтветаРегионализации()
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.КГашениюВСД);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Обрабатывается);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашены);
	Массив.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb);
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьКорректностьДанных" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьВозможностьПеремещения" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуРегионализации"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеУсловияПеремещения" Тогда
		
		ОткрытьФормуРегионализации();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		ОткрытьФорму("Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВнестиНомераТранспортныхСредств" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УказатьНомераТранспортныхСредств" Тогда
		
		ИмяОбщейФормы = "ПунктыМаршрутаВЕТИС";
		ПараметрыФормы = Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилищеТабличнойЧастиПунктыМаршрута());
		ПараметрыФормы.Вставить("РежимРаботыФормы", Новый Структура("ИзменятьСоставСтрок", Ложь));
		ПараметрыФормы.РежимРаботыФормы.Вставить("ВидПунктаМаршрута", Новый Структура("ТолькоПросмотр", Истина));
		ПараметрыФормы.РежимРаботыФормы.Вставить("ТипТранспорта", Новый Структура("ТолькоПросмотр", Истина));
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеФормыНедоступно);
		ПараметрыОповещения = "Маршрут";
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения);
		ОткрытьФорму("ОбщаяФорма." + ИмяОбщейФормы, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработкаОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьАктОНесоответствии" Тогда
		ПараметрыОткрытияФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыАктаОНесоответствииВЕТИС();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы,Объект);
		ПараметрыОткрытияФормы.Основание = Объект.Ссылка;
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, "АктНесоответствия");
		ПараметрыОбработчика = Новый Структура("Форма,ОповещениеПриЗавершении", ЭтотОбъект, Оповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыАктаОНесоответствии",
			ИнтеграцияВЕТИССлужебныйКлиент, ПараметрыОбработчика);
		ОткрытьФорму("Обработка.ЗаполнениеАктаОНесоответствииВЕТИС.Форма.Форма", ПараметрыОткрытияФормы,
			ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,, ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb" Тогда
		
		ИнтеграцияВЕТИСКлиент.ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(Объект.Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НетДоступа") Тогда
		
		УточнениеГиперссылки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"НетДоступа","");
		ИнтеграцияВЕТИСКлиент.ПредупредитьОбОтсутствииДоступа(УточнениеГиперссылки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеИЗаписатьДокумент();
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Результат = СгенерироватьСерииНаСервере();
	
	ИнтеграцияВЕТИСКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат.ЗаполнениеЗавершено,
		Результат.СписокОшибок);
		
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ТоварыСерия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма, ПараметрыУказанияСерий.Товары, Текст, СтандартнаяОбработка);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыСерий(Объект, ПараметрыУказанияСерий)
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
								Объект, Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда							
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Товары);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТоварыУточнение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовСерий(Элементы, ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИспользоватьСерииНоменклатуры = ПараметрыУказанияСерий.Товары.ИспользоватьСерииНоменклатуры;
	Иначе
		ИспользоватьСерииНоменклатуры = Ложь;
	КонецЕсли;
	
	Элементы.СгенерироватьСерию.Видимость       = ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыБезРазбиенияСерия.Видимость  = ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыПредставлениеСерия.Видимость = ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыСпискомСгенерироватьСерии.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость                     = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		Результат = ИнтеграцияВЕТИС.СгенерироватьСерии(Объект,
			Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыУказанияСерий.Товары, Объект.ТоварыУточнение);
	Иначе
		Результат = Новый Структура("ЗаполнениеЗавершено, СписокОшибок", Ложь, Неопределено);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ЭтотОбъект,
			ПараметрыУказанияСерий.Товары,
			ТекущаяСтрокаИдентификатор,
			КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Маршрут

&НаСервере
Функция АдресВоВременномХранилищеТабличнойЧастиПунктыМаршрута()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Маршрут = ДокументОбъект.Маршрут.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧОбъект Из Объект.Маршрут Цикл
		
		СтрокаТЧ = Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧОбъект);
		СтрокаТЧ.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Маршрут,
		УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Функция АдресаТабличныхЧастейДляФормыРедактированияМаршрута()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	МаршрутВозврата = ДокументОбъект.МаршрутВозврата.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧОбъект Из Объект.МаршрутВозврата Цикл
		
		СтрокаТЧ = МаршрутВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧОбъект);
		СтрокаТЧ.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
		МаршрутВозврата,
		УникальныйИдентификатор);
		
	АдресВоВременномХранилищеТовары = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	АдресВоВременномХранилищеРегионализация = ПоместитьВоВременноеХранилище(Объект.Регионализация.Выгрузить(), УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Результат.Вставить("АдресВоВременномХранилищеТовары", АдресВоВременномХранилищеТовары);
	Результат.Вставить("АдресВоВременномХранилищеРегионализация", АдресВоВременномХранилищеРегионализация);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПунктыМаршрута(АдресВоВременномХранилище)
	
	Маршрут = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Объект.Маршрут.Очистить();
	ДанныеПоследнегоТранспорта = Неопределено;
	Для Каждого СтрокаТЧ Из Маршрут Цикл
		
		Если СтрокаТЧ.СПерегрузкой Тогда
			ДанныеПоследнегоТранспорта = СтрокаТЧ;
		КонецЕсли;
		НоваяСтрока = Объект.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ДанныеАдресаСтруктура = СтрокаТЧ.ДанныеАдреса;
		
	КонецЦикла;
	
	Если ДанныеПоследнегоТранспорта <> Неопределено
		И ЗначениеЗаполнено(ДанныеПоследнегоТранспорта.НомерТранспортногоСредства) Тогда
		
		СтруктураТранспортногоСредства = Новый Структура(ПоляТранспортногоСредства());
		ЗаполнитьЗначенияСвойств(СтруктураТранспортногоСредства, ДанныеПоследнегоТранспорта, ПоляТранспортногоСредства());
		
		ЕстьОтличия = Ложь;
		Для каждого ПолеСтруктурыТранспорта Из СтруктураТранспортногоСредства Цикл
			Если Объект[ПолеСтруктурыТранспорта.Ключ] <> СтруктураТранспортногоСредства[ПолеСтруктурыТранспорта.Ключ] Тогда
				ЕстьОтличия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТранспортногоСредства.Вставить("ОбновитьНомерТС", Не ЗначениеЗаполнено(Объект.НомерТранспортногоСредства));
		СтруктураТранспортногоСредства.Вставить("ЕстьОтличия",     ЕстьОтличия);
		
		Возврат СтруктураТранспортногоСредства;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПунктыМаршрутаВозврата(АдресВоВременномХранилище)
	
	Данные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Объект.МаршрутВозврата.Очистить();
	Для Каждого СтрокаТЧ Из Данные.Маршрут Цикл
		
		НоваяСтрока = Объект.МаршрутВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ДанныеАдресаСтруктура = СтрокаТЧ.ДанныеАдреса;
		РассчитатьРеквизитыРегионализации(НоваяСтрока, "МаршрутВозврата");
		
	КонецЦикла;
	
	ИндексСтрокиТовары = 0;
	Для каждого СтрокаТовара Из Данные.Товары Цикл
		Если Объект.Товары.Количество() = (ИндексСтрокиТовары + 1) Тогда
			СтрокаДокумента = Объект.Товары[ИндексСтрокиТовары];
		Иначе
			СтрокаДокумента = Неопределено;
		КонецЕсли;
		Если НЕ СтрокаДокумента = Неопределено Тогда
			СтрокаДокумента.РезультатПроверкиПравилРегионализации = СтрокаТовара.РезультатПроверкиПравилРегионализации;
			СтрокаДокумента.УсловияРегионализацииВыполнены = СтрокаТовара.УсловияРегионализацииВыполнены;
		КонецЕсли;
		
		ИндексСтрокиТовары = ИндексСтрокиТовары + 1;
	КонецЦикла; 
	Объект.Регионализация.Загрузить(Данные.Регионализация);
	
	Для каждого СтрТовары Из Объект.Товары Цикл
		РассчитатьРеквизитыРегионализации(СтрТовары, "Товары");
	КонецЦикла;
	
	Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	Иначе
		ОбновитьСтатусВЕТИС(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМаршрутВозврата()
	
	Для каждого СтрокаТЧ Из Объект.МаршрутВозврата Цикл
		РассчитатьРеквизитыРегионализации(СтрокаТЧ, "МаршрутВозврата");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Регионализация

&НаСервере
Процедура ОбновитьКэшируемыеПараметрыРегионализации()
	
	Если КэшируемыеПараметрыРегионализации = Неопределено Тогда
		
		КэшируемыеПараметрыРегионализации = Новый Структура;
		КэшируемыеПараметрыРегионализации.Вставить("ПараметрыРегионализацииПоВидамНоменклатуры", Новый Соответствие);
		
	КонецЕсли;
	
	КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры.Очистить();
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		ПараметрыРегионализацииПоВидуПродукции = Новый Структура("РезультатПроверкиПравилРегионализации, УсловияРегионализацииВыполнены");
		ЗаполнитьЗначенияСвойств(ПараметрыРегионализацииПоВидуПродукции, СтрокаТабличнойЧасти);
		КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры.Вставить(
			СтрокаТабличнойЧасти.ВидПродукцииВСД, ПараметрыРегионализацииПоВидуПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоОтменитьРезультатыПроверкиРегионализации(Форма)
	Объект = Форма.Объект;
	
	ТоварыРегионализацияЗапрещено  = Объект.Товары.Итог("РегионализацияЗапрещено") <> 0;
	МаршрутВозвратаРегионализацияЗапрещено = Объект.МаршрутВозврата.Итог("РегионализацияЗапрещено") <> 0;
	
	ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями  = Объект.Товары.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") <> 0;
	МаршрутВозвратаРегионализацияРазрешеноСНеВыполненнымиУсловиями = Объект.МаршрутВозврата.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") <> 0;
	
	ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями  = Объект.Товары.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями") <> 0;
	МаршрутВозвратаРегионализацияРазрешеноСВыполненнымиУсловиями = Объект.МаршрутВозврата.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями") <> 0;
	
	ТоварыРегионализацияРазрешено  = Объект.Товары.Итог("РегионализацияРазрешено") <> 0;
	МаршрутВозвратаРегионализацияРазрешено = Объект.МаршрутВозврата.Итог("РегионализацияРазрешено") <> 0;
	
	Результат = Ложь;
	Если ТоварыРегионализацияЗапрещено
		ИЛИ МаршрутВозвратаРегионализацияЗапрещено Тогда
		Результат = ТоварыРегионализацияЗапрещено <> МаршрутВозвратаРегионализацияЗапрещено;
	ИначеЕсли ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями
		ИЛИ МаршрутВозвратаРегионализацияРазрешеноСНеВыполненнымиУсловиями Тогда
		Результат = ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями <> МаршрутВозвратаРегионализацияРазрешеноСНеВыполненнымиУсловиями;
	ИначеЕсли ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями
		ИЛИ МаршрутВозвратаРегионализацияРазрешеноСВыполненнымиУсловиями Тогда
		Результат = ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями <> МаршрутВозвратаРегионализацияРазрешеноСВыполненнымиУсловиями;
	ИначеЕсли ТоварыРегионализацияРазрешено
		ИЛИ МаршрутВозвратаРегионализацияРазрешено Тогда
		Результат = ТоварыРегионализацияРазрешено <> МаршрутВозвратаРегионализацияРазрешено;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтменитьРезультатыПроверкиРегионализации()
	
	// При изменении одной из строк маршрутов, косвенно меняются и другие строки,
	// поэтому отменяем результаты проверки регионализации.
	// Отмену флагов выполнения условий регионализации в ТЧ Регионализация не выполняем.
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("Товары");
	ИменаТабличныхЧастей.Добавить("МаршрутВозврата");
	
	Для каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПустаяСсылка();
			СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены = Ложь;
			РассчитатьРеквизитыРегионализации(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСтатусВЕТИС(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьРеквизитыРегионализации(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Товары"
	   И СтрокаТабличнойЧасти.ВозвращаемоеКоличествоВЕТИС = 0 Тогда
		СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 3;
		
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено") Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено") Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 2;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
		И СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
		И НЕ СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 1;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 1;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	Иначе
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 3;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПоместитьУсловияРегионализацииСервер()
	
	// Передаем только выполненные условия для сокращения объема данных
	ВыполненныеУсловия = Объект.Регионализация.Выгрузить(Новый Структура("УсловиеВыполняется", Истина));
	Возврат ПоместитьВоВременноеХранилище(ВыполненныеУсловия, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРегионализации(ДополнительныйОтбор = Неопределено)
	
	ПараметрыДополнения = ПараметрыДополненияСтатусаВЕТИС(ЭтотОбъект);
	
	Если НЕ ПараметрыДополнения.ПроверятьНаРегионализацию Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДополнения.ПозицийТоваровСВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийТоваровСНеВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийМаршрутовВозвратаСВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийМаршрутовВозвратаСНеВыполненнымиУсловиями = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрываемойФормы.Вставить("АдресХраненияУсловияРегионализации", ПоместитьУсловияРегионализацииСервер());
	Если НЕ ДополнительныйОтбор = Неопределено Тогда
		Для каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			ПараметрыОткрываемойФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыОткрываемойФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр или РедактированиеФормыНедоступно);
	
	ОткрытьФорму("Обработка.УсловияРегионализацииВЕТИС.Форма.УсловияРегионализации",
		ПараметрыОткрываемойФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ОбработкаИзмененияУсловийРегионализации", ЭтотОбъект, ДополнительныйОтбор),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияУсловийРегионализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПараметрыРегионализацииСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыРегионализацииСервер(Результат)
	
	Модифицированность = Истина;
	
	Изменения = ПолучитьИзВременногоХранилища(Результат.РезультатАдрес);
	
	Объект.Регионализация.Загрузить(Изменения.Регионализация);
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			СтрокаТЧ.УсловияРегионализацииВыполнены = Изменения.ВыполнениеУсловийПоВидамПродукции.Получить(СтрокаТЧ.ВидПродукцииВСД);
			РассчитатьРеквизитыРегионализации(СтрокаТЧ, "Товары");
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из Объект.МаршрутВозврата Цикл
		Если СтрокаТЧ.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			СтрокаТЧ.УсловияРегионализацииВыполнены = Изменения.ВыполнениеУсловийПоНомерамМаршрутов.Получить(СтрокаТЧ.НомерСтроки);
			РассчитатьРеквизитыРегионализации(СтрокаТЧ, "МаршрутВозврата");
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	Иначе
		ОбновитьСтатусВЕТИС(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Представления

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаВЕТИС(ИмяПериода, ДанныеПериода)
	
	ПредставлениеПустого = НСтр("ru = '<не заполнено>'");
	
	Представление = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПериодаВЕТИС(
		ДанныеПериода[ИмяПериода + "ТочностьЗаполнения"],
		ДанныеПериода[ИмяПериода + "НачалоПериода"],
		ДанныеПериода[ИмяПериода + "КонецПериода"],
		ДанныеПериода[ИмяПериода + "Строка"]);
	
	Представление = ?(ЗначениеЗаполнено(Представление), Представление, ПредставлениеПустого);
	Цвет = ?(Не ЗначениеЗаполнено(Представление), ЦветТекстаПоля(), Неопределено);
	
	Возврат Новый ФорматированнаяСтрока(
		Представление,,
		Цвет,,
		"РедактироватьПериод" + ИмяПериода);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПоляВСД(ДанныеВСД, ИмяПоля)
	
	Если Не ЗначениеЗаполнено(ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		ПредставлениеПоля = Новый ФорматированнаяСтрока("");
	ИначеЕсли ИмяПоля = "ДатаПроизводства" Тогда
		ПредставлениеПоля = ПредставлениеПериодаВЕТИС(ИмяПоля, ДанныеВСД);	
	ИначеЕсли ЗначениеЗаполнено(ДанныеВСД[ИмяПоля]) Тогда
		ПредставлениеПоля = Новый ФорматированнаяСтрока(Строка(ДанныеВСД[ИмяПоля]),,,, ПолучитьНавигационнуюСсылку(ДанныеВСД[ИмяПоля]));
	ИначеЕсли ЗначениеЗаполнено(ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		ПредставлениеПоля = Новый ФорматированнаяСтрока(НСтр("ru = '<не заполнено>'"));
	Иначе
		ПредставлениеПоля = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	Возврат ПредставлениеПоля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТранспортногоСредства(ДанныеТранспортногоСредства)
	
	Цвет = Неопределено;
	Если ЗначениеЗаполнено(ДанныеТранспортногоСредства.ТипТранспорта) Тогда
		МассивНомеров = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеТранспортногоСредства.НомерТранспортногоСредства) Тогда
			МассивНомеров.Добавить("№ " + ДанныеТранспортногоСредства.НомерТранспортногоСредства);
		Иначе
			Если ДанныеТранспортногоСредства.ТипТранспорта <> ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота") Тогда
				МассивНомеров.Добавить(НСтр("ru = '№ <не заполнено>'"));
				Цвет = ЦветТекстаПоля();
			КонецЕсли;
		КонецЕсли;
		ЭтоАвтомобиль = ДанныеТранспортногоСредства.ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Автомобиль");
		Если ЭтоАвтомобиль И ЗначениеЗаполнено(ДанныеТранспортногоСредства.НомерАвтомобильногоПрицепа) Тогда
			МассивНомеров.Добавить(СтрШаблон(НСтр("ru = 'прицеп №%1'"), ДанныеТранспортногоСредства.НомерАвтомобильногоПрицепа));
		КонецЕсли;
		Если ЭтоАвтомобиль И ЗначениеЗаполнено(ДанныеТранспортногоСредства.НомерАвтомобильногоКонтейнера) Тогда
			МассивНомеров.Добавить(СтрШаблон(НСтр("ru = 'контейнер №%1'"), ДанныеТранспортногоСредства.НомерАвтомобильногоКонтейнера));
		КонецЕсли;
		ПредставлениеТранспортногоСредства = ?(ДанныеТранспортногоСредства.ТипТранспорта <> ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота"),
			СтрШаблон("%1 (%2)", ДанныеТранспортногоСредства.ТипТранспорта, СтрСоединить(МассивНомеров, ", ")),
			СтрШаблон("%1", ДанныеТранспортногоСредства.ТипТранспорта));
	Иначе
		ПредставлениеТранспортногоСредства = НСтр("ru = '<не заполнено>'");
		Цвет = ЦветТекстаПоля();
	КонецЕсли;
	Возврат Новый ФорматированнаяСтрока(ПредставлениеТранспортногоСредства,, Цвет,, "ОткрытьОбщуюФормуТранспортноеСредство");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		Если НомерВМаршрутеВСДНеУказан Тогда
			МассивВСД = Объект.Товары.Выгрузить(,"ВетеринарноСопроводительныйДокумент").ВыгрузитьКолонку("ВетеринарноСопроводительныйДокумент");
			ЗаполнитьДанныеТранспортногоСредстваВСД(МассивВСД);
		КонецЕсли;
		ОбновитьСтатусВЕТИС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеИЗаписатьДокумент()
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораВСД(ПараметрыОбновления, МножественныйВыбор = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОбновления);
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("МножественныйВыбор", МножественныйВыбор);
	
	ОбязательныеРеквизитыДляОтбора = Новый Массив;
	Если Объект.ГашениеНаСВХ Тогда
		ОбязательныеРеквизитыДляОтбора.Добавить("ГрузоотправительХозяйствующийСубъект");
		ОбязательныеРеквизитыДляОтбора.Добавить("ГрузоотправительПредприятие");
	КонецЕсли;
	Если Не Объект.ГашениеНаСВХ И Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие
		И ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие) Тогда
		ОбязательныеРеквизитыДляОтбора.Добавить("ПеревозчикХозяйствующийСубъект");
		ОбязательныеРеквизитыДляОтбора.Добавить("СпособХранения");
	КонецЕсли;
	Если Не Объект.ГашениеНаСВХ И Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие
		И ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие) Или Не Объект.ТТНУказан Тогда
		ОбязательныеРеквизитыДляОтбора.Добавить("ТипТТН");
		ОбязательныеРеквизитыДляОтбора.Добавить("СерияТТН");
		ОбязательныеРеквизитыДляОтбора.Добавить("НомерТТН");
		ОбязательныеРеквизитыДляОтбора.Добавить("ДатаТТН");
	КонецЕсли;
	
	ДанныеОтбора = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
	
	Если ТранспортноеСредствоПоДаннымВСД = Неопределено Тогда
		// Не накладываем отбор по транспортному средству, если ВСД еще не выбрана.
		Для каждого Поле Из СтрРазделить(ПоляТранспортногоСредства(), ",") Цикл
			ДанныеОтбора.Удалить(Поле);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из ДанныеОтбора Цикл
		Если ОбязательныеРеквизитыДляОтбора.Найти(ЭлементОтбора.Ключ) <> Неопределено Тогда
			ДанныеОтбора.Вставить(ЭлементОтбора.Ключ, Объект[ЭлементОтбора.Ключ]);
		ИначеЕсли Объект.ГашениеНаСВХ И ЭлементОтбора.Ключ = "ГрузополучательПредприятие" Тогда
			ДанныеОтбора.Удалить(ЭлементОтбора.Ключ);
		ИначеЕсли ТранспортноеСредствоПоДаннымВСД <> Неопределено И ТранспортноеСредствоПоДаннымВСД.Свойство(ЭлементОтбора.Ключ) Тогда
			ДанныеОтбора.Вставить(ЭлементОтбора.Ключ, ТранспортноеСредствоПоДаннымВСД[ЭлементОтбора.Ключ]);
		ИначеЕсли ЗначениеЗаполнено(Объект[ЭлементОтбора.Ключ]) Тогда
			ДанныеОтбора.Вставить(ЭлементОтбора.Ключ, Объект[ЭлементОтбора.Ключ]);
		Иначе
			ДанныеОтбора.Удалить(ЭлементОтбора.Ключ);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормыПодбора.Вставить("Отбор", ДанныеОтбора);
	Если Объект.Товары.Количество() И ЗначениеЗаполнено(Объект.Товары.Получить(0).ВетеринарноСопроводительныйДокумент) Тогда
		ПараметрыФормыПодбора.Вставить("ОформлениеБумажногоВСД", ОформлениеБумажногоВСД);
	КонецЕсли;
	
	ПодобранныеВДокументСтроки = Новый Массив;
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Если СтрокаТовар.ПолучитьИдентификатор() <> Элементы.Товары.ТекущаяСтрока Или МножественныйВыбор Тогда
			ПодобранныеВДокументСтроки.Добавить(СтрокаТовар.ВетеринарноСопроводительныйДокумент);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормыПодбора.Вставить("ПодобранныеВДокументСтроки", ПодобранныеВДокументСтроки);
	
	ОткрытьФорму("Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Форма.ПодборОформленныхВСД",
		ПараметрыФормыПодбора, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность = Истина;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,,"ДокументОснование");
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискДокументаОснованияПоНомеруИДате(Знач СвязанныеДокументы)
	Возврат ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы.Выгрузить());
КонецФункции	

&НаСервереБезКонтекста
Функция ДоступныеЕдиницыИзменения(Продукция)
	
	Возврат Новый Массив(ИнтеграцияВЕТИСПовтИсп.ДоступныеЕдиницыИзменения(Продукция));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеТабличныхЧастейОтличаются(ТекущаяТабличнаяЧасть, АдресТабличнойЧастиВСД, КолонкиСравнения)
	
	ТабличнаяЧастьВСД = ПолучитьИзВременногоХранилища(АдресТабличнойЧастиВСД);
	Если Не ТабличнаяЧастьВСД.Количество() И ТекущаяТабличнаяЧасть.Количество() Тогда
		
		Для каждого Стр Из ТекущаяТабличнаяЧасть Цикл
			Для каждого Колонка Из СтрРазделить(КолонкиСравнения, ", ", Ложь) Цикл
				Если ЗначениеЗаполнено(Стр[Колонка]) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		КоллекцииИдентичны = Истина;
		
	Иначе
		Если ТабличнаяЧастьВСД.Количество() <> ТекущаяТабличнаяЧасть.Количество() Тогда
			Возврат Истина;
		Иначе
			НомерСтроки = 0;
			Пока НомерСтроки < ТабличнаяЧастьВСД.Количество() Цикл
				Для каждого Колонка Из СтрРазделить(КолонкиСравнения, ", ", Ложь) Цикл
					Если ТабличнаяЧастьВСД.Получить(НомерСтроки)[Колонка] <> 
						ТекущаяТабличнаяЧасть.Получить(НомерСтроки)[Колонка] Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			КоллекцииИдентичны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не КоллекцииИдентичны;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИдентификаторСтроки, ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Регионализация" Тогда
		Продукция = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки))[0].Продукция;
		СтруктураОтбора = Новый Структура("ВидПродукции", Продукция.ВидПродукции);
	Иначе
		КолонкаОтбора = ?(ИмяТабличнойЧасти = "УпаковкиВЕТИС", "ИдентификаторСтрокиТовары", "ИдентификаторСтроки");
		СтруктураОтбора = Новый Структура(КолонкаОтбора, ИдентификаторСтроки);
	КонецЕсли;
	
	СтрокиКУдалению = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Если ИмяТабличнойЧасти = "УпаковкиВЕТИС" Тогда
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, СтрокаКУдалению.ИдентификаторСтроки, "ШтрихкодыУпаковок");
		КонецЕсли;
		ИндексСтроки = Объект[ИмяТабличнойЧасти].Индекс(СтрокаКУдалению);
		Объект[ИмяТабличнойЧасти].Удалить(ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораВСДПоПредприятиюГрузополучателя(СвязиПараметровВыбораСписком, СвязиПараметровВыбораБезРазбиения, ГашениеНаСВХ)
	
	РежимИзмененияГрузополучателяПредприятия = РежимИзмененияСвязанногоЗначения.Очищать;
	Если ГашениеНаСВХ Тогда
		РежимИзмененияГрузополучателяПредприятия = РежимИзмененияСвязанногоЗначения.НеИзменять;
	КонецЕсли;
	
	РедактируемаяСвязь = Новый СвязьПараметраВыбора("Отбор.ГрузополучательПредприятие", "Объект.ГрузополучательПредприятие", РежимИзмененияГрузополучателяПредприятия);
	Если (СвязиПараметровВыбораБезРазбиения.Найти(РедактируемаяСвязь) = Неопределено Или
		СвязиПараметровВыбораСписком.Найти(РедактируемаяСвязь) = Неопределено) Тогда
		
		НовыйСвязиПараметровВыбораБезРазбиения = Новый Массив(СвязиПараметровВыбораБезРазбиения);
		НовыйСвязиПараметровВыбораСписком = Новый Массив(СвязиПараметровВыбораСписком);
		Если РежимИзмененияГрузополучателяПредприятия = РежимИзмененияСвязанногоЗначения.Очищать Тогда
			РежимИзмененияГрузополучателяПредприятияДляПоиска = РежимИзмененияСвязанногоЗначения.НеИзменять;
		Иначе
			РежимИзмененияГрузополучателяПредприятияДляПоиска = РежимИзмененияСвязанногоЗначения.Очищать;
		КонецЕсли;
		СвязьПоиска = Новый СвязьПараметраВыбора("Отбор.ГрузополучательПредприятие", "Объект.ГрузополучательПредприятие", РежимИзмененияГрузополучателяПредприятияДляПоиска);
		Индекс = НовыйСвязиПараметровВыбораСписком.Найти(СвязьПоиска);
		Если Индекс <> Неопределено Тогда
			НовыйСвязиПараметровВыбораСписком.Установить(Индекс, РедактируемаяСвязь);
		КонецЕсли;
		Индекс = НовыйСвязиПараметровВыбораБезРазбиения.Найти(СвязьПоиска);
		Если Индекс <> Неопределено Тогда
			НовыйСвязиПараметровВыбораБезРазбиения.Установить(Индекс, РедактируемаяСвязь);
		КонецЕсли;
		
		СвязиПараметровВыбораБезРазбиения = Новый ФиксированныйМассив(НовыйСвязиПараметровВыбораБезРазбиения);
		СвязиПараметровВыбораСписком = Новый ФиксированныйМассив(НовыйСвязиПараметровВыбораСписком);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляТранспортногоСредства()
	Возврат "ТипТранспорта,НомерТранспортногоСредства,НомерАвтомобильногоПрицепа,НомерАвтомобильногоКонтейнера";
КонецФункции

Функция ПоляПредприятияИАдреса()
	Возврат "Адрес,АдресПредставление,ДанныеАдресаСтруктура,СПерегрузкой,Предприятие";
КонецФункции

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ИнтеграцияВЕТИС.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеВходящаяТранспортнаяОперацияВЕТИС.Тип;
	
	ЗаполнитьСлужебныеРеквизитыСерий(Объект, ПараметрыУказанияСерий);
	
	Если Объект.Товары.Количество() Тогда
		ИнициализироватьСлужебныеРеквизитыТоваров();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Объект.Товары.Количество() = 0 Тогда
		// В новом документе (не заполненном на основании ВСД, значение указания ТТН - истина по умолчанию.
		Объект.ТТНУказан = Истина;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыМаршрутВозврата();
	ОбновитьКэшируемыеПараметрыРегионализации();

	ПараметрыОбновленияСтатуса = Неопределено;
	
	ИнтеграцияВЕТИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыБезРазбиенияХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыБезРазбиенияСерия");
	
	ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары.Выгрузить(, "Продукция"), ТочностьДатПродукции);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтборыДляРеквизитовДокументаПоОснованию(ДокументОснование)
	
	Возврат ИнтеграцияВЕТИСВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС"), ДокументОснование);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	ИнициализацияТоваровБезРазбиения = Ложь;
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ЭтоИмпорт = ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект)
		И Объект.ГрузоотправительХозяйствующийСубъект = Объект.ГрузополучательХозяйствующийСубъект
		И Не ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие);
	
	КлючевыеПоляОчисткиВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
	КлючевыеПоляОчисткиВСД.Удалить("ТипТранспорта");
	КлючевыеПоляОчисткиВСД.Удалить("НомерТранспортногоСредства");
	КлючевыеПоляОчисткиВСД.Удалить("НомерАвтомобильногоКонтейнера");
	КлючевыеПоляОчисткиВСД.Удалить("НомерАвтомобильногоПрицепа");
	
	Если Инициализация Тогда
		Для Каждого КлючИЗначение Из КлючевыеПоляОчисткиВСД Цикл
			Элементы[КлючИЗначение.Ключ].ПредупреждениеПриРедактировании = НСтр("ru = 'Табличная часть товаров будет очищена'");
			Если ЗначениеЗаполнено(Объект[КлючИЗначение.Ключ]) Тогда
				Элементы[КлючИЗначение.Ключ].ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Иначе
				Элементы[КлючИЗначение.Ключ].ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого КлючИЗначение Из КлючевыеПоляОчисткиВСД Цикл
			Если СтруктураРеквизитов.Свойство(КлючИЗначение.Ключ) Тогда
				Если ЗначениеЗаполнено(Объект[КлючИЗначение.Ключ]) Тогда
					Элементы[КлючИЗначение.Ключ].ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
				Иначе
					Элементы[КлючИЗначение.Ключ].ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураРеквизитов.Вставить("Товары");
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельВСДСвернута")
		Или Инициализация Тогда
		
		Элементы.ГруппаТоварыСпискомПанель.Видимость = Не Форма.ПанельВСДСвернута;
		Элементы.ГруппаТоварыСпискомПанельСвернута.Видимость = Форма.ПанельВСДСвернута;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузополучательХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ГрузополучательПредприятие")
		Или Инициализация Тогда
		
		ПредставленияГрузополучателя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ГрузополучательХозяйствующийСубъект, Объект.ГрузополучательПредприятие, "Грузополучатель");
		Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя = ПредставленияГрузополучателя.КонтрагентХозяйствующегоСубъекта.Представление;
		Форма.ПредставлениеСопоставленияПредприятияГрузополучателя = ПредставленияГрузополучателя.ТорговыйОбъект.Представление;
		
		СопоставленныйОбъект = ПредставленияГрузополучателя.ТорговыйОбъект.Ссылка;
		Если СопоставленныйОбъект <> Неопределено И СопоставленныйОбъект.Количество() = 1 Тогда
			Объект.ТорговыйОбъект = СопоставленныйОбъект.Получить(0).Значение;
		ИначеЕсли СопоставленныйОбъект <> Неопределено
			И СопоставленныйОбъект.Количество() > 1
			И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ОтборыДляРеквизитов = ОтборыДляРеквизитовДокументаПоОснованию(Объект.ДокументОснование);
			Если ОтборыДляРеквизитов <> Неопределено Тогда
				Объект.ТорговыйОбъект = ОтборыДляРеквизитов.ГрузополучательПредприятие;
			КонецЕсли;
		Иначе
			Если СопоставленныйОбъект <> Неопределено И СопоставленныйОбъект.Количество() > 0 Тогда
				Объект.ТорговыйОбъект = СопоставленныйОбъект.Получить(0).Значение;
			Иначе
				Объект.ТорговыйОбъект = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСлужебныеРеквизитыСерий(Объект, Форма.ПараметрыУказанияСерий);
		
		УстановитьВидимостьЭлементовСерий(Элементы, Форма.ПараметрыУказанияСерий);
		
		СтруктураРеквизитов.Вставить("ТоварыВСД");
		СтруктураРеквизитов.Вставить("ПеревозчикХозяйствующийСубъект");
		СтруктураРеквизитов.Вставить("СпособХранения");
		СтруктураРеквизитов.Вставить("Регионализация");
		СтруктураРеквизитов.Вставить("ПереключательТТН");
		СтруктураРеквизитов.Вставить("ТранспортноеСредство");
		СтруктураРеквизитов.Вставить("Маршрут");
		СтруктураРеквизитов.Вставить("МаршрутВозврата");
		СтруктураРеквизитов.Вставить("СвязанныеДокументыВозврата");
		
		Элементы.ГрузополучательПредприятие.Доступность = ЗначениеЗаполнено(Объект.ГрузополучательХозяйствующийСубъект);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Дата")
		Или Инициализация Тогда
		
		СтруктураРеквизитов.Вставить("ТоварыВСД");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДатаПоступленияГруза")
		Или Инициализация Тогда
		
		Форма.ПредставлениеДатыПоступленияГруза = ПредставлениеПериодаВЕТИС("ДатаПоступленияГруза", Объект);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары")
		Или Инициализация Тогда
		
		Если ИдентификаторСтроки = Неопределено Тогда
			Если Объект.Товары.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ДанныеВСД = ДанныеВетеринарноСопроводительногоДокумента(Неопределено, Форма.УникальныйИдентификатор);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ДанныеВСД);
				ДополнительныеПараметры = Новый Структура("Объект", Объект);
				ЗаполнитьСлужебныеРеквизитыТоваров(НоваяСтрока, , ДополнительныеПараметры);
			КонецЕсли;
			ИдентификаторСтроки = Объект.Товары[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Объект.Товары.Количество() > 1 Тогда
			Форма.ПереключательРасшифровки = 1;
			СтруктураРеквизитов.Вставить("ПереключательРасшифровки");
		КонецЕсли;
		
		Элементы.ПереключательРасшифровки.ТолькоПросмотр = Объект.Товары.Количество() > 1;
		Элементы.ТоварыСпискомПереключательРасшифровки.ТолькоПросмотр = Объект.Товары.Количество() > 1;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары")
		Или СтруктураРеквизитов.Свойство("СтатусВЕТИС")
		Или Инициализация Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.ТоварыГруппаОшибка.Видимость        = ТекущиеДанные.ЕстьОшибки;
			Элементы.ГруппаТоварыСпискомОшибка.Видимость = ТекущиеДанные.ЕстьОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПереключательРасшифровки")
		Или Инициализация Тогда
		
		ИнициализацияТоваровБезРазбиения = Инициализация Или Элементы.ТоварыСтраницы.ТекущаяСтраница <> Элементы.СтраницаТоварыБезРазбиения;
		Если Форма.ПереключательРасшифровки Тогда
			Элементы.ТоварыСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыСписком;
		Иначе
			Элементы.ТоварыСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыБезРазбиения;
			Элементы.ТоварыБезРазбиенияКоличество.ТолькоПросмотр      = Объект.Товары.Количество() И Объект.Товары[0].ЕстьУточнения;
			Элементы.ТоварыБезРазбиенияКоличествоВЕТИС.ТолькоПросмотр = Объект.Товары.Количество() И Объект.Товары[0].ЕстьУточнения;
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("УпаковкиВЕТИС");
		СтруктураРеквизитов.Вставить("СрокГодности");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументы")
		Или Инициализация Тогда
		
		ПредставлениеСвязанныхДокументов = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.СвязанныеДокументы,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов());
		Форма.ПредставлениеСвязанныхДокументов = 
			Новый ФорматированнаяСтрока(ПредставлениеСвязанныхДокументов,,,, "ОткрытьОбщуюФормуСвязанныеДокументы");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТоварыВСД")
		Или ИнициализацияТоваровБезРазбиения Тогда
		
		Если СтруктураРеквизитов.Свойство("ТоварыВСД") Или Инициализация Тогда
			
			Если Объект.Товары.Количество() = 1 Тогда
				// Если строка одна и ВСД не заполнено, не выводим предупреждение при редактировании:
				РеквизитыПодбораВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
				// Реквизиты транспортного средства не учитываем:
				Для каждого Поле Из СтрРазделить(ПоляТранспортногоСредства(), ",") Цикл
					РеквизитыПодбораВСД.Удалить(Поле);
				КонецЦикла;
				Для каждого РеквизитПодбора Из РеквизитыПодбораВСД Цикл
					ЭлементПодбора = Элементы.Найти(РеквизитПодбора.Ключ);
					Если ЭлементПодбора <> Неопределено Тогда
						ОтображатьПредупреждение = ЗначениеЗаполнено(ТекущиеДанные.ВетеринарноСопроводительныйДокумент);
						Если РеквизитПодбора.Ключ = "ГрузополучательПредприятие" И Объект.ГашениеНаСВХ Тогда
							ОтображатьПредупреждение = Ложь;
						КонецЕсли;
						ЭлементПодбора.ОтображениеПредупрежденияПриРедактировании = ?(ОтображатьПредупреждение,
							ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИзменитьПараметрыВыбораВСДПоПредприятиюГрузополучателя(
				Элементы.ТоварыСпискомВетеринарноСопроводительныйДокумент.СвязиПараметровВыбора,
				Элементы.ТоварыБезРазбиенияВетеринарноСопроводительныйДокумент.СвязиПараметровВыбора,
				Объект.ГашениеНаСВХ);
			
		КонецЕсли;
		
		ЕстьВСД = ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ВетеринарноСопроводительныйДокумент);
		
		Элементы.ТоварыБезРазбиенияДобавитьБумажныйВСД.Видимость = Не ЕстьВСД;
		Элементы.ТоварыБезРазбиенияЗаполнитьИзВСД.Видимость      = ЕстьВСД;
		Элементы.ТоварыДобавитьБумажнуюВСД.Видимость             = Не ЕстьВСД;
		Элементы.ЗаполнитьИзВСД.Видимость                        = ЕстьВСД;
		
		Элементы.ТоварыБезРазбиенияПродукция.ТолькоПросмотр = Не ЕстьВСД;
		Элементы.ТоварыБезРазбиенияПродукция.ПодсказкаВвода = ?(Не ЕстьВСД, НСтр("ru = 'Укажите ВСД'"), "");
		Элементы.ТоварыБезРазбиенияПродукция.АвтоОтметкаНезаполненного = ЕстьВСД;
		
		СтруктураРеквизитов.Вставить("ТоварыПродукция");
		СтруктураРеквизитов.Вставить("СрокГодности");
		СтруктураРеквизитов.Вставить("УпаковкиВЕТИС");
		СтруктураРеквизитов.Вставить("ПеревозчикХозяйствующийСубъект");
		СтруктураРеквизитов.Вставить("СпособХранения");
		СтруктураРеквизитов.Вставить("Регионализация");
		СтруктураРеквизитов.Вставить("ПереключательТТН");
		СтруктураРеквизитов.Вставить("ТранспортноеСредство");
		СтруктураРеквизитов.Вставить("Маршрут");
		СтруктураРеквизитов.Вставить("МаршрутВозврата");
		СтруктураРеквизитов.Вставить("СвязанныеДокументыВозврата");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузоотправительХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ГрузоотправительПредприятие")
		Или Инициализация Тогда
		
		ПредставленияГрузоотправителя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ГрузоотправительХозяйствующийСубъект, Объект.ГрузоотправительПредприятие, "Грузоотправитель");
		Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя = ПредставленияГрузоотправителя.КонтрагентХозяйствующегоСубъекта.Представление;
		Форма.ПредставлениеСопоставленияПредприятияГрузоотправителя = ПредставленияГрузоотправителя.ТорговыйОбъект.Представление;
		
		СтруктураРеквизитов.Вставить("ПеревозчикХозяйствующийСубъект");
		СтруктураРеквизитов.Вставить("СпособХранения");
		СтруктураРеквизитов.Вставить("Регионализация");
		СтруктураРеквизитов.Вставить("ПереключательТТН");
		СтруктураРеквизитов.Вставить("ТранспортноеСредство");
		СтруктураРеквизитов.Вставить("Маршрут");
		СтруктураРеквизитов.Вставить("МаршрутВозврата");
		СтруктураРеквизитов.Вставить("СвязанныеДокументыВозврата");
		
		Элементы.ГрузоотправительПредприятие.Доступность = ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументыВозврата")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие
			И Не Объект.ГашениеНаСВХ И Не ЭтоИмпорт И Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") <> 0;
		Элементы.ПредставлениеСвязанныхДокументовВозврата.Видимость = РеквизитПоказываем;
		
		Если РеквизитПоказываем Тогда
			
			ПредставлениеСвязанныхДокументовВозврата = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				Объект.СвязанныеДокументыВозврата,
				ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов());
			Форма.ПредставлениеСвязанныхДокументовВозврата = 
				Новый ФорматированнаяСтрока(ПредставлениеСвязанныхДокументовВозврата,,,, "ОткрытьОбщуюФормуСвязанныеДокументыВозврата");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные<>Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыПродукция")
		Или ИнициализацияТоваровБезРазбиения) Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
			
			СписокЕдиницИзмерения = ДоступныеЕдиницыИзменения(ТекущиеДанные.Продукция);
			
			Если СписокЕдиницИзмерения.Найти(ТекущиеДанные.ЕдиницаИзмеренияВЕТИС) = Неопределено
				И Не ИнициализацияТоваровБезРазбиения Тогда
				
					ТекущиеДанные.ЕдиницаИзмеренияВЕТИС = Неопределено;
			КонецЕсли;
			
			Элементы.ТоварыБезРазбиенияЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(СписокЕдиницИзмерения);
			Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(СписокЕдиницИзмерения);
			
			ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары, Форма.ТочностьДатПродукции);
			СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(ТекущиеДанные.Продукция, Форма.ТочностьДатПродукции, "СрокГодности");
			ОтображатьСрокГодностиПоТочностиДаты = Истина;
			Если СписокДоступнойТочности.Количество() = 1 
				И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СписокДоступнойТочности[0].Значение) Тогда
				
				ОтображатьСрокГодностиПоТочностиДаты = Ложь;
			КонецЕсли;
			
			ТипЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ТекущиеДанные.Продукция);
			Элементы.ТоварыБезРазбиенияСрокГодности.Видимость                  = НЕ ТипЖивыеЖивотные И ОтображатьСрокГодностиПоТочностиДаты;
			Элементы.ТоварыБезРазбиенияПредставлениеДатаПроизводства.Заголовок = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные);
			Элементы.ТоварыСпискомСрокГодности.Видимость                       = НЕ ТипЖивыеЖивотные И ОтображатьСрокГодностиПоТочностиДаты;
			Элементы.ТоварыСпискомПредставлениеДатаПроизводства.Заголовок      = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные);
			
		КонецЕсли;
		
		Если Форма.ПереключательРасшифровки = 0 Тогда
			Отбор = Новый Структура("Продукция", ТекущиеДанные.Продукция);
			МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Номенклатура", Форма.НоменклатураДляВыбора, Отбор);
			Элементы.ТоварыБезРазбиенияНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Элементы.ТоварыСопоставлениеНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Отбор.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Характеристика", Форма.НоменклатураДляВыбора, Отбор);
			Элементы.ТоварыБезРазбиенияХарактеристика.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Элементы.ТоварыПредставлениеХарактеристика.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ТоварыУточнение");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТоварыУточнение") Или ИнициализацияТоваровБезРазбиения Тогда
		СтруктураРеквизитов.Вставить("ТоварыНоменклатура");
		СтруктураРеквизитов.Вставить("ТоварыКоличествоВЕТИС");
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("УпаковкиВЕТИС") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		МассивПредставлений = Новый Массив;
		Если ЗначениеЗаполнено(ТекущиеДанные.УпаковкиШтрихкодыСтрокой) Тогда
			МассивПредставлений.Добавить(ТекущиеДанные.УпаковкиШтрихкодыСтрокой);
		Иначе
			МассивПредставлений.Добавить("");
		КонецЕсли;
		Если ТекущиеДанные.УпаковкиОтличаются И Форма.ПереключательРасшифровки = 0 Тогда
			МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(" < ! > ", Новый Шрифт(,, Истина), ЦветТекстаПоля()));
		КонецЕсли;
		
		ТекущиеДанные.ПредставлениеУпаковкиШтрихкоды = Новый ФорматированнаяСтрока(МассивПредставлений);
		Элементы.ТоварыБезРазбиенияПредставлениеУпаковкиШтрихкоды.Подсказка = ?(ТекущиеДанные.УпаковкиОтличаются,
			НСтр("ru = 'Отличается от данных ветеринарно-сопроводительного документа'"), "");
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыНоменклатура") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		ОсобыйТекст = ТекущиеДанные.СопоставленоКоличество <> 1 И ТекущиеДанные.ВыбраноНоменклатура <= 1;
		Элементы.ТоварыБезРазбиенияНоменклатура.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		Элементы.ТоварыСопоставлениеНоменклатура.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		
		Элементы.ТоварыСопоставлениеНоменклатура.КнопкаВыпадающегоСписка = ТекущиеДанные.СопоставленоКоличество > 1;
		Элементы.ТоварыСопоставлениеНоменклатура.ЦветТекста = ?(ОсобыйТекст, ЦветТекстаПоля("ЦветТекстаПроблемаГосИС"), ЦветТекстаПоля("ЦветТекстаПоля"));
		
		Элементы.ТоварыБезРазбиенияКоличество.ТолькоПросмотр = Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		Элементы.ТоварыБезРазбиенияКоличество.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		
		СтруктураРеквизитов.Вставить("ТоварыХарактеристика");
		СтруктураРеквизитов.Вставить("ТоварыСерия");
		
		Если Форма.ПереключательРасшифровки = 0 Тогда
			Отбор = Новый Структура("Продукция", ТекущиеДанные.Продукция);
			МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Номенклатура", Форма.НоменклатураДляВыбора, Отбор);
			Элементы.ТоварыБезРазбиенияНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Элементы.ТоварыСопоставлениеНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Отбор.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			МассивЗначенийДляВыбора = ИнтеграцияВЕТИСКлиентСервер.МассивЗначенийДляВыбораИзСписка("Характеристика", Форма.НоменклатураДляВыбора, Отбор);
			Элементы.ТоварыБезРазбиенияХарактеристика.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
			Элементы.ТоварыПредставлениеХарактеристика.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийДляВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыХарактеристика") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
			Форма.ПредставлениеХарактеристика = НСтр("ru = '<характеристики не используются>'");
		ИначеЕсли ТекущиеДанные.ВыбраноХарактеристика > 1 Тогда
			Форма.ПредставлениеХарактеристика = СтрШаблон(НСтр("ru = '<Выбрано (%1)>'"), ТекущиеДанные.ВыбраноХарактеристика);
		Иначе
			Форма.ПредставлениеХарактеристика = ТекущиеДанные.СопоставлениеХарактеристика;
		КонецЕсли;
		
		Элементы.ТоварыБезРазбиенияХарактеристика.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Характеристика) И ТекущиеДанные.ХарактеристикиИспользуются;
		Элементы.ТоварыПредставлениеХарактеристика.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) И ТекущиеДанные.ХарактеристикиИспользуются;
		
		ЦветТекста = ЦветТекстаПоля("ЦветТекстаПоля");
		ОтметкаНезаполненного = Ложь;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) И ТекущиеДанные.ХарактеристикиИспользуются И ТекущиеДанные.ВыбраноХарактеристика <= 1 Тогда
			ОтметкаНезаполненного = Истина;
			ЦветТекста = ЦветТекстаПоля("ЦветТекстаПроблемаГосИС");
		ИначеЕсли Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
			ОтметкаНезаполненного = Истина;
			ЦветТекста = ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет");
		КонецЕсли;
		
		Элементы.ТоварыПредставлениеХарактеристика.ЦветТекста = ЦветТекста;
		Элементы.ТоварыПредставлениеХарактеристика.ОтметкаНезаполненного = ОтметкаНезаполненного;
		
		Элементы.ТоварыБезРазбиенияХарактеристика.ТолькоПросмотр  = Не ТекущиеДанные.ХарактеристикиИспользуются;
		Элементы.ТоварыПредставлениеХарактеристика.ТолькоПросмотр = Не ТекущиеДанные.ХарактеристикиИспользуются;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыСерия") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		Если ТекущиеДанные.ВыбраноСерия > 1 Тогда
			Форма.ПредставлениеСерия = СтрШаблон(НСтр("ru = '<Выбрано (%1)>'"), ТекущиеДанные.ВыбраноСерия);
		Иначе
			Форма.ПредставлениеСерия = Неопределено;
		КонецЕсли;
		
		ИспользоватьСерииНоменклатуры = ?(Форма.ПараметрыУказанияСерий = Неопределено, Ложь,
			Форма.ПараметрыУказанияСерий.Товары.ИспользоватьСерииНоменклатуры);
	
		Элементы.ТоварыБезРазбиенияСерия.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Серия) И ИспользоватьСерииНоменклатуры;
		Элементы.ТоварыПредставлениеСерия.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.Серия) И ИспользоватьСерииНоменклатуры;
		
		Элементы.ТоварыБезРазбиенияСерия.Доступность = Не ТекущиеДанные.ЕстьУточнения;
		Элементы.ТоварыПредставлениеСерия.ТолькоПросмотр = ТекущиеДанные.ЕстьУточнения;
		
		Если ИспользоватьСерииНоменклатуры Тогда
			
			Если Не ТекущиеДанные.ЕстьУточнения И Не ЗначениеЗаполнено(ТекущиеДанные.Серия) Тогда
				
				ПараметрыОформленияСерии = Новый Структура;
				ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьПараметрыОформленияСерииПоДаннымСтроки(ПараметрыОформленияСерии, ТекущиеДанные);
				
				Элементы.ТоварыБезРазбиенияСерия.Видимость = Ложь;
				Элементы.ТоварыПредставлениеСерия.Видимость = Истина;
				
				Если ПараметрыОформленияСерии.Свойство("Текст") Тогда
					Форма.ПредставлениеСерия = ПараметрыОформленияСерии.Текст;
				КонецЕсли;
				
				Если ПараметрыОформленияСерии.Свойство("ИмяЦветаТекста") Тогда
					ПараметрыОформленияСерии.Вставить("ЦветТекста", ЦветТекстаПоля(ПараметрыОформленияСерии.ИмяЦветаТекста));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Элементы.ТоварыПредставлениеСерия, ПараметрыОформленияСерии);
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ТоварыБезРазбиенияСерия.Видимость = Ложь;
			Элементы.ТоварыПредставлениеСерия.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыКоличествоВЕТИС") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		Элементы.ТоварыБезРазбиенияВозвращаемоеКоличествоВЕТИС.МаксимальноеЗначение = ТекущиеДанные.КоличествоВЕТИС;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("СрокГодности") Или ИнициализацияТоваровБезРазбиения) Тогда
		
		МассивПредставлений = Новый Массив;
		МассивПредставлений.Добавить(ПредставлениеПериодаВЕТИС("СрокГодности", ТекущиеДанные));
		Если ТекущиеДанные.СрокГодностиОтличается И Форма.ПереключательРасшифровки = 0 Тогда
			МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(" < ! > ", Новый Шрифт(,, Истина), ЦветТекстаПоля()));
		КонецЕсли;
		
		ТекущиеДанные.ПредставлениеСрокГодности = Новый ФорматированнаяСтрока(МассивПредставлений);
		
		Элементы.ТоварыБезРазбиенияСрокГодности.Подсказка = ?(ТекущиеДанные.СрокГодностиОтличается,
			НСтр("ru = 'Отличается от данных ветеринарно-сопроводительного документа'"), "");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПереключательТТН")
		Или Инициализация Тогда
		
		Если Инициализация Тогда
			Форма.ПереключательТТН = ?(Объект.ТТНУказан, 1, 0);
		Иначе
			Объект.ТТНУказан = Форма.ПереключательТТН;
		КонецЕсли;
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие И Не Объект.ГашениеНаСВХ;
		Элементы.ГруппаТТН.Видимость = РеквизитПоказываем;
		Если РеквизитПоказываем Тогда
			
			Элементы.ГруппаТТНБезПереключателя.Видимость = Объект.ТТНУказан;
			
			Элементы.НомерТТН.АвтоОтметкаНезаполненного = Объект.ТТНУказан И Не ЗначениеЗаполнено(Объект.НомерТТН);
			Элементы.ДатаТТН.АвтоОтметкаНезаполненного = Объект.ТТНУказан И Не ЗначениеЗаполнено(Объект.ДатаТТН);
			Элементы.ТипТТН.АвтоОтметкаНезаполненного = Объект.ТТНУказан И Не ЗначениеЗаполнено(Объект.ТипТТН);
			
		Иначе
			
			Объект.ТТНУказан = Ложь;
			
		КонецЕсли;
		
		Если Объект.ТТНУказан И Объект.ТипТТН.Пустая() Тогда
			Объект.ТипТТН = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ТТН");
		ИначеЕсли Не Объект.ТТНУказан Тогда
			Объект.ТипТТН = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Маршрут")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие И Не Объект.ГашениеНаСВХ;
		Элементы.ГруппаМаршрутСледования.Видимость = РеквизитПоказываем;
		Если РеквизитПоказываем Тогда
			
			ПредставлениеПунктовМаршрута = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				Объект.Маршрут,
				ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиМаршрута());
			
			Если ЗначениеЗаполнено(Объект.ГрузополучательПредприятие) Тогда
				ПредставлениеПунктовМаршрута = СтрШаблон("%1 - %2",
					ПредставлениеПунктовМаршрута,
					Объект.ГрузополучательПредприятие);
			КонецЕсли;
			
			НомерНеУказан = Ложь;
			Для каждого ПунктМаршрута Из Объект.Маршрут Цикл
				
				НомерНеУказан = ПунктМаршрута.СПерегрузкой
					И Не ЗначениеЗаполнено(ПунктМаршрута.НомерТранспортногоСредства)
					И Не ПунктМаршрута.ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота");
				
				Если НомерНеУказан Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			МассивПредставлений = Новый Массив;
			МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПунктовМаршрута,,,, "ОткрытьОбщуюФормуМаршрут"));
			
			Если НомерНеУказан Тогда
				
				МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(" < ! > ", Новый Шрифт(,, Истина), ЦветТекстаПоля()));
				
			КонецЕсли;
			
			Форма.ПредставлениеПунктовМаршрута = Новый ФорматированнаяСтрока(МассивПредставлений);
			Элементы.ПредставлениеПунктовПерегрузки.Подсказка = ?(НомерНеУказан, НСтр("ru = 'Не указан номер транспортного средства'"), "");
			
			Если Форма.НомерВМаршрутеНеУказан <> НомерНеУказан Тогда
				Форма.НомерВМаршрутеНеУказан = НомерНеУказан;
				СтруктураРеквизитов.Вставить("ОбновитьСтатусВЕТИС");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МаршрутВозврата")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие
			И Не Объект.ГашениеНаСВХ И Не ЭтоИмпорт И Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") <> 0;
		Элементы.ГруппаМаршрутВозврата.Видимость = РеквизитПоказываем;
		Если РеквизитПоказываем Тогда
			
			ПредставлениеПунктовМаршрутаВозвратаКэш = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				Объект.МаршрутВозврата,
				ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиМаршрута());
			
			Если ЗначениеЗаполнено(Объект.ГрузополучательПредприятие) Тогда
				ПредставлениеПунктовМаршрутаВозвратаКэш = СтрШаблон("%1 - %2", 
					ПредставлениеПунктовМаршрутаВозвратаКэш,
					Объект.ГрузоотправительПредприятие);
			КонецЕсли;
			
			НомерНеУказан = Ложь;
			Для каждого ПунктМаршрута Из Объект.МаршрутВозврата Цикл
				
				РассчитатьРеквизитыРегионализации(ПунктМаршрута, "МаршрутВозврата");
				
				Если Не ПунктМаршрута.СПерегрузкой Тогда
					Продолжить;
				КонецЕсли;
				
				НомерНеУказан = (Не ЗначениеЗаполнено(Объект.НомерТранспортногоСредства) И Не ПунктМаршрута.ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота"))
					Или (ПунктМаршрута.ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Автомобиль")
					И Не (ЗначениеЗаполнено(ПунктМаршрута.НомерТранспортногоСредства) И ЗначениеЗаполнено(ПунктМаршрута.НомерТранспортногоСредства)));
					
				Если НомерНеУказан Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			МассивПредставлений = Новый Массив;
			МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПунктовМаршрутаВозвратаКэш,,,, "ОткрытьОбщуюФормуМаршрутВозврата"));
			
			Если НомерНеУказан Тогда
				
				МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(" < ! > ", Новый Шрифт(,, Истина), ЦветТекстаПоля()));
				
			КонецЕсли;
			
			Форма.ПредставлениеПунктовМаршрутаВозвратаКэш = Новый ФорматированнаяСтрока(МассивПредставлений);
			ДополнитьНадписьМаршрутВозвратаСтатусомРегионализации(Форма);
			Элементы.ПредставлениеПунктовМаршрутаВозврата.Подсказка = ?(НомерНеУказан, НСтр("ru = 'Не указан номер транспортного средства'"), "");
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПеревозчикХозяйствующийСубъект")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие И Не Объект.ГашениеНаСВХ И Не ЭтоИмпорт;
		Элементы.ГруппаХозяйствующийСубъектПеревозчик.Видимость = РеквизитПоказываем;
		Если РеквизитПоказываем Тогда
			ПредставленияПеревозчика = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(Объект.ПеревозчикХозяйствующийСубъект);
			Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаПеревозчика = ПредставленияПеревозчика.КонтрагентХозяйствующегоСубъекта.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СпособХранения")
		ИЛИ Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие
			И Не Объект.ГашениеНаСВХ
			И Не ЭтоИмпорт;
		Элементы.СпособХранения.Видимость = РеквизитПоказываем;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Регионализация")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие
			И Не Объект.ГашениеНаСВХ И Не ЭтоИмпорт И Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") <> 0;
		Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Видимость = РеквизитПоказываем;
		Элементы.ТоварыГруппаОтображениеРегионализации.Видимость = РеквизитПоказываем;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТранспортноеСредство")
		Или Инициализация Тогда
		
		РеквизитПоказываем = Объект.ГрузополучательПредприятие <> Объект.ГрузоотправительПредприятие И Не Объект.ГашениеНаСВХ;
		Элементы.ГруппаПеревозка.Видимость = РеквизитПоказываем;
		Если РеквизитПоказываем Тогда
			МассивПредставлений = Новый Массив;
			МассивПредставлений.Добавить(ПредставлениеТранспортногоСредства(Объект));
			Если Форма.ТранспортноеСредствоОтличается Тогда
				МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(" < ! > ", Новый Шрифт(,, Истина), ЦветТекстаПоля()));
			КонецЕсли;
			Элементы.ПредставлениеТранспортногоСредства.Подсказка = ?(Форма.ТранспортноеСредствоОтличается,
				НСтр("ru = 'Прибывшее транспортное средство отличается от данных, указанных в ВСД.'"), "");
			Форма.ПредставлениеТранспортногоСредства = Новый ФорматированнаяСтрока(МассивПредставлений);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТоварыВозвращаемоеКоличествоВЕТИС")
		Или ИнициализацияТоваровБезРазбиения Тогда
		
		РеквизитПоказываем = Не Объект.ГашениеНаСВХ И Не ЭтоИмпорт;
		Элементы.ГруппаТоварыБезРазбиенияВозвращаемоеКоличествоВЕТИС.Видимость = РеквизитПоказываем;
		Элементы.ТоварыВозвращаемоеКоличествоВЕТИС.Видимость = РеквизитПоказываем;
		СтруктураРеквизитов.Вставить("ЕстьОтклонения");
		
	КонецЕсли;
	
	ЕстьПеревозка = Не Объект.ГашениеНаСВХ И Объект.ГрузоотправительПредприятие <> Объект.ГрузополучательПредприятие;
	РеквизитыПодбораВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию(Объект.ГашениеНаСВХ, ЕстьПеревозка);
	ЭтоРеквизитПодбораВСД = Ложь;
	Для каждого РеквизитПодбора Из РеквизитыПодбораВСД Цикл
		Если СтруктураРеквизитов.Свойство(РеквизитПодбора.Ключ) Тогда
			ЭтоРеквизитПодбораВСД = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Инициализация Или ЭтоРеквизитПодбораВСД Или СтруктураРеквизитов.Свойство("ПереключательТТН") Тогда
		Если ЕстьПеревозка Тогда
			// Реквизиты транспортного средства не учитываем:
			Для каждого Поле Из СтрРазделить(ПоляТранспортногоСредства(), ",") Цикл
				РеквизитыПодбораВСД.Удалить(Поле);
			КонецЦикла;
			// Реквизиты перевозчика и серии ТТН не учитываем, так как они не обязательны для заполнения
			РеквизитыПодбораВСД.Удалить("СерияТТН");
			РеквизитыПодбораВСД.Удалить("ПеревозчикХозяйствующийСубъект");
			// При отсутствующем ТТН, эти значения на заполненность не проверяем:
			Если Не Объект.ТТНУказан Тогда
				РеквизитыПодбораВСД.Удалить("ДатаТТН");
				РеквизитыПодбораВСД.Удалить("НомерТТН");
				РеквизитыПодбораВСД.Удалить("ТипТТН");
			КонецЕсли;
		КонецЕсли;
		
		ВсеРеквизитыПодбораЗаполнены = Истина;
		Для каждого РеквизитПодбора Из РеквизитыПодбораВСД Цикл
			Если Не ЗначениеЗаполнено(Объект[РеквизитПодбора.Ключ]) Тогда
				ВсеРеквизитыПодбораЗаполнены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ТоварыПодобратьВСД.Видимость = ВсеРеквизитыПодбораЗаполнены;
		Элементы.ТоварыБезРазбиенияПодобратьВСД.Видимость = ВсеРеквизитыПодбораЗаполнены;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("АктНесоответствия") И ЗначениеЗаполнено(Объект.НомерАктаНесоответствия) Тогда
		
		СтруктураРеквизитов.Вставить("ОбновитьСтатусВЕТИС");
		
	КонецЕсли;
	
	Если Инициализация Или Не ЗначениеЗаполнено(Объект.НомерАктаНесоответствия) И СтруктураРеквизитов.Свойство("ЕстьОтклонения") Тогда
		
		ТекущийСтатус = Форма.СтатусОтклонений;
		
		ЕстьОтклонения = Объект.Товары.НайтиСтроки(Новый Структура("ЕстьОтклонения", Истина)).Количество()
			Или Форма.ТранспортноеСредствоОтличается;
		КоличествоРасхождений = 0;
		КоличествоПоВСД = 0;
		Для каждого Стр Из Объект.Товары Цикл
			КоличествоРасхождений = КоличествоРасхождений + Стр.КоличествоРасхождений + Стр.ВозвращаемоеКоличествоВЕТИС;
			КоличествоПоВСД = КоличествоПоВСД + ?(ЗначениеЗаполнено(Стр.ДанныеВСД), Стр.ДанныеВСД.КоличествоВЕТИС, 0);
		КонецЦикла;
		
		Если КоличествоРасхождений = 0 И Не ЕстьОтклонения Тогда
			Форма.СтатусОтклонений = 0;
		ИначеЕсли КоличествоПоВСД <> 0 И Не ЕстьОтклонения И КоличествоРасхождений * 100 / КоличествоПоВСД <= 5 Тогда
			Форма.СтатусОтклонений = 1;
		Иначе
			Форма.СтатусОтклонений = 2;
		КонецЕсли;
		
		Если Форма.СтатусОтклонений <> ТекущийСтатус Тогда
			
			СтруктураРеквизитов.Вставить("ОбновитьСтатусВЕТИС");
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		ИЛИ СтруктураРеквизитов.Свойство("ГрузополучательХозяйствующийСубъект")
		ИЛИ СтруктураРеквизитов.Свойство("ГрузоотправительХозяйствующийСубъект")
		ИЛИ СтруктураРеквизитов.Свойство("ГрузополучательПредприятие")
		ИЛИ СтруктураРеквизитов.Свойство("ГрузоотправительПредприятие") Тогда
		ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма,Объект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусВЕТИС") Тогда
		
		#Область БлокировкаРеквизитовВЗависимостиОтСтатуса
	
		РедактированиеФормыНеДоступно = Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.КГашениюВСД")
		                              ИЛИ Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Обрабатывается")
		                              ИЛИ Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашены")
		                              ИЛИ Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb");
		
		Если РедактированиеФормыНеДоступно <> Форма.РедактированиеФормыНеДоступно Тогда
			
			Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
		
			Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновноеВерх.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
			Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновноеНиз.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
			Элементы.СтраницаФактическиеСведения.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
			
			// Товары.
			Исключения = "ТоварыНайти, ТоварыОтменитьПоиск, ТоварыКонтекстноеМенюКопированиеИВыделение, ТоварыСпискомСгенерироватьСерии, "
				+ "ГруппаТоварыБезРазбиенияНоменклатура, ГруппаТоварыБезРазбиенияХарактеристика, ГруппаТоварыБезРазбиенияСерия, ГруппаТоварыБезРазбиенияКоличество, "
				+ "ТоварыНоменклатура, ТоварыХарактеристика, ТоварыСерия, ТоварыКоличество, СвернутьПанель, РазвернутьПанель, "
				+ "ПереключательРасшифровки, ТоварыСпискомПереключательРасшифровки";
			
			ИнтеграцияВЕТИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТовары,
				НЕ РедактированиеФормыНеДоступно, Исключения);
			
		КонецЕсли;
		
		#КонецОбласти
		
		ПредставлениеРезультатПроверкиПравилРегионализации = "";
		Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Гиперссылка = Ложь;
		Если Объект.Товары.Количество() = 1 Тогда
			Если Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") > 0 Тогда
				РезультатПроверки = Объект.Товары[0].РезультатПроверкиПравилРегионализации;
				УсловияВыполнены = Объект.Товары[0].УсловияРегионализацииВыполнены;
				Если РезультатПроверки = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено") Тогда
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(НСтр("ru = 'Перемещение разрешено'"),,,);
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(ПредставлениеРезультатПроверкиПравилРегионализации,
						БиблиотекаКартинок.ОтгрузкаРазрешена);
				ИначеЕсли РезультатПроверки = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
					И УсловияВыполнены Тогда
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(НСтр("ru = 'Перемещение разрешено при выполнении условий'"),,
						Форма.ЦветГиперссылки,,"ОткрытьФормуРегионализации");
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(ПредставлениеРезультатПроверкиПравилРегионализации,
						БиблиотекаКартинок.ОтгрузкаРазрешена);
					Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Гиперссылка = Истина;
				ИначеЕсли РезультатПроверки = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
					И НЕ УсловияВыполнены Тогда
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(НСтр("ru = 'Перемещение разрешено при выполнении условий'"),,
						Форма.ЦветГиперссылки,,"ОткрытьФормуРегионализации");
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(ПредставлениеРезультатПроверкиПравилРегионализации,
						БиблиотекаКартинок.Предупреждение);
					Элементы.ТоварыБезРазбиенияРезультатПроверкиПравилРегионализации.Гиперссылка = Истина;
				ИначеЕсли РезультатПроверки = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено") Тогда
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(НСтр("ru = 'Перемещение запрещено'"),,,);
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(ПредставлениеРезультатПроверкиПравилРегионализации,
						БиблиотекаКартинок.ОтгрузкаЗапрещена);
				ИначеЕсли Форма.СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb") Тогда
					ПредставлениеРезультатПроверкиПравилРегионализации = Новый ФорматированнаяСтрока(НСтр("ru = '<Необходимо проверить>'"),,
						Новый Цвет(255,0,0));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Форма.ПредставлениеРезультатПроверкиПравилРегионализации = ПредставлениеРезультатПроверкиПравилРегионализации;
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ОбновитьСтатусВЕТИС") Тогда
		
		УстановитьПараметрыОбновленияСтатуса = Форма.Модифицированность И НЕ Инициализация;
		ОбновитьСтатусВЕТИС(Форма, УстановитьПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	Если Инициализация Тогда
		
		ЕстьВСДВозврата = ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ВетеринарноСопроводительныйДокументНаВозврат);
		Элементы.ТоварыБезРазбиенияВетеринарноСопроводительныйДокументНаВозврат.Видимость = ЕстьВСДВозврата;
		Элементы.ТоварыСпискомВетеринарноСопроводительныйДокументНаВозврат.Видимость      = ЕстьВСДВозврата;
		
		Элементы.ГруппаПредприятиеГрузоотправитель.Видимость = Не ЭтоИмпорт;
		Элементы.СпособХранения.Видимость                    = Не ЭтоИмпорт;
		Элементы.ПредставлениеПунктовПерегрузки.Видимость    = Не ЭтоИмпорт;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область УсловноеОформлениеПоляНоменклатура
	
	// Строки без уточнений.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыНоменклатура");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьУточнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеНоменклатура"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	// Строки с уточнениями.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыНоменклатура");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьУточнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеНоменклатура"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляХарактеристика
	#КонецОбласти
	
	#Область УсловноеОформлениеПолейПриУточнении
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для каждого ИмяПоля Из СтрРазделить(ИменаПолейДляОткрытияУточнения, ",") Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьУточнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыКоличество"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыПродукция"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВетеринарноСопроводительныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не заполнено'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область УсловноеОформлениеРегионализации
	Если СтатусВЕТИС <> Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРезультатПроверкиПравилРегионализации.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.РезультатПроверкиПравилРегионализации");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ВозвращаемоеКоличествоВЕТИС");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Необходимо проверить>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаПоля());
		
		
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРезультатПроверкиПравилРегионализации.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ВозвращаемоеКоличествоВЕТИС");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = 'Только для возврата'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеДанных

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТоварыУточнение");
	СтруктураВозврата.Вставить("Маршрут");
	СтруктураВозврата.Вставить("МаршрутВозврата");
	СтруктураВозврата.Вставить("ТоварыПродукция");
	СтруктураВозврата.Вставить("ТоварыВСД");
	СтруктураВозврата.Вставить("УпаковкиВЕТИС");
	СтруктураВозврата.Вставить("Дата");
	СтруктураВозврата.Вставить("ГрузополучательПредприятие");
	СтруктураВозврата.Вставить("ГрузополучательХозяйствующийСубъект");	
	РеквизитыВлияющиеНаВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
	Для каждого Реквизит Из РеквизитыВлияющиеНаВСД Цикл
		СтруктураВозврата.Вставить(Реквизит.Ключ);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВопросОбновитьНомерТС(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеНаСервере(ДополнительныеПараметры.Результат, "МаршрутТранспортноеСредство", КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяОбновляемогоПоля = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Строка"), ДополнительныеПараметры, ДополнительныеПараметры.ИмяПоля);
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОбновляемогоПоля) Тогда
		ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения);
		
		Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Строка") И ДополнительныеПараметры = "Маршрут" Тогда
			
			ПоследнийПунктМаршрута = ЗагрузитьПунктыМаршрута(Результат);
			Если ПоследнийПунктМаршрута <> Неопределено И ПоследнийПунктМаршрута.ЕстьОтличия Тогда
				Оповещение = Новый ОписаниеОповещения("ВопросОбновитьНомерТС", ЭтаФорма, Новый Структура("Результат", Результат));
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Последний пункт маршрута отличается от прибывшего транспортного средства, актуализировать его?'"), РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	
	Если ИмяОбновляемогоПоля = "СвязанныеДокументы" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.СвязанныеДокументы.Очистить();
		Для каждого СтрокаЗаполнения Из Результат Цикл
			НоваяСтрокаСвязанныхДокументов = Объект.СвязанныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязанныхДокументов, СтрокаЗаполнения);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НайденныйДокументОснование = ПоискДокументаОснованияПоНомеруИДате(Объект.СвязанныеДокументы);
			Если ЗначениеЗаполнено(НайденныйДокументОснование) Тогда
				Объект.ДокументОснование = НайденныйДокументОснование;
			КонецЕсли;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СвязанныеДокументыВозврата" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.СвязанныеДокументыВозврата.Очистить();
		Для каждого СтрокаЗаполнения Из Результат Цикл
			НоваяСтрокаСвязанныхДокументов = Объект.СвязанныеДокументыВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязанныхДокументов, СтрокаЗаполнения);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТранспортноеСредство" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПоляТранспортногоСредства());
		
		Если Объект.МаршрутВозврата.Количество() > 0 И Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") <> 0 Тогда
			// Изменим транспортное средство в первой строке маршрута возврата:
			СтрокаМаршрутаВозврата = Объект.МаршрутВозврата.Получить(0);
			ЗаполнитьЗначенияСвойств(СтрокаМаршрутаВозврата, Объект, ПоляТранспортногоСредства());
		КонецЕсли;
		
		ТранспортныеСредстваОдинаковы = Истина;
		Если ТранспортноеСредствоПоДаннымВСД <> Неопределено Тогда
			Для каждого ПолеТранспортаВСД Из ТранспортноеСредствоПоДаннымВСД Цикл
				Если Объект[ПолеТранспортаВСД.Ключ] <> ПолеТранспортаВСД.Значение Тогда
					ТранспортныеСредстваОдинаковы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТранспортноеСредствоОтличается <> (Не ТранспортныеСредстваОдинаковы) Тогда
			ТранспортноеСредствоОтличается = Не ТранспортныеСредстваОдинаковы;
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		
		КоличествоМаршрутов = Объект.Маршрут.Количество();
		Если КоличествоМаршрутов > 0
			И Не (ЗначениеЗаполнено(Объект.Маршрут[КоличествоМаршрутов-1].НомерТранспортногоСредства)
				Или ЗначениеЗаполнено(Объект.Маршрут[КоличествоМаршрутов-1].НомерАвтомобильногоПрицепа)
				Или ЗначениеЗаполнено(Объект.Маршрут[КоличествоМаршрутов-1].НомерАвтомобильногоКонтейнера)) Тогда
				
			ЗаполнитьЗначенияСвойств(Объект.Маршрут[КоличествоМаршрутов-1], Результат, "НомерТранспортногоСредства,НомерАвтомобильногоПрицепа,НомерАвтомобильногоКонтейнера,ТипТранспорта");
			НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элементы.Товары.ТекущаяСтрока, "Маршрут");
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Товары" Тогда
		МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыНоменклатура" Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		ИзменяемаяСтрока.Номенклатура = Результат;
		
		ОчиститьСообщения();
	
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = ПараметрыУказанияСерий <> Неопределено;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения,
			ПараметрыЗаполнения, ?(ПараметрыУказанияСерий = Неопределено, Неопределено, ПараметрыУказанияСерий.Товары));
			
		СтарыеОтклонения = Новый Структура("ЕстьОтклонения, Количество", ИзменяемаяСтрока.ЕстьОтклонения, ИзменяемаяСтрока.КоличествоРасхождений);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Номенклатура", ДополнительныеПараметры);
		Если СтарыеОтклонения.ЕстьОтклонения <> ИзменяемаяСтрока.ЕстьОтклонения
			Или СтарыеОтклонения.Количество <> ИзменяемаяСтрока.КоличествоРасхождений Тогда
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыХарактеристика" Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		ИзменяемаяСтрока.Характеристика = Результат;
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Характеристика", ДополнительныеПараметры);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыСерия" И ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		ИзменяемаяСтрока.Серия = Результат;
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ПараметрыУказанияСерий.Товары, ИзменяемаяСтрока);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Серия", ДополнительныеПараметры);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СрокГодности" И ЗначениеЗаполнено(Результат) Тогда
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		СтарыеОтклонения = Новый Структура("ЕстьОтклонения, Количество", ИзменяемаяСтрока.ЕстьОтклонения, ИзменяемаяСтрока.КоличествоРасхождений);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "СрокГодности", ДополнительныеПараметры);
		Если СтарыеОтклонения.ЕстьОтклонения <> ИзменяемаяСтрока.ЕстьОтклонения
			Или СтарыеОтклонения.Количество <> ИзменяемаяСтрока.КоличествоРасхождений Тогда
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения)
	
	ИмяОбновляемогоПоля = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Строка"), ДополнительныеПараметры, ДополнительныеПараметры.ИмяПоля);
	
	РеквизитыВлияющиеНаВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию();
	Если Объект.ГашениеНаСВХ Тогда
		РеквизитыВлияющиеНаВСД.Удалить("ГрузополучательПредприятие");
	КонецЕсли;
	Если РеквизитыВлияющиеНаВСД.Свойство(ИмяОбновляемогоПоля)
		И Объект.Товары.Количество() > 0
		И ЗначениеЗаполнено(Объект.Товары.Получить(0).ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		
		ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект, Объект);
		ОбновитьДанныеНаСервере(Неопределено, "СброситьТоварыВСД", КэшированныеЗначения);
		
	КонецЕсли;
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	
	Если ИмяОбновляемогоПоля = "ГрузоотправительПредприятие" Тогда
		Если Объект.Маршрут.Количество() Тогда
			СтрокаМаршрута = Объект.Маршрут.Получить(0);
		Иначе
			СтрокаМаршрута = Объект.Маршрут.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМаршрута, Объект);
		КонецЕсли;
		СтрокаМаршрута.Предприятие = Объект.ГрузоотправительПредприятие;
		СтрокаМаршрута.СПерегрузкой  = Истина;
		МассивПолейДляНастройки.Добавить("Маршрут");
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыУточнение" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		СтарыеОтклонения = Новый Структура("ЕстьОтклонения, Количество", ИзменяемаяСтрока.ЕстьОтклонения, ИзменяемаяСтрока.КоличествоРасхождений);
		ОбновитьДанныеУточнений(ИзменяемаяСтрока, Результат, КэшированныеЗначения);
		Если СтарыеОтклонения.ЕстьОтклонения <> ИзменяемаяСтрока.ЕстьОтклонения
			Или СтарыеОтклонения.Количество <> ИзменяемаяСтрока.КоличествоРасхождений Тогда
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если (ИмяОбновляемогоПоля = "Маршрут" Или ИмяОбновляемогоПоля = "МаршрутТранспортноеСредство") И Результат <> Неопределено И ТипЗнч(Результат) = Тип("Строка") Тогда
		ПолученноеТранспортноеСредство = ЗагрузитьПунктыМаршрута(Результат);
		Если ПолученноеТранспортноеСредство <> Неопределено 
			И (ПолученноеТранспортноеСредство.ОбновитьНомерТС Или ИмяОбновляемогоПоля = "МаршрутТранспортноеСредство") Тогда
			
			ИмяОбновляемогоПоля = "ТранспортноеСредство";
			Результат = ПолученноеТранспортноеСредство;
			МассивПолейДляНастройки.Добавить("ТранспортноеСредство");
			
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "МаршрутВозврата" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("Строка") Тогда
		ЗагрузитьПунктыМаршрутаВозврата(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если (ИмяОбновляемогоПоля = "ТранспортноеСредство" Или ИмяОбновляемогоПоля = "МаршрутТранспортноеСредство")
		И Результат <> Неопределено
		И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПоляТранспортногоСредства());
		Если Объект.МаршрутВозврата.Количество() > 0 И Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") <> 0 Тогда
			// Изменим транспортное средство в первой строке маршрута возврата:
			СтрокаМаршрутаВозврата = Объект.МаршрутВозврата.Получить(0);
			ЗаполнитьЗначенияСвойств(СтрокаМаршрутаВозврата, Объект, ПоляТранспортногоСредства());
		КонецЕсли;
		ТранспортныеСредстваОдинаковы = Истина;
		Если ТранспортноеСредствоПоДаннымВСД <> Неопределено Тогда
			Для каждого ПолеТранспортаВСД Из ТранспортноеСредствоПоДаннымВСД Цикл
				Если Объект[ПолеТранспортаВСД.Ключ] <> ПолеТранспортаВСД.Значение Тогда
					ТранспортныеСредстваОдинаковы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТранспортноеСредствоОтличается <> (Не ТранспортныеСредстваОдинаковы) Тогда
			ТранспортноеСредствоОтличается = Не ТранспортныеСредстваОдинаковы;
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыПродукция" И Результат <> Неопределено Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
			ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		Иначе
			ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		КонецЕсли;
		
		ИзменяемаяСтрока.Продукция = Результат;
		
		СтарыеОтклонения = Новый Структура("ЕстьОтклонения, Количество", ИзменяемаяСтрока.ЕстьОтклонения, ИзменяемаяСтрока.КоличествоРасхождений);
		
		ИзменяемаяСтрока.Номенклатура = Неопределено;
		ИзменяемаяСтрока.Характеристика = Неопределено;
		ИзменяемаяСтрока.Серия = Неопределено;
		
		Действия = ДействияРасчетаСтрокиТабличнойЧастиТовары();
		Если Объект.ГрузоотправительПредприятие <> Объект.ГрузополучательПредприятие Тогда
			Действия.ЗаполнитьРегионализациюПоВидуПродукции = Истина;
			Действия.РассчитатьРеквизитыРегионализации  = Истина;
		КонецЕсли;
		Действия.ЗаполнитьСопоставленныеТовары      = Истина;
		Действия.ОбновитьСтатусИПараметрыДополнения = Истина;
		
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КэшируемыеПараметрыРегионализации", КэшируемыеПараметрыРегионализации);
		РасчетСтрокиТоваровСервер(ИзменяемаяСтрока.ПолучитьИдентификатор(), Действия, ДополнительныеПараметры);
		
		ИзменяемаяСтрока.ВыбраноНоменклатура = 0;
		ИзменяемаяСтрока.ВыбраноХарактеристика = 0;
		ИзменяемаяСтрока.ВыбраноСерия = 0;
		ИзменяемаяСтрока.ЕстьУточнения = Ложь;
		
		Если ИзменяемаяСтрока.СопоставленоКоличество = 1 Тогда
			ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС;
			ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = ПараметрыУказанияСерий <> Неопределено;
			
			СобытияФормВЕТИСПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения,
				ПараметрыЗаполнения, ?(ПараметрыУказанияСерий = Неопределено, Неопределено, ПараметрыУказанияСерий.Товары));
		КонецЕсли;
		Модифицированность = Истина;
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения", КэшированныеЗначения);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Продукция, КоличествоВЕТИС", ДополнительныеПараметры);
		
		Если СтарыеОтклонения.ЕстьОтклонения <> ИзменяемаяСтрока.ЕстьОтклонения
			Или СтарыеОтклонения.Количество <> ИзменяемаяСтрока.КоличествоРасхождений Тогда
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		
	КонецЕсли;
		
	Если ИмяОбновляемогоПоля = "ТоварыВСД" И ЗначениеЗаполнено(Результат) Тогда
		ДобавлениеНовыхСтрок = Ложь;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
			ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
			ДобавлениеНовыхСтрок = Истина;
		Иначе
			ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		КонецЕсли;
		ОбновитьДанныеВСД(Результат, ИдентификаторСтроки, ДобавлениеНовыхСтрок, КэшированныеЗначения);
		Если Объект.Товары.Количество() > 1 Тогда
			МассивПолейДляНастройки.Добавить("Товары");
		КонецЕсли;
		МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СброситьТоварыВСД" Тогда
		Объект.СерияАктаНесоответствия = "";
		Объект.НомерАктаНесоответствия = "";
		Объект.ДатаАктаНесоответствия  = Неопределено;
		Объект.ПричинаНесоответствия   = "";
		Объект.Регионализация.Очистить();
		Объект.СвязанныеДокументы.Очистить();
		Объект.СвязанныеДокументыВозврата.Очистить();
		Объект.Товары.Очистить();
		Объект.ТоварыУточнение.Очистить();
		Объект.УпаковкиВЕТИС.Очистить();
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "УпаковкиВЕТИС" И ЗначениеЗаполнено(Результат) Тогда
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		СтарыеОтклонения = Новый Структура("ЕстьОтклонения, Количество", ИзменяемаяСтрока.ЕстьОтклонения, ИзменяемаяСтрока.КоличествоРасхождений);
		ИнтеграцияВЕТИСКлиентСервер.ЗаполнитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, Результат);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения, ДанныеТаблицы", КэшированныеЗначения, Результат.Упаковки);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "УпаковкиВЕТИС", ДополнительныеПараметры);
		Если СтарыеОтклонения.ЕстьОтклонения <> ИзменяемаяСтрока.ЕстьОтклонения
			Или СтарыеОтклонения.Количество <> ИзменяемаяСтрока.КоличествоРасхождений Тогда
			МассивПолейДляНастройки.Добавить("ЕстьОтклонения");
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
		
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВСД(МассивВСД, ИдентификаторСтроки, ДобавлениеНовыхСтрок, КэшированныеЗначения)
	
	ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	ВыбранПустойВСД = МассивВСД.Получить(0).Пустая();
	
	Если ВыбранПустойВСД Тогда
		
		Если ЗначениеЗаполнено(Объект.Товары.Получить(0).ДанныеВСД.ВетеринарноСопроводительныйДокумент)
			И (ДобавлениеНовыхСтрок Или Объект.Товары.Количество() = 1) Тогда
			// Очищаем все данные документа по ВСД
			Объект.ГашениеНаСВХ = Ложь;
			Объект.ТТНУказан = Истина;
			ТранспортноеСредствоПоДаннымВСД = Неопределено;
			ОформлениеБумажногоВСД = Ложь;
			НомерВМаршрутеВСДНеУказан = Ложь;
			Объект.Товары.Очистить();
			Объект.ТоварыУточнение.Очистить();
			Объект.УпаковкиВЕТИС.Очистить();
			Объект.ШтрихкодыУпаковок.Очистить();
			Объект.МаршрутВозврата.Очистить();
			ИзменяемаяСтрока = Объект.Товары.Добавить();
			ИзменяемаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Элементы.Товары.ТекущаяСтрока = ИзменяемаяСтрока.ПолучитьИдентификатор();
		Иначе
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "УпаковкиВЕТИС");
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "ТоварыУточнение");
			ИзменяемаяСтрока.СопоставленоКоличество = 0;
			ИзменяемаяСтрока.Номенклатура = Неопределено;
			ИзменяемаяСтрока.Характеристика = Неопределено;
			ИзменяемаяСтрока.Серия = Неопределено;
			ИзменяемаяСтрока.ИдентификаторПартии = Неопределено;
			ИзменяемаяСтрока.Количество = 0;
			ИзменяемаяСтрока.ВозвращаемоеКоличествоВЕТИС = 0;
		КонецЕсли;
		ИзменяемаяСтрока.ДанныеВСД = ДанныеВетеринарноСопроводительногоДокумента(Неопределено, УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, ИзменяемаяСтрока.ДанныеВСД);
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения, Объект", КэшированныеЗначения, Объект);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, , ДополнительныеПараметры);
		ИзменяемаяСтрока.ЕстьОтклонения = Ложь;
		ИзменяемаяСтрока.КоличествоРасхождений = 0;
		ИзменяемаяСтрока.ЕстьУточнения = Ложь;
	КонецЕсли;
	
	ТекущиеДанныеВСД = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ВыборкаДанныхВСД(МассивВСД);
	
	// Заполним шапку документа по данным ВСД, если какое-либо значение не указано в документе:
	ЕстьПеревозка = Не Объект.ГашениеНаСВХ И Объект.ГрузоотправительПредприятие <> Объект.ГрузополучательПредприятие;
	РеквизитыВлияющиеНаВСД = ИнтеграцияВЕТИСКлиентСервер.РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию(Объект.ГашениеНаСВХ, ЕстьПеревозка);
	РеквизитыВлияющиеНаВСД.Вставить("ТорговыйОбъект");
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для каждого Реквизит Из РеквизитыВлияющиеНаВСД Цикл
		Если Не ЗначениеЗаполнено(Объект[Реквизит.Ключ]) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныеРеквизиты Тогда
		ДанныеШапки = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ВыборкаДанныхШапкиВСД(МассивВСД);
		Если ДанныеШапки.Следующий() Тогда
			Для каждого Реквизит Из РеквизитыВлияющиеНаВСД Цикл
				Если СтрНайти(ПоляТранспортногоСредства(), Реквизит.Ключ) = 0 И Не ЗначениеЗаполнено(Объект[Реквизит.Ключ]) Тогда
					Объект[Реквизит.Ключ] = ДанныеШапки[Реквизит.Ключ];
				КонецЕсли;
			КонецЦикла;
			Если Объект.ГрузоотправительПредприятие.Пустая() И Объект.ГрузополучательПредприятие.Пустая() Тогда
				Объект.ГашениеНаСВХ = Истина;
			КонецЕсли;
			ОформлениеБумажногоВСД = ДанныеШапки.ЭтоБумажныйВСД;
			Если Объект.Маршрут.Количество() = 1 И Не ЗначениеЗаполнено(Объект.Маршрут.Получить(0).НомерТранспортногоСредства) Тогда
				// Маршрут пока заполнен только значением по умолчанию на основании грузоотправителя, очистим его для заполнения на основании ВСД
				Объект.Маршрут.Очистить();
			КонецЕсли;
			Если Объект.Маршрут.Количество() = 0 Тогда
				
				ДанныеМаршрута = ДанныеШапки.Маршрут.Выгрузить();
				ДанныеПоследнегоТранспорта = Неопределено;
				НомерНеУказан = Ложь;
				
				Для Каждого СтрокаТЧ Из ДанныеМаршрута Цикл
					
					Если ДанныеМаршрута.Индекс(СтрокаТЧ) = 0 Или СтрокаТЧ.СПерегрузкой Тогда
						ДанныеПоследнегоТранспорта = СтрокаТЧ;
					КонецЕсли;
					
					Если СтрокаТЧ.СПерегрузкой
						И Не ЗначениеЗаполнено(СтрокаТЧ.НомерТранспортногоСредства)
						И Не СтрокаТЧ.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.ПерегонСкота Тогда
						НомерНеУказан = Истина;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(Объект.Маршрут.Добавить(), СтрокаТЧ);
					
				КонецЦикла;
				
				Если ДанныеПоследнегоТранспорта <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(Объект.НомерТранспортногоСредства) Тогда
						ЗаполнитьЗначенияСвойств(Объект, ДанныеПоследнегоТранспорта, ПоляТранспортногоСредства());
					КонецЕсли;
					Если ТранспортноеСредствоПоДаннымВСД = Неопределено Тогда
						ТранспортноеСредствоПоДаннымВСД = Новый Структура(ПоляТранспортногоСредства());
						ЗаполнитьЗначенияСвойств(ТранспортноеСредствоПоДаннымВСД, ДанныеПоследнегоТранспорта);
						ТранспортноеСредствоОтличается = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НомерВМаршрутеВСДНеУказан = НомерНеУказан;
				
			КонецЕсли;
			Объект.ТТНУказан = ЗначениеЗаполнено(Объект.ТипТТН) Или ЗначениеЗаполнено(Объект.НомерТТН)
				Или ЗначениеЗаполнено(Объект.ДатаТТН) Или ЗначениеЗаполнено(Объект.СерияТТН);
		КонецЕсли;
	КонецЕсли;
	
	Если ТранспортноеСредствоПоДаннымВСД = Неопределено Тогда
		ЗаполнитьДанныеТранспортногоСредстваВСД(МассивВСД);
	КонецЕсли;
	
	Пока ТекущиеДанныеВСД.Следующий() Цикл
		
		Если ДобавлениеНовыхСтрок И ЗначениеЗаполнено(ИзменяемаяСтрока.ВетеринарноСопроводительныйДокумент) Тогда
			ИзменяемаяСтрока = Объект.Товары.Добавить();
			ИзменяемаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "УпаковкиВЕТИС");
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "ТоварыУточнение");
			ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "Регионализация");
			ИзменяемаяСтрока.РезультатПроверкиПравилРегионализации = Неопределено;
			ИзменяемаяСтрока.УсловияРегионализацииВыполнены = Ложь;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, ТекущиеДанныеВСД);
		
		Если Не ЗначениеЗаполнено(ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС) Тогда
			ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(ИзменяемаяСтрока);
		КонецЕсли;
		
		ВыборкаУпаковки = ТекущиеДанныеВСД.УпаковкиВЕТИС.Выбрать();
		Пока ВыборкаУпаковки.Следующий() Цикл
			СтрокаУпаковкиДокумента = Объект.УпаковкиВЕТИС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУпаковкиДокумента, ВыборкаУпаковки);
			СтрокаУпаковкиДокумента.ИдентификаторСтрокиТовары = ИзменяемаяСтрока.ИдентификаторСтроки;
		КонецЦикла;
		
		ВыборкаШтрихкоды = ТекущиеДанныеВСД.ШтрихкодыУпаковок.Выбрать();
		Пока ВыборкаШтрихкоды.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.ШтрихкодыУпаковок.Добавить(), ВыборкаШтрихкоды);
		КонецЦикла;
		
		ВыборкаПартии = ТекущиеДанныеВСД.ПроизводственныеПартии.Выбрать();
		Пока ВыборкаПартии.Следующий() Цикл
			СтрокаПроизводственнойПартииДокумента = ?(ВыборкаПартии.Количество() = 1, ИзменяемаяСтрока, Объект.ТоварыУточнение.Добавить());
			Если ВыборкаПартии.Количество() > 1 Тогда
				СтрокаПроизводственнойПартииДокумента.ИдентификаторСтроки = ИзменяемаяСтрока.ИдентификаторСтроки;
			КонецЕсли;
			СтрокаПроизводственнойПартииДокумента.ИдентификаторПартии = ВыборкаПартии.ИдентификаторПартии;
		КонецЦикла;
		
		ИзменяемаяСтрока.ДанныеВСД = ДанныеВетеринарноСопроводительногоДокумента(ТекущиеДанныеВСД, УникальныйИдентификатор);
		
		ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыПродукция", ИзменяемаяСтрока.ПолучитьИдентификатор());
		ОбновитьДанныеНаСервере(ИзменяемаяСтрока.Продукция, ПараметрыОбновления, КэшированныеЗначения);
		
		ИзменяемаяСтрока.ЕстьОтклонения = Ложь;
		ИзменяемаяСтрока.КоличествоРасхождений = 0;
		
		ДополнительныеПараметры = Новый Структура("КэшированныеЗначения, Объект", КэшированныеЗначения, Объект);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "ВетеринарноСопроводительныйДокумент", ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТранспортногоСредстваВСД(МассивВСД)
	
	ДанныеШапки = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ВыборкаДанныхШапкиВСД(МассивВСД);
	Если ДанныеШапки.Следующий() Тогда
		ОформлениеБумажногоВСД = ДанныеШапки.ЭтоБумажныйВСД;
		ДанныеМаршрута = ДанныеШапки.Маршрут.Выгрузить();
		ДанныеПоследнегоТранспорта = Неопределено;
		НомерНеУказан = Ложь;
		
		Для Каждого СтрокаТЧ Из ДанныеМаршрута Цикл
			
			Если ДанныеМаршрута.Индекс(СтрокаТЧ) = 0 Или СтрокаТЧ.СПерегрузкой Тогда
				ДанныеПоследнегоТранспорта = СтрокаТЧ;
			КонецЕсли;
			
			Если СтрокаТЧ.СПерегрузкой
				И Не ЗначениеЗаполнено(СтрокаТЧ.НомерТранспортногоСредства)
				И Не СтрокаТЧ.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.ПерегонСкота Тогда
				НомерНеУказан = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеПоследнегоТранспорта <> Неопределено Тогда
			ТранспортноеСредствоПоДаннымВСД = Новый Структура(ПоляТранспортногоСредства());
			ЗаполнитьЗначенияСвойств(ТранспортноеСредствоПоДаннымВСД, ДанныеПоследнегоТранспорта);
			ТранспортныеСредстваОдинаковы = Истина;
			Для каждого ПолеТранспортаВСД Из ТранспортноеСредствоПоДаннымВСД Цикл
				Если Объект[ПолеТранспортаВСД.Ключ] <> ПолеТранспортаВСД.Значение Тогда
					ТранспортныеСредстваОдинаковы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ТранспортноеСредствоОтличается = Не ТранспортныеСредстваОдинаковы;
		КонецЕсли;
	КонецЕсли;
	НомерВМаршрутеВСДНеУказан = НомерНеУказан;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУточнений(ИзменяемаяСтрока, КоллекцияУточнений, КэшированныеЗначения)
	
	ОчиститьСвязанныеСтрокиТабличнойЧасти(Объект, ИзменяемаяСтрока.ИдентификаторСтроки, "ТоварыУточнение");
	
	ИзменяемаяСтрока.ЕстьУточнения = Ложь;
	// Если строка одна - хранить таблицу уточнений не требуется, заполним только строку товары
	Если КоллекцияУточнений.Количество() = 1 Тогда
		
		СтрокаНовыхТоваровУточнения = КоллекцияУточнений.Получить(0);
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаНовыхТоваровУточнения);
		
	Иначе
		
		КоличествоИтого = 0;
		КоличествоВЕТИС = 0;
		ИзменяемаяСтрока.ИдентификаторПартии = "";
		
		Для каждого СтрокаНовыхТоваровУточнения Из КоллекцияУточнений Цикл
			НоваяСтрокаУточнения = Объект.ТоварыУточнение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУточнения, СтрокаНовыхТоваровУточнения);
			НоваяСтрокаУточнения.ИдентификаторСтроки = ИзменяемаяСтрока.ИдентификаторСтроки;
			КоличествоИтого = КоличествоИтого + НоваяСтрокаУточнения.Количество;
			КоличествоВЕТИС = КоличествоВЕТИС + НоваяСтрокаУточнения.КоличествоВЕТИС;
		КонецЦикла;
		
		Если КоличествоИтого > 0 Тогда
			ИзменяемаяСтрока.ЕстьУточнения = Истина;
			ИзменяемаяСтрока.Количество = КоличествоИтого;
			ИзменяемаяСтрока.КоличествоВЕТИС = КоличествоВЕТИС;
		КонецЕсли;
		
		Элементы.ТоварыБезРазбиенияКоличество.ТолькоПросмотр      = ИзменяемаяСтрока.ЕстьУточнения;
		Элементы.ТоварыБезРазбиенияКоличествоВЕТИС.ТолькоПросмотр = ИзменяемаяСтрока.ЕстьУточнения;
		
		КоличествоУникальныхЗначенийВУточнениях = ПодсчетУникальныхЗначенийВУточнениях(КоллекцияУточнений);
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, КоличествоУникальныхЗначенийВУточнениях);
	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КэшированныеЗначения, ДанныеТаблицы", КэшированныеЗначения, КоллекцияУточнений);
	ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "ТоварыУточнение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВетеринарноСопроводительногоДокумента(ИсходныеДанныеВСД, УникальныйИдентификатор)
	
	СписокРеквизитов = "КоличествоВЕТИС, ПредставлениеПроизводители, Продукция, Цель, СкоропортящаясяПродукция, НизкокачественнаяПродукция,
	| ДатаПроизводстваСтрока, ДатаПроизводстваТочностьЗаполнения, ДатаПроизводстваНачалоПериода, ДатаПроизводстваКонецПериода,
	| СрокГодностиСтрока, СрокГодностиТочностьЗаполнения, СрокГодностиНачалоПериода, СрокГодностиКонецПериода,
	| ЕдиницаИзмеренияВЕТИС, ВетеринарноСопроводительныйДокумент, СтранаПроизводства";
	
	ИменаТабличныхЧастей = "УпаковкиВЕТИС, ШтрихкодыУпаковок, Производители, ПроизводственныеПартии";
	
	СтруктураВозврата = Новый Структура(СписокРеквизитов, 0, "");
	
	Если ИсходныеДанныеВСД <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ИсходныеДанныеВСД);
		
		СтруктураТабличныхЧастей = Новый Структура(ИменаТабличныхЧастей);
		Для каждого ЭлементСтруктурыТабличнойЧасти Из СтруктураТабличныхЧастей Цикл
			ДанныеЗаписей = ИсходныеДанныеВСД[ЭлементСтруктурыТабличнойЧасти.Ключ].Выгрузить();
			
			Если ЭлементСтруктурыТабличнойЧасти.Ключ = "Производители" Тогда
				Справочники.ПредприятияВЕТИС.ЗаполнитьНомера(ДанныеЗаписей);
				//	Производители выводятся в качестве доп. информации, получим представление ТЧ для вывода на форму:
				ПредставлениеПроизводители = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
					ДанныеЗаписей, 
					ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиПроизводителей());
				СтруктураВозврата.ПредставлениеПроизводители = ПредставлениеПроизводители;
			КонецЕсли;
			
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеЗаписей, УникальныйИдентификатор);
			СтруктураТабличныхЧастей.Вставить(ЭлементСтруктурыТабличнойЧасти.Ключ, АдресХранилища);
			
		КонецЦикла;
		
	Иначе
		
		СтруктураТабличныхЧастей = Новый Структура(ИменаТабличныхЧастей);
		
	КонецЕсли;
	
	СтруктураВозврата.Вставить("АдресаТабличныхЧастей", СтруктураТабличныхЧастей);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМаршрутВозврата()
	
	Если Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") > 0 И Объект.МаршрутВозврата.Количество() = 0 Тогда
		
		Для каждого ПунктМаршрута Из Объект.Маршрут Цикл
			НовыйПунктМаршрутаВозврата = Объект.МаршрутВозврата.Вставить(0);
			ЗаполнитьЗначенияСвойств(НовыйПунктМаршрутаВозврата, ПунктМаршрута);
		КонецЦикла;
		
		Для НомерСтроки = 1 По Объект.МаршрутВозврата.Количество()-1 Цикл
			ЗаполнитьЗначенияСвойств(
				Объект.МаршрутВозврата[Объект.МаршрутВозврата.Количество() - НомерСтроки],
				Объект.МаршрутВозврата[Объект.МаршрутВозврата.Количество() - НомерСтроки-1],
				ПоляПредприятияИАдреса());
		КонецЦикла;
		
		Если Объект.МаршрутВозврата.Количество() > 0 Тогда
			Объект.МаршрутВозврата[0].Предприятие           = Объект.ГрузополучательПредприятие;
			Объект.МаршрутВозврата[0].СПерегрузкой          = Истина;
			Объект.МаршрутВозврата[0].Адрес                 = "";
			Объект.МаршрутВозврата[0].АдресПредставление    = "";
			Объект.МаршрутВозврата[0].ДанныеАдресаСтруктура = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") = 0 И Объект.МаршрутВозврата.Количество() > 0 Тогда
		Объект.МаршрутВозврата.Очистить();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "МаршрутВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	Объект.ДокументОснование = Неопределено;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,,"ДокументОснование");
КонецПроцедуры

#КонецОбласти

#Область ИзмененияСтрокиТоваров

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыТоваров()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	МассивВСД = Объект.Товары.Выгрузить(,"ВетеринарноСопроводительныйДокумент").ВыгрузитьКолонку("ВетеринарноСопроводительныйДокумент");
	ВыборкаДанныхВСД = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ВыборкаДанныхВСД(МассивВСД);
	ВСД = Новый Соответствие;
	Пока ВыборкаДанныхВСД.Следующий() Цикл
		ДанныеВСД = ДанныеВетеринарноСопроводительногоДокумента(ВыборкаДанныхВСД, УникальныйИдентификатор);
		ВСД.Вставить(ВыборкаДанныхВСД.ВетеринарноСопроводительныйДокумент, ДанныеВСД);
	КонецЦикла;
	
	ЗаполнитьДанныеТранспортногоСредстваВСД(МассивВСД);
	
	СопоставленныеТовары = ИнтеграцияВЕТИС.ПолучитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора);
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ДанныеВСД = ВСД.Получить(ТекущаяСтрока.ВетеринарноСопроводительныйДокумент);
		ТекущаяСтрока.ДанныеВСД = ?(ДанныеВСД = Неопределено, ДанныеВетеринарноСопроводительногоДокумента(Неопределено, УникальныйИдентификатор), ДанныеВСД);
		
		СтрокаСопоставленногоТовара = СопоставленныеТовары.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтрокиТовара");
		
		Если СтрокаСопоставленногоТовара <> Неопределено Тогда
			ТекущаяСтрока.СопоставленоКоличество = СтрокаСопоставленногоТовара.Количество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = ПараметрыУказанияСерий <> Неопределено;
		
			СобытияФормВЕТИСПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Неопределено,
				ПараметрыЗаполнения, ?(ПараметрыУказанияСерий = Неопределено, Неопределено, ПараметрыУказанияСерий.Товары));
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Объект", Объект);
		ЗаполнитьСлужебныеРеквизитыТоваров(ТекущаяСтрока,, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыТоваров(ТекущаяСтрока, ОбновляемыеПоля = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Инициализация = Ложь;
	СтруктураПолей = Новый Структура;
	Если ОбновляемыеПоля = Неопределено Тогда
		Инициализация = Истина;
	Иначе
		СтруктураПолей = Новый Структура(ОбновляемыеПоля);
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ВетеринарноСопроводительныйДокумент") Тогда
		
		ТекущаяСтрока.СкоропортящаясяПродукция         = ТекущаяСтрока.ДанныеВСД.СкоропортящаясяПродукция;
		ТекущаяСтрока.НизкокачественнаяПродукция       = ТекущаяСтрока.ДанныеВСД.НизкокачественнаяПродукция;
		ТекущаяСтрока.ПредставлениеЦель                = ПредставлениеПоляВСД(ТекущаяСтрока.ДанныеВСД, "Цель");
		ТекущаяСтрока.ПредставлениеСтранаПроисхождения = ПредставлениеПоляВСД(ТекущаяСтрока.ДанныеВСД, "СтранаПроизводства");
		ТекущаяСтрока.ПредставлениеДатаПроизводства    = ПредставлениеПоляВСД(ТекущаяСтрока.ДанныеВСД, "ДатаПроизводства");
		ТекущаяСтрока.ПредставлениеПроизводители = Новый ФорматированнаяСтрока(
			ТекущаяСтрока.ДанныеВСД.ПредставлениеПроизводители,,,, "ОткрытьОбщуюФормуПроизводители");
		
		Если Не Инициализация Тогда
			СтруктураПолей.Вставить("СрокГодности");
			СтруктураПолей.Вставить("УпаковкиВЕТИС");
			СтруктураПолей.Вставить("ТоварыУточнение");
		КонецЕсли;
			
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Продукция") Тогда
		ТекущаяСтрока.ПродукцияОтличается = ЗначениеЗаполнено(ТекущаяСтрока.ВетеринарноСопроводительныйДокумент) И ТекущаяСтрока.Продукция <> ТекущаяСтрока.ДанныеВСД.Продукция;
		Если Не Инициализация И ТекущаяСтрока.ПродукцияОтличается <> ТекущаяСтрока.ЕстьОтклонения Тогда
			СтруктураПолей.Вставить("ЕстьОтклонения");
		КонецЕсли;
		Если Не Инициализация Тогда
			СтруктураПолей.Вставить("Номенклатура");
		КонецЕсли;
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("СрокГодности") Тогда
		
		ТекущаяСтрока.ПредставлениеСрокГодности = ПредставлениеПериодаВЕТИС("СрокГодности", ТекущаяСтрока);
		
		Если СтруктураПолей.Свойство("ВетеринарноСопроводительныйДокумент") Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД)
			Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
			ТекущаяСтрока.СрокГодностиОтличается = Ложь;
		Иначе
			ТекущаяСтрока.СрокГодностиОтличается = ТекущаяСтрока.ДанныеВСД.СрокГодностиСтрока <> ТекущаяСтрока.СрокГодностиСтрока
				Или ТекущаяСтрока.ДанныеВСД.СрокГодностиТочностьЗаполнения <> ТекущаяСтрока.СрокГодностиТочностьЗаполнения
				Или ТекущаяСтрока.ДанныеВСД.СрокГодностиНачалоПериода <> ТекущаяСтрока.СрокГодностиНачалоПериода
				Или ТекущаяСтрока.ДанныеВСД.СрокГодностиКонецПериода <> ТекущаяСтрока.СрокГодностиКонецПериода;
		КонецЕсли;
			
		Если Не Инициализация И ТекущаяСтрока.СрокГодностиОтличается <> ТекущаяСтрока.ЕстьОтклонения Тогда
			СтруктураПолей.Вставить("ЕстьОтклонения");
		КонецЕсли;
			
	КонецЕсли;
		
	Если Инициализация Или СтруктураПолей.Свойство("УпаковкиВЕТИС") Тогда
		
		УпаковкиТекущейСтроки = Неопределено;
		Если ДополнительныеПараметры.Свойство("Объект") Тогда
			УпаковкиТекущейСтроки = ДополнительныеПараметры.Объект.УпаковкиВЕТИС.НайтиСтроки(
				Новый Структура("ИдентификаторСтрокиТовары", ТекущаяСтрока.ИдентификаторСтроки));
		ИначеЕсли ДополнительныеПараметры.Свойство("ДанныеТаблицы") Тогда
			УпаковкиТекущейСтроки = ДополнительныеПараметры.ДанныеТаблицы;
		КонецЕсли;
		
		Если УпаковкиТекущейСтроки <> Неопределено Тогда
			
			УпаковкиШтрихкодыСтрокой = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				УпаковкиТекущейСтроки,
				ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок());
			ТекущаяСтрока.УпаковкиШтрихкодыСтрокой = Новый ФорматированнаяСтрока(УпаковкиШтрихкодыСтрокой,,,, "ОткрытьОбщуюФормуУпаковкиВЕТИС");
				
			Если СтруктураПолей.Свойство("ВетеринарноСопроводительныйДокумент") Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД)
				Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
				ТекущаяСтрока.УпаковкиОтличаются = Ложь;
			Иначе
				КолонкиСравнения = "ИдентификаторСтроки,УровеньУпаковки,УпаковкаВЕТИС,КоличествоУпаковокВЕТИС";
				ТекущаяСтрока.УпаковкиОтличаются = ДанныеТабличныхЧастейОтличаются(
					УпаковкиТекущейСтроки, ТекущаяСтрока.ДанныеВСД.АдресаТабличныхЧастей.УпаковкиВЕТИС, КолонкиСравнения);
			КонецЕсли;
				
			Если Не Инициализация И ТекущаяСтрока.УпаковкиОтличаются <> ТекущаяСтрока.ЕстьОтклонения Тогда
				СтруктураПолей.Вставить("ЕстьОтклонения");
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ТоварыУточнение") Тогда
		
		ПроизводственныеПартииТекущейСтроки = Неопределено;
		Если ДополнительныеПараметры.Свойство("Объект") Тогда
			ТаблицаДляПоиска = ?(ТекущаяСтрока.ИдентификаторПартии = "", "ТоварыУточнение", "Товары");
			ПроизводственныеПартииТекущейСтроки = ДополнительныеПараметры.Объект[ТаблицаДляПоиска].НайтиСтроки(
				Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
		ИначеЕсли ДополнительныеПараметры.Свойство("ДанныеТаблицы") Тогда
			ПроизводственныеПартииТекущейСтроки = ДополнительныеПараметры.ДанныеТаблицы;
		КонецЕсли;
		
		Если ПроизводственныеПартииТекущейСтроки <> Неопределено Тогда;
			
			ПредставлениеПроизводственныеПартии = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				ПроизводственныеПартииТекущейСтроки, 
				ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиПартий());
			
			ТекущаяСтрока.ПредставлениеПроизводственныеПартии = Новый ФорматированнаяСтрока(ПредставлениеПроизводственныеПартии
				,,,, "ОткрытьОбщуюФормуПроизводственныеПартии");
			
			Если СтруктураПолей.Свойство("ВетеринарноСопроводительныйДокумент") Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД)
				Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
				ТекущаяСтрока.ПроизводственныеПартииОтличаются = Ложь;
			Иначе
				ТекущаяСтрока.ПроизводственныеПартииОтличаются = ДанныеТабличныхЧастейОтличаются(ПроизводственныеПартииТекущейСтроки,
					ТекущаяСтрока.ДанныеВСД.АдресаТабличныхЧастей.ПроизводственныеПартии, "ИдентификаторПартии");
			КонецЕсли;
				
			Если Не Инициализация И ТекущаяСтрока.ПроизводственныеПартииОтличаются <> ТекущаяСтрока.ЕстьОтклонения Тогда
				СтруктураПолей.Вставить("ЕстьОтклонения");
			КонецЕсли;
			
			Если Инициализация Тогда
				Если ТекущаяСтрока.ЕстьУточнения Тогда
					КоличествоУникальныхЗначенийВУточнениях = ПодсчетУникальныхЗначенийВУточнениях(ПроизводственныеПартииТекущейСтроки);
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КоличествоУникальныхЗначенийВУточнениях, "ВыбраноНоменклатура, ВыбраноХарактеристика, ВыбраноСерия");
				Иначе
					ТекущаяСтрока.ВыбраноНоменклатура = 0;
					ТекущаяСтрока.ВыбраноХарактеристика = 0;
					ТекущаяСтрока.ВыбраноСерия = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Инициализация Тогда
				СтруктураПолей.Вставить("Номенклатура");
				СтруктураПолей.Вставить("Характеристика");
				СтруктураПолей.Вставить("Серия");
				СтруктураПолей.Вставить("КоличествоВЕТИС");
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Регионализация") Тогда
		РассчитатьРеквизитыРегионализации(ТекущаяСтрока, "Товары");
	КонецЕсли;
	
	Если (Инициализация Или СтруктураПолей.Свойство("КоличествоВЕТИС")) И ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД)
			И ЗначениеЗаполнено(ТекущаяСтрока.ДанныеВСД.ВетеринарноСопроводительныйДокумент) Тогда
		
		Если ТекущаяСтрока.ДанныеВСД.ЕдиницаИзмеренияВЕТИС = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС Тогда
			ВСДКоличествоВЕТИС = ТекущаяСтрока.ДанныеВСД.КоличествоВЕТИС;
		Иначе
			КэшированныеЗначения = Неопределено;
			ДополнительныеПараметры.Свойство("КэшированныеЗначения", КэшированныеЗначения);
			Если КэшированныеЗначения = Неопределено Тогда
				КэшированныеЗначения = Новый Структура("КоэффициентыУпаковок", Новый Соответствие);
			КонецЕсли;
			
			Коэффициенты     = КэшированныеЗначения.КоэффициентыУпаковок;
			КлючКоэффициента = КлючКэшаУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС, ТекущаяСтрока.ДанныеВСД.ЕдиницаИзмеренияВЕТИС);
			Коэффициент      = Коэффициенты[КлючКоэффициента];
			
			Если Коэффициент = Неопределено Тогда
				
				Коэффициент = КоэффициентЕдиницыИзмеренияВЕТИС(ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС, ТекущаяСтрока.ДанныеВСД.ЕдиницаИзмеренияВЕТИС);				
				Коэффициенты.Вставить(КлючКоэффициента, Коэффициент);
				
			КонецЕсли;
			
			ВСДКоличествоВЕТИС = ТекущаяСтрока.ДанныеВСД.КоличествоВЕТИС * Коэффициент;
			
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоРасхождений = ВСДКоличествоВЕТИС - ТекущаяСтрока.КоличествоВЕТИС;
		ТекущаяСтрока.КоличествоРасхождений = ?(ТекущаяСтрока.КоличествоРасхождений < 0, -ТекущаяСтрока.КоличествоРасхождений, ТекущаяСтрока.КоличествоРасхождений);
		
		Если ТекущаяСтрока.КоличествоРасхождений <> 0 Тогда
			ПредставлениеРасхождения = НСтр("ru = '%1: %2'");
			ЭтоИзлишек = ВСДКоличествоВЕТИС < ТекущаяСтрока.КоличествоВЕТИС;
			ВидРасхождения = ?(ЭтоИзлишек, НСтр("ru = 'Излишек'"), НСтр("ru = 'Недостача'"));
			ПредставлениеРасхождения = СтрШаблон(ПредставлениеРасхождения, ВидРасхождения, ТекущаяСтрока.КоличествоРасхождений);
			ТекущаяСтрока.ПредставлениеРасхождения = Новый ФорматированнаяСтрока(ПредставлениеРасхождения);
		Иначе
			ТекущаяСтрока.ПредставлениеРасхождения = Новый ФорматированнаяСтрока("");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Номенклатура") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.Характеристика = Неопределено;
			ТекущаяСтрока.Серия = Неопределено;
		КонецЕсли;
		
		Если ТекущаяСтрока.ВыбраноНоменклатура > 1 Тогда
			ТекущаяСтрока.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Выбрано (%1)>'"), ТекущаяСтрока.ВыбраноНоменклатура);
		ИначеЕсли ТекущаяСтрока.СопоставленоКоличество = 1 Тогда
			ТекущаяСтрока.СопоставлениеНоменклатура = Неопределено;
		ИначеЕсли ТекущаяСтрока.СопоставленоКоличество > 1 Тогда
			ТекущаяСтрока.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), ТекущаяСтрока.СопоставленоКоличество);
		Иначе
			ТекущаяСтрока.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
		СтруктураПолей.Вставить("Характеристика");
		СтруктураПолей.Вставить("Серия");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Характеристика") Тогда
		
		Если ТекущаяСтрока.СопоставленоКоличество = 1 Тогда
			ТекущаяСтрока.СопоставлениеХарактеристика = Неопределено;
		Иначе
			ТекущаяСтрока.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Серия") Тогда
				
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ЗаписьСкладскогоЖурнала") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаписьСкладскогоЖурнала) Тогда
			ТекущаяСтрока.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
				Строка(ТекущаяСтрока.ЗаписьСкладскогоЖурнала),,,, ПолучитьНавигационнуюСсылку(ТекущаяСтрока.ЗаписьСкладскогоЖурнала));
		Иначе
			Если ТекущаяСтрока.КоличествоВЕТИС = ТекущаяСтрока.ВозвращаемоеКоличествоВЕТИС Тогда
				ТекущаяСтрока.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
					НСтр("ru = '<возврат, не требуется>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
			Иначе
				ТекущаяСтрока.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
					НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ЕстьОтклонения") Тогда
		
		ТекущаяСтрока.ЕстьОтклонения = ТекущаяСтрока.ПродукцияОтличается
			Или ТекущаяСтрока.СрокГодностиОтличается
			Или ТекущаяСтрока.УпаковкиОтличаются
			Или ТекущаяСтрока.ПроизводственныеПартииОтличаются;
		
	КонецЕсли;
		
	Если Инициализация Тогда
	
		ТекущаяСтрока.ПредставлениеВетеринарноСопроводительныйДокументНаВозврат = Новый ФорматированнаяСтрока(
			Строка(ТекущаяСтрока.ВетеринарноСопроводительныйДокументНаВозврат),,,,
			ПолучитьНавигационнуюСсылку(ТекущаяСтрока.ВетеринарноСопроводительныйДокументНаВозврат));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействияРасчетаСтрокиТабличнойЧастиТовары()
	
	Действия = Новый Структура;
	Действия.Вставить("РассчитатьРеквизитыРегионализации",      Ложь);
	Действия.Вставить("ЗаполнитьРегионализациюПоВидуПродукции", Ложь);
	Действия.Вставить("ЗаполнитьСопоставленныеТовары",          Ложь);
	Действия.Вставить("ЗаполнитьМаршрутВозврата",               Ложь);
	Действия.Вставить("ОбновитьСтатусИПараметрыДополнения",     Ложь);
	Действия.Вставить("ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ", Ложь);
	
	Возврат Действия;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСопоставленныеТовары(Продукция = Неопределено)
	
	СопоставленныеТовары = ИнтеграцияВЕТИС.ПолучитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора, Продукция, Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	
	Для каждого СтрокаСопоставление Из СопоставленныеТовары Цикл
		
		СтрокаТЧ = Объект.Товары.Получить(СтрокаСопоставление.НомерСтрокиТовара - 1);
		СтрокаТЧ.СопоставленоКоличество = СтрокаСопоставление.Количество;
		
		Если СтрокаСопоставление.Количество = 1 Тогда
			Если ЗначениеЗаполнено(СтрокаСопоставление.Номенклатура) Тогда
				СтрокаТЧ.Номенклатура   = СтрокаСопоставление.Номенклатура;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСопоставление.Характеристика) Тогда
				СтрокаТЧ.Характеристика = СтрокаСопоставление.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчетСтрокиТоваровСервер(УникальныйИдентификаторСтроки, Действия, ДополнительныеПараметры)
	
	Если УникальныйИдентификаторСтроки = Неопределено Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(УникальныйИдентификаторСтроки);
	КонецЕсли;
	
	Если Действия.ЗаполнитьРегионализациюПоВидуПродукции Тогда
		ПараметрыРегионализацииПоВидамНоменклатуры = Новый Соответствие;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		   И ДополнительныеПараметры.Свойство("КэшируемыеПараметрыРегионализации") Тогда
			ПараметрыРегионализацииПоВидамНоменклатуры = ДополнительныеПараметры.КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры;
		КонецЕсли;
		
		Значение = ПараметрыРегионализацииПоВидамНоменклатуры.Получить(СтрокаТабличнойЧасти.ВидПродукцииВСД);
		Если Значение = Неопределено
		 ИЛИ СтрокаТабличнойЧасти.ВозвращаемоеКоличествоВЕТИС = 0 Тогда
			СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПустаяСсылка();
			СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены = Ложь;
		Иначе
			СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Значение.РезультатПроверкиПравилРегионализации;
			СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены = Значение.УсловияРегионализацииВыполнены;
		КонецЕсли;
	КонецЕсли;
	
	Если Действия.РассчитатьРеквизитыРегионализации Тогда
		РассчитатьРеквизитыРегионализации(СтрокаТабличнойЧасти, "Товары");
	КонецЕсли;
	
	Если Действия.ЗаполнитьСопоставленныеТовары Тогда
		ЗаполнитьСопоставленныеТовары(СтрокаТабличнойЧасти.Продукция);
	КонецЕсли;
	
	Если Действия.ЗаполнитьМаршрутВозврата Тогда
		ЗаполнитьМаршрутВозврата();
	КонецЕсли;
	
	Если Действия.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ДополнительныеПараметры.ТекущаяСтрокаИдентификатор, ДополнительныеПараметры.КэшированныеЗначения);
	КонецЕсли;
	
	Если Действия.ОбновитьСтатусИПараметрыДополнения Тогда
		ОбновитьСтатусВЕТИС(ЭтотОбъект, Истина);
	КонецЕсли;
	
	// Актуализация уточнения товаров
	СтрокиДляУдаления = Новый Массив;
	Для каждого СтрокаТоваров Из Объект.ТоварыУточнение Цикл
		
		ИдентификаторСтроки = СтрокаТоваров.ИдентификаторСтроки;
		Если Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)).Количество() = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаТоваров);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ТоварыУточнение.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодсчетУникальныхЗначенийВУточнениях(ТаблицаУточнений)
	
	КэшЗначений = Новый Структура("Номенклатура, Характеристика, Серия", Новый Массив, Новый Массив, Новый Массив);
	Для каждого СтрокаТовараУточнения Из ТаблицаУточнений Цикл
		Для каждого ЭлементКэша Из КэшЗначений Цикл
			Если ЗначениеЗаполнено(СтрокаТовараУточнения[ЭлементКэша.Ключ]) Тогда
				ЭлементКэша.Значение.Добавить(СтрокаТовараУточнения[ЭлементКэша.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УникальнаяНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КэшЗначений.Номенклатура);
	УникальныеХарактеристики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КэшЗначений.Характеристика);
	УникальныеСерии = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КэшЗначений.Серия);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыбраноНоменклатура", УникальнаяНоменклатура.Количество());
	СтруктураВозврата.Вставить("ВыбраноХарактеристика", УникальныеХарактеристики.Количество());
	СтруктураВозврата.Вставить("ВыбраноСерия", УникальныеСерии.Количество());
	СтруктураВозврата.Вставить("Номенклатура", ?(УникальнаяНоменклатура.Количество() = 1, УникальнаяНоменклатура.Получить(0), Неопределено));
	СтруктураВозврата.Вставить("Характеристика", ?(УникальныеХарактеристики.Количество() = 1, УникальныеХарактеристики.Получить(0), Неопределено));
	СтруктураВозврата.Вставить("Серия", ?(УникальныеСерии.Количество() = 1, УникальныеСерии.Получить(0), Неопределено));
	
	Возврат СтруктураВозврата;
			
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючКэшаУпаковки(ЕдиницаИзмеренияБазовая, ЕдиницаИзмерения)
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияБазовая) Тогда
		КлючЕдиницаИзмеренияБазовая = Строка(ЕдиницаИзмеренияБазовая.УникальныйИдентификатор());
	Иначе
		КлючЕдиницаИзмеренияБазовая = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		КлючЕдиницаИзмерения = Строка(ЕдиницаИзмерения.УникальныйИдентификатор());
	Иначе
		КлючЕдиницаИзмерения = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючЕдиницаИзмеренияБазовая + КлючЕдиницаИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоэффициентЕдиницыИзмеренияВЕТИС(БазоваяЕдиницаИзмеренияВЕТИС, ЕдиницаИзмеренияВЕТИС)
	
	Возврат ИнтеграцияВЕТИС.КоэффициентЕдиницыИзмеренияВЕТИС(БазоваяЕдиницаИзмеренияВЕТИС, ЕдиницаИзмеренияВЕТИС);
	
КонецФункции

&НаКлиенте
Процедура ТоварыБезРазбиенияРезультатПроверкиПравилРегионализацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.РезультатПроверкиПравилРегионализации =
		ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий") Тогда
		ОткрытьФормуРегионализации(Новый Структура("ВидПродукцииВЕТИС", ТекущиеДанные.ВидПродукцииВСД));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
