
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокСвойств = "АдресХранилищаСчетаФактурыВыданныеПокупателям, Организация, ДатаВходящегоДокумента, ДокументОснование,"
		+ "ВидСчетаФактуры, Комитент, ДоговорКомитента";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СписокСвойств);
	
	Если Параметры.Свойство("ИсправлениеСобственнойОшибки") Тогда 
		ИсправлениеСобственнойОшибки = Параметры.ИсправлениеСобственнойОшибки;
		ИсправляемыйСчетФактура = Параметры.ИсправляемыйСчетФактура;
		Дата = Параметры.Дата;
	КонецЕсли;
	
	Если Параметры.Свойство("Исправление") Тогда 
		Исправление = Параметры.Исправление;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресХранилищаСчетаФактурыВыданныеПокупателям) Тогда
		ЗагрузитьТаблицуСчетаФактурыВыданныеПокупателямИзВременногоХранилища(АдресХранилищаСчетаФактурыВыданныеПокупателям);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохраненияДанныхЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	ИначеЕсли ПеренестиВДокумент Тогда
		
		ОбработкаПроверкиЗаполненияНаКлиенте(Отказ);
		
		Если Отказ Тогда
			Модифицированность = Истина;
			ПеренестиВДокумент = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если ПеренестиВДокумент Тогда
		АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьТаблицуСчетаФактурыВыданныеПокупателямВоВременноеХранилище();
		СтруктураВозврата.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОтчетуКомитенту(Команда)
	
	ЕстьДанные = СчетаФактурыВыданныеПокупателям.Количество() > 0;
	
	Если ЕстьДанные Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСчетаФактурыВыданныеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьСчетаФактурыВыданные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаПроверкиЗаполненияНаКлиенте(Отказ)
	
	Для Индекс = 0 По СчетаФактурыВыданныеПокупателям.Количество() - 1 Цикл
		
		СтрокаСчетаФактуры = СчетаФактурыВыданныеПокупателям[Индекс];
		
		Префикс = "СчетаФактурыВыданныеПокупателям[%1]";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(Индекс, "ЧН=0; ЧГ="));
				
		ИмяСписка = "Счета-фактуры выданные покупателям";
				
		Если НЕ ЗначениеЗаполнено(СтрокаСчетаФактуры.СчетФактура) Тогда
			Поле = Префикс + ".СчетФактура";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Счет-фактура'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаФактурыВыданные()
	
	ПараметрыЗапроса = Документы.СчетФактураПолученный.НовыйПараметрыЗапросаСчетовФактурВыданныхПокупателям();	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЭтотОбъект);
	
	СчетаФактурыВыданныеПокупателям.Очистить();
	СчетаФактурыВыданныеПокупателям.Загрузить(
		Документы.СчетФактураПолученный.СчетаФактурыВыданныеПокупателям(ПараметрыЗапроса));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуСчетаФактурыВыданныеПокупателямИзВременногоХранилища(АдресХранилища)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(АдресХранилища);
	СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуСчетаФактурыВыданныеПокупателямВоВременноеХранилище()
	
	ТаблицаСчетаФактурыВыданныеПокупателям = СчетаФактурыВыданныеПокупателям.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСчетаФактурыВыданныеПокупателям, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросСохраненияДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСчетаФактурыВыданныеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаФактурыВыданные();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыВыданныеПокупателямСуммаУвеличение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыВыданныеПокупателямСуммаНДСУвеличение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыВыданныеПокупателямСуммаУменьшение");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыВыданныеПокупателямСуммаНДСУменьшение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ВидСчетаФактуры",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти
