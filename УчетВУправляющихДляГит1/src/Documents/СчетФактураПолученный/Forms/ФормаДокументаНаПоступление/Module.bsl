// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям" Тогда
		ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПродавцы" Тогда
		ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураПолученныйНаПоступление";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования	= ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	ПараметрыЗаписи.РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ТекущийОбъект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Поставщик";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура СубкомиссионерПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если Объект.Дата >= '20150101' Тогда 
		Объект.СуммаДокументаКомиссия = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСДокументаПриИзменении(Элемент)
	
	Если Объект.Дата >= '20150101' Тогда 
		Объект.СуммаНДСДокументаКомиссия = Объект.СуммаНДСДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетаФактурыВыданныеПокупателюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьПродавцовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовСсылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		КППКонтрагента = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора,НДСПоСтавкам4и2,ВидАгентскогоДоговора");
		ВидДоговораКонтрагента = СвойстваДоговора.ВидДоговора;
		НДСПоСтавкам4и2 = СвойстваДоговора.НДСПоСтавкам4и2;
		НДСИсчисляетсяНалоговымАгентом = СвойстваДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	Иначе
		ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
		НДСПоСтавкам4и2 = Ложь;
		НДСИсчисляетсяНалоговымАгентом = Ложь;
	КонецЕсли;
	
	Для каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
		Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			НаОснованииОтчетаКомитенту = (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	
	ПравилаПостановления735 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Объект.Дата) >= 3;
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоКомиссияНаЗакупкуПостановление1137 = ИспользуетсяПостановлениеНДС1137
		И (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		ИЛИ Объект.ВозвратЧерезКомиссионера);
	
	Элементы.ГруппаПродавец.Видимость           = ЭтоКомиссияНаЗакупкуПостановление1137 И Объект.Дата < '20150101';
	Элементы.ГруппаНесколькоПродавцов.Видимость = ЭтоКомиссияНаЗакупкуПостановление1137 И Объект.Дата >= '20150101';
	
	ЭтоКомиссияНаПродажуПостановление1137 = ИспользуетсяПостановлениеНДС1137 И ПравилаПостановления735
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = ЭтоКомиссияНаПродажуПостановление1137 И Объект.Дата < '20150101';
	Элементы.ГруппаСводныйСчетФактура.Видимость        = ЭтоКомиссияНаПродажуПостановление1137 И Объект.Дата >= '20150101';
	
	Элементы.ПредставлениеКППКонтрагента.Видимость = ИспользуетсяПостановлениеНДС1137 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	ВычетОтражается = Не (Объект.Исправление ИЛИ НаОснованииОтчетаКомитенту);
	
	Элементы.ГруппаПолучениеСчетаФактуры.Видимость = Не ПоставщикРезидентТаможенногоСоюза;
	Элементы.НДСПредъявленКВычету.Видимость = УчетНДСКлиентСервер.Версия(Объект.Дата) > 1 
		И ВычетОтражается
		И Не РаздельныйУчетНДСНаСчете19
		И Не ПоставщикРезидентТаможенногоСоюза
		И ПлательщикНДС
		И НЕ НДСИсчисляетсяНалоговымАгентом;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ГруппаКонтрагент.ТолькоПросмотр  = Форма.НаОснованииОтчетаКомитенту;
	Элементы.ГруппаПродавец.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) ИЛИ Объект.ВозвратЧерезКомиссионера;
	
	Элементы.НомерИсправленияСистемный.Доступность = Объект.Исправление;
	Элементы.ДатаИсправленияСистемная.Доступность  = Объект.Исправление;
	
	Элементы.ГруппаВидаОперации.Видимость  = Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.КодСпособаПолучения.Видимость = Форма.ИспользуетсяПостановлениеНДС1137;
	
	ЭтоИсправлениеПоПостановлению1137 = Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Если ЭтоИсправлениеПоПостановлению1137 Тогда
		Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента,Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
	КонецЕсли;
	
	Элементы.ГруппаТекущий.Видимость              = Не ЭтоИсправлениеПоПостановлению1137;
	Элементы.НадписьСчетФактура.Видимость         = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ГруппаРеквизитыИсправления.Видимость = ЭтоИсправлениеПоПостановлению1137;
	
	НадписьВыбор = НСтр("ru = 'Выбор'");
	
	Если Объект.Дата >= '20150101' Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца
		КоличествоСчетовФактурВыданныхПокупателям = Объект.СчетаФактурыВыданныеПокупателям.Количество();
		
		Если КоличествоСчетовФактурВыданныхПокупателям = 0 Тогда
			Форма.НадписьСчетФактураВыбор = НадписьВыбор;
			
		ИначеЕсли КоличествоСчетовФактурВыданныхПокупателям > 1 Тогда
			
			Предмет = "документ,документа,документов,м,,,,0";
			Форма.НадписьСчетаФактурыВыданныеПокупателю = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
				Предмет, "док", Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура, КоличествоСчетовФактурВыданныхПокупателям);
			
		КонецЕсли;
		
		Элементы.НадписьСчетФактураВыбор.Видимость                 = КоличествоСчетовФактурВыданныхПокупателям = 0;
		Элементы.ГруппаОдинСчетФактураВыданныйПокупателю.Видимость = КоличествоСчетовФактурВыданныхПокупателям = 1;
		Элементы.НадписьСчетаФактурыВыданныеПокупателю.Видимость   = КоличествоСчетовФактурВыданныхПокупателям > 1;
		
		// Счет-фактура полученный покупателем-комитентом от комиссионера
		КоличествоПродавцов = Объект.Продавцы.Количество();
		
		Если КоличествоПродавцов = 0 Тогда
			Форма.НадписьНесколькоПродавцовВыбор = НадписьВыбор;
			
		ИначеЕсли КоличествоПродавцов > 1 Тогда
			
			Предмет = "продавец,продавца,продавцов,м,,,,0";
			Форма.НадписьНесколькоПродавцовСсылка = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
				Предмет, "прод", Объект.Продавцы[0].Продавец, КоличествоПродавцов);
			
		КонецЕсли;
		
		Элементы.НадписьНесколькоПродавцовВыбор.Видимость  = КоличествоПродавцов = 0;
		Элементы.ГруппаОдинПродавец.Видимость              = КоличествоПродавцов = 1;
		Элементы.НадписьНесколькоПродавцовСсылка.Видимость = КоличествоПродавцов > 1;
		
	КонецЕсли;
	
	КоличествоОснований = Объект.ДокументыОснования.Количество();
	
	Если КоличествоОснований = 0 Тогда
		Форма.НадписьВыбор = НадписьВыбор;
		
	ИначеЕсли КоличествоОснований > 1 Тогда
		
		Предмет = "документ,документа,документов,м,,,,0";
		Форма.НадписьДокументыОснования = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
			Предмет, "док", Объект.ДокументыОснования[0].ДокументОснование, КоличествоОснований);
		
	КонецЕсли;
	
	Элементы.НадписьВыборДокументаОснования.Видимость = КоличествоОснований = 0;
	Элементы.ГруппаДокументОснования.Видимость        = КоличествоОснований = 1;
	Элементы.НадписьДокументыОснования.Видимость      = КоличествоОснований > 1;
	
	Элементы.ГруппаЕстьКомиссия.Видимость = Форма.ОтражатьСуммыВЖурнале;
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	Элементы.СуммаДокумента.ТолькоПросмотр    = НЕ Форма.НаОснованииОтчетаКомитенту ИЛИ Объект.Дата >= '20150101';
	Элементы.СуммаНДСДокумента.ТолькоПросмотр = НЕ Форма.НаОснованииОтчетаКомитенту ИЛИ Объект.Дата >= '20150101';
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента = Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента = Форма.КППКонтрагента;
		КонецЕсли;
		
		Форма.ПредставлениеКППКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		Форма.ПредставлениеКППКонтрагента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.Дата < '20111001' Тогда
		
		Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.Корректировочный") Тогда
			Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаПоступление");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		
		Исправление      = Ложь;
		НомерИсправления = 0;
		ДатаИсправления  = '00010101';
		
		Объект.Продавец = Неопределено;
		
	КонецЕсли;
	
	ЗаполнитьСписокКодовОпераций();
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		Элементы.КодВидаОперации.СписокВыбора,
		Объект.Дата);
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Объект.ДокументОснование  = Неопределено;
	Объект.ДоговорКонтрагента = Неопределено;
	ВидДоговораКонтрагента    = Неопределено;
	Объект.СуммаДокумента     = 0;
	Объект.СуммаНДСДокумента  = 0;
	Объект.ДокументыОснования.Очистить();
		
	КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(
			Объект.ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	Иначе
		Объект.КППКонтрагента = "";
	КонецЕсли;
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаОперацииНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",                     Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",          Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",              Объект.Исправление);
	СтруктураПараметров.Вставить("КодВидаОперацииОснования", "");
	СтруктураПараметров.Вставить("ДокументыОснования",       Объект.ДокументыОснования);
	СтруктураПараметров.Вставить("НДСПоСтавкам4и2",
		НДСПоСтавкам4и2 И Объект.ДатаВходящегоДокумента < '20150101');
	СтруктураПараметров.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	СтруктураПараметров.Вставить("ВозвратЧерезКомиссионера", Объект.ВозвратЧерезКомиссионера);
	
	Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыОснованияДокументОснованиеПриИзмененииНаСервере()

	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактуры();
	
	ЗаполнитьЗначенияСвойствОбъекта(Объект, ПараметрыСчетаФактуры);
	
	Если Объект.ДокументыОснования.Количество() = 1
		И НЕ Объект.ДокументыОснования[0].ДокументОснование = Объект.ДокументОснование Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;

	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора, НДСПоСтавкам4и2, ВидАгентскогоДоговора");
	
	ВидДоговораКонтрагента = СвойстваДоговора.ВидДоговора;
	НДСПоСтавкам4и2 = СвойстваДоговора.НДСПоСтавкам4и2;
	НДСИсчисляетсяНалоговымАгентом = СвойстваДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	
	Если ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Если Объект.ВозвратЧерезКомиссионера Тогда
			Если Объект.ДокументыОснования.Количество() = 0 Тогда 
				Объект.Продавец = Неопределено;
				Объект.Продавцы.Очистить();
				Объект.ВозвратЧерезКомиссионера = Ложь;
			КонецЕсли;
		Иначе
			Объект.Продавец = Неопределено;
			Объект.Продавцы.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокОтраженияВычетаНаСервере()
	
	Если РаздельныйУчетНДСНаСчете19
		ИЛИ НДСИсчисляетсяНалоговымАгентом Тогда
		Объект.НДСПредъявленКВычету = Ложь;
	Иначе
		СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
		Объект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСчетаФактуры()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ДокОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияСвойствОбъекта(Объект, ПараметрыСчетаФактуры)
	
	ИсключенныеСвойства = "Организация, Контрагент";
		
	Если ОбменСКонтрагентами.ЕстьРабочийЭСФ(Объект.Ссылка) Тогда
		ИсключенныеСвойства = ИсключенныеСвойства + ", ВалютаДокумента,
			|СуммаДокумента, СуммаДокумента, СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение";
	КонецЕсли;
	
	Если ПараметрыСчетаФактуры.Свойство("Продавец") Тогда
		Если ПараметрыСчетаФактуры.Продавец = Неопределено 
			ИЛИ ПараметрыСчетаФактуры.Продавец = Справочники.Контрагенты.ПустаяСсылка() Тогда
			
			ИсключенныеСвойства = ИсключенныеСвойства + ", Продавец";
		
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыСчетаФактуры,,ИсключенныеСвойства);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура();
	ЗначенияЗаполнения  = Новый Структура();
	ЗначениеОтбора      = Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		ЗначенияЗаполнения.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ЗначенияЗаполнения.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Полученный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("ИсправлениеСобственнойОшибки", Объект.ИсправлениеСобственнойОшибки);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Договор", Объект.ДоговорКонтрагента);
	ЗначениеОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура НадписьДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Объект.ДокументыОснования.Очистить();
	Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
		Если СтрокаСписка.Значение.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
		СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
	КонецЦикла;

	ДокументыОснованияДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетФактураВыданныйПокупателюПриИзмененииНаСервере()
	
	ОснованиеСчетаФактурыВыданного	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетФактураВыданныйПокупателю, "ДокументОснование");
	Если ТипЗнч(ОснованиеСчетаФактурыВыданного) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Объект.Субкомиссионер =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСчетаФактурыВыданного, "Контрагент");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетаФактурыВыданныеПокупателям()
	
	ЕстьОшибкиЗаполнения = Ложь;

	Если Не Объект.Исправление Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект" , ЕстьОшибкиЗаполнения);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата исправления счета-фактуры'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаИсправления", "Объект" , ЕстьОшибкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ДатаВходящегоДокумента", ?(Объект.Исправление, Объект.ДатаИсправления, Объект.ДатаВходящегоДокумента));
	ПараметрыФормы.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ПараметрыФормы.Вставить("Комитент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКомитента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Исправление", Объект.Исправление);
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям",
			ПараметрыФормы,
			ЭтаФорма);
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПродавцов()
	
	АдресХранилищаПродавцов = ПоместитьПродавцовВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПродавцов",  АдресХранилищаПродавцов);
	ПараметрыФормы.Вставить("ВозвратЧерезКомиссионера", Объект.ВозвратЧерезКомиссионера);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПродавцы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СчетаФактурыВыданныеПокупателям.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьПродавцовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции	

&НаСервере
Процедура ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

	КоличествоСФВыданныхПокупателю = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0 Тогда
		Объект.СчетФактураВыданныйПокупателю = Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Если КоличествоСФВыданныхПокупателю > 1 Тогда
			Объект.КодВидаОперации = "27";
		КонецЕсли;
	Иначе
		Объект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СуммаДокумента            = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаДокументаКомиссия    = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаНДСДокумента         = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	Объект.СуммаНДСДокументаКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение)

	ТаблицаПродавцов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПродавцов);
	
	Объект.Продавцы.Загрузить(ТаблицаПродавцов);

	КоличествоПродавцов = Объект.Продавцы.Количество();
	Если КоличествоПродавцов > 0 Тогда
		Объект.Продавец = Объект.Продавцы[0].Продавец;
		Если КоличествоПродавцов > 1 Тогда
			Объект.КодВидаОперации = "27";
		КонецЕсли;
	Иначе
		Объект.Продавец = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьРежимЗаписи();
	Если ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРежимЗаписи()
	
	Проводить = Истина;
	
	Для Каждого Стр из Объект.ДокументыОснования Цикл
		Если Стр.ДокументОснование <> Неопределено
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "Проведен") Тогда
			Проводить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)
	
	Если Объект.Исправление Тогда
		Если Объект.Дата < Объект.ДатаИсправления Тогда 
			Объект.Дата = Объект.ДатаИсправления;
		КонецЕсли;
	Иначе
		Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
			Объект.Дата = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьНажатие(Элемент)
	
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВыборДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураВыданныйПокупателюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетФактураВыданныйПокупателю) Тогда
		
		СчетФактураВыданныйПокупателюПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти
