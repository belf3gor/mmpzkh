
#Область Описаниепеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетФактураПолученный",
		"ФормаДокументаКорректировочный",
		НСтр("ru='Новости: Счет-фактура полученный'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументыСписокСчетовФактур" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервереСчетовФактур(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям" Тогда
		ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураПолученныйКорректировочный";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	ПараметрыЗаписи.РеквизитыСФ        = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ТекущийОбъект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	Оповестить("Запись_СчетФактураПолученныйКорректировочный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)

	Если Объект.Исправление Тогда
		Если Объект.Дата < Объект.ДатаИсправления Тогда 
			Объект.Дата = Объект.ДатаИсправления;
		КонецЕсли;
	Иначе
		Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
			Объект.Дата = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;

	ПриИзмененииДаты();
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Поставщик";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Ложь);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры


&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьОснованиеСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьСписокСчетовФактур();
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураКорректируемыйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ИсходныеСчетаФактуры.Количество() = 1 Тогда
		ПоказатьЗначение( , ИсходныеСчетаФактуры[0].СчетФактура);
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СчетаФактуры", ИсходныеСчетаФактуры);
			
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраСчетовФактурОснований", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьРежимЗаписи();
	Если ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ЗагрузитьСписокИсходныхСчетовФактур();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	КоличествоОснований = КоличествоОснований(Объект.ДокументыОснования);
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		КППКонтрагента = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Иначе
		ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
		Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			НаОснованииОтчетаКомитенту = (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокИсходныхСчетовФактур()
	
	ИсходныеСчетаФактуры.Очистить();
	
	Для Каждого Основание Из Объект.ДокументыОснования Цикл
		
		СчетФактура = ИсходныеСчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(СчетФактура, Основание); 
		
		РеквизитыИсходногоСчетаФактуры = Документы.СчетФактураПолученный.ПолучитьРеквизитыИсходногоСчетаФактурыДляКорректировки(
			Основание.ДокументОснование, Объект.Ссылка, Истина, Основание.ИсходныйДокумент);
		
		Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СчетФактура, РеквизитыИсходногоСчетаФактуры); 
			
			Если Не ЗначениеЗаполнено(Основание.ИсходныйДокумент) Тогда
				Основание.ИсходныйДокумент = РеквизитыИсходногоСчетаФактуры.СчетФактура;
			КонецЕсли;
		Иначе
			СчетФактура.СчетФактураКраткоеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"), ?(Основание.УчитыватьИсправлениеИсходногодокумента,
				Основание.НомерИсходногоДокумента + " (испр. " + Основание.НомерИсправленияИсходногоДокумента 
				+ ")", Основание.НомерИсходногоДокумента), Формат(Основание.ДатаИсходногоДокумента, "ДЛФ=Д"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	ПравилаПостановления735 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Объект.Дата) >= 3;
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаПродавец.Видимость = ИспользуетсяПостановлениеНДС1137
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		
	Если ИспользуетсяПостановлениеНДС1137
		И ПравилаПостановления735
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Корректировочный счет-фактура полученный комиссионером от комитента-продавца
		Элементы.ГруппаСчетаФактурыВыданные.Видимость = Истина;
	Иначе
		Элементы.ГруппаСчетаФактурыВыданные.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаУвеличениеКомиссия.Видимость    = ОтражатьСуммыВЖурнале;
	Элементы.ГруппаУменьшениеКомиссия.Видимость    = ОтражатьСуммыВЖурнале;
	Элементы.ПредставлениеКППКонтрагента.Видимость = ИспользуетсяПостановлениеНДС1137
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо") 
		<> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	Элементы.ГруппаИтоги.Видимость = ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаВидаОперацииНаУменьшение.Видимость = ВерсияКодовВидовОпераций > 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	Объект   = ЭтотОбъект.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.Контрагент.ТолькоПросмотр = ЭтотОбъект.НаОснованииОтчетаКомитенту;
	Элементы.Продавец.Доступность      = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.НомерИсправленияСистемный.Доступность = Объект.Исправление;
	Элементы.ДатаИсправлениясистемная.Доступность  = Объект.Исправление;
	
	Элементы.ГруппаВидаОперации.Видимость = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	
	ЭтоИсправлениеПоПостановлению1137 = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Если ЭтоИсправлениеПоПостановлению1137 Тогда
		ЭтотОбъект.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента,Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
	КонецЕсли;
	
	Элементы.ГруппаТекущий.Видимость              = Не ЭтоИсправлениеПоПостановлению1137;
	Элементы.НадписьСчетФактура.Видимость         = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ГруппаРеквизитыИсправления.Видимость = ЭтоИсправлениеПоПостановлению1137;
	
	НадписьВыбор = НСтр("ru = 'Выбор'");
	
	// Счет-фактура полученный комиссионером от комитента-продавца
	КоличествоСчетовФактурВыданныхПокупателям = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	
	Если КоличествоСчетовФактурВыданныхПокупателям = 0 Тогда
		ЭтотОбъект.НадписьСчетФактураВыбор = НадписьВыбор;
	ИначеЕсли КоличествоСчетовФактурВыданныхПокупателям > 1 Тогда
		
		Предмет = "документ,документа,документов,м,,,,0";
		ЭтотОбъект.НадписьСчетаФактурыВыданныеПокупателю = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
			Предмет, "док", Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура, КоличествоСчетовФактурВыданныхПокупателям);
		
	КонецЕсли;
	
	Элементы.НадписьСчетФактураВыбор.Видимость                 = КоличествоСчетовФактурВыданныхПокупателям = 0;
	Элементы.ГруппаОдинСчетФактураВыданныйПокупателю.Видимость = КоличествоСчетовФактурВыданныхПокупателям = 1;
	Элементы.НадписьСчетаФактурыВыданныеПокупателю.Видимость   = КоличествоСчетовФактурВыданныхПокупателям > 1;
	
	КоличествоОснований = ЭтотОбъект.КоличествоОснований;
	
	Если КоличествоОснований = 0 Тогда
		ЭтотОбъект.НадписьВыбор = НадписьВыбор;
	ИначеЕсли КоличествоОснований > 1 Тогда
		
		Предмет = "документ,документа,документов,м,,,,0";
		ЭтотОбъект.НадписьДокументыОснования = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
			Предмет, "док", Объект.ДокументыОснования[0].ДокументОснование, КоличествоОснований);
		
	КонецЕсли;
	
	Элементы.НадписьВыбор.Видимость              = КоличествоОснований = 0;
	Элементы.СтраницаОснования.Видимость         = КоличествоОснований = 1;
	Элементы.НадписьДокументыОснования.Видимость = КоличествоОснований > 1;
	
	Элементы.НадписьИзменитьОснованиеСчетаФактуры.Видимость = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику");
	
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		ЭтотОбъект.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		ЭтотОбъект.НадписьВидОперации = "";
	КонецЕсли;

	Если ЭтотОбъект.ВерсияКодовВидовОпераций > 1 Тогда 
		ТекущийКод = Элементы.КодВидаОперацииНаУменьшение.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперацииНаУменьшение);
		Если ТекущийКод <> Неопределено Тогда 
			ЭтотОбъект.НадписьВидОперацииУменьшение = Сред(ТекущийКод.Представление, 5);
		Иначе
			ЭтотОбъект.НадписьВидОперацииУменьшение = "";
		КонецЕсли;
	КонецЕсли;
	
	КоличествоКорректируемыхСчетовФактур = ЭтотОбъект.ИсходныеСчетаФактуры.Количество();
	
	Если КоличествоКорректируемыхСчетовФактур <> 0 Тогда 
		ТекстКорректируемыйСчетФактура = ЭтотОбъект.ИсходныеСчетаФактуры[0].СчетФактураКраткоеПредставление;
	Иначе
		ТекстКорректируемыйСчетФактура = "";
	КонецЕсли;
	
	Если КоличествоКорректируемыхСчетовФактур > 1 Тогда
		Элементы.НадписьСчетФактураКорректируемый.Заголовок =  НСтр("ru = 'К счетам-фактурам'");
		ЭтотОбъект.НадписьСчетФактураКорректируемый = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и еще %2 с/ф'"),
			ТекстКорректируемыйСчетФактура, КоличествоКорректируемыхСчетовФактур - 1);
	Иначе
		Элементы.НадписьСчетФактураКорректируемый.Заголовок =  НСтр("ru = 'К счету-фактуре'");
		ЭтотОбъект.НадписьСчетФактураКорректируемый = ТекстКорректируемыйСчетФактура;
	КонецЕсли;

	ЭтотОбъект.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма документа после корректировки %1 %2, в т.ч. НДС %3'"),
		Объект.СуммаДокумента, Объект.ВалютаДокумента, Объект.СуммаНДСДокумента);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента = Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента = ЭтотОбъект.КППКонтрагента;
		КонецЕсли;
		
		ЭтотОбъект.ПредставлениеКППКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		ЭтотОбъект.ПредставлениеКППКонтрагента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента)
	
	ЭтотОбъект.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКодВидаОперацииНаСервере();

	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.Продавец = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокКодовОпераций();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		Элементы.КодВидаОперации.СписокВыбора,
		Объект.Дата);
		
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
			Элементы.КодВидаОперацииНаУменьшение.СписокВыбора,
			Объект.Дата);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	КонтрагентПриИзмененииНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДоговорКонтрагента	= Неопределено;
	ВидДоговораКонтрагента 		= Неопределено;
	Объект.СуммаДокумента 		= 0;
	Объект.СуммаНДСДокумента	= 0;
	Объект.ДокументыОснования.Очистить();
	
	КППКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Объект.ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	Иначе
		Объект.КППКонтрагента	= "";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаОперацииНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",                     Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",          Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",              Объект.Исправление);
	СтруктураПараметров.Вставить("КодВидаОперацииОснования", "");
	СтруктураПараметров.Вставить("ДокументыОснования",       Объект.ДокументыОснования);
	СтруктураПараметров.Вставить("НДСПоСтавкам4и2",          Ложь);
	
	Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
	
	Если ВерсияКодовВидовОпераций > 1
		И НЕ ЗначениеЗаполнено(Объект.КодВидаОперацииНаУменьшение) Тогда
		Объект.КодВидаОперацииНаУменьшение = "18";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыОснованияДокументОснованиеПриИзмененииНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОпределениеПараметровСчетаФактуры();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗагрузитьСписокИсходныхСчетовФактур();
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Если ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Объект.Продавец = Неопределено;
	КонецЕсли;
	
	ТаблицаОснований = Объект.ДокументыОснования.Выгрузить(, "НомерИсходногоДокумента, ДатаИсходногоДокумента");
	ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
	
	Если ТаблицаОснований.Количество() > 1 Тогда
		СводныйКорректировочный = Истина;
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный 
		И УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Объект.Дата) >= 3 Тогда
		// Получение единого корректировочного счета-фактуры
		Объект.КодВидаОперации             = "01";
		Объект.КодВидаОперацииНаУменьшение = "01";
	Иначе
		Объект.КодВидаОперации             = "01";
		Объект.КодВидаОперацииНаУменьшение = "18";
	КонецЕсли;

	УстановитьВидимость();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура();
	ЗначенияЗаполнения  = Новый Структура();
	ЗначениеОтбора      = Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		ЗначенияЗаполнения.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ЗначенияЗаполнения.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Полученный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("ИсправлениеСобственнойОшибки", Объект.ИсправлениеСобственнойОшибки);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Договор", Объект.ДоговорКонтрагента);
	ЗначениеОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоОснований(ТаблицаДокументовОснования)

	ТаблицаДокументовОснованийСводно = ТаблицаДокументовОснования.Выгрузить();
	ТаблицаДокументовОснованийСводно.Свернуть("ДокументОснование");
	КоличествоОснований = ТаблицаДокументовОснованийСводно.Количество();
	
	Возврат КоличествоОснований;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Объект.ДокументыОснования.Очистить();
	Если ВыбранноеЗначение.Количество() = 0 Тогда 
		Объект.СуммаДокумента 		= 0;
		Объект.СуммаНДСДокумента	= 0;
	Иначе
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ДокументыОснованияДокументОснованиеПриИзмененииНаСервере();

	КоличествоОснований = КоличествоОснований(Объект.ДокументыОснования);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

	КоличествоСФВыданныхПокупателю = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0 Тогда
		Объект.СчетФактураВыданныйПокупателю = Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
	Иначе
		Объект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СуммаДокумента            = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаНДСДокумента         = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	
	Если Объект.ДокументыОснования.Количество()> 0 Тогда 
		
		Объект.ДокументыОснования[0].СуммаУвеличение = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаУвеличение");
		Объект.ДокументыОснования[0].СуммаНДСУвеличение= Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУвеличение");
		Объект.ДокументыОснования[0].СуммаУменьшение = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаУменьшение");
		Объект.ДокументыОснования[0].СуммаНДСУменьшение= Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУменьшение");
		
		Объект.СуммаУвеличениеКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаУвеличение");
		Объект.СуммаНДСУвеличениеКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУвеличение");
		Объект.СуммаУменьшениеКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаУменьшение");
		Объект.СуммаНДСУменьшениеКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУменьшение");
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРежимЗаписи()
	
	Проводить = Истина;
	
	Для Каждого Стр из Объект.ДокументыОснования Цикл
		Если Стр.ДокументОснование <> Неопределено
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "Проведен") Тогда
			Проводить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьНажатие(Элемент)
	
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();

КонецПроцедуры

&НаКлиенте
Процедура НадписьВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Уменьшение Тогда
			Объект.КодВидаОперацииНаУменьшение = ВыбранныйКод.Значение;
			НадписьВидОперацииУменьшение = Сред(ВыбранныйКод.Представление, 5);
		Иначе
			Объект.КодВидаОперации = ВыбранныйКод.Значение;
			НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НадписьСчетФактураВыборНажатие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетаФактурыВыданныеПокупателям()
	
	ЕстьОшибкиЗаполнения = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ДатаВходящегоДокумента", Объект.ДатаВходящегоДокумента);
	ПараметрыФормы.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ПараметрыФормы.Вставить("Комитент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКомитента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Исправление", Объект.Исправление);
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям",
			ПараметрыФормы,
			ЭтаФорма);
					
			
КонецПроцедуры

&НаСервере
Функция ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СчетаФактурыВыданныеПокупателям.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура НадписьИзменитьСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСписокСчетовФактур()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормыВыборСчетовФактур();
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыСписокСчетовФактур",
		ПараметрыФормы,
		ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервереСчетовФактур(ВыбранноеЗначение)

	ТаблицаОснований = Объект.ДокументыОснования.Выгрузить();
	
	ЭтотОбъект.ИсходныеСчетаФактуры.Очистить();
	Объект.ДокументыОснования.Очистить();
	Если ВыбранноеЗначение.Количество() = 0 Тогда 
		Объект.СуммаДокумента 		= 0;
		Объект.СуммаНДСДокумента	= 0;
	Иначе
		ФильтрПоИсходнымДокументам = Новый Структура("ИсходныйДокумент");
	
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 

			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();

			ФильтрПоИсходнымДокументам.ИсходныйДокумент = СтрокаСписка.Значение;
			НайденныеСтроки = ТаблицаОснований.НайтиСтроки(ФильтрПоИсходнымДокументам);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденныеСтроки[0]);
			Иначе
				СтрокаТаблицы.ДокументОснование = ТаблицаОснований[0].ДокументОснование;
				СтрокаТаблицы.ИсходныйДокумент = СтрокаСписка.Значение;
			КонецЕсли;

			СтрокаТаблицы = ЭтотОбъект.ИсходныеСчетаФактуры.Добавить();
			СтрокаТаблицы.СчетФактура = СтрокаСписка.Значение;
			
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект.КоличествоОснований = КоличествоОснований(Объект.ДокументыОснования);
	
	ДокументыОснованияДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыВыборСчетовФактур()
	
	СтруктураПараметров = Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		
		СтруктураПараметров.Вставить("СписокСчетовФактур", Новый СписокЗначений);
		
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			СтруктураПараметров.СписокСчетовФактур.Добавить(СтрокаТаблицы.ИсходныйДокумент)
		КонецЦикла;
	
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Валюта", Объект.ВалютаДокумента);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Истина);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперацииНаУменьшение);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперацииУменьшение = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперацииУменьшение = "";
	КонецЕсли;
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти
