
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "ЭтоИсправлениеСобственнойОшибки,ВозвратЧерезКомиссионера");
	
	АдресХранилищаПродавцов = Параметры.АдресХранилищаПродавцов;
	
	Если НЕ ПустаяСтрока(АдресХранилищаПродавцов) Тогда
		ЗагрузитьТаблицуПродавцовИзВременногоХранилища(АдресХранилищаПродавцов);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохраненияДанныхЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	ИначеЕсли ПеренестиВДокумент Тогда
		
		ОбработкаПроверкиЗаполненияНаКлиенте(Отказ);
		
		Если Отказ Тогда
			Модифицированность = Истина;
			ПеренестиВДокумент = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если ПеренестиВДокумент Тогда
		АдресХранилищаПродавцов = ПоместитьТаблицуПродавцовВоВременноеХранилище();
		СтруктураВозврата.Вставить("АдресХранилищаПродавцов", АдресХранилищаПродавцов);
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиПродавцы

&НаКлиенте
Процедура ПродавцыПродавецПриИзменении(Элемент)
	
	Если НЕ ЭтоИсправлениеСобственнойОшибки Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = Элементы.Продавцы.ТекущаяСтрока;
	ПродавцыПродавецПриИзмененииПриИзмененииНаСервере(НомерСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформление()
	
	СчетФактураФормы.УстановитьУсловноеОформлениеФормыПродавцы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиЗаполненияНаКлиенте(Отказ)
	
	КоличествоПродавцов = Продавцы.Количество();
	Если ВозвратЧерезКомиссионера
		И КоличествоПродавцов > 1 Тогда 
		ТекстСообщения = НСтр("ru = 'Для счета-фактуры полученного на возврат через комиссионера не предусмотрена регистрация сводного счета-фактуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавцы",, Отказ);
	КонецЕсли;
	
	Для Индекс = 0 По КоличествоПродавцов - 1 Цикл
		
		СтрокаТаблицы = Продавцы[Индекс];
		
		Префикс = "Продавцы[%1]";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(Индекс, "ЧН=0; ЧГ="));
				
		ИмяСписка = "Продавцы";
				
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Продавец) Тогда
			Поле = Префикс + ".Продавец";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Продавец'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоИсправлениеСобственнойОшибки Тогда
		ОбработкаПроверкиЗаполненияДляИсправленияСобственнойОшибки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияДляИсправленияСобственнойОшибки(Отказ)
	
	ИмяСписка = "Продавцы";
	
	Для Индекс = 0 По Продавцы.Количество() - 1 Цикл
		
		ИННЗаполнен = Истина;
		КППЗаполнен = Истина;
		
		СтрокаТаблицы = Продавцы[Индекс];
		
		Префикс = "Продавцы[%1]";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(Индекс, "ЧН=0; ЧГ="));
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННПродавцаДоИзменения) Тогда
			Поле = Префикс + ".ИННПродавцаДоИзменения";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'ИНН продавца'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИННПродавца) Тогда
			Поле = Префикс + ".ИННПродавца";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'ИНН продавца'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			ИННЗаполнен = Ложь;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоЮрЛицо И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КПППродавцаДоИзменения) Тогда
			Поле = Префикс + ".КПППродавцаДоИзменения";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'КПП продавца'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоЮрЛицо И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КПППродавца) Тогда
			Поле = Префикс + ".КПППродавца";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'КПП продавца'"),
					Индекс + 1, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			КППЗаполнен = Ложь;
		КонецЕсли;
		
		Если НЕ ИННЗаполнен ИЛИ НЕ КППЗаполнен Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДляПроверки = Новый Структура;
		СтруктураДляПроверки.Вставить("ИНН"         , СтрокаТаблицы.ИННПродавца);
		СтруктураДляПроверки.Вставить("ПроверитьИНН", Истина);
		
		СтруктураДляПроверки.Вставить("КПП"         , СтрокаТаблицы.КПППродавца);
		СтруктураДляПроверки.Вставить("ПроверитьКПП", СтрокаТаблицы.ЭтоЮрЛицо);
		
		РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
			СтруктураДляПроверки.ИНН,
			СтрокаТаблицы.ЭтоЮрЛицо);
		Если НЕ РезультатПроверки.СоответствуетТребованиям ИЛИ НЕ (СтрокаТаблицы.ЭтоЮрЛицо = РезультатПроверки.ЭтоЮрЛицо) Тогда
			Поле = Префикс + ".ИННПродавца";
			ТекстОшибкиИНН = СтрШаблон(
				НСтр("ru='Неверно указан ИНН: %1.
					|%2.'"),
				СтруктураДляПроверки.ИНН,
				РезультатПроверки.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИНН, , Поле, , Отказ);
		КонецЕсли;
		
		Если СтруктураДляПроверки.ПроверитьКПП Тогда
			РезультатПроверки =  ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(
				СтруктураДляПроверки.КПП,
				СтрокаТаблицы.ЭтоЮрЛицо,
				Ложь);
			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				ТекстОшибкиКПП = "";
				Поле = Префикс + ".КПППродавца";
				Если ПустаяСтрока(СтруктураДляПроверки.КПП) Тогда
					ТекстОшибкиКПП = НСтр("ru='Не указан КПП.'");
				ИначеЕсли РезультатПроверки.ОписаниеОшибки = "Введен КПП обособленного подразделения. Измените вид контрагента"
					ИЛИ РезультатПроверки.ОписаниеОшибки = "Возможно, введен КПП юридического лица. Измените вид контрагента" Тогда
					// Если указан КПП обособленного контрагента в счет-фактуре, то не считаем ошибкой некорректный вид контрагента.
				Иначе
					ТекстОшибкиКПП = СтрШаблон(
						НСтр("ru='Неверно указан КПП: %1.
							|%2.'"),
						СтруктураДляПроверки.КПП,
						РезультатПроверки.ОписаниеОшибки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстОшибкиКПП) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиКПП, , Поле, , Отказ);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуПродавцовИзВременногоХранилища(АдресХранилища)
	
	ТаблицаПродавцы = ПолучитьИзВременногоХранилища(АдресХранилища);
	Продавцы.Загрузить(ТаблицаПродавцы);
	
	Для Каждого СтрокаТЧ Из Продавцы Цикл
		СтрокаТЧ.ЭтоЮрЛицо = ЭтоЮрЛицо(СтрокаТЧ.Продавец);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПродавцыПродавецПриИзмененииПриИзмененииНаСервере(НомерСтроки)
	
	СтрокаТаблицы = Продавцы.НайтиПоИдентификатору(НомерСтроки);
	СтрокаТаблицы.ЭтоЮрЛицо = ЭтоЮрЛицо(СтрокаТаблицы.Продавец);
	ИННКПППродавца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Продавец, "ИНН, КПП");
	СтрокаТаблицы.ИННПродавца            = ИННКПППродавца.ИНН;
	СтрокаТаблицы.ИННПродавцаДоИзменения = ИННКПППродавца.ИНН;
	СтрокаТаблицы.КПППродавца            = ИННКПППродавца.КПП;
	СтрокаТаблицы.КПППродавцаДоИзменения = ИННКПППродавца.КПП;
	
КонецПроцедуры

&НаСервере
Функция ЭтоЮрЛицо(Контрагент)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮридическоеФизическоеЛицо")
		= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
КонецФункции

&НаСервере
Функция ПоместитьТаблицуПродавцовВоВременноеХранилище()
	
	ТаблицаПродавцы = Продавцы.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПродавцы, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросСохраненияДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
