// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры" Тогда 
		Объект.ДокументОснование  = ВыбранноеЗначение.Документ;
		Модифицированность = Истина;
		ПриИзмененииДокументаОснования();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям" Тогда
		ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПродавцы" Тогда
		ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПлатежныеДокументы" Тогда
		ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураПолученныйНаАванс";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблицыАвансы();
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)

	Если Объект.Исправление Тогда
		Если Объект.Дата < Объект.ДатаИсправления Тогда 
			Объект.Дата = Объект.ДатаИсправления;
		КонецЕсли;
	Иначе
		Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
			Объект.Дата = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;

	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСчетаФактурыПриИзменении(Элемент)

	ВидСчетаФактурыПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Объект.ДокументОснование  = Неопределено;
	Объект.ДоговорКонтрагента = Неопределено;
	Объект.ДокументыОснования.Очистить();
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Контрагент, ДоговорКонтрагента,
		|ВалютаДокумента, Продавец, ВидДоговораКонтрагента, ИспользуетсяПостановлениеНДС1137,
		|НДСИсчисляетсяНалоговымАгентом, КодВидаОперации, Дата, ВидСчетаФактуры, Исправление, ДокументыОснования");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВидДоговораКонтрагента           = ВидДоговораКонтрагента;
	ДанныеОбъекта.ИспользуетсяПостановлениеНДС1137 = ИспользуетсяПостановлениеНДС1137;
	
	КонтрагентПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта,, "ДокументыОснования");
	ВидДоговораКонтрагента         = ДанныеОбъекта.ВидДоговораКонтрагента;
	НДСИсчисляетсяНалоговымАгентом = ДанныеОбъекта.НДСИсчисляетсяНалоговымАгентом;
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура КомитентПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, Комитент, ДоговорКомитента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	КомитентПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКомитентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураВыданныйПокупателюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетФактураВыданныйПокупателю) Тогда
		
		СчетФактураВыданныйПокупателюПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубкомиссионерПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетаФактурыВыданныеПокупателюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьПродавцовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовСсылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПлатежныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПлатежныеДокументы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансы

&НаКлиенте
Процедура АвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		РасчетнаяСтавкаНДС = УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПоУмолчанию(Объект.Дата);
		Элемент.ТекущиеДанные.СтавкаНДС                = РасчетнаяСтавкаНДС;
		Элемент.ТекущиеДанные.СтавкаНДСДоКорректировки = РасчетнаяСтавкаНДС;
	КонецЕсли;
	
	ЗаполнитьЗаголовкиСтрок(Элемент.ТекущиеДанные);

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыАвансы()

	Для Каждого СтрокаТаблицы Из Объект.Авансы Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НадписьДоИзменения     = НСтр("ru = 'до изменения:'");
	СтрокаТабличнойЧасти.НадписьПослеИзменения  = НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПередУдалением(Элемент, Отказ)
	
	Если Объект.Авансы.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаПослеКорректировкиПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Авансы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура АвансыСтавкаНДСПослеКорректировкиПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура АвансыКорректируемыйСчетФактураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Авансы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КорректируемыйСчетФактура)
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДоКорректировки) Тогда
		ДанныеСтроки = Новый Структура("КорректируемыйСчетФактура,Сумма,СтавкаНДС,СуммаНДС");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
		ПараметрыДоплаты = ПараметрыДоплатыКАвансу(ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыДоплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКорректируемыйСчетФактураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Ссылка = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение( , НСтр("ru='Нельзя выбирать в качестве корректируемого документа этот же документ'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыСтавкиДоКорректировки();

КонецПроцедуры

&НаКлиенте
Процедура АвансыСтавкаНДСДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыСтавкиДоКорректировки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблицыАвансы();

	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СписокТиповДляВыбора.ЗагрузитьЗначения(УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(Объект.ВидСчетаФактуры, Объект.Исправление));
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
			"ВидДоговора,УчетАгентскогоНДС,ВидАгентскогоДоговора");
		ВидДоговораКонтрагента = СвойстваДоговора.ВидДоговора;
		НДСИсчисляетсяНалоговымАгентом = СвойстваДоговора.УчетАгентскогоНДС 
			И СвойстваДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	Иначе
		ВидДоговораКонтрагента         = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
		НДСИсчисляетсяНалоговымАгентом = Ложь;
	КонецЕсли;
	
	НаОснованииОтчетаКомитенту = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Если Параметры.Ключ.Пустая() И НаОснованииОтчетаКомитенту Тогда
		Если Объект.Авансы.Количество() = 0 Тогда
			СтрокаАвансы = Объект.Авансы.Добавить();
		КонецЕсли;
		
		Если Объект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс
			И Объект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
			Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		КонецЕсли;
		
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	НадписьПлатежныеДокументы = НСтр("ru='Платежные документы'");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УпрощенныйУчетНДС	= УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	
	ПравилаПостановления735 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Объект.Дата) >= 3;
	
	ИспользуетсяПостановлениеНДС1137	= УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);

	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	Объект   = ЭтотОбъект.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.Контрагент.ТолькоПросмотр    = ЭтотОбъект.НаОснованииОтчетаКомитенту;
	Элементы.Продавец.Доступность         = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКомитента.Доступность = ЗначениеЗаполнено(Объект.Комитент);
	
	Элементы.НомерИсправленияСистемный.Доступность = Объект.Исправление;
	Элементы.ДатаИсправлениясистемная.Доступность  = Объект.Исправление;
	
	Элементы.ВидСчетаФактуры.Доступность   = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаВидаОперации.Видимость  = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	Элементы.КодСпособаПолучения.Видимость = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	
	ЭтоКомиссияНаПродажу1137 = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И ЭтотОбъект.ПравилаПостановления735
		И ЭтотОбъект.НаОснованииОтчетаКомитенту;
	
	Элементы.ГруппаСчетФактураСубкомиссионер.Видимость    = ЭтоКомиссияНаПродажу1137 И Объект.Дата < '20150101';
	Элементы.ГруппаСводныйСчетФактура.Видимость           = ЭтоКомиссияНаПродажу1137 И Объект.Дата >= '20150101';
	Элементы.ГруппаРеквизитыСчетаФактурыНаАванс.Видимость = НЕ ЭтоКомиссияНаПродажу1137 
		ИЛИ ЭтоКомиссияНаПродажу1137 И Объект.Дата < '20150101';
	
	НадписьВыбор = НСтр("ru = 'Выбор'");
	
	Если Объект.Дата >= '20150101' Тогда
		
		КоличествоСчетовФактурВыданныхПокупателям = Объект.СчетаФактурыВыданныеПокупателям.Количество();
		
		Если КоличествоСчетовФактурВыданныхПокупателям = 0 Тогда
			ЭтотОбъект.НадписьСчетФактураВыбор = НадписьВыбор;
		ИначеЕсли КоличествоСчетовФактурВыданныхПокупателям > 1 Тогда
			
			Предмет = "документ,документа,документов,м,,,,0";
			ЭтотОбъект.НадписьСчетаФактурыВыданныеПокупателю = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
				Предмет, "док", Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура, КоличествоСчетовФактурВыданныхПокупателям);
			
		КонецЕсли;
		
		Элементы.НадписьСчетФактураВыбор.Видимость                 = КоличествоСчетовФактурВыданныхПокупателям = 0;
		Элементы.ГруппаОдинСчетФактураВыданныйПокупателю.Видимость = КоличествоСчетовФактурВыданныхПокупателям = 1;
		Элементы.НадписьСчетаФактурыВыданныеПокупателю.Видимость   = КоличествоСчетовФактурВыданныхПокупателям > 1;
		
	КонецЕсли;
	
	ЭтоИсправлениеПоПостановлению1137 = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Если ЭтоИсправлениеПоПостановлению1137 Тогда
		ЭтотОбъект.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента,Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
	КонецЕсли;
	
	Элементы.ГруппаТекущий.Видимость              = Не ЭтоИсправлениеПоПостановлению1137;
	Элементы.НадписьСчетФактура.Видимость         = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ГруппаРеквизитыИсправления.Видимость = ЭтоИсправлениеПоПостановлению1137;
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		ЭтотОбъект.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		ЭтотОбъект.НадписьВидОперации = "";
	КонецЕсли;
	
	НДСПредъявленКВычетуДоступен = 
		(УчетНДСКлиентСервер.Версия(Объект.Дата) > 1 ИЛИ ЭтотОбъект.УпрощенныйУчетНДС)
		И НЕ ЭтотОбъект.НаОснованииОтчетаКомитенту
		И НЕ (ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента"))
		И ЭтотОбъект.ПлательщикНДС;
	
	Элементы.НДСПредъявленКВычету.Видимость = НДСПредъявленКВычетуДоступен;
	
	ЭтоКомиссияНаЗакупку1137 = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137
		И ЭтотОбъект.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку");
	
	ЭтоСчетФактураНаАвансКомитента = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137
		И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента");

	ЭтоКорректировочныйНаАванс = Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.КорректировочныйНаАванс");
		
	Если ЭтоКорректировочныйНаАванс Тогда
		Элементы.СуммаДокумента.Заголовок = НСтр("ru='Увеличение суммы'");
	Иначе
		Элементы.СуммаДокумента.Заголовок = НСтр("ru='Всего'");
	КонецЕсли;
	
	Элементы.ГруппаНаАвансКомитентаПоЗакупке.Видимость = ЭтоСчетФактураНаАвансКомитента;
	
	КоличествоПродавцов = Объект.Продавцы.Количество();
	Элементы.Продавец.Видимость = ЭтоКомиссияНаЗакупку1137 И Объект.Дата < '20150101';
	Элементы.НадписьНесколькоПродавцовВыбор.Видимость = ЭтоКомиссияНаЗакупку1137 И Объект.Дата >= '20150101' И КоличествоПродавцов = 0;
	Элементы.ГруппаОдинПродавец.Видимость = ЭтоКомиссияНаЗакупку1137 И Объект.Дата >= '20150101' И КоличествоПродавцов = 1;
	Элементы.НадписьНесколькоПродавцовСсылка.Видимость = ЭтоКомиссияНаЗакупку1137 И Объект.Дата >= '20150101' И КоличествоПродавцов > 1;
	
	Элементы.НадписьПлатежныеДокументы.Видимость = ЭтоКомиссияНаЗакупку1137 И Объект.Дата >= '20150101';
	
	Если ЭтоКомиссияНаЗакупку1137 И Объект.Дата >= '20150101' Тогда
		
		Если КоличествоПродавцов = 0 Тогда
			ЭтотОбъект.НадписьНесколькоПродавцовВыбор = НадписьВыбор;
		ИначеЕсли КоличествоПродавцов > 1 Тогда
			
			Предмет = "продавец,продавца,продавцов,м,,,,0";
			ЭтотОбъект.НадписьНесколькоПродавцовСсылка = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
				Предмет, "прод", Объект.Продавцы[0].Продавец, КоличествоПродавцов);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЕстьКомиссия =  Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")
		И ЭтотОбъект.ОтражатьСуммыВЖурнале;
	Элементы.ГруппаЕстьКомиссия.Видимость = ЕстьКомиссия;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента)
	
	ЭтотОбъект.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактуруНаАвансНаСервере(Знач ДокументОснование)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСчетФактуруНаАванс(ДокументОснование, ДокументОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	НаОснованииОтчетаКомитенту = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		ДанныеОбъекта = ДанныеОбъектаДляОпределенияКВО();
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(ДанныеОбъекта);
	Иначе
		Объект.КодВидаОперации  = "";
		Объект.Исправление      = Ложь;
		Объект.НомерИсправления = 0;
		Объект.ДатаИсправления  = '00010101';
		Объект.ВидСчетаФактуры  = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		Объект.Продавец         = Неопределено;
		Объект.Комитент         = Неопределено;
		Объект.ДоговорКомитента = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокКодовОпераций();
	
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		Элементы.КодВидаОперации.СписокВыбора,
		Объект.Дата);
		
КонецПроцедуры

&НаСервере
Процедура ВидСчетаФактурыПриИзмененииНаСервере()

	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		ОчиститьРеквизитыПоКомиссии();
		ОчиститьСуммыДоКорректировки();
	ИначеЕсли Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс Тогда
		ОчиститьРеквизитыПоКомиссии();
	Иначе //НаАвансКомитента
		ОчиститьСуммыДоКорректировки();
		Объект.НДСПредъявленКВычету = Ложь;
		Если ОтражатьСуммыВЖурнале Тогда 
			Объект.СуммаДокументаКомиссия    = Объект.Авансы.Итог("Сумма");
			Объект.СуммаНДСДокументаКомиссия = Объект.Авансы.Итог("СуммаНДС");
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		ДанныеОбъекта = ДанныеОбъектаДляОпределенияКВО();
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицыАвансы();
	
	УправлениеФормой(ЭтаФорма);
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);

КонецПроцедуры

&НаСервере
Процедура ОчиститьСуммыДоКорректировки()
	
	Для Каждого СтрокаАванса Из Объект.Авансы Цикл
		Если СтрокаАванса.СуммаДоКорректировки > 0 Тогда
			СтрокаАванса.Сумма = СтрокаАванса.Сумма - СтрокаАванса.СуммаДоКорректировки;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(
				СтрокаАванса, Истина);
		КонецЕсли;
		СтрокаАванса.СуммаДоКорректировки            = 0;
		СтрокаАванса.СуммаНДСДоКорректировки         = 0;
		СтрокаАванса.СтавкаНДСДоКорректировки        = Перечисления.СтавкиНДС.ПустаяСсылка();
		СтрокаАванса.КорректируемыйСчетФактура       = Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыСтавкиДоКорректировки()

	СуффиксПоля = "ДоКорректировки";
	
	СтрокаТабличнойЧасти = Элементы.Авансы.ТекущиеДанные;

	СтрокаТаблицы = Новый Структура("Сумма, СтавкаНДС, СуммаНДС", 0, 0, 0);
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТаблицы[Поле.Ключ] = СтрокаТабличнойЧасти[Поле.Ключ + СуффиксПоля];
	КонецЦикла;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(
		СтрокаТаблицы, Истина);

	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТабличнойЧасти[Поле.Ключ + СуффиксПоля] = Поле.Значение;
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьРеквизитыПоКомиссии()
	
	Объект.Комитент                      = Неопределено;
	Объект.ДоговорКомитента              = Неопределено;
	Объект.СуммаДокументаКомиссия        = 0;
	Объект.СуммаНДСДокументаКомиссия     = 0;
	
	Если УчетНДСКлиентСервер.Версия(Объект.Дата) >= 2 Тогда
		Объект.НДСПредъявленКВычету      = Истина;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеОбъекта)

	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОбъекта.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов,ВидДоговора,УчетАгентскогоНДС,ВидАгентскогоДоговора");
	
	ДанныеОбъекта.ВалютаДокумента        = СвойстваДоговора.ВалютаВзаиморасчетов;
	ДанныеОбъекта.ВидДоговораКонтрагента = СвойстваДоговора.ВидДоговора;
	
	Если ДанныеОбъекта.ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		ДанныеОбъекта.Продавец = Неопределено;
	КонецЕсли;
	
	ДанныеОбъекта.НДСИсчисляетсяНалоговымАгентом = СвойстваДоговора.УчетАгентскогоНДС 
		И СвойстваДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	
	ДанныеОбъекта.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомитентПриИзмененииНаСервере(ДанныеОбъекта)

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДанныеОбъекта.ДоговорКомитента,
		ДанныеОбъекта.Комитент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоровКомитента());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоровКомитента()

	МассивВидов	= Новый Массив;
	МассивВидов.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Возврат МассивВидов;

КонецФункции

&НаСервере
Функция ДанныеОбъектаДляОпределенияКВО()
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Дата",                           Объект.Дата);
	ДанныеОбъекта.Вставить("ВидСчетаФактуры",                Объект.ВидСчетаФактуры);
	ДанныеОбъекта.Вставить("Исправление",                    Объект.Исправление);
	ДанныеОбъекта.Вставить("ДокументыОснования",             Объект.ДокументыОснования);
	ДанныеОбъекта.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат ДанныеОбъекта;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьСчетФактуруНаАвансНаСервере(Объект.ДокументОснование);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицыАвансы();
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура();
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Полученный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора = Новый Структура();
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	
	СтруктураПараметров.Вставить("Документ", Объект.ДокументОснование);
	СтруктураПараметров.Вставить("Договор", Объект.ДоговорКонтрагента);
    СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
					
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Контрагент, ДоговорКонтрагента,
		|ВалютаДокумента, Продавец, ВидДоговораКонтрагента, ИспользуетсяПостановлениеНДС1137,
		|НДСИсчисляетсяНалоговымАгентом, КодВидаОперации, Дата, ВидСчетаФактуры, Исправление, ДокументыОснования");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВидДоговораКонтрагента           = ВидДоговораКонтрагента;
	ДанныеОбъекта.ИспользуетсяПостановлениеНДС1137 = ИспользуетсяПостановлениеНДС1137;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта,, "ДокументыОснования");
	ВидДоговораКонтрагента         = ДанныеОбъекта.ВидДоговораКонтрагента;
	НДСИсчисляетсяНалоговымАгентом = ДанныеОбъекта.НДСИсчисляетсяНалоговымАгентом;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СчетФактураВыданныйПокупателюПриИзмененииНаСервере()
	
	ОснованиеСчетаФактурыВыданного	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетФактураВыданныйПокупателю, "ДокументОснование");
	Если ТипЗнч(ОснованиеСчетаФактурыВыданного) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Объект.Субкомиссионер =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСчетаФактурыВыданного, "Контрагент");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетаФактурыВыданныеПокупателям()
	
	ЕстьОшибкиЗаполнения = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ДатаВходящегоДокумента", ?(Объект.Исправление, Объект.ДатаИсправления, Объект.ДатаВходящегоДокумента));
	ПараметрыФормы.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ПараметрыФормы.Вставить("Комитент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКомитента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Исправление", Объект.Исправление);
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям",
			ПараметрыФормы,
			ЭтаФорма);
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПродавцов()
	
	АдресХранилищаПродавцов = ПоместитьПродавцовВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПродавцов", АдресХранилищаПродавцов);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПродавцы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПлатежныеДокументы()
	
	АдресХранилищаПлатежныеДокументы = ПоместитьПлатежныеДокументыВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПлатежныеДокументы", АдресХранилищаПлатежныеДокументы);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПлатежныеДокументы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СчетаФактурыВыданныеПокупателям.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьПродавцовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции	

&НаСервере
Функция ПоместитьПлатежныеДокументыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ПлатежноРасчетныеДокументы.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

	КоличествоСФВыданныхПокупателю = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0  Тогда
		Объект.СчетФактураВыданныйПокупателю = Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Если КоличествоСФВыданныхПокупателю > 1 Тогда
			Объект.КодВидаОперации = "28";
		КонецЕсли;
	Иначе
		Объект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СуммаДокумента            = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаДокументаКомиссия    = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаНДСДокумента         = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	Объект.СуммаНДСДокументаКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение)

	ТаблицаПродавцов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПродавцов);
	
	Объект.Продавцы.Загрузить(ТаблицаПродавцов);

	КоличествоПродавцов = Объект.Продавцы.Количество();
	Если КоличествоПродавцов > 0 Тогда
		Объект.Продавец = Объект.Продавцы[0].Продавец;
		Если КоличествоПродавцов > 1 Тогда
			Объект.КодВидаОперации = "28";
		КонецЕсли;
	Иначе
		Объект.Продавец = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение)

	ТаблицаПлатежныхДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПлатежныеДокументы);
	
	Объект.ПлатежноРасчетныеДокументы.Загрузить(ТаблицаПлатежныхДокументов);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Корректировочный на аванс
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСтавкаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыНадписьДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыНадписьПослеИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыКорректируемыйСчетФактура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидСчетаФактуры", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;

	Объект.СуммаДокумента    = Форма.Объект.Авансы.Итог("Сумма") - Форма.Объект.Авансы.Итог("СуммаДоКорректировки");
	Объект.СуммаНДСДокумента = Форма.Объект.Авансы.Итог("СуммаНДС") - Форма.Объект.Авансы.Итог("СуммаНДСДоКорректировки");
	
	Если Форма.ОтражатьСуммыВЖурнале
		И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")Тогда 
		Объект.СуммаДокументаКомиссия    = Объект.Авансы.Итог("Сумма");
		Объект.СуммаНДСДокументаКомиссия = Объект.Авансы.Итог("СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыДоплатыКАвансу(ДанныеСтроки)
	
	ПараметрыДоплаты = Новый Структура(
		"СуммаДоКорректировки,СтавкаНДСДоКорректировки,СуммаНДСДоКорректировки,
		|Сумма,СтавкаНДС,СуммаНДС");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректируемыйСчетФактура", ДанныеСтроки.КорректируемыйСчетФактура);
	Запрос.УстановитьПараметр("Сумма", ДанныеСтроки.Сумма);
	Запрос.УстановитьПараметр("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
	Запрос.УстановитьПараметр("СуммаНДС", ДанныеСтроки.СуммаНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СчетФактураПолученныйАвансы.Сумма) КАК СуммаДоКорректировки,
	|	МАКСИМУМ(СчетФактураПолученныйАвансы.СтавкаНДС) КАК СтавкаНДСДоКорректировки,
	|	СУММА(СчетФактураПолученныйАвансы.СуммаНДС) КАК СуммаНДСДоКорректировки,
	|	СчетФактураПолученныйАвансы.Ссылка КАК КорректируемыйСчетФактура,
	|	&Сумма + СУММА(СчетФактураПолученныйАвансы.Сумма) КАК Сумма,
	|	&СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.Авансы КАК СчетФактураПолученныйАвансы
	|ГДЕ
	|	СчетФактураПолученныйАвансы.Ссылка = &КорректируемыйСчетФактура
	|	И (СчетФактураПолученныйАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ИЛИ СчетФактураПолученныйАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйАвансы.Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПараметрыДоплаты;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ПараметрыДоплаты, Выборка);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(
		ПараметрыДоплаты, Истина);
	
	Возврат ПараметрыДоплаты;
	
КонецФункции

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#КонецОбласти
