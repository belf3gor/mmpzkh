////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	Если Параметры.Отбор.Свойство("ДоговорКонтрагента") Тогда
		
		ВидыСчетовФактурНаАванс = Новый СписокЗначений;
		ВидыСчетовФактурНаАванс.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаАванс);
		ВидыСчетовФактурНаАванс.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента);
		
		ДоговорысчетовФактурНаАванс = Новый СписокЗначений;
		ДоговорысчетовФактурНаАванс.Добавить(Параметры.Отбор.ДоговорКонтрагента);
		ДоговорысчетовФактурНаАванс.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, 
			"ГруппаИЛИ", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, 
			"АвансовыеСчетаФактурыПоДоговору", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаИ, "ВидСчетаФактуры", ВидыСчетовФактурНаАванс, ВидСравненияКомпоновкиДанных.ВСписке);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаИ, "ДоговорКонтрагента", ДоговорысчетовФактурНаАванс, ВидСравненияКомпоновкиДанных.ВСписке);
		
		ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, 
			"СчетаФактурыПоДоговору", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаИ, "ВидСчетаФактуры", ВидыСчетовФактурНаАванс, ВидСравненияКомпоновкиДанных.НеВСписке);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаИ, "ДоговорКонтрагента", Параметры.Отбор.ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно);
		
		Параметры.Отбор.Удалить("ДоговорКонтрагента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_СчетФактураПолученный", , Элемент.ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
