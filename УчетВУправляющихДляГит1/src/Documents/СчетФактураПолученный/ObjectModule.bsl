#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеПоДаннымОснования = Ложь;
	ВидСчетаФактурыЗаполнения   = Неопределено;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") Тогда
		ОснованиеДокумента = ДанныеЗаполнения;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ОснованиеДокумента = ДанныеЗаполнения.ДокументОснование;
		
	Иначе
		ОснованиеДокумента = Неопределено;
		
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидСчетаФактуры") Тогда
		ВидСчетаФактурыЗаполнения = ДанныеЗаполнения.ВидСчетаФактуры;
		
		Если ДанныеЗаполнения.Свойство("ЗаполнятьПоСчетуФактуре") И ДанныеЗаполнения.ЗаполнятьПоСчетуФактуре Тогда
			
			РеквизитыИсходногоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ИсправляемыйСчетФактура,
			"ВидСчетаФактуры,
			|НомерВходящегоДокумента,
			|ДатаВходящегоДокумента,
			|Исправление,
			|НомерИсправления,
			|ДатаИсправления,
			|НомерИсходногоДокумента,
			|ДатаИсходногоДокумента,
			|КодВидаОперации,
			|КодВидаОперацииНаУменьшение,
			|Контрагент.ИНН,
			|Контрагент.КПП,
			|ИННКонтрагента,
			|КППКонтрагента");
			
			Если ДанныеЗаполнения.Исправление ИЛИ ДанныеЗаполнения.ИсправлениеСобственнойОшибки Тогда 
				
				НомерВходящегоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
				ДатаВходящегоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
				Исправление = ?(ДанныеЗаполнения.ИсправлениеСобственнойОшибки, 
				РеквизитыИсходногоСчетаФактуры.Исправление,
				ДанныеЗаполнения.Исправление);
				ИсправляемыйСчетФактура = ДанныеЗаполнения.ИсправляемыйСчетФактура;
				
				Если ДанныеЗаполнения.ИсправлениеСобственнойОшибки Тогда 
					ИсправлениеСобственнойОшибки = Истина;
					НомерВходящегоДокументаДоИзменения = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
					ДатаВходящегоДокументаДоИзменения  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
					КодВидаОперацииДоИзменения = РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
					КодВидаОперации            = РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
					
					КодВидаОперацииНаУменьшениеДоИзменения = РеквизитыИсходногоСчетаФактуры.КодВидаОперацииНаУменьшение;
					КодВидаОперацииНаУменьшение = РеквизитыИсходногоСчетаФактуры.КодВидаОперацииНаУменьшение;
					
					ИННКонтрагентаДоИзменения = ?(ЗначениеЗаполнено(РеквизитыИсходногоСчетаФактуры.ИННКонтрагента),
						РеквизитыИсходногоСчетаФактуры.ИННКонтрагента, РеквизитыИсходногоСчетаФактуры.КонтрагентИНН);
					ИННКонтрагента            = ИННКонтрагентаДоИзменения;
					КППКонтрагентаДоИзменения = ?(ЗначениеЗаполнено(РеквизитыИсходногоСчетаФактуры.КППКонтрагента),
						РеквизитыИсходногоСчетаФактуры.КППКонтрагента, РеквизитыИсходногоСчетаФактуры.КонтрагентКПП);
					КППКонтрагента            = КППКонтрагентаДоИзменения;
					
					Если Исправление Тогда
						НомерИсправленияДоИзменения = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
						НомерИсправления            = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
						ДатаИсправленияДоИзменения  = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
						ДатаИсправления             = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
					КонецЕсли;
					Если РеквизитыИсходногоСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда 
						НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсходногоДокумента;
						ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсходногоДокумента;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
				ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ЗначениеЗаполнено(ОснованиеДокумента) Тогда
		ЗаполнитьСчетФактуруНаАванс(ОснованиеДокумента);
		ЗаполнениеПоДаннымОснования = Истина;
		ОснованиеДокумента = Неопределено;
		
	КонецЕсли;
	
	Если ОснованиеДокумента <> Неопределено 
		И Метаданные().ВводитсяНаОсновании.Содержит(ОснованиеДокумента.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ОснованиеДокумента, ВидСчетаФактурыЗаполнения);
		ЗаполнениеПоДаннымОснования = Истина;
	КонецЕсли;
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента)Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗаполнениеПоДаннымОснования Тогда
		СтруктураПараметров = Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
		НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УстановитьПредставлениеНомера();
	
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) 
		И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый()
		И НЕ СформированПриВводеНачальныхОстатковНДС 
		И НЕ УчетНДС.ФорматныйКонтрольИННиКПППоСчетуФактуреПройден(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			// Документ не заполнен.
			Возврат;
		Иначе
			// При ручном вводе неавтоматизированных операций либо программном вводе счета-фактуры
			// табличная часть "Документы основания" может оказаться пустой, добавим строку.
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
		
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	СводныйКомиссионный = Ложь;

	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		
		// Счет-фактура полученный покупателем-комитентом от комиссионера.
		
		Если ЗначениеЗаполнено(Продавец)
			И Продавцы.Количество() = 0 Тогда
		
			НоваяСтрока = Продавцы.Добавить();
			НоваяСтрока.Продавец = Продавец;
		
		КонецЕсли; 
		
		Если Продавцы.Количество() > 1 Тогда
			
			Если Дата < '20150101' Тогда
				Продавцы.Очистить();
				НоваяСтрока = Продавцы.Добавить();
				НоваяСтрока.Продавец = Продавец;
			Иначе
				СводныйКомиссионный = Истина;
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца.
		
		Если ЗначениеЗаполнено(СчетФактураВыданныйПокупателю)
			И СчетаФактурыВыданныеПокупателям.Количество() = 0 Тогда
		
			НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
			НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
			НоваяСтрока.Субкомиссионер = Субкомиссионер;
			НоваяСтрока.НДС = СуммаНДСДокумента;
			НоваяСтрока.Сумма = СуммаДокумента;
		
		КонецЕсли;
		
		Если СчетаФактурыВыданныеПокупателям.Количество() > 1 Тогда
			
			Если Дата < '20150101' Тогда
			
				СчетаФактурыВыданныеПокупателям.Очистить();
				НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
				НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
				НоваяСтрока.Субкомиссионер = Субкомиссионер;
				НоваяСтрока.НДС = СуммаНДСДокумента;
				НоваяСтрока.Сумма = СуммаДокумента;
				
			Иначе
				СводныйКомиссионный = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
		// Реквизиты такого счета-фактуры вносятся вручную.
		СчетФактураБезНДС = СуммаНДСДокумента = 0;
		
		Возврат;
		
	КонецЕсли;

	Если ЕстьДублиСчетаФактуры() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ОбновитьРеквизитыСвязанныхСчетовФактур(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		СуммаДокумента = Авансы.Итог("Сумма") - Авансы.Итог("СуммаДоКорректировки");
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;

	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс Тогда
		
		СводныйКорректировочный = Ложь;
		СуммаДокументаКомиссия    = 0;
		СуммаНДСДокументаКомиссия = 0;
		
		Сумма             = Авансы.Итог("Сумма") - Авансы.Итог("СуммаДоКорректировки");
		СуммаНДС          = Авансы.Итог("СуммаНДС") - Авансы.Итог("СуммаНДСДоКорректировки");
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;
		
		ИсходныеДокументы = Авансы.ВыгрузитьКолонку("КорректируемыйСчетФактура");
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсходныеДокументы);
		СводныйКорректировочный = ИсходныеДокументы.Количество() > 1;
		
	Иначе
		
		ОбновлятьРеквизитыПриЗаписи = ?(ДополнительныеСвойства.Свойство("ОбновлятьРеквизитыПриЗаписи"), 
			ДополнительныеСвойства.ОбновлятьРеквизитыПриЗаписи, Истина);
		Если ОбновлятьРеквизитыПриЗаписи Тогда
			ОпределениеПараметровСчетаФактуры();
		КонецЕсли;
		
		Если ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0].ДокументОснование;
		Иначе
			ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	ЕстьРабочийЭСФ = ОбменСКонтрагентами.ЕстьРабочийЭСФ(Ссылка);
	
	Если ЭтоНовый() И НЕ УчетНДС.ФорматныйКонтрольИННиКПППоСчетуФактуреПройден(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не УчетНДСКлиентСервер.ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Код вида операции'"), , ,
			НСтр("ru='Код вида операции может содержать только цифры и символ "";""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КодВидаОперации", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодВидаОперацииНаУменьшение)
		И УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата) > 1
		И Не УчетНДСКлиентСервер.ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперацииНаУменьшение) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Код вида операции'"), , ,
			НСтр("ru='Код вида операции может содержать только цифры и символ "";""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КодВидаОперацииНаУменьшение", , Отказ);
	КонецЕсли;
	
	Если Дата < '20150101' 
		И ИсправлениеСобственнойОшибки Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
			НСтр("ru = 'Исправление собственной ошибки не поддерживается до 01.01.2015 г.'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);
		
	КонецЕсли;
	
	Если ВозвратЧерезКомиссионера
		И Продавцы.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Для счета-фактуры полученного на возврат через комиссионера не предусмотрена регистрация сводного счета-фактуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьНесколькоПродавцовСсылка",, Отказ);
	КонецЕсли;
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");
		
		Если Дата >= '20150101' 
			И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.СтавкаНДС");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		
		Если ДокументыОснования.Количество() = 0 И НЕ ЕстьРабочийЭСФ Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьВыбор",, Отказ);			
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)
				И ТипЗнч(СтрокаТЧ.ДокументОснование) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
				И ТипЗнч(СтрокаТЧ.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				И НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
					ТекстСообщения = НСтр("ru = 'Документ не проведен. Счет-фактуру можно провести только на основании проведенного документа.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", 
						"Корректность", 
						"Документ-основание", 
						СтрокаТЧ.НомерСтроки, 
						"Документы-основания счета-фактуры", 
						ТекстСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
		КонецЦикла;
	
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			ДокументыОснованияСвернуто	= ДокументыОснования.Выгрузить(, "ДокументОснование");
			ДокументыОснованияСвернуто.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
			ДокументыОснованияСвернуто.ЗаполнитьЗначения(1, "Количество");
			ДокументыОснованияСвернуто.Свернуть("ДокументОснование", "Количество");
			Для Каждого СтрокаДокументОснование Из ДокументыОснованияСвернуто Цикл
				
				Если ЗначениеЗаполнено(СтрокаДокументОснование.ДокументОснование)
					И СтрокаДокументОснование.Количество > 1 Тогда
					
					Отбор	= Новый Структура("ДокументОснование", СтрокаДокументОснование.ДокументОснование);
					
					СтрокиТЧ	= ДокументыОснования.НайтиСтроки(Отбор);
					Если СтрокиТЧ.Количество() < 2 Тогда 
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
						СтрокаДокументОснование.ДокументОснование,
						СтрокиТЧ[0].НомерСтроки);
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", 
						"Корректность", 
						"Документ - основание для выписки счета-фактуры", 
						СтрокиТЧ[1].НомерСтроки, 
						"Документы-основания счета-фактуры", 
						ТекстСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
						
					КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный И ИспользуетсяПостановлениеНДС1137 Тогда
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсходногоДокумента)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсходногоДокумента) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру 
					| для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.УчитыватьИсправлениеИсходногоДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсправленияИсходногоДокумента)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправленияИсходногоДокумента) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру 
					| для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		Если НЕ Исправление Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137
		ИЛИ (НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс)
		ИЛИ НЕ ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Продавец");
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс Тогда
		
		Для Каждого СтрокаАвансы Из Авансы Цикл
			Префикс = "Авансы[" + Формат(СтрокаАвансы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'Аванс'");
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Сумма'"), 
					СтрокаАвансы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Сумма"; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Сумма НДС'"), 
					СтрокаАвансы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СуммаНДС"; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СуммаДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СтавкаНДСДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СуммаНДСДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.КорректируемыйСчетФактура");
	КонецЕсли; 
	
	Если НЕ ИспользуетсяПостановлениеНДС1137
		ИЛИ НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента 
		ИЛИ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента 
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКомитента");
		
	КонецЕсли;
	
	Если БланкСтрогойОтчетности Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	Если ЕстьРабочийЭСФ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");
	КонецЕсли;
	
	#Область ИсправлениеСобственнойОшибки
	
	Если ИсправлениеСобственнойОшибки Тогда
		Если Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КППКонтрагентаДоИзменения");
			МассивНепроверяемыхРеквизитов.Добавить("КППКонтрагента");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентаДоИзменения");
		МассивНепроверяемыхРеквизитов.Добавить("КППКонтрагентаДоИзменения");
		МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КППКонтрагента");
	КонецЕсли;
	
	#КонецОбласти
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка ИЛИ СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.СчетФактураПолученный.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ 
		ИЛИ ПараметрыПроведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаУчетаСчетовФактурПоступлениеАванс = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаПоступлениеАванс);
		
	ЗаписьЖурналаУчетаСчетовФактурКорректировка = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаКорректировка);
		
	СторнирующаяЗаписьЖурнала = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.СторнирующаяЗаписьЖурнала);
	
	ТаблицаПредъявленногоНДС = УчетНДСБП.ПодготовитьТаблицуПредъявленногоНДС(
		ПараметрыПроведения.РеквизитыПоступление, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА
	
	Документы.СчетФактураПолученный.СформироватьДвиженияНДСПредъявленныйПоДокументам(
		ПараметрыПроведения.РеквизитыПоступление,
		ТаблицаПредъявленногоНДС,
		Движения,
		Отказ);
	
	УчетНДС.СформироватьДвиженияПолученСчетФактураНаПоступление(
		ПараметрыПроведения.РеквизитыПоступление,
		ТаблицаПредъявленногоНДС,
		Движения,
		Отказ);
		
	Документы.СчетФактураПолученный.СформироватьДвиженияПолученСчетФактураНаВыданныйАванс(
		ПараметрыПроведения.РеквизитыАванс,
		ПараметрыПроведения.ТаблицаАвансов,
		ПараметрыПроведения.ТаблицаСторноНаВыданныйАванс,
		Движения,
		Отказ);
		
	Документы.СчетФактураПолученный.СформироватьДвиженияСчетФактураПолученныйКорректировочныйНаАванс(
		ПараметрыПроведения.РеквизитыАванс,
		ПараметрыПроведения.ТаблицаКорректировочныйНаАванс,
		Движения,
		Отказ);
		
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактурПоступлениеАванс,
		Движения,
		Отказ);
	
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактурКорректировка,
		Движения,
		Отказ);
		
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ПараметрыПроведения.ЗаписьЖурналаИсправлениеСобственнойОшибки,
		Движения,
		Отказ);
		
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		СторнирующаяЗаписьЖурнала, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияОшибочныеРеквизитыКонтрагентов(
		ПараметрыПроведения.ТаблицаОшибочныеРеквизитыКонтрагентов,
		Движения,
		Отказ);
		
	ПомощникРасчетаНДС.СброситьАктуальностьРасчета(Ссылка);
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПомощникРасчетаНДС.СброситьАктуальностьРасчета(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("РегистрироватьСчетаФактурыСпецРежимы")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.РегистрироватьСчетаФактурыСпецРежимы.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// Для счетов-фактур "На поступление" необходимо установить статус счета-фатуры по документам-основаниям.
	УстановитьСтатусДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусДокумента()
	
	Перем ДокументСУстановленнымСтатусом;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументыОснованияДляУстановкиСтатуса = Новый Массив;
	ДополнительныеСвойства.Свойство("ДокументСУстановленнымСтатусом", ДокументСУстановленнымСтатусом);
	
	Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
		Если СтрокаТЧ.ДокументОснование <> ДокументСУстановленнымСтатусом Тогда 
			ДокументыОснованияДляУстановкиСтатуса.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыОснованияДляУстановкиСтатуса.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен) Тогда 
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
	ИначеЕсли ПометкаУдаления Тогда
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
	Иначе
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
	КонецЕсли;
	
	ТипыОбъектов = ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(ДокументыОснованияДляУстановкиСтатуса);
	
	Для Каждого ОбъектыТипа Из ТипыОбъектов Цикл
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокументов(ОбъектыТипа.Значение, , , СтатусСчетаФактуры);
	КонецЦикла;
	
КонецПроцедуры

// Определяет сумму, валюту, контрагента и другие параметры объекта
// на основе анализа данных документов-оснований
Процедура ОпределениеПараметровСчетаФактуры() Экспорт
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание НЕ выбрано, параметры НЕ определяем
		Возврат;
	КонецЕсли; 
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
			
			ИсправлениеСобственнойОшибки = Истина;
			
		Иначе
			ИсправлениеСобственнойОшибки = Ложь;
			НомерВходящегоДокументаДоИзменения = Неопределено;
			ДатаВходящегоДокументаДоИзменения  = Неопределено;
			НомерИсправленияДоИзменения        = Неопределено;
			ДатаИсправленияДоИзменения         = Неопределено;
			КодВидаОперацииДоИзменения         = Неопределено;
			ИННКонтрагентаДоИзменения          = Неопределено;
			КППКонтрагентаДоИзменения          = Неопределено;
			ИННКонтрагента                     = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыПолученногоПоТипуОснования(ДокументОснование);
	Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Перезаполнить = Ложь;
		Если НЕ ВидСчетаФактуры = ВидСчетаФактурыПоОснованию Тогда
			ВидСчетаФактуры = ВидСчетаФактурыПоОснованию;
			Перезаполнить   = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
			И НЕ ИсправлениеСобственнойОшибки Тогда
			
			ИсправлениеОснования = ДокументОснование.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Если Перезаполнить ИЛИ Исправление <> ИсправлениеОснования Тогда
				
				ОснованиеСчетаФактуры = ДокументОснование;
				ДокументыОснования.Очистить();
				ДокументОснование = Неопределено;
				
				Если НЕ ИсправлениеОснования Тогда 
					Исправление = Ложь;
					НомерИсправления = 0;
					ДатаИсправления = '00010101';
					НомерВходящегоДокумента = "";
					ДатаВходящегоДокумента = '00010101';
				КонецЕсли;
				ЗаполнитьНаОснованииИсправления(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	
	СинхронизируемыеРеквизиты = "Организация,Контрагент,ДоговорКонтрагента,ВалютаДокумента"
		+ ",СуммаДокумента,СуммаУвеличение,СуммаУменьшение";
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты
			+ ",СчетФактураБезНДС,СуммаНДСДокумента,СуммаНДСУвеличение,СуммаНДСУменьшение";
		
		Если Дата >= '20150101' Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты
				+ ",СуммаДокументаКомиссия,СуммаУвеличениеКомиссия,СуммаУменьшениеКомиссия"
				+ ",СуммаНДСДокументаКомиссия,СуммаНДСУвеличениеКомиссия,СуммаНДСУменьшениеКомиссия";
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
	
	Если ЭтоНовый() И ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			КодВидаОперации = ПолучитьКодВидаОперации();
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
				И НЕ ЗначениеЗаполнено(КодВидаОперацииНаУменьшение) Тогда
				ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
				Если ВерсияКодовВидовОпераций > 1 Тогда 
					КодВидаОперацииНаУменьшение = "18";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, "ИсправляемыйДокументПоступления,ДокументПоступления,ВидОперации");
			
		Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
			РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
				РеквизитыОснования.ДокументПоступления);
		Иначе
			РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
				РеквизитыОснования.ИсправляемыйДокументПоступления);
		КонецЕсли;
		
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		РезультатПоискаИсправляемыйСчетФактура = ИсправляемыйСчетФактура;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
	
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		Если Исправление Тогда 
			РеквизитыИсправляемогоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйСчетФактура, 
				"ДатаВходящегоДокумента, НомерВходящегоДокумента");
			НомерВходящегоДокумента = РеквизитыИсправляемогоСчетаФактуры.НомерВходящегоДокумента;
			ДатаВходящегоДокумента  = РеквизитыИсправляемогоСчетаФактуры.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента)
		И НЕ ИсправлениеСобственнойОшибки
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументОснование, "Грузоотправитель");
	КонецЕсли;

	СписокДокументовОснованийБезСумм = Новый СписокЗначений;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
		И ПараметрыСФ.РеквизитыОснований.Количество() > 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
		
			Если СтрокаСРеквизитами <> Неопределено Тогда
			
				Если СтрокаСРеквизитами.ИсходныйДокумент = Основание.ИсходныйДокумент 
					ИЛИ НЕ ЗначениеЗаполнено(Основание.ИсходныйДокумент) Тогда
					
					НайденноеЗначение = СписокДокументовОснованийБезСумм.НайтиПоЗначению(Основание.ДокументОснование);
					
					Если НайденноеЗначение = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами); 
						СписокДокументовОснованийБезСумм.Добавить(Основание.ДокументОснование);
					Иначе
						Основание.СуммаУвеличение= 0;
						Основание.СуммаУменьшение= 0;
						Основание.СуммаНДСУвеличение = 0;
						Основание.СуммаНДСУменьшение = 0;
					КонецЕсли;
					
				Иначе 
					РеквизитыИсходногоДокумента = 
					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание.ИсходныйДокумент,
					"НомерВходящегоДокумента, ДатаВходящегоДокумента, НомерИсправления, ДатаИсправления");
					Основание.НомерИсходногоДокумента = РеквизитыИсходногоДокумента.НомерВходящегоДокумента;
					Основание.ДатаИсходногоДокумента = РеквизитыИсходногоДокумента.ДатаВходящегоДокумента;
					Основание.НомерИсправленияИсходногоДокумента = РеквизитыИсходногоДокумента.НомерИсправления;
					Основание.ДатаИсправленияИсходногоДокумента = РеквизитыИсходногоДокумента.ДатаИсправления;
					
					НайденноеЗначение = СписокДокументовОснованийБезСумм.НайтиПоЗначению(Основание.ДокументОснование);
					
					Если НайденноеЗначение = Неопределено Тогда
						Основание.СуммаУвеличение= СтрокаСРеквизитами.СуммаУвеличение;
						Основание.СуммаУменьшение= СтрокаСРеквизитами.СуммаУменьшение;
						Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
						Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
						СписокДокументовОснованийБезСумм.Добавить(Основание.ДокументОснование);
					Иначе
						Основание.СуммаУвеличение= 0;
						Основание.СуммаУменьшение= 0;
						Основание.СуммаНДСУвеличение = 0;
						Основание.СуммаНДСУменьшение = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОснований = ПараметрыСФ.РеквизитыОснований;
		ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			ПараметрСводныйКорректировочный = Истина;
		Иначе
			ПараметрСводныйКорректировочный = Ложь;
			
			МассивИсходныхДокументов = ДокументыОснования.ВыгрузитьКолонку("ИсходныйДокумент");
			ДокументыСчетаФактуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивИсходныхДокументов, Истина);
			Если ДокументыСчетаФактуры.Количество() > 1 Тогда
				ПараметрСводныйКорректировочный = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе
		ПараметрСводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаАванс(Основание, СчетФактура = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗаполнения = Документы.СчетФактураПолученный.ПодготовитьПараметрыЗаполненияАванс(
		Основание, СчетФактура, ДоговорКонтрагента, Отказ);
	
	Если Отказ Тогда
		ТекстСообщения = ?(ТипЗнч(ПараметрыЗаполнения) = Тип("Строка"), 
			ПараметрыЗаполнения,
			НСтр("ru='Нет данных для счета-фактуры на аванс.'"));

		Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура")
			И ПараметрыЗаполнения.Свойство("МоментАктуальностиОтложенныхРасчетов") Тогда
			// При отложенном проведении сообщим, что расчеты неактуальны.
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'Рекомендуется актуализировать расчеты с контрагентами с %1.'"),
					Формат(ПараметрыЗаполнения.МоментАктуальностиОтложенныхРасчетов.Дата, "ДЛФ=Д"));
		КонецЕсли;
			
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
	ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Реквизиты       = ПараметрыЗаполнения.Реквизиты;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, , "ДоговорКонтрагента");
	
	Если Документы.СчетФактураПолученный.ТребуетсяЗаполнятьДоговорВСчетеФактуреНаАванс(
			Реквизиты.Дата, Реквизиты.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
	КонецЕсли;
	
	Авансы.Очистить();
	Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;
	
	Если УчетНДСКлиентСервер.Версия(Дата) >= 2 
		И УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
		И Дата >= '20150101' Тогда
		СуммаДокументаКомиссия    = Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия = Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия    = 0;
		СуммаНДСДокументаКомиссия = 0;
	КонецЕсли;
	
	СуммаДокумента    = Авансы.Итог("Сумма");
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
	ДокументыОснования.Очистить();
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	
	КодВидаОперации = ПолучитьКодВидаОперацииАванс(Реквизиты.НДСИсчисляетсяНалоговымАгентом);
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаПоступление(Основание)
	
	СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание,,,СтруктураОтбора);
	
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 уже введен %2'"), 
			Основание, 
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Дата = Основание.Дата;
	
	ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	ОпределениеПараметровСчетаФактуры();
	
	СтруктураПараметров = Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуФактуреНаАванс(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс
	   И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
	   И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Исправленные счета-фактуры с видом ""%1"" вводятся на основании документа ""Корректировка поступления""'"), 
			Основание.ВидСчетаФактуры);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ИсключаемыеПоля = "Номер, Дата, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления, ИсправлениеСобственнойОшибки";
	Если ИсправлениеСобственнойОшибки Тогда
		ИсключаемыеПоля = ИсключаемыеПоля + ",НомерВходящегоДокумента,ДатаВходящегоДокумента,Исправление,ИсправляемыйСчетФактура,"
			+ "НомерВходящегоДокументаДоИзменения,ДатаВходящегоДокументаДоИзменения,КодВидаОперацииДоИзменения,"
			+ "КодВидаОперации,ИННКонтрагентаДоИзменения,ИННКонтрагента,КППКонтрагентаДоИзменения,КППКонтрагента,"
			+ "НомерИсправленияДоИзменения,НомерИсправления,ДатаИсправленияДоИзменения,ДатаИсправления,"
			+ "НомерИсходногоДокумента,ДатаИсходногоДокумента,ИсправлениеСобственнойОшибки";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , ИсключаемыеПоля);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Основание.Авансы                    , Авансы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Основание.ПлатежноРасчетныеДокументы, ПлатежноРасчетныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактураИсправляемый", Основание);
	Запрос.Текст = Документы.СчетФактураПолученный.ТекстЗапросаПродавцыПоИсправляемомуСчетуФактуре();
	ТаблицаПродавцы = Запрос.Выполнить().Выгрузить();
	Продавцы.Загрузить(ТаблицаПродавцы);
	
	Если Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
	   И УчетНДСКлиентСервер.Версия(Дата) >= 2 
	   И УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;
	
	Если НЕ ИсправлениеСобственнойОшибки Тогда
		Исправление = Истина;
		
		Если Основание.Исправление Тогда
			ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
			НомерИсправления = Основание.НомерИсправления + 1;
		Иначе
			ИсправляемыйСчетФактура = Основание;
			НомерИсправления = НомерИсправления + 1;
		КонецЕсли;
	КонецЕсли;
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание.ДокументОснование;
	ДокументОснование           = Основание.ДокументОснование;
	
	СуммаДокумента    = Авансы.Итог("Сумма");
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииОтчетаКомитенту(Основание, ВидСчетаФактурыЗаполнения = Неопределено)
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Организация, Контрагент, ДоговорКонтрагента");
	Если ИсправлениеСобственнойОшибки Тогда
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Иначе
		Дата = РеквизитыОснования.Дата;
	КонецЕсли;
	ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВидСчетаФактурыЗаполнения <> Неопределено Тогда
		ВидСчетаФактуры	= ВидСчетаФактурыЗаполнения;
	КонецЕсли;
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда 
		Основания.НомерИсходногоДокумента = НомерИсходногоДокумента;
		Основания.ДатаИсходногоДокумента  = ДатаИсходногоДокумента;
	КонецЕсли;
	
	Авансы.Очистить();
	НДСПредъявленКВычету = Ложь;
	
	ОпределениеПараметровСчетаФактуры();
	
	СуммаДокумента    = 0;
	СуммаНДСДокумента = 0;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования, "Организация, Контрагент, ДоговорКонтрагента");
	КонецЕсли;
	
	Если ИсправлениеСобственнойОшибки Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ИсправляемыйСчетФактура);
		Запрос.Текст = Документы.СчетФактураПолученный.ТекстЗапросаСчетаФактурыВыданныеПоИсправлениюСобственнойОшибки();
		
		СчетаФактурыВыданныеПокупателям.Загрузить(Запрос.Выполнить().Выгрузить());
		
		КоличествоСФВыданныхПокупателю = СчетаФактурыВыданныеПокупателям.Количество();
		Если КоличествоСФВыданныхПокупателю > 0 Тогда
			СчетФактураВыданныйПокупателю = СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Иначе
			СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
		
		СуммаДокумента            = СчетаФактурыВыданныеПокупателям.Итог("Сумма");
		СуммаДокументаКомиссия    = СчетаФактурыВыданныеПокупателям.Итог("Сумма");
		СуммаНДСДокумента         = СчетаФактурыВыданныеПокупателям.Итог("НДС");
		СуммаНДСДокументаКомиссия = СчетаФактурыВыданныеПокупателям.Итог("НДС");
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
			И ДокументыОснования.Количество()> 0 Тогда 
			
			ДокументыОснования[0].СуммаУвеличение    = СчетаФактурыВыданныеПокупателям.Итог("СуммаУвеличение");
			ДокументыОснования[0].СуммаНДСУвеличение = СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУвеличение");
			ДокументыОснования[0].СуммаУменьшение    = СчетаФактурыВыданныеПокупателям.Итог("СуммаУменьшение");
			ДокументыОснования[0].СуммаНДСУменьшение = СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУменьшение");
			
			СуммаУвеличениеКомиссия    = СчетаФактурыВыданныеПокупателям.Итог("СуммаУвеличение");
			СуммаНДСУвеличениеКомиссия = СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУвеличение");
			СуммаУменьшениеКомиссия    = СчетаФактурыВыданныеПокупателям.Итог("СуммаУменьшение");
			СуммаНДСУменьшениеКомиссия = СчетаФактурыВыданныеПокупателям.Итог("СуммаНДСУменьшение");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, ВидСчетаФактурыЗаполнения = Неопределено)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ВидОперацииОснования	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		
		Если ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВызватьИсключение НСтр("ru = 'При поступлении в переработку счет-фактура не регистрируется'");
		Иначе
			
			Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда 
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание.ДоговорКонтрагента, "УчетАгентскогоНДС, ВидДоговора, ВидАгентскогоДоговора");
				Если РеквизитыДоговора.УчетАгентскогоНДС
					И РеквизитыДоговора.ВидАгентскогоДоговора <> Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда
					ВызватьИсключение НСтр("ru = 'При поступлении по договору налогового агента счет-фактура не регистрируется'");
				КонецЕсли;
				
				Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					ВызватьИсключение НСтр("ru = 'При поступлении по договору с комитентом счет-фактура не регистрируется'");
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ВыставляетсяСчетФактура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПокупателемВыставляетсяСчетФактураНаВозврат");
		Если НЕ ВыставляетсяСчетФактура Тогда
			ВызватьИсключение НСтр("ru = 'Для создания счета-фактуры по этому документу установите флаг ""Покупателем выставляется счет-фактура на возврат"" на вкладке ""НДС""'");	
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТиповНаАванс = Новый Массив;
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЗаполнитьПоСчетуФактуреНаАванс(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидСчетаФактурыЗаполнения = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		ЗаполнитьСчетФактуруНаАванс(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Для документа "Корректировка поступления" возможен ввод двух видов счетов-фактур
		// на аванс (на суммы переплат) или на поступившие ценности (исправленный или корректировочный)
		
		СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание);
		Если НЕ ЗначениеЗаполнено(СуществующийСФ) Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДокументПоступления, ВидОперации");
			Если УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(РеквизитыОснования.ДокументПоступления) <> Неопределено Тогда
				// Нет СФ на приобретенные ценности - создаем его
				ЗаполнитьНаОснованииИсправления(Основание);
			Иначе
				Если РеквизитыОснования.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
					ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
				Иначе
					ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// СФ на приобретенные ценности найден, попробуем создать счет-фактуру на аванс
			ЗаполнитьСчетФактуруНаАванс(Основание);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	
		СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание);
		Если НЕ ЗначениеЗаполнено(СуществующийСФ) Тогда
			ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Сделка");
			Если УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументПоступления) <> Неопределено Тогда
				// Нет СФ на приобретенные ценности - создаем его
				ЗаполнитьНаОснованииВозвратаПоставщику(Основание);
			Иначе
					ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
			КонецЕсли;
		
		Иначе
		
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЗаполнитьНаОснованииОтчетаКомитенту(Основание, ВидСчетаФактурыЗаполнения);
	ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(Основание)) = Неопределено Тогда
		ЗаполнитьСчетФактуруНаПоступление(Основание);
	Иначе
		ЗаполнитьСчетФактуруНаАванс(Основание);
	КонецЕсли;

КонецПроцедуры

// Заполнение счета-фактуры по документу "Корректировка поступления"
Процедура ЗаполнитьНаОснованииИсправления(Основание)

	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"ДокументПоступления,ИсправляемыйДокументПоступления,ВидОперации,Дата,ДоговорКонтрагента");
	
	ИсходныйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(РеквизитыОснования.ДокументПоступления);
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ       = 0;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	ПовторнаяКорректировкаСчетаФактуры = Ложь; 
	
	Дата = РеквизитыОснования.Дата;
	ДоговорКонтрагента = РеквизитыОснования.ДоговорКонтрагента;
	ДокументОснование = Основание;
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Основание;
	ИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
		РеквизитыОснования.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
	
	Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПовторнаяКорректировкаСчетаФактуры = Истина;
		КонецЕсли;
	ИначеЕсли РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Исправление = Истина;
		ДатаИсправления = Дата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", РеквизитыОснования.ДокументПоступления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураИсходный.Ссылка.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураИсходный.Ссылка КАК Ссылка,
	|	СчетФактураИсходный.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.Исправление КАК Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	СчетФактураИсходный.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураИсходный.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	СчетФактураИсходный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураИсходный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураИсходный.Ссылка.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураИсходный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураИсходный.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА СчетФактураИсходный.Ссылка.КодВидаОперацииНаУменьшение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперацииУменьшение,
	|	СчетФактураИсходный.Ссылка.Продавец КАК Продавец,
	|	СчетФактураИсходный.Ссылка.КППКонтрагента,
	|	СчетФактураИсходный.Ссылка.ИННКонтрагента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураИсходный
	|ГДЕ
	|	(СчетФактураИсходный.ДокументОснование = &ДокументПоступления
	|			ИЛИ СчетФактураИсходный.Ссылка = &ДокументПоступления)
	|	И НЕ СчетФактураИсходный.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый счет-фактура'");
	Иначе
		ТаблицаПоСчетуФактуре = РезультатЗапроса.Выгрузить();
		РеквизитыИсходногоСчетаФактуры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПоСчетуФактуре[0]);
			
		Если ПовторнаяКорректировкаСчетаФактуры Тогда
			
			// Перенесем входящие реквизиты корректируемого счета-фактуры в табличную часть 
			// (реквизиты корректировочного счета-фактуры заносятся как реквизиты исходного)
			
			СтрокаОснования.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
			СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
			
			Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
				СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
			КонецЕсли;
			
		Иначе
			
			Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда
				
				// Исправление корректировочного счета-фактуры
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				ЗаполнитьЗначенияСвойств(СтрокаОснования, РеквизитыИсходногоСчетаФактуры, 
					"НомерИсходногоДокумента,ДатаИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента,
					|НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента");
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыИсходногоСчетаФактуры,
					"НомерВходящегоДокумента,ДатаВходящегоДокумента");
				
			ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				// Корректировка счета-фактуры
				
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсходногоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсходногоДокумента;

				Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
				КонецЕсли;
				
			Иначе
				
				// Исправление обычного счета-фактуры
				
				НомерВходящегоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
				ДатаВходящегоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыИсходногоСчетаФактуры, "Продавец");
			
			НомерИсправленияСФ       = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
			КодВидаОперацииОснования = РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Исправление Тогда
		НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
	КодВидаОперации = ПолучитьКодВидаОперации(КодВидаОперацииОснования);
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		Если ЗначениеЗаполнено(РеквизитыИсходногоСчетаФактуры.КодВидаОперацииУменьшение)Тогда
			КодВидаОперацииНаУменьшение = РеквизитыИсходногоСчетаФактуры.КодВидаОперацииУменьшение;
		Иначе
			КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента)
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Основание, "Грузоотправитель");
	КонецЕсли;
	
	ПараметрыСчетаФактуры = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры, , "Продавец");
	
КонецПроцедуры

Процедура УстановитьПредставлениеНомера()
	
	Если НЕ ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Исправление Тогда
		ЧастиПредставленияНомера = Новый Массив;
		ЧастиПредставленияНомера.Добавить(НомерВходящегоДокумента);
		ЧастиПредставленияНомера.Добавить(НСтр("ru='(испр.'"));
		ЧастиПредставленияНомера.Добавить(Формат(НомерИсправления, "ЧГ=0") + ")");
		ПредставлениеНомера = СтрСоединить(ЧастиПредставленияНомера, " ");
	Иначе
		ПредставлениеНомера = НомерВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДублиСчетаФактуры()
	
	ЕстьДубли = Ложь;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		МассивДокументовОснований = Новый Массив;
		
		Для Каждого СтрокаОснования Из ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			МассивДокументовОснований.Добавить(СтрокаОснования.ДокументОснование);
			
		КонецЦикла;
			
		СуществующиеСФ = УчетНДСПереопределяемый.НайтиПодчиненныеСчетаФактурыПолученные(
			МассивДокументовОснований, Ссылка);

		Для Каждого СуществующийСФ Из СуществующиеСФ Цикл
			Если ЗначениеЗаполнено(СуществующийСФ.Значение) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На основании документа %1 уже введен %2'"),
					СуществующийСФ.Ключ, СуществующийСФ.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				ЕстьДубли = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
				ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ИсправлениеСобственнойОшибки Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученныйНаАванс(
			ДокументОснование, Ссылка, Контрагент, ДоговорКонтрагента, НомерИсправления);
		Если ЗначениеЗаполнено(СуществующийСФ) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На основании документа %1 уже введен %2'"),
				ДокументОснование, СуществующийСФ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			ЕстьДубли = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДубли;

КонецФункции

Функция ПолучитьКодВидаОперации(КодВидаОперацииОснования = Неопределено)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",                     Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",          ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",              Исправление);
	СтруктураПараметров.Вставить("КодВидаОперацииОснования", КодВидаОперацииОснования);
	СтруктураПараметров.Вставить("ДокументыОснования",       ДокументыОснования);
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "НДСПоСтавкам4и2, ВидАгентскогоДоговора");
		СтруктураПараметров.Вставить("НДСПоСтавкам4и2", 
			СвойстваДоговора.НДСПоСтавкам4и2 И ДатаВходящегоДокумента < '20150101');
		НДСИсчисляетсяНалоговымАгентом = 
			СвойстваДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	КонецЕсли;
	СтруктураПараметров.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);

КонецФункции

Процедура СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СтрокаРеквизиты)
	
	Если ОбменСКонтрагентами.ЕстьРабочийЭСФ(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если ПараметрыСФ[Реквизит] <> Неопределено
			И ПараметрыСФ[Реквизит] <> ЭтотОбъект[Реквизит] Тогда
			
			ЭтотОбъект[Реквизит] = ПараметрыСФ[Реквизит];
			
			Если Реквизит = "Организация" Тогда
				Номер = "";
			ИначеЕсли Реквизит = "Контрагент" 
				И НЕ ИсправлениеСобственнойОшибки Тогда
				КППКонтрагента = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКодВидаОперацииАванс(НДСИсчисляетсяНалоговымАгентом)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",                           Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",                ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",                    Исправление);
	СтруктураПараметров.Вставить("ДокументыОснования",             ДокументыОснования);
	СтруктураПараметров.Вставить("НДСИсчисляетсяНалоговымАгентом", НДСИсчисляетсяНалоговымАгентом);
	
	Возврат Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);

КонецФункции

// Заполнение корректировочного счета-фактуры по документу "Возврат поставщику"
Процедура ЗаполнитьНаОснованииВозвратаПоставщику(Основание)

	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"Сделка,Дата,ДоговорКонтрагента");
	
	ИсходныйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(РеквизитыОснования.Сделка);
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ       = 0;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	ПовторнаяКорректировкаСчетаФактуры = Ложь; 
	
	Дата = РеквизитыОснования.Дата;
	ДоговорКонтрагента = РеквизитыОснования.ДоговорКонтрагента;
	ДокументОснование = Основание;
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Основание;
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", РеквизитыОснования.Сделка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураИсходный.Ссылка.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураИсходный.Ссылка КАК Ссылка,
	|	СчетФактураИсходный.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.Исправление КАК Исправление,
	|	СчетФактураИсходный.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураИсходный.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	СчетФактураИсходный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА СчетФактураИсходный.Ссылка.КодВидаОперацииНаУменьшение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперацииУменьшение,
	|	СчетФактураИсходный.Ссылка.Продавец КАК Продавец,
	|	СчетФактураИсходный.Ссылка.КППКонтрагента,
	|	СчетФактураИсходный.Ссылка.ИННКонтрагента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураИсходный
	|ГДЕ
	|	(СчетФактураИсходный.ДокументОснование = &ДокументПоступления
	|			ИЛИ СчетФактураИсходный.Ссылка = &ДокументПоступления)
	|	И НЕ СчетФактураИсходный.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый счет-фактура'");
	Иначе
		ТаблицаПоСчетуФактуре = РезультатЗапроса.Выгрузить();
		ПоСчетуФактуре = ТаблицаПоСчетуФактуре[0];
		РеквизитыИсходногоСчетаФактуры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ПоСчетуФактуре);
			
		СтрокаОснования.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
		СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
		СтрокаОснования.ИсходныйДокумент = ПоСчетуФактуре.Ссылка;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыИсходногоСчетаФактуры, "Продавец");
			
		НомерИсправленияСФ       = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
		КодВидаОперацииОснования = РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
			
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
	КодВидаОперации = ПолучитьКодВидаОперации(КодВидаОперацииОснования);
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		Если ЗначениеЗаполнено(РеквизитыИсходногоСчетаФактуры.КодВидаОперацииУменьшение)Тогда
			КодВидаОперацииНаУменьшение = РеквизитыИсходногоСчетаФактуры.КодВидаОперацииУменьшение;
		Иначе
			КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) Тогда
		КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Основание, "Грузоотправитель");
	КонецЕсли;
	
	ПараметрыСчетаФактуры = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры, , "Продавец");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли