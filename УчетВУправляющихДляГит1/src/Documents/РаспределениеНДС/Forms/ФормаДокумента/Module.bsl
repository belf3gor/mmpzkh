&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеРаспределениеНДС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СостояниеРегламентнойОперации", 
		?(Объект.Проведен, ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"), 
						   ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено")));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)
	
	ПрименитьДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаБезНДСПриИзменении(Элемент)
	
	ЕстьВыручкаБезНДС = Объект.ВыручкаБезНДС <> 0 
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("БезНДС") <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаЕНВДПриИзменении(Элемент)
	
	ЕстьВыручкаЕНВД = Объект.ВыручкаЕНВД <> 0
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("ЕНВДНДС") <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "ГруппаКосвенныеРасходы" Тогда
		ОтобразитьНаправленияСписания();
		
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "ГруппаРеализация" Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РаспределяемыйНДС

&НаКлиенте
Процедура РаспределяемыйНДСПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РаспределяемыйНДС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределяемыйНДС.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДСВидЦенностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределяемыйНДС.ТекущиеДанные;
	Если ТекущиеДанные.Количество <> 0 
		И ВидыЦенностиБезКоличества().НайтиПоЗначению(ТекущиеДанные.ВидЦенности) <> Неопределено Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораРаспределяемыйНДССубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораРаспределяемыйНДССубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораРаспределяемыйНДССубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто1ПриИзменении(Элемент)
	
	ПриИзмененииРаспределяемыйНДССубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто2ПриИзменении(Элемент)
	
	ПриИзмененииРаспределяемыйНДССубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределяемыйНДССубконто3ПриИзменении(Элемент)
	
	ПриИзмененииРаспределяемыйНДССубконто(3);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СоставКосвенныхРасходов

&НаКлиенте
Процедура СоставКосвенныхРасходовПриИзменении(Элемент)
	
	ЕстьВыручкаБезНДС = Объект.ВыручкаБезНДС <> 0 
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("БезНДС") <> 0;
	ЕстьВыручкаЕНВД = Объект.ВыручкаЕНВД <> 0
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("ЕНВДНДС") <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовСтавкаНДСПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	ТекущиеДанные.НДСВсего = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.СуммаВсего, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
    
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовСуммаВсегоПриИзменении(Элемент)
			
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	ТекущиеДанные.НДСВсего = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.СуммаВсего, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовНДССуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	ТекущиеДанные.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.НДССумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовБезНДССуммаПриИзменении(Элемент)
				
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	ТекущиеДанные.БезНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.БезНДССумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовЕНВДСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	ТекущиеДанные.ЕНВДНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.ЕНВДСумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовНДС0СуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	ТекущиеДанные.НДС0 = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.НДС0Сумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовПриАктивизацииСтроки(Элемент)
	
	Если ЭтаФорма.АктивизацияСтрокиТЧ Тогда 
		ЭтаФорма.АктивизацияСтрокиТЧ = Ложь;
	Иначе 
		ОтобразитьНаправленияСписания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовПослеУдаления(Элемент)
	
	ОтобразитьНаправленияСписания();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда

		Кандидат = ПоискПоТабличнойЧасти();
		
		Элементы.СоставКосвенныхРасходов.ТекущиеДанные.КлючСтроки = Кандидат;
		
		ОтобразитьНаправленияСписания();

	КонецЕсли;
   
КонецПроцедуры

&НаКлиенте
Процедура СоставКосвенныхРасходовПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить таблицу СчетаУчетаРасходов
	КлючПоиска = Новый Структура("КлючСтроки" , Элементы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки);
	
	НайденныеСтроки = Объект.СчетаУчетаРасходов.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.СчетаУчетаРасходов.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СчетаУчетаРасходов

&НаКлиенте
Процедура СчетаУчетаРасходовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСтроки = Элементы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСчетаУчетаРасходовСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСчетаУчетаРасходовСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСчетаУчетаРасходовСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСчетаУчетаРасходовСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСчетаУчетаРасходовСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСчетаУчетаРасходовСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСПродажи в разрезе различных ставок НДС.
//
&НаКлиенте
Процедура Рассчитать(Команда)
	
	СтруктураПараметров = Новый Структура("НачалоПериода, Организация, Дата",
		Объект.НачалоПериода, Объект.Организация, Объект.Дата);
	ВыручкаПоВидамДеятельности = РассчитатьВыручкуСервер(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(Объект, ВыручкаПоВидамДеятельности);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельВыручкиРассчитать()

// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
&НаКлиенте
Процедура КоманднаяПанельЗаполнитьТабличнуюЧасть(Команда)
	
	ЗаполнитьДокументНаКлиенте();
	
КонецПроцедуры

// Процедура вызывается по кнопке "Распределить" в форме диалога документа.
// В процедуре реализуется алгоритм распределения косвенных расходов в табличной
// части "СоставКосвенныхРасходов" на различные виды реализации в текущем периоде.
//
&НаКлиенте
Процедура КоманднаяПанельРаспределить(Команда)

	БазаРаспределенияСЕНВД = Объект.ВыручкаНДС + Объект.ВыручкаБезНДС + Объект.ВыручкаЕНВД + Объект.ВыручкаНДС0;
	
	Если БазаРаспределенияСЕНВД = 0 Тогда
		ТекстСообщения = НСтр("ru='На закладке ""Выручка от реализации"" не указаны параметры реализации!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РаспределитьРасходыСервер();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	ЗаполнитьДокументНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АнализРаспределенияНДС(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Период", Объект.Дата);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.АнализРаспределенияНДС.Форма", СтруктураПараметров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
	УстановитьУсловноеОформлениеРаспределяемыйНДС();
	
	УстановитьУсловноеОформлениеСчетаУчетаРасходов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРаспределяемыйНДС()
	
	// Субконто
	
	Для Сч = 1 По 3 Цикл
		
		// Доступное
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.РаспределяемыйНДС.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.РаспределяемыйНДС.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<...>'"));
		
		// Недоступное
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.РаспределяемыйНДС.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
	// Подразделение
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСПодразделение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РаспределяемыйНДС.ПодразделениеДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСчетаУчетаРасходов()
	
	// Субконто
	
	Для Сч = 1 По 3 Цикл
		
		// Доступное
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаУчетаРасходовСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.СчетаУчетаРасходов.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.СчетаУчетаРасходов.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<...>'"));
		
		// Недоступное
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаУчетаРасходовСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.СчетаУчетаРасходов.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаУчетаРасходовПодразделениеЗатрат");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СчетаУчетаРасходов.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("НДСКРаспределениюПроинициализировано")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНДСКРаспределению Тогда

		Форма.УстановитьУсловноеОформлениеНДСКРаспределению();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("КосвенныеРасходыПроинициализировано")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКосвенныеРасходы Тогда

		Форма.УстановитьУсловноеОформлениеКосвенныеРасходы();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// СтатьяЗатратНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтатьяЗатратНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВыручкаБезНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СтатьяЗатратНДСприЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтатьяЗатратНДСприЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВыручкаЕНВД", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РаспределяемыйНДССуммаБезНДСПринимаетсяКВычету, РаспределяемыйНДСНДСПринимаетсяКВычету

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССуммаБезНДСПринимаетсяКВычету");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНДСПринимаетсяКВычету");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыручкаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РаспределяемыйНДССуммаБезНДСУчитываетсяВCтоимости, РаспределяемыйНДСНДСУчитываетсяВCтоимости

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССуммаБезНДСУчитываетсяВCтоимости");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНДСУчитываетсяВCтоимости");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыручкаБезНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РаспределяемыйНДССуммаБезНДСУчитываетсяВCтоимостиЕНВД, РаспределяемыйНДСНДСУчитываетсяВCтоимостиЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССуммаБезНДСУчитываетсяВCтоимостиЕНВД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНДСУчитываетсяВCтоимостиЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыручкаЕНВД", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РаспределяемыйНДССуммаБезНДСДляОперацийПо0, РаспределяемыйНДСНДСДляОперацийПо0

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДССуммаБезНДСДляОперацийПо0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНДСДляОперацийПо0");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыручкаНДС0", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНДСКРаспределению() Экспорт

	НастройкиУсловногоОформления.Вставить("НДСКРаспределениюПроинициализировано", Истина);

	// РаспределяемыйНДСНадписьСуммаБезНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНадписьСуммаБезНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'сумма без НДС:'"));


	// РаспределяемыйНДСНадписьСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСНадписьСуммаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'НДС:'"));


	// РаспределяемыйНДСМодернизация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСМодернизация");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ОСБезГосРегистрации);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.МЦвОрганизации);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеПользование);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходныеВложения);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РаспределяемыйНДС.СчетЗатрат", ВидСравненияКомпоновкиДанных.НеВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// РаспределяемыйНДСКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределяемыйНДСКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РаспределяемыйНДС.ВидЦенности", ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностиБезКоличества());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКосвенныеРасходы() Экспорт

	НастройкиУсловногоОформления.Вставить("КосвенныеРасходыПроинициализировано", Истина);


	// СоставКосвенныхРасходовНДСВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставКосвенныхРасходовНДСВсего");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СоставКосвенныхРасходов.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СоставКосвенныхРасходов.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// СоставКосвенныхРасходовНадписьСуммаБезНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставКосвенныхРасходовНадписьСуммаБезНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'сумма без НДС:'"));


	// СоставКосвенныхРасходовНадписьСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставКосвенныхРасходовНадписьСуммаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'НДС:'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьНачалоПериода();
	
	УстановитьСостояниеДокумента();
	
	ЕстьВыручкаБезНДС = Объект.ВыручкаБезНДС <> 0 
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("БезНДС") <> 0;
	ЕстьВыручкаЕНВД = Объект.ВыручкаЕНВД <> 0
		ИЛИ Объект.СоставКосвенныхРасходов.Итог("ЕНВДНДС") <> 0;
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.СчетаУчетаРасходов, ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.РаспределяемыйНДС, ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПрименитьДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат(Форма);
	
	Если Форма.РаздельныйУчетНДСНаСчете19 Тогда
		Если КонецКвартала(Объект.НачалоПериода) <> КонецКвартала(Объект.Дата) Тогда
			// Распределение НДС за расширенный налоговый период по НДС (п.2 ст. 55 НК).
			Если НачалоМесяца(Объект.Дата) = НачалоКвартала(Объект.Дата) Тогда
				ШаблонСообщения = НСтр("ru='%1 - %2 (только ОС и НМА)'");
				Форма.ПериодРаспределения = СтрШаблон(ШаблонСообщения,
					Формат(Объект.НачалоПериода, "ДЛФ=D"),
					Формат(Объект.Дата, "ДЛФ=D"));	
			Иначе
				ШаблонСообщения = НСтр("ru='%1 - %2'");
				Форма.ПериодРаспределения = СтрШаблон(ШаблонСообщения,
					Формат(Объект.НачалоПериода, "ДЛФ=D"),
					Формат(Объект.Дата, "ДЛФ=D"));
			КонецЕсли; 
		ИначеЕсли КонецМесяца(Объект.Дата) <> КонецКвартала(Объект.Дата) Тогда
			Форма.ПериодРаспределения = Формат(Объект.НачалоПериода, "ДФ='ММММ гггг  ''г. (только ОС и НМА)'''");
		Иначе
			Форма.ПериодРаспределения = Формат(Объект.НачалоПериода, "ДФ='к ''Квартал'' гггг  ''г.'''");
		КонецЕсли;
	Иначе
		Форма.ПериодРаспределения = Формат(Объект.НачалоПериода, "ДФ='к ''Квартал'' гггг  ''г.'''");
	КонецЕсли;
	
	ЛьготаПоВычетуПриНесырьевомЭкспорте = Объект.НачалоПериода >= '20160701';
	ЛьготаПоВычетуПриОказанииЗаРубежом  = Объект.НачалоПериода >= '20190701';
	
	Элементы.ВыручкаНДС0ТоварыНесырьевые.Видимость       = ЛьготаПоВычетуПриНесырьевомЭкспорте;
	Элементы.ВыручкаНДС0КромеНесырьевыхТоваров.Видимость = ЛьготаПоВычетуПриНесырьевомЭкспорте;
	Элементы.ВыручкаНДС0.Видимость                       = НЕ ЛьготаПоВычетуПриНесырьевомЭкспорте;
	
	Элементы.ВыручкаУслугиНеНаТерриторииРФ.Видимость = ЛьготаПоВычетуПриОказанииЗаРубежом;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПодготовитьФормуНаСервере();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.СчетаУчетаРасходов, ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.РаспределяемыйНДС, ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат(Форма)
	
	Форма.Элементы.ГруппаСчетСубконто.Видимость = Не Форма.Объект.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "ПодразделениеЗатрат", "СубконтоСписанияНДС", "ПодразделениеЗатрат", "СчетСписанияНДС");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СчетаУчетаРасходовСубконто", "СчетаУчетаРасходовПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"РаспределяемыйНДССубконто", "РаспределяемыйНДСПодразделение", "Субконто", "Подразделение", "СчетЗатрат");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект,
		Объект,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСчетаУчетаРасходовСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, Элементы.СчетаУчетаРасходов.ТекущиеДанные, НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСчетаУчетаРасходовСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.СчетаУчетаРасходов.ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоСчетаУчетаРасходов(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРаспределяемыйНДССубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, Элементы.РаспределяемыйНДС.ТекущиеДанные, НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораРаспределяемыйНДССубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.РаспределяемыйНДС.ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоРаспределяемыйНДС(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры


// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
&НаКлиенте
Процедура ОтобразитьНаправленияСписания()
	
	СтрокаТаблицы =  Элементы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		// Включаем отбор по ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", СтрокаТаблицы.КлючСтроки); 
			
		Элементы.СчетаУчетаРасходов.ТолькоПросмотр = Ложь;
		Элементы.СчетаУчетаРасходов.ОтборСтрок 	   = ОтборСтрок;
						
	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		Элементы.СчетаУчетаРасходов.ТолькоПросмотр = Истина;
		Если Объект.СоставКосвенныхРасходов.Количество() = 0 Тогда
			Объект.СчетаУчетаРасходов.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПоискПоТабличнойЧасти()
	
		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей "СчетаУчетаРасходов"
		// Значение должно быть уникальным в пределах таблицы СоставКосвенныхРасходов
		НеУстановлено = Истина;
		Кандидат = Объект.СоставКосвенныхРасходов.Количество();

		Пока НеУстановлено Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("КлючСтроки", Кандидат);
			
			Если НЕ ЗначениеЗаполнено(Объект.СоставКосвенныхРасходов.НайтиСтроки(ПараметрыОтбора)) Тогда
			
				НеУстановлено = Ложь;

				Возврат Кандидат
			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьПодготовленныеДанные();
				УправлениеФормой(ЭтаФорма);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;	
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОшибкаЗаполнения") И Не РаздельныйУчетНДСНаСчете19 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураДанных.ОшибкаЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("РеквизитыДокумента") Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных.РеквизитыДокумента);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СоставКосвенныхРасходов") Тогда
		
		Объект.СоставКосвенныхРасходов.Загрузить(СтруктураДанных.СоставКосвенныхРасходов);
		
		ЕстьВыручкаБезНДС = Объект.ВыручкаБезНДС <> 0 
			ИЛИ Объект.СоставКосвенныхРасходов.Итог("БезНДС") <> 0;
		ЕстьВыручкаЕНВД = Объект.ВыручкаЕНВД <> 0
			ИЛИ Объект.СоставКосвенныхРасходов.Итог("ЕНВДНДС") <> 0;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СчетаУчетаРасходов") Тогда
		Объект.СчетаУчетаРасходов.Загрузить(СтруктураДанных.СчетаУчетаРасходов);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("РаспределяемыйНДС") Тогда
		Объект.РаспределяемыйНДС.Загрузить(СтруктураДанных.РаспределяемыйНДС);
		
		ЕстьВыручкаБезНДС = Объект.РаспределяемыйНДС.Итог("СуммаБезНДСУчитываетсяВCтоимостиЕНВД") <> 0;
		ЕстьВыручкаЕНВД = Объект.РаспределяемыйНДС.Итог("НДСУчитываетсяВCтоимостиЕНВД") <> 0;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьВыручкуСервер(СтруктураПараметров)
	
	Возврат Документы.РаспределениеНДС.ВыручкаПоВидамДеятельности(СтруктураПараметров);
	
КонецФункции

&НаСервере
Функция ЗаполнитьТабличнуюЧастьСервер()
	
	Объект.СоставКосвенныхРасходов.Очистить();
	Объект.СчетаУчетаРасходов.Очистить();
	
	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("НачалоПериода, Дата, Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.РаспределениеНДС.ПодготовитьДанныеДляЗаполненияТабличныхЧастей(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Заполнение табличной части документа ""Распределение НДС косвенных расходов""'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.РаспределениеНДС.ПодготовитьДанныеДляЗаполненияТабличныхЧастей", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РаспределитьРасходыСервер()
	
	РеквизитыДокумента = Новый Структура("ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС", 
		Объект.ВыручкаЕНВД, Объект.ВыручкаБезНДС, Объект.ВыручкаНДС0, Объект.ВыручкаНДС);
		
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		Документы.РаспределениеНДС.РаспределитьПоВыручкеРаспределяемыйНДС(РеквизитыДокумента, Объект.РаспределяемыйНДС);
		
		ЕстьВыручкаБезНДС = Объект.РаспределяемыйНДС.Итог("СуммаБезНДСУчитываетсяВCтоимостиЕНВД") <> 0;
		ЕстьВыручкаЕНВД = Объект.РаспределяемыйНДС.Итог("НДСУчитываетсяВCтоимостиЕНВД") <> 0;
		
	Иначе
		
		Документы.РаспределениеНДС.РаспределитьПоВыручке(РеквизитыДокумента, Объект.СоставКосвенныхРасходов);
		
		ЕстьВыручкаБезНДС = Объект.ВыручкаБезНДС <> 0 
			ИЛИ Объект.СоставКосвенныхРасходов.Итог("БезНДС") <> 0;
		ЕстьВыручкаЕНВД = Объект.ВыручкаЕНВД <> 0
			ИЛИ Объект.СоставКосвенныхРасходов.Итог("ЕНВДНДС") <> 0;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументНаКлиенте(ПараметрЗаполненияДокумента = Ложь)

	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru = 'Проведенный документ не может быть заполнен автоматически. 
			|Отменить проведение документа для заполнения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросОтменитьПроведениеДокументаДляЗаполненияЗавершение", ЭтотОбъект, ПараметрЗаполненияДокумента);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		ОчиститьТабличныеЧастиИЗаполнитьДокумент(ПараметрЗаполненияДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧастиИЗаполнитьДокумент(ПараметрЗаполненияДокумента)

	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода)Тогда
		ТекстСообщения = НСтр("ru='Не установлен период заполнения документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода");
		Возврат;
	КонецЕсли;

	Если РаздельныйУчетНДСНаСчете19 Тогда
		Если Объект.РаспределяемыйНДС.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Табличное поле будет очищено. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросТабличноеПолеБудетОчищеноЗавершение", ЭтотОбъект, ПараметрЗаполненияДокумента);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			НачатьЗаполнениеДокумента(ПараметрЗаполненияДокумента);
		КонецЕсли;
	Иначе	
		Если Объект.СоставКосвенныхРасходов.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Табличное поле будет очищено. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросТабличноеПолеБудетОчищеноЗавершение", ЭтотОбъект, ПараметрЗаполненияДокумента);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			НачатьЗаполнениеДокумента(ПараметрЗаполненияДокумента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеДокумента(ПараметрЗаполненияДокумента)
	
	Если ПараметрЗаполненияДокумента Тогда
		Результат = ЗаполнитьДокументНаСервере();
	Иначе
		Результат = ЗаполнитьТабличнуюЧастьСервер();
	КонецЕсли;
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОтменитьПроведениеДокументаДляЗаполненияЗавершение(Результат, ПараметрЗаполненияДокумента) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧастиИЗаполнитьДокумент(ПараметрЗаполненияДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросТабличноеПолеБудетОчищеноЗавершение(Результат, ПараметрЗаполненияДокумента) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьЗаполнениеДокумента(ПараметрЗаполненияДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере()
	
	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;
	
	Объект.СоставКосвенныхРасходов.Очистить();
	Объект.РаспределяемыйНДС.Очистить();
	
	СтруктураПараметров = Новый Структура("НачалоПериода, Дата, Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.РаспределениеНДС.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);		
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Распределение НДС косвенных расходов""'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.РаспределениеНДС.ПодготовитьДанныеДляЗаполнения", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.СчетаУчетаРасходов Цикл
		КоличествоСубконто = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Количество();
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто" + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		СтрокаТаблицы.ПодразделениеЗатратДоступность = СтрокаТаблицы.СчетЗатрат.УчетПоПодразделениям;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.РаспределяемыйНДС Цикл
		КоличествоСубконто = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Количество();
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто" + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		СтрокаТаблицы.ПодразделениеДоступность = СтрокаТаблицы.СчетЗатрат.УчетПоПодразделениям;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы", ПараметрыЗаполненияФормы) Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, ПараметрыЗаполненияФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидыЦенностиБезКоличества()

	Результат = Новый СписокЗначений;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги"));
	Возврат Результат;

КонецФункции

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьНачалоПериода()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	БлижайшийНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Объект.Организация,
		Объект.Дата,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
	
	Если БлижайшийНалоговыйПериод.Начало <> БлижайшийНалоговыйПериод.Период Тогда
		НачалоНалоговогоПериода = БлижайшийНалоговыйПериод.Начало;
	Иначе
		НачалоНалоговогоПериода = НачалоКвартала(Объект.Дата);
	КонецЕсли;
	
	Если НачалоКвартала(Объект.Дата) < НачалоНалоговогоПериода Тогда
		Объект.НачалоПериода = НачалоКвартала(Объект.Дата);
	ИначеЕсли РаздельныйУчетНДСНаСчете19 Тогда
		Если НачалоМесяца(Объект.Дата) = НачалоКвартала(Объект.Дата) Тогда
			// В первом месяце квартала производится распределение НДС по ОС и НМА
			// принятым к учету в этом месяце.
			// В случае расширенного налогового периода по НДС (п.2 ст.55 НК) необходимо
			// учесть ОС и НМА, приобретенные с момента регистрации до конца предыдущего квартала.
			Объект.НачалоПериода = НачалоНалоговогоПериода;
		ИначеЕсли КонецМесяца(Объект.Дата) <> КонецКвартала(Объект.Дата) Тогда
			// Во втором месяце квартала производится распределение НДС по ОС и НМА
			// принятым к учету в этом месяце. 
			// Для распределения необходимо учитывать выручку за месяц ввода в эксплуатацию.
			Объект.НачалоПериода = НачалоМесяца(Объект.Дата);
		Иначе
			Объект.НачалоПериода = НачалоНалоговогоПериода;
		КонецЕсли;
	Иначе
		Объект.НачалоПериода = НачалоНалоговогоПериода;
	КонецЕсли;

КонецПроцедуры
