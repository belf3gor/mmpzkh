#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
		
		// Заполнение реквизитов шапки.
		ИменаНаследуемыхРеквизитов = "Организация, РегистрационныйНомерФСС, ДополнительныйКодФСС, КодПодчиненностиФСС";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, ИменаНаследуемыхРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
		
		// Заполнение таблицы теми ЭЛН, которые еще не приняты ФСС.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеЭЛН.Ссылка КАК Ссылка,
		|	ДанныеЭЛН.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности,
		|	ДанныеЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
		|ПОМЕСТИТЬ ВТДанныеЭЛН
		|ИЗ
		|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
		|ГДЕ
		|	ДанныеЭЛН.Ссылка = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
		|	СведенияОбЭЛН.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
		|ИЗ
		|	ВТДанныеЭЛН КАК ВТДанныеЭЛН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|		ПО ВТДанныеЭЛН.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
		|ГДЕ
		|	(СведенияОбЭЛН.ИзмененияПринятыФСС = ЛОЖЬ
		|			ИЛИ СведенияОбЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛН.НеПринятФСС))";
		
		ТаблицаОснований = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЭЛН.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	// Очистка реквизитов шапки.
	ДатаПолученияОтветаФСС = Неопределено;
	СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ВРаботе;
	РеестрСоставил = Неопределено;
	ТелефонСоставителя = Неопределено;
	АдресЭлектроннойПочтыСоставителя = Неопределено;
	НомерЗапросаЗаДень = Неопределено;
	ДокументОснование = Неопределено;
	
	// Заполнение таблицы теми ЭЛН, которые требуется отправить и еще не включены в исходный документ.
	ДанныеЭЛН.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		УжеДобавленныеЭЛН = ОбъектКопирования.ДанныеЭЛН.Выгрузить(, "НомерЛисткаНетрудоспособности").ВыгрузитьКолонку("НомерЛисткаНетрудоспособности");
		ТаблицаОснований = РегистрыСведений.СведенияОбЭЛН.ТаблицаОснованийДляРеестраЭЛН(Организация, Неопределено, УжеДобавленныеЭЛН, 31);
		Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЭЛН.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛисткиНетрудоспособности", ДанныеЭЛН.Выгрузить(,"НомерСтроки, ЛистокНетрудоспособности"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛисткиНетрудоспособности.НомерСтроки,
	|	ЛисткиНетрудоспособности.ЛистокНетрудоспособности
	|ПОМЕСТИТЬ ВТЛисткиНетрудоспособности
	|ИЗ
	|	&ЛисткиНетрудоспособности КАК ЛисткиНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТЛисткиНетрудоспособности.НомерСтроки) КАК НомерСтроки,
	|	ЛисткиНетрудоспособностиПовторы.НомерСтроки КАК НомерСтрокиПовтора,
	|	ВТЛисткиНетрудоспособности.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	|ИЗ
	|	ВТЛисткиНетрудоспособности КАК ВТЛисткиНетрудоспособности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛисткиНетрудоспособности КАК ЛисткиНетрудоспособностиПовторы
	|		ПО ВТЛисткиНетрудоспособности.ЛистокНетрудоспособности = ЛисткиНетрудоспособностиПовторы.ЛистокНетрудоспособности
	|			И ВТЛисткиНетрудоспособности.НомерСтроки < ЛисткиНетрудоспособностиПовторы.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЛисткиНетрудоспособности.ЛистокНетрудоспособности,
	|	ЛисткиНетрудоспособностиПовторы.НомерСтроки
	|ИТОГИ ПО
	|	ЛистокНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЛисткиНетрудоспособности.ЛистокНетрудоспособности,
	|	ВТЛисткиНетрудоспособности.НомерСтроки
	|ИЗ
	|	ВТЛисткиНетрудоспособности КАК ВТЛисткиНетрудоспособности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныеЛисты
	|		ПО ВТЛисткиНетрудоспособности.ЛистокНетрудоспособности = БольничныеЛисты.Ссылка
	|ГДЕ
	|	НЕ БольничныеЛисты.Проведен";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ПовторяющиесяЛН = МассивРезультатов[1];
	НепроведенныеЛН = МассивРезультатов[2];
	
	ИмяТаблицы = "ДанныеЭЛН";
	
	Если Не ПовторяющиесяЛН.Пустой() Тогда
		Выборка = ПовторяющиесяЛН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Текст = НСтр("ru = '%1 использован в нескольких строках: %2.'");
			ВыборкаПоЛН = Выборка.Выбрать();
			Если ВыборкаПоЛН.Следующий() Тогда
				ТекстПовторныеСтроки = "" + ВыборкаПоЛН.НомерСтроки + ", " + ВыборкаПоЛН.НомерСтрокиПовтора;
				Пока ВыборкаПоЛН.Следующий() Цикл
					ТекстПовторныеСтроки  = ТекстПовторныеСтроки + ", " + ВыборкаПоЛН.НомерСтрокиПовтора;
				КонецЦикла;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.ЛистокНетрудоспособности, ТекстПовторныеСтроки);
				СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Выборка.НомерСтроки, "ЛистокНетрудоспособности");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не НепроведенныеЛН.Пустой() Тогда
		Выборка = НепроведенныеЛН.Выбрать();
		Пока Выборка.Следующий() Цикл
			Текст = НСтр("ru = 'Листок нетрудоспособности в строке %1 непроведен.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.НомерСтроки);
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Выборка.НомерСтроки, "ЛистокНетрудоспособности");
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеЭЛН Цикл
		Если Не ЗначениеЗаполнено(Строка.НомерЛисткаНетрудоспособности) Тогда
			Текст = НСтр("ru = 'Номер листка нетрудоспособности обязателен к заполнению!'");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "НомерЛисткаНетрудоспособности");
		КонецЕсли;
		Если Найти("," + Строка.УсловияИсчисленияКод1 + "," + Строка.УсловияИсчисленияКод2 + "," + Строка.УсловияИсчисленияКод3 + ",", ",43,") > 0
			И Не ЗначениеЗаполнено(Строка.ФинансированиеФедеральнымБюджетом) Тогда
			Текст = НСтр("ru = 'Для лица, подвергшегося воздействию радиации, не указана причина этого воздействия'");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "ВыплатаЗаСчетФедеральногоБюджета");
		КонецЕсли;
		Если Строка.Исправление И Не ЗначениеЗаполнено(Строка.КодПричиныИсправления) И Не ЗначениеЗаполнено(Строка.ОписаниеПричиныИсправления) Тогда
			Текст = НСтр("ru = 'Не указана причина исправления'");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "КодПричиныИсправления");
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДанныеЭЛН.НомерЛисткаНетрудоспособности");
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ПустаяСсылка()
		Или СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ВРаботе) Тогда
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.Подготовлен;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.Подготовлен Тогда
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ВРаботе;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПередЗаписьюРеестра(ЭтотОбъект, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПриЗаписиРеестра(ЭтотОбъект);
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПередУдалениемРеестра(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкиЗаполненияПоРегламентуФСС

Функция ПроверитьЗаполнениеПоРегламентуФСС() Экспорт
	Отказ = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДанныеЭЛН Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС) Тогда
			СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "СНИЛС");
		КонецЕсли;
		
		Если СтрокаТаблицы.Исправление Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.КодПричиныИсправления) Тогда
				СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "КодПричиныИсправления");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОписаниеПричиныИсправления) Тогда
				СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "ОписаниеПричиныИсправления");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
КонецФункции

#КонецОбласти

#Область БазоваяФункциональностьПроверокЗаполнения

Процедура СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, НомерСтроки, ИмяРеквизита)
	Если Текст = Неопределено Тогда
		Текст = НСтр("ru = 'Не заполнено поле ""%1"".'");
		Если ИмяТаблицы = Неопределено Тогда
			Текст = СтрШаблон(Текст, Метаданные().Реквизиты[ИмяРеквизита].Представление());
		Иначе
			Текст = СтрШаблон(Текст, Метаданные().ТабличныеЧасти[ИмяТаблицы].Реквизиты[ИмяРеквизита].Представление());
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Если ИмяТаблицы = Неопределено Тогда
		Сообщение.Поле = ИмяРеквизита;
	Иначе
		Сообщение.Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, НомерСтроки, ИмяРеквизита);
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

#КонецОбласти

#Область МеханизмФиксацииИзменений

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ОбновитьДанныеСтрахователя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеЭЛН(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьСостояниеВШапке(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Если ЗначениеЗаполнено(ДатаПолученияОтветаФСС) Тогда
		Возврат Истина; // Дата не выведена в интерфейс, заполнется при фактическом получении ответа от ФСС.
	КонецЕсли;
	
	Если Проведен И Не ПометкаУдаления
		И (СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ПринятФСС
			Или СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС
			Или СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС) Тогда
		Возврат Истина; // Реестр проведен и пользователь вручную установил состояние.
	КонецЕсли;
	
	Возврат Ложь; // Реестр не отправлялся в ФСС, не проведен и не в конечном состоянии.
КонецФункции

Функция ОбновитьДанныеСтрахователя(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура;
	
	ИменаРеквизитовОрганизации = "РегистрационныйНомерФСС, КодПодчиненностиФСС, ДополнительныйКодФСС, НаименованиеТерриториальногоОрганаФСС, ОГРН";
	ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаРеквизитовОрганизации);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыДокумента, ЗначенияРеквизитовОрганизации, Истина);
	
	СведенияОПодписях = ПодписиДокументов.СведенияОПодписяхПоУмолчаниюДляОбъектаМетаданных(Метаданные(), Организация);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыДокумента, СведенияОПодписях, Истина);
	
	ДатаПолученияСведений = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПолученияСведений, "ТелОрганизации,АдресЭлектроннойПочтыОрганизации,ИННЮЛ,КППЮЛ");
	РеквизитыДокумента.Вставить("ТелефонОрганизации", СведенияОбОрганизации.ТелОрганизации);
	РеквизитыДокумента.Вставить("ИНН", СведенияОбОрганизации.ИННЮЛ);
	РеквизитыДокумента.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	РеквизитыДокумента.Вставить("ТелефонСоставителя", СведенияОбОрганизации.ТелОрганизации);
	РеквизитыДокумента.Вставить("АдресЭлектроннойПочтыСоставителя", СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеЭЛН(ПараметрыФиксации)
	Если ДанныеЭЛН.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ТаблицаОснований = ДанныеЭЛН.Выгрузить(, "ЛистокНетрудоспособности, НомерЛисткаНетрудоспособности");
	Запрос = УчетПособийСоциальногоСтрахования.ЗапросРеестраЭЛНПоПервичнымДокументам(ТаблицаОснований, Ссылка, "ВТВторичныеДанные");
	Если Запрос = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос.Выполнить();
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, "ДанныеЭЛН", "ВТВторичныеДанные", ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеФизическогоЛица(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("РеестрСоставил", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "ФизическоеЛицо"));
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьСостояниеВШапке(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("СостояниеРеестра", СостояниеДокументаИзСостоянийЭЛН());
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция СостояниеДокументаИзСостоянийЭЛН() Экспорт
	ЕстьНеопределенные = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛН.ПустаяСсылка(), "Состояние") <> Неопределено);
	ЕстьПринятые = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛН.ПринятФСС, "Состояние") <> Неопределено);
	ЕстьНеПринятые = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛН.НеПринятФСС, "Состояние") <> Неопределено);
	
	Если Не ЕстьНеопределенные Тогда
		Если ЕстьПринятые И ЕстьНеПринятые Тогда
			Возврат Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС;
		ИначеЕсли ЕстьПринятые Тогда
			Возврат Перечисления.СостоянияРеестровЭЛН.ПринятФСС;
		ИначеЕсли ЕстьНеПринятые Тогда
			Возврат Перечисления.СостоянияРеестровЭЛН.НеПринятФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если Проведен Тогда
		Возврат Перечисления.СостоянияРеестровЭЛН.Подготовлен;
	КонецЕсли;
	
	Возврат Перечисления.СостоянияРеестровЭЛН.ВРаботе;
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

Процедура ЗаполнитьСостояниеРеестраИзСтатусаДокумента() Экспорт
	Если ЗначениеЗаполнено(СостояниеРеестра) Тогда
		Возврат; // Перенос не требуется.
	КонецЕсли;
	
	Если УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС Тогда
		УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка();
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ПринятФСС;
	ИначеЕсли УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС Тогда
		УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка();
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС;
	ИначеЕсли УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен Тогда
		УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка();
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.Подготовлен;
	ИначеЕсли УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе Тогда
		УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка();
		СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ВРаботе;
	Иначе
		СостояниеРеестра = СостояниеДокументаИзСостоянийЭЛН();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормаЭлемента

Функция ВсеЭЛНПринятыФСС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	Т.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТДанныеЭЛН
	|ИЗ
	|	&ДанныеЭЛН КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ВТДанныеЭЛН КАК ВТДанныеЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО ВТДанныеЭЛН.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|			И (СведенияОбЭЛН.ИзмененияПринятыФСС = ЛОЖЬ)";
	Запрос.УстановитьПараметр("ДанныеЭЛН", ДанныеЭЛН.Выгрузить(, "НомерЛисткаНетрудоспособности, Состояние"));
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти


#КонецОбласти

#КонецЕсли