#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.УдалитьСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе;
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере("Объект");
		
		ОбновитьВторичныеДанныеНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(ЭтотОбъект, "ДанныеЭЛНСостояние, ДанныеЭЛНКомментарийКСостоянию");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Объект.ДанныеЭЛН.Состояние", "=", Перечисления.СостоянияЭЛН.ПринятФСС);
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(ЭтотОбъект, "ДанныеЭЛНСостояние, ДанныеЭЛНКомментарийКСостоянию");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "ЦветТекста", ЦветаСтиля.РезультатПроблемаЦвет);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Объект.ДанныеЭЛН.Состояние", "=", Перечисления.СостоянияЭЛН.НеПринятФСС);
	
	Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПревышениеОграниченияКоличестваОтправляемыхЭЛН"
		И Параметр.Организация = Объект.Организация
		И Не Параметр.ВидимостьГруппыПревышениеОграниченияКоличестваОтправляемыхЭЛН Тогда
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ТекущийОбъект.ЗаполнитьСостояниеРеестраИзСтатусаДокумента();
	
	Если Не ТолькоПросмотр
		И ТекущийОбъект.Проведен
		И Не ТекущийОбъект.ПометкаУдаления
		И (ТекущийОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС
			Или ТекущийОбъект.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС) Тогда
		// Группа "ГруппаСоздатьЕщеОдинРеестр" рассчитывается на основании последнего состояния ЭЛН.
		ОсталисьНеПринятыеЭЛН = ТекущийОбъект.ВсеЭЛНПринятыФСС();
	Иначе
		// Группа "ГруппаСоздатьЕщеОдинРеестр" скрывается.
		ОсталисьНеПринятыеЭЛН = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(ДокументОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// Перед записью переадресуем сообщения с полей объекта на поля формы
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Если Найти(Сообщение.Поле, "].ЛистокНетрудоспособности") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоНомераСтроки = Найти(Сообщение.Поле, "[");
		ОкончаниеНомераСтроки = Найти(Сообщение.Поле, "]");
		Если НачалоНомераСтроки > 0
			И ОкончаниеНомераСтроки > 0 Тогда
			НачалоНомераСтроки = НачалоНомераСтроки + 1;
			НомерСтроки = Сред(Сообщение.Поле, НачалоНомераСтроки, ОкончаниеНомераСтроки - НачалоНомераСтроки);
			ЛистокНетрудоспособности = Объект.ДанныеЭЛН[Число(НомерСтроки)].ЛистокНетрудоспособности;
			Если ЗначениеЗаполнено(ЛистокНетрудоспособности) Тогда
				Сообщение.КлючДанных = ЛистокНетрудоспособности;
				Сообщение.Поле = Прав(Сообщение.Поле, СтрДлина(Сообщение.Поле) - (ОкончаниеНомераСтроки + 1));
				Сообщение.ПутьКДанным = "Объект";
			Иначе
				Сообщение.Поле = Лев(Сообщение.Поле, Найти(Сообщение.Поле, "]")) + ".ЛистокНетрудоспособности";
			КонецЕсли;
		КонецЕсли;
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияОбновитьФиксациюВФорме();
	
	ОбновитьВидимостьДоступность();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеестрДанныхЭЛНЗаполняемыхРаботодателем", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеРеестраОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.Проведен И Не Объект.ПометкаУдаления Тогда
		Объект.СостояниеРеестра = ПредопределенноеЗначение("Перечисление.СостоянияРеестровЭЛН.Подготовлен");
	Иначе
		Объект.СостояниеРеестра = ПредопределенноеЗначение("Перечисление.СостоянияРеестровЭЛН.ВРаботе");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеРеестраПриИзменении(Элемент)
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СостояниеРеестраПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеЭЛН

&НаКлиенте
Процедура ВывестиОповещениеПользователя(Структура)
	Если Структура.Свойство("ОповещениеПользователя") Тогда
		ПоказатьОповещениеПользователя(
			Структура.ОповещениеПользователя.Текст,
			Структура.ОповещениеПользователя.ДействиеПриНажатии,
			Структура.ОповещениеПользователя.Пояснение,
			Структура.ОповещениеПользователя.Картинка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьОповещениеПользователя(Структура, Текст, ДействиеПриНажатии = Неопределено, Пояснение = "", Картинка = Неопределено)
	ОповещениеПользователя = Новый Структура("Текст, ДействиеПриНажатии, Пояснение, Картинка", Текст, ДействиеПриНажатии, Пояснение, Картинка);
	Структура.Вставить("ОповещениеПользователя", ОповещениеПользователя);
КонецПроцедуры

&НаСервере
Функция ДанныеЭЛНОбработкаВыбораНаСервере(Знач РезультатВыбора) Экспорт
	Если ОбъектЗафиксирован() Тогда
		Текст = НСтр("ru = 'Документ отправлен'");
		Пояснение = НСтр("ru = 'Добавление новых ЭЛН невозможно'");
		ПодготовитьОповещениеПользователя(РезультатВыбора, Текст, , Пояснение, БиблиотекаКартинок.Предупреждение32);
		Возврат Ложь;
	КонецЕсли;
	Найденные = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("НомерЛисткаНетрудоспособности", РезультатВыбора.НомерЛисткаНетрудоспособности));
	Если Найденные.Количество() > 0 Тогда
		Элементы.ДанныеЭЛН.ТекущаяСтрока = Найденные[0].ПолучитьИдентификатор();
		Текст = НСтр("ru = 'ЭЛН уже выбран в реестре'");
		ПодготовитьОповещениеПользователя(РезультатВыбора, Текст, , , БиблиотекаКартинок.Информация32);
		Возврат Истина;
	КонецЕсли;
	Количество = Объект.ДанныеЭЛН.Количество();
	Если Количество >= 30 Тогда
		РезультатВыбора.Отказ = Истина;
		Текст = НСтр("ru = 'Достигнуто ограничение в 30 ЭЛН'");
		Пояснение = НСтр("ru = 'Добавление новых ЭЛН невозможно'");
		ПодготовитьОповещениеПользователя(РезультатВыбора, Текст, , Пояснение, БиблиотекаКартинок.Предупреждение32);
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Истина;
		Возврат Ложь;
	Иначе
		СтрокаТаблицы = Объект.ДанныеЭЛН.Добавить();
		СтрокаТаблицы.НомерЛисткаНетрудоспособности = РезультатВыбора.НомерЛисткаНетрудоспособности;
		СтрокаТаблицы.ЛистокНетрудоспособности = РезультатВыбора.ЛистокНетрудоспособности;
		Элементы.ДанныеЭЛН.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		ОбновитьВторичныеДанныеНаСервере(Ложь);
		Текст = СтрШаблон(НСтр("ru = 'ЭЛН добавлен в реестр под номером %1'"), Количество + 1);
		ПодготовитьОповещениеПользователя(РезультатВыбора, Текст, , , БиблиотекаКартинок.Успешно32);
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Ложь;
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДанныеЭЛНОбработкаВыбора(Элемент, РезультатВыбора, СтандартнаяОбработка)
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если Не ДанныеЭЛНОбработкаВыбораНаСервере(РезультатВыбора) Тогда
		РезультатВыбора.Отказ = Истина;
	КонецЕсли;
	ВывестиОповещениеПользователя(РезультатВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНПослеУдаления(Элемент)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	Если Объект.ДанныеЭЛН.Количество() <= 30 Тогда
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДанныеЭЛНПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле = Элементы.ДанныеЭЛНСостояние
		Или Поле = Элементы.ДанныеЭЛНКомментарийКСостоянию
		Или Поле = Элементы.ДанныеЭЛНЛистокНетрудоспособности Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СписокРеквизитов = ИменаРеквизитовСтрокиНаФорме();
	СписокРеквизитов.Добавить("НомерСтроки");
	СписокРеквизитов.Добавить("ЛистокНетрудоспособности");
	СтруктураДанныеЭЛН = Новый Структура;
	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		СтруктураДанныеЭЛН.Вставить(ЭлементСписка.Значение, ТекущиеДанные[ЭлементСписка.Значение]);
	КонецЦикла;
	
	ИнформацияОДокументе = Новый Структура;
	ИнформацияОДокументе.Вставить("Ссылка", Объект.Ссылка);
	ИнформацияОДокументе.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	ИнформацияОДокументе.Вставить("Номер", Объект.Номер);
	ИнформацияОДокументе.Вставить("Дата", Объект.Дата);
	ИнформацияОДокументе.Вставить("Организация", Объект.Организация);
	ИнформацияОДокументе.Вставить("ОбъектЗафиксирован", ОбъектЗафиксирован());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЭЛН", СтруктураДанныеЭЛН);
	ПараметрыФормы.Вставить("ИнформацияОДокументе", ИнформацияОДокументе);
	
	Оповещение = Новый ОписаниеОповещения("ДанныеЭЛНВыборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.Форма.СведенияОЛисткеНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНЛистокНетрудоспособностиПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.ДанныеЭЛН.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЛистокНетрудоспособностиПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьТаблицуЭЛН();
	Оповестить_ВидимостьГруппыПревышениеОграниченияКоличестваОтправляемыхЭЛН();
КонецПроцедуры

&НаКлиенте
Процедура Оповестить_ВидимостьГруппыПревышениеОграниченияКоличестваОтправляемыхЭЛН()
	Параметр = Новый Структура;
	Параметр.Вставить("Организация", Объект.Организация);
	Параметр.Вставить("ВидимостьГруппыПревышениеОграниченияКоличестваОтправляемыхЭЛН", Элементы.ГруппаСоздатьСледующийРеестр.Видимость);
	Оповестить("ПревышениеОграниченияКоличестваОтправляемыхЭЛН", Параметр, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЭЛН(Команда)
	Если ОбъектЗафиксирован() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Реестр отправлен'"), , НСтр("ru = 'Добавление новых ЭЛН невозможно'"), БиблиотекаКартинок.Предупреждение32);
	ИначеЕсли Объект.ДанныеЭЛН.Количество() >= 30 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Достигнуто ограничение в 30 ЭЛН'"), , НСтр("ru = 'Добавление новых ЭЛН невозможно'"), БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
	ВыбранныеНомераЭЛН = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ДанныеЭЛН Цикл
		ВыбранныеНомераЭЛН.Добавить(СтрокаТаблицы.НомерЛисткаНетрудоспособности);
	КонецЦикла;
	
	ОтборФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОтборФормы.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("ВыбранныеНомераЭЛН", ВыбранныеНомераЭЛН);
	ПараметрыФормыВыбора.Вставить("Отбор", ОтборФормы);
	
	ОткрытьФорму("РегистрСведений.СведенияОбЭЛН.ФормаСписка", ПараметрыФормыВыбора, Элементы.ДанныеЭЛН, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда)
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРеестрВФСС(Команда)
	Обработчик = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлВСлужебномФормате(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлВСлужебномФорматеПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ПоказатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с формой.

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтотОбъект, ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ФиксацияБыстрыйПоискРеквизитов());
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов шапки.

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Организация");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание команд.

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// Формирование параметров запроса к сервису отправки Реестров ЭЛН.
	РезультатВыгрузки = ВыгрузитьРеестрЭЛН(Ложь, Истина, Истина);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подписание и отправка запроса, расшифровка ответа.
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС(Оповещение, РезультатВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ПустойПараметр) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка ответа ФСС.
	ЗагрузитьОтветСервисаФССВДанныеФормы(Результат.АдресРасшифрованногоОтветаSOAP);
	АктуализироватьХэшиЭЛНИПровестиДокумент();
КонецПроцедуры

#Область АктуализацияХэшаБольничных

&НаКлиенте
Процедура АктуализироватьХэшиЭЛНИПровестиДокумент()
	Найденные = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("ТребуетсяАктуализацияХэша", Истина));
	Если Найденные.Количество() = 0 Тогда
		Если ТребуетсяПовторнаяОтправка Тогда
			// Произведена актуализации хэшей, требуется повторный обмен.
			ТребуетсяПовторнаяОтправка = Ложь;
			ОтправитьРеестрВФСС(Неопределено);
		Иначе
			// Обмен завершен, требуется проведение документа.
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Записать(ПараметрыЗаписи);
			ПоказатьОповещениеПользователя(, , НСтр("ru = 'Реестр ЭЛН отправлен в ФСС.'"), БиблиотекаКартинок.Информация32);
		КонецЕсли;
	Иначе
		// Формирование параметров запроса к сервису получения ЭЛН.
		ИдентификаторСтроки = Найденные[0].ПолучитьИдентификатор();
		ЗапросДляПолученияЭЛН = ВыгрузитьЗапросДляПолученияЭЛН(ИдентификаторСтроки);
		Если ЗапросДляПолученияЭЛН = Неопределено Тогда
			// Не удалось сформировать запрос, переход к следующему больничному.
			СтрокаТаблицы = Объект.ДанныеЭЛН.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ТребуетсяАктуализацияХэша = Ложь;
			АктуализироватьХэшиЭЛНИПровестиДокумент();
		Иначе
			// Подписание и отправка запроса, расшифровка ответа.
			Оповещение = Новый ОписаниеОповещения("ПродолжитьАктуализациюХэшейЭЛН", ЭтотОбъект, ИдентификаторСтроки);
			ЭлектронныйДокументооборотСФССКлиент.ПолучитьДанныеЭЛНИзФСС(Оповещение, ЗапросДляПолученияЭЛН);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАктуализациюХэшейЭЛН(Результат, ИдентификаторСтроки) Экспорт
	// Загрузка ответа.
	СтрокаТаблицы = Объект.ДанныеЭЛН.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаТаблицы.ТребуетсяАктуализацияХэша = Ложь;
	Если Результат <> Неопределено
		И ЗагрузитьХэшЭЛН(Результат.АдресРасшифрованногоОтветаSOAP, ИдентификаторСтроки) Тогда
		ТребуетсяПовторнаяОтправка = Истина;
	КонецЕсли;
	// Переход к следующему больничному.
	АктуализироватьХэшиЭЛНИПровестиДокумент();
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляПолученияЭЛН(ИдентификаторСтроки)
	БольничныйВВидеСтруктуры = БольничныйВВидеСтруктуры(Объект.ДанныеЭЛН.НайтиПоИдентификатору(ИдентификаторСтроки));
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляПолученияЭЛН(БольничныйВВидеСтруктуры);
КонецФункции

&НаСервере
Функция БольничныйВВидеСтруктуры(СтрокаТаблицы)
	БольничныйВВидеСтруктуры = Новый Структура("Организация, Дата, Сотрудник, НомерЛисткаНетрудоспособности");
	ЗаполнитьЗначенияСвойств(БольничныйВВидеСтруктуры, Объект, "Организация, Дата");
	ЗаполнитьЗначенияСвойств(БольничныйВВидеСтруктуры, СтрокаТаблицы, "Сотрудник, НомерЛисткаНетрудоспособности");
	Возврат БольничныйВВидеСтруктуры;
КонецФункции

&НаСервере
Функция ЗагрузитьХэшЭЛН(Знач АдресРасшифрованногоОтветаSOAP, ИдентификаторСтроки)
	// У строки документа снимается признак необходимости актуализации Хэша.
	СтрокаТаблицы = Объект.ДанныеЭЛН.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаТаблицы.ТребуетсяАктуализацияХэша = Ложь;
	
	// Хэш записывается в регистр сведений СведенияОбЭЛН.
	БольничныйВВидеСтруктуры = БольничныйВВидеСтруктуры(СтрокаТаблицы);
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		БольничныйВВидеСтруктуры,
		"getPrivateLNData",
		АдресРасшифрованногоОтветаSOAP,
		Ложь);
	
	Возврат Не РезультатОбмена.Отказ;
КонецФункции

#КонецОбласти

&НаСервере
Функция ВыгрузитьРеестрЭЛН(ПомещатьВФайл, СлужебныйФормат, ИсключатьПринятые)
	// Регистрационный номер ФСС организации (страхователя).
	Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		Текст = НСтр("ru = 'У организации не заполнен регистрационный номер ФСС'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "РегистрационныйНомерФСС", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыгрузки = ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляОтправкиРеестраЭЛН(
		Объект, ПомещатьВФайл, УникальныйИдентификатор, СлужебныйФормат, ИсключатьПринятые);
	
	ИмяБезРасширения = СтрШаблон("%1_%2_%3_%4",
		?(СлужебныйФормат, "ReestrLN", "prParseReestrFile"),
		Объект.РегистрационныйНомерФСС,
		Формат(Объект.Дата, "ДФ=yyyy-MM-dd"),
		СокрЛП(Объект.Номер));
	РезультатВыгрузки.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	
	Возврат РезультатВыгрузки;
КонецФункции

&НаСервере
Функция ЗагрузитьОтветСервисаФССВДанныеФормы(Знач АдресРасшифрованногоОтветаSOAP)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДатаПолученияОтветаФСС = ТекущаяДатаСеанса();
	
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		ДокументОбъект,
		"prParseReestrFile",
		АдресРасшифрованногоОтветаSOAP,
		Ложь);
	
	ДокументОбъект.СостояниеРеестра = ДокументОбъект.СостояниеДокументаИзСостоянийЭЛН();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Группа "ГруппаСоздатьЕщеОдинРеестр" рассчитывается на основании данных шапки.
	ОсталисьНеПринятыеЭЛН = Истина;
	
	ОбновитьВидимостьДоступность();
	
	Возврат РезультатОбмена;
КонецФункции

&НаСервере
Процедура СостояниеРеестраПриИзмененииНаСервере()
	СостояниеЭЛН = УчетПособийСоциальногоСтрахования.СостояниеЭЛНИзСостоянияРеестраЭЛН(Объект.СостояниеРеестра);
	Если СостояниеЭЛН <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из Объект.ДанныеЭЛН Цикл
			СтрокаТаблицы.Состояние = СостояниеЭЛН;
		КонецЦикла;
	КонецЕсли;
	ОбновитьВидимостьДоступность();
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	Если ЗначениеЗаполнено(Объект.ДатаПолученияОтветаФСС) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ДатаПолученияОтветаФСС.Видимость = Истина;
		РеестрПроведен = Истина;
	Иначе
		Элементы.ДатаПолученияОтветаФСС.Видимость = Ложь;
		РеестрПроведен = (Объект.Проведен И Не Объект.ПометкаУдаления);
	КонецЕсли; // Флажок ТолькоПросмотр не отключается, т.к. отправленный реестр не подлежит отзыву.
	
	РеестрПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ПринятФСС);
	РеестрНеПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС);
	РеестрЧастичноПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС);
	РеестрОтправлен = (РеестрПринят Или РеестрНеПринят Или РеестрЧастичноПринят);
	
	Элементы.Организация.ТолькоПросмотр             = РеестрОтправлен;
	Элементы.РегистрационныйНомерФСС.ТолькоПросмотр = РеестрОтправлен;
	Элементы.ШапкаКолонка2.ТолькоПросмотр           = РеестрОтправлен;
	Элементы.ГруппаОтветственныеЛица.ТолькоПросмотр = РеестрОтправлен;
	Если РеестрПринят Тогда
		Элементы.ДанныеЭЛН.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДанныеЭЛН.ТолькоПросмотр = Ложь;
		Элементы.ДанныеЭЛН.КоманднаяПанель.ТолькоПросмотр              = РеестрОтправлен;
		Элементы.ДанныеЭЛНСотрудник.ТолькоПросмотр                     = РеестрОтправлен;
		Элементы.ДанныеЭЛННомерЛисткаНетрудоспособности.ТолькоПросмотр = РеестрОтправлен;
		Элементы.ДанныеЭЛНЛистокНетрудоспособности.ТолькоПросмотр      = РеестрОтправлен;
		Элементы.ДанныеЭЛНСостояние.ТолькоПросмотр                     = РеестрПринят Или РеестрНеПринят;
		Элементы.ДанныеЭЛНКомментарийКСостоянию.ТолькоПросмотр         = РеестрПринят;
	КонецЕсли;
	Элементы.ДанныеЭЛНЗаполнить.Доступность            = Не РеестрОтправлен;
	Элементы.ДанныеЭЛНПодобратьЭЛН.Доступность         = Не РеестрОтправлен;
	Элементы.ДанныеЭЛНСтандартныеКоманды.Доступность   = Не РеестрОтправлен;
	Элементы.ДанныеЭЛНСостояние.Видимость              = РеестрОтправлен;
	Элементы.ДанныеЭЛНКомментарийКСостоянию.Видимость  = РеестрОтправлен;
	Элементы.СостояниеРеестра.ТолькоПросмотр           = Не РеестрПроведен И Не РеестрОтправлен;
	Элементы.ОтправитьВКонтролирующийОрган.Доступность = РеестрПроведен И Не РеестрОтправлен;
	Элементы.ПодменюВыгрузить.Доступность              = РеестрПроведен И Не РеестрОтправлен;
	Элементы.ФормаОбновитьВторичныеДанные.Видимость    = Не РеестрОтправлен;
	Элементы.ФормаОтменитьВсеИсправления.Видимость     = Не РеестрОтправлен;
	Элементы.ГруппаСоздатьЕщеОдинРеестр.Видимость      = ОсталисьНеПринятыеЭЛН И (РеестрЧастичноПринят Или РеестрНеПринят);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ОписаниеФайла = ВыгрузитьРеестрЭЛН(Истина, Ложь, Ложь);
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок      = НСтр("ru = 'Укажите файл'");
	Диалог.Фильтр         = НСтр("ru = 'Файлы XML (*.xml)|*.xml'");
	Диалог.ПолноеИмяФайла = ОписаниеФайла.ИмяБезРасширения;
	Диалог.МножественныйВыбор = Ложь;
	
	ОписаниеФайла.Вставить("ДиалогСохранения", Диалог);
	
	СохранитьФайлНаКлиенте(ОписаниеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлВСлужебномФорматеПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ОписаниеФайла = ВыгрузитьРеестрЭЛН(Истина, Истина, Ложь);
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок      = НСтр("ru = 'Укажите файл'");
	Диалог.Фильтр         = НСтр("ru = 'Файлы XML (*.xml)|*.xml'");
	Диалог.ПолноеИмяФайла = ОписаниеФайла.ИмяБезРасширения;
	Диалог.МножественныйВыбор = Ложь;
	
	ОписаниеФайла.Вставить("ДиалогСохранения", Диалог);
	
	СохранитьФайлНаКлиенте(ОписаниеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	РезультатВыгрузки = ВыгрузитьРеестрЭЛН(Ложь, Ложь, Ложь);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РезультатВыгрузки.ТекстXML);
	ТекстовыйДокумент.Показать(, РезультатВыгрузки.ИмяБезРасширения + ".xml");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами.

&НаКлиенте
Процедура СохранитьФайлНаКлиенте(ОписаниеФайла)
	ТекстСообщения = НСтр("ru = 'Для выгрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	Обработчик = Новый ОписаниеОповещения("СохранитьФайлНаКлиентеПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект, ОписаниеФайла);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Обработчик, ТекстСообщения, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаКлиентеПослеУстановкиРасширенияРаботыСФайлами(Подключено, ОписаниеФайла) Экспорт
	Если Подключено Тогда
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайла.ИмяБезРасширения, ОписаниеФайла.Адрес));
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаНеТребуется", ЭтотОбъект);
		НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ОписаниеФайла.ДиалогСохранения, Истина);
	Иначе
		ПолучитьФайл(ОписаниеФайла.Адрес, ОписаниеФайла.ИмяБезРасширения + ".xml");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаНеТребуется(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Возврат; // Обработка результата не требуется.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание табличной части ДанныеЭЛН.

&НаСервере
Процедура ДанныеЭЛНПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеСтроки = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("НомерСтроки", Результат.НомерСтроки));
	Результат.Удалить("НомерСтроки");
	Если ОтобранныеСтроки.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], Результат);
		ОбновитьВторичныеДанныеНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛистокНетрудоспособностиПриИзмененииНаСервере(ИдентификаторСтроки) Экспорт
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюСтрокиТаблицы(ЭтотОбъект, "ЛистокНетрудоспособности", ИдентификаторСтроки);
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение документа.

&НаСервере
Процедура ЗаполнитьТаблицуЭЛН()
	Если ОбъектЗафиксирован() Тогда
		Возврат;
	КонецЕсли;
	УжеДобавленныеЭЛН = Объект.ДанныеЭЛН.Выгрузить(, "НомерЛисткаНетрудоспособности").ВыгрузитьКолонку("НомерЛисткаНетрудоспособности");
	ЗапрашиваемоеКоличество = Макс(30 - УжеДобавленныеЭЛН.Количество(), 0) + 1;
	Если Объект.Проведен Тогда
		ПодготовленныйКОтправкеРеестр = Объект.Ссылка;
	Иначе
		ПодготовленныйКОтправкеРеестр = Неопределено;
	КонецЕсли;
	ТаблицаОснований = РегистрыСведений.СведенияОбЭЛН.ТаблицаОснованийДляРеестраЭЛН(Объект.Организация, ПодготовленныйКОтправкеРеестр, УжеДобавленныеЭЛН, ЗапрашиваемоеКоличество);
	Если ТаблицаОснований.Количество() = ЗапрашиваемоеКоличество Тогда
		ТаблицаОснований.Удалить(ЗапрашиваемоеКоличество-1);
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Истина;
	Иначе
		Элементы.ГруппаСоздатьСледующийРеестр.Видимость = Ложь;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		ЗаполнитьЗначенияСвойств(Объект.ДанныеЭЛН.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовСтрокиНаФорме()
	СписокРеквизитов = Новый СписокЗначений;
	
	СписокРеквизитов.Добавить("НомерЛисткаНетрудоспособности");
	СписокРеквизитов.Добавить("Сотрудник");
	СписокРеквизитов.Добавить("ВидЗанятости");
	СписокРеквизитов.Добавить("СНИЛС");
	СписокРеквизитов.Добавить("ИНН");
	СписокРеквизитов.Добавить("СтажЛет");
	СписокРеквизитов.Добавить("СтажМесяцев");
	СписокРеквизитов.Добавить("СтажРасширенныйЛет");
	СписокРеквизитов.Добавить("СтажРасширенныйМесяцев");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод1");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод2");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод3");
	СписокРеквизитов.Добавить("ДатаАктаН1");
	СписокРеквизитов.Добавить("ДатаНачалаРаботы");
	СписокРеквизитов.Добавить("ПриступитьКРаботеС");
	СписокРеквизитов.Добавить("ДатаНачалаОплаты");
	СписокРеквизитов.Добавить("ДатаОкончанияОплаты");
	СписокРеквизитов.Добавить("ДатаНачалаОплатыФСС");
	СписокРеквизитов.Добавить("ДатаОкончанияОплатыФСС");
	СписокРеквизитов.Добавить("БазаДляРасчетаСреднегоЗаработка");
	СписокРеквизитов.Добавить("СреднийДневнойЗаработок");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетРаботодателя");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетФСС");
	СписокРеквизитов.Добавить("ФинансированиеФедеральнымБюджетом");
	СписокРеквизитов.Добавить("Исправление");
	СписокРеквизитов.Добавить("КодПричиныИсправления");
	СписокРеквизитов.Добавить("ОписаниеПричиныИсправления");
	СписокРеквизитов.Добавить("ИдентификаторСтрокиФикс");
	
	Возврат СписокРеквизитов;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения

&НаСервере
Процедура ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения = Неопределено)
	Если Сообщения = Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю(Ложь);
	КонецЕсли;
	// В сообщениях есть следующие поля:
	//   ИдентификаторНазначения - Идентификатор формы, в которой необходимо вывести сообщение.
	//   КлючДанных - Ссылка объекта, который необходимо открыть для обработки сообщения.
	//   Поле - Путь от объекта к ошибочному полю.
	//   ПутьКДанным - Путь от формы к объекту.
	//   Текст - Текст сообщения.
	// Как правило, на сервере заполняются только "Поле" и "Текст".
	// Задача процедуры в том, чтобы заполнить "ПутьКДанным" и адаптировать "Поле" к специфике формы.
	
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация к специфике редактирования данных в форме.
		НачалоСкобки = СтрНайти(Сообщение.Поле, "[");
		Если НачалоСкобки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОкончаниеСкобки = СтрНайти(Сообщение.Поле, "].");
		Если НачалоСкобки > ОкончаниеСкобки Тогда
			Продолжить;
		КонецЕсли;
		ИмяТаблицы   = Лев(Сообщение.Поле, НачалоСкобки - 1);
		ИндексСтроки = Сред(Сообщение.Поле, НачалоСкобки + 1, ОкончаниеСкобки - НачалоСкобки - 1);
		ИмяРеквизита = Сред(Сообщение.Поле, ОкончаниеСкобки + 2);
		Если ИмяТаблицы = "ДанныеЭЛН"
			И ИмяРеквизита <> "ЛистокНетрудоспособности"
			И ИмяРеквизита <> "НомерЛисткаНетрудоспособности"
			И ИмяРеквизита <> "Сотрудник" Тогда
			Сообщение.Поле = ИмяТаблицы + "[" + ИндексСтроки + "].НомерЛисткаНетрудоспособности";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИПроверитьПоРегламентуФСС(ОбработчикЗавершения, РежимЗаписи)
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеПоРегламентуФСС();
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПроверитьПослеОтветаНаВопрос", ЭтотОбъект, ОбработчикЗавершения);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В документе обнаружены ошибки (%1).
				|Продолжить (не рекомендуется)?'"),
			РезультатПроверки.КоличествоОшибок);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru = 'Предупреждение'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПоРегламентуФСС()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Успех = ДокументОбъект.ПроверитьЗаполнениеПоРегламентуФСС();
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения);
	Возврат Новый Структура("Успех, КоличествоОшибок", Успех, Сообщения.Количество());
КонецФункции

&НаКлиенте
Процедура ПроверитьПослеОтветаНаВопрос(Ответ, ОбработчикЗавершения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с другими подсистемами.

#Область КлючевыеРеквизитыЗаполненияФормы

// ЗарплатаКадрыПодсистемы
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	// Возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
	Массив = Новый Массив;
	Массив.Добавить("Объект.ДанныеЭЛН");
	Возврат Массив
КонецФункции

&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	// Возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации'")));
	Возврат Массив
КонецФункции
// Конец ЗарплатаКадрыПодсистемы

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Свойства

#КонецОбласти

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	Если Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("Руководитель") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Руководитель");
	ИначеЕсли Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("ГлавныйБухгалтер") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ГлавныйБухгалтер");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#Область МеханизмФиксацииИзменений

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере(ФиксироватьОтличия = Ложь)
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		ОбновитьВидимостьДоступность();
		Возврат;
	КонецЕсли;
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	ПараметрыФиксации.ФиксироватьОтличия = ФиксироватьОтличия;
	ДокументИзменен = ДокументОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
	ПараметрыФиксации.ФиксироватьОтличия = Ложь;
	
	Если ДокументИзменен Тогда
		Если Не ДокументОбъект.ЭтоНовый() Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	ОбновитьВидимостьДоступность();
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксацииВторичныхДанных) Экспорт
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	ОписаниеЭлементаФормы.ПрефиксПутиТекущиеДанные = "Элементы.ДанныеЭЛН.ТекущиеДанные";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
	КонецЦикла;
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	Возврат ОписаниеФормы;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		ИначеЕсли Элементы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Ключ, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияОбновитьФиксациюВФорме()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	ОписанияТЧ = Форма["ПараметрыФиксацииВторичныхДанных"]["ОписанияТЧ"];
	Для каждого ОписаниеТЧ Из ОписанияТЧ Цикл
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыФиксТЧ(Форма.Объект[ОписаниеТЧ.Ключ]);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	ИдентификаторСтроки = Элементы.ДанныеЭЛН.ТекущаяСтрока;
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов, ИдентификаторСтроки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
