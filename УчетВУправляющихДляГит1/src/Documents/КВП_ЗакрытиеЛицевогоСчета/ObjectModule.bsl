
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет наличие ранее введенного документа "Закрытие лицевого счета".
//
// Параметры
//  нет
//
Процедура ПроверитьЗакрытиеЛС(Отказ, Заголовок)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрытиеЛицевогоСчета.Дата КАК ДатаДокумента,
	|	КВП_ЗакрытиеЛицевогоСчета.Номер КАК НомерДокумента
	|ИЗ
	|	Документ.КВП_ЗакрытиеЛицевогоСчета КАК КВП_ЗакрытиеЛицевогоСчета
	|ГДЕ
	|	КВП_ЗакрытиеЛицевогоСчета.ЛицевойСчет = &ЛицевойСчет
	|	И КВП_ЗакрытиеЛицевогоСчета.Проведен
	|	И (НЕ КВП_ЗакрытиеЛицевогоСчета.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстСообщения = "Лицевой счет " + ЛицевойСчет.Наименование + " уже закрыт ранее" 
			+ " документом ""Закрытие лицевого счета"" №" + Выборка.НомерДокумента + " от " + Выборка.ДатаДокумента + ".";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗакрытиеЛС()

// Формирует движения по регистрам.
Процедура ДвижениеПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДвижениеПоРегиструЛицевыеСчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоРегиструКВП_УчетКоличестваЖильцовПоЛицевымСчетам(СтруктураШапкиДокумента, Отказ);
	ДвижениеПоРегиструЗакрепленныеСчетчики(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвижениеПоРегиструНазначенныеНачисления(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвижениеПоРегиструНазначенныеЛьготы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвижениеПоРегиструСведенияОПроживающих(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвижениеПоРегиструУПЖКХ_СведенияОПроживающих(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвижениеПоРегиструУПЖКХ_СведенияОЗарегистрированных(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// При необходимости обнуляем начисления, а также начисления для отражения в регл. учете.
	Если ОбнулитьНачисления Тогда
		ДвижениеПоРегиструВзаиморасчетыПоЛицевымСчетам(СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроизвестиДвижениеОтраженийВРеглУчете(СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Аннулирование сведений о собственности на помещение и его собственниках
	// из текущего документа производим только в том случае, если установлен упрощенный учет собственников.
	// При полном учете собственников редактирование сведений о собственности на помещение и его собственниках
	// производим только при помощи документа "Установка собственников помещений".
	Если Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Получить() И АннулироватьДанныеОСобственности Тогда
		ОтсутствуютСведенияОСобственниках = ДвижениеПоРегиструУПЖКХ_СобственникиПомещений(СтруктураШапкиДокумента);
		ОтсутствуютСведенияОСобственности = ДвижениеПоРегиструУПЖКХ_СобственностьНаПомещения(СтруктураШапкиДокумента);
		
		Если ОтсутствуютСведенияОСобственниках И ОтсутствуютСведенияОСобственности Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружены действующие сведения о собственности на помещение и её собственниках!",, Заголовок, СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбнулитьДолюЛицевогоСчета();
	
КонецПроцедуры

// Формирует движения по регистру "ЛицевыеСчета".
Процедура ДвижениеПоРегиструЛицевыеСчета(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Движение = Движения.КВП_ЛицевыеСчета.Добавить();
	Движение.Период      = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
	Движение.Объект      = СтруктураШапкиДокумента.ЛицевойСчет.Адрес;
	Движение.ЛицевойСчет = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.Действует   = Ложь;
	
КонецПроцедуры  //ДвижениеПоРегиструЛицевыеСчета()

// Формирует движения по регистру "ЛицевыеСчета".
Процедура ДвиженияПоРегиструКВП_УчетКоличестваЖильцовПоЛицевымСчетам(СтруктураШапкиДокумента, Отказ)
	
	Движение = Движения.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Добавить();
	Движение.Период                       = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
	Движение.ЛицевойСчет                  = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.КоличествоПроживающих        = 0;
	Движение.КоличествоЗарегистрированных = 0;
	
КонецПроцедуры  //ДвижениеПоРегиструЛицевыеСчета()

// Формирует движения по регистру "Закрепленные счетчики".
Процедура ДвижениеПоРегиструЗакрепленныеСчетчики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборДвижений = Движения.КВП_ЗакрепленныеСчетчики;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения > &Дата
	|	И КВП_ЗакрепленныеСчетчики.Объект = &ЛицевойСчет
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			,
	|			Объект = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("ЛицевойСчет",  СтруктураШапкиДокумента.ЛицевойСчет);
	Запрос.УстановитьПараметр("Дата",         СтруктураШапкиДокумента.Дата);
	
	ВыборкаПУ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПУ.Следующий() Цикл
		Движение = НаборДвижений.Добавить();
		Движение.Период            = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.ДатаИзменения     = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Регистратор       = СтруктураШапкиДокумента.Ссылка;
		Движение.Объект            = СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.Счетчик           = ВыборкаПУ.Счетчик;
		Движение.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.ЗакрытиеЛицевогоСчета;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистру "Назначенные начисления".
Процедура ДвижениеПоРегиструНазначенныеНачисления(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборДвижений = Движения.КВП_НазначенныеНачисления;
	
	// отменим назначение услуг, действующих на дату документа
	Запрос = Новый Запрос;
	
	ДополнитьЗапросНазначеннымиУслугами(Запрос, СтруктураШапкиДокумента.Дата, ,СтруктураШапкиДокумента.ЛицевойСчет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НазначенныеНачисленияСрезПоследних.Услуга,
	|	НазначенныеНачисленияСрезПоследних.Организация
	|ИЗ
	|	врТаблицаДействующихУслуг КАК НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	НазначенныеНачисленияСрезПоследних.Действует";
	
	ВыборкаУслуг = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУслуг.Следующий() Цикл
		Движение = НаборДвижений.Добавить();
		Движение.Период        = СтруктураШапкиДокумента.Дата;
		Движение.Объект        = СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.Услуга        = ВыборкаУслуг.Услуга;
		Движение.Организация   = ВыборкаУслуг.Организация;
		Движение.Действует     = Ложь;
		Движение.ДатаИзменения = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
	КонецЦикла;
	
	// отменим назначение услуг, действующих после даты документа
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос.УстановитьПараметр("Объект", СтруктураШапкиДокумента.ЛицевойСчет);
	Запрос.УстановитьПараметр("Дата",   СтруктураШапкиДокумента.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.ДатаИзменения КАК Период,
	|	КВП_НазначенныеНачисления.Услуга КАК Услуга,
	|	КВП_НазначенныеНачисления.Организация
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период > &Дата
	|	И КВП_НазначенныеНачисления.Объект = &Объект
	|	И КВП_НазначенныеНачисления.Действует
	|ИТОГИ ПО
	|	Услуга";
	
	ВыборкаУслуг = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУслуг.Следующий() Цикл
		
		ТекущийПериод = СтруктураШапкиДокумента.Дата;
		
		Выборка = ВыборкаУслуг.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийПериод = ТекущийПериод + 1;
			
			Движение = НаборДвижений.Добавить();
			Движение.Период        = ТекущийПериод;
			Движение.Объект        = СтруктураШапкиДокумента.ЛицевойСчет;
			Движение.Услуга        = ВыборкаУслуг.Услуга;
			Движение.Организация   = Выборка.Организация;
			Движение.Действует     = Ложь;
			Движение.ДатаИзменения = Выборка.Период;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистру "Назначенные льготы".
Процедура ДвижениеПоРегиструНазначенныеЛьготы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборДвижений = Движения.КВП_НазначенныеЛьготы;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЛицевойСчет",  СтруктураШапкиДокумента.ЛицевойСчет);
	Запрос.УстановитьПараметр("Дата",         СтруктураШапкиДокумента.Дата);
	
	// Отменим назначение льгот, действующих на дату закрытия л/с.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НазначенныеЛьготы.Проживающий,
	|	НазначенныеЛьготы.ЛьготнаяКатегория,
	|	НазначенныеЛьготы.ВидДокумента,
	|	НазначенныеЛьготы.СерияДокумента,
	|	НазначенныеЛьготы.НомерДокумента,
	|	НазначенныеЛьготы.ДатаВыдачиДокумента,
	|	НазначенныеЛьготы.КемВыдан
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий.Владелец = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК НазначенныеЛьготы
	|ГДЕ
	|	НазначенныеЛьготы.Действие";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период        = НачалоДня(СтруктураШапкиДокумента.Дата);
		Движение.Регистратор   = СтруктураШапкиДокумента.Ссылка;
		Движение.ДатаИзменения = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Действие      = Ложь;
	КонецЦикла;
	
	// Отмену назначение льгот, действующих после даты закрытия л/с не выполняем.
	
КонецПроцедуры  // ДвижениеПоРегиструНазначенныеЛьготы()

// Формирует движения по регистру "СведенияОПроживающих".
Процедура ДвижениеПоРегиструСведенияОПроживающих(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЖильцах.Объект КАК Проживающий
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК СведенияОЖильцах
	|ГДЕ
	|	(СведенияОЖильцах.ВладелецЕдинственногоЖилья = ИСТИНА
	|			ИЛИ СведенияОЖильцах.ДополнительнаяПлощадь > 0)";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет", СтруктураШапкиДокумента.ЛицевойСчет);
	Запрос.УстановитьПараметр("ПустаяДата",  Дата(1, 1, 1));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.КВП_СведенияОЖильцах.Добавить();
		Движение.Период      = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Объект      = Выборка.Проживающий;
		Движение.ЛицевойСчет = СтруктураШапкиДокумента.ЛицевойСчет;
	КонецЦикла;
	
КонецПроцедуры  //ДвижениеПоРегиструСведенияОПроживающих()

// Формирует движения по регистру "Взаиморасчеты по лицевым счетам".
Процедура ДвижениеПоРегиструВзаиморасчетыПоЛицевымСчетам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Взаиморасчеты по лицевым счетам
	НаборДвиженийВзаиморасчеты  = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам;
	// Начисления
	НаборДвиженийНачисления     = Движения.УПЖКХ_Начисления;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоЛС.Организация,
	|	ВзаиморасчетыПоЛС.ЛицевойСчет,
	|	ВзаиморасчетыПоЛС.Договор,
	|	ВзаиморасчетыПоЛС.Услуга,
	|	ВзаиморасчетыПоЛС.ВидНачисления,
	|	ВзаиморасчетыПоЛС.МесяцНачисления,
	|	ВзаиморасчетыПоЛС.СуммаНачисленияОстаток КАК СуммаНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК ВзаиморасчетыПоЛС";
	
	Запрос.УстановитьПараметр("ЛицевойСчет",  СтруктураШапкиДокумента.ЛицевойСчет);
	Запрос.УстановитьПараметр("Дата",         СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Взаиморасчеты
		ДвижениеВзаиморасчеты = НаборДвиженийВзаиморасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеВзаиморасчеты, Выборка);
		ДвижениеВзаиморасчеты.ВидДвижения = ВидДвиженияНакопления.Расход;
		ДвижениеВзаиморасчеты.Период      = СтруктураШапкиДокумента.Дата;
		ДвижениеВзаиморасчеты.Регистратор = СтруктураШапкиДокумента.Ссылка;
		
		// определим вид начисления и раздел учета
		Знак = -1;
		Если Выборка.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
			ВидДвижениеНачислений     = Перечисления.УПЖКХ_ВидыНачислений.Корректировка;
			РазделУчета               = Перечисления.УПЖКХ_РазделыУчета.Пени;
		Иначе
			ВидДвижениеНачислений     = Перечисления.УПЖКХ_ВидыНачислений.Корректировка;
			РазделУчета               = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		КонецЕсли;
		
		// Начисления
		ДвижениеНачислений = НаборДвиженийНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеНачислений, Выборка);
		ДвижениеНачислений.РазделУчета     = РазделУчета;
		ДвижениеНачислений.ВидНачисления   = ВидДвижениеНачислений;
		ДвижениеНачислений.СуммаНачисления = Знак * ДвижениеНачислений.СуммаНачисления;
		ДвижениеНачислений.Период          = СтруктураШапкиДокумента.Дата;
		ДвижениеНачислений.Регистратор     = СтруктураШапкиДокумента.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструВзаиморасчетыПоЛицевымСчетам()

// Процедура выполняет движения по отражению начислений в регл. учете.
//
Процедура ПроизвестиДвижениеОтраженийВРеглУчете(СтруктураШапкиДокумента)
	
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(ЭтотОбъект.Дата) Тогда
		// Если используется новый механизм отражения начислений,
		// то формируем движения в новом регистре остатков.
		ДвижениеПоРегиструДанныеДляОтраженияНачисленийВРеглУчете(СтруктураШапкиДокумента);
	Иначе
		// Если используется старый механизм отражения, то отражение начислений производим по-старому.
		ДвижениеПоРегиструНачислениеДляОтраженияВРеглУчете(СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру накопления "УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете".
Процедура ДвижениеПоРегиструДанныеДляОтраженияНачисленийВРеглУчете(СтруктураШапкиДокумента)
	
	// Данные для отражения начислений в регл. учете.
	НаборДвижений = Движения.УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете;
	
	// ОСОБЕННОСТЬ:
	// Любые изменения задолженности по л/с в разрезе месяцев начисления отражаем
	// в регл.учете как корректировку тех периодов, за которые изменяется задолженность.
	// Не смотрим остатки по самому регистру данных для отражения как в старом алгоритме.
	
	// Движения по отражению начислений сформируем на основании данных в регистре "КВП_ВзаиморасчетыПоЛицевымСчетам".
	ТаблицаНачислений = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Выгрузить();
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		
		ДвижениеВзаиморасчеты = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеВзаиморасчеты, СтрокаНачисления);
		
		// Принудительное заполнение полей движения.
		ДвижениеВзаиморасчеты.ВидДвижения        = ВидДвиженияНакопления.Приход;
		ДвижениеВзаиморасчеты.Период             = СтруктураШапкиДокумента.Дата;
		ДвижениеВзаиморасчеты.Регистратор        = СтруктураШапкиДокумента.Ссылка;
		
		// В качестве месяца отражения берем период, в котором произведено начисление.
		ДвижениеВзаиморасчеты.МесяцОтражения     = НачалоМесяца(ДвижениеВзаиморасчеты.Период);
		
		ДвижениеВзаиморасчеты.ЭтоКорректировка   = Истина;
		ДвижениеВзаиморасчеты.ВидКорректировки   = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.Перерасчет;
		// В качестве периода корректировки берем месяц, за который 
		// произведена корректировка начисления в текущем месяце отражения.
		ДвижениеВзаиморасчеты.ПериодКорректировки = НачалоМесяца(СтрокаНачисления.МесяцНачисления);
		
		Если СтрокаНачисления.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
			ДвижениеВзаиморасчеты.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени;
		Иначе
			ДвижениеВзаиморасчеты.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		КонецЕсли;
		
		// Заполнение суммы к отражению.
		Знак = -1;
		ДвижениеВзаиморасчеты.Сумма = Знак * СтрокаНачисления.СуммаНачисления;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструДанныеДляОтраженияНачисленийВРеглУчете()

// Формирует движения по регистру "Начисление для отражения в регл учете".
Процедура ДвижениеПоРегиструНачислениеДляОтраженияВРеглУчете(СтруктураШапкиДокумента)
	
	// Начисление для отражения в регл учете.
	НаборДвижений = Движения.КВП_НачислениеДляОтраженияВРеглУчете;
	
	// Для обнуления остатков начислений для отражения в регл. учете получаем
	// сведения для взаиморасчетов по текущему лицевому счету, а уже по ним
	// остатки начисления для отражения в регл. учете, так как данные
	// о начислениях в регл. учете хранятся только в разрезе организаций
	// и договоров взаиморасчетов с лицевым счетом.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
	|ПОМЕСТИТЬ врСведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Период, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Организация,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
	|			&Период,
	|			(Организация, ДоговорКонтрагента) В
	|				(ВЫБРАТЬ
	|					врСведенияДляВзаиморасчетов.Организация,
	|					врСведенияДляВзаиморасчетов.Договор
	|				ИЗ
	|					врСведенияДляВзаиморасчетов КАК врСведенияДляВзаиморасчетов)) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки";
	
	Запрос.УстановитьПараметр("Период",      СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние);
	Запрос.УстановитьПараметр("ЛицевойСчет", СтруктураШапкиДокумента.ЛицевойСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Добавление новой записи в движения.
		ДвижениеВзаиморасчеты = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеВзаиморасчеты, Выборка);
		
		// Принудительное заполнение полей движения.
		ДвижениеВзаиморасчеты.ВидДвижения = ВидДвиженияНакопления.Расход;
		ДвижениеВзаиморасчеты.Период      = СтруктураШапкиДокумента.Дата;
		ДвижениеВзаиморасчеты.Регистратор = СтруктураШапкиДокумента.Ссылка;
		
		// Заполнение суммы нужно произвести принудительно, так как имена полей отличаются.
		ДвижениеВзаиморасчеты.Сумма = Выборка.СуммаОстаток;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеДляОтраженияВРеглУчете()

// Формирует движения по регистру "УПЖКХ_СведенияОПроживающих".
Процедура ДвижениеПоРегиструУПЖКХ_СведенияОПроживающих(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОПроживающихСрезПоследних.Жилец КАК Проживающий
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	СведенияОПроживающихСрезПоследних.Проживает
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающих.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.ДатаИзменения > &Дата
	|	И УПЖКХ_СведенияОПроживающих.ЛицевойСчет = &ЛицевойСчет
	|	И УПЖКХ_СведенияОПроживающих.Проживает";
	
	Запрос.УстановитьПараметр("Дата",        СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", СтруктураШапкиДокумента.ЛицевойСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.УПЖКХ_СведенияОПроживающих.Добавить();
		Движение.Период        = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Жилец         = Выборка.Проживающий;
		Движение.ЛицевойСчет   = СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.ДатаИзменения = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние
	КонецЦикла;
	
КонецПроцедуры  //ДвижениеПоРегиструУПЖКХ_СведенияОПроживающих()

// Формирует движения по регистру "УПЖКХ_СведенияОЗарегистрированных".
Процедура ДвижениеПоРегиструУПЖКХ_СведенияОЗарегистрированных(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЗарегистрированных.Жилец КАК Проживающий
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛС
	|				И ДатаИзменения <= &Дата) КАК СведенияОЗарегистрированных
	|ГДЕ
	|	СведенияОЗарегистрированных.Зарегистрирован
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения > &Дата
	|	И УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет = &ЛС
	|	И УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован";
	
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ЛС",   СтруктураШапкиДокумента.ЛицевойСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
		Движение.Период        = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Жилец         = Выборка.Проживающий;
		Движение.ЛицевойСчет   = СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.ДатаИзменения = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
	КонецЦикла;
	
КонецПроцедуры  //ДвижениеПоРегиструУПЖКХ_СведенияОЗарегистрированных()

// Формирует движения по регистру "УПЖКХ_СобственникиПомещений" (для аннулирования собвственности).
Функция ДвижениеПоРегиструУПЖКХ_СобственникиПомещений(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",      СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Помещение", СтруктураШапкиДокумента.ЛицевойСчет.Адрес);
	
	ВыборкаСобственников = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаСобственников.Количество() = 0 Тогда
		// Если ничего не найдено, то возвращаем Истина
		Возврат Истина;
	Иначе
		Пока ВыборкаСобственников.Следующий() Цикл
			Движение = Движения.УПЖКХ_СобственникиПомещений.Добавить();
			Движение.Период                           = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
			Движение.Помещение                        = ВыборкаСобственников.Помещение;
			Движение.Собственник                      = ВыборкаСобственников.Собственник;
			Движение.ДоляСобственникаЧислитель        = ВыборкаСобственников.ДоляСобственникаЧислитель;
			Движение.ДоляСобственникаЗнаменатель      = ВыборкаСобственников.ДоляСобственникаЗнаменатель;
			Движение.ОснованиеПолученияВСобственность = ВыборкаСобственников.ОснованиеПолученияВСобственность;
			Движение.ВидДокумента                     = ВыборкаСобственников.ВидДокумента;
			Движение.НомерДокумента                   = ВыборкаСобственников.НомерДокумента;
			Движение.ДатаДокумента                    = ВыборкаСобственников.ДатаДокумента;
			Движение.Действует                        = Ложь;
		КонецЦикла;
		
		// Если обнуляем, то Ложь
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ДвижениеПоРегиструУПЖКХ_СобственникиПомещений()

// Формирует движения по регистру "УПЖКХ_СобственностьНаПомещения" (для аннулирования собвственности).
Функция ДвижениеПоРегиструУПЖКХ_СобственностьНаПомещения(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Период,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",      СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Помещение", СтруктураШапкиДокумента.ЛицевойСчет.Адрес);
	
	СведенияОСобственности = Запрос.Выполнить().Выбрать();
	
	Если СведенияОСобственности.Количество() = 0 Тогда
		// Если ничего не найдено, то возвращаем Истина
		Возврат Истина;
	Иначе
		СведенияОСобственности.Следующий();
		
		Движение = Движения.УПЖКХ_СобственностьНаПомещения.Добавить();
		Движение.Период                     = СтруктураШапкиДокумента.ДатаПереходаВНовоеСостояние;
		Движение.Помещение                  = СведенияОСобственности.Помещение;
		Движение.ВидСобственности           = СведенияОСобственности.ВидСобственности;
		Движение.ПодвидЧастнойСобственности = СведенияОСобственности.ПодвидЧастнойСобственности;
		Движение.Действует = Ложь;
		
		// Если обнуляем, то Ложь
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ДвижениеПоРегиструУПЖКХ_СобственностьНаПомещения()

// Процедура обнуляет долю лицевого счета.
Процедура ОбнулитьДолюЛицевогоСчета()
	
	ОчиститьДвиженияВРегистреРазмерыДолейЛС();
	
	ДвиженияПоРегиструРазмерыДолейЛС();
	
КонецПроцедуры // ОбнулитьДолюЛицевогоСчета()

// Удаляет запись в РС "Размеры долей лицевых счетов" по регистратору.
//
Процедура ОчиститьДвиженияВРегистреРазмерыДолейЛС()
	
	НаборЗаписей = РегистрыСведений.КВП_РазмерыДолейЛицевыхСчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЛицевойСчет.Адрес);
	НаборЗаписей.Отбор.ЛицевойСчет.Установить(ЛицевойСчет);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		
		Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл;
		
			Если СтрокаЗаписи.ДокументРегистратор = Ссылка Тогда
				НаборЗаписей.Удалить(СтрокаЗаписи);
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДвиженияВРегистреРазмерыДолейЛС()

// Создает запись в РС "Размеры долей лицевых счетов".
//
Процедура ДвиженияПоРегиструРазмерыДолейЛС()
	
	НаборЗаписей = РегистрыСведений.КВП_РазмерыДолейЛицевыхСчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(КонецДня(Дата) + 1);
	НаборЗаписей.Отбор.Объект.Установить(ЛицевойСчет.Адрес);
	НаборЗаписей.Отбор.ЛицевойСчет.Установить(ЛицевойСчет);
	
	СтрокаДвижения = НаборЗаписей.Добавить();
	СтрокаДвижения.Период          = КонецДня(Дата) + 1;
	СтрокаДвижения.Объект          = ЛицевойСчет.Адрес;
	СтрокаДвижения.ЛицевойСчет     = ЛицевойСчет;
	СтрокаДвижения.ДоляЧислитель   = 0;
	СтрокаДвижения.ДоляЗнаменатель = 0;
	СтрокаДвижения.ДокументРегистратор = Ссылка;
	НаборЗаписей.Записать();
	
КонецПроцедуры // ДвиженияПоРегиструРазмерыДолейЛС()

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Выполняется при вводе на основании. 
// Заполняем реквизиты документа исходя из ДокументаОснования.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ЛицевойСчет = ДанныеЗаполнения;
	КонецЕсли;

КонецПроцедуры  //ОбработкаЗаполнения()

// Процедура проведения документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПараметрыПроведения = Документы.КВП_ЗакрытиеЛицевогоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	// Проверим наличие ранее введенного документа "Закрытие лицевого счета".
	ПроверитьЗакрытиеЛС(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвижениеПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаУдаленияПроведения" документа.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОчиститьДвиженияВРегистреРазмерыДолейЛС();
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
