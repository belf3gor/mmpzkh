#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет заполнение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокументСписания", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПредыдущиеСписания.*
	|ПОМЕСТИТЬ ВТ_ПредыдущиеСписания
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		ДокСписание.Номенклатура,
	|		ДокСписание.СчетУчета,
	|		ДокСписание.Ссылка.Склад КАК Склад,
	|		ДокСписание.Количество   КАК Количество,
	|		ДокСписание.Цена
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК ДокСписание
	|	ГДЕ
	|		ДокСписание.Ссылка <> &ТекущийДокументСписания
	|		И ДокСписание.Ссылка.Проведен
	|		И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокОтчетККМ.Номенклатура,
	|		ДокОтчетККМ.СчетУчета,
	|		ДокОтчетККМ.Ссылка.Склад КАК Склад,
	|		ДокОтчетККМ.Количество   КАК Количество,
	|		ДокОтчетККМ.Цена
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|	ГДЕ
	|		ДокОтчетККМ.Ссылка.Проведен
	|		И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|) КАК ПредыдущиеСписания
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.Ссылка.Склад             КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ПредыдущиеСписания.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВТ_ПредыдущиеСписания.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТ_ПредыдущиеСписания
	|	ПО
	|		Док.Номенклатура   = ВТ_ПредыдущиеСписания.Номенклатура
	|		И Док.СчетУчета    = ВТ_ПредыдущиеСписания.СчетУчета
	|		И Док.Ссылка.Склад = ВТ_ПредыдущиеСписания.Склад
	|		И #УсловиеПоЦене#
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|";
	
	Склад		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	Если ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПоЦене#", "Док.Цена = ВТ_ПредыдущиеСписания.Цена");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПоЦене#", "ИСТИНА");
	КонецЕсли;
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
		
	СтрокиДляЗаполненияСчетовУчета = Новый Массив;
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		КоличествоСписать = СтрокаТовара.КоличествоОтклонение - СтрокаТовара.КоличествоСписанное;
		
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокиДляЗаполненияСчетовУчета.Добавить(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.Номенклатура	= СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.Количество		= КоличествоСписать;
		СтрокаТабличнойЧасти.СчетУчета		= СтрокаТовара.СчетУчета;
		СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.НеПринимаются;
		
		Если ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТовара.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетовУчета, "Товары", ЭтотОбъект, Документы.СписаниеТоваров);
	
	Если Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%1 № %2"" отсутствуют товары фактическое количество которых превышает учетное.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			ДокументОснование.Метаданные().Представление(), ДокументОснование.Номер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИнвентаризацияТоваровНаСкладе", "Объект");
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет документ на основании другого документа
//
// Параметры:
//  ДанныеЗаполнения - ДокументСсылка
//
Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		ИнвентаризацияТоваровНаСкладе = ДанныеЗаполнения;
		ЗаполнитьТоварыПоИнвентаризацииТоваров(ДанныеЗаполнения);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Товары.Количество() > 0 Тогда
		МассивТовары = Новый Массив(Товары.Количество());
		
		Товары.ЗагрузитьКолонку(МассивТовары, "Себестоимость");
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
		Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
			Товары.ЗагрузитьКолонку(МассивТовары, "КиЗ_ГИСМ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад И УчетВПродажныхЦенах Тогда
		РозницаВПродажныхЦенах = Истина;
	Иначе
		РозницаВПродажныхЦенах = Ложь;
	КонецЕсли;

	НТТ = (РозницаВПродажныхЦенах И ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = (РозницаВПродажныхЦенах И ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);

	ОрганизацияПрименяетУСН    = Ложь;
	ОрганизацияПредприниматель = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);

	ОтражатьВНалоговомУчетеУСН       = Ложь;
	ОтражатьВНалоговомУчетеУСНДоходы = Ложь;

	Если АТТ Тогда
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    Дата);
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("Подразделение",   ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = &Счет,
		|			&ПорядокСубконто,
		|			Организация = &Организация
		|				И (Подразделение = &Подразделение
		|					ИЛИ Подразделение ЕСТЬ NULL )
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 = &Склад) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1";

		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");
	КонецЕсли;

	// Проверка заполнения табличной части "Товары"
	Если РозницаВПродажныхЦенах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчета");
	КонецЕсли;
	
	Если НЕ НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'"); 

		// Проверка на наличие услуг в таблице.
		Если НЕ НТТ И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Услуга") Тогда
			ТекстСообщения = НСтр("ru = 'Указана номенклатура, являющаяся услугой.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Номенклатура";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если АТТ Тогда
			УчетнаяЦена   		= 0;
			РозничнаяЦена 		= 0;
			СуммаОстаток  		= 0;
			КоличествоОстаток 	= 0;

			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыЦен <> Неопределено Тогда
				Если СтрокаТаблицыЦен.КоличествоОстаток <> 0 Тогда
					УчетнаяЦена = Окр(СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток, 2, 1);
					СуммаОстаток = СтрокаТаблицыЦен.СуммаОстаток;
					КоличествоОстаток = СтрокаТаблицыЦен.КоличествоОстаток;
				КонецЕсли;
			КонецЕсли;
			РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли"),
				Дата, ВалютаРегламентированногоУчета, 1, 1);

			РезультатПереоценки = Окр(КоличествоОстаток * РозничнаяЦена, 2, 1) - СуммаОстаток;
			РазницаЦен = УчетнаяЦена - РозничнаяЦена;
				
			ТребуетсяПереоценка = (РезультатПереоценки > 0.01 ИЛИ РезультатПереоценки < -0.01)
					И (РазницаЦен > 0.01 ИЛИ РазницаЦен < -0.01);

			Если РозничнаяЦена = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не установлена розничная цена.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			ИначеЕсли УчетнаяЦена <> 0 И
					ТребуетсяПереоценка Тогда
				ТекстСообщения = НСтр("ru = 'Розничная цена (%1) не равна учетной цене (%2).
										|Измените розничную цену или проведите переоценку.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РозничнаяЦена, УчетнаяЦена);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Проверка заполнения табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());

	// Почистим неиспользуемые реквизиты.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ФИФО
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		И Товары.Количество() > 0 Тогда
		
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "ДокументОприходования");
		
	КонецЕсли; 
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.СписаниеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	ТаблицаСписанияТорговойНаценкиАТТ = УчетТоваров.ПодготовитьТаблицуСписанияТорговойНаценкиАТТ(
		ТаблицаСписанныеТовары,ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты);
	
	// Таблица списанных товаров НТТ
	ТаблицаСписанныеТоварыНТТ = УчетТоваров.ПодготовитьТаблицуСписанныеТоварыНТТ(ПараметрыПроведения.СписаниеТоваровНТТТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Отказ);
	
	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТарыТаблицаТовары,
		ПараметрыПроведения.СписаниеТарыРеквизиты, Отказ);

	// Таблица по списанным товарам комитентов
	ТаблицаТоварыКомитентов = УчетДоходовРасходов.ПодготовитьТаблицуСписанныхТоваровКомитентов(ТаблицаСписанныеТовары,
		ПараметрыПроведения.ВыручкаПоТоварамКомитентовРеквизиты, Отказ);

	// Дополнение таблиц содержанием проводки
	Документы.СписаниеТоваров.ДобавитьКолонкуСодержание(ТаблицаСписанныеТовары, Ссылка);
	Документы.СписаниеТоваров.ДобавитьКолонкуСодержание(ТаблицаСписанныеТоварыНТТ, Ссылка);
	Документы.СписаниеТоваров.ДобавитьКолонкуСодержание(ТаблицаСписаннаяТара, Ссылка);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
	
	// Учет доходов и расходов ИП
	ТаблицыМатериаловПродукцииИП = Документы.СписаниеТоваров.ПодготовитьТаблицыМатериаловПродукцииИП(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыМатериаловПродукцииИП.ТаблицаМатериалов, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	ТаблицаПоступлениеПродукцииТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
		ТаблицыМатериаловПродукцииИП.ПолученоПродукции,
		ПараметрыПроведения.СписаниеТоваровРеквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписаннаяТара,
		ПараметрыПроведения.СписаниеТарыРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияСписаниеТоваровКомитентовВыручка(ТаблицаТоварыКомитентов,
		ПараметрыПроведения.ВыручкаПоТоварамКомитентовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияСписаниеТорговойНаценкиАТТ(ТаблицаСписанияТорговойНаценкиАТТ,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияСписаниеТоваровНТТ(ТаблицаСписанныеТоварыНТТ,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияСписаниеТоваровНедостача(
		ПараметрыПроведения.ТоварыНДС, ТаблицаСписанныеТовары, ПараметрыПроведения.РеквизитыНДС, Движения, Отказ);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
		ТаблицаПоступлениеПродукцииТоваровИП,
		ТаблицыСписанияТоваровИП.СтоимостьПродукции,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка, 
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка, 
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара));
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецЕсли