#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 13, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажи");
	
	// Табличная часть ВозвратнаяТара
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ПодразделениеОрганизации");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
//  СчетаУчета	- оставлен для совместимости; не используется
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета = Неопределено) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Если НЕ УчетнаяПолитика.Существует(Выборка.Организация, Выборка.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС		= УчетнаяПолитика.ПлательщикНДС(Выборка.Организация, Выборка.Период);
	
	УчетВПродажныхЦенах	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Выборка.Организация, Выборка.Период)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
	СкладНТТВЦенахПродажи = УчетВПродажныхЦенах И (Выборка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	СкладАТТВЦенахПродажи = УчетВПродажныхЦенах И (Выборка.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
	
	Запрос.УстановитьПараметр("ПлательщикНДС",	ПлательщикНДС);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",	НСтр("ru = 'Возвратная тара'"));
	
	Запрос.УстановитьПараметр("СкладНТТВЦенахПродажи",	СкладНТТВЦенахПродажи);
	Запрос.УстановитьПараметр("СкладАТТВЦенахПродажи",	СкладАТТВЦенахПродажи);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц)
					+ ТекстЗапросаСписаниеТары(НомераТаблиц)
					+ ТекстЗапросаВыручкаПоТоварамКомитентов(НомераТаблиц)
					+ ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровТорговаяНаценка(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)
					+ ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДСВРознице,
	|	ТаблицаТовары.СчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.ОтражениеВУСН,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	""Списание товаров"" КАК Содержание
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК КорСчетСписания,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И НЕ &СкладНТТВЦенахПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСписаниеТары(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТарыРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТарыТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата Период,
	|	""Списание"" КАК ТипСписания,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	""Списание тары"" КАК Содержание
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	ТаблицаТара.Ссылка.Дата КАК Период,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.СчетУчета,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаТара.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент, 
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии, 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом, 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом, 
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом, 
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК КорСчетСписания,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.ВозвратнаяТара КАК ТаблицаТара
	|		ПО Реквизиты.Ссылка = ТаблицаТара.Ссылка
	|ГДЕ
	|	ТаблицаТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТара.НомерСтроки
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыручкаПоТоварамКомитентов(НомераТаблиц)

	НомераТаблиц.Вставить("ВыручкаПоТоварамКомитентовРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Основание КАК Основание
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц)

	НомераТаблиц.Вставить("ЗачетАвансовКомитентовРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеТоваровТорговаяНаценка(НомераТаблиц)

	НомераТаблиц.Вставить("СписаниеТоваровТорговаяНаценкаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровНТТТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК КорСчетСписания
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Сумма КАК ВалютнаяСумма,
	|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	ТаблицаТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК КорСчетСписания,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК КорСчетНаценка,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&СкладНТТВЦенахПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТоварыНДС",    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.СчетУчетаЗабалансовый";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)

	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатковРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
	|ИЗ
	|	Документ.СписаниеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ДокументСсылка) Экспорт

	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДокументСсылка.Основание;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Содержание = "Списание %1: %2";
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Содержание, 
			БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета),
			Основание);
		СтрокаТаблицы.Содержание = Содержание;
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицыМатериаловПродукцииИП(ТаблицаСписанныеМПЗ, ТаблицаРеквизиты) Экспорт
	Перем СтруктураТаблиц;
	
	СтруктураТаблиц = Новый Структура("ТаблицаМатериалов, ПолученоПродукции");
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	МассивТиповЗатрат = Новый Массив;
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.РасходыБудущихПериодов"));
	ОписаниеТиповЗатрат = Новый ОписаниеТипов(МассивТиповЗатрат);
	
	ТаблицаМатериалов = ТаблицаСписанныеМПЗ.Скопировать();
	ТаблицаМатериалов.Колонки.КорСчетСписания.Имя = "СчетЗатрат";
	ТаблицаМатериалов.Колонки.Добавить("Продукция",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМатериалов.Колонки.Добавить("СтатьяЗатрат",         ОписаниеТиповЗатрат);
	ТаблицаМатериалов.Колонки.Добавить("СчетДоходов",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоПродукции",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ОсновнаяНоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина);
	СоответствиеНоменклатурныхГрупп = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "НоменклатурнаяГруппа");
	
	Для Каждого Материал Из ТаблицаМатериалов Цикл
		
		НоменклатурнаяГруппа = СоответствиеНоменклатурныхГрупп.Получить(Материал.Номенклатура);
		Если НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
		КонецЕсли;
		
		Материал.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		Материал.Продукция            = Материал.Номенклатура;
		Материал.КоличествоПродукции  = Материал.Количество;
		
	КонецЦикла;
	
	СтруктураТаблиц.ТаблицаМатериалов =
		УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуСписанияМатериалов(ТаблицаМатериалов, ТаблицаРеквизиты);
	
	Если СтруктураТаблиц.ТаблицаМатериалов <> Неопределено Тогда
		СтруктураТаблиц.ПолученоПродукции = СтруктураТаблиц.ТаблицаМатериалов.Скопировать();
		СтруктураТаблиц.ПолученоПродукции.Колонки.СчетЗатрат.Имя = "СчетУчетаПродукции";
		СтруктураТаблиц.ПолученоПродукции.Свернуть("СчетУчетаПродукции, Продукция, НоменклатурнаяГруппа", "КоличествоПродукции");
	КонецЕсли;
	
	Возврат СтруктураТаблиц;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт списания товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Акт списания товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Акт о списании товаров (ТОРГ-16)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ16";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании товаров (ТОРГ-16)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Списание товаров""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета Накладная формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Акт списания товаров", 
			ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати), , "Документ.СписаниеТоваров.ПФ_MXL_Накладная");
	КонецЕсли;

	// Проверяем, нужно ли для макета Накладная формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ16") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ16", "ТОРГ-16 (Акт о списании товаров)", 
			ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_ТОРГ16");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка,
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Дата КАК ДатаНач,
	|	СписаниеТоваров.Дата КАК ДатаКон,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.Склад,
	|	Склады.ТипСклада,
	|	Склады.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиСклада,
	|	Склады.Представление КАК ПредставлениеСклада,
	|	СписаниеТоваров.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА СписаниеТоваров.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ СписаниеТоваров.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	СписаниеТоваров.СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СписаниеТоваров.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА СписаниеТоваров.Товары.Номенклатура.Артикул
	|			ИНАЧЕ СписаниеТоваров.Товары.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма
	|	),
	|	СписаниеТоваров.ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА СписаниеТоваров.ВозвратнаяТара.Номенклатура.Артикул
	|			ИНАЧЕ СписаниеТоваров.ВозвратнаяТара.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаХранения
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО СписаниеТоваров.Склад = Склады.Ссылка,
	|	Константы КАК Константы
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
 	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ТекстЗапроса;

	ШапкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеТоваров.ПФ_MXL_Накладная");

	Если ШапкаИтоги.Следующий() Тогда

		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');

		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		СтруктураПоиска = Новый Структура("Регистратор, Номенклатура");

		ПервыйДокумент = Истина;
		Шапка = ШапкаИтоги.Выбрать();
		Пока Шапка.Следующий() Цикл
			ТаблицаТовары = Шапка.Товары.Выгрузить();
			ТаблицаТара   = Шапка.ВозвратнаяТара.Выгрузить();
			
			УчетПоПродажнойСтоимости = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, Шапка.Дата) =
				Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим шапку накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Списание товаров")));
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
			ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеОрганизации", ПредставлениеОрганизации));
			ТабличныйДокумент.Вывести(ОбластьМакета);


			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ДанныеЗаполнения = Новый Структура;
				Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
					ДанныеЗаполнения.Вставить("ИмяКолонкиКодов", "Артикул");
				ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
					ДанныеЗаполнения.Вставить("ИмяКолонкиКодов", "Код");
				КонецЕсли;
				ОбластьКодов.Параметры.Заполнить(ДанныеЗаполнения);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьКолонкаТовар = Макет.Область("Товар");

			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
													Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			Ном = 0;
			СуммаСписанияВсего = 0;
			
			Для каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			
				Ном = Ном + 1;
				
				ДанныеЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыТовары);
				
				ДанныеЗаполнения.Вставить("НомерСтроки", Ном);
				ОбластьНомера.Параметры.Заполнить(ДанныеЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьНомера);

				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", СтрокаТаблицыТовары.Код));
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;

				//Определим цену - в случае розницы в продажных ценах - продажную
				Если УчетПоПродажнойСтоимости 
					И Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					ЦенаСписания = СтрокаТаблицыТовары.Цена;
					Сумма        = ЦенаСписания * СтрокаТаблицыТовары.Количество;
					
				ИначеЕсли УчетПоПродажнойСтоимости 
					И Шапка.ТипСклада  = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
					
					ЦенаСписания = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицыТовары.Номенклатура, 
						Шапка.ТипЦенРозничнойТорговлиСклада, Шапка.Дата, Шапка.ВалютаДокумента, 1, 1);
					Сумма        = ЦенаСписания * СтрокаТаблицыТовары.Количество;
					
				Иначе
					
					СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
					СтруктураПоиска.Вставить("Номенклатура", 	СтрокаТаблицыТовары.Номенклатура);
					НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						ЦенаСписания = 0;
						Сумма        = 0; 
					Иначе
						СтрокаСуммСписания = НайденныеСтроки[0];
						
						ЦенаСписания = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						Сумма        = ЦенаСписания * СтрокаТаблицыТовары.Количество;
					КонецЕсли;
				КонецЕсли;
				
				СуммаСписанияВсего = СуммаСписанияВсего + Сумма;
				
				ДанныеЗаполнения.Вставить("Цена", ЦенаСписания);
				ДанныеЗаполнения.Вставить("Сумма", Сумма);
				
				ОбластьДанных.Параметры.Заполнить(ДанныеЗаполнения);
				
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;
			
			Для каждого СтрокаТаблицаТара Из ТаблицаТара Цикл
			
				Ном = Ном + 1;
				
				ДанныеЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаТара);
				ДанныеЗаполнения.Вставить("НомерСтроки", Ном);
				ОбластьНомера.Параметры.Заполнить(ДанныеЗаполнения);
				
				ТабличныйДокумент.Вывести(ОбластьНомера);

				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", СтрокаТаблицаТара.Код));
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ТоварНаименование = СтрЗаменить(НСтр("ru = '%1 (возвратная тара)'"), "%1" ,СтрокаТаблицаТара.Товар);
				ДанныеЗаполнения.Вставить("Товар", ТоварНаименование);
				
				СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
				СтруктураПоиска.Вставить("Номенклатура",	СтрокаТаблицаТара.Номенклатура);
				НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);

				Если НайденныеСтроки.Количество() = 0 Тогда
					ЦенаСписания = 0;
					Сумма        = 0;
				Иначе
					СтрокаСуммСписания = НайденныеСтроки[0];
					
					ЦенаСписания = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					Сумма        = ЦенаСписания * СтрокаТаблицаТара.Количество;
				КонецЕсли;
				
				СуммаСписанияВсего = СуммаСписанияВсего + Сумма;
				
				ДанныеЗаполнения.Вставить("Цена", ЦенаСписания);
				ДанныеЗаполнения.Вставить("Сумма", Сумма);
				
				ОбластьДанных.Параметры.Заполнить(ДанныеЗаполнения);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;

			// Вывести Итого
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСписанияВсего)));
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			
			СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаСписанияВсего, Шапка.ВалютаДокумента);
			КоличествоСтрокВсего = ТаблицаТовары.Количество() + ТаблицаТара.Количество();
			
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
				КоличествоСтрокВсего, 
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСписанияВсего, Шапка.ВалютаДокумента));
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока, СуммаПрописью", ИтоговаяСтрока, СуммаПрописью));

			ТабличныйДокумент.Вывести(ОбластьМакета);

			// Вывести подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
				НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует унифицированную форму ТОРГ-16
//
// Возвращаемое значение:
//  Табличный документ - унифицированная форма ТОРГ-16
//
Функция ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати)

	Перем ПодразделениеОтветственныхЛиц;

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка,
	|	СписаниеТоваров.Номер КАК НомерДокумента,
	|	СписаниеТоваров.Дата КАК ДатаДокумента,
	|	СписаниеТоваров.Дата КАК ДатаНач,
	|	СписаниеТоваров.Дата КАК ДатаКон,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.Организация КАК Руководители,
	|	СписаниеТоваров.Склад,
	|	Склады.ТипСклада,
	|	Склады.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиСклада,
	|	Склады.Представление КАК ПредставлениеСклада,
	|	СписаниеТоваров.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.ПодразделениеОрганизации.НаименованиеПолное = """"
	|			ТОГДА СписаниеТоваров.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ СписаниеТоваров.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	СписаниеТоваров.Основание КАК Основание,
	|	СписаниеТоваров.СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СписаниеТоваров.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА СписаниеТоваров.Товары.Номенклатура.Артикул
	|			ИНАЧЕ СписаниеТоваров.Товары.Номенклатура.Код
	|		КОНЕЦ КАК ТоварКод,
	|		Количество,
	|		ВЫБОР
	|			КОГДА СписаниеТоваров.Товары.КоличествоМест = 0
	|				ТОГДА СписаниеТоваров.Товары.Количество
	|			ИНАЧЕ СписаниеТоваров.Товары.КоличествоМест
	|		КОНЕЦ КАК КоличествоМест,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияМестНаименование,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		Цена КАК Цена,
	|		Сумма КАК Стоимость
	|	),
	|	СписаниеТоваров.ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА СписаниеТоваров.ВозвратнаяТара.Номенклатура.Артикул
	|			ИНАЧЕ СписаниеТоваров.ВозвратнаяТара.Номенклатура.Код
	|		КОНЕЦ КАК ТоварКод,
	|		Количество,
	|		Количество КАК КоличествоМест,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаХранения
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО СписаниеТоваров.Склад = Склады.Ссылка,
	|	Константы КАК Константы
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ТекстЗапроса;

	ШапкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ16");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ПолеСверху			= 0;
	ТабличныйДокумент.ПолеСнизу				= 0;
	ТабличныйДокумент.ПолеСправа			= 0;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_ТОРГ16";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабличныйДокумент.ПолеСлева          = 0;
	Иначе
		ТабличныйДокумент.ПолеСлева          = 10;
	КонецЕсли;

	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
		
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		СтруктураПоиска = Новый Структура("Регистратор, Номенклатура");
		
		ПервыйДокумент = Истина;
		Шапка = ШапкаИтоги.Выбрать();
		Пока Шапка.Следующий() Цикл
			
			УчетПоПродажнойСтоимости = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, Шапка.ДатаДокумента) =
				Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

			// Выводим общие реквизиты шапки
			ОписаниеОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
			ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ДатаДокумента            = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(ОписаниеОрганизации);
			ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;

			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;

			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);

			Руководитель = Руководители.РуководительПредставление;
			Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

			ТабличныйДокумент.Вывести(ОбластьМакета);

			СтрокНаСтранице = 23;
			СтрокШапки      = 11;
			СтрокПодвала    = 0;
			НомерСтраницы   = 1;
			Ном             = 0;

			ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

			КоличествоСтрок  = ВыборкаСтрокТовары.Количество();

			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;

			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
			// Поиск сумм списания активов для заполнения Цены и Суммы

			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Ном = Ном + 1;

				//Начинаем новую страницу, если предыдущая строка была последней на странице
				//или пора переносить последнюю строку на последнюю страницу с подвалом.
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

					ИтогоСтоимостьПоСтранице = 0;
					НомерСтраницы            = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЦикла;
			ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
			Пока ВыборкаСтрокТара.Следующий() Цикл

				Ном = Ном + 1;

				//Начинаем новую страницу, если предыдущая строка была последней на странице
				//или пора переносить последнюю строку на последнюю страницу с подвалом.
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

					ИтогоСтоимостьПоСтранице = 0;
					НомерСтраницы            = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЦикла;

			СтрокНаСтранице = 27;
			СтрокШапки      = 5;
			СтрокПодвала    = 11;
			НомерСтраницы   = 1;
			Ном             = 0;

			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			НомерСтраницы    = НомерСтраницы + 1;
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;

			ИтогоСтоимость = 0;

			// Выводим многострочную часть документа
			ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Ном = Ном + 1;

				//Начинаем новую страницу, если предыдущая строка была последней на странице
				//или пора переносить последнюю строку на последнюю страницу с подвалом.
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

					ИтогоСтоимостьПоСтранице = 0;
					НомерСтраницы            = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;
				
				//Определим цену - в случае розницы в продажных ценах - продажную
				Если УчетПоПродажнойСтоимости 
					И Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					ЦенаСписания = ВыборкаСтрокТовары.Цена;
					Стоимость    = ЦенаСписания * ВыборкаСтрокТовары.Количество;
					
				ИначеЕсли УчетПоПродажнойСтоимости 
					И Шапка.ТипСклада  = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
					
					ЦенаСписания = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, 
						Шапка.ТипЦенРозничнойТорговлиСклада, Шапка.ДатаДокумента, Шапка.ВалютаДокумента, 1, 1);
					Стоимость    = ЦенаСписания * ВыборкаСтрокТовары.Количество;
					
				Иначе
					
					СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
					СтруктураПоиска.Вставить("Номенклатура", 	ВыборкаСтрокТовары.Номенклатура);
					НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						ЦенаСписания = 0;
						Стоимость    = 0;
					Иначе
						СтрокаСуммСписания = НайденныеСтроки[0];
						
						ЦенаСписания = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						Стоимость    = ЦенаСписания * ВыборкаСтрокТовары.Количество;
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Цена      = ЦенаСписания;
				ОбластьМакета.Параметры.Стоимость = Стоимость;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

				// Обновим итоги по документу
				ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;

			КонецЦикла;
			ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
			Пока ВыборкаСтрокТара.Следующий() Цикл

				Ном = Ном + 1;
				
				//Начинаем новую страницу, если предыдущая строка была последней на странице
				//или пора переносить последнюю строку на последнюю страницу с подвалом.
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				 ИЛИ ((ПереноситьПоследнююСтроку = 1) И (Ном = КоличествоСтрок)) Тогда

					ИтогоСтоимостьПоСтранице = 0;
					НомерСтраницы            = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";
				
				СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
				СтруктураПоиска.Вставить("Номенклатура", 	ВыборкаСтрокТара.Номенклатура);
				НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);

				Если НайденныеСтроки.Количество() = 0 Тогда
					ЦенаСписания = 0;
					Стоимость    = 0;
				Иначе
					СтрокаСуммСписания = НайденныеСтроки[0];
					ЦенаСписания = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					Стоимость    = ЦенаСписания * ВыборкаСтрокТара.Количество;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Цена      = ЦенаСписания;
				ОбластьМакета.Параметры.Стоимость = Стоимость; 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Обновим итоги по документу
				ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;
			КонецЦикла;

			// Выводим итоги по документу в общем
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
			ТабличныйДокумент.Вывести(ОбластьМакета);

			// Выводим подвал документа
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.СуммаСписанияПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСтоимость, Шапка.ВалютаДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
				НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		КонецЦикла;
	
	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
