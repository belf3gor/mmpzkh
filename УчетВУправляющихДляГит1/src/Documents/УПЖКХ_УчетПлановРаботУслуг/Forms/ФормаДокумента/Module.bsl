
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "ПереченьРаботУслуг".
//
Процедура ПереченьРаботУслугПриИзменении(Элемент)
	
	Объект.ПлановыеРаботыУслуги.Очистить();
	Объект.Организация = ПолучитьОрганизациюПоПеречню();
	ЗаполнитьТаблицуРаботУслугНаСервере();
	
КонецПроцедуры // ПереченьРаботУслугПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" полей планового количества за месяц начисления
// динамически создаваемой таблицы "ТаблицаНаФорме" (т.е. колонок вида "Июль 2016").
// 
Процедура ПриИзмененииПлановогоКоличества(Элемент)
	
	РассчитатьПлановоеКоличество(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры // ПриИзмененииПлановогоКоличества()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля "Работа/услуга" динамически создаваемой таблицы "ТаблицаНаФорме".
// 
Процедура РаботаУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Строки работ/услуг из перечня изменять запрещаем.
	Если Элемент.Родитель.ТекущиеДанные.ВидРаботыИмеетсяВПеречне = Истина Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РаботаУслугаНачалоВыбора()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" динамически создаваемой таблицы "ТаблицаНаФорме".
// 
Процедура ТаблицаНаФормеПередУдалением(Элемент, Отказ)
	
	// Строки работ/услуг из перечня удалять запрещаем, а добавленные в самом документе удалять можно.
	Если Элемент.ТекущиеДанные.ВидРаботыИмеетсяВПеречне = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНаФормеПередУдалением()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события формы "ПриОткрытии".
// 
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьТаблицуРаботУслугНаСервере(Истина);
	
	Для Каждого СтрокаТаблицы Из ТаблицаРаботУслуг Цикл
		РассчитатьПлановоеКоличество(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура-обработчик события формы "ПередЗаписьюНаСервере".
// 
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПлановыеРаботыУслуги.Очистить();
	
	Для Каждого СтрокаТЗ Из ТаблицаРаботУслуг Цикл
		ИтераторМесяцев = 1;
		Для Каждого ТекущийМесяц Из СписокМесяцевНачисления Цикл
			НоваяСтрокаТЧ = ТекущийОбъект.ПлановыеРаботыУслуги.Добавить();
			НоваяСтрокаТЧ.РаботаУслуга       = СтрокаТЗ.РаботаУслуга;
			НоваяСтрокаТЧ.МесяцНачисления    = ТекущийМесяц.Значение;
			НоваяСтрокаТЧ.ПлановоеКоличество = СтрокаТЗ["Месяц" + ИтераторМесяцев];
			ИтераторМесяцев = ИтераторМесяцев + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура заполняет таблицу работ/услуг на основании данных табличной части документа (при открытии документа)
// или на основании данных в перечне работ/услуг при выборе перечня.
// 
Процедура ЗаполнитьТаблицуРаботУслугНаСервере(ЭтоОткрытиеДокумента = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_УчетПлановРаботУслугПлановыеРаботыУслуги.РаботаУслуга,
	|	УПЖКХ_УчетПлановРаботУслугПлановыеРаботыУслуги.МесяцНачисления,
	|	УПЖКХ_УчетПлановРаботУслугПлановыеРаботыУслуги.ПлановоеКоличество
	|ПОМЕСТИТЬ ОсновнаяТаблицаДокумента
	|ИЗ
	|	Документ.УПЖКХ_УчетПлановРаботУслуг.ПлановыеРаботыУслуги КАК УПЖКХ_УчетПлановРаботУслугПлановыеРаботыУслуги
	|ГДЕ
	|	УПЖКХ_УчетПлановРаботУслугПлановыеРаботыУслуги.Ссылка = &ДокСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ПеречниРаботИУслугРаботыУслуги.ВидРаботы КАК РаботаУслуга,
	|	УПЖКХ_ПеречниРаботИУслугРаботыУслуги.Количество КАК КоличествоВПеречне,
	|	ИСТИНА КАК ВидРаботыИмеетсяВПеречне
	|ПОМЕСТИТЬ ТаблицаПеречня
	|ИЗ
	|	Справочник.УПЖКХ_ПеречниРаботИУслуг.РаботыУслуги КАК УПЖКХ_ПеречниРаботИУслугРаботыУслуги
	|ГДЕ
	|	УПЖКХ_ПеречниРаботИУслугРаботыУслуги.Ссылка = &ПереченьРаботУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблицаДокумента.РаботаУслуга,
	|	ОсновнаяТаблицаДокумента.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА &ЭтоОткрытиеДокумента
	|			ТОГДА ОсновнаяТаблицаДокумента.ПлановоеКоличество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПлановоеКоличество
	|ИЗ
	|	ОсновнаяТаблицаДокумента КАК ОсновнаяТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяТаблицаДокумента.МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПеречня.РаботаУслуга,
	|	ТаблицаПеречня.КоличествоВПеречне,
	|	0 КАК КоличествоВПлане,
	|	ТаблицаПеречня.ВидРаботыИмеетсяВПеречне
	|ИЗ
	|	ТаблицаПеречня КАК ТаблицаПеречня
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновнаяТаблицаДокумента.РаботаУслуга,
	|	ТаблицаПеречня.КоличествоВПеречне,
	|	0 КАК КоличествоВПлане,
	|	ТаблицаПеречня.ВидРаботыИмеетсяВПеречне
	|ИЗ
	|	ОсновнаяТаблицаДокумента КАК ОсновнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПеречня КАК ТаблицаПеречня
	|		ПО (ТаблицаПеречня.РаботаУслуга = ОсновнаяТаблицаДокумента.РаботаУслуга)";
	
	Запрос.УстановитьПараметр("ДокСсылка",            Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоОткрытиеДокумента", ЭтоОткрытиеДокумента);
	Запрос.УстановитьПараметр("ПереченьРаботУслуг",   Объект.ПереченьРаботУслуг);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	// Определяем по перечню месяц начала и месяц окончания периода перечня:
	МесяцНачалаПериодаПеречня    = Объект.ПереченьРаботУслуг.НачалоПериода;
	МесяцОкончанияПериодаПеречня = Объект.ПереченьРаботУслуг.ОкончаниеПериода;
	
	// Найдем количество месяцев в перечне, а также заполним список месяцев начисления:
	КоличествоМесяцевВПеречне = 0;
	СписокМесяцевНачисления = Новый СписокЗначений;
	
	ТекущийМесяц = МесяцНачалаПериодаПеречня;
	Пока ТекущийМесяц <= МесяцОкончанияПериодаПеречня Цикл
		КоличествоМесяцевВПеречне = КоличествоМесяцевВПеречне + 1;
		СписокМесяцевНачисления.Добавить(ТекущийМесяц);
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	
	ВыборкаРаботИзПеречня = ПакетРезультат[1].Выбрать();
	
	// Выборка работ из перечня по идее не может быть пустой.
	Если ВыборкаРаботИзПеречня.Следующий() Тогда
		
		Если ЭтоОткрытиеДокумента Тогда
			ТЗРаботУслуг = ПакетРезультат[4].Выгрузить();
		Иначе
			ТЗРаботУслуг = ПакетРезультат[3].Выгрузить();
		КонецЕсли;
		
		// Опишем типы колонок таблицы на форме.
		ОписаниеТиповЧисла    = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеТиповВидРабот = Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыРабот");
		
		// Добавляем колонки месяцев в таблицу результата "ТЗРаботУслуг".
		Итератор = 0;
		Для Каждого ТекМесяцНачисления Из СписокМесяцевНачисления Цикл
			Итератор = Итератор + 1;
			ТЗРаботУслуг.Колонки.Добавить("Месяц" + Строка(Итератор), ОписаниеТиповЧисла , Формат(ТекМесяцНачисления.Значение, "ДФ=""ММММ гггг"""));
		КонецЦикла;
		
		ОсновнаяТаблица = ПакетРезультат[2].Выгрузить();
		// Свернем основную таблицу по услуге и месяцу начисления, т.к. возможно несколько одинаковых строк
		// по услугам в исходном перечне. Это возможно, например, когда стоимость услуги разная.
		ОсновнаяТаблица.Свернуть("МесяцНачисления, РаботаУслуга", "ПлановоеКоличество");
		
		// Заполняем плановые количества по месяцам.
		Для Каждого СтрокаРаботУслуг Из ТЗРаботУслуг Цикл
			
			НайденныеСтроки = ОсновнаяТаблица.НайтиСтроки(Новый Структура("РаботаУслуга", СтрокаРаботУслуг.РаботаУслуга));
			Итератор = 1;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Добавим проверку на случай, если пользователь изменил план работ после того, как заполнил документ 
				// "Учет планов работ и услуг". А именно проверяем, не было ли изменено количество месяцев.
				Если СписокМесяцевНачисления.НайтиПоЗначению(НайденнаяСтрока.МесяцНачисления) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаботУслуг["Месяц" + Итератор] = НайденнаяСтрока.ПлановоеКоличество;
				Итератор = Итератор + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		// Будем создавать и удалять (если уже есть) таблицу на форме, которую привяжем
		// к реквизиту формы "ТаблицаРаботУслуг" (таблице значений).
		МассивУдаляемыхРеквизитов   = Новый Массив;
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		ИмяТЗРеквизитаФормы = "ТаблицаРаботУслуг";
		ИмяТаблицыНаФорме   = "ТаблицаНаФорме";
		ТаблицаЗначенийИзФормы = РеквизитФормыВЗначение(ИмяТЗРеквизитаФормы);
		
		// Заполним массив удаляемых реквизитов, для удаления всех колонок из таблицы значений "ТаблицаРаботУслуг".
		Для Каждого ТекКолонка Из ТаблицаЗначенийИзФормы.Колонки Цикл
			МассивУдаляемыхРеквизитов.Добавить(ИмяТЗРеквизитаФормы + "." + ТекКолонка.Имя);
		КонецЦикла;
		
		// Заполним массив добавляемых реквизитов, для добавления колонок в таблицу значений "ТаблицаРаботУслуг".
		Для Каждого ТекКолонка Из ТЗРаботУслуг.Колонки Цикл
			Если ТекКолонка.Заголовок = "РаботаУслуга" Тогда
				ЗаголовокКолонки = "Работа/услуга";
				ТипЗначенияКолонки = ОписаниеТиповВидРабот;
			ИначеЕсли ТекКолонка.Заголовок = "КоличествоВПеречне" Тогда
				ЗаголовокКолонки   = "Количество в перечне";
				ТипЗначенияКолонки = ОписаниеТиповЧисла;
			ИначеЕсли ТекКолонка.Заголовок = "КоличествоВПлане" Тогда
				ЗаголовокКолонки   = "Количество в плане";
				ТипЗначенияКолонки = ОписаниеТиповЧисла;
			Иначе
				ЗаголовокКолонки   = ТекКолонка.Заголовок;
				ТипЗначенияКолонки = ТекКолонка.ТипЗначения;
			КонецЕсли;
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ТекКолонка.Имя, ТипЗначенияКолонки, ИмяТЗРеквизитаФормы, ЗаголовокКолонки));
		КонецЦикла;
		
		// Здесь непосредственно происходит изменение реквизитного состава таблицы значений формы "ТаблицаРаботУслуг".
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
		ЗначениеВРеквизитФормы(ТЗРаботУслуг, ИмяТЗРеквизитаФормы);
		
		// Удалим таблицу форму.
		ЭлементТаблицаНаФорме = Элементы.Найти(ИмяТаблицыНаФорме);
		Если ЭлементТаблицаНаФорме <> Неопределено Тогда
			Элементы.Удалить(ЭлементТаблицаНаФорме);
		КонецЕсли;
		
		// Добавим новую таблицу формы и добавим в нее нужные колонки.
		ЭлементТаблицаНаФорме = Элементы.Добавить(ИмяТаблицыНаФорме, Тип("ТаблицаФормы"));
		ЭлементТаблицаНаФорме.ПутьКДанным = ИмяТЗРеквизитаФормы;
		ЭлементТаблицаНаФорме.Отображение = ОтображениеТаблицы.Список;
		
		Для Каждого ТекКолонка Из ТЗРаботУслуг.Колонки Цикл
			
			КолонкаТаблицыНаФорме = Элементы.Добавить(ИмяТаблицыНаФорме + ТекКолонка.Имя, Тип("ПолеФормы"), ЭлементТаблицаНаФорме);
			КолонкаТаблицыНаФорме.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаТаблицыНаФорме.ПутьКДанным = ИмяТЗРеквизитаФормы + "." + ТекКолонка.Имя;
			
			// Сделаем флаг "ВидРаботыИмеетсяВПеречне" невидимым, т.к. он служебный.
			Если ТекКолонка.Имя = "ВидРаботыИмеетсяВПеречне" Тогда
				КолонкаТаблицыНаФорме.Видимость = Ложь;
			КонецЕсли;
			
			// Сделаем поля "Количество в перечне" и "Количество в плане" недоступными для ручного редактирования:
			Если ТекКолонка.Имя = "КоличествоВПеречне" ИЛИ ТекКолонка.Имя = "КоличествоВПлане" Тогда
				КолонкаТаблицыНаФорме.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			// Установим свойства для колонки "Работа/услуга", которые не позволят изменять
			// работу/услугу для строк из перечня:
			Если ТекКолонка.Имя = "РаботаУслуга" Тогда
				КолонкаТаблицыНаФорме.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
				КолонкаТаблицыНаФорме.КнопкаВыпадающегоСписка = Ложь;
				КолонкаТаблицыНаФорме.КнопкаВыбора            = Истина;
				КолонкаТаблицыНаФорме.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
				КолонкаТаблицыНаФорме.КнопкаСоздания          = Ложь;
				КолонкаТаблицыНаФорме.РедактированиеТекста    = Ложь;
				
				// Установим обработчик события "НачалоВыбора" для колонки "Работа/услуга", чтобы предотвращать
				// изменение работы/услуги из перечня:
				КолонкаТаблицыНаФорме.УстановитьДействие("НачалоВыбора", "РаботаУслугаНачалоВыбора");
				
			КонецЕсли;
			
			// Установим обработчик события "ПриИзменении" для всех колонок таблицы, содержащих в наименовании "Месяц".
			Если НЕ СтрНайти(ТекКолонка.Имя, "Месяц") = 0 Тогда
				КолонкаТаблицыНаФорме.УстановитьДействие("ПриИзменении", "ПриИзмененииПлановогоКоличества");
			КонецЕсли;
			
		КонецЦикла;
		
		// Установим обработчик события "ПередУдалением" для таблицы "ТаблицаНаФорме".
		ЭлементТаблицаНаФорме.УстановитьДействие("ПередУдалением", "ТаблицаНаФормеПередУдалением");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуРаботУслугНаСервере()

&НаКлиенте
// Процедура рассчитывает плановое количество на основании данных по плановому количеству всех месяцев начисления.
// 
Процедура РассчитатьПлановоеКоличество(ТекущиеДанные)
	
	ИтераторМесяцев = 1;
	ТекущиеДанные.КоличествоВПлане = 0;
	Пока ИтераторМесяцев <= КоличествоМесяцевВПеречне Цикл
		ТекущиеДанные.КоличествоВПлане = ТекущиеДанные.КоличествоВПлане + ТекущиеДанные["Месяц" + ИтераторМесяцев];
		ИтераторМесяцев = ИтераторМесяцев + 1;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПлановоеКоличество()

&НаСервере
// Функция получает значение управляющей организации по выбранному перечню работ/услуг.
// 
Функция ПолучитьОрганизациюПоПеречню()
	
	Возврат Объект.ПереченьРаботУслуг.Организация;
	
КонецФункции // ПолучитьОрганизациюПоПеречню()

#КонецОбласти
