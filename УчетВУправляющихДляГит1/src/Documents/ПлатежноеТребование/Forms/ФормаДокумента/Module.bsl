////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	Если Параметры.Ключ.Пустая() Тогда
		СформироватьНазначениеПлатежа(ЭтотОбъект, Истина);
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ХранилищеОбщихНастроек.Сохранить("ПлатежноеТребование_ВидПлатежа",, Объект.ВидПлатежа);
	
	УстановитьСостояниеДокумента();
	
	Состояние = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПлатежноеТребование";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
				Объект.Организация,
				Объект.СчетОрганизации,
				ИспользоватьНесколькоБанковскихСчетовОрганизации,
				Отказ,
				ПараметрыЗаписи);
				
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Оповестить("ОбновитьФорму", ВладелецФормы, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекПлатежныхПорученийИТребований" Тогда
		
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));
		
		СформироватьНазначениеПлатежа(ЭтотОбъект);
		
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			ОрганизацияПриИзмененииНаСервере();
		Иначе
			УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			
			ОбработатьИзмененияВОрганизацииНаСервере();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ОчередностьПлатежа = 6 И Объект.Дата >= УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа() Тогда
		Объект.ОчередностьПлатежа = 5;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАкцептаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));
		
	УправлениеФормой(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));
	
	СформироватьНазначениеПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежа(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежа(ЭтотОбъект, Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НастройкаПлатежногоТребования(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет плательщика'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АвтоТекстНазначения = НСтр("ru = 'Оплата по договору'");
	
	ПараметрыФормы = Новый Структура(
		"БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, ОткрытИзПлатежки",
		Объект.СчетОрганизации, Объект.СчетКонтрагента, АвтоТекстНазначения, Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = 
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = 
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = 
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
		СохраненныйВид = ХранилищеОбщихНастроек.Загрузить("ПлатежноеТребование_ВидПлатежа");
		Если СохраненныйВид <> "" Тогда
			Объект.ВидПлатежа = СохраненныйВид;
		Иначе
			Объект.ВидПлатежа = ""; // Вид платежа по умолчанию не заполняется
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = 
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	Элементы.СчетОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.СчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СуммаНДС.Доступность         = НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		И НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
	
	РасшифровкаВидАкцепта = "";
	Если Объект.ВидАкцепта = 1 Тогда
		Форма.РасшифровкаВидАкцепта = НСтр("ru = 'Заранее данный акцепт плательщика'");
	ИначеЕсли Объект.ВидАкцепта = 2 Тогда
		Форма.РасшифровкаВидАкцепта = НСтр("ru = 'Требует получения акцепта'");
	КонецЕсли;
	
	ОбновитьПодсказкуОчередностьПлатежа(Форма);
	
	УстановитьСвойстваПоляСостояние(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФункциональныеОпцииФормы(Форма)
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуОчередностьПлатежа(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ОчередностьПлатежа > 0 Тогда
		Если Объект.ОчередностьПлатежа > Элементы.ОчередностьПлатежа.СписокВыбора.Количество() Тогда
			// Если ОчередностьПлатежа = 6 будут выбирать после вступления в действие 345-Ф, не будем у такого значения отображать подсказку
			Форма.РасшифровкаОчередностиПлатежа = "";
		Иначе
			Форма.РасшифровкаОчередностиПлатежа = Сред(Элементы.ОчередностьПлатежа.СписокВыбора[
				Объект.ОчередностьПлатежа - 1].Представление, 5);
		КонецЕсли;
	Иначе
		Форма.РасшифровкаОчередностиПлатежа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации, Объект.Организация, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));

	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
		
	ОсновнойБанковскийСчетОрганизацииЗаполнен = 
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетКонтрагента, Объект.Контрагент, ВалютаРегламентированногоУчета);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		СформироватьРасшифровки(Объект.Организация, Объект.СчетОрганизации, Объект.Контрагент, Объект.СчетКонтрагента));
		
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СформироватьНазначениеПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНазначениеПлатежа(Форма, ТолькоСумму = Ложь)
	
	Объект = Форма.Объект;
	
	ПозицияНДС = СтрНайти(Объект.НазначениеПлатежа, НСтр("ru = 'В т.ч. НДС'"));
	Если ПозицияНДС = 0 Тогда
		ПозицияНДС = СтрНайти(Объект.НазначениеПлатежа, НСтр("ru = 'Без налога (НДС)'"));
	КонецЕсли;
	
	Если ТолькоСумму Тогда
		
		ТекстНазначение = ?(ПозицияНДС = 0, Объект.НазначениеПлатежа, Лев(Объект.НазначениеПлатежа, ПозицияНДС - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа) Тогда
			ТекстНазначение = Форма.АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа;
		Иначе
			ТекстНазначение = НСтр("ru = 'Оплата по договору '");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда
		ТекстНДС = НСтр("ru = 'Без налога (НДС)'");
	ИначеЕсли Объект.СуммаНДС > 0 Тогда
		ТекстНДС = НСтр("ru = 'В т.ч. НДС '")
			+ ?(ЗначениеЗаполнено(Объект.СтавкаНДС), " (" + Объект.СтавкаНДС + ") ", "")
			+ Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	Иначе
		ТекстНДС = "";
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ТекстНазначение+ ?(ПустаяСтрока(ТекстНДС),   "", Символы.ПС + ТекстНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуНДС(СуммаДокумента, СтавкаНДС)
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС   = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьРасшифровки(Знач Организация, Знач СчетОрганизации, Знач Контрагент, Знач СчетКонтрагента)
	
	ЗначенияРеквизитов = Новый Структура;
	
	ЗначенияРеквизитов.Вставить("АвтоЗначенияРеквизитов", УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация,
		СчетОрганизации,
		Контрагент,
		СчетКонтрагента,
		Ложь));
	
	// Плательщик - контрагент
	ЗначенияРеквизитов.Вставить("РасшифровкаКонтрагент", 
		"ИНН " + ЗначенияРеквизитов.АвтоЗначенияРеквизитов.ИННПолучателя 
		+ ", " + ЗначенияРеквизитов.АвтоЗначенияРеквизитов.ТекстПолучателя);
	// Получатель - наша организация
	ЗначенияРеквизитов.Вставить("РасшифровкаОрганизация", 
		"ИНН " + ЗначенияРеквизитов.АвтоЗначенияРеквизитов.ИННПлательщика
		+ ", " + ЗначенияРеквизитов.АвтоЗначенияРеквизитов.ТекстПлательщика);
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляСостояние(Форма)

	Объект		 = Форма.Объект;
	Элементы	 = Форма.Элементы;
	Если Форма.ТолькоПросмотр Тогда
		
		Элементы.Состояние.ТолькоПросмотр = Истина;
		Элементы.Состояние.КнопкаОткрытия = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			
			ЕстьНастройкаДиректБанк = Ложь;
			СписокВыбора = Новый Массив;
			НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Объект.Организация, Объект.СчетОрганизации, СписокВыбора);
			Элементы.Состояние.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			Элементы.Состояние.ТолькоПросмотр = ЕстьНастройкаДиректБанк;
			Элементы.Состояние.КнопкаОткрытия = ЕстьНастройкаДиректБанк;
			
		Иначе
			
			Элементы.Состояние.ТолькоПросмотр = Истина;
			Элементы.Состояние.КнопкаОткрытия = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Знач Организация, Знач БанковскийСчет, СписокВыбора)
	
	Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
	
	ЕстьНастройкаДиректБанк = ОбменСБанками.НастройкаОбмена(Организация, Банк) <> Неопределено;
	
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Подготовлено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Отправлено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Оплачено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Отклонено);
	Если ЕстьНастройкаДиректБанк Тогда
			
		СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.НаПодписи);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеОбмена(Ссылка)

	Возврат РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Ссылка);

КонецФункции

&НаКлиенте
Процедура СостояниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
