
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ЗначенияЗаполнения);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("КорректировочныйСчетФактура") Тогда 
		СтандартныйСчетФактура = Не Параметры.ЗначенияЗаполнения.КорректировочныйСчетФактура;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		// Для авансов всегда один код, его показывать не требуется.
		Элементы.ГруппаКодВидаОперации.Видимость = Ложь;
	Иначе
		
		Если Параметры.ЗначенияЗаполнения.Свойство("ДатаДокумента") Тогда
			ДатаДляПолученияСпискаКодов = Параметры.ЗначенияЗаполнения.ДатаДокумента;
		Иначе
			ДатаДляПолученияСпискаКодов = '20120401';
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
				Элементы.КодВидаОперации.СписокВыбора,
				ДатаДляПолученияСпискаКодов);
		Иначе
			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
				Элементы.КодВидаОперации.СписокВыбора,
				ДатаДляПолученияСпискаКодов);
				
				Если СчетУчета = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам Тогда
					Элементы.Продавец.Заголовок = НСтр("ru = 'Иностранный поставщик'");
				Иначе
					Элементы.Продавец.Заголовок = НСтр("ru = 'Составлен от имени'");
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяСчетФактура Тогда
		Если Не ЗначениеЗаполнено(КодВидаОперации) И Элементы.КодВидаОперации.СписокВыбора.Количество() > 0 Тогда
			КодВидаОперации = Элементы.КодВидаОперации.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Реквизиты счета-фактуры (строка %1)'"),
		НомерСтрокиДокумента);
		
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если Не ПеренестиВДокумент Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
			
		ИначеЕсли Не Отказ Тогда
			Отказ = Не ПроверитьЗаполнениеНаКлиенте();
			Если Отказ Тогда
				ПеренестиВДокумент = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	ПродавецДоступен = ПродавецДоступен(ПредъявленСФ, ДоговорКонтрагента, СчетУчета);
	Если Не ПродавецДоступен Тогда
		Продавец = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодВидаОперации) И Элементы.КодВидаОперации.СписокВыбора.Количество() > 0 Тогда
		// При вводе нового счета-фактуры подставим код вида операции по умолчанию.
		КодВидаОперации = Элементы.КодВидаОперации.СписокВыбора[0].Значение;
		ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИсправлениеИсходногоПриИзменении(Элемент)
	
	Если Не УчитыватьИсправлениеИсходногоДокумента Тогда
		НомерИсправленияИсходногоДокумента	= 0;
		ДатаИсправленияИсходногоДокумента	= '00010101';
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	
	Если Не Исправление Тогда
		НомерИсправления = 0;
		ДатаИсправления  = '00010101';
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Если ПроверитьЗаполнениеНаКлиенте() Тогда 
		РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
		Закрыть(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СтандартныйСчетФактураПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ПредъявленСчетФактура.Видимость = Не Форма.ТребуетсяСчетФактура;
	Элементы.ГруппаПредъявлен.Видимость      = Форма.ПредъявленСФ Или Форма.ТребуетсяСчетФактура;
	Элементы.ГруппаПродавец.Видимость        = Форма.ПродавецДоступен;
	
	Элементы.ГруппаКорректируемыйСчетФактура.Видимость = Не Форма.СтандартныйСчетФактура;
	Элементы.РеквизитыИсправленияИсходного.Видимость   = Не Форма.СтандартныйСчетФактура;
	
	Элементы.НомерИсправления.Доступность = Форма.Исправление;
	Элементы.ДатаИсправления.Доступность  = Форма.Исправление;
	
	Элементы.НомерИсправленияИсходного.Доступность = Форма.УчитыватьИсправлениеИсходногоДокумента;
	Элементы.ДатаИсправленияИсходного.Доступность  = Форма.УчитыватьИсправлениеИсходногоДокумента;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПродавецДоступен(Знач ПредъявленСФ, Знач ДоговорКонтрагента, Знач СчетУчета)
	
	ПродавецДоступен = ПредъявленСФ
		И (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		ИЛИ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
		И СчетУчета = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
		
	Возврат ПродавецДоступен;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	Отказ = Ложь;
	
	Если Не (ПредъявленСФ Или ТребуетсяСчетФактура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтандартныйСчетФактура Тогда 
		Если Не ЗначениеЗаполнено(НомерСФ) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
			Поле = "НомерСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаСФ) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
			Поле = "ДатаСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если Исправление Тогда 
			Если Не ЗначениеЗаполнено(НомерИсправления) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер исправления счета-фактуры'"));
				Поле = "НомерИсправления";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата исправления счета-фактуры'"));
				Поле = "ДатаИсправления";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПродавецДоступен И Не ЗначениеЗаполнено(Продавец) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", Элементы.Продавец.Заголовок);
			Поле = "Продавец";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(НомерСФ) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер корректировочного счета-фактуры'"));
			Поле = "НомерКорректировочногоСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаСФ) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата корректировочного счета-фактуры'"));
			Поле = "ДатаСФ1";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если Исправление Тогда 
			Если Не ЗначениеЗаполнено(НомерИсправления) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер исправления корректировочного счета-фактуры'"));
				Поле = "НомерИсправленияКорректировочного";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата исправления корректировочного счета-фактуры'"));
				Поле = "ДатаИсправленияКорректировочного";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер корректируемого счета-фактуры'"));
			Поле = "НомерИсходногоДокумента";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата корректируемого счета-фактуры'"));
			Поле = "ДатаИсходногоДокумента";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным") Тогда
		Если Не ЗначениеЗаполнено(КодВидаОперации) Тогда 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Код вида операции'"));
			Поле = "КодВидаОперации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		Иначе
			Если Не УчетНДСКлиентСервер.ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперации) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Код вида операции'"), , ,
					НСтр("ru='Код вида операции может содержать только цифры и символ "";""'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КодВидаОперации", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		КодВидаОперации = ВыбранныйКод.Значение;
		ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСтруктуруЗакрытия()
	
	Структура = Новый Структура();
	
	Для Каждого Реквизит Из ЭтотОбъект.ПолучитьРеквизиты() Цикл
		Структура.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнениеНаКлиенте() Тогда
			Модифицированность = Ложь;
			ПеренестиВДокумент = Истина;
			РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
			Закрыть(РезультатЗакрытия);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНадписьВидаОперации(Форма)
	
	ТекущийКод = Форма.Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Форма.КодВидаОперации);
	
	Если ТекущийКод <> Неопределено Тогда
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

