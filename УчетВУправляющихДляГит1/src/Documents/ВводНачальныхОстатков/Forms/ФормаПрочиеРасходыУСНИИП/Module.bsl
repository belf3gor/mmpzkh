////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;

	УстановитьФункциональныеОпцииФормы();

	Элементы.ПодразделениеОрганизации.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	ЗаголовокОборотыИП  = НСтр("ru='Материалы, неоплаченные поставщикам:'");

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименяетсяУСН	= УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, КонецМесяца(Объект.Дата) + 1);
	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, КонецМесяца(Объект.Дата) + 1);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;

	ПроверитьКорректностьИтоговТаблицы("МПЗРеализованныеУСН");
	ПроверитьКорректностьИтоговТаблицы("УслугиУСН");
	ПроверитьКорректностьИтоговТаблицы("ДопРасходыУСН");

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РеализацияУСН", Объект.МПЗРеализованныеУСН.Выгрузить(, "Контрагент,ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("УслугиУСН", Объект.УслугиУСН.Выгрузить(, "Контрагент,ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("ДопРасходыУСН", Объект.ДопРасходыУСН.Выгрузить(, "Контрагент,ДоговорКонтрагента"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияУСН.Контрагент,
	|	РеализацияУСН.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговорыРеализации
	|ИЗ
	|	&РеализацияУСН КАК РеализацияУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиУСН.Контрагент,
	|	УслугиУСН.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговорыУслуг
	|ИЗ
	|	&УслугиУСН КАК УслугиУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРасходыУСН.Контрагент,
	|	ДопРасходыУСН.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДопРасходыУСН
	|ИЗ
	|	&ДопРасходыУСН КАК ДопРасходыУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыРеализации.Контрагент,
	|	ДоговорыРеализации.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ДоговорыРеализации.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтрагентЮрЛицо,
	|	ЕСТЬNULL(Договоры.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУЕ
	|ИЗ
	|	ДоговорыРеализации КАК ДоговорыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО (Договоры.Ссылка = ДоговорыРеализации.ДоговорКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыРеализации.Контрагент,
	|	ДоговорыРеализации.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ДоговорыРеализации.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(Договоры.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|ИЗ
	|	ДоговорыУслуг КАК ДоговорыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО (Договоры.Ссылка = ДоговорыРеализации.ДоговорКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыРеализации.Контрагент,
	|	ДоговорыРеализации.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ДоговорыРеализации.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(Договоры.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|ИЗ
	|	ДопРасходыУСН КАК ДоговорыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО (Договоры.Ссылка = ДоговорыРеализации.ДоговорКонтрагента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыРеализации.ДоговорКонтрагента,
	|	ДоговорыРеализации.Контрагент,
	|	ЕСТЬNULL(Договоры.РасчетыВУсловныхЕдиницах, ЛОЖЬ)";

	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТаблицы Из Объект.МПЗРеализованныеУСН Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда

			СтрокаДоговора = ТаблицаДоговоров.Найти(СтрокаТаблицы.ДоговорКонтрагента, "ДоговорКонтрагента");
			Если СтрокаДоговора <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаДоговора.КонтрагентЮрЛицо;
				СтрокаТаблицы.РасчетыВУЕ       = СтрокаДоговора.РасчетыВУЕ;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда

			СтрокаКонтрагента = ТаблицаДоговоров.Найти(СтрокаТаблицы.Контрагент, "Контрагент");
			Если СтрокаКонтрагента <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаКонтрагента.КонтрагентЮрЛицо;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			СтрокаТаблицы.КонтрагентЮрЛицо = Истина;			

		КонецЕсли;

		Если НЕ СтрокаТаблицы.КонтрагентЮрЛицо Тогда
			СтрокаТаблицы.РасчетыВУЕ = Истина;
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.УслугиУСН Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда

			СтрокаДоговора = ТаблицаДоговоров.Найти(СтрокаТаблицы.ДоговорКонтрагента, "ДоговорКонтрагента");
			Если СтрокаДоговора <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаДоговора.КонтрагентЮрЛицо;
				СтрокаТаблицы.РасчетыВУЕ       = СтрокаДоговора.РасчетыВУЕ;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда

			СтрокаКонтрагента = ТаблицаДоговоров.Найти(СтрокаТаблицы.Контрагент, "Контрагент");
			Если СтрокаКонтрагента <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаКонтрагента.КонтрагентЮрЛицо;
			КонецЕсли;

		КонецЕсли;

		Если НЕ СтрокаТаблицы.КонтрагентЮрЛицо Тогда
			СтрокаТаблицы.РасчетыВУЕ = Истина;
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.ДопРасходыУСН Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда

			СтрокаДоговора = ТаблицаДоговоров.Найти(СтрокаТаблицы.ДоговорКонтрагента, "ДоговорКонтрагента");
			Если СтрокаДоговора <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаДоговора.КонтрагентЮрЛицо;
				СтрокаТаблицы.РасчетыВУЕ       = СтрокаДоговора.РасчетыВУЕ;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда

			СтрокаКонтрагента = ТаблицаДоговоров.Найти(СтрокаТаблицы.Контрагент, "Контрагент");
			Если СтрокаКонтрагента <> Неопределено Тогда
				СтрокаТаблицы.КонтрагентЮрЛицо = СтрокаКонтрагента.КонтрагентЮрЛицо;
			КонецЕсли;

		КонецЕсли;

		Если НЕ СтрокаТаблицы.КонтрагентЮрЛицо Тогда
			СтрокаТаблицы.РасчетыВУЕ = Истина;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура МПЗРеализованныеУСНКонтрагентПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.МПЗРеализованныеУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	СтрокаДокумента.КонтрагентЮрЛицо = ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Если СтрокаДокумента.КонтрагентЮрЛицо Тогда

		МассивВидовДоговоров = Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(СтрокаДокумента.ДоговорКонтрагента,
			СтрокаДокумента.Контрагент, Объект.Организация, МассивВидовДоговоров);

	КонецЕсли;

	МПЗРеализованныеУСНДоговорПриИзмененииСервер(ИндетификаторСтроки);

КонецПроцедуры

&НаСервере
Процедура МПЗРеализованныеУСНДоговорПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.МПЗРеализованныеУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СтрокаДокумента.Валюта = ПараметрыДоговора.ВалютаВзаиморасчетов;
		СтрокаДокумента.РасчетыВУЕ = ПараметрыДоговора.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Валюта) ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		СтрокаДокумента.Валюта     = ВалютаРегламентированногоУчета;
		СтрокаДокумента.РасчетыВУЕ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УслугиУСНКонтрагентПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.УслугиУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	СтрокаДокумента.КонтрагентЮрЛицо = ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Если СтрокаДокумента.КонтрагентЮрЛицо Тогда

		МассивВидовДоговоров = Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(СтрокаДокумента.ДоговорКонтрагента,
			СтрокаДокумента.Контрагент, Объект.Организация, МассивВидовДоговоров);

	КонецЕсли;

	УслугиУСНДоговорПриИзмененииСервер(ИндетификаторСтроки);

КонецПроцедуры

&НаСервере
Процедура УслугиУСНДоговорПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.УслугиУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СтрокаДокумента.Валюта     = ПараметрыДоговора.ВалютаВзаиморасчетов;
		СтрокаДокумента.РасчетыВУЕ = ПараметрыДоговора.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Валюта) ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		СтрокаДокумента.Валюта     = ВалютаРегламентированногоУчета;
		СтрокаДокумента.РасчетыВУЕ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДопРасходыУСНКонтрагентПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.ДопРасходыУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	СтрокаДокумента.КонтрагентЮрЛицо = ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Если СтрокаДокумента.КонтрагентЮрЛицо Тогда

		МассивВидовДоговоров = Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(СтрокаДокумента.ДоговорКонтрагента,
			СтрокаДокумента.Контрагент, Объект.Организация, МассивВидовДоговоров);

	КонецЕсли;

	ДопРасходыУСНДоговорПриИзмененииСервер(ИндетификаторСтроки);

КонецПроцедуры

&НаСервере
Процедура ДопРасходыУСНДоговорПриИзмененииСервер(ИндетификаторСтроки)

	СтрокаДокумента = Объект.ДопРасходыУСН.НайтиПоИдентификатору(ИндетификаторСтроки);

	Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СтрокаДокумента.Валюта = ПараметрыДоговора.ВалютаВзаиморасчетов;
		СтрокаДокумента.РасчетыВУЕ = ПараметрыДоговора.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Валюта) ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
		СтрокаДокумента.Валюта     = ВалютаРегламентированногоУчета;
		СтрокаДокумента.РасчетыВУЕ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьИтоговТаблицы(ИмяТабличнойЧасти)

	СписокВалют = Объект[ИмяТабличнойЧасти].Выгрузить(, "Валюта");
	СписокВалют.Свернуть("Валюта");
	ВидимостьИтогов = СписокВалют.Количество() < 2;
	Если НЕ Элементы[ИмяТабличнойЧасти].Подвал = ВидимостьИтогов Тогда
		Элементы[ИмяТабличнойЧасти].Подвал = ВидимостьИтогов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата = ДатаВводаОстатков;
	КонецЕсли;

	УстановитьФункциональныеОпцииФормы();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой();
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОборотыУстановитьОтборСтрок()

	СтрокаТаблицы = Элементы.МПЗРеализованныеИП.ТекущиеДанные;

	Если СтрокаТаблицы <> Неопределено Тогда

		Элементы.Обороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru='Материалы, неоплаченные поставщикам, израсходованные на производство номенклатуры ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокОборотыИП = ТекстЗаголовка;

	Иначе

		Элементы.Обороты.ОтборСтрок = Неопределено;
		ЗаголовокОборотыИП = НСтр("ru='Материалы, неоплаченные поставщикам:'");

	КонецЕсли;

	ОбновитьИтогиОбороты();

	Элементы.Обороты.Доступность = НЕ СтрокаТаблицы = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиОбороты()

	ОборотыИтогСтоимость = 0;
	ОборотыИтогНДС = 0;

	СтрокаТаблицы = Элементы.Обороты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		ОборотыИтогСтоимость = ОборотыИтогСтоимость + ЭлементМассиваСтрок.Сумма;
		ОборотыИтогНДС       = ОборотыИтогНДС + ЭлементМассиваСтрок.НДС;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьХарактераДеятельности()
		
	СтрокаТаблицы = Элементы.ПрочиеРасходыИП.ТекущиеДанные;
		
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступность = Истина;
	
	СтатьяЗатрат = СтрокаТаблицы.СтатьяЗатрат;
	
	Если ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
		ДанныеСтрокаТаблицы = Новый Структура("СтатьяЗатрат");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);		
		
		СтрокаТаблицы.НеПринимается = ПолучитьПараметрыСтатьиЗатрат(ДанныеСтрокаТаблицы) = ПредопределенноеЗначение("Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения");

		Если СтрокаТаблицы.НеПринимается Тогда
			УстановитьДоступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		
		ДанныеСтрокаТаблицы = Новый Структура("СтатьяЗатрат");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);		
		
		Если НЕ ПолучитьПараметрыПрочихДоходовИРасходов(ДанныеСтрокаТаблицы) Тогда
			УстановитьДоступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Если УстановитьДоступность Тогда
		Элементы.ПрочиеРасходыИПНоменклатурнаяГруппа.Доступность = Истина;
		Элементы.ПрочиеРасходыИПХарактерДеятельности.Доступность = Истина;
	
	Иначе
		
		Элементы.ПрочиеРасходыИПНоменклатурнаяГруппа.Доступность = Ложь;
		Элементы.ПрочиеРасходыИПХарактерДеятельности.Доступность = Ложь;
				
		СтрокаТаблицы.ХарактерДеятельности = Неопределено;
		СтрокаТаблицы.НоменклатурнаяГруппа = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьУслугу(ДанныеСтрокаТаблицы)
	
	ДанныеСтрокаТаблицы.Услуга = ДанныеСтрокаТаблицы.Номенклатура.Услуга;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСтатьиЗатрат(ДанныеСтрокаТаблицы)
	
	Возврат ДанныеСтрокаТаблицы.СтатьяЗатрат.ВидРасходовНУ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПрочихДоходовИРасходов(ДанныеСтрокаТаблицы)
	
	Возврат ДанныеСтрокаТаблицы.СтатьяЗатрат.ПринятиеКналоговомуУчету;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеГруппойНДСиИП(Форма)
	
	Элементы = Форма.Элементы;
	СтрокаТаблицы = Элементы.МПЗРеализованныеИП.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Элементы.ГруппаОбороты.Доступность = Ложь;
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусыОплатыРасходовИП) Тогда
			Элементы.ГруппаОбороты.Доступность = Ложь;			
		ИначеЕсли СтрокаТаблицы.СтатусыОплатыРасходовИП = ПредопределенноеЗначение("Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем") Тогда			
			Элементы.ГруппаОбороты.Доступность = Ложь;
		Иначе
			Элементы.ГруппаОбороты.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условное оформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Форма.ПрименяетсяУСН Тогда
	
		// УСН

		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УСННоменклатураПроинициализировано")
			И Элементы.ГруппаСтраницыУСН.ТекущаяСтраница = Элементы.ГруппаУСННоменклатура Тогда

			Форма.УстановитьУсловноеОформлениеУСННоменклатура();
		
		ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("УСНУслугиПроинициализировано")
			И Элементы.ГруппаСтраницыУСН.ТекущаяСтраница = Элементы.ГруппаУСНУслуги Тогда
			
			Форма.УстановитьУсловноеОформлениеУСНУслуги();

		ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("УСНДополнительныеРасходыПроинициализировано")
			И Элементы.ГруппаСтраницыУСН.ТекущаяСтраница = Элементы.ГруппаУСНДополнительныеРасходы Тогда
			
			Форма.УстановитьУсловноеОформлениеУСНДополнительныеРасходы();

		КонецЕсли;
		
	ИначеЕсли Форма.ПлательщикНДФЛ Тогда
		
		// ИП
	
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ИПНоменклатураПроинициализировано")
			И Элементы.ГруппаПанельИП.ТекущаяСтраница = Элементы.ГруппаИПНоменклатура Тогда

			Форма.УстановитьУсловноеОформлениеИПНоменклатура();
		
		ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ИППрочиеРасходыПроинициализировано")
			И Элементы.ГруппаПанельИП.ТекущаяСтраница = Элементы.ГруппаИППрочиеРасходы Тогда
			
			Форма.УстановитьУсловноеОформлениеИППрочиеРасходы();

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУСННоменклатура() Экспорт

	НастройкиУсловногоОформления.Вставить("УСННоменклатураПроинициализировано", Истина);


	// МПЗРеализованныеУСНДоговорКонтрагента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеУСНДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗРеализованныеУСН.КонтрагентЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// МПЗРеализованныеУСНВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеУСНВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗРеализованныеУСН.РасчетыВУЕ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// МПЗРеализованныеУСНКонтрагент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеУСНКонтрагент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗРеализованныеУСН.КонтрагентЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУСНУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("УСНУслугиПроинициализировано", Истина);


	// УслугиУСНДоговорКонтрагента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиУСНДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УслугиУСН.КонтрагентЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиУСНВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиУСНВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УслугиУСН.РасчетыВУЕ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУСНДополнительныеРасходы() Экспорт

	НастройкиУсловногоОформления.Вставить("УСНДополнительныеРасходыПроинициализировано", Истина);


	// ДопРасходыУСНДоговорКонтрагента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДопРасходыУСНДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДопРасходыУСН.КонтрагентЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДопРасходыУСНВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДопРасходыУСНВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДопРасходыУСН.РасчетыВУЕ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИПНоменклатура() Экспорт

	НастройкиУсловногоОформления.Вставить("ИПНоменклатураПроинициализировано", Истина);

	// МПЗРеализованныеИПРасчетныйДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеИПРасчетныйДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗРеализованныеИП.СтатусыОплатыРасходовИП", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыРасходовИП.НеОплачено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// МПЗРеализованныеИПСумма, МПЗРеализованныеИППартия

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеИПСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗРеализованныеИППартия");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗРеализованныеИП.СтатусыОплатыРасходовИП", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИППрочиеРасходы() Экспорт

	НастройкиУсловногоОформления.Вставить("ИППрочиеРасходыПроинициализировано", Истина);

	// ПрочиеРасходыИПНоменклатурнаяГруппа, ПрочиеРасходыИПХарактерДеятельности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочиеРасходыИПНоменклатурнаяГруппа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочиеРасходыИПХарактерДеятельности");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПрочиеРасходыИП.НеПринимается", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыУСНПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаПанельИППриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ МПЗРеализованныеУСН

&НаКлиенте
Процедура МПЗРеализованныеУСНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТаблицы = Элементы.МПЗРеализованныеУСН.ТекущиеДанные;

		СтрокаТаблицы.Валюта           = ВалютаРегламентированногоУчета;
		СтрокаТаблицы.СчетУчета        = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТоварыНаСкладах");
		СтрокаТаблицы.СтатусыПартийУСН = ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.Списанные");
		СтрокаТаблицы.ОтражениеВУСН    = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
		СтрокаТаблицы.Контрагент       = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		СтрокаТаблицы.КонтрагентЮрЛицо = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНПриИзменении(Элемент)

	ПроверитьКорректностьИтоговТаблицы("МПЗРеализованныеУСН");

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ПроверитьКорректностьИтоговТаблицы("МПЗРеализованныеУСН");

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.МПЗРеализованныеУСН.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеУСН.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНКонтрагентПриИзменении(Элемент)

	МПЗРеализованныеУСНКонтрагентПриИзмененииСервер(Элементы.МПЗРеализованныеУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.МПЗРеализованныеУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Контрагент Тогда
		СтрокаТаблицы.ДокументОприходования	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНДоговорКонтрагентаПриИзменении(Элемент)

	МПЗРеализованныеУСНДоговорПриИзмененииСервер(Элементы.МПЗРеализованныеУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.МПЗРеализованныеУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорКонтрагента Тогда
		СтрокаТаблицы.ДокументОприходования	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы	= Элементы.МПЗРеализованныеУСН.ТекущиеДанные;
	СтрокаТаблицы.Контрагент       = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	СтрокаТаблицы.КонтрагентЮрЛицо = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеУСНРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.МПЗРеализованныеУСН.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеУСН.Реквизиты.ДокументОприходования.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ УслугиУСН

&НаКлиенте
Процедура УслугиУСНПриИзменении(Элемент)

	ПроверитьКорректностьИтоговТаблицы("УслугиУСН");

КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ПроверитьКорректностьИтоговТаблицы("УслугиУСН");

КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНКонтрагентПриИзменении(Элемент)

	УслугиУСНКонтрагентПриИзмененииСервер(Элементы.УслугиУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.УслугиУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Контрагент Тогда
		СтрокаТаблицы.РасчетныйДокумент	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНДоговорКонтрагентаПриИзменении(Элемент)

	УслугиУСНДоговорПриИзмененииСервер(Элементы.УслугиУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.УслугиУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорКонтрагента Тогда
		СтрокаТаблицы.РасчетныйДокумент	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУСНРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.УслугиУСН.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеУСН.Реквизиты.ДокументОприходования.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДопРасходыУСН

&НаКлиенте
Процедура ДопРасходыУСНПриИзменении(Элемент)

	ПроверитьКорректностьИтоговТаблицы("ДопРасходыУСН");

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ПроверитьКорректностьИтоговТаблицы("ДопРасходыУСН");

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда

		СтрокаТаблицы = Элементы.ДопРасходыУСН.ТекущиеДанные;

		СтрокаТаблицы.ОтражениеВУСН    = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНКонтрагентПриИзменении(Элемент)

	ДопРасходыУСНКонтрагентПриИзмененииСервер(Элементы.ДопРасходыУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.ДопРасходыУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Контрагент Тогда
		СтрокаТаблицы.РасчетныйДокумент	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНДоговорКонтрагентаПриИзменении(Элемент)

	ДопРасходыУСНДоговорПриИзмененииСервер(Элементы.ДопРасходыУСН.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.ДопРасходыУСН.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорКонтрагента Тогда
		СтрокаТаблицы.РасчетныйДокумент	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.ДопРасходыУСН.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеУСН.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыУСНРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.ДопРасходыУСН.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеУСН.Реквизиты.ДокументОприходования.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ МПЗРеализованныеИП

&НаКлиенте
Процедура МПЗРеализованныеИППриАктивизацииСтроки(Элемент)
	
	ОборотыУстановитьОтборСтрок();
	УправлениеГруппойНДСиИП(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИППередУдалением(Элемент, Отказ)

	СтрокаТаблицы	= Элементы.МПЗРеализованныеИП.ТекущиеДанные;

	ПодчиненныеСтроки	= Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
	
	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.Обороты.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.МПЗРеализованныеИП.ТекущиеДанные;
	СтрокаТаблицы.Ключ	= Новый УникальныйИдентификатор;
	ОборотыУстановитьОтборСтрок();

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИПНоменклатураПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.МПЗРеализованныеИП.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ВидМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности, Партия, Количество,
		|Сумма, НДС, НДСВключенВстоимость, Собственный, СтатусыОплатыРасходовИП, Выручка, НДСНачисленный,
		|РасчетныйДокумент, Услуга, Ключ");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);		
	ОпределитьУслугу(ДанныеСтрокаТаблицы);
	СтрокаТаблицы.Услуга = ДанныеСтрокаТаблицы.Услуга;
	
	Если СтрокаТаблицы.Услуга Тогда
		СтрокаТаблицы.ВидМПЗ = ПредопределенноеЗначение("Перечисление.ВидыМПЗ.Продукция");
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусыОплатыРасходовИП) Тогда
			СтрокаТаблицы.СтатусыОплатыРасходовИП = ПредопределенноеЗначение("Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем");
		КонецЕсли;
		
		Если СтрокаТаблицы.СтатусыОплатыРасходовИП <> ПредопределенноеЗначение("Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем") Тогда
			
			ПодчиненныеСтроки	= Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
			
			Если ПодчиненныеСтроки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого Строка Из ПодчиненныеСтроки Цикл
				Объект.Обороты.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОборотыУстановитьОтборСтрок();
	УправлениеГруппойНДСиИП(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИППартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.МПЗРеализованныеИП.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеИП.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИПРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.МПЗРеализованныеИП.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗРеализованныеИП.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МПЗРеализованныеИПСтатусыОплатыРасходовИППриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.МПЗРеализованныеИП.ТекущиеДанные;
	
	Если СтрокаТаблицы.СтатусыОплатыРасходовИП = ПредопределенноеЗначение("Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем") Тогда			
		
		ПодчиненныеСтроки	= Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
		
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Строка Из ПодчиненныеСтроки Цикл
			Объект.Обороты.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеГруппойНДСиИП(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Обороты

&НаКлиенте
Процедура ОборотыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.Обороты.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Обороты.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриИзменении(Элемент)
	
	ОбновитьИтогиОбороты();
		
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	    = Элементы.Обороты.ТекущиеДанные;
	СтрокаТаблицы.Ключ	= Элементы.Обороты.ОтборСтрок.Ключ;

	ОборотыИтогСтоимость = ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС       = ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.Обороты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОборотыИтогСтоимость = ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС       = ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДопРасходыИП

&НаКлиенте
Процедура ДопРасходыИППартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.ДопРасходыИП.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДопРасходыИП.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыИППартияМПЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.ДопРасходыИП.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДопРасходыИП.Реквизиты.ПартияМПЗ.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ПрочиеРасходыИП

&НаКлиенте
Процедура ПрочиеРасходыИППриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьХарактераДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыИППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьДоступностьХарактераДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыИППартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.ПрочиеРасходыИП.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ПрочиеРасходыИП.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыИПСтатьяЗатратПриИзменении(Элемент)
	
	УстановитьДоступностьХарактераДеятельности();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
