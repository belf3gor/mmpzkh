////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПриСменеСтраницы(Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатураСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ПриСменеСтраницы(ТекущаяСтраница);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <НоменклатураНаСкладе>

&НаКлиенте
Процедура НоменклатураНаСкладеПриАктивизацииСтроки(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.ДанныеПоСФНоменклатураНаСкладе);
		
	ОборотыУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.ОборотыНоменклатураНаСкладе);
		
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.СтруктураСтоимостиЗапасов);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеПередУдалением(Элемент, Отказ)

	СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ПодчиненныеСтроки = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
	ПодчиненныеСтроки = Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.Обороты.Удалить(Строка);
	КонецЦикла;
	
	ПодчиненныеСтроки = Объект.СтруктураСтоимостиЗапасов.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.СтруктураСтоимостиЗапасов.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	Если НЕ Копирование Тогда
		СтрокаТаблицы.СтатусыПартийУСН	= ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.Купленные");
		СтрокаТаблицы.Валюта			= ВалютаРегламентированногоУчета;
		СтрокаТаблицы.ОтражениеВУСН	= ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	КонецЕсли;

	СтрокаТаблицы.Ключ = Новый УникальныйИдентификатор;
	
	ДанныеСФУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.ДанныеПоСФНоменклатураНаСкладе);
		
	ОборотыУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.ОборотыНоменклатураНаСкладе);
		
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
		Элементы.СтруктураСтоимостиЗапасов);


КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация, РаздельныйУчетНДС",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация, РаздельныйУчетНДС);

	СчетПриИзмененииСервер_НоменклатураНаСкладе(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
	ДанныеСФУстановитьОтборСтрок(СтрокаТаблицы, Элементы.ДанныеПоСФНоменклатураНаСкладе);

	Если ТипЗнч(СтрокаТаблицы.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда

		МассивСтрок = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
		Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл
			Объект.ДанныеПоСФ.Удалить(ЭлементМассиваСтрок);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеНоменклатураПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ДанныеСФУстановитьОтборСтрок(СтрокаТаблицы, Элементы.ДанныеПоСФНоменклатураНаСкладе);
	ОборотыУстановитьОтборСтрок(СтрокаТаблицы, Элементы.ОборотыНоменклатураНаСкладе);
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(СтрокаТаблицы, Элементы.СтруктураСтоимостиЗапасов);

	Если СтрокаТаблицы.Номенклатура = Неопределено Тогда
		СтрокаТаблицы.НоменклатураКод		= "";
		СтрокаТаблицы.НоменклатураАртикул	= "";
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		РеквизитыНоменклатуры	= ПолучитьКодАртикул(СтрокаТаблицы.Номенклатура, "Код, Артикул");
		СтрокаТаблицы.НоменклатураКод		= РеквизитыНоменклатуры.Код;
		СтрокаТаблицы.НоменклатураАртикул	= РеквизитыНоменклатуры.Артикул;
	Иначе
		РеквизитыНоменклатуры	= ПолучитьКодАртикул(СтрокаТаблицы.Номенклатура, "Код");
		СтрокаТаблицы.НоменклатураКод		= РеквизитыНоменклатуры.Код;
		СтрокаТаблицы.НоменклатураАртикул	= "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы	= Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.НоменклатураНаСкладе.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеПартияПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			СтрокаТаблицы.РасчетныйДокумент = СтрокаТаблицы.Партия;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеСуммаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютныйНДС	= СтрокаТаблицы.НДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.НоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.НоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладеРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.НоменклатураНаСкладе.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СпецодеждаИСпецоснасткаВЭксплуатации>

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииПриАктивизацииСтроки(Элемент)

	СтрокаТаблицы	= Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ДанныеСФУстановитьОтборСтрок(СтрокаТаблицы,
		Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации);

	УстановитьПараметрыВыбораНазначенияИспользования(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииПередУдалением(Элемент, Отказ)

	СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ПодчиненныеСтроки = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;
	
	Если НЕ Копирование Тогда
		СтрокаТаблицы.СтатусыПартийУСН	= ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.Купленные");
		СтрокаТаблицы.Валюта			= ВалютаРегламентированногоУчета;
	КонецЕсли;

	СтрокаТаблицы.Ключ	= Новый УникальныйИдентификатор;
	ДанныеСФУстановитьОтборСтрок(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные,
		Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации);
	

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;
	
	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	СчетПриИзмененииСервер_СпецодеждаИСпецоснасткаВЭксплуатации(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

	УстановитьПараметрыВыбораНазначенияИспользования(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииНоменклатураПриИзменении(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные,
		Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.СпецодеждаИСпецоснасткаВЭксплуатации.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииПартияПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		СтрокаТаблицы.РасчетныйДокумент = СтрокаТаблицы.Партия;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.СпецодеждаИСпецоснасткаВЭксплуатации.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСтатусыОплатыРасходовУСНПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;
	
	Если СтрокаТаблицы.СтатусыОплатыРасходовУСН = ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.НеОплачено") Тогда
		СтрокаТаблицы.СтатусыПартийУСН = ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.Списанные");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммыСпецМатериалы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииНДСПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютныйНДС	= СтрокаТаблицы.НДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ЗаполнитьВРВПервоначальнойСтоимости(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	ЗаполнитьВРВПервоначальнойСтоимости(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПервоначальнаяСтоимостьПРПриИзменении(Элемент)
	
	ЗаполнитьВРВПервоначальнойСтоимости(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <МатериалыПереданныеВПереработку>

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуПриАктивизацииСтроки(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные,
		Элементы.ДанныеПоСФМатериалыПереданныеВПереработку);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуПередУдалением(Элемент, Отказ)

	СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	ПодчиненныеСтроки = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	Если НЕ Копирование Тогда
		СтрокаТаблицы.СтатусыПартийУСН	= ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.ВПереработке");
		СтрокаТаблицы.Валюта			= ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	СтрокаТаблицы.Ключ = Новый УникальныйИдентификатор;
	ДанныеСФУстановитьОтборСтрок(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные,
		Элементы.ДанныеПоСФМатериалыПереданныеВПереработку);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;
	
	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	СчетПриИзмененииСервер_МатериалыПереданныеВПереработку(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуНоменклатураПриИзменении(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные,
		Элементы.ДанныеПоСФМатериалыПереданныеВПереработку);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МатериалыПереданныеВПереработку.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуПартияПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		СтрокаТаблицы.РасчетныйДокумент = СтрокаТаблицы.Партия;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МатериалыПереданныеВПереработку.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуНДСПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютныйНДС	= СтрокаТаблицы.НДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереданныеВПереработкуСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ТоварыВРозничнойТорговлеАТТ>

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТПриАктивизацииСтроки(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные,
		Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТПередУдалением(Элемент, Отказ)

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	ПодчиненныеСтроки = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	Если НЕ Копирование Тогда
		СтрокаТаблицы.СтатусыПартийУСН	= ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.Купленные");
		СтрокаТаблицы.Валюта			= ВалютаРегламентированногоУчета;
		СтрокаТаблицы.ОтражениеВУСН		= ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	КонецЕсли;
	
	СтрокаТаблицы.Ключ = Новый УникальныйИдентификатор;
	ДанныеСФУстановитьОтборСтрок(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные,
		Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;
	
	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	СчетПриИзмененииСервер_ТоварыВРозничнойТорговлеАТТ(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТНоменклатураПриИзменении(Элемент)

	ДанныеСФУстановитьОтборСтрок(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные,
		Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ТоварыВРозничнойТорговлеАТТ.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТПартияПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		СтрокаТаблицы.РасчетныйДокумент = СтрокаТаблицы.Партия;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ТоварыВРозничнойТорговлеАТТ.Реквизиты.РасчетныйДокумент.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютныйНДС = СтрокаТаблицы.НДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозничнойТорговлеАТТТорговаяНаценкаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютнаяСумма	= СтрокаТаблицы.Сумма - СтрокаТаблицы.ТорговаяНаценка;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДанныеПоСФНоменклатураНаСкладе>

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеПриИзменении(Элемент)

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидУчетаНДС", "НДСПолученный");
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	Элементы.ДанныеПоСФНоменклатураНаСкладеВидЦенности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриНачалеРедактирования(Элемент, Элементы.ДанныеПоСФНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриОкончанииРедактирования(Элементы.ДанныеПоСФНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеПоСФСчетФактураНачалоВыбора(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеВидЦенностиПриИзменении(Элемент)

	ДанныеПоСФВидЦенностиПриИзменении(Элементы.ДанныеПоСФНоменклатураНаСкладе.ТекущиеДанные, "НоменклатураНаСкладе")

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФНоменклатураНаСкладеСтоимостьПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Обороты>

&НаКлиенте
Процедура ОборотыНоменклатураНаСкладеПриИзменении(Элемент)

	ОбновитьИтогиОбороты();

КонецПроцедуры

&НаКлиенте
Процедура ОборотыНоменклатураНаСкладеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	ОборотыПриНачалеРедактирования(Элемент, Элементы.ОборотыНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОборотыНоменклатураНаСкладеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	ОборотыПриОкончанииРедактирования(Элементы.ОборотыНоменклатураНаСкладе.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОборотыНачалоВыбора(Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СтруктураСтоимостиЗапасов>

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриИзменении(Элемент)
	
	ОбновитьИтогиСтруктураСтоимостиЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиПриНачалеРедактирования(Элемент, Элементы.СтруктураСтоимостиЗапасов.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиПриОкончанииРедактирования(Элементы.СтруктураСтоимостиЗапасов.ТекущиеДанные);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации>

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииПриИзменении(Элемент)

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриНачалеРедактирования(Элемент, Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриОкончанииРедактирования(Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеПоСФСчетФактураНачалоВыбора(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииВидЦенностиПриИзменении(Элемент)

	ДанныеПоСФВидЦенностиПриИзменении(Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные, "СпецодеждаИСпецоснасткаВЭксплуатации")

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииСтоимостьПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалНазначениеИспользованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;
	
	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти(ТекущиеДанные);
	ЗаполнитьСпособПогашенияСтоимости_СпецодеждаИСпецоснасткаВЭксплуатации(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
	Если ТекущиеДанные.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
				
		ТекущиеДанные.Сумма			= 0;
		ТекущиеДанные.СуммаПР		= 0;
		ТекущиеДанные.СуммаВР		= 0;
		ТекущиеДанные.СуммаНУ		= 0;
		ТекущиеДанные.НДС			= 0;
		ТекущиеДанные.ВалютнаяСумма	= 0;
		ТекущиеДанные.ВалютныйНДС	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ < ДанныеПоСФМатериалыПереданныеВПереработку>

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуПриИзменении(Элемент)

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриНачалеРедактирования(Элемент, Элементы.ДанныеПоСФМатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриОкончанииРедактирования(Элементы.ДанныеПоСФМатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеПоСФСчетФактураНачалоВыбора(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуВидЦенностиПриИзменении(Элемент)

	ДанныеПоСФВидЦенностиПриИзменении(Элементы.ДанныеПоСФМатериалыПереданныеВПереработку.ТекущиеДанные, "МатериалыПереданныеВПереработку")

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФМатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФМатериалыПереданныеВПереработкуСтоимостьПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФМатериалыПереданныеВПереработку.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДанныеПоСФТоварыВРозничнойТорговлеАТТ>

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТПриИзменении(Элемент)

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриНачалеРедактирования(Элемент, Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФПриОкончанииРедактирования(Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДанныеПоСФСчетФактураНачалоВыбора(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТВидЦенностиПриИзменении(Элемент)

	ДанныеПоСФВидЦенностиПриИзменении(Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ.ТекущиеДанные, "ТоварыВРозничнойТорговлеАТТ")

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФТоварыВРозничнойТорговлеАТТСтоимостьПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормойСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("НоменклатураНаСкладеПроинициализировано")
		И Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница = Элементы.ГруппаНоменклатураНаСкладе Тогда

		Форма.УстановитьУсловноеОформлениеНоменклатураНаСкладе();
	
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("СпецодеждаИСпецоснасткаВЭксплуатацииПроинициализировано")
		И Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница = Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации Тогда
		
		Форма.УстановитьУсловноеОформлениеСпецодеждаИСпецоснасткаВЭксплуатации();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("МатериалыПереданныеВПереработкуПроинициализировано")
		И Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалыПереданныеВПереработку Тогда
		
		Форма.УстановитьУсловноеОформлениеМатериалыПереданныеВПереработку();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыВРозничнойТорговлеАТТПроинициализировано")
		И Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыВРозничнойТорговлеАТТ Тогда
		
		Форма.УстановитьУсловноеОформлениеТоварыВРозничнойТорговлеАТТ();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНоменклатураНаСкладе() Экспорт

	НастройкиУсловногоОформления.Вставить("НоменклатураНаСкладеПроинициализировано", Истина);


	// НоменклатураНаСкладеСуммаНУ, НоменклатураНаСкладеСуммаПР, НоменклатураНаСкладеСуммаВР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеСуммаВР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеНоменклатура

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеНоменклатура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоНоменклатура", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеСпособСтроительства

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеСпособСтроительства");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоСпособСтроительства", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеКоличество, НоменклатураНаСкладеОплачен

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеОплачен");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаКоличественный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеСклад

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеСклад");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоСклад", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеПартия

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеПартия");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РаздельныйУчетНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ПрименяетсяУСНДоходыМинусРасходы", ВидСравненияКомпоновкиДанных.Равно, Ложь);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоПартия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоПартия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РаздельныйУчетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоПартия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ПрименяетсяУСНДоходыМинусРасходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеНДС, НоменклатураНаСкладеНДСВключенВстоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеНДСВключенВстоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НоменклатураНаСкладе.СчетУчетаСубконтоПартия", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФНоменклатураНаСкладеНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФНоменклатураНаСкладеНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// НоменклатураНаСкладеНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НоменклатураНаСкладеНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НоменклатураНаСкладе.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НоменклатураНаСкладе.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСпецодеждаИСпецоснасткаВЭксплуатации() Экспорт

	НастройкиУсловногоОформления.Вставить("СпецодеждаИСпецоснасткаВЭксплуатацииПроинициализировано", Истина);


	// СпецодеждаИСпецоснасткаВЭксплуатацииСуммаНУ, СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПервоначальнаяСтоимостьНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПервоначальнаяСтоимостьПР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпецодеждаИСпецоснасткаВЭксплуатации.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПодразделениеФизЛицо

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалПодразделениеФизЛицо");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпецодеждаИСпецоснасткаВЭксплуатации.СчетУчетаСубконтоРаботникОрганизации", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Следующие рекивизиты не используются при погашении сразу в момент передачи в эксплуатацию.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииСуммаВР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииВалютнаяСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииВалютныйНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпецодеждаИСпецоснасткаВЭксплуатацииВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпецодеждаИСпецоснасткаВЭксплуатации.ПогашатьСтоимостьПриПередачеВЭксплуатацию", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеМатериалыПереданныеВПереработку() Экспорт

	НастройкиУсловногоОформления.Вставить("МатериалыПереданныеВПереработкуПроинициализировано", Истина);


	// МатериалыПереданныеВПереработкуСуммаНУ, МатериалыПереданныеВПереработкуСуммаПР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПереданныеВПереработкуСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПереданныеВПереработкуСуммаПР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МатериалыПереданныеВПереработку.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФМатериалыПереданныеВПереработкуНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФМатериалыПереданныеВПереработкуНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// МатериалыПереданныеВПереработкуНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПереданныеВПереработкуНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.МатериалыПереданныеВПереработку.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.МатериалыПереданныеВПереработку.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыВРозничнойТорговлеАТТ() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыВРозничнойТорговлеАТТПроинициализировано", Истина);


	// ТоварыВРозничнойТорговлеАТТСуммаНУ, ТоварыВРозничнойТорговлеАТТСуммаПР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВРозничнойТорговлеАТТСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВРозничнойТорговлеАТТСуммаПР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВРозничнойТорговлеАТТ.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыВРозничнойТорговлеАТТНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВРозничнойТорговлеАТТНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВРозничнойТорговлеАТТ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВРозничнойТорговлеАТТ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФТоварыВРозничнойТорговлеАТТНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФТоварыВРозничнойТорговлеАТТНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;

	// Ограничение выбора счета учета:
	МассивСчетов      = Новый Массив;
	МассивИсключений  = Новый Массив;
	МассивСчетовНДС   = Новый Массив;
	МассивСчетовНДС.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);

	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Товары);

		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);

		МассивНТТ = Новый Массив;
		МассивНТТ.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ТоварыВРозничнойТорговлеНТТСчетУчета, МассивНТТ);

		МассивАТТ = Новый Массив;
		МассивАТТ.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ТоварыВРозничнойТорговлеАТТСчетУчета, МассивАТТ);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);

		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);

		МассивСпец = Новый Массив;
		МассивСпец.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		МассивСпец.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииСчетУчета, МассивСпец);

		МассивСпец = Новый Массив;
		МассивСпец.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.МатериалыПереданныеВПереработкуСчетУчета, МассивСпец);

	КонецЕсли;
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.СчетаИсключения = МассивИсключений;
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.НоменклатураНаСкладеСчетУчета, СчетаДляОтбора);

	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	СчетаНДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетовНДС, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоСФНоменклатураНаСкладеСчетУчетаНДС, СчетаНДС);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииСчетУчетаНДС, СчетаНДС);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоСФМатериалыПереданныеВПереработкуСчетУчетаНДС, СчетаНДС);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТСчетУчетаНДС, СчетаНДС);

	ПрочитатьПараметрыУчетнойПолитики();
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	БУ	= ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиСкладскойУчет	= БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;

	Элементы.НоменклатураНаСкладеСклад.Видимость	= ВестиСкладскойУчет;

	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Элементы.ГруппаНоменклатураНаСкладе.Заголовок	= НСтр("ru='Готовая продукция и полуфабрикаты'");
		Элементы.ГруппаМатериалыПереданныеВПереработку.Видимость 		= Ложь;
		Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.НоменклатураНаСкладеСпособСтроительства.Видимость		= Ложь;
		Элементы.НоменклатураНаСкладеРасчетныйДокумент.Видимость		= Ложь;
		Элементы.НоменклатураНаСкладеСтатусыОплатыРасходовУСН.Видимость	= Ложь;
		Элементы.НоменклатураНаСкладеОтражениеВУСН.Видимость			= Ложь;
		Элементы.НоменклатураНаСкладеНДС.Видимость						= Ложь;
		Элементы.НоменклатураНаСкладеОплачен.Видимость					= Ложь;		
		
		Элементы.ГруппаНоменклатураСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Элементы.ГруппаНоменклатураНаСкладе.Заголовок	= НСтр("ru='Капитальные вложения'");
		Элементы.ГруппаМатериалыПереданныеВПереработку.Видимость 		= Ложь;
		Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.НоменклатураНаСкладеРасчетныйДокумент.Видимость		= Ложь;
		Элементы.НоменклатураНаСкладеСтатусыОплатыРасходовУСН.Видимость	= Ложь;
		Элементы.НоменклатураНаСкладеОтражениеВУСН.Видимость			= Ложь;
		Элементы.НоменклатураНаСкладеНДС.Видимость						= Ложь;
		Элементы.НоменклатураНаСкладеВалюта.Видимость					= Ложь;
		Элементы.НоменклатураНаСкладеВалютнаяСумма.Видимость			= Ложь;
		Элементы.НоменклатураНаСкладеВалютныйНДС.Видимость				= Ложь;
		
		Элементы.ГруппаНоменклатураСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Элементы.ГруппаНоменклатураНаСкладе.Заголовок	= НСтр("ru='Товары на складе'");
		Элементы.ГруппаМатериалыПереданныеВПереработку.Видимость		= Ложь;
		Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.НоменклатураНаСкладеСпособСтроительства.Видимость		= Ложь;
		
		Элементы.ТоварыВРозничнойТорговлеАТТСуммаПР.Видимость = ПоддержкаПБУ18;
		Элементы.ТоварыВРозничнойТорговлеАТТСуммаВР.Видимость = ПоддержкаПБУ18;


	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Элементы.ГруппаНоменклатураНаСкладе.Заголовок = НСтр("ru='Материалы на складе'");
		Элементы.НоменклатураНаСкладеСпособСтроительства.Видимость		= Ложь;
		
		Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииСуммаПР.Видимость	= ПоддержкаПБУ18;
		Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииСуммаВР.Видимость	= ПоддержкаПБУ18;		
		Элементы.МатериалыПереданныеВПереработкуСуммаПР.Видимость		= ПоддержкаПБУ18;
		Элементы.МатериалыПереданныеВПереработкуСуммаВР.Видимость		= ПоддержкаПБУ18;
	КонецЕсли;
	
	Элементы.НоменклатураНаСкладеСуммаПР.Видимость = ПоддержкаПБУ18;
	Элементы.НоменклатураНаСкладеСуммаВР.Видимость = ПоддержкаПБУ18;
	
	НоменклатураНаСкладеНоменклатураПараметрыВыбора = Новый Массив;
	НоменклатураНаСкладеНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь)); 
	НоменклатураНаСкладеНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Заголовок", Элементы.ГруппаНоменклатураНаСкладе.Заголовок)); 
	Элементы.НоменклатураНаСкладеНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(НоменклатураНаСкладеНоменклатураПараметрыВыбора);	
	
	Элементы.ГруппаОборотыИП.Видимость = Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ЗаголовокДанныеПоСФ = НСтр("ru='Данные по счетам-фактурам:'");
	ЗаголовокОборотыИП  = НСтр("ru='Материалы, неоплаченные поставщикам:'");
	ЗаголовокСтруктураСтомостиЗапасов = НСтр("ru='Структура стоимости:'");
	
	Элементы.ПодразделениеОрганизации.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
													ИЛИ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
													
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыУчетнойПолитики()

	ДатаУчетнойПолитики = Объект.Дата + 86400;

	ПлательщикНДС						= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы	= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходы	            = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, ДатаУчетнойПолитики);
	УпрощенныйУчетНДС					= УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	ОценкаМПЗПоСредней					= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, ДатаУчетнойПолитики) = Перечисления.СпособыОценки.ПоСредней;
	РаздельныйУчетНДС					= УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики)
		И УчетнаяПолитика.СистемаНалогообложения(Объект.Организация, ДатаУчетнойПолитики) <> Перечисления.СистемыНалогообложения.Упрощенная;
	РаздельныйУчетНДСНаСчете19 			= УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, ДатаУчетнойПолитики);	
	СпособОценкиТоваровВРознице			= УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, ДатаУчетнойПолитики);
	ПлательщикНДФЛ						= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, ДатаУчетнойПолитики);
	ПоддержкаПБУ18                      = УчетнаяПолитика.ПоддержкаПБУ18(Объект.Организация, ДатаУчетнойПолитики);
	УчитыватьРасходыПоСтатьямЗатрат     = УчетнаяПолитика.УчитыватьРасходыПоСтатьямЗатрат(Объект.Организация, ДатаУчетнойПолитики);
	УчитыватьРасходыПоЭлементамЗатрат   = УчетнаяПолитика.УчитыватьРасходыПоЭлементамЗатрат(Объект.Организация, ДатаУчетнойПолитики);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И Объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;
		
	ИспользоватьВалютныйУчет	= БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
		
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		ПоказыватьПартии	= Истина;
	Иначе
		Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			
			ПоказыватьПартии = НЕ ОценкаМПЗПоСредней ИЛИ (НЕ УпрощенныйУчетНДС И НЕ ПрименяетсяУСНДоходы);
			
		Иначе
			ПоказыватьПартии = НЕ ОценкаМПЗПоСредней ИЛИ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС);
		КонецЕсли;
	КонецЕсли;
	
	// Показывать склад при вводе начальных остатков для УСН не требуется
	ПоказыватьСклад = Истина;
	Если ПрименяетсяУСНДоходыМинусРасходы И НЕ Объект.ОтражатьВБухгалтерскомУчете Тогда			
		ПоказыватьСклад = Ложь;
	КонецЕсли; 
	
	ЭтоКапитальныеВложения		= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
	ЭтоГотоваяПродукция			= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	РозницаПоПродажнойСтоимости	= СпособОценкиТоваровВРознице = ПредопределенноеЗначение("Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости");
	
	СчетУчетаТоваровВНТТ		= ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	СубконтоСтавкиНДС			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	РазделятьПоСтавкамНДСВНТТ	= СчетУчетаТоваровВНТТ.ВидыСубконто.Найти(СубконтоСтавкиНДС, "ВидСубконто") <> Неопределено;
	
	Элементы.НоменклатураНаСкладеПартия.Видимость					= ПоказыватьПартии;
	Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииПартия.Видимость	= ПоказыватьПартии;
	Элементы.МатериалыПереданныеВПереработкуПартия.Видимость		= ПоказыватьПартии;
	Элементы.ТоварыВРозничнойТорговлеАТТПартия.Видимость			= ПоказыватьПартии;
	
	Элементы.ТоварыВРозничнойТорговлеАТТТорговаяНаценка.Видимость	= РозницаПоПродажнойСтоимости;
	Элементы.ТоварыВРозничнойТорговлеНТТТорговаяНаценка.Видимость	= РозницаПоПродажнойСтоимости;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Элементы.ГруппаДанныеПоСФНоменклатураНаСкладе.Видимость					= ПлательщикНДС И НЕ УпрощенныйУчетНДС;
		Элементы.ГруппаДанныеПоСФМатериалыПереданныеВПереработку.Видимость		= Ложь;
		Элементы.ГруппаДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.ГруппаДанныеПоСФТоварыВРозничнойТорговлеАТТ.Видимость			= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеАТТ.Видимость					= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеНТТ.Видимость					= Ложь;
		
		Элементы.ДанныеПоСФНоменклатураНаСкладеСтоимость.Видимость				= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФНоменклатураНаСкладеНДСВключенВСтоимость.Видимость	= НЕ РаздельныйУчетНДСНаСчете19;
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Элементы.ГруппаДанныеПоСФНоменклатураНаСкладе.Видимость					= ПлательщикНДС И РаздельныйУчетНДС;
		Элементы.ГруппаДанныеПоСФМатериалыПереданныеВПереработку.Видимость		= ПлательщикНДС И РаздельныйУчетНДС;
		Элементы.ГруппаДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= ПлательщикНДС И РаздельныйУчетНДС;
		Элементы.ГруппаДанныеПоСФТоварыВРозничнойТорговлеАТТ.Видимость			= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеАТТ.Видимость					= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеНТТ.Видимость					= Ложь;
		Элементы.НоменклатураНаСкладеСклад.Видимость							= ПоказыватьСклад;
		
		Элементы.ДанныеПоСФНоменклатураНаСкладеСтоимость.Видимость								= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФНоменклатураНаСкладеНДСВключенВСтоимость.Видимость					= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииСтоимость.Видимость				= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатацииНДСВключенВСтоимость.Видимость	= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФМатериалыПереданныеВПереработкуСтоимость.Видимость					= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФМатериалыПереданныеВПереработкуНДСВключенВСтоимость.Видимость		= НЕ РаздельныйУчетНДСНаСчете19;
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Элементы.ГруппаДанныеПоСФНоменклатураНаСкладе.Видимость					= ПлательщикНДС И РаздельныйУчетНДС;
		Элементы.ГруппаДанныеПоСФМатериалыПереданныеВПереработку.Видимость		= Ложь;
		Элементы.ГруппаДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.ГруппаДанныеПоСФТоварыВРозничнойТорговлеАТТ.Видимость			= ПлательщикНДС И РаздельныйУчетНДС;
		Элементы.ГруппаТоварыВРозничнойТорговлеАТТ.Видимость					= РозницаПоПродажнойСтоимости;
		Элементы.ГруппаТоварыВРозничнойТорговлеНТТ.Видимость					= РозницаПоПродажнойСтоимости;
		Элементы.НоменклатураНаСкладеСклад.Видимость							= ПоказыватьСклад;
		Элементы.ТоварыВРозничнойТорговлеАТТСклад.Видимость						= ПоказыватьСклад;
		
		Элементы.ДанныеПоСФНоменклатураНаСкладеСтоимость.Видимость						= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФНоменклатураНаСкладеНДСВключенВСтоимость.Видимость			= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТСтоимость.Видимость				= НЕ РаздельныйУчетНДСНаСчете19;
		Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТНДСВключенВСтоимость.Видимость	= НЕ РаздельныйУчетНДСНаСчете19;
		
		Если НЕ РозницаПоПродажнойСтоимости Тогда
			Элементы.ГруппаНоменклатураСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Иначе
			Элементы.ГруппаНоменклатураСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Элементы.ГруппаДанныеПоСФНоменклатураНаСкладе.Видимость					= Ложь;
		Элементы.ГруппаДанныеПоСФМатериалыПереданныеВПереработку.Видимость		= Ложь;
		Элементы.ГруппаДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации.Видимость	= Ложь;
		Элементы.ГруппаДанныеПоСФТоварыВРозничнойТорговлеАТТ.Видимость			= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеАТТ.Видимость					= Ложь;
		Элементы.ГруппаТоварыВРозничнойТорговлеНТТ.Видимость					= Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКолонокВалютыИВалютныхСумм.Видимость				= ПрименяетсяУСНДоходыМинусРасходы И ИспользоватьВалютныйУчет 
		И НЕ ЭтоКапитальныеВложения И НЕ ЭтоГотоваяПродукция;
	Элементы.ГруппаКолонокВалютыИВалютныхСуммСпецодежда.Видимость	= ПрименяетсяУСНДоходыМинусРасходы И ИспользоватьВалютныйУчет;
	Элементы.ГруппаКолонокВалютаМатериалыВпереработке.Видимость		= ПрименяетсяУСНДоходыМинусРасходы И ИспользоватьВалютныйУчет;
	Элементы.ГруппаКолонокВалютаТоварыВАТТ.Видимость				= ПрименяетсяУСНДоходыМинусРасходы И ИспользоватьВалютныйУчет;

	Элементы.ТоварыВРозничнойТорговлеНТТСтавкаНДС.Видимость			= РозницаПоПродажнойСтоимости И РазделятьПоСтавкамНДСВНТТ;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);
		
	Если ПлательщикНДФЛ Тогда
		Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
			Элементы.ГруппаДанныеПоСФОборотыИПСтруктураСтоимости.ТекущаяСтраница = Элементы.ГруппаОборотыИП;			
			Элементы.НоменклатураНаСкладеНДС.Видимость                  = Ложь;
			Элементы.НоменклатураНаСкладеНДСВключенВстоимость.Видимость	= Ложь;
		Иначе
			Элементы.ГруппаДанныеПоСФОборотыИПСтруктураСтоимости.ТекущаяСтраница = Элементы.ГруппаДанныеПоСФ;
			Элементы.НоменклатураНаСкладеНДС.Видимость                  = Истина;
			Элементы.НоменклатураНаСкладеНДСВключенВстоимость.Видимость	= Истина;
		КонецЕсли;
		Элементы.СтруктураСтоимостиЗапасов.Видимость = Ложь;
	Иначе
		Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
			Элементы.ГруппаДанныеПоСФОборотыИПСтруктураСтоимости.ТекущаяСтраница = Элементы.ГруппаСтруктураСтоимости;
			Элементы.СтруктураСтоимостиЗапасов.Видимость                 = УчитыватьРасходыПоСтатьямЗатрат ИЛИ УчитыватьРасходыПоЭлементамЗатрат;
		Иначе
			Элементы.ГруппаДанныеПоСФОборотыИПСтруктураСтоимости.ТекущаяСтраница = Элементы.ГруппаДанныеПоСФ;
			Элементы.НоменклатураНаСкладеНДСВключенВстоимость.Видимость	= Ложь;
			Элементы.НоменклатураНаСкладеНДС.Видимость                  = ПрименяетсяУСНДоходыМинусРасходы И НЕ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
			Элементы.СтруктураСтоимостиЗапасов.Видимость                = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация, РаздельныйУчетНДС",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация, РаздельныйУчетНДС);
	
	Для каждого СтрокаТаблицы Из Объект.НоменклатураНаСкладе Цикл
	
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_НоменклатураНаСкладе(СтрокаТаблицы, ПараметрыДокумента);
	
	КонецЦикла;

	Для каждого СтрокаТаблицы Из Объект.СпецодеждаИСпецоснасткаВЭксплуатации Цикл
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_СпецодеждаИСпецоснасткаВЭксплуатации(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

	Для каждого СтрокаТаблицы Из Объект.МатериалыПереданныеВПереработку Цикл
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МатериалыПереданныеВПереработку(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

	Для каждого СтрокаТаблицы Из Объект.ТоварыВРозничнойТорговлеАТТ Цикл
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ТоварыВРозничнойТорговлеАТТ(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_НоменклатураНаСкладе(СтрокаТаблицы, ПараметрыДокумента)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
	
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);

		СтрокаТаблицы.СчетУчетаНалоговыйУчет	= СвойстваСчета.НалоговыйУчет;
		СтрокаТаблицы.СчетУчетаКоличественный	= СвойстваСчета.Количественный;

		СубконтоНоменклатура			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		СубконтоОбъектыСтроительства	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
		СубконтоНематериальныеАктивы	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
		СубконтоРасходыНаНИОКР			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР;
		
		СтрокаТаблицы.СчетУчетаСубконтоНоменклатура	= Ложь;
		Для Индекс = 1 По 3 Цикл
			Если СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНоменклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Индекс] = СубконтоОбъектыСтроительства 
				ИЛИ СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНематериальныеАктивы 
				ИЛИ СвойстваСчета["ВидСубконто" + Индекс] = СубконтоРасходыНаНИОКР Тогда
				
				СтрокаТаблицы.СчетУчетаСубконтоНоменклатура	= Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		СубконтоСпособСтроительства	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства;
		
		СтрокаТаблицы.СчетУчетаСубконтоСпособСтроительства = СвойстваСчета.ВидСубконто1 = СубконтоСпособСтроительства
			ИЛИ СвойстваСчета.ВидСубконто2 = СубконтоСпособСтроительства
			ИЛИ СвойстваСчета.ВидСубконто3 = СубконтоСпособСтроительства;

		СубконтоПартия	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		
		СтрокаТаблицы.СчетУчетаСубконтоПартия = СвойстваСчета.ВидСубконто1 = СубконтоПартия
			ИЛИ СвойстваСчета.ВидСубконто2 = СубконтоПартия
			ИЛИ СвойстваСчета.ВидСубконто3 = СубконтоПартия;
			
			Если НЕ СтрокаТаблицы.СчетУчетаСубконтоПартия Тогда
				Если ПараметрыДокумента.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.КапитальныеВложения") Тогда
					
					Для Индекс = 1 По 3 Цикл
						Если СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНоменклатура Тогда
							
							СтрокаТаблицы.СчетУчетаСубконтоПартия = Истина;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтрокаТаблицы.СчетУчетаСубконтоПартия Тогда
				Если ПараметрыДокумента.РаздельныйУчетНДС Тогда
					
					Для Индекс = 1 По 3 Цикл
						Если СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНоменклатура Тогда
							
							СтрокаТаблицы.СчетУчетаСубконтоПартия = Истина;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		СубконтоСклад	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
		
		СтрокаТаблицы.СчетУчетаСубконтоСклад = СвойстваСчета.ВидСубконто1 = СубконтоСклад
			ИЛИ СвойстваСчета.ВидСубконто2 = СубконтоСклад
			ИЛИ СвойстваСчета.ВидСубконто3 = СубконтоСклад;
			
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		СтрокаТаблицы.НоменклатураКод		= "";
		СтрокаТаблицы.НоменклатураАртикул	= "";
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		РеквизитыНоменклатуры = ПолучитьКодАртикул(СтрокаТаблицы.Номенклатура, "Код, Артикул");
		СтрокаТаблицы.НоменклатураКод		= РеквизитыНоменклатуры.Код;
		СтрокаТаблицы.НоменклатураАртикул	= РеквизитыНоменклатуры.Артикул;
	Иначе
		РеквизитыНоменклатуры	= ПолучитьКодАртикул(СтрокаТаблицы.Номенклатура, "Код");
		СтрокаТаблицы.НоменклатураКод		= РеквизитыНоменклатуры.Код;
		СтрокаТаблицы.НоменклатураАртикул	= "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_СпецодеждаИСпецоснасткаВЭксплуатации(СтрокаТаблицы, ПараметрыДокумента)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		СтрокаТаблицы.СчетУчетаНалоговыйУчет		= СвойстваСчета.НалоговыйУчет;
		
		СубконтоРаботники =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
		СтрокаТаблицы.СчетУчетаСубконтоРаботникОрганизации	= СвойстваСчета.ВидСубконто1 = СубконтоРаботники
			ИЛИ СвойстваСчета.ВидСубконто2 = СубконтоРаботники
			ИЛИ СвойстваСчета.ВидСубконто3 = СубконтоРаботники;
			
	КонецЕсли;
	
	ЗаполнитьСпособПогашенияСтоимости_СпецодеждаИСпецоснасткаВЭксплуатации(СтрокаТаблицы);
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаполнитьСпособПогашенияСтоимости_СпецодеждаИСпецоснасткаВЭксплуатации(СтрокаТаблицы)

	Если ЗначениеЗаполнено(СтрокаТаблицы.СпецМатериалНазначениеИспользования) Тогда
		СпособПогашенияСтоимости = СтрокаТаблицы.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости;
	Иначе
		СпособПогашенияСтоимости = "";
	КонецЕсли;
	
	СтрокаТаблицы.ПогашатьСтоимостьПриПередачеВЭксплуатацию	= НЕ ЗначениеЗаполнено(СпособПогашенияСтоимости) 
		ИЛИ СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МатериалыПереданныеВПереработку(СтрокаТаблицы, ПараметрыДокумента)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		СтрокаТаблицы.СчетУчетаНалоговыйУчет		= СвойстваСчета.НалоговыйУчет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ТоварыВРозничнойТорговлеАТТ(СтрокаТаблицы, ПараметрыДокумента)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		СтрокаТаблицы.СчетУчетаНалоговыйУчет		= СвойстваСчета.НалоговыйУчет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	ПрочитатьПараметрыУчетнойПолитики();
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата = ДатаВводаОстатков;
	КонецЕсли;

	ПрочитатьПараметрыУчетнойПолитики();
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
		
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетПриИзмененииСервер_НоменклатураНаСкладе(ПараметрыСтроки, Знач ПараметрыДокумента)

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_НоменклатураНаСкладе(ПараметрыСтроки, ПараметрыДокумента);
	
	Если ПараметрыСтроки.СчетУчетаСубконтоНоменклатура Тогда
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);
		
		СубконтоНоменклатура			= ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура");
		СубконтоОбъектыСтроительства	= ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства");
		СубконтоНематериальныеАктивы	= ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы");
		
		Для Индекс = 1 По 3 Цикл
			Если СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНоменклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Индекс] = СубконтоОбъектыСтроительства 
				ИЛИ СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНематериальныеАктивы Тогда
				
				ПараметрыСтроки.Номенклатура = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(ПараметрыСтроки.Номенклатура);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПараметрыСтроки.Номенклатура = Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаСубконтоСпособСтроительства Тогда
		ПараметрыСтроки.СпособСтроительства = Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаСубконтоПартия Тогда
		ПараметрыСтроки.Партия = Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаСубконтоСклад Тогда
		ПараметрыСтроки.Склад = Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаКоличественный Тогда
		ПараметрыСтроки.Количество	= 0;
		
		Если ПараметрыДокумента.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.КапитальныеВложения") Тогда
			ПараметрыСтроки.Оплачен = Ложь;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетПриИзмененииСервер_СпецодеждаИСпецоснасткаВЭксплуатации(ПараметрыСтроки, Знач ПараметрыДокумента)

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_СпецодеждаИСпецоснасткаВЭксплуатации(ПараметрыСтроки, ПараметрыДокумента);
	
	Если НЕ ПараметрыСтроки.СчетУчетаСубконтоРаботникОрганизации Тогда
		ПараметрыСтроки.СпецМатериалПодразделениеФизЛицо	= Неопределено;
	КонецЕсли;
	
	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетПриИзмененииСервер_МатериалыПереданныеВПереработку(ПараметрыСтроки, Знач ПараметрыДокумента)

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МатериалыПереданныеВПереработку(ПараметрыСтроки, ПараметрыДокумента);
	
	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетПриИзмененииСервер_ТоварыВРозничнойТорговлеАТТ(ПараметрыСтроки, Знач ПараметрыДокумента)

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ТоварыВРозничнойТорговлеАТТ(ПараметрыСтроки, ПараметрыДокумента);
	
	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммы(ПараметрыСтроки, Знач ПараметрыДокумента)

	Если ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		Если ПараметрыСтроки.ТорговаяНаценка <> Неопределено Тогда
			ПараметрыСтроки.ВалютнаяСумма	= ПараметрыСтроки.Сумма - ПараметрыСтроки.ТорговаяНаценка;
		Иначе
			ПараметрыСтроки.ВалютнаяСумма	= ПараметрыСтроки.Сумма
		КонецЕсли;					
		ПараметрыСтроки.ВалютныйНДС		= ПараметрыСтроки.НДС;
	КонецЕсли;
	
	ПараметрыСтроки.СуммаНУ = ПараметрыСтроки.Сумма;
	Если НЕ ПараметрыСтроки.СчетУчетаНалоговыйУчет Тогда
		ПараметрыСтроки.СуммаПР = 0;
	КонецЕсли;	
	
	ЗаполнитьСуммуВР(ПараметрыСтроки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммуВР(СтрокаТаблицы)

	СтрокаТаблицы.СуммаВР = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаПР;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВРВПервоначальнойСтоимости(СтрокаТаблицы)

	СтрокаТаблицы.СпецМатериалПервоначальнаяСтоимостьВР = СтрокаТаблицы.СпецМатериалПервоначальнаяСтоимость
		- СтрокаТаблицы.СпецМатериалПервоначальнаяСтоимостьНУ - СтрокаТаблицы.СпецМатериалПервоначальнаяСтоимостьПР;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(СтрокаТаблицы)

	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		СтрокаТаблицы.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.СуммаБезНДС,
			Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	Иначе
		
		СтрокаТаблицы.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Стоимость,
			Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	КонецЕсли; 

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Ключ	= Элемент.ОтборСтрок.Ключ;

	ДанныеПоСФИтогКоличество	= ДанныеПоСФИтогКоличество + СтрокаТаблицы.Количество;
	ДанныеПоСФИтогСтоимость		= ДанныеПоСФИтогСтоимость + СтрокаТаблицы.Стоимость;
	ДанныеПоСФИтогНДС			= ДанныеПоСФИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриОкончанииРедактирования(СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФИтогКоличество	= ДанныеПоСФИтогКоличество - СтрокаТаблицы.Количество;
	ДанныеПоСФИтогСтоимость		= ДанныеПоСФИтогСтоимость - СтрокаТаблицы.Стоимость;
	ДанныеПоСФИтогНДС			= ДанныеПоСФИтогНДС - СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент)

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДанныеПоСФ.Реквизиты.СчетФактура.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФВидЦенностиПриИзменении(СтрокаТаблицы, ИмяТаблицы)

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда

		Если СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги")
		ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.КомандировочныеРасходы")
		ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПосредническиеУслуги")
		ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПредставительскиеРасходы")	Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам");
		ИначеЕсли СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА") Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам");
		ИначеЕсли СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.Оборудование")
		ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС") Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств");
		Иначе

			СтрокаТаблицыМПЗ = Элементы[ИмяТаблицы].ТекущиеДанные;
			Если СтрокаТаблицыМПЗ = Неопределено Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ");
			Иначе
				
				СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТаблицыМПЗ.Номенклатура);
				
				Если СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ТаможенныеПлатежи")
					ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС") Тогда
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
				Иначе
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСФУстановитьОтборСтрок(СтрокаТаблицы, ЭлементДанныеПоСФ)

	Если СтрокаТаблицы <> Неопределено
		И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")	Тогда

		ЭлементДанныеПоСФ.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru='Данные по счетам-фактурам полученным по номенклатуре ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокДанныеПоСФ = ТекстЗаголовка;

		ЭлементДанныеПоСФ.Доступность = Истина;

	Иначе

		ЭлементДанныеПоСФ.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", Новый УникальныйИдентификатор);
		ЗаголовокДанныеПоСФ = НСтр("ru='Данные по счетам-фактурам:'");

		ЭлементДанныеПоСФ.Доступность = Ложь;

	КонецЕсли;

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиДанныеПоСФ()

	ДанныеПоСФИтогКоличество = 0;
	ДанныеПоСФИтогСтоимость = 0;
	ДанныеПоСФИтогНДС = 0;

	ТекущаяСтраница = Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница;

	Если ТекущаяСтраница = Элементы.ГруппаТоварыВРозничнойТорговлеНТТ Тогда

		СтрокаТаблицы = Неопределено;

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаНоменклатураНаСкладе Тогда

		СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации Тогда

		СтрокаТаблицы = Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные;

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМатериалыПереданныеВПереработку Тогда

		СтрокаТаблицы = Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные;

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТоварыВРозничнойТорговлеАТТ Тогда

		СтрокаТаблицы = Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные;

	КонецЕсли;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		ДанныеПоСФИтогКоличество = ДанныеПоСФИтогКоличество + ЭлементМассиваСтрок.Количество;
		ДанныеПоСФИтогСтоимость = ДанныеПоСФИтогСтоимость + ЭлементМассиваСтрок.Стоимость;
		ДанныеПоСФИтогНДС = ДанныеПоСФИтогНДС + ЭлементМассиваСтрок.НДС;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриНачалеРедактирования(Элемент, СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Ключ	= Элемент.ОтборСтрок.Ключ;

	ОборотыИтогСтоимость	= ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС			= ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриОкончанииРедактирования(СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОборотыИтогСтоимость	= ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС			= ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыНачалоВыбора(Элемент)

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Обороты.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОборотыУстановитьОтборСтрок(СтрокаТаблицы, ЭлементОбороты)

	Если СтрокаТаблицы <> Неопределено
		И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")	Тогда

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru='Материалы, неоплаченные поставщикам, израсходованные на производство номенклатуры ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокОборотыИП = ТекстЗаголовка;

		ЭлементОбороты.Доступность = Истина;

	Иначе

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", Новый УникальныйИдентификатор);
		ЗаголовокОборотыИП = НСтр("ru='Материалы, неоплаченные поставщикам:'");

		ЭлементОбороты.Доступность = Ложь;

	КонецЕсли;

	ОбновитьИтогиОбороты();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиОбороты()

	ОборотыИтогСтоимость = 0;
	ОборотыИтогНДС = 0;

	ТекущаяСтраница = Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница;

	Если ТекущаяСтраница = Элементы.ГруппаНоменклатураНаСкладе Тогда

		СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;
		
	Иначе
		
		СтрокаТаблицы = Неопределено;
		
	КонецЕсли;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		ОборотыИтогСтоимость = ОборотыИтогСтоимость + ЭлементМассиваСтрок.Сумма;
		ОборотыИтогНДС       = ОборотыИтогНДС + ЭлементМассиваСтрок.НДС;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиПриНачалеРедактирования(Элемент, СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Ключ	= Элемент.ОтборСтрок.Ключ;

	СтруктураСтоимостиЗапасовИтогСумма	= СтруктураСтоимостиЗапасовИтогСумма + СтрокаТаблицы.Сумма;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиПриОкончанииРедактирования(СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиЗапасовИтогСумма	= СтруктураСтоимостиЗапасовИтогСумма + СтрокаТаблицы.Сумма;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовУстановитьОтборСтрок(СтрокаТаблицы, ЭлементОбороты)

	Если СтрокаТаблицы <> Неопределено
		И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")	Тогда

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru='Структура стоимости номенклатуры ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокСтруктураСтомостиЗапасов = ТекстЗаголовка;

		ЭлементОбороты.Доступность = Истина;

	Иначе

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", Новый УникальныйИдентификатор);
		ЗаголовокСтруктураСтомостиЗапасов = НСтр("ru='Структура стоимости:'");

		ЭлементОбороты.Доступность = Ложь;

	КонецЕсли;

	ОбновитьИтогиСтруктураСтоимостиЗапасов();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиСтруктураСтоимостиЗапасов()

	СтруктураСтоимостиЗапасовИтогСумма = 0;

	ТекущаяСтраница = Элементы.ГруппаНоменклатураСтраницы.ТекущаяСтраница;

	Если ТекущаяСтраница = Элементы.ГруппаНоменклатураНаСкладе Тогда

		СтрокаТаблицы = Элементы.НоменклатураНаСкладе.ТекущиеДанные;
		
	Иначе
		
		СтрокаТаблицы = Неопределено;
		
	КонецЕсли;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.СтруктураСтоимостиЗапасов.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		СтруктураСтоимостиЗапасовИтогСумма = СтруктураСтоимостиЗапасовИтогСумма + ЭлементМассиваСтрок.Сумма;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраницы(ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ГруппаНоменклатураНаСкладе Тогда

		ДанныеСФУстановитьОтборСтрок(Элементы.НоменклатураНаСкладе.ТекущиеДанные,
			Элементы.ДанныеПоСФНоменклатураНаСкладе);

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСпецодеждаИСпецоснасткаВЭксплуатации Тогда

		ДанныеСФУстановитьОтборСтрок(Элементы.СпецодеждаИСпецоснасткаВЭксплуатации.ТекущиеДанные,
			Элементы.ДанныеПоСФСпецодеждаИСпецоснасткаВЭксплуатации);

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМатериалыПереданныеВПереработку Тогда

		ДанныеСФУстановитьОтборСтрок(Элементы.МатериалыПереданныеВПереработку.ТекущиеДанные,
			Элементы.ДанныеПоСФМатериалыПереданныеВПереработку);

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТоварыВРозничнойТорговлеАТТ Тогда

		ДанныеСФУстановитьОтборСтрок(Элементы.ТоварыВРозничнойТорговлеАТТ.ТекущиеДанные,
			Элементы.ДанныеПоСФТоварыВРозничнойТорговлеАТТ);

	КонецЕсли;

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНазначенияИспользования(СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
	   И СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатации") Тогда

		МассивСпособовПогашенияСтоимостиСпецодежды = Новый Массив;
		МассивСпособовПогашенияСтоимостиСпецодежды.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПогашенияСтоимости.Линейный"));
		МассивСпособовПогашенияСтоимостиСпецодежды.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию"));
		МассивОтборов = Новый Массив;
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.СпособПогашенияСтоимости", МассивСпособовПогашенияСтоимостиСпецодежды));
		Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалНазначениеИспользования.ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтборов);

	Иначе

		Элементы.СпецодеждаИСпецоснасткаВЭксплуатацииСпецМатериалНазначениеИспользования.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти(СтрокаТаблицы)

	ПараметрыСтроки = Новый Структура("СчетУчета, СчетУчетаНалоговыйУчет, СчетУчетаКоличественный,
			|СчетУчетаСубконтоНоменклатура, СчетУчетаСубконтоСпособСтроительства, СчетУчетаСубконтоПартия, СчетУчетаСубконтоСклад,
			|СчетУчетаСубконтоРаботникОрганизации,
			|Номенклатура, НоменклатураКод, НоменклатураАртикул,
			|СпособСтроительства, Склад, Партия,
			|СпецМатериалПодразделениеФизЛицо, СпецМатериалНазначениеИспользования,
			|ПогашатьСтоимостьПриПередачеВЭксплуатацию,
			|Количество, Сумма, НДС, ТорговаяНаценка,
			|СуммаНУ, СуммаПР, СуммаВР, Оплачен, 
			|Валюта, ВалютнаяСумма, ВалютныйНДС");
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетаУчетаНоменклатуры(Знач Организация, Знач Номенклатура)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	Возврат СчетаУчета;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодАртикул(Ссылка, Реквизиты)
	
	СтруктураРеквизитов = Новый Структура(Реквизиты);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля = СокрЛП(КлючИЗначение.Ключ);		
		СтруктураРеквизитов[ИмяПоля] = Ссылка[ИмяПоля];
		
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммыСпецМатериалы(ПараметрыСтроки, Знач ПараметрыДокумента)

	Если ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		ПараметрыСтроки.ВалютнаяСумма	= ПараметрыСтроки.Сумма;
		ПараметрыСтроки.ВалютныйНДС		= ПараметрыСтроки.НДС;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаНалоговыйУчет Тогда
		ПараметрыСтроки.СуммаНУ = 0;
		ПараметрыСтроки.СуммаПР = 0;
	КонецЕсли;	
	
	ЗаполнитьСуммуВР(ПараметрыСтроки);

КонецПроцедуры
