////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ЗаполнитьДоговораВТабличнойЧасти(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <РасчетыСКонтрагентами>

&НаКлиенте
Процедура РасчетыСКонтрагентамиСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	КонтрагентПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Контрагент Тогда
		СтрокаТаблицы.Документ	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорКонтрагента Тогда
		СтрокаТаблицы.Документ	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент",				СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",		СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты.Документ.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиОстатокПоДебетуПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	Если СтрокаТаблицы.Сумма <> 0 Тогда
		СтрокаТаблицы.СуммаКт = 0;
	КонецЕсли;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСКонтрагентамиОстатокПоКредитуПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	Если СтрокаТаблицы.СуммаКт <> 0 Тогда
		СтрокаТаблицы.Сумма = 0;
	КонецЕсли;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормойСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// РасчетыСКонтрагентамиСуммаНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиСуммаНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасчетыСКонтрагентамиОстатокПоДебету

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиОстатокПоДебету");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СуммаТолькоПросмотр", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасчетыСКонтрагентамиОстатокПоКредиту

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиОстатокПоКредиту");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СуммаКтТолькоПросмотр", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасчетыСКонтрагентамиВалютнаяСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиВалютнаяСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СчетУчетаВалютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасчетыСКонтрагентамиВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиВалюта");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасчетыСКонтрагентами.СчетУчетаВалютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасчетыСКонтрагентами.Валюта", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета"));


	// РасчетыСКонтрагентамиСуммаНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиСуммаНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.БУиНУМогутРазличаться", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасчетыСКонтрагентамиДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетыСКонтрагентамиДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасчетыСКонтрагентами.СчетУчетаЕстьСубконтоДокументыРасчетовСКонтрагентами", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;

	// Ограничение выбора счета учета
	
	МассивСчетов		= Новый Массив;
	МассивИсключений	= Новый Массив;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);

		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);

		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.Билеты);

	КонецЕсли;

	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	УсловияОтбораСубсчетов.СчетаИсключения = МассивИсключений;
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыСКонтрагентамиСчетУчета, СчетаДляОтбора);

	// Отбор договоров по видам.

	ВидыДоговоров = Новый Массив;
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");

	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		Если НЕ ВестиУчетПоДоговорам Тогда
			Элементы.РасчетыСКонтрагентамиДоговорКонтрагента.Видимость = Ложь;
		Иначе
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		КонецЕсли;
	КонецЕсли;

	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		Если НЕ ВестиУчетПоДоговорам Тогда
			Элементы.РасчетыСКонтрагентамиДоговорКонтрагента.Видимость = Ложь;
		Иначе
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		КонецЕсли;
	КонецЕсли;

	Если ВидыДоговоров.Количество() > 0 Тогда

		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговоров)));
		Элементы.РасчетыСКонтрагентамиДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЭтоРасчетыСПоставщикамиИПодрядчиками = Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;

	Элементы.РасчетыСКонтрагентамиДоходЕНВД.Видимость		= НЕ ЭтоРасчетыСПоставщикамиИПодрядчиками;
	Элементы.РасчетыСКонтрагентамиДоходКомитента.Видимость	= НЕ ЭтоРасчетыСПоставщикамиИПодрядчиками;
	Элементы.РасчетыСКонтрагентамиДоходПатент.Видимость		= НЕ ЭтоРасчетыСПоставщикамиИПодрядчиками;
	Элементы.РасчетыСКонтрагентамиПатент.Видимость			= НЕ ЭтоРасчетыСПоставщикамиИПодрядчиками;
	
	Элементы.ПодразделениеОрганизации.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()
	
	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);
		
	Для каждого СтрокаТаблицы Из Объект.РасчетыСКонтрагентами Цикл

		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыСКонтрагентами(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыСКонтрагентами(СтрокаТаблицы, ПараметрыДокумента)

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.СчетУчетаНалоговыйУчет	= СвойстваСчета.НалоговыйУчет;
		СтрокаТаблицы.СчетУчетаВалютный			= СвойстваСчета.Валютный;
		СтрокаТаблицы.СуммаТолькоПросмотр		= СвойстваСчета.Вид = ВидСчета.Пассивный;
		СтрокаТаблицы.СуммаКтТолькоПросмотр		= СвойстваСчета.Вид = ВидСчета.Активный;
		
		Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами Тогда
			СтрокаТаблицы.СчетУчетаЕстьСубконтоДокументыРасчетовСКонтрагентами = Истина;
		Иначе
			СтрокаТаблицы.СчетУчетаЕстьСубконтоДокументыРасчетовСКонтрагентами = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		И НЕ СтрокаТаблицы.Аванс
		И НЕ СтрокаТаблицы.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		
		РасчетыВУсловныхЕдиницах	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		СтрокаТаблицы.БУиНУМогутРазличаться	= РасчетыВУсловныхЕдиницах;
		
	ИначеЕсли УчетОС.СчетУчетаАрендныхОбязательств(СтрокаТаблицы.СчетУчета) Тогда
		
		СтрокаТаблицы.БУиНУМогутРазличаться = Истина;
		
	Иначе
		СтрокаТаблицы.БУиНУМогутРазличаться	= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	МассивВидовДоговоров	= Новый Массив;
	Если ПараметрыДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ИначеЕсли ПараметрыДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Иначе
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ПараметрыСтроки.ДоговорКонтрагента,
		ПараметрыСтроки.Контрагент, ПараметрыДокумента.Организация, МассивВидовДоговоров);

	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	СвойстваДоговора	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСтроки.ДоговорКонтрагента,
		"ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	СвойстваСчета		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);

	Если СвойстваСчета.Вид = ВидСчета.Активный И ПараметрыСтроки.СуммаКт <> 0 Тогда
		ПараметрыСтроки.Сумма	= ПараметрыСтроки.СуммаКт;
		ПараметрыСтроки.СуммаКт	= 0;
	ИначеЕсли СвойстваСчета.Вид = ВидСчета.Пассивный И ПараметрыСтроки.Сумма <> 0 Тогда
		ПараметрыСтроки.СуммаКт	= ПараметрыСтроки.Сумма;
		ПараметрыСтроки.Сумма	= 0;
	КонецЕсли;

	Если ПараметрыДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		ПараметрыСтроки.Аванс	= СвойстваСчета.Вид = ВидСчета.Активный;
	ИначеЕсли ПараметрыДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		ПараметрыСтроки.Аванс	= НЕ СвойстваСчета.Вид = ВидСчета.Активный;
	Иначе
		Если СвойстваДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ПараметрыСтроки.Аванс	= НЕ ПараметрыСтроки.СуммаКт = 0;
		ИначеЕсли СвойстваДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ПараметрыСтроки.Аванс	= НЕ ПараметрыСтроки.Сумма = 0;
		Иначе
			ПараметрыСтроки.Аванс	= Ложь;
		КонецЕсли;

	КонецЕсли;

	Если ПараметрыСтроки.СчетУчетаВалютный Тогда
		ПараметрыСтроки.Валюта	= ?(ЗначениеЗаполнено(СвойстваДоговора.ВалютаВзаиморасчетов),
									СвойстваДоговора.ВалютаВзаиморасчетов,
									ПараметрыДокумента.ВалютаРегламентированногоУчета);
	Иначе
		ПараметрыСтроки.Валюта	= ПараметрыДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыСКонтрагентами(ПараметрыСтроки, ПараметрыДокумента);
	
	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммы(ПараметрыСтроки, Знач ПараметрыДокумента)

	СуммаРуб = ?(ЗначениеЗаполнено(ПараметрыСтроки.Сумма), ПараметрыСтроки.Сумма, ПараметрыСтроки.СуммаКт);

	Если ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		ПараметрыСтроки.ВалютнаяСумма = СуммаРуб;
	КонецЕсли;

	Если НЕ ПараметрыСтроки.БУиНУМогутРазличаться Тогда
		
		ПараметрыСтроки.СуммаНУ = СуммаРуб;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговораВТабличнойЧасти(ТекущийОбъект)
	
	Если ТекущийОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		// Если не ведется учет по договорам и заполнен договор, 
		// то по реквизитам этого договора ищем основной договор
		// Если находим, то устанавливаем основной договор в качестве договора контрагента в документе.
		// В случае если не находим, то устанавливаем договор, который выбрал пользователь, как основной. 
		Для Каждого Строка Из ТекущийОбъект.РасчетыСКонтрагентами Цикл
			Если ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДоговорКонтрагента, "Организация, Владелец, ВидДоговора");
				
				ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					ОсновнойДоговор, 
					СтруктураРеквизитов.Владелец,
					СтруктураРеквизитов.Организация,
					СтруктураРеквизитов.ВидДоговора);
				
				Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
					Строка.ДоговорКонтрагента = ОсновнойДоговор;
				Иначе
					РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(Строка.ДоговорКонтрагента);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("Организация", ТекущийОбъект.Организация);
		Если ТекущийОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
			ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		Иначе
			ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущийОбъект.РасчетыСКонтрагентами Цикл
			ПараметрыДоговора.Вставить("Владелец", Строка.Контрагент);
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				ДоговорКонтрагента,
				ПараметрыДоговора.Владелец, 
				ПараметрыДоговора.Организация, 
				ПараметрыДоговора.ВидДоговора);
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
				ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
			КонецЕсли;
			Строка.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти()

	СтрокаТаблицы = Элементы.РасчетыСКонтрагентами.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("СчетУчета, СчетУчетаВалютный, СчетУчетаНалоговыйУчет,
			|СчетУчетаЕстьСубконтоДокументыРасчетовСКонтрагентами,
			|Контрагент, ДоговорКонтрагента, Сумма, 
			|Валюта, ВалютнаяСумма, Аванс, СуммаКТ, СуммаНУ,
			|СуммаТолькоПросмотр, СуммаКтТолькоПросмотр, БУиНУМогутРазличаться");
			
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
