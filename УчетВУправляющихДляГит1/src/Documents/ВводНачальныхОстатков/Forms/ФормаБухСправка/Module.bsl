////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <БухСправка>

&НаКлиенте
Процедура БухСправкаПередНачаломИзменения(Элемент, Отказ)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетУчета);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы	= Элементы.БухСправка.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН	= ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.НеПринимаются");
	
	СтрокаТаблицы.Ключ = Новый УникальныйИдентификатор;
	
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(СтрокаТаблицы,
		Элементы.СтруктураСтоимостиЗапасов);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетУчета);
	
	ПоляОбъекта = Новый Структура("Организация, Субконто1, Субконто2, Субконто3",
		Объект.Организация, "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетУчета, СтрокаТаблицы, ПоляОбъекта, Истина,,Ложь);
	
	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
	ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
							ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто1ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(1);
		
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(Элементы.БухСправка.ТекущиеДанные, Элементы.СтруктураСтоимостиЗапасов);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетУчета);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	Если СтрокаТаблицы.Сумма <> 0 Тогда
		СтрокаТаблицы.СуммаКт = 0;
	КонецЕсли;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета", ВалютаРегламентированногоУчета, Объект.РазделУчета);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаКтПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	Если СтрокаТаблицы.СуммаКт <> 0 Тогда
		СтрокаТаблицы.Сумма = 0;
	КонецЕсли;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета", ВалютаРегламентированногоУчета, Объект.РазделУчета);

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.БухСправка.ТекущиеДанные, Объект.РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.БухСправка.ТекущиеДанные, Объект.РазделУчета);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормойСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	//Субконто
	
	Для Сч = 1 По 3 Цикл

		// Если субконто нет на счете, то делаем его недоступным, 
		// а для 2-го и 3-его субконто скрываем его полностью, чтобы не занимать лишную строку. 
		// Первое субконто не скрываем, чтобы колонка не "мигала" для разных строк.

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БухСправка.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		Если Сч = 1 Тогда
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Иначе
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		КонецЕсли;


		// Пустое субконто в виде <...>

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БухСправка.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БухСправка.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));

	КонецЦикла;

	// БухСправкаСуммаНУ, БухСправкаСуммаПР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСуммаПР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаСуммаВР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСуммаВР");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.БухСправка.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.БухСправка.СуммаВРТолькоПросмотр", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СуммаКтТолькоПросмотр", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СуммаТолькоПросмотр", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СчетУчетаКоличественный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаВалютнаяСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаВалютнаяСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СчетУчетаВалютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// БухСправкаВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БухСправкаВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БухСправка.СчетУчетаВалютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;
	
	// Ограничение выбора счета учета
	
	МассивСчетов	= Новый Массив;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Касса);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеВложения);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервныйКапитал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДобавочныйКапитал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства Тогда

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеПользование);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходныеВложения);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМатериалов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиТоваров);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиГотовойПродукции);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеТоваров);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМатериалов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиТоваров);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыпускПродукции);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыполненныеЭтапыПоНезавершеннымРаботам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВозмещениюМатериальногоУщерба);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Билеты);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыделенномуИмуществу);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДоговоруДоверительногоУправленияИмуществом);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыПолученныеВСчетБудущихПериодов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БезвозмездныеПоступления);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПредстоящиеПоступленияПоНедостачамВыявленнымЗаПрошлыеГоды);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РазницаМеждуСуммойПодлежащейВзысканиюСВиновныхЛицИБалансовойСтоимостьюПоНедостачамЦенностей);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку_);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученные);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученныеВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданные);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданныеВал);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредстваСданныеВАренду);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГТД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыРасходыНеУчитываемые);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНеУчитываемыеПоП_1_48);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыплатыВпользуФизЛицПоП_1_48);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеВыплатыПоП_1_48);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНеУчитываемыеПоП_49);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыплатыВпользуФизЛицПоП_49);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеВыплатыПоП_49);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнереализационныеРасходыНеУчитываемые);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыНеУчитываемые);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент);
		
	КонецЕсли;
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;	
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	ОтборПоПризнакуЗабалансовый	= ?(Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета,
		Неопределено, Ложь);

	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.БухСправкаСчетУчета, СчетаДляОтбора,,
		ОтборПоПризнакуЗабалансовый);

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	ЭтоНезавершенноеПроизводство				= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	ЭтоДенежныеСредства							= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	ЭтоРасчетыСУчредителями						= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями;
	ЭтоОтложенныеНалоговыеАктивыОбязательства	= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства;
	ЭтоКапитал									= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
	
	Элементы.БухСправкаКоличество.Видимость		= НЕ ЭтоРасчетыСУчредителями И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства;
	Элементы.БухСправкаСуммаКт.Видимость		= НЕ ЭтоНезавершенноеПроизводство И НЕ ЭтоДенежныеСредства;
	Элементы.БухСправкаВалюта.Видимость			= НЕ ЭтоНезавершенноеПроизводство
												И НЕ ЭтоРасчетыСУчредителями
												И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства
												И НЕ ЭтоКапитал;
	Элементы.БухСправкаВалютнаяСумма.Видимость	= НЕ ЭтоНезавершенноеПроизводство
												И НЕ ЭтоРасчетыСУчредителями
												И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства
												И НЕ ЭтоКапитал;
	Элементы.БухСправкаСуммаНУ.Видимость		= НЕ ЭтоРасчетыСУчредителями И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства;
	Элементы.БухСправкаСуммаПР.Видимость		= НЕ ЭтоРасчетыСУчредителями И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства;
	Элементы.БухСправкаСуммаВР.Видимость		= НЕ ЭтоРасчетыСУчредителями И НЕ ЭтоОтложенныеНалоговыеАктивыОбязательства;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.ПодразделениеОрганизации.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
												ИЛИ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;

	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	
	ЗаголовокСтруктураСтомостиЗапасов = НСтр("ru='Структура стоимости:'");	
	
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;
		
	ПорядокПризнанияМатериальныхРасходов	= УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Объект.Организация, Объект.Дата + 86400);
	
	ЭтоНезавершенноеПроизводство	= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	
	Элементы.БухСправкаОтражениеВУСН.Видимость	= Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство
		И ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ГруппаСтруктураСтоимости",
	"Видимость",
	Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);
	
	Для каждого СтрокаТаблицы Из Объект.БухСправка Цикл

		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(СтрокаТаблицы, ПараметрыДокумента)

		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			
			СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
			
			КоличествоСубконто	= СвойстваСчета.КоличествоСубконто;
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["Субконто" + Индекс + "Доступность"]	= (Индекс <= КоличествоСубконто);
			КонецЦикла;
			
			СтрокаТаблицы.СчетУчетаВалютный			= СвойстваСчета.Валютный;
			СтрокаТаблицы.СчетУчетаКоличественный	= СвойстваСчета.Количественный;
			СтрокаТаблицы.СчетУчетаНалоговыйУчет	= СвойстваСчета.НалоговыйУчет;
			СтрокаТаблицы.СуммаТолькоПросмотр		= СвойстваСчета.Вид = ВидСчета.Пассивный;
			СтрокаТаблицы.СуммаКтТолькоПросмотр		= СвойстваСчета.Вид = ВидСчета.Активный;
			СтрокаТаблицы.СуммаВРТолькоПросмотр		= НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(СтрокаТаблицы.СчетУчета,
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи"));
				
		КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата = ДатаВводаОстатков;
	КонецЕсли;
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСубконто(НомерСубконто)

	СтрокаТаблицы		= Элементы.БухСправка.ТекущиеДанные;
	
	ЗначениеСубконто	= СтрокаТаблицы["Субконто" + НомерСубконто];
	ТипСубконто			= ТипЗнч(ЗначениеСубконто);
	
	Если ТипСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
								ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

		КонтрагентПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		
	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
								ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

		ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);

		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		
	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		БанковскийСчетПриИзмененииСервер(ПараметрыСтроки, НомерСубконто);

		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ВидСубконтоКонтрагенты	= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидСубконтоДоговоры		= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Если ВидСубконтоКонтрагенты = Неопределено ИЛИ ВидСубконтоДоговоры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ПараметрыСтроки["Субконто" + ВидСубконтоДоговоры.НомерСтроки],
		ПараметрыСтроки["Субконто" + ВидСубконтоКонтрагенты.НомерСтроки], ПараметрыДокумента.Организация, МассивВидовДоговоров);
		
	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ВидСубконтоДоговоры	= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СвойстваСчета		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);

	Если СвойстваСчета.Вид = ВидСчета.Активный И ПараметрыСтроки.СуммаКт <> 0 Тогда
		ПараметрыСтроки.Сумма	= ПараметрыСтроки.СуммаКт;
		ПараметрыСтроки.СуммаКт	= 0;
	ИначеЕсли СвойстваСчета.Вид = ВидСчета.Пассивный И ПараметрыСтроки.Сумма <> 0 Тогда
		ПараметрыСтроки.СуммаКт	= ПараметрыСтроки.Сумма;
		ПараметрыСтроки.Сумма	= 0;
	КонецЕсли;

	Если ПараметрыСтроки.СчетУчетаВалютный И НЕ ВидСубконтоДоговоры = Неопределено Тогда
		ВалютаВзаиморасчетов	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСтроки["Субконто" + ВидСубконтоДоговоры.НомерСтроки], "ВалютаВзаиморасчетов");
		ПараметрыСтроки.Валюта = ?(ЗначениеЗаполнено(ВалютаВзаиморасчетов), ВалютаВзаиморасчетов, ПараметрыДокумента.ВалютаРегламентированногоУчета);
	Иначе
		ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ПараметрыСтроки.СчетУчетаКоличественный Тогда
		ПараметрыСтроки.Количество	= 0;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(ПараметрыСтроки, ПараметрыДокумента);
	
	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БанковскийСчетПриИзмененииСервер(ПараметрыСтроки, НомерСубконто)

	СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);
	
	Если СвойстваСчета.Валютный Тогда		
		БанковскийСчет = ПараметрыСтроки["Субконто" + НомерСубконто];
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ПараметрыСтроки.Валюта = ПараметрыСтроки["Субконто" + НомерСубконто].ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммы(ПараметрыСтроки, Знач ПараметрыДокумента)

	СуммаРуб = ?(ЗначениеЗаполнено(ПараметрыСтроки.Сумма), ПараметрыСтроки.Сумма, ПараметрыСтроки.СуммаКт);

	Если ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		ПараметрыСтроки.ВалютнаяСумма = СуммаРуб;
	КонецЕсли;

	Если ПараметрыСтроки.СчетУчетаНалоговыйУчет Тогда
		ПараметрыСтроки.СуммаНУ	= СуммаРуб;
		Если НЕ ПараметрыСтроки.СчетУчетаНалоговыйУчет Тогда
			ПараметрыСтроки.СуммаПР = 0;
		КонецЕсли;
		ЗаполнитьСуммуВР(ПараметрыСтроки, ПараметрыДокумента.РазделУчета);
	Иначе
		ПараметрыСтроки.СуммаНУ = 0;
		ПараметрыСтроки.СуммаПР = 0;
		ПараметрыСтроки.СуммаВР = 0;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммуВР(СтрокаТаблицы, РазделУчета)

	СтрокаТаблицы.СуммаВР = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаКт - СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаПР;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"БухСправкаСубконто1",
		"БухСправкаСубконто2",
		"БухСправкаСубконто3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, Истина, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация" , Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	Если Форма.Элементы.БухСправка.ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект.БухСправка.НайтиПоИдентификатору(Форма.Элементы.БухСправка.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%", "БухСправкаСубконто%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти()

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("СчетУчета,
		|Субконто1, Субконто2, Субконто3, 
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность, 
		|Количество, Сумма, Валюта, ВалютнаяСумма,
		|СуммаНУ, СуммаПР, СуммаВР, СуммаКт,
		|СчетУчетаНалоговыйУчет, СчетУчетаКоличественный, СчетУчетаВалютный,
		|СуммаТолькоПросмотр, СуммаКтТолькоПросмотр, СуммаВРТолькоПросмотр");
		
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);
	
	Возврат ПараметрыСтроки;

КонецФункции

&НаКлиенте
Процедура БухСправкаПриАктивизацииСтроки(Элемент)
	
	СтруктураСтоимостиЗапасовУстановитьОтборСтрок(Элементы.БухСправка.ТекущиеДанные,
		Элементы.СтруктураСтоимостиЗапасов);
		
КонецПроцедуры
	
	&НаКлиенте
Процедура БухСправкаПередУдалением(Элемент, Отказ)

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;
	
	ПодчиненныеСтроки = Объект.СтруктураСтоимостиЗапасов.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.СтруктураСтоимостиЗапасов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СтруктураСтоимостиЗапасов>

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриИзменении(Элемент)
	
	ОбновитьИтогиСтруктураСтоимостиЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиПриНачалеРедактирования(Элемент, Элементы.СтруктураСтоимостиЗапасов.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиПриОкончанииРедактирования(Элементы.СтруктураСтоимостиЗапасов.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиПриНачалеРедактирования(Элемент, СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Ключ	= Элемент.ОтборСтрок.Ключ;

	СтруктураСтоимостиЗапасовИтогСумма	= СтруктураСтоимостиЗапасовИтогСумма + СтрокаТаблицы.Сумма;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиПриОкончанииРедактирования(СтрокаТаблицы)

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимостиЗапасовИтогСумма	= СтруктураСтоимостиЗапасовИтогСумма + СтрокаТаблицы.Сумма;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураСтоимостиЗапасовУстановитьОтборСтрок(СтрокаТаблицы, ЭлементОбороты)

	Если СтрокаТаблицы <> Неопределено
		И (ТипЗнч(СтрокаТаблицы.Субконто1) = Тип("СправочникСсылка.Номенклатура")
		ИЛИ ТипЗнч(СтрокаТаблицы.Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы"))Тогда

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		Если ТипЗнч(СтрокаТаблицы.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТекстЗаголовка = НСтр("ru='Структура стоимости номенклатуры ""%1"":'");
		Иначе
			ТекстЗаголовка = НСтр("ru='Структура стоимости номенклатурной группы ""%1"":'");
		КонецЕсли;		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Субконто1);
		ЗаголовокСтруктураСтомостиЗапасов = ТекстЗаголовка;

		ЭлементОбороты.Доступность = Истина;

	Иначе

		ЭлементОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", Новый УникальныйИдентификатор);
		ЗаголовокСтруктураСтомостиЗапасов = НСтр("ru='Структура стоимости:'");

		ЭлементОбороты.Доступность = Ложь;

	КонецЕсли;

	ОбновитьИтогиСтруктураСтоимостиЗапасов();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиСтруктураСтоимостиЗапасов()

	СтруктураСтоимостиЗапасовИтогСумма = 0;

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.СтруктураСтоимостиЗапасов.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		СтруктураСтоимостиЗапасовИтогСумма = СтруктураСтоимостиЗапасовИтогСумма + ЭлементМассиваСтрок.Сумма;

	КонецЦикла;

КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
