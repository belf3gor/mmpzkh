
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ДанныеПоНДСНДСВал

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСВал");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоНДСНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	
	// ДанныеПоНДСРеквизитыСчетаФактуры

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСРеквизитыСчетаФактуры");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоНДС.РеквизитыСчетаФактурыЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетФактура", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

	// Реквизиты, используемые при ставке НДС 0%

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСДокументОтгрузки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДССтавка0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДССтавка0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявлено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявлено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСНеПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСНеПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявленоНеПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявленоНеПодтверждено0");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДССчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДСВидЦенности, ДанныеПоНДССуммаБезНДСПредъявлено, ДанныеПоНДСНДСПредъявлено

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСВидЦенности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявлено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявлено");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.Равно, Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДССуммаБезНДСОплата, ДанныеПоНДСНДСОплата

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСОплата");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСОплата");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты, используемые для учета входящего НДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСВключеноВСтоимость");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСВключеноВСтоимость");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСДокументОтгрузки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявлено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявлено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявлено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявлено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСПредъявленоНеПодтверждено0");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСПредъявленоНеПодтверждено0");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДССтавкаНДСНеПодтверждена0

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССтавкаНДСНеПодтверждена0");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДССуммаБезНДСВал, ДанныеПоНДСНДСВал показываем при вводе остатков по начислению НДС при 0%
	// для валютных договоров (не у.е.)

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСДоговорКонтрагентаВалютаВзаиморасчетов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РазделУчета", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЕстьРасчетыВВалюте", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ДанныеПоНДССуммаБезНДСВал, ДанныеПоНДСНДСВал

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДССуммаБезНДСВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСНДСВал");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.ДоговорКонтрагентаВалютаВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, ВалютаРегламентированногоУчета);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 					НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 				ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", 	Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 			Истина);


	// ДанныеПоНДСДоговорКонтрагентаВалютаВзаиморасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоНДСДоговорКонтрагентаВалютаВзаиморасчетов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.ДоговорКонтрагентаВалютаВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, ВалютаРегламентированногоУчета);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоНДС.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ВалютаРегламентированногоУчета);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ТекстВвестиРеквизиты = НСтр("ru = '<Ввести реквизиты>'");

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	// Ограничение выбора счета учета
	МассивСчетов = Новый Массив;
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
		
		МассивСтавок = Новый Массив;
		МассивСтавок.Добавить(Перечисления.СтавкиНДС.НДС10_110);
		МассивСтавок.Добавить(Перечисления.СтавкиНДС.НДС18_118);
		МассивСтавок.Добавить(Перечисления.СтавкиНДС.НДС20_120);
		
		МассивОтборов = Новый Массив;
		МассивОтборов.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСтавок)));
		
		МассивПараметров = Новый ФиксированныйМассив(МассивОтборов);
		Элементы.ДанныеПоНДССтавкаНДС.ПараметрыВыбора = МассивПараметров;
		
	Иначе
		
		Элементы.ГруппаСчетВидЦенности.Заголовок = "Вид ценности";
		
	КонецЕсли;
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	СчетаНДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоНДССчетУчета, СчетаНДС);

	// Массив числовых колонок, которые подлежат пересчету при измении ставки НДС
	ЧисловыеКолонки = Новый Структура();
	КолонкиТабличнойЧасти = Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДанныеПоНДС.Реквизиты;

	Для Каждого Колонка ИЗ КолонкиТабличнойЧасти Цикл
		Если СтрНайти(Колонка.Имя,"СуммаБезНДС") Тогда
			ЧисловыеКолонки.Вставить(Колонка.Имя);
			ЧисловыеКолонки.Вставить(СтрЗаменить(Колонка.Имя,"СуммаБезНДС","НДС"));
		КонецЕсли;
	КонецЦикла;

	ПрочитатьПараметрыУчетнойПолитики();
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	Элементы.ПодразделениеОрганизации.Видимость = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда 
		ТребуетсяСчетФактура = Истина;
	Иначе
		ТребуетсяСчетФактура = Ложь;
	КонецЕсли;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ВидУчетаНДС = "НДСНачисленный";
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		ВидУчетаНДС = "НДСПолученный";
	Иначе
		ВидУчетаНДС = "НДСАвансы";
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВТаблице(СтрокаТаблицы)

	СтрокаТаблицы.НадписьСуммаБезНДС 	= НСтр("ru = 'без НДС:'");
	СтрокаТаблицы.НадписьНДС 			= НСтр("ru = 'НДС:'");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	МассивДоговоров = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ Объект.ДанныеПоНДС Цикл
		ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			МассивДоговоров.Добавить(ДоговорКонтрагента);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, 
		"ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

	ЕстьРасчетыВВалюте = Ложь;

	Для каждого СтрокаТаблицы Из Объект.ДанныеПоНДС Цикл
	
		РеквизитыДоговора = РеквизитыДоговоров[СтрокаТаблицы.ДоговорКонтрагента];
		
		СтрокаТаблицы.ПродавецДоступен = ПродавецДоступен(Объект.РазделУчета, 
			СтрокаТаблицы.ПредъявленСФ, 
			СтрокаТаблицы.СчетУчета, 
			?(РеквизитыДоговора <> Неопределено, РеквизитыДоговора.ВидДоговора, Неопределено));
		
		ЗаполнитьРеквизитыСчетаФактуры(СтрокаТаблицы);
		
		ЗаполнитьНадписиВТаблице(СтрокаТаблицы);
		
		Если РеквизитыДоговора <> Неопределено Тогда
			СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов 		= РеквизитыДоговора.ВалютаВзаиморасчетов;
			СтрокаТаблицы.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
			ЕстьРасчетыВВалюте = ЕстьРасчетыВВалюте 
			ИЛИ (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
		Иначе
			СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов 		= ВалютаРегламентированногоУчета;
			СтрокаТаблицы.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ПрочитатьПараметрыУчетнойПолитики()

	ДатаУчетнойПолитики = Объект.Дата + 86400;

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, ДатаУчетнойПолитики);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы,
		"ФормаОткрытьФормуНастройкиРежима",
		"Видимость",
		НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДСПриИзмененииБазы(ИмяТаблицыИсточника)

	СтрокаТаблицы 	   = Элементы[ИмяТаблицыИсточника].ТекущиеДанные;
	ИзменяемаяКолонка  = Элементы[ИмяТаблицыИсточника].ТекущийЭлемент.Имя;

	КолонкаСуммыБезНДС = СтрЗаменить(ИзменяемаяКолонка, ИмяТаблицыИсточника, "");

	ПересчитатьНДС(ИзменяемаяКолонка, КолонкаСуммыБезНДС, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДСПриИзмененииСтавки(СтрокаТаблицы)

	Для Каждого Колонка Из ЧисловыеКолонки Цикл
		ПересчитатьНДС(Колонка.Ключ, Колонка.Ключ, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИзменяемаяКолонка, КолонкаСуммыБезНДС, СтрокаТаблицы)

	Если СтрНайти(ИзменяемаяКолонка,"СуммаБезНДС")>0 Тогда
		КолонкаНДС = СтрЗаменить(КолонкаСуммыБезНДС,"СуммаБезНДС","НДС");
		СтавкаНДС  = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		СуммаНДС   = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы[КолонкаСуммыБезНДС], Ложь, СтавкаНДС);
		СтрокаТаблицы[КолонкаНДС] = СуммаНДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗачтено()
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным") Тогда
		СтрокаТаблицы = Элементы.ДанныеПоНДС.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено Тогда
			Если СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным") Тогда
			Если (СтрокаТаблицы.СуммаБезНДСОплата = 0 И СтрокаТаблицы.НДСОплата = 0)
				ИЛИ (СтрокаТаблицы.СуммаБезНДСОплата > СтрокаТаблицы.СуммаБезНДС ИЛИ СтрокаТаблицы.НДСОплата > СтрокаТаблицы.НДС) Тогда
					СтрокаТаблицы.СуммаБезНДСОплата = СтрокаТаблицы.СуммаБезНДС;
					СтрокаТаблицы.НДСОплата         = СтрокаТаблицы.НДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент, СтрокаТаблицы, ИмяТаблицыИсточника)

	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти(ИмяТаблицыИсточника);
	ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация, Дата",
	ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация, Объект.Дата);

	ПриИзмененииКонтрагентаСервер(ПараметрыСтроки, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
	ЕстьРасчетыВВалюте = ЕстьРасчетыВВалюте
		ИЛИ (СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
				И НЕ СтрокаТаблицы.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение)

	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Контрагент Тогда
		СтрокаТаблицы.СчетФактура	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение)
	
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорКонтрагента Тогда
		СтрокаТаблицы.СчетФактура	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти(ИмяТаблицыИсточника)

	СтрокаТаблицы = Элементы[ИмяТаблицыИсточника].ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("Контрагент, 
		|ДоговорКонтрагента, ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах");
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииКонтрагентаСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ПараметрыСтроки.ДоговорКонтрагента,
		ПараметрыСтроки.Контрагент, ПараметрыДокумента.Организация, МассивВидовДоговоров);

	Если ЗначениеЗаполнено(ПараметрыСтроки.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСтроки.ДоговорКонтрагента, 
			"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		ПараметрыСтроки.ДоговорКонтрагентаВалютаВзаиморасчетов 		= РеквизитыДоговора.ВалютаВзаиморасчетов;
		ПараметрыСтроки.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		ПараметрыСтроки.ДоговорКонтрагентаВалютаВзаиморасчетов 		= ПараметрыДокумента.ВалютаРегламентированногоУчета;
		ПараметрыСтроки.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, СтрокаТаблицы)

	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"         , КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода"        , '00010101');
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент"           , СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДанныеПоНДС.Реквизиты.СчетФактура.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, СтрокаТаблицы, ИсточникТиповДокументов)

	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент",				СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",		СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.РегистрыНакопления." + ИсточникТиповДокументов + ".Измерения.ДокументОплаты.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда

		Объект.Дата = ДатаВводаОстатков;

	КонецЕсли;

	ДатаПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	ПрочитатьПараметрыУчетнойПолитики();
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормой();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПродавецДоступен(Знач РазделУчета, Знач ПредъявленСФ, Знач СчетУчета, Знач ВидДоговора)

	Если РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям") Тогда
		
		ПродавецДоступен = ПредъявленСФ
			И (ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку")
			ИЛИ (ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее")
			И СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам")));

	ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным") Тогда
		ПродавецДоступен = СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным")
			И ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку");

	Иначе
		ПродавецДоступен = Ложь;
	КонецЕсли;
	
	Возврат ПродавецДоступен;

КонецФункции 

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовДоговораКонтрагента(Знач ДоговорКонтрагента)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, 
		"ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидУчетаНДС", ВидУчетаНДС);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	Элементы.ДанныеПоНДСВидЦенности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ДанныеПоНДС.ТекущиеДанные;
		ЗаполнитьНадписиВТаблице(ТекущиеДанные);
		ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ТекущиеДанные.РеквизитыСчетаФактуры = ТекстВвестиРеквизиты;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.ДанныеПоНДС.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.ДанныеПоНДС.ТекущиеДанные, "НДСЗаписиКнигиПродаж");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСКонтрагентПриИзменении(Элемент)

	КонтрагентПриИзменении(Элемент, Элементы.ДанныеПоНДС.ТекущиеДанные, "ДанныеПоНДС");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтрагентОбработкаВыбора(Элемент, Элементы.ДанныеПоНДС.ТекущиеДанные, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДоговорКонтрагентаОбработкаВыбора(Элемент, Элементы.ДанныеПоНДС.ТекущиеДанные, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоНДС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ЗначенияРеквизитовДоговораКонтрагента(ТекущиеДанные.ДоговорКонтрагента);
		
		ТекущиеДанные.ПродавецДоступен = ПродавецДоступен(Объект.РазделУчета, ТекущиеДанные.ПредъявленСФ,ТекущиеДанные.СчетУчета, РеквизитыДоговора.ВидДоговора);
		ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов 		= РеквизитыДоговора.ВалютаВзаиморасчетов;
		ТекущиеДанные.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		ТекущиеДанные.ПродавецДоступен = Ложь;
		ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов 		= ВалютаРегламентированногоУчета;
		ТекущиеДанные.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах 	= Ложь;
	КонецЕсли;

	Если НЕ ТекущиеДанные.ПродавецДоступен Тогда
		ТекущиеДанные.Продавец = Неопределено;
	КонецЕсли;
	
	ЕстьРасчетыВВалюте = ЕстьРасчетыВВалюте
		ИЛИ (ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ ТекущиеДанные.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССтавкаНДСПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииСтавки(Элементы.ДанныеПоНДС.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССуммаБезНДСВалПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииБазы("ДанныеПоНДС");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССуммаБезНДСПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииБазы("ДанныеПоНДС");
	ПерезаполнитьЗачтено();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСНДСПриИзменении(Элемент)
	
	ПерезаполнитьЗачтено();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССуммаБезНДСОплатаПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииБазы("ДанныеПоНДС");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССуммаБезНДСПредъявленоПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииБазы("ДанныеПоНДС");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДССуммаБезНДСВключеноВСтоимостьПриИзменении(Элемент)

	ПересчитатьНДСПриИзмененииБазы("ДанныеПоНДС");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДанныеПоНДСРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.ДанныеПоНДС.ТекущаяСтрока;
	ОткрытьФормуРеквизитовСчетаФактуры(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФормуРеквизитовСчетаФактуры(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки = Объект.ДанныеПоНДС.НайтиПоИдентификатору(ВыбранноеЗначение);

	ЗначенияЗаполнения = Новый Структура();
	
	ЗначенияЗаполнения.Вставить("ДатаДокумента",       Объект.Дата);
	ЗначенияЗаполнения.Вставить("ПредъявленСФ",        ДанныеСтроки.ПредъявленСФ);
	ЗначенияЗаполнения.Вставить("ДатаСФ",              ДанныеСтроки.ДатаСФ);
	ЗначенияЗаполнения.Вставить("НомерСФ",             ДанныеСтроки.НомерСФ);
	ЗначенияЗаполнения.Вставить("СчетФактураДокумент", ДанныеСтроки.СчетФактураДокумент);
	ЗначенияЗаполнения.Вставить("Исправление",         ДанныеСтроки.Исправление);
	ЗначенияЗаполнения.Вставить("НомерИсправления",    ДанныеСтроки.НомерИсправления);
	ЗначенияЗаполнения.Вставить("ДатаИсправления",     ДанныеСтроки.ДатаИсправления);
	ЗначенияЗаполнения.Вставить("Продавец",            ДанныеСтроки.Продавец);
	ЗначенияЗаполнения.Вставить("КодВидаОперации",     ДанныеСтроки.КодВидаОперации);
	ЗначенияЗаполнения.Вставить("РазделУчета",         Объект.РазделУчета);
	ЗначенияЗаполнения.Вставить("КорректировочныйСчетФактура",            ДанныеСтроки.КорректировочныйСчетФактура);
	ЗначенияЗаполнения.Вставить("НомерИсходногоДокумента",                ДанныеСтроки.НомерИсходногоДокумента);
	ЗначенияЗаполнения.Вставить("ДатаИсходногоДокумента",                 ДанныеСтроки.ДатаИсходногоДокумента);
	ЗначенияЗаполнения.Вставить("УчитыватьИсправлениеИсходногоДокумента", ДанныеСтроки.УчитыватьИсправлениеИсходногоДокумента);
	ЗначенияЗаполнения.Вставить("НомерИсправленияИсходногоДокумента",     ДанныеСтроки.НомерИсправленияИсходногоДокумента);
	ЗначенияЗаполнения.Вставить("ДатаИсправленияИсходногоДокумента",      ДанныеСтроки.ДатаИсправленияИсходногоДокумента);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента",                     ДанныеСтроки.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("ПродавецДоступен",                       ДанныеСтроки.ПродавецДоступен);
	ЗначенияЗаполнения.Вставить("СчетУчета",                              ДанныеСтроки.СчетУчета);
	ЗначенияЗаполнения.Вставить("ТребуетсяСчетФактура",                   ТребуетсяСчетФактура);
	ЗначенияЗаполнения.Вставить("НомерСтрокиДокумента",                   ДанныеСтроки.НомерСтроки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",     ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыРеквизитовСчетаФактурыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаРеквизитыСчетаФактуры",
		ПараметрыФормы, ЭтаФорма,,,, ОповещениеФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыРеквизитовСчетаФактурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Объект.ДанныеПоНДС.НайтиПоИдентификатору(Элементы.ДанныеПоНДС.ТекущаяСтрока);
	ДанныеСтроки = Новый Структура("ПредъявленСФ,
		|ДатаСФ, НомерСФ, Исправление, КодВидаОперации,
		|НомерИсправления, ДатаИсправления, КорректировочныйСчетФактура,Продавец,
		|НомерИсходногоДокумента, ДатаИсходногоДокумента,
		|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента,
		|ДатаИсправленияИсходногоДокумента, ПродавецДоступен, РеквизитыСчетаФактуры, РеквизитыСчетаФактурыЗаполнены");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, РезультатЗакрытия);
	ДанныеСтроки.КорректировочныйСчетФактура = Не РезультатЗакрытия.СтандартныйСчетФактура;
	ЗаполнитьРеквизитыСчетаФактуры(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСчетаФактуры(ДанныеСтроки)

	РеквизитыСчетаФактурыТекст = ТекстВвестиРеквизиты;
		
	Если ДанныеСтроки.ПредъявленСФ 
		ИЛИ (ТребуетсяСчетФактура И ЗначениеЗаполнено(ДанныеСтроки.НомерСФ)) Тогда
		
		Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			//выданный СФ
			РеквизитыСчетаФактурыДляПредставления = Новый Структура("Дата, Номер, Исправление, НомерИсправления, 
			|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента, НомерИсходногоДокумента, ДатаИсходногоДокумента, Корректировочный");
			ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактурыДляПредставления, ДанныеСтроки);
			РеквизитыСчетаФактурыДляПредставления.Дата 	= ДанныеСтроки.ДатаСФ;
			РеквизитыСчетаФактурыДляПредставления.Номер = ДанныеСтроки.НомерСФ;
			Если ДанныеСтроки.КорректировочныйСчетФактура Тогда 
				РеквизитыСчетаФактурыДляПредставления.Корректировочный = Истина;
				Если ДанныеСтроки.Исправление Тогда 
					РеквизитыСчетаФактурыДляПредставления.НомерИсправляемогоКорректировочногоДокумента 	= ДанныеСтроки.НомерСФ;
				КонецЕсли;
			Иначе
				РеквизитыСчетаФактурыДляПредставления.Корректировочный = Ложь;
				Если ДанныеСтроки.Исправление Тогда 
					РеквизитыСчетаФактурыДляПредставления.НомерИсходногоДокумента = ДанныеСтроки.НомерСФ;
					РеквизитыСчетаФактурыДляПредставления.Дата	= ДанныеСтроки.ДатаИсправления;
				КонецЕсли;
			КонецЕсли;
			СтруктураПредставления = Документы.СчетФактураВыданный.ПолучитьПредставлениеПоРеквизитам(РеквизитыСчетаФактурыДляПредставления);
			РеквизитыСчетаФактурыТекст = СтруктураПредставления.ТекстПредставлениеКраткое;
		Иначе
			//полученный СФ
			РеквизитыСчетаФактурыДляПредставления = Новый Структура("ВидСчетаФактуры, Исправление, НомерИсправления, ДатаИсправления, 
			|НомерВходящегоДокумента, ДатаВходящегоДокумента, БланкСтрогойОтчетности");
			ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактурыДляПредставления, ДанныеСтроки);
			РеквизитыСчетаФактурыДляПредставления.ДатаВходящегоДокумента 	= ДанныеСтроки.ДатаСФ;
			РеквизитыСчетаФактурыДляПредставления.НомерВходящегоДокумента 	= ДанныеСтроки.НомерСФ;
			РеквизитыСчетаФактурыДляПредставления.БланкСтрогойОтчетности 	= Ложь;
			СтруктураПредставления = Документы.СчетФактураПолученный.ПолучитьПредставлениеПоРеквизитам(РеквизитыСчетаФактурыДляПредставления);
			РеквизитыСчетаФактурыТекст = СтруктураПредставления.ТекстПредставлениеКраткое;
		КонецЕсли; 
		
		РеквизитыСчетаФактурыЗаполнены 	= Истина;
	Иначе
		РеквизитыСчетаФактурыЗаполнены = Ложь;
	КонецЕсли;
	
	ДанныеСтроки.РеквизитыСчетаФактуры 				= РеквизитыСчетаФактурыТекст;
	ДанныеСтроки.РеквизитыСчетаФактурыЗаполнены 	= РеквизитыСчетаФактурыЗаполнены;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДанныеПоНДСРеквизитыСчетаФактуры" Тогда
		ОткрытьФормуРеквизитовСчетаФактуры(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ДанныеПоНДССчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоНДС.ТекущиеДанные;

	Если ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным") Тогда

		ТекущиеДанные.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.АвансыВыданные");
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам") Тогда
		
		ТекущиеДанные.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.АвансыПолученные");
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам") Тогда
		
		ТекущиеДанные.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ТаможенныеПлатежи");
		
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
