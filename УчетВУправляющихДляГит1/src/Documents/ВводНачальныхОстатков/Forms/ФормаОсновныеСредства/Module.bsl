////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ОС>

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ИзменениеСтрокиОС();

КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	
	Отказ = Истина;

	ИзменениеСтрокиОС(Истина, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ИзменениеСтрокиОС();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("ТолькоПросмотр",					Этаформа.ТолькоПросмотр);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормойСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруТабличнойЧастиОС()

	СтрокаТаблицы	= Элементы.ОС.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;

	СтруктураТабличнойЧастиОС = Новый Структура(
		"АмортизацияДо2002НУ, 
		|АмортизацияДо2009,
		|ВыработкаКоличествоБУ,
		|ГрафикАмортизацииБУ,
		|ДатаПоследнейМодернизацииРегл,
		|ДатаПринятияКУчетуРегл,
		|ДатаПриобретенияУСН,
		|ИнвентарныйНомерРегл,
		|КоэффициентАмортизацииБУ,
		|КоэффициентАмортизацииНУ,
		|КоэффициентУскоренияБУ,
		|МетодНачисленияАмортизацииНУ,
		|МОЛРегл,
		|НазваниеДокументаМодернизацииРегл,
		|НазваниеДокументаПринятияКУчетуРегл,
		|НакопленнаяАмортизацияБУ,
		|НакопленнаяАмортизацияНУ,
		|НакопленнаяАмортизацияПР,
		|НачислятьАмортизациюБУ,
		|НачислятьАмортизациюНУ,
		|НомерДокументаМодернизацииРегл,
		|НомерДокументаПринятияКУчетуРегл,
		|ОбъемПродукцииРаботБУ,
		|ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОсновноеСредство,
		|ПараметрВыработкиБУ,
		|ПервоначальнаяСтоимостьБУ,
		|ПервоначальнаяСтоимостьНУ,
		|ПервоначальнаяСтоимостьУСН,
		|ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|ПорядокПогашенияСтоимостиБУ,
		|РеквизитыДокументаОплаты,
		|СостояниеМодернизацииРегл,
		|СостояниеПринятияКУчетуРегл,
		|СпециальныйКоэффициентНУ,
		|СпособНачисленияАмортизацииБУ,
		|СпособОтраженияРасходовПоАмортизации,
		|СпособПоступленияРегл,
		|СрокИспользованияДляВычисленияАмортизацииБУ,
		|СрокПолезногоИспользованияБУ,
		|СрокПолезногоИспользованияНУ,
		|СрокПолезногоИспользованияУСН,
		|СтоимостьДляВычисленияАмортизацииБУ,
		|СтоимостьДляВычисленияАмортизацииПР,
		|СтоимостьДо2002НУ,
		|СуммаНачисленнойАмортизацииУСН,
		|СуммаПоследнейМодернизацииБУ,
		|СуммаПоследнейМодернизацииНУ,
		|СчетАмортизацииБУ,
		|СчетУчетаБУ,
		|ТекущаяСтоимостьБУ,
		|ТекущаяСтоимостьНУ,
		|ТекущаяСтоимостьПР,
		|ФактическийСрокИспользованияДо2009,
		|Контрагент,
		|ДоговорКонтрагента,
		|СпособОтраженияРасходовПоАренднымПлатежам,
		|КорректировкаСтоимостиНУ,
		|Арендатор,
		|ДатаПередачиВАренду,
		|СобытиеПередачиВАренду,
		|НазваниеДокументаПередачиВАренду,
		|НомерДокументаПередачиВАренду");

	ЗаполнитьЗначенияСвойств(СтруктураТабличнойЧастиОС, СтрокаТаблицы);
		
	Возврат СтруктураТабличнойЧастиОС;

КонецФункции

&НаКлиенте
Процедура ИзменениеСтрокиОС(ЭтоНовый = Ложь, Копирование = Ложь)

	ДанныеЗаполнения	= ?(Не ЭтоНовый ИЛИ Копирование, ПолучитьСтруктуруТабличнойЧастиОС(), Новый Структура);
	ДанныеЗаполнения.Вставить("Дата",						Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация",				Объект.Организация);
	ДанныеЗаполнения.Вставить("ПодразделениеОрганизации",	Объект.ПодразделениеОрганизации);

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("ЭтоНовый",			ЭтоНовый);
	СтруктураПараметров.Вставить("Копирование",			Копирование);
	СтруктураПараметров.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		Этаформа.ТолькоПросмотр);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыРедактированияЗавершение", ЭтотОбъект, СтруктураПараметров);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаРедактированияСтрокиОС",СтруктураПараметров, ЭтаФорма,УникальныйИдентификатор,,,ОповещениеФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыРедактированияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ЭтоНовый Тогда
		СтрокаТаблицы	= Объект.ОС.Добавить();
	Иначе
		СтрокаТаблицы	= Объект.ОС.НайтиПоИдентификатору(Элементы.ОС.ТекущаяСтрока);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатЗакрытия);
	
	Модифицированность	= Истина;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
