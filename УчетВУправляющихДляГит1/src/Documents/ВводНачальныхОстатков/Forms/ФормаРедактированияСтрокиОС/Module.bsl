////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СпособОтраженияРасходовПоАмортизации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособОтраженияРасходовПоАмортизации");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Следующие поля можно не заполнять, пока не задан порядок погашения стоимости в бухгалтерском учете.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособНачисленияАмортизацииБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при начислении износа по ЕНАОФ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособНачисленияАмортизацииБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при списании сразу в момент принятия к учету.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекущаяСтоимостьБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособНачисленияАмортизацииБУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при линейном способе начисления амортизации.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.Линейный);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при начислении амортизации по сумме чисел лет использования.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при способе начисления амортизации "уменьшаемого остатка"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при способе начисления амортизации пропорционально объему продукции.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка());

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при способе начисления амортизации по ЕНАОФ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПоЕНАОФНа1000кмПробега");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка());

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при способе начисления амортизации по ЕНАОФ на 1000 км пробега.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУЛинейный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУУменьшаемогоОстатка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоСуммеЧиселЛетИспользования");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокИспользованияДляВычисленияАмортизацииБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияБУПоЕНАОФНа1000кмПробега");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУПоЕНАОФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КоэффициентАмортизацииБУИзнос");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрВыработкиБУПропорциональноОбъемуПродукции");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъемПродукцииРаботБУПропорциональноОбъемуПродукции");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокПогашенияСтоимостиБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка());

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособНачисленияАмортизацииБУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СрокПолезногоИспользованияНУ, АмортизацияДо2009, ФактическийСрокИспользованияДо2009

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АмортизацияДо2009");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ФактическийСрокИспользованияДо2009");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не требуются при включении в расходы при принятии к учету.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекущаяСтоимостьНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АмортизацияДо2009");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ФактическийСрокИспользованияДо2009");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// АмортизацияДо2009, ФактическийСрокИспользованияДо2009

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АмортизацияДо2009");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ФактическийСрокИспользованияДо2009");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"МетодНачисленияАмортизацииНУ", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.МетодыНачисленияАмортизации.Нелинейный);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СрокПолезногоИспользованияНУ, АмортизацияДо2009, ФактическийСрокИспользованияДо2009

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АмортизацияДо2009");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ФактическийСрокИспользованияДо2009");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокВключенияСтоимостиВСоставРасходовНУ", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НачислятьАмортизациюНУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПервоначальнаяСтоимостьНУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПервоначальнаяСтоимостьНУ");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНалогаНаПрибыль", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ГруппаКонтрагентДоговор.Видимость                           = Форма.СпособПоступленияРегл = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
	Форма.Элементы.ГруппаСпособОтраженияРасходовПоЛизинговымПлатежам.Видимость = Форма.СпособПоступленияРегл = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
	
	Форма.Элементы.ГруппаНачислениеАмортизацииБУ.Видимость = Форма.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
	Форма.Элементы.ГруппаНачислениеИзносаБУ.Видимость      = Форма.ПорядокПогашенияСтоимостиБУ =ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	Форма.Элементы.ГруппаСтоимостьНеПогашаетсяБУ.Видимость = Форма.ПорядокПогашенияСтоимостиБУ =ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается");
	
	Форма.Элементы.ГруппаСпособыНачисленияАмортизацииБУ.Видимость = НЕ Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету");
	
	Форма.Элементы.ГруппаЛинейныйСпособ.Видимость                 = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
	Форма.Элементы.ГруппаСпособУменьшаемогоОстатка.Видимость      = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
	Форма.Элементы.ГруппаПоСуммеЧиселЛетИспользования.Видимость   = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
	Форма.Элементы.ГруппаПропорциональноОбъемуПродукции.Видимость = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
	Форма.Элементы.ГруппаПоЕНАОФ.Видимость                        = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
	Форма.Элементы.ГруппаПоЕНАОФНа1000кмПробега.Видимость         = Форма.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	
	Форма.Элементы.ГруппаНачислениеАмортизацииНУСтраницы.Видимость      = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	Форма.Элементы.ГруппаНачислениеАмортизацииИП.Видимость              = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	Форма.Элементы.ГруппаСтоимостьНеВключаетсяВРасходы.Видимость        = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
	Форма.Элементы.ГруппаСтоимостьНеВключаетсяВРасходыИП.Видимость      = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
	
	Форма.Элементы.ГруппаЕНАОФ.Видимость    = Форма.МетодНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ");
	Форма.Элементы.ГруппаЛинейный.Видимость = Форма.МетодНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
		
	Форма.Элементы.ТекущаяСтоимостьПР.Доступность = Форма.ПоддержкаПБУ18;
	Форма.Элементы.НакопленнаяАмортизацияБУ.Доступность = Форма.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации")
		ИЛИ Форма.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	Форма.Элементы.НакопленнаяАмортизацияНУ.Доступность = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	Форма.Элементы.НакопленнаяАмортизацияПР.Доступность = Форма.ПоддержкаПБУ18 И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетАмортизацииБУ).НалоговыйУчет;
	Форма.Элементы.СтоимостьДляВычисленияАмортизацииПР.Доступность = Форма.ПоддержкаПБУ18;
	
	Форма.Элементы.АмортизацияДо2009.Доступность = Форма.МетодНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Нелинейный");
	Форма.Элементы.ФактическийСрокИспользованияДо2009.Доступность = Форма.МетодНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Нелинейный");
	
	Форма.Элементы.Арендатор.Видимость = Форма.ОСПереданоВАренду;
	Форма.Элементы.ГруппаПередачаВАренду.Видимость = Форма.ОСПереданоВАренду;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммыРазниц(Форма)
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетУчетаБУ).НалоговыйУчет Тогда
		Форма.ТекущаяСтоимостьВР = Форма.ТекущаяСтоимостьБУ - Форма.ТекущаяСтоимостьНУ - Форма.ТекущаяСтоимостьПР;
	Иначе
		Форма.ТекущаяСтоимостьВР = 0;
		Форма.ТекущаяСтоимостьПР = 0;
	КонецЕсли;
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетАмортизацииБУ).НалоговыйУчет Тогда
		Форма.НакопленнаяАмортизацияВР = Форма.НакопленнаяАмортизацияБУ	- Форма.НакопленнаяАмортизацияНУ - Форма.НакопленнаяАмортизацияПР;
	Иначе
		Форма.НакопленнаяАмортизацияВР = 0;
		Форма.НакопленнаяАмортизацияПР = 0;
	КонецЕсли;
				
	Если Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
		Форма.НакопленнаяАмортизацияНУ = 0;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("ДанныеЗаполнения") Тогда
		Форма.СтоимостьДляВычисленияАмортизацииПР = Форма.ТекущаяСтоимостьПР - Форма.АмортизацияДо2002НУ;
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

&НаКлиенте
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	// Бухгалтерский учет.
	
	Если ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный") Тогда
			
			КоэффициентУскоренияБУ = 0;
			КоэффициентАмортизацииБУ = 0;
			ПараметрВыработкиБУ = Неопределено;
			ОбъемПродукцииРаботБУ = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка") Тогда
			
			КоэффициентАмортизацииБУ = 0;
			ПараметрВыработкиБУ = Неопределено;
			ОбъемПродукцииРаботБУ = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;

		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования") Тогда
			
			КоэффициентУскоренияБУ = 0;
			КоэффициентАмортизацииБУ = 0;
			ПараметрВыработкиБУ = Неопределено;
			ОбъемПродукцииРаботБУ = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции") Тогда
			
			КоэффициентУскоренияБУ = 0;
			КоэффициентАмортизацииБУ = 0;
			ГрафикАмортизацииБУ = Неопределено;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ") Тогда
			
			КоэффициентУскоренияБУ = 0;
			ПараметрВыработкиБУ = Неопределено;
			ОбъемПродукцииРаботБУ  = 0;
			СезонныйХарактерБУ = Ложь;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега") Тогда
			
			КоэффициентУскоренияБУ = 0;
			ГрафикАмортизацииБУ = Неопределено;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету") Тогда
			
			НачислятьАмортизациюБУ = Ложь;
			СрокПолезногоИспользованияБУ = 0;
			КоэффициентУскоренияБУ = 0;
			КоэффициентАмортизацииБУ = 0;
			ПараметрВыработкиБУ = Неопределено;
			ОбъемПродукцииРаботБУ = 0;
			СезонныйХарактерБУ = Ложь;
			ГрафикАмортизацииБУ = Неопределено;
			СтоимостьДляВычисленияАмортизацииБУ = 0;
			СрокИспользованияДляВычисленияАмортизацииБУ = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		КонецЕсли;
		
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается") Тогда
		  
		НакопленнаяАмортизацияБУ = 0;
		СпособНачисленияАмортизацииБУ = Неопределено;
		СрокПолезногоИспользованияБУ = 0;
		КоэффициентУскоренияБУ = 0;
		НачислятьАмортизациюБУ = Ложь;		
		СезонныйХарактерБУ = Ложь;
		ГрафикАмортизацииБУ = Неопределено;
		СтоимостьДляВычисленияАмортизацииБУ = 0;
		СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		  
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету") Тогда
		
		НакопленнаяАмортизацияБУ = 0;
		СпособНачисленияАмортизацииБУ = Неопределено;
		СрокПолезногоИспользованияБУ = 0;
		КоэффициентУскоренияБУ = 0;
		НачислятьАмортизациюБУ = Ложь;		
		СезонныйХарактерБУ = Ложь;
		ГрафикАмортизацииБУ = Неопределено;
		СуммаПоследнейМодернизацииБУ = 0;
		СтоимостьДляВычисленияАмортизацииБУ = 0;
		СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		  
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		  
		НакопленнаяАмортизацияБУ = 0;
		СпособНачисленияАмортизацииБУ = Неопределено;
		КоэффициентУскоренияБУ = 0;
		СезонныйХарактерБУ = Ложь;
		ГрафикАмортизацииБУ = Неопределено;
		СтоимостьДляВычисленияАмортизацииБУ = 0;
		СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		
	КонецЕсли;
	
	Если (ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
		ИЛИ ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету")) 
		И (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") 
			ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")) Тогда
		
		СпособОтраженияРасходов = Неопределено
		
	КонецЕсли;
	
	// Налоговый учет.
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
		
		НакопленнаяАмортизацияНУ = 0;
		МетодНачисленияАмортизацииНУ = Неопределено;
		СрокПолезногоИспользованияНУ = 0;
		НачислятьАмортизациюНУ = 0;
		СпециальныйКоэффициентНУ = 0;
		СтоимостьДо2002НУ = 0;
		АмортизацияДо2002НУ = 0;
		СуммаПоследнейМодернизацииНУ = 0;
		КоэффициентАмортизацииНУ = 0;
		
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		
		НакопленнаяАмортизацияНУ = 0;
		МетодНачисленияАмортизацииНУ = Неопределено;
		СрокПолезногоИспользованияНУ = 0;
		НачислятьАмортизациюНУ = 0;
		СпециальныйКоэффициентНУ = 0;
		СтоимостьДо2002НУ = 0;
		АмортизацияДо2002НУ = 0;
		КоэффициентАмортизацииНУ = 0;
		ТекущаяСтоимостьНУ = 0;
		
	КонецЕсли;

	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
				
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

&НаКлиенте
Процедура ЗаполнитьИспользуемыеРеквизитыНУ()
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		
		Если СрокПолезногоИспользованияНУ = 0 Тогда
			СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;		
			НачислятьАмортизациюНУ = Истина;
			ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияБУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияБУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияНУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияНУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияУСН = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияУСН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьИнвентарныйНомер(СтруктураПолей)
	
	Если ЗначениеЗаполнено(СтруктураПолей.ОсновноеСредство) Тогда
		СтруктураПолей.ИнвентарныйНомерРегл = СтруктураПолей.ОсновноеСредство.Код;
	Иначе
		СтруктураПолей.ИнвентарныйНомерРегл = "";
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ВернутьСтруктуруЗакрытия()
	
	Структура = Новый Структура();
	
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		Структура.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
			Закрыть(РезультатЗакрытия);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереданоВАренду(СчетУчета)
	
	СчетУчетаДоходныхВложенийВ_МЦ = БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	
	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
		
	Возврат СчетУчетаДоходныхВложенийВ_МЦ И УчетПоКонтрагентам;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
		
	Если ПроверитьЗаполнение() Тогда
		Модифицированность = Ложь;
		РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
		Закрыть(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
		
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ОсновноеСредство", ОсновноеСредство);
	СтруктураПолей.Вставить("ИнвентарныйНомерРегл", ИнвентарныйНомерРегл);	
	ПолучитьИнвентарныйНомер(СтруктураПолей);
	ИнвентарныйНомерРегл = СтруктураПолей.ИнвентарныйНомерРегл;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если ПервоначальнаяСтоимостьНУ = 0 Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если ТекущаяСтоимостьБУ = 0 Тогда
		ТекущаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если ТекущаяСтоимостьНУ = 0 
		И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		ТекущаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
	КонецЕсли;		
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьНУ = 0 
		И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		ТекущаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьНУ = 0
		И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		ТекущаяСтоимостьНУ = ТекущаяСтоимостьБУ;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетАмортизацииБУПриИзменении(Элемент)
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетАмортизацииБУ).Забалансовый Тогда
		
		НачислениеИзносаПоЕНАОФ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
		Если ПорядокПогашенияСтоимостиБУ <> НачислениеИзносаПоЕНАОФ  Тогда
			ТекстОповещения = НСтр("ru='В поле ""Порядок учета"" на закладке ""Бухгалтерский учет"" установлено значение ""%1""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, НачислениеИзносаПоЕНАОФ);
			ПоказатьОповещениеПользователя(ТекстОповещения);
		    ПорядокПогашенияСтоимостиБУ = НачислениеИзносаПоЕНАОФ;
		КонецЕсли;
		
		СтоимостьНеВключаетсяВРасходы = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		Если ПорядокВключенияСтоимостиВСоставРасходовНУ <> СтоимостьНеВключаетсяВРасходы  Тогда
			ТекстОповещения = НСтр("ru='В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение ""%1""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, СтоимостьНеВключаетсяВРасходы);
			ПоказатьОповещениеПользователя(ТекстОповещения);
		    ПорядокВключенияСтоимостиВСоставРасходовНУ = СтоимостьНеВключаетсяВРасходы;
		КонецЕсли;
		
	Иначе
		
		НачислениеАмортизацииБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		Если ПорядокПогашенияСтоимостиБУ <> НачислениеАмортизацииБУ  Тогда
			ТекстОповещения = НСтр("ru='В поле ""Порядок учета"" на закладке ""Бухгалтерский учет"" установлено значение ""%1""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, НачислениеАмортизацииБУ);
			ПоказатьОповещениеПользователя(ТекстОповещения);
		    ПорядокПогашенияСтоимостиБУ = НачислениеАмортизацииБУ;
			СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
		КонецЕсли;
		
		НачислениеАмортизацииНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		Если ПорядокВключенияСтоимостиВСоставРасходовНУ <> НачислениеАмортизацииНУ  Тогда
			ТекстОповещения = НСтр("ru='В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение ""%1""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, НачислениеАмортизацииНУ);
			ПоказатьОповещениеПользователя(ТекстОповещения);
		    ПорядокВключенияСтоимостиВСоставРасходовНУ = НачислениеАмортизацииНУ;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если НакопленнаяАмортизацияНУ = 0 
		И ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)
	
	Если ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
		
		СчетАмортизации = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01"));
		
		Если СчетАмортизацииБУ.Пустая() 
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетАмортизацииБУ).Забалансовый Тогда
			ТекстОповещения = НСтр("ru='В поле ""Счет начисления амортизации (износа)"" на закладке ""Начальные остатки"" установлен счет %1 ""%2""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, СчетАмортизации.Код, СчетАмортизации.Наименование);
			ПоказатьОповещениеПользователя(ТекстОповещения);
			СчетАмортизацииБУ = СчетАмортизации.Ссылка;
		КонецЕсли;
	
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		
		СчетИзноса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ИзносОсновныхСредств"));
		
		Если СчетАмортизацииБУ.Пустая() 
		ИЛИ НЕ БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетАмортизацииБУ).Забалансовый Тогда
			ТекстОповещения = НСтр("ru='В поле ""Счет начисления амортизации (износа)"" на закладке ""Начальные остатки"" установлен счет %1 ""%2""'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, СчетИзноса.Код, СчетИзноса.Наименование);
			ПоказатьОповещениеПользователя(ТекстОповещения);
			СчетАмортизацииБУ = СчетИзноса.Ссылка;
		КонецЕсли;
			
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты();
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	ОчиститьНеиспользуемыеРеквизиты();
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	Если СрокПолезногоИспользованияНУ = 0 Тогда
		СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;
		ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если СрокПолезногоИспользованияУСН = 0 Тогда
			СрокПолезногоИспользованияУСН = СрокПолезногоИспользованияБУ;
			ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;		
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоследнейАмортизацииБУПриИзменении(Элемент)

	Если СуммаПоследнейМодернизацииНУ = 0 Тогда
		СуммаПоследнейМодернизацииНУ = СуммаПоследнейМодернизацииБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	ОчиститьНеиспользуемыеРеквизиты();
	ЗаполнитьИспользуемыеРеквизитыНУ();
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если МетодНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный") Тогда
		АмортизацияДо2009 = 0;
		ФактическийСрокИспользованияДо2009 = 0;		
		КоэффициентАмортизацииНУ = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияДо2002НУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		ОСПереданоВАренду = ПереданоВАренду(СчетУчетаБУ);
	Иначе
		ОСПереданоВАренду = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ДатаУчетнойПолитики = КонецМесяца(Дата) + 1;
	
	ОСПереданоВАренду = ПереданоВАренду(СчетУчетаБУ);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Организация,
		ДатаУчетнойПолитики);
	
	// Установка значений по умолчанию.
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
		СпособПоступленияРегл = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
		ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
		СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
		НачислятьАмортизациюБУ = Истина;
		НачислятьАмортизациюНУ = Истина;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru='Основные средства: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок,
		?(Параметры.ЭтоНовый, Нстр("ru='Новая строка'"), ОсновноеСредство));
	
	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредстваСданныеВАренду);
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	УсловияОтбораСубсчетов.СчетаИсключения = МассивИсключений;
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетУчета, СчетаДляОтбора);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетАмортизацииБУ, СчетаДляОтбора);
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ПоддержкаПБУ18                   = УчетнаяПолитика.ПоддержкаПБУ18(Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики);
	ПлательщикНДФЛ                   = УчетнаяПолитика.ПлательщикНДФЛ(Организация, ДатаУчетнойПолитики);
	
	Элементы.ГруппаНалоговыйУчет.Видимость	= ПлательщикНалогаНаПрибыль;
	Элементы.ГруппаУчетИП.Видимость			= ПлательщикНДФЛ;

	УправлениеФормой(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ДатаУчетнойПолитики = Дата + 86400;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, ДатаУчетнойПолитики);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПлательщикНалогаНаПрибыль ИЛИ (СпособПоступленияРегл <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАренднымПлатежам");
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТекущаяСтоимостьБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
		ИЛИ СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботБУ");
		КонецЕсли;
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыль ИЛИ ПлательщикНДФЛ Тогда
		
		Если НЕ ПлательщикНДФЛ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		КонецЕсли;
			
		Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
			МассивНепроверяемыхРеквизитов.Добавить("ТекущаяСтоимостьНУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ТекущаяСтоимостьНУ");
			МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			Если НачислятьАмортизациюНУ Тогда
				Если МетодНачисленияАмортизацииНУ <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
					МассивНепроверяемыхРеквизитов.Добавить("АмортизацияДо2009");
					МассивНепроверяемыхРеквизитов.Добавить("ФактическийСрокИспользованияДо2009");
				КонецЕсли;		
			Иначе
				МассивНепроверяемыхРеквизитов.Добавить("ТекущаяСтоимостьНУ");
				МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
				МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
				МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ТекущаяСтоимостьНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("АмортизацияДо2009");
		МассивНепроверяемыхРеквизитов.Добавить("ФактическийСрокИспользованияДо2009");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАренднымПлатежам");
	
	КонецЕсли;
	
	Если НЕ ПлательщикНДФЛ 
		ИЛИ (ПлательщикНДФЛ И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации")) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МетодНачисленияАмортизацииНУ");		
	КонецЕсли;
	
	Если НЕ ПлательщикНДФЛ 
		ИЛИ (ПлательщикНДФЛ И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации")
		ИЛИ (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации")И МетодНачисленияАмортизацииНУ <> ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ"))) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизацииНУ");
	КонецЕсли;
 	
	Если (ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
		ИЛИ ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету")
		ИЛИ ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")) 
		И ((ПлательщикНалогаНаПрибыль ИЛИ ПлательщикНДФЛ)
			И (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") 
				ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")
				ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка"))) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАмортизации");
	КонецЕсли;
	
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПриобретенияУСН");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовУСН");
	КонецЕсли;
	
	Если НЕ ОСПереданоВАренду Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Арендатор");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПередачиВАренду");
		МассивНепроверяемыхРеквизитов.Добавить("СобытиеПередачиВАренду");
		МассивНепроверяемыхРеквизитов.Добавить("НазваниеДокументаПередачиВАренду");
		МассивНепроверяемыхРеквизитов.Добавить("НомерДокументаПередачиВАренду");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовДоговоров = БухгалтерскийУчетПереопределяемый.ПолучитьМассивВидовДоговоров(Истина); // СПоставщиком

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		Контрагент, Организация, МассивВидовДоговоров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПорядокВключенияСтоимостиВСоставРасходовНУ(Форма)

	СпособПоступления = Форма.СпособПоступленияРегл;
	Если СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		Если Форма.ПрименяетсяУСНДоходыМинусРасходы Тогда
			Форма.ПорядокВключенияСтоимостиВСоставРасходовУСН = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов");
		КонецЕсли;
		
		Если Форма.ПлательщикНДФЛ Тогда
			Если Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
				Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СпособПоступленияРеглПриИзменении(Элемент)
	
	Если СпособПоступленияРегл <> ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		СпособОтраженияРасходовПоАренднымПлатежам = 
			ПредопределенноеЗначение("Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка");
		КорректировкаСтоимостиНУ = 0;
	КонецЕсли;
	
	УстановитьПорядокВключенияСтоимостиВСоставРасходовНУ(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры



