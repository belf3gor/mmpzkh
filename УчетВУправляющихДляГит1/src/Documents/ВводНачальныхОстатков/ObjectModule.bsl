#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ОбновитьСтатусПодчиненныхДокументов Экспорт;
Перем ОбновитьСодержаниеПодчиненныхДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Процедура проверяет заполненность колонок у табличных частей.
// В процедуру передается соответствие вида субконто колонке табличной части
// Проверка осуществляется по всем субконто каждого СчетУчета и соответстию этого субконто данным табличной части
//
Процедура ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(
		ИмяТабличнойЧасти,
		ПредставлениеТабличнойЧасти,
		СоответствиеСубконтоИКолонки,
		СоответствиеИменКолонок,
		ДругиеОбязательныеКолонки = Неопределено,		
		Отказ)

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;

	СписокОбязательныхРеквизитов = "";
	
	МассивСчетов = Новый Массив;
	Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.СчетУчета) Тогда
			МассивСчетов.Добавить(ТекущаяСтрока.СчетУчета);
		Иначе
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
				// Делаем отдельную проверку заполнения СчетУчета - что бы названия таб.частей совпадало с указанным в форме.
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2, не указан счет учета'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти); 
				Поле = Префикс + "СчетУчета";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Если МассивСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПланСчетов.Ссылка                                                     КАК Счет,
		|	ПланСчетов.Ссылка.Количественный                                      КАК КоличественныйУчет,
		|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто, Неопределено)          КАК ВидСубконто,
		|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Предопределенный, ЛОЖЬ) КАК Предопределенный,
		|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Код, """")              КАК Код,
		|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Наименование, """")     КАК Наименование
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК ПланСчетов
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|	ПО
		|		ПланСчетов.Ссылка = ХозрасчетныйВидыСубконто.Ссылка
		|ГДЕ
		|	ПланСчетов.Ссылка В (&МассивСчетов)
		|УПОРЯДОЧИТЬ ПО
		|	ПланСчетов.Порядок
		|";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСчетовИСубконто = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		// 1. Проверка субконто
		ВсеСубконтоСчета = ТаблицаСчетовИСубконто.НайтиСтроки(Новый Структура("Счет", ТекущаяСтрока.СчетУчета));
		Для Каждого ТекущийВидСубконто Из ВсеСубконтоСчета Цикл
			СоответствующаяВидуСубконтоКолонка = СоответствиеСубконтоИКолонки.Получить(ТекущийВидСубконто.ВидСубконто);
			Если (СоответствующаяВидуСубконтоКолонка <> Неопределено) И (НЕ ПустаяСтрока(СоответствующаяВидуСубконтоКолонка)) Тогда
				Значение = ТекущаяСтрока[СоответствующаяВидуСубконтоКолонка];
				ПредставлениеКолонки = СоответствиеИменКолонок.Получить(СоответствующаяВидуСубконтоКолонка);
				Если (ПредставлениеКолонки = Неопределено) ИЛИ (ПустаяСтрока(ПредставлениеКолонки)) Тогда
					ПредставлениеКолонки = СоответствующаяВидуСубконтоКолонка;
				КонецЕсли;				
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2, для счета учета %3 не заполнена колонка %4'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ТекущаяСтрока.СчетУчета,
						?(СтрНайти(СоответствующаяВидуСубконтоКолонка, "Субконто") = 1, ТекущийВидСубконто.Наименование, ПредставлениеКолонки));
					Поле = Префикс + СоответствующаяВидуСубконтоКолонка;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					Отказ = Истина;
				КонецЕсли;
			Иначе
				// Не прописано соответствие для данного вида субконто, значит не надо проверять
			КонецЕсли;
		КонецЦикла;
		// 2. Проверка количественного учета
		НайденнаяСтрока = ТаблицаСчетовИСубконто.Найти(ТекущаяСтрока.СчетУчета, "Счет");
		Если НайденнаяСтрока <> Неопределено Тогда
			КоличественныйУчет = НайденнаяСтрока.КоличественныйУчет;
			Если КоличественныйУчет И ТекущаяСтрока.Количество = 0 Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2, для счета учета %3 не заполнено количество.'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					ТекущаяСтрока.СчетУчета);
				Поле = Префикс + "Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		// 3. Другие обязательные колонки
		
		// для учета капитальных вложений часть счетов надо исключить при проверке партий
		МассивСчетовУчетаПартий = Новый Массив;
		МассивСчетовУчетаПартий.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		МассивСчетовУчетаПартий.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств);
		МассивСчетовУчетаПартий.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
		МассивСчетовУчетаПартий.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		МассивСчетовУчетаПартий.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные);
		
		Если ТипЗнч(ДругиеОбязательныеКолонки) = Тип("Структура") Тогда
			Для Каждого ТекущаяКолонка Из ДругиеОбязательныеКолонки Цикл
				Значение = ТекущаяСтрока[ТекущаяКолонка.Ключ];
				
				Если (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
					ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные)
						И ТекущаяКолонка.Ключ = "Партия" Тогда
					Если МассивСчетовУчетаПартий.Найти(ТекущаяСтрока.СчетУчета) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 не заполнена колонка %3'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ТекущаяКолонка.Значение);
					Поле = Префикс + ТекущаяКолонка.Ключ;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаЗаполненияТабличнойЧастиНДС(
				ИмяТабличнойЧасти,
				ТабличнаяЧастьПартии,
				ТабличнаяЧастьСФ,
				МассивНепроверяемыхРеквизитов,
				Отказ);

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
	
	Если ИмяТабличнойЧасти = "НоменклатураНаСкладе" Тогда
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ПредставлениеТабличнойЧасти = "Капитальные вложения";
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
			ПредставлениеТабличнойЧасти = "Товары на складе";
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
			ПредставлениеТабличнойЧасти = "Материалы на складе";
		КонецЕсли;
	КонецЕсли;

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Товары);
	ВестиПартионныйУчетБУ = Ложь;
	Для С=1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + С] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			ВестиПартионныйУчетБУ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Возврат;
	КонецЕсли;

	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);

	СписокВидовЦенностейУслуги = Новый СписокЗначений;
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧастьПартии",       ТабличнаяЧастьПартии);
	Запрос.УстановитьПараметр("ТабличнаяЧастьСФ",           ТабличнаяЧастьСФ);
	Запрос.УстановитьПараметр("СсылкаВидСубконто",          ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
	Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", СписокВидовЦенностейУслуги);
	Запрос.УстановитьПараметр("СчетаИсключения",            СчетаИсключения);

	Запрос.Текст = "
		|// Табличная часть Партии
		|ВЫБРАТЬ
		|	ТабличнаяЧастьПартии.Ключ        КАК Ключ,
		|	ТабличнаяЧастьПартии.Количество  КАК Количество,
		|	ТабличнаяЧастьПартии.НомерСтроки КАК НомерСтроки,
		|	ТабличнаяЧастьПартии.Партия      КАК Партия,
		|	ТабличнаяЧастьПартии.СчетУчета   КАК СчетУчета
		|ПОМЕСТИТЬ
		|	ВТ_ТабличнаяЧастьПартии
		|ИЗ
		|	&ТабличнаяЧастьПартии КАК ТабличнаяЧастьПартии
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|// Табличная часть СФ
		|ВЫБРАТЬ
		|	ТабличнаяЧастьСФ.Ключ        КАК Ключ,
		|	ТабличнаяЧастьСФ.Количество  КАК Количество,
		|	ТабличнаяЧастьСФ.ВидЦенности КАК ВидЦенности
		|ПОМЕСТИТЬ
		|	ВТ_ТабличнаяЧастьСФ
		|ИЗ
		|	&ТабличнаяЧастьСФ КАК ТабличнаяЧастьСФ
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|// Общее количество по СФ
		|ВЫБРАТЬ
		|	ВТ_ТабличнаяЧастьСФ.Ключ КАК Ключ,
		|	СУММА(ВТ_ТабличнаяЧастьСФ.Количество) КАК КоличествоПоСФ
		|ПОМЕСТИТЬ ВТ_КоличествоПоСФ
		|ИЗ
		|	ВТ_ТабличнаяЧастьСФ
		|ГДЕ
		|	НЕ ВТ_ТабличнаяЧастьСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТабличнаяЧастьСФ.Ключ
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_КоличествоПоСФ.КоличествоПоСФ, 0) КАК КоличествоПоСФ,
		|	ВТ_ТабличнаяЧастьПартии.Количество            КАК КоличествоПоПартии,
		|	ВТ_ТабличнаяЧастьПартии.НомерСтроки           КАК НомерСтроки,
		|	ВТ_ТабличнаяЧастьПартии.Партия                КАК Партия,
		|	ВТ_ТабличнаяЧастьПартии.СчетУчета             КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА ВТ_КоличествоПоСФ.КоличествоПоСФ ЕСТЬ NULL ТОГДА
		|			ИСТИНА // Нет СФ - не проверять
		|		КОГДА (НЕ ВТ_КоличествоПоСФ.КоличествоПоСФ ЕСТЬ NULL)
		|				И (ЕСТЬNULL(ВТ_КоличествоПоСФ.КоличествоПоСФ, 0) <> ВТ_ТабличнаяЧастьПартии.Количество) ТОГДА
		|			ЛОЖЬ // Есть СФ и количество по СФ не совпало с количеством по партии
		|		КОГДА (НЕ ВТ_КоличествоПоСФ.КоличествоПоСФ ЕСТЬ NULL)
		|				И (ЕСТЬNULL(ВТ_КоличествоПоСФ.КоличествоПоСФ, 0) = ВТ_ТабличнаяЧастьПартии.Количество) ТОГДА
		|			ИСТИНА // Есть СФ и количество по СФ совпало с количеством по партии
		|	КОНЕЦ КАК ПравильнаяПартия
		|ИЗ
		|	ВТ_ТабличнаяЧастьПартии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_КоличествоПоСФ
		|		ПО ВТ_ТабличнаяЧастьПартии.Ключ = ВТ_КоличествоПоСФ.Ключ
		|ГДЕ
		|	НЕ ВТ_ТабличнаяЧастьПартии.СчетУчета В (&СчетаИсключения)
		|
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ПравильнаяПартия Тогда
				Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 табличной части %2 количество по партии (%3) не соответствует итоговому количеству по счетам-фактурам (%4) (табличная часть Данные по счетам-фактурам)'"),
					Выборка.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Выборка.КоличествоПоПартии,
					Выборка.КоличествоПоСФ);
				Поле = Префикс + "Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДатаУчетнойПолитики = Дата + 86400;
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, ДатаУчетнойПолитики);
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоСФ.СпособУчетаНДС");
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверкаЗаполненияТабличнойЧастиСтруктураСтоимостиЗапасов(
				ИмяТабличнойЧасти,
				ТабличнаяЧастьЭлементы,
				ТабличнаяЧастьСтруктураСтоимостиЗапасов,
				МассивНепроверяемыхРеквизитов,
				Отказ);

	ДатаУчетнойПолитики = Дата + 86400;
	УчитыватьРасходыПоСтатьямЗатрат     = УчетнаяПолитика.УчитыватьРасходыПоСтатьямЗатрат(Организация, ДатаУчетнойПолитики);
	УчитыватьРасходыПоЭлементамЗатрат   = УчетнаяПолитика.УчитыватьРасходыПоЭлементамЗатрат(Организация, ДатаУчетнойПолитики);
	
	Если УчитыватьРасходыПоСтатьямЗатрат ИЛИ УчитыватьРасходыПоЭлементамЗатрат Тогда
		
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
			ПредставлениеТабличнойЧасти = "Готовая продукция";
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
			ПредставлениеТабличнойЧасти = "Незавершенное производство";
		Иначе
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТабличнаяЧастьЭлементы",              ТабличнаяЧастьЭлементы);
		Запрос.УстановитьПараметр("ТабличнаяЧастьСтруктураСтоимостиЗапасов", ТабличнаяЧастьСтруктураСтоимостиЗапасов);
		Запрос.УстановитьПараметр("СсылкаВидСубконто",                       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабличнаяЧастьЭлементы.Ключ КАК Ключ,
		|	ТабличнаяЧастьЭлементы.Сумма КАК Сумма,
		|	ТабличнаяЧастьЭлементы.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ТабличнаяЧастьЭлементы
		|ИЗ
		|	&ТабличнаяЧастьЭлементы КАК ТабличнаяЧастьЭлементы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧастьСтруктураСтоимостиЗапасов.Ключ КАК Ключ,
		|	ТабличнаяЧастьСтруктураСтоимостиЗапасов.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов
		|ИЗ
		|	&ТабличнаяЧастьСтруктураСтоимостиЗапасов КАК ТабличнаяЧастьСтруктураСтоимостиЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов.Ключ КАК Ключ,
		|	СУММА(ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов.Сумма) КАК СуммаСтруктурыЗатрат
		|ПОМЕСТИТЬ ВТ_СуммаСтруктурыЗатрат
		|ИЗ
		|	ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов КАК ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТабличнаяЧастьСтруктураСтоимостиЗапасов.Ключ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат, 0) КАК СуммаСтруктурыЗатрат,
		|	ВТ_ТабличнаяЧастьЭлементы.Сумма КАК Сумма,
		|	ВТ_ТабличнаяЧастьЭлементы.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат ЕСТЬ NULL 
		|				И ЕСТЬNULL(ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат, 0) <> ВТ_ТабличнаяЧастьЭлементы.Сумма
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат ЕСТЬ NULL 
		|				И ЕСТЬNULL(ВТ_СуммаСтруктурыЗатрат.СуммаСтруктурыЗатрат, 0) = ВТ_ТабличнаяЧастьЭлементы.Сумма
		|			ТОГДА ИСТИНА
		|	КОНЕЦ КАК ПравильнаяСтруктураЗатрат
		|ИЗ
		|	ВТ_ТабличнаяЧастьЭлементы КАК ВТ_ТабличнаяЧастьЭлементы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаСтруктурыЗатрат КАК ВТ_СуммаСтруктурыЗатрат
		|		ПО ВТ_ТабличнаяЧастьЭлементы.Ключ = ВТ_СуммаСтруктурыЗатрат.Ключ";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.ПравильнаяСтруктураЗатрат Тогда
					Префикс = ИмяТабличнойЧасти + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 табличной части %2 сумма остатка (%3) не соответствует итоговой сумме остатка структуры затрат (%4) (табличная часть Структура стоимости)'"),
					Выборка.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Выборка.Сумма,
					Выборка.СуммаСтруктурыЗатрат);
					Поле = Префикс + "Сумма";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ УчитыватьРасходыПоСтатьямЗатрат Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтруктураСтоимостиЗапасов.СтатьяЗатрат");
		КонецЕсли; 	
		Если НЕ УчитыватьРасходыПоЭлементамЗатрат Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтруктураСтоимостиЗапасов.ЭлементЗатрат");
		КонецЕсли; 
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СтруктураСтоимостиЗапасов.СтатьяЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СтруктураСтоимостиЗапасов.ЭлементЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СтруктураСтоимостиЗапасов.Сумма");
	КонецЕсли;

КонецПроцедуры

// Проверка правильности заполнения табличной части ОС
Процедура ПроверкаТабличнойЧастиОС(Отказ)
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	
	Для Каждого Строка Из ОС Цикл 
		
		Если Строка.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету И
			ОтражатьВНалоговомУчете Тогда
			
			//Запрет некоторых движений если ОС списано при принятии
			Если Строка.НачислятьАмортизациюНУ тогда
				Отказ = Истина;
				СтрокаСообщение = "ru='(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету'";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка.НакопленнаяАмортизацияНУ) тогда
				Отказ = Истина;
				СтрокаСообщение = "ru='(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету'";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка.ТекущаяСтоимостьНУ) Тогда 
				Отказ = Истина;
				СтрокаСообщение = НСтр("ru='(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		// Для полученных в лизинг объектов ОС необходимо указание контрагента-арендодателя и договора аренды,
		// а также способа отражения расходов по арендным платежам для плательщиков налога на прибыль 
		// и индивидуальных предпринимателей на общей системе налогообложения (НДФЛ).
		Если Строка.СпособПоступленияРегл = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга И ПлательщикНалогаНаПрибыль Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
				Отказ = Истина;
				СтрокаСообщение = НСтр("ru='Для ОС, полученных по договору лизинга, должен быть указан контрагент'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				Отказ = Истина;
				СтрокаСообщение = НСтр("ru='Для ОС, полученных по договору лизинга, должен быть указан договор'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СпособОтраженияРасходовПоАренднымПлатежам) Тогда
				Отказ = Истина;
				СтрокаСообщение = НСтр("ru='Для ОС, полученных по договору лизинга, должен быть указан способ отражения расходов по арендным платежам'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщение);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка, что ОС из табличной части не приняты к учету в других организациях.
//
Процедура ПроверкаОСНеПринятыКУчетуВДругихОрганизациях(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаОС",   ОС.Выгрузить());

	// Выборка основных средств, принятых к учету в других организациях.
	Запрос.Текст = "
		|// Таблица ОС
		|ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.ДатаПринятияКУчетуРегл КАК ДатаПринятияКУчетуРегл
		|ПОМЕСТИТЬ
		|	ВТ_ТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОсновноеСредство,
		|	ДатаПринятияКУчетуРегл
		|;
		|
		|// Все принятия к учету ОС по другим организациям
		|ВЫБРАТЬ
		|	Рег.ОсновноеСредство КАК ОсновноеСредство,
		|	Рег.Организация КАК Организация,
		|	Рег.ДатаСостояния КАК ДатаСостояния,
		|	Рег.Состояние
		|ПОМЕСТИТЬ ВТ_ПринятияКУчету
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК Рег
		|ГДЕ
		|	Рег.ОсновноеСредство В (ВЫБРАТЬ ВТ_ТаблицаОС.ОсновноеСредство ИЗ ВТ_ТаблицаОС)
		|	И Рег.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|	И Рег.Организация <> &Организация
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОсновноеСредство,
		|	ДатаСостояния
		|;
		|
		|// Все списания ОС по другим организациям
		|ВЫБРАТЬ
		|	Рег.ОсновноеСредство КАК ОсновноеСредство,
		|	Рег.Организация КАК Организация,
		|	Рег.ДатаСостояния КАК ДатаСостояния,
		|	Рег.Состояние
		|ПОМЕСТИТЬ ВТ_СнятияСУчета
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК Рег
		|ГДЕ
		|	Рег.ОсновноеСредство В (ВЫБРАТЬ ВТ_ТаблицаОС.ОсновноеСредство ИЗ ВТ_ТаблицаОС)
		|	И Рег.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|	И Рег.Организация <> &Организация
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОсновноеСредство,
		|	ДатаСостояния
		|;
		|
		|// Поиск ОС, которые в других организациях были приняты к  учету, но не списаны, т.е. ещё находятся в учете
		|ВЫБРАТЬ
		|	ВТ_ТаблицаОС.Организация                   КАК Организация,
		|	ВТ_ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
		|	ВТ_ТаблицаОС.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
		|	ВТ_ТаблицаОС.ОсновноеСредство.Код          КАК КодОсновногоСредства,
		|	ВТ_ТаблицаОС.ДатаПринятияКУчетуРегл        КАК ДатаПринятияКУчетуРегл,
		|	ЕСТЬNULL(Рег_ПринятиеКУчету.ДатаСостояния, ДАТАВРЕМЯ(1,1,1))                           КАК ДатаПринятияКУчетуВДругойОрганизации,
		|	ЕСТЬNULL(Рег_ПринятиеКУчету.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияПринятияКУчету,
		|	ЕСТЬNULL(Рег_СнятияСУчета.ДатаСостояния, ДАТАВРЕМЯ(3999,12,31))                        КАК ДатаСнятияСУчетаВДругойОрганизации,
		|	ЕСТЬNULL(Рег_СнятияСУчета.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))   КАК ОрганизацияСнятияСУчета
		|
		|ИЗ
		|	ВТ_ТаблицаОС
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|		ВЫБРАТЬ
		|			МАКСИМУМ(Рег.ДатаСостояния),
		|			Рег.ОсновноеСредство КАК ОсновноеСредство,
		|			Рег.Организация КАК Организация
		|		ИЗ
		|		ВТ_ПринятияКУчету КАК Рег
		|		СГРУППИРОВАТЬ ПО
		|			Рег.ОсновноеСредство,
		|			Рег.Организация
		|	) КАК Рег_ПринятиеКУчету
		|	ПО
		|		ВТ_ТаблицаОС.Организация <> Рег_ПринятиеКУчету.Организация
		|		И ВТ_ТаблицаОС.ОсновноеСредство = Рег_ПринятиеКУчету.ОсновноеСредство
		|		И ВТ_ТаблицаОС.ДатаПринятияКУчетуРегл >= Рег_ПринятиеКУчету.ДатаСостояния
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|		ВЫБРАТЬ
		|			МАКСИМУМ(Рег.ДатаСостояния),
		|			Рег.ОсновноеСредство КАК ОсновноеСредство,
		|			Рег.Организация КАК Организация
		|		ИЗ
		|		ВТ_СнятияСУчета КАК Рег
		|		СГРУППИРОВАТЬ ПО
		|			Рег.ОсновноеСредство,
		|			Рег.Организация
		|	) КАК Рег_СнятияСУчета
		|	ПО
		|		Рег_ПринятиеКУчету.Организация = Рег_СнятияСУчета.Организация
		|		И ВТ_ТаблицаОС.ОсновноеСредство = Рег_СнятияСУчета.ОсновноеСредство
		|		И ВТ_ТаблицаОС.ДатаПринятияКУчетуРегл >= Рег_СнятияСУчета.ДатаСостояния
		|
		|// Надо выбрать только те ОС, по которым в других организациях есть принятие к учету и нет списания, или списание раньше
		|ГДЕ
		|	ЕСТЬNULL(Рег_СнятияСУчета.ДатаСостояния, ДАТАВРЕМЯ(3999,12,31)) > ДатаПринятияКУчетуРегл
		|	И НЕ Рег_ПринятиеКУчету.Организация ЕСТЬ NULL
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			НайденнаяСтрока = ОС.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
			Если НайденнаяСтрока <> Неопределено Тогда
				Префикс = "ОС[" + Формат(НайденнаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 Основное средство %2 (%3) %4 уже было принято к учету в организации %5'"),
					НайденнаяСтрока.НомерСтроки,
					Выборка.ОсновноеСредствоНаименование,
					Выборка.КодОсновногоСредства,
					Формат(Выборка.ДатаПринятияКУчетуВДругойОрганизации, "ДФ=dd.MM.yyyy"),
					Выборка.ОрганизацияПринятияКУчету);
					Поле = Префикс;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура конвертирует табличную часть УдалитьМПЗПриобретенные,
// распределяя строки по другим табличным частям - приемникам:
//
// - НоменклатураНаСкладе
// - СпецодеждаИСпецоснасткаВЭксплуатации
// - МатериалыПереданныеВПереработку
// - ТоварыВРозничнойТорговлеАТТ
// - ТоварыВРозничнойТорговлеНТТ
//
// ВНИМАНИЕ!
// Перед конвертацией табличные части - приемники будут очищены!
// Все внесенные вручную данные будут удалены.
//
// Также здесь конвертируется поле Ключ (берется из УдалитьКлюч) в табличных частях
// Конвертация ключа внутри одной табличной части
// - МПЗОтгруженные
// - ДанныеПоСФ
// Конвертация ключа при конвертации из другой табличной части
// - НоменклатураНаСкладе (брать из УдалитьМПЗПриобретенные)
// - СпецодеждаИСпецоснасткаВЭксплуатации (брать из УдалитьМПЗПриобретенные)
// - МатериалыПереданныеВПереработку (брать из УдалитьМПЗПриобретенные)
// - ТоварыВРозничнойТорговлеАТТ (брать из УдалитьМПЗПриобретенные)
// - ТоварыВРозничнойТорговлеНТТ (брать из УдалитьМПЗПриобретенные)
// Не конвертировать: ////?
// - Обороты
// - МПЗРеализованныеИП
//
// Также есть отдельная процедура, которая будет конвертировать другие документы ВНО,
// которые не попали в конвертацию материалов
//
Процедура ВыполнитьКонвертациюНоменклатурыПриПереходеС2БП() Экспорт

	// Правила конвертации:
	// 1. Распределение табличной части "МПЗПриобретенные "
	//
	// Распределение строк из УдалитьМПЗПриобретенные зависит от РазделУчета (шапка документа) и счета учета в каждой строке
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда задействованы следующие табличные части:
	// - СпецодеждаИСпецоснасткаВЭксплуатации
	//    - только если счет учета = СпецодеждаВЭксплуатации или СпецоснасткаВЭксплуатации
	// - МатериалыПереданныеВПереработку
	//    - только если счет учета = МатериалыПереданныеВПереработку
	// - НоменклатураНаСкладе
	//    - все остальные счета учета
	//
	//Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда задействованы следующие табличные части:
	// - ТоварыВРозничнойТорговлеАТТ
	//    - только если счет учета = ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ
	// - ТоварыВРозничнойТорговлеНТТ
	//    - только если счет учета = ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ
	// - НоменклатураНаСкладе
	//    - все остальные счета учета
	//
	//Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда задействованы следующие табличные части:
	// - НоменклатураНаСкладе
	//
	//Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда задействованы следующие табличные части:
	// - НоменклатураНаСкладе
	//
	// 2. Заполнение поля Ключ
	// Вне зависимости от раздела учета обрабатываются все табличные части

	// 1. Конвертация таблицы материалов (и ключей)
	Если УдалитьМПЗПриобретенные.Количество() > 0 Тогда
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
			// Для этого раздела учета задействованы табличные части
			// - НоменклатураНаСкладе
			// - СпецодеждаИСпецоснасткаВЭксплуатации
			// - МатериалыПереданныеВПереработку

			// Чтобы не было задвоения в случае повторной конвертации, очистить табличные части - приемники
			НоменклатураНаСкладе.Очистить();
			СпецодеждаИСпецоснасткаВЭксплуатации.Очистить();
			МатериалыПереданныеВПереработку.Очистить();

			Для Каждого ТекущаяСтрока Из УдалитьМПЗПриобретенные Цикл
				Если (ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации)
					ИЛИ (ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации) Тогда
					НоваяСтрока = СпецодеждаИСпецоснасткаВЭксплуатации.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				ИначеЕсли ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
					НоваяСтрока = МатериалыПереданныеВПереработку.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				Иначе
					НоваяСтрока = НоменклатураНаСкладе.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				КонецЕсли;
				
				МассивПодчиненныхСтрок = ДанныеПоСФ.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.Ключ));
				Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
					ТекущаяПодчиненнаяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ);
				КонецЦикла;
			КонецЦикла;

		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
			// Для этого раздела учета задействованы табличные части
			// - НоменклатураНаСкладе
			// - ТоварыВРозничнойТорговлеАТТ
			// - ТоварыВРозничнойТорговлеНТТ

			// Чтобы не было задвоения в случае повторной конвертации, очистить табличные части - приемники
			НоменклатураНаСкладе.Очистить();
			ТоварыВРозничнойТорговлеАТТ.Очистить();
			ТоварыВРозничнойТорговлеНТТ.Очистить();

			Для Каждого ТекущаяСтрока Из УдалитьМПЗПриобретенные Цикл
				Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					НоваяСтрока = ТоварыВРозничнойТорговлеАТТ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				ИначеЕсли ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					НоваяСтрока = ТоварыВРозничнойТорговлеНТТ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				Иначе
					НоваяСтрока = НоменклатураНаСкладе.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				КонецЕсли;
				
				МассивПодчиненныхСтрок = ДанныеПоСФ.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.Ключ));
				Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
					ТекущаяПодчиненнаяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ);
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты)
			ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения) Тогда

			// Для этого раздела учета задействованы табличные части
			// - НоменклатураНаСкладе

			// Чтобы не было задвоения в случае повторной конвертации, очистить табличные части - приемники
			НоменклатураНаСкладе.Очистить();

			// Перенести табличную часть УдалитьМПЗПриобретенные 1:1 в НоменклатураНаСкладе
			Для Каждого ТекущаяСтрока Из УдалитьМПЗПриобретенные Цикл
				НоваяСтрока = НоменклатураНаСкладе.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ); // Сохранить ключ связи с другими табличными частями
				
				МассивПодчиненныхСтрок = Обороты.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.Ключ));
				Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
					ТекущаяПодчиненнаяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ);
				КонецЦикла;
				
				МассивПодчиненныхСтрок = ДанныеПоСФ.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.Ключ));
				Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
					ТекущаяПодчиненнаяСтрока.Ключ = Строка(ТекущаяСтрока.Ключ);
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

	// 2. Конвертация ключей
	ВыполнитьКонвертациюКлючейСвязиТабличныхЧастейПриПереходеС2БП();

КонецПроцедуры

// Процедура конвертирует поле Ключ (берется из УдалитьКлюч) в табличных частях
// - МПЗОтгруженные
// - ДанныеПоСФ
// - МПЗРеализованныеИП
// - Обороты
// Остальные случаи (когда ключ берется из другой табличной части) реализуются
// процедурой ВыполнитьКонвертациюНоменклатурыПриПереходеС2БП, которая запускается раньше
//
Процедура ВыполнитьКонвертациюКлючейСвязиТабличныхЧастейПриПереходеС2БП() Экспорт

	Для Каждого ТекущаяСтрока Из МПЗОтгруженные Цикл		
		Если ПустаяСтрока(ТекущаяСтрока.Ключ) И (ТекущаяСтрока.УдалитьКлюч <> 0) Тогда
			НовыйУИН = Новый УникальныйИдентификатор;
			ТекущаяСтрока.Ключ = НовыйУИН;
			
			МассивПодчиненныхСтрок = ДанныеПоСФ.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьКлюч));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
			
			МассивПодчиненныхСтрок = Обороты.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьКлюч));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из МПЗРеализованныеИП Цикл		
		Если ПустаяСтрока(ТекущаяСтрока.Ключ) И (ТекущаяСтрока.УдалитьКлюч <> 0) Тогда
			НовыйУИН = Новый УникальныйИдентификатор;
			ТекущаяСтрока.Ключ = НовыйУИН;
			
			МассивПодчиненныхСтрок = Обороты.НайтиСтроки(Новый Структура("УдалитьКлюч", ТекущаяСтрока.УдалитьКлюч));
			Для Каждого ТекущаяПодчиненнаяСтрока Из МассивПодчиненныхСтрок Цикл
				ТекущаяПодчиненнаяСтрока.Ключ = НовыйУИН;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура конвертирует табличную часть РасчетыСКонтрагентами,
// анализируя СчетУчета - если он пассивный, и заполнена Сумма, то эта сумма переносится в СуммаКт
//
Процедура ВыполнитьКонвертациюРасчетовСКонтрагентамиПриПереходеС2БП() Экспорт

	// Правила конвертации:
	//
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами
	// то проанализировать табличную часть РасчетыСКонтрагентами и для пассивных счетов
	//  перенести ненулевую сумму из поля Сумма в поле СуммаКт.
	// Если Сумма = 0, значит строка табличной части уже была когда-то обработана, или её не надо обрабатывать

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		Для Каждого ТекущаяСтрока Из РасчетыСКонтрагентами Цикл
			Если (ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный) И (ТекущаяСтрока.Сумма <> 0) Тогда
				ТекущаяСтрока.СуммаКт = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.Сумма   = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура конвертирует табличную часть РасчетыСПодотчетнымиЛицами,
// анализируя СчетУчета - если он пассивный, и заполнена Сумма, то эта сумма переносится в СуммаКт
//
Процедура ВыполнитьКонвертациюРасчетовСПодотчетнымиЛицамиПриПереходеС2БП() Экспорт

	// Правила конвертации:
	//
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами
	// то проанализировать табличную часть РасчетыСПодотчетнымиЛицами и для пассивных счетов
	//  перенести ненулевую сумму из поля Сумма в поле СуммаКт.
	// Если Сумма = 0, значит строка табличной части уже была когда-то обработана, или её не надо обрабатывать

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		Для Каждого ТекущаяСтрока Из РасчетыСПодотчетнымиЛицами Цикл
			Если (ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный) И (ТекущаяСтрока.Сумма <> 0) Тогда
				ТекущаяСтрока.СуммаКт = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.Сумма   = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедуры формирования счетов-фактур
//
Процедура СформироватьСчетаФактуры(Отказ)

	ПрефиксОрганизации = ?(ЗначениеЗаполнено(Организация.Префикс),Организация.Префикс,"0");
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
		И Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить() Тогда
		ПрефиксОрганизации = "А"+ПрефиксОрганизации;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Номер,
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.ДоговорКонтрагента,
	|	СчетФактураПолученный.Исправление КАК Исправление,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.ИсправляемыйСчетФактура,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.ВалютаДокумента,
	|	СчетФактураПолученный.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.СформированПриВводеНачальныхОстатковНДС
	|	И СчетФактураПолученный.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Номер,
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДоговорКонтрагента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ИсправляемыйСчетФактура,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ВалютаДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СформированПриВводеНачальныхОстатковНДС
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.ВидСчетаФактуры,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента,
	|	СчетФактураВыданный.Исправление,
	|	СчетФактураВыданный.НомерИсправления,
	|	СчетФактураВыданный.ИсправляемыйСчетФактура,
	|	NULL,
	|	NULL,
	|	СчетФактураВыданный.ВалютаДокумента,
	|	СчетФактураВыданный.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС
	|	И СчетФактураВыданный.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер,
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ИсправляемыйСчетФактура,
	|	NULL,
	|	NULL,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВалютаДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СформированПриВводеНачальныхОстатковНДС
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация";
	
	СуществующиеСчетаФактуры = Запрос.Выполнить().Выгрузить();
	ТаблицаСозданныхСчетовФактур = СуществующиеСчетаФактуры.СкопироватьКолонки();

	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.СчетФактураВыданный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Запрос.УстановитьПараметр("МассивВидовЦенностейНалоговогоАгента", 
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.Организация КАК Организация,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Док.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ДоговорКонтрагентаВалютаВзаиморасчетов,
	|	Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА Док.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	|				И Док.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА Док.ДокументОплаты
	|		ИНАЧЕ Док.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	Док.ДатаСФ КАК ДатаСФ,
	|	Док.НомерСФ КАК НомерСФ,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Док.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	|				И Док.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА Док.СуммаБезНДСОплата
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|				И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.СуммаБезНДСВал
	|		ИНАЧЕ Док.СуммаБезНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА Док.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	|				И Док.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА Док.НДСОплата
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|				И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.НДСВал
	|		ИНАЧЕ Док.НДС
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|				И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Док.ВалютнаяСуммаСНДС КАК ВалютнаяСуммаСНДС,
	|	ВЫБОР
	|		КОГДА Док.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	|				И Док.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НалоговыйАгент,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НДСПоКорректировочномуСчетуФактуре,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА ВЫБОР
	|					КОГДА Док.ПредъявленСФ
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредъявленСФ,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвансПолученный,
	|	Док.КорректировочныйСчетФактура,
	|	Док.Исправление,
	|	Док.НомерИсправления,
	|	Док.ДатаИсправления,
	|	Док.НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента,
	|	Док.Продавец,
	|	Док.НомерСтроки - 1 КАК ИндексСтроки,
	|	Док.КодВидаОперации КАК КодВидаОперации
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.СчетФактураДокумент В(&МассивПустыхСсылок)
	|	И ВЫБОР
	|			КОГДА Док.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|				ТОГДА ВЫБОР
	|						КОГДА Док.ПредъявленСФ
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";

	ТаблицаСчетовФактур = Запрос.Выполнить().Выгрузить();
	
	КолонкиГруппировок	= "Организация, Контрагент, ДоговорКонтрагента, СчетФактура, ДатаСФ, НомерСФ, ВалютаДокумента, НалоговыйАгент, АвансПолученный,
		|КорректировочныйСчетФактура, Исправление, НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента,
		|НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента, НДСПоКорректировочномуСчетуФактуре, Продавец, ИндексСтроки, КодВидаОперации";
	КолонкиСуммирования	= "СуммаБезНДС, НДС, ВалютнаяСуммаСНДС";
		
	ТаблицаСчетовФактур.Свернуть(КолонкиГруппировок, КолонкиСуммирования);

	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	Массив.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	ОписаниеТиповСФ =  Новый ОписаниеТипов(Массив, , );
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураДокумент", ОписаниеТиповСФ);
		
	КорректировочныеСчетаФактуры = Новый ТаблицаЗначений;
	КорректировочныеСчетаФактуры.Колонки.Добавить("Контрагент"); 
	КорректировочныеСчетаФактуры.Колонки.Добавить("ДоговорКонтрагента"); 
	КорректировочныеСчетаФактуры.Колонки.Добавить("НомерСФ"); 
	КорректировочныеСчетаФактуры.Колонки.Добавить("Дата"); 
	КорректировочныеСчетаФактуры.Колонки.Добавить("Ссылка"); 

	Для Каждого СтрокаТаблицы ИЗ ТаблицаСчетовФактур Цикл

		Попытка

			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				
				Если СтрокаТаблицы.НДСПоКорректировочномуСчетуФактуре Тогда
					НовыйСчетФактура = СформироватьСчетФактуруВыданныйКорректировочный(СтрокаТаблицы, ПрефиксОрганизации, КорректировочныеСчетаФактуры);
				ИначеЕсли СтрокаТаблицы.КорректировочныйСчетФактура Тогда
					НовыйСчетФактура = СформироватьСчетФактуруПолученныйКорректировочный(СтрокаТаблицы, КорректировочныеСчетаФактуры);
				ИначеЕсли СтрокаТаблицы.НалоговыйАгент Тогда
					НовыйСчетФактура = СформироватьСчетФактуруВыданныйНалоговыйАгент(СтрокаТаблицы, ПрефиксОрганизации);
				Иначе
					НовыйСчетФактура = СформироватьСчетФактуруПолученный(СтрокаТаблицы);
				КонецЕсли;
				
			ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
				
				Если СтрокаТаблицы.АвансПолученный Тогда
					НовыйСчетФактура = СформироватьСчетФактуруВыданныйНаАванс(СтрокаТаблицы, ПрефиксОрганизации);
				Иначе
					НовыйСчетФактура = СформироватьСчетФактуруПолученныйНаАванс(СтрокаТаблицы);
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.КорректировочныйСчетФактура Тогда
				
				НовыйСчетФактура = СформироватьСчетФактуруВыданныйКорректировочный(СтрокаТаблицы, ПрефиксОрганизации, КорректировочныеСчетаФактуры);
				
			Иначе
				
				НовыйСчетФактура = СформироватьСчетФактуруВыданный(СтрокаТаблицы, ПрефиксОрганизации);
				
			КонецЕсли;
			
			ОбработатьСоздаваемыйСчетФактуру(НовыйСчетФактура, СуществующиеСчетаФактуры, ТаблицаСозданныхСчетовФактур);

			СтрокаТаблицы.СчетФактураДокумент = НовыйСчетФактура.Ссылка;
			
			Если СтрокаТаблицы.КорректировочныйСчетФактура Тогда
				
				КорректировочныйСчетФактура = КорректировочныеСчетаФактуры.Добавить();
				ЗаполнитьЗначенияСвойств(КорректировочныйСчетФактура, НовыйСчетФактура.Ссылка);
				КорректировочныйСчетФактура.НомерСФ = СтрокаТаблицы.НомерСФ; 
						
			КонецЕсли;

		Исключение

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось сформировать документ ""Счет-фактура"" № %1 от %2. Вероятно счет-фактура с таким номером уже записан в информационной базе.'"),
			СтрокаТаблицы.НомерСФ,
			СтрокаТаблицы.ДатаСФ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);

			Отказ = Истина;

		КонецПопытки;

	КонецЦикла;

	ЗаполитьДокументСформированнымиCчетамиФактурами(ТаблицаСчетовФактур);

	ОбновитьСтатусПодчиненныхДокументов = Истина;

КонецПроцедуры

// Формирование счетов-фактур выданных
//
Функция СформироватьСчетФактуруВыданный(СтрокаТаблицы, ПрефиксОрганизации = "0")

	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	НовыйДокумент.Организация	= Организация;
	Если СтрокаТаблицы.Исправление Тогда
		НовыйДокумент.Дата	= ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправления), СтрокаТаблицы.ДатаИсправления, Дата);
	Иначе	
		НовыйДокумент.Дата	= ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата);
	КонецЕсли;
	НовыйДокумент.Контрагент			= СтрокаТаблицы.Контрагент;
	НовыйДокумент.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
	НовыйДокумент.ВалютаДокумента	    = СтрокаТаблицы.ВалютаДокумента;
	НовыйДокумент.ДокументОснование		= СтрокаТаблицы.СчетФактура;
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаТаблицы.СчетФактура;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	// Установка номера формируемого документа
	НовыйДокумент.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаТаблицы.НомерСФ, ПрефиксОрганизации, НовыйДокумент.Метаданные().ДлинаНомера);
	НовыйДокумент.КодВидаОперации		= СтрокаТаблицы.КодВидаОперации;
	НовыйДокумент.КодСпособаВыставления	= 1;
	НовыйДокумент.Комментарий			= "Создан автоматически документом <"+Ссылка+">";
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(НовыйДокумент);
	
	Возврат НовыйДокумент;

КонецФункции

Функция СформироватьСчетФактуруВыданныйКорректировочный(СтрокаТаблицы, ПрефиксОрганизации = "0", КорректировочныеСчетаФактуры)

	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, НомерСФ, Дата", СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.НомерСФ, ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата));											  
	
	МассивСчетовФактур = КорректировочныеСчетаФактуры.НайтиСтроки(СтруктураОтбора);								  
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		
		Документ = Документы.СчетФактураВыданный.СоздатьДокумент();
		Документ.Организация				= Организация;
		Документ.Дата						= ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата);
		Документ.Контрагент				    = СтрокаТаблицы.Контрагент;
		Документ.ДоговорКонтрагента		    = СтрокаТаблицы.ДоговорКонтрагента;
		Документ.ВалютаДокумента	        = СтрокаТаблицы.ВалютаДокумента;
		Документ.ДокументОснование			= СтрокаТаблицы.СчетФактура;
		Документ.СформированПриВводеНачальныхОстатковНДС = Истина;
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Документ.Исправление = СтрокаТаблицы.Исправление;
		Документ.НомерИсправления = СтрокаТаблицы.НомерИсправления;
		// Установка номера формируемого документа
		Документ.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаТаблицы.НомерСФ, ПрефиксОрганизации, Документ.Метаданные().ДлинаНомера);
		Документ.КодВидаОперации		= СтрокаТаблицы.КодВидаОперации;
		Документ.КодСпособаВыставления	= 1;
		Документ.Комментарий			= "Создан автоматически документом <"+Ссылка+">";
		ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Документ);
		
	Иначе
		
		Документ = МассивСчетовФактур[0].Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение основания
	Основание = Документ.ДокументыОснования.Добавить();
	Основание.ДокументОснование 		= СтрокаТаблицы.СчетФактура;
	Основание.НомерИсходногоДокумента 	= СтрокаТаблицы.НомерИсходногоДокумента;
	Основание.ДатаИсходногоДокумента	= СтрокаТаблицы.ДатаИсходногоДокумента;
	Основание.УчитыватьИсправлениеИсходногоДокумента 	= СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента;
	Основание.НомерИсправленияИсходногоДокумента 		= СтрокаТаблицы.НомерИсправленияИсходногоДокумента;
	Основание.ДатаИсправленияИсходногоДокумента 		= СтрокаТаблицы.ДатаИсправленияИсходногоДокумента;
	
	Возврат Документ;

КонецФункции

Процедура ОбработатьСоздаваемыйСчетФактуру(НовыйСчетФактура, СуществующиеСчетаФактуры, ТаблицаСозданныхСчетовФактур)
	
	СтруктураОтбора = Новый Структура("ДокументОснование, ВидСчетаФактуры, 
	|Контрагент, ДоговорКонтрагента, Исправление, 
	|НомерИсправления, ИсправляемыйСчетФактура", 
	НовыйСчетФактура.ДокументОснование, НовыйСчетФактура.ВидСчетаФактуры,
	НовыйСчетФактура.Контрагент, НовыйСчетФактура.ДоговорКонтрагента, НовыйСчетФактура.Исправление,
	НовыйСчетФактура.НомерИсправления, НовыйСчетФактура.ИсправляемыйСчетФактура);
	
	
	Если ТипЗнч(НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") 
		ИЛИ ТипЗнч(НовыйСчетФактура) = Тип("ДокументОбъект.СчетФактураВыданный")  Тогда
		СтруктураОтбора.Вставить("Дата",  НовыйСчетФактура.Дата);
		СтруктураОтбора.Вставить("Номер", НовыйСчетФактура.Номер);
	Иначе
		СтруктураОтбора.Вставить("ДатаВходящегоДокумента",  НовыйСчетФактура.ДатаВходящегоДокумента);
		СтруктураОтбора.Вставить("НомерВходящегоДокумента", НовыйСчетФактура.НомерВходящегоДокумента);
	КонецЕсли;
	
	МассивСчетовФактур = СуществующиеСчетаФактуры.НайтиСтроки(СтруктураОтбора);								  
	МассивНовыхСчетовФактур = ТаблицаСозданныхСчетовФактур.НайтиСтроки(СтруктураОтбора);								  
	
	Если МассивСчетовФактур.Количество() <> 0 Тогда
		
		НовыйСчетФактура = МассивСчетовФактур[0].Ссылка;
		
	ИначеЕсли МассивНовыхСчетовФактур.Количество() <> 0 Тогда
		
		НовыйСчетФактура = МассивНовыхСчетовФактур[0].Ссылка;
		
	Иначе
		
		
		НовыйСчетФактура.Записать(РежимЗаписиДокумента.Запись);
		
		НоваяСтрока = ТаблицаСозданныхСчетовФактур.Добавить();
		
		НоваяСтрока.Ссылка                      = НовыйСчетФактура.Ссылка;
		НоваяСтрока.ДокументОснование           = НовыйСчетФактура.ДокументОснование;
		НоваяСтрока.ВидСчетаФактуры             = НовыйСчетФактура.ВидСчетаФактуры;
		НоваяСтрока.Контрагент                  = НовыйСчетФактура.Контрагент;
		НоваяСтрока.ДоговорКонтрагента          = НовыйСчетФактура.ДоговорКонтрагента;
		НоваяСтрока.ВалютаДокумента	            = НовыйСчетФактура.ВалютаДокумента;
		НоваяСтрока.Исправление                 = НовыйСчетФактура.Исправление;
		НоваяСтрока.НомерИсправления            = НовыйСчетФактура.НомерИсправления;
		НоваяСтрока.ИсправляемыйСчетФактура     = НовыйСчетФактура.ИсправляемыйСчетФактура;		
		НоваяСтрока.Дата                        = НовыйСчетФактура.Дата;
		НоваяСтрока.Номер                       = НовыйСчетФактура.Номер;
		Если ТипЗнч(НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") 
			ИЛИ ТипЗнч(НовыйСчетФактура) = Тип("ДокументОбъект.СчетФактураПолученный")  Тогда
			НоваяСтрока.ДатаВходящегоДокумента      = НовыйСчетФактура.ДатаВходящегоДокумента;
			НоваяСтрока.НомерВходящегоДокумента     = НовыйСчетФактура.НомерВходящегоДокумента;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСчетФактуруВыданныйНалоговыйАгент(СтрокаТаблицы, ПрефиксОрганизации = "0")

	НовыйДокумент = СформироватьСчетФактуруВыданный(СтрокаТаблицы, ПрефиксОрганизации);
	НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
	НовыйДокумент.КодВидаОперации = СтрокаТаблицы.КодВидаОперации;
	
	Возврат НовыйДокумент;

КонецФункции

Функция СформироватьСчетФактуруВыданныйНаАванс(СтрокаТаблицы, ПрефиксОрганизации = "0")

	НовыйДокумент = СформироватьСчетФактуруВыданный(СтрокаТаблицы, ПрефиксОрганизации);
	НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	НовыйДокумент.КодВидаОперации = СтрокаТаблицы.КодВидаОперации;

	Возврат НовыйДокумент;

КонецФункции

// Формирование счетов-фактур полученных
//
Функция СформироватьСчетФактуруПолученный(СтрокаТаблицы)

	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата);
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.ВидСчетаФактуры			= Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	НовыйДокумент.Контрагент				= СтрокаТаблицы.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаТаблицы.ДоговорКонтрагента;
	НовыйДокумент.ВалютаДокумента	        = СтрокаТаблицы.ВалютаДокумента;
	НовыйДокумент.ДокументОснование			= СтрокаТаблицы.СчетФактура;
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаТаблицы.СчетФактура;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаТаблицы.ДатаСФ;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаТаблицы.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.Продавец					= СтрокаТаблицы.Продавец;
	НовыйДокумент.КодВидаОперации			= СтрокаТаблицы.КодВидаОперации;
	НовыйДокумент.КодСпособаПолучения		= 1;
	НовыйДокумент.Комментарий				= "Создан автоматически документом <"+Ссылка+">";

	Возврат НовыйДокумент;

КонецФункции

Функция СформироватьСчетФактуруПолученныйНаАванс(СтрокаТаблицы)

	НовыйДокумент = СформироватьСчетФактуруПолученный(СтрокаТаблицы);
	НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
	НовыйДокумент.КодВидаОперации = СтрокаТаблицы.КодВидаОперации;
	
	Возврат НовыйДокумент;

КонецФункции

Функция СформироватьСчетФактуруПолученныйКорректировочный(СтрокаТаблицы, КорректировочныеСчетаФактуры)

	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, НомерСФ, Дата", СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.НомерСФ, ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата));											  
	
	МассивСчетовФактур = КорректировочныеСчетаФактуры.НайтиСтроки(СтруктураОтбора);								  
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		
		Документ = Документы.СчетФактураПолученный.СоздатьДокумент();
		Документ.Организация				= Организация;
		Документ.Дата						= ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ), СтрокаТаблицы.ДатаСФ, Дата);
		Документ.Контрагент					= СтрокаТаблицы.Контрагент;
		Документ.ДоговорКонтрагента			= СтрокаТаблицы.ДоговорКонтрагента;
		Документ.ВалютаДокумента	        = СтрокаТаблицы.ВалютаДокумента;
		Документ.ДокументОснование			= СтрокаТаблицы.СчетФактура;
		Документ.ДатаВходящегоДокумента		= СтрокаТаблицы.ДатаСФ;
		Документ.НомерВходящегоДокумента	= СтрокаТаблицы.НомерСФ;
		Документ.СформированПриВводеНачальныхОстатковНДС = Истина;
		Документ.ВидСчетаФактуры			= Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
		Документ.Исправление 				= СтрокаТаблицы.Исправление;
		Документ.НомерИсправления 			= СтрокаТаблицы.НомерИсправления;
		Документ.ДатаИсправления 			= СтрокаТаблицы.ДатаИсправления;
		
		Документ.КодВидаОперации		= СтрокаТаблицы.КодВидаОперации;
		Документ.КодСпособаПолучения	= 1;
		Документ.Комментарий			= "Создан автоматически документом <"+Ссылка+">";
			
	Иначе
		
		Документ = МассивСчетовФактур[0].Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	//Заполнение основания
	Основание = Документ.ДокументыОснования.Добавить();
	Основание.ДокументОснование 		= СтрокаТаблицы.СчетФактура;
	Основание.НомерИсходногоДокумента 	= СтрокаТаблицы.НомерИсходногоДокумента;
	Основание.ДатаИсходногоДокумента	= СтрокаТаблицы.ДатаИсходногоДокумента;
	Основание.УчитыватьИсправлениеИсходногоДокумента 	= СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента;
	Основание.НомерИсправленияИсходногоДокумента 		= СтрокаТаблицы.НомерИсправленияИсходногоДокумента;
	Основание.ДатаИсправленияИсходногоДокумента 		= СтрокаТаблицы.ДатаИсправленияИсходногоДокумента;
	
	Возврат Документ;

КонецФункции

// Формирует номер счета-фактуры с учетом префиксов с указанной значащей частью
//
Функция УстановитьНомерСФсУчетомПрефикса(НомерСФ, Префикс,ДлинаНомераДок)

	ЧистыйНомер = СокрЛП(НомерСФ);
	НовыйНомер = Префикс;

	Если СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) > ДлинаНомераДок Тогда
		Возврат ЧистыйНомер;
	КонецЕсли;

	Пока СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) < ДлинаНомераДок Цикл
		НовыйНомер = НовыйНомер + "0";
	КонецЦикла;

	Возврат НовыйНомер+ЧистыйНомер;

КонецФункции

// Процедура синхронизации проведения/удаления счетов-фактур
// при проведении/удалении документа ввода остатков
//
Процедура СинхронизироватьСостояниеСчетаФактуры()

	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.СчетФактураВыданный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.СчетФактураДокумент КАК Ссылка,
	|	Док.СчетФактураДокумент.ПометкаУдаления КАК ПометкаУдаления,
	|	Док.СчетФактураДокумент.Проведен КАК Проведен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И (НЕ Док.СчетФактураДокумент В (&МассивПустыхСсылок))";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СчетФактураОбъект = Выборка.Ссылка.ПолучитьОбъект();

		Если Проведен Тогда
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;

		Если СчетФактураОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			СчетФактураОбъект.ПометкаУдаления = ПометкаУдаления;
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

	КонецЦикла;

	ОбновитьСтатусПодчиненныхДокументов = Неопределено;

КонецПроцедуры

// Процедура обновления содержимого счетов-фактур
//
Процедура ОбновитьСчетаФактуры(Отказ)

	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.СчетФактураВыданный.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",             Ссылка);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	Запрос.УстановитьПараметр("РазделУчета", 		РазделУчета);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Организация",        Организация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.СчетФактураДокумент КАК СчетФактураДокумент,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.СчетФактура КАК СчетФактура,
	|	СУММА(ВЫБОР
	|			КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|					И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|					И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА Док.СуммаБезНДСВал
	|			ИНАЧЕ Док.СуммаБезНДС
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|					И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|					И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА Док.НДСВал
	|			ИНАЧЕ Док.НДС
	|		КОНЕЦ) КАК НДС,
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|				И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовДокументОплаты.Дата
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.Номер, """") <> """"
	|			ТОГДА ДанныеПервичныхДокументовДокументОплаты.Номер
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.НомерРегистратора, """")
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	Док.ДатаСФ,
	|	Док.НомерСФ,
	|	Док.КорректировочныйСчетФактура,
	|	Док.Исправление,
	|	Док.НомерИсправления,
	|	Док.ДатаИсправления,
	|	Док.НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента,
	|	Док.Продавец,
	|	Док.КодВидаОперации
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОплаты
	|	ПО Док.ДокументОплаты = ДанныеПервичныхДокументовДокументОплаты.Документ
	|		И ДанныеПервичныхДокументовДокументОплаты.Организация = &Организация
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И НЕ Док.СчетФактураДокумент В (&МассивПустыхСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.СчетФактураДокумент,
	|	Док.СтавкаНДС,
	|	Док.СчетФактура,
	|	Док.ДатаСФ,
	|	Док.НомерСФ,
	|	Док.КорректировочныйСчетФактура,
	|	Док.Исправление,
	|	Док.НомерИсправления,
	|	Док.ДатаИсправления,
	|	Док.НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента,
	|	Док.Продавец,
	|	Док.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовДокументОплаты.Дата
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.Номер, """") <> """"
	|			ТОГДА ДанныеПервичныхДокументовДокументОплаты.Номер
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.НомерРегистратора, """")
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)
	|				И Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДокумент,
	|	СчетФактура,
	|	СтавкаНДС
	|ИТОГИ ПО
	|	СчетФактураДокумент";

	ВыборкаСчетовФактур = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетФактураДокумент");

	Пока ВыборкаСчетовФактур.Следующий() Цикл

		ВыборкаСтрокиЗапроса = ВыборкаСчетовФактур.Выбрать();

		Если ТипЗнч(ВыборкаСчетовФактур.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ОбновитьСчетФактуруВыданный(ВыборкаСчетовФактур.СчетФактураДокумент, ВыборкаСтрокиЗапроса, Отказ)
		Иначе
			ОбновитьСчетФактуруПолученный(ВыборкаСчетовФактур.СчетФактураДокумент, ВыборкаСтрокиЗапроса, Отказ)
		КонецЕсли;

	КонецЦикла;

	ОбновитьСодержаниеПодчиненныхДокументов = Неопределено;

КонецПроцедуры

// Процедура обновляе содерджимое полученного счета-фактуры
//
Процедура ОбновитьСчетФактуруПолученный(ДокументСсылка, ДанныеСчетаФактуры, Отказ)

	Попытка

		СчетФактура = ДокументСсылка.ПолучитьОбъект();
		СчетФактура.СформированПриВводеНачальныхОстатковНДС = Истина;
		СчетФактура.Авансы.Очистить();
		СчетФактура.ДокументыОснования.Очистить();
		
		СчетФактура.СуммаДокумента      = 0;
		СчетФактура.СуммаНДСДокумента   = 0;
		СчетФактура.СуммаУвеличение       = 0;
		СчетФактура.СуммаНДСУвеличение    = 0;
		СчетФактура.СуммаУменьшение    = 0;
		СчетФактура.СуммаНДСУменьшение = 0;
		
		ПерваяСтрока = Истина;
		
		Пока ДанныеСчетаФактуры.Следующий() Цикл
			Если ПерваяСтрока И ДанныеСчетаФактуры.КорректировочныйСчетФактура Тогда
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			КонецЕсли;

			Если ПерваяСтрока Тогда
				СчетФактура.ВалютаДокумента		= ДанныеСчетаФактуры.ВалютаДокумента;
				СчетФактура.КодВидаОперации		= ДанныеСчетаФактуры.КодВидаОперации;
				СчетФактура.Исправление 		= ДанныеСчетаФактуры.Исправление;
				СчетФактура.НомерИсправления 	= ДанныеСчетаФактуры.НомерИсправления;
				СчетФактура.ДатаИсправления 	= ДанныеСчетаФактуры.ДатаИсправления;

				СчетФактура.ДатаВходящегоДокумента  = ДанныеСчетаФактуры.ДатаСФ;
				СчетФактура.НомерВходящегоДокумента = ДанныеСчетаФактуры.НомерСФ;
				СчетФактура.Продавец                = ДанныеСчетаФактуры.Продавец;
			КонецЕсли;
			
			Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
				ИЛИ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
				
				СчетФактура.ДокументОснование = ДанныеСчетаФактуры.СчетФактура;
				
				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;
				
				НоваяСтрока           = СчетФактура.Авансы.Добавить();
				НоваяСтрока.Сумма     = ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
				НоваяСтрока.СтавкаНДС = ДанныеСчетаФактуры.СтавкаНДС;
				НоваяСтрока.СуммаНДС  = ДанныеСчетаФактуры.НДС;				

				СчетФактура.СуммаДокумента    = СчетФактура.СуммаДокумента + НоваяСтрока.Сумма;
				СчетФактура.СуммаНДСДокумента = СчетФактура.СуммаНДСДокумента + НоваяСтрока.СуммаНДС;
				
			ИначеЕсли СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;
				НоваяСтрока.НомерИсходногоДокумента = ДанныеСчетаФактуры.НомерИсходногоДокумента;
				НоваяСтрока.ДатаИсходногоДокумента  = ДанныеСчетаФактуры.ДатаИсходногоДокумента;
				НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = ДанныеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента;
				Если ДанныеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента Тогда
					НоваяСтрока.НомерИсправленияИсходногоДокумента = ДанныеСчетаФактуры.НомерИсправленияИсходногоДокумента;
					НоваяСтрока.ДатаИсправленияИсходногоДокумента  = ДанныеСчетаФактуры.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
				Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
					СчетФактура.СуммаУвеличение    	= СчетФактура.СуммаУвеличение + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					СчетФактура.СуммаНДСУвеличение 	= СчетФактура.СуммаНДСУвеличение + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаУвеличение    	= ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаНДСУвеличение	= ДанныеСчетаФактуры.НДС;
				Иначе
					СчетФактура.СуммаДокумента		= СчетФактура.СуммаДокумента + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					СчетФактура.СуммаНДСДокумента	= СчетФактура.СуммаНДСДокумента + ДанныеСчетаФактуры.НДС;
				КонецЕсли;
		 
			Иначе
				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;

				СчетФактура.СуммаДокумента = СчетФактура.СуммаДокумента + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
				СчетФактура.СуммаНДСДокумента = СчетФактура.СуммаНДСДокумента + ДанныеСчетаФактуры.НДС;
			КонецЕсли;

			ПерваяСтрока = Ложь;
		КонецЦикла;
		
		КолонкиГруппировок	= "ДокументОснование,НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправленияИсходногоДокумента,
		|ДатаИсправленияИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента";
		КолонкиСуммирования	= "СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение";
        СчетФактура.ДокументыОснования.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		СчетФактура.Авансы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		СчетФактура.Записать(РежимЗаписиДокумента.Запись);

	Исключение

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Не удалось обновить документ %1.'"),
			ДокументСсылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);

		Отказ = Истина;

	КонецПопытки

КонецПроцедуры

// Процедура обновляе содерджимое выданного счета-фактуры
//
Процедура ОбновитьСчетФактуруВыданный(ДокументСсылка, ДанныеСчетаФактуры, Отказ)

	Попытка
		
		СчетФактура = ДокументСсылка.ПолучитьОбъект();
		СчетФактура.СформированПриВводеНачальныхОстатковНДС = Истина;
		
		СчетФактура.Авансы.Очистить();
		СчетФактура.ДокументыОснования.Очистить();
		
		СчетФактура.СуммаДокумента    = 0;
		СчетФактура.СуммаНДСДокумента = 0;
		СчетФактура.СуммаУвеличение     = 0;
		СчетФактура.СуммаНДСУвеличение  = 0;
		СчетФактура.СуммаУменьшение  = 0;
		СчетФактура.СуммаНДСУменьшение = 0;
		
		ПерваяСтрока = Истина;
		
		Пока ДанныеСчетаФактуры.Следующий() Цикл
			
			Если ПерваяСтрока И ДанныеСчетаФактуры.КорректировочныйСчетФактура Тогда
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			КонецЕсли;
			
			Если ПерваяСтрока Тогда
				СчетФактура.ВалютаДокумента 	= ДанныеСчетаФактуры.ВалютаДокумента;
				СчетФактура.КодВидаОперации 	= ДанныеСчетаФактуры.КодВидаОперации;
				СчетФактура.Исправление 		= ДанныеСчетаФактуры.Исправление;
				СчетФактура.НомерИсправления 	= ДанныеСчетаФактуры.НомерИсправления;
				
				Если ДанныеСчетаФактуры.КорректировочныйСчетФактура Тогда
					Если ДанныеСчетаФактуры.Исправление Тогда
						СчетФактура.ДатаИсправляемогоКорректировочногоДокумента  =  ДанныеСчетаФактуры.ДатаСФ;
						СчетФактура.НомерИсправляемогоКорректировочногоДокумента =  ДанныеСчетаФактуры.НомерСФ;
					Иначе
						СчетФактура.ДатаИсправляемогоКорректировочногоДокумента  =  "";
						СчетФактура.НомерИсправляемогоКорректировочногоДокумента =  "";
					КонецЕсли;
				Иначе
					Если ДанныеСчетаФактуры.Исправление Тогда
						СчетФактура.НомерИсходногоДокумента		 = ДанныеСчетаФактуры.НомерСФ;
						СчетФактура.ДатаИсходногоДокумента		 = ДанныеСчетаФактуры.ДатаСФ;
					Иначе
						СчетФактура.НомерИсходногоДокумента		 = "";
						СчетФактура.ДатаИсходногоДокумента		 = "";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
			Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда

				СчетФактура.ДокументОснование = ДанныеСчетаФактуры.СчетФактура;

				НоваяСтрока           = СчетФактура.Авансы.Добавить();
				НоваяСтрока.Сумма     = ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
				НоваяСтрока.СтавкаНДС = ДанныеСчетаФактуры.СтавкаНДС;
				НоваяСтрока.СуммаНДС  = ДанныеСчетаФактуры.НДС;

				Если ЗначениеЗаполнено(ДанныеСчетаФактуры.ДатаДокументаОплаты)
					ИЛИ ЗначениеЗаполнено(ДанныеСчетаФактуры.НомерДокументаОплаты) Тогда

					НоваяСтрока                = СчетФактура.ПлатежноРасчетныеДокументы.Добавить();
					НоваяСтрока.НомерДокумента = ДанныеСчетаФактуры.НомерДокументаОплаты;
					НоваяСтрока.ДатаДокумента  = ДанныеСчетаФактуры.ДатаДокументаОплаты;
				КонецЕсли;
				
				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;

				СчетФактура.СуммаДокумента = СчетФактура.СуммаДокумента + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
				СчетФактура.СуммаНДСДокумента = СчетФактура.СуммаНДСДокумента + ДанныеСчетаФактуры.НДС;
				
			ИначеЕсли СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				
				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;
				НоваяСтрока.НомерИсходногоДокумента = ДанныеСчетаФактуры.НомерИсходногоДокумента;
				НоваяСтрока.ДатаИсходногоДокумента  = ДанныеСчетаФактуры.ДатаИсходногоДокумента;
				НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = ДанныеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента;
				Если ДанныеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента Тогда
					НоваяСтрока.НомерИсправленияИсходногоДокумента = ДанныеСчетаФактуры.НомерИсправленияИсходногоДокумента;
					НоваяСтрока.ДатаИсправленияИсходногоДокумента  = ДанныеСчетаФактуры.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
				Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
					СчетФактура.СуммаУменьшение    = СчетФактура.СуммаУменьшение + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					СчетФактура.СуммаНДСУменьшение = СчетФактура.СуммаНДСУменьшение + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаУменьшение    = ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаНДСУменьшение = ДанныеСчетаФактуры.НДС;
				ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
					СчетФактура.СуммаУвеличение    = СчетФактура.СуммаУвеличение + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					СчетФактура.СуммаНДСУвеличение = СчетФактура.СуммаНДСУвеличение + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаУвеличение    = ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					НоваяСтрока.СуммаНДСУвеличение = ДанныеСчетаФактуры.НДС;
				Иначе
					СчетФактура.СуммаДокумента    = СчетФактура.СуммаДокумента + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
					СчетФактура.СуммаНДСДокумента = СчетФактура.СуммаНДСДокумента + ДанныеСчетаФактуры.НДС;
				КонецЕсли;
							
			Иначе

				НоваяСтрока                    = СчетФактура.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование  = ДанныеСчетаФактуры.СчетФактура;

				СчетФактура.СуммаДокумента = СчетФактура.СуммаДокумента + ДанныеСчетаФактуры.СуммаБезНДС + ДанныеСчетаФактуры.НДС;
				СчетФактура.СуммаНДСДокумента = СчетФактура.СуммаНДСДокумента + ДанныеСчетаФактуры.НДС;
			КонецЕсли;
			
			ПерваяСтрока = Ложь;
		КонецЦикла;
		
		КолонкиГруппировок	= "ДокументОснование,НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправленияИсходногоДокумента,
		|ДатаИсправленияИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента";
		КолонкиСуммирования	= "СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение";
        СчетФактура.ДокументыОснования.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		
		СчетФактура.Авансы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		СчетФактура.Записать(РежимЗаписиДокумента.Запись);

	Исключение

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Не удалось обновить документ %1.'"),
			ДокументСсылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);

		Отказ = Истина;

	КонецПопытки

КонецПроцедуры

// Процедура заполняет документ ввода остатков по НДС сформированными счетами-фактурами
//
Процедура ЗаполитьДокументСформированнымиCчетамиФактурами(ТаблицаСчетовФактур)

	Для Каждого СтрокаТаблицы ИЗ ТаблицаСчетовФактур Цикл
		СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, СчетФактура, НомерСФ, ДатаСФ");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);

		МассивСтрокДокумента = ДанныеПоНДС.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаОтбора ИЗ МассивСтрокДокумента Цикл
			СтрокаОтбора.СчетФактураДокумент = СтрокаТаблицы.СчетФактураДокумент;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Процедура подбирает созданные при вводе остатков по НДС в ред. 2.0
// счета-фактуры и заполняет табличную часть документа найденными значениями
//
Процедура ВыполнитьКонвертациюОстатковПоНДСПриПереходеС2БП() Экспорт

	// Правила конвертации:
	//
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
	// или РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
	// или РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
	// то выбрать все счета-фактуры сформированные при вводе остатков и записать найденный счет-фактуру
	// в табличную часть ДанныеПоНДС

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковДанныеПоСФ.НомерСтроки,
		|	ВводНачальныхОстатковДанныеПоСФ.СчетФактура
		|ПОМЕСТИТЬ РасчетныеДокументы
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК ВводНачальныхОстатковДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковДанныеПоСФ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.ДокументОснование
		|ПОМЕСТИТЬ СчетаФактуры
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС
		|	И СчетФактураВыданный.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученный.Ссылка,
		|	СчетФактураПолученный.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.СформированПриВводеНачальныхОстатковНДС
		|	И СчетФактураПолученный.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетныеДокументы.НомерСтроки,
		|	СчетаФактуры.Ссылка КАК СчетФактураДокумент
		|ИЗ
		|	РасчетныеДокументы КАК РасчетныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
		|		ПО РасчетныеДокументы.СчетФактура = СчетаФактуры.ДокументОснование";


		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл

				ДанныеПоНДС[Выборка.НомерСтроки-1].СчетФактураДокумент = Выборка.СчетФактураДокумент;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедуры формирования Ведомостей
//
Процедура СформироватьВедомости(Отказ)

	УчетЗарплатыИКадровВоВнешнейПрограмме	  = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно       = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда		
		ОбновитьСтатусПодчиненныхДокументов = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.Организация КАК Организация,
	|	Док.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Док.Ссылка.Дата КАК Дата,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.ПериодРегистрации КАК ПериодРегистрации,
	|	Док.Сумма КАК Сумма,
	|	Док.СпособВыплаты КАК СпособВыплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ведомость В(&МассивПустыхСсылок)
	|	И Док.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам)";

	ТаблицаВедомостей = Запрос.Выполнить().Выгрузить();
	ТаблицаВедомостей.Свернуть("Организация, ПодразделениеОрганизации, Дата, СчетУчета, ПериодРегистрации, СпособВыплаты", "Сумма");

	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"));
	Массив.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	ОписаниеТипов =  Новый ОписаниеТипов(Массив, , );
	ТаблицаВедомостей.Колонки.Добавить("Ведомость", ОписаниеТипов);

	ВыплатаЧерезКассу = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	ВыплатаЗарплаты   = Справочники.СпособыВыплатыЗарплаты.Зарплата;

	Для Каждого СтрокаТаблицы ИЗ ТаблицаВедомостей Цикл

		Если СтрокаТаблицы.СпособВыплаты = ВыплатаЧерезКассу Тогда
			ВидДокумента = "ВедомостьНаВыплатуЗарплатыВКассу";
			ОписаниеДокумента = "Ведомость в кассу";
		Иначе
			ВидДокумента = "ВедомостьНаВыплатуЗарплатыВБанк";
			ОписаниеДокумента = "Ведомость в банк";
		КонецЕсли;

		Попытка

			Если СтрокаТаблицы.СпособВыплаты = ВыплатаЧерезКассу Тогда
				НовыйДокумент = Документы.ВедомостьНаВыплатуЗарплатыВКассу.СоздатьДокумент();
				ВидМестаВыплаты = "";
			Иначе
				НовыйДокумент = Документы.ВедомостьНаВыплатуЗарплатыВБанк.СоздатьДокумент();
				ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НовыйДокумент, СтрокаТаблицы);
			НовыйДокумент.ВводНачальныхДанных = Истина;
			НовыйДокумент.Округление          = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
			НовыйДокумент.СпособВыплаты       = ВыплатаЗарплаты;
			Если ЗначениеЗаполнено(ВидМестаВыплаты) Тогда
				НовыйДокумент.ВидМестаВыплаты = ВидМестаВыплаты;
			КонецЕсли;
			НовыйДокумент.Комментарий		  = "Создан автоматически документом <"+Ссылка+">";

			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);

			СтрокаТаблицы.Ведомость = НовыйДокумент.Ссылка;

		Исключение

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось сформировать документ ""%1"". Вероятно документ ранее уже был записан в информационной базе.'"), ОписаниеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);

			Отказ = Истина;

		КонецПопытки;

	КонецЦикла;

	ЗаполитьДокументСформированнымиВедомостями(ТаблицаВедомостей);

	ОбновитьСтатусПодчиненныхДокументов = Истина;

КонецПроцедуры

// Процедура заполняет документ ввода остатков по зарплате сформированными ведомостями
//
Процедура ЗаполитьДокументСформированнымиВедомостями(ТаблицаВедомостей)

	Для Каждого СтрокаТаблицы ИЗ ТаблицаВедомостей Цикл
		СтруктураОтбора = Новый Структура("СчетУчета, ПериодРегистрации, СпособВыплаты");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);

		МассивСтрокДокумента = РасчетыПоЗаработнойПлате.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаОтбора ИЗ МассивСтрокДокумента Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОтбора.Ведомость) Тогда
				СтрокаОтбора.Ведомость = СтрокаТаблицы.Ведомость;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Процедура обновления содержимого ведомости на зарплату
//
Процедура ОбновитьВедомости(Отказ)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме	  = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно       = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда		
		ОбновитьСодержаниеПодчиненныхДокументов = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",             Ссылка);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ведомость КАК Ведомость,
	|	Док.Сотрудник,
	|	СУММА(Док.Сумма) КАК КВыплате
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И (НЕ Док.Ведомость В (&МассивПустыхСсылок))
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Сотрудник,
	|	Док.Ведомость
	|ИТОГИ
	|	СУММА(КВыплате)
	|ПО
	|	Ведомость";

	ВыборкаВедомостей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ведомость");

	Пока ВыборкаВедомостей.Следующий() Цикл

		ДокументСсылка = ВыборкаВедомостей.Ведомость;

		ВыборкаСтрокиЗапроса = ВыборкаВедомостей.Выбрать();

		Попытка

			Ведомость = ДокументСсылка.ПолучитьОбъект();
			ПериодВзаиморасчетов = НачалоМесяца(Ведомость.ПериодРегистрации);

			Зарплата = Ведомость.Зарплата;
			Зарплата.Очистить();
			Состав = Ведомость.Состав;
			Состав.Очистить();
			ФизическиеЛица = Ведомость.ФизическиеЛица;
			ФизическиеЛица.Очистить();

			Ведомость.СуммаПоДокументу = 0;

			Пока ВыборкаСтрокиЗапроса.Следующий() Цикл

				ИдентификаторСтроки = Новый УникальныйИдентификатор;
				ФизическоеЛицо      = ВыборкаСтрокиЗапроса.Сотрудник.ФизическоеЛицо;
				
				НоваяСтрока                      = Зарплата.Добавить();
				НоваяСтрока.ИдентификаторСтроки  = ИдентификаторСтроки;
				НоваяСтрока.КВыплате             = ВыборкаСтрокиЗапроса.КВыплате;
				НоваяСтрока.Подразделение        = Ссылка.ПодразделениеОрганизации;
				НоваяСтрока.Сотрудник            = ВыборкаСтрокиЗапроса.Сотрудник;
				НоваяСтрока.ФизическоеЛицо       = ФизическоеЛицо;
				НоваяСтрока.ПериодВзаиморасчетов = ПериодВзаиморасчетов;
				
				НоваяСтрока                     = Состав.Добавить();
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ФизическоеЛицо      = ФизическоеЛицо;
				
				Если ФизическиеЛица.Найти(ФизическоеЛицо, "ФизическоеЛицо") = Неопределено Тогда
					НоваяСтрока                = ФизическиеЛица.Добавить();
					НоваяСтрока.ФизическоеЛицо = ВыборкаСтрокиЗапроса.Сотрудник.ФизическоеЛицо;
				КонецЕсли;
				
				Ведомость.СуммаПоДокументу = Ведомость.СуммаПоДокументу + ВыборкаСтрокиЗапроса.КВыплате;

			КонецЦикла;

			Ведомость.Записать(РежимЗаписиДокумента.Запись);

		Исключение

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось обновить документ %1.'"),
			ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);

			Отказ = Истина;

		КонецПопытки

	КонецЦикла;

	ОбновитьСодержаниеПодчиненныхДокументов = Неопределено;

КонецПроцедуры

// Процедура синхронизации проведения/удаления ведомостей
// при проведении/удалении документа ввода остатков
//
Процедура СинхронизироватьСостояниеВедомости()
	
	УчетЗарплатыИКадровВоВнешнейПрограмме	  = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно       = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда		
		ОбновитьСодержаниеПодчиненныхДокументов = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ведомость КАК Ссылка,
	|	Док.Ведомость.ПометкаУдаления КАК ПометкаУдаления,
	|	Док.Ведомость.Проведен КАК Проведен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И (НЕ Док.Ведомость В (&МассивПустыхСсылок))";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ВедомостьОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Если НЕ ВедомостьОбъект.ПометкаУдаления Тогда
				ВедомостьОбъект.ПометкаУдаления = Истина;
				ВедомостьОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если Проведен Тогда
			ВедомостьОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВедомостьОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;

		Если ВедомостьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			ВедомостьОбъект.ПометкаУдаления = ПометкаУдаления;
			ВедомостьОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

	КонецЦикла;

	ОбновитьСтатусПодчиненныхДокументов = Неопределено;

КонецПроцедуры

// Процедура подбирает сотрудников по введенным физ.лицам и подбирает ведомости для строк,
// в которых ведомость не указана при вводе остатков по зарплате в ред. 2.0
//
Процедура ВыполнитьКонвертациюОстатковПоЗарплатеПриПереходеС2БП() Экспорт

	// Правила конвертации:
	//
	// Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам
	// то сначала заполняем документ сотрудниками, а затем создаем/ищем ведомости
	// по табличной части РасчетыПоЗаработнойПлате

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда

		// 1. Поиск и создание сотрудников
		
		Запрос = Новый Запрос;		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
        Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.РаботникОрганизации КАК ФизическоеЛицо,
		|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка.Организация КАК Организация,
		|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка.Дата КАК ДатаСреза
		|ИЗ
		|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК ВводНачальныхОстатковРасчетыПоЗаработнойПлате
		|ГДЕ
		|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка = &Ссылка";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗарплатаКадрыОбновлениеСПредыдущейРедакции.СоздатьВТСОсновнымиМестамиРаботыНаПериод(Запрос.МенеджерВременныхТаблиц, Результат);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиБезБазы.ФизическоеЛицо,
		|	СотрудникиБезБазы.Сотрудник
		|ИЗ
		|	ВТСотрудникиФизическихЛиц КАК СотрудникиБезБазы";

		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл

				СтруктураОтбора = Новый Структура("РаботникОрганизации", Выборка.ФизическоеЛицо);

				МассивСтрокДокумента = РасчетыПоЗаработнойПлате.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаОтбора ИЗ МассивСтрокДокумента Цикл
					СтрокаОтбора.Сотрудник = Выборка.Сотрудник;
				КонецЦикла;

			КонецЦикла;

		КонецЕсли;
		
		СотрудникиОрганизаций = Новый Соответствие;
		Организация = Ссылка.Организация;
		Для Каждого СтрокаДокумента ИЗ РасчетыПоЗаработнойПлате Цикл
			СтрокаДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Сотрудник) Тогда
				СтрокаДокумента.Сотрудник = ЗарплатаКадрыОбновлениеСПредыдущейРедакции.СоздатьНовогоСотрудника(Организация, СтрокаДокумента.РаботникОрганизации, СтрокаДокумента.РаботникОрганизации.Наименование, СотрудникиОрганизаций);
			КонецЕсли;			
		КонецЦикла;		

		УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
		Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ОбменДанными.Загрузка = Истина;
			Записать(РежимЗаписиДокумента.Запись);
			Отказ = Ложь;
			СформироватьВедомости(Отказ);
			Если Не Отказ Тогда
				ОбменДанными.Загрузка = Истина;
				Записать(РежимЗаписиДокумента.Запись);
				ОбновитьВедомости(Отказ);
				Если Не Отказ Тогда
					СинхронизироватьСостояниеВедомости();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет в табличной части ДанныеПоНДС реквизиты
// значениями по умолчанию.
// 
Процедура ОбработатьПередЗаписьюДанныеПоНДС()

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		// КодВидаОперации для НДС с авансов всегда "02"
		Для Каждого СтрокаТЧ Из ДанныеПоНДС Цикл
			СтрокаТЧ.КодВидаОперации = "02";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ
//

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация);
	
	// Специфические для конкретного документа действия
	ОтражатьВБухгалтерскомУчете    = Истина;
	ОтражатьВНалоговомУчете        = Истина;
	ОтражатьПоСпециальнымРегистрам = Истина;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ДатаУчетнойПолитики = Дата + 86400;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	РаздельныйУчетНДС =
		УчетнаяПолитика.РаздельныйУчетНДС(Организация, ДатаУчетнойПолитики)
		И УчетнаяПолитика.СистемаНалогообложения(Организация, ДатаУчетнойПолитики) <> Перечисления.СистемыНалогообложения.Упрощенная;
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Организация, ДатаУчетнойПолитики);
	РозницаВПродажныхЦенах = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, ДатаУчетнойПолитики) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаУчетнойПолитики);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики);
	ПлательщикНДФЛ =  УчетнаяПолитика.ПлательщикНДФЛ(Организация, ДатаУчетнойПолитики);
	ВестиУчетПоВидамДеятельностиИП = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, ДатаУчетнойПолитики);
	
	НаСчетеТоварыВРозничнойТорговлеВПродажныхЦенахНТТЕстьСубконтоСтавкиНДС = Ложь;
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Для С=1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + С] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтавкиНДС"] Тогда
			НаСчетеТоварыВРозничнойТорговлеВПродажныхЦенахНТТЕстьСубконтоСтавкиНДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОценкаМПЗПоСредней   = (УчетнаяПолитика.СпособОценкиМПЗ(Организация, ДатаУчетнойПолитики) = Перечисления.СпособыОценки.ПоСредней);
	ВедетсяУчетПоСкладам = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	
	// ПРОВЕРКА ОС

	Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
	Иначе
		ПредставленияРеквизитов = Новый Структура;
		Для Каждого Реквизит Из Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ОС.Реквизиты Цикл
			ПредставленияРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;

		// 1. Проверка на дубликаты строк (ОС, инв.номер)
		// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
		НайденыДублиОС = Ложь;
		УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС",
			Новый Структура("ОсновноеСредство"), НайденыДублиОС);

		// 2. Проверим, нет ли одинаковых инвентарных номеров основных средств в таблице по ОС.
		НайденыДублиИнвентарныхНомеров = Ложь;
		УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС",
			Новый Структура("ИнвентарныйНомерРегл"), НайденыДублиИнвентарныхНомеров);

		Если НайденыДублиОС ИЛИ НайденыДублиИнвентарныхНомеров Тогда
			Отказ = Истина;
		КонецЕсли;

		// 3. Проверка, находятся ли ОС на учете в другой организации (было принято и не снято с учета)
		ПроверкаОСНеПринятыКУчетуВДругихОрганизациях(Отказ);
		
		// 4. Проверка заполнения таблично части ОС (Например, списание в расходы по НУ при ненулевой стоимости)
		ПроверкаТабличнойЧастиОС(Отказ);

	КонецЕсли;

	// ПРОВЕРКА НМА

	Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
	Иначе
		
		ПредставленияРеквизитов = Новый Структура;
		Для Каждого Реквизит Из Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.НМА.Реквизиты Цикл
			ПредставленияРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;

		// Проверка на дубликаты строк (НМА)
		// Проверим, нет ли повторяющихся основных средств в таблице по НМА.
		НайденыДублиНМА = Ложь;
		УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "НМА",
			Новый Структура("НематериальныйАктив"), НайденыДублиНМА);
			
		Если НайденыДублиНМА Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	// ПРОВЕРКА ТОВАРЫ ОТГРУЖЕННЫЕ

	Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные");
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.Партия");
		Если НЕ РаздельныйУчетНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоСФ");
		КонецЕсли;
		
		Если НЕ ПлательщикНДФЛ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.ВидМПЗ");
			МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.ДокументОтгрузки");
		КонецЕсли;
		Если НЕ ПлательщикНДФЛ И ВестиУчетПоВидамДеятельностиИП Тогда			
			МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.ХарактерДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.НоменклатурнаяГруппа");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("МПЗОтгруженные.Количество");
		
		// Соответствие субконто и колонок табличной части
		
		ИмяТабличнойЧасти			= "МПЗОтгруженные";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ cтроительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");
		
		Если РаздельныйУчетНДС Тогда
			
			ТоварыОтгруженные_ДругиеОбязательныеКолонки = Неопределено;
			Если (ОценкаМПЗПоСредней И РаздельныйУчетНДС) ИЛИ ПлательщикНДФЛ Тогда
				ТоварыОтгруженные_ДругиеОбязательныеКолонки = Новый Структура("Партия", "Партия");					
			КонецЕсли;			
		
			ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, ТоварыОтгруженные_ДругиеОбязательныеКолонки, Отказ);
			
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
			
			ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);
			
		ИначеЕсли ПлательщикНДФЛ Тогда
			
			ТоварыОтгруженные_ДругиеОбязательныеКолонки = Новый Структура("Партия", "Партия");
			ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, ТоварыОтгруженные_ДругиеОбязательныеКолонки, Отказ);
			
		КонецЕсли;
		
		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"МПЗОтгруженные",
				МПЗОтгруженные.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;
			
	КонецЕсли;

	// ПРОВЕРКА РБП

	Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасходыБудущихПериодов");			
	Иначе		
		МассивНепроверяемыхРеквизитов.Добавить("РасходыБудущихПериодов.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасходыБудущихПериодов.РасчетныйДокумент");
		Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасходыБудущихПериодов.СтатусыОплатыРасходовУСН");
			МассивНепроверяемыхРеквизитов.Добавить("РасходыБудущихПериодов.ОтражениеВУСН");
		КонецЕсли;
	КонецЕсли;

	// ПРОВЕРКА РАСЧЕТЫ ПО НАЛОГАМ И СБОРАМ

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам");
	Иначе

		ИмяТабличнойЧасти			= "РасчетыПоНалогамИСборам";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидПлатежаВБюджет");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ВидСтраховогоВзносаИП");
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "ВидПлатежаВБюджет");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов, "УровеньБюджета");
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			СоответствиеСубконтоИКолонки.Вставить(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"], "РегистрацияВНалоговомОргане");
		КонецЕсли;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС, "");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные, "");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "");
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("ВидПлатежаВБюджет",           "Вид платежа в бюджет (фонды)");
		СоответствиеИменКолонок.Вставить("УровеньБюджета",              "Уровень бюджета");
		СоответствиеИменКолонок.Вставить("ВидСтраховогоВзносаИП",       "Вид страхового взноса");
		СоответствиеИменКолонок.Вставить("РегистрацияВНалоговомОргане", "Регистрация в налоговом органе");
		
		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

		// Начиная с 3БП сумма проводки для Дт хранится в СуммаДт, а для Кт - в СуммаКт.
		// Одновременно оба этих поля не могут быть заполнены
		ИмяТабличнойЧасти = "РасчетыПоНалогамИСборам";
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			СуммаДт = ТекущаяСтрока.Сумма;
			СуммаКт = ТекущаяСтрока.СуммаКт;
			Если (СуммаДт <> 0) И (СуммаКт <> 0) Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 заполнены обе суммы - и Дт (%3) и Кт (%4)'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0"),
					Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0")
				);
				Поле = Префикс + "СуммаКт";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ОтражениеВУСН");
		КонецЕсли;
		
		Если НЕ ПлательщикНДФЛ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.СтатьяЗатрат");
		КонецЕсли;
		
		Если НЕ ВестиУчетПоВидамДеятельностиИП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоНалогамИСборам.ХарактерДеятельности");
		КонецЕсли;

	КонецЕсли;

	// ПРОВЕРКА ПОДОТЧЕТНЫХ ЛИЦ

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами");
	Иначе

		// Начиная с 3БП сумма проводки для Дт хранится в СуммаДт, а для Кт - в СуммаКт.
		// Одновременно оба этих поля не могут быть заполнены
		ИмяТабличнойЧасти = "РасчетыСПодотчетнымиЛицами";
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			СуммаДт = ТекущаяСтрока.Сумма;
			СуммаКт = ТекущаяСтрока.СуммаКт;
			Если (СуммаДт <> 0) И (СуммаКт <> 0) Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 заполнены обе суммы - и Дт (%3) и Кт (%4)'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0"),
					Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0")
				);
				Поле = Префикс + "СуммаКт";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетнымиЛицами.РасчетныйДокумент");
		КонецЕсли;

	КонецЕсли;

	// ПРОВЕРКА РАСЧЕТОВ С КОНТРАГЕНТОМ

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
		И РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.ДоговорКонтрагента");
		
	КонецЕсли;
	
	Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами");
		
	Иначе

		// Начиная с 3БП сумма проводки для Дт хранится в СуммаДт, а для Кт - в СуммаКт.
		// Одновременно оба этих поля не могут быть заполнены
		// Для УСН для валютного счета должна быть указана валютная сумма
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСКонтрагентами.Документ");
		ИмяТабличнойЧасти			= "РасчетыСКонтрагентами";
		ПредставлениеТабличнойЧасти = Строка(РазделУчета);
		
		Контрагенты_ДругиеОбязательныеКолонки = Новый Структура("Документ", "Документ");
		
		Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			
			СуммаДт = ТекущаяСтрока.Сумма;
			СуммаКт = ТекущаяСтрока.СуммаКт;
			
			Если (СуммаДт <> 0) И (СуммаКт <> 0) Тогда				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 заполнены обе суммы - и Дт (%3) и Кт (%4)'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0"),
					Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0"));

				Префикс	= "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + "СуммаКт", "Объект", Отказ);
				Отказ	= Истина;
			КонецЕсли;
						
			Если УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаУчетнойПолитики) Тогда
				Если ТекущаяСтрока.СчетУчета.Валютный И ТекущаяСтрока.ВалютнаяСумма = 0 Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 не указана валютная сумма'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти);
					
					Префикс	= "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + "ВалютнаяСумма", "Объект", Отказ);
					Отказ	= Истина;
				КонецЕсли;
			КонецЕсли;
			
			ПроверятьДокументРасчетов = БухгалтерскийУчет.НаСчетеВедетсяУчетПоДокументамРасчетов(ТекущаяСтрока.СчетУчета);
			
			Если ПроверятьДокументРасчетов Тогда
				Для Каждого ТекущаяКолонка Из Контрагенты_ДругиеОбязательныеКолонки Цикл
					Значение = ТекущаяСтрока[ТекущаяКолонка.Ключ];
					
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не заполнена колонка %1 в строке %2 списка %3'"),
							ТекущаяКолонка.Значение,
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти);
						Поле = Префикс + ТекущаяКолонка.Ключ;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						Отказ = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	// ПРОВЕРКА ПРОЧЕГО

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Капитал
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БухСправка");
	Иначе

		// Начиная с 3БП сумма проводки для Дт хранится в СуммаДт, а для Кт - в СуммаКт.
		// Одновременно оба этих поля не могут быть заполнены
		ИмяТабличнойЧасти = "БухСправка";
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			СуммаДт = ТекущаяСтрока.Сумма;
			СуммаКт = ТекущаяСтрока.СуммаКт;
			Если (СуммаДт <> 0) И (СуммаКт <> 0) Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 заполнены обе суммы - и Дт (%3) и Кт (%4)'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0"),
					Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0")
				);
				Поле = Префикс + "СуммаКт";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Реквизит "Отражение в УСН" проверяется только для раздела учета "Незавершенное производство (счета 20, 23)"
		// и только при условии, что в учетной политике установлен флаг "Уменьшение расходов на остаток незавершенного 
		// производства"
		УСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики);
		УСНУменьшатьНаНЗП = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Организация, ДатаУчетнойПолитики) =
			Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;
		Если НЕ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство
			И УСНДоходыМинусРасходы 
			И УСНУменьшатьНаНЗП) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БухСправка.ОтражениеВУСН");
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
			ПроверкаЗаполненияТабличнойЧастиСтруктураСтоимостиЗапасов(
			"БухСправка",
			БухСправка.Выгрузить(),
			СтруктураСтоимостиЗапасов.Выгрузить(),
			МассивНепроверяемыхРеквизитов,
			Отказ);
		КонецЕсли
		
	КонецЕсли;

	// ПРОВЕРКА ТОВАРОВ

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку");
	КонецЕсли;

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ");
		МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеНТТ");
	КонецЕсли;

	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		И РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда

		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе");
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		// Проверять:
		//  НоменклатураНаСкладе
		//  СпецодеждаИСпецоснасткаВЭксплуатации
		//  МатериалыПереданныеВПереработку

		// 1. Проверка НоменклатураНаСкладе

		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.СчетУчета");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Склад");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Количество");
		
		ИмяТабличнойЧасти			= "НоменклатураНаСкладе";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, "СпособСтроительства");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
		
		Если ВедетсяУчетПоСкладам Тогда
			Если НЕ (ПрименяетсяУСН И НЕ ОтражатьВБухгалтерскомУчете) Тогда // при вводе остатков для УСН (без БУ) склад не требуется
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");
			КонецЕсли;
		КонецЕсли;
		
		Если РаздельныйУчетНДС Тогда
			Материалы_ДругиеОбязательныеКолонки = Неопределено;
			Если ОценкаМПЗПоСредней И РаздельныйУчетНДС Тогда
				Материалы_ДругиеОбязательныеКолонки = Новый Структура("Партия", "Партия");					
			КонецЕсли;			
		КонецЕсли;			
		
		Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Партия");
			
			Материалы_ДругиеОбязательныеКолонки = Неопределено;
			Если ОценкаМПЗПоСредней И РаздельныйУчетНДС Тогда
				Материалы_ДругиеОбязательныеКолонки = Новый Структура("Партия", "Партия");
			ИначеЕсли НЕ ОценкаМПЗПоСредней ИЛИ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) Тогда
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ строительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");

		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, НСтр("ru = 'Материалы на складе'"), СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, Материалы_ДругиеОбязательныеКолонки, Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"НоменклатураНаСкладе",
				НоменклатураНаСкладе.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;

		// 2. Проверка МатериалыПереданныеВПереработку
		
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.Контрагент");
		
		ИмяТабличнойЧасти			= "МатериалыПереданныеВПереработку";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, "СпособСтроительства");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
		
		Если НЕ (ПрименяетсяУСН И НЕ ОтражатьВБухгалтерскомУчете) Тогда // при вводе остатков для УСН (без БУ) указывать контрагента - получателя материалов не требуется
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
		КонецЕсли;
		Если НЕ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) И НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.Партия");
			Если НЕ ОценкаМПЗПоСредней Тогда
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ строительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС",           "Ставка НДС");

		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"МатериалыПереданныеВПереработку",
				МатериалыПереданныеВПереработку.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;

		// 3. Проверка СпецодеждаИСпецоснасткаВЭксплуатации
		
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалНазначениеИспользования");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПартияМатериалаВЭксплуатации");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПодразделениеФизЛицо");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПервоначальнаяСтоимость");
		
		ИмяТабличнойЧасти			= "СпецодеждаИСпецоснасткаВЭксплуатации";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;		
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "СпецМатериалПодразделениеФизЛицо");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "СпецМатериалПартияМатериалаВЭксплуатации");
		Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.Партия");
			Если НЕ ОценкаМПЗПоСредней ИЛИ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) Тогда
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;

		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"СпецодеждаИСпецоснасткаВЭксплуатации",
				СпецодеждаИСпецоснасткаВЭксплуатации.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;

	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда

		// Проверять:
		//  НоменклатураНаСкладе

		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Склад");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.СтатусыОплатыРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.ОтражениеВУСН");

		ИмяТабличнойЧасти			= "НоменклатураНаСкладе";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, "СпособСтроительства");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
		
		Если ВедетсяУчетПоСкладам Тогда
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");
		КонецЕсли;
		
		Если НЕ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) И НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Партия");
			Если НЕ ОценкаМПЗПоСредней Тогда
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ cтроительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");

		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, НСтр("ru = 'Готовая продукция и полуфабрикаты'"), СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"НоменклатураНаСкладе",
				НоменклатураНаСкладе.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
				
			ПроверкаЗаполненияТабличнойЧастиСтруктураСтоимостиЗапасов(
				"НоменклатураНаСкладе",
				НоменклатураНаСкладе.Выгрузить(),
				СтруктураСтоимостиЗапасов.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;

	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда

		// Проверять:
		//  НоменклатураНаСкладе
		//  ТоварыВРозничнойТорговлеАТТ
		//  ТоварыВРозничнойТорговлеНТТ

		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.СчетУчета");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Склад");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Количество");

		ИмяТабличнойЧасти			= "НоменклатураНаСкладе";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, "СпособСтроительства");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
		
		Если ВедетсяУчетПоСкладам Тогда
			Если НЕ (ПрименяетсяУСН И НЕ ОтражатьВБухгалтерскомУчете) Тогда // при вводе остатков для УСН (без БУ) склад не требуется
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");			
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) И НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Партия");
			Если НЕ ОценкаМПЗПоСредней Тогда
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
				СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ cтроительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");

		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, НСтр("ru = 'Товары на складе'"), СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"НоменклатураНаСкладе",
				НоменклатураНаСкладе.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;

		Если НЕ РозницаВПродажныхЦенах Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ");
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеНТТ");
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.Количество");

			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеНТТ.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеНТТ.Количество");
			МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеНТТ.СтавкаНДС");
			
			ИмяТабличнойЧасти			= "ТоварыВРозничнойТорговлеАТТ";
			ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
			
			// Соответствие субконто и колонок табличной части
			СоответствиеСубконтоИКолонки = Новый Соответствие;
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,	"Номенклатура");
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС,		"СтавкаНДС");
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты,		"Контрагент");
			
			Если ПрименяетсяУСН И НЕ ОтражатьВБухгалтерскомУчете Тогда	// при вводе остатков для УСН (без БУ) склад не требуется			
				МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.Склад");
			КонецЕсли;
			
			Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.Партия");
				Если НЕ ОценкаМПЗПоСредней ИЛИ (РаздельныйУчетНДС И НЕ УпрощенныйУчетНДС) Тогда
					СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
					СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеИменКолонок = Новый Соответствие;
			СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ cтроительства");
			СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");
			
			ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);

			Если ОтражатьПоСпециальнымРегистрам Тогда
				ПроверкаЗаполненияТабличнойЧастиНДС(
					"ТоварыВРозничнойТорговлеАТТ",
					ТоварыВРозничнойТорговлеАТТ.Выгрузить(),
					ДанныеПоСФ.Выгрузить(),
					МассивНепроверяемыхРеквизитов,
					Отказ);
			КонецЕсли;
				
			ИмяТабличнойЧасти			= "ТоварыВРозничнойТорговлеНТТ";
			ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;

			// Соответствие субконто и колонок табличной части
			СоответствиеСубконтоИКолонки = Новый Соответствие;
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
			
			СоответствиеИменКолонок = Новый Соответствие;
			СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");
			
			ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, , Отказ);
			
			Если ОтражатьПоСпециальнымРегистрам Тогда
				// По партиям в НТТ проверка не нужна
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда

		// Проверять:
		//  НоменклатураНаСкладе

		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Склад");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.СтатусыОплатыРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.ОтражениеВУСН");
		
		ИмяТабличнойЧасти			= "НоменклатураНаСкладе";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		
		// Соответствие субконто и колонок табличной части
		СоответствиеСубконтоИКолонки = Новый Соответствие;
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,         "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР,       "Номенклатура");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, "СпособСтроительства");
		СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "СтавкаНДС");
		Если ВедетсяУчетПоСкладам Тогда
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "Склад");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.Партия");
		
		КапитальныеВложения_ДругиеОбязательныеКолонки = Неопределено;
		
		Если НЕ ОценкаМПЗПоСредней Тогда
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "Партия");
			СоответствиеСубконтоИКолонки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации, "Партия");
		Иначе
			Если НЕ УпрощенныйУчетНДС И НЕ ПрименяетсяУСН Тогда
				КапитальныеВложения_ДругиеОбязательныеКолонки = Новый Структура("Партия", "Партия");					
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеИменКолонок = Новый Соответствие;
		СоответствиеИменКолонок.Вставить("СпособСтроительства", "Способ cтроительства");
		СоответствиеИменКолонок.Вставить("СтавкаНДС", "Ставка НДС");
		
		ПроверкаЗаполненияКолонокТабличныхЧастейПоСубконто(ИмяТабличнойЧасти, НСтр("ru = 'Капитальные вложения'"), СоответствиеСубконтоИКолонки, СоответствиеИменКолонок, КапитальныеВложения_ДругиеОбязательныеКолонки, Отказ);

		Если ОтражатьПоСпециальнымРегистрам Тогда
			ПроверкаЗаполненияТабличнойЧастиНДС(
				"НоменклатураНаСкладе",
				НоменклатураНаСкладе.Выгрузить(),
				ДанныеПоСФ.Выгрузить(),
				МассивНепроверяемыхРеквизитов,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураНаСкладе.СтатусыОплатыРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("СпецодеждаИСпецоснасткаВЭксплуатации.СтатусыОплатыРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыПереданныеВПереработку.СтатусыОплатыРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.ОтражениеВУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ТоварыВРозничнойТорговлеАТТ.СтатусыОплатыРасходовУСН");
	КонецЕсли;
	

	// ПРОВЕРКА ЗАРПЛАТЫ

	Если НЕ РазделУчета =  Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда

		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате");

	Иначе

		// Параметры учета расчетов с работниками
		
		УчетЗарплатыИКадровВоВнешнейПрограмме     = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
		ВедетсяУчетРасчетовПоЗарплатеПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		
		Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ПериодРегистрации");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СпособВыплаты");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.Получатель");
			Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
				МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ОтражениеВУСН");
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ВидНачисления");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СтатьяЗатрат");				
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ХарактерДеятельности");
			
			СтруктураОбязательныхРеквизитов = Новый Структура("ПериодРегистрации, СпособВыплаты",
				НСтр("ru = 'Месяц начисления'"), НСтр("ru = 'Способ выплаты'"));
				
			Если ПлательщикНДФЛ Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Получатель", НСтр("ru = 'Получатель'"));
				СтруктураОбязательныхРеквизитов.Вставить("ВидНачисления", НСтр("ru = 'Вид начисления'"));
				СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат", НСтр("ru = 'Статья затрат'"));
				Если ВестиУчетПоВидамДеятельностиИП Тогда
					СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа", НСтр("ru = 'Номенклатурная группа'"));
					СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности", НСтр("ru = 'Характер деятельности'"));
				КонецЕсли;
			КонецЕсли;
				
			ИмяТабличнойЧасти			= "РасчетыПоЗаработнойПлате";
			ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
			
			Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
				
				Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ОбязательныйРеквизит ИЗ СтруктураОбязательныхРеквизитов Цикл
					
					ИмяРеквизита			= ОбязательныйРеквизит.Ключ;
					ПредставлениеРеквизита	= ОбязательныйРеквизит.Значение;
					ЗначениеРеквизита		= ТекущаяСтрока[ИмяРеквизита];
					
					Если ПлательщикНДФЛ И ИмяРеквизита = "Получатель" Тогда
						Если (ЗначениеЗаполнено(ТекущаяСтрока.ВидУдержания) И ЗначениеЗаполнено(ЗначениеРеквизита))
							ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидУдержания) 
							ИЛИ ТекущаяСтрока.ВидУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
							Продолжить;							
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
							ПредставлениеРеквизита,
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти);
							
						Префикс	= "" + "РасчетыПоЗаработнойПлате" + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + ИмяРеквизита, , Отказ);
						Отказ	= Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеПоРаботникам Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ПериодРегистрации");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СпособВыплаты");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.Получатель");
			Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаУчетнойПолитики) Тогда
				МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ОтражениеВУСН");
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ВидНачисления");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СтатьяЗатрат");				
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ХарактерДеятельности");

			
			Если ПлательщикНДФЛ Тогда
				СтруктураОбязательныхРеквизитов = Новый Структура();				
				СтруктураОбязательныхРеквизитов.Вставить("Получатель", НСтр("ru = 'Получатель'"));
				СтруктураОбязательныхРеквизитов.Вставить("ВидНачисления", НСтр("ru = 'Вид начисления'"));
				СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат", НСтр("ru = 'Статья затрат'"));
				Если ВестиУчетПоВидамДеятельностиИП Тогда
					СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа", НСтр("ru = 'Номенклатурная группа'"));
					СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности", НСтр("ru = 'Характер деятельности'"));
				КонецЕсли;
							
				ИмяТабличнойЧасти			= "РасчетыПоЗаработнойПлате";
				ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
				
				Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
					
					Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого ОбязательныйРеквизит ИЗ СтруктураОбязательныхРеквизитов Цикл
						
						ИмяРеквизита			= ОбязательныйРеквизит.Ключ;
						ПредставлениеРеквизита	= ОбязательныйРеквизит.Значение;
						ЗначениеРеквизита		= ТекущаяСтрока[ИмяРеквизита];
						
						Если ИмяРеквизита = "Получатель" Тогда
							Если (ЗначениеЗаполнено(ТекущаяСтрока.ВидУдержания) И ЗначениеЗаполнено(ЗначениеРеквизита))
								ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидУдержания) 
								ИЛИ ТекущаяСтрока.ВидУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
								Продолжить;							
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
							ПредставлениеРеквизита,
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти);
							
							Префикс	= "" + "РасчетыПоЗаработнойПлате" + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + ИмяРеквизита, , Отказ);
							Отказ	= Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.Сотрудник");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ПериодРегистрации");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СпособВыплаты");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ОтражениеВУСН");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ВидНачисления");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.СтатьяЗатрат");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.Получатель");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЗаработнойПлате.ХарактерДеятельности");
			
		КонецЕсли;
		
	КонецЕсли;

	// ПРОВЕРКА НДС

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		// Общие данные счета-фактуры
		ИмяТабличнойЧасти = "ДанныеПоНДС";
		ПредставлениеТабличнойЧасти = "";
		
		СтруктураРеквизитовСчетаФактуры = Новый Структура("ДатаСФ, НомерСФ", "Дата счета-фактуры", "Номер счета-фактуры");
		
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоНДС.Продавец");

		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

			СтруктураОбязательныхРеквизитов = Новый Структура("СчетУчета, СтавкаНДС, ВидЦенности, СчетФактура",
				"Счет учета", "Ставка НДС", "Вид ценности", "Расчетный документ");

			ПредставлениеТабличнойЧасти = "Общие данные о счете-фактуре";


		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный  Тогда

			СтруктураОбязательныхРеквизитов = Новый Структура("СтавкаНДС, ВидЦенности, Контрагент, СчетФактура, СуммаБезНДС",
				"Ставка НДС", "Вид ценности", "Контрагент", "Расчетный документ", "Сумма без НДС");
				
			Если РаздельныйУчетНДС Тогда
				ПредставлениеТабличнойЧасти = "Общие данные о счете-фактуре";
			КонецЕсли;
		Иначе //Авансы

			СтруктураОбязательныхРеквизитов = Новый Структура("СчетУчета, СтавкаНДС, ВидЦенности, Контрагент, СчетФактура, СуммаБезНДС",
				"Счет учета", "Ставка НДС", "Вид ценности", "Контрагент", "Расчетный документ", "Сумма без НДС");
				
		КонецЕсли;

		Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл

			Для Каждого ОбязательныйРеквизит ИЗ СтруктураОбязательныхРеквизитов Цикл
				
				ИмяРеквизита           = ОбязательныйРеквизит.Ключ;
				ПредставлениеРеквизита = ОбязательныйРеквизит.Значение;
				ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					ПредставлениеРеквизита);
					Поле = Префикс + ИмяРеквизита;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			ПроверятьРеквизитыСчетаФактуры = Истина;
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				ПроверятьРеквизитыСчетаФактуры = ТекущаяСтрока.ПредъявленСФ;
			КонецЕсли;
			
			Если ПроверятьРеквизитыСчетаФактуры Тогда
				Для Каждого ОбязательныйРеквизит ИЗ СтруктураРеквизитовСчетаФактуры Цикл
					
					ИмяРеквизита           = ОбязательныйРеквизит.Ключ;
					ПредставлениеРеквизита = ОбязательныйРеквизит.Значение;
					ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 в реквизитах счета-фактуры не заполнено значение ""%3""'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ПредставлениеРеквизита);
						Поле = Префикс + "РеквизитыСчетаФактуры";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
						Отказ = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;

			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда // дополнительные реквизиты раздела

				ИмяРеквизита	= "НДС";
				ПредставлениеРеквизита					= НСтр("ru='НДС'");
				ПредставлениеАлтернативногоРеквизита	= НСтр("ru='Сумма без НДС'");
				
				Если ТекущаяСтрока.СуммаБезНДС = 0 И ТекущаяСтрока.НДС = 0 Тогда
					Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В строке %1 списка %2 должна быть заполнена колонка ""%3"" или ""%4""'"),
					ТекущаяСтрока.НомерСтроки,
					ПредставлениеТабличнойЧасти,
					ПредставлениеРеквизита,
					ПредставлениеАлтернативногоРеквизита);
					Поле = Префикс + ИмяРеквизита;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
					Отказ = Истина;
				КонецЕсли;
				
				Если ТекущаяСтрока.ПредъявленСФ Тогда // если предъявлен счет-фактура

					ИмяРеквизита           = "ДатаСФ";
					ПредставлениеРеквизита = "Дата счета-фактуры";
					ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];

					Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда

						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ПредставлениеРеквизита);
						Поле = Префикс + ИмяРеквизита;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
						Отказ = Истина;
					КонецЕсли;

					ИмяРеквизита           = "НомерСФ";
					ПредставлениеРеквизита = "Номер счета-фактуры";
					ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];

					Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда

						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ПредставлениеРеквизита);
						Поле = Префикс + ИмяРеквизита;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
						Отказ = Истина;
					КонецЕсли;
					
					Если ТекущаяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
						
						ИмяРеквизита           = "Продавец";
						ПредставлениеРеквизита = "Счет-фактура составлен от имени";
						ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
						
						Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
							
							Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти,
							ПредставлениеРеквизита);
							Поле = Префикс + ИмяРеквизита;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ТекущаяСтрока.Исправление Тогда // если предъявлен исправленный счет-фактура
						
						ИмяРеквизита           = "ДатаИсправления";
						ПредставлениеРеквизита = "Дата исправления счета-фактуры";
						ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
						
						Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
							
							Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти,
							ПредставлениеРеквизита);
							Поле = Префикс + ИмяРеквизита;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
							Отказ = Истина;
						КонецЕсли;
						
						ИмяРеквизита           = "НомерИсправления";
						ПредставлениеРеквизита = "Номер исправления счета-фактуры";
						ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
						
						Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
							
							Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти,
							ПредставлениеРеквизита);
							Поле = Префикс + ИмяРеквизита;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ТекущаяСтрока.КорректировочныйСчетФактура Тогда // если предъявлен корректировочный счет-фактура
						
						ИмяРеквизита           = "ДатаИсходногоДокумента";
						ПредставлениеРеквизита = "Дата исходного счета-фактуры";
						ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
						
						Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
							
							Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти,
							ПредставлениеРеквизита);
							Поле = Префикс + ИмяРеквизита;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
							Отказ = Истина;
						КонецЕсли;
						
						ИмяРеквизита           = "НомерИсходногоДокумента";
						ПредставлениеРеквизита = "Номер исходного счета-фактуры";
						ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
						
						Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
							
							Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
							ТекущаяСтрока.НомерСтроки,
							ПредставлениеТабличнойЧасти,
							ПредставлениеРеквизита);
							Поле = Префикс + ИмяРеквизита;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
							Отказ = Истина;
						КонецЕсли;
						
						Если ТекущаяСтрока.УчитыватьИсправлениеИсходногоДокумента Тогда // исходный счет-фактура исправленный
							
							ИмяРеквизита           = "ДатаИсправленияИсходногоДокумента";
							ПредставлениеРеквизита = "Дата исправления исходного счета-фактуры";
							ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
							
							Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
								
								Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
								ТекущаяСтрока.НомерСтроки,
								ПредставлениеТабличнойЧасти,
								ПредставлениеРеквизита);
								Поле = Префикс + ИмяРеквизита;
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
								Отказ = Истина;
							КонецЕсли;
							
							ИмяРеквизита           = "НомерИсправленияИсходногоДокумента";
							ПредставлениеРеквизита = "Номер исправления исходного счета-фактуры";
							ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];
							
							Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда
								
								Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
								ТекущаяСтрока.НомерСтроки,
								ПредставлениеТабличнойЧасти,
								ПредставлениеРеквизита);
								Поле = Префикс + ИмяРеквизита;
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
								Отказ = Истина;
							КонецЕсли;
							
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда // дополнительные реквизиты раздела

				Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным
					И ТекущаяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда

					ИмяРеквизита           = "Продавец";
					ПредставлениеРеквизита = "Счет-фактура составлен от имени";
					ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];

					Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда

						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ПредставлениеРеквизита);
						Поле = Префикс + ИмяРеквизита;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;

			ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда // дополнительные реквизиты раздела

				Если ТекущаяСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета
					И НЕ ТекущаяСтрока.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда

					ИмяРеквизита           = "СуммаБезНДСВал";
					ПредставлениеРеквизита = НСтр("ru = 'Сумма без НДС (всего по счету-фактуре в валюте)'");
					ЗначениеРеквизита      = ТекущаяСтрока[ИмяРеквизита];

					Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяРеквизита]) Тогда

						Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 списка %2 не заполнена колонка ""%3""'"),
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти,
						ПредставлениеРеквизита);
						Поле = Префикс + ИмяРеквизита;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, , Отказ);
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	Иначе

		МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоНДС");

	КонецЕсли;

	// ПРОВЕРКА УСН
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП
		И ПрименяетсяУСН Тогда

		МассивНепроверяемыхРеквизитов.Добавить("ДокументОприходования");
		МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеУСН.Контрагент");

		// Проверяем оплаченные МПЗ
		ИмяТабличнойЧасти = "МПЗРеализованныеУСН";

		Для Каждого СтрокаМПЗ Из МПЗРеализованныеУСН Цикл
			
			Если ТипЗнч(СтрокаМПЗ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")
				И НЕ ЗначениеЗаполнено(СтрокаМПЗ.Контрагент) Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(СтрокаМПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение",
				НСтр("ru = 'Поставщик'"),,, );
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
					Префикс + "Контрагент", "Объект", Отказ);
 			КонецЕсли;

			Если СтрокаМПЗ.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено
				И НЕ ЗначениеЗаполнено(СтрокаМПЗ.ДокументОприходования) Тогда
				Префикс = "" + ИмяТабличнойЧасти + "[" + Формат(СтрокаМПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение",
				НСтр("ru = 'Документ расчетов с поставщиком'"),,, );
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
					Префикс + "ДокументОприходования", "Объект", Отказ);
 			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	// ПРОВЕРКА ПРЕДПРИНИМАТЕЛЬ
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП
		И ПлательщикНДФЛ Тогда
		
		Если НЕ ВестиУчетПоВидамДеятельностиИП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеИП.ХарактерДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеИП.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходыИП.ХарактерДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходыИП.НоменклатурнаяГруппа");
		Иначе
			
			
			МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходыИП.ХарактерДеятельности");
			МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходыИП.НоменклатурнаяГруппа");
			
			СтруктураОбязательныхРеквизитов = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности",
			"Номенклатурная группа", "Характер деятельности");
			
			ИмяТабличнойЧасти			= "ПрочиеРасходыИП";
			ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
			
			Для Каждого ТекущаяСтрока Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
				
				Для Каждого ОбязательныйРеквизит ИЗ СтруктураОбязательныхРеквизитов Цикл
					
					ИмяРеквизита			= ОбязательныйРеквизит.Ключ;
					ПредставлениеРеквизита	= ОбязательныйРеквизит.Значение;
					ЗначениеРеквизита		= ТекущаяСтрока[ИмяРеквизита];
					
					Если ИмяРеквизита = "НоменклатурнаяГруппа"
						ИЛИ ИмяРеквизита = "ХарактерДеятельности" Тогда
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							Если ТипЗнч(ТекущаяСтрока.СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
								Если ТекущаяСтрока.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
						ПредставлениеРеквизита,
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти);
						
						Префикс	= "" + "ПрочиеРасходыИП" + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + ИмяРеквизита, , Отказ);
						Отказ	= Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;

		// Проверяем неоплаченные МПЗ			
		МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеИП.РасчетныйДокумент");
		МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеИП.Партия");
		МассивНепроверяемыхРеквизитов.Добавить("МПЗРеализованныеИП.Сумма");

		СтруктураОбязательныхРеквизитов = Новый Структура("РасчетныйДокумент, Партия, Сумма",
			"Документ реализации", "Партия (документ поставки)", "Стоимость");
		ИмяТабличнойЧасти			= "МПЗРеализованныеИП";
		ПредставлениеТабличнойЧасти	= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		Для Каждого ТекущаяСтрока Из МПЗРеализованныеИП Цикл
			Для Каждого ОбязательныйРеквизит ИЗ СтруктураОбязательныхРеквизитов Цикл
				ИмяРеквизита			= ОбязательныйРеквизит.Ключ;
				ПредставлениеРеквизита	= ОбязательныйРеквизит.Значение;
				ЗначениеРеквизита		= ТекущаяСтрока[ИмяРеквизита];
				Если (ТекущаяСтрока.СтатусыОплатыРасходовИП <> Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем И (ИмяРеквизита = "Партия" ИЛИ ИмяРеквизита = "Сумма")) 
					ИЛИ (ТекущаяСтрока.СтатусыОплатыРасходовИП <> Перечисления.СтатусыРасходовИП.НеОплачено И ИмяРеквизита = "РасчетныйДокумент") Тогда
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
						ПредставлениеРеквизита,
						ТекущаяСтрока.НомерСтроки,
						ПредставлениеТабличнойЧасти);
						Префикс	= "" + "МПЗРеализованныеИП" + "[" + Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс + ИмяРеквизита, , Отказ);
						Отказ	= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация);
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВводНачальныхОстатков.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Проверка, что ОС не приняты к учету в других организациях
	ПроверкаОСНеПринятыКУчетуВДругихОрганизациях(Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	// Движения по основным средствам
	Документы.ВводНачальныхОстатков.СформироватьДвижения_ОС(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по нематериальным активам
	Документы.ВводНачальныхОстатков.СформироватьДвижения_НМА(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Бухсправка
	Документы.ВводНачальныхОстатков.СформироватьДвижения_БухСправка(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по расчетам с контрагентами
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыСКонтрагентами(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по расчетам по налогам и сборам
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыПоНалогамИСборам(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Регистрация налогов для БЗКБ
	УчетЗарплаты.СформироватьОстатки_РасчетыПоНалогамИСборам(ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по расчетам с контрагентам
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыСПодотчетнымиЛицами(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по Товарам отгруженным
	Документы.ВводНачальныхОстатков.СформироватьДвижения_ТоварыОтгруженные(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по РБП
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасходыБудущихПериодов(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по номенклатуре
	Документы.ВводНачальныхОстатков.СформироватьДвижения_Номенклатура(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по партиям НДС для товаров, материалов, продукции
	Документы.ВводНачальныхОстатков.СформироватьДвижения_Партии_НДС(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по НДС по приобретенным ценностям
	Документы.ВводНачальныхОстатков.СформироватьДвижения_НДСПоПриобретеннымЦенностям(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по НДС по авансам
	Документы.ВводНачальныхОстатков.СформироватьДвижения_НДСПоАвансам(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по НДС по реализации
	Документы.ВводНачальныхОстатков.СформироватьДвижения_НДСПоРеализации(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения по Журналу счетов-фактур
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РегистрацияСчетовФактур(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Движения по зарплате
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыПоЗаработнойПлате(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// УСН

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаНоменклатураНаСкладеУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатацииУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаМатериалыПереданныеВПереработкуУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаТоварыОтгруженныеУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаРасходыБудущихПериодовУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборамРасходыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияПрочиеРасчетыУСН(ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборамВзаиморасчетыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияПрочиеРасчетыУСН(ПараметрыПроведения.ТаблицаРасчетыСПодотчетнымиЛицамиУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.ТаблицаРасчетыПоЗаработнойПлатеРасходыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвиженияПрочиеРасчетыУСН(ПараметрыПроведения.ТаблицаРасчетыПоЗаработнойПлатеВзаиморасчетыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.МПЗРеализованныеУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвиженияРасходыПриУСН(ПараметрыПроведения.УслугиУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвиженияДопРасходыПриУСН(ПараметрыПроведения.ДопРасходыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Предприниматель
	
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыПоНалогамИСборамИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвижения_ТоварыОтгруженныеИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвижения_НоменклатураИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыПоЗаработнойПлатеИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ВводНачальныхОстатков.СформироватьДвижения_ОСИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвижения_НМАИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.ВводНачальныхОстатков.СформироватьДвижения_ПрочиеНепризнанныеРасходыИП(ПараметрыПроведения, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения по расчетам с контрагентами
	Документы.ВводНачальныхОстатков.СформироватьДвижения_РасчетыСКонтрагентамиПриУСН(
		ПараметрыПроведения,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения по структуре стоимости запасов
	Документы.ВводНачальныхОстатков.СформироватьДвижения_СтруктураСтоимостиЗапасов(
		ПараметрыПроведения.ТаблицаСтруктураСтоимостиЗапасов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		ПараметрыПроведения.ТоварыРегистрацияВПоследовательности);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПередЗаписьюДанныеПоНДС();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Проверка даты ввода начальных остатков и установка при ее отсутствии
	Если ОтражатьВБухгалтерскомУчете
	И ОтражатьВНалоговомУчете
	И ОтражатьПоСпециальнымРегистрам
	И Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация) = Дата(1,1,1) Тогда
		МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Организация = Организация;
		МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = Дата;
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;

	// Создание и синхронизация счетов-фактур
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		Если НЕ ПометкаУдаления Тогда
			Если ОбновитьСтатусПодчиненныхДокументов = Неопределено Тогда
				СформироватьСчетаФактуры(Отказ);
				Если НЕ Отказ Тогда
					Записать(РежимЗаписиДокумента.Запись);
					ОбновитьСодержаниеПодчиненныхДокументов = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
			Если НЕ ОбновитьСодержаниеПодчиненныхДокументов = Неопределено
				ИЛИ ПометкаУдаления Тогда
				ОбновитьСчетаФактуры(Отказ);
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
			Если НЕ ОбновитьСтатусПодчиненныхДокументов = Неопределено
				ИЛИ ПометкаУдаления Тогда
				СинхронизироватьСостояниеСчетаФактуры();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Создание и синхронизация ведомостей на выплату зарплаты
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда

		Если НЕ ПометкаУдаления Тогда
			Если ОбновитьСтатусПодчиненныхДокументов = Неопределено Тогда
				СформироватьВедомости(Отказ);
				Если НЕ Отказ Тогда
					Записать(РежимЗаписиДокумента.Запись);
					ОбновитьСодержаниеПодчиненныхДокументов = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
			Если НЕ ОбновитьСодержаниеПодчиненныхДокументов = Неопределено
				ИЛИ ПометкаУдаления Тогда
				ОбновитьВедомости(Отказ);
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
			Если НЕ ОбновитьСтатусПодчиненныхДокументов = Неопределено
				ИЛИ ПометкаУдаления Тогда
				СинхронизироватьСостояниеВедомости();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецЕсли
