#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты, Секунды", 23, 59, 59);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Функция ПолучитьТекстВстроеннойСправки(ИмяОбласти, Организация = Неопределено, ДатаДокумента = Неопределено) Экспорт

	МакетСправки = ПолучитьМакет("Справка");

	ОбластьТекстЗаголовок = ИмяОбласти + "|Заголовок";
	ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;

	ОбластьТекстОбщий = ИмяОбласти + "|Общий";
	ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст;

	Если Организация <> Неопределено
		И ДатаДокумента <> Неопределено Тогда

		ДатаСреза = ДатаДокумента + 86400;

		Если УчетнаяПолитика.Существует(Организация, ДатаСреза) Тогда
			ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаСреза);
			ПрименениеПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(Организация, ДатаСреза);
			ПлательщикНДС				= УчетнаяПолитика.ПлательщикНДС(Организация, ДатаСреза);
			РаздельныйУчетНДС			= УчетнаяПолитика.РаздельныйУчетНДС(Организация, ДатаСреза);
			ПрименяетсяУСН				= УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСреза);
			Предприниматель				= УчетнаяПолитика.ПлательщикНДФЛ(Организация, ДатаСреза);
		Иначе
			ПлательщикНалогаНаПрибыль	= Ложь;
			ПрименениеПБУ18				= Ложь;
			ПлательщикНДС				= Ложь;
			РаздельныйУчетНДС			= Ложь;
			ПрименяетсяУСН				= Ложь;
			Предприниматель				= Ложь;
		КонецЕсли;
		
		Если ИмяОбласти = "РасчетыСПерсоналомПоОплатеТрудаИДепонентам" Тогда
			
			Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
				ОбластьТекстОсновной = ИмяОбласти + "|УчетЗарплатыИКадровСредствамиБухгалтерии";
				ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОсновной);
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
				Если ПрименяетсяУСН Тогда
					ОбластьТекстОсновной = ИмяОбласти + "|УСН";
				ИначеЕсли Предприниматель Тогда
					ОбластьТекстОсновной = ИмяОбласти + "|Ип";
				Иначе
					ОбластьТекстОсновной = ИмяОбласти + "|ОСН";
				КонецЕсли;
				ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОсновной);
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
			Иначе
				Если Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить() Тогда
					Если ПрименяетсяУСН Тогда
						ОбластьТекстОсновной = ИмяОбласти + "|УСН";
					ИначеЕсли Предприниматель Тогда
						ОбластьТекстОсновной = ИмяОбласти + "|Ип";
					Иначе
						ОбластьТекстОсновной = ИмяОбласти + "|ОСН";
					КонецЕсли;
					ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОсновной);
					ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
				Иначе
					ОбластьТекстОсновной = ИмяОбласти + "|УчетЗарплатыИКадровВоВнешнейПрограмме";
					ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОсновной);
					ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
				КонецЕсли;				
				
			КонецЕсли;
						
		Иначе
			
			Если ПрименяетсяУСН Тогда
				ОбластьТекстОсновной = ИмяОбласти + "|УСН";
			ИначеЕсли Предприниматель Тогда
				ОбластьТекстОсновной = ИмяОбласти + "|Ип";
			Иначе
				ОбластьТекстОсновной = ИмяОбласти + "|ОСН";
			КонецЕсли;
			
			ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстОсновной);
			ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
			
			Если ПлательщикНалогаНаПрибыль Тогда
				ОбластьТекстПБУ18 = ИмяОбласти + "|НетПБУ18";
				ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстПБУ18);
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
				Если ПрименениеПБУ18 Тогда
					ОбластьТекстПБУ18 = ИмяОбласти + "|ЕстьПБУ18";
					ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстПБУ18);
					ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
				КонецЕсли;
			КонецЕсли;
			
			Если ПлательщикНДС Тогда
				Если РаздельныйУчетНДС Тогда
					ОбластьТекстНДС = ИмяОбласти + "|СложныйНДС";
				Иначе
					ОбластьТекстНДС = ИмяОбласти + "|НДС";
				КонецЕсли;
				ОбластьТекстаСправки = МакетСправки.ПолучитьОбласть(ОбластьТекстНДС);
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ТекстОбщий = "<DIV>" + СтрЗаменить(ТекстОбщий, Символы.ПС, "</DIV>" + Символы.ПС + "<DIV>") + "</DIV>";

 	ТекстВстроеннойСправки = ПолучитьМакет("ШаблонВстроеннойСправки").ПолучитьТекст();

	ТекстВстроеннойСправки = СтрЗаменить(ТекстВстроеннойСправки, "%header%", ТекстЗаголовок);
	ТекстВстроеннойСправки = СтрЗаменить(ТекстВстроеннойСправки, "%text%", ТекстОбщий);

	Возврат ТекстВстроеннойСправки;

КонецФункции

Функция ПолучитьДатуВводаОстатков(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1,1,1);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаВводаНачальныхОстатков;
	КонецЕсли;

КонецФункции

Функция ТипСчетаСубконто(Значение, СтрокаДанных)

	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	Иначе //Тип субконто
		Строка = "Субконто";
	КонецЕсли;

	СчетУчета = СтрокаДанных.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаДанных.Сумма <> 0 Тогда
			Строка = Строка + "Дт";
		Иначе
			Строка = Строка + "Кт";
		КонецЕсли;
	КонецЕсли;

	Возврат Строка;

КонецФункции

Функция ПолучитьСодержаниеПроводки(РазделУчета)

	СодержаниеТекст = "Остатки по разделу: %РазделУчета%";
	СодержаниеТекст = СтрЗаменить(СодержаниеТекст, "%РазделУчета%", РазделУчета);

	Возврат СодержаниеТекст;

КонецФункции

Функция ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения, СтрокаДанных, ЗаполнятьСуммыНУ = Ложь)

	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400);
	ПоддержкаПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период + 86400);

	СчетУчета		= СтрокаДанных.СчетУчета;
	ВидСчетаУчета	= СчетУчета.Вид;
	Забалансовый	= СчетУчета.Забалансовый;
	
	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете
								И ПлательщикНалогаНаПрибыль
								И СчетУчета.НалоговыйУчет
								И ЗаполнятьСуммыНУ;
								
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Возврат Неопределено;
	КонецЕсли;

	// 1. Заполнить основные поля проводки - период, организация, содержание
	Проводка	= Движения.Добавить();
	Проводка.Период			= Реквизиты.Период;
	Проводка.Организация	= Реквизиты.Организация;
	Проводка.Содержание		= ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
	
	// 2. Заполнить сумму проводки
	СуммаПроводки	= 0;
	
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		
		ОтразитьПоДебету	= Истина;
		СуммаПроводки		= СтрокаДанных.Сумма;

	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		
		ОтразитьПоДебету	= Ложь;
		СуммаПроводки		= СтрокаДанных.СуммаКт;

	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		
		Если НЕ СтрокаДанных.СуммаКт = 0 Тогда
			ОтразитьПоДебету	= Ложь;
			СуммаПроводки		= СтрокаДанных.СуммаКт;
		Иначе
			ОтразитьПоДебету	= Истина;
			СуммаПроводки		= СтрокаДанных.Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Проводка.Сумма	= СуммаПроводки;
	КонецЕсли;

	// 3. Заполнить суммы для НУ проводки
	Если ОтражатьВНалоговомУчете Тогда

		Если ОтразитьПоДебету Тогда
			Проводка.СуммаНУДт	= СтрокаДанных.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаВРДт	= СтрокаДанных.СуммаВР;
				Проводка.СуммаПРДт	= СтрокаДанных.СуммаПР;
			КонецЕсли;
		Иначе
			Проводка.СуммаНУКт	= СтрокаДанных.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаВРКт	= СтрокаДанных.СуммаВР;
				Проводка.СуммаПРКт	= СтрокаДанных.СуммаПР;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// 4. Заполнить количество, счета Дт и Кт, подразделение
	Если ОтразитьПоДебету Тогда

		Проводка.СчетДт	= СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт	= ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт			= СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаДт	= СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный И ОтражатьВБухгалтерскомУчете Тогда
			Проводка.КоличествоДт		= СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

	Иначе

		Проводка.СчетКт	= СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт	= ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт			= СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаКт	= СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный И ОтражатьВБухгалтерскомУчете Тогда
			Проводка.КоличествоКт		= СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

	КонецЕсли;

	Возврат Проводка;

КонецФункции

Функция ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыСКонтрагентами(Реквизиты, Движения, СтрокаДанных)

	СчетУчета		= СтрокаДанных.СчетУчета;
	ВидСчетаУчета	= СчетУчета.Вид;
	Забалансовый	= СчетУчета.Забалансовый;
	
	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете
								И Реквизиты.ПлательщикНалогаНаПрибыль
								И СчетУчета.НалоговыйУчет
								И Реквизиты.Период >= '20070101';
								
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// 1. Заполнить основные поля проводки - период, организация, содержание
	Проводка = Движения.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	// 2. Заполнить сумму проводки
	СуммаПроводки	= 0;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		
		ОтразитьПоДебету	= Истина;
		СуммаПроводки	= СтрокаДанных.Сумма;

	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		
		ОтразитьПоДебету	= Ложь;
		СуммаПроводки		= СтрокаДанных.СуммаКт;

	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		
		Если НЕ СтрокаДанных.Сумма = 0 Тогда
			ОтразитьПоДебету	= Истина;
			СуммаПроводки		= СтрокаДанных.Сумма;
		Иначе
			ОтразитьПоДебету	= Ложь;
			СуммаПроводки		= СтрокаДанных.СуммаКт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Проводка.Сумма	= СуммаПроводки;
	КонецЕсли;

	// 3. Заполнить суммы для НУ проводки
	Если ОтражатьВНалоговомУчете Тогда
		
		Если ОтразитьПоДебету Тогда
			Проводка.СуммаНУДт	= СтрокаДанных.СуммаНУ;
		Иначе
			Проводка.СуммаНУКт	= СтрокаДанных.СуммаНУ;
		КонецЕсли;
		
		Если УчетОС.СчетУчетаАрендныхОбязательств(СчетУчета) Тогда
			СуммаПР = 0;
			СуммаВР = СуммаПроводки - СтрокаДанных.СуммаНУ;
		Иначе
			СуммаПР = СуммаПроводки - СтрокаДанных.СуммаНУ;
			СуммаВР = 0;
		КонецЕсли;
		
		Если Реквизиты.ПоддержкаПБУ18 Тогда
			Если ОтразитьПоДебету Тогда
				Проводка.СуммаПРДт	= СуммаПР;
				Проводка.СуммаВРДт	= СуммаВР;
			Иначе
				Проводка.СуммаПРКт	= СуммаПР;
				Проводка.СуммаВРКт	= СуммаВР;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// 4. Заполнить количество, счета Дт и Кт, подразделение
	Если ОтразитьПоДебету Тогда

		Проводка.СчетДт	= СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт	= ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт			= СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаДт	= СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт	= СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

	Иначе

		Проводка.СчетКт	= СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт	= ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт			= СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаКт	= СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт	= СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

	КонецЕсли;

	Возврат Проводка;

КонецФункции

Функция ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыССотрудниками(Реквизиты, Движения, СтрокаДанных)

	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400);
	ПоддержкаПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период + 86400);

	СчетУчета		= СтрокаДанных.СчетУчета;
	ВидСчетаУчета	= СчетУчета.Вид;
	Забалансовый	= СчетУчета.Забалансовый;
	
	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете
								И ПлательщикНалогаНаПрибыль
								И СчетУчета.НалоговыйУчет;
								
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Возврат Неопределено;
	КонецЕсли;

	// 1. Заполнить основные поля проводки - период, организация, содержание
	Проводка	= Движения.Добавить();
	Проводка.Период			= Реквизиты.Период;
	Проводка.Организация	= Реквизиты.Организация;
	Проводка.Содержание		= ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	// 2. Заполнить сумму проводки
	СуммаПроводки = 0;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		
		ОтразитьПоДебету	= Истина;
		СуммаПроводки		= СтрокаДанных.Сумма;

	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		
		ОтразитьПоДебету	= Ложь;
		СуммаПроводки		= СтрокаДанных.СуммаКт;

	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		
		СуммаПроводки = 0;
		Если СтрокаДанных.Сумма <> 0 Тогда
			ОтразитьПоДебету	= Истина;
			СуммаПроводки		= СтрокаДанных.Сумма;
		Иначе
			ОтразитьПоДебету	= Ложь;
			СуммаПроводки		= СтрокаДанных.СуммаКт;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		Проводка.Сумма	= СуммаПроводки;
	КонецЕсли;
	
	
	// 3. Заполнить суммы для НУ проводки
	Если ОтражатьВНалоговомУчете Тогда
		
		Если ОтразитьПоДебету Тогда
			Проводка.СуммаНУДт = СуммаПроводки;
		Иначе
			Проводка.СуммаНУКт = СуммаПроводки;
		КонецЕсли;
		
		Если ПоддержкаПБУ18 Тогда
			Если ОтразитьПоДебету Тогда
				Проводка.СуммаПРДт = 0;
				Проводка.СуммаВРДт = 0;
			Иначе
				Проводка.СуммаПРКт = 0;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// 4. Заполнить количество, счета Дт и Кт, подразделение
	Если ОтразитьПоДебету Тогда

		Проводка.СчетДт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт = СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

	Иначе

		Проводка.СчетКт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт = СтрокаДанных.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаДанных.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаДанных.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

	КонецЕсли;

	Возврат Проводка;

КонецФункции

Функция ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыССотрудникамиПоЗарплате(Реквизиты, Движения, СтрокаДанных)

	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400);
	ПоддержкаПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период + 86400);

	СчетУчета	= СтрокаДанных.СчетУчета;
	
	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете
								И ПлательщикНалогаНаПрибыль
								И СчетУчета.НалоговыйУчет;
								
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// 1. Заполнить основные поля проводки - период, организация, содержание
	Проводка = Движения.Добавить();
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Забалансовый = СчетУчета.Забалансовый;

	// 2. Заполнить сумму проводки
	СуммаПроводки = СтрокаДанных.Сумма;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Проводка.Сумма = СуммаПроводки;
	КонецЕсли;

	// 3. Заполнить суммы для НУ проводки
	Если ОтражатьВНалоговомУчете Тогда

		Проводка.СуммаНУКт = СуммаПроводки;

		Если ПоддержкаПБУ18 Тогда
			Проводка.СуммаПРКт = 0;
			Проводка.СуммаВРКт = 0;
		КонецЕсли;

	КонецЕсли;

	// 4. Заполнить подразделение, счета Дт и Кт
	Проводка.СчетКт = СчетУчета;
	Если НЕ Забалансовый Тогда
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
	КонецЕсли;

	БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

	Возврат Проводка;

КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма) Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		Форма,
		Форма.Объект.Организация,
		КонецМесяца(Форма.Объект.Дата) + 1);

КонецПроцедуры

// Процедура заполняет в регистре сведений ЖурналУчетаСчетовФактур
// графы КодВидаОперации, СуммаПоСчетуФактуре и СуммаНДС.
//
Процедура ЗаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФОтложенно(Параметры) Экспорт

	Запрос = Новый Запрос;
	
	КонецПериодаВыборки = '20191231235959';
	
	Если Параметры.Свойство("КонецПериодаВыборки")
		И ТипЗнч(Параметры.КонецПериодаВыборки) = Тип("Дата") Тогда
		КонецПериодаВыборки = Параметры.КонецПериодаВыборки;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", 	КонецПериодаВыборки);	
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЖурналУчетаСчетовФактур.Регистратор КАК Регистратор,
	|	ЖурналУчетаСчетовФактур.Период,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданный.КодВидаОперации, СчетФактураПолученный.КодВидаОперации) КАК КодВидаОперации,
	|	ЕСТЬNULL(СчетФактураВыданный.СуммаДокумента, СчетФактураПолученный.СуммаДокумента) КАК СуммаДокумента,
	|	ЕСТЬNULL(СчетФактураВыданный.СуммаНДСДокумента, СчетФактураПолученный.СуммаНДСДокумента) КАК СуммаНДСДокумента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ЖурналУчетаСчетовФактур.СчетФактура = СчетФактураВыданный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО ЖурналУчетаСчетовФактур.СчетФактура = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
	|	И ЖурналУчетаСчетовФактур.КодВидаОперации = """"
	|	И ЕСТЬNULL(СчетФактураВыданный.КодВидаОперации, СчетФактураПолученный.КодВидаОперации) <> """"
	|	И (НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ СчетФактураПолученный.Ссылка ЕСТЬ NULL )
	|	И ЖурналУчетаСчетовФактур.Период <= &КонецПериодаВыборки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналУчетаСчетовФактур.Период УБЫВ,
	|	ЖурналУчетаСчетовФактур.Регистратор
	|ИТОГИ ПО
	|	Регистратор";

	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Попытка
			
			ЗаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФПоДокументу(ВыборкаПоДокументам);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			КонецПериодаВыборки = ВыборкаПоДокументам.Период; // Запоминаем дату, с которой будем начинать в следующий раз.
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать ввод начальных остатков: %1 по причине:
					|%2'"),
					ВыборкаПоДокументам.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВводНачальныхОстатков, ВыборкаПоДокументам.Регистратор, ТекстСообщения);
				
			ЕстьДанные = ВыборкаПоДокументам.Следующий();
		
		КонецПопытки;
		
	КонецЦикла;
	
	// Запоминаем дату, с которой будем начинать в следующий раз.
	Параметры.Вставить("КонецПериодаВыборки", КонецПериодаВыборки);
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ДозаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФПоДокументу
				|не удалось обработать некоторые ввод начальных остатков (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВводНачальныхОстатков,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ДозаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФПоДокументу
					|обработала очередную порцию ввод начальных остатков: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФПоДокументу(ВыборкаПоДокументам)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ВводНачальныхОстатков");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Регистратор);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
		НаборЗаписей.Прочитать();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если НаборЗаписей = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВыборкаДетали = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
		
			Если ВыборкаДетали.НомерСтроки > НаборЗаписей.Количество() Тогда
				// Возможно набор ранее был изменен или обработан другими сеансами, пропускаем его.
				Продолжить;
			КонецЕсли;
			ЗаписьНабора = НаборЗаписей[ВыборкаДетали.НомерСтроки - 1];
			
			Если ЗаписьНабора.СчетФактура <> ВыборкаДетали.СчетФактура Тогда
				// Возможно набор ранее был изменен или обработан другими сеансами, пропускаем его.
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.КодВидаОперации) Тогда
				ЗаписьНабора.КодВидаОперации = ВыборкаДетали.КодВидаОперации;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.СуммаПоСчетуФактуре) Тогда
				ЗаписьНабора.СуммаПоСчетуФактуре = ВыборкаДетали.СуммаДокумента;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.СуммаНДС) Тогда
				ЗаписьНабора.СуммаНДС = ВыборкаДетали.СуммаНДСДокумента;
			КонецЕсли;
			
		КонецЦикла;
		
		// Запись обработанного объекта.
		Если НаборЗаписей.Модифицированность() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет в табличной части ДанныеПоНДС документа 
// новую колонку КодВидаОперации.
//
Процедура ЗаполнитьКодВидаОперацииВДанныеПоНДСОтложенно(Параметры) Экспорт

	Запрос = Новый Запрос;
	
	КонецПериодаВыборки = '20191231235959';
	
	Если Параметры.Свойство("КонецПериодаВыборки")
		И ТипЗнч(Параметры.КонецПериодаВыборки) = Тип("Дата") Тогда
		КонецПериодаВыборки = Параметры.КонецПериодаВыборки;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", 	КонецПериодаВыборки);	
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВводНачальныхОстатковДанныеПоНДС.Ссылка КАК Ссылка,
	|	ВводНачальныхОстатковДанныеПоНДС.Ссылка.Дата КАК Дата,
	|	ВводНачальныхОстатковДанныеПоНДС.НомерСтроки,
	|	ВводНачальныхОстатковДанныеПоНДС.СчетФактураДокумент,
	|	ЕСТЬNULL(СчетФактураВыданный.КодВидаОперации, СчетФактураПолученный.КодВидаОперации) КАК КодВидаОперации,
	|	ЕСТЬNULL(СчетФактураВыданный.СуммаДокумента, СчетФактураПолученный.СуммаДокумента) КАК СуммаДокумента,
	|	ЕСТЬNULL(СчетФактураВыданный.СуммаНДСДокумента, СчетФактураПолученный.СуммаНДСДокумента) КАК СуммаНДСДокумента
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК ВводНачальныхОстатковДанныеПоНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ВводНачальныхОстатковДанныеПоНДС.СчетФактураДокумент = СчетФактураВыданный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО ВводНачальныхОстатковДанныеПоНДС.СчетФактураДокумент = СчетФактураПолученный.Ссылка
	|ГДЕ
	|	ВводНачальныхОстатковДанныеПоНДС.КодВидаОперации = """"
	|	И ЕСТЬNULL(СчетФактураВыданный.КодВидаОперации, СчетФактураПолученный.КодВидаОперации) <> """"
	|	И (НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ СчетФактураПолученный.Ссылка ЕСТЬ NULL )
	|	И ВводНачальныхОстатковДанныеПоНДС.Ссылка.Дата <= &КонецПериодаВыборки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВводНачальныхОстатковДанныеПоНДС.Ссылка.Дата УБЫВ,
	|	ВводНачальныхОстатковДанныеПоНДС.Ссылка
	|ИТОГИ ПО
	|	Ссылка";

	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Попытка
			
			ЗаполнитьКодВидаОперацииВДанныеПоНДСПоДокументу(ВыборкаПоДокументам);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			КонецПериодаВыборки = ВыборкаПоДокументам.Дата; // Запоминаем дату, с которой будем начинать в следующий раз.
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать ввод начальных остатков: %1 по причине:
					|%2'"),
					ВыборкаПоДокументам.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВводНачальныхОстатков, ВыборкаПоДокументам.Ссылка, ТекстСообщения);
				
			ЕстьДанные = ВыборкаПоДокументам.Следующий();
		
		КонецПопытки;
		
	КонецЦикла;
	
	// Запоминаем дату, с которой будем начинать в следующий раз.
	Параметры.Вставить("КонецПериодаВыборки", КонецПериодаВыборки);
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьКодВидаОперацииВДанныеПоНДСОтложенно
				|не удалось обработать некоторые ввод начальных остатков (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВводНачальныхОстатков,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьКодВидаОперацииВДанныеПоНДСОтложенно
					|обработала очередную порцию ввод начальных остатков: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКодВидаОперацииВДанныеПоНДСПоДокументу(ВыборкаПоДокументам)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ВводНачальныхОстатков");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		ВыборкаДетали = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
		
			Если ВыборкаДетали.НомерСтроки > ДокументОбъект.ДанныеПоНДС.Количество() Тогда
				// Возможно документ обработан другими сеансами, пропускаем его.
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = ДокументОбъект.ДанныеПоНДС[ВыборкаДетали.НомерСтроки - 1];
			
			Если СтрокаТЧ.СчетФактураДокумент <> ВыборкаДетали.СчетФактураДокумент Тогда
				// Возможно документ обработан другими сеансами, пропускаем его.
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КодВидаОперации) Тогда
				СтрокаТЧ.КодВидаОперации = ВыборкаДетали.КодВидаОперации;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ДокументОбъект.Модифицированность() Тогда
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьРаботниковПоСпискуСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК ВводНачальныхОстатковРасчетыПоЗаработнойПлате
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка.РазделУчета = &РазделУчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы ИЗ ДокументОбъект.РасчетыПоЗаработнойПлате Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.РаботникОрганизации) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
					СтрокаТаблицы.РаботникОрганизации = СтрокаТаблицы.Сотрудник.ФизическоеЛицо;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;	
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА
//

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Реквизиты.РазделУчета КАК РазделУчета,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	Реквизиты.ОтражатьПоСпециальнымРегистрам КАК ОтражатьПоСпециальнымРегистрам
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Результат = Запрос.Выполнить();

	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период + 86400, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	НомераТаблиц = Новый Структура;

	СписокВидовЦенностейУслуги = Новый СписокЗначений;
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	СписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СчетаЗарплаты = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СчетаМатериалов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЮридическоеФизическоеЛицо", Реквизиты.ЮридическоеФизическоеЛицо);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Реквизиты.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ОтражатьВБухгалтерскомУчете", Реквизиты.ОтражатьВБухгалтерскомУчете);
	Запрос.УстановитьПараметр("ОтражатьВНалоговомУчете", Реквизиты.ОтражатьВНалоговомУчете);
	Запрос.УстановитьПараметр("ОтражатьПоСпециальнымРегистрам", Реквизиты.ОтражатьПоСпециальнымРегистрам);
	Запрос.УстановитьПараметр("РазделУчета", Реквизиты.РазделУчета);
	Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", СписокВидовЦенностейУслуги);
	Запрос.УстановитьПараметр("СчетаЗарплаты", СчетаЗарплаты);
	Запрос.УстановитьПараметр("СчетаМатериалов", СчетаМатериалов);
	Запрос.УстановитьПараметр("ВыделятьНДСУСН", УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период + 86400)
		= Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.УстановитьПараметр("ПрименяетсяУСН", УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент", УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("Предприниматель", УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПрименяетсяОСН", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПоддержкаПБУ18", УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период + 86400));
	Запрос.УстановитьПараметр("УчетЗарплатыСредствамиБП", Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить());
	
	МассивСчетовУчетаНалоговУСН = УчетУСН.СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
	Инд = МассивСчетовУчетаНалоговУСН.Найти(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	Если Инд <> Неопределено Тогда
		МассивСчетовУчетаНалоговУСН.Удалить(Инд);
	КонецЕсли;
	
	МассивВидыПлатежейВГосБюджет = Новый Массив;
	МассивВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	МассивВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	МассивВидыПлатежейВГосБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	
	Запрос.УстановитьПараметр("МассивСчетовУчетаНалоговУСН", МассивСчетовУчетаНалоговУСН);
	Запрос.УстановитьПараметр("МассивВидыПлатежейВГосБюджет", МассивВидыПлатежейВГосБюджет);
	
	Запрос.Текст =
		ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаОС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаНМА(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыСКонтрагентами(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыПоНалогамИСборам(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаБухСправка(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыСПодотчетнымиЛицами(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыОтгруженные(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаСчетаИСубконто(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыОтгруженныеНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасходыБудущихПериодов(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаНоменклатураНаСкладе(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаНоменклатураНаСкладеНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатации(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатацииНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаМатериалыПереданныеВПереработку(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаМатериалыПереданныеВПереработкуНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыВРозничнойТорговлеАТТ(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыВРозничнойТорговлеАТТНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыВРозничнойТорговлеНТТ(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаНДС(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыСПерсоналом(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаНоменклатураНаСкладеУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатацииУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаМатериалыПереданныеВПереработкуУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыОтгруженныеУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаТоварыОтгруженныеИП(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасходыБудущихПериодовУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыСПодотчетнымиЛицамиУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыПоНалогамИСборамУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРасчетыПоЗаработнойПлатеУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаМПЗРеализованныеУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаУслугиУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаДопРасходыУСН(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаСчетаФактуры(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаОбороты(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаМПЗРеализованныеИП(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаПрочиеРасходыИП(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаДопРасходыИП(НомераТаблиц, Реквизиты)
		+ ТекстЗапросТаблицаСтруктураСтоимостиЗапасов(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	;

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка                         КАК Регистратор,
	|	Реквизиты.Дата                           КАК Период,
	|	Реквизиты.Организация                    КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации       КАК ПодразделениеОрганизации,
	|	Реквизиты.РазделУчета                    КАК РазделУчета,
	|	Реквизиты.ОтражатьВБухгалтерскомУчете    КАК ОтражатьВБухгалтерскомУчете,
	|	Реквизиты.ОтражатьВНалоговомУчете        КАК ОтражатьВНалоговомУчете,
	|	Реквизиты.ОтражатьПоСпециальнымРегистрам КАК ОтражатьПоСпециальнымРегистрам,
	|	&ПрименяетсяУСН                          КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходы                    КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы        КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	&ПрименяетсяУСНПатент				     КАК ПрименяетсяУСНПатент,
	|	&Предприниматель                         КАК Предприниматель,
	|	&ПрименяетсяОСН                          КАК ПрименяетсяОСН,
	|	&ПоддержкаПБУ18                          КАК ПоддержкаПБУ18,
	|	&ПлательщикНалогаНаПрибыль               КАК ПлательщикНалогаНаПрибыль,
	|	&РаздельныйУчетНДСНаСчете19              КАК РаздельныйУчетНДСНаСчете19
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСчетаИСубконто(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаСВидомСубконто_Партии",			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаСВидомСубконто_Склады",			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаСВидомСубконто_Номенклатура",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаСВидомСубконто",				НомераТаблиц.Количество());

	ТекстЗапроса = "
		|// Счета с субконто Партии
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьСубконто,
		|	СчетаИСубконто.Ссылка
		|ПОМЕСТИТЬ
		|	ВТ_СчетаССубконтоПартии
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаИСубконто
		|ГДЕ
		|	СчетаИСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|// Счета с субконто Склады и суммовым учетом
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьСубконто,
		|	СчетаИСубконто.Ссылка
		|ПОМЕСТИТЬ
		|	ВТ_СчетаССубконтоСклады
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаИСубконто
		|ГДЕ
		|	СчетаИСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
		|   И СчетаИСубконто.Суммовой
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|// Счета с субконто Номенклатура
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьСубконто,
		|	СчетаИСубконто.Ссылка
		|ПОМЕСТИТЬ
		|	ВТ_СчетаССубконтоНоменклатура
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаИСубконто
		|ГДЕ
		|	СчетаИСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;		
		|
		|// Итоговый запрос к счетам
		|ВЫБРАТЬ
		|	Счета.Ссылка КАК СчетУчета,
		|	ЕСТЬNULL(ВТ_СчетаССубконтоПартии.ЕстьСубконто, ЛОЖЬ) КАК ЕстьСубконтоПартии,
		|	ЕСТЬNULL(ВТ_СчетаССубконтоСклады.ЕстьСубконто, ЛОЖЬ) КАК ЕстьСубконтоСклады,
		|	ЕСТЬNULL(ВТ_СчетаССубконтоНоменклатура.ЕстьСубконто, ЛОЖЬ) КАК ЕстьСубконтоНоменклатура
		|ПОМЕСТИТЬ
		|	ВТ_Счета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_СчетаССубконтоПартии
		|		ПО Счета.Ссылка = ВТ_СчетаССубконтоПартии.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_СчетаССубконтоСклады
		|		ПО Счета.Ссылка = ВТ_СчетаССубконтоСклады.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_СчетаССубконтоНоменклатура
		|		ПО Счета.Ссылка = ВТ_СчетаССубконтоНоменклатура.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВременнаяТаблицаОСПринятыхКУчетуРанее", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());

	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// ВременнаяТаблицаОСПринятыхКУчетуРанее
	|
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	ИСТИНА                                  КАК ПринятоКУчету
	|ПОМЕСТИТЬ ВТ_ОСПринятыеКУчетуРанее
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И СостоянияОСОрганизаций.Регистратор <> &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ТаблицаОС
	|
	|ВЫБРАТЬ
	|	""ОС""                                                КАК ИмяСписка,
	|	Док.Ссылка                                            КАК Регистратор,
	|	&Организация                                          КАК Организация,
	|	&ЮридическоеФизическоеЛицо                            КАК ЮридическоеФизическоеЛицо,
	|	&ПрименяетсяУСН                                       КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходы                                 КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы                     КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	&ПоддержкаПБУ18                                       КАК ПоддержкаПБУ18,
	|	&ПодразделениеОрганизации                             КАК ПодразделениеОрганизации,
	|	&Период                                               КАК Период,
	|	&ОтражатьВБухгалтерскомУчете                          КАК ОтражатьВБухгалтерскомУчете,
	|	&ОтражатьВНалоговомУчете                              КАК ОтражатьВНалоговомУчете,
	|	&ОтражатьПоСпециальнымРегистрам                       КАК ОтражатьПоСпециальнымРегистрам,
	|	Док.НомерСтроки                                       КАК НомерСтроки,
	|	Док.АмортизацияДо2002НУ                               КАК АмортизацияДо2002НУ,
	|	Док.АмортизацияДо2009                                 КАК АмортизацияДо2009,
	|	Док.ВыработкаКоличествоБУ                             КАК ВыработкаКоличествоБУ,
	|	Док.ГрафикАмортизацииБУ                               КАК ГрафикАмортизацииБУ,
	|	Док.ДатаПоследнейМодернизацииРегл                     КАК ДатаПоследнейМодернизацииРегл,
	|	Док.ДатаПринятияКУчетуРегл                            КАК ДатаПринятияКУчетуРегл,
	|	Док.ДатаПриобретенияУСН                               КАК ДатаПриобретенияУСН,
	|	Док.ИнвентарныйНомерРегл                              КАК ИнвентарныйНомерРегл,
	|	Док.КоэффициентАмортизацииБУ                          КАК КоэффициентАмортизацииБУ,
	|	Док.КоэффициентАмортизацииНУ                          КАК КоэффициентАмортизацииНУ,
	|	Док.КоэффициентУскоренияБУ                            КАК КоэффициентУскоренияБУ,
	|	Док.МетодНачисленияАмортизацииНУ                      КАК МетодНачисленияАмортизацииНУ,
	|	Док.МОЛРегл                                           КАК МОЛРегл,
	|	Док.НазваниеДокументаМодернизацииРегл                 КАК НазваниеДокументаМодернизацииРегл,
	|	Док.НазваниеДокументаПринятияКУчетуРегл               КАК НазваниеДокументаПринятияКУчетуРегл,
	|	Док.НакопленнаяАмортизацияБУ                          КАК НакопленнаяАмортизацияБУ,
	|	Док.НакопленнаяАмортизацияНУ                          КАК НакопленнаяАмортизацияНУ,
	|	Док.НакопленнаяАмортизацияПР                          КАК НакопленнаяАмортизацияПР,
	|	Док.НачислятьАмортизациюБУ                            КАК НачислятьАмортизациюБУ,
	|	Док.НачислятьАмортизациюНУ                            КАК НачислятьАмортизациюНУ,
	|	Док.НомерДокументаМодернизацииРегл                    КАК НомерДокументаМодернизацииРегл,
	|	Док.НомерДокументаПринятияКУчетуРегл                  КАК НомерДокументаПринятияКУчетуРегл,
	|	Док.ОбъемПродукцииРаботБУ                             КАК ОбъемПродукцииРаботБУ,
	|	Док.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ     КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	Док.ОсновноеСредство                                  КАК ОсновноеСредство,
	|	Док.ПараметрВыработкиБУ                               КАК ПараметрВыработкиБУ,
	|	Док.ПервоначальнаяСтоимостьБУ                         КАК ПервоначальнаяСтоимостьБУ,
	|	Док.ПервоначальнаяСтоимостьНУ                         КАК ПервоначальнаяСтоимостьНУ,
	|	Док.ПервоначальнаяСтоимостьУСН                        КАК ПервоначальнаяСтоимостьУСН,
	|	Док.ПорядокВключенияСтоимостиВСоставРасходовНУ        КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	Док.ПорядокВключенияСтоимостиВСоставРасходовУСН       КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	Док.ПорядокПогашенияСтоимостиБУ                       КАК ПорядокПогашенияСтоимостиБУ,
	|	Док.РеквизитыДокументаОплаты                          КАК РеквизитыДокументаОплаты,
	|	Док.СостояниеМодернизацииРегл                         КАК СостояниеМодернизацииРегл,
	|	Док.СостояниеПринятияКУчетуРегл                       КАК СостояниеПринятияКУчетуРегл,
	|	Док.СпециальныйКоэффициентНУ                          КАК СпециальныйКоэффициентНУ,
	|	Док.СпособНачисленияАмортизацииБУ                     КАК СпособНачисленияАмортизацииБУ,
	|	Док.СпособОтраженияРасходовПоАмортизации              КАК СпособОтраженияРасходовПоАмортизации,
	|	Док.СпособПоступленияРегл                             КАК СпособПоступленияРегл,
	|	Док.СрокИспользованияДляВычисленияАмортизацииБУ       КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	Док.СрокПолезногоИспользованияБУ                      КАК СрокПолезногоИспользованияБУ,
	|	Док.СрокПолезногоИспользованияНУ                      КАК СрокПолезногоИспользованияНУ,
	|	Док.СрокПолезногоИспользованияУСН                     КАК СрокПолезногоИспользованияУСН,
	|	Док.СтоимостьДляВычисленияАмортизацииБУ               КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	Док.СтоимостьДляВычисленияАмортизацииПР               КАК СтоимостьДляВычисленияАмортизацииПР,
	|	Док.СтоимостьДо2002НУ                                 КАК СтоимостьДо2002НУ,
	|	Док.СуммаНачисленнойАмортизацииУСН                    КАК СуммаНачисленнойАмортизацииУСН,
	|	Док.СуммаПоследнейМодернизацииБУ                      КАК СуммаПоследнейМодернизацииБУ,
	|	Док.СуммаПоследнейМодернизацииНУ                      КАК СуммаПоследнейМодернизацииНУ,
	|	Док.СчетАмортизацииБУ                                 КАК СчетАмортизацииБУ,
	|	Док.СчетУчетаБУ                                       КАК СчетУчетаБУ,
	|	Док.ТекущаяСтоимостьБУ                                КАК ТекущаяСтоимостьБУ,
	|	Док.ТекущаяСтоимостьНУ                                КАК ТекущаяСтоимостьНУ,
	|	Док.ТекущаяСтоимостьПР                                КАК ТекущаяСтоимостьПР,
	|	Док.ФактическийСрокИспользованияДо2009                КАК ФактическийСрокИспользованияДо2009,
	|	ЕСТЬNULL(ВТ_ОСПринятыеКУчетуРанее.ПринятоКУчету,ЛОЖЬ) КАК БылоПринятоКУчетуРанее,
	|	Док.Контрагент                                        КАК Контрагент,
	|	Док.ДоговорКонтрагента                                КАК ДоговорКонтрагента,
	|	Док.СпособОтраженияРасходовПоАренднымПлатежам         КАК СпособОтраженияРасходовПоАренднымПлатежам,
	|	Док.КорректировкаСтоимостиНУ                          КАК КорректировкаСтоимостиНУ,
	|	Док.Арендатор                                         КАК Арендатор,
	|	Док.ДатаПередачиВАренду                               КАК ДатаПередачиВАренду,
	|	Док.СобытиеПередачиВАренду                            КАК СобытиеПередачиВАренду,
	|	Док.НазваниеДокументаПередачиВАренду                  КАК НазваниеДокументаПередачиВАренду,
	|	Док.НомерДокументаПередачиВАренду                     КАК НомерДокументаПередачиВАренду
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ОС КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТ_ОСПринятыеКУчетуРанее
	|	ПО
	|		Док.ОсновноеСредство = ВТ_ОСПринятыеКУчетуРанее.ОсновноеСредство
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНМА(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ВременнаяТаблицаНМАПринятыхКУчетуРанее", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаНМА", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив,
	|	ИСТИНА КАК ПринятоКУчету
	|ПОМЕСТИТЬ ВТ_НМАПринятыеКУчетуРанее
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|	И СостоянияНМАОрганизаций.Регистратор <> &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НМА"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Организация КАК Организация,
	|	&ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВТ_НМАПринятыеКУчетуРанее.ПринятоКУчету, ЛОЖЬ) КАК БылоПринятоКУчетуРанее,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету) КАК Состояние,
	|	Док.НематериальныйАктив,
	|	Док.СчетУчетаБУ,
	|	Док.СчетНачисленияАмортизацииБУ,
	|	Док.ПервоначальнаяСтоимостьБУ,
	|	Док.ПервоначальнаяСтоимостьНУ,
	|	Док.ПервоначальнаяСтоимостьУСН,
	|	Док.НакопленнаяАмортизацияБУ,
	|	Док.НакопленнаяАмортизацияНУ,
	|	Док.НакопленнаяАмортизацияПР,
	|	Док.НакопленнаяАмортизацияВР,
	|	Док.НакопленнаяАмортизацияУСН,
	|	Док.ДатаПринятияКУчетуРегл,
	|	Док.ДатаПриобретения,
	|	Док.ВидОбъектаУчета,
	|	ВЫБОР
	|		КОГДА Док.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНМА,
	|	Док.СпособОтраженияРасходов,
	|	Док.НачислятьАмортизациюБУ,
	|	Док.НачислятьАмортизациюНУ,
	|	Док.ТекущаяСтоимостьБУ,
	|	Док.ТекущаяСтоимостьНУ,
	|	Док.ТекущаяСтоимостьПР,
	|	Док.ТекущаяСтоимостьВР,
	|	Док.КоэффициентБУ,
	|	Док.АмортизацияДо2009,
	|	Док.ФактическийСрокИспользованияДо2009,
	|	Док.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	Док.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	Док.РеквизитыДокументаОплаты,
	|	Док.СпециальныйКоэффициентНУ,
	|	Док.СпособНачисленияАмортизацииБУ,
	|	Док.МетодНачисленияАмортизацииНУ,
	|	Док.СпособПоступления,
	|	Док.СрокПолезногоИспользованияБУ,
	|	Док.СрокПолезногоИспользованияНУ,
	|	Док.СрокПолезногоИспользованияУСН
	|ИЗ
	|	Документ.ВводНачальныхОстатков.НМА КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НМАПринятыеКУчетуРанее КАК ВТ_НМАПринятыеКУчетуРанее
	|		ПО Док.НематериальныйАктив = ВТ_НМАПринятыеКУчетуРанее.НематериальныйАктив
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыСКонтрагентами(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаРасчетыСКонтрагентами", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыСКонтрагентами""   КАК ИмяСписка,
	|	Док.Ссылка                  КАК Регистратор,
	|	&Период                     КАК Период,
	|	Док.НомерСтроки             КАК НомерСтроки,
	|	Док.СчетУчета               КАК СчетУчета,
	|	Док.СчетУчета.Валютный      КАК СчетУчетаВалютный,
	|	Док.Контрагент              КАК Контрагент,
	|	Док.ДоговорКонтрагента      КАК ДоговорКонтрагента,
	|	Док.Документ                КАК Документ,
	|	Док.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Док.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
	|	Док.Сумма                   КАК Сумма,
	|	Док.Валюта                  КАК Валюта,
	|	Док.ВалютнаяСумма           КАК ВалютнаяСумма,
	|	Док.Аванс                   КАК Аванс,
	|	Док.ДоходЕНВД               КАК ДоходЕНВД,
	|	Док.ДоходКомитента          КАК ДоходКомитента,
	|	Док.ДоходПатент		        КАК ДоходПатент,
	|	Док.СуммаКт                 КАК СуммаКт,
	|	Док.СуммаНУ                 КАК СуммаНУ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыПоНалогамИСборам(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаРасчетыПоНалогамИСборам", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыПоНалогамИСборам"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.ВидПлатежаВБюджет КАК ВидПлатежаВБюджет,
	|	Док.УровеньБюджета КАК УровеньБюджета,
	|	Док.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.ХарактерДеятельности КАК ХарактерДеятельности,
	|	Док.Сумма КАК Сумма,
	|	Док.СуммаКт КАК СуммаКт,
	|	Док.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаБухСправка(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Капитал
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаБухСправка", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""БухСправка""    КАК ИмяСписка,
	|	Док.Ссылка        КАК Регистратор,
	|	&Период           КАК Период,
	|	Док.НомерСтроки   КАК НомерСтроки,
	|	Док.СчетУчета     КАК СчетУчета,
	|	Док.Субконто1     КАК Субконто1,
	|	Док.Субконто2     КАК Субконто2,
	|	Док.Субконто3     КАК Субконто3,
	|	Док.Количество    КАК Количество,
	|	Док.Сумма         КАК Сумма,
	|	Док.Валюта        КАК Валюта,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.СуммаНУ       КАК СуммаНУ,
	|	Док.СуммаПР       КАК СуммаПР,
	|	Док.СуммаВР       КАК СуммаВР,
	|	Док.СуммаКт       КАК СуммаКт
	|ИЗ
	|	Документ.ВводНачальныхОстатков.БухСправка КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыСПодотчетнымиЛицами(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаРасчетыСПодотчетнымиЛицами", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыСПодотчетнымиЛицами"" КАК ИмяСписка,
	|	Док.Ссылка                     КАК Регистратор,
	|	&Период                        КАК Период,
	|	Док.НомерСтроки                КАК НомерСтроки,
	|	Док.СчетУчета                  КАК СчетУчета,
	|	Док.РаботникОрганизации        КАК РаботникОрганизации,
	|	Док.Сумма                      КАК Сумма,
	|	Док.Валюта                     КАК Валюта,
	|	Док.ВалютнаяСумма              КАК ВалютнаяСумма,
	|	Док.РасчетныйДокумент          КАК РасчетныйДокумент,
	|	Док.СуммаКт                    КАК СуммаКт
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетнымиЛицами КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыОтгруженные(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаТоварыОтгруженные", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗОтгруженные""           КАК ИмяСписка,
	|	Док.Ссылка                   КАК Регистратор,
	|	&Период                      КАК Период,
	|	Док.НомерСтроки              КАК НомерСтроки,
	|	Док.СчетУчета                КАК СчетУчета,
	|	Док.Номенклатура             КАК Номенклатура,
	|	Док.Покупатель               КАК Покупатель,
	|	Док.ДоговорПокупателя        КАК ДоговорПокупателя,
	|	Док.ДокументОтгрузки         КАК ДокументОтгрузки,
	|	Док.Поставщик                КАК Поставщик,
	|	Док.ДоговорПоставщика        КАК ДоговорПоставщика,
	|	Док.Партия                   КАК Партия,
	|	Док.Количество               КАК Количество,
	|	Док.Сумма                    КАК Сумма,
	|	0                            КАК СуммаКт,
	|	Док.СуммаНУ                  КАК СуммаНУ,
	|	Док.СуммаПР                  КАК СуммаПР,
	|	Док.СуммаВР                  КАК СуммаВР,
	|	Док.Ключ                     КАК Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыОтгруженныеНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаТоварыОтгруженныеНДС", НомераТаблиц.Количество());

	ТекстЗапроса = "
		|/////////////////////////////////////////////////////////////////////////////////////
		|// Строки со счетом учета с субконто Партия, другие счета не должны попадать
		|ВЫБРАТЬ
		|	""МПЗОтгруженные""                       КАК ИмяСписка,
		|	ДокПартии.Ссылка.Организация             КАК Организация,
		|	ДокПартии.Номенклатура                   КАК Номенклатура,
		|	ДокПартии.СчетУчета                      КАК СчетУчета,
		|	ДокПартии.Покупатель                     КАК Контрагент,
		|	ВТ_Счета.ЕстьСубконтоПартии              КАК ЕстьСубконтоПартии,
		|	ВТ_Счета.ЕстьСубконтоСклады              КАК ЕстьСубконтоСклады,
		|	ДокПартии.Партия                         КАК Партия,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад, // У отгруженных товаров склада нет
		|	ВЫБОР
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			0
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности НЕ В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			ДокСФ.Количество
		|		ИНАЧЕ
		|			ДокПартии.Количество
		|	КОНЕЦ                      КАК Количество,
		|	ДокСФ.СчетФактура          КАК СчетФактура,          // Может быть NULL
		|	ДокСФ.ВидЦенности          КАК ВидЦенности,          // Может быть NULL
		|	ДокСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость, // Может быть NULL
		|	ДокСФ.СпособУчетаНДС       КАК СпособУчетаНДС,		 // Может быть NULL
		|	ДокСФ.СуммаБезНДС          КАК СуммаБезНДС,			 // Может быть NULL
		|	ДокСФ.Стоимость            КАК Стоимость,            // Может быть NULL
		|	ДокСФ.СчетУчетаНДС         КАК СчетУчетаНДС,         // Может быть NULL
		|	ДокСФ.СтавкаНДС            КАК СтавкаНДС,            // Может быть NULL
		|	ДокСФ.НДС                  КАК НДС                   // Может быть NULL
		|ИЗ
		|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК ДокПартии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ДокСФ
		|		ПО
		|			ДокПартии.Ссылка = ДокСФ.Ссылка
		|			И ДокПартии.Ключ = ДокСФ.Ключ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_Счета КАК ВТ_Счета
		|		ПО ДокПартии.СчетУчета = ВТ_Счета.СчетУчета
		|ГДЕ
		|	ДокПартии.Ссылка = &Ссылка
		|	И ВТ_Счета.ЕстьСубконтоПартии
		|УПОРЯДОЧИТЬ ПО
		|	ДокПартии.НомерСтроки
		|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасходыБудущихПериодов(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаРасходыБудущихПериодов", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасходыБудущихПериодов""    КАК ИмяСписка,
	|	Док.Ссылка                    КАК Регистратор,
	|	&Период                       КАК Период,
	|	Док.НомерСтроки               КАК НомерСтроки,
	|	Док.СчетУчета                 КАК СчетУчета,
	|	Док.Контрагент                КАК Контрагент,
	|	Док.ДоговорКонтрагента        КАК ДоговорКонтрагента,
	|	Док.РасчетныйДокумент         КАК РасчетныйДокумент,
	|	Док.Сумма                     КАК Сумма,
	|	0                             КАК СуммаКт,
	|	Док.НДС                       КАК НДС,
	|	Док.СуммаНУ                   КАК СуммаНУ,
	|	Док.СуммаПР                   КАК СуммаПР,
	|	Док.СуммаВР                   КАК СуммаВР,
	|	Док.Валюта                    КАК Валюта,
	|	Док.ВалютнаяСумма             КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС               КАК ВалютныйНДС,
	|	Док.Субконто1                 КАК Субконто1,
	|	Док.Субконто2                 КАК Субконто2,
	|	Док.Субконто3                 КАК Субконто3
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасходыБудущихПериодов КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНоменклатураНаСкладе(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаНоменклатураНаСкладе", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""НоменклатураНаСкладе"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаПР КАК СуммаПР,
	|	Док.СуммаВР КАК СуммаВР,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС КАК ВалютныйНДС,
	|	Док.Оплачен КАК Оплачен,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Док.Валюта КАК Валюта,
	|	Док.СпособСтроительства КАК СпособСтроительства,
	|	Док.Ключ КАК Ключ,
	|	Док.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(Док.Номенклатура.Услуга, ЛОЖЬ) КАК Услуга
	|ИЗ
	|	Документ.ВводНачальныхОстатков.НоменклатураНаСкладе КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНоменклатураНаСкладеНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаНоменклатураНаСкладеНДС", НомераТаблиц.Количество());

	ТекстЗапроса = "
		|/////////////////////////////////////////////////////////////////////////////////////
		|// Строки со счетом учета с субконто Партия, другие счета не должны попадать
		|ВЫБРАТЬ
		|	""МПЗНаСкладе""                          КАК ИмяСписка,
		|	ДокПартии.Ссылка.Организация             КАК Организация,
		|	ДокПартии.Номенклатура                   КАК Номенклатура,
		|	ДокПартии.СчетУчета                      КАК СчетУчета,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ВТ_Счета.ЕстьСубконтоПартии              КАК ЕстьСубконтоПартии,
		|	ВТ_Счета.ЕстьСубконтоСклады              КАК ЕстьСубконтоСклады,
		|	ДокПартии.Партия                         КАК Партия,
	    |	ВЫБОР
	    |		КОГДА ВТ_Счета.ЕстьСубконтоСклады
	    |			ТОГДА ДокПартии.Склад
	    |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	    |	КОНЕЦ                                     КАК Склад,
		|	ВЫБОР
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			0
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности НЕ В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			ДокСФ.Количество
		|		ИНАЧЕ
		|			ДокПартии.Количество
		|	КОНЕЦ                      КАК Количество,
		|	ДокСФ.СчетФактура          КАК СчетФактура,          // Может быть NULL
		|	ДокСФ.ВидЦенности          КАК ВидЦенности,          // Может быть NULL
		|	ДокСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость, // Может быть NULL
		|	ДокСФ.СпособУчетаНДС       КАК СпособУчетаНДС,		 // Может быть NULL
		|	ДокСФ.СуммаБезНДС          КАК СуммаБезНДС,			 // Может быть NULL
		|	ДокСФ.Стоимость            КАК Стоимость,            // Может быть NULL
		|	ДокСФ.СчетУчетаНДС         КАК СчетУчетаНДС,         // Может быть NULL
		|	ДокСФ.СтавкаНДС            КАК СтавкаНДС,            // Может быть NULL
		|	ДокСФ.НДС                  КАК НДС                   // Может быть NULL
		|ИЗ
		|	Документ.ВводНачальныхОстатков.НоменклатураНаСкладе КАК ДокПартии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ДокСФ
		|		ПО
		|			ДокПартии.Ссылка = ДокСФ.Ссылка
		|			И ДокПартии.Ключ = ДокСФ.Ключ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_Счета КАК ВТ_Счета
		|		ПО ДокПартии.СчетУчета = ВТ_Счета.СчетУчета
		|ГДЕ
		|	ДокПартии.Ссылка = &Ссылка
		|		И ВТ_Счета.ЕстьСубконтоНоменклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокПартии.НомерСтроки
		|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатации(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СпецодеждаИСпецоснасткаВЭксплуатации"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаПР КАК СуммаПР,
	|	Док.СуммаВР КАК СуммаВР,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС КАК ВалютныйНДС,
	|	Док.Оплачен КАК Оплачен,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Док.Валюта КАК Валюта,
	|	Док.СпецМатериалНазначениеИспользования КАК СпецМатериалНазначениеИспользования,
	|	Док.СпецМатериалПартияМатериалаВЭксплуатации КАК СпецМатериалПартияМатериалаВЭксплуатации,
	|	Док.СпецМатериалПодразделениеФизЛицо КАК СпецМатериалПодразделениеФизЛицо,
	|	Док.СпецМатериалПервоначальнаяСтоимость КАК СпецМатериалПервоначальнаяСтоимость,
	|	Док.СпецМатериалПервоначальнаяСтоимостьНУ КАК СпецМатериалПервоначальнаяСтоимостьНУ,
	|	Док.СпецМатериалПервоначальнаяСтоимостьПР КАК СпецМатериалПервоначальнаяСтоимостьПР,
	|	Док.СпецМатериалПервоначальнаяСтоимостьВР КАК СпецМатериалПервоначальнаяСтоимостьВР,
	|	Док.Ключ КАК Ключ,
	|	Док.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.Номенклатура.Услуга КАК Услуга
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СпецодеждаИСпецоснасткаВЭксплуатации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатацииНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаСпецодеждаИСпецоснасткаВЭксплуатацииНДС", НомераТаблиц.Количество());

	ТекстЗапроса = "
		|/////////////////////////////////////////////////////////////////////////////////////
		|// Строки со счетом учета с субконто Партия, другие счета не должны попадать
		|ВЫБРАТЬ
		|	""МПЗВЭксплуатации""                     КАК ИмяСписка,
		|	ДокПартии.Ссылка.Организация             КАК Организация,
		|	ДокПартии.Номенклатура                   КАК Номенклатура,
		|	ДокПартии.СчетУчета                      КАК СчетУчета,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ИСТИНА                                   КАК ЕстьСубконтоПартии,
		|	ИСТИНА                                   КАК ЕстьСубконтоСклады,
		|	ДокПартии.Партия                         КАК Партия,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад, // У материалов в эксплуатации склада нет
		|	ВЫБОР
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			0
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности НЕ В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			ДокСФ.Количество
		|		ИНАЧЕ
		|			ДокПартии.Количество
		|	КОНЕЦ                      КАК Количество,
		|	ДокСФ.СчетФактура          КАК СчетФактура,          // Может быть NULL
		|	ДокСФ.ВидЦенности          КАК ВидЦенности,          // Может быть NULL
		|	ДокСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость, // Может быть NULL
		|	ДокСФ.СпособУчетаНДС       КАК СпособУчетаНДС,		 // Может быть NULL
		|	ДокСФ.СуммаБезНДС          КАК СуммаБезНДС,			 // Может быть NULL
		|	ДокСФ.Стоимость            КАК Стоимость,            // Может быть NULL
		|	ДокСФ.СчетУчетаНДС         КАК СчетУчетаНДС,         // Может быть NULL
		|	ДокСФ.СтавкаНДС            КАК СтавкаНДС,            // Может быть NULL
		|	ДокСФ.НДС                  КАК НДС                   // Может быть NULL
		|ИЗ
		|	Документ.ВводНачальныхОстатков.СпецодеждаИСпецоснасткаВЭксплуатации КАК ДокПартии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ДокСФ
		|		ПО
		|			ДокПартии.Ссылка = ДокСФ.Ссылка
		|			И ДокПартии.Ключ = ДокСФ.Ключ
		|
		|ГДЕ
		|	ДокПартии.Ссылка = &Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	ДокПартии.НомерСтроки
		|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаМатериалыПереданныеВПереработку(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаМатериалыПереданныеВПереработку", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МатериалыПереданныеВПереработку"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаПР КАК СуммаПР,
	|	Док.СуммаВР КАК СуммаВР,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС КАК ВалютныйНДС,
	|	Док.Оплачен КАК Оплачен,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Док.Контрагент КАК Контрагент,
	|	Док.Валюта КАК Валюта,
	|	Док.ПараметрыСпецматериала КАК ПараметрыСпецматериала,
	|	Док.СпособСтроительства КАК СпособСтроительства,
	|	Док.ТорговаяНаценка КАК ТорговаяНаценка,
	|	Док.Ключ КАК Ключ,
	|	Док.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.Номенклатура.Услуга КАК Услуга
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МатериалыПереданныеВПереработку КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаМатериалыПереданныеВПереработкуНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаМатериалыПереданныеВПереработкуНДС", НомераТаблиц.Количество());

	ТекстЗапроса = "ВЫБРАТЬ
	               |	""МПЗВПереработке"" КАК ИмяСписка,
	               |	ДокПартии.Ссылка.Организация КАК Организация,
	               |	ДокПартии.Номенклатура КАК Номенклатура,
	               |	ДокПартии.Контрагент КАК Контрагент,
	               |	ДокПартии.СчетУчета КАК СчетУчета,
	               |	ВТ_Счета.ЕстьСубконтоПартии КАК ЕстьСубконтоПартии,
	               |	ВТ_Счета.ЕстьСубконтоСклады КАК ЕстьСубконтоСклады,
	               |	ДокПартии.Партия КАК Партия,
	               |	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	               |	ВЫБОР
	               |		КОГДА НЕ ДокСФ.Ключ ЕСТЬ NULL 
	               |				И ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)
	               |			ТОГДА 0
	               |		КОГДА НЕ ДокСФ.Ключ ЕСТЬ NULL 
	               |				И НЕ ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)
	               |			ТОГДА ДокСФ.Количество
	               |		ИНАЧЕ ДокПартии.Количество
	               |	КОНЕЦ КАК Количество,
	               |	ДокСФ.СчетФактура КАК СчетФактура,
	               |	ДокСФ.ВидЦенности КАК ВидЦенности,
	               |	ДокСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	               |	ДокСФ.СпособУчетаНДС КАК СпособУчетаНДС,
	               |	ДокСФ.СуммаБезНДС КАК СуммаБезНДС,
	               |	ДокСФ.Стоимость КАК Стоимость,
	               |	ДокСФ.СчетУчетаНДС КАК СчетУчетаНДС,
	               |	ДокСФ.СтавкаНДС КАК СтавкаНДС,
	               |	ДокСФ.НДС КАК НДС
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.МатериалыПереданныеВПереработку КАК ДокПартии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ДокСФ
	               |		ПО ДокПартии.Ссылка = ДокСФ.Ссылка
	               |			И ДокПартии.Ключ = ДокСФ.Ключ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета
	               |		ПО ДокПартии.СчетУчета = ВТ_Счета.СчетУчета
	               |ГДЕ
	               |	ДокПартии.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокПартии.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыВРозничнойТорговлеАТТ(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаТоварыВРозничнойТорговлеАТТ", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТоварыВРозничнойТорговлеАТТ"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.СуммаНУ КАК СуммаНУ,
	|	Док.СуммаПР КАК СуммаПР,
	|	Док.СуммаВР КАК СуммаВР,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС КАК ВалютныйНДС,
	|	Док.Оплачен КАК Оплачен,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Док.Контрагент КАК Контрагент,
	|	Док.Валюта КАК Валюта,
	|	Док.ТорговаяНаценка КАК ТорговаяНаценка,
	|	Док.Ключ КАК Ключ,
	|	Док.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.Номенклатура.Услуга КАК Услуга
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ТоварыВРозничнойТорговлеАТТ КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыВРозничнойТорговлеАТТНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаТоварыВРозничнойТорговлеАТТНДС", НомераТаблиц.Количество());

	ТекстЗапроса = "
		|/////////////////////////////////////////////////////////////////////////////////////
		|// Строки со счетом учета с субконто Партия, другие счета не должны попадать
		|ВЫБРАТЬ
		|	""МПЗВРозницеАТТ""                       КАК ИмяСписка,
		|	ДокПартии.Ссылка.Организация             КАК Организация,
		|	ДокПартии.Номенклатура                   КАК Номенклатура,
		|	ДокПартии.СчетУчета                      КАК СчетУчета,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ВТ_Счета.ЕстьСубконтоПартии              КАК ЕстьСубконтоПартии,
		|	ВТ_Счета.ЕстьСубконтоСклады              КАК ЕстьСубконтоСклады,
		|	ДокПартии.Партия                         КАК Партия,
	    |	ВЫБОР
	    |		КОГДА ВТ_Счета.ЕстьСубконтоСклады
	    |			ТОГДА ДокПартии.Склад
	    |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	    |	КОНЕЦ                                     КАК Склад,
		|	ВЫБОР
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			0
		|		КОГДА (НЕ ДокСФ.Ключ ЕСТЬ NULL) И (ДокСФ.ВидЦенности НЕ В (&СписокВидовЦенностейУслуги)) ТОГДА
		|			ДокСФ.Количество
		|		ИНАЧЕ
		|			ДокПартии.Количество
		|	КОНЕЦ                      КАК Количество,
		|	ДокСФ.СчетФактура          КАК СчетФактура,          // Может быть NULL
		|	ДокСФ.ВидЦенности          КАК ВидЦенности,          // Может быть NULL
		|	ДокСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость, // Может быть NULL
		|	ДокСФ.СпособУчетаНДС       КАК СпособУчетаНДС,		 // Может быть NULL
		|	ДокСФ.СуммаБезНДС          КАК СуммаБезНДС,			 // Может быть NULL
		|	ДокСФ.Стоимость            КАК Стоимость,            // Может быть NULL
		|	ДокСФ.СчетУчетаНДС         КАК СчетУчетаНДС,         // Может быть NULL
		|	ДокСФ.СтавкаНДС            КАК СтавкаНДС,            // Может быть NULL
		|	ДокСФ.НДС                  КАК НДС                   // Может быть NULL
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ТоварыВРозничнойТорговлеАТТ КАК ДокПартии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ДокСФ
		|		ПО
		|			ДокПартии.Ссылка = ДокСФ.Ссылка
		|			И ДокПартии.Ключ = ДокСФ.Ключ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_Счета КАК ВТ_Счета
		|		ПО ДокПартии.СчетУчета = ВТ_Счета.СчетУчета
		|ГДЕ
		|	ДокПартии.Ссылка = &Ссылка
		|	И ВТ_Счета.ЕстьСубконтоПартии
		|УПОРЯДОЧИТЬ ПО
		|	ДокПартии.НомерСтроки
		|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыВРозничнойТорговлеНТТ(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаТоварыВРозничнойТорговлеНТТ", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТоварыВРозничнойТорговлеНТТ"" КАК ИмяСписка,
	|	Док.Ссылка                      КАК Регистратор,
	|	&Период                         КАК Период,
	|	Док.НомерСтроки                 КАК НомерСтроки,
	|	Док.СчетУчета                   КАК СчетУчета,
	|	Док.Склад                       КАК Склад,
	|	Док.Количество                  КАК Количество,
	|	Док.Сумма                       КАК Сумма,
	|	Док.Сумма                       КАК СуммаНУ,
	|	0                               КАК СуммаПР,
	|	0                               КАК СуммаВР,
	|	Док.СтавкаНДС                   КАК СтавкаНДС,
	|	Док.НДС                         КАК НДС,
	|	Док.НДСВключенВстоимость        КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма               КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС                 КАК ВалютныйНДС,
	|	Док.Оплачен                     КАК Оплачен,
	|	Док.РасчетныйДокумент           КАК РасчетныйДокумент,	
	|	Док.Валюта                      КАК Валюта,
	|	Док.ТорговаяНаценка             КАК ТорговаяНаценка,
	|	Док.Ключ                        КАК Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ТоварыВРозничнойТорговлеНТТ КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаДанныеПоНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДанныеПоНДСПоПриобретеннымЦенностям", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДанныеПоНДСПоРеализации", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДанныеПоНДСПоАвансам", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТаблицаДанныеПоНДС"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета,
	|	Док.СтавкаНДС,
	|	Док.ВидЦенности,
	|	Док.Контрагент,
	|	Док.ДоговорКонтрагента,
	|	Док.СчетФактура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	Док.ПредъявленСФ,
	|	Док.СуммаБезНДС,
	|	Док.НДС,
	|	Док.СуммаБезНДСОплата,
	|	Док.НДСОплата,
	|	Док.СуммаБезНДСВключеноВСтоимость,
	|	Док.НДСВключеноВСтоимость,
	|	Док.СуммаБезНДССтавка0,
	|	Док.НДССтавка0,
	|	Док.СуммаБезНДСПредъявлено,
	|	Док.НДСПредъявлено,
	|	Док.СуммаБезНДСПредъявлено0,
	|	Док.НДСПредъявлено0,
	|	Док.ВалютаАванса,
	|	Док.ВалютнаяСуммаСНДС,
	|	Док.СуммаБезНДСПодтверждено0,
	|	Док.НДСПодтверждено0,
	|	Док.СуммаБезНДСНеПодтверждено0,
	|	Док.НДСНеПодтверждено0,
	|	Док.СуммаБезНДСПредъявленоНеПодтверждено0,
	|	Док.НДСПредъявленоНеПодтверждено0,
	|	Док.ДокументОтгрузки,
	|	Док.ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовДокументОплаты.Дата
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОплаты,
	|	Док.ДатаСФ,
	|	Док.НомерСФ,
	|	Док.СтавкаНДСНеПодтверждена0,
	|	Док.СчетФактураДокумент,
	|	Док.Исправление,
	|	Док.НомерИсправления,
	|	Док.ДатаИсправления,
	|	Док.КорректировочныйСчетФактура,
	|	Док.НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента
	|ПОМЕСТИТЬ ТаблицаДанныеПоНДС
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|	ПО Док.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|		И ДанныеПервичныхДокументовСчетФактура.Организация = &Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОплаты
	|	ПО Док.ДокументОплаты = ДанныеПервичныхДокументовДокументОплаты.Документ
	|		И ДанныеПервичныхДокументовДокументОплаты.Организация = &Организация
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаДанныеПоНДСПоПриобретеннымЦенностям"" КАК ИмяСписка,
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	СУММА(ТаблицаДанныеПоНДС.НДС) КАК НДС,
	|	СУММА(ТаблицаДанныеПоНДС.НДСОплата) КАК НДСОплата,
	|	СУММА(ТаблицаДанныеПоНДС.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	|	СУММА(ТаблицаДанныеПоНДС.НДССтавка0) КАК НДССтавка0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(ТаблицаДанныеПоНДС.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	ТаблицаДанныеПоНДС.НДССтавка0 - ТаблицаДанныеПоНДС.НДСПредъявлено0 КАК НДСНаСчет0,
	|	СУММА(ТаблицаДанныеПоНДС.НДС - ТаблицаДанныеПоНДС.НДСВключеноВСтоимость - ТаблицаДанныеПоНДС.НДСПредъявлено - ТаблицаДанныеПоНДС.НДССтавка0) КАК НДСНаСчетУчета,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументОтгрузкиДата,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.СчетУчета КАК СчетУчетаНДС,
	|	&Период КАК ДатаСобытия,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	ТаблицаДанныеПоНДС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	&Период КАК Период,
	|	ТаблицаДанныеПоНДС.ДатаОплаты КАК ДатаОплаты,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления,
	|	ТаблицаДанныеПоНДС.КорректировочныйСчетФактура,
	|	ТаблицаДанныеПоНДС.НомерИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.УчитыватьИсправлениеИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.НомерИсправленияИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	ТаблицаДанныеПоНДС КАК ТаблицаДанныеПоНДС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОтгрузки
	|	ПО ТаблицаДанныеПоНДС.ДокументОтгрузки = ДанныеПервичныхДокументовДокументОтгрузки.Документ
	|		И ДанныеПервичныхДокументовДокументОтгрузки.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.СчетУчета,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	ТаблицаДанныеПоНДС.НомерСтроки,
	|	ТаблицаДанныеПоНДС.НДССтавка0 - ТаблицаДанныеПоНДС.НДСПредъявлено0,
	|	ТаблицаДанныеПоНДС.ДатаОплаты,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления,
	|	ТаблицаДанныеПоНДС.КорректировочныйСчетФактура,
	|	ТаблицаДанныеПоНДС.НомерИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.УчитыватьИсправлениеИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.НомерИсправленияИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсправленияИсходногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаДанныеПоНДСПоРеализации"" КАК ИмяСписка,
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	СУММА(ТаблицаДанныеПоНДС.НДС) КАК НДС,
	|	СУММА(ТаблицаДанныеПоНДС.НДСОплата) КАК НДСОплата,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	ТаблицаДанныеПоНДС.ДатаОплаты,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(ТаблицаДанныеПоНДС.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	&Период КАК ДатаСобытия,
	|	ТаблицаДанныеПоНДС.СтавкаНДСНеПодтверждена0,
	|	ТаблицаДанныеПоНДС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	&Период КАК Период,
	|	ТаблицаДанныеПоНДС.НДС КАК НДСНаСчетУчета,
	|	0 КАК НДСКВычету,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления,
	|	ТаблицаДанныеПоНДС.КорректировочныйСчетФактура,
	|	ТаблицаДанныеПоНДС.НомерИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.УчитыватьИсправлениеИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.НомерИсправленияИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	ТаблицаДанныеПоНДС КАК ТаблицаДанныеПоНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	ТаблицаДанныеПоНДС.ДатаОплаты,
	|	ТаблицаДанныеПоНДС.СтавкаНДСНеПодтверждена0,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	ТаблицаДанныеПоНДС.НомерСтроки,
	|	ТаблицаДанныеПоНДС.НДС,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления,
	|	ТаблицаДанныеПоНДС.КорректировочныйСчетФактура,
	|	ТаблицаДанныеПоНДС.НомерИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.УчитыватьИсправлениеИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.НомерИсправленияИсходногоДокумента,
	|	ТаблицаДанныеПоНДС.ДатаИсправленияИсходногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаДанныеПоНДСПоАвансам"" КАК ИмяСписка,
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	СУММА(ТаблицаДанныеПоНДС.НДС) КАК НДС,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДС) КАК СуммаБезНДС,
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.СчетУчета КАК СчетУчетаНДС,
	|	СУММА(ТаблицаДанныеПоНДС.НДСОплата) КАК НДСОплата,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	СУММА(ТаблицаДанныеПоНДС.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	|	СУММА(ТаблицаДанныеПоНДС.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	|	ТаблицаДанныеПоНДС.ВалютаАванса,
	|	СУММА(ТаблицаДанныеПоНДС.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	ТаблицаДанныеПоНДС.ДатаОплаты КАК ДатаОплаты,
	|	&Период КАК ДатаСобытия,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДанныеПоНДС.ВалютнаяСуммаСНДС = 0
	|				ТОГДА 1
	|			ИНАЧЕ (ТаблицаДанныеПоНДС.СуммаБезНДС + ТаблицаДанныеПоНДС.НДС) / ТаблицаДанныеПоНДС.ВалютнаяСуммаСНДС
	|		КОНЕЦ) КАК КурсАванса,
	|	ТаблицаДанныеПоНДС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	&Период КАК Период,
	|	ТаблицаДанныеПоНДС.НДС КАК НДСНаСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаДанныеПоНДС.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0)
	|			ТОГДА ТаблицаДанныеПоНДС.НДСПредъявлено0 + ТаблицаДанныеПоНДС.НДСПредъявленоНеПодтверждено0
	|		ИНАЧЕ ТаблицаДанныеПоНДС.НДСОплата
	|	КОНЕЦ КАК НДСКВычету,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления
	|ИЗ
	|	ТаблицаДанныеПоНДС КАК ТаблицаДанныеПоНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныеПоНДС.Контрагент,
	|	ТаблицаДанныеПоНДС.ДоговорКонтрагента,
	|	ТаблицаДанныеПоНДС.ВидЦенности,
	|	ТаблицаДанныеПоНДС.СтавкаНДС,
	|	ТаблицаДанныеПоНДС.СчетУчета,
	|	ТаблицаДанныеПоНДС.ВалютаАванса,
	|	ТаблицаДанныеПоНДС.СчетФактура,
	|	ТаблицаДанныеПоНДС.СчетФактураДата,
	|	ТаблицаДанныеПоНДС.ДокументОтгрузки,
	|	ТаблицаДанныеПоНДС.ДокументОплаты,
	|	ТаблицаДанныеПоНДС.ДатаОплаты,
	|	ТаблицаДанныеПоНДС.Регистратор,
	|	ТаблицаДанныеПоНДС.НомерСтроки,
	|	ТаблицаДанныеПоНДС.НДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДанныеПоНДС.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0)
	|			ТОГДА ТаблицаДанныеПоНДС.НДСПредъявлено0 + ТаблицаДанныеПоНДС.НДСПредъявленоНеПодтверждено0
	|		ИНАЧЕ ТаблицаДанныеПоНДС.НДСОплата
	|	КОНЕЦ,
	|	ТаблицаДанныеПоНДС.Исправление,
	|	ТаблицаДанныеПоНДС.НомерИсправления,
	|	ТаблицаДанныеПоНДС.ДатаИсправления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыСПерсоналом(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		Возврат "";
	КонецЕсли;

	МассивСчетов = Новый Массив;

	НомераТаблиц.Вставить("ТаблицаРасчетыПоЗаработнойПлате", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДепонентов", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТаблицаРасчетыПоЗаработнойПлате"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА &УчетЗарплатысредствамиБП
	|			ТОГДА Док.Сотрудник.ФизическоеЛицо
	|		ИНАЧЕ Док.РаботникОрганизации
	|	КОНЕЦ КАК РаботникОрганизации,
	|	Док.ВидНачисления КАК ВидНачисления,
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.ХарактерДеятельности КАК ХарактерДеятельности,
	|	Док.Сумма КАК Сумма,
	|	Док.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Док.ОтражениеВУСН КАК ОтражениеВУСН,
	|	Док.Ведомость КАК Ведомость,
	|	Док.ПериодРегистрации КАК ПериодРегистрации,
	|	Док.ВидУдержания КАК ВидУдержания,
	|	Док.СуммаПодлежитУдержанию КАК СуммаПодлежитУдержанию,
	|	Док.Получатель КАК Получатель
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ТаблицаДепонентов"" КАК ИмяСписка,
	|	&Период КАК Дата,
	|	Док.Ссылка КАК Регистратор,
	|	Док.Ссылка.Организация КАК Организация,
	|	Док.Ведомость КАК Ведомость,
	|	ВЫБОР
	|		КОГДА &УчетЗарплатысредствамиБП
	|			ТОГДА Док.Сотрудник.ФизическоеЛицо
	|		ИНАЧЕ Док.РаботникОрганизации
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	Док.Сумма КАК Сумма,
	|	Док.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И НЕ Док.СчетУчета В (&СчетаЗарплаты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНоменклатураНаСкладеУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаНоменклатураНаСкладеУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""НоменклатураНаСкладе"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	Док.Партия,
	|	Док.Партия.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяУСНДоходыМинусРасходы
	|				И Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.ВПереработке)
	|		КОГДА &ПрименяетсяУСНДоходыМинусРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные)
	|		ИНАЧЕ Док.СтатусыПартийУСН
	|	КОНЕЦ КАК СтатусыПартийУСН,
	|	Док.РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ КАК Сумма,
	|	Док.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.НоменклатураНаСкладе КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И НЕ Док.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.КапитальныеВложения)
	|	И НЕ Док.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыВРозничнойТорговлеАТТ"",
	|	Док.Ссылка,
	|	&Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.Номенклатура,
	|	Док.Партия,
	|	Док.Партия.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяУСНДоходыМинусРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные)
	|		ИНАЧЕ Док.СтатусыПартийУСН
	|	КОНЕЦ,
	|	Док.РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ,
	|	Док.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ТоварыВРозничнойТорговлеАТТ КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	Док.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСпецодеждаИСпецоснасткаВЭксплуатацииУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаСпецодеждаИСпецоснасткаВЭксплуатацииУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СпецодеждаИСпецоснасткаВЭксплуатации"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	ВЫБОР
	|		КОГДА Док.СтатусыОплатыРасходовУСН = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеОплачено)
	|			ТОГДА Док.СпецМатериалПартияМатериалаВЭксплуатации
	|		ИНАЧЕ Док.Партия
	|	КОНЕЦ КАК Партия,
	|	Док.Партия.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Док.СтатусыПартийУСН КАК СтатусыПартийУСН,
	|	Док.РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ КАК Сумма,
	|	Док.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СпецодеждаИСпецоснасткаВЭксплуатации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаМатериалыПереданныеВПереработкуУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаМатериалыПереданныеВПереработкуУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МатериалыПереданныеВПереработку"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	Док.Партия,
	|	Док.Партия.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяУСНДоходыМинусРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.ВПереработке)
	|		ИНАЧЕ Док.СтатусыПартийУСН
	|	КОНЕЦ КАК СтатусыПартийУСН,
	|	Док.РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ КАК Сумма,
	|	Док.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МатериалыПереданныеВПереработку КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыОтгруженныеУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТоварыОтгруженныеУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗОтгруженные"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	Док.Партия,
	|	ВЫБОР
	|		КОГДА Док.Поставщик ССЫЛКА Справочник.ФизическиеЛица
	|				И Док.Поставщик <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Док.Поставщик
	|		ИНАЧЕ ЕСТЬNULL(Док.Партия.ДоговорКонтрагента, ЕСТЬNULL(Док.Партия.ФизЛицо, ЕСТЬNULL(Док.Партия.Контрагент, НЕОПРЕДЕЛЕНО)))
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяУСНДоходыМинусРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.НаРеализации)
	|		ИНАЧЕ Док.СтатусыПартийУСН
	|	КОНЕЦ КАК СтатусыПартийУСН,
	|	Док.Партия КАК РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН КАК ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ КАК Сумма,
	|	Док.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыОтгруженныеИП(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТоварыОтгруженныеИП", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗОтгруженные""           КАК ИмяСписка,
	|	Док.Ссылка                   КАК Регистратор,
	|	&Период                      КАК Период,
	|	Док.НомерСтроки              КАК НомерСтроки,
	|	Док.СчетУчета                КАК СчетУчета,
	|	Док.Номенклатура             КАК Номенклатура,
	|	Док.ВидМПЗ                   КАК ВидМПЗ,
	|	Док.НоменклатурнаяГруппа     КАК НоменклатурнаяГруппа,
	|	Док.Покупатель               КАК Покупатель,
	|	Док.ДоговорПокупателя        КАК ДоговорПокупателя,
	|	Док.ХарактерДеятельности     КАК ХарактерДеятельности,
	|	Док.ДокументОтгрузки         КАК ДокументОтгрузки,
	|	Док.Оплачен                  КАК Оплачен,	
	|	Док.Поставщик                КАК Поставщик,
	|	Док.ДоговорПоставщика        КАК ДоговорПоставщика,
	|	Док.Партия                   КАК Партия,
	|	Док.Количество               КАК Количество,
	|	Док.Сумма                    КАК Сумма,
	|	0                            КАК СуммаКт,
	|	Док.НДС                      КАК НДС,
	|	Док.НДСВключенВстоимость     КАК НДСВключенВстоимость,
	|	Док.ВалютнаяСумма            КАК ВалютнаяСумма,
	|	Док.ВалютныйНДС              КАК ВалютныйНДС,
	|	Док.Валюта                   КАК Валюта,
	|	Док.Ключ                     КАК Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости)
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасходыБудущихПериодовУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаРасходыБудущихПериодовУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасходыБудущихПериодов"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Док.Субконто1) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Док.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(Док.Субконто2) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Док.Субконто2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ КАК ЭлементРасхода,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Док.Контрагент) = ТИП(Справочник.ФизическиеЛица)
	|			ТОГДА Док.Контрагент
	|		ИНАЧЕ Док.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	Док.РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК СтатусыПартийУСН,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	0 КАК Количество,
	|	Док.Валюта,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.ВалютнаяСумма - Док.ВалютныйНДС
	|		ИНАЧЕ Док.ВалютнаяСумма
	|	КОНЕЦ КАК Сумма,
	|	Док.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасходыБудущихПериодов КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыСПодотчетнымиЛицамиУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаРасчетыСПодотчетнымиЛицамиУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыСПодотчетнымиЛицами"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.РаботникОрганизации КАК Контрагент,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА Док.СуммаКт <> 0
	|			ТОГДА Док.СуммаКт
	|		ИНАЧЕ Док.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА Док.СуммаКт <> 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетнымиЛицами КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыПоНалогамИСборамУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаРасчетыПоНалогамИСборамВзаиморасчетыУСН", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРасчетыПоНалогамИСборамРасходыУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыПоНалогамИСборам"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Док.СчетУчета КАК ДоговорКонтрагента,
	|	Док.Ссылка КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА Док.СуммаКт <> 0
	|			ТОГДА Док.СуммаКт
	|		ИНАЧЕ Док.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА Док.СуммаКт <> 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА Док.СуммаКт = 0
	|					И Док.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И Док.СчетУчета В ИЕРАРХИИ(&МассивСчетовУчетаНалоговУСН)
	|	И Док.ВидПлатежаВБюджет В (&МассивВидыПлатежейВГосБюджет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""РасчетыПоНалогамИСборам"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	Док.ОтражениеВУСН,
	|	Док.Ссылка КАК РасчетныйДокумент,
	|	Док.СуммаКт КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Налоги) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеОплачено) КАК СтатусыОплатыРасходовУСН,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементРасхода,
	|	НЕОПРЕДЕЛЕНО КАК СтатусыПартийУСН,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	0 КАК Количество,
	|	0 КАК НДС
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.СуммаКт <> 0
	|	И Док.СчетУчета В ИЕРАРХИИ(&МассивСчетовУчетаНалоговУСН)
	|	И Док.ВидПлатежаВБюджет В(&МассивВидыПлатежейВГосБюджет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыПоЗаработнойПлатеУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаРасчетыПоЗаработнойПлатеВзаиморасчетыУСН", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРасчетыПоЗаработнойПлатеРасходыУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РасчетыПоЗаработнойПлате"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	ЕСТЬNULL(Док.Сотрудник.ФизическоеЛицо, Док.РаботникОрганизации) КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	Док.Ссылка КАК РасчетныйДокумент,
	|	Док.Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""РасчетыПоЗаработнойПлате"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.СчетУчета,
	|	ЕСТЬNULL(Док.Сотрудник.ФизическоеЛицо, Док.РаботникОрганизации) КАК ЭлементРасхода,
	|	Док.ОтражениеВУСН,
	|	Док.Сумма,
	|	Док.Ссылка КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Зарплата) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеОплачено) КАК СтатусыОплатыРасходовУСН,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК СтатусыПартийУСН,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	0 КАК Количество,
	|	0 КАК НДС
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сумма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаМПЗРеализованныеУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("МПЗРеализованныеУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗОтгруженные"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета В (&СчетаМатериалов)
	|			ТОГДА Док.ДокументОприходования
	|		ИНАЧЕ Док.РасчетныйДокумент
	|	КОНЕЦ КАК Партия,
	|	Док.СчетУчета,
	|	Док.Контрагент,
	|	Док.ДоговорКонтрагента,
	|	Док.СтатусыПартийУСН,
	|	ВЫБОР
	|		КОГДА НЕ Док.СчетУчета В (&СчетаМатериалов)
	|			ТОГДА Док.ДокументОприходования
	|		ИНАЧЕ Док.РасчетныйДокумент
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.Сумма - Док.НДС
	|		ИНАЧЕ Док.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Док.НДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗРеализованныеУСН КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаУслугиУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("УслугиУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗОтгруженные"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.Номенклатура КАК ЭлементРасхода,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Док.ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК СтатусыПартийУСН,
	|	Док.РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеОплачено) КАК СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	0 КАК Количество,
	|	ВЫБОР
	|		КОГДА &ВыделятьНДСУСН
	|			ТОГДА Док.Сумма - Док.НДС
	|		ИНАЧЕ Док.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Док.НДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.УслугиУСН КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДопРасходыУСН(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ДопРасходыУСН", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДопРасходыУСН"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки,
	|	Док.ДокументОприходования КАК Партия,
	|	Док.СпособРаспределения,
	|	Док.Контрагент,
	|	Док.ДоговорКонтрагента,
	|	Док.РасчетныйДокумент,
	|	Док.СтатусыОплатыРасходовУСН,
	|	Док.ОтражениеВУСН,
	|	Док.Валюта,
	|	Док.Сумма,
	|	Док.НДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходы) КАК ВидРасхода
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДопРасходыУСН КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСчетаФактуры(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаДанныеПоСчетамФактурам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТаблицаДанныеПоСчетамФактурам"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	Док.ДатаСФ КАК ДатаСФ,
	|	Док.НомерСФ КАК НомерСФ,
	|	Док.СчетФактураДокумент КАК СчетФактураДокумент,
	|	Док.Исправление КАК Исправление,
	|	Док.НомерИсправления КАК НомерИсправления,
	|	Док.ДатаИсправления КАК ДатаИсправления,
	|	Док.КорректировочныйСчетФактура КАК КорректировочныйСчетФактура,
	|	Док.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам)
	|				И (Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|					ИЛИ Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|			ТОГДА Док.Продавец
	|		ИНАЧЕ Док.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам)
	|				И (Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|					ИЛИ Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ Док.Продавец
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА Док.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|	КОНЕЦ КАК ЧастьЖурнала,
	|	МИНИМУМ(Док.НомерСтроки - 1) КАК ИндексСтроки,
	|	ВЫБОР
	|		КОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Док.КодВидаОперации КАК КодВидаОперации,
	|	СУММА(ВЫБОР
	|			КОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|					И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА Док.СуммаБезНДСВал + Док.НДСВал
	|			ИНАЧЕ Док.СуммаБезНДС + Док.НДС
	|		КОНЕЦ) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫБОР
	|			КОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|					И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА Док.НДСВал
	|			ИНАЧЕ Док.НДС
	|		КОНЕЦ) КАК СуммаНДС
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.СчетФактураДокумент <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И НЕ Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА Док.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ,
	|	Док.КодВидаОперации,
	|	Док.ДатаИсправленияИсходногоДокумента,
	|	Док.Ссылка,
	|	Док.ДатаСФ,
	|	Док.НомерСФ,
	|	Док.СчетФактураДокумент,
	|	Док.Исправление,
	|	Док.ДатаИсправления,
	|	Док.КорректировочныйСчетФактура,
	|	Док.НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента,
	|	Док.УчитыватьИсправлениеИсходногоДокумента,
	|	Док.НомерИсправления,
	|	Док.НомерИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА Док.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам)
	|				И (Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|					ИЛИ Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|			ТОГДА Док.Продавец
	|		ИНАЧЕ Док.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Док.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам)
	|				И (Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|					ИЛИ Док.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ Док.Продавец
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтроки";

		Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

	КонецФункции

Функция ТекстЗапросаОбороты(НомераТаблиц, Реквизиты)

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП
		И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ТаблицаОбороты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ТаблицаОбороты"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ВидМПЗ КАК ВидМПЗ,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.Ключ КАК Ключ	
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Обороты КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";

		Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

	КонецФункции
	
Функция ТекстЗапросаМПЗРеализованныеИП(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("МПЗРеализованныеИП", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""МПЗРеализованныеИП"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ВидМПЗ КАК ВидМПЗ,
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.ХарактерДеятельности КАК ХарактерДеятельности,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.Собственный КАК Собственный,
	|	Док.СтатусыОплатыРасходовИП КАК СтатусыОплатыРасходовИП,
	|	Док.Выручка КАК Выручка,
	|	Док.НДСНачисленный КАК НДСНачисленный,
	|	Док.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Док.Услуга КАК Услуга,
	|	Док.Ключ КАК Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрочиеРасходыИП(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ПрочиеРасходыИП", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПрочиеРасходыИП"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.ВидМПЗ КАК ВидМПЗ,
	|	Док.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Док.Партия КАК Партия,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.ХарактерДеятельности КАК ХарактерДеятельности
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрочиеРасходыИП КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДопРасходыИП(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ДопРасходыИП", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДопРасходыИП"" КАК ИмяСписка,
	|	Док.Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Док.Партия КАК Партия,
	|	Док.Оплачен КАК Оплачен,
	|	Док.МПЗ КАК МПЗ,
	|	Док.ПартияМПЗ КАК ПартияМПЗ,
	|	Док.Количество КАК Количество,
	|	Док.Сумма КАК Сумма,
	|	Док.НДС КАК НДС,
	|	Док.НДСВключенВстоимость КАК НДСВключенВстоимость
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДопРасходыИП КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ЭтоРасчетыСКонтрагентами = Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами;

	Если НЕ ЭтоРасчетыСКонтрагентами
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период + 86400) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Док.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	&Период КАК Дата
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ЭтоОстаткиПоНоменклатуре = Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные;

	Если НЕ ЭтоОстаткиПоНоменклатуре
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период + 86400) Тогда
		ПараметрыПроведения.Вставить("ТоварыРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания
	|ИЗ
	|	Документ.ВводНачальныхОстатков.НоменклатураНаСкладе КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СпецодеждаИСпецоснасткаВЭксплуатации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МатериалыПереданныеВПереработку КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ
//

// ДВИЖЕНИЯ ПО ПОДОТЧЕТНЫМ ЛИЦАМ

Функция ПодготовитьПараметрыПроведенияРасчетыСПодотчетнымиЛицами(
			ТаблицаРасчетыСПодотчетнымиЛицами,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыСПодотчетнымиЛицами

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"           // <Строка,0> - имя списка в документе
	+ "Регистратор,"         // <ДокументСсылка>
	+ "Период,"              // <Дата>
	+ "НомерСтроки,"         // <Число>
	+ "СчетУчета,"           // <План счетов бухгалтерского учета>
	+ "РаботникОрганизации," // <СправочникСсылка.Физическое лицо>
	+ "Сумма,"               // <Число (15,2)>
	+ "Валюта,"              // <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"       // <Число (15,2)>
	+ "РасчетныйДокумент,"   // <ДокументСсылка>
	+ "СуммаКт";             // <Число (15,2)>

	Параметры.Вставить("ТаблицаРасчетыСПодотчетнымиЛицами",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыСПодотчетнымиЛицами, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыСПодотчетнымиЛицами(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		Возврат
	КонецЕсли;

	ТаблицаРасчетыСПодотчетнымиЛицами = ПараметрыПроведения.ТаблицаРасчетыСПодотчетнымиЛицами;

	Если ТаблицаРасчетыСПодотчетнымиЛицами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведенияРасчетыСПодотчетнымиЛицами(
		ТаблицаРасчетыСПодотчетнымиЛицами,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьВБухгалтерскомУчете
		ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыСПодотчетнымиЛицами Цикл
			
			Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.СуммаКт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыССотрудниками(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока);
			Если НЕ Проводка = Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "РаботникиОрганизаций", ТекущаяСтрока["РаботникОрганизации"]);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ ПО КОНТРАГЕНТАМ

Функция ПодготовитьПараметрыПроведенияРасчетыСКонтрагентами(
			ТаблицаРасчетыСКонтрагентами,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыСКонтрагентами

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"               // <Строка,0> - имя списка в документе
	+ "Регистратор,"             // <ДокументСсылка>
	+ "Период,"                  // <Дата>
	+ "НомерСтроки,"             // <Число>
	+ "СчетУчета,"               // <План счетов бухгалтерского учета>
	+ "СчетУчетаВалютный,"       // <Булево>
	+ "Контрагент,"              // <СправочникСсылка.Контрагент>
	+ "ДоговорКонтрагента,"      // <СправочникСсылка.Договор контрагента>
	+ "Документ,"                // <ДокументСсылка>
	+ "КратностьВзаиморасчетов," // <Число (10,0)>
	+ "КурсВзаиморасчетов,"      // <Число (10,4)>
	+ "Сумма,"                   // <Число (15,2)>
	+ "Валюта,"                  // <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"           // <Число (15,2)>
	+ "Аванс,"                   // <Булево>
	+ "ДоходЕНВД,"               // <Число (15,2)>
	+ "ДоходКомитента,"          // <Число (15,2)>
	+ "ДоходПатент,"          	 // <Число (15,2)>
	+ "СуммаКт,"                 // <Число (15,2)>
	+ "СуммаНУ";                 // <Число (15,2)>

	Параметры.Вставить("ТаблицаРасчетыСКонтрагентами",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыСКонтрагентами, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам," // <Булево>
	+ "ПоддержкаПБУ18,"                 // <Булево>
	+ "ПлательщикНалогаНаПрибыль";      // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыСКонтрагентами(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		Возврат;
	КонецЕсли;

	Если Реквизиты.ПрименяетсяУСН ИЛИ Реквизиты.ПрименяетсяУСНПатент Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Реквизиты.ОтражатьВБухгалтерскомУчете И НЕ Реквизиты.ОтражатьВНалоговомУчете Тогда
		Движения.Хозрасчетный.Записывать = Истина;
		Возврат;
	КонецЕсли;

	ТаблицаРасчетыСКонтрагентами = ПараметрыПроведения.ТаблицаРасчетыСКонтрагентами;

	Если ТаблицаРасчетыСКонтрагентами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведенияРасчетыСКонтрагентами(
		ТаблицаРасчетыСКонтрагентами,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыСКонтрагентами Цикл
		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыСКонтрагентами(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока);
		Если НЕ Проводка = Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "Контрагенты", ТекущаяСтрока["Контрагент"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "Договоры", ТекущаяСтрока["ДоговорКонтрагента"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], "ДокументыРасчетовСКонтрагентами", ТекущаяСтрока["Документ"]);
		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвижения_РасчетыСКонтрагентамиПриУСН(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Реквизиты.ПрименяетсяУСН И НЕ Реквизиты.ПрименяетсяУСНПатент Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Реквизиты.ОтражатьВБухгалтерскомУчете И НЕ Реквизиты.ОтражатьВНалоговомУчете Тогда
		Движения.Хозрасчетный.Записывать = Истина;
		Возврат;
	КонецЕсли;

	ТаблицаРасчетыСКонтрагентами = ПараметрыПроведения.ТаблицаРасчетыСКонтрагентами;

	Если ТаблицаРасчетыСКонтрагентами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведенияРасчетыСКонтрагентами(
		ТаблицаРасчетыСКонтрагентами,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыСКонтрагентами Цикл
		
		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПроводкиРуб = 0;

		// 1. Проводка 1
		Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыСКонтрагентами(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока);
		Если НЕ Проводка = Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Контрагенты",
				ТекущаяСтрока["Контрагент"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Договоры",
				ТекущаяСтрока["ДоговорКонтрагента"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"ДокументыРасчетовСКонтрагентами",
				ТекущаяСтрока["Документ"]);
			СуммаПроводкиРуб = Проводка.Сумма;
		КонецЕсли;

		// 2. Проводка 2
		Если ТекущаяСтрока.ДоходЕНВД <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ТекущаяСтрока.СчетУчета.Валютный Тогда
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка.ВалютаКт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаКт 	= ТекущаяСтрока.ДоходЕНВД;
				Иначе
					Проводка.СчетДт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка.ВалютаДт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаДт 	= ТекущаяСтрока.ДоходЕНВД;
				КонецЕсли;
				ВалютнаяСумма = ?(ТекущаяСтрока.ВалютнаяСумма = 0, 1, ТекущаяСтрока.ВалютнаяСумма);
				Проводка.Сумма = ТекущаяСтрока.ДоходЕНВД * (СуммаПроводкиРуб / ВалютнаяСумма);
			Иначе
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				КонецЕсли;
				Проводка.Сумма = ТекущаяСтрока.ДоходЕНВД;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Контрагенты",
				ТекущаяСтрока["Контрагент"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Договоры",
				ТекущаяСтрока["ДоговорКонтрагента"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"ДокументыРасчетовСКонтрагентами",
				ТекущаяСтрока["Документ"]);
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, ?(ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный, "Кт", "Дт"));
		КонецЕсли;

		// 3. Проводка 3
		Если ТекущаяСтрока.ДоходКомитента <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ТекущаяСтрока.СчетУчета.Валютный Тогда
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка.ВалютаКт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаКт 	= ТекущаяСтрока.ДоходКомитента;
				Иначе
					Проводка.СчетДт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка.ВалютаДт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаДт 	= ТекущаяСтрока.ДоходКомитента;
				КонецЕсли;
				ВалютнаяСумма = ?(ТекущаяСтрока.ВалютнаяСумма = 0, 1, ТекущаяСтрока.ВалютнаяСумма);
				Проводка.Сумма = ТекущаяСтрока.ДоходКомитента * (СуммаПроводкиРуб / ВалютнаяСумма);
			Иначе
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				КонецЕсли;
				Проводка.Сумма = ТекущаяСтрока.ДоходКомитента;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Контрагенты",
				ТекущаяСтрока["Контрагент"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Договоры",
				ТекущаяСтрока["ДоговорКонтрагента"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"ДокументыРасчетовСКонтрагентами",
				ТекущаяСтрока["Документ"]);
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, ?(ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный, "Кт", "Дт"));
		КонецЕсли;
		
		// 4. Проводка 4
		Если ТекущаяСтрока.ДоходПатент <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ТекущаяСтрока.СчетУчета.Валютный Тогда
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
					Проводка.ВалютаКт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаКт 	= ТекущаяСтрока.ДоходПатент;
				Иначе
					Проводка.СчетДт 			= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
					Проводка.ВалютаДт 			= ТекущаяСтрока.Валюта;
					Проводка.ВалютнаяСуммаДт 	= ТекущаяСтрока.ДоходПатент;
				КонецЕсли;
				ВалютнаяСумма = ?(ТекущаяСтрока.ВалютнаяСумма = 0, 1, ТекущаяСтрока.ВалютнаяСумма);
				Проводка.Сумма = ТекущаяСтрока.ДоходПатент * (СуммаПроводкиРуб / ВалютнаяСумма);
			Иначе
				Если ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				КонецЕсли;
				Проводка.Сумма = ТекущаяСтрока.ДоходПатент;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Контрагенты",
				ТекущаяСтрока["Контрагент"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"Договоры",
				ТекущаяСтрока["ДоговорКонтрагента"]);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)],
				Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
				"ДокументыРасчетовСКонтрагентами",
				ТекущаяСтрока["Документ"]);
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, ?(ТекущаяСтрока.СчетУчета.Вид = ВидСчета.Пассивный, "Кт", "Дт"));
		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ ПО НАЛОГАМ И СБОРАМ

Функция ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборам(
			ТаблицаРасчетыПоНалогамИСборам,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыПоНалогамИСборам

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"             // <Строка,0> - имя списка в документе
	+ "Регистратор,"           // <ДокументСсылка>
	+ "Период,"                // <Дата>
	+ "НомерСтроки,"           // <Число>
	+ "СчетУчета,"             // <План счетов бухгалтерского учета>
	+ "ВидПлатежаВБюджет,"     // <ПеречислениеСсылка.Виды платежей в бюджет (фонды)>
	+ "УровеньБюджета,"        // <ПеречислениеСсылка.Уровни бюджетов>
	+ "СтатьяЗатрат,"          // <СправочникСсылка.ПрочиеДоходыИРасходы>, <СправочникСсылка.СтатьиЗатрат>
	+ "НоменклатурнаяГруппа,"  // <СправочникСсылка.Номенклатурные группы>
	+ "ХарактерДеятельности,"  // <ПеречислениеСсылка.Характер деятельности>
	+ "Сумма,"                 // <Число (15,2)>
	+ "СуммаКт,"               // <Число (15,2)>
	+ "РегистрацияВНалоговомОргане";     // <СправочникСсылка.РегистрацииВНалоговомОргане>

	Параметры.Вставить("ТаблицаРасчетыПоНалогамИСборам",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоНалогамИСборам, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыПоНалогамИСборам(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРасчетыПоНалогамИСборам = ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам;

	Если ТаблицаРасчетыПоНалогамИСборам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборам(
		ТаблицаРасчетыПоНалогамИСборам,
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасчетыПоНалогамИСборам Цикл
			
			Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.СуммаКт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Ложь); // Не заполнять суммы НУ
			
			Если НЕ Проводка = Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ВидыПлатежейВГосБюджет"], ТекущаяСтрока.ВидПлатежаВБюджет);
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"], ТекущаяСтрока.УровеньБюджета);
				Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)],
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"], ТекущаяСтрока.РегистрацияВНалоговомОргане);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// ДВИЖЕНИЯ ПО РБП

Функция ПодготовитьПараметрыПроведенияРасходыБудущихПериодов(
			ТаблицаРасходыБудущихПериодов,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасходыБудущихПериодов

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Контрагент,"               // <СправочникСсылка.Контрагенты>, <СправочникСсылка.ФизическиеЛица>
	+ "ДоговорКонтрагента,"       // <СправочникСсылка.Договор контрагента>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаКт,"                  // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "Субконто1,"                // <Произвольный>
	+ "Субконто2,"                // <Произвольный>
	+ "Субконто3";                // <Произвольный>

	Параметры.Вставить("ТаблицаРасходыБудущихПериодов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасходыБудущихПериодов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасходыБудущихПериодов(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРасходыБудущихПериодов = ПараметрыПроведения.ТаблицаРасходыБудущихПериодов;

	Если ТаблицаРасходыБудущихПериодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведенияРасходыБудущихПериодов(
		ТаблицаРасходыБудущихПериодов,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьВБухгалтерскомУчете
		ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаРасходыБудущихПериодов Цикл
			//Если ТекущаяСтрока.Сумма = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
			Если НЕ Проводка = Неопределено Тогда
				СчетУчета = ТекущаяСтрока.СчетУчета;
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
				КоличествоСубконто = СвойстваСчета.КоличествоСубконто;
				Для С=1 По КоличествоСубконто Цикл
					БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], С, ТекущаяСтрока["Субконто" + С]);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ ПО ОТГРУЖЕННЫМ ТОВАРАМ

Функция ПодготовитьПараметрыПроведенияТоварыОтгруженные(
			ТаблицаТоварыОтгруженные,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыОтгруженные

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Покупатель,"               // <СправочникСсылка.Контрагент>
	+ "ДоговорПокупателя,"        // <СправочникСсылка.Договор контрагента>
	+ "ДокументОтгрузки,"         // <ДокументСсылка>
	+ "Поставщик,"                // <СправочникСсылка.Контрагент>
	+ "ДоговорПоставщика,"        // <СправочникСсылка.Договор контрагента>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаКт,"                  // <Число (15,2)> // Всегда = 0
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаТоварыОтгруженные",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыОтгруженные, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_ТоварыОтгруженные(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Возврат;
	КонецЕсли;

	ТаблицаТоварыОтгруженные = ПараметрыПроведения.ТаблицаТоварыОтгруженные;

	Если ТаблицаТоварыОтгруженные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки регистра бухгалтерии
	ОценкаМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ПоСредней;

	Параметры = ПодготовитьПараметрыПроведенияТоварыОтгруженные(
		ТаблицаТоварыОтгруженные,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		
		СчетУчетаПереданныеОбъектыНедвижимости = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
		
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаТоварыОтгруженные Цикл
			Если (ТекущаяСтрока.Сумма = 0) И (ТекущаяСтрока.Количество = 0) Тогда
				Продолжить;
			КонецЕсли;
			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
			Если НЕ Проводка = Неопределено Тогда
				ПереданныеОбъектыНедвижимости = Проводка.СчетДт = СчетУчетаПереданныеОбъектыНедвижимости;
				Если ПереданныеОбъектыНедвижимости Тогда
					ИмяСубконто = "ОсновныеСредства";
				Иначе
					ИмяСубконто = "Номенклатура";
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ИмяСубконто, ТекущаяСтрока["Номенклатура"]);
				Если ОценкаМПЗПоСредней = Ложь И НЕ ПереданныеОбъектыНедвижимости Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока["Покупатель"]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// ДВИЖЕНИЯ ПО НОМЕНКЛАТУРЕ

Функция ПодготовитьПараметрыПроведенияНоменклатуры_Материалы(
			ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации,
			ТаблицаМатериалыПереданныеВПереработку,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"                             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                                   // <ДокументСсылка>
	+ "СпецМатериалНазначениеИспользования,"      // <СправочникСсылка.Назначения использования>
	+ "СпецМатериалПартияМатериалаВЭксплуатации," // <ДокументСсылка>
	+ "СпецМатериалПодразделениеФизЛицо,"         // <СправочникСсылка.Физическое лицо>
	+ "Количество,"                               // <Число (15,3)>
	+ "СпецМатериалПервоначальнаяСтоимость,"      // <Число (15,2)>
	+ "СпецМатериалПервоначальнаяСтоимостьНУ,"    // <Число (15,2)>
	+ "СпецМатериалПервоначальнаяСтоимостьПР,"    // <Число (15,2)>
	+ "СпецМатериалПервоначальнаяСтоимостьВР,"    // <Число (15,2)>
	+ "Сумма,"                                    // <Число (15,2)>
	+ "СуммаНУ,"                                  // <Число (15,2)>
	+ "СуммаПР,"                                  // <Число (15,2)>
	+ "СуммаВР,"                                  // <Число (15,2)>
	+ "РасчетныйДокумент,"                        // <ДокументСсылка>
	+ "Валюта,"                                   // <СправочникСсылка.Валюта>
	+ "НДС,"                                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"                     // <Булево>
	+ "ВалютнаяСумма,"                            // <Число (15,2)>
	+ "ВалютныйНДС,"                              // <Число (15,2)>
	+ "Оплачен,"                                  // <Булево>
	+ "Ключ";                                     // <Строка (36)>

	Параметры.Вставить("ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаМатериалыПереданныеВПереработку

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Контрагент,"               // <СправочникСсылка.Контрагент>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "Оплачен,"                  // <Булево>
	+ "ПараметрыСпецматериала,"   // <Булево>
	+ "СпособСтроительства,"      // <ПеречислениеСсылка.Способы строительства>
	+ "ТорговаяНаценка,"          // <Число (15,2)>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаМатериалыПереданныеВПереработку",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМатериалыПереданныеВПереработку, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "СпособСтроительства,"      // <ПеречислениеСсылка.Способы строительства>
	+ "Оплачен,"                  // <Булево>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_Товары(
			ТаблицаТоварыВРозничнойТорговлеАТТ,
			ТаблицаТоварыВРозничнойТорговлеНТТ,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыВРозничнойТорговлеАТТ

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>	
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "Оплачен,"                  // <Булево>
	+ "Контрагент,"               // <СправочникСсылка.Контрагент>
	+ "ТорговаяНаценка,"          // <Число (15,2)>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаТоварыВРозничнойТорговлеАТТ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыВРозничнойТорговлеАТТ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаТоварыВРозничнойТорговлеНТТ

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Сумма,"                    // <Число (15,2)>
	+ "ТорговаяНаценка,"          // <Число (15,2)>	
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "Количество,"               // <Число (15,3)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "Оплачен,"                  // <Булево>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаТоварыВРозничнойТорговлеНТТ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыВРозничнойТорговлеНТТ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>	
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "СпособСтроительства,"      // <ПеречислениеСсылка.Способы строительства>
	+ "Оплачен,"                  // <Булево>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_ГотоваяПродукцияИПолуфабрикаты(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>	
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "СпособСтроительства,"      // <ПеречислениеСсылка.Способы строительства>
	+ "Оплачен,"                  // <Булево>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_КапитальныеВложения(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Склад,"                    // <СправочникСсылка.Склад>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "СуммаНУ,"                  // <Число (15,2)>
	+ "СуммаПР,"                  // <Число (15,2)>
	+ "СуммаВР,"                  // <Число (15,2)>	
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "ВалютнаяСумма,"            // <Число (15,2)>
	+ "ВалютныйНДС,"              // <Число (15,2)>
	+ "СпособСтроительства,"      // <ПеречислениеСсылка.Способы строительства>
	+ "Оплачен,"                  // <Булево>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.Ставки НДС>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_Номенклатура(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Возврат;
	КонецЕсли;

	// В зависимости от РазделУчета будут необходимы разные таблицы:
	//
	// РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
	//		СпецодеждаИСпецоснасткаВЭксплуатации // Нет колонки Склад
	//		МатериалыПереданныеВПереработку
	//		НоменклатураНаСкладе
	//
	// РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
	//		ТоварыВРозничнойТорговлеАТТ
	//		ТоварыВРозничнойТорговлеНТТ
	//		НоменклатураНаСкладе
	//
	// РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
	//		НоменклатураНаСкладе
	//
	// РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
	//		НоменклатураНаСкладе
	//

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда

		ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации = ПараметрыПроведения.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации;
		ТаблицаМатериалыПереданныеВПереработку      = ПараметрыПроведения.ТаблицаМатериалыПереданныеВПереработку;
		ТаблицаНоменклатураНаСкладе                 = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если (ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации.Количество() = 0)
			И (ТаблицаМатериалыПереданныеВПереработку.Количество() = 0)
			И (ТаблицаНоменклатураНаСкладе.Количество() = 0) Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_Материалы(
			ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации,
			ТаблицаМатериалыПереданныеВПереработку,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];

		Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
			СформироватьДвижения_Номенклатура_ПроводкиОбщие(Реквизиты, Параметры.ТаблицаНоменклатураНаСкладе, Движения);
			СформироватьДвижения_Номенклатура_ПроводкиСпецодеждаИСпецоснастка(Реквизиты, Параметры.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации, Движения);
			СформироватьДвижения_Номенклатура_ПроводкиМатериалыПереданныеВПереработку(Реквизиты, Параметры.ТаблицаМатериалыПереданныеВПереработку, Движения);
		КонецЕсли;

		Движения.Хозрасчетный.Записывать = Истина;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда

		ТаблицаТоварыВРозничнойТорговлеАТТ = ПараметрыПроведения.ТаблицаТоварыВРозничнойТорговлеАТТ;
		ТаблицаТоварыВРозничнойТорговлеНТТ = ПараметрыПроведения.ТаблицаТоварыВРозничнойТорговлеНТТ;
		ТаблицаНоменклатураНаСкладе        = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если (ТаблицаТоварыВРозничнойТорговлеАТТ.Количество() = 0)
			И (ТаблицаТоварыВРозничнойТорговлеНТТ.Количество() = 0)
			И (ТаблицаНоменклатураНаСкладе.Количество() = 0) Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_Товары(
			ТаблицаТоварыВРозничнойТорговлеАТТ,
			ТаблицаТоварыВРозничнойТорговлеНТТ,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];

		Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
			СформироватьДвижения_Номенклатура_ПроводкиТоварыВРозничнойТорговле(Реквизиты, Параметры.ТаблицаТоварыВРозничнойТорговлеАТТ, Движения);
			СформироватьДвижения_Номенклатура_ПроводкиТоварыВРозничнойТорговле(Реквизиты, Параметры.ТаблицаТоварыВРозничнойТорговлеНТТ, Движения);
			СформироватьДвижения_Номенклатура_ПроводкиОбщие(Реквизиты, Параметры.ТаблицаНоменклатураНаСкладе, Движения);
		КонецЕсли;

		Движения.Хозрасчетный.Записывать = Истина;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда

		ТаблицаНоменклатураНаСкладе = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;
		Если ТаблицаНоменклатураНаСкладе.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_ГотоваяПродукцияИПолуфабрикаты(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];

		Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
			СформироватьДвижения_Номенклатура_ПроводкиОбщие(Реквизиты, Параметры.ТаблицаНоменклатураНаСкладе, Движения);
		КонецЕсли;

		Движения.Хозрасчетный.Записывать = Истина;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда

		ТаблицаНоменклатураНаСкладе = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если ТаблицаНоменклатураНаСкладе.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_КапитальныеВложения(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];

		Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
			СформироватьДвижения_Номенклатура_ПроводкиОбщие(Реквизиты, Параметры.ТаблицаНоменклатураНаСкладе, Движения);
		КонецЕсли;

		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвижения_Номенклатура_ПроводкиОбщие(Реквизиты, ТаблицаНоменклатуры, Движения)

	ОценкаМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ПоСредней;

	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл

		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СчетУчета = ТекущаяСтрока.СчетУчета;

		Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
		Если НЕ Проводка = Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
			Если НЕ ОценкаМПЗПоСредней Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ТекущаяСтрока["Склад"]);

			// Есть только для кап.вложений
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", ТекущаяСтрока["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекущаяСтрока["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР",       ТекущаяСтрока["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", ТекущаяСтрока["СпособСтроительства"]);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвижения_Номенклатура_ПроводкиСпецодеждаИСпецоснастка(Реквизиты, ТаблицаНоменклатуры, Движения)

	ОценкаМПЗПоСредней			= УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ПоСредней;
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400);
	СодержаниеПроводки			= ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
	
	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете И ПлательщикНалогаНаПрибыль;

	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл

		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СчетУчета = ТекущаяСтрока.СчетУчета;

		// Проводка по счету учета
		Если ТекущаяСтрока.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
			ФормироватьПроводкуПоСчетуУчета = Ложь;
		Иначе
			ФормироватьПроводкуПоСчетуУчета = Истина;
		КонецЕсли;

		Если ФормироватьПроводкуПоСчетуУчета = Истина Тогда

			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
			Если НЕ Проводка = Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
				Если НЕ ОценкаМПЗПоСредней Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", ТекущаяСтрока["СпецМатериалПартияМатериалаВЭксплуатации"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", ТекущаяСтрока["СпецМатериалПодразделениеФизЛицо"]);
			КонецЕсли;

		КонецЕсли;

		// Доп.проводка по первоначальной стоимости спец.материала
		Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ОтражатьВБухгалтерскомУчете Тогда
				Проводка.Сумма = ТекущаяСтрока.СпецМатериалПервоначальнаяСтоимость;
			КонецЕсли;
			Если СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", ТекущаяСтрока["СпецМатериалПартияМатериалаВЭксплуатации"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", ТекущаяСтрока["СпецМатериалПодразделениеФизЛицо"]);
			Проводка.КоличествоДт = ТекущаяСтрока.Количество;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

			Если ОтражатьВНалоговомУчете Тогда
				
				Проводка.СуммаНУДт = ТекущаяСтрока.СпецМатериалПервоначальнаяСтоимостьНУ;
				Проводка.СуммаПРДт = ТекущаяСтрока.СпецМатериалПервоначальнаяСтоимостьПР;
				Проводка.СуммаВРДт = ТекущаяСтрока.СпецМатериалПервоначальнаяСтоимостьВР;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвижения_Номенклатура_ПроводкиМатериалыПереданныеВПереработку(Реквизиты, ТаблицаНоменклатуры, Движения)

	ОценкаМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ПоСредней;

	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл

		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СчетУчета = ТекущаяСтрока.СчетУчета;

		// Проводка по счету учета
		Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
		Если НЕ Проводка = Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
			Если НЕ ОценкаМПЗПоСредней Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока["Контрагент"]);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвижения_Номенклатура_ПроводкиТоварыВРозничнойТорговле(Реквизиты, ТаблицаНоменклатуры, Движения)

	ОценкаМПЗПоСредней			= УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ПоСредней;
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период + 86400);
	СодержаниеПроводки			= ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	ОтражатьВБухгалтерскомУчете	= Реквизиты.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете		= Реквизиты.ОтражатьВНалоговомУчете И ПлательщикНалогаНаПрибыль;

	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл

		Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СчетУчета = ТекущаяСтрока.СчетУчета;

		Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
		Если НЕ Проводка = Неопределено Тогда
			Если ТаблицаНоменклатуры.Колонки.Найти("Номенклатура") <> Неопределено Тогда // Не везде есть "Номенклатура"
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
			КонецЕсли;

			Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", ТекущаяСтрока["СтавкаНДС"]);
			КонецЕсли;

			Если НЕ ОценкаМПЗПоСредней Тогда
				Если ТаблицаНоменклатуры.Колонки.Найти("Партия") <> Неопределено Тогда // Не везде есть "Партия"
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ТекущаяСтрока["Партия"]);
				КонецЕсли;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ТекущаяСтрока["Склад"]);
		КонецЕсли;

		Если ТекущаяСтрока.ТорговаяНаценка <> 0 И (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ОтражатьВБухгалтерскомУчете Тогда
				Проводка.Сумма       = ТекущаяСтрока.ТорговаяНаценка;
			КонецЕсли;

			Если ОтражатьВНалоговомУчете Тогда
				Проводка.СуммаНУКт     = ТекущаяСтрока.ТорговаяНаценка;
				Проводка.СуммаПРКт     = 0;
				Проводка.СуммаВРКт     = 0;
			КонецЕсли;

			Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;
			Если ТаблицаНоменклатуры.Колонки.Найти("Номенклатура") <> Неопределено Тогда // Не везде есть "Номенклатура"
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока["Номенклатура"]);
			КонецЕсли;
			Если НЕ ОценкаМПЗПоСредней Тогда
				Если ТаблицаНоменклатуры.Колонки.Найти("Партия") <> Неопределено Тогда // Не везде есть "Партия"
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", ТекущаяСтрока["Партия"]);
				КонецЕсли;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", ТекущаяСтрока["СтавкаНДС"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", ТекущаяСтрока["Склад"]);
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// ДВИЖЕНИЯ ПО ОС

Функция ПодготовитьПараметрыПроведенияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                    // <Строка,0> - имя списка в документе
	+ "Регистратор,"                                  // <ДокументСсылка>
	+ "Период,"                                       // <Дата>
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "ЮридическоеФизическоеЛицо,"                    // <ПеречислениеСсылка.ЮридическоеФизическоеЛицо>
	+ "ПрименяетсяУСН,"                               // <Булево>
	+ "ПрименяетсяУСНДоходы,"                         // <Булево>
	+ "ПрименяетсяУСНДоходыМинусРасходы,"             // <Булево>
	+ "ПоддержкаПБУ18,"                               // <Булево>
	+ "ПодразделениеОрганизации,"                     // <Ссылка на справочник подразделений>
	+ "ОтражатьВБухгалтерскомУчете,"                  // <Булево>
	+ "ОтражатьВНалоговомУчете,"                      // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам,"               // <Булево>
	+ "НомерСтроки,"                                  // <Число>
	+ "АмортизацияДо2002НУ,"                          // <Число(15, 2, Неотрицательный)>
	+ "АмортизацияДо2009,"                            // <Число(15, 2, Неотрицательный)>
	+ "ВыработкаКоличествоБУ,"                        // <Число(15, 3, Неотрицательный)>
	+ "ГрафикАмортизацииБУ,"                          // <СправочникСсылка.ГодовыеГрафикиАмортизацииОС>
	+ "ДатаПоследнейМодернизацииРегл,"                // <Дата(Дата)>
	+ "ДатаПринятияКУчетуРегл,"                       // <Дата(Дата)>
	+ "ДатаПриобретенияУСН,"                          // <Дата(Дата)>
	+ "ИнвентарныйНомерРегл,"                         // <Строка(9, Переменная)>
	+ "КоэффициентАмортизацииБУ,"                     // <Число(4, 2)>
	+ "КоэффициентАмортизацииНУ,"                     // <Число(4, 2)>
	+ "КоэффициентУскоренияБУ,"                       // <Число(5, 2)>
	+ "МетодНачисленияАмортизацииНУ,"                 // <ПеречислениеСсылка.МетодыНачисленияАмортизации>
	+ "МОЛРегл,"                                      // <СправочникСсылка.ФизическиеЛица>
	+ "НазваниеДокументаМодернизацииРегл,"            // <Строка(50, Переменная)>
	+ "НазваниеДокументаПринятияКУчетуРегл,"          // <Строка(50, Переменная)>
	+ "НакопленнаяАмортизацияБУ,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияНУ,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияПР,"                     // <Число(15, 2)>
	+ "НачислятьАмортизациюБУ,"                       // <Булево>
	+ "НачислятьАмортизациюНУ,"                       // <Булево>
	+ "НомерДокументаМодернизацииРегл,"               // <Строка(10, Переменная)>
	+ "НомерДокументаПринятияКУчетуРегл,"             // <Строка(10, Переменная)>
	+ "ОбъемПродукцииРаботБУ,"                        // <Число(10, 0)>
	+ "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,"// <Число(10, 0)>
	+ "ОсновноеСредство,"                             // <СправочникСсылка.ОсновныеСредства>
	+ "ПараметрВыработкиБУ,"                          // <СправочникСсылка.ПараметрыВыработкиОС>
	+ "ПервоначальнаяСтоимостьБУ,"                    // <Число(15, 2, Неотрицательный)>
	+ "ПервоначальнаяСтоимостьНУ,"                    // <Число(15, 2, Неотрицательный)>
	+ "ПервоначальнаяСтоимостьУСН,"                   // <Число(15, 2)>
	+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"   // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН,"  // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН>
	+ "ПорядокПогашенияСтоимостиБУ,"                  // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС>
	+ "РеквизитыДокументаОплаты,"                     // <Строка(50, Переменная)>
	+ "СостояниеМодернизацииРегл,"                    // <СправочникСсылка.СобытияОС>
	+ "СостояниеПринятияКУчетуРегл,"                  // <СправочникСсылка.СобытияОС>
	+ "СпециальныйКоэффициентНУ,"                     // <Число(5, 2, Неотрицательный)>
	+ "СпособНачисленияАмортизацииБУ,"                // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС>
	+ "СпособОтраженияРасходовПоАмортизации,"         // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "СпособПоступленияРегл,"                        // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "СрокИспользованияДляВычисленияАмортизацииБУ,"  // <Число(4, 0, Неотрицательный)>
	+ "СрокПолезногоИспользованияБУ,"                 // <Число(4, 0, Неотрицательный)>
	+ "СрокПолезногоИспользованияНУ,"                 // <Число(4, 0, Неотрицательный)>
	+ "СрокПолезногоИспользованияУСН,"                // <Число(4, 0, Неотрицательный)>
	+ "СтоимостьДляВычисленияАмортизацииБУ,"          // <Число(15, 2, Неотрицательный)>
	+ "СтоимостьДляВычисленияАмортизацииПР,"          // <Число(15, 2)>
	+ "СтоимостьДо2002НУ,"                            // <Число(15, 2, Неотрицательный)>
	+ "СуммаНачисленнойАмортизацииУСН,"               // <Число(15, 2, Неотрицательный)>
	+ "СуммаПоследнейМодернизацииБУ,"                 // <Число(15, 2, Неотрицательный)>
	+ "СуммаПоследнейМодернизацииНУ,"                 // <Число(15, 2, Неотрицательный)>
	+ "СчетАмортизацииБУ,"                            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаБУ,"                                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "ТекущаяСтоимостьБУ,"                           // <Число(15, 2, Неотрицательный)>
	+ "ТекущаяСтоимостьНУ,"                           // <Число(15, 2, Неотрицательный)>
	+ "ТекущаяСтоимостьПР,"                           // <Число(15, 2)>
	+ "ФактическийСрокИспользованияДо2009,"           // <Число(4, 0, Неотрицательный)>
	+ "Контрагент,"                     			  // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                           // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СпособОтраженияРасходовПоАренднымПлатежам,"    // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "КорректировкаСтоимостиНУ,"                     // <Число(15, 2)>
	+ "БылоПринятоКУчетуРанее,"                       // <Булево> - если есть записи в регистре сведений, что ОС было принято ранее к учету
	+ "Арендатор,"                                    // <СправочникСсылка.Контрагенты>
	+ "ДатаПередачиВАренду,"                          // <Дата(Дата)>
	+ "СобытиеПередачиВАренду,"                       // <СправочникСсылка.СобытияОС>
	+ "НазваниеДокументаПередачиВАренду,"             // <Строка(50, Переменная)>
	+ "НомерДокументаПередачиВАренду";                // <Строка(10, Переменная)>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"         // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                      // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"      // <Булево>
	+ "ОтражатьВНалоговомУчете,"          // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам,"   // <Булево>
	+ "ПрименяетсяУСН,"                   // <Булево>
	+ "ПрименяетсяУСНДоходы,"             // <Булево>
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево>
	+ "Предприниматель,"                  // <Булево>
	+ "ПрименяетсяОСН,"                   // <Булево>
	+ "ПоддержкаПБУ18";                   // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_ОС(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		Возврат;
	КонецЕсли;

	ТаблицаОС = ПараметрыПроведения.ТаблицаОС;

	Если ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Передать 2 таблицы, чтобы проверить обязательные колонки обеих
	Параметры = ПодготовитьПараметрыПроведенияОС(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
		// Движение по регистрам общим для упр. и регл. учета
		СформироватьДвижения_ОС_ВыработкаОС(Параметры.ТаблицаОС, Движения, Отказ);

		// Движение по регл. регистрам
		СформироватьДвижения_ОС_ПервоначальныеСведенияОСБух              (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_СостоянияОСБух                           (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_МестонахождениеОСБух                     (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_ГрафикиАмортизацииОСБух                  (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_НачислениеАмортизацииБух                 (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_ПараметрыАмортизацииБух                  (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_СпособыОтраженияРасходовПоАмортизацииБух (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_СобытияОСОрганизаций                     (Параметры.ТаблицаОС, Движения, Отказ);
		СформироватьДвижения_ОС_СчетовУчетаОСБух                         (Параметры.ТаблицаОС, Движения, Отказ);

		Если Реквизиты.ПрименяетсяОСН Тогда
			СформироватьДвижения_ОС_ПервоначальныеСведенияОСНал                  (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_НачислениеАмортизацииНал                     (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_ПараметрыАмортизацииНал                      (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_СпецКоэффициентНал                           (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_СпособыОтраженияРасходовПоАренднымПлатежамНал(Параметры.ТаблицаОС, Движения, Отказ);
		ИначеЕсли Реквизиты.Предприниматель Тогда
			СформироватьДвижения_ОС_ПервоначальныеСведенияОСНал(Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_НачислениеАмортизацииНал   (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_ПараметрыАмортизацииНал    (Параметры.ТаблицаОС, Движения, Отказ);
			СформироватьДвижения_ОС_СпецКоэффициентНал         (Параметры.ТаблицаОС, Движения, Отказ);
			Параметры.ТаблицаОС.ЗаполнитьЗначения(0, "ТекущаяСтоимостьНУ, НакопленнаяАмортизацияНУ");
		КонецЕсли;

	КонецЕсли;

	// Движения по УСН делаются при включенном признаке "Отражать в налоговом учете"
	Если Реквизиты.ПрименяетсяУСН И Реквизиты.ОтражатьВНалоговомУчете Тогда
		СформироватьДвижения_ОС_ПервоначальныеСведенияОСУСН(Параметры.ТаблицаОС, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
		СформироватьДвижения_ОС_Проводки(Параметры.ТаблицаОС, СодержаниеПроводки, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура СформироватьДвижения_ОС_ВыработкаОС(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ВыработкаОС;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если (СтрокаОС.ВыработкаКоличествоБУ > 0) И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = СтрокаОС.Период;
			НоваяСтрока.Организация       = СтрокаОС.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
			НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Первоначальные сведения об ОС бух.
//
Процедура СформироватьДвижения_ОС_ПервоначальныеСведенияОСБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления           = СтрокаОС.СпособПоступленияРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ПорядокПогашенияСтоимости   = СтрокаОС.ПорядокПогашенияСтоимостиБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		НоваяСтрока.Контрагент           		= СтрокаОС.Контрагент;
		НоваяСтрока.ДоговорКонтрагента     		= СтрокаОС.ДоговорКонтрагента;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура СформироватьДвижения_ОС_СостоянияОСБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.СостоянияОСОрганизаций;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.БылоПринятоКУчетуРанее Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ДатаСостояния     = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтрокаОС.Организация;
		НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура СформироватьДвижения_ОС_МестонахождениеОСБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.МестонахождениеОСБухгалтерскийУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		Если ЗначениеЗаполнено(СтрокаОС.Арендатор) И ЗначениеЗаполнено(СтрокаОС.ДатаПередачиВАренду) Тогда
			НоваяСтрока.Период = СтрокаОС.ДатаПередачиВАренду;
		Иначе
			НоваяСтрока.Период = СтрокаОС.Период;
		КонецЕсли;
		НоваяСтрока.Организация      = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтрокаОС.ПодразделениеОрганизации;
		НоваяСтрока.Контрагент       = СтрокаОС.Арендатор;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура СформироватьДвижения_ОС_ГрафикиАмортизацииОСБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборЗаписейДвижения.Выгрузить();

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если ЗначениеЗаполнено(СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = СтрокаОС.Период;
			НоваяСтрока.Организация       = СтрокаОС.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура СформироватьДвижения_ОС_НачислениеАмортизацииБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период               = ?(СтрокаОС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, СтрокаОС.ДатаПринятияКУчетуРегл, СтрокаОС.Период);
		НоваяСтрока.Организация          = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура СформироватьДвижения_ОС_ПараметрыАмортизацииБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл

		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			ДатаДвижения = СтрокаОС.ДатаПоследнейМодернизацииРегл;
			Если СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл Тогда
				ДатаДвижения = ДатаДвижения + 1;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОС.ДатаПринятияКУчетуРегл) Тогда
			ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл + 1;
		КонецЕсли;

		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                     = ДатаДвижения;
		НоваяСтрока.Организация                = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРаботБУ;
		НоваяСтрока.КоэффициентАмортизации     = СтрокаОС.КоэффициентАмортизацииБУ;
		НоваяСтрока.КоэффициентУскорения       = СтрокаОС.КоэффициентУскоренияБУ;

		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) Тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьБУ;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;

	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвижения_ОС_СпособыОтраженияРасходовПоАмортизацииБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету 
			И НЕ СтрокаОС.НачислятьАмортизациюНУ Тогда
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) тогда
			Продолжить;
		КонецЕслИ;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство                      = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация                           = СтрокаОС.Организация;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура СформироватьДвижения_ОС_СобытияОСОрганизаций(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.СобытияОСОрганизаций;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтрокаОС.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СостояниеПринятияКУчетуРегл;

		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;

		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			ДатаДвижения = СтрокаОС.ДатаПоследнейМодернизацииРегл;
			Если СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл Тогда
				ДатаДвижения = ДатаДвижения + 1;
			КонецЕсли;

			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = ДатаДвижения;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтрокаОС.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СостояниеМодернизацииРегл;

			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;

			Если НЕ СтрокаОС.ПрименяетсяУСНДоходыМинусРасходы Тогда
				НоваяСтрока.СуммаЗатратБУ = СтрокаОС.СуммаПоследнейМодернизацииБУ;
				НоваяСтрока.СуммаЗатратНУ = СтрокаОС.СуммаПоследнейМодернизацииНУ;
			КонецЕсли;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПередачиВАренду) Тогда

			ДатаДвижения = СтрокаОС.ДатаПередачиВАренду;
			Если СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПередачиВАренду Тогда
				ДатаДвижения = ДатаДвижения + 1;
			КонецЕсли;

			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = ДатаДвижения;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтрокаОС.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеПередачиВАренду;

			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПередачиВАренду;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПередачиВАренду;

		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура СформироватьДвижения_ОС_СчетовУчетаОСБух(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.СчетаБухгалтерскогоУчетаОС;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = СтрокаОС.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Первоначальные сведения об ОС нал.
//
Процедура СформироватьДвижения_ОС_ПервоначальныеСведенияОСНал(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСНалоговыйУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                   = Макс(СтрокаОС.ДатаПринятияКУчетуРегл, '20020101000000');
		НоваяСтрока.Организация                              = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.АмортизацияДо2009                        = СтрокаОС.АмортизацияДо2009;
		НоваяСтрока.ФактическийСрокИспользованияДо2009       = СтрокаОС.ФактическийСрокИспользованияДо2009;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Первоначальные сведения об ОС УСН.
//
Процедура СформироватьДвижения_ОС_ПервоначальныеСведенияОСУСН(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                      = Макс(СтрокаОС.ДатаПринятияКУчетуРегл, '20020101000000');
		НоваяСтрока.Организация                                 = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство                            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН                  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации                 = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения                            = СтрокаОС.ДатаПриобретенияУСН;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура СформироватьДвижения_ОС_НачислениеАмортизацииНал(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОСНалоговыйУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период               = СтрокаОС.Период;
		НоваяСтрока.Организация          = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура СформироватьДвижения_ОС_ПараметрыАмортизацииНал(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.ПараметрыАмортизацииОСНалоговыйУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			ДатаДвижения = СтрокаОС.ДатаПоследнейМодернизацииРегл;
			Если СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл Тогда
				ДатаДвижения = ДатаДвижения + 1;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОС.ДатаПринятияКУчетуРегл) Тогда
			ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл + 1;
		КонецЕсли;
		ДатаДвижения = Макс(ДатаДвижения,'20020101000000');
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                      = ДатаДвижения;
		НоваяСтрока.Организация                 = СтрокаОС.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияНУ;
		НоваяСтрока.КоэффициентАмортизации      = СтрокаОС.КоэффициентАмортизацииНУ;
		НоваяСтрока.ПРДляВычисленияАмортизации  = СтрокаОС.СтоимостьДляВычисленияАмортизацииПР;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура СформироватьДвижения_ОС_СпецКоэффициентНал(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период                 = СтрокаОС.Период;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтрокаОС.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвижения_ОС_Проводки(ТаблицаОС, СодержаниеПроводки, Движения, Отказ)

	НаборЗаписейДвижения = Движения.Хозрасчетный;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл

		// 1. Балансовая стоимость ОС
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			
			ТекущаяСтоимостьБУ	= СтрокаОС.ТекущаяСтоимостьБУ;
			ТекущаяСтоимостьНУ	= СтрокаОС.ТекущаяСтоимостьНУ;
			Если СтрокаОС.ПоддержкаПБУ18 Тогда
				ТекущаяСтоимостьПР	= СтрокаОС.ТекущаяСтоимостьПР;
				ТекущаяСтоимостьВР	= СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.ТекущаяСтоимостьНУ - СтрокаОС.ТекущаяСтоимостьПР;
			Иначе
				ТекущаяСтоимостьПР	= 0;
				ТекущаяСтоимостьВР	= 0;
			КонецЕсли;
			
			Если НЕ СтрокаОС.СчетУчетаБУ.НалоговыйУчет Тогда
				ТекущаяСтоимостьПР	= 0;
				ТекущаяСтоимостьВР	= 0;
			КонецЕсли;
			
			ОтражатьОСВБухгалтерскомУчете	= СтрокаОС.ОтражатьВБухгалтерскомУчете
				И НЕ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
				И НЕ ТекущаяСтоимостьБУ = 0;
			
			ОтражатьВНалоговомУчете	= СтрокаОС.ОтражатьВНалоговомУчете
				И НЕ СтрокаОС.ПрименяетсяУСН
				И СтрокаОС.СчетУчетаБУ.НалоговыйУчет
				И (НЕ ТекущаяСтоимостьНУ = 0 ИЛИ НЕ ТекущаяСтоимостьПР = 0 ИЛИ НЕ ТекущаяСтоимостьВР = 0);
			
			Если ОтражатьОСВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
				Проводка	= НаборЗаписейДвижения.Добавить();
				Проводка.Период			= СтрокаОС.Период;
				Проводка.Организация	= СтрокаОС.Организация;
				Проводка.Содержание		= СодержаниеПроводки;
				
				Если ОтражатьОСВБухгалтерскомУчете Тогда
					Проводка.Сумма	= ТекущаяСтоимостьБУ;
				КонецЕсли;
				
				Если ОтражатьВНалоговомУчете Тогда
					Проводка.СуммаНУДт	= ТекущаяСтоимостьНУ;
					Проводка.СуммаПРДт	= ТекущаяСтоимостьПР;
					Проводка.СуммаВРДт	= ТекущаяСтоимостьВР;
				КонецЕсли;
	 		
				Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаОС.Арендатор);

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Дт");
			КонецЕсли;
			
		КонецЕсли;

		// 2. Начисленная амортизация или износ ОС
		Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииБУ) Тогда

			НакопленнаяАмортизацияБУ	= СтрокаОС.НакопленнаяАмортизацияБУ;
			НакопленнаяАмортизацияНУ	= СтрокаОС.НакопленнаяАмортизацияНУ;
			Если СтрокаОС.ПоддержкаПБУ18 Тогда
				НакопленнаяАмортизацияПР	= СтрокаОС.НакопленнаяАмортизацияПР;
				НакопленнаяАмортизацияВР	= СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
			Иначе
				НакопленнаяАмортизацияПР	= 0;
				НакопленнаяАмортизацияВР	= 0;
			КонецЕсли;
			
			Если НЕ СтрокаОС.СчетАмортизацииБУ.НалоговыйУчет Тогда
				НакопленнаяАмортизацияПР	= 0;
				НакопленнаяАмортизацияВР	= 0;
			КонецЕсли;
			
			ОтражатьОСВБухгалтерскомУчете	= СтрокаОС.ОтражатьВБухгалтерскомУчете
				И НЕ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
				И НЕ НакопленнаяАмортизацияБУ = 0;
			
			ОтражатьВНалоговомУчете	= СтрокаОС.ОтражатьВНалоговомУчете
				И НЕ СтрокаОС.ПрименяетсяУСН
				И СтрокаОС.СчетУчетаБУ.НалоговыйУчет
				И (НЕ НакопленнаяАмортизацияНУ = 0 ИЛИ НЕ НакопленнаяАмортизацияПР = 0 ИЛИ НЕ НакопленнаяАмортизацияВР = 0);
			
			// 2.1. Начисленная амортизация ОС
			Если (ОтражатьОСВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете)
				И СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда

				Проводка = НаборЗаписейДвижения.Добавить();
				Проводка.Период      = СтрокаОС.Период;
				Проводка.Организация = СтрокаОС.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				
				Если ОтражатьОСВБухгалтерскомУчете Тогда
					Проводка.Сумма	= НакопленнаяАмортизацияБУ;
				КонецЕсли;
				
				Если ОтражатьВНалоговомУчете Тогда
					Проводка.СуммаНУКт	= НакопленнаяАмортизацияНУ;
					Проводка.СуммаПРКт	= НакопленнаяАмортизацияПР;
					Проводка.СуммаВРКт	= НакопленнаяАмортизацияВР;
				КонецЕсли;

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;

				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Кт");

			// 2.2. Начисленный износ ОС
			ИначеЕсли (ОтражатьОСВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете)
				И СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда

				// Ввод начисленного износа.
				Проводка = НаборЗаписейДвижения.Добавить();
				Проводка.Период      = СтрокаОС.Период;
				Проводка.Организация = СтрокаОС.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				
				Если ОтражатьОСВБухгалтерскомУчете Тогда
					Проводка.Сумма	= НакопленнаяАмортизацияБУ;
				КонецЕсли;
				
				Если ОтражатьВНалоговомУчете Тогда
					Проводка.СуммаНУКт	= НакопленнаяАмортизацияНУ;
					Проводка.СуммаПРКт	= НакопленнаяАмортизацияПР;
					Проводка.СуммаВРКт	= НакопленнаяАмортизацияВР;
				КонецЕсли;
			
				Проводка.СчетДт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Дт");

			// 2.3.
			ИначеЕсли ОтражатьВНалоговомУчете  Тогда
			
				// Ввод начисленной амортизации только по НУ
				Проводка = НаборЗаписейДвижения.Добавить();
				Проводка.Период      = СтрокаОС.Период;
				Проводка.Организация = СтрокаОС.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				
				Проводка.СуммаНУКт	= НакопленнаяАмортизацияНУ;
				Проводка.СуммаПРКт	= НакопленнаяАмортизацияПР;
				Проводка.СуммаВРКт	= НакопленнаяАмортизацияВР;

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;

				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Кт");
					
			КонецЕсли;
				
		КонецЕсли;
		
		// 3. Корректировка стоимости НУ
		Если СтрокаОС.КорректировкаСтоимостиНУ <> 0 Тогда
			
			Если СтрокаОС.СпособПоступленияРегл <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СтрокаОС.ОтражатьВНалоговомУчете Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = НаборЗаписейДвижения.Добавить();
			Проводка.Период      = СтрокаОС.Период;
			Проводка.Организация = СтрокаОС.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			
			Проводка.СуммаНУДт   = СтрокаОС.КорректировкаСтоимостиНУ;
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Дт");
			
			Если СтрокаОС.ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = 0;
				Проводка.СуммаВРДт = -СтрокаОС.КорректировкаСтоимостиНУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ ПО НМА

Процедура СформироватьДвижения_НМА(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНМА = ПараметрыПроведения.ТаблицаНМА;
	
	Параметры = ПодготовитьПараметрыПроведенияНМА(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
		СформироватьДвижения_НМА_СостоянияНМАОрганизаций(ТаблицаНМА, Движения, Отказ);
		
		ТаблицаНМА_СпособыОтраженияВУчете = ТаблицаНМА.Скопировать();
		ТаблицаНМА_СпособыОтраженияВУчете.Свернуть("ДатаПринятияКУчетуРегл, Регистратор, Организация, НомерСтроки, СпособОтраженияРасходов, НематериальныйАктив",);
		ТаблицаНМА_СпособыОтраженияВУчете.Колонки.ДатаПринятияКУчетуРегл.Имя = "Период";
		УчетНМА.СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА_СпособыОтраженияВУчете, Движения, Отказ);
		
		СформироватьДвижения_НМА_ПервоначальныеСведенияНМАБух(ТаблицаНМА, Движения, Отказ);
		
		СформироватьДвижения_НМА_СчетаБухгалтерскогоУчета(ТаблицаНМА, Движения, Отказ);
		
		Если Реквизиты.ПлательщикНалогаНаПрибыль ИЛИ Реквизиты.Предприниматель Тогда
			
			СформироватьДвижения_НМА_ПервоначальныеСведенияНМАНалоговыйУчет(ТаблицаНМА, Реквизиты, Движения, Отказ);
			
			Если Не Реквизиты.Предприниматель Тогда
				СформироватьДвижения_НМА_НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет(ТаблицаНМА, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Движения по УСН делаются при включенном признаке "Отражать в налоговом учете"
	Если Реквизиты.ПрименяетсяУСН И Реквизиты.ОтражатьВНалоговомУчете Тогда
		СформироватьДвижения_НМА_ПервоначальныеСведенияНМАНалоговыйУчетУСН(ТаблицаНМА, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ (Реквизиты.ОтражатьВНалоговомУчете И НЕ Реквизиты.ПрименяетсяУСН) Тогда
		СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);
		СформироватьДвижения_НМА_Проводки(ТаблицаНМА, Реквизиты, СодержаниеПроводки, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведенияНМА(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                    // <Строка,0> - имя списка в документе
	+ "Регистратор,"                                  // <ДокументСсылка>
	+ "Период,"                                       // <Дата>
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"                     // <Ссылка на справочник подразделений>
	+ "НомерСтроки,"                                  // <Число>
	+ "НематериальныйАктив,"                          // <СправочникСсылка.НематериальныеАктивы>
	+ "СчетУчетаБУ,"                                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетНачисленияАмортизацииБУ,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "ПервоначальнаяСтоимостьБУ,"                    // <Число(15, 2)>
	+ "ПервоначальнаяСтоимостьНУ,"                    // <Число(15, 2)>
	+ "ПервоначальнаяСтоимостьУСН,"                   // <Число(15, 2)>
	+ "НакопленнаяАмортизацияБУ,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияНУ,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияПР,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияВР,"                     // <Число(15, 2)>
	+ "НакопленнаяАмортизацияУСН,"                    // <Число(15, 2)>
	+ "ДатаПринятияКУчетуРегл,"                       // <Дата>
	+ "ДатаПриобретения,"                             // <Дата>
	+ "ВидОбъектаУчета,"                              // <ПеречислениеСсылка.ВидыОбъектовУчетаНМА>
	+ "ЭтоНМА,"                                       // <Булево>
	+ "СпособОтраженияРасходов,"                      // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "НачислятьАмортизациюБУ,"                       // <Булево>
	+ "НачислятьАмортизациюНУ,"                       // <Булево>
	+ "ТекущаяСтоимостьБУ,"                           // <Число(15, 2)>
	+ "ТекущаяСтоимостьНУ,"                           // <Число(15, 2)>
	+ "ТекущаяСтоимостьПР,"                           // <Число(15, 2)>
	+ "ТекущаяСтоимостьВР,"                           // <Число(15, 2)>
	+ "КоэффициентБУ,"                                // <Число( 3, 2)>
	+ "АмортизацияДо2009,"                            // <Число(15, 2)>
	+ "ФактическийСрокИспользованияДо2009,"           // <Число( 4, 0)>
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"  // <Число(10, 0)>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН,"  // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН>
	+ "РеквизитыДокументаОплаты,"                     // <Строка(50)>
	+ "СпециальныйКоэффициентНУ,"                     // <Число( 6, 2)>
	+ "СпособНачисленияАмортизацииБУ,"                // <ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА>
	+ "МетодНачисленияАмортизацииНУ,"                 // <ПеречислениеСсылка.МетодыНачисленияАмортизации>
	+ "СпособПоступления,"                            // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "СрокПолезногоИспользованияБУ,"                 // <Число( 4, 0)>
	+ "СрокПолезногоИспользованияНУ,"                 // <Число( 4, 0)>
	+ "СрокПолезногоИспользованияУСН,"                // <Число( 4, 0)>
	+ "Состояние,"                                    // <ПеречислениеСсылка.ВидыСостоянийНМА>
	+ "БылоПринятоКУчетуРанее";                       // <Булево> - если есть записи в регистре сведений, что ОС было принято ранее к учету

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"         // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                      // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"      // <Булево>
	+ "ОтражатьВНалоговомУчете,"          // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам,"   // <Булево>
	+ "ПрименяетсяУСН,"                   // <Булево>
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево>
	+ "Предприниматель,"                  // <Булево>
	+ "ПрименяетсяОСН,"                   // <Булево>
	+ "ПлательщикНалогаНаПрибыль,"        // <Булево>
	+ "ПоддержкаПБУ18";                   // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_НМА_СостоянияНМАОрганизаций(ТаблицаНМА, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Если НЕ СтрокаНМА.БылоПринятоКУчетуРанее Тогда
			Движение = Движения.СостоянияНМАОрганизаций.Добавить();			
			ЗаполнитьЗначенияСвойств(Движение, СтрокаНМА);
			Движение.Период = СтрокаНМА.ДатаПринятияКУчетуРегл;
		КонецЕсли;
	КонецЦикла;
	
	Движения.СостоянияНМАОрганизаций.УстановитьАктивность(Истина);
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвижения_НМА_ПервоначальныеСведенияНМАБух(ТаблицаНМА, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтрокаНМА.Организация;
		Движение.НачислятьАмортизацию        = СтрокаНМА.НачислятьАмортизациюБУ;
		Движение.ПервоначальнаяСтоимость     = СтрокаНМА.ПервоначальнаяСтоимостьБУ;
		Движение.СпособНачисленияАмортизации = СтрокаНМА.СпособНачисленияАмортизацииБУ;
		Движение.СпособПоступления           = СтрокаНМА.СпособПоступления;
		Движение.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользованияБУ;
		Движение.Коэффициент                 = СтрокаНМА.КоэффициентБУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.УстановитьАктивность(Истина);
	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвижения_НМА_ПервоначальныеСведенияНМАНалоговыйУчет(ТаблицаНМА, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив        = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                = СтрокаНМА.Организация;
		Движение.Период                     = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НачислятьАмортизацию       = СтрокаНМА.НачислятьАмортизациюНУ;
		Движение.ПервоначальнаяСтоимостьНУ  = СтрокаНМА.ПервоначальнаяСтоимостьНУ;
		Движение.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияНУ;
		Если Реквизиты.Предприниматель Тогда
			Движение.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
			Движение.ДатаПриобретения           = СтрокаНМА.ДатаПриобретения;
		Иначе
			Движение.МетодНачисленияАмортизации = СтрокаНМА.МетодНачисленияАмортизацииНУ;
			Движение.ДатаПриобретения           = СтрокаНМА.ДатаПринятияКУчетуРегл;
			Движение.АмортизацияДо2009                  = СтрокаНМА.АмортизацияДо2009;
			Движение.ФактическийСрокИспользованияДо2009 = СтрокаНМА.ФактическийСрокИспользованияДо2009;
		КонецЕсли;
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.УстановитьАктивность(Истина);
	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвижения_НМА_СчетаБухгалтерскогоУчета(ТаблицаНМА, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтрокаНМА.Организация;
		Движение.СчетУчета                   = СтрокаНМА.СчетУчетаБУ;
		Движение.СчетНачисленияАмортизации   = СтрокаНМА.СчетНачисленияАмортизацииБУ;
	КонецЦикла;
	
	Движения.СчетаБухгалтерскогоУчетаНМА.УстановитьАктивность(Истина);
	Движения.СчетаБухгалтерскогоУчетаНМА.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвижения_НМА_ПервоначальныеСведенияНМАНалоговыйУчетУСН(ТаблицаНМА, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтрокаНМА.Организация;
		Движение.ПервоначальнаяСтоимостьУСН  = СтрокаНМА.ПервоначальнаяСтоимостьУСН;
		Движение.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользованияУСН;
		Движение.ДатаПриобретения            = СтрокаНМА.ДатаПриобретения;
		Движение.СуммаНачисленнойАмортизации = СтрокаНМА.НакопленнаяАмортизацияУСН;
		Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаНМА.ПорядокВключенияСтоимостиВСоставРасходовУСН;
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.УстановитьАктивность(Истина);
	Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвижения_НМА_НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет(ТаблицаНМА, Движения, Отказ)
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив     = СтрокаНМА.НематериальныйАктив;
		Движение.Организация             = СтрокаНМА.Организация;
		Движение.Период                  = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.СпециальныйКоэффициент  = СтрокаНМА.СпециальныйКоэффициентНУ;
	КонецЦикла;
	
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.УстановитьАктивность(Истина);
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвижения_НМА_Проводки(ТаблицаНМА, Реквизиты, СодержаниеПроводки, Движения, Отказ)

	НаборЗаписейДвижения = Движения.Хозрасчетный;

	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		
		Проводка = НаборЗаписейДвижения.Добавить();
	
		Проводка.Период       = СтрокаНМА.Период;
		Проводка.Организация  = СтрокаНМА.Организация;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.СчетДт       = СтрокаНМА.СчетУчетаБУ;
		Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.Вспомогательный;

		Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
			Проводка.Сумма = СтрокаНМА.ТекущаяСтоимостьБУ;
		КонецЕсли;
		
		Если Реквизиты.ПлательщикНалогаНаПрибыль 
			И Реквизиты.ОтражатьВНалоговомУчете 
			И СтрокаНМА.СчетУчетаБУ.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаНМА.ТекущаяСтоимостьНУ;
				Если Реквизиты.ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаНМА.ТекущаяСтоимостьПР;
					Проводка.СуммаВРДт = СтрокаНМА.ТекущаяСтоимостьВР;
				КонецЕсли;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаНМА.НематериальныйАктив);
		
		Если СтрокаНМА.ЭтоНМА Тогда
			
			Если СтрокаНМА.НакопленнаяАмортизацияБУ <> 0
				ИЛИ СтрокаНМА.НакопленнаяАмортизацияНУ <> 0
				ИЛИ СтрокаНМА.НакопленнаяАмортизацияПР <> 0 Тогда
				
				Проводка = НаборЗаписейДвижения.Добавить();
				
				Проводка.Период       = СтрокаНМА.Период;
				Проводка.Организация  = СтрокаНМА.Организация;
				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
				Проводка.СчетКт       = СтрокаНМА.СчетНачисленияАмортизацииБУ;

				Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
					Проводка.Сумма = СтрокаНМА.НакопленнаяАмортизацияБУ;
				КонецЕсли;
				Если Реквизиты.ПлательщикНалогаНаПрибыль
					 И Реквизиты.ОтражатьВНалоговомУчете 
					 И СтрокаНМА.СчетУчетаБУ.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СтрокаНМА.НакопленнаяАмортизацияНУ;
						Если Реквизиты.ПоддержкаПБУ18 Тогда
							Проводка.СуммаПРКт = СтрокаНМА.НакопленнаяАмортизацияПР;
							Проводка.СуммаВРКт = СтрокаНМА.НакопленнаяАмортизацияВР;
						КонецЕсли;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ, БУХСПРАВКА

Функция ПодготовитьПараметрыПроведенияБухСправка(ТаблицаБухСправка, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаБухСправка

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"     // <Строка,0> - имя списка в документе
	+ "Регистратор,"   // <ДокументСсылка>
	+ "СчетУчета,"     // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"     // <Произвольный>
	+ "Субконто2,"     // <Произвольный>
	+ "Субконто3,"     // <Произвольный>
	+ "Количество,"    // <Число (15, 3)>
	+ "Сумма,"         // <Число (15, 2)>
	+ "Валюта,"        // <СправочникСсылка.Валюты>
	+ "ВалютнаяСумма," // <Число (15, 2)>
	+ "СуммаНУ,"       // <Число (15, 2)>
	+ "СуммаПР,"       // <Число (15, 2)>
	+ "СуммаВР,"       // <Число (15, 2)>
	+ "СуммаКт";       // <Число (15, 2)>

	Параметры.Вставить("ТаблицаБухСправка",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаБухСправка, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_БухСправка(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда

		ТаблицаБухСправка = ПараметрыПроведения.ТаблицаБухСправка;

		Если ТаблицаБухСправка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		// Передать 2 таблицы, чтобы проверить обязательные колонки обеих
		Параметры = ПодготовитьПараметрыПроведенияБухСправка(ТаблицаБухСправка, ТаблицаРеквизиты);

	Иначе
		Возврат;
	КонецЕсли;

	Если Реквизиты.ОтражатьВБухгалтерскомУчете ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда

		Операция = Движения.Хозрасчетный;
		Для Каждого ТекущаяСтрока Из Параметры.ТаблицаБухСправка Цикл
			Если (ТекущаяСтрока.Сумма = 0)
				И (ТекущаяСтрока.СуммаНУ = 0)
				И (ТекущаяСтрока.СуммаПР = 0)
				И (ТекущаяСтрока.СуммаВР = 0)
				И (ТекущаяСтрока.Количество = 0)
				И (ТекущаяСтрока.СуммаКт = 0) Тогда
				Продолжить;
			КонецЕсли;
			СчетУчета = ТекущаяСтрока.СчетУчета;
			Проводка  = ПолучитьЗаполненнуюПроводкуБезСубконто(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока, Истина);
			Если НЕ Проводка = Неопределено Тогда
				ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
				Для С = 1 По ЧислоАктивныхСубконто Цикл
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка[ТипСчетаСубконто(1, ТекущаяСтрока)], // СчетДт или СчетКт
						Проводка[ТипСчетаСубконто(2, ТекущаяСтрока)], // Субконто
						С,                                            // ИмяСубконто
						ТекущаяСтрока["Субконто" + С]);               // ЗначениеСубконто
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ ПО ПАРТИЯМ НДС

Функция ПодготовитьПараметрыПроведения_НДС_Партиии(
		ТаблицаПартийНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам," // <Булево>
	+ "РаздельныйУчетНДСНаСчете19";     // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		// Подготовка таблицы Параметры.ТаблицаПартийНДС
		
		СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
		+ "Номенклатура,"                             // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
		+ "Контрагент,"								  // <СправочникСсылка.Контрагенты>
		+ "ЕстьСубконтоПартии,"                       // <Булево>
		+ "ЕстьСубконтоСклады,"                       // <Булево>
		+ "Партия,"                                   // <ДокументСсылка>
		+ "Склад,"                                    // <СправочникСсылка.Склады>
		+ "Количество,"                               // <Число (15,3)>
		+ "СчетФактура,"                              // <ДокументСсылка>
		+ "ВидЦенности,"                              // <ПеречислениеСсылка.ВидыЦенностей>
		+ "СпособУчетаНДС,"                           // <ПеречислениеСсылка.СпособыУчетаНДС>
		+ "СуммаБезНДС,"                              // <Число (15,2)>
		+ "СчетУчетаНДС,"                             // <План счетов бухгалтерского учета>
		+ "СтавкаНДС,"                                // <ПеречислениеСсылка.СтавкиНДС>
		+ "НДС";                                      // <Число (15,2)>
		
	Иначе
		
		// Подготовка таблицы Параметры.ТаблицаПартийНДС
		
		СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
		+ "Номенклатура,"                             // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
		+ "ЕстьСубконтоПартии,"                       // <Булево>
		+ "ЕстьСубконтоСклады,"                       // <Булево>
		+ "Партия,"                                   // <ДокументСсылка>
		+ "Склад,"                                    // <СправочникСсылка.Склады>
		+ "Количество,"                               // <Число (15,3)>
		+ "СчетФактура,"                              // <ДокументСсылка>
		+ "ВидЦенности,"                              // <ПеречисениеСсылка.ВидыЦенностей>
		+ "НДСВключенВСтоимость,"                     // <Булево>
		+ "Стоимость,"                                // <Число (15,2)>
		+ "СчетУчетаНДС,"                             // <План счетов бухгалтерского учета>
		+ "СтавкаНДС,"                                // <ПеречислениеСсылка.СтавкиНДС>
		+ "НДС";                                      // <Число (15,2)>
		
	КонецЕсли; 
	
	Параметры.Вставить("ТаблицаПартийНДС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПартийНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по партиям запасов НДС
Процедура СформироватьДвижения_Партии_НДС(
		ПараметрыПроведения,
		ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Возврат;
	КонецЕсли;

	УпрощенныйУчетНДС	= УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	ПлательщикНДС		= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда

		Если НЕ РаздельныйУчетНДС Тогда
			Возврат;
		КонецЕсли;

		// По товарам на складе
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаНоменклатураНаСкладеНДС;

		Если ТаблицаПартийНДС.Количество() <> 0 Тогда

			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;

		КонецЕсли;

		// По товарам в АТТ
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаТоварыВРозничнойТорговлеАТТНДС;

		Если ТаблицаПартийНДС.Количество() <> 0 Тогда

			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда

		Если НЕ РаздельныйУчетНДС Тогда
			Возврат;
		КонецЕсли;

		// По товарам отгруженным
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаТоварыОтгруженныеНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда

		Если НЕ РаздельныйУчетНДС Тогда
			Возврат;
		КонецЕсли;

		// По материалам на складе
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаНоменклатураНаСкладеНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

		// По спецматериалам  в эксплуатации
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатацииНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

		// По материалам переданным в переработку
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаМатериалыПереданныеВПереработкуНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда

		Если НЕ РаздельныйУчетНДС Тогда
			Возврат;
		КонецЕсли;

		// По готовой продукции на складе
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаНоменклатураНаСкладеНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

	Иначе //Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения

		Если НЕ ПлательщикНДС ИЛИ УпрощенныйУчетНДС Тогда
			Возврат;
		КонецЕсли;

		// По внеоборотным активам
		ТаблицаПартийНДС = ПараметрыПроведения.ТаблицаНоменклатураНаСкладеНДС;
		Если ТаблицаПартийНДС.Количество() <> 0 Тогда
			Параметры = ПодготовитьПараметрыПроведения_НДС_Партиии(ТаблицаПартийНДС, ТаблицаРеквизиты);
			ТаблицаПартийНДС = Параметры.ТаблицаПартийНДС;
			Если Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
				СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура формирования движений по регистру НДС по приобретенным ценностям
//
Процедура СформироватьДвижения_Партии_НДСПоПриобретеннымЦенностям(ТаблицаПартийНДС, Реквизиты, Движения, Отказ)

	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПартийНДС);
		
		// Движения по регистру "НДС раздельный учет НДС"
		НаборЗаписейДвижения = Движения.НДСРаздельныйУчет;
		
		Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			
		КонецЦикла;
		
		НаборЗаписейДвижения.Записывать = Истина;
		
	Иначе	
		
		// Движения по регистру "НДС по приобретенным ценностям"
		НаборЗаписейДвижения = Движения.НДСПоПриобретеннымЦенностям;
		
		Для Каждого СтрокаДвижения Из ТаблицаПартийНДС Цикл
			
			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			
		КонецЦикла;
		
		НаборЗаписейДвижения.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

// ДВИЖЕНИЯ ПО НДС

Функция ПодготовитьПараметрыПроведения_НДСПоПриобретеннымЦенностям(
		ТаблицаНДСПоПриобретеннымЦенностям, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНДСПоПриобретеннымЦенностям

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "СчетУчетаНДС,"                             // <План счетов бухгалтерского учета>
	+ "Контрагент,"                               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетФактура,"                              // <ДокументСсылка>
	+ "СчетФактураДата,"                          // <Дата>
	+ "ВидЦенности,"                              // <ПеречисениеСсылка.ВидыЦенностей>
	+ "НДС,"                                      // <Число (15,2)>
	+ "НДСОплата,"                                // <Число (15,2)>
	+ "НДСВключеноВСтоимость,"                    // <Число (15,2)>
	+ "НДССтавка0,"                               // <Число (15,2)>
	+ "НДСПредъявлено,"                           // <Число (15,2)>
	+ "НДСПредъявлено0,"                          // <Число (15,2)>
	+ "НДСПредъявленоНеПодтверждено0,"            // <Число (15,2)>
	+ "НДСПодтверждено0,"                         // <Число (15,2)>
	+ "НДСНеПодтверждено0,"                       // <Число (15,2)>
	+ "НДСНаСчетУчета,"                           // <Число (15,2)>
	+ "НДСНаСчет0,"                               // <Число (15,2)>
	+ "ДокументОтгрузки,"                         // <ДокументСсылка>
	+ "ДокументОтгрузкиДата,"                     // <Дата>
	+ "СуммаБезНДС,"                              // <Число (15,2)>
	+ "СуммаБезНДСОплата,"                        // <Число (15,2)>
	+ "СуммаБезНДСВключеноВСтоимость,"            // <Число (15,2)>
	+ "СуммаБезНДССтавка0,"                       // <Число (15,2)>
	+ "СуммаБезНДСПредъявлено,"                   // <Число (15,2)>
	+ "СуммаБезНДСПредъявлено0,"                  // <Число (15,2)>
	+ "СуммаБезНДСПредъявленоНеПодтверждено0,"    // <Число (15,2)>
	+ "СуммаБезНДСПодтверждено0,"                 // <Число (15,2)>
	+ "СуммаБезНДСНеПодтверждено0,"               // <Число (15,2)>
	+ "СтавкаНДС,"                                // <ПеречислениеСсылка.СтавкиНДС>
	+ "ДатаСобытия,"                              // <Дата>
	+ "ДатаОплаты,"                               // <Дата>
	+ "ДокументОплаты,"                           // <ДокументСсылка>
	+ "Исправление,"                              // <Булево>
	+ "НомерИсправления,"                         // <Число (10,0)>
	+ "ДатаИсправления,"                          // <Дата>
	+ "КорректировочныйСчетФактура,"              // <Булево>
	+ "НомерИсходногоДокумента,"                  // <Строка (11)>
	+ "ДатаИсходногоДокумента,"                   // <Дата>
	+ "УчитыватьИсправлениеИсходногоДокумента,"   // <Булево>
	+ "НомерИсправленияИсходногоДокумента,"       // <Число (10,0)>
	+ "ДатаИсправленияИсходногоДокумента";        // <Дата>

	Параметры.Вставить("ТаблицаНДСПоПриобретеннымЦенностям",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДСПоПриобретеннымЦенностям, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РаздельныйУчетНДСНаСчете19,"     // <Булево>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведения_НДСПоАвансам(
		ТаблицаНДСПоАвансам, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНДСПоАвансам

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "СчетУчетаНДС,"                             // <План счетов бухгалтерского учета>
	+ "Контрагент,"                               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетФактура,"                              // <ДокументСсылка>
	+ "СчетФактураДата,"                          // <Дата>
	+ "ВидЦенности,"                              // <ПеречисениеСсылка.ВидыЦенностей>
	+ "НДС,"                                      // <Число (15,2)>
	+ "НДСНаСчетУчета,"                           // <Число (15,2)>
	+ "НДСКВычету,"                               // <Число (15,2)>
	+ "СуммаБезНДС,"                              // <Число (15,2)>
	+ "НДСОплата,"                                // <Число (15,2)>
	+ "СуммаБезНДСОплата,"                        // <Число (15,2)>
	+ "СтавкаНДС,"                                // <ПеречислениеСсылка.СтавкиНДС>
	+ "НДСВключеноВСтоимость,"                    // <Число (15,2)>
	+ "СуммаБезНДСВключеноВСтоимость,"            // <Число (15,2)>
	+ "ВалютаАванса,"                             // <СправочникСсылка.Валюты>
	+ "ВалютнаяСуммаСНДС,"                        // <Число (15,2)>
	+ "ДокументОтгрузки,"                         // <ДокументСсылка>
	+ "ДатаСобытия,"                              // <Дата>
	+ "ДатаОплаты,"                               // <Дата>
	+ "ДокументОплаты,"                           // <ДокументСсылка>
	+ "КурсАванса,"                               // <Число (15,4)>
	+ "Исправление,"                              // <Булево>
	+ "НомерИсправления,"                         // <Число (10,0)>
	+ "ДатаИсправления";                          // <Дата>

	Параметры.Вставить("ТаблицаНДСПоавансам",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДСПоАвансам, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведения_НДСПоРеализации(
		ТаблицаНДСПоРеализации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНДСПоРеализации

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "Контрагент,"                               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетФактура,"                              // <ДокументСсылка>
	+ "СчетФактураДата,"                          // <Дата>
	+ "ВидЦенности,"                              // <ПеречисениеСсылка.ВидыЦенностей>
	+ "НДС,"                                      // <Число (15,2)>
	+ "НДСНаСчетУчета,"                           // <Число (15,2)>
	+ "НДСКВычету,"                               // <Число (15,2)>
	+ "НДСОплата,"                                // <Число (15,2)>
	+ "ДокументОтгрузки,"                         // <ДокументСсылка>
	+ "СуммаБезНДС,"                              // <Число (15,2)>
	+ "СуммаБезНДСОплата,"                        // <Число (15,2)>
	+ "СтавкаНДС,"                                // <ПеречислениеСсылка.СтавкиНДС>
	+ "ДокументОплаты,"                           // <ДокументСсылка>
	+ "ДатаОплаты,"                               // <Дата>
	+ "НДСПодтверждено0,"                         // <Число (15,2)>
	+ "НДСНеПодтверждено0,"                       // <Число (15,2)>
	+ "СуммаБезНДСПодтверждено0,"                 // <Число (15,2)>
	+ "СуммаБезНДСНеПодтверждено0,"               // <Число (15,2)>
    + "ДатаСобытия,"                              // <Дата>
	+ "СтавкаНДСНеПодтверждена0,"                 // <ПеречислениеСсылка.СтавкиНДС>
	+ "Исправление,"                              // <Булево>
	+ "НомерИсправления,"                         // <Число (10,0)>
	+ "ДатаИсправления,"                          // <Дата>
	+ "КорректировочныйСчетФактура,"              // <Булево>
	+ "НомерИсходногоДокумента,"                  // <Строка (11)>
	+ "ДатаИсходногоДокумента,"                   // <Дата>
	+ "УчитыватьИсправлениеИсходногоДокумента,"   // <Булево>
	+ "НомерИсправленияИсходногоДокумента,"       // <Число (10,0)>
	+ "ДатаИсправленияИсходногоДокумента";        // <Дата>

	Параметры.Вставить("ТаблицаНДСПоРеализации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДСПоРеализации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведения_СчетаФактуры(
		ТаблицаСчетовФактур, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНДСПоРеализации

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                              // <Строка,0> - имя списка в документе
	+ "Регистратор,"                            // <ДокументСсылка>
	+ "Контрагент,"                             // <СправочникСсылка.Контрагенты>
	+ "Продавец,"                               // <СправочникСсылка.Контрагенты>
	+ "ЧастьЖурнала,"                           // <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур>
	+ "ДатаСФ,"                                 // <Дата>
	+ "НомерСФ,"                                // <Строка (11)>
	+ "СчетФактураДокумент,"                    // <ДокументСсылка>
	+ "Исправление,"                            // <Булево>
	+ "НомерИсправления,"                       // <Число (10,0)>
	+ "ДатаИсправления,"                        // <Дата>
	+ "КорректировочныйСчетФактура,"            // <Булево>
	+ "НомерИсходногоДокумента,"                // <Строка (11)>
	+ "ДатаИсходногоДокумента,"                 // <Дата>
	+ "УчитыватьИсправлениеИсходногоДокумента," // <Булево>
	+ "НомерИсправленияИсходногоДокумента,"     // <Число (10,0)>
	+ "ДатаИсправленияИсходногоДокумента,"      // <Дата>
	+ "ВалютаДокумента,"                        // <СправочникСсылка.Валюты>
    + "ИндексСтроки,"							// <Число (10,0)>
    + "КодВидаОперации,"						// <Строка, 10>
    + "СуммаПоСчетуФактуре,"					// <Число (15,2)>
    + "СуммаНДС";								// <Число (15,2)>
	
	Параметры.Вставить("ТаблицаСчетовФактур",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетовФактур, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по НДС по приобретенным ценностям
Процедура СформироватьДвижения_НДСПоПриобретеннымЦенностям(
	ПараметрыПроведения,
	ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	
	ТаблицаНДС = ПараметрыПроведения.ТаблицаДанныеПоНДСПоПриобретеннымЦенностям;

	Если ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведения_НДСПоПриобретеннымЦенностям(ТаблицаНДС, ТаблицаРеквизиты);

	ТаблицаНДСПоПриобретеннымЦенностям = Параметры.ТаблицаНДСПоПриобретеннымЦенностям;

	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		СформироватьДвижения_НДСПоПриобретеннымЦенностям_Проводки(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);
	КонецЕсли;

	Если Реквизиты.ОтражатьПоСпециальнымРегистрам И ПлательщикНДС Тогда

		СформироватьДвижения_НДС_НДСПредъявленный(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСПредъявленныйРеализация0(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСНачисленный(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСЗаписиКнигиПокупок(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСЗаписиКнигиПродаж(ТаблицаНДСПоПриобретеннымЦенностям, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

// Движения по НДС по авансам
Процедура СформироватьДвижения_НДСПоАвансам(
	ПараметрыПроведения,
	ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	ТаблицаНДС = ПараметрыПроведения.ТаблицаДанныеПоНДСПоАвансам;

	Если ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведения_НДСПоАвансам(ТаблицаНДС, ТаблицаРеквизиты);

	ТаблицаНДСПоАвансам= Параметры.ТаблицаНДСПоАвансам;

	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		СформироватьДвижения_НДСПоАвансам_Проводки(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);
	КонецЕсли;

	Если Реквизиты.ОтражатьПоСпециальнымРегистрам И ПлательщикНДС Тогда

		СформироватьДвижения_НДС_НДСсАвансов(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСНачисленный(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСЗаписиКнигиПокупок(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСЗаписиКнигиПродаж(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);

		Если УчетНДСКлиентСервер.Версия(Реквизиты.Период + 86400) = 1 Тогда
			СформироватьДвижения_НДС_НДСПредъявленный(ТаблицаНДСПоАвансам, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Движения по НДС по реализации
Процедура СформироватьДвижения_НДСПоРеализации(
	ПараметрыПроведения,
	ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	ТаблицаНДС = ПараметрыПроведения.ТаблицаДанныеПоНДСПоРеализации;

	Если ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведения_НДСПоРеализации(ТаблицаНДС, ТаблицаРеквизиты);

	ТаблицаНДСПоРеализации = Параметры.ТаблицаНДСПоРеализации;


	Если Реквизиты.ОтражатьПоСпециальнымРегистрам И ПлательщикНДС Тогда

		СформироватьДвижения_НДС_НДСНачисленный(ТаблицаНДСПоРеализации, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСРеализация0(ТаблицаНДСПоРеализации, Реквизиты, Движения, Отказ);

		СформироватьДвижения_НДС_НДСЗаписиКнигиПродаж(ТаблицаНДСПоРеализации, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

//Процедуры формирования проводок по НДС
//
Процедура СформироватьДвижения_НДСПоПриобретеннымЦенностям_Проводки(ТаблицаНДС, Реквизиты, Движения, Отказ)

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	НаборЗаписейДвижения = Движения.Хозрасчетный;

	Для Каждого СтрокаНДС ИЗ ТаблицаНДС Цикл

		Если СтрокаНДС.НДСНаСчет0 <> 0 Тогда

			Проводка = НаборЗаписейДвижения.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;

			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				Проводка.СчетДт = СтрокаНДС.СчетУчетаНДС;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаНДС.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаНДС.СчетФактура);
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаНДС.ДокументОтгрузки);
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			Проводка.Сумма  = СтрокаНДС.НДСНаСчет0;

			Если Реквизиты.ОтражатьВНалоговомУчете
				И Проводка.СчетДт.НалоговыйУчет Тогда
				
				Проводка.СуммаНУДт = СтрокаНДС.НДСНаСчет0;
				
			КонецЕсли;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

		КонецЕсли;

		Если СтрокаНДС.НДСНаСчетУчета <> 0 Тогда

			Проводка = НаборЗаписейДвижения.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;

			Проводка.СчетДт       = СтрокаНДС.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаНДС.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаНДС.СчетФактура);
			
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			КонецЕсли; 
			
			Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаНДС.ДокументОтгрузки);
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			Проводка.Сумма  = СтрокаНДС.НДСНаСчетУчета;

			Если Реквизиты.ОтражатьВНалоговомУчете
				И Проводка.СчетДт.НалоговыйУчет Тогда
				
				Проводка.СуммаНУДт = СтрокаНДС.НДСНаСчетУчета;
				
			КонецЕсли;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

		КонецЕсли;

	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвижения_НДСПоАвансам_Проводки(ТаблицаНДС, Реквизиты, Движения, Отказ)

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	НаборЗаписейДвижения = Движения.Хозрасчетный;

	Для Каждого СтрокаНДС ИЗ ТаблицаНДС Цикл

		Если СтрокаНДС.НДСНаСчетУчета=0 И СтрокаНДС.НДСКВычету = 0 Тогда
			//Нет необходимости формировать проводку с 0 суммой.
			Продолжить;
		КонецЕсли;

		Если СтрокаНДС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда

			Если СтрокаНДС.НДСНаСчетУчета=0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = НаборЗаписейДвижения.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводки;

			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаНДС.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаНДС.СчетФактура);

			Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
			Проводка.Сумма        = СтрокаНДС.НДСНаСчетУчета;

			Если Реквизиты.ОтражатьВНалоговомУчете Тогда
				Если Проводка.СчетДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт        = СтрокаНДС.НДСНаСчетУчета;
				КонецЕсли;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");

			Если СтрокаНДС.НДСКВычету <> 0 Тогда

				Проводка = НаборЗаписейДвижения.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СодержаниеПроводки;

				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;

				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаНДС.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтрокаНДС.СчетФактура);

				Проводка.Сумма = СтрокаНДС.НДСКВычету;
				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт        = СтрокаНДС.НДСКВычету;
					КонецЕсли;
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

			КонецЕсли;

		Иначе

			Если СтрокаНДС.НДСКВычету <> 0 Тогда

				Проводка = НаборЗаписейДвижения.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СодержаниеПроводки;

				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаНДС.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаНДС.СчетФактура);

				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
				Проводка.Сумма        = СтрокаНДС.НДСКВычету;

				Если Реквизиты.ОтражатьВНалоговомУчете Тогда
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт        = СтрокаНДС.НДСКВычету;
					КонецЕсли;
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС предъявленный
//
Процедура СформироватьДвижения_НДС_НДСПредъявленный(ТаблицаНДС, Реквизиты, Движения, Отказ)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейДвижения = Движения.НДСПредъявленный;

	МассивВидовЦенностейНалоговогоАгента = Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент();

	ТаблицаДвиженийНДСПредъявленный = ТаблицаНДС.Скопировать();

	// НДС предъявленный поставщиком
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленный Цикл
		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			Если СтрокаДвижения.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				СтрокаДвижения.СуммаБезНДС = 0;
				СтрокаДвижения.НДС = 0;
				Продолжить;
			Иначе
				СтрокаДвижения.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС - СтрокаДвижения.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаДвижения.НДС - СтрокаДвижения.НДСОплата;
				СтрокаДвижения.СчетУчетаНДС = "";
			КонецЕсли;
		Иначе
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Контрагент = Неопределено;
			КонецЕсли;
			Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаДвижения.ВидЦенности) = Неопределено Тогда
				СтрокаДвижения.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленный Цикл

		Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Поставщик    = СтрокаДвижения.Контрагент;
		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

	КонецЦикла;

	// НДС включенный в стоимость
	ТаблицаДвиженийНДСВключенныйВСтоимость = ТаблицаНДС.Скопировать();

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСВключенныйВСтоимость Цикл

		Если СтрокаДвижения.СуммаБезНДСВключеноВСтоимость = 0 И СтрокаДвижения.НДСВключеноВСтоимость = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			НоваяСтрока.Поставщик = Неопределено;
		Иначе
			НоваяСтрока.Поставщик    = СтрокаДвижения.Контрагент;
		КонецЕсли;
		
		Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаДвижения.ВидЦенности) = Неопределено Тогда
			НоваяСтрока.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС  = СтрокаДвижения.СуммаБезНДСВключеноВСтоимость;
		НоваяСтрока.НДС          = СтрокаДвижения.НДСВключеноВСтоимость;
		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;

	КонецЦикла;

	// НДС принятый к вычету
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		ТаблицаКВычету = ТаблицаНДС.Скопировать();

		Для Каждого СтрокаТаблицы ИЗ ТаблицаКВычету Цикл
			Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаТаблицы.ВидЦенности) = Неопределено Тогда
				СтрокаТаблицы.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		ТаблицаКВычету.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Контрагент, ДоговорКонтрагента, ДатаСобытия, ДатаОплаты",
		"СуммаБезНДССтавка0, НДССтавка0, СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСПредъявлено0, НДСПредъявлено0,
		|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");

		// НДС принятый к вычету
		Для Каждого СтрокаДвижения Из ТаблицаКВычету Цикл

			Если СтрокаДвижения.СуммаБезНДСПредъявлено = 0 И СтрокаДвижения.НДСПредъявлено = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.Поставщик    = СтрокаДвижения.Контрагент;
			НоваяСтрока.СуммаБезНДС  = СтрокаДвижения.СуммаБезНДСПредъявлено;
			НоваяСтрока.НДС          = СтрокаДвижения.НДСПредъявлено;
			НоваяСтрока.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;

		КонецЦикла;

		Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
			
			// НДС по ставке 0% (списание)
			Для Каждого СтрокаДвижения Из ТаблицаКВычету Цикл
				
				Если СтрокаДвижения.СуммаБезНДССтавка0 = 0 И СтрокаДвижения.НДССтавка0 = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
				НоваяСтрока.Период            = Реквизиты.Период;
				НоваяСтрока.Организация       = Реквизиты.Организация;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
				НоваяСтрока.Поставщик   = СтрокаДвижения.Контрагент;
				НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДССтавка0 - СтрокаДвижения.СуммаБезНДСПредъявлено0 - СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0;
				НоваяСтрока.НДС         = СтрокаДвижения.НДССтавка0 - СтрокаДвижения.НДСПредъявлено0 - СтрокаДвижения.НДСПредъявленоНеПодтверждено0;
				НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
				
			КонецЦикла;
			
		КонецЕсли; 
		
		// НДС по ставке 0% принятый к вычету
		Для Каждого СтрокаДвижения Из ТаблицаКВычету Цикл

			Если СтрокаДвижения.СуммаБезНДСПредъявлено0 = 0 И СтрокаДвижения.НДСПредъявлено0 = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.Поставщик    = СтрокаДвижения.Контрагент;
			НоваяСтрока.СуммаБезНДС  = СтрокаДвижения.СуммаБезНДСПредъявлено0;
			НоваяСтрока.НДС          = СтрокаДвижения.НДСПредъявлено0;
			НоваяСтрока.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;

		КонецЦикла;

		// НДС по ставке 0% (не подтверждено) принятый к вычету
		Для Каждого СтрокаДвижения Из ТаблицаКВычету Цикл

			Если СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0 = 0 И СтрокаДвижения.НДСПредъявленоНеПодтверждено0 = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				НоваяСтрока.Поставщик = Неопределено;
			Иначе
				НоваяСтрока.Поставщик    = СтрокаДвижения.Контрагент;
			КонецЕсли;
			НоваяСтрока.СуммаБезНДС  = СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0;
			НоваяСтрока.НДС          = СтрокаДвижения.НДСПредъявленоНеПодтверждено0;
			НоваяСтрока.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;

		КонецЦикла;

	КонецЕсли;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС предъявленный, реализация 0%
//
Процедура СформироватьДвижения_НДС_НДСПредъявленныйРеализация0(ТаблицаНДС, Реквизиты, Движения, Отказ)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейДвижения = Движения.НДСПредъявленныйРеализация0;

	ТаблицаДвижений = ТаблицаНДС.Скопировать();
	УдалитьДвиженияПоВидуЦенности(ТаблицаДвижений, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);

	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ТаблицаДвижений.Скопировать();

	// Движение по НДС по ставке 0% ожидается подтверждение
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		СтрокаДвижения.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОтгрузкиДата),
			Реквизиты.Период,
			СтрокаДвижения.ДокументОтгрузкиДата);

		Если СтрокаДвижения.СуммаБезНДССтавка0 = 0 И СтрокаДвижения.НДССтавка0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДССтавка0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДССтавка0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;

	КонецЦикла;

	// Движение по НДС по ставке 0% подтверждена
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСПодтверждено0 = 0 И СтрокаДвижения.НДСПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСПодтверждено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;

	КонецЦикла;

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСПодтверждено0 = 0 И СтрокаДвижения.НДСПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСПодтверждено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;

	КонецЦикла;


	// Движение по НДС по ставке 0% не подтверждена
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0 И СтрокаДвижения.НДСНеПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСНеПодтверждено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;

	КонецЦикла;

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0 И СтрокаДвижения.НДСНеПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСНеПодтверждено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;

	КонецЦикла;

	// Движение по НДС по ставке 0% предъявлена к вычету
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСПредъявлено0 = 0 И СтрокаДвижения.НДСПредъявлено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПредъявлено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСПредъявлено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;

	КонецЦикла;

	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0 = 0 И СтрокаДвижения.НДСПредъявленоНеПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0;
		НоваяСтрока.НДС			= СтрокаДвижения.НДСПредъявленоНеПодтверждено0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;

	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС начисленный
//
Процедура СформироватьДвижения_НДС_НДСНачисленный(ТаблицаНДС, Реквизиты, Движения, Отказ)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период + 86400) = 2 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейДвижения = Движения.НДСНачисленный;

	ТаблицаДвиженийНДСНачисленный = ТаблицаНДС.Скопировать();

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
		ИЛИ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда

		УдалитьДвиженияПоВидуЦенности(ТаблицаДвиженийНДСНачисленный, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);

		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСНачисленный Цикл

			Если (СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0)
				ИЛИ СтрокаДвижения.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);

			Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				НоваяСтрока.ВидНачисления      = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				НоваяСтрока.Покупатель         = Неопределено;
				НоваяСтрока.ДоговорКонтрагента = Неопределено;
			Иначе
				НоваяСтрока.ВидНачисления      = Перечисления.НДСВидНачисления.НДСсАвансов;
				НоваяСтрока.ВидЦенности        = Перечисления.ВидыЦенностей.АвансыПолученные;
				НоваяСтрока.Покупатель         = СтрокаДвижения.Контрагент;
				НоваяСтрока.СчетУчетаНДС = "";
			КонецЕсли;

		КонецЦикла;

		// Отражение в книге продаж сразу же, по факту начисления НДС с аванса
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСНачисленный Цикл

			Если (СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0)
				ИЛИ СтрокаДвижения.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);

			Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				НоваяСтрока.ВидНачисления      = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				НоваяСтрока.Покупатель         = Неопределено;
				НоваяСтрока.ДоговорКонтрагента = Неопределено;
			Иначе
				НоваяСтрока.ВидНачисления      = Перечисления.НДСВидНачисления.НДСсАвансов;
				НоваяСтрока.ВидЦенности        = Перечисления.ВидыЦенностей.АвансыПолученные;
				НоваяСтрока.Покупатель         = СтрокаДвижения.Контрагент;
				НоваяСтрока.СчетУчетаНДС = "";
			КонецЕсли;

		КонецЦикла;

	Иначе

		// Продажа
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСНачисленный Цикл

			Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.СчетУчетаНДС = "";
			НоваяСтрока.Покупатель         = СтрокаДвижения.Контрагент;

			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;

			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			НоваяСтрока.ДатаСобытия = СтрокаДвижения.СчетФактураДата;
			Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				НоваяСтрока.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

		КонецЦикла;

		// Не подтверждение 0%
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл

			Если (НЕ СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) ИЛИ (СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0) ИЛИ
				(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаДвижения.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
				Продолжить;
			Иначе

				Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 + СтрокаДвижения.НДСНеПодтверждено0 <> 0 Тогда

					НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
					НоваяСтрока.Период            = Реквизиты.Период;
					НоваяСтрока.Организация       = Реквизиты.Организация;

					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					НоваяСтрока.СчетУчетаНДС  = "";
					НоваяСтрока.Покупатель    = СтрокаДвижения.Контрагент;
					НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
					НоваяСтрока.Событие       = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;

					НоваяСтрока.СуммаБезНДС   = - (СтрокаДвижения.СуммаБезНДСНеПодтверждено0 + СтрокаДвижения.НДСНеПодтверждено0);
					НоваяСтрока.НДС           = 0;
					НоваяСтрока.ДатаСобытия   = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
						СтрокаДвижения.СчетФактураДата,
						СтрокаДвижения.ДатаОплаты);

					Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						НоваяСтрока.ДоговорКонтрагента = Неопределено;
					КонецЕсли;

				КонецЕсли;

				//
				Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0 И СтрокаДвижения.НДСНеПодтверждено0 = 0 Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
				НоваяСтрока.Период            = Реквизиты.Период;
				НоваяСтрока.Организация       = Реквизиты.Организация;

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
				НоваяСтрока.СчетУчетаНДС  = "";
				НоваяСтрока.Покупатель    = СтрокаДвижения.Контрагент;
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				НоваяСтрока.Событие       = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;

				НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
				НоваяСтрока.НДС         = СтрокаДвижения.НДСНеПодтверждено0;
				НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДСНеПодтверждена0;
				НоваяСтрока.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
					СтрокаДвижения.СчетФактураДата,
					СтрокаДвижения.ДатаОплаты);

				Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					НоваяСтрока.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСНачисленный Цикл

			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда

				Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0 И СтрокаДвижения.НДСНеПодтверждено0 = 0 Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
				НоваяСтрока.Период            = Реквизиты.Период;
				НоваяСтрока.Организация       = Реквизиты.Организация;

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
				НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
				НоваяСтрока.НДС         = СтрокаДвижения.НДСНеПодтверждено0;
				НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДСНеПодтверждена0;
				НоваяСтрока.СчетУчетаНДС  = "";
				НоваяСтрока.Покупатель    = СтрокаДвижения.Контрагент;
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					НоваяСтрока.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

				Если СтрокаДвижения.СуммаБезНДСПодтверждено0 = 0 И СтрокаДвижения.НДСПодтверждено0 = 0 Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
				НоваяСтрока.Период            = Реквизиты.Период;
				НоваяСтрока.Организация       = Реквизиты.Организация;

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
				НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
				НоваяСтрока.НДС         = СтрокаДвижения.НДСПодтверждено0;
				НоваяСтрока.СчетУчетаНДС  = "";
				НоваяСтрока.Покупатель    = СтрокаДвижения.Контрагент;
				НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					НоваяСтрока.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

			Иначе

				НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
				НоваяСтрока.Период            = Реквизиты.Период;
				НоваяСтрока.Организация       = Реквизиты.Организация;

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
				НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
				НоваяСтрока.СчетУчетаНДС  = "";
				НоваяСтрока.Покупатель    = СтрокаДвижения.Контрагент;
				НоваяСтрока.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС,
					Перечисления.НДСВидНачисления.РеализацияБезНДС,
					Перечисления.НДСВидНачисления.РеализацияСНДС);
				Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					НоваяСтрока.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС Покупки
//
Процедура СформироватьДвижения_НДС_НДСЗаписиКнигиПокупок(ТаблицаНДС, Реквизиты, Движения, Отказ)

	НаборЗаписейДвижения = Движения.НДСЗаписиКнигиПокупок;

	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ТаблицаНДС.Скопировать();

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Контрагент, ДокументОплаты, ДатаСобытия";
		КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0,
			|НДСПредъявленоНеПодтверждено0, СуммаБезНДСПредъявлено, НДСПредъявлено";
	Иначе
		КолонкиГруппировки 	= "СчетФактура, ВидЦенности, СтавкаНДС, Контрагент, ДоговорКонтрагента, ДатаОплаты, ДатаСобытия";
		КолонкиСуммирования	= "СуммаБезНДСОплата, НДСОплата";
	КонецЕсли;

	ТаблицаДвиженийНДСЗаписиКнигиПокупок.Свернуть(КолонкиГруппировки, КолонкиСуммирования);

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл

		Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда

			Если СтрокаДвижения.СуммаБезНДСОплата = 0 И СтрокаДвижения.НДСОплата = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСОплата;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСОплата;
			НоваяСтрока.Поставщик   = СтрокаДвижения.Контрагент;
			НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;

		Иначе

			Если СтрокаДвижения.СуммаБезНДСПредъявлено = 0 И СтрокаДвижения.НДСПредъявлено = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПредъявлено;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСПредъявлено;
			НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				НоваяСтрока.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
				НоваяСтрока.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
					Неопределено,
					СтрокаДвижения.ДатаОплаты);
			Иначе
				НоваяСтрока.Поставщик   = СтрокаДвижения.Контрагент;
			КонецЕсли;


		КонецЕсли;

	КонецЦикла;

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		УдалитьДвиженияПоВидуЦенности(ТаблицаДвиженийНДСЗаписиКнигиПокупок, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);

		// НДС по ставке 0% принятый к вычету
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл

			Если СтрокаДвижения.СуммаБезНДСПредъявлено0 = 0 И СтрокаДвижения.НДСПредъявлено0 = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПредъявлено0;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСПредъявлено0;
			НоваяСтрока.Поставщик   = СтрокаДвижения.Контрагент;
			НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;
		КонецЦикла;

		// НДС по ставке 0% (не подтверждено) принятый к вычету
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл

			Если СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0 = 0 И СтрокаДвижения.НДСПредъявленоНеПодтверждено0 = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПредъявленоНеПодтверждено0;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСПредъявленоНеПодтверждено0;
			НоваяСтрока.Поставщик   = СтрокаДвижения.Контрагент;
			НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;
		КонецЦикла;

	КонецЕсли;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС Продажи
//
Процедура СформироватьДвижения_НДС_НДСЗаписиКнигиПродаж(ТаблицаНДС, Реквизиты, Движения, Отказ)

	НаборЗаписейДвижения = Движения.НДСЗаписиКнигиПродаж;

	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ТаблицаНДС.Скопировать();

	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда

		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл

			Если СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыВыданные
				ИЛИ СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.Покупатель 	    = СтрокаДвижения.Контрагент;
			НоваяСтрока.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
			НоваяСтрока.ДатаОплаты		= СтрокаДвижения.СчетФактураДата;
			НоваяСтрока.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;

		КонецЦикла;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда

		ТаблицаДвиженийНДСЗаписиКнигиПродаж_СМР = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Скопировать();
		УдалитьДвиженияПоВидуЦенности(ТаблицаДвиженийНДСЗаписиКнигиПродаж_СМР, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);

		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж_СМР Цикл

			Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока					= НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период			= Реквизиты.Период;
			НоваяСтрока.Организация		= Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			
			НоваяСтрока.Покупатель			= Неопределено;
			НоваяСтрока.ДатаОплаты			= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
												НоваяСтрока.СчетФактураДата,
												НоваяСтрока.ДатаОплаты);
			НоваяСтрока.Событие				= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			НоваяСтрока.ДоговорКонтрагента	= Неопределено;

		КонецЦикла;

	Иначе

		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл

			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда

				Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 <> 0 ИЛИ СтрокаДвижения.НДСНеПодтверждено0 <> 0 Тогда

					НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
					НоваяСтрока.Период            = Реквизиты.Период;
					НоваяСтрока.Организация       = Реквизиты.Организация;

					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
					НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
					НоваяСтрока.НДС         = СтрокаДвижения.НДСНеПодтверждено0;
					НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДСНеПодтверждена0;
					НоваяСтрока.ДатаОплаты 	= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), Реквизиты.Период, СтрокаДвижения.ДатаОплаты);
					НоваяСтрока.Событие		= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
					Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						НоваяСтрока.ДоговорКонтрагента = Неопределено;
					КонецЕсли;

				КонецЕсли;

				Если СтрокаДвижения.СуммаБезНДСПодтверждено0 <> 0 ИЛИ СтрокаДвижения.НДСПодтверждено0 <> 0 Тогда

					НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
					НоваяСтрока.Период            = Реквизиты.Период;
					НоваяСтрока.Организация       = Реквизиты.Организация;

					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
					НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
					НоваяСтрока.НДС         = СтрокаДвижения.НДСПодтверждено0;
					НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
					НоваяСтрока.Событие		= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
					Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						НоваяСтрока.ДоговорКонтрагента = Неопределено;
					КонецЕсли;

				КонецЕсли;

			Иначе

				Если СтрокаДвижения.СуммаБезНДСОплата <> 0 ИЛИ СтрокаДвижения.НДСОплата <> 0 Тогда

					НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
					НоваяСтрока.Период            = Реквизиты.Период;
					НоваяСтрока.Организация       = Реквизиты.Организация;

					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
					НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСОплата;
					НоваяСтрока.НДС         = СтрокаДвижения.НДСОплата;
					НоваяСтрока.ДатаОплаты 	= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), Реквизиты.Период, СтрокаДвижения.ДатаОплаты);
					НоваяСтрока.Событие		= Перечисления.СобытияПоНДСПродажи.Реализация;
					Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						НоваяСтрока.ДоговорКонтрагента = Неопределено;
					КонецЕсли;

				КонецЕсли;

				Если (СтрокаДвижения.СуммаБезНДС - СтрокаДвижения.СуммаБезНДСОплата) <> 0 ИЛИ (СтрокаДвижения.НДС - СтрокаДвижения.НДСОплата) <> 0 Тогда

					НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
					НоваяСтрока.Период            = Реквизиты.Период;
					НоваяСтрока.Организация       = Реквизиты.Организация;

					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					НоваяСтрока.Покупатель      = СтрокаДвижения.Контрагент;
					НоваяСтрока.СуммаБезНДС     = СтрокаДвижения.СуммаБезНДС - СтрокаДвижения.СуммаБезНДСОплата;
					НоваяСтрока.НДС             = СтрокаДвижения.НДС - СтрокаДвижения.НДСОплата;
					НоваяСтрока.ДокументОплаты 	= Неопределено;
					НоваяСтрока.Событие		    = Перечисления.СобытияПоНДСПродажи.Реализация;
					Если НЕ СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						НоваяСтрока.ДоговорКонтрагента = Неопределено;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС с авансов
//
Процедура СформироватьДвижения_НДС_НДСсАвансов(ТаблицаНДС, Реквизиты, Движения, Отказ)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период + 86400);

	Если УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2 Тогда
		Возврат;
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	НаборЗаписейДвижения = Движения.НДСсАвансов;

	ТаблицаДвиженийНДСсАвансов = ТаблицаНДС.Скопировать();

	// НДС с аванса начисленный
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл

		Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель = СтрокаДвижения.Контрагент;

	КонецЦикла;

	// НДС с аванса к вычету
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл

		Если (СтрокаДвижения.СуммаБезНДСОплата = 0 И СтрокаДвижения.НДСОплата = 0)
			ИЛИ СтрокаДвижения.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСОплата;
		НоваяСтрока.НДС         = СтрокаДвижения.НДСОплата;
		Если СтрокаДвижения.ВалютаАванса = ВалютаРегламентированногоУчета Тогда
			НоваяСтрока.ВалютнаяСуммаСНДС = СтрокаДвижения.СуммаБезНДСОплата + СтрокаДвижения.НДСОплата;
		Иначе
			НоваяСтрока.ВалютнаяСуммаСНДС = СтрокаДвижения.ВалютнаяСуммаСНДС*(СтрокаДвижения.СуммаБезНДС + СтрокаДвижения.НДС)/(СтрокаДвижения.СуммаБезНДСОплата + СтрокаДвижения.НДСОплата);
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура формирования движений по регистру НДС реализация 0%
//
Процедура СформироватьДвижения_НДС_НДСРеализация0(ТаблицаНДС, Реквизиты, Движения, Отказ)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период + 86400);

	Если УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейДвижения = Движения.НДСРеализация0;

	ТаблицаДвиженийНДСРеализация0 = ТаблицаНДС.Скопировать();

	Счетчик = ТаблицаДвиженийНДСРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если ТаблицаДвиженийНДСРеализация0[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или
			(ТаблицаДвиженийНДСРеализация0[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвиженийНДСРеализация0[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			ТаблицаДвиженийНДСРеализация0.Удалить(ТаблицаДвиженийНДСРеализация0[Счетчик]);
		Иначе
			ТаблицаДвиженийНДСРеализация0[Счетчик].ДатаСобытия = ?(НЕ ЗначениеЗаполнено(ТаблицаДвиженийНДСРеализация0[Счетчик].СчетФактура),
			Реквизиты.Период,
			ТаблицаДвиженийНДСРеализация0[Счетчик].СчетФактураДата);
		КонецЕсли;
	КонецЦикла;

	// Ожидается подтверждение ставки 0%
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель = СтрокаДвижения.Контрагент;
		НоваяСтрока.Состояние  = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		НоваяСтрока.Событие    = Перечисления.СобытияПоНДСПродажи.Реализация;

	КонецЦикла;

	// Ставка 0% подтверждена
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСПодтверждено0 = 0 И СтрокаДвижения.НДСПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
		НоваяСтрока.НДС         = СтрокаДвижения.НДСПодтверждено0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;

		//

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
		НоваяСтрока.НДС         = СтрокаДвижения.НДСПодтверждено0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;

	КонецЦикла;

	// Ставка 0% не подтверждена
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСРеализация0 Цикл

		Если (СтрокаДвижения.СуммаБезНДСНеПодтверждено0 + СтрокаДвижения.НДСНеПодтверждено0) = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0 + СтрокаДвижения.НДСНеПодтверждено0;
		НоваяСтрока.НДС         = 0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;

	КонецЦикла;

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСРеализация0 Цикл

		Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 = 0 И СтрокаДвижения.НДСНеПодтверждено0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
		НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
		НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
		НоваяСтрока.НДС         = СтрокаДвижения.НДСНеПодтверждено0;
		НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		НоваяСтрока.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		НоваяСтрока.СтавкаНДС   = СтрокаДвижения.СтавкаНДСНеПодтверждена0;

	КонецЦикла;

	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСРеализация0 Цикл

		Если СтрокаДвижения.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаДвижения.СуммаБезНДСНеПодтверждено0 <> 0 ИЛИ СтрокаДвижения.НДСНеПодтверждено0 <> 0 Тогда

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСНеПодтверждено0;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСНеПодтверждено0;
			НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			НоваяСтрока.СтавкаНДС = СтрокаДвижения.СтавкаНДСНеПодтверждена0;

		КонецЕсли;

		Если СтрокаДвижения.СуммаБезНДСПодтверждено0 <> 0 ИЛИ СтрокаДвижения.НДСПодтверждено0 <> 0 Тогда

			НоваяСтрока                   = НаборЗаписейДвижения.ДобавитьРасход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			НоваяСтрока.Покупатель  = СтрокаДвижения.Контрагент;
			НоваяСтрока.СуммаБезНДС = СтрокаДвижения.СуммаБезНДСПодтверждено0;
			НоваяСтрока.НДС         = СтрокаДвижения.НДСПодтверждено0;
			НоваяСтрока.Состояние   = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;

		КонецЕсли;

	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

// Процедура очищает таблицу значений от записей содержащих определенные значения вида ценности
//
Процедура УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениям, ВидЦенности, ВидСравненияРавно = Истина)

	Счетчик = ТаблицаПоДвижениям.Количество();

	Пока Счетчик <> 0 Цикл

		Счетчик = Счетчик - 1;

		Если ВидСравненияРавно Тогда
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности = ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;

		Иначе
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности <> ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура регистрирует счета-фактуры в журнале регистрации счетов-фактур
//
Процедура СформироватьДвижения_РегистрацияСчетовФактур(	ПараметрыПроведения,
	ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		И НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным 
		И НЕ Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период + 86400);
	
	Если НЕ ПлательщикНДС Тогда
			Возврат;
	КонецЕсли;
		
	ТаблицаСчетовФактур = ПараметрыПроведения.ТаблицаДанныеПоСчетамФактурам;

	Если ТаблицаСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПроведения_СчетаФактуры(ТаблицаСчетовФактур, ТаблицаРеквизиты);
	
	Организация    = Реквизиты.Организация;
	
	ТаблицаСчетовФактур = Параметры.ТаблицаСчетовФактур;
	
	МассивсчетовФактур = ТаблицаСчетовФактур.ВыгрузитьКолонку("СчетФактураДокумент");	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор <> &Регистратор
	|	И ЖурналУчетаСчетовФактур.СчетФактура В(&МассивСчетовФактур)
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация";
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейДвижения = Движения.ЖурналУчетаСчетовФактур;
	
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаСчетовФактур Цикл
				
		НоваяСтрока                   	= НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            	= Реквизиты.Период;
		НоваяСтрока.Организация     	= Организация;
		
		НоваяСтрока.СчетФактура  		= СтрокаДвижения.СчетФактураДокумент;
		НоваяСтрока.ЧастьЖурнала 		= СтрокаДвижения.ЧастьЖурнала;
		НоваяСтрока.ИндексСтроки 		= СтрокаДвижения.ИндексСтроки;
		
		НоваяСтрока.КодВидаОперации		= СтрокаДвижения.КодВидаОперации;
		НоваяСтрока.Валюта       		= СтрокаДвижения.ВалютаДокумента;
		НоваяСтрока.СуммаПоСчетуФактуре	= СтрокаДвижения.СуммаПоСчетуФактуре;
		НоваяСтрока.СуммаНДС			= СтрокаДвижения.СуммаНДС;
		
		Если СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			// Определим контрагента для СМР хозспособом и налогового агента
			Если НЕ ЗначениеЗаполнено(СтрокаДвижения.Контрагент) Тогда 
				НоваяСтрока.Контрагент     = Организация;
			Иначе
				НоваяСтрока.Контрагент     = СтрокаДвижения.Контрагент;
			КонецЕсли;
		Иначе
			НоваяСтрока.Контрагент     = СтрокаДвижения.Контрагент;
			НоваяСтрока.Продавец       = СтрокаДвижения.Продавец;
		КонецЕсли;
		
		Если СтрокаДвижения.КорректировочныйСчетФактура Тогда
			
			НоваяСтрока.НомерСчетаФактуры = СтрокаДвижения.НомерИсходногоДокумента;
			НоваяСтрока.ДатаСчетаФактуры  = СтрокаДвижения.ДатаИсходногоДокумента;
			
			НоваяСтрока.НомерКорректировочногоСчетаФактуры = СтрокаДвижения.НомерСФ;
			НоваяСтрока.ДатаКорректировочногоСчетаФактуры  = СтрокаДвижения.ДатаСФ;
			
		Иначе
			
			НоваяСтрока.НомерСчетаФактуры   = СтрокаДвижения.НомерСФ;
			НоваяСтрока.ДатаСчетаФактуры    = СтрокаДвижения.ДатаСФ;
			
		КонецЕсли;
		
		Если СтрокаДвижения.Исправление Тогда
			Если СтрокаДвижения.КорректировочныйСчетФактура Тогда
				НоваяСтрока.НомерИсправленияКорректировочногоСчетаФактуры	= СтрокаДвижения.НомерИсправления;
				НоваяСтрока.ДатаИсправленияКорректировочногоСчетаФактуры	= СтрокаДвижения.ДатаИсправления;
			Иначе
				НоваяСтрока.НомерИсправления = СтрокаДвижения.НомерИсправления;
				НоваяСтрока.ДатаИсправления  = СтрокаДвижения.ДатаИсправления;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка на наличие записей
		ПараметрыПоиска = Новый Структура("СчетФактура, Контрагент, ЧастьЖурнала", НоваяСтрока.СчетФактура, НоваяСтрока.Контрагент, НоваяСтрока.ЧастьЖурнала);
		МассивСтрок = Результат.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрок.Количество() <> 0 Тогда
			НаборЗаписейДвижения.Удалить(НоваяСтрока);
		КонецЕсли;
				
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
КонецПроцедуры

// ДВИЖЕНИЯ ПО ЗАРПЛАТЕ

Функция ПодготовитьПараметрыПроведенияРасчетыПоЗаработнойПлате(
	ТаблицаРасчетыПоЗаработнойПлате,
	ТаблицаДепонентов,
	ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыСПодотчетнымиЛицами

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"              // <Строка,0> - имя списка в документе
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Период,"                 // <Дата>
	+ "НомерСтроки,"            // <Число>
	+ "СчетУчета,"              // <План счетов бухгалтерского учета>
	+ "РаботникОрганизации,"    // <СправочникСсылка.ФизическиеЛица>
	+ "Сумма,"                  // <Число (15,2)>
	+ "ВидНачисления,"          // <ПеречислениеСсылка.ИПВидыНачисленийУдержаний>
	+ "НоменклатурнаяГруппа,"   // <СправочникСсылка.НоменклатурныеГруппы>
	+ "ХарактерДеятельности,"   // <ПеречислениеСсылка.ХарактерДеятельности>
	+ "СтатьяЗатрат,"           // <СправочникСсылка.СтатьиЗатрат>, <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "ОтражениеВУСН,"          // <ПеречислениеСсылка.ОтражениеВУСН>
	+ "Ведомость,"              // <ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу>
	+ "ПериодРегистрации,"      // <Дата>
	+ "ВидУдержания,"           // <ПеречислениеСсылка.ИПВидыНачисленийУдержаний>
	+ "СуммаПодлежитУдержанию," // <Число (15,2)>
	+ "Получатель";             // <СправочникСсылка.Контрагенты>

	Параметры.Вставить("ТаблицаРасчетыПоЗаработнойПлате",
	ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоЗаработнойПлате, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"              // <Строка,0> - имя списка в документе
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Дата,"                   // <Дата>
	+ "НомерСтроки,"            // <Число>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "Ведомость,"              // <ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу>
	+ "ФизическоеЛицо,"         // <СправочникСсылка.ФизическиеЛица>
	+ "Сумма";                  // <Число (15,2)>

	Параметры.Вставить("ТаблицаДепонентов",
	ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДепонентов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыПоЗаработнойПлате(
	ПараметрыПроведения,
	ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		Возврат
	КонецЕсли;

	ТаблицаРасчетыПоЗаработнойПлате	= ПараметрыПроведения.ТаблицаРасчетыПоЗаработнойПлате;
	ТаблицаДепонентов				= ПараметрыПроведения.ТаблицаДепонентов;

	Если ТаблицаРасчетыПоЗаработнойПлате.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
		
	Параметры = ПодготовитьПараметрыПроведенияРасчетыПоЗаработнойПлате(
		ТаблицаРасчетыПоЗаработнойПлате,
		ТаблицаДепонентов,
		ТаблицаРеквизиты);

	СодержаниеПроводки = ПолучитьСодержаниеПроводки(Реквизиты.РазделУчета);

	Реквизиты = Параметры.Реквизиты[0];
		
	ТаблицаРасчетыПоЗаработнойПлате_Движения = Параметры.ТаблицаРасчетыПоЗаработнойПлате.Скопировать();
	
	Если ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		ТаблицаРасчетыПоЗаработнойПлате_Движения.Свернуть("СчетУчета", "Сумма");		
	КонецЕсли;

	Если Реквизиты.ОтражатьВБухгалтерскомУчете
		ИЛИ Реквизиты.ОтражатьВНалоговомУчете Тогда
		
		Для Каждого ТекущаяСтрока Из ТаблицаРасчетыПоЗаработнойПлате_Движения Цикл
			
			Если ТекущаяСтрока.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПолучитьЗаполненнуюПроводкуБезСубконто_РасчетыССотрудникамиПоЗарплате(Реквизиты, Движения.Хозрасчетный, ТекущаяСтрока);
			Если НЕ Проводка = Неопределено И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка["СчетКт"], Проводка["СубконтоКт"], "РаботникиОрганизаций", ТекущаяСтрока["РаботникОрганизации"]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;
	
	// Регистрация депонентов в подсистеме заработной платы
	Если Реквизиты.ОтражатьПоСпециальнымРегистрам И НЕ УчетЗарплатыИКадровВоВнешнейПрограмме Тогда

		УчетДепонированнойЗарплаты.ЗарегистрироватьДепонированнуюЗарплату(Движения, Отказ, Параметры.ТаблицаДепонентов);

	КонецЕсли;
	
КонецПроцедуры

// ДВИЖЕНИЯ ПО УСН

Функция ПодготовитьПараметрыПроведенияРасходыПриУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасходы

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
	+ "ЭлементРасхода,"                           // <СправочникСсылка.Номенклатура>
	+ "Партия,"                                   // <ДокументСсылка>
	+ "ДоговорКонтрагента,"                       // <СправочникСсылка.Назначения использования>
	+ "СтатусыПартийУСН,"                         // <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "РасчетныйДокумент,"                        // <ДокументСсылка>
	+ "СтатусыОплатыРасходовУСН,"                 // <ПеречислениеСсылка.СтатусыРасходовУСН>
	+ "ОтражениеВУСН,"                            // <ПеречислениеСсылка.ОтражениеВУСН>
	+ "Валюта,"                                   // <СправочникСсылка.Валюты>
	+ "Количество,"                               // <Число (15,3)>
	+ "Сумма,"                                    // <Число (15,2)>
	+ "НДС,"                                      // <Число (15,2)>
	+ "ВидРасхода";                               // <ПеречислениеСсылка.ВидыРасходовУСН>

	Параметры.Вставить("ТаблицаРасходы",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасходы, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРасходыПриУСН(
		ТаблицаРасходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходы) Тогда
		Возврат;
	КонецЕсли;			
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период + 86400) Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам
	   И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") 
	   И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияРасходыПриУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НоваяСтрока = Движения.РасходыПриУСН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Организация = Реквизиты.Организация;

	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПроведенияПрочиеРасчетыУСН(ТаблицаПрочиеРасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПрочиеРасчеты

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"         // <Строка,0> - имя списка в документе
	+ "Регистратор,"       // <ДокументСсылка>
	+ "Период,"            // <Дата>
	+ "НомерСтроки,"       // <Число>
	+ "СчетУчета,"         // <План счетов бухгалтерского учета>
	+ "Контрагент,"        // <СправочникСсылка.Номенклатура>, <СправочникСсылка.Контрагенты>
	+ "РасчетныйДокумент," // <ДокументСсылка>
	+ "ВидДвижения,"       // <ВидДвиженияНакопления>
	+ "Сумма";             // <Число (15,2)>

	Параметры.Вставить("ТаблицаПрочиеРасчеты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПрочиеРасчеты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПрочиеРасчетыУСН(
		ТаблицаПрочиеРасчеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПрочиеРасчеты) Тогда
		Возврат;
	КонецЕсли;			
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период + 86400) Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам
	   И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") 
	   И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияПрочиеРасчетыУСН(ТаблицаПрочиеРасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПрочиеРасчеты Цикл

		НоваяСтрока = Движения.ПрочиеРасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Организация = Реквизиты.Организация;

	КонецЦикла;

	Движения.ПрочиеРасчеты.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияДопРасходыПриУСН(
		ТаблицаРасходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходы) Тогда
		Возврат;
	КонецЕсли;			
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период + 86400) Тогда
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыПроведенияДопРасходыПриУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];	
	
	РаспределениеДопРасходов(Параметры.ТаблицаРасходы, Реквизиты,Движения,  Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведенияДопРасходыПриУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасходы

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "Партия,"                                   // <ДокументСсылка>
	+ "СпособРаспределения,"                      // <ПеречислениеСсылка.СпособыРаспределенияДопРасходов>
	+ "Контрагент,"                               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                       // <СправочникСсылка.ДоговорыКонтрагентов>	
	+ "РасчетныйДокумент,"                        // <ДокументСсылка>
	+ "СтатусыОплатыРасходовУСН,"                 // <ПеречислениеСсылка.СтатусыРасходовУСН>
	+ "ОтражениеВУСН,"                            // <ПеречислениеСсылка.ОтражениеВУСН>
	+ "Валюта,"                                   // <СправочникСсылка.Валюты>
	+ "Сумма,"                                    // <Число (15,2)>
	+ "НДС,"                                      // <Число (15,2)>
	+ "ВидРасхода";                               // <ПеречислениеСсылка.ВидыРасходовУСН>

	Параметры.Вставить("ТаблицаРасходы",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасходы, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура РаспределениеДопРасходов(ТаблицаДопРасходы, Реквизиты, Движения, Отказ)
	
	//Соберем информацию об остатках расходов
	
	МассивПартий = ТаблицаДопРасходы.ВыгрузитьКолонку("Партия");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.Номенклатура;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля		= МассивПартий;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля		= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Включая), Реквизиты.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Свернуть("ЭлементРасхода, Партия", "Количество, Сумма");
	
	ТаблицаРасходов.Индексы.Добавить("Партия");
	
	ТаблицаДвижений = Движения.РасходыПриУСН.ВыгрузитьКолонки();
		
	Для Каждого СтрокаДопРасходы Из ТаблицаДопРасходы Цикл
		Если СтрокаДопРасходы.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено Тогда
			//Распределение не выполняем, регистрируем без указания номенклатуры (расходы уже списаны и номенклатура не нужна)
			ЗаписьРасходов = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРасходов, СтрокаДопРасходы);
			ЗаписьРасходов.Организация      = Реквизиты.Организация;
			ЗаписьРасходов.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
		Иначе
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Партия",	СтрокаДопРасходы.Партия);
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			
			ИмяРесурсаРаспределения = ?(СтрокаДопРасходы.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "Сумма");
			БазаРаспределения = 0;
			СуммаКРаспределению = СтрокаДопРасходы.Сумма;
			НДСКРаспределению 	= СтрокаДопРасходы.НДС;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЗначениеПоСтроке = Строка[ИмяРесурсаРаспределения];
				Если ЗначениеПоСтроке > 0 Тогда
					БазаРаспределения = БазаРаспределения + ЗначениеПоСтроке;
				КонецЕсли;
			КонецЦикла;
						
			Если БазаРаспределения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЗначениеПоСтроке = Строка[ИмяРесурсаРаспределения];
				Если ЗначениеПоСтроке > 0 Тогда
					Коэффициент 	= ?(БазаРаспределения = 0, 0, ЗначениеПоСтроке / БазаРаспределения);
					СуммаПоСтроке 	= Окр(СуммаКРаспределению * Коэффициент, 2, 1);
					НДСПоСтроке 	= Окр(НДСКРаспределению * Коэффициент, 2, 1);
					Если СуммаПоСтроке > 0 Тогда
						ЗаписьРасходов = ТаблицаДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьРасходов, СтрокаДопРасходы);
						ЗаписьРасходов.Организация      = Реквизиты.Организация;
						ЗаписьРасходов.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
						ЗаписьРасходов.ЭлементРасхода	= Строка.ЭлементРасхода;
						ЗаписьРасходов.Количество		= Строка.Количество;
						ЗаписьРасходов.Сумма 			= СуммаПоСтроке;
						ЗаписьРасходов.НДС 				= НДСПоСтроке;
					КонецЕсли;
					СуммаКРаспределению = СуммаКРаспределению - СуммаПоСтроке;
					НДСКРаспределению = НДСКРаспределению - НДСПоСтроке;
					БазаРаспределения = БазаРаспределения - ЗначениеПоСтроке;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если Не Отказ Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			НоваяСтрока = Движения.РасходыПриУСН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.РасходыПриУСН.Записывать = Истина;
	
КонецПроцедуры

#Область УчетДоходовИРасходовПредпринимателя

// ОС
Функция ПодготовитьПараметрыПроведенияОСИП(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                    // <Строка,0> - имя списка в документе
	+ "Регистратор,"                                  // <ДокументСсылка>
	+ "Период,"                                       // <Дата>
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "НомерСтроки,"                                  // <Число>
	+ "ОсновноеСредство,"                             // <СправочникСсылка.ОсновныеСредства>
	+ "СпособОтраженияРасходовПоАмортизации,"         // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "СчетАмортизацииБУ,"                            // <ПланСчетовСсылка.Хозрасчетный>
	+ "ПервоначальнаяСтоимостьНУ,"                    // <Число(15, 2, Неотрицательный)>
	+ "НакопленнаяАмортизацияНУ,"                     // <Число(15, 2)>
	+ "РеквизитыДокументаОплаты,"                     // <Строка(50)>
	+ "ПодразделениеОрганизации";                     // <Ссылка на справочник подразделений>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"         // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                      // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВНалоговомУчете,"          // <Булево>
	+ "Регистратор,"                      // <ДокументСсылка>
	+ "Предприниматель";                  // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_ОСИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете
	 Или Не ЗначениеЗаполнено(ПараметрыПроведения.ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	// Передать 2 таблицы, чтобы проверить обязательные колонки обеих
	Параметры = ПодготовитьПараметрыПроведенияОСИП(ПараметрыПроведения.ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];		
	ТаблицаОС = Параметры.ТаблицаОС;
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Период");
	ТаблицаРеквизитов.Колонки.Добавить("ИмяСписка");
	ТаблицаРеквизитов.Колонки.Добавить("Организация");
	ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Период      = Реквизиты.Период;
	НоваяСтрока.Организация = Реквизиты.Организация;
	НоваяСтрока.Регистратор = Реквизиты.Регистратор;
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	НаборЗаписейДвижения = Движения.ИПМПЗ;
	
	СтруктураПараметров	= Новый Структура("ВидМПЗ");
	СтруктураПараметров.ВидМПЗ	= Перечисления.ВидыМПЗ.ОС;
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		НоваяСтрока	= НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период						= СтрокаОС.Период;
		НоваяСтрока.Регистратор					= СтрокаОС.Регистратор;
		НоваяСтрока.ХарактерДеятельности		= УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		НоваяСтрока.НоменклатурнаяГруппа		= УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		НоваяСтрока.Номенклатура				= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация					= СтрокаОС.Организация;
		НоваяСтрока.ВидМПЗ						= Перечисления.ВидыМПЗ.ОС;
		НоваяСтрока.Партия						= СтрокаОС.Регистратор;
		НоваяСтрока.ДокументОплаты				= СтрокаОС.Регистратор;
		НоваяСтрока.Сумма						= СтрокаОС.ПервоначальнаяСтоимостьНУ;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектУчета,
	|	ТаблицаОС.Регистратор КАК РасчетныйДокумент,
	|	ТаблицаОС.СпособОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	|	ТаблицаОС.СчетАмортизацииБУ КАК СчетНачисленияАмортизации,
	|	ТаблицаОС.НакопленнаяАмортизацияНУ КАК СуммаАмортизацииБУ,
	|	ТаблицаОС.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаОС.Регистратор КАК ДокументОплаты,
	|	0 КАК СуммаАмортизацииНУ,
	|	0 КАК СуммаАмортизацииПР,
	|	0 КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТаблицаНаправленийСписания
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаправленийСписания.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНаправленийСписания.ОбъектУчета,
	|	ТаблицаНаправленийСписания.РасчетныйДокумент,
	|	ТаблицаНаправленийСписания.НаправлениеАмортизации,
	|	ТаблицаНаправленийСписания.СчетНачисленияАмортизации,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииНУ,
	|	ТаблицаНаправленийСписания.Подразделение,
	|	ТаблицаНаправленийСписания.ДокументОплаты,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииБУ,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииПР,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииВР
	|ИЗ
	|	ТаблицаНаправленийСписания КАК ТаблицаНаправленийСписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаНаправленийСписания = Запрос.Выполнить().Выгрузить();	
	
	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаНаправленийСписания, ТаблицаРеквизитов, Отказ);
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	// При вводе начальных остатков амортизацию относим на основной деятельности
	УчетнаяПолитикаНУ.Вставить("ВестиУчетПоВидамДеятельностиИП", Ложь);
	
	ПрочиеРасходы = УчетДоходовИРасходовПредпринимателя.ПолучитьТаблицуРасходовПоАмортизации(ТаблицаЗатрат, УчетнаяПолитикаНУ);
	
	Движения.ИППрочиеРасходы.Записывать = Истина;
	
	Для Каждого Расходы Из ПрочиеРасходы Цикл
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Расходы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
	ТаблицаРеквизитов[0].Период = ПериодУчетнойПолитики;
	
	ТаблицаОС.Колонки.ОсновноеСредство.Имя         = "Номенклатура";
	ТаблицаОС.Колонки.Регистратор.Имя              = "ДокументОплаты";
	ТаблицаОС.Колонки.РеквизитыДокументаОплаты.Имя = "НомерДокументаОплаты";
	ТаблицаОС.Колонки.Добавить("ДатаДокументаОплаты");
	
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(ТаблицаОС, ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// НМА

Функция ПодготовитьПараметрыПроведенияНМАИП(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                    // <Строка,0> - имя списка в документе
	+ "Регистратор,"                                  // <ДокументСсылка>
	+ "Период,"                                       // <Дата>
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"                     // <Ссылка на справочник подразделений>
	+ "НомерСтроки,"                                  // <Число>
	+ "НематериальныйАктив,"                          // <СправочникСсылка.НематериальныеАктивы>
	+ "ПервоначальнаяСтоимостьНУ,"                    // <Число(15, 2)>
	+ "СпособОтраженияРасходов,"                      // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "СчетНачисленияАмортизацииБУ,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "НакопленнаяАмортизацияНУ,"                     // <Число(15, 2)>
	+ "РеквизитыДокументаОплаты";                     // <Строка(50)>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"         // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                      // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВНалоговомУчете,"          // <Булево>
	+ "Предприниматель,"                  // <Булево>
	+ "Регистратор";                      // <ДокументСсылка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_НМАИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете
	 Или Не ЗначениеЗаполнено(ПараметрыПроведения.ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияНМАИП(ПараметрыПроведения.ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];	
		
	ТаблицаНМА = Параметры.ТаблицаНМА;
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Период");
	ТаблицаРеквизитов.Колонки.Добавить("ИмяСписка");
	ТаблицаРеквизитов.Колонки.Добавить("Организация");	
	ТаблицаРеквизитов.Колонки.Добавить("Регистратор");	
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Период      = Реквизиты.Период;
	НоваяСтрока.Организация = Реквизиты.Организация;
	НоваяСтрока.Регистратор = Реквизиты.Регистратор;
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	НаборЗаписейДвижения = Движения.ИПМПЗ;
	
	СтруктураПараметров	= Новый Структура("ВидМПЗ");
	СтруктураПараметров.ВидМПЗ	= Перечисления.ВидыМПЗ.НМА;
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		НоваяСтрока	= НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период						= СтрокаНМА.Период;
		НоваяСтрока.Регистратор					= СтрокаНМА.Регистратор;
		НоваяСтрока.ХарактерДеятельности		= УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		НоваяСтрока.НоменклатурнаяГруппа		= УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		НоваяСтрока.Номенклатура				= СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация					= СтрокаНМА.Организация;
		НоваяСтрока.ВидМПЗ						= Перечисления.ВидыМПЗ.НМА;
		НоваяСтрока.Партия						= СтрокаНМА.Регистратор;
		НоваяСтрока.ДокументОплаты				= СтрокаНМА.Регистратор;
		НоваяСтрока.Сумма						= СтрокаНМА.ПервоначальнаяСтоимостьНУ;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ТаблицаНМА.Регистратор КАК РасчетныйДокумент,
	|	ТаблицаНМА.СпособОтраженияРасходов КАК НаправлениеАмортизации,
	|	ТаблицаНМА.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизации,
	|	ТаблицаНМА.НакопленнаяАмортизацияНУ КАК СуммаАмортизацииБУ,
	|	ТаблицаНМА.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаНМА.Регистратор КАК ДокументОплаты,
	|	0 КАК СуммаАмортизацииНУ,
	|	0 КАК СуммаАмортизацииПР,
	|	0 КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТаблицаНаправленийСписания
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаправленийСписания.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНаправленийСписания.ОбъектУчета,
	|	ТаблицаНаправленийСписания.РасчетныйДокумент,
	|	ТаблицаНаправленийСписания.НаправлениеАмортизации,
	|	ТаблицаНаправленийСписания.СчетНачисленияАмортизации,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииНУ,
	|	ТаблицаНаправленийСписания.Подразделение,
	|	ТаблицаНаправленийСписания.ДокументОплаты,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииБУ,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииПР,
	|	ТаблицаНаправленийСписания.СуммаАмортизацииВР
	|ИЗ
	|	ТаблицаНаправленийСписания КАК ТаблицаНаправленийСписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаНаправленийСписания = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаНаправленийСписания, ТаблицаРеквизитов, Отказ);
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	// При вводе начальных остатков амортизацию относим на основной деятельности
	УчетнаяПолитикаНУ.Вставить("ВестиУчетПоВидамДеятельностиИП", Ложь);
	
	ПрочиеРасходы = УчетДоходовИРасходовПредпринимателя.ПолучитьТаблицуРасходовПоАмортизации(ТаблицаЗатрат, УчетнаяПолитикаНУ);
	
	Движения.ИППрочиеРасходы.Записывать = Истина;
	
	Для Каждого Расходы Из ПрочиеРасходы Цикл
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Расходы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
	ТаблицаРеквизитов[0].Период = ПериодУчетнойПолитики;
	
	ТаблицаНМА.Колонки.НематериальныйАктив.Имя      = "Номенклатура";
	ТаблицаНМА.Колонки.Регистратор.Имя              = "ДокументОплаты";
	ТаблицаНМА.Колонки.РеквизитыДокументаОплаты.Имя = "НомерДокументаОплаты";
	ТаблицаНМА.Колонки.Добавить("ДатаДокументаОплаты");
	
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(ТаблицаНМА, ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// Налоги и сборы

Функция ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборамИП(
			ТаблицаРасчетыПоНалогамИСборам,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыПоНалогамИСборам

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка,0> - имя списка в документе
	+ "Регистратор,"          // <ДокументСсылка>
	+ "Период,"               // <Дата>
	+ "НомерСтроки,"          // <Число>
	+ "СчетУчета,"            // <План счетов бухгалтерского учета>
	+ "ВидПлатежаВБюджет,"    // <ПеречислениеСсылка.Виды платежей в бюджет (фонды)>
	+ "УровеньБюджета,"       // <ПеречислениеСсылка.Уровни бюджетов>
	+ "СтатьяЗатрат,"         // <СправочникСсылка.ПрочиеДоходыИРасходы>, <СправочникСсылка.СтатьиЗатрат>
	+ "НоменклатурнаяГруппа," // <СправочникСсылка.Номенклатурные группы>
	+ "ХарактерДеятельности," // <ПеречислениеСсылка.Характер деятельности>
	+ "Сумма,"                // <Число (15,2)>
	+ "СуммаКт,"              // <Число (15,2)>
	+ "РегистрацияВНалоговомОргане";     // <СправочникСсылка.РегистрацииВНалоговомОргане>

	Параметры.Вставить("ТаблицаРасчетыПоНалогамИСборам",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоНалогамИСборам, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыПоНалогамИСборамИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетыПоНалогамИСборам = ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам;
		
	Если ТаблицаРасчетыПоНалогамИСборам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияРасчетыПоНалогамИСборамИП(
		ТаблицаРасчетыПоНалогамИСборам,
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];	
		
	ТаблицаРасчетыПоНалогамИСборам = Параметры.ТаблицаРасчетыПоНалогамИСборам;
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ТаблицаРасчетыПоНалогамИСборам", ТаблицаРасчетыПоНалогамИСборам);
	
	// Переплата
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчетыПоНалогамИСборам.СчетУчета,
	|	ТаблицаРасчетыПоНалогамИСборам.Сумма КАК Сумма,
	|	ТаблицаРасчетыПоНалогамИСборам.Регистратор,
	|	ТаблицаРасчетыПоНалогамИСборам.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПереплата
	|ИЗ
	|	&ТаблицаРасчетыПоНалогамИСборам КАК ТаблицаРасчетыПоНалогамИСборам
	|ГДЕ
	|	ТаблицаРасчетыПоНалогамИСборам.СуммаКт = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПереплат.СчетУчета,
	|	ТаблицаПереплат.Сумма,
	|	ТаблицаПереплат.Регистратор
	|ИЗ
	|	ТаблицаПереплата КАК ТаблицаПереплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПереплат.НомерСтроки";
	
	ТаблицаПереплата = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейДвижения = Движения.ПрочиеРасчеты;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПереплата Цикл
		НоваяСтрока                     = НаборЗаписейДвижения.ДобавитьРасход();
		НоваяСтрока.Период				= Реквизиты.Период;
		НоваяСтрока.Организация		    = Реквизиты.Организация;
		НоваяСтрока.РасчетныйДокумент	= СтрокаТаблицы.Регистратор;
		НоваяСтрока.СчетУчета			= СтрокаТаблицы.СчетУчета;
		НоваяСтрока.Сумма				= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	// Задолженность
	Запрос.УстановитьПараметр("СчетНДФЛ", ПланыСчетов.Хозрасчетный.НДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчетыПоНалогамИСборам.СчетУчета,
	|	ТаблицаРасчетыПоНалогамИСборам.СуммаКт КАК Сумма,
	|	ТаблицаРасчетыПоНалогамИСборам.Регистратор,
	|	ТаблицаРасчетыПоНалогамИСборам.СтатьяЗатрат,
	|	ТаблицаРасчетыПоНалогамИСборам.НоменклатурнаяГруппа,
	|	ТаблицаРасчетыПоНалогамИСборам.ХарактерДеятельности,
	|	ТаблицаРасчетыПоНалогамИСборам.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаЗадолженность
	|ИЗ
	|	&ТаблицаРасчетыПоНалогамИСборам КАК ТаблицаРасчетыПоНалогамИСборам
	|ГДЕ
	|	ТаблицаРасчетыПоНалогамИСборам.Сумма = 0
	|	И НЕ ТаблицаРасчетыПоНалогамИСборам.СчетУчета = &СчетНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПереплат.СчетУчета,
	|	ТаблицаПереплат.Сумма,
	|	ТаблицаПереплат.Регистратор,
	|	ТаблицаПереплат.СтатьяЗатрат,
	|	ТаблицаПереплат.НоменклатурнаяГруппа,
	|	ТаблицаПереплат.ХарактерДеятельности
	|ИЗ
	|	ТаблицаЗадолженность КАК ТаблицаПереплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПереплат.НомерСтроки";
	
	ТаблицаЗадолженность = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейДвижения = Движения.ИППрочиеРасходы;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗадолженность Цикл
		НоваяСтрока					  = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период			  = Реквизиты.Период;
		НоваяСтрока.Организация		  = Реквизиты.Организация;
		НоваяСтрока.РасчетныйДокумент = СтрокаТаблицы.Регистратор;
		Если УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельностиИП Тогда
			НоваяСтрока.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности = СтрокаТаблицы.ХарактерДеятельности;
		Иначе
			НоваяСтрока.НоменклатурнаяГруппа = УчетнаяПолитикаНУ.ОсновнаяНоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности = УчетнаяПолитикаНУ.ОсновнойХарактерДеятельности;
		КонецЕсли;
		НоваяСтрока.СтатьяЗатрат = СтрокаТаблицы.СтатьяЗатрат;
		НоваяСтрока.СчетУчета = СтрокаТаблицы.СчетУчета;
		НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	ТаблицаЗадолженность.Свернуть("СчетУчета, Регистратор", "Сумма");
	
	НаборЗаписейДвижения = Движения.ПрочиеРасчеты;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗадолженность Цикл
		НоваяСтрока                     = НаборЗаписейДвижения.ДобавитьПриход();
		НоваяСтрока.Период				= Реквизиты.Период;
		НоваяСтрока.Организация		    = Реквизиты.Организация;
		НоваяСтрока.РасчетныйДокумент	= СтрокаТаблицы.Регистратор;
		НоваяСтрока.СчетУчета			= СтрокаТаблицы.СчетУчета;
		НоваяСтрока.Сумма				= СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
КонецПроцедуры

// Зарплата

Функция ПодготовитьПараметрыПроведенияРасчетыПоЗаработнойПлатеИП(
	ТаблицаРасчетыПоЗаработнойПлате,
	ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыСПодотчетнымиЛицами

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"              // <Строка,0> - имя списка в документе
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Период,"                 // <Дата>
	+ "НомерСтроки,"            // <Число>
	+ "СчетУчета,"              // <План счетов бухгалтерского учета>
	+ "РаботникОрганизации,"    // <СправочникСсылка.ФизическиеЛица>
	+ "Сумма,"                  // <Число (15,2)>
	+ "ВидНачисления,"          // <ПеречислениеСсылка.ИПВидыНачисленийУдержаний>
	+ "НоменклатурнаяГруппа,"   // <СправочникСсылка.НоменклатурныеГруппы>
	+ "ХарактерДеятельности,"   // <ПеречислениеСсылка.ХарактерДеятельности>
	+ "СтатьяЗатрат,"           // <СправочникСсылка.СтатьиЗатрат>, <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "ПериодРегистрации,"      // <Дата>
	+ "ВидУдержания,"           // <ПеречислениеСсылка.ИПВидыНачисленийУдержаний>
	+ "СуммаПодлежитУдержанию," // <Число (15,2)>
	+ "Получатель";             // <СправочникСсылка.Контрагенты>

	Параметры.Вставить("ТаблицаРасчетыПоЗаработнойПлате",
	ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоЗаработнойПлате, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
	ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_РасчетыПоЗаработнойПлатеИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		Возврат
	КонецЕсли;

	ТаблицаРасчетыПоЗаработнойПлате	= ПараметрыПроведения.ТаблицаРасчетыПоЗаработнойПлате;
	ТаблицаДепонентов				= ПараметрыПроведения.ТаблицаДепонентов;

	Если ТаблицаРасчетыПоЗаработнойПлате.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	
	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете
	 Или УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияРасчетыПоЗаработнойПлатеИП(
		ТаблицаРасчетыПоЗаработнойПлате,
		ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРасчетыПоЗаработнойПлате = Параметры.ТаблицаРасчетыПоЗаработнойПлате;
			
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ТаблицаРасчетыПоЗаработнойПлате", ТаблицаРасчетыПоЗаработнойПлате);
	Запрос.УстановитьПараметр("СчетУчетаЗаработнойПлаты", ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);	
	
	//Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчетыПоЗаработнойПлате.РаботникОрганизации КАК ФизЛицо,
	|	ТаблицаРасчетыПоЗаработнойПлате.Сумма + ТаблицаРасчетыПоЗаработнойПлате.СуммаПодлежитУдержанию КАК Сумма,
	|	ТаблицаРасчетыПоЗаработнойПлате.ВидНачисления,
	|	ТаблицаРасчетыПоЗаработнойПлате.НоменклатурнаяГруппа,
	|	ТаблицаРасчетыПоЗаработнойПлате.ХарактерДеятельности,
	|	ТаблицаРасчетыПоЗаработнойПлате.СтатьяЗатрат,
	|	ТаблицаРасчетыПоЗаработнойПлате.СчетУчета,
	|	ТаблицаРасчетыПоЗаработнойПлате.Регистратор,
	|	ТаблицаРасчетыПоЗаработнойПлате.НомерСтроки
	|ПОМЕСТИТЬ Начислено
	|ИЗ
	|	&ТаблицаРасчетыПоЗаработнойПлате КАК ТаблицаРасчетыПоЗаработнойПлате
	|ГДЕ
	|	ТаблицаРасчетыПоЗаработнойПлате.СчетУчета = &СчетУчетаЗаработнойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начислено.ФизЛицо,
	|	Начислено.Сумма,
	|	Начислено.ВидНачисления,
	|	Начислено.НоменклатурнаяГруппа,
	|	Начислено.ХарактерДеятельности,
	|	Начислено.СтатьяЗатрат,
	|	Начислено.СчетУчета,
	|	Начислено.Регистратор
	|ИЗ
	|	Начислено КАК Начислено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислено.НомерСтроки";
	
	ТаблицаНачислено = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейДвижения = Движения.ИПРасходыНаОплатуТруда;
	Для Каждого СтрокаТаблицы Из ТаблицаНачислено Цикл
		Если СтрокаТаблицы.Сумма > 0 Тогда
			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			НоваяСтрока.РасчетныйДокумент = СтрокаТаблицы.Регистратор;
			НоваяСтрока.ФизЛицо           = СтрокаТаблицы.ФизЛицо;
			Если УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельностиИП Тогда
				НоваяСтрока.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
				НоваяСтрока.ХарактерДеятельности = СтрокаТаблицы.ХарактерДеятельности;
			Иначе
				НоваяСтрока.НоменклатурнаяГруппа = УчетнаяПолитикаНУ.ОсновнаяНоменклатурнаяГруппа;
				НоваяСтрока.ХарактерДеятельности = УчетнаяПолитикаНУ.ОсновнойХарактерДеятельности;
			КонецЕсли;
			НоваяСтрока.СтатьяЗатрат           = СтрокаТаблицы.СтатьяЗатрат;
			НоваяСтрока.ВидНачисленияУдержания = СтрокаТаблицы.ВидНачисления;
			НоваяСтрока.Сумма                  = СтрокаТаблицы.Сумма;
		КонецЕсли;		
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	ТаблицаНачислено.Свернуть("ФизЛицо, Регистратор", "Сумма");
	НаборЗаписейДвижения = Движения.ПрочиеРасчеты;
	Для Каждого СтрокаТаблицы Из ТаблицаНачислено Цикл
		Если СтрокаТаблицы.Сумма <> 0 Тогда
			Если СтрокаТаблицы.Сумма > 0 Тогда	
				НоваяСтрока = НаборЗаписейДвижения.ДобавитьПриход();
			Иначе
				НоваяСтрока = НаборЗаписейДвижения.ДобавитьРасход();
			КонецЕсли;
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			НоваяСтрока.РасчетныйДокумент = СтрокаТаблицы.Регистратор;
			НоваяСтрока.Контрагент        = СтрокаТаблицы.ФизЛицо;
			НоваяСтрока.Сумма             = ?(СтрокаТаблицы.Сумма > 0, СтрокаТаблицы.Сумма, -СтрокаТаблицы.Сумма);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	// Удержания
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчетыПоЗаработнойПлате.РаботникОрганизации КАК ФизЛицо,
	|	ТаблицаРасчетыПоЗаработнойПлате.СуммаПодлежитУдержанию КАК Сумма,
	|	ТаблицаРасчетыПоЗаработнойПлате.НоменклатурнаяГруппа,
	|	ТаблицаРасчетыПоЗаработнойПлате.ХарактерДеятельности,
	|	ТаблицаРасчетыПоЗаработнойПлате.СтатьяЗатрат,
	|	ТаблицаРасчетыПоЗаработнойПлате.Регистратор,
	|	ТаблицаРасчетыПоЗаработнойПлате.ВидУдержания КАК ВидНачисления,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыПоЗаработнойПлате.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноНДФЛ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаРасчетыПоЗаработнойПлате.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИНАЧЕ ТаблицаРасчетыПоЗаработнойПлате.Получатель
	|			КОНЕЦ
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыПоЗаработнойПлате.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноНДФЛ)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами)
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаРасчетыПоЗаработнойПлате.НомерСтроки
	|ПОМЕСТИТЬ Удержано
	|ИЗ
	|	&ТаблицаРасчетыПоЗаработнойПлате КАК ТаблицаРасчетыПоЗаработнойПлате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержано.ФизЛицо,
	|	Удержано.Сумма,
	|	Удержано.НоменклатурнаяГруппа,
	|	Удержано.ХарактерДеятельности,
	|	Удержано.СтатьяЗатрат,
	|	Удержано.Регистратор,
	|	Удержано.ВидНачисления,
	|	Удержано.Контрагент,
	|	Удержано.СчетУчета
	|ИЗ
	|	Удержано КАК Удержано
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержано.НомерСтроки";
	
	ТаблицаУдержано = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейДвижения = Движения.ИПРасходыНаОплатуТруда;
	Для Каждого СтрокаТаблицы Из ТаблицаУдержано Цикл
		Если СтрокаТаблицы.Сумма > 0 Тогда
			НоваяСтрока                   = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			НоваяСтрока.РасчетныйДокумент = СтрокаТаблицы.Регистратор;
			НоваяСтрока.ФизЛицо           = СтрокаТаблицы.ФизЛицо;
			Если УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельностиИП Тогда
				НоваяСтрока.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
				НоваяСтрока.ХарактерДеятельности = СтрокаТаблицы.ХарактерДеятельности;
			Иначе
				НоваяСтрока.НоменклатурнаяГруппа = УчетнаяПолитикаНУ.ОсновнаяНоменклатурнаяГруппа;
				НоваяСтрока.ХарактерДеятельности = УчетнаяПолитикаНУ.ОсновнойХарактерДеятельности;
			КонецЕсли;
			НоваяСтрока.СтатьяЗатрат           = СтрокаТаблицы.СтатьяЗатрат;
			НоваяСтрока.ВидНачисленияУдержания = СтрокаТаблицы.ВидНачисления;
			НоваяСтрока.Сумма                  = СтрокаТаблицы.Сумма;
			НоваяСтрока.Контрагент             = СтрокаТаблицы.Контрагент;
		КонецЕсли;		
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
	ТаблицаУдержано.Свернуть("СчетУчета, Контрагент, Регистратор", "Сумма");
	НаборЗаписейДвижения = Движения.ПрочиеРасчеты;
	Для Каждого СтрокаТаблицы Из ТаблицаУдержано Цикл
		Если СтрокаТаблицы.Сумма <> 0 Тогда
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьПриход();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			НоваяСтрока.РасчетныйДокумент = СтрокаТаблицы.Регистратор;
			НоваяСтрока.Контрагент        = СтрокаТаблицы.Контрагент;
			НоваяСтрока.СчетУчета         = СтрокаТаблицы.СчетУчета;
			НоваяСтрока.Сумма             = СтрокаТаблицы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
КонецПроцедуры

// ТМЦ

Функция ПодготовитьПараметрыПроведенияНоменклатуры_МатериалыИП(
			ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации,
			ТаблицаМатериалыПереданныеВПереработку,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Регистратор,"                              // <ДокументСсылка>
	+ "Период,"                                   // <Дата>
	+ "НомерСтроки,"                              // <Число>
	+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"                             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                                   // <ДокументСсылка>
	+ "Количество,"                               // <Число (15,3)>
	+ "Сумма,"                                    // <Число (15,2)>
	+ "РасчетныйДокумент,"                        // <ДокументСсылка>
	+ "НДС,"                                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"                     // <Булево>
	+ "Оплачен,"                                  // <Булево>
	+ "НоменклатурнаяГруппа,"                     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                                   // <Булево>
	+ "Ключ";                                     // <Строка (36)>

	Параметры.Вставить("ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаМатериалыПереданныеВПереработку

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаМатериалыПереданныеВПереработку",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМатериалыПереданныеВПереработку, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_ТоварыИП(
			ТаблицаТоварыВРозничнойТорговлеАТТ,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыВРозничнойТорговлеАТТ

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "ТорговаяНаценка,"          // <Число (15,2)>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаТоварыВРозничнойТорговлеАТТ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыВРозничнойТорговлеАТТ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_ГотоваяПродукцияИПолуфабрикатыИП(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаОбороты,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаОбороты

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "НомерСтроки,"              // <Число>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.ВидыМПЗ>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>	
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаОбороты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОбороты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПроведенияНоменклатуры_КапитальныеВложенияИП(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНоменклатураНаСкладе

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "РасчетныйДокумент,"        // <ДокументСсылка>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Оплачен,"                  // <Булево>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Услуга,"                   // <Булево>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаНоменклатураНаСкладе",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНоменклатураНаСкладе, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_НоменклатураИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Материалы
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
			И Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		Возврат;
	КонецЕсли;
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	Если Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда

		ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации = ПараметрыПроведения.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации;
		ТаблицаМатериалыПереданныеВПереработку      = ПараметрыПроведения.ТаблицаМатериалыПереданныеВПереработку;
		ТаблицаНоменклатураНаСкладе                 = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если (ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации.Количество() = 0)
			И (ТаблицаМатериалыПереданныеВПереработку.Количество() = 0)
			И (ТаблицаНоменклатураНаСкладе.Количество() = 0) Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_МатериалыИП(
			ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации,
			ТаблицаМатериалыПереданныеВПереработку,
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];
		Если Реквизиты.Предприниматель И Реквизиты.ОтражатьВНалоговомУчете Тогда
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(Параметры.ТаблицаНоменклатураНаСкладе, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(Параметры.ТаблицаМатериалыПереданныеВПереработку, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(Параметры.ТаблицаСпецодеждаИСпецоснасткаВЭксплуатации, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		
		ТаблицаТоварыВРозничнойТорговлеАТТ = ПараметрыПроведения.ТаблицаТоварыВРозничнойТорговлеАТТ;
		ТаблицаТоварыВРозничнойТорговлеНТТ = ПараметрыПроведения.ТаблицаТоварыВРозничнойТорговлеНТТ;
		ТаблицаНоменклатураНаСкладе        = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если (ТаблицаТоварыВРозничнойТорговлеАТТ.Количество() = 0)
			И (ТаблицаТоварыВРозничнойТорговлеНТТ.Количество() = 0)
			И (ТаблицаНоменклатураНаСкладе.Количество() = 0) Тогда
			Возврат;
		КонецЕсли;
		
		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_ТоварыИП(
			ТаблицаТоварыВРозничнойТорговлеАТТ,			
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];
		Если Реквизиты.Предприниматель И Реквизиты.ОтражатьВНалоговомУчете Тогда			
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(Параметры.ТаблицаТоварыВРозничнойТорговлеАТТ, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(Параметры.ТаблицаНоменклатураНаСкладе, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда		
		
		ТаблицаНоменклатураНаСкладе = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;

		Если ТаблицаНоменклатураНаСкладе.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_КапитальныеВложенияИП(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];
		Если Реквизиты.Предприниматель И Реквизиты.ОтражатьВНалоговомУчете Тогда
			
			ТаблицаНоменклатураНаСкладе = Параметры.ТаблицаНоменклатураНаСкладе.СкопироватьКолонки();
			СубконтоНоменклатура			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			Для Каждого СтрокаТаблицы ИЗ Параметры.ТаблицаНоменклатураНаСкладе Цикл
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
				Для Индекс = 1 По 3 Цикл
					Если СвойстваСчета["ВидСубконто" + Индекс] = СубконтоНоменклатура Тогда
						НоваяСтрока =  ТаблицаНоменклатураНаСкладе.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						Прервать;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ТаблицаТМЦ = ПодготовитьТаблицуТоваровИП(ТаблицаНоменклатураНаСкладе, УчетнаяПолитикаНУ, Реквизиты.Регистратор);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
			
		КонецЕсли;

	ИначеЕсли Реквизиты.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		ТаблицаНоменклатураНаСкладе = ПараметрыПроведения.ТаблицаНоменклатураНаСкладе;
		ТаблицаОбороты              = ПараметрыПроведения.ТаблицаОбороты;
		Если ТаблицаНоменклатураНаСкладе.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		// Передать таблицы, чтобы проверить обязательные колонки
		Параметры = ПодготовитьПараметрыПроведенияНоменклатуры_ГотоваяПродукцияИПолуфабрикатыИП(
			ТаблицаНоменклатураНаСкладе,
			ТаблицаОбороты,
			ТаблицаРеквизиты);

		Реквизиты = Параметры.Реквизиты[0];
		
		Если Реквизиты.Предприниматель И Реквизиты.ОтражатьВНалоговомУчете Тогда			
			
			ТаблицаПродукции = Параметры.ТаблицаНоменклатураНаСкладе.Скопировать();
			ТаблицаТМЦ = ПодготовитьТаблицуПродукцииИП(ПараметрыПроведения.ТаблицаНоменклатураНаСкладе, ТаблицаОбороты, УчетнаяПолитикаНУ);		
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);	
			
			ТаблицаОбороты = ПодготовитьТаблицуОборотовИП(ТаблицаПродукции, ТаблицаОбороты, УчетнаяПолитикаНУ);
			
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаОбороты, "ИПМПЗОбороты", , Движения);
			
			ТаблицаОбороты.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
			ТаблицаОбороты.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
			ТаблицаОбороты.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
			
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаОбороты, "ИПМПЗ", "Приход", Движения);
			ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаОбороты, "ИПМПЗ", "Расход", Движения);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваровИП(ТаблицаТМЦ, УчетнаяПолитикаНУ, Регистратор)
	
	ТаблицаТМЦ.Колонки.Добавить("ХарактерДеятельности");
	ТаблицаТМЦ.Колонки.Добавить("ВидМПЗ");
	ТаблицаТМЦ.Колонки.Добавить("ДокументОплаты");
	
	Если ТаблицаТМЦ.Колонки.Найти("ТорговаяНаценка") <> Неопределено Тогда
		КорректироватьСумму = Истина;
	Иначе
		КорректироватьСумму = Ложь;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТМЦ Цикл
		
		СуммаКорректировки = 0;
		Если КорректироватьСумму Тогда
			СуммаКорректировки = СтрокаТаблицы.ТорговаяНаценка;
		КонецЕсли;
		
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС - СуммаКорректировки;
		Иначе
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаКорректировки;
		КонецЕсли;
		
		ВидМПЗ	= УчетДоходовИРасходовПредпринимателя.ВидМПЗПоСчетуУчета(СтрокаТаблицы.СчетУчета);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТаблицы);
		СтруктураПараметров.ВидМПЗ	= ВидМПЗ;
		
		СтрокаТаблицы.ВидМПЗ = ВидМПЗ;
		СтрокаТаблицы.НоменклатурнаяГруппа = УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		СтрокаТаблицы.ХарактерДеятельности = УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
		Если СтрокаТаблицы.Оплачен Тогда
			СтрокаТаблицы.ДокументОплаты = Регистратор;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТМЦ;

КонецФункции

Функция ПодготовитьТаблицуПродукцииИП(ТаблицаТМЦ, ТаблицаОбороты, УчетнаяПолитикаНУ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТМЦ", ТаблицаТМЦ);
	Запрос.УстановитьПараметр("ТаблицаОбороты", ТаблицаОбороты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТМЦ.Номенклатура,
	|	ТаблицаТМЦ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаТМЦ.Услуга КАК Услуга,
	|	ТаблицаТМЦ.Партия,
	|	ТаблицаТМЦ.Склад,
	|	ТаблицаТМЦ.СчетУчета,
	|	ТаблицаТМЦ.Количество,
	|	ТаблицаТМЦ.Сумма,
	|	ТаблицаТМЦ.Ключ,
	|	ТаблицаТМЦ.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПродукция
	|ИЗ
	|	&ТаблицаТМЦ КАК ТаблицаТМЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.Ключ,
	|	ТаблицаОбороты.Сумма,
	|	ТаблицаОбороты.НДС,
	|	ТаблицаОбороты.НДСВключенВстоимость,
	|	ТаблицаОбороты.Регистратор
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&ТаблицаОбороты КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Услуга,
	|	ТаблицаПродукция.НоменклатурнаяГруппа,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Склад,
	|	ВЫБОР
	|		КОГДА Обороты.Сумма ЕСТЬ NULL 
	|			ТОГДА Обороты.Регистратор
	|	КОНЕЦ КАК ДокументОплаты,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.Количество,
	|	СУММА(ВЫБОР
	|			КОГДА Обороты.Сумма ЕСТЬ NULL 
	|				ТОГДА ТаблицаПродукция.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Обороты.НДСВключенВстоимость
	|						ТОГДА Обороты.Сумма - Обороты.НДС
	|					ИНАЧЕ Обороты.Сумма
	|				КОНЕЦ
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Обороты.НДС) КАК НДС,
	|	СУММА(Обороты.Сумма) КАК Стоимость
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО ТаблицаПродукция.Ключ = Обороты.Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Услуга,
	|	ТаблицаПродукция.НоменклатурнаяГруппа,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Склад,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.Сумма ЕСТЬ NULL 
	|			ТОГДА Обороты.Регистратор
	|	КОНЕЦ,
	|	ТаблицаПродукция.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ХарактерДеятельности");
	Результат.Колонки.Добавить("ВидМПЗ");
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета");
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		ВидМПЗ = УчетДоходовИРасходовПредпринимателя.ВидМПЗПоСчетуУчета(СтрокаТаблицы.СчетУчета);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТаблицы);
		СтруктураПараметров.ВидМПЗ	= ВидМПЗ;
		
		СтрокаТаблицы.ВидМПЗ = ВидМПЗ;
		СтрокаТаблицы.НоменклатурнаяГруппа = УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		СтрокаТаблицы.ХарактерДеятельности = УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуОборотовИП(ТаблицаТМЦ, ТаблицаОбороты, УчетнаяПолитикаНУ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТМЦ", ТаблицаТМЦ);
	Запрос.УстановитьПараметр("ТаблицаОбороты", ТаблицаОбороты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТМЦ.Номенклатура КАК Номенклатура,
	|	ТаблицаТМЦ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаТМЦ.Партия КАК Партия,
	|	ТаблицаТМЦ.СчетУчета КАК СчетУчета,
	|	ТаблицаТМЦ.Ключ КАК Ключ,
	|	ТаблицаТМЦ.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаТМЦ КАК ТаблицаТМЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.Номенклатура КАК Номенклатура,
	|	ТаблицаОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ТаблицаОбороты.Партия КАК Партия,
	|	ТаблицаОбороты.Количество КАК Количество,
	|	ТаблицаОбороты.Сумма КАК Сумма,
	|	ТаблицаОбороты.НДС КАК НДС,
	|	ТаблицаОбороты.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	ТаблицаОбороты.Ключ КАК Ключ
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&ТаблицаОбороты КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	ТаблицаПродукции.Номенклатура КАК НоменклатураПоступившая,
	|	ТаблицаПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаПродукции.Партия КАК ПартияПоступившейНоменклатуры,
	|	ТаблицаПродукции.СчетУчета
	|ИЗ
	|	Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПродукции КАК ТаблицаПродукции
	|		ПО Обороты.Ключ = ТаблицаПродукции.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукции.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ХарактерДеятельности");
	Результат.Колонки.Добавить("ВидПоступившегоМПЗ");
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета");
	
	Для Каждого СтрокаТаблицы Из Результат Цикл	
		
		ВидМПЗ	= УчетДоходовИРасходовПредпринимателя.ВидМПЗПоСчетуУчета(СтрокаТаблицы.СчетУчета);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТаблицы);
		СтруктураПараметров.ВидМПЗ	= ВидМПЗ;
		
		СтрокаТаблицы.ВидПоступившегоМПЗ	= ВидМПЗ;
		СтрокаТаблицы.НоменклатурнаяГруппа	= УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		СтрокаТаблицы.ХарактерДеятельности	= УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

// Товары отгруженные

Функция ПодготовитьПараметрыПроведенияТоварыОтгруженныеИП(
			ТаблицаТоварыОтгруженные,
			ТаблицаОбороты,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТоварыОтгруженные

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СчетУчета,"                // <План счетов бухгалтерского учета>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.Виды МПЗ>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "Покупатель,"               // <СправочникСсылка.Контрагент>
	+ "ДоговорПокупателя,"        // <СправочникСсылка.Договор контрагента>
	+ "ХарактерДеятельности,"     // <ПеречислениеСсылка.Характер деятельности>
	+ "ДокументОтгрузки,"         // <ДокументСсылка>
	+ "Оплачен,"                  // <Булево>	
	+ "Поставщик,"                // <СправочникСсылка.Контрагент>
	+ "ДоговорПоставщика,"        // <СправочникСсылка.Договор контрагента>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Валюта,"                   // <СправочникСсылка.Валюта>
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаТоварыОтгруженные",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыОтгруженные, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаОбороты

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "НомерСтроки,"              // <Число>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.ВидыМПЗ>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>	
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаОбороты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОбороты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_ТоварыОтгруженныеИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Возврат;
	КонецЕсли;

	ТаблицаТоварыОтгруженные = ПараметрыПроведения.ТаблицаТоварыОтгруженныеИП;
	ТаблицаОбороты           = ПараметрыПроведения.ТаблицаОбороты;

	Если ТаблицаТоварыОтгруженные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияТоварыОтгруженныеИП(
		ТаблицаТоварыОтгруженные,
		ТаблицаОбороты,
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
		
	ТаблицаТоварыОтгруженные = Параметры.ТаблицаТоварыОтгруженные;
	ТаблицаОбороты           = Параметры.ТаблицаОбороты;
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	ТаблицаТМЦ = ПодготовитьТаблицуОтгрузкаОплаченногоИП(ТаблицаТоварыОтгруженные);
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
	
	ТаблицаТМЦ = ПодготовитьТаблицуОтгрузкаПриобретенногоИП(ТаблицаТоварыОтгруженные);
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
	
	ТаблицаТМЦ = ПодготовитьТаблицуОтгрузкаСобственногоИП(ТаблицаТоварыОтгруженные, ТаблицаОбороты);
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
	
	ТаблицаТМЦ = ПодготовитьТаблицуОборотыОтгруженоИП(ТаблицаТоварыОтгруженные, ТаблицаОбороты);		
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗОбороты", , Движения);
	
	ТаблицаТМЦ.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
	ТаблицаТМЦ.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
	ТаблицаТМЦ.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
	ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Расход", Движения);
	
КонецПроцедуры

Функция ПодготовитьТаблицуОтгрузкаОплаченногоИП(ТаблицаТоварыОтгруженные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыОтгруженные", ТаблицаТоварыОтгруженные);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыОтгруженные.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыОтгруженные.ВидМПЗ КАК ВидМПЗ,
	|	ТаблицаТоварыОтгруженные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаТоварыОтгруженные.Покупатель КАК Покупатель,
	|	ТаблицаТоварыОтгруженные.ДоговорПокупателя КАК ДоговорПокупателя,
	|	ТаблицаТоварыОтгруженные.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ТаблицаТоварыОтгруженные.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТаблицаТоварыОтгруженные.Партия КАК Партия,
	|	ТаблицаТоварыОтгруженные.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТоварыОтгруженные.НДСВключенВстоимость
	|			ТОГДА ТаблицаТоварыОтгруженные.Сумма - ТаблицаТоварыОтгруженные.НДС
	|		ИНАЧЕ ТаблицаТоварыОтгруженные.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаТоварыОтгруженные.НДС КАК НДС,
	|	ТаблицаТоварыОтгруженные.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	ТаблицаТоварыОтгруженные.Регистратор КАК ДокументОплаты,
	|	ТаблицаТоварыОтгруженные.СчетУчета КАК СчетУчета,
	|	ТаблицаТоварыОтгруженные.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТоварыОтгруженные
	|ИЗ
	|	&ТаблицаТоварыОтгруженные КАК ТаблицаТоварыОтгруженные
	|ГДЕ
	|	ТаблицаТоварыОтгруженные.Оплачен = ИСТИНА
	|	И ТаблицаТоварыОтгруженные.СчетУчета <> &СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыОтгруженные.Номенклатура,
	|	ВТ_ТоварыОтгруженные.ВидМПЗ,
	|	ВТ_ТоварыОтгруженные.НоменклатурнаяГруппа,
	|	ВТ_ТоварыОтгруженные.Покупатель,
	|	ВТ_ТоварыОтгруженные.ДоговорПокупателя,
	|	ВТ_ТоварыОтгруженные.ХарактерДеятельности,
	|	ВТ_ТоварыОтгруженные.ДокументОтгрузки,
	|	ВТ_ТоварыОтгруженные.Партия,
	|	ВТ_ТоварыОтгруженные.Количество,
	|	ВТ_ТоварыОтгруженные.Сумма,
	|	ВТ_ТоварыОтгруженные.НДС,
	|	ВТ_ТоварыОтгруженные.НДСВключенВстоимость,
	|	ВТ_ТоварыОтгруженные.ДокументОплаты,
	|	ВТ_ТоварыОтгруженные.СчетУчета
	|ИЗ
	|	ВТ_ТоварыОтгруженные КАК ВТ_ТоварыОтгруженные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыОтгруженные.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПодготовитьТаблицуОтгрузкаПриобретенногоИП(ТаблицаТоварыОтгруженные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыОтгруженные", ТаблицаТоварыОтгруженные);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыОтгруженные.Номенклатура,
	|	ТаблицаТоварыОтгруженные.ВидМПЗ,
	|	ТаблицаТоварыОтгруженные.НоменклатурнаяГруппа,
	|	ТаблицаТоварыОтгруженные.Покупатель,
	|	ТаблицаТоварыОтгруженные.ДоговорПокупателя,
	|	ТаблицаТоварыОтгруженные.ХарактерДеятельности,
	|	ТаблицаТоварыОтгруженные.ДокументОтгрузки,
	|	ТаблицаТоварыОтгруженные.Поставщик,
	|	ТаблицаТоварыОтгруженные.ДоговорПоставщика,
	|	ТаблицаТоварыОтгруженные.Партия,
	|	ТаблицаТоварыОтгруженные.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТоварыОтгруженные.НДСВключенВстоимость
	|			ТОГДА ТаблицаТоварыОтгруженные.Сумма - ТаблицаТоварыОтгруженные.НДС
	|		ИНАЧЕ ТаблицаТоварыОтгруженные.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаТоварыОтгруженные.НДС,
	|	ТаблицаТоварыОтгруженные.НДСВключенВстоимость,
	|	ТаблицаТоварыОтгруженные.СчетУчета,
	|	ТаблицаТоварыОтгруженные.Оплачен,
	|	ТаблицаТоварыОтгруженные.НомерСтроки
	|ПОМЕСТИТЬ ОтгрузкаПриобретенного
	|ИЗ
	|	&ТаблицаТоварыОтгруженные КАК ТаблицаТоварыОтгруженные
	|ГДЕ
	|	ТаблицаТоварыОтгруженные.Оплачен = ЛОЖЬ
	|	И ТаблицаТоварыОтгруженные.СчетУчета <> &СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаПриобретенного.Номенклатура,
	|	ОтгрузкаПриобретенного.ВидМПЗ,
	|	ОтгрузкаПриобретенного.НоменклатурнаяГруппа,
	|	ОтгрузкаПриобретенного.Покупатель,
	|	ОтгрузкаПриобретенного.ДоговорПокупателя,
	|	ОтгрузкаПриобретенного.ХарактерДеятельности,
	|	ОтгрузкаПриобретенного.ДокументОтгрузки,
	|	ОтгрузкаПриобретенного.Поставщик,
	|	ОтгрузкаПриобретенного.ДоговорПоставщика,
	|	ОтгрузкаПриобретенного.Партия,
	|	ОтгрузкаПриобретенного.Количество,
	|	ОтгрузкаПриобретенного.Сумма,
	|	ОтгрузкаПриобретенного.НДС,
	|	ОтгрузкаПриобретенного.НДСВключенВстоимость,
	|	ОтгрузкаПриобретенного.СчетУчета,
	|	ОтгрузкаПриобретенного.Оплачен
	|ИЗ
	|	ОтгрузкаПриобретенного КАК ОтгрузкаПриобретенного
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаПриобретенного.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПодготовитьТаблицуОтгрузкаСобственногоИП(ТаблицаТоварыОтгруженные, ТаблицаОбороты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыОтгруженные", ТаблицаТоварыОтгруженные);
	Запрос.УстановитьПараметр("ТаблицаОбороты", ТаблицаОбороты);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыОтгруженные.Номенклатура,
	|	ТаблицаТоварыОтгруженные.ВидМПЗ,
	|	ТаблицаТоварыОтгруженные.Сумма,
	|	ТаблицаТоварыОтгруженные.НДС,
	|	ТаблицаТоварыОтгруженные.НоменклатурнаяГруппа,
	|	ТаблицаТоварыОтгруженные.Покупатель,
	|	ТаблицаТоварыОтгруженные.ДоговорПокупателя,
	|	ТаблицаТоварыОтгруженные.ХарактерДеятельности,
	|	ТаблицаТоварыОтгруженные.ДокументОтгрузки,
	|	ТаблицаТоварыОтгруженные.Партия,
	|	ТаблицаТоварыОтгруженные.Количество,
	|	ТаблицаТоварыОтгруженные.СчетУчета,
	|	ТаблицаТоварыОтгруженные.Ключ,
	|	ТаблицаТоварыОтгруженные.НомерСтроки
	|ПОМЕСТИТЬ ОтгрузкаСобственного
	|ИЗ
	|	&ТаблицаТоварыОтгруженные КАК ТаблицаТоварыОтгруженные
	|ГДЕ
	|	ТаблицаТоварыОтгруженные.СчетУчета = &СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.НДСВключенВстоимость,
	|	ТаблицаОбороты.Сумма,
	|	ТаблицаОбороты.НДС,
	|	ТаблицаОбороты.Ключ
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&ТаблицаОбороты КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА Обороты.НДСВключенВстоимость
	|					ТОГДА Обороты.Сумма - Обороты.НДС
	|				ИНАЧЕ Обороты.Сумма
	|			КОНЕЦ, ОтгрузкаСобственного.Сумма)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Обороты.НДС, ОтгрузкаСобственного.НДС)) КАК НДС,
	|	ОтгрузкаСобственного.Номенклатура,
	|	ОтгрузкаСобственного.ВидМПЗ,
	|	ОтгрузкаСобственного.НоменклатурнаяГруппа,
	|	ОтгрузкаСобственного.Покупатель,
	|	ОтгрузкаСобственного.ДоговорПокупателя,
	|	ОтгрузкаСобственного.ХарактерДеятельности,
	|	ОтгрузкаСобственного.ДокументОтгрузки,
	|	ОтгрузкаСобственного.Партия,
	|	ОтгрузкаСобственного.Количество,
	|	ОтгрузкаСобственного.СчетУчета
	|ИЗ
	|	ОтгрузкаСобственного КАК ОтгрузкаСобственного
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО ОтгрузкаСобственного.Ключ = Обороты.Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгрузкаСобственного.ДоговорПокупателя,
	|	ОтгрузкаСобственного.Покупатель,
	|	ОтгрузкаСобственного.ХарактерДеятельности,
	|	ОтгрузкаСобственного.Партия,
	|	ОтгрузкаСобственного.ДокументОтгрузки,
	|	ОтгрузкаСобственного.Номенклатура,
	|	ОтгрузкаСобственного.НоменклатурнаяГруппа,
	|	ОтгрузкаСобственного.ВидМПЗ,
	|	ОтгрузкаСобственного.Количество,
	|	ОтгрузкаСобственного.СчетУчета,
	|	ОтгрузкаСобственного.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаСобственного.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПодготовитьТаблицуОборотыОтгруженоИП(ТаблицаТоварыОтгруженные, ТаблицаОбороты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыОтгруженные", ТаблицаТоварыОтгруженные);
	Запрос.УстановитьПараметр("ТаблицаОбороты", ТаблицаОбороты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыОтгруженные.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыОтгруженные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаТоварыОтгруженные.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ТаблицаТоварыОтгруженные.Партия КАК Партия,
	|	ТаблицаТоварыОтгруженные.ВидМПЗ КАК ВидМПЗ,
	|	ТаблицаТоварыОтгруженные.Ключ КАК Ключ,
	|	ТаблицаТоварыОтгруженные.НомерСтроки
	|ПОМЕСТИТЬ ОтгрузкаСобственного
	|ИЗ
	|	&ТаблицаТоварыОтгруженные КАК ТаблицаТоварыОтгруженные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.Номенклатура КАК Номенклатура,
	|	ТаблицаОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ТаблицаОбороты.Партия КАК Партия,
	|	ТаблицаОбороты.Количество КАК Количество,
	|	ТаблицаОбороты.Сумма КАК Сумма,
	|	ТаблицаОбороты.НДС КАК НДС,
	|	ТаблицаОбороты.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	ТаблицаОбороты.Ключ КАК Ключ
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&ТаблицаОбороты КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	МПЗ.Номенклатура КАК НоменклатураПоступившая,
	|	МПЗ.Партия КАК ПартияПоступившейНоменклатуры,
	|	МПЗ.ВидМПЗ КАК ВидПоступившегоМПЗ,
	|	МПЗ.НоменклатурнаяГруппа,
	|	МПЗ.ХарактерДеятельности
	|ИЗ
	|	Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтгрузкаСобственного КАК МПЗ
	|		ПО Обороты.Ключ = МПЗ.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МПЗ.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Прочие непризанные расходы

Функция ПодготовитьПараметрыПроведенияПрочиеНепризнанныеРасходыИП(
			МПЗРеализованныеИП,
			ПрочиеРасходыИП,
			ДопРасходыИП,
			ТаблицаОбороты,
			ТаблицаРеквизиты);

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.МПЗРеализованныеИП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.Виды МПЗ>
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "ХарактерДеятельности,"     // <ПеречислениеСсылка.Характер деятельности>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>
	+ "Собственный,"              // <Булево>	
	+ "СтатусыОплатыРасходовИП,"  // <ПеречислениеСсылка.СтатусыОплатыРасходовИП>
	+ "Выручка,"                  // <Число (15,2)>
	+ "НДСНачисленный,"           // <Число (15,2)>
	+ "РасчетныйДокумент,"         // <ДокументСсылка>
	+ "Услуга,"                    // <Булево>	
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("МПЗРеализованныеИП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(МПЗРеализованныеИП, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ПрочиеРасходыИП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.Виды МПЗ>
	+ "СтатьяЗатрат,"             // <СправочникСсылка.СтатьиЗатрат>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>	
	+ "НоменклатурнаяГруппа,"     // <СправочникСсылка.Номенклатурные группы>
	+ "ХарактерДеятельности";     // <ПеречислениеСсылка.Характер деятельности>

	Параметры.Вставить("ПрочиеРасходыИП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ПрочиеРасходыИП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ДопРасходыИП

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Период,"                   // <Дата>
	+ "НомерСтроки,"              // <Число>
	+ "СтатьяЗатрат,"             // <СправочникСсылка.СтатьиЗатрат>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Оплачен,"                  // <Булево>	
	+ "МПЗ,"                      // <СправочникСсылка.Номенклатура>
	+ "ПартияМПЗ,"                // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость";     // <Булево>	

	Параметры.Вставить("ДопРасходыИП",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ДопРасходыИП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаОбороты

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                // <Строка,0> - имя списка в документе
	+ "Регистратор,"              // <ДокументСсылка>
	+ "НомерСтроки,"              // <Число>
	+ "Номенклатура,"             // <СправочникСсылка.НематериальныеАктивы>, <СправочникСсылка.ОбъектыСтроительства>, <СправочникСсылка.Номенклатура>
	+ "ВидМПЗ,"                   // <ПеречислениеСсылка.ВидыМПЗ>
	+ "Партия,"                   // <ДокументСсылка>
	+ "Количество,"               // <Число (15,3)>
	+ "Сумма,"                    // <Число (15,2)>
	+ "НДС,"                      // <Число (15,2)>
	+ "НДСВключенВстоимость,"     // <Булево>	
	+ "Ключ";                     // <Строка (36)>

	Параметры.Вставить("ТаблицаОбороты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОбороты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "Предприниматель,"                // <Булево>
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "ОтражатьВНалоговомУчете";        // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвижения_ПрочиеНепризнанныеРасходыИП(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП Тогда
		Возврат;
	КонецЕсли;

	Если Не Реквизиты.Предприниматель
	 Или Не Реквизиты.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	МПЗРеализованныеИП = ПараметрыПроведения.МПЗРеализованныеИП;
	ПрочиеРасходыИП    = ПараметрыПроведения.ПрочиеРасходыИП;
	ДопРасходыИП       = ПараметрыПроведения.ДопРасходыИП;
	ТаблицаОбороты     = ПараметрыПроведения.ТаблицаОбороты;

	Параметры = ПодготовитьПараметрыПроведенияПрочиеНепризнанныеРасходыИП(
		МПЗРеализованныеИП,
		ПрочиеРасходыИП,
		ДопРасходыИП,
		ТаблицаОбороты,
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	
	ПериодУчетнойПолитики = Реквизиты.Период + 86400;
	
	УчетнаяПолитикаНУ = УчетДоходовИРасходовПредпринимателя.УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, ПериодУчетнойПолитики);
	
	МПЗРеализованныеИП = Параметры.МПЗРеализованныеИП;
	ПрочиеРасходыИП    = Параметры.ПрочиеРасходыИП;
	ДопРасходыИП       = Параметры.ДопРасходыИП;
	ТаблицаОбороты     = Параметры.ТаблицаОбороты;
	
	Если МПЗРеализованныеИП.Количество() <> 0 Тогда
		
		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплачено);
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплаченоНеОплаченоПокупателем);
		
		ТаблицаТМЦ = ПодготовитьТаблицуРеализованоИП(МПЗРеализованныеИП, СтатусыОплатыРасходовИПСписок);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗОтгруженные", "Приход", Движения);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Расход", Движения);
		
		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплачено);
		
		ТаблицаТМЦ = ПодготовитьТаблицуРеализованоИП(МПЗРеализованныеИП, СтатусыОплатыРасходовИПСписок);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗОтгруженные", "Расход", Движения);
		
		ТаблицаТМЦ = ПодготовитьТаблицуОборотыРеализованоИП(МПЗРеализованныеИП, ТаблицаОбороты);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗОбороты", , Движения);
					
		ТаблицаТМЦ.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
		ТаблицаТМЦ.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
		ТаблицаТМЦ.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Приход", Движения);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗ", "Расход", Движения);
		
		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем);
	
		ТаблицаТМЦ = ПодготовитьТаблицуРеализованоИП(МПЗРеализованныеИП, СтатусыОплатыРасходовИПСписок);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПМПЗОтгруженные", "Приход", Движения);
		
	КонецЕсли;
	
	Если ДопРасходыИП.Количество() <> 0 Тогда
		
		ТаблицаТМЦ = ПодготовитьТаблицуДопРасходыОплаченныеИП(УчетнаяПолитикаНУ, ДопРасходыИП);			
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПИныеМатериальныеРасходы", "Приход", Движения);
		
		ТаблицаТМЦ = ПодготовитьТаблицуДопРасходыНеОплаченныеИП(УчетнаяПолитикаНУ, ДопРасходыИП);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПИныеМатериальныеРасходы", "Приход", Движения);
					
	КонецЕсли;
	
	Если ПрочиеРасходыИП.Количество() <> 0 Тогда
		
		ТаблицаТМЦ = ПодготовитьТаблицуПрочиеНеоплаченныеИП(ПрочиеРасходыИП, Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИПИныеМатериальныеРасходы", "Приход", Движения);
		
		ТаблицаТМЦ = ПодготовитьТаблицуПрочиеНеоплаченныеИП(ПрочиеРасходыИП, Перечисления.ВидыМПЗ.ПрочиеРасходы);
		ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТаблицаТМЦ, "ИППрочиеРасходы", , Движения);
					
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуРеализованоИП(МПЗРеализованныеИП, СтатусыОплатыРасходовИПСписок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МПЗРеализованныеИП", МПЗРеализованныеИП);
	Запрос.УстановитьПараметр("СтатусыОплатыРасходовИП", СтатусыОплатыРасходовИПСписок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МПЗРеализованныеИП.Номенклатура КАК Номенклатура,
	|	МПЗРеализованныеИП.ВидМПЗ КАК ВидМПЗ,
	|	МПЗРеализованныеИП.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МПЗРеализованныеИП.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ВЫБОР
	|		КОГДА МПЗРеализованныеИП.СтатусыОплатыРасходовИП = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовИП.НеОплачено)
	|			ТОГДА МПЗРеализованныеИП.Регистратор
	|		ИНАЧЕ МПЗРеализованныеИП.РасчетныйДокумент
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	МПЗРеализованныеИП.Партия КАК Партия,
	|	МПЗРеализованныеИП.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА МПЗРеализованныеИП.НДСВключенВстоимость
	|			ТОГДА МПЗРеализованныеИП.Сумма - МПЗРеализованныеИП.НДС
	|		ИНАЧЕ МПЗРеализованныеИП.Сумма
	|	КОНЕЦ КАК Сумма,
	|	МПЗРеализованныеИП.НДС КАК НДС,
	|	МПЗРеализованныеИП.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	МПЗРеализованныеИП.Выручка КАК Выручка,
	|	МПЗРеализованныеИП.НДСНачисленный КАК НДСНачисленный,
	|	МПЗРеализованныеИП.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА МПЗРеализованныеИП.СтатусыОплатыРасходовИП = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем)
	|			ТОГДА МПЗРеализованныеИП.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументОплаты,
	|	МПЗРеализованныеИП.НомерСтроки
	|ПОМЕСТИТЬ ТоварыРеализованные
	|ИЗ
	|	&МПЗРеализованныеИП КАК МПЗРеализованныеИП
	|ГДЕ
	|	МПЗРеализованныеИП.СтатусыОплатыРасходовИП В(&СтатусыОплатыРасходовИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыРеализованные.Номенклатура,
	|	ТоварыРеализованные.ВидМПЗ,
	|	ТоварыРеализованные.НоменклатурнаяГруппа,
	|	ТоварыРеализованные.ХарактерДеятельности,
	|	ТоварыРеализованные.ДокументОтгрузки,
	|	ТоварыРеализованные.Партия,
	|	ТоварыРеализованные.Количество,
	|	ТоварыРеализованные.Сумма,
	|	ТоварыРеализованные.НДС,
	|	ТоварыРеализованные.НДСВключенВстоимость,
	|	ТоварыРеализованные.Выручка,
	|	ТоварыРеализованные.НДСНачисленный,
	|	ТоварыРеализованные.Услуга,
	|	ТоварыРеализованные.ДокументОплаты
	|ИЗ
	|	ТоварыРеализованные КАК ТоварыРеализованные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыРеализованные.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПодготовитьТаблицуОборотыРеализованоИП(МПЗРеализованныеИП, ТаблицаОбороты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МПЗРеализованныеИП", МПЗРеализованныеИП);
	Запрос.УстановитьПараметр("ТаблицаОбороты", ТаблицаОбороты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МПЗРеализованныеИП.Номенклатура КАК Номенклатура,
	|	МПЗРеализованныеИП.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МПЗРеализованныеИП.ХарактерДеятельности КАК ХарактерДеятельности,
	|	МПЗРеализованныеИП.Партия КАК Партия,
	|	МПЗРеализованныеИП.ВидМПЗ КАК ВидМПЗ,
	|	МПЗРеализованныеИП.Ключ КАК Ключ,
	|	МПЗРеализованныеИП.НомерСтроки
	|ПОМЕСТИТЬ МПЗРеализованные
	|ИЗ
	|	&МПЗРеализованныеИП КАК МПЗРеализованныеИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.Номенклатура КАК Номенклатура,
	|	ТаблицаОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ТаблицаОбороты.Партия КАК Партия,
	|	ТаблицаОбороты.Количество КАК Количество,
	|	ТаблицаОбороты.Сумма КАК Сумма,
	|	ТаблицаОбороты.НДС КАК НДС,
	|	ТаблицаОбороты.НДСВключенВстоимость КАК НДСВключенВстоимость,
	|	ТаблицаОбороты.Ключ КАК Ключ
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&ТаблицаОбороты КАК ТаблицаОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	МПЗ.Номенклатура КАК НоменклатураПоступившая,
	|	МПЗ.Партия КАК ПартияПоступившейНоменклатуры,
	|	МПЗ.ВидМПЗ КАК ВидПоступившегоМПЗ,
	|	МПЗ.НоменклатурнаяГруппа,
	|	МПЗ.ХарактерДеятельности
	|ИЗ
	|	Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МПЗРеализованные КАК МПЗ
	|		ПО Обороты.Ключ = МПЗ.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МПЗ.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПодготовитьТаблицуДопРасходыОплаченныеИП(УчетнаяПолитикаНУ, ДопРасходыИП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДопРасходыИП", ДопРасходыИП);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДопРасходыИП.НДСВключенВстоимость
	|			ТОГДА ДопРасходыИП.Сумма - ДопРасходыИП.НДС
	|		ИНАЧЕ ДопРасходыИП.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ДопРасходыИП.НДС,
	|	ДопРасходыИП.НДСВключенВстоимость,
	|	ДопРасходыИП.СтатьяЗатрат,
	|	ДопРасходыИП.Партия,
	|	ДопРасходыИП.МПЗ,
	|	ДопРасходыИП.ПартияМПЗ,
	|	ДопРасходыИП.Количество,
	|	ДопРасходыИП.Регистратор КАК ДокументОплаты,
	|	ДопРасходыИП.Оплачен,
	|	ДопРасходыИП.НомерСтроки
	|ПОМЕСТИТЬ ДопРасходыОплаченные
	|ИЗ
	|	&ДопРасходыИП КАК ДопРасходыИП
	|ГДЕ
	|	ДопРасходыИП.Оплачен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРасходыОплаченные.Сумма,
	|	ДопРасходыОплаченные.НДС,
	|	ДопРасходыОплаченные.НДСВключенВстоимость,
	|	ДопРасходыОплаченные.СтатьяЗатрат,
	|	ДопРасходыОплаченные.Партия,
	|	ДопРасходыОплаченные.МПЗ,
	|	ДопРасходыОплаченные.ПартияМПЗ,
	|	ДопРасходыОплаченные.Количество,
	|	ДопРасходыОплаченные.ДокументОплаты,
	|	ДопРасходыОплаченные.Оплачен
	|ИЗ
	|	ДопРасходыОплаченные КАК ДопРасходыОплаченные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДопРасходыОплаченные.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	Результат.Колонки.Добавить("ХарактерДеятельности");
	
	СтруктураПараметров	= Новый Структура("ВидМПЗ");
	СтруктураПараметров.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		СтрокаТаблицы.НоменклатурнаяГруппа = УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		СтрокаТаблицы.ХарактерДеятельности = УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуДопРасходыНеоплаченныеИП(УчетнаяПолитикаНУ, ДопРасходыИП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДопРасходыИП", ДопРасходыИП);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДопРасходыИП.НДСВключенВстоимость
	|			ТОГДА ДопРасходыИП.Сумма - ДопРасходыИП.НДС
	|		ИНАЧЕ ДопРасходыИП.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ДопРасходыИП.НДС,
	|	ДопРасходыИП.НДСВключенВстоимость,
	|	ДопРасходыИП.СтатьяЗатрат,
	|	ДопРасходыИП.Партия,
	|	ДопРасходыИП.МПЗ,
	|	ДопРасходыИП.ПартияМПЗ,
	|	ДопРасходыИП.Количество,
	|	ДопРасходыИП.Оплачен,
	|	ДопРасходыИП.НомерСтроки
	|ПОМЕСТИТЬ ДопРасходыОплаченные
	|ИЗ
	|	&ДопРасходыИП КАК ДопРасходыИП
	|ГДЕ
	|	ДопРасходыИП.Оплачен = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРасходыОплаченные.Сумма,
	|	ДопРасходыОплаченные.НДС,
	|	ДопРасходыОплаченные.НДСВключенВстоимость,
	|	ДопРасходыОплаченные.СтатьяЗатрат,
	|	ДопРасходыОплаченные.Партия,
	|	ДопРасходыОплаченные.МПЗ,
	|	ДопРасходыОплаченные.ПартияМПЗ,
	|	ДопРасходыОплаченные.Количество,
	|	ДопРасходыОплаченные.Оплачен
	|ИЗ
	|	ДопРасходыОплаченные КАК ДопРасходыОплаченные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДопРасходыОплаченные.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	Результат.Колонки.Добавить("ХарактерДеятельности");
	
	СтруктураПараметров	= Новый Структура("ВидМПЗ");
	СтруктураПараметров.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		СтрокаТаблицы.НоменклатурнаяГруппа = УчетДоходовИРасходовПредпринимателя.ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		СтрокаТаблицы.ХарактерДеятельности = УчетДоходовИРасходовПредпринимателя.ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуПрочиеНеоплаченныеИП(ПрочиеРасходыИП, ВидМПЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрочиеРасходыИП", ПрочиеРасходыИП);
	Запрос.УстановитьПараметр("ВидМПЗ", ВидМПЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыИП.НДСВключенВстоимость
	|			ТОГДА ПрочиеРасходыИП.Сумма - ПрочиеРасходыИП.НДС
	|		ИНАЧЕ ПрочиеРасходыИП.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ПрочиеРасходыИП.НДС,
	|	ПрочиеРасходыИП.НДСВключенВстоимость,
	|	ПрочиеРасходыИП.СтатьяЗатрат,
	|	ПрочиеРасходыИП.Партия,
	|	ПрочиеРасходыИП.Количество,
	|	ПрочиеРасходыИП.НоменклатурнаяГруппа,
	|	ПрочиеРасходыИП.ХарактерДеятельности,
	|	ПрочиеРасходыИП.Партия КАК РасчетныйДокумент,
	|	ПрочиеРасходыИП.НомерСтроки
	|ПОМЕСТИТЬ ПрочиеНеоплаченные
	|ИЗ
	|	&ПрочиеРасходыИП КАК ПрочиеРасходыИП
	|ГДЕ
	|	ПрочиеРасходыИП.ВидМПЗ = &ВидМПЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеНеоплаченные.Сумма,
	|	ПрочиеНеоплаченные.НДС,
	|	ПрочиеНеоплаченные.НДСВключенВстоимость,
	|	ПрочиеНеоплаченные.СтатьяЗатрат,
	|	ПрочиеНеоплаченные.Партия,
	|	ПрочиеНеоплаченные.Количество,
	|	ПрочиеНеоплаченные.НоменклатурнаяГруппа,
	|	ПрочиеНеоплаченные.ХарактерДеятельности,
	|	ПрочиеНеоплаченные.РасчетныйДокумент
	|ИЗ
	|	ПрочиеНеоплаченные КАК ПрочиеНеоплаченные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрочиеНеоплаченные.НомерСтроки";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТабМПЗ;
	
КонецФункции

// Общие процедуры

Процедура ДвиженияПоРегиструИП(УчетнаяПолитикаНУ, Реквизиты, ТабличнаяЧасть, ИмяРегистра, ВидДвижения = "", Движения)
	
	НаборЗаписейДвижения = Движения[ИмяРегистра];
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл		
		Если ВидДвижения = "Приход" Тогда
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьПриход();
		ИначеЕсли ВидДвижения = "Расход" Тогда
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьРасход();
		Иначе
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
		Если УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельностиИП Тогда
			НоваяСтрока.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности = СтрокаТаблицы.ХарактерДеятельности;
			
		Иначе
			НоваяСтрока.НоменклатурнаяГруппа = УчетнаяПолитикаНУ.ОсновнаяНоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности = УчетнаяПолитикаНУ.ОсновнойХарактерДеятельности;
		КонецЕсли;
		
		НоваяСтрока.Период      = Реквизиты.Период;
		НоваяСтрока.Организация = Реквизиты.Организация;
		
	КонецЦикла;
	
	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПолучитьСоответствиеРазделовФормам()

	СоответствиеРазделыУчета = Новый Соответствие;
	СоответствиеРазделыУчета.Вставить(ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства"), "ФормаОсновныеСредства");
	СоответствиеРазделыУчета.Вставить(ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР"), "ФормаНематериальныеАктивы");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные, "ФормаТоварыОтгруженные");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов, "ФормаРасходыБудущихПериодов");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам, "ФормаРасчетПоНалогамИСборам");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами, "ФормаРасчетыСПодотчетнымиЛицами");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения, "ФормаНоменклатура");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.Материалы, "ФормаНоменклатура");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.Товары, "ФормаНоменклатура");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты, "ФормаНоменклатура");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям, "ФормаНДС");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным, "ФормаНДС");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный, "ФормаНДС");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками, "ФормаРасчетыСКонтрагентами");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками, "ФормаРасчетыСКонтрагентами");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам, "ФормаРасчетыПоЗаработнойПлате");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами, "ФормаРасчетыСКонтрагентами");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.Капитал, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета, "ФормаБухСправка");
	СоответствиеРазделыУчета.Вставить(Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП, "ФормаПрочиеРасходыУСНИИП");

	Возврат СоответствиеРазделыУчета;

КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	ВыбранныйРаздел = Неопределено;

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВыбранныйРаздел = Параметры.Ключ.РазделУчета;
		Если Параметры.Ключ.ОтражатьВБухгалтерскомУчете
			И Параметры.Ключ.ОтражатьВНалоговомУчете
			И Параметры.Ключ.ОтражатьПоСпециальнымРегистрам Тогда
			Если Обработки.ВводНачальныхОстатков.МожноИспользоватьПростуюФормуПомощника(Параметры.Ключ.Организация) Тогда
				ВыбраннаяФорма = "ФормаДокумента";
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("РазделУчета", ВыбранныйРаздел);
	КонецЕсли;

	Если ЗначениеЗаполнено(ВыбранныйРаздел) Тогда
		СтандартнаяОбработка = Ложь;
		СоответствиеРазделовФормам = ПолучитьСоответствиеРазделовФормам();
		ВыбраннаяФорма = СоответствиеРазделовФормам[ВыбранныйРаздел];
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГОЛОВКА ФОРМЫ

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка	= НСтр("ru = 'Ввод остатков'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка + " (" + Строка(Объект.РазделУчета) + ")";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры


Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПартийНДС)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период + 86400) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = ТаблицаПартийНДС;

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));
		
	ДанныеДвижений.Колонки.Добавить("Период");
	ДанныеДвижений.Колонки.Добавить("Организация");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Реквизиты);
		
		Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
			СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен;
		КонецЕсли; 
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Контрагент;
			КонецЕсли;
		КонецЦикла;
		
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			СтрокаТаблицы.Подразделение = Реквизиты.ПодразделениеОрганизации;
		КонецЕсли;
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");

	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции	

Функция ТекстЗапросТаблицаСтруктураСтоимостиЗапасов(НомераТаблиц, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераСубконто",   0);
	НомераТаблиц.Вставить("ТаблицаСтруктураСтоимостиЗапасов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|				ТОГДА ХозрасчетныйВидыСубконто.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НомерСубконтоНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|				ТОГДА ХозрасчетныйВидыСубконто.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НомерСубконтоПартии,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|				ТОГДА ХозрасчетныйВидыСубконто.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НомерСубконтоСклады
	|ПОМЕСТИТЬ НомераСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|	И ХозрасчетныйВидыСубконто.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""СтруктураСтоимостиЗапасов"" КАК ИмяСписка,
	|	0 КАК НомерСписка,
	|	НоменклатураНаСкладе.НомерСтроки КАК НомерСтроки,
	|	НоменклатураНаСкладе.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат КАК ЭлементЗатрат,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СУММА(СтруктураСтоимостиЗапасов.Сумма) КАК Сумма,
	|	НоменклатураНаСкладе.Ключ КАК Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.НоменклатураНаСкладе КАК НоменклатураНаСкладе
	|			ЛЕВОЕ СОЕДИНЕНИЕ НомераСубконто КАК НомераСубконто
	|			ПО НоменклатураНаСкладе.СчетУчета = НомераСубконто.Счет
	|		ПО СтруктураСтоимостиЗапасов.Ссылка = НоменклатураНаСкладе.Ссылка
	|			И СтруктураСтоимостиЗапасов.Ключ = НоменклатураНаСкладе.Ключ
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Ссылка = &Ссылка
	|	И НоменклатураНаСкладе.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 1
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НоменклатураНаСкладе.Ключ,
	|	НоменклатураНаСкладе.СчетУчета,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 3
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоНоменклатура, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Номенклатура
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоСклады, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Склад
	|		КОГДА ЕСТЬNULL(НомераСубконто.НомерСубконтоПартии, 0) = 2
	|			ТОГДА НоменклатураНаСкладе.Партия
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат,
	|	НоменклатураНаСкладе.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СтруктураСтоимостиЗапасов"",
	|	1,
	|	БухСправка.НомерСтроки,
	|	БухСправка.СчетУчета,
	|	БухСправка.Субконто1,
	|	БухСправка.Субконто2,
	|	БухСправка.Субконто3,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат,
	|	СУММА(СтруктураСтоимостиЗапасов.Сумма),
	|	БухСправка.Ключ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.БухСправка КАК БухСправка
	|		ПО СтруктураСтоимостиЗапасов.Ссылка = БухСправка.Ссылка
	|			И СтруктураСтоимостиЗапасов.Ключ = БухСправка.Ключ
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Ссылка = &Ссылка
	|	И БухСправка.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
	|
	|СГРУППИРОВАТЬ ПО
	|	БухСправка.Субконто2,
	|	БухСправка.Субконто3,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат,
	|	БухСправка.СчетУчета,
	|	БухСправка.Субконто1,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат,
	|	БухСправка.Ключ,
	|	БухСправка.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ДВИЖЕНИЯ ПО СТРУКТУРЕ СТОИМОСТИ ЗАПАСОВ

Функция ПодготовитьПараметрыПроведенияСтруктураСтоимостиЗапасов(ТаблицаСтруктураСтоимостиЗапасов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасходы

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                                // <Строка,0> - имя списка в документе
	+ "Ключ,"                                     // <Строка,36>
	+ "СчетУчета,"                                // <План счетов бухгалтерского учета>
	+ "Субконто1,"                                // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"                                // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"                                // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "ЭлементЗатрат,"                            // <ПеречислениеСсылка.ЭлементыЗатрат>
	+ "СтатьяЗатрат,"                             // <СправочникСсылка.СтатьиЗатрат>
	+ "Сумма";                                    // <Число (15,2)>

	Параметры.Вставить("ТаблицаСтруктураСтоимостиЗапасов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСтруктураСтоимостиЗапасов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвижения_СтруктураСтоимостиЗапасов(
		ТаблицаСтруктураСтоимостиЗапасов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтруктураСтоимостиЗапасов) Тогда
		Возврат;
	КонецЕсли;		
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУчетнойПолитики = Реквизиты.Период + 86400;
	УчитыватьРасходыПоСтатьямЗатрат   = УчетнаяПолитика.УчитыватьРасходыПоСтатьямЗатрат(Реквизиты.Организация, ДатаУчетнойПолитики);
	УчитыватьРасходыПоЭлементамЗатрат = УчетнаяПолитика.УчитыватьРасходыПоЭлементамЗатрат(Реквизиты.Организация, ДатаУчетнойПолитики);
	
	Если Не УчитыватьРасходыПоСтатьямЗатрат И Не УчитыватьРасходыПоЭлементамЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияСтруктураСтоимостиЗапасов(ТаблицаСтруктураСтоимостиЗапасов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ЭлементыЗатрат.СформироватьДвиженияСтруктураСтоимостиЗапасовПриВводеНачальныхОстатков(
		Параметры.ТаблицаСтруктураСтоимостиЗапасов,
		Движения,
		Реквизиты.Период,
		Реквизиты.Организация,
		Реквизиты.ПодразделениеОрганизации);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ
//

Процедура СформироватьДвижения_ОС_СпособыОтраженияРасходовПоАренднымПлатежамНал(ТаблицаОС, Движения, Отказ)

	НаборЗаписейДвижения = Движения.СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет;

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.СпособПоступленияРегл <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
			Продолжить;
		КонецЕслИ;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                    = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство                          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация                               = СтрокаОС.Организация;
		НоваяСтрока.СпособОтраженияРасходовПоАренднымПлатежам = СтрокаОС.СпособОтраженияРасходовПоАренднымПлатежам;
	КонецЦикла;

	НаборЗаписейДвижения.УстановитьАктивность(Истина);
	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИП() Экспорт
	
	СчетУчетаУдаленный = ПланыСчетов.Хозрасчетный.УдалитьПФР_ОПС_ИП;
	СчетУчетаНовый     = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	НомерВидыПлатежейВГосБюджет_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НомерВидыПлатежейВГосБюджет_Новый = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаНовый, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	НомерВидыСтраховыхВзносовИП = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаУдаленный", СчетУчетаУдаленный);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.СчетУчета = &СчетУчетаУдаленный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого Строка Из Объект.РасчетыПоНалогамИСборам Цикл
			
			Если Строка.СчетУчета <> СчетУчетаУдаленный Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОбъекта = Новый Структура;
			СтруктураОбъекта.Вставить("СчетУчета", Строка.СчетУчета);
			СтруктураОбъекта.Вставить("Субконто1", ?(НомерВидыПлатежейВГосБюджет_Удаленный <> 0, Строка.ВидПлатежаВБюджет, Неопределено));
			СтруктураОбъекта.Вставить("Субконто2", ?(НомерВидыСтраховыхВзносовИП <> 0, Строка.УдалитьВидСтраховогоВзносаИП, Неопределено));
			СтруктураОбъекта.Вставить("Субконто3");
			
			ПланыСчетов.Хозрасчетный.ЗаменитьСчетПФР_ОПС_ИПвДокументе(СтруктураОбъекта, "СчетУчета", "Субконто");
			
			Строка.СчетУчета                    = СтруктураОбъекта.СчетУчета;
			Строка.ВидПлатежаВБюджет            = СтруктураОбъекта["Субконто" + НомерВидыПлатежейВГосБюджет_Новый];
			Строка.УдалитьВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП.ПустаяСсылка();
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПервоначальнуюСтоимостьНУПоСпецодежде() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.Ссылка,
	|	ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.Ссылка.Организация,
	|	ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.Ссылка.Дата КАК Период,
	|	ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.СпецодеждаИСпецоснасткаВЭксплуатации КАК ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации
	|ГДЕ
	|	ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|	И ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.Ссылка.ОтражатьВНалоговомУчете
	|	И ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПервоначальнаяСтоимостьНУ = 0
	|	И ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПервоначальнаяСтоимостьПР = 0
	|	И ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.СпецМатериалПервоначальнаяСтоимостьВР = 0
	|	И ВводНачальныхОстатковСпецодеждаИСпецоснасткаВЭксплуатации.Сумма <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Выборка.Организация, Выборка.Период + 86400) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДокумента = ДокументОбъект.СпецодеждаИСпецоснасткаВЭксплуатации[Выборка.НомерСтроки - 1];
			
			КоэффициентНУ = СтрокаДокумента.СуммаПР / СтрокаДокумента.Сумма;
			СтрокаДокумента.СпецМатериалПервоначальнаяСтоимостьПР = 
				Мин(СтрокаДокумента.СпецМатериалПервоначальнаяСтоимость,
				    СтрокаДокумента.СпецМатериалПервоначальнаяСтоимость * КоэффициентНУ);
			СтрокаДокумента.СпецМатериалПервоначальнаяСтоимостьВР = 
				СтрокаДокумента.СпецМатериалПервоначальнаяСтоимость - 
				СтрокаДокумента.СпецМатериалПервоначальнаяСтоимостьПР;
			
		КонецЦикла;

		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли