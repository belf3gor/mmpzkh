#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
	
КонецФункции

// По переданному сотруднику и датам начала и окончания ищет регистратор отпуска без оплаты.
// Если регистратор не находится, то создает, заполняет и проводит новый документ, и возвращает ссылку на него.
//
// Параметры:
//	Сотрудник		- СправочникСсылка.Сотрудники
//	ДатаНачала		- Дата
//	ДатаОкончания	- Дата
//	Основание		- Строка
//
// Возвращаемое значение:
//	ДокументСсылка.ОтпускБезСохраненияОплаты
//
Функция ОтпускБезОплатыСотрудника(Сотрудник, ДатаНачала, ДатаОкончания, Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("КатегорииОтсутствий", РасчетЗарплатыДляНебольшихОрганизаций.КатегорииОтсутствий());
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииОтсутствий)
		|	И НачисленияУдержанияПоСотрудникам.ДатаНачала <= &ДатаОкончания
		|	И НачисленияУдержанияПоСотрудникам.ДатаОкончания >= &ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Период УБЫВ,
		|	НачисленияУдержанияПоСотрудникам.Регистратор УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Регистратор;
		
	КонецЕсли;
	
	ДокументОтпускБезСохраненияОплаты = Документы.ОтпускБезСохраненияОплаты.СоздатьДокумент();
	ДокументОтпускБезСохраненияОплаты.Заполнить(Сотрудник);
	ДокументОтпускБезСохраненияОплаты.ДатаНачала = ДатаНачала;
	ДокументОтпускБезСохраненияОплаты.ДатаОкончания = ДатаОкончания;
	ДокументОтпускБезСохраненияОплаты.Основание = Основание;
	
	ЗаполнитьНачисленияВДокументе(ДокументОтпускБезСохраненияОплаты);
	
	Попытка
		ДокументОтпускБезСохраненияОплаты.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокументОтпускБезСохраненияОплаты.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Возврат ДокументОтпускБезСохраненияОплаты.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ о предоставлении отпуска (Т-6).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т6";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т6", НСтр("ru='Приказ о предоставлении отпуска'"),
			ТабличныйДокументПриказаТ6(УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т6"), МассивОбъектов, ОбъектыПечати), ,
			"ОбщийМакет.ПФ_MXL_Т6");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТабличныйДокументПриказаТ6(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	ДанныеДляПечати = ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов);
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из ДанныеДляПечати.Строки Цикл
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			МакетШапка = Макет.ПолучитьОбласть("Шапка");
			МакетШапка.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(МакетШапка);
			
			МакетРаботник = Макет.ПолучитьОбласть("Работник");
			МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
			
			ДокументРезультат.Вывести(МакетРаботник);
			
			МакетПодвал = Макет.ПолучитьОбласть("Подвал");
			МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(МакетПодвал);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.СсылкаНаОбъект);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Сотрудник КАК Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,Пол,ТабельныйНомер,Организация,Подразделение,Должность");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Период КАК Период,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ЛичныеДанныеФИОПолные,
	|	КадровыеДанныеСотрудников.Пол КАК ЛичныеДанныеПол,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность
	|ПОМЕСТИТЬ ВТДанныеДляПечати
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПечати.Сотрудник КАК Сотрудник,
	|	ОтпускБезСохраненияОплаты.Организация КАК Организация,
	|	ДанныеДляПечати.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДляПечати.ЛичныеДанныеФИОПолные КАК ЛичныеДанныеФИОПолные,
	|	ДанныеДляПечати.ЛичныеДанныеПол КАК ЛичныеДанныеПол,
	|	ОтпускБезСохраненияОплаты.Номер КАК НомерДок,
	|	ОтпускБезСохраненияОплаты.Дата КАК ДатаДок,
	|	ДанныеДляПечати.ТабельныйНомер КАК ТабельныйНомер,
	|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
	|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания КАК ДатаОкончания,
	|	ЛОЖЬ КАК ЭтоОсновнойОтпуск,
	|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1 КАК Продолжительность,
	|	ОтпускБезСохраненияОплаты.Ссылка КАК Ссылка,
	|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачалаСобытия,
	|	ОтпускБезСохраненияОплаты.Дата КАК Дата,
	|	ОтпускБезСохраненияОплаты.Руководитель КАК Руководитель,
	|	ОтпускБезСохраненияОплаты.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ОтпускБезСохраненияОплаты.Основание КАК Основание
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	ВТДанныеДляПечати КАК ДанныеДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ПО ДанныеДляПечати.Сотрудник = ОтпускБезСохраненияОплаты.Сотрудник
	|			И ДанныеДляПечати.Период = ОтпускБезСохраненияОплаты.ДатаНачала
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.УстановитьПараметр("ПолноеНаименованиеОтпуска", НСтр("ru='Отпуск без сохранения оплаты'"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник КАК РаботаСотрудник,
		|	ДанныеДокументов.Организация КАК СсылкаНаОбъектОрганизация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
		|	ДанныеДокументов.КодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
		|	ДанныеДокументов.ЛичныеДанныеФИОПолные КАК ЛичныеДанныеФИОПолные,
		|	ДанныеДокументов.ЛичныеДанныеПол КАК ЛичныеДанныеПол,
		|	ДанныеДокументов.НомерДок КАК СсылкаНаОбъектНомер,
		|	ДанныеДокументов.ДатаДок КАК СсылкаНаОбъектДата,
		|	ДанныеДокументов.ТабельныйНомер КАК РаботаСотрудникКод,
		|	ДанныеДокументов.Подразделение КАК РаботаПодразделение,
		|	ДанныеДокументов.Должность КАК РаботаДолжность,
		|	ДанныеДокументов.ДатаНачала КАК СсылкаНаОбъектДанныеОтпусковДатаНачала,
		|	ДанныеДокументов.ДатаОкончания КАК СсылкаНаОбъектДанныеОтпусковДатаОкончания,
		|	ДанныеДокументов.Продолжительность КАК СсылкаНаОбъектДанныеОтпусковПродолжительность,
		|	ДанныеДокументов.Продолжительность КАК СсылкаНаОбъектПродолжительностьВсего,
		|	ЛОЖЬ КАК ЭтоОсновнойОтпуск,
		|	&ПолноеНаименованиеОтпуска КАК СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать,
		|	ДанныеДокументов.Ссылка КАК СсылкаНаОбъект,
		|	ДанныеДокументов.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ДанныеДокументов.Руководитель КАК СсылкаНаОбъектРуководитель,
		|	ДанныеДокументов.ДолжностьРуководителя КАК СсылкаНаОбъектДолжностьРуководителя,
		|	ДанныеДокументов.Основание КАК СсылкаНаОбъектОснование,
		|	ФИОРуководителя.РасшифровкаПодписи КАК СсылкаНаОбъектРуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	СсылкаНаОбъект,
		|	РаботаСотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов)
	
	ДанныеСсылок = Новый ДеревоЗначений;
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъект");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияНаименованиеСокращенное");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияКодПоОКПО");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("ЛичныеДанныеФИОФамилияИмяОтчествоВДательномПадеже");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудникТабельныйНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжность");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудник");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпускНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНачалаОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНачалаОсновногоОтпускаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОкончанияОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОкончанияОсновногоОтпускаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаНачала");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаНачаланаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаОкончания");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНачалаВсегоНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОкончанияВсегоНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектПродолжительностьОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковПродолжительность");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектПродолжительностьВсего");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковВидОтпускаОсновнойОтпуск");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОснование");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДолжностьРуководителя");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектРуководительРасшифровкаПодписи");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОзнакомленияРаботника");
	
	МассивПараметров = Новый Массив;
	НомерДополнительногоОтпуска = 1;
	
	Результат = СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СсылкаНаОбъект") Цикл
		
		СтрокаСсылки = ДанныеСсылок.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСсылки, Выборка);
		
		СтрокаСсылки.СсылкаНаОбъектДатаНаПечать = Формат(Выборка.СсылкаНаОбъектДата, "ДЛФ=D");
		СтрокаСсылки.СсылкаНаОбъектНомерНаПечать = ЗарплатаКадрыОтчеты.НомерНаПечать(Выборка.СсылкаНаОбъектНомер);
		
		СтрокаСсылки.ЛичныеДанныеФИОФамилияИмяОтчествоВДательномПадеже =
			ЗарплатаКадрыОтчеты.ПросклоненныеФИО(Выборка.ЛичныеДанныеФИОПолные, 3, Выборка.ЛичныеДанныеПол);
		
		СтрокаСсылки.РаботаСотрудникТабельныйНомерНаПечать = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Выборка.РаботаСотрудникКод);
		СтрокаСсылки.РаботаПодразделениеНаПечать = ЗарплатаКадрыОтчеты.ПодразделениеНаПечать(Выборка.РаботаПодразделение);
		
		СтрокаСсылки.СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДанныеОтпусковДатаНачала);
		СтрокаСсылки.СсылкаНаОбъектДатаНачалаВсегоНаПечать = СтрокаСсылки.СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать;
		
		СтрокаСсылки.СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДанныеОтпусковДатаОкончания);
		СтрокаСсылки.СсылкаНаОбъектДатаОкончанияВсегоНаПечать = СтрокаСсылки.СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать;
		
		СтрокаСсылки.СсылкаНаОбъектДатаОзнакомленияРаботника = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДата);
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаСотрудника = СтрокаСсылки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСсылки);
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат ДанныеСсылок;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник КАК Сотрудник,
	|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания КАК ДатаОкончания,
	|	ОтпускБезСохраненияОплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
		ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
		ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
		ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
		ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству;
		
		РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
		
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Перечисления.ВидыСтажаПФР2014.НЕОПЛ);
		
	КонецЦикла;
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

// Проверяет, что сотрудник, указанный в документе работает в период отсутствия.
//
// Параметры:
//		Объект	- ДокументОбъект.ОтпускБезСохраненияОплаты
//		Отказ	- Булево
//
Процедура ПроверитьРаботающих(Объект, Отказ) Экспорт
	
	НачалоПериода 		= Объект.ДатаНачала;
	ОкончаниеПериода	= Объект.ДатаОкончания;
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Сотрудник)
		Или Не ЗначениеЗаполнено(НачалоПериода)
		Или Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ОкончаниеПериода;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект"));
	
КонецПроцедуры

Процедура ЗаполнитьНачисленияВДокументе(ДокументОбъект) Экспорт
	
	ДокументОбъект.Начисления.Очистить();
	
	НачисленияОтпуска = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Если НачисленияОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДокументОбъект.Сотрудник, "Подразделение", ДокументОбъект.ДатаНачала);
	Если КадровыеДанные.Количество() = 0 Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе
		Подразделение = КадровыеДанные[0].Подразделение;
	КонецЕсли;
	
	НачислениеОтпуск = НачисленияОтпуска[0];
	
	Если ДокументОбъект.ДатаОкончания >= ДокументОбъект.ДатаНачала
		И ЗначениеЗаполнено(ДокументОбъект.ДатаНачала) Тогда
		
		ДатаНачалаОтпуска = ДокументОбъект.ДатаНачала;
		Пока ДатаНачалаОтпуска <= ДокументОбъект.ДатаОкончания Цикл
			
			СтрокаНачислений = ДокументОбъект.Начисления.Добавить();
			
			СтрокаНачислений.ДатаНачала = ДатаНачалаОтпуска;
			СтрокаНачислений.ДатаОкончания = Мин(КонецМесяца(ДатаНачалаОтпуска), ДокументОбъект.ДатаОкончания);
			СтрокаНачислений.Начисление = НачислениеОтпуск;
			СтрокаНачислений.Сотрудник = ДокументОбъект.Сотрудник;
			СтрокаНачислений.Подразделение = Подразделение;
			
			СтрокаНачислений.ОплаченоДней = РасчетЗарплатыДляНебольшихОрганизаций.КоличествоДнейОтпуска(
				СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания, ДокументОбъект.Организация);
			
			РабочихДнейЧасов = РасчетЗарплатыДляНебольшихОрганизаций.РабочихДнейЧасовВПериоде(
				СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания, ДокументОбъект.Организация);
			
			Если РабочихДнейЧасов = Неопределено Тогда
				
				СтрокаНачислений.ОтработаноДней = 0;
				СтрокаНачислений.ОтработаноЧасов = 0;
				
			Иначе
				
				СтрокаНачислений.ОтработаноДней = РабочихДнейЧасов.Дней;
				СтрокаНачислений.ОтработаноЧасов = РабочихДнейЧасов.Часов;
				
			КонецЕсли;
			
			ДатаНачалаОтпуска = КонецМесяца(ДатаНачалаОтпуска) + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли