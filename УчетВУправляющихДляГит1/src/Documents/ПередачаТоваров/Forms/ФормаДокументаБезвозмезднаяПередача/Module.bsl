#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		УстановитьСчетаУчетаПоУмолчанию();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
		ВидОперацииОбработатьИзменение()
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПередачаТоваров",
		"ФормаДокументаБезвозмезднаяПередача",
		НСтр("ru='Новости: Безвозмездная передача'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
		
		
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПередачаТоваров.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПередачаТоваров.Форма.ФормаДоставка" Тогда
		ЗаполнитьРеквизитыИзДополнительнойФормы(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") 
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
			ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПередачаТоваров";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(
			Объект.Ссылка,Неопределено, УникальныйИдентификатор);
		
		Если Результат <> Неопределено
			И Результат.Свойство("ФоновоеВыполнение") Тогда // обработать выполнение в фоновом задании
			
			Результат.ДлительнаяОперация.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
			ПараметрыЗаписи.Вставить("ДлительнаяОперация", Результат.ДлительнаяОперация);
			
		Иначе
			РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект, Результат);
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПередачаТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру
		И ПараметрыЗаписи.Свойство("ДлительнаяОперация") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Основание", Объект.Ссылка);
		ДополнительныеПараметры.Вставить(
			"АдресХранилищаСОшибками", ПараметрыЗаписи.ДлительнаяОперация.АдресХранилищаСОшибками);
		ДополнительныеПараметры.Вставить("ВыписыватьСчетаФактурыСпецРежимы",
		ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы"));
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ОбработатьВыпискуСчетаФактуры",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Актуализация расчетов с контрагентами'");
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ПараметрыЗаписи.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Дополнительные свойства для установки статусов по документу
	ЕстьСчетФактура = ЗначениеЗаполнено(СчетФактура) 
		ИЛИ ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру;
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ТребуетсяСчетФактура", ТребуетсяСчетФактура И НЕ Объект.ДокументБезНДС);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЕстьСчетФактура", ЕстьСчетФактура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДоставкаНажатие(Элемент)
	
	
	Если НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ЭтотОбъект.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Грузоотправитель", Объект.Грузоотправитель);
	ПараметрыФормы.Вставить("Грузополучатель",  Объект.Грузополучатель);
	
	ОткрытьФорму("Документ.ПередачаТоваров.Форма.ФормаДоставка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьЗависимыеСчета("Склад");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПоБезвозмезднойПередачеПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоНДС(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ЗаполнитьЗависимыеСчета("ПодразделениеОрганизации");
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура,Цена,СтавкаНДС, Количество,Сумма,СуммаНДС,Всего,
		|СчетУчета,НомерГТД, СтранаПроисхождения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтотОбъект, "Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыНомерГТДЗавершение", 
		ЭтотОбъект, Новый Структура("Форма", ЭтотОбъект));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	
	ДействиеПодбор("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтотОбъект, "Товары", "Добавить");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтотОбъект, "Товары", "Заполнить");
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ВыписатьСчетФактуру(ЭтотОбъект, Команда);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Оповестить("Запись_СчетФактураВыданный");
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(
	ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено,
	КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПередачаТоваров",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
	
	// 1. Заполняемые реквизиты
	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;
	
	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;
	
	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;
	
	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;
		
		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;
		
		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;
		
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьЗависимыеСчета(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	Для каждого Строка Из Объект.Товары Цикл
		Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЦикла;

	Если Объект.Товары.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"Субконто", "ПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНДС(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоНДС", "", "СубконтоНДС", "", "СчетУчетаНДС");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСчетаУчетаПоУмолчанию()
	//Выполняется проверка на существование предопределенного элемента "РасходыПоБезвозмезднойПередаче",
	// если безвозмездной передачи в справочнике нет, то добавим.
	Справочники.ПрочиеДоходыИРасходы.СоздатьУстановитьПредопределенныйЭлементБезвозмезднаяПередача();
	
	ПараметрыУстановки = ПараметрыУстановкиСвойствСубконто(ЭтотОбъект);
	ПараметрыУстановки.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.РасходыПоБезвозмезднойПередаче"));
	
	Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановки);
	
	ПараметрыУстановки = ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект);
	ПараметрыУстановки.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.РасходыПоБезвозмезднойПередаче"));
	
	Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановки);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	////// Контрагент
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	////// Договор
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	
	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// ТоварыСтранаПроисхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить(Объект.Товары.Количество(), "ГруппаТовары");
	
	Для Каждого Страница Из Страницы Цикл
		Если Страница.Значение > 0 И Элементы[Страница.Представление].Видимость Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Страница.Представление];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект);
	КонецЕсли;
	
	ТребуетсяСчетФактура = Истина;
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УстановитьЗаголовокФормы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	// Проверка буфера обмена на наличие скопированных строк	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС                     = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС                 = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры   = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность взаимосвязанных полей.
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	Если НЕ Форма.ПользовательУправляетСчетамиУчета Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Элементы.КодРаздел7ДекларацииНДС.Видимость = Форма.РаздельныйУчетНДС;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		Объект.ДокументБезНДС,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	Элементы.ИтогиВсегоНДС.Видимость = Не (Объект.ДокументБезНДС);
	
	ОбновитьИтоги(Форма);
	
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	Элементы.ЦеныИВалюта.Видимость = Форма.ПлательщикНДС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Безвозмездная передача'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(
	Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, 
	ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт
	
	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения,
			КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего = Объект.Товары.Итог("Всего");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС",   Объект.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ",   Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма +
		?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(
	Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения,
	ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	РеализацияТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтотОбъект,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);
	
	ОбновитьИтоги(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС   = Ложь;
		Объект.СуммаВключаетНДС = Истина;
	Иначе
		Объект.ДокументБезНДС   = Истина;
		
		Для каждого ТекТовары Из Объект.Товары Цикл
			ТекТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ТекТовары.СуммаНДС  = 0;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере()
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
КонецПроцедуры

&НаКлиенте
// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ИмяТаблицы)
	
	Если ИмяТаблицы = "Товары" Тогда
		ЕстьЦена = Истина;
	КонецЕсли;
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru ='" + ИмяТаблицы + "'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",          ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметровПодбора.Вставить("Валюта",                ВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",    Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",            Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация",           Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Склад",                 Объект.Склад);
	СтруктураПараметровПодбора.Вставить("Подразделение",         Объект.ПодразделениеОрганизации);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество",        Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",              ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("Заголовок",             ЗаголовокПодбора);
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы",            ИмяТаблицы);
	СтруктураПараметровПодбора.Вставить("Услуги",                Ложь);
	СтруктураПараметровПодбора.Вставить("ПоказыватьОстатки",     Истина);
	СтруктураПараметровПодбора.Вставить("Реализация",            Истина);
	СтруктураПараметровПодбора.Вставить("КомандаВыбратьОстаток", Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		СтруктураПараметровПодбора.Вставить("ЗаполнятьЦеныПродажаИПокупка", Истина);
		СтруктураПараметровПодбора.Вставить("Реализация"                  , Истина);
		СтруктураПараметровПодбора.Вставить("ДеятельностьНаПатенте"       , ложь);
		СтруктураПараметровПодбора.Вставить("СуммаВключаетНДС"            , Объект.СуммаВключаетНДС);
	Иначе
		СтруктураПараметровПодбора.Вставить("ПоказыватьЦены"              , Истина);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		СтруктураПараметровПодбора, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после подбора
//
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Ложь),
		ДанныеОбъекта,
		Истина,
		Ложь);
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтотОбъект, ПараметрыОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		
		// Пропускаем услуги
		Если ЭтоВставкаИзБуфера 
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, Окр(СтрокаТовара.Цена,2,1));
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			КонецЕсли;
		
		Иначе
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.НомерГТД            = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
				
				Если не ПлательщикНДС Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Документы.ПередачаТоваров.ДоступнаяСтавкаНДС(СведенияОНоменклатуре.СтавкаНДС);
				КонецЕсли; 
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ПараметрыОбъекта);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполнение счетов учета
	СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект[ИмяТаблицы], ИмяТаблицы, Объект, Документы.ПередачаТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после заполнения по продукции и спецификации
//
Процедура ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИмяТабличнойЧасти)
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
	ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресМатериаловВХранилище);
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если Не ДанныеОбъекта.Свойство("ТипЦен") Или Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("ЗаполнятьЦеныПродажаИПокупка", Истина);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПередачаТоваров,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена               = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерГТД               = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения    = СведенияОНоменклатуре.СтранаПроисхождения;
		
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
		Если ПлательщикНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС          = Документы.ПередачаТоваров.ДоступнаяСтавкаНДС(СведенияОНоменклатуре.СтавкаНДС);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);		

	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт

	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
			Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область БуферОбмена

Функция НайтиСтрокуТабличнойЧасти(Объект, ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы],
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
		ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы    = Форма.Элементы;
	
	Элементы.ТоварыВставитьСтроки.Доступность                = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	РеализацияТоваровУслугФормыКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение)
	
	Документы.ПередачаТоваров.ЗаполнитьПоПоступлениюТовары(Объект , ВыбранноеЗначение);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзДополнительнойФормы(ВыбранноеЗначение, ИсточникВыбора)
	
	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	ЭтотОбъект.Модифицированность = Истина;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		УправлениеФормой(ЭтотОбъект)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


