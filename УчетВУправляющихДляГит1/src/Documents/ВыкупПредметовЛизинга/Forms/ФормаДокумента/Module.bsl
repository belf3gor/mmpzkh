
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();

	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ВыкупПредметовЛизинга",
		"ФормаДокумента",
		НСтр("ru='Новости: Выкуп предметов лизинга'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда

		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда

		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьПорядокУчетаРасчетов(ЭтаФорма);

	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ТребуетсяСчетФактура Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ТекущийОбъект.Ссылка, 
			НомерСчетаФактурыПолученного, 
			ДатаСчетаФактурыПолученного);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

		Если ЗначениеЗаполнено(СчетФактура) Тогда
			НомерСчетаФактурыПолученного = "";
			ДатаСчетаФактурыПолученного  = '00010101';
		КонецЕсли;

		УправлениеФормойНаСервере();

	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьИнвентарныеНомераОС();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПорядокУчетаРасчетов(Форма)

	ОсобенностиДокумента = Документы.ВыкупПредметовЛизинга.ОсобенностиУчетаРасчетов();
	
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиДокумента);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"	   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВыкупПредметовЛизинга.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыФормы.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"	, АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"  			, Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам"  	, Объект.СчетУчетаРасчетовПоАвансам);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ТолькоПросмотр"      , ТолькоПросмотр);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	
	Если Не ПлательщикНДС Тогда
		СтруктураПараметров.Вставить("НДСНеВыделять"   , Объект.НДСНеВыделять);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если (НЕ РаздельныйУчетНДСНаСчете19 И НЕ Объект.НДСНеВыделять)
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 

		ОткрыватьИзМеню = Ложь;

	Иначе
		ОткрыватьИзМеню = Истина;
		Если ПлательщикНДС Тогда
			СтруктураПараметров.Вставить("НДСНеВыделять", Ложь);
		КонецЕсли;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		КонецЕсли;
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ДатаСчетаФактурыПолученного = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчет

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУПриИзменении(Элемент)

	Если НЕ Объект.СпособНачисленияАмортизацииНУ = 
		ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ") Тогда

		Объект.КоэффициентАмортизацииНУ = 0;
		Объект.СпециальныйКоэффициентНУ = 0;

	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);

КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчетУСН

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если СписокОСИзменен = Истина Тогда
		ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыАмортизационнаяПремия

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)

	Если НЕ ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		Если ПараметрыАмортизационнойПремииЗаполнены(ЭтаФорма) Тогда
			ТекстВопроса = НСтр("ru = 'Установленные параметры амортизационной премии будут очищены.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	Иначе
		
		Если Объект.ОС.Количество() > 0 Тогда
			ОсновноеСредство = Объект.ОС[0].ОсновноеСредство;
			Если ЗначениеЗаполнено(ОсновноеСредство) Тогда

				СтруктураПараметровАмортизационнойПремии = 
					УчетОСВызовСервера.ПараметрыНачисленияАмортизационнойПремии(ОсновноеСредство, Объект.Организация, Объект.Дата);
					
				Если СтруктураПараметровАмортизационнойПремии <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметровАмортизационнойПремии);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		СчетУчетаЗатратПоАмортизационнойПремииПриИзмененииНаКлиенте();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)

	СчетУчетаЗатратПоАмортизационнойПремииПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	СписокОСИзменен = Истина;

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ОсновноеСредство = ТекущиеДанные.ОсновноеСредство;

	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ТекущиеДанные.ИнвентарныйНомер = "";
		
	Иначе
		
		Сведения = ДополнительныеСведенияОС(ОсновноеСредство);
		
		Если Сведения[ОсновноеСредство] <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Сведения[ОсновноеСредство]);
			Объект.СрокПолезногоИспользованияНУ = Сведения[ОсновноеСредство].СрокПолезногоИспользованияНУ;
			МаксПериодПервоначальныхСведенийОС = Макс(МаксПериодПервоначальныхСведенийОС, Сведения[ОсновноеСредство].Период);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ОС", 1);

КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "ОС");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)

	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма);

	Если РеквизитыСФ <> Неопределено Тогда 
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетФактура) Тогда
		НомерСчетаФактурыПолученного = "";
		ДатаСчетаФактурыПолученного  = '00010101';
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолученнымиВЛизингОС(Команда)

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Укажите для заполнения контрагента, от которого были получены ОС!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", "", Отказ);
	КонецЕсли;

	Если ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Укажите для заполнения договор, по которому были получены ОС!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДоговорКонтрагента", "", Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОС.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена, продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьПолученнымиВЛизингОСЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Иначе

		ЗаполнитьПолученнымиВЛизингОСНаКлиенте();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента = Объект.Дата;
	ВключитьАмортизационнуюПремиюВСоставРасходов = ПараметрыАмортизационнойПремииЗаполнены(ЭтаФорма);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	УстановитьПараметрыПоДоговору();

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ТребуетсяСчетФактура = (ДоговорУказан ИЛИ НЕ ВестиУчетПоДоговорам) И НЕ Объект.НДСНеВыделять;

	УстановитьПорядокУчетаРасчетов(ЭтаФорма);

	СформироватьНадписьЦеныИВалюта(ЭтаФорма);

	ОбновитьИтоги(ЭтаФорма);

	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);

	ЗаполнитьИнвентарныеНомераОС();

	Если ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19  = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль   = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименениеУСН               = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет            = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ВестиУчетПоДоговорам        = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоДоговору()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		РасчетыВУЕ           = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		РасчетыВУЕ           = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(ПричиныИзменения)

	ПричиныИзменения.Добавить("Контрагент");
	
	МассивВидовДоговоров = ПолучитьМассивВидовДоговоров();
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
		ТребуетсяСчетФактура = НЕ Объект.НДСНеВыделять;
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзменения, "Контрагент");

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)

	ПричиныИзменения.Добавить("ДоговорКонтрагента");

	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	КурсДоИзменения      = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;

	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;

	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, РасчетыВУсловныхЕдиницах");

	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
		РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		РасчетыВУЕ = Ложь;
	КонецЕсли;

	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыль И ДоговорУказан Тогда
		ЗаполнитьПолученнымиВЛизингОСНаСервере();
	КонецЕсли;

	ЕстьСтроки = Объект.ОС.Количество() > 0;

	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;

	Если Объект.ЗачетАвансов.Количество() > 0 Тогда
		Объект.ЗачетАвансов.Очистить();
	КонецЕсли;

	ЗаполнитьСчетаУчета(ПричиныИзменения, "ДоговорКонтрагента");

	Если ЕстьСтроки И ПересчитатьЦены Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;

	ТребуетсяСчетФактура = НЕ Объект.НДСНеВыделять;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ОССчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОС.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОССчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетУчетаЗатратПоАмортизационнойПремии

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗатратПоАмортизационнойПремии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СтавкаНДС, СуммаНДС, СчетУчетаНДС, СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОС.Сумма", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОССуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОС.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОССпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.ОС.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.ОС.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СрокПолезногоИспользованияНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокПолезногоИспользованияНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НачислятьАмортизациюНУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетов.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.НДСНеВыделять,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не Объект.НДСНеВыделять;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ДоговорКонтрагента.Доступность = 
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	ЕстьВыкупнаяСтоимость = Форма.ИтогиВсего > 0;
	
	Элементы.ГруппаПараметрыНалоговыйУчет.Видимость = ЕстьВыкупнаяСтоимость;
	Элементы.ОтсутствуетВыкупнаяСтоимостьНУ.Видимость = НЕ ЕстьВыкупнаяСтоимость;

	НачислениеАмортизации = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	ВключениеВРасходыПриПринятииКУчету = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
		
	Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Видимость = НачислениеАмортизации;
	Элементы.ГруппаНУВключениеВРасходыПриПринятииКУчету.Видимость = ВключениеВРасходыПриПринятииКУчету;
	
	Элементы.ГруппаПараметрыНалоговыйУчетУСН.Видимость = ЕстьВыкупнаяСтоимость;
	Элементы.ОтсутствуетВыкупнаяСтоимостьУСН.Видимость = НЕ ЕстьВыкупнаяСтоимость;
	
	Элементы.ГруппаПараметрыАмортизационнойПремии.Видимость = ЕстьВыкупнаяСтоимость И НачислениеАмортизации;
	Элементы.АмортизационнаяПремияНеПрименяется.Видимость = НЕ ЕстьВыкупнаяСтоимость ИЛИ НЕ НачислениеАмортизации;
	Элементы.ГруппаСчетСубконтоАмортизационнойПремии.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;

	ЛинейныйСпособНачисленияАмортизации = 
		Объект.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
	Элементы.КоэффициентАмортизацииНУ.Доступность = НЕ ЛинейныйСпособНачисленияАмортизации;
	Элементы.СпециальныйКоэффициентНУ.Доступность = НЕ ЛинейныйСпособНачисленияАмортизации;
	
	Элементы.КоэффициентАмортизацииНУ.Доступность = Объект.НачислятьАмортизациюНУ И НЕ ЛинейныйСпособНачисленияАмортизации;
	Элементы.СпециальныйКоэффициентНУ.Доступность = Объект.НачислятьАмортизациюНУ И НЕ ЛинейныйСпособНачисленияАмортизации;

	Форма.РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);
	Форма.РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);
	Если Форма.ИтогиВсего > 0 Тогда
		Форма.АмортизационнаяПремияНеПрименяется = 
			НСтр("ru = 'Амортизационная премия не применяется при указанном порядке включения выкупной стоимости в состав расходов'");
	Иначе
		Форма.АмортизационнаяПремияНеПрименяется = НСтр("ru = 'Отсутствует выкупная стоимость'");
	КонецЕсли;
	Форма.ОтсутствуетВыкупнаяСтоимостьНУ = НСтр("ru = 'Отсутствует выкупная стоимость'");
	Форма.ОтсутствуетВыкупнаяСтоимостьУСН = НСтр("ru = 'Отсутствует выкупная стоимость'");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураНадписи = Новый Структура();
	Если (Форма.ЕстьВалютныйУчет И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета) ИЛИ Форма.РасчетыВУЕ Тогда

		СтруктураНадписи.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("Курс",             Объект.КурсВзаиморасчетов);
		СтруктураНадписи.Вставить("Кратность",        Объект.КратностьВзаиморасчетов);

	КонецЕсли;
	
	СтруктураНадписи.Вставить("НДСНеВыделять",   Объект.НДСНеВыделять);
	
	Если НЕ Объект.НДСНеВыделять Тогда

		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);

	КонецЕсли;

	СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);

	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.ОС.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.ОС.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(
					Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПересчитатьСуммы = Ложь, 
					ПересчитатьНДС = Ложь)

	Если ПересчитатьСуммы Тогда

		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;

	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ВалютаДоИзменения,
			СтруктураКурса, ПересчитатьСуммы, ПересчитатьНДС, Объект.НДСНеВыделять);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
					СтрокаТаблицы, 
					ВалютаПередИзменением, 
					СтруктураКурса, 
					ПересчитатьСумму, 
					ПересчитатьНДС,  
					НДСНеВыделять)

	Если ПересчитатьСумму Тогда

		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	СуммаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, СуммаВключаетНДС,
		Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

	СтрокаТаблицы.Сумма = Сумма;

	Если НДСНеВыделять Тогда
		СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
		Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);

	ОсновныеСредства = Новый Массив;
	Для Каждого НоваяСтрока Из ДобавленныеСтроки Цикл
		ОсновныеСредства.Добавить(НоваяСтрока.ОсновноеСредство);
	КонецЦикла;
	
	Сведения = ДополнительныеСведенияОС(ОсновныеСредства);
		
	Для Каждого НоваяСтрока Из ДобавленныеСтроки Цикл
		
		Если Сведения[НоваяСтрока.ОсновноеСредство] <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сведения[НоваяСтрока.ОсновноеСредство]);
		
			Объект.СрокПолезногоИспользованияНУ = 
				Макс(Объект.СрокПолезногоИспользованияНУ, Сведения[НоваяСтрока.ОсновноеСредство].СрокПолезногоИспользованияНУ);
			МаксПериодПервоначальныхСведенийОС = 
				Макс(МаксПериодПервоначальныхСведенийОС, Сведения[НоваяСтрока.ОсновноеСредство].Период);
				
		КонецЕсли;
		
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);

	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период", Новый СравнениеЗначений);
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАмортизационнойПремииЗаполнены(Форма)

	Результат = Истина;

	Объект = Форма.Объект;

	Если Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0
		И НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатратПоАмортизационнойПремии)
		И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии1)
		И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии2)
		И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии3) Тогда

		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ДатаОбработатьИзменение();

	УправлениеФормойНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;

	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , Истина);
	КонецЕсли;
	
	// При изменении даты предложить перезаполнить курс валюты

	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		СтарыйКурс      = Объект.КурсВзаиморасчетов;
		СтараяКратность = Объект.КратностьВзаиморасчетов;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

		Если СтарыйКурс <> Объект.КурсВзаиморасчетов ИЛИ СтараяКратность <> Объект.КратностьВзаиморасчетов Тогда
			ПересчитатьЦены = Объект.ОС.Количество() > 0;
			ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	
	УправлениеФормойНаСервере();
	
	Если ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Организация");

	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизацииПоАмортизационнойПремии) 
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(
			Объект.ПодразделениеОрганизацииПоАмортизационнойПремии, Объект.Организация) Тогда
			
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Объект.ПодразделениеОрганизации;
		
	КонецЕсли;

	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , Истина);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение(ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять		= Истина;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);

	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСНеВыделять           = СтруктураЦеныИВалюта.НДСНеВыделять;
		Если СтруктураЦеныИВалюта.Свойство("НДСВключенВСтоимость") Тогда
			Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ПриИзмененииЦеныИВалюты(
			ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПересчитатьЦены,
			СтруктураЦеныИВалюта.ПересчитатьНДС);
			
		ОбновитьОтображениеДанных();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ЗаполнитьРассчитатьСуммы(
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПолученнымиВЛизингОСЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ЗаполнитьПолученнымиВЛизингОСНаКлиенте();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолученнымиВЛизингОСНаКлиенте()

	ЗаполнитьПолученнымиВЛизингОСНаСервере();

	Если Объект.ОС.Количество() = 0 Тогда
		Если ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не обнаружены основные средства, полученные от ""%1"" по договору ""%2""!'"),
				Объект.Контрагент,
				Объект.ДоговорКонтрагента));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не обнаружены основные средства, полученные от ""%1""!'"),
				Объект.Контрагент));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолученнымиВЛизингОСНаСервере()

	Объект.ОС.Очистить();

	ОсновныеСредства = ОсновныеСредстваПоДоговоруЛизинга();
		
	Сведения = ДополнительныеСведенияОС(ОсновныеСредства);
		
	Для Каждого ОсновноеСредство Из ОсновныеСредства Цикл
		
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ОсновноеСредство;
		
		Если Сведения[ОсновноеСредство] <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сведения[ОсновноеСредство]);
		
			Объект.СрокПолезногоИспользованияНУ = 
				Макс(Объект.СрокПолезногоИспользованияНУ, Сведения[ОсновноеСредство].СрокПолезногоИспользованияНУ);
			МаксПериодПервоначальныхСведенийОС = 
				Макс(МаксПериодПервоначальныхСведенийОС, Сведения[ОсновноеСредство].Период);
				
		КонецЕсли;
			
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаКлиенте
Процедура ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда

		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ  = Неопределено;
		Объект.СчетУчетаЗатратПоАмортизационнойПремии          = Неопределено;
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии1                = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии2                = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии3                = Неопределено;

		СчетУчетаЗатратПоАмортизационнойПремииПриИзмененииНаКлиенте();

	Иначе

		ВключитьАмортизационнуюПремиюВСоставРасходов = Истина;

	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзмененииНаКлиенте()

	Если ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СчетУчетаЗатратПоАмортизационнойПремии");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)

	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ВыкупПредметовЛизинга.ЗаполнитьСчетаУчетаРасчетов(Объект);

	Если РасчетыВУЕ Тогда
		Объект.СчетУчетаАрендныхОбязательств = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ;
	ИначеЕсли ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		Объект.СчетУчетаАрендныхОбязательств = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал;
	Иначе
		Объект.СчетУчетаАрендныхОбязательств = ПланыСчетов.Хозрасчетный.АрендныеОбязательства;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОсновныеСредстваПоДоговоруЛизинга()
	
	ОсновныеСредства = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Период",             Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОС.ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОС
	|ГДЕ
	|	ПервоначальныеСведенияОС.Организация = &Организация
	|	И ПервоначальныеСведенияОС.Контрагент = &Контрагент
	|	И &УсловиеПоДоговору 
	|	И ПервоначальныеСведенияОС.СпособПоступления = ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)";
	
	Если ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеПоДоговору", "И ПервоначальныеСведенияОС.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеПоДоговору", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ОсновныеСредства = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;
	
	Возврат ОсновныеСредства;
	
КонецФункции

&НаСервере
Функция ДополнительныеСведенияОС(ОсновныеСредства)

	ДополнительныеСведенияОС = Новый Соответствие;
	
	МассивСчетовАрендныеОбязательства = Новый Массив;
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);    // 76.07.1
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал); // 76.27.1
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);  // 76.37.1

	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("МассивСчетовАрендныеОбязательства", МассивСчетовАрендныеОбязательства);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("ВВалютеРегламентированногоУчета", 
		Объект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТТаблицаОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&ОсновныеСредства)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	РАЗНОСТЬДАТ(СостоянияОСОрганизаций.ДатаСостояния, &Дата, МЕСЯЦ) КАК СрокИспользования
	|ПОМЕСТИТЬ ВТСостоянияОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновныеСредства)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Контрагент,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.КоэффициентАмортизации
	|ПОМЕСТИТЬ ВТПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновныеСредства)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &ВВалютеРегламентированногоУчета
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ВТВыкупнаяСтоимость
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&МассивСчетовАрендныеОбязательства), &ВидыСубконтоКонтрагентыДоговоры, Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ПараметрыАмортизации.СрокПолезногоИспользования ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ПараметрыАмортизации.СрокПолезногоИспользования - ЕСТЬNULL(ВТСостоянияОСОрганизаций.СрокИспользования, 0)
	|	КОНЕЦ КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ПервоначальныеСведения.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(ВыкупнаяСтоимость.Сумма, 0) КАК Сумма
	|ИЗ
	|	ВТТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыАмортизации КАК ПараметрыАмортизации
	|		ПО ТаблицаОС.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервоначальныеСведения КАК ПервоначальныеСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВыкупнаяСтоимость КАК ВыкупнаяСтоимость
	|			ПО ПервоначальныеСведения.Контрагент = ВыкупнаяСтоимость.Контрагент
	|				И ПервоначальныеСведения.ДоговорКонтрагента = ВыкупнаяСтоимость.ДоговорКонтрагента
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияОСОрганизаций КАК ВТСостоянияОСОрганизаций
	|		ПО ТаблицаОС.ОсновноеСредство = ВТСостоянияОСОрганизаций.ОсновноеСредство";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл

			Сведения = Новый Структура("СрокПолезногоИспользованияНУ,ИнвентарныйНомер,Период,Сумма,
				|СчетУчетаНДС, СпособУчетаНДС, СтавкаНДС, СуммаНДС, Всего");

			ЗаполнитьЗначенияСвойств(Сведения, Выборка);
			
			Сведения.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
			Сведения.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
			Сведения.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, Не Объект.НДСНеВыделять);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Сведения, Истина);
			Сведения.Всего = Сведения.Сумма;
			
			Если Не Объект.СуммаВключаетНДС Тогда
				Сведения.Сумма = Сведения.Всего - Сведения.СуммаНДС;
			КонецЕсли;
			
			ДополнительныеСведенияОС.Вставить(Выборка.ОсновноеСредство, Сведения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДополнительныеСведенияОС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыВыбораОСДляОплатУСН()

	СписокОС.ЗагрузитьЗначения(Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));
	Если СписокОС.Количество() = 0 Тогда
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
	Иначе
		ПараметрВыбораПоОС = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокОС.ВыгрузитьЗначения()));
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
		ПараметрыВыбораОСДляОплатУСН.Добавить(ПараметрВыбораПоОС);
	КонецЕсли;
	Элементы.ОплатаОсновноеСредство.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОСДляОплатУСН);
	СписокОСИзменен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
