#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И НЕ СчетНаОплатуПоставщикаТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СчетЗаказ";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетаНаОплату";
	КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Счет от поставщика""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетПоставщика") Тогда
		ТаблицаСведенийСчетНаОплату = ПолучитьТаблицуСведенийСчетаНаОплату(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетПоставщика", "Счет поставщика", 
			ПечатьТорговыхДокументов.ПечатьСчетаНаОплату(ТаблицаСведенийСчетНаОплату, ОбъектыПечати, ПараметрыПечати),,"ОбщийМакет.ПФ_MXL_СчетЗаказ");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплату");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	СчетНаОплату.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	СчетНаОплату.ВалютаДокумента КАК Валюта,
	|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаКод,
	|	СчетНаОплату.ВалютаДокумента.Наименование КАК ВалютаНаименование,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	СчетНаОплату.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.ПодразделениеОрганизации КАК Подразделение,
	|	СчетНаОплату.Контрагент КАК Поставщик,
	|	СчетНаОплату.Организация КАК Покупатель,
	|	СчетНаОплату.Контрагент КАК Получатель,
	|	СчетНаОплату.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетНаОплату.БанковскийСчетКонтрагента КАК БанковскийСчетПродавца,
	|	СчетНаОплату.БанковскийСчетКонтрагента.ТекстКорреспондента КАК ТекстКорреспондента,
	|	СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов.Наименование + "" "" + СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.Банк.Наименование + "" "" + СчетНаОплату.БанковскийСчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов.Код
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.БанковскийСчетКонтрагента.Банк.КоррСчет
	|		ИНАЧЕ СчетНаОплату.БанковскийСчетКонтрагента.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.БанковскийСчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + СчетНаОплату.БанковскийСчетКонтрагента.НомерСчета + "" в "" + СчетНаОплату.БанковскийСчетКонтрагента.Банк.Наименование + "" "" + СчетНаОплату.БанковскийСчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	СчетНаОплату.БанковскийСчетКонтрагента.НомерСчета КАК НомерСчета,
	|	СчетНаОплату.БанковскийСчетКонтрагента.Банк.Наименование КАК БанкНаименование,
	|	СчетНаОплату.БанковскийСчетКонтрагента.Банк.Код КАК БИК,
	|	СчетНаОплату.БанковскийСчетКонтрагента.Банк.КоррСчет КАК КоррСчет
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетНаОплату.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И СчетНаОплату.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	СчетНаОплату.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	СчетНаОплату.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплату.Номенклатура КАК Номенклатура,
	|	СчетНаОплату.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА СчетНаОплату.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА СчетНаОплату.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураАртикул,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК НоменклатураНаименование,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Содержание,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	СчетНаОплату.Количество КАК Количество,
	|	СчетНаОплату.Цена КАК Цена,
	|	СчетНаОплату.Сумма КАК Сумма,
	|	СчетНаОплату.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплату.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПечати КАК ДокументыДляПечати
	|		ПО СчетНаОплату.Ссылка = ДокументыДляПечати.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
	
КонецФункции

Функция ПолучитьТаблицуСведенийСчетаНаОплату(Знач МассивДокументов, СоответствиеДокументовИСчетов = Неопределено, ДокументыБезСчетовНаОплату = Неопределено) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	СтрокиДокументов = РезультатЗапроса[2].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыСчетаНаОплату();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ОбработатьТаблицуУслуги(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетНаОплатуПоставщикаУдалитьУслуги.Ссылка КАК СчетНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.УдалитьУслуги КАК СчетНаОплатуПоставщикаУдалитьУслуги";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.СчетНаОплату) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.СчетНаОплату.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ДокументОбъект.УдалитьУслуги.Количество() > 0 Тогда
				ТаблицаУслуг = ДокументОбъект.УдалитьУслуги.Выгрузить();
				
				Для Каждого СтрокаТЧ Из ТаблицаУслуг Цикл
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				КонецЦикла;
				
				ДокументОбъект.УдалитьУслуги.Очистить();
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось объединить товары и услуги в документе ""%1"" по причине:
			|%2'"), 
			Выборка.СчетНаОплату,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
			Выборка.СчетНаОплату, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре СчетНаОплатуПоставщика.ОбработатьТаблицуУслуги
			|не удалось объединить товары и услуги в %1 документах Счет от поставщика'"), 
			ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура СчетНаОплатуПоставщика.ОбработатьТаблицуУслуги
			|обработала очередную порцию документов Счет от поставщика: %1 элементов'"), 
			ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет предъявлена ли сумма НДС по документу
//
// Параметры:
// ТекущийДокумент - документ, сумму НДС которого нужно вычислить
//
// Возвращаемое значение:
// Булево - если сумма НДС в документе не нулевая
Функция НаличиеСуммыНДС(ТекущийДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СчетНаОплатуПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
	|	СчетНаОплатуПоставщикаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПоставщикаТовары.Ссылка";

	Запрос.УстановитьПараметр("СсылкаНаДокумент", ТекущийДокумент);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаНДС > 0;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	СписокУсловий = Новый Массив;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 51
		|	СчетНаОплатуПоставщика.НомерВходящегоДокумента КАК Номер,
		|	СчетНаОплатуПоставщика.ДатаВходящегоДокумента КАК Дата,
		|	СчетНаОплатуПоставщика.Ссылка,
		|	СчетНаОплатуПоставщика.СуммаДокумента
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
		|		ПО СчетНаОплатуПоставщика.Ссылка = СтатусыДокументов.Документ
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	СтрокаПоиска = "%";
	ЕстьСпецсимвол = Ложь;
	// Символы %_[] являются служебными в языке запросов. В случае наличия их в поисковой строке необходимо использовать спецсимвол
	Для Позиция = 1 По СтрДлина(Параметры.СтрокаПоиска) Цикл
		
		ТекущийСимвол = Сред(Параметры.СтрокаПоиска, Позиция, 1);
		
		Если СтрНайти("_%[]~", ТекущийСимвол) > 0 Тогда
			СтрокаПоиска = СтрокаПоиска + "~"+ТекущийСимвол;
			ЕстьСпецСимвол = Истина;
		Иначе 
			СтрокаПоиска = СтрокаПоиска + ТекущийСимвол;
		КонецЕсли; 
	
	КонецЦикла; 
	
	СтрокаПоиска = СтрокаПоиска+"%";
	
	СписокУсловий.Добавить("СчетНаОплатуПоставщика.НомерВходящегоДокумента ПОДОБНО &Номер"+?(ЕстьСпецсимвол, " СПЕЦСИМВОЛ ""~"" ", ""));
	Запрос.УстановитьПараметр("Номер", СтрокаПоиска);
	
	Для каждого ПараметрОтбора Из Параметры.Отбор Цикл
		
		ИмяРеквизита      = ПараметрОтбора.Ключ;
		ЗначениеРеквизита = ПараметрОтбора.Значение;
		
		Если  ИмяРеквизита = "Оплата" Тогда
			ПутьКРеквизиту = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Перечисление.СтатусОплатыСчета)";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Метаданные.Документы.СчетНаОплатуПоставщика) Тогда
			ПутьКРеквизиту = "СчетНаОплатуПоставщика."+ИмяРеквизита;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ДоговорКонтрагента" Тогда
			ДополнитьОтборПоДоговору(ЗначениеРеквизита);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ФиксированныйМассив") Тогда
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 В (&%2)", ПутьКРеквизиту, ИмяРеквизита);
		Иначе
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 = &%2", ПутьКРеквизиту, ИмяРеквизита);
		КонецЕсли; 
		
		СписокУсловий.Добавить(Условие);
		Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	
	КонецЦикла; 
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условия", СтрСоединить(СписокУсловий, " И "));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Количество() < 51 Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 от %2 (%3)",
				Выборка.Номер,
				Формат(Выборка.Дата, "ДЛФ=D"),
				Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
		
			ДанныеВыбора.Добавить(Выборка.Ссылка,ПредставлениеДокумента);
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнитьОтборПоДоговору(ЗначениеОтбора) Экспорт

	Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
		ОтборПоДоговору = Новый Массив(ЗначениеОтбора);
	Иначе
		ОтборПоДоговору = Новый Массив;
		ОтборПоДоговору.Добавить(ЗначениеОтбора);
	КонецЕсли;
	
	ОтборПоДоговору.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	ЗначениеОтбора = Новый ФиксированныйМассив(ОтборПоДоговору);

КонецПроцедуры


#КонецОбласти

#КонецЕсли