
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

#Область ОбработчикиСобытийДокумента

// Процедура-обработчик "ПроверкаЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Заключение Тогда
		ПроверяемыеРеквизиты.Добавить("ДатаВступленияВСилу");
		
		Если ДатаВступленияВСилу > ДатаОкончанияДействия Тогда
			Отказ = Истина;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неверно указан период действия договора.");
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И Не ДоговорУправления = Справочники.УПЖКХ_ДоговорыУправленияДомами.ПустаяСсылка() Тогда
		ПроверитьСтатусТекущегоДоговора(Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура-обработчик "ОбработкаПроведения" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_РегистрацияДоговоровУправленияДомами.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборДвижений = Движения.УПЖКХ_СведенияОДоговорахУправленияДомами;
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Заключение Тогда
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.ДоговорУправления  = СтруктураШапкиДокумента.ДоговорУправления;
		Движение.Действует          = Истина;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Заключение;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ДатаВступленияВСилу;
		
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата + 1;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.ДоговорУправления  = СтруктураШапкиДокумента.ДоговорУправления;
		Движение.Действует          = Ложь;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ИстечениеСрокаДействия;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ДатаОкончанияДействия;
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Пролонгация Тогда
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.ДоговорУправления  = СтруктураШапкиДокумента.ДоговорУправления;
		Движение.Действует          = Ложь;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Пролонгация;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ДатаОкончанияДействия;
	Иначе
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.ДоговорУправления  = СтруктураШапкиДокумента.ДоговорУправления;
		Движение.Действует          = Ложь;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Расторжение;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ДатаОкончанияДействия;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

Процедура ПроверитьСтатусТекущегоДоговора(Отказ)
	
	ТаблицаДоговоров = Справочники.УПЖКХ_ДоговорыУправленияДомами.ПолучитьДанныеДоговоровУправления(ДоговорУправления);
	
	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеДоговора = ТаблицаДоговоров.Получить(0);
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Заключение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.Регистратор) КАК Документ,
		|	УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.Регистратор КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами.СрезПоследних(
		|			&ДатаДокумента,
		|			Здание = &Здание
		|				И ДатаОперации < &ДатаНачала
		|				И НЕ Регистратор = &ТекущийДокумент) КАК УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор) КАК Документ,
		|	УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами КАК УПЖКХ_СведенияОДоговорахУправленияДомами
		|ГДЕ
		|	УПЖКХ_СведенияОДоговорахУправленияДомами.Период < &ДатаДокумента
		|	И УПЖКХ_СведенияОДоговорахУправленияДомами.ДатаОперации МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И НЕ УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор = &ТекущийДокумент
		|	И УПЖКХ_СведенияОДоговорахУправленияДомами.Здание = &Здание";
		Запрос.УстановитьПараметр("ДатаДокумента",   Дата);
		Запрос.УстановитьПараметр("Здание",          ДанныеДоговора.УправляемыйОбъект);
		Запрос.УстановитьПараметр("ДатаНачала",      ДатаВступленияВСилу);
		Запрос.УстановитьПараметр("ДатаКонца",       ДатаОкончанияДействия);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		ДоговораНаНачалоПериода         = Результат.Получить(0).Выгрузить();
		ДоговораСПересекающимсяПериодом = Результат.Получить(1).Выгрузить();
		
		ТаблицаДокументов = ДоговораНаНачалоПериода.СкопироватьКолонки();
		
		// Проверяем нет ли документов, которые фиксируют то, что текущее здание уже находится в управлении на дату начала управления, указанную в текущем документе.
		// Таких документов не может быть более одного.
		// -------[-----]----------- (текущий документ)
		// -----{--------}---------- (документ, который пытаемся найти)
		// ---{------}-------------- (документ, который пытаемся найти)
		Если Не ДоговораНаНачалоПериода.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), ДоговораНаНачалоПериода.Получить(0));
		КонецЕсли;
		
		ДоговораСПересекающимсяПериодом.Свернуть("Документ, ДокументСсылка");
		
		// Проверяем нет ли документов, которые фиксируют то, что текущее здание находится в управлении в периоде, пересекающимся с периодом, указанном в текущем документе.
		// Таких документов может быть несколько.
		// ---[-----------------]--- (текущий документ)
		// -----{--------}---------- (документ, который пытаемся найти)
		// --{-----------}---------- (документ, который пытаемся найти)
		// ----------{------------}- (документ, который пытаемся найти)
		// ----{---}----{----}------ (документы, которые пытаемся найти)
		Для Каждого СтрокаДоговора Из ДоговораСПересекающимсяПериодом Цикл
			Если ТаблицаДокументов.Найти(СтрокаДоговора.ДокументСсылка, "ДокументСсылка") = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), СтрокаДоговора);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДокументов.Количество() = 1 Тогда
			СтрокаДокумента = ТаблицаДокументов.Получить(0);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Здание уже находится в управлении в указанном периоде. Проверьте документ " + СтрокаДокумента.Документ + ".",
															  СтрокаДокумента.ДокументСсылка,
															  ,
															  ,
															  Отказ);
		ИначеЕсли ТаблицаДокументов.Количество() > 1 Тогда
			
			СтрокаДокументов = "";
			Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
				СтрокаДокументов = ?(ПустаяСтрока(СтрокаДокументов), СтрокаТаблицы.Документ, СтрокаДокументов + ", " + СтрокаТаблицы.Документ);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Здание уже находится в управлении в указанном периоде. Проверьте документы " + СтрокаДокументов + ".",
															 СтрокаТаблицы.ДокументСсылка,
															 ,
															 ,
															 Отказ);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Пролонгация Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.ДоговорУправления) КАК ДоговорУправления
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами.СрезПоследних(
		|			&ДатаДокумента,
		|			ДоговорУправления = &ДоговорУправления
		|				И ДатаОперации < &ДатаПролонгации
		|				И НЕ Регистратор = &ТекущийДокумент) КАК УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних
		|ГДЕ
		|	НЕ УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.Действует";
		Запрос.УстановитьПараметр("ДатаДокумента",     Дата);
		Запрос.УстановитьПараметр("ДоговорУправления", ДоговорУправления);
		Запрос.УстановитьПараметр("ДатаПролонгации",   ДатаОкончанияДействия);
		Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Чтобы пролонгировать договор, должны выполняться следующие условия:
		// 1. Он должен начать действовать до даты пролонгации.
		// 2. Срок действия договора должен истекать на дату пролонгации.
		Если Таблица.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Срок действия договора не истекает на дату пролонгации.", Отказ);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Расторжение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.ДоговорУправления) КАК ДоговорУправления,
		|	УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.ОперацияСДоговором,
		|	УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.Действует,
		|	УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних.ДатаОперации
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами.СрезПоследних(
		|			&ДатаДокумента,
		|			ДоговорУправления = &ДоговорУправления
		|				И НЕ Регистратор = &ТекущийДокумент) КАК УПЖКХ_СведенияОДоговорахУправленияДомамиСрезПоследних";
		Запрос.УстановитьПараметр("ДатаДокумента",     Дата);
		Запрос.УстановитьПараметр("ДоговорУправления", ДоговорУправления);
		Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Чтобы расторгать договор, должны выполняться следующие условия:
		// 1. Он должен начать действовать до даты расторжения.
		// 2. Срок действия договора не должен истекать на дату расторжения.
		
		ДоговорНеДействует = Ложь;
		Если Не Таблица.Количество() = 0 Тогда
			СтрокаСведений = Таблица.Получить(0);
			
			Если СтрокаСведений.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ИстечениеСрокаДействия
			 ИЛИ СтрокаСведений.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.Пролонгация Тогда
				Если СтрокаСведений.ДатаОперации <= ДатаОкончанияДействия Тогда
					ДоговорНеДействует = Истина;
				КонецЕсли;
				
			Иначе
				ДоговорНеДействует = Истина;
			КонецЕсли;
			
		Иначе
			// Если последняя запись о расторжении договора, то не даем расторгать его повторно.
			ДоговорНеДействует = Истина;
		КонецЕсли;
		
		Если ДоговорНеДействует Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Договор не действует на дату расторжения.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтатусТекущегоДоговора()

#КонецОбласти

#КонецЕсли
