#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьСтрокуТЧТоварыПоПоступлениюРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;

КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.УстановитьПараметр("ИзПереработки", ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ИзПереработки
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &ИзПереработки
	|			ТОГДА 0
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов КАК СчетРасчетов,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;
		
		// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
		// Дополнительно устанавливаем ставку 0%.
		СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
		РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
		ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
		Если РеализацияВЕАЭС
			И ВедетсяУчетНДСПоФЗ150 Тогда
			СтрокаТабличнойЧасти.КодТНВЭД  = Выборка.КодТНВЭД;
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;
		
		//Для НТТ в продажных ценах
		СтрокаТабличнойЧасти.ЦенаВРознице      = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.СуммаВРознице     = Выборка.СуммаВРознице;
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = Выборка.СтавкаНДСВРознице;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
				И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

		СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
		
		СтрокаТабличнойЧасти.Контрагент 		= Выборка.Контрагент;
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
		СтрокаТабличнойЧасти.СчетРасчетов 		= Выборка.СчетРасчетов;

		ЗаполнитьСтрокуТЧТоварыПоПоступлениюРегл(СтрокаТабличнойЧасти, Выборка);

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование) Экспорт

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.Количество;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.СчетУчета        = Выборка.СчетУчета;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
			И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ПоступлениеТоваровУслугВозвратнаяТара.СчетУчета,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Выборка.Количество;
		СтрокаВозвратнойТары.Цена         = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчета    = Выборка.СчетУчета;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
				И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаВозвратнойТары.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		ВидОперации = Документы.ВозвратТоваровПоставщику.ОпределитьВидОперацииПоДокументуОснованию(ДанныеЗаполнения);
		
		Сделка = ДанныеЗаполнения;
		
		Если ДанныеЗаполнения.Проведен Тогда
			// Заполним табличные части по поступлению Товаров.
			Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
				ЗаполнитьОборудованиеПоОснованию(ДанныеЗаполнения);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДанныеЗаполнения);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоОснованию(ДанныеЗаполнения);
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДоговорКонтрагента, "ВидДоговора")
				<> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом;
			СчетУчетаРасчетовПоТаре        = ДанныеЗаполнения.СчетУчетаРасчетовПоТаре;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполнятьПоОснованию = Ложь;
	Если ДанныеЗаполнения <> Неопределено Тогда

		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Основание")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;

		Если ДокументОснование <> Неопределено Тогда
			ЗаполнятьПоОснованию = Истина;
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		Иначе
			СуммаВключаетНДС = Ложь;
		КонецЕсли;

	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	Если ЗаполнятьПоОснованию
		И ДокументБезНДС
		И Товары.Итог("СуммаНДС") <> 0 Тогда
		ДокументБезНДС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Если Дата <> НачалоДня(ОбъектКопирования.Дата) Тогда
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
	КонецЕсли;

	Ответственный = Пользователи.ТекущийПользователь();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Товары.Количество() > 0 Тогда
		МассивТовары = Новый Массив(Товары.Количество());
		
		Товары.ЗагрузитьКолонку(МассивТовары, "Себестоимость");
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
		Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
			Товары.ЗагрузитьКолонку(МассивТовары, "КиЗ_ГИСМ");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мРазделятьПоСтавкамНДС  = ?(
		БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено,
		Ложь,
		Истина);
		
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	мУчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	ЭтоКомиссия = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	НТТ = мУчетВПродажныхЦенах И (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = мУчетВПродажныхЦенах И (ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
	РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	КонтролироватьЗаполнениеКодаТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	
	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Документы.ВозвратТоваровПоставщику.НеИспользуемыеТабличныеЧасти(ВидОперации);
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти);
		
	// Проверка табличной части "Товары"
	
	Если НТТ Тогда
		Если мУчетВПродажныхЦенах Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		Если НЕ мРазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
		Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
			ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	КонецЕсли;
	
	Если ДокументБезНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаНДС");
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодТНВЭД");
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");
		
		Если СтрокаТаблицы.СуммаНДС = 0 И ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС)
			И ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			Если ЗначениеЗаполнено(УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
					НСтр("ru = 'Сумма НДС'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "СуммаНДС";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка кода ТН ВЭД.
		Если КонтролироватьЗаполнениеКодаТНВЭД 
			И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "КодТНВЭД";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ТипСклада      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента)
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	мУчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	РозницаВПродажныхЦенах =
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		И мУчетВПродажныхЦенах
		И ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И НЕ ЭтоКомиссия;
	
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоКомиссия И ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
		Для Каждого Строка Из Товары Цикл
			Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Строка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Строка.СчетРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ФИФО 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		И Товары.Количество() > 0 Тогда
		
		МассивТовары = Новый Массив(Товары.Количество());
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
	КонецЕсли; 
	
	НеИспользуемыеТабличныеЧасти = Документы.ВозвратТоваровПоставщику.НеИспользуемыеТабличныеЧасти(ВидОперации);
	ОбщегоНазначенияБП.ОчиститьНеиспользуемыеТабличныеЧасти(ЭтотОбъект, НеИспользуемыеТабличныеЧасти);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		
		// В этом случае почистим в табличных частях поля ЗаказПокупателя, НомерГТД и СтранаПроисхождения.
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
	РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	ЗаполнятьКодТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	Если НЕ ЗаполнятьКодТНВЭД Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД)Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КорректировочныйСчетФактураПолученОтПоставщика Тогда
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект, "СчетФактураПолученный");
	Иначе
		ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект, "СчетФактураВыданный");
	КонецЕсли; 
	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		
		Если КорректировочныйСчетФактураПолученОтПоставщика Тогда
			УчетНДСПереопределяемый.СинхронизироватьРеквизитыСчетаФактурыПолученного(ЭтотОбъект);
		Иначе
			УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ВозвратТоваровПоставщику.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	ТаблицаСписанияТорговойНаценкиАТТ = УчетТоваров.ПодготовитьТаблицуСписанияТорговойНаценкиАТТ(
		ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты);
		
	ТаблицаСписанныеТоварыКомитента = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровКомитентаТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровКомитентаРеквизиты, Отказ);
		
	// Таблица товаров, закупленных по поручению комитентов
	ТаблицаЗакупленныеТоварыКомитентов = УчетТоваров.ПодготовитьТаблицуЗакупленныхТоварыКомитентов(
		ПараметрыПроведения.ЗакупленныеТоварыКомитента,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	// Таблица списанных товаров НТТ
	ТаблицаСписанныеТоварыНТТ = УчетТоваров.ПодготовитьТаблицуСписанныеТоварыНТТ(
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаНТТТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Отказ);
	
	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТарыТаблицаТовары,
		ПараметрыПроведения.СписаниеТарыРеквизиты, Отказ);
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	// Таблица взаиморасчетов с учетом зачета авансов комитентов
	ТаблицаВзаиморасчетыКомитентов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовКомитентовТаблица,
		Неопределено, ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Отказ);
		
	// Таблица списанных партий в раздельном учете
	ТаблицаНДСВключенВСтоимость = Документы.ВозвратТоваровПоставщику.ПодготовитьТаблицуНДСВключенВСтоимость(
		ПараметрыПроведения.ТоварыНДС, 
		ТаблицаСписанныеТовары, 
		ПараметрыПроведения.Реквизиты, Отказ);
		
	// Дополнение таблиц содержанием проводки
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ТаблицаСписанныеТовары);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ТаблицаСписанныеТоварыКомитента);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ТаблицаСписанныеТоварыНТТ);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ТаблицаСписаннаяТара);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(ПараметрыПроведения.РеализацияНДС);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаНТТТаблицаТовары);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(
		ПараметрыПроведения.КорректировкаСтоимостиТоваров);
	Документы.ВозвратТоваровПоставщику.ДобавитьКолонкуСодержание(
		ПараметрыПроведения.КорректировкаСтоимостиТоваровНТТ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаСписанныеТовары, ТаблицаВзаиморасчеты);
	
	// Учет доходов и расходов ИП
	ТаблицаВозвратаТоваровПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуВозвратаМПЗПоставщику(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Списание товаров и тары
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(ПараметрыПроведения.СписаниеТоваровКомитентаТаблицаТовары,
		ТаблицаСписанныеТоварыКомитента, ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(ПараметрыПроведения.СписаниеТарыТаблицаТовары,
		ТаблицаСписаннаяТара, ПараметрыПроведения.СписаниеТарыРеквизиты, Движения, Отказ);
	
	ТаблицаТоваровЗакупленныхДляКомитентов = Документы.ВозвратТоваровПоставщику.ПодготовитьТаблицуТоварыКомиссияПоЗакупке(
		ПараметрыПроведения.ЗакупленныеТоварыКомитента,	ПараметрыПроведения.Реквизиты);
		
	//Списать закупленные товары комитентов
	УчетТоваров.СформироватьДвиженияВозвратаПоЗакупленнымТоварамКомитента(
		ТаблицаТоваровЗакупленныхДляКомитентов, ТаблицаЗакупленныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Рублевые суммы документов в валюте
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.РублевыеСуммыДокументаТара,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Зачет авансов
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	// Зачет авансов комитентов
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетыКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);
	
	// Списание торговой наценки в АТТ (товаров с учетом торговой наценки в НТТ)
	УчетТоваров.СформироватьДвиженияСписаниеТорговойНаценкиАТТ(ТаблицаСписанияТорговойНаценкиАТТ,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваровНТТ(ТаблицаСписанныеТоварыНТТ,
		ПараметрыПроведения.СписаниеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);
		
	// Корректировка стоимости товаров и тары
	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТоваров(
		ПараметрыПроведения.КорректировкаСтоимостиТоваров,
		ТаблицаСписанияТорговойНаценкиАТТ, ТаблицаНДСВключенВСтоимость, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТоваров(
		ПараметрыПроведения.КорректировкаСтоимостиТоваровНТТ,
		ТаблицаСписанныеТоварыНТТ, ТаблицаНДСВключенВСтоимость, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТары(ПараметрыПроведения.КорректировкаСтоимостиТарыТаблицаТара,
		ТаблицаСписаннаяТара, ПараметрыПроведения.КорректировкаСтоимостиТарыРеквизиты, Движения, Отказ);
	
	// Учет НДС
	УчетНДС.СформироватьДвиженияВозвратТоваровПоставщику(
		ПараметрыПроведения.РеализацияНДС, ПараметрыПроведения.ТоварыНДС, ПараметрыПроведения.ТаблицаСписанияГТД, ТаблицаСписанныеТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВозвратМПЗПоставщику(ТаблицаВозвратаТоваровПоставщикуИП,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара));
	
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ВидСчетФактуры = ?(КорректировочныйСчетФактураПолученОтПоставщика, "СчетФактураПолученный", "СчетФактураВыданный");
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, ВидСчетФактуры);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ВидСчетФактуры = ?(КорректировочныйСчетФактураПолученОтПоставщика, "СчетФактураПолученный", "СчетФактураВыданный");
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, ВидСчетФактуры);
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецЕсли