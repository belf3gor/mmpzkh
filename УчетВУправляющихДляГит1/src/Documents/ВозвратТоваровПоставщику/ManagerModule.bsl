#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоПретензиям", "РасчетыПоПретензиям");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоТаре",        "ВозвратнаяТараПолученная");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "ЗапасыКромеПринятыхНаКомиссиюИлиВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Оборудование");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "МатериалыПринятыеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "МатериалыПереработчика");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПродажаТоваровКомитента");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "ТоварыПриобретенныеДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Оборудование");
	
	//  Оборудование (тоже в табличной части Товары)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",     "ОборудованиеНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Оборудование");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетРасчетов", "РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеТоваровДляКомитента");
	
	// Табличная часть ВозвратнаяТара
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "МатериалыПереработчика");

	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "МатериалыПереработчика", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Оборудование",           "ВидОперации");

	Возврат Правила;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МатериалыПереработчика") Тогда
		
		ДанныеЗаполнения.МатериалыПереработчика = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
			
	КонецЕсли;
		
	Если ДанныеЗаполнения.Свойство("Оборудование") Тогда
		
		ДанныеЗаполнения.Оборудование = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование);
			
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	ИменаРеквизитов = Новый Соответствие;
	ИменаРеквизитов.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
	ИменаРеквизитов.Вставить("СчетУчетаРасчетовПоПретензиям",  Истина);
	ИменаРеквизитов.Вставить("СчетУчетаРасчетовПоТаре",        Истина);
	
	СчетаУчетаВДокументах.ЗаполнитьРеквизиты(Объект, ИменаРеквизитов);
	
КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти


Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация.ИНН
	|		ИНАЧЕ Реквизиты.Организация.ИНН
	|	КОНЕЦ КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель.ОбособленноеПодразделение
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	НЕОПРЕДЕЛЕНО КАК Исполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ИсполнительНаОсновании,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЧерезКого,
	|	НЕОПРЕДЕЛЕНО КАК ЗаЗаказчикаНаОсновании,
	|	ИСТИНА КАК ЕстьТовары,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	НЕОПРЕДЕЛЕНО КАК ПериодичностьУслуги,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ТаблицаТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(ИспользуетсяПостановлениеНДС981 = Истина) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	ВозвратТоваровПоставщику.Дата КАК Дата,
	|	ВозвратТоваровПоставщику.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК Руководитель,
	|	НЕОПРЕДЕЛЕНО КАК ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	ВозвратТоваровПоставщику.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	"""" КАК КППСчетаФактуры,
	|	"""" КАК КПППродавца,
	|	ВозвратТоваровПоставщику.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|	И &УсловиеПоДате";
	
	Если ИспользуетсяПостановлениеНДС981 Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ВозвратТоваровПоставщику.Дата >= ДАТАВРЕМЯ(2017,10,1)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ВозвратТоваровПоставщику.Дата < ДАТАВРЕМЯ(2017,10,1)");
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуВозвратнаяТара.Номенклатура,
	|	ВозвратТоваровПоставщикуВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщикуВозвратнаяТара
	|ГДЕ
	|	ВозвратТоваровПоставщикуВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И НЕ ВозвратТоваровПоставщикуТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("Реквизиты",						НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",		НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	&ПустоеПодразделение КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.Организация.ИНН КАК ИННпоставщика,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	Реквизиты.Организация КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	1 КАК НомерСтроки,
	|	"""" КАК Товар,
	|	"""" КАК ТоварКод,
	|	"""" КАК ТоварАртикул,
	|	"""" КАК ТоварНаименование,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК ПредставлениеСтраны,
	|	"""" КАК НомерГТД,
	|	"""" КАК ПредставлениеГТД,
	|	"""" КАК ЕдиницаИзмерения,
	|	0 КАК КоличествоДоИзменения,
	|	0 КАК КоличествоПослеИзменения,
	|	0 КАК ЦенаДоИзменения,
	|	0 КАК ЦенаПослеИзменения,
	|	0 КАК СтоимостьБезНДСДоИзменения,
	|	0 КАК СтоимостьБезНДСПослеИзменения,
	|	0 КАК СуммаНДСПослеИзменения,
	|	0 КАК СуммаНДСДоИзменения,
	|	0 КАК СтоимостьСНДСДоИзменения,
	|	0 КАК СтоимостьСНДСПослеИзменения,
	|	0 КАК РазницаБезНДСУменьшение,
	|	0 КАК РазницаБезНДСУвеличение,
	|	0 КАК РазницаНДСУменьшение,
	|	0 КАК РазницаНДСУвеличение,
	|	0 КАК РазницаСНДСУменьшение,
	|	0 КАК РазницаСНДСУвеличение,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДСДоИзменения,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДСПослеИзменения,
	|	ИСТИНА КАК ЭтоУслуга,
	|	Таблица.Ссылка КАК Ссылка,
	|	"""" КАК АдресПоставщика,
	|	"""" КАК ИННКПППоставщика,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭДДоИзменения
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Таблица
	|ГДЕ
	|	ЛОЖЬ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

#КонецОбласти

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И ВозвратТоваровПоставщику.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И ВозвратТоваровПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И (ВозвратТоваровПоставщику.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|			ИЛИ ВозвратТоваровПоставщику.ДоговорКонтрагента.УчетАгентскогоНДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = ВозвратТоваровПоставщику.Ссылка)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И ВозвратТоваровПоставщику.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
	|	И ВозвратТоваровПоставщику.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|	И НЕ ВозвратТоваровПоставщику.ДоговорКонтрагента.УчетАгентскогоНДС";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Возвраты из переработки
	ВыборкаИзПереработки = Результат[1].Выбрать();
	Пока ВыборкаИзПереработки.Следующий() Цикл
		ДокументыСчетФактураНеТребуются.Добавить(ВыборкаИзПереработки.Ссылка);
	КонецЦикла;
	
	// Возвраты комитенту или по договорам налогового агента
	ВыборкаКомиссия_НА = Результат[2].Выбрать();
	Пока ВыборкаКомиссия_НА.Следующий() Цикл
		ДокументыСчетФактураНеТребуются.Добавить(ВыборкаКомиссия_НА.Ссылка);
	КонецЦикла;
	
	// Прочие возвраты
	ВыборкаВозврат = Результат[3].Выбрать();
	Пока ВыборкаВозврат.Следующий() Цикл
		
		Если НЕ ВыборкаВозврат.ЕстьНДС
			И (НЕ УчетнаяПолитика.ПлательщикНДС(ВыборкаВозврат.Организация, ВыборкаВозврат.Дата) 
			ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ВыборкаВозврат.Дата) >= 3 
			И НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ВыборкаВозврат.Организация, ВыборкаВозврат.Дата)) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(ВыборкаВозврат.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации =Перечисления. ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		ИначеЕсли ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьПоставщикуВыставляетсяСчетФактураНаВозврат");
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц, ЭтоОтложенноеПроведение);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Реквизиты.Вставить("ПлательщикНДС",        УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ВедетсяУчетНДСПоФЗ134",     УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСН",       УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент", УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПрименяетсяУСН",        Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",  Реквизиты.ПрименяетсяУСНПатент);
	
	УчетВПродажныхЦенах = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
	ЭтоДоговорСКомитентом = (Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Реквизиты.Вставить("СкладНТТВЦенахПродажи",
		УчетВПродажныхЦенах И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка И НЕ ЭтоДоговорСКомитентом);
	Реквизиты.Вставить("СкладАТТВЦенахПродажи",
		УчетВПродажныхЦенах И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин И НЕ ЭтоДоговорСКомитентом);
	Запрос.УстановитьПараметр("СкладНТТВЦенахПродажи", Реквизиты.СкладНТТВЦенахПродажи);
	Запрос.УстановитьПараметр("СкладАТТВЦенахПродажи", Реквизиты.СкладАТТВЦенахПродажи);
	
	Реквизиты.Вставить("ЭтоДоговорСПоставщиком",
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Реквизиты.Вставить("ЭтоДоговорСКомиссионером",
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Реквизиты.Вставить("ЭтоДоговорСКомиссионеромНаЗакупку",
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Реквизиты.Вставить("ЭтоВозвратИзПереработки",
		Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
	
	Реквизиты.Вставить("УказанаСделка", ЗначениеЗаполнено(Реквизиты.Сделка));
	Запрос.УстановитьПараметр("УказанаСделка", Реквизиты.УказанаСделка);
	
	Реквизиты.Вставить("СпособЗачетаАвансов", ?(Реквизиты.УказанаСделка,
		Перечисления.СпособыЗачетаАвансов.ПоДокументу, Перечисления.СпособыЗачетаАвансов.НеЗачитывать));
	Запрос.УстановитьПараметр("СпособЗачетаАвансов", Реквизиты.СпособЗачетаАвансов);

	Запрос.УстановитьПараметр("ИспользуетсяОтложенноеПроведение",
		ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период));
	
	Запрос.УстановитьПараметр("СчетаРассчитываемыеОперативно", УчетТоваров.СчетаРассчитываемыеОперативно());
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
			Результат = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",   НСтр("ru = 'Возвратная тара'"));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратПоставщикуНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗакупленныеТоварыКомитента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТоваровТорговаяНаценка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКорректировкаСтоимостиТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКорректировкаСтоимостиТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРублевыеСуммыДокументов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц, ЭтоОтложенноеПроведение)

	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                       НомераТаблиц.Количество());

	Если ЭтоОтложенноеПроведение Тогда
		// При отложенном проведении нет необходимости обращаться к табличным частям документа, 
		// которые могут содержать много строк. 
		// Суммы взаиморасчетов могут быть получены из ранее сформированных проводок документа.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК ЕстьТовары,
		|	ЛОЖЬ КАК ЕстьТоварыКомитента,
		|	ЛОЖЬ КАК ЕстьТара
		|ПОМЕСТИТЬ СоставДокумента
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
		|	МАКСИМУМ(СоставДокумента.ЕстьТоварыКомитента) КАК ЕстьТоварыКомитента,
		|	МАКСИМУМ(СоставДокумента.ЕстьТара) КАК ЕстьТара
		|ПОМЕСТИТЬ СоставДокумента
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА КАК ЕстьТовары,
		|		ЛОЖЬ КАК ЕстьТоварыКомитента,
		|		ЛОЖЬ КАК ЕстьТара
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка = &Ссылка
		|		И ТаблицаДокумента.СчетУчета.Забалансовый
		|		И ТаблицаДокумента.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.Сделка КАК Сделка,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК СчетУчетаРасчетовПоПретензиям,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	|	Реквизиты.ДоговорКонтрагента.КодРаздел7ДекларацииНДС КАК КодОперацииПоСделке,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДСПокупателем КАК НДСИсчисляетсяНалоговымАгентом,
	|	Реквизиты.КорректировочныйСчетФактураПолученОтПоставщика КАК КорректировочныйСчетФактураПолученОтПоставщика
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.Сделка КАК Сделка,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК СчетУчетаРасчетовПоПретензиям,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыКомитента, ЛОЖЬ) КАК ЕстьТоварыКомитента,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара,
	|	Реквизиты.КодОперацииПоСделке КАК КодОперацииПоСделке,
	|	Реквизиты.НДСИсчисляетсяНалоговымАгентом КАК НДСИсчисляетсяНалоговымАгентом,
	|	Реквизиты.КорректировочныйСчетФактураПолученОтПоставщика КАК КорректировочныйСчетФактураПолученОтПоставщика
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА &СкладАТТВЦенахПродажи
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
		|		ИНАЧЕ ТаблицаТовары.СчетУчета
		|	КОНЕЦ КАК СчетУчета,
		|	ТаблицаТовары.СчетУчета.Забалансовый КАК ЭтоКомиссия,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ВЫБОР
		|		КОГДА &РасчетыВВалюте
		|				И ВозвратТоваровПоставщику.КурсВзаиморасчетов <> 0
		|			ТОГДА ТаблицаТовары.СуммаВРознице * ВозвратТоваровПоставщику.КратностьВзаиморасчетов / ВозвратТоваровПоставщику.КурсВзаиморасчетов
		|		ИНАЧЕ ТаблицаТовары.СуммаВРознице
		|	КОНЕЦ КАК СуммаВзаиморасчетовВРознице,
		|	ТаблицаТовары.СуммаВРознице,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ТаблицаТовары.ДокументОприходования,
		|	ВЫБОР
		|		КОГДА &ИспользуетсяОтложенноеПроведение
		|				И ТаблицаТовары.Себестоимость = 0
		|				И НЕ ТаблицаТовары.СчетУчета В (&СчетаРассчитываемыеОперативно)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|						ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС
		|					ИНАЧЕ ТаблицаТовары.Сумма
		|				КОНЕЦ
		|		ИНАЧЕ ТаблицаТовары.Себестоимость
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Себестоимость <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СебестоимостьУказанаВДокументе,
		|	ТаблицаТовары.Контрагент,
		|	ТаблицаТовары.ДоговорКонтрагента,
		|	ЕСТЬNULL(ТаблицаТовары.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
		|	ЕСТЬNULL(ТаблицаТовары.ДоговорКонтрагента.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВалютаВзаиморасчетов,
		|	ЕСТЬNULL(ТаблицаТовары.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте,
		|	ТаблицаТовары.СчетРасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета.Забалансовый
		|				И ТаблицаТовары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КомиссияПоЗакупке
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ПО ТаблицаТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КомиссияПоЗакупке"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаВозвратнаяТара.Ссылка,
		|	ТаблицаВозвратнаяТара.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВозвратнаяТара.Номенклатура,
		|	ТаблицаВозвратнаяТара.Количество,
		|	ТаблицаВозвратнаяТара.Сумма КАК СуммаВзаиморасчетов,
		|	ТаблицаВозвратнаяТара.Сумма КАК СуммаРуб,
		|	ТаблицаВозвратнаяТара.СчетУчета
		|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ТаблицаВозвратнаяТара
		|ГДЕ
		|	ТаблицаВозвратнаяТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)

	НомераТаблиц = Новый Структура;
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		
		Если Реквизиты.СкладНТТВЦенахПродажи Тогда
			СуммыТаблицыТоварыВРознице = Результат[НомераТаблиц["СуммыТаблицыТоварыВРознице"]].Выгрузить();
			УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТоварыВРознице, Реквизиты);
			Запрос.УстановитьПараметр("СуммыТаблицыТоварыВРознице", СуммыТаблицыТоварыВРознице);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(Реквизиты);
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		СуммыТаблицыТара = Результат[НомераТаблиц["СуммыТаблицыТара"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТара, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТара", СуммыТаблицыТара);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТара();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ИНДЕКСИРОВАТЬ ПО
		|	КомиссияПоЗакупке",
		"ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки");
		
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		Если Реквизиты.СкладНТТВЦенахПродажи Тогда
			НомераТаблиц.Вставить("СуммыТаблицыТоварыВРознице", НомераТаблиц.Количество());
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.НомерСтроки,
			|	ВременнаяТаблицаТовары.СтавкаНДС,
			|	ВременнаяТаблицаТовары.СуммаВзаиморасчетовВРознице КАК СуммаВзаиморасчетов,
			|	ВременнаяТаблицаТовары.СуммаВРознице КАК СуммаРуб
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаВозвратнаяТара", "ПОМЕСТИТЬ ВременнаяТаблицаТара");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВозвратнаяТара.Ссылка = &Ссылка", "ТаблицаВозвратнаяТара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТара.НомерСтроки,
		|	ВременнаяТаблицаТара.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТара.СуммаРуб
		|ИЗ
		|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(Реквизиты)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.СкладНТТВЦенахПродажи Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	СуммыТаблицыТоварыВРознице.НомерСтроки КАК НомерСтроки,
		|	СуммыТаблицыТоварыВРознице.СуммаВзаиморасчетов,
		|	СуммыТаблицыТоварыВРознице.СуммаРуб
		|ПОМЕСТИТЬ СуммыТаблицыТоварыВРознице
		|ИЗ
		|	&СуммыТаблицыТоварыВРознице КАК СуммыТаблицыТоварыВРознице
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.ЭтоКомиссия,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	0 КАК СуммаВзаиморасчетовВРознице,
	|	0 КАК СуммаВРознице,
	|	ВременнаяТаблицаТовары.СтавкаНДСВРознице,
	|	ВременнаяТаблицаТовары.ДокументОприходования,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	ВременнаяТаблицаТовары.СебестоимостьУказанаВДокументе,
	|	ВременнаяТаблицаТовары.Контрагент,
	|	ВременнаяТаблицаТовары.ДоговорКонтрагента,
	|	ВременнаяТаблицаТовары.ВидДоговора,
	|	ВременнаяТаблицаТовары.ВалютаВзаиморасчетов,
	|	ВременнаяТаблицаТовары.РасчетыВУсловныхЕдиницах,
	|	ВременнаяТаблицаТовары.РасчетыВВалюте,
	|	ВременнаяТаблицаТовары.СчетРасчетов,
	|	ВременнаяТаблицаТовары.КомиссияПоЗакупке
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";
	
	Если Реквизиты.СкладНТТВЦенахПродажи Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"0 КАК СуммаВзаиморасчетовВРознице", "СуммыТаблицыТоварыВРознице.СуммаВзаиморасчетов КАК СуммаВзаиморасчетовВРознице");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"0 КАК СуммаВРознице", "СуммыТаблицыТоварыВРознице.СуммаРуб КАК СуммаВРознице");
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТоварыВРознице КАК СуммыТаблицыТоварыВРознице
		|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТоварыВРознице.НомерСтроки";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.КомиссияПоЗакупке";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТара()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТара.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб
	|ПОМЕСТИТЬ СуммыТаблицыТара
	|ИЗ
	|	&СуммыТаблицыТара КАК СуммыТаблицыТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТара.Ссылка,
	|	ВременнаяТаблицаТара.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТара.Номенклатура,
	|	ВременнаяТаблицаТара.Количество,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб,
	|	ВременнаяТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
	|ИЗ
	|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТара КАК СуммыТаблицыТара
	|		ПО ВременнаяТаблицаТара.НомерСтроки = СуммыТаблицыТара.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары ИЛИ Реквизиты.СкладНТТВЦенахПродажи Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровРеквизиты",              Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары",          Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровКомитентаРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровКомитентаТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Сделка,
	|	""Возврат поставщику"" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.СебестоимостьУказанаВДокументе,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК КорСчетСписания,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.КомиссияПоЗакупке
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ЕстьТоварыКомитента Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровКомитентаРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровКомитентаТаблицаТовары", Неопределено);
	Иначе
		НомераТаблиц.Вставить("СписаниеТоваровКомитентаРеквизиты",     НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СписаниеТоваровКомитентаТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Контрагент,
		|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.Сделка,
		|	""Возврат поставщику"" КАК Содержание
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад,
		|	Реквизиты.Дата КАК Период,
		|	ВЫБОР
		|		КОГДА &УказанаСделка
		|			ТОГДА Реквизиты.Сделка
		|		ИНАЧЕ ТаблицаТовары.ДокументОприходования
		|	КОНЕЦ КАК ДокументОприходования,
		|	ТаблицаТовары.Себестоимость,
		|	ТаблицаТовары.СебестоимостьУказанаВДокументе,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СуммаРуб,
		|	ТаблицаТовары.СуммаВзаиморасчетов,
		|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаТовары.Контрагент КАК Комитент,
		|	ТаблицаТовары.ДоговорКонтрагента КАК ДоговорКомиссии,
		|	ТаблицаТовары.СчетРасчетов КАК СчетАвансовСКомитентом,
		|	ТаблицаТовары.СчетРасчетов КАК СчетРасчетовСКомитентом,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
		|	0 КАК СуммаРасчетовСКомитентом,
		|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК КорСчетСписания,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.КомиссияПоЗакупке
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСписаниеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("СписаниеТарыРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТарыТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТарыРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТарыТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Сделка,
	|	""Возврат тары"" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	ТаблицаВозвратнаяТара.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВозвратнаяТара.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвратнаяТара.Номенклатура КАК Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА &УказанаСделка
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходования,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяОтложенноеПроведение
	|			ТОГДА ТаблицаВозвратнаяТара.СуммаРуб
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Себестоимость,
	|	ЛОЖЬ КАК СебестоимостьУказанаВДокументе,
	|	ТаблицаВозвратнаяТара.Количество КАК Количество,
	|	ТаблицаВозвратнаяТара.СуммаРуб,
	|	ТаблицаВозвратнаяТара.СуммаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК КорСчетСписания,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоВозвратИзПереработки
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером
		ИЛИ Реквизиты.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать
		ИЛИ (НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЭтоОтложенноеПроведение) Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента",       НомераТаблиц.Количество());
	
	Если Реквизиты.ЭтоОтложенноеПроведение Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК СуммаВзаиморасчетов,
		|	0 КАК СуммаРуб
		|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаТовары.СуммаРуб) КАК СуммаРуб
		|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	&СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов",   НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Сделка КАК ДокументАванса,
		|	0 КАК СуммаЗачета
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции 

Функция ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТоварыКомитента Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовКомитентовРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовКомитентовТаблица",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетовКомитентов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовКомитентовРеквизиты",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовКомитентовТаблица",                НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.СчетРасчетов,
	|	ТаблицаТовары.Контрагент,
	|	ТаблицаТовары.ДоговорКонтрагента,
	|	ТаблицаТовары.ВидДоговора,
	|	ТаблицаТовары.ВалютаВзаиморасчетов,
	|	ТаблицаТовары.РасчетыВУсловныхЕдиницах,
	|	ТаблицаТовары.РасчетыВВалюте,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаРуб) КАК СуммаРуб
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетовКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.КомиссияПоЗакупке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СчетРасчетов,
	|	ТаблицаТовары.Контрагент,
	|	ТаблицаТовары.ДоговорКонтрагента,
	|	ТаблицаТовары.ВидДоговора,
	|	ТаблицаТовары.ВалютаВзаиморасчетов,
	|	ТаблицаТовары.РасчетыВУсловныхЕдиницах,
	|	ТаблицаТовары.РасчетыВВалюте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	Реквизиты.НДСВключенВСтоимость
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СчетРасчетов,
	|	ТаблицаСуммВзаиморасчетов.СчетРасчетов КАК СчетАвансов,
	|	ТаблицаСуммВзаиморасчетов.Контрагент,
	|	ТаблицаСуммВзаиморасчетов.ДоговорКонтрагента,
	|	ТаблицаСуммВзаиморасчетов.ВидДоговора,
	|	ТаблицаСуммВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ТаблицаСуммВзаиморасчетов.РасчетыВВалюте,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетовКомитента КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВозвратПоставщикуНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("РеализацияНДС", Неопределено);
		ПараметрыПроведения.Вставить("ТоварыНДС",     Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеализацияНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТоварыНДС",     НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаНДСВзаиморасчетов,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СтавкаНДС,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Дата >= ДАТАВРЕМЯ(2016, 7, 1)
	|			ТОГДА НЕ ЕСТЬNULL(КлассификаторТНВЭД.СырьевойТовар, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНесырьевойТовар,
	|	СправочникНоменклатура.КодРаздел7ДекларацииНДС,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодСоответствуетСт149НКРФ,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов, ЛОЖЬ) КАК КодВключаетсяВРеестр,
	|	ЛОЖЬ КАК УслугиЗаРубежом
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|			ПО СправочникНоменклатура.КодТНВЭД = КлассификаторТНВЭД.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ПО СправочникНоменклатура.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоКомиссия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоКомиссия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТаблицаСписанияГТД", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаСписанияГТД", НомераТаблиц.Количество());
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗакупленныеТоварыКомитента(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТоварыКомитента Тогда
		ПараметрыПроведения.Вставить("ЗакупленныеТоварыКомитента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗакупленныеТоварыКомитента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Контрагент КАК Комитент,
	|	ТаблицаТовары.ДоговорКонтрагента КАК ДоговорКомиссии,
	|	ТаблицаТовары.СчетРасчетов,
	|	ТаблицаТовары.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетовКомитент,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетовКомитент
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|	ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаТовары.КомиссияПоЗакупке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Контрагент,
	|	ТаблицаТовары.ДоговорКонтрагента,
	|	ТаблицаТовары.СчетРасчетов,
	|	ТаблицаТовары.ВалютаВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	ТаблицаТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеТоваровТорговаяНаценка(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровТорговаяНаценкаРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТорговаяНаценкаНТТТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровТорговаяНаценкаРеквизиты",     НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	Реквизиты.ТипЦенРозничнойТорговли,
	|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК КорСчетСписания
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.СкладНТТВЦенахПродажи Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровТорговаяНаценкаНТТТаблицаТовары", Неопределено);
	Иначе
		НомераТаблиц.Вставить("СписаниеТоваровТорговаяНаценкаНТТТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СуммаВРознице КАК Сумма,
		|	ТаблицаТовары.СуммаВзаиморасчетовВРознице КАК ВалютнаяСумма,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ) КАК СчетУчета,
		|	Реквизиты.Склад КАК Склад,
		|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК КорСчетСписания,
		|	Реквизиты.СчетУчетаРасчетовПоПретензиям КАК КорСчетНаценка,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) КАК ВидКорСубконто3
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКорректировкаСтоимостиТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоВозвратИзПереработки
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТоваров",    Неопределено);
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТоваровНТТ", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если НЕ Реквизиты.СкладНТТВЦенахПродажи Тогда
		НомераТаблиц.Вставить("КорректировкаСтоимостиТоваров",           НомераТаблиц.Количество());
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТоваровНТТ", Неопределено);
	Иначе
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТоваров",    Неопределено);
		НомераТаблиц.Вставить("КорректировкаСтоимостиТоваровНТТ",        НомераТаблиц.Количество());
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Количество,
	|	ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаТовары.СуммаРуб
	|		ИНАЧЕ ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|		ИНАЧЕ ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоКомиссия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаКорректировкаСтоимостиТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТарыРеквизиты",   Неопределено);
		ПараметрыПроведения.Вставить("КорректировкаСтоимостиТарыТаблицаТара", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КорректировкаСтоимостиТарыРеквизиты",   НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КорректировкаСтоимостиТарыТаблицаТара", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	""Возврат тары"" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	ТаблицаВозвратнаяТара.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВозвратнаяТара.Количество,
	|	ТаблицаВозвратнаяТара.СуммаВзаиморасчетов,
	|	ТаблицаВозвратнаяТара.СуммаРуб
	|ИЗ
	|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРублевыеСуммыДокументов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("РублевыеСуммыДокументаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|   ""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
		|	ТаблицаТовары.СуммаНДСРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("РублевыеСуммыДокументаТовары", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		НомераТаблиц.Вставить("РублевыеСуммыДокументаТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|   ""ВозвратнаяТара"" КАК ИмяСписка,
		|	ТаблицаВозвратнаяТара.Ссылка,
		|	ТаблицаВозвратнаяТара.НомерСтроки,
		|	ТаблицаВозвратнаяТара.СуммаРуб
		|ИЗ
		|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("РублевыеСуммыДокументаТара", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПодготовитьТаблицуТоварыКомиссияПоЗакупке(ИсходнаяТаблица, ТаблицаПараметры) Экспорт
	
	Если ИсходнаяТаблица = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	МассивВалютРасчетовСКомитентами = ИсходнаяТаблица.ВыгрузитьКолонку("ВалютаРасчетовСкомитентом");
	ВалютаВзаиморасчетов = ТаблицаПараметры[0].ВалютаВзаиморасчетов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТаблицаПараметры[0].Период); 
	Запрос.УстановитьПараметр("МассивВалют", МассивВалютРасчетовСКомитентами);
	Запрос.УстановитьПараметр("Валюта", ВалютаВзаиморасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&МассивВалют) или Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	ВыборкаВалют = Запрос.Выполнить().Выбрать();
	
	СтруктураКурсаВалютыВзаиморасчетов = Новый Структура("Курс, Кратность");
	
	Если ВыборкаВалют.НайтиСледующий(ВалютаВзаиморасчетов, "Валюта") Тогда
		
		СтруктураКурсаВалютыВзаиморасчетов.Курс      = ВыборкаВалют.Курс;
		СтруктураКурсаВалютыВзаиморасчетов.Кратность = ВыборкаВалют.Кратность;
		
	Иначе
		
		СтруктураКурсаВалютыВзаиморасчетов.Курс      = 0;
		СтруктураКурсаВалютыВзаиморасчетов.Кратность = 0;
		
	КонецЕсли;	
		
	ТаблицаРезультат = ИсходнаяТаблица.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		СуммаРуб = ?(СтруктураКурсаВалютыВзаиморасчетов.Кратность = 0, 0, СтрокаТаблицы.СуммаВзаиморасчетов*СтруктураКурсаВалютыВзаиморасчетов.Курс/СтруктураКурсаВалютыВзаиморасчетов.Кратность);
		СуммаНДС = ?(СтруктураКурсаВалютыВзаиморасчетов.Кратность = 0, 0, СтрокаТаблицы.СуммаНДСВзаиморасчетов*СтруктураКурсаВалютыВзаиморасчетов.Курс/СтруктураКурсаВалютыВзаиморасчетов.Кратность);
		
		ВыборкаВалют.Сбросить();
		Если ВыборкаВалют.НайтиСледующий(СтрокаТаблицы.ВалютаРасчетовСКомитентом, "Валюта") Тогда
			
			Если НЕ ВыборкаВалют.Курс = 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетовКомитент = Окр(СуммаРуб*ВыборкаВалют.Кратность/ВыборкаВалют.Курс,2); 
				СтрокаТаблицы.СуммаНДСВзаиморасчетовКомитент = Окр(СуммаНДС*ВыборкаВалют.Кратность/ВыборкаВалют.Курс,2);
			Иначе
				СтрокаТаблицы.СуммаВзаиморасчетовКомитент = 0;
				СтрокаТаблицы.СуммаНДСВзаиморасчетовКомитент = 0;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.СуммаВзаиморасчетовКомитент = 0;
			СтрокаТаблицы.СуммаНДСВзаиморасчетовКомитент = 0;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции 

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт

	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Содержание = "Возврат %1 поставщику";
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Содержание, 
			БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета));
		СтрокаТаблицы.Содержание = Содержание;

	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуНДСВключенВСтоимость(ТаблицаТоварыНДС, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПодготовитьТаблицуНДСВключенВСтоимость(ТаблицаТоварыНДС, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДС ИЛИ УпрощенныйУчетНДС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСписанныеПартииНДС =  УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(Параметры.РеализованныеТовары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		Возврат ТаблицаСписанныеПартииНДС.Скопировать(Новый Структура("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости));
	Иначе
		Возврат ТаблицаСписанныеПартииНДС.Скопировать(Новый Структура("НДСВключенВСтоимость", Истина));
	КонецЕсли;
КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицуНДСВключенВСтоимость(ТаблицаРеализованныеТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость"	// 
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СтавкаНДС"
	;
	Параметры.Вставить("РеализованныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТовары, СписокОбязательныхКолонок));
	// Счет доходов при возврате не заполняется
	Параметры.РеализованныеТовары.Колонки.Добавить("СчетДоходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.РеализованныеТовары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";


	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		// Если в табличной части введены только товары, учиываемые на забалансовых счетах,
		// то такие операции не влияют на взаиморасчеты и не требуют актуализации.
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(НЕ ТаблицаТовары.ЭтоКомиссия
		|			ИЛИ ТаблицаТовары.КомиссияПоЗакупке)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.Контрагент,
		|	ТаблицаТовары.ДоговорКонтрагента,
		|	ТаблицаТовары.ВалютаВзаиморасчетов,
		|	ТаблицаТовары.ВидДоговора,
		|	Реквизиты.Дата
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.КомиссияПоЗакупке";
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда

		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Возврат поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Возврат поставщику'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактур";
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Возврат товаров поставщику""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Возврат поставщику",
			ПечатьВозвратаПоставщику(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ-12 (Товарная накладная)",
			ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), ,"ОбщийМакет.ПФ_MXL_ТОРГ12");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная();
	
	Шапка = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная");

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
			
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести табличную часть
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		Ном      = 0;
		ТоварыСуммаНДС = 0;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Ном = Ном + 1;
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);

			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			ТоварыСуммаНДС = ТоварыСуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;

		ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
		Пока ВыборкаСтрокТара.Следующий() Цикл

			Ном = Ном + 1;
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТара);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТара.Товар) + " (возвратная тара)";
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);

			Сумма    = Сумма    + ВыборкаСтрокТара.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТара.СуммаНДС;

		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если ТоварыСуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТоварыСуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + Ном
		+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Шапка, ОбъектыПечати, ПараметрыПечати);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой ТОРГ12,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТОРГ12(НомераТаблиц);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Шапка          = РезультатПакета[НомераТаблиц.Реквизиты].Выбрать();
	ЗапросТовары   = РезультатПакета[НомераТаблиц.ТабличнаяЧасть].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	Пока Шапка.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");
		ЕстьОбластьГосконтракты = (Макет.Области.Найти("ДатаНомерГосконтракт") <> Неопределено);

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной

		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		
		СведенияОПоставщике       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента);
		СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика      = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);

		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер   = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата    = "";

		Если ЕстьОбластьГосконтракты Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			
			Если ЗначениеЗаполнено(Шапка.ГосударственныйКонтракт) Тогда
				ОбластьМакетаДатаНомер  = Макет.ПолучитьОбласть("ДатаНомерГосконтракт");
			Иначе
				ОбластьМакетаДатаНомер  = Макет.ПолучитьОбласть("ДатаНомер");
			КонецЕсли;
			
		Иначе
			ОбластьМакетаДатаНомер = ОбластьМакетаШапка;
		КонецЕсли;
		
		ПараметрыДатаНомер = Новый Структура;
		ПараметрыДатаНомер.Вставить("НомерДокумента",          ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента, Истина, Ложь));
		ПараметрыДатаНомер.Вставить("ДатаДокумента",           Шапка.ДатаДокумента);
		ПараметрыДатаНомер.Вставить("ГосударственныйКонтракт", Шапка.ГосударственныйКонтракт);

		ОбластьМакетаДатаНомер.Параметры.Заполнить(ПараметрыДатаНомер);
		ТабличныйДокумент.Вывести(ОбластьМакетаДатаНомер);

		// Инициализация счетчика страниц
		НомерСтраницы = 1;

		// Инициализация итогов по странице
		ИтогоМестНаСтранице       = 0;
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;

		// Инициализация итогов по документу
		ИтогоМест       = 0;
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСумма      = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		
		Если Шапка.ВалютаДокумента = Шапка.ДоговорКонтрагентаВалютаВзаиморасчетов Тогда
			// Документ оформлен в валюте взаиморасчетов
			КурсДокумента      = ?(Шапка.КурсВзаиморасчетов = 0, 1, Шапка.КурсВзаиморасчетов);
			КратностьДокумента = ?(Шапка.КратностьВзаиморасчетов = 0, 1, Шапка.КратностьВзаиморасчетов);
		Иначе
			// Документ оформлен в валюте регламентированного учета
			КурсДокумента      =  1;
			КратностьДокумента =  1;
		КонецЕсли;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.ДатаДокумента);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.ДатаДокумента);
			ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = ДанныеФизЛица.Должность;
			ОбластьМакетаПодвал.Параметры.ФИОКладовщика = ДанныеФизЛица.Представление;
		КонецЕсли;
		
		ЗапросТовары.Сбросить();
		Пока ЗапросТовары.НайтиСледующий(Шапка.Ссылка, "Ссылка") Цикл
			
			ВыборкаСтрок = ЗапросТовары.Выбрать();
			
			КоличествоСтрок = ВыборкаСтрок.Количество();
		
			// Выводим многострочную часть документа
			Пока ВыборкаСтрок.Следующий() Цикл

				НомерСтроки = НомерСтроки + 1;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
				
				ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
				
				Если КурсДокумента <> 1 и КратностьДокумента <> 1 Тогда
					
					Если КратностьДокумента <> 0 Тогда
						
						СуммаРубДляЦены = ?(Шапка.СуммаВключаетНДС, ВыборкаСтрок.ВсегоРуб, ВыборкаСтрок.ВсегоРуб - ВыборкаСтрок.НДСРуб);
						
						ОбластьМакетаСтрока.Параметры.Цена = ?(ВыборкаСтрок.Количество = 0, 0, ?(СуммаРубДляЦены = 0, ВыборкаСтрок.Сумма*КурсДокумента/КратностьДокумента, СуммаРубДляЦены)/ВыборкаСтрок.Количество);
						
					Иначе
						
						СуммаРубДляЦены = ?(Шапка.СуммаВключаетНДС, ВыборкаСтрок.ВсегоРуб, ВыборкаСтрок.ВсегоРуб - ВыборкаСтрок.НДСРуб);
						
						ОбластьМакетаСтрока.Параметры.Цена = ?(ВыборкаСтрок.Количество = 0, 0, ?(СуммаРубДляЦены = 0, 0, СуммаРубДляЦены)/ВыборкаСтрок.Количество);
						
					КонецЕсли;
					
				Иначе
					ОбластьМакетаСтрока.Параметры.Цена = ?(ВыборкаСтрок.Количество = 0, 0, ВыборкаСтрок.Сумма/ВыборкаСтрок.Количество);
				КонецЕсли;	
					
				ОбластьМакетаСтрока.Параметры.Цена = ?(ВыборкаСтрок.Количество = 0, 0, ВыборкаСтрок.Сумма/ВыборкаСтрок.Количество);
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
					ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
					ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
				
				СуммаСНДС = ?(ВыборкаСтрок.ВсегоРуб = 0, (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), ВыборкаСтрок.ВсегоРуб);
				
				КоличествоМест = ВыборкаСтрок.КоличествоМест;
				Количество     = ВыборкаСтрок.Количество;
				СуммаНДС       = ?(ВыборкаСтрок.НДСРуб = 0, ВыборкаСтрок.СуммаНДС, ВыборкаСтрок.НДСРуб);
				СуммаБезНДС    = СуммаСНДС - СуммаНДС;

				ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;

				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
					
					Если КоличествоСтрок > 1 Тогда
						
						// Выводим итоги по странице
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
						ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
						
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
						
						// Очистим итоги по странице
						ИтогоМестНаСтранице       = 0;
						ИтогоКоличествоНаСтранице = 0;
						ИтогоСуммаНаСтранице      = 0;
						ИтогоНДСНаСтранице        = 0;
						ИтогоСуммаСНДСНаСтранице  = 0;
						
						// Выведем заголовок таблицы
						НомерСтраницы = НомерСтраницы + 1;
						ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
						ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				// Увеличим итоги по странице
				ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
				ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
				ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
				
				// Увеличим итоги по документу
				ИтогоМест       = ИтогоМест       + КоличествоМест;
				ИтогоКоличество = ИтогоКоличество + Количество;
				ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
				ИтогоНДС        = ИтогоНДС        + СуммаНДС;
				ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
				
			КонецЦикла;
			
		КонецЦикла;	

		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);

		// Выводим подвал документа
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
		
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;

		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, ВалютаРегламентированногоУчета);
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель   = СтрНайти(ПолнаяДатаДокумента," ");
		ВторойРазделитель   = СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
		ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Шапка, ОбъектыПечати, ПараметрыПечати);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		НомерСтроки КАК НомерСтрокиДокумента,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровПоставщику.Товары.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровПоставщику.Товары.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС
	|	),
	|	ВозвратТоваровПоставщику.ВозвратнаяТара.(
	|		НомерСтроки КАК НомерСтроки,
	|		НомерСтроки КАК НомерСтрокиДокумента,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровПоставщику.ВозвратнаяТара.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровПоставщику.ВозвратнаяТара.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		0 КАК СуммаНДС
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Товары.НомерСтроки,
	|	ВозвратТоваровПоставщику.ВозвратнаяТара.НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТОРГ12(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаТоваров",           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТабличнаяЧасть",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Номер КАК НомерДокумента,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщику.Склад КАК Склад,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Организация
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Контрагент КАК Плательщик,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Представление КАК Основание,
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.ДоговорКонтрагента.ГосударственныйКонтракт.Код, """") КАК ГосударственныйКонтракт,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ДоговорКонтрагентаВалютаВзаиморасчетов,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.КурсВзаиморасчетов,
	|	ВозвратТоваровПоставщику.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВозвратТоваровПоставщику.Коэффициент,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщику.НомерГТД,
	|	ВозвратТоваровПоставщику.СтранаПроисхождения,
	|	ВозвратТоваровПоставщику.СтавкаНДС,
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ВозвратТоваровПоставщику.Цена КАК Цена,
	|	ВозвратТоваровПоставщику.Количество КАК Количество,
	|	ВозвратТоваровПоставщику.КоличествоМест КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ВозвратТоваровПоставщику.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ВозвратТоваровПоставщику.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ВозвратТоваровПоставщику.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Коэффициент КАК Коэффициент,
	|	ВложенныйЗапрос.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапрос.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID,
	|	ВложенныйЗапрос.ЭтоКомиссия,
	|	ВложенныйЗапрос.ВсегоРуб КАК ВсегоРуб,
	|	ВложенныйЗапрос.НДСРуб КАК НДСРуб,
	|	ВложенныйЗапрос.СуммаБезНДСРуб КАК СуммаБезНДСРуб
	|ИЗ
	|	ВремТаблица КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВозвратТоваровПоставщику.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ВозвратТоваровПоставщику.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаИзмерения.Код,
	|	NULL,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВозвратТоваровПоставщику.Цена,
	|	ВозвратТоваровПоставщику.Количество,
	|	0,
	|	ВозвратТоваровПоставщику.Сумма,
	|	0,
	|	ВозвратТоваровПоставщику.НомерСтроки,
	|	2,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ВозвратТоваровПоставщику.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ВозвратТоваровПоставщику.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ВозвратнаяТара))
	|			И (ВозвратТоваровПоставщику.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК ВсегоВал,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДСВал,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ВозвратТоваровПоставщикуТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Ссылка,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

// Перечень табличных частей, данные которых не используются 
// в контексте документа, скрыты от пользователя
Функция НеИспользуемыеТабличныеЧасти(ВидОперации) Экспорт
	
	ТабличныеЧасти = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		Или ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ТабличныеЧасти.Добавить("ВозвратнаяТара");
	КонецЕсли;
	
	Возврат ТабличныеЧасти;
	
КонецФункции

#Область ОбработчикиОбновления

Процедура ЗаполнитьКодТНВЭДОтложено(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", '20160701'); // учет НДС по ФЗ-150
	Запрос.УстановитьПараметр("Россия", Справочники.СтраныМира.Россия);
	Запрос.УстановитьПараметр("СтраныЕАЭС", УправлениеКонтактнойИнформацией.СтраныУчастникиЕАЭС().ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураТоваров
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = НоменклатураТоваров.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Дата >= &Дата
	|	И Контрагенты.СтранаРегистрации <> &Россия
	|	И Контрагенты.СтранаРегистрации В(&СтраныЕАЭС)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|	И ВозвратТоваровПоставщикуТовары.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И НоменклатураТоваров.КодТНВЭД <> ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И ВозвратТоваровПоставщикуТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратТоваровПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаРезультата.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Для Каждого СтрокаДокумента Из ДокументОбъект.Товары Цикл
				Если СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаДокумента.КодТНВЭД = СтрокаДокумента.Номенклатура.КодТНВЭД;
				КонецЕсли;
			КонецЦикла;
			
			// Запись обработанного объекта.
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			ОтменитьТранзакцию();
			// Если не удалось обработать какой-либо элемент справочника, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВозвратТоваровПоставщику, СтрокаРезультата.Ссылка, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьКодТНВЭДОтложено
				|не удалось обработать некоторые документы ""Возврат товаров поставщику"" (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ВозвратТоваровПоставщику,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьКодТНВЭДОтложено
					|обработала очередную порцию документов ""Возврат товаров поставщику"": %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли