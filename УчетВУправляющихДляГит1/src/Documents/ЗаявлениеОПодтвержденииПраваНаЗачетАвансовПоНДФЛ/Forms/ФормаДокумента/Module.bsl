#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФиксируемыхПолей();
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Год, Организация, Ответственный", 
			"Объект.НалоговыйПериод",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьЗначенияПолейПоОрганизации();
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		
		ПриПолученииДанныхНаСервере(ТекущийОбъект);  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьИмяФайла();
	КонецЕсли;
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		ПрочитатьДанныеФизическогоЛица(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятВНалоговыйОрганПриИзменении(Элемент)
	
	Объект.ДокументПринятВНалоговыйОрган = ФлагБлокировкиДокумента;
	
	Если Не Объект.ДокументПринятВНалоговыйОрган Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиФамилияПриИзменении(Элемент)
	ПриИзмененииФиксируемогоЗначения("Фамилия");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиИмяПриИзменении(Элемент)
	ПриИзмененииФиксируемогоЗначения("Имя");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОтчествоПриИзменении(Элемент)
	ПриИзмененииФиксируемогоЗначения("Отчество");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиИННПриИзменении(Элемент)
	ПриИзмененииФиксируемогоЗначения("ИНН");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаРожденияПриИзменении(Элемент)
	ПриИзмененииФиксируемогоЗначения("ДатаРождения");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВидДокументаПриИзменении(Элемент)
	ПриИзмененииДанныхУдостоверенияЛичности();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСерияДокументаПриИзменении(Элемент)
	ПриИзмененииДанныхУдостоверенияЛичности();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНомерДокументаПриИзменении(Элемент)
	ПриИзмененииДанныхУдостоверенияЛичности();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКемВыданДокументПриИзменении(Элемент)
	ПриИзмененииДанныхУдостоверенияЛичности();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаВыдачиДокументаПриИзменении(Элемент)
	ПриИзмененииДанныхУдостоверенияЛичности();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Сотрудники.ТекущиеДанные <> Неопределено Тогда
		УстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, Элементы.Сотрудники.ТекущиеДанные, Объект.Проведен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора, МножественныйВыбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыОткрытия, Элементы.Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарточкуСотрудника(Команда)
	
	Если Элементы.Сотрудники.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.Сотрудник) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница", Элементы.Сотрудники.ТекущиеДанные.Сотрудник, "ЛичныеДанные");
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияДанныхСотрудника(Команда) 
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПоСотрудникуНаСервере(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();
	
	ОбнаруженыОшибки = Ложь;
	
	ПроверитьДанныеДокумента(ОбнаруженыОшибки);
	
	Если ОбнаруженыОшибки Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При проверке обнаружены ошибки.'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Проверка прошла успешно, ошибок не обнаружено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправить(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьИОтправитьЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьТехническуюВозможность(Объект.Ссылка, ДатаСеанса, Отказ);
	Если Не Отказ Тогда
		СдачаОтчетностиЧерезТакскомСпринтерКлиент.ПриНажатииНаКнопкуЗашифроватьИОтправить(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Записать();
	
	Отказ = Ложь;
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьТехническуюВозможность(Объект.Ссылка, ДатаСеанса, Отказ);
	Если Не Отказ Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФНС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьТехническуюВозможность(Объект.Ссылка, ДатаСеанса, Отказ);
	Если Не Отказ Тогда
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда=Неопределено)
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтправки(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПротоколОтправки(Команда)
	
	Отказ = Ложь;
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьТехническуюВозможность(Объект.Ссылка, ДатаСеанса, Отказ);
	Если Не Отказ Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьПротоколОтправки(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьТехническуюВозможность(Объект.Ссылка, ДатаСеанса, Отказ);
	Если Не Отказ Тогда
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВНалоговыйОрган;
	
	ПрочитатьДанныеФизическихЛиц(Объект.Сотрудники, НЕ Объект.Проведен);
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьРежимТолькоПросмотрФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(ДобавляемыеСотрудники)
	
	ЗаполняемыеСтроки = Новый Массив;
	
	ИдентификаторТекущейСтроки = Неопределено;
	Для Каждого Сотрудник Из ДобавляемыеСотрудники Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда 
			
			СтрокаПоСотруднику = Объект.Сотрудники.Добавить();
			СтрокаПоСотруднику.Сотрудник = Сотрудник;
			
			ЗаполняемыеСтроки.Добавить(СтрокаПоСотруднику);
			
			Если ИдентификаторТекущейСтроки = Неопределено Тогда
				ИдентификаторТекущейСтроки = СтрокаПоСотруднику.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПрочитатьДанныеФизическихЛиц(ЗаполняемыеСтроки);
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторТекущейСтроки;
		
		ДанныеЗаявления = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		УстановитьСвойстваЭлементовСФиксациейДанных(ЭтотОбъект, ДанныеЗаявления, Объект.Проведен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		ОчиститьПризнакиФиксированныхПолей(ДанныеТекущейСтроки);
		
		ЗаполняемыеСтроки = Новый Массив;
		ЗаполняемыеСтроки.Добавить(ДанныеТекущейСтроки);
		
		ПрочитатьДанныеФизическихЛиц(ЗаполняемыеСтроки);
		
		УстановитьСвойстваЭлементовСФиксациейДанных(ЭтотОбъект, ДанныеТекущейСтроки, Объект.Проведен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСотрудникуНаСервере(ИдентификаторОбновляемойСтроки)
	
	СтрокаДанныхПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторОбновляемойСтроки);
	
	Если СтрокаДанныхПоСотруднику <> Неопределено Тогда
		ОчиститьПризнакиФиксированныхПолей(СтрокаДанныхПоСотруднику);
		
		ОбновляемыеСтроки = Новый Массив;
		ОбновляемыеСтроки.Добавить(СтрокаДанныхПоСотруднику);
		
		ПрочитатьДанныеФизическихЛиц(ОбновляемыеСтроки);
		
		УстановитьСвойстваЭлементовСФиксациейДанных(ЭтотОбъект, СтрокаДанныхПоСотруднику, Объект.Проведен);
		УстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, СтрокаДанныхПоСотруднику, Объект.Проведен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛица(ФизическоеЛицо)
	
	СтрокиПоФизЛицу = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ФизическоеЛицо));
	
	Если СтрокиПоФизЛицу.Количество() > 0 Тогда
		ПрочитатьДанныеФизическихЛиц(СтрокиПоФизЛицу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическихЛиц(СтрокиДокумента, ОбновлятьНеФиксированныеДанные = Истина)
	
	ЗаполняемыеПоля = ИменаФиксируемыхПолей();
	
	СотрудникиДляЗаполнения = Новый Массив;
	ДанныеЗаявленийПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеПоСотруднику Из СтрокиДокумента Цикл
		
		Если СотрудникиДляЗаполнения.Найти(ДанныеПоСотруднику.Сотрудник) = Неопределено Тогда
		
			ПолучатьКадровыеДанныеСотрудника = Ложь;
			Если ОбновлятьНеФиксированныеДанные Тогда
				Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
					Если Не ДанныеПоСотруднику["Фикс" + ИмяПоля] Тогда 
						ПолучатьКадровыеДанныеСотрудника = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПолучатьКадровыеДанныеСотрудника Тогда
				СотрудникиДляЗаполнения.Добавить(ДанныеПоСотруднику.Сотрудник);
				ДанныеЗаявленийПоСотрудникам.Вставить(ДанныеПоСотруднику.Сотрудник, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПоСотруднику));
			КонецЕсли;
		
		Иначе
			ДанныеЗаявленийПоСотрудникам[ДанныеПоСотруднику.Сотрудник].Добавить(ДанныеПоСотруднику)
		КонецЕсли;
		
	КонецЦикла;
	
	Если СотрудникиДляЗаполнения.Количество() > 0 Тогда
		
		НеобходимыеКадровыеДанные = Новый Массив();
		
		НеобходимыеКадровыеДанные.Добавить("ФизическоеЛицо");
		НеобходимыеКадровыеДанные.Добавить("Фамилия");
		НеобходимыеКадровыеДанные.Добавить("Наименование");
		НеобходимыеКадровыеДанные.Добавить("Имя");
		НеобходимыеКадровыеДанные.Добавить("Отчество");
		НеобходимыеКадровыеДанные.Добавить("ДокументВид");
		НеобходимыеКадровыеДанные.Добавить("ДокументСерия");
		НеобходимыеКадровыеДанные.Добавить("ДокументНомер");
		НеобходимыеКадровыеДанные.Добавить("ДокументДатаВыдачи");
		НеобходимыеКадровыеДанные.Добавить("ДокументКемВыдан");
		НеобходимыеКадровыеДанные.Добавить("ДатаРождения");
		НеобходимыеКадровыеДанные.Добавить("ИНН");
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВТ, Истина, СотрудникиДляЗаполнения, НеобходимыеКадровыеДанные, Объект.Дата);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанныеФизЛиц.Фамилия КАК Фамилия,
		|	КадровыеДанныеФизЛиц.Имя КАК Имя,
		|	КадровыеДанныеФизЛиц.Отчество КАК Отчество,
		|	КадровыеДанныеФизЛиц.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанныеФизЛиц.ДокументВид КАК ВидДокумента,
		|	КадровыеДанныеФизЛиц.ДокументСерия КАК СерияДокумента,
		|	КадровыеДанныеФизЛиц.ДокументНомер КАК НомерДокумента,
		|	КадровыеДанныеФизЛиц.ДокументКемВыдан КАК КемВыданДокумент,
		|	КадровыеДанныеФизЛиц.ДокументДатаВыдачи КАК ДатаВыдачиДокумента,
		|	КадровыеДанныеФизЛиц.ИНН КАК ИНН,
		|	КадровыеДанныеФизЛиц.ФизическоеЛицо
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеЗаявленийПоСотруднику = ДанныеЗаявленийПоСотрудникам[Выборка.ФизическоеЛицо];
			
			Для каждого ДанныеЗаявления Из ДанныеЗаявленийПоСотруднику Цикл
				Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
					Если НЕ ДанныеЗаявления["Фикс" + ИмяПоля]
						И ОбновлятьНеФиксированныеДанные Тогда 
						
						ДанныеЗаявления[ИмяПоля] = Выборка[ИмяПоля];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаФиксируемыхПолей()
	
	ИменаФиксируемыхПолей = Новый Массив;
	
	ИменаФиксируемыхПолей.Добавить("ИНН");
	ИменаФиксируемыхПолей.Добавить("Фамилия");
	ИменаФиксируемыхПолей.Добавить("Имя");
	ИменаФиксируемыхПолей.Добавить("Отчество");
	ИменаФиксируемыхПолей.Добавить("ВидДокумента");
	ИменаФиксируемыхПолей.Добавить("СерияДокумента");
	ИменаФиксируемыхПолей.Добавить("НомерДокумента");
	ИменаФиксируемыхПолей.Добавить("КемВыданДокумент");
	ИменаФиксируемыхПолей.Добавить("ДатаВыдачиДокумента");
	ИменаФиксируемыхПолей.Добавить("ДатаРождения");
	
	Возврат ИменаФиксируемыхПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПризнакиФиксированныхПолей(СтрокаПоСотруднику)
	
	ИменаФиксируемыхПолей = ИменаФиксируемыхПолей();
	
	Для Каждого Поле Из ИменаФиксируемыхПолей Цикл
		СтрокаПоСотруднику["Фикс" + Поле] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФиксируемыхПолей()
	
	ИменаФиксируемыхПолей = ИменаФиксируемыхПолей();
	
	ЭлементОформленияИнфоНадписи = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	ГруппаОтбораИнфоНадписи = ЭлементОформленияИнфоНадписи.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаОтбораИнфоНадписи.Использование = Истина;
	ГруппаОтбораИнфоНадписи.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбораИнфоНадписи = ГруппаОтбораИнфоНадписи.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораИнфоНадписи.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Проведен");
	ЭлементОтбораИнфоНадписи.ПравоеЗначение = Истина;
	ЭлементОтбораИнфоНадписи.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	ОформляемоеПолеИнфонадпись = ЭлементОформленияИнфоНадписи.Поля.Элементы.Добавить();
	ОформляемоеПолеИнфонадпись.Использование = Истина;
	ОформляемоеПолеИнфонадпись.Поле = Новый ПолеКомпоновкиДанных("ИнфоНадписьИсправления");
	
	ЭлементОформленияИнфоНадписи.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	Для Каждого ИмяПоля Из ИменаФиксируемыхПолей Цикл
		ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтобра = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтобра.Использование = Истина;
		ЭлементОтобра.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.Фикс" + ИмяПоля);
		ЭлементОтобра.ПравоеЗначение = Истина;
		ЭлементОтобра.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		Шрифт = Новый Шрифт(Элементы[ИмяПоля].Шрифт,,, Истина);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
		
		ЭлементОтбораИнфоНадписи = ГруппаОтбораИнфоНадписи.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораИнфоНадписи.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.Фикс" + ИмяПоля);
		ЭлементОтбораИнфоНадписи.ПравоеЗначение = Истина;
		ЭлементОтбораИнфоНадписи.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИмяФайла()
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, , Ложь);
	ИмяФайла = ?(ДанныеФайла = Неопределено, "", ДанныеФайла.ИмяФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИнфонадписьИсправления(ИнфонадписьИсправления, ДанныеЗаявления, ДокументПроведен)
	
	ФиксируемыеПоля = ИменаФиксируемыхПолей();
	
	ЕстьЗафиксированныеДанные = Ложь;
	Для Каждого ИмяПоля Из ФиксируемыеПоля Цикл
		Если ДанныеЗаявления["Фикс" + ИмяПоля] Тогда
			ЕстьЗафиксированныеДанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументПроведен Тогда
		ИнфонадписьИсправления = НСтр("ru = 'Документ проведен, данные сотрудника зафиксированы и могут отличаться от данных в карточке сотрудника'");
	ИначеЕсли ЕстьЗафиксированныеДанные Тогда
		ИнфонадписьИсправления = НСтр("ru = 'Выделенные жирным шрифтом данные были зафиксированы в документе и могут отличаться от данных в карточке сотрудника'");
	Иначе
		ИнфонадписьИсправления = НСтр("ru = 'Данные о сотруднике берутся из карточки сотрудника автоматически.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхУдостоверенияЛичности()
	
	ПриИзмененииФиксируемогоЗначения("ВидДокумента");
	ПриИзмененииФиксируемогоЗначения("НомерДокумента");
	ПриИзмененииФиксируемогоЗначения("СерияДокумента");
	ПриИзмененииФиксируемогоЗначения("КемВыданДокумент");
	ПриИзмененииФиксируемогоЗначения("ДатаВыдачиДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФиксируемогоЗначения(ПутькДанным) 
	
	ДанныеЗаявления = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	ДанныеЗаявления["Фикс" + ПутькДанным] = Истина;
	УстановитьСвойстваЭлементовСФиксациейДанных(ЭтотОбъект, ДанныеЗаявления, Объект.Проведен);
	УстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, ДанныеЗаявления, Объект.Проведен);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовСФиксациейДанных(Форма, ДанныеЗаявления, ДокументПроведен = Ложь) Экспорт
	
	ИменаФиксируемыхПолей = ИменаФиксируемыхПолей();
	
	ЕстьФиксированныеДанные = Ложь;
	Для Каждого ИмяПоля Из ИменаФиксируемыхПолей Цикл
		УстановитьСвойстваЭлементаФиксируемыхДанных(Форма, ДанныеЗаявления, ИмяПоля, ДокументПроведен);
		ЕстьФиксированныеДанные = ЕстьФиксированныеДанные Или ДанныеЗаявления["Фикс" + ИмяПоля];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементаФиксируемыхДанных(Форма, ДанныеЗаявления, ИмяПоля, ДокументПроведен = Ложь) Экспорт
	
	Элементы = Новый Массив;
	Элементы.Добавить(Форма.Элементы[ИмяПоля]);
	
	Для Каждого Элемент Из Элементы Цикл
		Если ДанныеЗаявления["Фикс" + ИмяПоля] И 
			Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать Тогда
			
			Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
			
		ИначеЕсли Элемент.ОтображениеПредупрежденияПриРедактировании =  ОтображениеПредупрежденияПриРедактировании.НеОтображать
			И Не ДанныеЗаявления["Фикс" + ИмяПоля] И Не ДокументПроведен Тогда
			
			Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		ИначеЕсли ДокументПроведен И Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать Тогда
			
			Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	ЗаполнитьЗначенияПолейПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПолейПоОрганизации()
	
	ЗначенияДляЗаполнения = Новый Структура("Руководитель, Организация", "Объект.Руководитель", "Объект.Организация");
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	ЗаполнитьКодИФНСПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодИФНСПоОрганизации()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РегистрацияВНО = ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, Объект.Дата);
		
		Если ЗначениеЗаполнено(РегистрацияВНО) Тогда
			Объект.КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНО, "Код");
		Иначе
			Объект.КодИФНС = "";
		КонецЕсли;
	Иначе
		Объект.КодИФНС = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДокументПринятВНалоговыйОрган",
		"Доступность",
		Объект.Проведен);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоПросмотрФормы()
	
	Если Объект.ДокументПринятВНалоговыйОрган Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеДокумента(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОбнаруженыОшибки = Ложь;
	ПроверитьДанныеДокумента(ОбнаруженыОшибки);
	
	Если ОбнаруженыОшибки Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе обнаружены ошибки.
			|Продолжить (не рекомендуется)?'");
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Отказ = Ложь;
	ДатаСеанса = ТекущаяДатаСеанса();
	ПроверитьТехническуюВозможность(Ссылка, ДатаСеанса, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, ПолучатьСсылкуНаДвоичныеДанные);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьТехническуюВозможность(Ссылка, ДатаСеанса, Отказ)
	
	Если ДатаСеанса < '20180122' Тогда 
		ТекстСообщения = НСтр("ru = 'Формирование файла Заявления будет доступно после появления технической возможности приема документа информационной системой ФНС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

