#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийСотрудник;
&НаКлиенте
Перем ТекущийНомерСправки;
&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();
	КонецЕсли;
	
	Если Параметры.Ключ = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПустаяСсылка() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Год, Организация, Ответственный", 
			"Объект.НалоговыйПериод",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		Если Объект.НалоговыйПериод > 2014 Тогда
			Объект.НеВключатьДоходыПоЦеннымБумагам = Истина
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Телефон) Тогда 
			ЗаполнитьТелефонОрганизации();
		КонецЕсли;
		ПриПолученииДанныхНаСервере();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			ПрочитатьЗаписиДоходовИВычетов(Параметры.ЗначениеКопирования);
		КонецЕсли;
	КонецЕсли;
	
	УчетНДФЛФормы.СведенияОДоходахПриСозданииНаСервере(ЭтаФорма, "ЗаписиСведенияОДоходах.КодДохода", "СведенияОДоходахКодВычета", "СведенияОДоходахСуммаВычета");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьИмяФайла();
	КонецЕсли;
	
	УчетНДФЛФормы.СправкиНДФЛЗаполнитьСписокКонтролируемыхПолей(ЭтаФорма);
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗарплатаКадрыОтображениеОшибок.ПриЧтенииДанныхВФорме(
		ЭтотОбъект,
		ТекущийОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных());
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗарплатаКадрыОтображениеОшибок.ПередЗаписьюДанныхВФорме(ЭтотОбъект);
	
	СотрудникиДокумента = ТекущийОбъект.Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	УдаляемыеСотрудники = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЗаписиСведенияОДоходах Цикл
		Если СотрудникиДокумента.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
			Если УдаляемыеСотрудники.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
				УдаляемыеСотрудники.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ЗаписиСведенияОВычетах Цикл
		Если СотрудникиДокумента.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
			Если УдаляемыеСотрудники.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
				УдаляемыеСотрудники.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйСотрудник Из УдаляемыеСотрудники Цикл
		НайденныеСтроки = ЗаписиСведенияОДоходах.НайтиСтроки(Новый Структура("Сотрудник", УдаляемыйСотрудник));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаписиСведенияОДоходах.Удалить(НайденнаяСтрока);
		КонецЦикла;
		НайденныеСтроки = ЗаписиСведенияОВычетах.НайтиСтроки(Новый Структура("Сотрудник", УдаляемыйСотрудник));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаписиСведенияОВычетах.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	// Для документов с 2019 года записи доходов и вычетов храним в регистрах
	УстановитьДополнительныеСвойстваДокумента(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументПроведен = Объект.Проведен;
	
	УстановитьИмяФайла();
	ЗаполнитьСписокМесяцевНалоговогоПериода();
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	УстановитьДоступностьЭлементовФормы();
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, ДанныеТекущейСтроки, ДокументПроведен);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибок.ПослеЗаписиДанныхВФорме(
		ЭтотОбъект,
		ТекущийОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных());
		
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СправкиНДФЛДляПередачиВНалоговыйОрган", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		ПрочитатьДанныеФизическогоЛица(Источник);	
		
	ИначеЕсли ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		
		УстановитьПредставлениеРегистрацииВНО();
		
	ИначеЕсли ИмяСобытия = "ИзмененыДанныеСправки2НДФЛ" И Источник = ЭтаФорма Тогда
		
		ЗагрузитьДанныеСправкиИзХранилища(Параметр);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекстСообщения = "";
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось провести документ.
			|При проверке заполнения были обнаружены ошибки.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	УстановитьВариантыВидовСправок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	НалоговыйПериодПриИзмененииНаСервере();
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные; 
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеПриИзменении(Элемент)
	УстановитьВидимостьПодписанта(Объект.НалоговыйПериод, Объект.РегистрацияВНалоговомОргане, Объект.Дата, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РегистрацияВНалоговомОрганеСписокВыбора);
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ДанныеВыбора.Добавить("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.РегистрацияВНалоговомОргане = ВыбранноеЗначение.Регистрация;
		РегистрацияВНОПредставление = ВыбранноеЗначение.Представление;
		
		РегистрацияВНалоговомОрганеПриИзмененииНаСервере();
		
		ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные; 
		
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
		
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "РегистрацияВНОПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОткрытие(Элемент, СтандартнаяОбработка)
	
	УчетНДФЛКлиент.СправкиНДФЛРегистрацияВНалоговомОрганеОткрытие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьДоходыПоЦеннымБумагамПриИзменении(Элемент)
	НеВключатьДоходыПоЦеннымБумагамПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НалоговыйПериодПриИзмененииНаСервере()
	
	УстановитьСтраницуНалоговогоПериода(ЭтаФорма);
	
	Если Объект.НалоговыйПериод < 2015 И Объект.НомерКорректировки > 0 Тогда
		Объект.НомерКорректировки = 0;
		УстановитьОписаниеКорректировки(ЭтаФорма);
	КонецЕсли;
	
	УстановитьВидимостьИсправляемойСправки();
	УстановитьВариантыВидовСправок(Истина);
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		Если Не ДанныеСправки.ФиксНалоги Тогда
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьИсходныеСправкиПриПроведении() Тогда
		
		УчетНДФЛФормы.ПрочитатьИсходныеСправки(
			Объект.Сотрудники,
			Объект.НалоговыйПериод, 
			Объект.Дата, 
			Объект.Организация, 
			Объект.РегистрацияВНалоговомОргане, 
			Объект.НомерКорректировки)
		
	КонецЕсли;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		Объект.Сотрудники, 
		ЗаписиСведенияОДоходах, 
		ЗаписиСведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты,
		Объект.НомерКорректировки,
		Объект.КППОтправки);
	
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма, Истина);
	
	УстановитьВидимостьПодписанта(Объект.НалоговыйПериод, Объект.РегистрацияВНалоговомОргане, Объект.Дата, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.СведенияОВычетах.Очистить();
	Объект.СведенияОДоходах.Очистить();
	ЗаписиСведенияОВычетах.Очистить();
	ЗаписиСведенияОДоходах.Очистить();
	
	Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	УстановитьИмяФайла();
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФНС");
	
	УстановитьВидимостьПодписанта(Объект.НалоговыйПериод, Объект.РегистрацияВНалоговомОргане, Объект.Дата, Элементы);
	УстановитьВидимостьКППОтправки();
	УстановитьВариантыВидовСправок(Истина);
	ЗаполнитьКППОтправки();
	ЗаполнитьТелефонОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	
	ДанныеСправок = Новый Массив;
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		
		Если Не ДанныеСправки.ФиксНалоги Тогда
			
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
			
			ДанныеСправок.Добавить(ДанныеСправки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьИсходныеСправкиПриПроведении() Тогда
		
		УчетНДФЛФормы.ПрочитатьИсходныеСправки(
			ДанныеСправок,
			Объект.НалоговыйПериод, 
			Объект.Дата, 
			Объект.Организация, 
			Объект.РегистрацияВНалоговомОргане, 
			Объект.НомерКорректировки)
		
	КонецЕсли;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(
		ДанныеСправок, 
		ЗаписиСведенияОДоходах, 
		ЗаписиСведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина, 
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты);
		
	ЗаполнитьКППОтправки();
	
КонецПроцедуры

&НаСервере
Процедура НеВключатьДоходыПоЦеннымБумагамПриИзмененииНаСервере()

	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	ДанныеСправок = Новый Массив;
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		
		Если Не ДанныеСправки.ФиксНалоги Тогда
			
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
			
			ДанныеСправок.Добавить(ДанныеСправки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(
		ДанныеСправок, 
		ЗаписиСведенияОДоходах, 
		ЗаписиСведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина, 
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты);

КонецПроцедуры

&НаКлиенте
Процедура ВидСправокПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ОснованиеДляПредставленияСправок");
	Если Объект.НомерКорректировки > 0 И Объект.НалоговыйПериод >= 2015 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиИсправляемаяСправка", "Видимость", Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ") Или Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию"))
	КонецЕсли;
	УстановитьВидимостьДанныхРеорганизации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Элементы.Сотрудники.ТекущиеДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		АдресДанныхСправки = ПоместитьДанныеСправкиВоВременноеХранилище();
		ОткрытьФормуСтроки(АдресДанныхСправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	АдресДанныхСправки = ПоместитьДанныеСправкиВоВременноеХранилище(Истина);
	ОткрытьФормуСтроки(АдресДанныхСправки);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	СотрудникиПередУдалениемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере(ТекущийСотрудник);	
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятВНалоговыйОрганПриИзменении(Элемент)
	ДокументПринятВНалоговыйОрганПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументПринятВНалоговыйОрганПриИзмененииНаСервере()
	Модифицированность = Истина;
	Объект.ДокументПринятВНалоговыйОрган = ФлагБлокировкиДокумента;
	
	Если Не Объект.ДокументПринятВНалоговыйОрган Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПриИзменении(Элемент)
	НомерКорректировкиДоИзменений = Объект.НомерКорректировки;
	Если Корректировка = "Исходная" Тогда
		Объект.НомерКорректировки = 0
	ИначеЕсли Корректировка = "Корректирующая" Тогда
		Объект.НомерКорректировки = Макс(Объект.НомерКорректировки, 1)
	ИначеЕсли Корректировка = "Аннулирующая" Тогда
		Объект.НомерКорректировки = 99;
		ОчиститьАннулирующуюСправкуНаСервере();
	Иначе
		Корректировка = "Исходная"; 
		Объект.НомерКорректировки = 0;
	КонецЕсли;
	Если Объект.НалоговыйПериод >= 2015 И (Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ") Или Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию")) Тогда
		ТребуетсяСправка = Объект.НомерКорректировки > 0;
		Если (НомерКорректировкиДоИзменений > 0) <> ТребуетсяСправка Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиИсправляемаяСправка", "Видимость", ТребуетсяСправка)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	НомерКорректировкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НомерКорректировкиПриИзмененииНаСервере()
	УстановитьОписаниеКорректировки(ЭтаФорма);
	Если Объект.НомерКорректировки = 99 Тогда
		ОчиститьАннулирующуюСправкуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьАннулирующуюСправкуНаСервере()
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	ЗаписиСведенияОДоходах.Очистить();
	ЗаписиСведенияОВычетах.Очистить();
	Объект.УведомленияНОоПравеНаВычеты.Очистить();
	ПоляИтогов = УчетНДФЛ.ПоляИтоговСправки2НДФЛ();
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Для каждого ИмяПоля Из ПоляИтогов Цикл
			СтрокаСотрудника[ИмяПоля] = 0
		КонецЦикла;
		СтрокаСотрудника.ФиксНалоги = Ложь;
		СтрокаСотрудника.ФиксУведомление = Ложь;
	КонецЦикла;
	УстановитьОтображениеНалоговПоСтавкам();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Проверить(Команда)
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При проверке обнаружены ошибки.'"));
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = НСтр("ru = 'Проверка прошла успешно, ошибок не обнаружено. 
								|Выполнить дополнительную проверку программой Tester?'");
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроверитьСтороннейПрограммой();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ") Или Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Автоматически заполняются только справки для ежегодной отчетности. 
							|Справки о невозможности удержания налога заполняются вручную.'"));
		Возврат;	
	КонецЕсли;

	Если НЕ ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.РегистрацияВНалоговомОргане.Пустая() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указаны %1.'"), Элементы.РегистрацияВНалоговомОргане.Заголовок));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗарегистрированыДоходы Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По %1 %2 не зарегистрированы доходы.'"), 
			РегистрацияВНОПредставление, 
			Элементы.РегистрацияВНалоговомОргане.Заголовок));
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьНаСервере();
	Если Объект.Сотрудники.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для заполнения документа.'");
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Внимание.'"));
	Иначе
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыОткрытия, Элементы.Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура Пронумеровать(Команда)
	ПронумероватьСправкиНаСервере(ТекущийСотрудник, ТекущийНомерСправки);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияДанныхСотрудника(Команда)
	ОтменитьИсправлениеДанныхСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарточкуСотрудника(Команда)
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница", ДанныеТекущейСтроки.Сотрудник, "ЛичныеДанные");
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда=Неопределено)
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНалоги(Команда)
	ОбновитьНалогиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуСтроки(АдресДанныхСправки)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресДанныхСправкиВХранилище", АдресДанныхСправки);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВнешниеДанные", Истина);
	
	Если ОбщегоНазначенияКлиент.РежимОтладки() Тогда
		ИмяОткрываемойФормы = "Документ.СправкаНДФЛ.Форма.ФормаДокумента";
	Иначе
		ИмяОткрываемойФормы = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Форма.ФормаСтроки";
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДФЛВТаблицеСотрудники()
	Для Каждого СтрокаТаблицы Из Объект.Сотрудники Цикл
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы);		
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы)
	
	СтрокаТаблицы.Ставка03 = Перечисления.НДФЛСтавки.Ставка03;
	СтрокаТаблицы.Ставка05 = Перечисления.НДФЛСтавки.Ставка05;
	СтрокаТаблицы.Ставка06 = Перечисления.НДФЛСтавки.Ставка06;
	СтрокаТаблицы.Ставка07 = Перечисления.НДФЛСтавки.Ставка07;
	СтрокаТаблицы.Ставка09 = Перечисления.НДФЛСтавки.Ставка09;
	СтрокаТаблицы.Ставка10 = Перечисления.НДФЛСтавки.Ставка10;
	СтрокаТаблицы.Ставка12 = Перечисления.НДФЛСтавки.Ставка12;
	СтрокаТаблицы.Ставка13 = Перечисления.НДФЛСтавки.Ставка13;
	СтрокаТаблицы.Ставка15 = Перечисления.НДФЛСтавки.Ставка15;
	СтрокаТаблицы.Ставка30 = Перечисления.НДФЛСтавки.Ставка30;
	СтрокаТаблицы.Ставка35 = Перечисления.НДФЛСтавки.Ставка35;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	ОписаниеЭлементовИндикации = ОписаниеЭлементовСИндикациейОшибок();
	ОписаниеПодчиненности = ОписаниеПодчиненностиДанных();
	ФормаДополнена = Истина;
	
	ЗарплатаКадрыОтображениеОшибок.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеЭлементовИндикации, ОписаниеПодчиненности);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПредставлениеРегистрацииВНО()
	УчетНДФЛФормы.СправкиНДФЛУстановитьПредставлениеРегистрацииВНО(ЭтаФорма);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСтороннейПрограммой()
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	
	КаталогПрограммы = ПолучитьКаталогПрограммыПроверки();
	
	ПараметрыПроверки = Новый Структура(
		"КаталогПрограммы,
		|ОписаниеФайла");
	ПараметрыПроверки.КаталогПрограммы = КаталогПрограммы;
	ПараметрыПроверки.ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	// Если каталог не определен, надо его выбрать.
	ТекстСообщения = НСтр("ru = 'Для проверки файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	Обработчик = Новый ОписаниеОповещения("ПроверитьСтороннейПрограммойПослеПодключенияРасширения", ЭтотОбъект, ПараметрыПроверки);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Обработчик, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннейПрограммойПослеПодключенияРасширения(Подключено, ПараметрыПроверки) Экспорт 
	
	Если Не Подключено Тогда
		// Расширение не установлено, просто скачиваем файл.
		ОписаниеФайла = ПараметрыПроверки.ОписаниеФайла;
		ПолучитьФайл(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);
		Возврат;
	КонецЕсли;
	
	// Если каталог определен, проверим существует ли в каталоге файл программы.
	Если ЗначениеЗаполнено(ПараметрыПроверки.КаталогПрограммы) Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеИнициализацииФайла", ЭтотОбъект, ПараметрыПроверки);
		ВыбранныйКаталог = Новый Файл;
		ВыбранныйКаталог.НачатьИнициализацию(ОповещениеЗавершения, ПараметрыПроверки.КаталогПрограммы + "\Tester.exe");
		Возврат;
	КонецЕсли;
	
	ПроверкаСтороннейПрограммойКаталогПрограммыНеОбнаружен(ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойКаталогПрограммыНеОбнаружен(ПараметрыПроверки)
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеВыбораКаталога", ЭтотОбъект, ПараметрыПроверки);
	ОткрытьФорму("ОбщаяФорма.ВыборПроверочнойПрограммы", , ЭтотОбъект, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеВыбораКаталога(ВыбранныеФайлы, ПараметрыПроверки) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Каталог выбран, надо проверить его.
	ПараметрыПроверки.КаталогПрограммы = ВыбранныеФайлы[0];
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеИнициализацииФайла", ЭтотОбъект, ПараметрыПроверки);
	ВыбранныйКаталог = Новый Файл;
	ВыбранныйКаталог.НачатьИнициализацию(ОповещениеЗавершения, ПараметрыПроверки.КаталогПрограммы + "\Tester.exe");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеИнициализацииФайла(ФайлПрограммы, ПараметрыПроверки) Экспорт 
	
	// Проверяем на существование файл.
	ФайлПрограммы.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеПроверкиСуществования", ЭтотОбъект, ПараметрыПроверки));
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеПроверкиСуществования(Существует, ПараметрыПроверки) Экспорт 
	
	Если Не Существует Тогда
		ПроверкаСтороннейПрограммойКаталогПрограммыНеОбнаружен(ПараметрыПроверки);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеПолученияФайлов", ЭтотОбъект, ПараметрыПроверки);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПараметрыПроверки.ОписаниеФайла);
	
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыПроверки.КаталогПрограммы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеПолученияФайлов(ПолученныеФайлы, ПараметрыПроверки) Экспорт 
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаписатьКаталогПрограммыВНастройках(ПараметрыПроверки.КаталогПрограммы);

	СтрокаЗапускаПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1Tester.exe %1%2",
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыПроверки.КаталогПрограммы),
		ПараметрыПроверки.ОписаниеФайла.Имя);
	
	Обработчик = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеЗапускаПриложения", ЭтотОбъект, ПараметрыПроверки);
	НачатьЗапускПриложения(Обработчик, СтрокаЗапускаПриложения, ПараметрыПроверки.КаталогПрограммы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеЗапускаПриложения(КодВозврата, ПараметрыПроверки) Экспорт 
	
	НачатьУдалениеФайлов(, ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыПроверки.КаталогПрограммы) + ПараметрыПроверки.ОписаниеФайла.Имя); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогПрограммыПроверки()
	
	КаталогПрограммы = ХранилищеОбщихНастроек.Загрузить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки"); 	
	
	Возврат КаталогПрограммы;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКаталогПрограммыВНастройках(КаталогПрограммы)
	ХранилищеОбщихНастроек.Сохранить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки", КаталогПрограммы);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);
	
	Если Отказ Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуНалоговогоПериода(Форма)
	
	Форма.Элементы.СтраницыНалоговыхПериодов.ТекущаяСтраница = ?(Форма.Объект.НалоговыйПериод < 2015, Форма.Элементы.Страница2014, Форма.Элементы.Страница2015);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОписаниеКорректировки(Форма)
	
	Если Форма.Объект.НомерКорректировки = 0 Тогда
		Форма.Корректировка = "Исходная"
	ИначеЕсли Форма.Объект.НомерКорректировки = 99 Тогда
		Форма.Корректировка = "Аннулирующая"
	Иначе
		Форма.Корректировка = "Корректирующая"
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеДокумента(Отказ)
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СправкиНДФЛДляПередачиВНалоговыйОрган"));	
	УстановитьДополнительныеСвойстваДокумента(ДокументОбъект);
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьДанныеФормы();
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	
		ДанныеТекущейСтроки = Объект.Сотрудники[0];
		УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, ДанныеТекущейСтроки, ДокументПроведен);
		
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	Если РегистрацияВНалоговомОргане <> Объект.РегистрацияВНалоговомОргане Тогда 
		УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
		ЗаполнитьКППОтправки();
	КонецЕсли;
	
	УстановитьВидимостьКППОтправки();
	УстановитьДоступностьЭлементовФормы();
	УстановитьОтображениеНалоговПоСтавкам();
	УстановитьОписаниеКорректировки(ЭтаФорма);
	УстановитьСтраницуНалоговогоПериода(ЭтаФорма);
	УстановитьВидимостьИсправляемойСправки();
	УстановитьВариантыВидовСправок();
	УстановитьВидимостьДанныхРеорганизации(ЭтаФорма);
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма, Истина);
	
	Если Объект.СпециальныйДокумент2013года Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ДокументПроведен = Объект.Проведен;
	
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если Объект.ДокументПринятВНалоговыйОрган Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимостьПодписанта(Объект.НалоговыйПериод, Объект.РегистрацияВНалоговомОргане, Объект.Дата, Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПодписанта(НалоговыйПериод, РегистрацияВНалоговомОргане, Дата, Элементы)
	
	ТипПодписанта = Неопределено;
	Если НалоговыйПериод >= 2015  Тогда
		ДанныеПредставителя = ИнтерфейсыВзаимодействияБРОВызовСервера.СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, Дата);
		ТипПодписанта = ДанныеПредставителя.ТипПодписанта;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодписиГруппа", "Видимость", ТипПодписанта <> "2")
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДанныхРеорганизации(Форма)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаРеорганизованнойОрганизации", "Видимость", Форма.Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию") Или Форма.Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию"))
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФормы()
	УстановитьИмяФайла();
	ПрочитатьДанныеСправок();
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	ПрочитатьЗаписиДоходовИВычетов();
	ЗаполнитьСписокМесяцевНалоговогоПериода();
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВНалоговыйОрган;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСправок()
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(Объект.Сотрудники, Объект.НалоговыйПериод, Объект.Дата, Не ДокументПроведен);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокМесяцевНалоговогоПериода()
	Для Каждого СтрокаДоходов Из ЗаписиСведенияОДоходах Цикл
		СтрокаДоходов.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(СтрокаДоходов.МесяцНалоговогоПериода);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Сотрудники, "Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ИспользоватьИсходныеСправкиПриПроведении()

	Возврат	(Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Или Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию) И Объект.НалоговыйПериод >= 2015 И Объект.НомерКорректировки > 0

КонецФункции 

&НаСервере
Процедура ПрочитатьЗаписиДоходовИВычетов(ДокументОснование = Неопределено)
	
	Если ДокументОснование = Неопределено Тогда
		ДокументОснование = Объект.Ссылка;
	КонецЕсли;
	
	ЗаписиСведенияОВычетах.Очистить();
	ЗаписиСведенияОДоходах.Очистить();
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат
	КонецЕсли;
	
	СведенияОДОходахИВычетах = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТаблицыДанныхОДоходахИВычетовДокументов(ДокументОснование);
	ЗаписиСведенияОДоходах.Загрузить(СведенияОДОходахИВычетах.СведенияОДоходах);
	ЗаписиСведенияОВычетах.Загрузить(СведенияОДОходахИВычетах.СведенияОВычетах);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДополнительныеСвойстваДокумента(ТекущийОбъект)
	
	Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ДобавитьДополнительныеСвойстваОДоходахИВычетах(ТекущийОбъект.ДополнительныеСвойства);
	
	Для Каждого ДопСвойство Из ТекущийОбъект.ДополнительныеСвойства Цикл
		НаборЗаписей = ДопСвойство.Значение;
		НаборЗаписей.Загрузить(ЭтаФорма["Записи" + ДопСвойство.Ключ].Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

#Область МетодыЗаполненияДанныхСправок

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	ЗаписиСведенияОДоходах.Очистить();
	ЗаписиСведенияОВычетах.Очистить();
	Объект.УведомленияНОоПравеНаВычеты.Очистить();
	
	НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	
	ДобавляемыеСотрудники = СотрудникиДляЗаполненияСправки();
	
	Для каждого СтрокаСотрудника Из ДобавляемыеСотрудники Цикл
		СтрокаТаблицы = Объект.Сотрудники.Добавить();
		СтрокаТаблицы.Сотрудник = СтрокаСотрудника.Сотрудник;
		Если Объект.НомерКорректировки = 0 Тогда
			СтрокаТаблицы.НомерСправки = НомерСправки;
			НомерСправки = НомерСправки + 1;
		Иначе
			СтрокаТаблицы.НомерСправки = СтрокаСотрудника.НомерСправки;
		КонецЕсли;
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		Объект.Сотрудники, 
		ЗаписиСведенияОДоходах, 
		ЗаписиСведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты,
		Объект.НомерКорректировки,
		Объект.КППОтправки);
		
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники();
	УстановитьОтображениеНалоговПоСтавкам();
	
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(ДобавляемыеСотрудники)
	
	ИдентификаторТекущейСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	Иначе
		НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
	КонецЕсли;
	
	ДанныеСправок = Новый Массив;
	Для каждого Сотрудник Из ДобавляемыеСотрудники Цикл
		
		СтрокаТаблицы = Объект.Сотрудники.Добавить();
		СтрокаТаблицы.Сотрудник = Сотрудник;
		
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы);
		
		ДанныеСправок.Добавить(СтрокаТаблицы);
		
		ИдентификаторТекущейСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Если ИспользоватьИсходныеСправкиПриПроведении() Тогда
		
		УчетНДФЛФормы.ПрочитатьИсходныеСправки(
			ДанныеСправок,
			Объект.НалоговыйПериод, 
			Объект.Дата, 
			Объект.Организация, 
			Объект.РегистрацияВНалоговомОргане, 
			Объект.НомерКорректировки)
		
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ДанныеСправок Цикл
		Если СтрокаТаблицы.НомерСправки = 0 Тогда
			СтрокаТаблицы.НомерСправки = НомерСправки;
			НомерСправки = НомерСправки + 1;
		КонецЕсли;
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		ДанныеСправок,
		ЗаписиСведенияОДоходах, 
		ЗаписиСведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты,
		Объект.НомерКорректировки,
		Объект.КППОтправки);
	
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
	Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
КонецПроцедуры

&НаСервере
Функция НомерПервойСправки()
	Если Объект.Сотрудники.Количество() = 0 Тогда
		Возврат Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	Иначе
		Возврат Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
	КонецЕсли;
КонецФункции	

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ТекущийСотрудник)
	
	ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		УдалитьСтрокиТаблицыДоходов(ТекущийСотрудник);
		УдалитьСтрокиТаблицыВычетов(ТекущийСотрудник);
		
		УчетНДФЛФормы.СправкиНДФЛОчиститьДанныеСправки(ДанныеТекущейСтроки);
		
		Если ДанныеТекущейСтроки.НомерСправки = 0 Тогда
			Если Объект.Сотрудники.Количество() = 1 Тогда
				ДанныеТекущейСтроки.НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
			ИначеЕсли ДанныеТекущейСтроки.НомерСтроки = Объект.Сотрудники.Количество() Тогда
				ДанныеТекущейСтроки.НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 2].НомерСправки + 1;		
			Иначе	
				ДанныеТекущейСтроки.НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда 
			
			ДанныеСправок = Новый Массив;
			
			ДанныеСправок.Добавить(ДанныеТекущейСтроки);
			
			Если ИспользоватьИсходныеСправкиПриПроведении() Тогда
				
				УчетНДФЛФормы.ПрочитатьИсходныеСправки(
					ДанныеСправок,
					Объект.НалоговыйПериод, 
					Объект.Дата, 
					Объект.Организация, 
					Объект.РегистрацияВНалоговомОргане, 
					Объект.НомерКорректировки)
				
			КонецЕсли;
			
			УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
				ДанныеСправок, 
				ЗаписиСведенияОДоходах, 
				ЗаписиСведенияОВычетах, 
				Объект.НалоговыйПериод, 
				Объект.Дата, 
				Объект.Организация, 
				Объект.РегистрацияВНалоговомОргане, 
				Истина,
				Истина,
				Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
				Объект.УведомленияНОоПравеНаВычеты,
				Объект.НомерКорректировки,
				Объект.КППОтправки);
			
			ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(ДанныеСправок, Объект.НалоговыйПериод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийСотрудник = ДанныеТекущейСтроки.Сотрудник;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛица(ФизическоеЛицо)
	
	СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ФизическоеЛицо));
	
	Если СтрокиПоСотруднику.Количество() > 0 Тогда
		УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(СтрокиПоСотруднику, Объект.НалоговыйПериод, Объект.Дата, Истина);
		ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотруднику, Объект.НалоговыйПериод);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьИсправлениеДанныхСотрудника()
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		УчетНДФЛФормы.СправкиНДФЛОтменитьИсправлениеДанныхСотрудника(ЭтаФорма, ДанныеТекущейСтроки, Объект.НалоговыйПериод, Объект.Дата);
		
		ДанныеСправок = Новый Массив;
		ДанныеСправок.Добавить(ДанныеТекущейСтроки);
		
		ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(ДанныеСправок, Объект.НалоговыйПериод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНалогиНаСервере()
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);

		УдалитьСтрокиТаблицыДоходов(ДанныеТекущейСтроки.Сотрудник);
		УдалитьСтрокиТаблицыВычетов(ДанныеТекущейСтроки.Сотрудник);
		
		УчетНДФЛФормы.СправкиНДФЛОбновитьНалоги(
			ЭтаФорма,
			ДанныеТекущейСтроки,
			ЗаписиСведенияОДоходах, 
			ЗаписиСведенияОВычетах, 
			Объект.НалоговыйПериод, 
			Объект.Дата, 
			Объект.Организация, 
			Объект.РегистрацияВНалоговомОргане, 
			Истина, 
			Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
			Объект.УведомленияНОоПравеНаВычеты,
			Объект.КППОтправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	Для Каждого ИдентификаторСтроки Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтруктураОтбора = Новый Структура("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		НайденныеСтроки = ЗаписиСведенияОВычетах.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаписиСведенияОВычетах.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		НайденныеСтроки = ЗаписиСведенияОДоходах.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаписиСведенияОДоходах.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		НайденныеСтроки = Объект.УведомленияНОоПравеНаВычеты.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.УведомленияНОоПравеНаВычеты.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыДоходов(Сотрудник)
	
	УдаляемыеСтрокиТаблицы = ЗаписиСведенияОДоходах.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		ЗаписиСведенияОДоходах.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыВычетов(Сотрудник)
	
	УдаляемыеСтрокиТаблицы = ЗаписиСведенияОВычетах.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		ЗаписиСведенияОВычетах.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	УдаляемыеСтрокиТаблицы = Объект.УведомленияНОоПравеНаВычеты.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		Объект.УведомленияНОоПравеНаВычеты.Удалить(Объект.УведомленияНОоПравеНаВычеты.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПронумероватьСправкиНаСервере(ТекущийСотрудник, ТекущийНомерСправки)
	
	НомерПервойСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	
	ТаблицаДоходов = ЗаписиСведенияОДоходах.Выгрузить();
	ТаблицаВычетов = ЗаписиСведенияОВычетах.Выгрузить();
	ЗаписиСведенияОДоходах.Очистить();
	ЗаписиСведенияОВычетах.Очистить();
	
	СтруктураПоиска = Новый Структура("НомерСправки");
	Для каждого СтрокаТЧ Из Объект.Сотрудники Цикл
		СтруктураПоиска.НомерСправки = СтрокаТЧ.НомерСправки;
		СтрокаТЧ.НомерСправки = НомерПервойСправки;
		Для каждого СтрокаМассива Из ТаблицаДоходов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = ЗаписиСведенияОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		Для каждого СтрокаМассива Из ТаблицаВычетов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = ЗаписиСведенияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		НомерПервойСправки = НомерПервойСправки + 1;
	КонецЦикла;
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		ТекущийНомерСправки = ДанныеТекущейСтроки.НомерСправки;
		ТекущийСотрудник = ДанныеТекущейСтроки.Сотрудник;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СотрудникиДляЗаполненияСправки()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НалоговыйПериод", Объект.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(Объект.НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("НачалоНП", Дата(Объект.НалоговыйПериод,1,1));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КППОтправки", Объект.КППОтправки);
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", ДобавитьМесяц(Дата(Объект.НалоговыйПериод,1,1), -12));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИсторияРегистрацийВНалоговомОрганеВторичный.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|		ИЗ
	|			РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОрганеВторичный
	|		ГДЕ
	|			ИсторияРегистрацийВНалоговомОрганеВторичный.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|			И &НачалоНП МЕЖДУ ИсторияРегистрацийВНалоговомОрганеВторичный.ДатаНачала И ИсторияРегистрацийВНалоговомОрганеВторичный.ДатаОкончания
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|		ИЗ
	|			РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ГДЕ
	|			ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|			И ИсторияРегистрацийВНалоговомОргане.Период МЕЖДУ &НачалоНП И &КонецНП
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			&Организация) КАК СтруктурныеЕдиницы
	|		ПО Организации.Ссылка = СтруктурныеЕдиницы.СтруктурнаяЕдиница
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("Организации", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Если Объект.НомерКорректировки = 99 Тогда // аннулирующие справки
		
		// Выбираем тех, по кому успели подать справки, а потом отменили все зарегистрированные ранее доходы.
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоследнихСправок
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата < &ДатаПодачиСведений
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата >= &НачалоПредшествующегоГода
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация В(&Организации)
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.КППОтправки = &КППОтправки
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию))
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПоследнихСправок.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки) КАК НомерСправки
		|ПОМЕСТИТЬ ВТСотрудникиИзСправок
		|ИЗ
		|	ВТДатыПоследнихСправок КАК ДатыПоследнихСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО ДатыПоследнихСправок.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И ДатыПоследнихСправок.Дата = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация В(&Организации))
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.КППОтправки = &КППОтправки)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию)))
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки <> 99
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихСправок.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиИзСправок.Сотрудник КАК Сотрудник,
		|	СотрудникиИзСправок.Сотрудник.Наименование КАК СотрудникНаименование,
		|	СотрудникиИзСправок.НомерСправки КАК НомерСправки
		|ИЗ
		|	ВТСотрудникиИзСправок КАК СотрудникиИзСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|		ПО СотрудникиИзСправок.Сотрудник = СведенияОДоходахНДФЛ.ФизическоеЛицо
		|			И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &ДатаПодачиСведений)
		|			И (СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СведенияОДоходахНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|			И (НЕ СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиИзСправок.Сотрудник,
		|	СотрудникиИзСправок.Сотрудник.Наименование,
		|	СотрудникиИзСправок.НомерСправки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(СведенияОДоходахНДФЛ.СуммаДохода, 0)) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование";
		
	ИначеЕсли Объект.НомерКорректировки > 0 Тогда
		
		Запрос.УстановитьПараметр("НомерПредыдущейКорректировки", Объект.НомерКорректировки - 1);
		
		// Выбираем тех, по кому ранее подавали справки (соотв. документ помечен как переданный), на после этого вводились
		// данные о доходах или налогах.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата) КАК ДатаДокумента,
		|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата), ДЕНЬ), СЕКУНДА, 1) КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоследнихСправок
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата < &ДатаПодачиСведений
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата >= &НачалоПредшествующегоГода
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация В(&Организации)
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.КППОтправки = &КППОтправки
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки = &НомерПредыдущейКорректировки
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию))
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПоследнихСправок.Сотрудник КАК Сотрудник,
		|	ДатыПоследнихСправок.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ДатыПоследнихСправок.ДатаДокумента КАК ДатаДокумента,
		|	КОНЕЦПЕРИОДА(ДанныеУчета.МесяцНалоговогоПериода, ГОД) КАК КонецГода,
		|	ДанныеУчета.Подразделение КАК Подразделение,
		|	ДанныеУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеУчета.СуммаДохода КАК СуммаДохода,
		|	ДанныеУчета.СуммаВычета КАК СуммаВычета,
		|	ДанныеУчета.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТДоходы
		|ИЗ
		|	ВТДатыПоследнихСправок КАК ДатыПоследнихСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК ДанныеУчета
		|		ПО ДатыПоследнихСправок.Сотрудник = ДанныеУчета.ФизическоеЛицо
		|			И (ДанныеУчета.Период МЕЖДУ ДатыПоследнихСправок.Дата И &ДатаПодачиСведений)
		|			И (ДанныеУчета.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (ДанныеУчета.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (ДанныеУчета.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|			И (НЕ ДанныеУчета.ВключатьВДекларациюПоНалогуНаПрибыль)";
		Запрос.Выполнить();
		
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) И ЗначениеЗаполнено(Объект.КППОтправки) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП") <> Объект.КППОтправки Тогда
			
			УчетНДФЛ.СформироватьВТФизическиеЛицаСУчетомПереездаВИнойНО(Объект.КППОтправки, Запрос.МенеджерВременныхТаблиц, "ВТДоходы", "КонецГода");
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Доходы.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица
			|ИЗ
			|	ВТДоходы КАК Доходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСУчетомПереездаВИнойНО КАК ФизическиеЛицаСУчетомПереездаВИнойНО
			|		ПО Доходы.ФизическоеЛицо = ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо
			|ГДЕ
			|	ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо ЕСТЬ NULL ";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПоследнихСправок.Сотрудник КАК Сотрудник,
		|	ДатыПоследнихСправок.СотрудникНаименование КАК СотрудникНаименование,
		|	ДатыПоследнихСправок.ДатаДокумента КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТДоходы КАК ДатыПоследнихСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО ДатыПоследнихСправок.Сотрудник = ЛишниеФизическиеЛица.ФизическоеЛицо
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихСправок.Сотрудник,
		|	ДатыПоследнихСправок.СотрудникНаименование,
		|	ДатыПоследнихСправок.ДатаДокумента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДатыПоследнихСправок.СуммаДохода - ДатыПоследнихСправок.СуммаВычета) <> 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПоследнихСправок.Сотрудник,
		|	ДатыПоследнихСправок.Сотрудник.Наименование,
		|	ДатыПоследнихСправок.ДатаДокумента
		|ИЗ
		|	ВТДатыПоследнихСправок КАК ДатыПоследнихСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО ДатыПоследнихСправок.Сотрудник = ЛишниеФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК ДанныеУчета
		|		ПО ДатыПоследнихСправок.Сотрудник = ДанныеУчета.ФизическоеЛицо
		|			И (ДанныеУчета.Период МЕЖДУ ДатыПоследнихСправок.Дата И &ДатаПодачиСведений)
		|			И (ДанныеУчета.Организация В(&Организации))
		|			И (ДанныеУчета.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (ДанныеУчета.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|			И (НЕ ДанныеУчета.ВключатьВДекларациюПоНалогуНаПрибыль)
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихСправок.Сотрудник,
		|	ДатыПоследнихСправок.Сотрудник.Наименование,
		|	ДатыПоследнихСправок.ДатаДокумента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеУчета.Сумма) <> 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПоследнихСправок.Сотрудник,
		|	ДатыПоследнихСправок.Сотрудник.Наименование,
		|	ДатыПоследнихСправок.ДатаДокумента
		|ИЗ
		|	ВТДатыПоследнихСправок КАК ДатыПоследнихСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО ДатыПоследнихСправок.Сотрудник = ЛишниеФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК ДанныеУчета
		|		ПО ДатыПоследнихСправок.Сотрудник = ДанныеУчета.ФизическоеЛицо
		|			И (ДанныеУчета.Период МЕЖДУ ДатыПоследнихСправок.Дата И &ДатаПодачиСведений)
		|			И (ДанныеУчета.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (ДанныеУчета.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (ДанныеУчета.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|			И (НЕ ДанныеУчета.ВключатьВДекларациюПоНалогуНаПрибыль)
		|			И (ДанныеУчета.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихСправок.Сотрудник,
		|	ДатыПоследнихСправок.Сотрудник.Наименование,
		|	ДатыПоследнихСправок.ДатаДокумента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеУчета.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки) КАК НомерСправки
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Сотрудники.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Сотрудники.ДатаДокумента = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация В(&Организации))
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.КППОтправки = &КППОтправки)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки = &НомерПредыдущейКорректировки)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Сотрудник,
		|	Сотрудники.СотрудникНаименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование";

	Иначе // исходные (обычные) справки
		
		Если Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеУчета.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеУчета.Подразделение КАК Подразделение,
			|	КОНЕЦПЕРИОДА(ДанныеУчета.МесяцНалоговогоПериода, ГОД) КАК КонецГода,
			|	ДанныеУчета.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	СУММА(ДанныеУчета.СуммаДохода) КАК СуммаДохода
			|ПОМЕСТИТЬ ВТДоходы
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК ДанныеУчета
			|ГДЕ
			|	ДанныеУчета.Период МЕЖДУ &НачалоПредшествующегоГода И &ДатаПодачиСведений
			|	И ДанныеУчета.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И ДанныеУчета.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
			|	И ДанныеУчета.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП
			|	И НЕ ДанныеУчета.ВключатьВДекларациюПоНалогуНаПрибыль
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеУчета.ФизическоеЛицо,
			|	ДанныеУчета.Подразделение,
			|	ДанныеУчета.МесяцНалоговогоПериода,
			|	ДанныеУчета.РегистрацияВНалоговомОргане
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДанныеУчета.СуммаДохода) <> 0";
			Запрос.Выполнить();
			Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) И ЗначениеЗаполнено(Объект.КППОтправки) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП") <> Объект.КППОтправки Тогда
				
				УчетНДФЛ.СформироватьВТФизическиеЛицаСУчетомПереездаВИнойНО(Объект.КППОтправки, Запрос.МенеджерВременныхТаблиц, "ВТДоходы", "КонецГода");
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Доходы.ФизическоеЛицо
				|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица
				|ИЗ
				|	ВТДоходы КАК Доходы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСУчетомПереездаВИнойНО КАК ФизическиеЛицаСУчетомПереездаВИнойНО
				|		ПО Доходы.ФизическоеЛицо = ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо
				|ГДЕ
				|	ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо ЕСТЬ NULL ";
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 0
				|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица";
				
			КонецЕсли;
			Запрос.Выполнить();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеУчета.ФизическоеЛицо КАК Сотрудник
			|ПОМЕСТИТЬ ВТФизическиеЛицаПолучавшиеДоходы
			|ИЗ
			|	ВТДоходы КАК ДанныеУчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
			|		ПО ДанныеУчета.ФизическоеЛицо = ЛишниеФизическиеЛица.ФизическоеЛицо
			|ГДЕ
			|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеУчета.ФизическоеЛицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДанныеУчета.СуммаДохода) <> 0";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК Сотрудник
			|ПОМЕСТИТЬ ВТФизическиеЛицаПолучавшиеДоходы
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(
			|			&НачалоПредшествующегоГода,
			|			&ДатаПодачиСведений,
			|			,
			|			ГоловнаяОрганизация = &ГоловнаяОрганизация
			|				И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
			|				И РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане) КАК СведенияОДоходахНДФЛОбороты";
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 3000
		|	ФизическиеЛицаПолучавшиеДоходы.Сотрудник КАК Сотрудник,
		|	ФизическиеЛицаПолучавшиеДоходы.Сотрудник.Наименование КАК СотрудникНаименование,
		|	0 КАК НомерСправки
		|ИЗ
		|	ВТФизическиеЛицаПолучавшиеДоходы КАК ФизическиеЛицаПолучавшиеДоходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
		|			ПО СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка = СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Организация В(&Организации))
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод = &НалоговыйПериод)
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Дата <= &ДатаПодачиСведений)
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.КППОтправки = &КППОтправки)
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен)
		|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию)))
		|		ПО ФизическиеЛицаПолучавшиеДоходы.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка <> &Ссылка)
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование";
		Если УчетНДФЛ.ВыводитьФорму2НДФЛ2019Года(Объект.НалоговыйПериод, Объект.Дата) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 3000", "ВЫБРАТЬ");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотрудникам, НалоговыйПериод)
	
	Если ТипЗнч(СтрокиПоСотрудникам) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам.Сотрудник);
		СтрокиПоСотрудникам = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам);
	ИначеЕсли ТипЗнч(СтрокиПоСотрудникам) = Тип("Массив") Тогда
		МассивСотрудников = Новый Массив;
		Для каждого СтрокаПоСотруднику Из СтрокиПоСотрудникам Цикл
			МассивСотрудников.Добавить(СтрокаПоСотруднику.Сотрудник);
		КонецЦикла;
	Иначе
		МассивСотрудников = СтрокиПоСотрудникам.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	ТекущиеУдостоверенияЛичности = КадровыйУчетФормы.ТекущиеУдостоверенияЛичностиФизическихЛиц(
		МассивСотрудников, КонецГода(Дата(НалоговыйПериод, 1, 1)));

	Для каждого СтрокаСотрудника Из СтрокиПоСотрудникам Цикл
		СтрокаСотрудника.ИнфоОДокументеУдостоверяющемЛичностьНадпись = КадровыйУчетФормы.ИнфоНадписьОДокументеУдостоверяющемЛичность(
			ТекущиеУдостоверенияЛичности, СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ВидДокумента, СтрокаСотрудника.СерияДокумента, СтрокаСотрудника.НомерДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКППОтправки()
	
	Если Не ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда 
		КППОтправки = "";
		Возврат;
	КонецЕсли;
	
	Объект.КППОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТелефонОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		Возврат;
	КонецЕсли;
	
	ПолучаемыеПоля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТелОрганизации");
	ДанныеКИОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, , ПолучаемыеПоля);
	
	Если ТипЗнч(ДанныеКИОрганизации) = Тип("Структура") И ДанныеКИОрганизации.Свойство("ТелОрганизации") Тогда
		Объект.Телефон = ДанныеКИОрганизации.ТелОрганизации;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКППОтправки()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоЮридическоеЛицо = ЗарплатаКадры.ЭтоЮридическоеЛицо(Объект.Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КППОтправки", "Видимость", ЭтоЮридическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИсправляемойСправки()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиИсправляемаяСправка", "Видимость", ИспользоватьИсходныеСправкиПриПроведении())
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантыВидовСправок(КорректироватьОснование = Ложь)
	СписокВыбора = Элементы.ВидСправок.СписокВыбора;
	СписокВыбора.Очистить();
	Если УчетНДФЛ.ВыводитьФорму2НДФЛ2018Года(Объект.НалоговыйПериод, Объект.Дата) И ЗарплатаКадры.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидСправок", "РежимВыбораИзСписка", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидСправок", "РежимВыбораИзСписка", Истина);
		СписокВыбора.Добавить(Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность);
		СписокВыбора.Добавить(Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ);
		Если КорректироватьОснование Тогда
			Если Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
				Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность;
				УстановитьВидимостьДанныхРеорганизации(ЭтаФорма);
			КонецЕсли;
			Если Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию Тогда
				Объект.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ;
				УстановитьВидимостьДанныхРеорганизации(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МетодыДляРаботыСПрисоединеннымКОбъектуФайлом

&НаСервере
Процедура УстановитьИмяФайла()
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, , Ложь); 
	
	ИмяФайла = ?(ДанныеФайла = Неопределено, "", ДанныеФайла.ИмяФайла);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина)	
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, ПолучатьСсылкуНаДвоичныеДанные);	
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыИФункцииСтыковкиССервисомСдачиОтчетностиЧерезПредставителя

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтправки(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПротоколОтправки(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОткрытьПротоколОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправить(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьИОтправитьЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиент.ПриНажатииНаКнопкуЗашифроватьИОтправить(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Записать();
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеСправкиВоВременноеХранилище(НоваяСтрока = Ложь)
	Если НоваяСтрока Тогда
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("НомерСправки", НомерПервойСправки());
		
		ОшибкиДанныхСправки = Новый Массив;
		СведенияОДоходахФизическихЛиц = Новый Массив;
		СведенияОВычетахФизическихЛиц = Новый Массив;
		СведенияОбУведомлениях = Новый Массив;
		ИсправляемаяСправка = ПредопределенноеЗначение("Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.ПустаяСсылка");
	Иначе
		ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеСотрудника);
		
		ПутьКДанным = "Объект.Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]";
	
		ОшибкиДанныхСправки = ЗарплатаКадрыОтображениеОшибок.СообщениеОбОшибкахДляПередачиВФормуРедактированияСтрокиТаблицыФормы(
								ЭтотОбъект, 
								ПутьКДанным, 
								ОписаниеПодчиненностиДанных());
		Для Каждого ОписаниеОшибки Из ОшибкиДанныхСправки Цикл
			ИмяПоля = Лев(ОписаниеОшибки.Поле, 22);
			Если ИмяПоля = "ЗаписиСведенияОВычетах" Тогда
				ОписаниеОшибки.Поле = "Объект.СведенияОВычетах" + Сред(ОписаниеОшибки.Поле, 23);
			ИначеЕсли ИмяПоля = "ЗаписиСведенияОДоходах" Тогда
				ОписаниеОшибки.Поле = "Объект.СведенияОДоходах" + Сред(ОписаниеОшибки.Поле, 23);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник);
		СведенияОДоходахФизическихЛиц = ЗаписиСведенияОДоходах.НайтиСтроки(СтруктураПоиска);
		СведенияОВычетахФизическихЛиц = ЗаписиСведенияОВычетах.НайтиСтроки(СтруктураПоиска);
		СведенияОбУведомлениях = Объект.УведомленияНОоПравеНаВычеты.НайтиСтроки(СтруктураПоиска);
		
		ИсправляемаяСправка = ДанныеСотрудника.ИсправляемаяСправка;
		
	КонецЕсли;
	
	Возврат УчетНДФЛФормы.ПоместитьДанныеСправки2НДФЛВХранилище(
				ЭтотОбъект,
				ДанныеСотрудника,
				СведенияОДоходахФизическихЛиц,
				СведенияОВычетахФизическихЛиц,
				ДанныеСотрудника.НомерСправки,
				ОшибкиДанныхСправки,
				НоваяСтрока,
				,
				Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли()) И Объект.НеВключатьДоходыПоЦеннымБумагам,
				СведенияОбУведомлениях,
				ИспользоватьИсходныеСправкиПриПроведении(),
				ИсправляемаяСправка,
				Объект.НомерКорректировки - 1); 
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеСправкиИзХранилища(АдресДанныхСправкиВХранилище)
	
	ДанныеСправки = ПолучитьИзВременногоХранилища(АдресДанныхСправкиВХранилище);
	
	Если ДанныеСправки.НоваяСтрока Тогда
		ДанныеСотрудника = Объект.Сотрудники.Добавить();	
		Элементы.Сотрудники.ТекущаяСтрока = ДанныеСотрудника.ПолучитьИдентификатор();
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(ДанныеСотрудника);
	Иначе	
		ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ДанныеСправки);
		
	УдалитьСтрокиТаблицыДоходов(ДанныеСотрудника.Сотрудник);
	УдалитьСтрокиТаблицыВычетов(ДанныеСотрудника.Сотрудник);
	
	Для каждого СведениеОДоходе Из ДанныеСправки.МассивСведенийОДоходах Цикл
		НоваяСтрокаСведенийОДоходе = ЗаписиСведенияОДоходах.Добавить();
		НоваяСтрокаСведенийОДоходе.Сотрудник = ДанныеСправки.Сотрудник;
		НоваяСтрокаСведенийОДоходе.НомерСправки = ДанныеСотрудника.НомерСправки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведенийОДоходе, СведениеОДоходе);
	КонецЦикла;
	
	Для каждого СведениеОВычете Из ДанныеСправки.МассивСведенийОВычетах Цикл
		НоваяСтрокаСведений = ЗаписиСведенияОВычетах.Добавить();
		НоваяСтрокаСведений.Сотрудник = ДанныеСправки.Сотрудник;
		НоваяСтрокаСведений.НомерСправки = ДанныеСотрудника.НомерСправки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведений, СведениеОВычете);
	КонецЦикла;
	
	Для каждого СтрокаУведомления Из ДанныеСправки.МассивСведенийОбУведомлениях Цикл
		НоваяСтрокаСведений = Объект.УведомленияНОоПравеНаВычеты.Добавить();
		НоваяСтрокаСведений.Сотрудник = ДанныеСправки.Сотрудник;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведений, СтрокаУведомления);
	КонецЦикла;
	
	УстановитьОтображениеНалоговПоСтавкам();
	
	Модифицированность = Истина;
	
	ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеСотрудника);
	
	ПутьКДанным = "Объект.Сотрудники[" +  Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]";
	
	СоответствиеПутиКДаннымТаблиц = Новый Соответствие;
	СоответствиеПутиКДаннымТаблиц.Вставить("Объект.СведенияОДоходах", "ЗаписиСведенияОДоходах");
	СоответствиеПутиКДаннымТаблиц.Вставить("Объект.СведенияОВычетах", "ЗаписиСведенияОВычетах");
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(ЭтотОбъект, ПутьКДанным + ".*"); 
	
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		ПутьКДанным,
		ОписаниеПодчиненностиДанных(),
		Истина);
		
	ОшибкиДанныхФормы = ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахИзФормыРедактированияСтрокиТаблицыФормыВОсновнуюФорму(
							ЭтотОбъект, 
							ПутьКДанным,
							ДанныеСправки.ОшибкиДанныхСправки,
							СоответствиеПутиКДаннымТаблиц,
							ОписаниеПодчиненностиДанных());
									
	ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(
		ЭтотОбъект,
		ОшибкиДанныхФормы,
		ОписаниеПодчиненностиДанных());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНалоговПоСтавкам()
	ЕстьВидимыеПоляИтогов = Ложь;
	Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
		ВидимостьПолей = ИтогиПоСтавкеЗаполнены(СтавкаНДФЛ);
		
		Если ВидимостьПолей Тогда
			ЕстьВидимыеПоляИтогов = Истина;
		КонецЕсли;
		
		УстановитьВидимостьПолейИтоговПоСтавке(СтавкаНДФЛ, ВидимостьПолей);
	КонецЦикла;
	
	Если Не ЕстьВидимыеПоляИтогов Тогда
		УстановитьВидимостьПолейИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка13, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИтогиПоСтавкеЗаполнены(Ставка)
	ИтогиПоСтавкеЗаполнены = Ложь;
	
	ИменаПолейИтоговПоСтавке = ИменаПолейИтоговПоСтавке(Ставка);
	
	Для Каждого ПолеИтогов Из ИменаПолейИтоговПоСтавке Цикл
		Если Объект.Сотрудники.Итог(ПолеИтогов) <> 0 Тогда
			ИтогиПоСтавкеЗаполнены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтогиПоСтавкеЗаполнены;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПолейИтоговПоСтавке(Ставка, Видимость)
	ИменаЭлементов = ИменаЭлементовОтображенияИтоговПоСтавке(Ставка);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяЭлемента,
			"Видимость",
			Видимость);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ИменаПолейИтоговПоСтавке(Ставка)
	
	ИменаПолейИтоговПоСтавкам = Новый Массив;
	
	Окончание = "";
	Если Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Окончание = "9";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Окончание = "13";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Окончание = "15";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Окончание = "30";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Окончание = "35";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка05 Тогда
		Окончание = "5";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка10 Тогда
		Окончание = "10";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка03 Тогда
		Окончание = "3";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка06 Тогда
		Окончание = "6";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка07 Тогда
		Окончание = "7";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка12 Тогда
		Окончание = "12";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Окончание) Тогда
		ИменаПолейИтоговПоСтавкам.Добавить("ОбщаяСуммаДоходаПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ОблагаемаяСуммаДоходаПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ИсчисленоПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("УдержаноПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ЗадолженностьПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ИзлишнеУдержаноПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ПеречисленоПоСтавке" + Окончание);
	КонецЕсли;
	
	Возврат ИменаПолейИтоговПоСтавкам;
	
КонецФункции

&НаСервере
Функция ИменаЭлементовОтображенияИтоговПоСтавке(Ставка)
	
	ИменаЭлементовИтогов = Новый Массив;
	
	Окончание = "";
	Если Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Окончание = "9";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Окончание = "13";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Окончание = "15";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Окончание = "30";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Окончание = "35";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка05 Тогда
		Окончание = "5";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка10 Тогда
		Окончание = "10";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка03 Тогда
		Окончание = "3";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка06 Тогда
		Окончание = "6";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка07 Тогда
		Окончание = "7";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка12 Тогда
		Окончание = "12";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Окончание) Тогда
		ИменаЭлементовИтогов = Новый Массив;
		ИменаЭлементовИтогов.Добавить("СотрудникиСтавка" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиОбщаяСуммаДоходаПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиОблагаемаяСуммаДоходаПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиИсчисленоПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиУдержаноПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиЗадолженностьПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиИзлишнеУдержаноПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиПеречисленоПоСтавке" + Окончание);
	КонецЕсли;
	
	Возврат ИменаЭлементовИтогов;
	
КонецФункции

#КонецОбласти

#Область ИндикацияОшибок

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок()
	
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "Организация";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Организация";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ВидСправок";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОснованиеДляПредставленияСправок";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "РегистрацияВНалоговомОргане";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "РегистрацияВНОПредставление";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	ОписаниеЭлемента.ИмяЭлемента = "Сотрудники";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "Сотрудники";
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Сотрудники";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "СправкуПодписал";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СправкуПодписал";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ФормаРеорганизации";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ФормаРеорганизации";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "НаименованиеРеорганизованнойОрганизации";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.НаименованиеРеорганизованнойОрганизации";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ИННРеорганизованнойОрганизации";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ИННРеорганизованнойОрганизации";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "КППРеорганизованнойОрганизации";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.КППРеорганизованнойОрганизации";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
	
КонецФункции

&НаСервере
Функция СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,
		"РегистрацияВНалоговомОргане",
		"РегистрацияВНОПредставление");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"КодИФНС", 
		"Объект.Организация");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"НалоговыйПериод", 
		"Объект.Организация");
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"СправкуПодписал", 
		"Объект.СправкуПодписал");
	
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;
	
КонецФункции

&НаСервере
Функция ОписаниеПодчиненностиДанных()
	
	ОписаниеПодчиненностиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеПодчиненностиДанныхФормы();
	
	КлючСвязиТаблицПоСотруднику = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
	ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязиТаблицПоСотруднику, "Сотрудник", "Сотрудник");
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"ЗаписиСведенияОДоходах",
		КлючСвязиТаблицПоСотруднику);
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"ЗаписиСведенияОВычетах",
		КлючСвязиТаблицПоСотруднику);
	
	Возврат ОписаниеПодчиненностиДанных;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);	
КонецПроцедуры	

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти

#КонецОбласти
