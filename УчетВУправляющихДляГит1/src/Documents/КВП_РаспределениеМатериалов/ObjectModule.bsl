
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми.
Перем мСтрокаРеквизитыБухУчета Экспорт;        // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт;        // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт;        // (Регл)
Перем мУчетнаяПолитика;                        // (Общ)
Перем мВалютаРегламентированногоУчета Экспорт; // Валюта

#Область ЭкспортныеПроцедурыИФункцииДокумента

// Формирует таблицу материалов по списку документов.
Функция СформироватьТаблицуМатериалов(СДокументами = Ложь, СписокДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	МАКСИМУМ(ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ТребованиеНакладнаяМатериалы.Коэффициент) КАК Коэффициент,
	|	ТребованиеНакладнаяМатериалы.Ссылка КАК Документ
	|ПОМЕСТИТЬ втТребованияНакладнаяМатериалы
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	ТребованиеНакладнаяМатериалы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|ПОМЕСТИТЬ втХозрасчетныйДвиженияССубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор В (&СписокДокументов), , ) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТребованияНакладнаяМатериалы.Номенклатура,
	|	втТребованияНакладнаяМатериалы.ЕдиницаИзмерения,
	|	втТребованияНакладнаяМатериалы.Коэффициент,
	|	&ВыводитьДокументыВРезультат,
	|	втХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	втХозрасчетныйДвиженияССубконто.КоличествоКт КАК Количество
	|ИЗ
	|	втТребованияНакладнаяМатериалы КАК втТребованияНакладнаяМатериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХозрасчетныйДвиженияССубконто КАК втХозрасчетныйДвиженияССубконто
	|		ПО втТребованияНакладнаяМатериалы.Документ = втХозрасчетныйДвиженияССубконто.Регистратор
	|			И втТребованияНакладнаяМатериалы.Номенклатура = втХозрасчетныйДвиженияССубконто.СубконтоКт1";
	
	Если СписокДокументов = Неопределено Тогда
		СписокДокументов = ДокументыСписанияМатериалов.ВыгрузитьКолонку("Документ")
	КонецЕсли;
	
	// Если необходимо выводить колонку с информацией о документе, добавляем ее в таблицу запроса.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыводитьДокументыВРезультат,", 
											 ?(СДокументами, "втТребованияНакладнаяМатериалы.Документ,", ""));
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуМатериалов()

// Производит распределение сумм.
Процедура РаспределитьСумму() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособРаспределения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран способ распределения");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипПлощади) 
		И СпособРаспределения = "по площади" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран тип площади здания");
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу коэффициентов.
	ТаблицаКоэффициентов = ТаблицаОбъектов.Выгрузить();
	ТаблицаКоэффициентов.Колонки.Количество.Имя = "Показатель";
	ЗаполнитьТаблицуКоэффициентовРаспределенияПоЗданиям(ТаблицаКоэффициентов, СпособРаспределения, Дата, ТипПлощади);
	
	// Распределение.
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПоДокументам Тогда
		ТаблицаМатериалов = СформироватьТаблицуМатериалов();
		ТаблицаМатериалов.Колонки.Добавить("Цена", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	Иначе
		ТаблицаМатериалов = Материалы.Выгрузить(, "Номенклатура, Количество, Сумма, Цена");
	КонецЕсли;
	
	РаспределятьСумму = Истина;
	
	ТаблицаРаспределения.Очистить();
	СуммаКоэффициента  = ТаблицаКоэффициентов.Итог("Показатель");
	Если СуммаКоэффициента = 0 Тогда
		ТаблицаРаспределения.Загрузить(ТаблицаКоэффициентов);
	Иначе
		
		Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
			
			// получим количество распределения
			КоличествоРаспределения = СтрокаМатериалов.Количество;
			КоличествоРаспрОстаток  = КоличествоРаспределения;
			
			// получим сумму распределения
			СуммаРаспределения = СтрокаМатериалов.Сумма;
			СуммаРаспрОстаток  = ?(РаспределятьСумму, СуммаРаспределения, 0);
			
			СтрокиРаспределения = Новый Массив();
			Для Каждого СтрокаКоэффициента Из ТаблицаКоэффициентов Цикл
				СтрокаТабличнойЧасти = ТаблицаРаспределения.Добавить();
				СтрокаТабличнойЧасти.Объект           = СтрокаКоэффициента.Объект;
				СтрокаТабличнойЧасти.Номенклатура     = СтрокаМатериалов.Номенклатура;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаМатериалов.Номенклатура.ЕдиницаИзмерения;
				
				СтрокаТабличнойЧасти.Количество       = КоличествоРаспределения * СтрокаКоэффициента.Показатель / СуммаКоэффициента;
				КоличествоРаспрОстаток = КоличествоРаспрОстаток - СтрокаТабличнойЧасти.Количество;
				Если РаспределятьСумму Тогда
					СтрокаТабличнойЧасти.Сумма    = СуммаРаспределения      * СтрокаКоэффициента.Показатель / СуммаКоэффициента;
					СуммаРаспрОстаток  = СуммаРаспрОстаток      - СтрокаТабличнойЧасти.Сумма;
				КонецЕсли;
				СтрокаТабличнойЧасти.Цена = СтрокаМатериалов.Цена;
				
				СтрокиРаспределения.Добавить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
			// пройдем по добавленным строкам, чтобы распределить нераспределившиеся остатки
			ТекИндексСтроки = СтрокиРаспределения.ВГраница();
			Пока ТекИндексСтроки >= 0 И (НЕ КоличествоРаспрОстаток = 0 Или НЕ СуммаРаспрОстаток = 0) Цикл
				СтрокаРаспределения = СтрокиРаспределения.Получить(ТекИндексСтроки);
				
				// определим возможное значение для корректировки - чтобы не выйти за 0
				ТекКорректировка = (Макс(СтрокаРаспределения.Количество + КоличествоРаспрОстаток, 0) 
								 - СтрокаРаспределения.Количество);
				// Корректируем на найденную величину значение в строке и уменьшаем нераспределенный остаток.
				СтрокаРаспределения.Количество = СтрокаРаспределения.Количество + ТекКорректировка;
				КоличествоРаспрОстаток         = КоличествоРаспрОстаток         - ТекКорректировка;
				
				// определим возможное значение для корректировки - чтобы не выйти за 0
				ТекКорректировка = (?(СтрокаРаспределения.Сумма >= 0, 
									  Макс(СтрокаРаспределения.Сумма + СуммаРаспрОстаток, 0), 
									  Мин(СтрокаРаспределения.Сумма + СуммаРаспрОстаток, 0)) - СтрокаРаспределения.Сумма);
				// Корректируем на найденную величину значение в строке и уменьшаем нераспределенный остаток.
				СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + ТекКорректировка;
				СуммаРаспрОстаток         = СуммаРаспрОстаток         - ТекКорректировка;
				
				ТекИндексСтроки = ТекИндексСтроки - 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСумму()

#КонецОбласти 

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета.
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	мСтрокаРеквизитыБухУчета = "СчетЗатрат, Субконто1, Субконто2, Субконто3,
								|НадписьСчетЗатрат, НадписьСубконто1, НадписьСубконто2, НадписьСубконто3,
								|Материалы.Счет";
	
	мСтрокаРеквизитыНалУчета = "Материалы.СчетНУ,
								|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура проверяет правильность заполнения реквизитов документа.
Процедура ПроверитьЗаполнениеТабличныхЧастей(ТаблицаМатериалов, 
											 ТаблицаПоТаблицеРаспределения, 
											 СтруктураШапкиДокумента, 
											 Отказ, 
											 Заголовок) Экспорт
	
	// Проверим соответствие данных в таблицах.
	
	РаспределятьСумму = Истина;//Не (СтруктураШапкиДокумента.ВидОперации = 
							  //                 Перечисления.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПоМатериалам);
	// Проверим, весь ли материал распределен.
	СвернутаяТаблицаМатериалов = ТаблицаМатериалов.Скопировать();
	СвернутаяТаблицаМатериалов.Свернуть("Номенклатура", "Сумма, Количество");
	Для Каждого СтрокаТЧ Из СвернутаяТаблицаМатериалов Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В табличной части ""Материалы"": ";
		
		СтрокиРаспределения = ТаблицаПоТаблицеРаспределения.НайтиСтроки(Новый Структура("Номенклатура", 
																						СтрокаТЧ.Номенклатура));
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокаСообщения = "Не распределен материал """ + СтрокаТЧ.Номенклатура + """!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		СуммКолво = 0;
		СуммСумма = 0;
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			СуммКолво = СуммКолво + СтрокаРаспределения.Количество;
			СуммСумма = СуммСумма + СтрокаРаспределения.Сумма;
		КонецЦикла;
		
		Если Не СуммКолво = СтрокаТЧ.Количество Тогда
			
			СтрокаСообщения = "По материалу """ 
							+ СтрокаТЧ.Номенклатура 
							+ """ количество распределено некорректно (" 
							+ СуммКолво 
							+ " вместо " 
							+ СтрокаТЧ.Количество 
							+ ")!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
		Если РаспределятьСумму Тогда
			
			Если Не СуммСумма = СтрокаТЧ.Сумма Тогда
				
				СтрокаСообщения = "По материалу """ 
								+ СтрокаТЧ.Номенклатура 
								+ """ сумма распределена некорректно (" 
								+ СуммСумма 
								+ " вместо " 
								+ СтрокаТЧ.Сумма 
								+ ")!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим, весь ли материал распределен.
	Для Каждого СтрокаТЧ Из ТаблицаПоТаблицеРаспределения Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) 
									  + """ табличной части ""Таблица распределения"": ";
		
		СтрокаМатериала = ТаблицаМатериалов.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если СтрокаМатериала = Неопределено Тогда
			СтрокаСообщения = "Материал """ + СтрокаТЧ.Номенклатура + """ не должен быть распределен!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличныхЧастей()

// Функция списания материалов с регистра ТоварыНаСкладе.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, 
							  ТаблицаМатериалов, 
							  ТаблицаПоТаблицеРаспределения, 
							  Отказ, 
							  Заголовок, 
							  РежимПроведения)
	
	// Проведение по регистрам учета подомовых затрат.
	ДвиженияПоРегистрамПодомовыхЗатрат(СтруктураШапкиДокумента, 
									   ТаблицаМатериалов, 
									   ТаблицаПоТаблицеРаспределения, 
									   Отказ, 
									   Заголовок);
	
КонецПроцедуры

// Формирует движения по регистрам подомовых затрат.
Процедура ДвиженияПоРегистрамПодомовыхЗатрат(СтруктураШапкиДокумента, 
											 ТаблицаМатериалов, 
											 ТаблицаПоТаблицеРаспределения, 
											 Отказ, 
											 Заголовок)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.КВП_ЗатратыПодомовогоУчета;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТаблицеРаспределения Цикл

		Если СтрокаТабличнойЧасти.Сумма = 0 И СтрокаТабличнойЧасти.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		Движение = НаборДвижений.Добавить();
		Движение.Период       = СтруктураШапкиДокумента.Дата;
		// измерения
		Движение.Организация  = СтруктураШапкиДокумента.Организация;
		Движение.Здание       = СтрокаТабличнойЧасти.Объект;
		Движение.ВидЗатрат    = Перечисления.КВП_ВидыПодомовыхЗатрат.Материалы;
		Движение.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Услуга) Тогда
			Движение.Услуга   = СтруктураШапкиДокумента.Услуга;
		Иначе
			Движение.Услуга   = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		
		// ресурсы
		Движение.Сумма        = СтрокаТабличнойЧасти.Сумма;
		Движение.Количество   = СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрамПодомовыхЗатрат()

// Процедура проверяет на дублирование использование документов "Требование-накладная".
//
// Параметры:
//  Отказ - <Булево>
//        - Отмена редактирования.
//
Процедура ПроверитьДокументТребованияНакладная(Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_РаспределениеМатериалов.ДокументыСписанияМатериалов.(
	|		Ссылка,
	|		Документ
	|	) КАК Таблица
	|ИЗ
	|	Документ.КВП_РаспределениеМатериалов КАК КВП_РаспределениеМатериалов
	|ГДЕ
	|	КВП_РаспределениеМатериалов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПоДокументам)
	|	И НЕ КВП_РаспределениеМатериалов.ПометкаУдаления
	|	И КВП_РаспределениеМатериалов.Проведен
	|	И НЕ КВП_РаспределениеМатериалов.Ссылка = &ТекущийДокумент
	|	И КВП_РаспределениеМатериалов.ДокументыСписанияМатериалов.Документ В (&Документы)";
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого Документ Из ДокументыСписанияМатериалов Цикл
		СписокДокументов.Добавить(Документ.Документ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Документы",        СписокДокументов);
	Запрос.УстановитьПараметр("ТекущийДокумент",  ЭтотОбъект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Результат.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Для Каждого ТаблицаДокумента Из Результат Цикл
			
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента.Таблица Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для документа-основания """ + Строка(СтрокаТаблицы.Документ) 
												  + """ уже введен документ """ + Строка(СтрокаТаблицы.Ссылка) + """");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДокументТребованияНакладная()

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_РаспределениеМатериалов.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента       = ПараметрыПроведения.Реквизиты;
	ТаблицаМатериалов             = ПараметрыПроведения.ТаблицаМатериалов;
	ТаблицаПоТаблицеРаспределения = ПараметрыПроведения.ТаблицаПоТаблицеРаспределения;
	
	// Проверить заполнение ТЧ.
	ПроверитьЗаполнениеТабличныхЧастей(ТаблицаМатериалов, ТаблицаПоТаблицеРаспределения, СтруктураШапкиДокумента, 
		Отказ, Заголовок);
	
	ПроверитьДокументТребованияНакладная(Отказ);
	
	Если Не Отказ Тогда
		// Формирование движения регистров
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаПоТаблицеРаспределения, Отказ, 
			Заголовок, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" объекта.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПоДокументам Тогда
		Материалы.Очистить();
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПрочее Тогда
		ДокументыСписанияМатериалов.Очистить();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "ТаблицаРаспределения", "Сумма");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("СпособРаспределения");
	
	Если СпособРаспределения = "по площади" Тогда
		ПроверяемыеРеквизиты.Добавить("ТипПлощади");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Материалы.Номенклатура");
	ПроверяемыеРеквизиты.Добавить("Материалы.Количество");
	
	ПроверяемыеРеквизиты.Добавить("ТаблицаРаспределения.Номенклатура");
	ПроверяемыеРеквизиты.Добавить("ТаблицаРаспределения.Объект");
	
КонецПроцедуры

#КонецОбласти 

#Область ИнициализацияПеременных

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти 

#КонецЕсли