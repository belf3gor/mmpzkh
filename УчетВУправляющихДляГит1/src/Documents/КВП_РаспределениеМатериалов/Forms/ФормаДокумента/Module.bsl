
#Область ПроцедурыИФункцииУправленияВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПоДокументам") Тогда
		Элементы.ПанельИсточникаРаспределения.ТекущаяСтраница = Элементы.Документы;
		Элементы.ТипЦен.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПрочее") Тогда
		Элементы.ПанельИсточникаРаспределения.ТекущаяСтраница = Элементы.Прочее;
		Элементы.ТипЦен.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Услуга.Видимость = Не Форма.НеУказыватьУслугу;
	
	ВидимостьТипаПлощади = (Объект.СпособРаспределения = "по площади");
	Элементы.ТипПлощади.Видимость = ВидимостьТипаПлощади;
	
КонецПроцедуры // УстановитьВидимость()

#КонецОбласти 

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция возвращает единицу измерения номенклатуры.
Функция ПолучитьБазовуюЕдиницуИзмерения(Номенклатура)
	
	Возврат Номенклатура.ЕдиницаИзмерения;
	
КонецФункции

&НаКлиенте
// Функция возвращает параметры отбора номенклатуры.
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	
	ЗаголовокПодбора = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Материалы"         , ИмяТаблицы = "Материалы");
	ПараметрыФормы.Вставить("ПоказыватьОстатки" , Истина);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()),
								Неопределено, Объект.Дата);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ВременнаяДатаРасчетов);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
// Открывает форму подбора данных в табличные части документа.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть, НеРегл = Ложь)
	
	ЕстьКоличество = Ложь;
	ЕстьЦена  = Ложь;
	ЕстьСерия = Ложь;
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,                      "По справочнику");
	
	Команда           = "ПодборВТабличнуюЧастьМатериалы" + ?(НеРегл, "НеРегл", "");
	ИмяТабличнойЧасти = "Материалы";
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, 
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаУслуг = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	Для Каждого СтрокаПодбора Из ТаблицаУслуг Цикл
		НайденныеСтроки = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПодбора.Номенклатура));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаМатериала = Объект.Материалы.Добавить();
			СтрокаМатериала.Номенклатура     = СтрокаПодбора.Номенклатура;
			СтрокаМатериала.ЕдиницаИзмерения = СтрокаПодбора.Номенклатура.ЕдиницаИзмерения;
			СтрокаМатериала.Коэффициент      = 1;
			СтрокаМатериала.Количество       = СтрокаПодбора.Количество;
			
			ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен(СтрокаМатериала.ПолучитьИдентификатор());
		Иначе
			СтрокаМатериала = НайденныеСтроки[0];
			СтрокаМатериала.Количество = СтрокаМатериала.Количество + СтрокаПодбора.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодбора()

&НаСервере
// Процедура заполнения услуг по документу поступления.
Процедура ЗаполнитьУслугиПоДокументуСписания(ДокументСписания)
	
	СписокДокументов = Новый СписокЗначений();
	СписокДокументов.Добавить(ДокументСписания);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РаспределениеМатериалов"));
	МатериалыДокумента = ДокументОбъект.СформироватьТаблицуМатериалов(Ложь, СписокДокументов);
	
	Для Каждого СтрокаТабличнойЧасти Из МатериалыДокумента Цикл
		
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	Если Объект.Материалы.Количество() > 1 Тогда
		врТаблицаМатериалов = Объект.Материалы.Выгрузить();
		врТаблицаМатериалов.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент", "Количество,Сумма");
		Объект.Материалы.Загрузить(врТаблицаМатериалов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обновляет таблицу объектов по таблице распределения (если изменили).
Процедура ОбновитьТаблицуОбъектов()
	
	СписокОбъектов = Объект.ТаблицаРаспределения.Выгрузить(, "Объект");
	СписокОбъектов.Свернуть("Объект");
	
	Объект.ТаблицаОбъектов.Загрузить(СписокОбъектов);
	
КонецПроцедуры // ОбновитьТаблицуОбъектов()

&НаСервере
// Процедура возвращает результат запроса по получению цен номенклатур.
//
// Параметры
//  СписокНоменклатуры - Список значений - список номенклатур.
//
// Возвращаемое значение:
//   Результат запроса
//
Процедура ПолучитьЦеныНоменклатуры(СписокНоменклатуры)
	
	ТаблицаЦенНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура В (&Номенклатура)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",         Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен",       Объект.ТипЦен);
	
	ТЗЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаЦенНоменклатуры.Загрузить(ТЗЦенНоменклатуры);
	
КонецПроцедуры // ПолучитьЦеныНоменклатуры()

&НаСервере
// Процедура заполняет поле "Цена" в строке таблицы по значению поля "ТипЦен".
//
// Параметры
//  ТекСтрока - строка табличной части.
//
Процедура ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен(ИДСтроки)
	
	ТекСтрока = Объект.Материалы.НайтиПоИдентификатору(ИДСтроки);
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокНоменклатуры.Добавить(ТекСтрока.Номенклатура);
	
	ПолучитьЦеныНоменклатуры(СписокНоменклатуры);
	
	Если ТаблицаЦенНоменклатуры.Количество() > 0 Тогда
		ТекСтрока.Цена  = ТаблицаЦенНоменклатуры[0].ЦенаНоменклатуры;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен()

&НаКлиенте
// Процедура обнуляет поле цены и вызывает процедуру пересчета суммы.
Процедура ОбнулитьЦеныНоменклатур(МассивСтрок)
	
	Для Каждого ТекСтрока Из Объект.Материалы Цикл
		
		// Для строк, которых нет в массиве, обнуляем цену.
		// Если массив пустой, то обнуляем цены для всех строк.
		
		Если МассивСтрок.Найти(ТекСтрока) = Неопределено Тогда
			ТекСтрока.Цена = 0;
			ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбнулитьЦеныНоменклатур()

&НаКлиенте
// Процедура запрашивает пользователя о перераспределении сумм.
Процедура ПерераспределитьСуммыПоЗданиям()
	
	ТекстВопроса = "Перераспределить суммы по зданиям?";
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РаспределениеСуммЗавершение", ЭтотОбъект), 
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да);
	
КонецПроцедуры // ПерераспределитьСуммыПоЗданиям()

&НаКлиенте
// Процедура производит перераспределение сумм в зависимости от ответа пользователя на вопрос.
Процедура РаспределениеСуммЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьСуммуНаСервере();
	КонецЕсли;
	
КонецПроцедуры // РаспределениеСуммЗавершение()

&НаКлиенте
// Процедура расчитывает сумму в строке таблицы "МатериалыНеРегл".
Процедура ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока)
	
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	
КонецПроцедуры // ПересчитатьСуммыВТаблицеЗатрат()

&НаКлиенте
// Процедура перезаполняет типы цен.
//
Процедура ПерезаполнитьТипЦеныЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МассивСтрокСИзмененнымиЦенами = Новый Массив;
		
		Для Каждого СтрокаЦены Из ТаблицаЦенНоменклатуры Цикл
			
			СтрокиНоменклатуры = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЦены.Номенклатура));
			Если СтрокиНоменклатуры.Количество() > 0 Тогда
				
				Для Каждого ТекСтрока Из СтрокиНоменклатуры Цикл
					ТекСтрока.Цена = СтрокаЦены.ЦенаНоменклатуры;
					ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока);
					МассивСтрокСИзмененнымиЦенами.Добавить(ТекСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбнулитьЦеныНоменклатур(МассивСтрокСИзмененнымиЦенами);
		ПерераспределитьСуммыПоЗданиям();
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьТипЦеныЗавершение()

&НаКлиенте
// Процедура завершает работу обработчика "ПриИзменении" поля "ТипЦен".
//
Процедура ОбнулитьЦеныНоменклатурЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбнулитьЦеныНоменклатур(Новый Массив);
		ПерераспределитьСуммыПоЗданиям();
	КонецЕсли;
	
КонецПроцедуры // ОбнулитьЦеныНоменклатурЗавершение()

#КонецОбласти 

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура распределения суммы на сервере.
Процедура РаспределитьСуммуНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РаспределениеМатериалов"));
	ДокументОбъект.РаспределитьСумму();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.СпособРаспределения = "по площади";
		Объект.ТипПлощади = "Общая площадь здания";
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	НеУказыватьУслугу = Объект.Услуга.Пустая();
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьСписокСпособовРаспределенияПоЗданиям(Элементы.СпособРаспределения);
	
	ЗаполнитьСписокВидовПлощадей(Элементы.ТипПлощади);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" формы.
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеУказыватьУслугу Тогда
		Объект.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	ИначеЕсли Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана услуга планирования материалов.", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УказыватьУслугу".
Процедура НеУказыватьУслугуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СпособРаспределения".
Процедура СпособРаспределенияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипЦен".
Процедура ТипЦенПриИзменении(Элемент)
	
	Если НЕ Объект.ТипЦен.Пустая() И Объект.Материалы.Количество() > 0 Тогда
		
		СписокНоменклатуры = Новый СписокЗначений;
		Для Каждого Строка Из Объект.Материалы Цикл
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЦикла;
		
		ПолучитьЦеныНоменклатуры(СписокНоменклатуры);
		
		Если ТаблицаЦенНоменклатуры.Количество() > 0 Тогда
			
			ТекстВопроса = "Перезаполнить цены номенклатур для типа цен """ + Объект.ТипЦен + """?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьТипЦеныЗавершение", ЭтотОбъект), 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Да);
			
		Иначе
			
			ТекстВопроса = "Для выбранных номенклатур не найдены цены для типа цен """ + Объект.ТипЦен + """. Обнулить цены номенклатур?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбнулитьЦеныНоменклатурЗавершение", ЭтотОбъект), 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет, 
					,
					КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипЦен.Пустая() И Объект.Материалы.Количество() > 0 Тогда
		
		ТекстВопроса = "Тип цен не указан. Обнулить цены номенклатур?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбнулитьЦеныНоменклатурЗавершение", ЭтотОбъект), 
				ТекстВопроса, 
				РежимДиалогаВопрос.ДаНет, 
				,
				КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры // ТипЦенПриИзменении()

#КонецОбласти 

#Область ОбработчикиТаблицыДокументыСписанияМатериалов

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДокументыСписанияМатериаловДокумент".
Процедура ДокументыСписанияМатериаловДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация!");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДокументыСписанияМатериалов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ФормаВыбора = ПолучитьФорму("Документ.ТребованиеНакладная.ФормаВыбора",
									Новый Структура("ТекущаяСтрока, Отбор", ТекущиеДанные.Документ, СтруктураОтбора), Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТаблицыМатериалы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МатериалыНоменклатура".
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеСтроки.Коэффициент = 1;
	ДанныеСтроки.ЕдиницаИзмерения = ПолучитьБазовуюЕдиницуИзмерения(ДанныеСтроки.Номенклатура);
	
	Если НЕ Объект.ТипЦен.Пустая() Тогда
		ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен(Элементы.Материалы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода Количество в строке ТЧ "Материалы" не регл.
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ПересчитатьСуммыВТаблицеЗатрат(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода Цена в строке ТЧ "Материалы" не регл.
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ПересчитатьСуммыВТаблицеЗатрат(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТаблицыТаблицаРаспределения

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПослеУдаления(Элемент)
	
	ОбновитьТаблицуОбъектов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьТаблицуОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаРаспределенияНоменклатура".
Процедура ТаблицаРаспределенияНоменклатураПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаРаспределения.ТекущиеДанные;
	ТекСтрока.ЕдиницаИзмерения = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "ЕдиницаИзмерения");
		
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаРаспределенияКоличество".
Процедура ТаблицаРаспределенияКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаРаспределения.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаПодбор".
Процедура КомандаПодбор(Команда)
	
	ДействиеПодбор(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьПоДокументу".
Процедура ЗаполнитьПоДокументу(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаТребованиеНакладнаяЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ТребованиеНакладная.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора), , , , , ОписаниеОповещения);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике команды "ЗаполнитьПоДокументу()".
Процедура ВыборДокументаТребованиеНакладнаяЗавершение(ДокументСписания, ДополнительныеПараметры) Экспорт
	
	Если ДокументСписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументуЗавершение", ЭтотОбъект, Новый Структура("ДокументСписания", ДокументСписания));
		ПоказатьВопрос(ОписаниеОповещения,
					   "Очистить табличную часть перед заполнением?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДокументуФрагмент(ДокументСписания);
	
КонецПроцедуры // ВыборДокументаТребованиеНакладнаяЗавершение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике команды "ЗаполнитьПоДокументу()".
Процедура ЗаполнитьПоДокументуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ЗаполнитьПоДокументуФрагмент(ДополнительныеПараметры.ДокументСписания);
	
КонецПроцедуры // ЗаполнитьПоДокументуЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьПоДокументу()".
Процедура ЗаполнитьПоДокументуФрагмент(Знач ДокументСписания)
	
	ЗаполнитьУслугиПоДокументуСписания(ДокументСписания);
	
КонецПроцедуры // ЗаполнитьПоДокументуФрагмент()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьТаблицуРаспределения".
Процедура КомандаЗаполнитьТаблицуРаспределения(Команда)
	
	Если Объект.ТаблицаРаспределения.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьТаблицуРаспределенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	КомандаЗаполнитьТаблицуРаспределенияФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьТаблицуРаспределения()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаЗаполнитьТаблицуРаспределения()".
Процедура КомандаЗаполнитьТаблицуРаспределенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТаблицаРаспределения.Очистить();
	
	КомандаЗаполнитьТаблицуРаспределенияФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьТаблицуРаспределенияЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьТаблицуРаспределения()".
Процедура КомандаЗаполнитьТаблицуРаспределенияФрагмент()
	
	Объект.ТаблицаОбъектов.Очистить();
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СтруктураПараметров.Вставить("ТипОбъекта",      "Здания");
	СтруктураПараметров.Вставить("ТипЗначОбъекта",  "Здания");
	СтруктураПараметров.Вставить("Организация"     , Объект.Организация);
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаЗаполнитьТаблицуРаспределенияФрагмент()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьТаблицуРаспределенияФрагмент()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокЗаполненных, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(СписокЗаполненных) = Тип("СписокЗначений")
		ИЛИ СписокЗаполненных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокЗаполненных[0].Значение) = Тип("СправочникСсылка.КВП_Здания") Тогда
		Для Каждого Строка Из СписокЗаполненных Цикл
			СтрокаТабЧасти = Объект.ТаблицаРаспределения.Добавить();
			СтрокаТабЧасти.Объект = Строка.Значение;
			СтрокаТабЧасти = Объект.ТаблицаОбъектов.Добавить();
			СтрокаТабЧасти.Объект = Строка.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаРаспределить".
Процедура КомандаРаспределить(Команда)
	
	РаспределитьСуммуНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаСбросить".
Процедура КомандаСбросить(Команда)
	
	Объект.ТаблицаРаспределения.Очистить();
	Для Каждого СтрокаОбъекта Из Объект.ТаблицаОбъектов Цикл
		НоваяСтрока = Объект.ТаблицаРаспределения.Добавить();
		НоваяСтрока.Объект = СтрокаОбъекта.Объект;
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
