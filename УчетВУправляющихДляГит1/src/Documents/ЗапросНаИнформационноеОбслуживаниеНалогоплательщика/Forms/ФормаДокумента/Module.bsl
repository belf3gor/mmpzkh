
&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	ЗадатьЗначенияНовогоДокумента();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ГруппаОрганизация");
	
	Элементы.ГруппаВидСверки.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидУслуги); // Должно идти перед установкой заголовка.
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	ЗадатьЗначениеПолучателяПоУмолчанию();
	
	ОпределитьОКАТО();
	
	УстановитьФорматОтветаПоУмолчанию();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимостьИнформационнойПанели();
	
	// Позиционируемся на гиперссылке
	Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов
		ИЛИ Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ВариантВыбораНалога;
	КонецЕсли;
	
	Если НЕ ЭтоНовый Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	КонецЕсли;
	
	ТекущаяДатаДокумента = ТекущаяДатаСеанса();
	
	СвернутьТаблицуКБКПоНалогу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
	
	ПроверитьПередЗаписью(Отказ, ТаблицаКБК);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКБКиНалогов.Количество() > 0 Тогда
		СкопироватьТаблицуКБКПоНалогуВОбъект(Отказ, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	Оповестить("Запись_ЗапросНаИнформационноеОбслуживаниеНалогоплательщика",, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Ложь;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Подбор налога" Тогда
		
		ДобавитьВыбранныйНалог(Параметр);
		
		ПоследняяСтрокаТаблицы = ТаблицаКБКиНалогов[ТаблицаКБКиНалогов.Количество() - 1];
		ИдентификаторПоследнейСтроки = ПоследняяСтрокаТаблицы.ПолучитьИдентификатор();
		Элементы.ТаблицаКБКиНалогов.ТекущаяСтрока = ИдентификаторПоследнейСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидУслугиПриИзменении(Элемент)
	
	Объект.Получатель = Неопределено;
	ЗадатьЗначениеПолучателяПоУмолчанию();
	
	ЗадатьЗначениеДополнительныйПараметрПоУмолчанию();
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Все");
	Иначе
		Объект.КоличествоНалогов = Неопределено;
	КонецЕсли;

	УстановитьВидимостьИнформационнойПанели();
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьФорматОтветаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
	
	ОпределитьОКАТО();
	
	Объект.Получатель = Неопределено;
	ЗадатьЗначениеПолучателяПоУмолчанию();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Организация = Неопределено ИЛИ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""От кого"" не заполнено'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияДляОтбора = Новый Массив;
	Если Объект.Получатель <> Неопределено Тогда
		РеквизитыПолучателя = РеквизитыРегистрацииВНалоговомОрганеНаСервере(Объект.Получатель);
		ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", РеквизитыПолучателя.Код, РеквизитыПолучателя.КПП));
	КонецЕсли;
	
	Организация   = Объект.Организация;
	УчетнаяЗапись = КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучательНачалоВыбораЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
		
	ИначеЕсли Объект.Получатель = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РеквизитыПолучателя.Код) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".'"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Объект.Получатель = РезультатВыбора.Ссылка;
		ОпределитьОКАТО();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНаДатуПриИзменении(Элемент)
	
	Объект.ДатаНачалаПериода = НачалоГода(Объект.ДатаОкончанияПериода);
	
	ЗадатьПравилаОтображенияДатыДляСправок(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматОтветаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФорматОтвета", Объект.ФорматОтвета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораФорматаОтвета", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораФорматаОтвета", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаОперацийПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ГруппировкаОпераций", Объект.ДополнительныйПараметр);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораГруппировкиОперации", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораГруппировкиОперации", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыОтчетовПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидыОтчетов", Объект.ДополнительныйПараметр);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораВидовОтчетов", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораВидаОтчетов", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораНалога1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КоличествоНалогов", Объект.КоличествоНалогов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораКоличестваНалогов", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораКоличестваНалогов", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	ЗадатьПравилаОтображенияДатыНаДляАктов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Текст, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НалогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапрашиваемыеНалогЗавершениеВыбора", 
		ЭтотОбъект); 
	
	ОткрытьФормуВыбораНалогов(Ложь, ОписаниеОповещения, Налог, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	ОтработатьИзменениеНалогаИлиОкато();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОчистка(Элемент, СтандартнаяОбработка)
	ОтработатьИзменениеНалогаИлиОкато();
КонецПроцедуры

&НаКлиенте
Процедура ОКАТОПриИзменении(Элемент)
	
	ОтработатьИзменениеНалогаИлиОкато();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	БольшеНеПоказыватьИнформационнуюПанель();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные;
	
	ЭтоКБК = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекущиеДанные.Значение);
	
	Если ЭтоКБК Тогда 
		// Выбран КБК
		НаименованиеКБК = НаименованиеКБК(ТекущиеДанные.Значение);
		
		КБК = ТекущиеДанные.Значение;
		ФорматированныйКБК = ФорматированныйКБК(КБК);
		
		Если ЗначениеЗаполнено(НаименованиеКБК) Тогда
			ТекущиеДанные.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"), ФорматированныйКБК, НаименованиеКБК);
		Иначе
			ТекущиеДанные.Наименование = ФорматированныйКБК;
		КонецЕсли;
	Иначе
		// Выбран налог
		ТекущиеДанные.Наименование = ТекущиеДанные.Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКАТО) Тогда
		ТекущиеДанные.ОКАТО = СокрЛП(ОКАТО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
	
	Если Элементы.ТаблицаКБКиНалогов.ТекущиеДанные = Неопределено Тогда
		ТекущееЗначение = Неопределено;
	Иначе
		ТекущееЗначение = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные.Значение;
	КонецЕсли;
	
	ОткрытьФормуВыбораНалогов(Ложь, Обработчик, ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговПриИзменении(Элемент)
	
	ПеренумероватьСтроки(ТаблицаКБКиНалогов);
	
	ЗаполнитьНалогИзТаблицы(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговПослеУдаления(Элемент)
	
	Если ТаблицаКБКиНалогов.Количество() = 0 Тогда
		Налог = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ОтправкаЗапросаНаИнформационноеОбслуживание(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФормаСверки = ТабличныйДокументСверки(Объект.Ссылка);
	КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаСверки, Строка(Объект.ВидУслуги));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаГодНазад(Команда)
	
	Объект.ДатаНачалаПериода = НачалоПредыдущегоГода(Объект.ДатаНачалаПериода);
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		УстановитьКонечнуюИНачальнуюДатуПоНачальной(ЭтотОбъект);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаГодВперед(Команда)
	
	Объект.ДатаНачалаПериода = НачалоСледующегоГода(Объект.ДатаНачалаПериода);
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		УстановитьКонечнуюИНачальнуюДатуПоНачальной(ЭтотОбъект);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СтандартнаяОбработка = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьПериодЗавершение", 
			ЭтотОбъект);
			
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НачалоПериода",         Объект.ДатаНачалаПериода);
	ДополнительныеПараметры.Вставить("КонецПериода",          Объект.ДатаОкончанияПериода);
	ДополнительныеПараметры.Вставить("ВидПериода",            Неопределено);
	ДополнительныеПараметры.Вставить("ТолькоУказанныйПериод", Ложь);

	ПолноеИмяФормыВыбораПериода = "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборСтандартногоПериодаГодКвартал";
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ИмяФормыВыбораПериода(ПолноеИмяФормыВыбораПериода);
	
	ОткрытьФорму(
		ПолноеИмяФормыВыбораПериода,
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФормуВыбораНалогов(Истина, Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗапроса(ЗапросОбъект)
	
	ДатаНачалаПериода	 = ЗапросОбъект.ДатаНачалаПериода;
	ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
	
	Если ЗапросОбъект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом") Тогда
		
		// В текст запроса идет НаДату = XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"))
		ДатаНачалаПериода	 = ЗапросОбъект.ДатаОкончанияПериода;
		ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
		
	ИначеЕсли ЗапросОбъект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		
		// В текст запроса идет Год = XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=yyyy"))
		ДатаНачалаПериода	 = НачалоГода(ЗапросОбъект.ДатаОкончанияПериода);
		ДатаОкончанияПериода = КонецГода(ЗапросОбъект.ДатаОкончанияПериода);
		
	ИначеЕсли ЗапросОбъект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		
		// В текст запроса идет 
		// ДатаНач = XMLСтрока(Формат(Запрос.ДатаНачалаПериода, "ДФ=dd.MM.yyyy"))
		// ДатаКон = XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"))
		
		ДатаНачалаПериода	 = ЗапросОбъект.ДатаНачалаПериода;
		ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
		
	ИначеЕсли ЗапросОбъект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов") Тогда
		// В текст запроса идет 
		// Год = XMLСтрока(Формат(Запрос.ДатаНачалаПериода, "ДФ=yyyy"))
		// НаДату = XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"))
		
		ДатаНачалаПериода	 = НачалоГода(ЗапросОбъект.ДатаНачалаПериода);
		ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
		
	ИначеЕсли ЗапросОбъект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
		// В текст запроса идет НаДату = XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"))
		
		ДатаНачалаПериода	 = ЗапросОбъект.ДатаОкончанияПериода;
		ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", 			ЗапросОбъект.Организация);
	ДополнительныеПараметры.Вставить("ДатаНачалаПериода", 		ДатаНачалаПериода);
	ДополнительныеПараметры.Вставить("ДатаОкончанияПериода", 	ДатаОкончанияПериода);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Процедура ОпределитьОКАТО()

	// Из выбранной в сверке регистрации в НО
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		
		Если ЗначениеЗаполнено(Объект.Получатель.КодПоОКТМО) Тогда
			ОКАТО = СокрЛП(Объект.Получатель.КодПоОКТМО);
		Иначе
			ОКАТО = СокрЛП(Объект.Получатель.КодПоОКАТО);
		КонецЕсли;
			
	КонецЕсли;
	
	// Из регистрации в НО, которая прописана в организации
	Если НЕ ЗначениеЗаполнено(ОКАТО) Тогда
		
		РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
			
		Если ЗначениеЗаполнено(РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО) Тогда
			ОКАТО = СокрЛП(РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО);
		Иначе
			ОКАТО = СокрЛП(РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКАТО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаявлениеОтправлено
		И Объект.ЗапрашиваемыеНалоги.Количество() > 0 Тогда
		
		ОКАТО = Объект.ЗапрашиваемыеНалоги[0].ОКАТО;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БольшеНеПоказыватьИнформационнуюПанель()
	
	ХранилищеОбщихНастроек.Сохранить(
		"ДокументооборотСКонтролирующимиОрганами_СверкиСФНС_УбратьИнформационнуюПанель",
		XMLСтрока(Объект.ВидУслуги),
		Истина);
	
	УстановитьВидимостьИнформационнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформационнойПанели()

	ПанельУбранаПользователем = ХранилищеОбщихНастроек.Загрузить(
		"ДокументооборотСКонтролирующимиОрганами_СверкиСФНС_УбратьИнформационнуюПанель", XMLСтрока(Объект.ВидУслуги)) = Истина;
	
	Если ЗаявлениеОтправлено
		ИЛИ ПанельУбранаПользователем Тогда
		Элементы.ИнформационнаяПанель.Видимость = Ложь;
	Иначе
		Элементы.ИнформационнаяПанель.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьВИнформационнойПанели(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");
	ЭтоАктСверкиРасчетов 							= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	ЭтоСправкаОСостоянииРасчетовСБюджетом 			= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом");
	ЭтоСправкаОбИсполненииОбязанностейПоУплате 		= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	ЭтоПереченьБухгалтерскойИНалоговойОтчетности 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");

	Если ЭтоАктСверкиРасчетов Тогда
		Элементы.ПоянениеОНазначенииСверки.Заголовок = 
			НСтр("ru = 'Акт совместной сверки используется для сопоставления данных с налоговой инспекцией по налогам (страховым взносам, пеням, штрафам) и позволяет выявить переплату или задолженность.'");
	ИначеЕсли ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом Тогда
		Элементы.ПоянениеОНазначенииСверки.Заголовок = 
			НСтр("ru = 'Выписка операций используется для выяснения отдельных вопросов (неясностей), которые возникают по результатам сверки с налоговым органом.'");
	ИначеЕсли ЭтоПереченьБухгалтерскойИНалоговойОтчетности Тогда
		Элементы.ПоянениеОНазначенииСверки.Заголовок = 
			НСтр("ru = 'Список представленной отчетности подтверждает, что вся отчетность принята в полном объеме.'");
	ИначеЕсли ЭтоСправкаОСостоянииРасчетовСБюджетом Тогда
		Элементы.ПоянениеОНазначенииСверки.Заголовок = 
			НСтр("ru = 'Справка о состоянии расчетов позволяет узнать, нет ли задолженности или переплаты по налогам на указанную дату. '");
	ИначеЕсли ЭтоСправкаОбИсполненииОбязанностейПоУплате Тогда
		Элементы.ПоянениеОНазначенииСверки.Заголовок = 
			НСтр("ru = 'Справка позволяет проверить наличие неисполненной обязанности по уплате налогов (страховых взносов, пеней, штрафов). Часто требуется при участии в тендере, получении кредита, оформлении лицензии для подтверждения добросовестности налогоплательщика.'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеНалогаИлиОкато()
	
	ТаблицаКБКиНалогов.Очистить();
	
	Если ЗначениеЗаполнено(Налог) Тогда
		
		НоваяСтрока = ТаблицаКБКиНалогов.Добавить();
		НоваяСтрока.Значение 		= Налог;
		НоваяСтрока.Наименование 	= Налог;
		НоваяСтрока.ОКАТО 			= ОКАТО;
		
		ПеренумероватьСтроки(ТаблицаКБКиНалогов);
			
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияКонстантИнтеграции()
	
	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
	
	Возврат ФлагиУчета;
	
КонецФункции
	
&НаКлиенте
Процедура ОткрытьФормуВыбораНалогов(МножественныйВыбор, Обработчик, ТекущиеДанные = Неопределено, ЗапретитьВыборКБК = Ложь)
	
	ФлагиУчета = ПолучитьЗначенияКонстантИнтеграции();
	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
		ЗапретитьВыборКБК = Истина;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗапроса(Объект);

	Если МножественныйВыбор Тогда
		СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	КонецЕсли;
		
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущееЗначение", ТекущиеДанные);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗапретитьВыборКБК", ЗапретитьВыборКБК);

	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКБК", СтруктураПараметров, ЭтаФорма,,,, Обработчик);
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуКБКПоНалогу()
	
	ВременнаяТаблица = РеквизитФормыВЗначение("Объект.ЗапрашиваемыеНалоги").Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Значение");
	
	// Заполнение наименования КБК и Налога
	ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
	
	Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			
			СтрокаТаблицы.Значение     = СтрокаТаблицы.Налог;
			СтрокаТаблицы.Наименование = СтрокаТаблицы.Налог;
			СтрокаТаблицы.КБК          = "";
			
		Иначе
			
			СтрокаТаблицы.Значение = СтрокаТаблицы.КБК;
			
			НайденнаяСтрока = ТаблицаКБК.Найти(СтрокаТаблицы.КБК, "КБК");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ЗначениеЗаполнено(НайденнаяСтрока.Наименование) Тогда
					
					КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
					
					СтрокаТаблицы.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (%2)'"), КБК, НайденнаяСтрока.Наименование);
				Иначе
					КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
					СтрокаТаблицы.Наименование = КБК;
				КонецЕсли;
			Иначе
				КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
				СтрокаТаблицы.Наименование = КБК;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Свертка по налогу
	ВременнаяТаблица.Свернуть("Значение, ОКАТО, Наименование");
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки");
	
	// Нумерация строк.
	ПеренумероватьСтроки(ВременнаяТаблица);
	
	ЗначениеВРеквизитФормы(ВременнаяТаблица, "ТаблицаКБКиНалогов");
	
	ЗаполнитьНалогИзТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьСтроки(Таблица)
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПередЗаписью(Отказ, ТаблицаКБК)
	
	Если НЕ ЗначениеЗаполнено(Налог) И ТаблицаКБКиНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапроса(Объект);
	
	ВсеНалоги = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВсеНалоги(
		ПараметрыЗапроса.Организация,
		ПараметрыЗапроса.ДатаНачалаПериода,
		ПараметрыЗапроса.ДатаОкончанияПериода);
		
	Если Объект.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Один Тогда
		
		Если НЕ ЗначениеЗаполнено(Налог) Тогда
			
			// Не выбран налог
			ТекстСообщения = НСтр("ru = 'Укажите налог, по которому будет выполняться сверка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Налог");
			
			Отказ = Истина;
			
		ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налог) Тогда
			
			// Вместо налога введен КБК
			ТекстСообщения = НСтр("ru = 'В качестве налога не может быть указан КБК. Выберите налог из списка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Налог");
			
			Отказ = Истина;
			
		Иначе
			
			Если НЕ НалогЕстьВМакете(ВсеНалоги, Налог) Тогда
				
				// Налог введен вручную
				ТекстСообщения = НСтр("ru = 'Налог ""%1"" не найден. Выберите налог из списка'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Налог);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Налог");
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОКАТО = СокрЛП(ОКАТО);
		ОКАТОНевернойДлины = СтрДлина(ОКАТО) <> 11 И СтрДлина(ОКАТО) <> 8;
		Если ЗначениеЗаполнено(ОКАТО) И ОКАТОНевернойДлины
			ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОКАТО) Тогда
			
			// Неверное ОКАТО
			ТекстСообщения = НСтр("ru = 'Введено некорректное значение ОКАТО или ОКТМО %1
				|Код ОКАТО/ОКТМО должен иметь длину 8 или 11 и состоять только из цифр.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОКАТО);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ОКАТО");
			
			Отказ = Истина;

		ИначеЕсли НЕ ЗначениеЗаполнено(ОКАТО) Тогда
			
			// Не заполнено ОКАТО
			ТекстСообщения = НСтр("ru = 'Не заполнено ОКАТО или ОКТМО'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ОКАТО");
			
			Отказ = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Объект.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Несколько Тогда
		
		Для каждого СтрокаТаблицыДокумента Из ТаблицаКБКиНалогов Цикл
			
			// Проверяем только налог на наличие в макете
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаТаблицыДокумента.Значение) Тогда
				
				Если НЕ НалогЕстьВМакете(ВсеНалоги, СтрокаТаблицыДокумента.Значение) Тогда
					
					ТекстСообщения = НСтр("ru = 'Налог ""%1"" не найден. Выберите налог из списка'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Налог);
					
					Поле = "ТаблицаКБКиНалогов[" + Формат(СтрокаТаблицыДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Значение";
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
					
					Отказ = Истина;
			
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НалогЕстьВМакете(ВсеНалоги, Значение)
	
	Возврат ВсеНалоги.Найти(Значение) <> Неопределено;
		
КонецФункции
		
&НаСервере
Процедура СкопироватьТаблицуКБКПоНалогуВОбъект(Отказ, ТекущийОбъект)
	
	Если Объект.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Все Тогда
		
		ТаблицаКБКиНалогов.Очистить();
		ТекущийОбъект.ЗапрашиваемыеНалоги.Очистить();
		
	Иначе
		
		ПараметрыЗапроса = ПараметрыЗапроса(ТекущийОбъект);

		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ТаблицаНалоговПоГруппам(
			Истина, 
			ПараметрыЗапроса.Организация, 
			ПараметрыЗапроса.ДатаНачалаПериода,
			ПараметрыЗапроса.ДатаОкончанияПериода);
			
		Для каждого СтрокаТаблицыКБК Из ТаблицаКБК Цикл
			СтрокаТаблицыКБК.ПапкаУровня1 = Сред(СтрокаТаблицыКБК.ПапкаУровня1, 4);
			СтрокаТаблицыКБК.ПапкаУровня2 = Сред(СтрокаТаблицыКБК.ПапкаУровня2, 4);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.КБК,
		|	ТаблицаКБК.Наименование,
		|	ТаблицаКБК.Налог,
		|	ТаблицаКБК.ПапкаУровня1,
		|	ТаблицаКБК.ПапкаУровня2
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Значение,
		|	ТаблицаДокумента.Наименование,
		|	ТаблицаДокумента.ОКАТО
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Значение <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаКБК.КБК ЕСТЬ NULL
		|			ТОГДА ТаблицаДокумента.Значение
		|		ИНАЧЕ ТаблицаКБК.КБК
		|	КОНЕЦ КАК КБК,
		|	ТаблицаДокумента.Наименование,
		|	ВЫБОР
		|		КОГДА ТаблицаКБК.Налог = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.Налог
		|		КОГДА ТаблицаКБК.ПапкаУровня1 = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.ПапкаУровня1
		|		КОГДА ТаблицаКБК.ПапкаУровня2 = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.ПапкаУровня2
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Налог,
		|	ТаблицаДокумента.ОКАТО
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКБК КАК ТаблицаКБК
		|		ПО (ТаблицаКБК.КБК = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.Налог = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.ПапкаУровня1 = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.ПапкаУровня2 = ТаблицаДокумента.Значение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
		
		Запрос.УстановитьПараметр("ТаблицаКБК", 		ТаблицаКБК);
		Запрос.УстановитьПараметр("ТаблицаДокумента", 	РеквизитФормыВЗначение("ТаблицаКБКиНалогов"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Копируем развернутую таблицу в объект.
		ТекущийОбъект.ЗапрашиваемыеНалоги.Очистить();
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			СтрокаПриемник = ТекущийОбъект.ЗапрашиваемыеНалоги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, Выборка);
		КонецЦикла;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоНалоговДляНового()

	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") 
		ИЛИ Объект.ВидУслуги = Неопределено Тогда
		
		Если Параметры.Ключ.Пустая()
			И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
			Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
				Объект.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Один;
			Иначе
				// Новый нескопированный
				Объект.КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Все;
			КонецЕсли;			
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И НЕ ЗначениеЗаполнено(Объект.КоличествоНалогов) Тогда
			
			// Новый скопированный с пустым количеством налогов 
			Если Объект.ЗапрашиваемыеНалоги.Количество() = 0 Тогда
				Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Все");
			Иначе
				Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Несколько");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Объект.КоличествоНалогов = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКоличестваНалогов(НовоеКоличествоНалогов, ВходящийКонтекст) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НовоеКоличествоНалогов) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КоличествоНалогов = НовоеКоличествоНалогов;
	Модифицированность = Истина;
	
	Если Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Один") Тогда
		
		ЗаполнитьНалогИзТаблицы(ЭтотОбъект);
		
		ОтработатьИзменениеНалогаИлиОкато();
		
	ИначеЕсли Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Все") Тогда
		
		ТаблицаКБКиНалогов.Очистить();
		Объект.ЗапрашиваемыеНалоги.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНалогИзТаблицы(Форма)

	ТаблицаКБКиНалогов = Форма.ТаблицаКБКиНалогов;
	
	// В таблице оставляем только один налог
	Если ТаблицаКБКиНалогов.Количество() > 0 Тогда
		// В строке таблицы может быть КБК вместо Налога. 
		// Если указан КБК, то налог не заполняем.
		Если ЗначениеЗаполнено(ТаблицаКБКиНалогов[0].Значение)
			И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТаблицаКБКиНалогов[0].Значение) Тогда
			Форма.Налог = ТаблицаКБКиНалогов[0].Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(Объект.Ссылка, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		 ИЛИ НЕ РезультатВыбора.Свойство("НачалоПериода")
		 ИЛИ НЕ РезультатВыбора.Свойство("КонецПериода") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыбора.НачалоПериода) Тогда
		Объект.ДатаНачалаПериода = РезультатВыбора.НачалоПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыбора.КонецПериода) Тогда
		Объект.ДатаОкончанияПериода = РезультатВыбора.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьПравилаОтображенияДат(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");
	ЭтоАктСверкиРасчетов 							= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	ЭтоСправкаОСостоянииРасчетовСБюджетом 			= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом");
	ЭтоСправкаОбИсполненииОбязанностейПоУплате 		= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	ЭтоПереченьБухгалтерскойИНалоговойОтчетности 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");
	
	Если ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом
		ИЛИ ЭтоАктСверкиРасчетов Тогда
		
		Элементы.Даты.ТекущаяСтраница = Элементы.ГруппаПериодВыборГода;
		
	ИначеЕсли ЭтоСправкаОСостоянииРасчетовСБюджетом
		ИЛИ ЭтоСправкаОбИсполненииОбязанностейПоУплате Тогда
		
		Элементы.Даты.ТекущаяСтраница = Элементы.ГруппаПериодНаДату;
		
	ИначеЕсли ЭтоПереченьБухгалтерскойИНалоговойОтчетности Тогда
		
		Элементы.Даты.ТекущаяСтраница = Элементы.ГруппаПериод;
		
	КонецЕсли;
	
	ЗадатьПравилаОтображенияДатыНаДляАктов(Форма);
	ЗадатьПравилаОтображенияДатыДляСправок(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьПравилаОтображенияДатыНаДляАктов(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоАктСверкиРасчетов = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	
	Элементы.ГруппаДатаОкончанияПериода.Видимость = ЭтоАктСверкиРасчетов;
	Если ЭтоАктСверкиРасчетов Тогда
		Если НачалоДня(Объект.ДатаОкончанияПериода) = НачалоДня(Форма.ТекущаяДатаДокумента) Тогда
			Элементы.КомментарийКДатеОкончанияПериода.Заголовок = НСтр("ru = '(сегодня)'");
		Иначе
			Элементы.КомментарийКДатеОкончанияПериода.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьПравилаОтображенияДатыДляСправок(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоСправкаОСостоянииРасчетовСБюджетом      = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом");
	ЭтоСправкаОбИсполненииОбязанностейПоУплате = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	
	Если ЭтоСправкаОСостоянииРасчетовСБюджетом
		ИЛИ ЭтоСправкаОбИсполненииОбязанностейПоУплате Тогда
		Если НачалоДня(Объект.ДатаОкончанияПериода) = НачалоДня(Форма.ТекущаяДатаДокумента) Тогда
			Если Форма.ЗаявлениеОтправлено Тогда
				Элементы.ДатаОкончанияНаДату.Видимость = Ложь;
				Элементы.КомментарийКНаДату.Заголовок = Формат(Объект.ДатаОкончанияПериода, "ДЛФ=D") + " " + НСтр("ru = '(сегодня)'");
			Иначе
				Элементы.КомментарийКНаДату.Заголовок = НСтр("ru = '(сегодня)'");
			КонецЕсли;
		Иначе
			Элементы.КомментарийКНаДату.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВнешнимВидомОтправленногоЗаявления(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	

	Если Форма.ЗаявлениеОтправлено Тогда
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.ВидУслуги.Вид 		= ВидПоляФормы.ПолеНадписи;
		Элементы.ВидУслуги.МаксимальнаяШирина = 30;
		Элементы.ВидУслуги.Ширина = 30;
		Элементы.ВидУслуги.АвтоМаксимальнаяШирина = Ложь;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Организация.Вид 	= ВидПоляФормы.ПолеНадписи;
		Элементы.Организация.МаксимальнаяШирина = 30;
		Элементы.Организация.Ширина = 30;
		Элементы.Организация.АвтоМаксимальнаяШирина = Ложь;
		
		Элементы.Получатель.Вид 	= ВидПоляФормы.ПолеНадписи;
		Элементы.ОКАТО.Вид 			= ВидПоляФормы.ПолеНадписи;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Получатель.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.МаксимальнаяШирина = 30;
		Элементы.Получатель.Ширина = 30;
		Элементы.Получатель.АвтоМаксимальнаяШирина = Ложь;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Налог.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Налог.МаксимальнаяШирина = 30;
		Элементы.Налог.Ширина = 30;
		Элементы.Налог.Высота = 5;
		Элементы.Налог.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Налог.РастягиватьПоВертикали = Истина;
		Элементы.Налог.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
		
		// Даты.
		Элементы.ПерейтиНаГодНазад.Видимость  = Ложь;
		Элементы.ПерейтиНаГодВперед.Видимость = Ложь;
		Элементы.ВыбратьПериод.Видимость      = Ложь;
		Элементы.ВыборГода.Видимость          = Ложь;
		
		Элементы.ДатаНачалаПериодаГод.Вид  = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияНаДату.Вид   = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаНачалаПериода2.Вид    = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияПериода2.Вид = ВидПоляФормы.ПолеНадписи;
		
		Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов") Тогда
			
			Элементы.ДатаОкончанияПериода.Видимость = Ложь;
			
			Элементы.Отступ.Подсказка = "";
			Если НачалоДня(Объект.ДатаОкончанияПериода) = НачалоДня(Форма.ТекущаяДатаДокумента) Тогда
				Элементы.КомментарийКДатеОкончанияПериода.Заголовок = НСтр("ru = 'Взаиморасчеты по состоянию на: сегодня'");
			Иначе
				Элементы.КомментарийКДатеОкончанияПериода.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Взаиморасчеты по состоянию на: %1'"), 
					Формат(Объект.ДатаОкончанияПериода, "ДЛФ=D"));
			КонецЕсли;
			
			Элементы.НадписьПредставлениеЗаГод.Заголовок = Формат(Объект.ДатаНачалаПериода, "ДФ='yyyy'") + НСтр("ru = ' г.'");
			
			Элементы.ТаблицаКБКиНалогов.ТолькоПросмотр 			= Истина;
			Элементы.ТаблицаКБКиНалоговПодобрать.Доступность 	= Ложь;
			Элементы.ОдинНалог.ТолькоПросмотр 					= Истина;
			
		ИначеЕсли Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
			
			Элементы.ГруппаДатаОкончанияПериода.Видимость = Ложь;
			
			Элементы.НадписьПредставлениеЗаГод.Заголовок = Формат(Объект.ДатаНачалаПериода, "ДФ='yyyy'") + НСтр("ru = ' г.'");
			
			Элементы.ТаблицаКБКиНалогов.ТолькоПросмотр 			= Истина;
			Элементы.ТаблицаКБКиНалоговПодобрать.Доступность 	= Ложь;
			Элементы.ОдинНалог.ТолькоПросмотр 					= Истина;
			
		КонецЕсли;
		
		// Управление видом гиперссылок.
		Элементы.ФорматОтветаПредставление.Гиперссылка        = Ложь;
		Элементы.ГруппировкаОперацийПредставление.Гиперссылка = Ложь;
		Элементы.ВидыОтчетовПредставление.Гиперссылка         = Ложь;
		Элементы.ВариантВыбораНалога.Гиперссылка              = Ложь;
		
		ЗадатьПравилаОтображенияДатыДляСправок(Форма);
		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьДокументПоСтруктуре(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Объект.Организация = СтруктураПараметров.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.РегистрацияВНалоговомОргане) Тогда
		Объект.Получатель = СтруктураПараметров.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПериодСобытия) Тогда
		Объект.ДатаНачалаПериода    = НачалоГода(СтруктураПараметров.ПериодСобытия);
		Объект.ДатаОкончанияПериода = КонецДня(СтруктураПараметров.ПериодСобытия);
	КонецЕсли;
	
	ОКТМО = "";
	Если ЗначениеЗаполнено(СтруктураПараметров.ОКТМО) Тогда
		ОКТМО = СокрЛП(СтруктураПараметров.ОКТМО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СписокКБК) Тогда
		Для каждого КБК Из СтруктураПараметров.СписокКБК Цикл
			НоваяСтрока = Объект.ЗапрашиваемыеНалоги.Добавить();
			НоваяСтрока.КБК   = КБК;
			НоваяСтрока.ОКАТО = ОКТМО;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументСверки(Сверка)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПечатнаяФорма(Сверка);
	
КонецФункции

&НаСервере
Функция ПослеОтправкиЗавершениеНаСервере()
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначенияНовогоДокумента()

	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗадатьОрганизациюПоУмолчанию();
			
			СтруктураПараметров = Новый Структура("Организация, РегистрацияВНалоговомОргане, ОКТМО, ПериодСобытия, СписокКБК");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
			ЗаполнитьДокументПоСтруктуре(СтруктураПараметров);

			ЗадатьЗначениеПолучателяПоУмолчанию();
			
			ЗадатьЗначениеДополнительныйПараметрПоУмолчанию();
			
			УстановитьКоличествоНалоговДляНового();
		КонецЕсли;
		
		УстановитьКоличествоНалоговДляНового();
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьОрганизациюПоУмолчанию()

	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОргПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКонечнуюИНачальнуюДатуПоНачальной(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	Объект.ДатаНачалаПериода 	= НачалоГода(Объект.ДатаНачалаПериода);
	Объект.ДатаОкончанияПериода = КонецГода(Объект.ДатаНачалаПериода);
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначениеДополнительныйПараметрПоУмолчанию()

	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		// Вид отчетов: Первичные и корректирующие.
		Объект.ДополнительныйПараметр = 1;
	ИначеЕсли Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		// Группировать операции: по дате.
		Объект.ДополнительныйПараметр = 0;
	Иначе
		// Сбрасываем значение ?
		Объект.ДополнительныйПараметр = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявлениеОтправлено = ПослеОтправкиЗавершениеНаСервере();
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
	Если Открыта() И ЗаявлениеОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированныйКБК(КБК)
	
	// 123 4 56 78901 23 4567 890 - номер символов КБК
	// 182 1 01 01011 01 1000 110 - маска КБК
	ФорматированныйКБК = 
		Лев(КБК, 3) + " " + 
		Сред(КБК, 4, 1) + " " + 
		Сред(КБК, 5, 2) + " " + 
		Сред(КБК, 7, 5) + " " + 
		Сред(КБК, 12, 2) + " " + 
		Сред(КБК, 14, 4) + " " + 
		Сред(КБК, 18, 3) + " " + 
		Сред(КБК, 21);
		
	Возврат СокрЛП(ФорматированныйКБК);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаСервере(СтрокаПоиска, ТолькоНалог = Ложь)
	
	ПодстрокаПоиска = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ОбработатьСтрокуПоискаКБК(СтрокаПоиска);
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПодстрокаПоиска) И НЕ ТолькоНалог Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.КБК,
		|	ТаблицаКБК.Наименование
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	ТаблицаКБК.КБК КАК КБК,
		|	ТаблицаКБК.Наименование
		|ИЗ
		|	ТаблицаКБК КАК ТаблицаКБК
		|ГДЕ
		|	ТаблицаКБК.КБК ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	КБК";
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ПодстрокаПоиска + "%");

		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
		Запрос.УстановитьПараметр("ТаблицаКБК", ТаблицаКБК);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			ФорматированныйКБК = ФорматированныйКБК(Выборка.КБК);
			СписокВыбора.Добавить(Выборка.КБК, ФорматированныйКБК + " (" + Выборка.Наименование + ")");
		КонецЦикла;

	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.Налог
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ТаблицаКБК.Налог
		|ИЗ
		|	ТаблицаКБК КАК ТаблицаКБК
		|ГДЕ
		|	ТаблицаКБК.Налог ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Налог";
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ПодстрокаПоиска + "%");
		
		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
		Запрос.УстановитьПараметр("ТаблицаКБК", ТаблицаКБК);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Налог, Выборка.Налог);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма)
	
	Объект 		= Форма.Объект;
	Заголовок 	= НСтр("ru = 'Запрос на сверку: %1 (%2)'");
	
	// Для нового документа в скобках пишем "создание", 
	// для записанного - период.
	Если Форма.ЭтоНовый Тогда
		ДополнительныеСведения = НСтр("ru = 'создание'");
	Иначе
		ДополнительныеСведения = ПредставлениеДатВЗаголоке(Объект.ВидУслуги, Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	КонецЕсли;
		
	Если Форма.ЭтоНовый И НЕ ЗначениеЗаполнено(Объект.ВидУслуги) Тогда
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	КонецЕсли;
		
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, 
		Форма.Объект.ВидУслуги,
		ДополнительныеСведения);
		
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция РеквизитыОрганизацииНаСервере(Организация)
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КрупнейшийНалогоплательщик, КодНалоговогоОрганаПолучателя, РегистрацияВНалоговомОргане.КодПоОКАТО, РегистрацияВНалоговомОргане.КодПоОКТМО");
	Если Результат.КрупнейшийНалогоплательщик <> Ложь Тогда
		КодНалоговогоОргана = Результат.КодНалоговогоОрганаПолучателя;
	Иначе
		КодНалоговогоОргана = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КонецЕсли;
	Результат.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыРегистрацииВНалоговомОрганеНаСервере(РегистрацияВНалоговомОргане)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код, КПП");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УправлениеВидимостьюПолучателя(Форма);
	
	ЗадатьПравилаОтображенияДат(Форма);
	
	УправлениеНалогамиИСборами(Форма);
		
	Элементы.ФорматОтветаПредставление.Видимость = Форма.ЗаявлениеОтправлено;
		
	Элементы.Отправить.Видимость = Не Форма.ЗаявлениеОтправлено;
	Элементы.Записать.ТолькоВоВсехДействиях = Форма.ЗаявлениеОтправлено;
	
	УправлениеВидамиОтчетов(Форма);
	
	УправлениеГруппировкойОперации(Форма);
	
	УправлениеФорматомОтвета(Форма);
	
	УправлениеВнешнимВидомОтправленногоЗаявления(Форма);
	
	ПрорисоватьСтатус(Форма);
	
	УстановитьНадписьВИнформационнойПанели(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеНалогамиИСборами(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		
		Элементы.ГруппаНалогиСборы.Видимость 	= Истина;
		
		Если Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Один") Тогда
			Элементы.ОдинНалог.Видимость 		= Истина;
			Элементы.НесколькоНалогов.Видимость = Ложь;
			Форма.ВариантВыбораНалогаПредставление = НСтр("ru = 'Одному налогу'");
		ИначеЕсли Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Несколько")
			ИЛИ (НЕ ЗначениеЗаполнено(Объект.КоличествоНалогов) И Объект.ЗапрашиваемыеНалоги.Количество() > 0) Тогда
			Элементы.ОдинНалог.Видимость 		= Ложь;
			Элементы.НесколькоНалогов.Видимость = Истина;
			Форма.ВариантВыбораНалогаПредставление = НСтр("ru = 'Нескольким налогам или КБК'");
		ИначеЕсли Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоНалоговДляСверкиИОН.Все")
			ИЛИ (НЕ ЗначениеЗаполнено(Объект.КоличествоНалогов) И Объект.ЗапрашиваемыеНалоги.Количество() = 0) Тогда
			Элементы.ОдинНалог.Видимость 		= Ложь;
			Элементы.НесколькоНалогов.Видимость = Ложь;
			Форма.ВариантВыбораНалогаПредставление = НСтр("ru = 'Всем налогам'");
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаНалогиСборы.Видимость = Ложь;

	КонецЕсли;
	
	Элементы.ОтступПередКомментарием.Видимость = НЕ Элементы.НесколькоНалогов.Видимость ИЛИ НЕ Элементы.ГруппаНалогиСборы.Видимость;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКБК(ЗначениеКБК)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.НаименованиеКБК(ЗначениеКБК);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаявлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	ЗаявлениеОтправлено = 
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
		
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Элементы.ТаблицаКБКиНалогов.ТекущиеДанные <> Неопределено Тогда
			
		// Редактируем налог в текущей строке
		ТекущиеДанные = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные;
		ТекущиеДанные.Наименование = Результат.Наименование;
		ТекущиеДанные.Значение     = Результат.Значение;
		
		Если ЗначениеЗаполнено(Результат.Наименование) Тогда
			ТекущиеДанные.Наименование = Результат.Наименование;
		Иначе
			ТекущиеДанные.Наименование = Результат.Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКАТО) Тогда
			ТекущиеДанные.ОКАТО = СокрЛП(ОКАТО);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено тогда
		
		Налог = Результат.Значение;
		ОтработатьИзменениеНалогаИлиОкато();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйНалог(Параметр)
	
	ВременнаяТаблица 	= ТаблицаКБКиНалогов.Выгрузить();
	РезультатПоиска 	= ВременнаяТаблица.Найти(Параметр.Значение, "Значение");
	ЭтоУникальныйНалог 	= РезультатПоиска = Неопределено;
	
	Если ЭтоУникальныйНалог Тогда
	
		НоваяСтрока = ТаблицаКБКиНалогов.Добавить();
		НоваяСтрока.Значение = Параметр.Значение;
		Если ЗначениеЗаполнено(Параметр.Наименование) Тогда
			НоваяСтрока.Наименование = Параметр.Наименование;
		Иначе
			НоваяСтрока.Наименование = Параметр.Значение;
		КонецЕсли;
		НоваяСтрока.ОКАТО = СокрЛП(ОКАТО);
		
	КонецЕсли;
		
	ПеренумероватьСтроки(ТаблицаКБКиНалогов);
	
КонецПроцедуры

#Область Даты

&НаКлиентеНаСервереБезКонтекста
Функция НачалоПредыдущегоГода(Дата)
	
	ПредыдущийГод = Год(Дата) - 1;
	
	Возврат Дата(ПредыдущийГод, 1, 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоСледующегоГода(Дата)
	
	СледующийГод = Год(Дата) + 1;
	
	Возврат Дата(СледующийГод, 1, 1);;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатВЗаголоке(ВидУслуги, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ДополнительныеСведения = "";
	Если ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов") Тогда
		
		ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'за %1 г. на дату %2'"), 
			Формат(ДатаНачалаПериода, "ДФ=yyyy"), 
			Формат(ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		
		ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'за %1 г.'"), 
			Формат(ДатаОкончанияПериода, "ДФ=yyyy"));
			
	ИначеЕсли ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		
		ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'за период %1 - %2'"), 
			Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy"), 
			Формат(ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом")
	ИЛИ ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
	
		ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'на %1'"), 
			Формат(ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

#КонецОбласти

#Область Кому

&НаСервере
Процедура ЗадатьЗначениеПолучателяПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
		РеквизитыОрганизации 	= РеквизитыОрганизацииНаСервере(Объект.Организация);
		Элементы.ПолучательПредставление.Заголовок = НСтр("ru = 'ФНС'") + ?(ЗначениеЗаполнено(Объект.Организация), " " + Строка(РеквизитыОрганизации.КодНалоговогоОргана), "");
		ПолучательОдин          = Истина;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СправочникИФНС.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.РегистрацииВНалоговомОргане КАК СправочникИФНС
		               |ГДЕ
		               |	(СправочникИФНС.Владелец = &Организация
					   |			ИЛИ СправочникИФНС.Владелец = &ГоловнаяОрганизация)
		               |	И НЕ СправочникИФНС.ПометкаУдаления";
		Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	РегламентированнаяОтчетность.ГоловнаяОрганизация(Объект.Организация));
			
		ВсеФНСДляДаннойОрганизации = Запрос.Выполнить().Выгрузить();
		
		Если ВсеФНСДляДаннойОрганизации.Количество() = 1 Тогда
			
			ПолучательПоУмолчанию = ВсеФНСДляДаннойОрганизации[0].Ссылка;
							
			Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
				Объект.Получатель 		= ПолучательПоУмолчанию;
				Модифицированность 		= Истина;
			КонецЕсли;
			
			// Для того, чтобы сделать недоступным поле получателя, если получатель один.
			ПолучательОдин = Истина;
			Элементы.ПолучательПредставление.Заголовок = Строка(ПолучательПоУмолчанию);
			
		КонецЕсли;
		 
	КонецЕсли;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюПолучателя(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЗапретитьВыборПолучателя = Форма.ИспользуетсяОднаОрганизация И Форма.ПолучательОдин;
	
	ЭтоСправкаОбИсполнении = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	
	Элементы.ГруппаПолучатель.Видимость = 
		НЕ ЭтоСправкаОбИсполнении
		И НЕ ЗапретитьВыборПолучателя;
	
	Элементы.ГруппаПолучательПредставление.Видимость = 
		ЭтоСправкаОбИсполнении
		ИЛИ ЗапретитьВыборПолучателя;
		
	Если ЭтоСправкаОбИсполнении Тогда
		Элементы.ПолучательПредставление.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ПолучательПредставление.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АктовСверкиРасчетов
#КонецОбласти

#Область ВыпискиОперацийПоРасчетамСБюджетом

#Область ГруппироватьОперации

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеГруппировкойОперации(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	Элементы.ГруппировкаОперацийПредставление.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");

	Если Объект.ДополнительныйПараметр = 0 Тогда
		Форма.ГруппировкаОперацийПредставление = НСтр("ru = 'По дате'"); 
	ИначеЕсли Объект.ДополнительныйПараметр = 1 Тогда
		Форма.ГруппировкаОперацийПредставление = НСтр("ru = 'По виду платежа'");
	Иначе
		Форма.ГруппировкаОперацийПредставление = НСтр("ru = 'Не выбран'");
	КонецЕсли;
 
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбораГруппировкиОперации(НоваяГруппировкаОперации, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(НоваяГруппировкаОперации) Тогда
		Если НоваяГруппировкаОперации = НСтр("ru = 'По дате'") Тогда
			Объект.ДополнительныйПараметр = 0;
		Иначе
			Объект.ДополнительныйПараметр = 1;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеГруппировкойОперации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СписокПредставленнойОтчетности

#Область ВидыОтчетов

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидамиОтчетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ВидыОтчетовПредставление.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");

	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		
		Если Объект.ДополнительныйПараметр = 0 Тогда
			Форма.ВидыОтчетовПредставление = "Не выбран";
		ИначеЕсли Объект.ДополнительныйПараметр = 1 Тогда
			Форма.ВидыОтчетовПредставление = НСтр("ru = 'Первичные и корректирующие'");
		ИначеЕсли Объект.ДополнительныйПараметр = 2 Тогда
			Форма.ВидыОтчетовПредставление = НСтр("ru = 'Первичные'");
		ИначеЕсли Объект.ДополнительныйПараметр = 3 Тогда
			Форма.ВидыОтчетовПредставление = НСтр("ru = 'Корректирующие'");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВидовОтчетов(НовыйВидыОтчетов, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(НовыйВидыОтчетов) Тогда
		Объект.ДополнительныйПараметр = НовыйВидыОтчетов;
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеВидамиОтчетов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ФорматОтвета

&НаСервере
Процедура УстановитьФорматОтветаПоУмолчанию()

	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате
			ИЛИ Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
			
			Объект.ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.XML;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФорматомОтвета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.RTF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Текст в формате RTF (.rtf)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XLS") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Лист Microsoft Excel 97-2003 (.xls)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XML") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'XML-документ (.xml)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.PDF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Документ Adobe PDF (.pdf)'");
	Иначе
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Не выбран'");
	КонецЕсли;
	
	Элементы.ФорматОтветаПредставление.Видимость = 
		Объект.ВидУслуги <> ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаВыбораФорматаОтвета(НовыйФорматОтвета, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(НовыйФорматОтвета) Тогда
		Объект.ФорматОтвета = НовыйФорматОтвета;
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеФорматомОтвета(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СправкиОСостоянииРасчетовСФНС
#КонецОбласти

#Область СправкиОбИсполненииОбязанностейПоУплатеНалогов
#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти