#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если Основание.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			ВызватьИсключение НСтр("ru='Документ ""Реализация (акт, накладная)"" должен иметь вид операции ""Отгрузка без перехода права собственности"".'");
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		ДокументОтгрузки 				= Основание;
		СчетУчетаРасчетовСКонтрагентом 	= Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам 		= Основание.СчетУчетаРасчетовПоАвансам;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		Если НЕ Основание.ПравоСобственностиПереходитПослеГосРегистрации Тогда
			ВызватьИсключение НСтр("ru='В документе ""Передача ОС"" должен быть установлен флаг ""Право собственности переходит после государственной регистрации"".'");
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		ДокументОтгрузки 				= Основание;
		СчетУчетаРасчетовСКонтрагентом 	= Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам 		= Основание.СчетУчетаРасчетовПоАвансам;
		
    Иначе
        Возврат;
    КонецЕсли;
	
	СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
    СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
    Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
        СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
        СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
    КонецЕсли;
    
    СчетУчетаРасчетовПоАвансам = Основание.СчетУчетаРасчетовПоАвансам;
    Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
        СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
        СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
    КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Специфические для конкретного документа действия
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И (ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")) Тогда
		Документы.РеализацияОтгруженныхТоваров.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
	
	ЗачетАвансов.Очистить();
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	// В формах документа счет расчетов и счет авансов редактируются в специальной форме.
	// В случае, если они не заполнены, покажем сообщение возле соответствующей гиперссылки.
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
			НСтр("ru = 'Счет учета расчетов с контрагентом'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
				НСтр("ru = 'Счет учета расчетов по авансам'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
				"ПорядокУчетаРасчетов", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ВидОперации");
		    Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		        ТекстСообщения = НСтр("ru = 'Указанный документ отгрузки не регистрирует отгрузку без перехода права собственности.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
					НСтр("ru = 'Документ отгрузки'"),,, ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, 
					"ДокументОтгрузки", "Объект", Отказ);
		    КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
			
			ПравоСобственностиПереходитПослеГосРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ПравоСобственностиПереходитПослеГосРегистрации");
		    Если НЕ ПравоСобственностиПереходитПослеГосРегистрации Тогда
		        ТекстСообщения = НСтр("ru = 'Указанный документ отгрузки не регистрирует передачу ОС без перехода права собственности.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
					НСтр("ru = 'Документ отгрузки'"),,, ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, 
					"ДокументОтгрузки", "Объект", Отказ);
				КонецЕсли;
				
		КонецЕсли;
				
	КонецЕсли; 
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
    Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
        Возврат;
    КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Организация, Дата);
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
	Если НачислятьНДСПоОтгрузке Тогда
		ПараметрыДействия.СостояниеФлага = Истина;
	КонецЕсли;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	ДополнительныеСвойства.Вставить("НачислятьНДСПоОтгрузке", НачислятьНДСПоОтгрузке);  
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	ИмяТабличнойЧасти = ?(ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"), "ОС", "Товары");
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, ИмяТабличнойЧасти);
		
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОтгрузки) 
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ ДополнительныеСвойства.НачислятьНДСПоОтгрузке Тогда
	
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);		
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РеализацияОтгруженныхТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТовары,
		ПараметрыПроведения.СписаниеТоваровШапка, Отказ);
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТовары, ПараметрыПроведения.ЗачетАвансовАвансы, 
		ПараметрыПроведения.ЗачетАвансовШапка, Отказ);
	
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных 
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТовары, ТаблицаВзаиморасчетов, 
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияШапка, Отказ);
	
	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);
	
	// Таблица остаточной стомиости ОС
	ТаблицаОстаточнойСтоимостиОС = УчетОС.ПодготовитьТаблицуОстаточнойСтоимостиГосРегистрация(
		ПараметрыПроведения.СписаниеОстаточнойСтоимостиОСТаблица,
		ПараметрыПроведения.СписаниеОстаточнойСтоимостиОСРеквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТовары, ПараметрыПроведения.РеализацияШапка);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.РеализацияШапка, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.ЗачетАвансовШапка, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(
		ТаблицыРеализация.ТоварыУслугиКомитентов, ПараметрыПроведения.ЗачетАвансовШапка, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги, ТаблицыРеализация.ТоварыУслугиКомитентов, 
		ТаблицыРеализация.РеализованныеТоварыКомитентов, ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаТоваровВРознице(
		ПараметрыПроведения.ПереоценкаВРозницеТовары, ТаблицаСписанныеТовары, 
		ПараметрыПроведения.ПереоценкаВРозницеШапка, Движения, Отказ);
		
	УчетОС.СформироватьДвиженияСписаниеОстаточнойСтоимостиОСГосРегистрация(
		ТаблицаОстаточнойСтоимостиОС,
		ПараметрыПроведения.СписаниеОстаточнойСтоимостиОСРеквизиты,
		Движения, Отказ);  
		
	УчетОС.ОпределитьСчетаУчетаОС(ТаблицыРеализация.СобственныеТоварыУслуги, Дата, Организация, "Номенклатура");
	
	// Учет НДС
	УчетНДС.СформироватьДвиженияРеализацияОтгруженныхТоваров(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.НДСТовары, ТаблицаСписанныеТовары,  
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
		
	// Погашение задолженности по отгрузке в у.е.
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженностиПоОтгрузкеВУЕ(
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
	
	// Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.ПодготовитьТаблицуРублевыеСуммыПоОтгрузкеВУЕ(ТаблицыРеализация.СобственныеТоварыУслуги, 
		ПараметрыПроведения.РеализацияШапка);
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.СобственныеТоварыУслуги, 
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.ТоварыУслугиКомитентов, 
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
		
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчетов, 
		ПараметрыПроведения.РеализацияШапка, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка, ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка, ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);

	// Регистрация в последовательности.
	Документы.РеализацияОтгруженныхТоваров.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(ЭтотОбъект, Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		ТаблицаСписанныеТовары);

	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецЕсли