
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииМодуля

Функция ПечатьЭлектронныхПаспортов(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТаблицаДанных = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьДанныеДляСайтаИПечатнойФормы(МассивОбъектов);
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПФ_MXL_ПечатьЭлектронногоПаспорта");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого Документ ИЗ МассивОбъектов Цикл
		СтрокаДанных = ТаблицаДанных.Найти(Документ, "Документ");
		
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПоказателей = СтрокаДанных.ТаблицаПоказателей;
		
		ТабличныйДокумент.Очистить();
		
		ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
		ОбластьПустаяСтрока    = Макет.ПолучитьОбласть("ПустаяСтрока");
		ОбластьПустаяЯчейка    = Макет.ПолучитьОбласть("ПустаяЯчейка");
		ОбластьГруппа          = Макет.ПолучитьОбласть("СтрокаГруппы");
		ОбластьПодгруппа       = Макет.ПолучитьОбласть("СтрокаПодгруппы");
		ОбластьПоказатель      = Макет.ПолучитьОбласть("СтрокаСтатичногоПоказателя");
		ОбластьНазваниеТаблицы = Макет.ПолучитьОбласть("ОбластьНазванияТаблицы");
		
		ОбластьШапка.Параметры.Заполнить(СтрокаДанных);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
		
		Для Каждого СтрокаПоказателя ИЗ ТаблицаПоказателей Цикл
			Если СтрокаПоказателя.ТипПоказателя = "группа" Тогда
				ДобавитьГруппу(ОбластьГруппа, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя);
			ИначеЕсли СтрокаПоказателя.ТипПоказателя = "подгруппа" Тогда
				ДобавитьПодгруппу(ОбластьПодгруппа, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя);
			ИначеЕсли СтрокаПоказателя.ТипПоказателя = "основные данные" ИЛИ СтрокаПоказателя.ТипПоказателя = "статичные данные" Тогда
				ДобавитьСтатичныеДанные(ОбластьПоказатель, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя);
			ИначеЕсли СтрокаПоказателя.ТипПоказателя = "таблица" Тогда
				ВывестиТаблицу(Макет, ОбластьПустаяСтрока, ОбластьПустаяЯчейка, ОбластьНазваниеТаблицы, ТабличныйДокумент, СтрокаПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЭлектронныхПаспортов()

Процедура ДобавитьГруппу(ОбластьГруппа, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя)
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	
	ОбластьГруппа.Параметры.Группа = СтрокаПоказателя.ЗначениеПоказателя;
	ТабличныйДокумент.Вывести(ОбластьГруппа);
	
КонецПроцедуры // ДобавитьГруппу()

Процедура ДобавитьПодгруппу(ОбластьПодгруппа, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя)
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	
	ОбластьПодгруппа.Параметры.Подгруппа = СтрокаПоказателя.ЗначениеПоказателя;
	ТабличныйДокумент.Вывести(ОбластьПодгруппа);
	
КонецПроцедуры // ДобавитьПодгруппу()

Процедура ДобавитьСтатичныеДанные(ОбластьПоказатель, ОбластьПустаяСтрока, ТабличныйДокумент, СтрокаПоказателя)
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	
	ОбластьПоказатель.Параметры.Заполнить(СтрокаПоказателя);
	ТабличныйДокумент.Вывести(ОбластьПоказатель);
	
КонецПроцедуры // ДобавитьСтатичныеДанные()

Процедура ВывестиТаблицу(Макет, ОбластьПустаяСтрока, ОбластьПустаяЯчейка, ОбластьНазваниеТаблицы, ТабличныйДокумент, СтрокаПоказателя)
	
	ДлинаКолонок          = СтрокаПоказателя.ДлинаКолонокТаблицы;
	ДлинаВложенныхКолонок = СтрокаПоказателя.ДлинаКолонокВложеннойТаблицы;
	
	ЕстьВложеннаяТаблица = (НЕ ДлинаВложенныхКолонок = "0");
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	
	//ТабличныйДокумент.Вывести(ОбластьПустаяЯчейка);
	
	ВывестиШапкуТаблицы(Макет, ТабличныйДокумент, СтрокаПоказателя, ДлинаКолонок, ДлинаВложенныхКолонок, ЕстьВложеннаяТаблица);
	
	ТекущаяТаблица = СтрокаПоказателя.ЗначениеПоказателя;
	Если ТекущаяТаблица.Количество() = 0 Тогда
		НоваяСтрока = ТекущаяТаблица.Добавить();
		НоваяСтрока = ТекущаяТаблица.Добавить();
	КонецЕсли;
	
	МассивНазванийКолонок = СтрокаПоказателя.МассивНазванийКолонокТаблицы;
	
	Для Каждого ТекущаяСтрока ИЗ ТекущаяТаблица Цикл
		ВывестиСтрокуТаблицы(Макет, ТабличныйДокумент, ТекущаяТаблица, ТекущаяСтрока, СтрокаПоказателя, МассивНазванийКолонок,
							 ДлинаКолонок, ДлинаВложенныхКолонок, ЕстьВложеннаяТаблица);
	КонецЦикла;
	
	
	
	
КонецПроцедуры // ВывестиТаблицу()

Процедура ВывестиШапкуТаблицы(Макет, ТабличныйДокумент, СтрокаПоказателя, ДлинаКолонок, ДлинаВложенныхКолонок, ЕстьВложеннаяТаблица)
	
	ТаблДок = Новый ТабличныйДокумент;
	
	МассивКолонок = СтрокаПоказателя.МассивКолонокТаблицы;
	
	ОбластьШапки = Макет.ПолучитьОбласть("ЯчейкаШапкиТаблицы" + ДлинаКолонок);
	
	Для Каждого Колонка ИЗ МассивКолонок Цикл
		ОбластьШапки.Параметры.НазваниеКолонки = Колонка;
		ТаблДок.Присоединить(ОбластьШапки);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ТаблДок);
	
	Если ЕстьВложеннаяТаблица Тогда
		ТаблДок = Новый ТабличныйДокумент;
		
		МассивВложенныхКолонок = СтрокаПоказателя.МассивКолонокВложеннойТаблицы;
		
		ОбластьВложеннойШапки = Макет.ПолучитьОбласть("ЯчейкаШапкиТаблицы" + ДлинаВложенныхКолонок);
		
		Для Каждого ВложеннаяКолонка ИЗ МассивВложенныхКолонок Цикл
			ОбластьВложеннойШапки.Параметры.НазваниеКолонки = ВложеннаяКолонка;
			ТаблДок.Присоединить(ОбластьВложеннойШапки);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ТаблДок);
	КонецЕсли;
	
КонецПроцедуры // ВывестиШапкуТаблицы()

Процедура ВывестиСтрокуТаблицы(Макет, ТабличныйДокумент, ТекущаяТаблица, ТекущаяСтрока, СтрокаПоказателя, МассивНазванийКолонок,
							   ДлинаКолонок, ДлинаВложенныхКолонок = "0", ЕстьВложеннаяТаблица = Ложь)
	
	ТаблДок = Новый ТабличныйДокумент;
	
	ОбластьСтроки = Макет.ПолучитьОбласть("ЯчейкаСтрокиТаблицы" + ДлинаКолонок);
	
	Для Каждого Колонка ИЗ МассивНазванийКолонок Цикл
		Если ТекущаяТаблица.Колонки.Найти(Колонка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееЗначение = ТекущаяСтрока[Колонка];
		
		Если ТипЗнч(ТекущееЗначение) = Тип("Дата") Тогда
			ОбластьСтроки.Параметры.ЗначениеПоказателя = Формат(ТекущееЗначение, "ДФ=dd.MM.yyyy");
		Иначе
			ОбластьСтроки.Параметры.ЗначениеПоказателя = ТекущееЗначение;
		КонецЕсли;
		
		ТаблДок.Присоединить(ОбластьСтроки);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ТаблДок);
	
	ТекущаяВложеннаяТаблица = НайтиВложеннуюТаблицу(ТекущаяТаблица, ТекущаяСтрока);
	
	Если ЕстьВложеннаяТаблица И НЕ ТекущаяВложеннаяТаблица = Неопределено Тогда
		МассивНазванийВложенныхКолонок = СтрокаПоказателя.МассивНазванийКолонокВложеннойТаблицы;
		
		Для Каждого ТекущаяСтрокаВложеннойТаблицы ИЗ ТекущаяВложеннаяТаблица Цикл
			ВывестиСтрокуТаблицы(Макет, ТабличныйДокумент, ТекущаяВложеннаяТаблица, ТекущаяСтрокаВложеннойТаблицы, СтрокаПоказателя,
								 МассивНазванийВложенныхКолонок, ДлинаВложенныхКолонок);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиСтрокуТаблицы()

Функция НайтиВложеннуюТаблицу(ТекущаяТаблица, ТекущаяСтрока)
	
	Для Каждого ТекущаяКолонка ИЗ ТекущаяТаблица.Колонки Цикл
		ИмяКолонки = ТекущаяКолонка.Имя;
		
		ЗначениеКолонки = ТекущаяСтрока[ИмяКолонки];
		
		Если ТипЗнч(ЗначениеКолонки) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗначениеКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиВложеннуюТаблицу()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЭлектронногоПаспорта") Тогда

		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "ПечатьЭлектронногоПаспорта", 
																   "Печатная форма электронного паспорта",
																   ПечатьЭлектронныхПаспортов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
