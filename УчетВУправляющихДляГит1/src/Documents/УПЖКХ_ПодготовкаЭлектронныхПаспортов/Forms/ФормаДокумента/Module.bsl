
//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДАННЫХ

#Область ПроцедурыИФункцииЗаполнения

&НаСервере
// Определяет количество проживающих в здании.
//
// Возвращаемое значение:
//  Число - количество проживающих.
//
Функция ПолучитьКоличествоПроживающихВЗдании()
	
	СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК Количество
	|ПОМЕСТИТЬ КоличествоИзЛС
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&СписокЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В (&СписокЛС)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|				ТОГДА ЕСТЬNULL(КоличествоИзЛС.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Константы КАК Константы,
	|	КоличествоИзСведений КАК КоличествоИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ КоличествоИзЛС КАК КоличествоИзЛС
	|		ПО КоличествоИзСведений.ЛицевойСчет = КоличествоИзЛС.ЛицевойСчет";
	Запрос.УстановитьПараметр("Дата",            КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("СписокЛС",        СписокЛС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоПроживающихВЗдании()

&НаСервере
// Определяет количество жилых и нежилых помещений здания с разрезом по типам собственности.
//
// Параметры:
//  Жилые - Булево - признак сбора сведений по жилым помещениям
//  ВидСобственности - ПеречислениеСсылка.УПЖКХ_ВидыСобственности - текущий вид собственности.
//
// Возвращаемое значение:
//  Число - количество помещений.
//
Функция ПолучитьКоличествоЖилыхНежилыхПомещений(Жилые, ВидСобственности = Неопределено)
	
	Если НЕ ТипЗнч(СтруктураПомещений) = Тип("Структура") Тогда
		СтруктураПомещений = Новый Структура;
		СтруктураПомещений.Вставить("КоличествоЖилых",                0);
		СтруктураПомещений.Вставить("КоличествоЖилыхЧастная",         0);
		СтруктураПомещений.Вставить("КоличествоЖилыхМуниципальная",   0);
		СтруктураПомещений.Вставить("КоличествоЖилыхГосударственная", 0);
		
		СтруктураПомещений.Вставить("КоличествоНежилых",                0);
		СтруктураПомещений.Вставить("КоличествоНежилыхЧастная",         0);
		СтруктураПомещений.Вставить("КоличествоНежилыхМуниципальная",   0);
		СтруктураПомещений.Вставить("КоличествоНежилыхГосударственная", 0);
		
		ЗапросКоличествоПомещений = Новый Запрос;
		ЗапросКоличествоПомещений.Текст = ПолучитьТекстЗапросаНаКоличествоПомещений();
		ЗапросКоличествоПомещений.УстановитьПараметр("Здание", Объект.Здание);
		ВыборкаКоличествоПомещений = ЗапросКоличествоПомещений.Выполнить().Выбрать();
		
		Если ВыборкаКоличествоПомещений.Следующий() Тогда
			СтруктураПомещений.КоличествоЖилых   = ВыборкаКоличествоПомещений.КоличествоЖилых;
			СтруктураПомещений.КоличествоНежилых = ВыборкаКоличествоПомещений.КоличествоНежилых;
		КонецЕсли;
		
		ЗапросСобственностьПомещений = Новый Запрос;
		ЗапросСобственностьПомещений.Текст = ПолучитьТекстЗапросаНаСобственностьПомещений();
		ЗапросСобственностьПомещений.УстановитьПараметр("Здание", Объект.Здание);
		ЗапросСобственностьПомещений.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.ПериодСбораДанных));
		ВыборкаСобственностьПомещений = ЗапросСобственностьПомещений.Выполнить().Выбрать();
		
		Если ВыборкаСобственностьПомещений.Следующий() Тогда
			СтруктураПомещений.КоличествоЖилыхЧастная         = ВыборкаСобственностьПомещений.КоличествоЖилыхЧастная;
			СтруктураПомещений.КоличествоЖилыхМуниципальная   = ВыборкаСобственностьПомещений.КоличествоЖилыхМуниципальная;
			СтруктураПомещений.КоличествоЖилыхГосударственная = ВыборкаСобственностьПомещений.КоличествоЖилыхГосударственная;
			
			СтруктураПомещений.КоличествоНежилыхЧастная         = ВыборкаСобственностьПомещений.КоличествоНежилыхЧастная;
			СтруктураПомещений.КоличествоНежилыхМуниципальная   = ВыборкаСобственностьПомещений.КоличествоНежилыхМуниципальная;
			СтруктураПомещений.КоличествоНежилыхГосударственная = ВыборкаСобственностьПомещений.КоличествоНежилыхГосударственная;
		КонецЕсли;
	КонецЕсли;
	
	Если Жилые Тогда
		Если ВидСобственности = Неопределено Тогда
			Значение = СтруктураПомещений.КоличествоЖилых;
		ИначеЕсли ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
			Значение = СтруктураПомещений.КоличествоЖилыхЧастная;
		ИначеЕсли ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Государственная Тогда
			Значение = СтруктураПомещений.КоличествоЖилыхГосударственная;
		Иначе
			Значение = СтруктураПомещений.КоличествоЖилыхМуниципальная;
		КонецЕсли;
		
	Иначе
		Если ВидСобственности = Неопределено Тогда
			Значение = СтруктураПомещений.КоличествоНежилых;
		ИначеЕсли ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
			Значение = СтруктураПомещений.КоличествоНежилыхЧастная;
		ИначеЕсли ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Государственная Тогда
			Значение = СтруктураПомещений.КоличествоНежилыхГосударственная;
		Иначе
			Значение = СтруктураПомещений.КоличествоНежилыхМуниципальная;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьКоличествоЖилыхНежилыхПомещений()

&НаСервере
// Формирует текст запроса на поиск количества помещений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаНаКоличествоПомещений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА КВП_Квартиры.ВидПомещения.ТипПомещения.Ссылка = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА КВП_Квартиры.Ссылка
	|		КОНЕЦ) КАК КоличествоЖилых,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ КВП_Квартиры.ВидПомещения.ТипПомещения.Ссылка = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА КВП_Квартиры.Ссылка
	|		КОНЕЦ) КАК КоличествоНежилых
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК КВП_Квартиры
	|ГДЕ
	|	КВП_Квартиры.Владелец В ИЕРАРХИИ(&Здание)
	|	И КВП_Квартиры.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНаКоличествоПомещений()

&НаСервере
// Формирует текст запроса на определение типа собственности помещений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаНаСобственностьПомещений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Квартиры.Ссылка
	|ПОМЕСТИТЬ втКвартиры
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК КВП_Квартиры
	|ГДЕ
	|	КВП_Квартиры.Владелец В ИЕРАРХИИ(&Здание)
	|	И КВП_Квартиры.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|					И УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоЖилыхЧастная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|					И УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоЖилыхГосударственная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
	|					И УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоЖилыхМуниципальная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|					И НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоНежилыхЧастная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|					И НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоНежилыхГосударственная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
	|					И НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|				ТОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		КОНЕЦ) КАК КоличествоНежилыхМуниципальная
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&КонецМесяца,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втКвартиры.Ссылка
	|				ИЗ
	|					втКвартиры КАК втКвартиры)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНаСобственностьПомещений()

&НаСервере
// Определяет значение показателя организации.
//
// Параметры:
//  НазваниеПоказателя - Строка - название показателя.
//
// Возвращаемое значение:
//  Строка - значение показателя.
//
Функция ПолучитьСведенияОбОрганизации(НазваниеПоказателя)
	
	Если НЕ ТипЗнч(СведенияОбОрганизации) = Тип("Структура") Тогда
		СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Объект.Организация, Объект.ПериодСбораДанных);
		СведенияОбОрганизации.Вставить("Сайт", ПолучитьСайтОрганизации(Объект.Организация, Объект.ПериодСбораДанных));
	КонецЕсли;
	
	Если СведенияОбОрганизации.Свойство(НазваниеПоказателя) Тогда
		Возврат СведенияОбОрганизации[НазваниеПоказателя];
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьСведенияОбОрганизации

&НаСервере
// Определяет адрес сайта организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Дата - Дата - дата сбора данных.
//
// Возвращаемое значение:
//  Строка - адрес сайта организации.
//
Функция ПолучитьСайтОрганизации(Организация, Дата)
	
	Отказ = Ложь;
	НастройкиУП = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(Дата), Организация, Отказ);
	
	Если НЕ Отказ И НастройкиУП.Свойство("АдресСайтаКомпании") Тогда
		Возврат НастройкиУП.АдресСайтаКомпании;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьСайтОрганизации()

&НаСервере
// Заполняет сведения об организациях, оказывающих услуги содержания и ремонта.
//
Процедура ЗаполнитьСведенияОЛицахОказывающихУслуги()
	
	УслугиСодержанияИРемонта = НастройкиЭП.УслугиСодержанияИРемонта.ВыгрузитьКолонку("ВидУслуги");
	
	ТаблицаРСО = ПолучитьСведенияОЛицахОказывающихУслуги(Объект.Организация, Объект.Здание, Объект.ПериодСбораДанных, УслугиСодержанияИРемонта);
	
	Объект.СведенияОЛицахОказывающихУслуги.Загрузить(ТаблицаРСО);
	
КонецПроцедуры // ЗаполнитьСведенияОЛицахОказывающихУслуги()

&НаСервере
// Формирует таблицу со сведениями об организациях, оказывающих услуги содержания и ремонта.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Здание - СправочникСсылка.КВП_Здания
//  Дата - Дата - дата сбора данных
//  ВидыУслуг - Массив - массив с видами услуг.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями об организациях.
//
Функция ПолучитьСведенияОЛицахОказывающихУслуги(Организация, Здание, Дата, ВидыУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Период КАК ДатаНачалаОбслуживания,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.НаименованиеПолное КАК Наименование,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги.Наименование КАК ВидРабот,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ИНН КАК ИНН,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.КПП КАК КПП,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ВидУслуги В (&ВидыУслуг)
	|				И Объект = &Здание) КАК УПЖКХ_ПоставщикиУслугСрезПоследних";
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыУслуг",   ВидыУслуг);
	Запрос.УстановитьПараметр("Здание",      Здание);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("ТелефонФакс",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка ИЗ Таблица Цикл
		СведенияОбОрганизации   = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Строка.Поставщик, Дата);
		Строка.ТелефонФакс      = СведенияОбОрганизации.Телефоны;
		Строка.АдресФактический = СведенияОбОрганизации.ФактическийАдрес;
		Строка.АдресЮридический = СведенияОбОрганизации.ЮридическийАдрес;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьСведенияОЛицахОказывающихУслуги()

&НаСервере
// Заполняет сведения об организациях, поставляющих коммунальные ресурсы.
//
Процедура ЗаполнитьСведенияОРСО()
	
	ТаблицаУслуг = НастройкиЭП.КоммунальныеРесурсы;
	
	ТаблицаРСО = ПолучитьТаблицуСведенийОбРСО(Объект.Организация, Объект.Здание, Объект.ПериодСбораДанных, ТаблицаУслуг, "Ресурс");
	
	Объект.РСО.Загрузить(ТаблицаРСО);
	
КонецПроцедуры // ЗаполнитьСведенияОРСО()

&НаСервере
// Формирует таблицу со сведениями об организациях, оказывающих коммунальные услуги и поставляющих коммунальные ресурсы.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Здание - СправочникСсылка.КВП_Здания
//  Дата - Дата - дата сбора данных
//  ТаблицаУслуг - ТаблицаЗначений - таблица соответствия услуг в БД и предопределенных типов услуг
//  НазваниеКолонки - название колонки с предопределенными типа в текущей таблице.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями об организациях.
//
Функция ПолучитьТаблицуСведенийОбРСО(Организация, Здание, Дата, ТаблицаУслуг, НазваниеКолонки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуг.ВидУслуги,
	|	ТаблицаУслуг." + НазваниеКолонки + "
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Период КАК ДатаНачалаОбслуживания,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.НаименованиеПолное КАК Наименование,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ИНН КАК ИНН,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.КПП КАК КПП,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги
	|ПОМЕСТИТЬ втПоставщики
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ВидУслуги В
	|					(ВЫБРАТЬ
	|						втТаблицаУслуг.ВидУслуги
	|					ИЗ
	|						втТаблицаУслуг КАК втТаблицаУслуг)
	|				И Объект = &Здание) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПоставщики.ДатаНачалаОбслуживания, ДатаВремя(1, 1, 1)) КАК ДатаНачалаОбслуживания,
	|	ЕСТЬNULL(втПоставщики.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(втПоставщики.ИНН, """") КАК ИНН,
	|	ЕСТЬNULL(втПоставщики.КПП, """") КАК КПП,
	|	ЕСТЬNULL(втПоставщики.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	втТаблицаУслуг." + НазваниеКолонки + "
	|ИЗ
	|	втПоставщики КАК втПоставщики
	|		ПРАВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО втПоставщики.ВидУслуги = втТаблицаУслуг.ВидУслуги";
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг", ТаблицаУслуг);
	Запрос.УстановитьПараметр("Здание",       Здание);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("ТелефонФакс",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка ИЗ Таблица Цикл
		Если Строка.Поставщик = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		СведенияОбОрганизации   = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Строка.Поставщик, Дата);
		Строка.ТелефонФакс      = СведенияОбОрганизации.Телефоны;
		Строка.АдресФактический = СведенияОбОрганизации.ФактическийАдрес;
		Строка.АдресЮридический = СведенияОбОрганизации.ЮридическийАдрес;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСведенийОбРСО()

&НаСервере
// Заполняет сведения об организациях, оказывающих коммунальные услуги.
//
Процедура ЗаполнитьСведенияОЛицахОказывающихКоммунальныеУслуги()
	
	ТаблицаУслуг = НастройкиЭП.КоммунальныеУслуги;
	
	ТаблицаРСО = ПолучитьТаблицуСведенийОбРСО(Объект.Организация, Объект.Здание, Объект.ПериодСбораДанных, ТаблицаУслуг, "КоммунальнаяУслуга");
	
	Объект.ЛицаОказывающиеКУ.Загрузить(ТаблицаРСО);
	
КонецПроцедуры // ЗаполнитьСведенияОЛицахОказывающихКоммунальныеУслуги()

&НаСервере
// Определяет размер тарифа по услугам управления МКД.
//
// Возвращаемое значение:
//  Число - размер тарифа.
//
Функция ПолучитьТарифПоУслугамУправления()
	
	Если ТаблицаТарифов.Количество() = 0 Тогда
		УслугиПоУправлению = НастройкиЭП.УслугиПоУправлению.ВыгрузитьКолонку("ВидУслуги");
		УслугиСодержания   = НастройкиЭП.УслугиСодержанияИРемонта.ВыгрузитьКолонку("ВидУслуги");
		
		ТаблТарифов = ПолучитьТаблицуТарифов(Объект.ПериодСбораДанных, УслугиПоУправлению, УслугиСодержания);
		
		ТаблицаТарифов.Загрузить(ТаблТарифов);
	КонецЕсли;
	
	УслугиУправления = ТаблицаТарифов.НайтиСтроки(Новый Структура("УслугаУправления", Истина));
	ИтоговыйТариф    = 0;
	
	Для Каждого УслугаУправления Из УслугиУправления Цикл 
		ИтоговыйТариф = ИтоговыйТариф + УслугаУправления.Тариф;
	КонецЦикла;
	
	Возврат ИтоговыйТариф;
	
КонецФункции // ПолучитьТарифПоУслугамУправления()

&НаСервере
// Заполняет сведения о ценах на коммунальные услуги.
//
Процедура ЗаполнитьСведенияОЦенахНаКоммунальныеУслуги(ЭтоЖилойДом = Ложь)
	
	ТаблицаУслуг = НастройкиЭП.КоммунальныеУслуги;
	
	ТаблТарифов = ПолучитьТаблицуТарифовКоммунальныхУслуг(ТаблицаУслуг, Объект.ПериодСбораДанных, Объект.Организация, Объект.Здание, ЭтоЖилойДом);
	
	Если ЭтоЖилойДом Тогда
		Объект.СведенияОЦенахНаКоммунальныеУслугиЖилойДом.Загрузить(ТаблТарифов);
	Иначе
		Объект.СведенияОЦенахНаКоммунальныеУслуги.Загрузить(ТаблТарифов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОЦенахНаКоммунальныеУслуги()

&НаСервере
// Формирует таблицу с размерами тарифов по услугам управления, содержания и ремонта.
//
// Параметры:
//  ПериодСбораДанных - Дата - дата сбора данных
//  УслугиПоУправлению - Массив - услуги по управлению МКД
//  УслугиСодержания - Массив - услуги содержания и ремонта.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с размерами тарифов.
//
Функция ПолучитьТаблицуТарифов(ПериодСбораДанных, УслугиПоУправлению, УслугиСодержания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка
	|ПОМЕСТИТЬ втУслугиСодержания
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ВидУслуги В(&УслугиСодержания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Услуги.Ссылка
	|ПОМЕСТИТЬ втУслугиУправления
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ВидУслуги В(&УслугиПоУправлению)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиСодержания.Ссылка КАК Услуга,
	|	ЛОЖЬ КАК УслугаУправления
	|ПОМЕСТИТЬ втВсеУслуги
	|ИЗ
	|	втУслугиСодержания КАК втУслугиСодержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втУслугиУправления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	втУслугиУправления КАК втУслугиУправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Услуга,
	|	КВП_ТарифыСрезПоследних.Тариф,
	|	КВП_ТарифыСрезПоследних.Объект
	|ПОМЕСТИТЬ втТарифыНаВсеОбъекты
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втВсеУслуги.Услуга
	|					ИЗ
	|						втВсеУслуги КАК втВсеУслуги)
	|				И ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				И Объект = НЕОПРЕДЕЛЕНО) КАК КВП_ТарифыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Услуга,
	|	КВП_ТарифыСрезПоследних.Тариф,
	|	КВП_ТарифыСрезПоследних.Объект
	|ПОМЕСТИТЬ втТарифыНаЗдания
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И Объект = &Здание
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втВсеУслуги.Услуга
	|					ИЗ
	|						втВсеУслуги КАК втВсеУслуги)
	|				И ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)) КАК КВП_ТарифыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втТарифыНаЗдания.Услуга, втТарифыНаВсеОбъекты.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втТарифыНаЗдания.Тариф, втТарифыНаВсеОбъекты.Тариф) КАК Тариф,
	|	ЕСТЬNULL(втТарифыНаЗдания.Объект, втТарифыНаВсеОбъекты.Объект) КАК Объект
	|ПОМЕСТИТЬ втВсеТарифы
	|ИЗ
	|	втТарифыНаЗдания КАК втТарифыНаЗдания
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТарифыНаВсеОбъекты КАК втТарифыНаВсеОбъекты
	|		ПО втТарифыНаЗдания.Услуга = втТарифыНаВсеОбъекты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеТарифы.Услуга,
	|	втВсеТарифы.Тариф,
	|	втВсеУслуги.УслугаУправления,
	|	втВсеТарифы.Объект
	|ИЗ
	|	втВсеТарифы КАК втВсеТарифы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеУслуги КАК втВсеУслуги
	|		ПО втВсеТарифы.Услуга = втВсеУслуги.Услуга";
	Запрос.УстановитьПараметр("КонецМесяца",        КонецМесяца(ПериодСбораДанных));
	Запрос.УстановитьПараметр("УслугиСодержания",   УслугиСодержания);
	Запрос.УстановитьПараметр("УслугиПоУправлению", УслугиПоУправлению);
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Здание",             Объект.Здание);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуТарифов()

&НаСервере
// Формирует таблицу с тарифами по коммунальным услугам.
//
// Параметры:
//  ТаблицаУслуг - ТаблицаЗначений - таблица соответствия услуг в БД и предопределенных типов услуг
//  Дата - Дата - дата сбора данных
//  Организация - СправочникСсылка.Организации
//  Здание - СправочникСсылка.КВП_Здания.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с тарифами.
//
Функция ПолучитьТаблицуТарифовКоммунальныхУслуг(ТаблицаУслуг, Дата, Организация, Здание, ЭтоЖилойДом)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслуг.КоммунальнаяУслуга,
	|	ТаблицаУслуг.ВидУслуги
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И Объект.Адрес.Владелец = &Здание
	|				И Услуга.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втУслуги.ВидУслуги
	|					ИЗ
	|						втУслуги КАК втУслуги)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифПоНормативу,
	|	ВЫБОР
	|		КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|			ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифПоСчетчику
	|ПОМЕСТИТЬ втТарифыНаВсеОбъекты
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И Объект = НЕОПРЕДЕЛЕНО
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втНазначенныеУслуги.Услуга
	|					ИЗ
	|						втНазначенныеУслуги КАК втНазначенныеУслуги)
	|				И (ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|					ИЛИ ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))) КАК КВП_ТарифыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифПоНормативу,
	|	ВЫБОР
	|		КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|			ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифПоСчетчику
	|ПОМЕСТИТЬ втТарифыНаЗдания
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И Объект = &Здание
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втНазначенныеУслуги.Услуга
	|					ИЗ
	|						втНазначенныеУслуги КАК втНазначенныеУслуги)
	|				И (ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|					ИЛИ ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))) КАК КВП_ТарифыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втТарифыНаЗдания.ВидУслуги, втТарифыНаВсеОбъекты.ВидУслуги) КАК ВидУслуги,
	|	ЕСТЬNULL(втТарифыНаЗдания.ТарифПоНормативу, втТарифыНаВсеОбъекты.ТарифПоНормативу) КАК ТарифПоНормативу,
	|	ЕСТЬNULL(втТарифыНаЗдания.ТарифПоСчетчику, втТарифыНаВсеОбъекты.ТарифПоСчетчику) КАК ТарифПоСчетчику
	|ПОМЕСТИТЬ втВсеТарифы
	|ИЗ
	|	втТарифыНаЗдания КАК втТарифыНаЗдания
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТарифыНаВсеОбъекты КАК втТарифыНаВсеОбъекты
	|		ПО втТарифыНаЗдания.ВидУслуги = втТарифыНаВсеОбъекты.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслуги.КоммунальнаяУслуга,
	|	втВсеТарифы.ТарифПоНормативу КАК ТарифПоНормативу,
	|	втВсеТарифы.ТарифПоСчетчику КАК ТарифПоСчетчику
	|ИЗ
	|	втУслуги КАК втУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеТарифы КАК втВсеТарифы
	|		ПО втУслуги.ВидУслуги = втВсеТарифы.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втУслуги.КоммунальнаяУслуга,
	|	втВсеТарифы.ТарифПоНормативу,
	|	втВсеТарифы.ТарифПоСчетчику";
	
	Запрос.УстановитьПараметр("ТаблицаУслуг", ТаблицаУслуг);
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Здание",       Здание);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТаблТарифов = Таблица.СкопироватьКолонки("КоммунальнаяУслуга");
	ТаблТарифов.Колонки.Добавить("Тариф",          Новый ОписаниеТипов("Число"));
	ТаблТарифов.Колонки.Добавить("ПоНормативу",    Новый ОписаниеТипов("Булево"));
	ТаблТарифов.Колонки.Добавить("Наименование",   Новый ОписаниеТипов("Строка"));
	
	Если ЭтоЖилойДом Тогда
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление, ЭтоЖилойДом);
	Иначе
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение, ЭтоЖилойДом);
		ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение, ЭтоЖилойДом);
	КонецЕсли;
	
	Возврат ТаблТарифов;
	
КонецФункции // ПолучитьТаблицуТарифовКоммунальныхУслуг()

&НаСервере
// Заполняет строку таблицы со сведениями о тарифах по коммунальных услугам.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица с тарифами
//  ТаблТарифов - ТаблицаЗначений - таблица, которую заполняем
//  ВидУслуги - Перечисление.УПЖКХ_ВидыКоммунальныхУслуг - текущий вид коммунальной услуги.
//
Процедура ЗаполнитьСтрокуТаблицыСТарифами(Таблица, ТаблТарифов, ВидУслуги, ЭтоЖилойДом)
	
	СтрокиТарифа  = Таблица.НайтиСтроки(Новый Структура("КоммунальнаяУслуга", ВидУслуги));
	
	ТарифПоСчетчику  = 0;
	ТарифПоНормативу = 0;
	
	Для Каждого СтрокаТарифа Из СтрокиТарифа Цикл
		Если Не СтрокаТарифа.ТарифПоСчетчику = 0 Тогда
			ТарифПоСчетчику = СтрокаТарифа.ТарифПоСчетчику;
		КонецЕсли;
		Если Не СтрокаТарифа.ТарифПоНормативу = 0 Тогда
			ТарифПоНормативу = СтрокаТарифа.ТарифПоНормативу;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоЖилойДом Тогда
		НоваяСтрока = ТаблТарифов.Добавить();
		НоваяСтрока.КоммунальнаяУслуга = ВидУслуги;
		НоваяСтрока.Тариф              = ?(ТарифПоСчетчику = 0, ТарифПоНормативу, ТарифПоСчетчику);
	Иначе
		НоваяСтрока = ТаблТарифов.Добавить();
		НоваяСтрока.КоммунальнаяУслуга = ВидУслуги;
		НоваяСтрока.Тариф              = ТарифПоНормативу;
		НоваяСтрока.ПоНормативу        = Истина;
		НоваяСтрока.Наименование       = "" + ВидУслуги + " (по нормативу)";
		
		НоваяСтрока = ТаблТарифов.Добавить();
		НоваяСтрока.КоммунальнаяУслуга = ВидУслуги;
		НоваяСтрока.Тариф              = ТарифПоСчетчику;
		НоваяСтрока.Наименование       = "" + ВидУслуги + " (по счетчику)";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуТаблицыСТарифами()

&НаСервере
// Возвращает значение параметра, соответствующего общим сведениям по лицевым счетам.
//
// Параметры:
//  Параметр - Строка - название параметра, значение которого необходимо найти.
//
// Возвращаемое значение:
//  Число - количество лицевых счетов.
//
Функция ПолучитьСтруктуруСоСведениямиПоЛицевымСчетам(Параметр)
	
	Если СтруктураЛицевыхСчетов = Неопределено Тогда
	
		СтруктураЛицевыхСчетов = Новый Структура("ОбщееКоличествоЛСФизЛиц, КоличествоЛСФизЛицСобственников, КоличествоЛСФизЛицНанимателей, 
												 |ОбщееКоличествоЛСЮрЛиц, КоличествоЛСЮрЛицСобственников, КоличествоЛСЮрЛицНанимателей",
												 0, 0, 0,
												 0, 0, 0);
		
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
		ОбщееКоличествоЛС = СписокЛС.Количество();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
		|				ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
		|		КОНЕЦ) КАК ФизЛицаНаниматели
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&КонецМесяца, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.ПериодСбораДанных));
		Запрос.УстановитьПараметр("СписокЛС",    СписокЛС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураЛицевыхСчетов.ОбщееКоличествоЛСФизЛиц = Выборка.ФизЛицаНаниматели;
		КонецЕсли;
		СтруктураЛицевыхСчетов.ОбщееКоличествоЛСЮрЛиц = ОбщееКоличествоЛС - СтруктураЛицевыхСчетов.ОбщееКоличествоЛСФизЛиц;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец
		|ПОМЕСТИТЬ втВладельцы
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&КонецМесяца, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.ФизическиеЛица
		|				ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
		|		КОНЕЦ) КАК СобственникиФизЛица,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник ССЫЛКА Справочник.ФизическиеЛица
		|				ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
		|		КОНЕЦ) КАК СобственникиЮрЛица
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&КонецМесяца, ) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВладельцы КАК втВладельцы
		|		ПО (ВЫБОР
		|				КОГДА втВладельцы.Владелец ССЫЛКА Справочник.УПЖКХ_Жильцы
		|					ТОГДА УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник = втВладельцы.Владелец.ФизЛицо
		|				ИНАЧЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник = втВладельцы.Владелец
		|			КОНЕЦ)";
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.ПериодСбораДанных));
		Запрос.УстановитьПараметр("СписокЛС",    СписокЛС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураЛицевыхСчетов.КоличествоЛСФизЛицСобственников = Выборка.СобственникиФизЛица;
			СтруктураЛицевыхСчетов.КоличествоЛСФизЛицНанимателей   = СтруктураЛицевыхСчетов.ОбщееКоличествоЛСФизЛиц - СтруктураЛицевыхСчетов.КоличествоЛСФизЛицСобственников;
			
			СтруктураЛицевыхСчетов.КоличествоЛСЮрЛицСобственников = Выборка.СобственникиЮрЛица;
			СтруктураЛицевыхСчетов.КоличествоЛСЮрЛицНанимателей   = СтруктураЛицевыхСчетов.ОбщееКоличествоЛСЮрЛиц - СтруктураЛицевыхСчетов.КоличествоЛСЮрЛицСобственников;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураЛицевыхСчетов[Параметр];
	
КонецФункции // ПолучитьСтруктуруСоСведениямиПоЛицевымСчетам()

&НаСервере
// Записывает в структуру с данными сведения о помещениях МКД.
//
Процедура ЗаполнитьСведенияПоПомещениямМКД()
	
	ТаблицаПомещений     = ПолучитьОбщиеСведенияПоПомещениям();
	ТаблицаСобственников = ПолучитьТаблицуСобственниковАрендаторов(ТаблицаПомещений.ВыгрузитьКолонку("ПомещениеСсылка"));
	
	Для Каждого Строка Из ТаблицаПомещений Цикл
		СтрокиСобственников = ТаблицаСобственников.НайтиСтроки(Новый Структура("Помещение", Строка.ПомещениеСсылка));
		ТаблСобственников   = ТаблицаСобственников.Скопировать(СтрокиСобственников);
		
		Строка.СведенияОСобственниках = ТаблСобственников.Скопировать();
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаПомещений", ТаблицаПомещений);
	
КонецПроцедуры // ЗаполнитьСведенияПоПомещениямМКД()

&НаСервере
// Формирует таблицу со сведениями о помещениях.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о помещениях.
//
Функция ПолучитьОбщиеСведенияПоПомещениям()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_Помещения.Код) КАК НомерПомещения,
	|	УПЖКХ_Помещения.Ссылка КАК ПомещениеСсылка,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|			ТОГДА ""Жилое""
	|		ИНАЧЕ ""Нежилое""
	|	КОНЕЦ КАК Категория
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Владелец = &Здание
	|	И НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И (УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|			ИЛИ УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Офис)
	|			ИЛИ УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	СУММА(КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоИзЛС
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ТекущаяДата,
	|			ЛицевойСчет.Адрес В
	|				(ВЫБРАТЬ
	|					втПомещения.ПомещениеСсылка
	|				ИЗ
	|					втПомещения КАК втПомещения)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ТекущаяДата,
	|			ЛицевойСчет.Адрес В
	|					(ВЫБРАТЬ
	|						втПомещения.ПомещениеСсылка
	|					ИЗ
	|						втПомещения КАК втПомещения)
	|				И ДатаИзменения <= &ТекущаяДата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКоличествоИзЛС.Помещение, втКоличествоИзСведений.Помещение) КАК Помещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втКоличествоИзЛС.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами,
	|	втКоличествоИзЛС КАК втКоличествоИзЛС
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКоличествоИзСведений КАК втКоличествоИзСведений
	|		ПО втКоличествоИзЛС.Помещение = втКоличествоИзСведений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ТекущаяДата,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втПомещения.ПомещениеСсылка
	|					ИЗ
	|						втПомещения КАК втПомещения)
	|				И (ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПомещения.ПомещениеСсылка,
	|	втПомещения.НомерПомещения,
	|	втПомещения.Категория,
	|	ЕСТЬNULL(втЗарегистрированные.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втПлощади.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь
	|ИЗ
	|	втПомещения КАК втПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированные КАК втЗарегистрированные
	|		ПО втПомещения.ПомещениеСсылка = втЗарегистрированные.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втПомещения.ПомещениеСсылка = втПлощади.Объект";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Здание",      Объект.Здание);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("АдресПомещения");
	
	АдресЗдания = Объект.Здание.Наименование;
	
	Для Каждого Строка Из Таблица Цикл
		Строка.АдресПомещения = АдресЗдания + ", кв. " + Строка.НомерПомещения;
	КонецЦикла;
	
	Таблица.Колонки.Добавить("СведенияОСобственниках", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Таблица;
	
КонецФункции // ПолучитьОбщиеСведенияПоПомещениям()

&НаСервере
// Формирует таблицу со сведениями о собственниках помещений.
// 
// Параметры:
//  Помещения - Массив - помещения МКД.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о собственниках.
//
Функция ПолучитьТаблицуСобственниковАрендаторов(Помещения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК Собственник,
	|	""Собственник"" КАК ТипСубъекта
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ТекущаяДата, Помещение В (&Помещения)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Помещения",   Помещения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСобственниковАрендаторов()

&НаСервере
// Подготавливает таблицу со сведениями о потреблении по коммунальным услугам.
//
Процедура ЗаполнитьДанныеПоПотреблениюКоммунальныхУслуг()
	
	ТаблицаПотребления = ПолучитьТаблицуПотребления();
	
	СведенияОбОбъемахОказанияУслуг = Новый ТаблицаЗначений;
	СведенияОбОбъемахОказанияУслуг.Колонки.Добавить("Услуга");
	СведенияОбОбъемахОказанияУслуг.Колонки.Добавить("ОбъемПотребления");
	
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление, "ПотреблениеТепловойЭнергии",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "Отопление");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение, "ПотреблениеХВС",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "ХолодноеВодоснабжение");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение, "ПотреблениеГВС",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "ГорячееВодоснабжение");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение, "ПотреблениеГаза",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "Газоснабжение");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение, "ПотреблениеВодоотведения",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "Водоотведение");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение, "ПотреблениеЭлектроснабжения",
									   "КоммунальнаяУслуга", СведенияОбОбъемахОказанияУслуг.Добавить(), "Электроснабжение");
	
	СтруктураДанных.Вставить("СведенияОбОбъемахОказанияУслуг", СведенияОбОбъемахОказанияУслуг);
	
КонецПроцедуры // ЗаполнитьДанныеПоПотреблениюКоммунальныхУслуг()

&НаСервере
// Добавляет в структуру с данными сведения об объемах потребления коммунальных услуг
// и коммунальных ресурсов.
//
// Параметры:
//  ТаблицаПотребления - ТаблицаЗначений - таблица со сведениями о потреблении,
//  КоммунальнаяУслуга - ПеречислениеСсылка.УПЖКХ_ВидыКоммунальныхУслуг, ПеречислениеСсылка.УПЖКХ_ВидыРесурсов
//                     -  текущая услуга/ресурс,
//  НазваниеЭлемента - Строка - название элемента в структуре,
//  НазваниеКолонки - Строка - колонка, в которой надо искать данные.
//
Процедура ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПотребления, КоммунальнаяУслуга, НазваниеЭлемента, НазваниеКолонки,
											 СтрокаУслугДляСайта = Неопределено, НазваниеУслуги = Неопределено)
	
	СтрокаУслуги = ТаблицаПотребления.Найти(КоммунальнаяУслуга, НазваниеКолонки);
	
	СтруктураДанных.Вставить(НазваниеЭлемента, ?(СтрокаУслуги = Неопределено, 0, СтрокаУслуги.Количество));
	
	Если Не СтрокаУслугДляСайта = Неопределено Тогда
		СтрокаУслугДляСайта.Услуга           = НазваниеУслуги;
		СтрокаУслугДляСайта.ОбъемПотребления = СтруктураДанных[НазваниеЭлемента];
	КонецЕсли;
	
КонецПроцедуры // ВставитьСведенияОбОбъемеВСтруктуру()

&НаСервере
// Формирует таблицу со сведениями о потреблении коммунальных услуг.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о потреблении.
//
Функция ПолучитьТаблицуПотребления()
	
	СписокЛСЗдания = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКоммунальныхУслуг.КоммунальнаяУслуга,
	|	ТаблицаКоммунальныхУслуг.ВидУслуги
	|ПОМЕСТИТЬ втКоммунальныеУслуги
	|ИЗ
	|	&ТаблицаКоммунальныхУслуг КАК ТаблицаКоммунальныхУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ втОбъемы
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втКоммунальныеУслуги.ВидУслуги
	|					ИЗ
	|						втКоммунальныеУслуги КАК втКоммунальныеУслуги)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПоИПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.НачислениеПоОПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_видыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоммунальныеУслуги.КоммунальнаяУслуга,
	|	втКоммунальныеУслуги.ВидУслуги,
	|	ЕСТЬNULL(втОбъемы.Количество, 0) КАК Количество
	|ИЗ
	|	втКоммунальныеУслуги КАК втКоммунальныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбъемы КАК втОбъемы
	|		ПО втКоммунальныеУслуги.ВидУслуги = втОбъемы.ВидУслуги";
	Запрос.УстановитьПараметр("НачалоМесяца",             НачалоМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("КонецМесяца",              КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",      СписокЛСЗдания);
	Запрос.УстановитьПараметр("ТаблицаКоммунальныхУслуг", НастройкиЭП.КоммунальныеУслуги);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПолучитьТаблицуПотребления()

&НаСервере
// Добавляет в структуру с данными сведения о начислении, оплате, сальдо в разрезе помещений.
//
// Параметры:
//  ЖилойДом - Булево - признак типа здания: МКд или ЖД.
//
Процедура ЗаполнитьДанныеОРазмерахОплатыКоммунальныхУслуг(ЖилойДом = Ложь)
	
	ТаблицаПомещений  = ПолучитьТаблицуРазмеровПлаты();
	ТаблицаНачислений = ПолучитьТаблицуНачисленийПоПомещениям();
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Ресурс");
	ТаблицаУслуг.Колонки.Добавить("Сальдо");
	ТаблицаУслуг.Колонки.Добавить("Начислено");
	ТаблицаУслуг.Колонки.Добавить("Оплачено");
	
	Для Каждого Строка Из ТаблицаПомещений Цикл
		ТаблицаУслуг.Очистить();
		
		ТаблицаТекущегоПомещения = ТаблицаНачислений.Скопировать(ТаблицаНачислений.НайтиСтроки(Новый Структура("Помещение", Строка.Помещение)));
		
		ЗаполнитьСтруктуруНачислений(Строка.ГВС, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение,
									 ТаблицаУслуг.Добавить(), "Горячее водоснабжение");
		ЗаполнитьСтруктуруНачислений(Строка.ХВС, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение,
									 ТаблицаУслуг.Добавить(), "Холодное водоснабжение");
		ЗаполнитьСтруктуруНачислений(Строка.Водоотведение, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение,
									 ТаблицаУслуг.Добавить(), "Водоотведение");
		ЗаполнитьСтруктуруНачислений(Строка.Электроснабжение, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение,
									 ТаблицаУслуг.Добавить(), "Электроснабжение");
		ЗаполнитьСтруктуруНачислений(Строка.Газоснабжение, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение,
									 ТаблицаУслуг.Добавить(), "Газоснабжение");
		ЗаполнитьСтруктуруНачислений(Строка.Отопление, ТаблицаТекущегоПомещения, Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление,
									 ТаблицаУслуг.Добавить(), "Отопление");
		
		Строка.Услуги = ТаблицаУслуг.Скопировать();
	КонецЦикла;
	
	Если ЖилойДом Тогда
		СтруктураДанных.Вставить("ТаблицаПомещений", ТаблицаПомещений);
	Иначе
		ТаблицаЖилыхПомещений = ТаблицаПомещений.Скопировать(ТаблицаПомещений.НайтиСтроки(Новый Структура("ЯвляетсяЖилым", Истина)));
		ТаблицаНежилыхПомещений = ТаблицаПомещений.Скопировать(ТаблицаПомещений.НайтиСтроки(Новый Структура("ЯвляетсяЖилым", Ложь)));
		
		СтруктураДанных.Вставить("ТаблицаЖилыхПомещений",   ТаблицаЖилыхПомещений);
		СтруктураДанных.Вставить("ТаблицаНежилыхПомещений", ТаблицаНежилыхПомещений);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеОРазмерахОплатыКоммунальныхУслуг()

&НаСервере
// Заполняет структуру со сведениями о начислении, оплате, сальдо по текущему помещению.
//
// Параметры:
//  СтруктураНачислений - Структура - заготовка структуры, в которую будем помещать данные
//  ТаблицаТекущегоПомещения - ТаблицаЗначений - таблица со сведениями по текущему помещению
//  КоммунальнаяУслуга - ПеречислениеСсылка.УПЖКХ_ВидыКоммунальныхУслуг - текущая услуга.
//
// Вовзращаемое значение:
//  Структура - структура со сведениями по помещению.
//
Процедура ЗаполнитьСтруктуруНачислений(ТекущаяСтруктура, ТаблицаТекущегоПомещения, КоммунальнаяУслуга, СтрокаУслугДляСайта, НазваниеУслугиДляСайта)
	
	СтрокаУслуги = ТаблицаТекущегоПомещения.Найти(КоммунальнаяУслуга, "КоммунальнаяУслуга");
	
	Если СтрокаУслуги = Неопределено Тогда
		ТекущаяСтруктура.Вставить("Начислено", 0);
		ТекущаяСтруктура.Вставить("Оплачено", 0);
		ТекущаяСтруктура.Вставить("Сальдо", 0);
	Иначе
		ТекущаяСтруктура.Вставить("Начислено", СтрокаУслуги.Начислено);
		ТекущаяСтруктура.Вставить("Оплачено",  СтрокаУслуги.Оплачено);
		ТекущаяСтруктура.Вставить("Сальдо",    СтрокаУслуги.КонечноеСальдо);
	КонецЕсли;
	
	СтрокаУслугДляСайта.Ресурс    = НазваниеУслугиДляСайта;
	СтрокаУслугДляСайта.Начислено = ТекущаяСтруктура.Начислено;
	СтрокаУслугДляСайта.Оплачено  = ТекущаяСтруктура.Оплачено;
	СтрокаУслугДляСайта.Сальдо    = ТекущаяСтруктура.Сальдо;
	
КонецПроцедуры // ЗаполнитьСтруктуруНачислений()

&НаСервере
// Подготавливает таблицу со сведениями по помещениям.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями по помещениям.
//
Функция ПолучитьТаблицуРазмеровПлаты()
	
	СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(Объект.Здание);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяЖилым,
	|	УПЖКХ_Помещения.Владелец.Наименование КАК АдресЗдания,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_Помещения.Код) КАК НомерПомещения,
	|	УПЖКХ_Помещения.Суффикс КАК СуффиксПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Ссылка В(&СписокПомещений)";
	Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("АдресПомещения", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.АдресПомещения = Строка.АдресЗдания + ", кв." + Строка.НомерПомещения + ?(ПустаяСтрока(Строка.СуффиксПомещения), "", "/" + Строка.СуффиксПомещения);
	КонецЦикла;
	
	Таблица.Колонки.Добавить("ГВС", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ХВС", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("Водоотведение", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("Электроснабжение", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("Газоснабжение", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("Отопление", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("Услуги", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуРазмеровПлаты()

&НаСервере
// Формирует таблицу со сведениями о начислениях по помещениям.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о начислениях.
//
Функция ПолучитьТаблицуНачисленийПоПомещениям()
	
	Если СписокЛСЗдания.Количество() = 0 Тогда
		СписокЛСЗдания = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛицевыхСчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммунальныеУслуги.КоммунальнаяУслуга,
	|	КоммунальныеУслуги.ВидУслуги
	|ПОМЕСТИТЬ втКоммунальныеУслуги
	|ИЗ
	|	&КоммунальныеУслуги КАК КоммунальныеУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес КАК Помещение,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплачено,
	|	втКоммунальныеУслуги.КоммунальнаяУслуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК УПЖКХ_НачисленияОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоммунальныеУслуги КАК втКоммунальныеУслуги
	|		ПО УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги = втКоммунальныеУслуги.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоммунальныеУслуги.КоммунальнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес КАК Помещение,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК КонечноеСальдо,
	|	втКоммунальныеУслуги.КоммунальнаяУслуга
	|ПОМЕСТИТЬ втКонечноеСальдо
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втКоммунальныеУслуги.ВидУслуги
	|					ИЗ
	|						втКоммунальныеУслуги КАК втКоммунальныеУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоммунальныеУслуги КАК втКоммунальныеУслуги
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги = втКоммунальныеУслуги.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоммунальныеУслуги.КоммунальнаяУслуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКонечноеСальдо.Помещение, втНачисления.Помещение) КАК Помещение,
	|	ЕСТЬNULL(втКонечноеСальдо.КоммунальнаяУслуга, втНачисления.КоммунальнаяУслуга) КАК КоммунальнаяУслуга,
	|	СУММА(ЕСТЬNULL(втНачисления.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачисления.Оплачено, 0)) КАК Оплачено,
	|	СУММА(ЕСТЬNULL(втНачисления.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(втКонечноеСальдо.КонечноеСальдо, 0)) КАК КонечноеСальдо
	|ПОМЕСТИТЬ втНачисленияСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКонечноеСальдо КАК втКонечноеСальдо
	|		ПО втНачисления.Помещение = втКонечноеСальдо.Помещение
	|			И втНачисления.КоммунальнаяУслуга = втКонечноеСальдо.КоммунальнаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втКонечноеСальдо.Помещение, втНачисления.Помещение),
	|	ЕСТЬNULL(втКонечноеСальдо.КоммунальнаяУслуга, втНачисления.КоммунальнаяУслуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.Помещение,
	|	ЕСТЬNULL(втНачисленияСальдо.КоммунальнаяУслуга, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыКоммунальныхУслуг.ПустаяСсылка)) КАК КоммунальнаяУслуга,
	|	СУММА(ЕСТЬNULL(втНачисленияСальдо.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачисленияСальдо.Оплачено, 0)) КАК Оплачено,
	|	СУММА(ЕСТЬNULL(втНачисленияСальдо.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(втНачисленияСальдо.КонечноеСальдо, 0)) КАК КонечноеСальдо
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияСальдо КАК втНачисленияСальдо
	|		ПО втЛицевыеСчета.Помещение = втНачисленияСальдо.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.Помещение,
	|	ЕСТЬNULL(втНачисленияСальдо.КоммунальнаяУслуга, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыКоммунальныхУслуг.ПустаяСсылка))";
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛСЗдания);
	Запрос.УстановитьПараметр("КоммунальныеУслуги",  НастройкиЭП.КоммунальныеУслуги);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНачисленийПоПомещениям()

&НаСервере
// Заполняет сведения о поставленных ресурсах.
//
Процедура ЗаполнитьСведенияОПоставленныхРесурсах()
	
	ТаблицаРесурсов                 = НастройкиЭП.КоммунальныеРесурсы;
	ТаблицаПоставленныхРесурсовПоПУ = ПолучитьТаблицуПоставленныхРесурсовПоПУ(ТаблицаРесурсов);
	ТаблицаНормПотребления          = ПолучитьТаблицуНормПотребления(ТаблицаРесурсов, ТаблицаПоставленныхРесурсовПоПУ.ВыгрузитьКолонку("Ресурс"));
	ТаблицаПоставленныхРесурсов     = ПолучитьТаблицуПоставленныхРесурсов(ТаблицаПоставленныхРесурсовПоПУ, ТаблицаНормПотребления);
	
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПоставленныхРесурсов, Перечисления.УПЖКХ_ВидыРесурсов.ТепловаяЭнергия, "ОказаниеТепловойЭнергии", "Ресурс");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПоставленныхРесурсов, Перечисления.УПЖКХ_ВидыРесурсов.ХолоднаяВода, "ОказаниеХВС", "Ресурс");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПоставленныхРесурсов, Перечисления.УПЖКХ_ВидыРесурсов.ГорячаяВода, "ОказаниеГВС", "Ресурс");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПоставленныхРесурсов, Перечисления.УПЖКХ_ВидыРесурсов.Газ, "ОказаниеГаза", "Ресурс");
	ВставитьСведенияОбОбъемеВСтруктуру(ТаблицаПоставленныхРесурсов, Перечисления.УПЖКХ_ВидыРесурсов.ЭлектрическаяЭнергия, "ОказаниеЭлектроснабжения", "Ресурс");
	
	СтруктураДанных.Вставить("СведенияОбОбъемахОказанияРесурсов", ТаблицаПоставленныхРесурсов);
	
КонецПроцедуры // ЗаполнитьСведенияОПоставленныхРесурсов()

&НаСервере
// Формирует таблицу с начислениями по зданию в разрезе определенных услуг.
//
// Параметры:
//  ТаблицаРесурсов - ТаблицаЗначения - таблица с услугами, по которым надо определить начисления.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с начислениями.
//
Функция ПолучитьТаблицуНачисленийПоЗданию(ТаблицаРесурсов)
	
	Если СписокЛСЗдания.Количество() = 0 Тогда
		СписокЛСЗдания = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоммунальныеУслуги.ВидУслуги,
	|	КоммунальныеУслуги.Ресурс
	|ПОМЕСТИТЬ втКоммунальныеУслуги
	|ИЗ
	|	&КоммунальныеРесурсы КАК КоммунальныеУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоммунальныеУслуги.Ресурс,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплачено
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК УПЖКХ_НачисленияОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоммунальныеУслуги КАК втКоммунальныеУслуги
	|		ПО УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги = втКоммунальныеУслуги.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоммунальныеУслуги.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоммунальныеУслуги.Ресурс,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК КонечноеСальдо
	|ПОМЕСТИТЬ втКонечноеСальдо
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втКоммунальныеУслуги.ВидУслуги
	|					ИЗ
	|						втКоммунальныеУслуги КАК втКоммунальныеУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоммунальныеУслуги КАК втКоммунальныеУслуги
	|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги = втКоммунальныеУслуги.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоммунальныеУслуги.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКонечноеСальдо.Ресурс, втНачисления.Ресурс) КАК Ресурс,
	|	СУММА(ЕСТЬNULL(втНачисления.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачисления.Оплачено, 0)) КАК Оплачено,
	|	СУММА(ЕСТЬNULL(втКонечноеСальдо.КонечноеСальдо, 0)) КАК КонечноеСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКонечноеСальдо КАК втКонечноеСальдо
	|		ПО втНачисления.Ресурс = втКонечноеСальдо.Ресурс
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втКонечноеСальдо.Ресурс, втНачисления.Ресурс)";
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛСЗдания);
	Запрос.УстановитьПараметр("КоммунальныеРесурсы", ТаблицаРесурсов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНачисленийПоЗданию()

&НаСервере
// Формирует таблицу со сведениями об объемах поставленных ресурсов по текущему зданию.
//
// Возвращаемое значение:
//  ТаблицаЗначения - таблица по сведениями об обхъемах.
//
Функция ПолучитьТаблицуПоставленныхРесурсовПоПУ(ТаблицаРесурсов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРесурсов.Ресурс,
	|	ТаблицаРесурсов.ВидУслуги
	|ПОМЕСТИТЬ втКоммунальныеРесурсы
	|ИЗ
	|	&ТаблицаРесурсов КАК ТаблицаРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И КВП_Услуги.ВидУслуги В
	|			(ВЫБРАТЬ
	|				втКоммунальныеРесурсы.ВидУслуги
	|			ИЗ
	|				втКоммунальныеРесурсы КАК втКоммунальныеРесурсы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Счетчики.Ссылка КАК Счетчик
	|ПОМЕСТИТЬ втВсеСчетчики
	|ИЗ
	|	Справочник.КВП_Счетчики КАК КВП_Счетчики
	|ГДЕ
	|	КВП_Счетчики.ВидУслуги В
	|			(ВЫБРАТЬ
	|				втУслуги.Услуга
	|			ИЗ
	|				втУслуги КАК втУслуги)
	|	И НЕ КВП_Счетчики.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ втСчетчикиСрез
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&НачалоМесяца,
	|			Объект = &Здание
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						втВсеСчетчики.Счетчик
	|					ИЗ
	|						втВсеСчетчики КАК втВсеСчетчики)
	|			И ДатаИзменения <= &НачалоМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ПОМЕСТИТЬ втСчетчикиОбороты
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И КВП_ЗакрепленныеСчетчики.Объект = &Здание
	|	И КВП_ЗакрепленныеСчетчики.Счетчик В
	|			(ВЫБРАТЬ
	|				втВсеСчетчики.Счетчик
	|			ИЗ
	|				втВсеСчетчики КАК втВсеСчетчики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСчетчикиОбороты.Счетчик, втСчетчикиСрез.Счетчик) КАК Счетчик
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	втСчетчикиСрез КАК втСчетчикиСрез
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСчетчикиОбороты КАК втСчетчикиОбороты
	|		ПО втСчетчикиСрез.Счетчик = втСчетчикиОбороты.Счетчик
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втСчетчикиОбороты.Счетчик, втСчетчикиСрез.Счетчик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	СУММА(УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеОборот) КАК Расход
	|ПОМЕСТИТЬ втРасход
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Объект = &Здание
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						втСчетчики.Счетчик
	|					ИЗ
	|						втСчетчики КАК втСчетчики)) КАК УПЖКХ_РасчетПриборовУчетаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоммунальныеРесурсы.Ресурс,
	|	СУММА(втРасход.Расход) КАК Расход
	|ИЗ
	|	втРасход КАК втРасход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоммунальныеРесурсы КАК втКоммунальныеРесурсы
	|		ПО втРасход.ВидУслуги = втКоммунальныеРесурсы.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоммунальныеРесурсы.Ресурс";
	Запрос.УстановитьПараметр("НачалоМесяца",    НачалоМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("Здание",          Объект.Здание);
	Запрос.УстановитьПараметр("ТаблицаРесурсов", НастройкиЭП.КоммунальныеРесурсы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПоставленныхРесурсов()

&НаСервере
// Формирует таблицу со сведениями о размерах нормативов для текущего здания.
//
// Параметры:
//  ТаблицаРесурсов - ТаблицаЗначений - таблица с услугами, по которым надо найти нормативы
//  МассивРесурсовИскл - Массив - массив с услугами, по которым не надо искать нормативы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с размерами нормативов.
//
Функция ПолучитьТаблицуНормПотребления(ТаблицаРесурсов, МассивРесурсовИскл)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРесурсов.ВидУслуги,
	|	ТаблицаРесурсов.Ресурс
	|ПОМЕСТИТЬ втРесурсы
	|ИЗ
	|	&ТаблицаРесурсов КАК ТаблицаРесурсов
	|ГДЕ
	|	НЕ ТаблицаРесурсов.Ресурс В (&МассивРесурсовИскл)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ВидУслуги В
	|			(ВЫБРАТЬ
	|				втРесурсы.ВидУслуги
	|			ИЗ
	|				втРесурсы КАК втРесурсы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормы
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&КонецМесяца,
	|			Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.Услуга
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И ЛицевойСчет = &Здание) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРесурсы.Ресурс,
	|	втНормы.НормаПотребления
	|ИЗ
	|	втРесурсы КАК втРесурсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНормы КАК втНормы
	|		ПО втРесурсы.ВидУслуги = втНормы.ВидУслуги";
	Запрос.УстановитьПараметр("КонецМесяца",        КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("ТаблицаРесурсов",    ТаблицаРесурсов);
	Запрос.УстановитьПараметр("МассивРесурсовИскл", МассивРесурсовИскл);
	Запрос.УстановитьПараметр("Здание",             Объект.Здание);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.РазмерНормы = ПолучитьРазмерНормыПотребления(Объект.Здание, КонецМесяца(Объект.ПериодСбораДанных), Строка.НормаПотребления, Объект.Организация);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуНормПотребления()

&НаСервере
// Формирует итоговую таблицу с объемами поставленных ресурсов в здание.
//
// Параметры:
//  ТаблицаПоставленныхРесурсовПоПУ - ТаблицаЗначений - таблица с расходом по ПУ
//  ТаблицаНормПотребления - ТаблицаЗначений - таблица с размерами норм.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуПоставленныхРесурсов(ТаблицаПоставленныхРесурсовПоПУ, ТаблицаНормПотребления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоставленныхРесурсовПоПУ.Ресурс,
	|	ТаблицаПоставленныхРесурсовПоПУ.Расход
	|ПОМЕСТИТЬ втПоПУ
	|ИЗ
	|	&ТаблицаПоставленныхРесурсовПоПУ КАК ТаблицаПоставленныхРесурсовПоПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНормПотребления.Ресурс,
	|	ТаблицаНормПотребления.РазмерНормы
	|ПОМЕСТИТЬ втПоНорме
	|ИЗ
	|	&ТаблицаНормПотребления КАК ТаблицаНормПотребления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПоНорме.Ресурс, втПоПУ.Ресурс) КАК Ресурс,
	|	ЕСТЬNULL(втПоНорме.РазмерНормы, втПоПУ.Расход) КАК Количество
	|ИЗ
	|	втПоПУ КАК втПоПУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПоНорме КАК втПоНорме
	|		ПО втПоПУ.Ресурс = втПоНорме.Ресурс";
	Запрос.УстановитьПараметр("ТаблицаПоставленныхРесурсовПоПУ", ТаблицаПоставленныхРесурсовПоПУ);
	Запрос.УстановитьПараметр("ТаблицаНормПотребления",          ТаблицаНормПотребления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПоставленныхРесурсов()

&НаСервере
// Заполняет ТЧ со сведениями о собственниках жилого дома.
//
Процедура ЗаполнитьСведенияОСобственникахЖилогоДома()
	
	Таблица = ПолучитьСведенияОСобственниках();
	
	Для Каждого Строка ИЗ Таблица Цикл
		НоваяСтрока = Объект.СобственникиЖилогоДома.Добавить();
		НоваяСтрока.Собственник          = Строка.СобственникНаименование;
		НоваяСтрока.КонтактыСобственника = Строка.Телефон;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОСобственникахЖилогоДома()

&НаСервере
// Формирует таблицу со сведениями о собственниках по текущему жилому дому.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьСведенияОСобственниках()
	
	СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(Объект.Здание);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК СобственникСсылка,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.Наименование
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&КонецМесяца, Помещение В (&СписокПомещений)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Собственник,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Телефон
	|ПОМЕСТИТЬ втТелефоныКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				втСобственники.СобственникСсылка
	|			ИЗ
	|				втСобственники КАК втСобственники)
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Собственник,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Телефон
	|ПОМЕСТИТЬ втТелефоныФизЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				втСобственники.СобственникСсылка
	|			ИЗ
	|				втСобственники КАК втСобственники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТелефоныКонтрагентов.Собственник,
	|	втТелефоныКонтрагентов.Телефон
	|ПОМЕСТИТЬ втВсеТелефоны
	|ИЗ
	|	втТелефоныКонтрагентов КАК втТелефоныКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТелефоныФизЛиц.Собственник,
	|	втТелефоныФизЛиц.Телефон
	|ИЗ
	|	втТелефоныФизЛиц КАК втТелефоныФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственники.СобственникНаименование,
	|	ЕСТЬNULL(втВсеТелефоны.Телефон, """") КАК Телефон
	|ИЗ
	|	втСобственники КАК втСобственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеТелефоны КАК втВсеТелефоны
	|		ПО втСобственники.СобственникСсылка = втВсеТелефоны.Собственник";
	
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСведенияОСобственниках()

&НаСервере
// Получает количество зарегистрированных жильцов в текущем здании.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьКоличествоЗарегистрированныхВЖиломДоме()
	
	СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект.Здание, НачалоМесяца(Объект.ПериодСбораДанных));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ КоличествоИзЛС
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&СписокЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоЗарегИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В (&СписокЛС)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|				ТОГДА ЕСТЬNULL(КоличествоИзЛС.КоличествоЗарегистрированных, 0)
	|			ИНАЧЕ ЕСТЬNULL(КоличествоЗарегИзСведений.Количество, 0)
	|		КОНЕЦ) КАК КолвоЗарегистрированных
	|ИЗ
	|	Константы КАК Константы,
	|	КоличествоИзЛС КАК КоличествоИзЛС,
	|	КоличествоЗарегИзСведений КАК КоличествоЗарегИзСведений";
	Запрос.УстановитьПараметр("Дата",     КонецМесяца(Объект.ПериодСбораДанных));
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КолвоЗарегистрированных;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоЗарегистрированных()

&НаСервереБезКонтекста
Функция ПолучитьНастройкуЭП(Организация)
	
	Возврат РегистрыСведений.УПЖКХ_НастройкиЭлектронныхПаспортов.ПолучитьНастройкиЭлектронныхПаспортов(Организация);
	
КонецФункции // ПолучитьНастройкуЭП()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Управляет видимостью и доступностью элементов формы.
//
Процедура УправлениеФормой()
	
	Если Объект.ПаспортОтправленНаСайт Тогда
		Элементы.ДекорацияСтатусОтправкиПаспорта.Заголовок = "Электронный паспорт отправлен на сайт.";
	Иначе
		Элементы.ДекорацияСтатусОтправкиПаспорта.Заголовок = "Электронный паспорт не отправлен на сайт.";
	КонецЕсли;
	
	ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(, Объект.НеобходимоПровестиАвтоматическоеЗаполнениеДокумента);
	
КонецПроцедуры //УправлениеФормой()

&НаСервере
// Проводит начальное заполнение формы элементами.
//
Процедура ПровестиНачальноеЗаполнениеФормы(ЭтоИзменениеВидаЗдания = Ложь)
	
	ПолучитьТаблицуПоказателейРаскрытияНаСервере();
	
	ПолучитьТаблицыСФиксированнымиДанными();
	
	ЗаполнитьФормуЭлементами();
	
	ЗаполнитьТаблицыФиксированнымиДанными();
	
	ПодготовитьСтатичныеПоказатели(ЭтоИзменениеВидаЗдания);
	
КонецПроцедуры // ПровестиНачальноеЗаполнениеФормы()

&НаСервере
// Подготавливает таблицу со статичными показателями.
//
Процедура ПодготовитьСтатичныеПоказатели(ЭтоИзменениеВидаЗдания)
	
	Если (Объект.Ссылка.Пустая() И Не ЭтоКопирование) ИЛИ ЭтоИзменениеВидаЗдания Тогда
		
		Объект.СтатичныеПоказатели.Очистить();
		
		Для Каждого СтрокаЭлемента ИЗ ТаблицаПоказателейРаскрытия Цикл
			Если НЕ (СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" ИЛИ СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" 
				ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ"  ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "<") Тогда
				НоваяСтрока = Объект.СтатичныеПоказатели.Добавить();
				НоваяСтрока.ПоказательРаскрытия = СтрокаЭлемента.НазваниеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыЗаполнены = Ложь;
	Иначе
		Для Каждого СтрокаСтатичныхПоказателей ИЗ Объект.СтатичныеПоказатели Цикл
			Если Найти(СтрокаСтатичныхПоказателей.ПоказательРаскрытия, "Отчет_") = 0 Тогда
				ЭтаФорма[СтрокаСтатичныхПоказателей.ПоказательРаскрытия] = СтрокаСтатичныхПоказателей.ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыЗаполнены = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтатичныеПоказатели()

&НаСервере
// Формирует таблицу соответствия разделов учета и видов начисления.
//
// Возвращаемое значений:
//  ТаблицаЗначений.
//
Процедура ПолучитьТаблицуПоказателейРаскрытияНаСервере()
	
	ТаблицаПоказателейРаскрытия.Загрузить(УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицуПоказателейРаскрытияИзМакета(Объект.ВидЗдания));
	
КонецПроцедуры // ПолучитьТаблицуРазделовИВидов()

&НаСервере
// Заполняет реквизиты формы необходимыми данными.
//
Процедура ЗаполнитьДанныеНаФорме()
	
	ОбработатьНастройкиЭП();
	
	СтруктураПолей = Новый Структура;
	
	Для Каждого СтрокаПоказателей ИЗ ТаблицаПоказателейРаскрытия Цикл
		Если НЕ ПустаяСтрока(СтрокаПоказателей.ВыполняемыйКод) Тогда
			Если Найти(СтрокаПоказателей.ВыполняемыйКод, "Процедура") Тогда
				ВыполняемыйКод = СРЕД(СтрокаПоказателей.ВыполняемыйКод, 11);
				Выполнить(ВыполняемыйКод);
			ИначеЕсли НЕ Найти(СтрокаПоказателей.НазваниеПоказателя, "<") Тогда
				Выполнить("СтруктураПолей.Вставить(СтрокаПоказателей.НазваниеПоказателя," + СтрокаПоказателей.ВыполняемыйКод + ");");
			КонецЕсли;
		Иначе
			СтруктураПолей.Вставить(СтрокаПоказателей.НазваниеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьРеквизитыФормыСТаблицамиЗначений();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПолей);
	
КонецПроцедуры // ЗаполнитьДанныеНаФорме()

&НаСервере
// Реквизиты формы, содержащие элементы с типом "ТаблицаЗначений" помещает в хранилище значения
// для передачи на клиент.
//
Процедура ОбработатьРеквизитыФормыСТаблицамиЗначений()
	
	НастройкиЭП     = Новый ХранилищеЗначения(НастройкиЭП);
	СтруктураДанных = Новый ХранилищеЗначения(СтруктураДанных);
	
КонецПроцедуры // ОбработатьРеквизитыФормыСТаблицамиЗначений()

&НаСервере
// Достает табличные данные настроек формирования ЭП из хранилища значений.
//
Процедура ОбработатьНастройкиЭП()
	
	Для Каждого ЭлементНастройки Из НастройкиЭП Цикл
		Если ТипЗнч(ЭлементНастройки.Значение) = Тип("ХранилищеЗначения") Тогда
			НастройкиЭП.Вставить(ЭлементНастройки.Ключ, ЭлементНастройки.Значение.Получить());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьНастройкиЭП()

&НаСервере
// Определяет количество подгрупп, находящихся в группе.
//
Функция КоличествоПодгруппВГруппеМеньшеОдной(врТаблицаПоказателейРасчета, СчЭлементов)
	
	КолВоПодгрупп = 0;
	Сч = СчЭлементов + 1;
	КолвоЭлеметновТаблицы = врТаблицаПоказателейРасчета.Количество() - 1;
	
	Пока НЕ Сч > КолвоЭлеметновТаблицы И НЕ врТаблицаПоказателейРасчета[Сч].НазваниеПоказателя = "ГРУППА" Цикл
		Если врТаблицаПоказателейРасчета[Сч].НазваниеПоказателя = "ПОДГРУППА" Тогда
			КолВоПодгрупп = КолВоПодгрупп + 1;
		КонецЕсли;
		Если КолВоПодгрупп > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Добавляет на форму документа необходимые элементы управления.
//
Процедура ЗаполнитьФормуЭлементами()
	
	ПредыдущийСписокПутейРеквизитов = СписокПутейРеквизитов.ВыгрузитьЗначения();
	СписокПутейРеквизитов.Очистить();
	
	МассивРеквизитов = Новый Массив;
	
	ТаблицаЭлементов  = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("ЭлементФормы");
	ТаблицаЭлементов.Колонки.Добавить("ПутьКДанным");
	
	врТаблицаПоказателейРасчета = ТаблицаПоказателейРаскрытия.Выгрузить();
	
	СчЭлементов = Элементы.ГруппаРазделов.ПодчиненныеЭлементы.Количество();
	Сч = 0;
	Пока НЕ Сч > СчЭлементов - 1 Цикл
		Элементы.Удалить(Элементы.ГруппаРазделов.ПодчиненныеЭлементы[0]);
		Сч = Сч + 1;
	КонецЦикла;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ТИП("ДокументОбъект.УПЖКХ_ПодготовкаЭлектронныхПаспортов"));
	ТабличныеЧастиДокумента = ДокументОбъект.Метаданные().ТабличныеЧасти;
	
	СчЭлементов = 0;
	
	Для Каждого СтрокаЭлемента ИЗ врТаблицаПоказателейРасчета Цикл
		
		Если СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" Тогда
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(ТРег(СтрокаЭлемента.ПредставлениеПоказателя), " ");
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, "-");
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, ".");
			
			НоваяГруппаФормы = Элементы.Добавить(НаименованиеЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаРазделов);
			НоваяГруппаФормы.Вид       = ВидГруппыФормы.Страница;
			НоваяГруппаФормы.Заголовок = СтрокаЭлемента.ПредставлениеПоказателя;
			
			ОднаПодгруппа = КоличествоПодгруппВГруппеМеньшеОдной(врТаблицаПоказателейРасчета, СчЭлементов);
			
			Если НЕ ОднаПодгруппа тогда
				НоваяПодГруппаФормы = Элементы.Добавить(НаименованиеЭлемента + "Вложенная", Тип("ГруппаФормы"), НоваяГруппаФормы);
				НоваяПодГруппаФормы.Вид                      = ВидГруппыФормы.Страницы;
				НоваяПодГруппаФормы.ОтображениеСтраниц       = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
				НоваяПодГруппаФормы.РастягиватьПоВертикали   = Истина;
				НоваяПодГруппаФормы.РастягиватьПоГоризонтали = Истина;
			КонецЕсли;
			
		ИначеЕсли СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" Тогда
			
			Если НЕ ОднаПодгруппа тогда
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(ТРег(СтрокаЭлемента.ПредставлениеПоказателя), " ");
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, "-");
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, ".");
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, ",");
			
				НоваяПодПодГруппаФормы = Элементы.Добавить(НаименованиеЭлемента, Тип("ГруппаФормы"), НоваяПодГруппаФормы);
				НоваяПодПодГруппаФормы.Вид                      = ВидГруппыФормы.Страница;
				НоваяПодПодГруппаФормы.Заголовок                = СтрокаЭлемента.ПредставлениеПоказателя;
				НоваяПодПодГруппаФормы.РастягиватьПоВертикали   = Истина;
				НоваяПодПодГруппаФормы.РастягиватьПоГоризонтали = Истина;
			КонецЕсли;
			
		ИначеЕсли ЛЕВ(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ" Тогда
			
			ИмяТаблицы = УдалениеПодстрокиВИсходнойСтроке(СтрокаЭлемента.НазваниеПоказателя, "ТЧ_");
			
			ТаблицаЗначенийТЧ = ТабличныеЧастиДокумента.Найти(ИмяТаблицы);
			ЭтоТаблицаСФиксированнымиДанными = ТекущаяТаблицаЯвляетсяТаблицейСФиксированнымиПоказателями(ИмяТаблицы);
			
			НовыйЭлементФормы = Элементы.Добавить(СтрокаЭлемента.НазваниеПоказателя, Тип("ТаблицаФормы"), ?(ОднаПодгруппа, НоваяГруппаФормы, НоваяПодПодГруппаФормы));
			НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
			НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлементФормы;
			НоваяСтрокаЭлемента.ПутьКДанным  = "Объект." + ИмяТаблицы;
			
			Если ЭтоТаблицаСФиксированнымиДанными Тогда
				НовыйЭлементФормы.ИзменятьПорядокСтрок = Ложь;
				НовыйЭлементФормы.ИзменятьСоставСтрок  = Ложь;
			КонецЕсли;
			
			Для Каждого ТекРеквизит Из ТаблицаЗначенийТЧ.Реквизиты Цикл
				
				Если ИмяТаблицы = "СведенияОЦенахНаКоммунальныеУслуги" И (ТекРеквизит.Имя = "ПоНормативу" ИЛИ ТекРеквизит.Имя = "КоммунальнаяУслуга") Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйЭлемент = Элементы.Добавить("ТЗ_" + СтрокаЭлемента.НазваниеПоказателя + "_" + ТекРеквизит.Имя, Тип("ПолеФормы"), НовыйЭлементФормы); 
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				
				НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
				НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлемент;
				НоваяСтрокаЭлемента.ПутьКДанным  = "Объект." + ИмяТаблицы + "." + ТекРеквизит.Имя;
				
				Если ЭтоФиксированныйРеквизитТаблицы(ИмяТаблицы, ТекРеквизит.Имя) Или (ИмяТаблицы = "СведенияОЦенахНаКоммунальныеУслуги" И ТекРеквизит.Имя = "Наименование") Тогда
					НовыйЭлемент.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЦикла;
				
		ИначеЕсли ЛЕВ(СтрокаЭлемента.НазваниеПоказателя, 6) = "Отчет_" Тогда
			
			НаименованиеЭлемента = СтрокаЭлемента.НазваниеПоказателя;
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, "Отчет_");
			ВыполняемоеДействие  = НаименованиеЭлемента;
			
			НаименованиеЭлемента = НаименованиеЭлемента + врТаблицаПоказателейРасчета.Индекс(СтрокаЭлемента);
			
			НовыйЭлементФормы = Элементы.Добавить(НаименованиеЭлемента, Тип("ДекорацияФормы"), ?(ОднаПодгруппа, НоваяГруппаФормы, НоваяПодПодГруппаФормы));
			НовыйЭлементФормы.Заголовок   = СтрокаЭлемента.ПредставлениеПоказателя;
			НовыйЭлементФормы.Гиперссылка = Истина;
			
			НовыйЭлементФормы.УстановитьДействие("Нажатие", ВыполняемоеДействие);
			
		Иначе
			
			НовыйРеквизит = Новый РеквизитФормы(СтрокаЭлемента.НазваниеПоказателя, СтрокаЭлемента.ТипПоказателя, ,СтрокаЭлемента.ПредставлениеПоказателя);
			МассивРеквизитов.Добавить(НовыйРеквизит);
			
			НовыйЭлементФормы = Элементы.Добавить(СтрокаЭлемента.НазваниеПоказателя, Тип("ПолеФормы"), ?(ОднаПодгруппа, НоваяГруппаФормы, НоваяПодПодГруппаФормы));
			НовыйЭлементФормы.Вид                      = ВидПоляФормы.ПолеВвода;
			НовыйЭлементФормы.РастягиватьПоГоризонтали = Истина;
			НовыйЭлементФормы.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
			
			НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
			НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлементФормы;
			НоваяСтрокаЭлемента.ПутьКДанным  = СтрокаЭлемента.НазваниеПоказателя;
			
			СписокПутейРеквизитов.Добавить(СтрокаЭлемента.НазваниеПоказателя);
			
		КонецЕсли;
		
		СчЭлементов = СчЭлементов + 1;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, ПредыдущийСписокПутейРеквизитов);
	
	Для Каждого СтрокаЭлемента ИЗ ТаблицаЭлементов Цикл
		СтрокаЭлемента.ЭлементФормы.ПутьКДанным = СтрокаЭлемента.ПутьКДанным;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Определяет, является ли текущая таблица таблицей с фиксированным набором строк.
//
Функция ТекущаяТаблицаЯвляетсяТаблицейСФиксированнымиПоказателями(ИмяТаблицы)
	
	Строки = ТаблицыСФиксированнымиПоказателями.НайтиСтроки(Новый Структура("НазваниеТаблицы", ИмяТаблицы));
	
	Возврат ?(Строки.Количество() = 0, Ложь, Истина);
	
КонецФункции // ТекущаяТаблицаЯвляетсяТаблицейСФиксированнымиПоказателями()

&НаСервере
// Определяет, является ли текущая колонка таблицы колонкой с фиксированными значениями.
//
Функция ЭтоФиксированныйРеквизитТаблицы(ИмяТаблицы, ИмяРеквизита)
	
	Строки = ТаблицыСФиксированнымиПоказателями.НайтиСтроки(Новый Структура("НазваниеТаблицы, ФиксированныйПоказатель", ИмяТаблицы, ИмяРеквизита));
	
	Возврат ?(Строки.Количество() = 0, Ложь, Истина);
	
КонецФункции // ЭтоФиксированныйРеквизитТаблицы()

&НаСервере
// Заполняет табицы данными, которые должны присутствовать в таблицах всегда.
//
Процедура ЗаполнитьТаблицыФиксированнымиДанными()
	
	Для Каждого Строка Из ТаблицыСФиксированнымиПоказателями Цикл
		
		Если Элементы.Найти("ТЧ_" + Строка.НазваниеТаблицы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОбъекта = Объект[Строка.НазваниеТаблицы];
		
		Если НЕ ТаблицаОбъекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаЗначений = ПолучитьВыборкуЗначенийПеречисления(Строка.ТипФиксированногоПоказателя);
		
		Пока ВыборкаЗначений.Следующий() Цикл
			Если Строка.НазваниеТаблицы = "СведенияОЦенахНаКоммунальныеУслуги" Тогда
				НоваяСтрока = ТаблицаОбъекта.Добавить();
				НоваяСтрока[Строка.ФиксированныйПоказатель] = ВыборкаЗначений.Значение;
				НоваяСтрока.Наименование = Строка(НоваяСтрока.КоммунальнаяУслуга) + " (по нормативу)";
				НоваяСтрока.ПоНормативу = Истина;
				
				НоваяСтрока = Объект[Строка.НазваниеТаблицы].Добавить();
				НоваяСтрока[Строка.ФиксированныйПоказатель] = ВыборкаЗначений.Значение;
				НоваяСтрока.Наименование = Строка(НоваяСтрока.КоммунальнаяУслуга) + " (по счетчику)";
			Иначе
				НоваяСтрока = Объект[Строка.НазваниеТаблицы].Добавить();
				НоваяСтрока[Строка.ФиксированныйПоказатель] = ВыборкаЗначений.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицыФиксированнымиДанными()

&НаСервере
// Формирует таблицу с названиями таблиц, в которых должны быть фиксированные данные.
//
Процедура ПолучитьТаблицыСФиксированнымиДанными()
	
	Если ТаблицыСФиксированнымиПоказателями.Количество() = 0 Тогда
		ТаблицыСФиксированнымиПоказателями.Загрузить(УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицыСфиксированнымиПоказателямиИзМакета());
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицыСФиксированнымиДанными()

&НаСервереБезКонтекста
// Формирует выборку всех значений перечисления.
//
// Возвращаемое значение:
//  Выборка.
//
Функция ПолучитьВыборкуЗначенийПеречисления(НазваниеПеречисления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Перечисление.Ссылка КАК Значение
	|ИЗ
	|	" + НазваниеПеречисления + " КАК Перечисление";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуЗначенийПеречисления()

&НаСервереБезКонтекста
// Заменяет подстроку в исходной строке на пустую подстроку.
//
Функция УдалениеПодстрокиВИсходнойСтроке(ИсхСтрока, Подстрока)
	
	Возврат СтрЗаменить(ИсхСтрока, Подстрока, "");
	
КонецФункции // УдалениеПодстрокиВИсходнойСтроке()

&НаКлиенте
// Процедура-обработчик нажатия на гиперссылку "Отчет по помещениям".
//
Процедура ОткрытьОтчетПоПомещениям(Элемент)
	
	ОткрытьФорму("Отчет.КВП_ОтчетПоПомещениям.Форма.ФормаОтчета");
	
КонецПроцедуры // ОткрытьОтчетПоПомещениям

&НаКлиенте
// Очищает ТЧ и реквизиты формы документа.
//
Процедура ОчиститьДанныеВДокументе()
	
	Объект.СведенияОЛицахОказывающихУслуги.Очистить();
	Объект.РСО.Очистить();
	Объект.ЛицаОказывающиеКУ.Очистить();
	Объект.СведенияОЦенахНаУслугиПоСодержаниюИРемонту.Очистить();
	Объект.СведенияОЦенахНаКоммунальныеУслуги.Очистить();
	
	Объект.СобственникиЖилогоДома.Очистить();
	Объект.СведенияОЦенахНаКоммунальныеУслугиЖилойДом.Очистить();
	
	ОчиститьСтатичныеПоказатели();
	
	СтруктураДанных = Новый Структура;
	
	ОчиститьКэш();
	
КонецПроцедуры // ОчиститьДанныеВДокументе()

&НаКлиенте
// Очищает ТЧ документа со статичными показателями.
//
Процедура ОчиститьСтатичныеПоказатели()
	
	Объект.СтатичныеПоказатели.Очистить();
	Для Каждого СтрокаЭлемента ИЗ ТаблицаПоказателейРаскрытия Цикл
		Если НЕ (СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" ИЛИ СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" 
			ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ"  ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "<") Тогда
			НоваяСтрока = Объект.СтатичныеПоказатели.Добавить();
			НоваяСтрока.ПоказательРаскрытия = СтрокаЭлемента.НазваниеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	МассивРеквизитов = Новый Массив;
	ЭлементыФормы    = ЭтаФорма.Элементы;
	
	Для Каждого Показатель ИЗ ТаблицаПоказателейРаскрытия Цикл
		ЭлементФормы = ЭлементыФормы.Найти(Показатель.НазваниеПоказателя);
		
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Показатель.ТипПоказателя.СодержитТип(Тип("Строка")) Тогда
			НулевоеЗначение = "";
		ИначеЕсли Показатель.ТипПоказателя.СодержитТип(Тип("Число")) Тогда
			НулевоеЗначение = 0;
		ИначеЕсли Показатель.ТипПоказателя.СодержитТип(Тип("Дата")) Тогда
			НулевоеЗначение = Дата('00010101');
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[Показатель.НазваниеПоказателя] = НулевоеЗначение;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьСтатичныеПоказатели()

&НаКлиенте
// Очищает значения реквизитов формы, которые играют роль кэша.
//
Процедура ОчиститьКэш()
	
	СтруктураПомещений     = Неопределено;
	СведенияОбОрганизации  = Неопределено;
	СтруктураЛицевыхСчетов = Неопределено;
	СтруктураДанных        = Новый Структура;
	СписокЛСЗдания.Очистить();
	ТаблицаТарифов.Очистить();
	
КонецПроцедуры // ОчиститьКэш()

&НаКлиенте
// Проверка заполнения начальных данных.
//
Функция ПроверкаЗаполненияРеквизитов()
	
	Отказ = Ложь;
	
	Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;
	
	Если Объект.Здание = ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано здание!", Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверкаЗаполненияРеквизитов()

&НаСервере
// Определяет необходимость создания записи в РС "Электронные паспорта для отправки на сайт".
//
Процедура ОбработатьИзменениеСтатусаПаспорта()
	
	Если СтатусПаспортаБылИзменен Тогда
		Если Объект.ПаспортЗаполнен Тогда
			УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьВРегистреЭПДляОтправки(ТекущаяДата(), Объект.Ссылка, Перечисления.УПЖКХ_СтатусыОтправкиЭлектронныхПаспортовНаСайт.ГотовКОтправке);
		ИначеЕсли СтатусПаспортаПриОткрытииДокумента Тогда
			УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьВРегистреЭПДляОтправки(ТекущаяДата(), Объект.Ссылка, Перечисления.УПЖКХ_СтатусыОтправкиЭлектронныхПаспортовНаСайт.ОтправкаОтменена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеСтатусаПаспорта()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоКопирование = (Не Параметры.ЗначениеКопирования = ПредопределенноеЗначение("Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПустаяСсылка"));
	
	Если Объект.Ссылка.Пустая() И Не ЭтоКопирование Тогда
		
		Объект.НеобходимоПровестиАвтоматическоеЗаполнениеДокумента = Истина;
		
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		СтруктураДанных = Новый Структура;
	Иначе
		Если ЭтоКопирование Тогда
			Объект.НеобходимоПровестиАвтоматическоеЗаполнениеДокумента = Истина;
			
			СтруктураДанных = Параметры.ЗначениеКопирования.СтруктураДанныхИзОтчетов;
		Иначе
			ДанныеФормы     = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_ПодготовкаЭлектронныхПаспортов"));
			СтруктураДанных = ДанныеФормы.СтруктураДанныхИзОтчетов;
		КонецЕсли;
	КонецЕсли;
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(Объект.ВидЗдания, Объект.Ссылка, ЭтаФорма);
	
	Если НЕ Объект.ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ПустаяСсылка") Тогда
		ПровестиНачальноеЗаполнениеФормы();
	КонецЕсли;
	
	СтатусПаспортаПриОткрытииДокумента = Объект.ПаспортЗаполнен;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Объект.Дата;
	
	Если Объект.ПериодСбораДанных = Дата('00010101') Тогда
		Объект.ПериодСбораДанных = КонецМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодСбораДанных", "Объект.ПериодСбораДанныхСтрокой");
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СтруктураДанныхИзОтчетов = СтруктураДанных;
	
	Для Каждого СтрокаТЧ ИЗ ТекущийОбъект.СтатичныеПоказатели Цикл
		Если Найти(СтрокаТЧ.ПоказательРаскрытия, "Отчет_") = 0 Тогда
			СтрокаТЧ.ЗначениеПоказателя = ЭтаФорма[СтрокаТЧ.ПоказательРаскрытия];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработатьИзменениеСтатусаПаспорта();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	
	мТекущаяДатаДокумента = Объект.Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" статуса документа.
//
Процедура ПаспортЗаполненПриИзменении(Элемент)
	
	СтатусПаспортаБылИзменен = Истина;
	
КонецПроцедуры // ПаспортЗаполненПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" вида операции документа.
//
Процедура ВидЗданияПриИзменении(Элемент)
	
	ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" вида операции документа.
//
Процедура ВидЗданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ПустаяСсылка") Тогда
		Объект.ВидЗдания = ВыбранноеЗначение;
		
		ПровестиНачальноеЗаполнениеФормы(Истина);
	Иначе
		Если ВыбранноеЗначение = Объект.ВидЗдания Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			
			// Проверять, заполнены ли здания не нужно,
			// так как изменения вида здания предполагает изменение структуры данных.
			ПредыдущийВыбранныйВидЗдания = Объект.ВидЗдания;
			
			ТекстВопроса = "При изменении вида здания введенные ранее данные будут очищены."
			+ Символы.ПС + "Продолжить?";
			ДопПараметры = Новый Структура("ТекстВопроса", ТекстВопроса);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОтветаНаВопросОСменеВидаЗдания", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидЗданияОбработкаВыбора()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ВидЗданияОбработкаВыбора()".
Процедура ОбработатьРезультатОтветаНаВопросОСменеВидаЗдания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВидЗдания = ПредыдущийВыбранныйВидЗдания;
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ВидЗдания = ПредыдущийВыбранныйВидЗдания Тогда
		ПровестиНачальноеЗаполнениеФормы(Истина);
		ТекущийВидЗдания = Объект.ВидЗдания;
		ОчиститьДанныеВДокументе();
		Объект.Здание = ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатОтветаНаВопросОСменеВидаЗдания()

&НаКлиенте
// Обработчик события "ПриИзменении" здания.
//
Процедура ЗданиеПриИзменении(Элемент)
	
	ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" здания.
//
Процедура ЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МногоквартирныеЗдания = ?(Объект.ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ЖилойДом"), Ложь, Истина);
	
	Форма = ПолучитьФорму("Справочник.КВП_Здания.ФормаВыбора", Новый Структура("ТекущаяСтрока, ОтображатьСписком", Объект.Здание, Истина), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "ЭтоГруппа", Ложь,
														 	ВидСравненияКомпоновкиДанных.Равно, , Истина);
										 
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Многоквартирное", МногоквартирныеЗдания,
										 					ВидСравненияКомпоновкиДанных.Равно, , Истина,
															РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
															
	Форма.Открыть();
	
КонецПроцедуры // ЗданиеНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" организации.
//
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Организация Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НЕ Объект.Организация.Пустая() Тогда
		Если ЭлементыЗаполнены Тогда
			ТекстВопроса = "При изменении организации введенные ранее данные будут очищены."
							+ Символы.ПС + "Продолжить?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВопросаПриИзмененииОрганизации", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Иначе
			ЗаполнитьФормуЭлементами();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик вопроса при изменении организации.
//
Процедура ОбработчикВопросаПриИзмененииОрганизации(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьФормуЭлементами();
		ЭлементыЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" здания.
//
Процедура ЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Здание Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НЕ Объект.Здание.Пустая() Тогда
		Если ЭлементыЗаполнены Тогда
			ПредыдущееВыбранноеЗдание = Объект.Здание;
			
			ТекстВопроса = "При выборе нового здания введенные ранее данные будут очищены."
							+ Символы.ПС + "Продолжить?";
			ДопПараметры = Новый Структура("ТекстВопроса", ТекстВопроса);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОтветаНаВопросОСменеЗдания", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗданиеОбработкаВыбора

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ЗданиеОбработкаВыбора()".
Процедура ОбработатьРезультатОтветаНаВопросОСменеЗдания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Здание = ПредыдущееВыбранноеЗдание;
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеВДокументе();
	ЭлементыЗаполнены = Ложь;
	
КонецПроцедуры // ОбработатьРезультатОтветаНаВопросОСменеЗдания

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "Период".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодСбораДанных", "Объект.ПериодСбораДанныхСтрокой", 
														Модифицированность);
	
КонецПроцедуры // ПериодПриИзменении()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля ввода "Период".
//
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодСбораДанных", "Объект.ПериодСбораДанныхСтрокой");
	
КонецПроцедуры // ПериодНачалоВыбора()

&НаКлиенте
// Процедура-обработчик события "Очистка" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодОчистка()

&НаКлиенте
// Процедура-обработчик события "Регулирование" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Направление			- <Число>
//        				- Позволяет определить, какая из кнопок регулирования была нажата.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодСбораДанных", "Объект.ПериодСбораДанныхСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодРегулирование()

&НаКлиенте
// Процедура-обработчик события "АвтоПодборТекста" поля ввода "Период".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("Период").
//  ДанныеВыбора      	- <Строка>
//          			- После завершения обработки события содержит текст 
//                         для размещения в поле ввода("Период").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения.
//
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодАвтоПодбор()

&НаКлиенте
// Процедура-обработчик события "ОкончаниеВводаТекста" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("Период").
//  ДанныеВыбора	 	- < СписокЗначений>
//          			- Параметр может содержать значение для размещения 
//						  в поле ввода или список значений для последующего
//                        выбора одного из них и размещения в поле ввода.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()

&НаКлиенте
// Процедура-обработчик нажатия на гиперссылку "Отчет по пользованию услугами".
//
Процедура ОткрытьОтчетПоПользованиюУслугами(Элемент)
	
	ОткрытьФорму("Отчет.КВП_ОтчетПоПользованиюУслугами.Форма.ФормаОтчета");
	
КонецПроцедуры // ОткрытьОтчетПоПомещениям

&НаКлиенте
// Процедура-обработчик нажатия на гиперссылку "Сводная ведомость".
//
Процедура ОткрытьСводнуюВедомость(Элемент)
	
	ОткрытьФорму("Отчет.КВП_СводнаяВедомость.Форма.ФормаОтчета");
	
КонецПроцедуры // ОткрытьОтчетПоПомещениям

&НаКлиенте
// Процедура-обработчик нажатия на гиперссылку "Сведения по потреблениям ПУ".
//
Процедура ОткрытьОтчетПоПотреблениямПУ(Элемент)
	
	ОткрытьФорму("Отчет.УПЖКХ_СведенияПоПотреблениямПУ.Форма.ФормаОтчета");
	
КонецПроцедуры // ОткрытьОтчетПоПомещениям

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКоманд

&НаКлиенте
// Обработчик события команды "Заполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	Отказ = ПроверкаЗаполненияРеквизитов();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеВДокументе();
	ПолучитьТаблицыСФиксированнымиДанными();
	ЗаполнитьФормуЭлементами();
	ЗаполнитьТаблицыФиксированнымиДанными();
	
	НастройкиЭП = ПолучитьНастройкуЭП(Объект.Организация);
	Если НастройкиЭП = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки формирования электронных паспортов.
										  |Воспользуйтесь кнопкой ""Настройки"" для ввода настроек.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНаФорме();
	
	ЭлементыЗаполнены = Истина;
	
	ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(Истина, Ложь);
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик события команды "ОткрытьФормуНастроек".
//
Процедура КомандаОткрытьФормуНастроек(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиЭлектронныхПаспортов.ФормаСписка");
	
КонецПроцедуры // КомандаОткрытьФормуНастроек()

&НаКлиенте
// Обработчик команды "СформироватьПаспорта".
//
Процедура СформироватьПаспорта(Команда)
	
	СформироватьЭлектронныеПаспорта();
	
КонецПроцедуры // СформироватьПаспорта()

&НаКлиенте
// Формирует паспорта и помещает их в архив.
//
Процедура СформироватьПаспортаИПоместитьВАрхив(Команда)
	
	СформироватьЭлектронныеПаспорта(Истина);
	
КонецПроцедуры // СформироватьПаспортаИПоместитьВАрхив()

&НаКлиенте
// Отправляет ЭП на сайт УО.
//
Процедура ОтправитьНаСайт(Команда)
	
	Если Модифицированность Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо записать документ.");
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуНастроекНаСервере();
	
	Если НадоЗапроситьПароль Тогда
		ЗапроситьПарольДоступаНаСайтНаКлиенте();
	Иначе
		ВыполнитьВыгрузкуДанныхНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОтправитьНаСайт()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ НА САЙТ

#Область МетодыВыгрузкиНаСайт

&НаСервере
// формирует таблицу с настройками отправки ЭП на сайт.
//
Процедура СформироватьТаблицуНастроекНаСервере()
	
	ТаблицаНастроек          = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицуНастроекОтправкиПаспортовНаСайт(Объект.Ссылка);
	ТаблицаНастроекХранилище = Новый ХранилищеЗначения(ТаблицаНастроек);
	
	СтрокиПаролей = ТаблицаНастроек.НайтиСтроки(Новый Структура("ХранитьПароль, МожноОтправитьНаСайт", Ложь, Истина));
	
	Если НЕ СтрокиПаролей.Количество() = 0 Тогда
		НадоЗапроситьПароль     = Истина;
		НазваниеОрганизации = СтрокиПаролей.Получить(0).НаименованиеОрганизации;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуНастроекНаСервере()

&НаКлиенте
// Выводит сообщение для пользователя с просьбой ввести пароль доступа к сайту.
//
Процедура ЗапроситьПарольДоступаНаСайтНаКлиенте()
	
	ДополнительныеПараметры = Новый Структура;
	
	ФормаВводаПароля = ПолучитьФорму("ОбщаяФорма.УПЖКХ_ВебИнтеграцияВводПароля");
	ФормаВводаПароля.ОписаниеОповещенияОЗакрытии   = Новый ОписаниеОповещения("ПолучитьПарольДоступа", ЭтаФорма, ДополнительныеПараметры);
	ФормаВводаПароля.Заголовок                     = "Введите пароль доступа к сайту для " + НазваниеОрганизации;
	ФормаВводаПароля.ВладелецФормы                 = ЭтаФорма;
	ФормаВводаПароля.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВводаПароля.РежимОткрытияОкна             = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаПароля.Открыть();
	
КонецПроцедуры // ЗапроситьПарольДоступаНаСайтНаКлиенте()

&НаКлиенте
// Открывает форму для ввода пароля.
Функция ПолучитьПарольДоступа(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Пароль = РезультатЗакрытия;
	
	ВыполнитьВыгрузкуДанныхНаСервере();
	
КонецФункции // ПолучитьПарольДоступа()

&НаСервере
// Выполняет выгрузку ЭП на сайт.
Функция ВыполнитьВыгрузкуДанныхНаСервере()
	
	ТаблицаНастроек = ТаблицаНастроекХранилище.Получить();
	
	Если НЕ ТаблицаНастроек.Количество() = 0 Тогда
		СтрокаНастроек = ТаблицаНастроек.Получить(0);
		Если ПустаяСтрока(СтрокаНастроек.Пароль) Тогда
			СтрокаНастроек.Пароль = Пароль;
		КонецЕсли;
		
		УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуЭлектронныхПаспортовПоТаблицеНастроек(ТаблицаНастроек);
	КонецЕсли;
	
КонецФункции // ВыполнитьВыгрузкуДанныхНаСервере()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЭЛЕКТРОННЫХ ПАСПОРТОВ

#Область ПроцедурыИФункцииФормированияПаспортов

&НаКлиенте
// Вызывает процедуру формирования паспортов.
//
// Параметры:
//  ПомещениеВАрхив - Булево - признак того, что паспорта надо поместить в архив.
//
Процедура СформироватьЭлектронныеПаспорта(ПомещениеВАрхив = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед формированием электронного паспорта необходимо записать документ.");
		Возврат;
	КонецЕсли;
	
	СчетчикСформированныхДокументов = 0;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	СформироватьXMLФайлыНаСервере(МассивДокументов, ПомещениеВАрхив, СчетчикСформированныхДокументов);
	
	Если СчетчикСформированныхДокументов = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Электронные паспорта не сформированы");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформированы электронные паспорта для " + СчетчикСформированныхДокументов + " зданий.");
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры // СформироватьЭлектронныеПаспорта()

&НаСервере
// Формирует электронные паспорта.
//
// Параметры:
//  МассивДокументов - Массив - масси документов, для которых надо сформировать электронные паспорта
//  ПомещениеВАрхив - Булево - факт того, что электронные паспорта надо помещать в архив
//  СчетчикСформированныхДокументов - Число - счетчик документов, для которых удалось сформировать электронные паспорта
//
Процедура СформироватьXMLФайлыНаСервере(МассивДокументов, ПомещениеВАрхив, СчетчикСформированныхДокументов)
	
	УПЖКХ_РаскрытиеИнформацииСервер.СформироватьXMLФайлы(МассивДокументов, ПомещениеВАрхив, СчетчикСформированныхДокументов);
	
КонецПроцедуры // СформироватьXMLФайлыНаСервере()

&НаКлиенте
// Обновляет статусы изменения документа и доступности элементов формы.
//
Процедура ОбновитьСтатусыИзмененияДокументаИДоступностиЭлементовФормы(СтатусПаспортаНеобходимоИзменить = Неопределено, НеобходимоВыполнитьАвтоматическоеЗаполнениеДокумента = Истина)
	
	Если ТипЗнч(СтатусПаспортаНеобходимоИзменить) = Тип("Булево") Тогда
		СтатусПаспортаБылИзменен = СтатусПаспортаНеобходимоИзменить;
	КонецЕсли;
	
	Если НеобходимоВыполнитьАвтоматическоеЗаполнениеДокумента = Истина Тогда
		Элементы.ГруппаРазделов.Доступность = Ложь;
		Элементы.НадписьОНеобходимостиАвтоматическогоЗаполненияДокумента.Видимость = Истина И НЕ Объект.ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ПустаяСсылка");
		
		Объект.НеобходимоПровестиАвтоматическоеЗаполнениеДокумента = Истина;
	Иначе
		Элементы.ГруппаРазделов.Доступность = Истина;
		Элементы.НадписьОНеобходимостиАвтоматическогоЗаполненияДокумента.Видимость = Ложь;
		
		Объект.НеобходимоПровестиАвтоматическоеЗаполнениеДокумента = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти