#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Устанавливает отбор на таблицу распределения в зависимости от
// текущей строки в таблице "ОбъектыУчета".
Процедура УстановитьОтборНаТаблицуРаспределения()
	
	ТекущиеДанные = Элементы.ОбъектыУчета.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ОтборСтрок = Новый Структура("ОбъектУчета, Услуга, СпособРаспределения, ТипРаспределения", 
									 ТекущиеДанные.ОбъектУчета, ТекущиеДанные.Услуга, ТекущиеДанные.СпособРаспределения, ТекущиеДанные.ТипРаспределения);
		ПересчитатьИтогиВТаблицеРаспределения(ОтборСтрок);
		
		Элементы.ТаблицаРаспределения.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Иначе
		Элементы.ТаблицаРаспределения.ОтборСтрок = Неопределено;
		мИтогКоличествоРаспределения = 0;
		мИтогСуммаРаспределения      = 0;
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборНаТаблицуРаспределения()

&НаСервере
// Процедура заполняет данные объектов.
Процедура ЗаполнитьДанныеОбъектаНаСервере()
	
	Для Каждого ДанныеСтроки Из Объект.ТаблицаРаспределения Цикл
		ЗаполнитьДанныеОбъектаВСтроке(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные объекта в строке.
Процедура ЗаполнитьДанныеОбъектаВСтроке(НомерСтроки)
	
	ДанныеСтроки = Объект.ТаблицаРаспределения.НайтиПоИдентификатору(НомерСтроки);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЛицевойСчет) Тогда
		СтрокиКеша = КешВладельцевИПомещенийПоОбъекту.НайтиСтроки(Новый Структура("Объект", ДанныеСтроки.ЛицевойСчет));
		Если СтрокиКеша.Количество() > 0 Тогда
			// Получим значения из кеша
			СтрокаДанных = СтрокиКеша[0];
			ДанныеСтроки.Квартира = СтрокаДанных.Квартира;
			ДанныеСтроки.Владелец = СтрокаДанных.Владелец;
		Иначе
			// Получим значения из базы
			ДанныеСтроки.Квартира = ДанныеСтроки.ЛицевойСчет.Адрес;
			ДанныеСтроки.Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
																													ДанныеСтроки.ЛицевойСчет, Объект.Дата);
			
			// Добавим значения в кеш
			НоваяСтрокаКеша = КешВладельцевИПомещенийПоОбъекту.Добавить();
			НоваяСтрокаКеша.Объект = ДанныеСтроки.ЛицевойСчет;
			НоваяСтрокаКеша.Квартира = ДанныеСтроки.Квартира;
			НоваяСтрокаКеша.Владелец = ДанныеСтроки.Владелец;
			
		КонецЕсли;
		
	Иначе
		ДанныеСтроки.Квартира = Неопределено;
		ДанныеСтроки.Владелец = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ОбъектУчета) Тогда
		ТекДанные = Элементы.ОбъектыУчета.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекДанные.ОбъектУчета) Тогда
			ДанныеСтроки.ОбъектУчета         = ТекДанные.ОбъектУчета;
			ДанныеСтроки.Услуга              = ТекДанные.Услуга;
			ДанныеСтроки.СпособРаспределения = ТекДанные.СпособРаспределения;
			ДанныеСтроки.ТипРаспределения    = "";
			Если НЕ ПустаяСтрока(ТекДанные.ТипРаспределения) Тогда
				ДанныеСтроки.ТипРаспределения = ТекДанные.ТипРаспределения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает список лицевых счетов здания.
Функция ПолучитьСписокЛицевыхСчетовЗдания(ОбъектУчета)
	
	//// Готовим список лицевых счетов, которые можно выбрать.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Адрес.Владелец В(&Здание)";
	
	Запрос.УстановитьПараметр("Здание", ОбъектУчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СписокЛицевыхСчетов.Добавить(СтрокаРезультата.Ссылка);
	КонецЦикла;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции

&НаКлиенте
// Удаляет строки в таблице распределения по данным из таблицы объектов учета.
//
Процедура УдалитьСтрокиВТаблицеРаспределения(ТекДанные, ВыбранноеЗначение = Неопределено)
	
	ТекущиеДанные = Объект.ОбъектыУчета.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор());
	
	Отбор = Новый Структура("ОбъектУчета, Услуга, СпособРаспределения, ТипРаспределения", ТекущиеДанные.ОбъектУчета, ТекущиеДанные.Услуга, ТекущиеДанные.СпособРаспределения, ТекущиеДанные.ТипРаспределения);
	
	СтрокиНаУдаление = Объект.ТаблицаРаспределения.НайтиСтроки(Отбор);
	Для Каждого ТекСтрока Из СтрокиНаУдаление Цикл
		Объект.ТаблицаРаспределения.Удалить(ТекСтрока.НомерСтроки - 1);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиВТаблицеРаспределения()

&НаСервере
// Процедура устанавливает точность для поля ввода "Количество" табличного поля "ОбъектыУчета"
// в соответствии с выбранной пользователем точностью в настройках программы.
Процедура УстановитьТочностьОбъемовНачислений()
	
	ФорматнаяСтрока = "ЧДЦ=" + Строка(мТочностьОбъемаНачислений) + "";
	
	Элементы.ОбъектыУчетаКоличество.Формат         = ФорматнаяСтрока;
	Элементы.ТаблицаРаспределенияКоличество.Формат = ФорматнаяСтрока;
	
КонецПроцедуры // УстановитьТочностьОбъемовНачислений()

#КонецОбласти 

#Область ПроцедурыИФункцииДляРаботыСТабличнымиЧастями

&НаСервере
// Формирует список лицевых счетов для объекта.
//
// Параметры
//  СтрокаОбъектаУчета – строка табличной части ОбъектыУчета.
//
// Возвращаемое значение:
//  ТаблицаЗначений – таблица со списком объектов для распределения.
//
Функция ПолучитьСписокОбъектовРаспределения(СтрокаОбъектаУчета)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ОбъектРаспределения
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, ЛицевойСчет.Адрес.Владелец = &Здание) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",   Объект.Дата);
	Запрос.УстановитьПараметр("Здание", СтрокаОбъектаУчета.ОбъектУчета);

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	СписокОбъектовРаспределения = Новый СписокЗначений();
	СписокОбъектовРаспределения.ЗагрузитьЗначения(ТаблицаРезультата.ВыгрузитьКолонку("ОбъектРаспределения"));

	Возврат СписокОбъектовРаспределения;

КонецФункции // ПолучитьСписокОбъектовРаспределения()

&НаСервере
// Формирует таблицу распределения по строке таблицы объектов учета и
// добавляет к общей таблице распределения.
//
// Параметры
//  СтрокаОбъектаУчета – строка табличной части ОбъектыУчета.
//
Процедура ДополнитьТаблицуРаспределенияЗатрат(СтрокаОбъектаУчета)
	
	СписокОбъектовРаспределения = ПолучитьСписокОбъектовРаспределения(СтрокаОбъектаУчета);
	
	Для Каждого ТекОбъект Из СписокОбъектовРаспределения Цикл
		НоваяСтрокаРаспределения                     = Объект.ТаблицаРаспределения.Добавить();
		НоваяСтрокаРаспределения.ОбъектУчета         = СтрокаОбъектаУчета.ОбъектУчета;
		НоваяСтрокаРаспределения.ЛицевойСчет         = ТекОбъект.Значение;
		НоваяСтрокаРаспределения.Услуга              = СтрокаОбъектаУчета.Услуга;
		НоваяСтрокаРаспределения.СпособРаспределения = СтрокаОбъектаУчета.СпособРаспределения;
		НоваяСтрокаРаспределения.ТипРаспределения    = СтрокаОбъектаУчета.ТипРаспределения;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуРаспределенияЗатрат()

&НаСервере
// Заполняет таблицу распределения по данным таблицы объектов учета.
Процедура ЗаполнитьТаблицуРаспределения()
	
	СжатаяТаблицаОбъектовУчета = Объект.ОбъектыУчета.Выгрузить();
	СжатаяТаблицаОбъектовУчета.Свернуть("ОбъектУчета, Услуга, СпособРаспределения, ТипРаспределения", "Сумма, Количество");

	Для Каждого ТекОбъектУчета Из СжатаяТаблицаОбъектовУчета Цикл
		ДополнитьТаблицуРаспределенияЗатрат(ТекОбъектУчета);
	КонецЦикла;
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределения()

&НаСервере
// Процедура распределяет суммы объектов учета.
//
Функция ПроверитьНастройкиРаспределенияПоОбъекту(СтрокаОбъектаУчета)
	
	Отказ = Ложь;
	
	// Необходимо добавить проверку на заполнение поля "Объект учета".
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.Услуга) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
													+ """ не введена услуга для распределения", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.СпособРаспределения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
													+ """ по услуге """ + Строка(СтрокаОбъектаУчета.Услуга) 
													+ """ не выбран способ распределения услуги", Отказ);
	КонецЕсли;
	
	Если СтрокаОбъектаУчета.СпособРаспределения = мОсновныеСпособыРаспределения.ПоПлощади
	 ИЛИ СтрокаОбъектаУчета.СпособРаспределения = мОсновныеСпособыРаспределения.ПоЖильцам
	 ИЛИ СтрокаОбъектаУчета.СпособРаспределения = мОсновныеСпособыРаспределения.ПоУслугам Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.ТипРаспределения) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
														+ """ по услуге """ + Строка(СтрокаОбъектаУчета.Услуга) 
														+ """ не выбран дополнительный параметр распределения услуги", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему")
	   И НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.Количество) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
													+ """ не введен объем для распределения", Отказ);
	КонецЕсли;
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоСумме")
	   И НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.Сумма) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
													+ """ не введена сумма для распределения", Отказ);
	КонецЕсли;
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме")
	   И НЕ (ЗначениеЗаполнено(СтрокаОбъектаУчета.Количество) И ЗначениеЗаполнено(СтрокаОбъектаУчета.Сумма)) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для здания """ + Строка(СтрокаОбъектаУчета.ОбъектУчета) 
													+ """ не введены объем и сумма для распределения", Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
// Процедура получает таблицу тарифов по лицевым счетам и услугам.
//
Процедура ЗаполнитьТаблицуТарифов()
	
	// Для информации:
	// Т.к. функция ПолучитьТарифПоЛицевомуСчету возвращает готовую таблицу тарифов с учетом приоритетов
	// единовременно только по одной услуге, то выполним получение итоговой таблицы тарифов в несколько циклов.
	// Это оптимальнее, нежели получение тарифов отдельно для каждого л/с.
	
	// Очистить таблицу кэша тарифов.
	КэшТарифов.Очистить();
	
	ВрТаблицаЛицевыхСчетовИУслуг = Объект.ТаблицаРаспределения.Выгрузить();
	ВрТаблицаЛицевыхСчетовИУслуг.Свернуть("ЛицевойСчет, Услуга");
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.ЗагрузитьЗначения(ВрТаблицаЛицевыхСчетовИУслуг.ВыгрузитьКолонку("ЛицевойСчет"));
	
	ВрТаблицаЛицевыхСчетовИУслуг.Свернуть("Услуга");
	
	Для Каждого ТекСтрока Из ВрТаблицаЛицевыхСчетовИУслуг Цикл
		
		// Если есть установленные тарифы по объектам, то определяем с учетом приоритета.
		ВрТаблицаТарифов = ПолучитьТарифПоЛицевомуСчету(Объект.Дата, 
														Объект.Организация,
														ТекСтрока.Услуга,
														СписокОбъектов);
		СкопироватьДанныеВОбщуюТаблицу(ВрТаблицаТарифов, КэшТарифов, ТекСтрока.Услуга);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура копирует данные из таблицы тарифов по одной услуге в общую таблицу тарифов.
Процедура СкопироватьДанныеВОбщуюТаблицу(ТаблицаИсточник, ТаблицаПриемник, ТекУслуга)
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
			СтрокаТаблицыПриемника        = ТаблицаПриемник.Добавить();
			СтрокаТаблицыПриемника.Услуга = ТекУслуга;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура распределяет суммы объектов учета.
//
Процедура РаспределитьСуммы()
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему") Тогда
		ЗаполнитьТаблицуТарифов();
	КонецЕсли;
	
	СжатаяТаблицаОбъектовУчета = Объект.ОбъектыУчета.Выгрузить();
	СжатаяТаблицаОбъектовУчета.Свернуть("ОбъектУчета, Услуга, СпособРаспределения, ТипРаспределения", "Сумма, Количество");
	
	Для Каждого СтрокаОбъектаУчета Из СжатаяТаблицаОбъектовУчета Цикл
		
		Если ПроверитьНастройкиРаспределенияПоОбъекту(СтрокаОбъектаУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СпособРаспределения = СтрокаОбъектаУчета.СпособРаспределения;
		ТипРаспределения    = СтрокаОбъектаУчета.ТипРаспределения;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ОбъектУчета",         СтрокаОбъектаУчета.ОбъектУчета);
		СтруктураПоиска.Вставить("Услуга",              СтрокаОбъектаУчета.Услуга);
		СтруктураПоиска.Вставить("СпособРаспределения", СтрокаОбъектаУчета.СпособРаспределения);
		СтруктураПоиска.Вставить("ТипРаспределения",    СтрокаОбъектаУчета.ТипРаспределения);
		
		МассивСтрок = Объект.ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
		
		СписокОбъектовРаспределения = Новый СписокЗначений;
		Для Каждого ТекСтрокаМассива Из МассивСтрок Цикл
			
			СписокОбъектовРаспределения.Добавить(ТекСтрокаМассива.ЛицевойСчет);
			
			// Перед распределением необходимо предварительно очистить исходные (предыдущие) данные распределения,
			// так как при их перезаполнении заполняются только те строки, по которым есть ненулевая доля,
			// а остальные строки не обрабатываются.
			ТекСтрокаМассива.Количество = 0;
			ТекСтрокаМассива.Сумма      = 0;
			
		КонецЦикла;
		
		Услуга = СтрокаОбъектаУчета.Услуга;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокОбъектовРаспределения", СписокОбъектовРаспределения);
		
		// Определение долей для распределения объема(суммы) на выбранные лицевые счета.
		СформироватьТекстЗапроса(Запрос, СписокОбъектовРаспределения, СпособРаспределения, ТипРаспределения, мОсновныеСпособыРаспределения);
		
		// Используется старый механизм распределения.
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ОбщаяСуммаДолиДляРаспределения = Выборка.Доля;
			НомерСтроки                    = 2;
			СуммаДляРаспределения          = 0;
			СуммаДолиДляРаспределения      = 0;
			
			Если НЕ ОбщаяСуммаДолиДляРаспределения = 0 Тогда
				
				Пока Выборка.Следующий() Цикл
				
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ОбъектУчета",         СтрокаОбъектаУчета.ОбъектУчета);
					СтруктураПоиска.Вставить("ЛицевойСчет",         Выборка.ОбъектРаспределения);
					СтруктураПоиска.Вставить("Услуга",              СтрокаОбъектаУчета.Услуга);
					СтруктураПоиска.Вставить("СпособРаспределения", СтрокаОбъектаУчета.СпособРаспределения);
					СтруктураПоиска.Вставить("ТипРаспределения",    СтрокаОбъектаУчета.ТипРаспределения);
					
					СтрокиПоОбъекту = Объект.ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
					
					ОбщаяСуммаДолиЛСДляРаспределения = Выборка.Доля;
					СуммаДолиЛС                      = 0;
					Счет                             = 1;
					
					Для Каждого СтрокаРаспределения Из СтрокиПоОбъекту Цикл
						
						Если Счет = СтрокиПоОбъекту.Количество() Тогда
							ДоляДляПодсчета = ОбщаяСуммаДолиЛСДляРаспределения - СуммаДолиЛС;
						Иначе
							ДоляДляПодсчета = ОбщаяСуммаДолиЛСДляРаспределения / СтрокиПоОбъекту.Количество();
						КонецЕсли;
						
						СуммаДолиЛС = СуммаДолиЛС + ДоляДляПодсчета;
						
						Объем = 0;
						Тариф = 0;
						Сумма = 0;
						
						Если НомерСтроки = Выборка.Количество() Тогда
							
							Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаОбъектаУчета.Количество - СуммаДолиДляРаспределения, мТочностьОбъемаНачислений);
								
								РазмерыТарифов = КэшТарифов.НайтиСтроки(Новый Структура("Услуга, Объект", 
																		СтрокаРаспределения.Услуга, СтрокаРаспределения.ЛицевойСчет));
								// Если нет данных по размерам тарифа, то тариф 0.
								// Если есть, то берем сразу тариф, т.к. в подготовленной заранее 
								// таблице кэша тарифов он уже определен с учетом приоритета.
								Если РазмерыТарифов.Количество() > 0 Тогда
									Тариф = РазмерыТарифов[0].Тариф;
								КонецЕсли;
								
								Сумма = Объем * Тариф;
							ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоСумме") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ДоляДляПодсчета, мТочностьОбъемаНачислений);
								Сумма = СтрокаОбъектаУчета.Сумма - СуммаДляРаспределения;
							ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаОбъектаУчета.Количество - СуммаДолиДляРаспределения, мТочностьОбъемаНачислений);
								Сумма = СтрокаОбъектаУчета.Сумма - СуммаДляРаспределения;
							КонецЕсли;
							
						Иначе
							
							Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаОбъектаУчета.Количество * ДоляДляПодсчета / ОбщаяСуммаДолиДляРаспределения, мТочностьОбъемаНачислений);
								
								РазмерыТарифов = КэшТарифов.НайтиСтроки(Новый Структура("Услуга, Объект", 
																		СтрокаРаспределения.Услуга, СтрокаРаспределения.ЛицевойСчет));
								// Если нет данных по размерам тарифа, то тариф 0.
								// Если есть, то берем сразу тариф, т.к. в подготовленной заранее 
								// таблице кэша тарифов он уже определен с учетом приоритета.
								Если РазмерыТарифов.Количество() > 0 Тогда
									Тариф = РазмерыТарифов[0].Тариф;
								КонецЕсли;
								
								Сумма = Объем * Тариф;
							ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоСумме") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ДоляДляПодсчета, мТочностьОбъемаНачислений);
								Сумма = СтрокаОбъектаУчета.Сумма * ДоляДляПодсчета / ОбщаяСуммаДолиДляРаспределения;
							ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме") Тогда
								Объем = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаОбъектаУчета.Количество * ДоляДляПодсчета / ОбщаяСуммаДолиДляРаспределения, мТочностьОбъемаНачислений);
								Сумма = СтрокаОбъектаУчета.Сумма * ДоляДляПодсчета / ОбщаяСуммаДолиДляРаспределения;
							КонецЕсли;
							
						КонецЕсли;
						
						СтрокаРаспределения.Количество = Объем;
						СтрокаРаспределения.Сумма      = Сумма;
						СтрокаРаспределения.Тариф      = ?(СтрокаРаспределения.Количество = 0 ИЛИ 
														   Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему"),
															Тариф, 
															СтрокаРаспределения.Сумма / СтрокаРаспределения.Количество);
						
						СуммаДляРаспределения     = СуммаДляРаспределения     + СтрокаРаспределения.Сумма;
						СуммаДолиДляРаспределения = СуммаДолиДляРаспределения + СтрокаРаспределения.Количество;
						
						Счет = Счет + 1;
						
					КонецЦикла;
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не найдены данные для распределения по услуге """ + СтрокаОбъектаУчета.Услуга + """");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСуммуРедактирование()

&НаСервере
// Процедура формирует текст запроса в зависимости от выбранного способа распределения и дополнительного параметра
// в текущей строке табличного поля "ОбъектыУчета".
//
Процедура СформироватьТекстЗапроса(Запрос, СписокОбъектовРаспределения, СпособРаспределения, ТипРаспределения, мОсновныеСпособыРаспределения)
	Если СпособРаспределения = мОсновныеСпособыРаспределения["Поровну"] Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ОбъектРаспределения,
		|	1 КАК Доля
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокОбъектовРаспределения)
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
	ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения["ПоПлощади"] Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ОбъектРаспределения
		|ПОМЕСТИТЬ ЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокОбъектовРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|				КОГДА РазмерыДолейЛС.ДоляЗнаменатель = 0
		|					ТОГДА 0
		|				ИНАЧЕ ПлощадьПомещений.Площадь * РазмерыДолейЛС.ДоляЧислитель / РазмерыДолейЛС.ДоляЗнаменатель
		|			КОНЕЦ, 0)) КАК Доля
		|ПОМЕСТИТЬ втПлощади
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&Дата, ) КАК РазмерыДолейЛС
		|		ПО ЛицевыеСчета.ОбъектРаспределения = РазмерыДолейЛС.ЛицевойСчет
		|			И ЛицевыеСчета.ОбъектРаспределения.Адрес = РазмерыДолейЛС.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, ВидПлощади = &ВидПлощади) КАК ПлощадьПомещений
		|		ПО ЛицевыеСчета.ОбъектРаспределения.Адрес = ПлощадьПомещений.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицевыеСчета.ОбъектРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПлощади.ОбъектРаспределения,
		|	втПлощади.Доля КАК Доля
		|ИЗ
		|	втПлощади КАК втПлощади
		|ГДЕ
		|	НЕ втПлощади.Доля = 0
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("ВидПлощади", ТипРаспределения);
		
	ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения["ПоЖильцам"] Тогда
		
		Если ТипРаспределения = "Проживающие" Тогда
			СтрокаУсловия = "КоличествоПроживающих";
		ИначеЕсли ТипРаспределения = "Зарегистрированные" Тогда
			СтрокаУсловия = "КоличествоЗарегистрированных";
		КонецЕсли;
		
		ДополнитьЗапросКоличествомЖильцов(Запрос, Объект.Дата, СписокОбъектовРаспределения);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	врТаблицаКоличеств.ЛицевойСчет,
		|	врТаблицаКоличеств." + СтрокаУсловия + Символы.ПС +
		"	ПОМЕСТИТЬ втДанныеОЖильцах
		|ИЗ
		|	врТаблицаКоличеств КАК врТаблицаКоличеств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеОЖильцах.ЛицевойСчет КАК ОбъектРаспределения,
		|	втДанныеОЖильцах." + СтрокаУсловия + " КАК Доля
		|ИЗ
		|	втДанныеОЖильцах КАК втДанныеОЖильцах
		|ГДЕ
		|	НЕ втДанныеОЖильцах." + СтрокаУсловия + " = 0
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
	ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения["ПоУслугам"] Тогда
		
		// ОСОБЕННОСТЬ:
		// Начисление за счет повышающих коэффициентов не учитывается при распределении затрат
		// пропорционально расходе услуги, так как при распределении ОДН также это начисление
		// не учитывается.
		
		// ОСОБЕННОСТЬ:
		// При определении доли распределения учитываются объемы сторнировок а также объемы сервисных услуг,
		// отраженных в документе "Разовое начисление услуг". При этом объемы обычных корректировок начислений
		// не учитываются, так как в них нет объемов корректировки.
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ОбъектРаспределения
		|ПОМЕСТИТЬ ЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокОбъектовРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления,
		|	ЕСТЬNULL(УПЖКХ_НачисленияОбороты.Количество * ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Доля
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				Организация = &Организация
		|					И Услуга = &Услуга
		|					И ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							ЛицевыеСчета.ОбъектРаспределения
		|						ИЗ
		|							ЛицевыеСчета КАК ЛицевыеСчета)
		|					И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
		|					И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))) КАК УПЖКХ_НачисленияОбороты
		|		ПО ЛицевыеСчета.ОбъектРаспределения = УПЖКХ_НачисленияОбороты.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисления.ОбъектРаспределения,
		|	СУММА(втНачисления.Доля) КАК Доля
		|ИЗ
		|	втНачисления КАК втНачисления
		|ГДЕ
		|	НЕ втНачисления.Доля = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисления.ОбъектРаспределения
		|
		|ИМЕЮЩИЕ
		|	СУММА(втНачисления.Доля) > 0
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаКон",     Объект.Дата);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Услуга",      ТипРаспределения);
		
	ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения["ПоКомнатам"] Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ОбъектРаспределения
		|ПОМЕСТИТЬ ЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокОбъектовРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
		|ПОМЕСТИТЬ втПривязанныеКомнаты
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(&Дата, ЛицевойСчет В (&СписокОбъектовРаспределения)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
		|		ПО ЛицевыеСчета.ОбъектРаспределения = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
		|			И ЛицевыеСчета.ОбъектРаспределения.Адрес = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Родитель
		|ГДЕ
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицевыеСчета.ОбъектРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
		|ПОМЕСТИТЬ втКомнатыИзСправочника
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|		ПО ЛицевыеСчета.ОбъектРаспределения.Адрес = УПЖКХ_Помещения.Родитель
		|ГДЕ
		|	НЕ УПЖКХ_Помещения.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицевыеСчета.ОбъектРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	ВЫБОР
		|		КОГДА НЕ втПривязанныеКомнаты.Доля = 0
		|			ТОГДА втПривязанныеКомнаты.Доля
		|		КОГДА НЕ втКомнатыИзСправочника.Доля = 0
		|			ТОГДА втКомнатыИзСправочника.Доля
		|		ИНАЧЕ ЛицевыеСчета.ОбъектРаспределения.Адрес.КоличествоКомнат
		|	КОНЕЦ КАК Доля
		|ПОМЕСТИТЬ втИтоги
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКомнаты КАК втПривязанныеКомнаты
		|		ПО ЛицевыеСчета.ОбъектРаспределения = втПривязанныеКомнаты.ОбъектРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКомнатыИзСправочника КАК втКомнатыИзСправочника
		|		ПО ЛицевыеСчета.ОбъектРаспределения = втКомнатыИзСправочника.ОбъектРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоги.ОбъектРаспределения,
		|	втИтоги.Доля КАК Доля
		|ИЗ
		|	втИтоги КАК втИтоги
		|ГДЕ
		|	НЕ втИтоги.Доля = 0
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		
	ИначеЕсли НЕ Найти(СпособРаспределения, "по характеристике помещения:") = 0 
	 ИЛИ НЕ Найти(СпособРаспределения, "по характеристике лицевого счета:") = 0 Тогда

		Если НЕ Найти(СпособРаспределения, "по характеристике помещения:") = 0 Тогда
			СтрокаДополненияЗапроса = "Помещение";
		Иначе
			СтрокаДополненияЗапроса = "ОбъектРаспределения";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ОбъектРаспределения,
		|	КВП_ЛицевыеСчета.Адрес КАК Помещение
		|ПОМЕСТИТЬ ЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокОбъектовРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛицевыеСчета.ОбъектРаспределения,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК Доля
		|ИЗ
		|	ЛицевыеСчета КАК ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ЛицевыеСчета." + СтрокаДополненияЗапроса + " = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				ЛицевыеСчета." + СтрокаДополненияЗапроса +
		"			ИЗ
		|				ЛицевыеСчета КАК ЛицевыеСчета)
		|	И ЗначенияСвойствОбъектов.Свойство.Наименование = &НаименованиеСвойства";
		
		НаименованиеСвойства = СпособРаспределения;
		НаименованиеСвойства = СокрЛП(СтрЗаменить(НаименованиеСвойства, "по характеристике " + ?(СтрокаДополненияЗапроса = "Помещение", "помещения:", "лицевого счета:"), ""));
		
		Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТаблицаЗначенийДопСвойств = Новый ТаблицаЗначений;
		ТаблицаЗначенийДопСвойств.Колонки.Добавить("ОбъектРаспределения", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ТаблицаЗначенийДопСвойств.Колонки.Добавить("Доля",                УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 5));
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗначенийДопСвойств.Добавить(), Выборка);
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЗначенийДопСвойств.ОбъектРаспределения,
		|	ТаблицаЗначенийДопСвойств.Доля
		|ПОМЕСТИТЬ втДопСвойства
		|ИЗ
		|	&ТаблицаЗначенийДопСвойств КАК ТаблицаЗначенийДопСвойств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДопСвойства.ОбъектРаспределения,
		|	втДопСвойства.Доля КАК Доля
		|ИЗ
		|	втДопСвойства КАК втДопСвойства
		|ИТОГИ
		|	СУММА(Доля)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("ТаблицаЗначенийДопСвойств", ТаблицаЗначенийДопСвойств);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает соответствие основных способов распределения.
//
Функция ПолучитьСтруктуруОсновныхСпособовРаспределения()
	
	мОсновныеСпособыРаспределения = Новый Структура;
	мОсновныеСпособыРаспределения.Вставить("Поровну",    "поровну");
	мОсновныеСпособыРаспределения.Вставить("ПоПлощади",  "пропорционально площади");
	мОсновныеСпособыРаспределения.Вставить("ПоЖильцам",  "пропорционально количеству жильцов");
	мОсновныеСпособыРаспределения.Вставить("ПоУслугам",  "пропорционально объему потребления услуги");
	мОсновныеСпособыРаспределения.Вставить("ПоКомнатам", "пропорционально количеству комнат");
	
	Возврат мОсновныеСпособыРаспределения;
	
КонецФункции

&НаКлиенте
// Процедура вызывает обработку отбора объектов.
//
Процедура ДействиеЗаполнить(ТекущаяСтрока)
	
	ТекСтрокаДанных = Объект.ОбъектыУчета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	СтруктураПараметровОтбора.Вставить("НачПериодЛС",      НачалоМесяца(Объект.Дата));
	СтруктураПараметровОтбора.Вставить("КонПериодЛС",      Объект.Дата);
	СтруктураПараметровОтбора.Вставить("Организация",      Объект.Организация);
	СтруктураПараметровОтбора.Вставить("ТипОбъекта",       "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта",   "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ОбъектЛС",         ТекСтрокаДанных.ОбъектУчета);
	СтруктураПараметровОтбора.Вставить("ЗданияКвартиры",   ТекСтрокаДанных.ОбъектУчета);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТекСтрокаДанных", ТекСтрокаДанных);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьПодборОбъектовДействиеЗаполнить", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ДействиеЗаполнить()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ДействиеЗаполнить".
Процедура ОбработатьПодборОбъектовДействиеЗаполнить(СписокОбъектов, ДополнительныеПараметры) Экспорт
	
	ТекСтрокаДанных = ДополнительныеПараметры.ТекСтрокаДанных;
	
	Если СписокОбъектов = Неопределено Тогда
		Возврат;
	Иначе
		// Отбираем строки отбора.
		Если Не СписокОбъектов.Количество() = 0 Тогда
			Для Каждого ТекСтрока Из СписокОбъектов Цикл
				НоваяСтрока                     = Объект.ТаблицаРаспределения.Добавить();
				НоваяСтрока.ОбъектУчета         = ТекСтрокаДанных.ОбъектУчета;
				НоваяСтрока.ЛицевойСчет         = ТекСтрока.Значение;
				НоваяСтрока.Услуга              = ТекСтрокаДанных.Услуга;
				НоваяСтрока.СпособРаспределения = ТекСтрокаДанных.СпособРаспределения;
				НоваяСтрока.ТипРаспределения    = ТекСтрокаДанных.ТипРаспределения;
			КонецЦикла;
			
			ЗаполнитьДанныеОбъектаНаСервере();
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ОбъектУчета, Услуга, СпособРаспределения",
									  ТекСтрокаДанных.ОбъектУчета, ТекСтрокаДанных.Услуга, ТекСтрокаДанных.СпособРаспределения);
	Если Объект.ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбработатьПодборОбъектовДействиеЗаполнить", ЭтаФорма),
					   "Распределить суммы по объектам?",
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПодборОбъектовДействиеЗаполнить()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ОбработатьПодборОбъектовДействиеЗаполнить".
Процедура ОбработатьРезультатВопросаОбработатьПодборОбъектовДействиеЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьСуммы();
		УстановитьОтборНаТаблицуРаспределения();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОбработатьПодборОбъектовДействиеЗаполнить()

&НаКлиенте
// Заполняет таблицу распределения по отбору.
//
Процедура ЗаполнитьТаблицуРаспределенияПоОтбору(ТекущаяСтрока)

	ТекСтрокаДанных = Объект.ОбъектыУчета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ОбъектУчета",         ТекСтрокаДанных.ОбъектУчета);
	СтруктураПоиска.Вставить("Услуга",              ТекСтрокаДанных.Услуга);
	СтруктураПоиска.Вставить("СпособРаспределения", ТекСтрокаДанных.СпособРаспределения);
	СтруктураПоиска.Вставить("ТипРаспределения",    ТекСтрокаДанных.ТипРаспределения);
	
	СтрокиПоОбъекту = Объект.ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
	
	Если Не СтрокиПоОбъекту.Количество() = 0 Тогда
		ТекстВопроса = "Из таблицы распределения будут удалены строки по объекту: "
					 + ТекСтрокаДанных.ОбъектУчета 
					 + ". Продолжить?";
		
		ДопПараметры = Новый Структура("СтрокиПоОбъекту, ТекущаяСтрока", СтрокиПоОбъекту, ТекущаяСтрока);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТаблицуРаспределения", ЭтаФорма, ДопПараметры),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	// Вызываем обработку заполнения.
	ДействиеЗаполнить(ТекущаяСтрока);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияПоОтбору()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ЗаполнитьТаблицуРаспределенияПоОтбору()".
Процедура ОбработатьРезультатВопросаОчиститьТаблицуРаспределения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТаблицаРаспределения = Объект.ТаблицаРаспределения;
		Для Каждого ТекСтрока Из ДополнительныеПараметры.СтрокиПоОбъекту Цикл
			ТаблицаРаспределения.Удалить(ТаблицаРаспределения.Индекс(ТекСтрока));
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Вызываем обработку заполнения.
	ДействиеЗаполнить(ДополнительныеПараметры.ТекущаяСтрока);
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТаблицуРаспределения()

&НаКлиенте
// Предназначена для проверки заполнения всех необходимые полей отбора в таблице объектов учета.
//
Функция ЗаполненыВсеНеобходимыеПоляОтбора(Отбор)
	
	Заполнено = Истина;
	Если НЕ ЗначениеЗаполнено(Отбор.ОбъектУчета) Тогда
		ЗаполненоКорректно = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отбор.Услуга) Тогда
		Заполнено = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Отбор.СпособРаспределения) Тогда
		Заполнено = Ложь;
	КонецЕсли;
	
	Если Отбор.СпособРаспределения = мОсновныеСпособыРаспределения.ПоПлощади
	 ИЛИ Отбор.СпособРаспределения = мОсновныеСпособыРаспределения.ПоУслугам
	 ИЛИ Отбор.СпособРаспределения = мОсновныеСпособыРаспределения.ПоЖильцам Тогда
		Если ПустаяСтрока(Отбор.ТипРаспределения) Тогда
			Заполнено = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заполнено;
	
КонецФункции // ЗаполненыВсеНеобходимыеПоляОтбора()

&НаКлиенте
// Предназначена для изменения значений в строках таблицы распределения.
//
Процедура ИзменитьЗначениеСтрокВТаблицеРаспределения(ТекущиеДанные, Элемент, ВыбранноеЗначение = Неопределено, НаименованиеКолонки)
	
	ИзменятьСтроки = Ложь;
	
	Если НЕ ТекущиеДанные.СпособРаспределения = ВыбранноеЗначение Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИзменятьСтроки = Истина;
		
	КонецЕсли;
	
	Если ИзменятьСтроки Тогда
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ОбъектУчета",         ТекущиеДанные.ОбъектУчета);
		ОтборСтрок.Вставить("Услуга",              ТекущиеДанные.Услуга);
		ОтборСтрок.Вставить("СпособРаспределения", ТекущиеДанные.СпособРаспределения);
		ОтборСтрок.Вставить("ТипРаспределения",    ТекущиеДанные.ТипРаспределения);
		
		НайденныеСтроки = Объект.ТаблицаРаспределения.НайтиСтроки(ОтборСтрок);
		
		ПустоеЗначениеДопПараметра = Неопределено;
		Если НаименованиеКолонки = "ОбъектыУчетаСпособРаспределения" Тогда
			Если ВыбранноеЗначение = мОсновныеСпособыРаспределения.ПоПлощади Тогда
				ПустоеЗначениеДопПараметра = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
			ИначеЕсли ВыбранноеЗначение = мОсновныеСпособыРаспределения.ПоУслугам Тогда
				ПустоеЗначениеДопПараметра = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			Иначе
				ПустоеЗначениеДопПараметра = "";
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Если НаименованиеКолонки = "СпособРаспределения" Тогда
				ТекСтрока["СпособРаспределения"] = ВыбранноеЗначение;
			КонецЕсли;
			Если НЕ ПустоеЗначениеДопПараметра = Неопределено Тогда
				ТекСтрока["ТипРаспределения"] = ПустоеЗначениеДопПараметра;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеСтрокВТаблицеРаспределения()

&НаКлиенте
// Предназначена для проверки наличия строк для удаления в таблице распределения.
//
Функция ИмеютсяСтрокиДляРедактированияВТаблицеРаспределения(ТекущиеДанные)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектУчета",         ТекущиеДанные.ОбъектУчета);
	Отбор.Вставить("Услуга",              ТекущиеДанные.Услуга);
	Отбор.Вставить("СпособРаспределения", ТекущиеДанные.СпособРаспределения);
	Отбор.Вставить("ТипРаспределения",    ТекущиеДанные.ТипРаспределения);
	
	НайденныеСтроки = Объект.ТаблицаРаспределения.НайтиСтроки(Отбор);
	
	Возврат ?(НайденныеСтроки.Количество() > 0, Истина, Ложь);
	
КонецФункции // ИмеютсяСтрокиДляУдаленияВТаблицеРаспределения()

&НаКлиенте
// Предназначена для проверки наличия строк с идентичными распределения в таблице объектов учета.
//
Процедура ПроверитьНаличиеДублейСтрок(ТекущаяСтрока, ТекущаяКолонка, ВыбранноеЗначение)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектУчета",         ?(ТекущаяКолонка = "ОбъектыУчетаОбъектУчета",         ВыбранноеЗначение, ТекущаяСтрока.ОбъектУчета));
	Отбор.Вставить("Услуга",              ?(ТекущаяКолонка = "ОбъектыУчетаУслуга",              ВыбранноеЗначение, ТекущаяСтрока.Услуга));
	Отбор.Вставить("СпособРаспределения", ?(ТекущаяКолонка = "ОбъектыУчетаСпособРаспределения", ВыбранноеЗначение, ТекущаяСтрока.СпособРаспределения));
	Отбор.Вставить("ТипРаспределения",    ?(ТекущаяКолонка = "ОбъектыУчетаТипРаспределения",    ВыбранноеЗначение, ТекущаяСтрока.ТипРаспределения));
	
	Если ЗаполненыВсеНеобходимыеПоляОтбора(Отбор) Тогда
		НайденныеСтроки = Объект.ОбъектыУчета.НайтиСтроки(Отбор);
		
		// Если дублирующая строка найдена, то выведем сообщение и присвоим выбираемому полю старое значение.
		Если НайденныеСтроки.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице объектов учета содержится строка №" + НайденныеСтроки[0].НомерСтроки + " с идентичным распределением. "
											+ "Внесите соответствующие изменения объема и суммы затрат в строке №" + НайденныеСтроки[0].НомерСтроки + ".");
			
			Если ТекущаяКолонка = "ОбъектыУчетаУслуга" Тогда
				ВыбранноеЗначение = ТекущаяСтрока.Услуга;
			ИначеЕсли ТекущаяКолонка = "ОбъектыУчетаСпособРаспределения" Тогда
				ВыбранноеЗначение = ТекущаяСтрока.СпособРаспределения;
			ИначеЕсли ТекущаяКолонка = "ОбъектыУчетаТипРаспределения" Тогда
				ВыбранноеЗначение = ТекущаяСтрока.ТипРаспределения;
			ИначеЕсли ТекущаяКолонка = "ОбъектыУчетаОбъектУчета" Тогда
				ВыбранноеЗначение = ТекущаяСтрока.ОбъектУчета;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеДублейСтрок()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость колонок таблицы "Объекты учета".
//
Процедура УстановитьВидимостьКолонокТаблицыОбъектыУчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	КолонкаТипРаспределения = Элементы.ОбъектыУчета.ПодчиненныеЭлементы.ОбъектыУчетаТипРаспределения;
	
	СтрокиПоПлощади = Объект.ОбъектыУчета.НайтиСтроки(Новый Структура("СпособРаспределения", Форма.мОсновныеСпособыРаспределения.ПоПлощади));
	СтрокиПоЖильцам = Объект.ОбъектыУчета.НайтиСтроки(Новый Структура("СпособРаспределения", Форма.мОсновныеСпособыРаспределения.ПоЖильцам));
	СтрокиПоУслугам = Объект.ОбъектыУчета.НайтиСтроки(Новый Структура("СпособРаспределения", Форма.мОсновныеСпособыРаспределения.ПоУслугам));
	
	Если СтрокиПоПлощади.Количество() + СтрокиПоЖильцам.Количество() + СтрокиПоУслугам.Количество() >= 1 Тогда
		КолонкаТипРаспределения.Видимость = Истина;
	Иначе
		КолонкаТипРаспределения.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьОбъема = Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъему")
					  ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме");
	ВидимостьСуммы  = Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоСумме") 
					  ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме");
	
	Элементы.ОбъектыУчетаКоличество.Видимость = ВидимостьОбъема;
	Элементы.ОбъектыУчетаСумма.Видимость      = ВидимостьСуммы;
	
КонецПроцедуры // УстановитьВидимостьКолонокТаблицыОбъектыУчета()

&НаКлиенте
// Устанавливает доступность колонок таблицы "Объекты учета".
//
Процедура УстановитьДоступностьКолонокТаблицыОбъектовУчета(СпособРаспределения = Неопределено)
	
	Элементы.ОбъектыУчета.ПодчиненныеЭлементы.ОбъектыУчетаТипРаспределения.ТолькоПросмотр = Истина;
	Если Объект.ОбъектыУчета.Количество() > 0 Тогда
		Если СпособРаспределения = Неопределено Тогда
			Попытка
				СпособРаспределения = Элементы.ОбъектыУчета.ТекущиеДанные.СпособРаспределения;
			Исключение
				СпособРаспределения = "";
			КонецПопытки;
		КонецЕсли;
		
		Если СпособРаспределения = мОсновныеСпособыРаспределения.ПоПлощади
		 ИЛИ СпособРаспределения = мОсновныеСпособыРаспределения.ПоЖильцам
		 ИЛИ СпособРаспределения = мОсновныеСпособыРаспределения.ПоУслугам Тогда
			Элементы.ОбъектыУчета.ПодчиненныеЭлементы.ОбъектыУчетаТипРаспределения.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКолонокТаблицыОбъектовУчета()

&НаКлиенте
// Предназначена для установления типа значения поля ввода дополнительно параметра распределения услуги.
//
Процедура УстановитьТипПоляВводаДопПараметраРаспределения(СпособРаспределения = Неопределено)
	
	Если СпособРаспределения = Неопределено Тогда
		СпособРаспределения = Элементы.ОбъектыУчета.ТекущиеДанные.СпособРаспределения;
	КонецЕсли;
	
	ТипРаспределения = Элементы.ОбъектыУчетаСпособРаспределения;
	Значение         = Элементы.ОбъектыУчета.ТекущиеДанные.ТипРаспределения;
	
	Если СпособРаспределения = мОсновныеСпособыРаспределения.ПоПлощади
	 ИЛИ СпособРаспределения = мОсновныеСпособыРаспределения.ПоУслугам Тогда
		СтрокаТипа = ?(СпособРаспределения =  мОсновныеСпособыРаспределения.ПоПлощади,
					   "СправочникСсылка.УПЖКХ_ВидыПлощадей",
					   "СправочникСсылка.КВП_Услуги");
		
		ТипРаспределения.КнопкаВыбора         = Истина;
		ТипРаспределения.КнопкаОткрытия       = Истина;
		ТипРаспределения.КнопкаСпискаВыбора   = Ложь;
		
		ТипРаспределения.ОграничениеТипа = Новый ОписаниеТипов(СтрокаТипа);
		Если СпособРаспределения = мОсновныеСпособыРаспределения.ПоПлощади И НЕ ТипЗнч(Значение) = Тип("СправочникСсылка.УПЖКХ_ВидыПлощадей") Тогда
			Значение = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
		ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения.ПоУслугам И НЕ ТипЗнч(Значение) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			Значение = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.ОбъектыУчета.ТекущиеДанные.ТипРаспределения = ТипРаспределения.ОграничениеТипа.ПривестиЗначение(Значение);
		
		Элементы.ОбъектыУчетаТипРаспределения.РежимВыбораИзСписка = Ложь;
		ТипРаспределения.ВыбиратьТип = Ложь;
		
		Элементы.ОбъектыУчетаТипРаспределения.СписокВыбора.Очистить();
		
	ИначеЕсли СпособРаспределения = мОсновныеСпособыРаспределения.ПоЖильцам Тогда
		ТипРаспределения.КнопкаВыбора         = Ложь;
		ТипРаспределения.КнопкаОткрытия       = Ложь;
		ТипРаспределения.КнопкаСпискаВыбора   = Истина;
		
		ТипРаспределения.ОграничениеТипа                     = Новый ОписаниеТипов("Строка");
		Значение                                             = ?(ТипЗнч(Значение) = Тип("Строка"), Значение, "");
		Элементы.ОбъектыУчета.ТекущиеДанные.ТипРаспределения = ТипРаспределения.ОграничениеТипа.ПривестиЗначение(Значение);
		ТипРаспределения.ВыбиратьТип                         = Ложь;
		
		Элементы.ОбъектыУчетаТипРаспределения.СписокВыбора.Очистить();
		СписокТиповРаспределения = мТипыРаспределения.ПропорциональноКоличествуЖильцов;
		Для Каждого ТипРаспределения Из СписокТиповРаспределения Цикл
			Элементы.ОбъектыУчетаТипРаспределения.СписокВыбора.Добавить(ТипРаспределения);
		КонецЦикла;
		
		Элементы.ОбъектыУчетаТипРаспределения.РежимВыбораИзСписка = Истина;
		
	Иначе
		ТипРаспределения.ОграничениеТипа                          = Новый ОписаниеТипов("Неопределено");
		Значение                                                  = Неопределено;
		Элементы.ОбъектыУчета.ТекущиеДанные.ТипРаспределения      = ТипРаспределения.ОграничениеТипа.ПривестиЗначение(Значение);
		ТипРаспределения.ВыбиратьТип                              = Ложь;
		Элементы.ОбъектыУчетаТипРаспределения.РежимВыбораИзСписка = Ложь;
		
		Элементы.ОбъектыУчетаТипРаспределения.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипПоляВводаДопПараметраРаспределения()

&НаКлиенте
// Процедура пересчитывает итоги таблицы распределения при изменении строки в ней.
//
Процедура РасчетИтоговПриИзмененииСтрокиТаблицыРаспределения()
	
	ТекущиеДанные = Элементы.ОбъектыУчета.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ОтборСтрок = Новый Структура("ОбъектУчета, Услуга, СпособРаспределения, ТипРаспределения", 
																			ТекущиеДанные.ОбъектУчета, ТекущиеДанные.Услуга, ТекущиеДанные.СпособРаспределения, ТекущиеДанные.ТипРаспределения);
		ПересчитатьИтогиВТаблицеРаспределения(ОтборСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура производит пересчет итоговых значений количества и суммы ТЧ "ТаблицаРаспределения".
//
Процедура ПересчитатьИтогиВТаблицеРаспределения(СтруктураОтбора)
	
	мИтогКоличествоРаспределения = 0;
	мИтогСуммаРаспределения      = 0;
	
	СтрокиОтбора = Объект.ТаблицаРаспределения.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
		мИтогКоличествоРаспределения = мИтогКоличествоРаспределения + СтрокаОтбора.Количество;
		мИтогСуммаРаспределения = мИтогСуммаРаспределения + СтрокаОтбора.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево, "ЛицевойСчет");
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мКопированиеСтрок = Ложь;
	
	мОсновныеСпособыРаспределения = ПолучитьСтруктуруОсновныхСпособовРаспределения();
	
	мТипыРаспределения = ЗаполнитьСтруктуруТиповРаспределенияПоЛицевымСчетам();
	
	мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, 
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
		Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме"); 
		
	Иначе
		ЗаполнитьДанныеОбъектаНаСервере();
		УстановитьВидимостьКолонокТаблицыОбъектыУчета(ЭтаФорма);
	КонецЕсли;
	
	ВариантРаспределенияПередИзменением = Объект.ВариантРаспределения;
	
	ЗаполнитьСписокСпособовРаспределенияПоЛицевымСчетам(Элементы.ОбъектыУчета.ПодчиненныеЭлементы.ОбъектыУчетаСпособРаспределения);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	УстановитьТочностьОбъемовНачислений();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеОбъектаНаСервере();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ВариантРаспределения".
Процедура ВариантРаспределенияПриИзменении(Элемент)
	
	Если НЕ ВариантРаспределенияПередИзменением = Объект.ВариантРаспределения
	   И (Объект.ТаблицаРаспределения.Итог("Количество") > 0
	 ИЛИ Объект.ТаблицаРаспределения.Итог("Сумма") > 0) Тогда
		
		ВопросОчисткиТаблицыРаспределения = Новый ОписаниеОповещения("ЗавершениеВопросОчисткиРезультатовРаспределения", ЭтаФорма);
		ПоказатьВопрос(ВопросОчисткиТаблицыРаспределения, "Результаты распределения будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьКолонокТаблицыОбъектыУчета(ЭтаФорма);
	ВариантРаспределенияПередИзменением = Объект.ВариантРаспределения;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТаблицыОбъектыУчета

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ОбъектыУчета".
Процедура ОбъектыУчетаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаТаблицуРаспределения();
	УстановитьДоступностьКолонокТаблицыОбъектовУчета();
	
	Если Объект.ОбъектыУчета.Количество() > 0 Тогда
		Если НЕ ПустаяСтрока(Элемент.ТекущиеДанные.СпособРаспределения) Тогда
			УстановитьТипПоляВводаДопПараметраРаспределения(Элемент.ТекущиеДанные.СпособРаспределения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ОбъектыУчета".
Процедура ОбъектыУчетаПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиВТаблицеРаспределения(Элементы.ОбъектыУчета.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "бъектыУчетаОбъектУчета".
Процедура ОбъектыУчетаОбъектУчетаПриИзменении(Элемент)
	
	УстановитьОтборНаТаблицуРаспределения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ОбъектыУчетаОбъектУчета".
Процедура ОбъектыУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяКолонка = Элемент.Имя;
	Если НЕ Элементы.ОбъектыУчета.ТекущиеДанные.СпособРаспределения = ВыбранноеЗначение Тогда
		
		Если ТекущаяКолонка = "ОбъектыУчетаСпособРаспределения" Тогда
			УстановитьТипПоляВводаДопПараметраРаспределения(ВыбранноеЗначение);
			УстановитьДоступностьКолонокТаблицыОбъектовУчета(ВыбранноеЗначение);
		КонецЕсли;
		ПроверитьНаличиеДублейСтрок(Элементы.ОбъектыУчета.ТекущиеДанные, ТекущаяКолонка, ВыбранноеЗначение);
		ИзменитьЗначениеСтрокВТаблицеРаспределения(Элементы.ОбъектыУчета.ТекущиеДанные, Элемент, ВыбранноеЗначение, ТекущаяКолонка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "ОбъектУчета" ТЧ "ОбъектыУчета".
//
Процедура ОбъектыУчетаОбъектУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяКолонка = Элемент.Имя;
	ТекДанные      = Элементы.ОбъектыУчета.ТекущиеДанные;
	
	ПроверитьНаличиеДублейСтрок(ТекДанные, ТекущаяКолонка, ВыбранноеЗначение);
	
	Если НЕ ТекДанные.ОбъектУчета = ВыбранноеЗначение Тогда
		
		// Изменение данных в таблице распределения по текущей строке.
		Если ИмеютсяСтрокиДляРедактированияВТаблицеРаспределения(ТекДанные) Тогда
			
			// Если строки для редактирования есть, спрашиваем пользователя об очистке. Если он не согласен,
			// возвращаем предыдущее значение.
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = "При изменении здания, сооружения таблица распределения будет очищена. Продолжить?";
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПредыдущийОбъект", ТекДанные.ОбъектУчета);
			ДопПараметры.Вставить("НовыйОбъект",      ВыбранноеЗначение);
			ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ОбработатьВыборОтветаОбОчистке", ЭтотОбъект, ДопПараметры);
			
			ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя об очистке таблицы распределения.
//
Процедура ОбработатьВыборОтветаОбОчистке(Ответ, ДопПараметры) Экспорт
	
	ТекДанные = Элементы.ОбъектыУчета.ТекущиеДанные;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокиВТаблицеРаспределения(ТекДанные);
		ТекДанные.ОбъектУчета = ДопПараметры.НовыйОбъект;
	Иначе
		ТекДанные.ОбъектУчета = ДопПараметры.ПредыдущийОбъект;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОтветаОбОчистке()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектыУчетаУслуга".
//
Процедура ОбъектыУчетаУслугаПриИзменении(Элемент)
	
	УстановитьОтборНаТаблицуРаспределения();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки табличной части.
//
Процедура ОбъектыУчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	мКопированиеСтрок = Копирование;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" строки табличной части.
//
Процедура ОбъектыУчетаПослеУдаления(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОбъектыУчета(ЭтаФорма);
	
КонецПроцедуры // ОбъектыУчетаПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" поля ввода даты документа.
//
Процедура ОбъектыУчетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		Если мКопированиеСтрок Тогда
			Элементы.ОбъектыУчета.ТекущиеДанные.ТипРаспределения = "";
			Элементы.ОбъектыУчета.ТекущиеДанные.СпособРаспределения = "";
			мКопированиеСтрок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбъектыУчетаПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы.
//
Процедура ОбъектыУчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		УстановитьВидимостьКолонокТаблицыОбъектыУчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбъектыУчетаПриОкончанииРедактирования()

#КонецОбласти 

#Область ОбработчикиТаблицыТаблицаРаспределения

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОтборСтрок = Элементы.ТаблицаРаспределения.ОтборСтрок;
	
	// Если нет отбора в таблице распределения, то выполняется 
	// стандартная обработка.
	Если ТипЗнч(ОтборСтрок) = Тип("ФиксированнаяСтруктура")
		И ОтборСтрок.Свойство("ОбъектУчета")
		И НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ОбъектУчета = ОтборСтрок.ОбъектУчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ТаблицаРаспределенияКвартира".
Процедура ТаблицаРаспределенияКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ТаблицаРаспределенияВладелец".
Процедура ТаблицаРаспределенияВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаРаспределенияЛицевойСчет".
Процедура ТаблицаРаспределенияЛицевойСчетПриИзменении(Элемент)
	
	ЗаполнитьДанныеОбъектаВСтроке(Элементы.ТаблицаРаспределения.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ТаблицаРаспределенияЛицевойСчет".
Процедура ТаблицаРаспределенияЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОтборСтрок = Элементы.ТаблицаРаспределения.ОтборСтрок;
	
	// Если нет отбора в таблице распределения, то выполняется 
	// стандартная обработка.
	Если ТипЗнч(ОтборСтрок) = Тип("ФиксированнаяСтруктура")
		И ОтборСтрок.Свойство("ОбъектУчета") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокЛицевыхСчетов = ПолучитьСписокЛицевыхСчетовЗдания(ОтборСтрок.ОбъектУчета);
		
		НачальнаяСтрока = Неопределено;
		
		ТекущиеДанные = Элементы.ТаблицаРаспределения.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда
			НачальнаяСтрока = ТекущиеДанные.ЛицевойСчет;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", СписокЛицевыхСчетов);
		
		// Готовим форму выбора.
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", Новый Структура("ТекущаяСтрока, Отбор", НачальнаяСтрока, СтруктураОтбора), Элемент);
		
		ФормаВыбора.Открыть();
		
		ТаблицаРаспределенияЛицевойСчетПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ТаблицаРаспределенияЛицевойСчет".
Процедура ТаблицаРаспределенияЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРаспределения.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ТекстСообщения = "";
		врСтандартнаяОбработка = Истина;
		УПЖКХ_РаботаСЛицевымиСчетами.ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов(ВыбранноеЗначение,
		                                         Объект.Дата, врСтандартнаяОбработка,, ТекстСообщения);
		
		Если Не врСтандартнаяОбработка Тогда
			ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопроса", ЭтаФорма, ДопПараметры),
						   ТекстСообщения,
						   РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаРаспределенияЛицевойСчетОбработкаВыбораПродолжение(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызваного в процедуре "ОбработатьВыборЛицевогоСчета()".
Процедура ОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		ТекущиеДанные.Квартира    = ПредопределенноеЗначение("Справочник.УПЖКХ_Помещения.ПустаяСсылка");
	КонецЕсли;
	
	ТаблицаРаспределенияЛицевойСчетОбработкаВыбораПродолжение(ТекущиеДанные);
	
КонецПроцедуры // ОбработатьРезультатВопроса()

&НаКлиенте
// Процедура-продолжение процедуры "ОбработатьВыборЛицевогоСчета()".
Процедура ТаблицаРаспределенияЛицевойСчетОбработкаВыбораПродолжение(ТекущиеДанные)
	
	ТекущиеДанныеОбъекта              = Элементы.ОбъектыУчета.ТекущиеДанные;
	ТекущиеДанные.Услуга              = ТекущиеДанныеОбъекта.Услуга;
	ТекущиеДанные.СпособРаспределения = ТекущиеДанныеОбъекта.СпособРаспределения;
	
	ЗаполнитьДанныеОбъектаВСтроке(Элементы.ТаблицаРаспределения.ТекущаяСтрока);
	
КонецПроцедуры // ТаблицаРаспределенияЛицевойСчетОбработкаВыбораПродолжение()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки табличной части "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ОбъектыУчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице объектов учета отсутствуют данные для распределения затрат на лицевые счета.", Отказ);
	Иначе
		ТекДанные = Элементы.ОбъектыУчета.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекДанные.ОбъектУчета) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекДанные.НомерСтроки + " таблицы объектов учета не заполнено здание, сооружение.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" строки табличной части "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаРаспределения.ТекущиеДанные;
	
	Если НоваяСтрока И (Не ЗначениеЗаполнено(ТекущиеДанные.ЛицевойСчет)) Тогда
		
		Если Не ОтменаРедактирования Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РасчетИтоговПриИзмененииСтрокиТаблицыРаспределения();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" строки табличной части "ТаблицаРаспределения".
Процедура ТаблицаРаспределенияПослеУдаления(Элемент)
	
	РасчетИтоговПриИзмененииСтрокиТаблицыРаспределения();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ЗаполнитьАвтоматически".
Процедура ЗаполнитьАвтоматически(Команда)
	
	Если Не Объект.ТаблицаРаспределения.Количество() = 0 Тогда
		
		ВопросОчисткиТаблицыРаспределения = Новый ОписаниеОповещения("ЗавершениеВопросОчисткиТаблицыРаспределения", ЭтаФорма);
		ПоказатьВопрос(ВопросОчисткиТаблицыРаспределения, "Таблица распределения будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	Элементы.ТаблицаРаспределения.ОтборСтрок = Новый ФиксированнаяСтруктура;
	мИтогКоличествоРаспределения = 0;
	мИтогСуммаРаспределения      = 0;
	
	ЗаполнитьТаблицуРаспределения();
	
	ВопросРаспределенияСуммПоОбъектам = Новый ОписаниеОповещения("ЗавершениеВопросРаспределенияСуммПоОбъектам", ЭтаФорма);
	ПоказатьВопрос(ВопросРаспределенияСуммПоОбъектам, "Распределить суммы по объектам?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик завершения ответа пользователя на вопрос очистки таблицы распределения.
//
Процедура ЗавершениеВопросОчисткиТаблицыРаспределения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаРаспределения.Очистить();
		
		Элементы.ТаблицаРаспределения.ОтборСтрок = Новый ФиксированнаяСтруктура;
		мИтогКоличествоРаспределения = 0;
		мИтогСуммаРаспределения      = 0;
		
		ЗаполнитьТаблицуРаспределения();
		
		ВопросРаспределенияСуммПоОбъектам = Новый ОписаниеОповещения("ЗавершениеВопросРаспределенияСуммПоОбъектам", ЭтаФорма);
		ПоказатьВопрос(ВопросРаспределенияСуммПоОбъектам, "Распределить суммы по объектам?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик завершения ответа пользователя на вопрос очистки результатов таблицы распределения.
//
Процедура ЗавершениеВопросОчисткиРезультатовРаспределения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьРезультатыРаспределения();
		УстановитьВидимостьКолонокТаблицыОбъектыУчета(ЭтаФорма);
		ВариантРаспределенияПередИзменением = Объект.ВариантРаспределения;
	Иначе
		Объект.ВариантРаспределения = ВариантРаспределенияПередИзменением;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Очищает результаты в таблице распределения.
//
Процедура ОчиститьРезультатыРаспределения() 
	
	ВрТаблицаРаспределения = Объект.ТаблицаРаспределения.Выгрузить();
	ВрТаблицаРаспределения.ЗаполнитьЗначения(0, "Количество, Тариф, Сумма");
	Объект.ТаблицаРаспределения.Загрузить(ВрТаблицаРаспределения);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик завершения ответа пользователя на вопрос распределения сумм по объектам.
//
Процедура ЗавершениеВопросРаспределенияСуммПоОбъектам(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РаспределитьСуммы();
		УстановитьОтборНаТаблицуРаспределения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьИспользоватьОтбор".
Процедура ЗаполнитьИспользоватьОтбор(Команда)
	
	ТекущаяСтрока = Элементы.ОбъектыУчета.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРаспределенияПоОтбору(Элементы.ОбъектыУчета.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Рассчитать".
Процедура Рассчитать(Команда)
	
	РаспределитьСуммы();
	УстановитьОтборНаТаблицуРаспределения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ТаблицаРаспределенияСортироватьПоВозрастанию".
Процедура ТаблицаРаспределенияСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ТаблицаРаспределения", Элементы.ТаблицаРаспределения.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ТаблицаРаспределенияСортироватьПоУбыванию".
Процедура ТаблицаРаспределенияСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ТаблицаРаспределения", Элементы.ТаблицаРаспределения.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
