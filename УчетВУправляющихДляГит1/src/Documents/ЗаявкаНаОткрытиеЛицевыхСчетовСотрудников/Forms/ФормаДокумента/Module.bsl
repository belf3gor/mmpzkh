#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяСтрокаЛицевыеСчета; // номер текущей строки таблицы ЛицевыеСчета

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	// Первоначальное заполнение объекта.
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		Если Не Параметры.Свойство("ЗначенияЗаполнения") Или Не Параметры.ЗначенияЗаполнения.Свойство("Подразделение") Тогда
			// Подразделение (пустое значение) может быть передано как параметр заполнения из обработки "Обмен с банками".
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере("Объект");
	Иначе
		// Если это открытие уже существующей заявки, 
		// то оно может выполняться в режиме добавления строк-анкет.
		Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") Тогда
			МассивФизическихЛицДляЗаполнения = Новый Массив;
			Для Каждого ПараметрФизическоеЛицо Из Параметры.ЗначенияЗаполнения.Сотрудники Цикл
				НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПараметрФизическоеЛицо));
				Если НайденныеСтроки.Количество() = 0 Тогда
					МассивФизическихЛицДляЗаполнения.Добавить(ПараметрФизическоеЛицо);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивФизическихЛицДляЗаполнения.Количество() > 0 Тогда
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ОбменСБанкамиПоЗарплатнымПроектам.СоздатьВТСостоянияОткрытияЛицевыхСчетовФизическихЛиц(
					Запрос.МенеджерВременныхТаблиц, Истина,
					Объект.Организация, Объект.ЗарплатныйПроект, Параметры.ЗначенияЗаполнения.ДатаПолученияДанных, 
					Объект.Подразделение, МассивФизическихЛицДляЗаполнения, Объект.Ссылка);
				
				ДанныеСотрудников = ОбменСБанкамиПоЗарплатнымПроектам.ДанныеСотрудниковДляОткрытияЛицевыхСчетов(
					Запрос.МенеджерВременныхТаблиц, Параметры.ЗначенияЗаполнения.ДатаПолученияДанных,
					Объект.Организация, Объект.ЗарплатныйПроект, МассивФизическихЛицДляЗаполнения, Объект.Ссылка);
				
				Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
					ЗаполнитьЗначенияСвойств(Объект.Сотрудники.Добавить(), ДанныеСотрудника);
				КонецЦикла;
				
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокСистемРасчетовНаСервере();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	УстановитьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбменСБанкамиПоЗарплатнымПроектамКлиент.ОбновитьКомандыОбменаОбъекта(ЭтотОбъект, Объект.ЗарплатныйПроект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияСохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияУстановитьОбъектЗафиксирован();
	ФиксацияОбновитьФиксациюВФорме();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		СтрокиДокумента = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", Параметр.ФизическоеЛицо));
		Если СтрокиДокумента.Количество() > 0 Тогда
			МассивСотрудников = Новый Массив;
			МассивСотрудников.Добавить(Параметр.ФизическоеЛицо);
			ОбновитьВторичныеДанныеДокумента(МассивСотрудников);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененЗарплатныйПроект" И Параметр = Объект.ЗарплатныйПроект Тогда
		УстановитьВидимостьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ЗарплатныйПроект) Тогда
		ЗаполнитьЗарплатныйПроектНаСервере();
		ОбменСБанкамиПоЗарплатнымПроектамКлиент.ОбновитьКомандыОбменаОбъекта(ЭтотОбъект, Объект.ЗарплатныйПроект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатныйПроектПриИзменении(Элемент)
	
	ЗаполнитьСписокСистемРасчетовНаСервере();
	ОбменСБанкамиПоЗарплатнымПроектамКлиент.ОбновитьКомандыОбменаОбъекта(ЭтотОбъект, Объект.ЗарплатныйПроект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛицевыеСчета

&НаКлиенте
Процедура ЛицевыеСчетаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЛицевыеСчетаПриАктивизации", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаФизическоеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтрокуНаСервере(ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаЯвляетсяЗарплатнойКартойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЯвляетсяЗарплатнойКартой Тогда
		ТекущиеДанные.ОплатаЗарплатнойКарты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗарплатнойКарты.ОплачиваетсяПредприятием");
	Иначе
		ТекущиеДанные.ОплатаЗарплатнойКарты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗарплатнойКарты.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаОплатаЗарплатнойКарты",
		"Доступность",
		ТекущиеДанные.ЯвляетсяЗарплатнойКартой);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаИспользованиеДоставкиКорреспонденцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИспользованиеДоставкиКорреспонденции Тогда
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Email");
	Иначе
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.НеРассылать");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаСпособДоставкиЭлектроннойПочтой",
		"Доступность",
		ТекущиеДанные.ИспользованиеДоставкиКорреспонденции);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаСпособДоставкиПочтой",
		"Доступность",
		ТекущиеДанные.ИспользованиеДоставкиКорреспонденции);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресДляИнформирования",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Почтой"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресЭлектроннойПочты",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Email"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСпособДоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Email") Тогда
		ТекущиеДанные.АдресЭлектроннойПочты = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресДляИнформирования",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Почтой"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресЭлектроннойПочты",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Email"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаЯвляетсяУчастникомБонуснойПрограммыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы Тогда
		ТекущиеДанные.БонуснаяПрограмма = ПредопределенноеЗначение("Перечисление.БонусныеПрограммыБанков.ПустаяСсылка");
		ТекущиеДанные.НомерУчастникаБонуснойПрограммы = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаБонуснаяПрограмма",
		"Доступность",
		ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаНомерУчастникаБонуснойПрограммы",
		"Доступность",
		ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы 
			И ТекущиеДанные.БонуснаяПрограмма = ПредопределенноеЗначение("Перечисление.БонусныеПрограммыБанков.AE"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаБонуснаяПрограммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.БонуснаяПрограмма = ПредопределенноеЗначение("Перечисление.БонусныеПрограммыБанков.AE") Тогда
		ТекущиеДанные.НомерУчастникаБонуснойПрограммы = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаНомерУчастникаБонуснойПрограммы",
		"Доступность",
		ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы 
			И ТекущиеДанные.БонуснаяПрограмма = ПредопределенноеЗначение("Перечисление.БонусныеПрограммыБанков.AE"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаИспользованиеМобильногоБанкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ИспользованиеМобильногоБанка Тогда
		ТекущиеДанные.ТарифМобильногоБанка = ПредопределенноеЗначение("Перечисление.ТарифыМобильногоБанка.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаТарифМобильногоБанка",
		"Доступность",
		ТекущиеДанные.ИспользованиеМобильногоБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаКатегорияСотрудникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие") Тогда
		ТекущиеДанные.ИспользуетсяОвердрафт = Ложь;
		ТекущиеДанные.ЯвляетсяСотрудникомБанка = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаИспользуетсяОвердрафт",
		"Доступность",
		ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаЯвляетсяСотрудникомБанка",
		"Доступность",
		ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие")
			И ТекущиеДанные.ИспользуетсяОвердрафт);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаИспользуетсяОвердрафтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ИспользуетсяОвердрафт Тогда
		ТекущиеДанные.ЯвляетсяСотрудникомБанка = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаЯвляетсяСотрудникомБанка",
		"Доступность",
		ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие")
			И ТекущиеДанные.ИспользуетсяОвердрафт);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаМестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", ТекущиеДанные.МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("ЛицевыеСчетаМестоРожденияНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаМестоРожденияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
		ТекущиеДанные.МестоРождения = Результат;
		ТекущиеДанные.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Результат);
	КонецЕсли;
	
	ФиксацияЗафиксироватьИзменениеРеквизита("МестоРождения");
	ФиксацияЗафиксироватьИзменениеРеквизита("МестоРожденияПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаАдресМестаРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "АдресМестаРаботы");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "АдресМестаРаботыПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаАдресДляИнформированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "АдресДляИнформирования");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "АдресДляИнформированияПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаАдресПоПропискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "АдресПоПрописке");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "АдресПоПропискеПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаАдресМестаПроживанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "АдресМестаПроживания");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "АдресМестаПроживанияПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаТелефонДомашнийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "ТелефонДомашний");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "ТелефонДомашнийПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаТелефонРабочийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "ТелефонРабочий");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "ТелефонРабочийПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаНомерМобильногоТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица"));
	ПараметрыЭлемента.Вставить("ИмяКИ", "НомерМобильногоТелефона");
	ПараметрыЭлемента.Вставить("ИмяКИПредставление", "НомерМобильногоТелефонаПредставление");
	
	ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументСерия, Элементы.ДокументыФизическихЛицСерия, ЭтотОбъект);
	СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументНомер, Элементы.ДокументыФизическихЛицНомер, ЭтотОбъект);
	
	ФиксацияЗафиксироватьИзменениеРеквизита("ДокументВид");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументВид) Тогда
		ТекущиеДанные.ДокументВид = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументСерия, Элемент, ЭтотОбъект);
	
	ФиксацияЗафиксироватьИзменениеРеквизита("ДокументСерия");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицНомерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументНомер, Элемент, ЭтотОбъект);
	
	ФиксацияЗафиксироватьИзменениеРеквизита("ДокументНомер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаВидМиграционногоДокументаПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционногоДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаНомерМиграционногоДокументаПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционногоДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаДатаНачалаПребыванияМиграционногоДокументаПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционногоДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаДатаОкончанияПребыванияМиграционногоДокументаПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционногоДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаНомерМиграционнойКартыПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционнойКарты()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаДатаНачалаПребыванияМиграционнойКартыПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционнойКарты()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаДатаОкончанияПребыванияМиграционнойКартыПриИзменении(Элемент)
	ЛицевыеСчетаПриИзмененииПолейМиграционнойКарты()
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСистемаРасчетовПоБанковскимКартамПриИзменении(Элемент)
	ИдентификаторыДизайна.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаКодВидаВкладаПриИзменении(Элемент)
	ИдентификаторыДизайна.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаКодПодвидаВкладаПриИзменении(Элемент)
	ИдентификаторыДизайна.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаВалютаВкладаПриИзменении(Элемент)
	ИдентификаторыДизайна.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаИдентификаторДизайнаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИдентификаторыДизайна.Количество() = 0 Тогда
		ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ИД = ИдентификаторыДизайнаНаСервереБезКонтекста(
			ТекущиеДанные.СистемаРасчетовПоБанковскимКартам, ТекущиеДанные.КодВидаВклада, 
			ТекущиеДанные.КодПодвидаВклада, ТекущиеДанные.ВалютаВклада, Объект.Сотрудники, Объект.Ссылка);
		ИдентификаторыДизайна.ЗагрузитьЗначения(ИД);
		Элемент.СписокВыбора.ЗагрузитьЗначения(ИД);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаИдентификаторДизайнаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ИдентификаторыДизайна.НайтиПоЗначению(Текст) = Неопределено Тогда
		ИдентификаторыДизайна.Добавить(Текст);
		Элемент.СписокВыбора.Добавить(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаПриложениеКартаКодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ПриложениеКартаКод) Тогда
		ТекущиеДанные.ПриложениеКартаПараметры = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаПриложениеКартаПараметры",
		"Доступность",
		Не ПустаяСтрока(ТекущиеДанные.ПриложениеКартаКод));
		
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаЭмбоссированныйТекст3ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьЦветЭмбоссированногоТекста(Элементы, ТекущиеДанные, ЦветСтиляПоясняющийОшибкуТекст, ЦветТекстаФормы, Элемент.Имя, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаЭмбоссированныйТекст2ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьЦветЭмбоссированногоТекста(Элементы, ТекущиеДанные, ЦветСтиляПоясняющийОшибкуТекст, ЦветТекстаФормы, Элемент.Имя, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаЭмбоссированныйТекст1ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьЦветЭмбоссированногоТекста(Элементы, ТекущиеДанные, ЦветСтиляПоясняющийОшибкуТекст, ЦветТекстаФормы, Элемент.Имя, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСтраховойНомерПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтображениеПоляСтраховойНомерПФР(ТекущиеДанные, Элемент);
	
	ФиксацияЗафиксироватьИзменениеРеквизита("СтраховойНомерПФР");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда)
	ОтменитьВсеИсправленияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСотрудников(Команда)
	ОбновитьВторичныеДанныеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеСотрудника(Команда)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникФизическогоЛица = СотрудникФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, Объект.Организация, Объект.Дата);
	ПараметрыОткрытия = Новый Структура("Ключ", СотрудникФизическогоЛица);
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЭлементаСправочникаСотрудники");
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументПодтверждение(Команда)
	ОбменСБанкамиПоЗарплатнымПроектамКлиент.ОткрытьДокументПодтверждение(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьДокументПодтверждение(Команда)
	
	ОткрытьФорму("Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтправленныйДокумент(Команда)
	
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ОбменСБанкамиПоЗарплатнымПроектам.КомандыОбменаДополнитьФормуОбъекта(ЭтотОбъект);
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтотОбъект, ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ФиксацияЭлементыОбработчикаЗафиксироватьИзменение());
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	
	ОбновитьВторичныеДанныеДокумента();
	
	ФиксацияОбновитьФиксациюВФорме();
	
	ОбменСБанкамиПоЗарплатнымПроектам.ГруппаПодтверждениеИзБанкаДополнитьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЛицевыеСчетаУстановитьОбязательностьПолей(ТекущиеДанные)
	
	ЛицевыеСчетаУстановитьОбязательностьПолейМиграционногоДокумента(Элементы, ТекущиеДанные);
	ЛицевыеСчетаУстановитьОбязательностьПолейМиграционнойКарты(Элементы, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаПриИзмененииПолейМиграционногоДокумента()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЛицевыеСчетаУстановитьОбязательностьПолейМиграционногоДокумента(Элементы, ТекущиеДанные)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛицевыеСчетаУстановитьОбязательностьПолейМиграционногоДокумента(Элементы, ТекущиеДанные)
	
	ОбязательностьПолейМиграционногоДокумента = 
		ЗначениеЗаполнено(ТекущиеДанные.ВидМиграционногоДокумента)
		Или Не ПустаяСтрока(ТекущиеДанные.НомерМиграционногоДокумента)
		Или ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаПребыванияМиграционногоДокумента)
		Или ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияПребыванияМиграционногоДокумента);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаВидМиграционногоДокумента",                     "ОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента И Не ЗначениеЗаполнено(ТекущиеДанные.ВидМиграционногоДокумента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаНомерМиграционногоДокумента",                   "ОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента И ПустаяСтрока(ТекущиеДанные.НомерМиграционногоДокумента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаНачалаПребыванияМиграционногоДокумента",    "ОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаПребыванияМиграционногоДокумента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаОкончанияПребыванияМиграционногоДокумента", "ОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияПребыванияМиграционногоДокумента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаВидМиграционногоДокумента",                     "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаНомерМиграционногоДокумента",                   "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаНачалаПребыванияМиграционногоДокумента",    "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаОкончанияПребыванияМиграционногоДокумента", "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционногоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаПриИзмененииПолейМиграционнойКарты()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЛицевыеСчетаУстановитьОбязательностьПолейМиграционнойКарты(Элементы, ТекущиеДанные)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛицевыеСчетаУстановитьОбязательностьПолейМиграционнойКарты(Элементы, ТекущиеДанные)
	
	ОбязательностьПолейМиграционнойКарты = 
		Не ПустаяСтрока(ТекущиеДанные.НомерМиграционнойКарты)
		Или ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаПребыванияМиграционнойКарты)
		Или ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияПребыванияМиграционнойКарты);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаНомерМиграционнойКарты",                   "ОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты И ПустаяСтрока(ТекущиеДанные.НомерМиграционнойКарты));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаНачалаПребыванияМиграционнойКарты",    "ОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаПребыванияМиграционнойКарты));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаОкончанияПребыванияМиграционнойКарты", "ОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияПребыванияМиграционнойКарты));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаНомерМиграционнойКарты",                   "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаНачалаПребыванияМиграционнойКарты",    "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаДатаОкончанияПребыванияМиграционнойКарты", "АвтоОтметкаНезаполненного", ОбязательностьПолейМиграционнойКарты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветЭмбоссированногоТекста(Элементы, ТекущиеДанные, ЦветСтиляПоясняющийОшибкуТекст, ЦветТекстаФормы, ИмяРедактируемогоЭлемента = Неопределено, ТекстРедактирования = Неопределено)
	
	// Подсветим эмбоссированный текст, если максимальная длина превышает 19 символов.
	Если ИмяРедактируемогоЭлемента <> Неопределено И СтрНайти(ИмяРедактируемогоЭлемента, "ЭмбоссированныйТекст1") > 0 Тогда
		ДлинаЭмбоссированногоТекста = СтрДлина(ТекстРедактирования);
	Иначе
		ДлинаЭмбоссированногоТекста = СтрДлина(ТекущиеДанные.ЭмбоссированныйТекст1);
	КонецЕсли;
	Если ИмяРедактируемогоЭлемента <> Неопределено И СтрНайти(ИмяРедактируемогоЭлемента, "ЭмбоссированныйТекст2") > 0 Тогда
		ДлинаЭмбоссированногоТекста = ДлинаЭмбоссированногоТекста + СтрДлина(ТекстРедактирования);
	Иначе
		ДлинаЭмбоссированногоТекста = ДлинаЭмбоссированногоТекста + СтрДлина(ТекущиеДанные.ЭмбоссированныйТекст2);
	КонецЕсли;
	Если ИмяРедактируемогоЭлемента <> Неопределено И СтрНайти(ИмяРедактируемогоЭлемента, "ЭмбоссированныйТекст3") > 0 Тогда
		ДлинаЭмбоссированногоТекста = ДлинаЭмбоссированногоТекста + СтрДлина(ТекстРедактирования);
	Иначе
		ДлинаЭмбоссированногоТекста = ДлинаЭмбоссированногоТекста + СтрДлина(ТекущиеДанные.ЭмбоссированныйТекст3);
	КонецЕсли;
	Если ДлинаЭмбоссированногоТекста > 19 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст1", "ЦветТекста") <> ЦветСтиляПоясняющийОшибкуТекст Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст1", "ЦветТекста", ЦветСтиляПоясняющийОшибкуТекст);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст2", "ЦветТекста") <> ЦветСтиляПоясняющийОшибкуТекст Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст2", "ЦветТекста", ЦветСтиляПоясняющийОшибкуТекст);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст3", "ЦветТекста") <> ЦветСтиляПоясняющийОшибкуТекст Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст3", "ЦветТекста", ЦветСтиляПоясняющийОшибкуТекст);
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст1", "ЦветТекста") <> ЦветТекстаФормы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст1", "ЦветТекста", ЦветТекстаФормы);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст2", "ЦветТекста") <> ЦветТекстаФормы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст2", "ЦветТекста", ЦветТекстаФормы);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст3", "ЦветТекста") <> ЦветТекстаФормы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛицевыеСчетаЭмбоссированныйТекст3", "ЦветТекста", ЦветТекстаФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗарплатныйПроектНаСервере()
	
	Объект.ЗарплатныйПроект = ОбменСБанкамиПоЗарплатнымПроектам.ЗарплатныйПроектПоОрганизации(Объект.Организация);
	
	ЗаполнитьСписокСистемРасчетовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличнуюЧастьФизическимиЛицамиНеИмеющихЛицевыхСчетов(ДокументОбъект.Дата);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект")
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСистемРасчетовНаСервере()
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗаполнитьСписокСистемРасчетов(Объект.ЗарплатныйПроект, Элементы, "ЛицевыеСчетаСистемаРасчетовПоБанковскимКартам");
	
	УстановитьВидимостьЭлементовНаСервере(ФорматФайлаПоЗарплатномуПроекту(Объект.ЗарплатныйПроект));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуНаСервере(НомерСтроки)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСтрокуТабличнойЧастиДаннымиДляОткрытияЛицевыхСчетов(ДокументОбъект.Дата, НомерСтроки);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект")
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	ФорматФайлаПоЗарплатномуПроекту = ФорматФайлаПоЗарплатномуПроекту(Объект.ЗарплатныйПроект);
	
	Если ФорматФайла <> ФорматФайлаПоЗарплатномуПроекту Тогда
		
		ФорматФайла = ФорматФайлаПоЗарплатномуПроекту;
		УстановитьВидимостьЭлементовНаСервере(ФорматФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовНаСервере(ФорматФайла)
	
	ОбменСБанкамиПоЗарплатнымПроектам.УстановитьВидимостьЭлементов(
			ФорматФайла,
			Элементы.ГруппаЛицевыеСчетаВсеДанные.ПодчиненныеЭлементы,
			"ЛицевыеСчета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ЭтотОбъект.ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматФайлаПоЗарплатномуПроекту(ЗарплатныйПроект)
	
	ФорматФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗарплатныйПроект, "ФорматФайла");
	Если НЕ ЗначениеЗаполнено(ФорматФайла) Тогда
		ФорматФайла = ПредопределенноеЗначение("Перечисление.ФорматыФайловОбменаПоЗарплатномуПроекту.Версия34");
	КонецЕсли;
	
	Возврат ФорматФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция СотрудникФизическогоЛица(ФизическоеЛицо, Организация, Дата)
	ОсновныеСотрудники = 
		КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
			Истина,
			Организация, 
			Дата);
	Если ОсновныеСотрудники.Количество() > 0 Тогда
		СотрудникФизическогоЛица = ОсновныеСотрудники[0].Сотрудник		
	Иначе
		СотрудникФизическогоЛица = СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицо, ,Организация)[0];
	КонецЕсли;	
	Возврат СотрудникФизическогоЛица
КонецФункции

&НаКлиенте
Процедура ЭлементКонтактнойИнформацииТЧЛицевыеСчетаНачалоВыбора(ПараметрыЭлемента, СтандартнаяОбработка, ФиксироватьЗначения = Истина)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыЭлемента.ВидКонтактнойИнформации,
		ТекущиеДанные[ПараметрыЭлемента.ИмяКИ]);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОповещения.Вставить("ФиксироватьЗначения", ФиксироватьЗначения);
	ПараметрыОповещения.Вставить("ПараметрыЭлемента", ПараметрыЭлемента);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораКИ", ЭтотОбъект, ПараметрыОповещения);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораКИ(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(РезультатОткрытияФормы) <> Тип("Структура") Тогда
		// не было изменений в данных
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	ФиксироватьЗначения = ПараметрыОповещения.ФиксироватьЗначения;
	ПараметрыЭлемента = ПараметрыОповещения.ПараметрыЭлемента;
	
	ТекущиеДанные[ПараметрыЭлемента.ИмяКИ] = РезультатОткрытияФормы.КонтактнаяИнформация;
	ТекущиеДанные[ПараметрыЭлемента.ИмяКИПредставление] = РезультатОткрытияФормы.Представление;
	
	Если ФиксироватьЗначения Тогда
		ФиксацияЗафиксироватьИзменениеРеквизита(ПараметрыЭлемента.ИмяКИ);
		ФиксацияЗафиксироватьИзменениеРеквизита(ПараметрыЭлемента.ИмяКИПредставление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаПриАктивизации()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрокаЛицевыеСчета = ТекущиеДанные.НомерСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаЛицевыеСчета = ТекущиеДанные.НомерСтроки;
	
	ЛицевыеСчетаПриАктивизацииНаСервере(
		ТекущиеДанные.ПолучитьИдентификатор(), ТекущиеДанные.СистемаРасчетовПоБанковскимКартам,
		ТекущиеДанные.КодВидаВклада, ТекущиеДанные.КодПодвидаВклада, ТекущиеДанные.ВалютаВклада);
	
	ОбработатьОтображениеПоляСтраховойНомерПФР(ТекущиеДанные, Элементы.ЛицевыеСчетаСтраховойНомерПФР);
	
КонецПроцедуры

&НаСервере
Процедура ЛицевыеСчетаПриАктивизацииНаСервере(ИдентификаторСтроки, СистемаРасчетовПоБанковскимКартам, КодВидаВклада, КодПодвидаВклада, ВалютаВклада)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЛицевыеСчетаУстановитьДоступность(ТекущиеДанные);
	ЛицевыеСчетаУстановитьОбязательностьПолей(ТекущиеДанные);
	
	УстановитьЦветЭмбоссированногоТекста(Элементы, ТекущиеДанные, ЦветСтиляПоясняющийОшибкуТекст, ЦветТекстаФормы);
	ОбновитьОтображениеПредупрежденийТЧ_ЛицевыеСчета();
	
	ИД = ИдентификаторыДизайнаНаСервереБезКонтекста(
			СистемаРасчетовПоБанковскимКартам, КодВидаВклада, КодПодвидаВклада, ВалютаВклада,
			Объект.Сотрудники, Объект.Ссылка);
	ИдентификаторыДизайна.ЗагрузитьЗначения(ИД);
	Элементы.ЛицевыеСчетаИдентификаторДизайна.СписокВыбора.ЗагрузитьЗначения(ИД);
	
КонецПроцедуры

&НаСервере
Процедура ЛицевыеСчетаУстановитьДоступность(ТекущиеДанные)
	
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументСерия, Элементы.ДокументыФизическихЛицСерия, ЭтотОбъект);
	СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(ТекущиеДанные.ДокументВид, ТекущиеДанные.ДокументНомер, Элементы.ДокументыФизическихЛицНомер, ЭтотОбъект);
	 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаОплатаЗарплатнойКарты",
		"Доступность",
		ТекущиеДанные.ЯвляетсяЗарплатнойКартой);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаСпособДоставкиЭлектроннойПочтой",
		"Доступность",
		ТекущиеДанные.ИспользованиеДоставкиКорреспонденции);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаСпособДоставкиПочтой",
		"Доступность",
		ТекущиеДанные.ИспользованиеДоставкиКорреспонденции);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресДляИнформирования",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Почтой"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаАдресЭлектроннойПочты",
		"Доступность",
		ТекущиеДанные.СпособРассылкиОтчета = ПредопределенноеЗначение("Перечисление.СпособыДоставкиКорреспонденцииБанка.Email"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаБонуснаяПрограмма",
		"Доступность",
		ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаНомерУчастникаБонуснойПрограммы",
		"Доступность",
		ТекущиеДанные.ЯвляетсяУчастникомБонуснойПрограммы 
			И ТекущиеДанные.БонуснаяПрограмма = ПредопределенноеЗначение("Перечисление.БонусныеПрограммыБанков.AE"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаТарифМобильногоБанка",
		"Доступность",
		ТекущиеДанные.ИспользованиеМобильногоБанка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаИспользуетсяОвердрафт",
		"Доступность",
		ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаЯвляетсяСотрудникомБанка",
		"Доступность",
		ТекущиеДанные.КатегорияСотрудника = ПредопределенноеЗначение("Перечисление.КатегорииСотрудниковОбменаСБанками.Прочие")
			И ТекущиеДанные.ИспользуетсяОвердрафт);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛицевыеСчетаПриложениеКартаПараметры",
		"Доступность",
		Не ПустаяСтрока(ТекущиеДанные.ПриложениеКартаКод));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторыДизайнаНаСервереБезКонтекста(СистемаРасчетов, КодВидаВклада, КодПодвидаВклада, ВалютаВклада, Знач Сотрудники, Ссылка)
	                             
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СистемаРасчетов", СистемаРасчетов);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоСистемеРасчетов", Не ПустаяСтрока(СистемаРасчетов));
	Запрос.УстановитьПараметр("КодВидаВклада", КодВидаВклада);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоКодуВидаВклада", Не ПустаяСтрока(КодВидаВклада));
	Запрос.УстановитьПараметр("КодПодвидаВклада", КодПодвидаВклада);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоКодуПодвидаВклада", Не ПустаяСтрока(КодПодвидаВклада));
	Запрос.УстановитьПараметр("ВалютаВклада", ВалютаВклада);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВалютеВклада", ЗначениеЗаполнено(ВалютаВклада));
	ИдентификаторыДокумента = Сотрудники.Выгрузить(, "СистемаРасчетовПоБанковскимКартам, КодВидаВклада, КодПодвидаВклада, ВалютаВклада, ИдентификаторДизайна");
	Запрос.УстановитьПараметр("ИдентификаторыДокумента", ИдентификаторыДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыДокумента.СистемаРасчетовПоБанковскимКартам,
	|	ИдентификаторыДокумента.КодВидаВклада,
	|	ИдентификаторыДокумента.КодПодвидаВклада,
	|	ИдентификаторыДокумента.ВалютаВклада КАК ВалютаВклада,
	|	ИдентификаторыДокумента.ИдентификаторДизайна
	|ПОМЕСТИТЬ ВТИдентификаторыДокумента
	|ИЗ
	|	&ИдентификаторыДокумента КАК ИдентификаторыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СистемаРасчетовПоБанковскимКартам КАК СистемаРасчетовПоБанковскимКартам,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодВидаВклада КАК КодВидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодПодвидаВклада КАК КодПодвидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ВалютаВклада КАК ВалютаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ИдентификаторДизайна КАК ИдентификаторДизайна
	|ПОМЕСТИТЬ ВТИдентификаторыДизайна
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники
	|ГДЕ
	|	((ВЫРАЗИТЬ(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СистемаРасчетовПоБанковскимКартам КАК СТРОКА(500))) = &СистемаРасчетов
	|				И &ИспользоватьОтборПоСистемеРасчетов
	|			ИЛИ НЕ &ИспользоватьОтборПоСистемеРасчетов)
	|	И (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодВидаВклада = &КодВидаВклада
	|				И &ИспользоватьОтборПоКодуВидаВклада
	|			ИЛИ НЕ &ИспользоватьОтборПоКодуВидаВклада)
	|	И (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодПодвидаВклада = &КодПодвидаВклада
	|				И &ИспользоватьОтборПоКодуПодвидаВклада
	|			ИЛИ НЕ &ИспользоватьОтборПоКодуПодвидаВклада)
	|	И (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ВалютаВклада = &ВалютаВклада
	|				И &ИспользоватьОтборПоВалютеВклада
	|			ИЛИ НЕ &ИспользоватьОтборПоВалютеВклада)
	|	И ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыДокумента.СистемаРасчетовПоБанковскимКартам,
	|	ИдентификаторыДокумента.КодВидаВклада,
	|	ИдентификаторыДокумента.КодПодвидаВклада,
	|	ИдентификаторыДокумента.ВалютаВклада,
	|	ИдентификаторыДокумента.ИдентификаторДизайна
	|ИЗ
	|	ВТИдентификаторыДокумента КАК ИдентификаторыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыДизайна.ИдентификаторДизайна КАК ИдентификаторДизайна,
	|	КОЛИЧЕСТВО(ИдентификаторыДизайна.ИдентификаторДизайна) КАК Количество
	|ИЗ
	|	ВТИдентификаторыДизайна КАК ИдентификаторыДизайна
	|ГДЕ
	|	ИдентификаторыДизайна.ИдентификаторДизайна <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыДизайна.ИдентификаторДизайна
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	ИД = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИД.Добавить(Выборка.ИдентификаторДизайна);
	КонецЦикла;
	
	Возврат ИД;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтображениеПоляСтраховойНомерПФР(ТекущиеДанные, Элемент)
	
	СообщенияПроверки = "";
	СНИЛСУказанПравильно = Ложь;
	
	Если КадровыйУчетКлиентСервер.СНИЛСЗаполнен(ТекущиеДанные.СтраховойНомерПФР) Тогда
		СНИЛСУказанПравильно = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ТекущиеДанные.СтраховойНомерПФР, СообщенияПроверки);
		Если СНИЛСУказанПравильно Тогда
			ЭлементЦветТекста = ЦветСтиляЦветТекстаПоля;
		Иначе
			ЭлементЦветТекста = ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
	Иначе
		ЭлементЦветТекста = ЦветСтиляЦветТекстаПоля;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		ЭтотОбъект,
		Элемент.Имя,
		СообщенияПроверки);
		
	Элемент.ЦветТекста = ЭлементЦветТекста;
	
КонецПроцедуры


#Область МеханизмФиксацииИзменений

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ДокументОбъект.ОбъектЗафиксирован();
	
КонецФункции

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксацииВторичныхДанных) Экспорт
	
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	ОписаниеЭлементаФормы.ПрефиксПутиТекущиеДанные = "Элементы.ЛицевыеСчета.ТекущиеДанные";
	
	Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
	КонецЦикла;
	
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	
	Возврат ОписаниеФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФиксацияЭлементыОбработчикаЗафиксироватьИзменение()
	
	ОписаниеЭлементов = Новый Соответствие;
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаТабельныйНомер",			"ТабельныйНомер");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаДатаПриема",				"ДатаПриема");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаДолжность",					"Должность");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаЯвляетсяРезидентом",		"ЯвляетсяРезидентом");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаГражданство",				"Гражданство");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаСтраховойНомерПФР",			"СтраховойНомерПФР");
	
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаПол",						"Пол");
	ОписаниеЭлементов.Вставить("ЛицевыеСчетаДатаРождения",				"ДатаРождения");
	
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицВидДокумента",	"ДокументВид");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицСерия",			"ДокументСерия");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицНомер",			"ДокументНомер");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицКемВыдан",		"ДокументКемВыдан");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицДатаВыдачи",		"ДокументДатаВыдачи");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицСрокДействия",	"ДокументСрокДействия");
	ОписаниеЭлементов.Вставить("ДокументыФизическихЛицКодПодразделения","ДокументКодПодразделения");
	
	Возврат ОписаниеЭлементов;
	
КонецФункции

&НаКлиенте
Процедура ФиксацияЗафиксироватьИзменениеРеквизита(ИмяРеквизита)
	
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, ИмяРеквизита, ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ФиксацияОбновитьФиксациюВФорме()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	
	ИменаРеквизитовИЭлементов = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ИменаСлужебныхРеквизитовИЭлементовМеханизмаФиксацииДанных();
	ОписанияТЧ = Форма[ИменаРеквизитовИЭлементов.Получить("ПараметрыФиксацииВторичныхДанных")]["ОписанияТЧ"];
	
	Для каждого ОписаниеТЧ Из ОписанияТЧ Цикл
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыФиксТЧ(Форма.Объект[ОписаниеТЧ.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФиксацияСохранитьРеквизитыФормыФикс(Форма, ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(Форма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Функция ФиксацияПодготовленныйДокумент()
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
	ПодготовленныйДокумент = РеквизитФормыВЗначение("Объект");
	ФиксацияСохранитьРеквизитыФормыФикс(ЭтотОбъект, ПодготовленныйДокумент);
	
	Возврат ПодготовленныйДокумент;
	
КонецФункции

&НаСервере
Процедура ФиксацияУстановитьОбъектЗафиксирован()
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеДокумента(МассивСотрудников = Неопределено)
	
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ФиксацияПодготовленныйДокумент();
	Если ДокументОбъект.ОбновитьТабличнуюЧастьФизическиеЛица(МассивСотрудников) Тогда
		Если НЕ ДокументОбъект.ЭтоНовый() Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);	
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;	
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	ПриПолученииДанныхНаСервере("Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ФиксацияЭлементыОбработчикаЗафиксироватьИзменение(), ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПредупрежденийТЧ_ЛицевыеСчета()
	
	Если НЕ ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) И Объект.Сотрудники.Количество() > 0 Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьОтображениеПредупрежденийТЧ(ЭтотОбъект, "Сотрудники", Элементы.ЛицевыеСчета.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Конец Механизм фиксации изменений.
////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#КонецОбласти
