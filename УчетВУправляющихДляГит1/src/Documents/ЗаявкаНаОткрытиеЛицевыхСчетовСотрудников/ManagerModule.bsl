#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Сотрудники.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список на открытие лицевых счетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "СписокНаОткрытиеЛицевыхСчетов";
	КомандаПечати.Представление = НСтр("ru = 'Список на открытие лицевых счетов'");
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы 
//                                            (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение      - ссылка на объект;
//                                            представление - имя области в которой был выведен объект
//                                            (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов
//                                            (выходной параметр);
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокНаОткрытиеЛицевыхСчетов") Тогда
		ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетовПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокНаОткрытиеЛицевыхСчетов", НСтр("ru = 'Список на открытие лицевых счетов'"), ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область МеханизмФиксацииИзменений

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	
	ОписаниеФиксацииРеквизитов = ОбменСБанкамиПоЗарплатнымПроектам.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковОписаниеФиксацииРеквизитов(); 
	ОписаниеФиксацииТЧ         = Новый Структура("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФизическоеЛицо"));
	
	Возврат 
		ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(
			ОписаниеФиксацииРеквизитов,
			, 
			ОписаниеФиксацииТЧ);
			
КонецФункции

#КонецОбласти

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ЗаполнитьДокументНомерСерияСотрудника(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновляемыеДокументы = ЗаполнитьДокументНомерСерияСотрудникаОбновляемыеДокументы(ПараметрыОбновления);
	
	Если ОбновляемыеДокументы.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		ЗаполнитьДокументНомерСерияСотрудникаВыполнить(ПараметрыОбновления, ОбновляемыеДокументы)
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДокументНомерСерияСотрудникаОбновляемыеДокументы(ПараметрыОбновления)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументНомерСерия = """"
	|	И (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументНомер <> """"
	|			ИЛИ ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументСерия <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка.Дата УБЫВ";
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 100", "");
	КонецЕсли;
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ЗаполнитьДокументНомерСерияСотрудникаВыполнить(ПараметрыОбновления, ОбновляемыеДокументы)
	
	Выборка = ОбновляемыеДокументы.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаДокумента Из ДокументОбъект.Сотрудники Цикл
			СтрокаДокумента.ДокументНомерСерия = СтрокаДокумента.ДокументСерия + СтрокаДокумента.ДокументНомер;
			СтрокаДокумента.ДокументНомерСерия = СтрЗаменить(СтрокаДокумента.ДокументНомерСерия, " ", "");
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры	
	
#КонецОбласти

#Область Печать

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетовПоДокументам(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеОткрытияЛицевыхСчетов(МассивОбъектов, ТекущаяДатаСеанса());
	
	ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетовПоXML(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// получаем данные для печати
	ДанныеДляПечати = ОбменСБанкамиПоЗарплатнымПроектам.ДанныеСпискаНаОткрытиеЛицевыхСчетовПоXML(МассивОбъектов);
	
	ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников_СписокНаОткрытиеЛицевыхСчетов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ПФ_MXL_СписокНаОткрытиеЛицевыхСчетов");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеДокументаДляПечати Из ДанныеДляПечати Цикл
		
		ДанныеДокумента = ДанныеДокументаДляПечати.Значение;
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ДанныеДокумента.Сотрудники.Количество();
		
		ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаШапка		= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 	= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал 	= Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		
		// выводим данные о документе
		ОбластьМакетаЗаголовок.Параметры.Дата = Формат(ДанныеДокумента.ДатаДокумента, "ДЛФ=D");
		ОбластьМакетаЗаголовок.Параметры.НомерДоговора = СокрЛП(ДанныеДокумента.НомерДоговора);
		ОбластьМакетаЗаголовок.Параметры.Организация = СокрЛП(ДанныеДокумента.ПолноеНаименованиеОрганизации);
		ОбластьМакетаЗаголовок.Параметры.РасчетныйСчетОрганизации = СокрЛП(ДанныеДокумента.НомерРасчетногоСчетаОрганизации);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0;
		
		ОбластьМакетаШапка.Параметры.НомерСтраницы = ВыведеноСтраниц;
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выводим данные по строкам документа.
		Для Каждого ДанныеДляПечатиСтроки Из ДанныеДокумента.Сотрудники Цикл
			
			ОбластьМакетаСтрока.Параметры.ФИОСотрудника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 %3'"), ДанныеДляПечатиСтроки.Фамилия, ДанныеДляПечатиСтроки.Имя, ДанныеДляПечатиСтроки.Отчество);
			ОбластьМакетаСтрока.Параметры.ЭмбоссированныйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 %3'"), ДанныеДляПечатиСтроки.ЭмбоссированныйТекст1, ДанныеДляПечатиСтроки.ЭмбоссированныйТекст2, ДанныеДляПечатиСтроки.ЭмбоссированныйТекст3);
			ОбластьМакетаСтрока.Параметры.АдресПрописки = ДанныеДляПечатиСтроки.АдресПоПропискеПредставление;
			ОбластьМакетаСтрока.Параметры.ВидВклада = ДанныеДляПечатиСтроки.КодВидаВклада;
			ОбластьМакетаСтрока.Параметры.Сумма = ДанныеДляПечатиСтроки.СуммаПервоначальногоПополнения;
			ОбластьМакетаСтрока.Параметры.ДатаРождения = Формат(ДанныеДляПечатиСтроки.ДатаРождения, "ДЛФ=D");
			ОбластьМакетаСтрока.Параметры.Пол = ДанныеДляПечатиСтроки.Пол;
			ОбластьМакетаСтрока.Параметры.Отделение = ДанныеДляПечатиСтроки.ОтделениеБанка;
			ОбластьМакетаСтрока.Параметры.Филиал = ДанныеДляПечатиСтроки.ФилиалОтделенияБанка;
			ОбластьМакетаСтрока.Параметры.РабочийТелефон = ДанныеДляПечатиСтроки.ТелефонРабочийПредставление;
			ОбластьМакетаСтрока.Параметры.АдресПроживания = ДанныеДляПечатиСтроки.АдресМестаПроживанияПредставление;
			ОбластьМакетаСтрока.Параметры.АдресМестаРаботы = ДанныеДляПечатиСтроки.АдресМестаРаботыПредставление;
			ОбластьМакетаСтрока.Параметры.УдостоверениеЛичности = ДанныеДляПечатиСтроки.ДокументПредставление;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				
				ОбластьМакетаШапка.Параметры.НомерСтраницы = ВыведеноСтраниц;
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Документ);
		
	КонецЦикла; // по документам
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ФормированиеФайлаОбмена

// Формирует и прикрепляет файл обмена к документу с помощью подсистемы "Файлы".
//
// Параметры:
//		СтруктураПараметровДляФормированияФайла - Структура - должна содержать значения:
//			МассивДокументов - Массив ссылок на документы, по которым требуется сформировать файл.
//			МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла) Экспорт
	
	Если Не СтруктураПараметровДляФормированияФайла.Свойство("СтруктураПараметровЭД") Тогда
		СтруктураПараметровДляФормированияФайла.Вставить("СтруктураПараметровЭД", Неопределено);
	КонецЕсли;
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураПараметровДляФормированияФайла.МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка КАК Заявка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), Выборка.Заявка);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Заявка,,, Отказ);
		КонецЕсли;
		Если НЕ ОбменСБанкамиПоЗарплатнымПроектам.ИспользоватьЭОИСБанком(Выборка.ЗарплатныйПроект) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗарплатныйПроект) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По зарплатному проекту %1 не используется обмен электронными документами с банком.'"),
					Выборка.ЗарплатныйПроект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 не выбран зарплатный проект.'"), Выборка.Заявка);
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения, Выборка.ЗарплатныйПроект, "ИспользоватьЭлектронныйДокументооборотСБанком",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = "ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников";
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	СтруктураПараметровДляФормированияФайла.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеДокументов", ДанныеОткрытияЛицевыхСчетов(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных));
	СтруктураПараметровДляФормированияФайла.Вставить("КорневыеСвойства", ОбменСБанкамиПоЗарплатнымПроектам.КорневыеСвойства(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ОбязательныеПоляФайла", ОбменСБанкамиПоЗарплатнымПроектам.ОбязательныеПоляФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПреобразованияЗначений", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПреобразованияЗначений(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеТипов", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеТипов(ВидОперации));
	
	ОбменСБанкамиПоЗарплатнымПроектам.СоздатьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла);
	
	МассивДокументовСФайлами = Новый Массив;
	Для каждого ОписаниеФайла Из СтруктураПараметровДляФормированияФайла.МассивОписанийФайлов Цикл
		МассивДокументовСФайлами.Добавить(ОписаниеФайла.ВладелецФайла);
	КонецЦикла;
	ОтменитьОтложенноеОткрытиеЛицевыхСчетов(МассивДокументовСФайлами);
	
КонецПроцедуры

// Получает данные документа для формирования файла обмена, печатного документа.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//
// Возвращаемое значение:
//		Соответствие - где Ключ - ссылка на документ, Значение - структура документа.
//
Функция ДанныеОткрытияЛицевыхСчетов(МассивДокументов, ДатаПолученияДанных) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаявкиНаОткрытиеЛицевыхСчетов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка КАК Документ,
	|	КОЛИЧЕСТВО(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ФизическоеЛицо) КАК КоличествоЗаписей,
	|	СУММА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СуммаПервоначальногоПополнения) КАК СуммаИтого
	|ПОМЕСТИТЬ ВТИтоговыеДанные
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка В(&ЗаявкиНаОткрытиеЛицевыхСчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.Документ КАК Документ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Номер КАК НомерДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.НомерРеестра КАК НомерРеестра,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.ИНН КАК ИННОрганизации,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	ЗарплатныеПроекты.КодировкаФайла КАК КодировкаФайла,
	|	КлассификаторБанков.Код КАК БИКБанка,
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.КоличествоЗаписей КАК КоличествоЗаписей,
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.СуммаИтого КАК СуммаИтого
	|ИЗ
	|	ВТИтоговыеДанные КАК ЗаявкиНаОткрытиеЛицевыхСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|		ПО ЗаявкиНаОткрытиеЛицевыхСчетов.Документ = ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанков.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Документ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерСтроки,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Фамилия КАК Фамилия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Имя КАК Имя,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Отчество КАК Отчество,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Должность) КАК Должность,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЭмбоссированныйТекст1 КАК ЭмбоссированныйТекст1,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЭмбоссированныйТекст2 КАК ЭмбоссированныйТекст2,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЭмбоссированныйТекст3 КАК ЭмбоссированныйТекст3,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СистемаРасчетовПоБанковскимКартам КАК СистемаРасчетовПоБанковскимКартам,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СуммаПервоначальногоПополнения КАК СуммаПервоначальногоПополнения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЯвляетсяЗарплатнойКартой КАК ЯвляетсяЗарплатнойКартой,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ОплатаЗарплатнойКарты КАК ОплатаЗарплатнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЯвляетсяСотрудникомБанка КАК ЯвляетсяСотрудникомБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ИспользуетсяОвердрафт КАК ИспользуетсяОвердрафт,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КатегорияСотрудника КАК КатегорияСотрудника,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЯвляетсяУчастникомБонуснойПрограммы КАК ЯвляетсяУчастникомБонуснойПрограммы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерУчастникаБонуснойПрограммы КАК НомерУчастникаБонуснойПрограммы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТарифСледующийГод КАК ТарифСледующийГод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТарифТекущийГод КАК ТарифТекущийГод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ИспользованиеДоставкиКорреспонденции КАК ИспользованиеДоставкиКорреспонденции,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СпособРассылкиОтчета КАК СпособРассылкиОтчета,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СчетДебета КАК СчетДебета,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерМобильногоТелефона КАК НомерМобильногоТелефонаXML,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерМобильногоТелефонаПредставление КАК НомерМобильногоТелефонаПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ОператорСвязи КАК ОператорСвязи,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ИспользованиеМобильногоБанка КАК ИспользованиеМобильногоБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТарифМобильногоБанка КАК ТарифМобильногоБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.РазрешитьПередачуИнформацииВБКИ КАК РазрешитьПередачуИнформацииВБКИ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КонтрольнаяИнформация КАК КонтрольнаяИнформация,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерМиграционнойКарты КАК НомерМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаНачалаПребыванияМиграционнойКарты КАК ДатаНачалаПребыванияМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаОкончанияПребыванияМиграционнойКарты КАК ДатаОкончанияПребыванияМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ВидМиграционногоДокумента.КодМВД КАК КодМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерМиграционногоДокумента КАК НомерМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаНачалаПребыванияМиграционногоДокумента КАК ДатаНачалаПребыванияМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаОкончанияПребыванияМиграционногоДокумента КАК ДатаОкончанияПребыванияМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ПрогнозируемыйМесячныйДоход КАК ПрогнозируемыйМесячныйДоход,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаПриема КАК ДатаПриема,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДеньВыплатыЗарплаты КАК ДеньВыплатыЗарплаты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодВидаВклада КАК КодВидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.КодПодвидаВклада КАК КодПодвидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ВалютаВклада.Код КАК КодВалютыВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументВид.Наименование КАК ДокументВид,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументВид.КодМВД КАК КодВидаДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументСерия КАК ДокументСерия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументНомер КАК ДокументНомер,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументСрокДействия КАК ДокументСрокДействия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументКемВыдан КАК ДокументКемВыдан,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументКодПодразделения КАК ДокументКодПодразделения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДокументПредставление КАК ДокументПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Пол КАК Пол,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаРождения КАК ДатаРождения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.МестоРождения КАК МестоРождения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресДляИнформирования КАК АдресДляИнформирования,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресМестаРаботы КАК АдресМестаРаботы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресПоПрописке КАК АдресПоПрописке,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресМестаПроживания КАК АдресМестаПроживания,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТелефонДомашний КАК ТелефонДомашний,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТелефонДомашнийПредставление КАК ТелефонДомашнийПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТелефонРабочий КАК ТелефонРабочий,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ТелефонРабочийПредставление КАК ТелефонРабочийПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ЯвляетсяРезидентом КАК ЯвляетсяРезидентом,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Гражданство) КАК Гражданство,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ИдентификаторДизайна КАК ИдентификаторДизайна,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ПВК КАК ПВК,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ПриложениеКартаКод КАК ПриложениеКартаКод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.ПриложениеКартаПараметры КАК ПриложениеКартаПараметры,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресДляИнформированияПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресМестаРаботыПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресПоПропискеПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.АдресМестаПроживанияПредставление,
	|	ПОДСТРОКА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СтраховойНомерПФР, 1, 3) + ПОДСТРОКА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СтраховойНомерПФР, 5, 3) + ПОДСТРОКА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СтраховойНомерПФР, 9, 3) + ПОДСТРОКА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.СтраховойНомерПФР, 13, 2) КАК СНИЛС
	|ИЗ
	|	ВТИтоговыеДанные КАК ЗаявкиНаОткрытиеЛицевыхСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники
	|		ПО ЗаявкиНаОткрытиеЛицевыхСчетов.Документ = ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудниковСотрудники.НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДокументов = Новый Соответствие;
	ВыборкаДокументов = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
	ВыборкаСтрокДокументов = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДанныеДокумента = ДанныеЗаполненияОткрытияЛицевыхСчетов();
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокументов);
		
		ДанныеДокумента.НомерРеестра = СтрЗаменить(ДанныеДокумента.НомерРеестра, Символы.НПП, "");
		ДанныеДокумента.ДанныеРеестра = Новый Структура("Год, НомерРеестра", Год(ДанныеДокумента.ДатаДокумента), ДанныеДокумента.НомерРеестра);
		ДанныеДокумента.ДатаФормирования = ДатаПолученияДанных;
		ДанныеДокумента.ИдПервичногоДокумента = ДанныеДокумента.Документ.УникальныйИдентификатор();
		ДанныеДокумента.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(
			ДанныеДокумента.Документ, ДанныеДокумента.ОтделениеБанка, ДанныеДокумента.НомерРеестра, "o");
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(ДанныеДокумента, ДанныеДокумента.Документ, ДатаПолученияДанных);
		
		ВыборкаСтрокДокументов.Сбросить();
		Пока ВыборкаСтрокДокументов.НайтиСледующий(ВыборкаДокументов.Документ, "Документ") Цикл
			
			ДанныеСтрокиДокумента = ДанныеЗаполненияСтрокиОткрытияЛицевыхСчетов();
			ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокиДокумента);
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДокумента, ВыборкаСтрокДокументов);
			
			ДанныеСтрокиДокумента.ОтделениеБанка = ДанныеДокумента.ОтделениеБанка;
			ДанныеСтрокиДокумента.ФилиалОтделенияБанка = ДанныеДокумента.ФилиалОтделенияБанка;
			ДанныеСтрокиДокумента.КодВалюты = ДанныеДокумента.КодВалюты;
			
			// ДатаВыплатыЗарплаты
			ДанныеСтрокиДокумента.ДатаВыплатыЗарплаты = ?(ДанныеСтрокиДокумента.ДеньВыплатыЗарплаты = 0, 
				Дата(1,1,1), 
				Дата(Год(ТекущаяДатаСеанса()), 1, ДанныеСтрокиДокумента.ДеньВыплатыЗарплаты));
			
			// Адреса
			ЗаполнитьДанныеАдреса(ДанныеСтрокиДокумента, "АдресМестаРаботы");
			ЗаполнитьДанныеАдреса(ДанныеСтрокиДокумента, "АдресПоПрописке");
			ЗаполнитьДанныеАдреса(ДанныеСтрокиДокумента, "АдресМестаПроживания");
			ЗаполнитьДанныеАдреса(ДанныеСтрокиДокумента, "АдресДляИнформирования");
			ЗаполнитьДанныеМестаРождения(ДанныеСтрокиДокумента, "МестоРождения");
			
			// Мобильный телефон
			ДанныеСтрокиДокумента.НомерМобильногоТелефона = "";
			Для Шаг = 1 По СтрДлина(ДанныеСтрокиДокумента.НомерМобильногоТелефонаПредставление) Цикл
				ДанныеСтрокиДокумента.НомерМобильногоТелефона = ДанныеСтрокиДокумента.НомерМобильногоТелефона
					+ ?(КодСимвола(ДанныеСтрокиДокумента.НомерМобильногоТелефонаПредставление, Шаг) >= КодСимвола("0") 
						И КодСимвола(ДанныеСтрокиДокумента.НомерМобильногоТелефонаПредставление, Шаг) <= КодСимвола("9"),
						Сред(ДанныеСтрокиДокумента.НомерМобильногоТелефонаПредставление, Шаг, 1),
						"");
			КонецЦикла;
			ДанныеСтрокиДокумента.НомерМобильногоТелефона = Прав(ДанныеСтрокиДокумента.НомерМобильногоТелефона, 10);
			
			// КатегорияНаселения
			Если ДанныеСтрокиДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Пенсионеры Тогда
				ДанныеСтрокиДокумента.КатегорияНаселения = "0";
			ИначеЕсли ДанныеСтрокиДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Студенты Тогда
				ДанныеСтрокиДокумента.КатегорияНаселения = "218";
			ИначеЕсли ДанныеСтрокиДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Прочие Тогда
				Если ДанныеСтрокиДокумента.ИспользуетсяОвердрафт Тогда
					Если ДанныеСтрокиДокумента.ЯвляетсяСотрудникомБанка Тогда
						ДанныеСтрокиДокумента.КатегорияНаселения = "212";
					Иначе
						ДанныеСтрокиДокумента.КатегорияНаселения = "217";
					КонецЕсли;
				Иначе
					ДанныеСтрокиДокумента.КатегорияНаселения = "207";
				КонецЕсли;
			КонецЕсли;
			
			ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(ДанныеСтрокиДокумента);
			
			ДанныеДокумента.Сотрудники.Добавить(ДанныеСтрокиДокумента);
			
		КонецЦикла;
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(ДанныеДокумента, ДатаПолученияДанных);
		
		ДанныеДокументов.Вставить(ВыборкаДокументов.Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Возвращает структуру документа, используемую для формирования файла обмена, печатного документа.
//
Функция ДанныеЗаполненияОткрытияЛицевыхСчетов() Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Документ", Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерДокумента", "");
	ДанныеЗаполнения.Вставить("НомерРеестра", "");
	ДанныеЗаполнения.Вставить("ДатаДокумента", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ПолноеНаименованиеОрганизации", "");
	ДанныеЗаполнения.Вставить("ИННОрганизации", "");
	ДанныеЗаполнения.Вставить("НомерДоговора", "");
	ДанныеЗаполнения.Вставить("ДатаДоговора", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НомерРасчетногоСчетаОрганизации", "");
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("ФилиалОтделенияБанка", "");
	ДанныеЗаполнения.Вставить("КодВалюты", "");
	ДанныеЗаполнения.Вставить("ФорматФайла", Перечисления.ФорматыФайловОбменаПоЗарплатномуПроекту.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("КодировкаФайла", Перечисления.КодировкаФайловОбменаПоЗарплатномуПроекту.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("БИКБанка", "");
	ДанныеЗаполнения.Вставить("КоличествоЗаписей", 0);
	ДанныеЗаполнения.Вставить("СуммаИтого", 0);
	ДанныеЗаполнения.Вставить("ИдПервичногоДокумента", "");
	ДанныеЗаполнения.Вставить("ДатаФормирования", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ИмяФайла", "");
	ДанныеЗаполнения.Вставить("ДанныеРеестра", "");
	
	ДанныеЗаполнения.Вставить("Сотрудники", Новый Массив);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру строки документа, используемую для формирования файла обмена, печатного документа.
//
Функция ДанныеЗаполненияСтрокиОткрытияЛицевыхСчетов() Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерСтроки", 0);
	ДанныеЗаполнения.Вставить("Фамилия", "");
	ДанныеЗаполнения.Вставить("Имя", "");
	ДанныеЗаполнения.Вставить("Отчество", "");
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("ФилиалОтделенияБанка", "");
	ДанныеЗаполнения.Вставить("КодВалюты", "");
	ДанныеЗаполнения.Вставить("Должность", "");
	ДанныеЗаполнения.Вставить("ЭмбоссированныйТекст1", "");
	ДанныеЗаполнения.Вставить("ЭмбоссированныйТекст2", "");
	ДанныеЗаполнения.Вставить("ЭмбоссированныйТекст3", "");
	ДанныеЗаполнения.Вставить("СистемаРасчетовПоБанковскимКартам", "");
	ДанныеЗаполнения.Вставить("СуммаПервоначальногоПополнения", 0);
	ДанныеЗаполнения.Вставить("ЯвляетсяЗарплатнойКартой", Ложь);
	ДанныеЗаполнения.Вставить("ОплатаЗарплатнойКарты", Перечисления.ВидыОплатыЗарплатнойКарты.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ЯвляетсяСотрудникомБанка", Ложь);
	ДанныеЗаполнения.Вставить("ИспользуетсяОвердрафт", Ложь);
	ДанныеЗаполнения.Вставить("КатегорияСотрудника", Перечисления.КатегорииСотрудниковОбменаСБанками.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ЯвляетсяУчастникомБонуснойПрограммы", Ложь);
	ДанныеЗаполнения.Вставить("БонуснаяПрограмма", Перечисления.БонусныеПрограммыБанков.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерУчастникаБонуснойПрограммы", "");
	ДанныеЗаполнения.Вставить("ТарифСледующийГод", 0);
	ДанныеЗаполнения.Вставить("ТарифТекущийГод", 0);
	ДанныеЗаполнения.Вставить("ИспользованиеДоставкиКорреспонденции", Ложь);
	ДанныеЗаполнения.Вставить("СпособРассылкиОтчета", Перечисления.СпособыДоставкиКорреспонденцииБанка.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("АдресЭлектроннойПочты", "");
	ДанныеЗаполнения.Вставить("СчетДебета", "");
	ДанныеЗаполнения.Вставить("НомерМобильногоТелефона", "");
	ДанныеЗаполнения.Вставить("НомерМобильногоТелефонаXML", "");
	ДанныеЗаполнения.Вставить("НомерМобильногоТелефонаПредставление", "");
	ДанныеЗаполнения.Вставить("ОператорСвязи", "");
	ДанныеЗаполнения.Вставить("ИспользованиеМобильногоБанка", Ложь);
	ДанныеЗаполнения.Вставить("ТарифМобильногоБанка", Перечисления.ТарифыМобильногоБанка.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("РазрешитьПередачуИнформацииВБКИ", Ложь);
	ДанныеЗаполнения.Вставить("КонтрольнаяИнформация", "");
	ДанныеЗаполнения.Вставить("НомерМиграционнойКарты", "");
	ДанныеЗаполнения.Вставить("ДатаНачалаПребыванияМиграционнойКарты", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДатаОкончанияПребыванияМиграционнойКарты", Дата("00010101"));
	ДанныеЗаполнения.Вставить("КодМиграционногоДокумента", "");
	ДанныеЗаполнения.Вставить("НомерМиграционногоДокумента", "");
	ДанныеЗаполнения.Вставить("ДатаНачалаПребыванияМиграционногоДокумента", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДатаОкончанияПребыванияМиграционногоДокумента", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ПрогнозируемыйМесячныйДоход", 0);
	ДанныеЗаполнения.Вставить("ТабельныйНомер", "");
	ДанныеЗаполнения.Вставить("ДатаПриема", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДеньВыплатыЗарплаты", 0);
	ДанныеЗаполнения.Вставить("КодВидаВклада", "");
	ДанныеЗаполнения.Вставить("КодПодвидаВклада", "");
	ДанныеЗаполнения.Вставить("КодВалютыВклада", "");
	ДанныеЗаполнения.Вставить("ДокументВид", "");
	ДанныеЗаполнения.Вставить("КодВидаДокумента", "");
	ДанныеЗаполнения.Вставить("ДокументСерия", "");
	ДанныеЗаполнения.Вставить("ДокументНомер", "");
	ДанныеЗаполнения.Вставить("ДокументДатаВыдачи", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДокументСрокДействия", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДокументКемВыдан", "");
	ДанныеЗаполнения.Вставить("ДокументКодПодразделения", "");
	ДанныеЗаполнения.Вставить("ДокументПредставление", "");
	ДанныеЗаполнения.Вставить("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ДатаРождения", Дата("00010101"));
	ДанныеЗаполнения.Вставить("МестоРождения", "");
	ДанныеЗаполнения.Вставить("МестоРожденияПредставление", "");
	ДанныеЗаполнения.Вставить("АдресДляИнформирования", "");
	ДанныеЗаполнения.Вставить("АдресДляИнформированияПредставление", "");
	ДанныеЗаполнения.Вставить("АдресМестаРаботы", "");
	ДанныеЗаполнения.Вставить("АдресМестаРаботыПредставление", "");
	ДанныеЗаполнения.Вставить("АдресПоПрописке", "");
	ДанныеЗаполнения.Вставить("АдресПоПропискеПредставление", "");
	ДанныеЗаполнения.Вставить("АдресМестаПроживания", "");
	ДанныеЗаполнения.Вставить("АдресМестаПроживанияПредставление", "");
	ДанныеЗаполнения.Вставить("ТелефонДомашний", "");
	ДанныеЗаполнения.Вставить("ТелефонДомашнийПредставление", "");
	ДанныеЗаполнения.Вставить("ТелефонРабочий", "");
	ДанныеЗаполнения.Вставить("ТелефонРабочийПредставление", "");
	ДанныеЗаполнения.Вставить("ЯвляетсяРезидентом", Ложь);
	ДанныеЗаполнения.Вставить("Гражданство", "");
	ДанныеЗаполнения.Вставить("ИдентификаторДизайна", "");
	ДанныеЗаполнения.Вставить("ПВК", "");
	ДанныеЗаполнения.Вставить("ПриложениеКартаКод", "");
	ДанныеЗаполнения.Вставить("ПриложениеКартаПараметры", "");
	ДанныеЗаполнения.Вставить("КатегорияНаселения", "");
	ДанныеЗаполнения.Вставить("ДатаВыплатыЗарплаты", "");
	ДанныеЗаполнения.Вставить("СНИЛС", "");
	
	ДополнитьДанныеЗаполненияАдресом(ДанныеЗаполнения, "АдресМестаРаботы");
	ДополнитьДанныеЗаполненияАдресом(ДанныеЗаполнения, "АдресПоПрописке");
	ДополнитьДанныеЗаполненияАдресом(ДанныеЗаполнения, "АдресМестаПроживания");
	ДополнитьДанныеЗаполненияАдресом(ДанныеЗаполнения, "АдресДляИнформирования");
	ДополнитьДанныеЗаполненияМестомРождения(ДанныеЗаполнения, "МестоРождения");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Удаляет записи регистра сведений "Отложенное открытие лицевых счетов сотрудников" по сотрудникам табличной части
// документа.
//
// Параметры:
//		МассивДокументов - массив документов, по табличным частям которых будут очищены записи регистра сведений.
//
Процедура ОтменитьОтложенноеОткрытиеЛицевыхСчетов(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтложенноеОткрытиеЛицевыхСчетовСотрудников.Организация КАК Организация,
	|	ОтложенноеОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтложенноеОткрытиеЛицевыхСчетовСотрудников КАК ОтложенноеОткрытиеЛицевыхСчетовСотрудников
	|		ПО ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка.Организация = ОтложенноеОткрытиеЛицевыхСчетовСотрудников.Организация
	|			И ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо = ОтложенноеОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запись = РегистрыСведений.ОтложенноеОткрытиеЛицевыхСчетовСотрудников.СоздатьМенеджерЗаписи();
	Пока Выборка.Следующий() Цикл
		Запись.Организация = Выборка.Организация;
		Запись.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеАдреса

Процедура ДополнитьДанныеЗаполненияАдресом(ДанныеЗаполнения, НаименованиеАдреса)
	
	ДанныеЗаполнения.Вставить("Индекс" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("СтранаНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("СтранаКод" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("РегионНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("РегионСокращение" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("РайонНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("РайонСокращение" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("ГородНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("ГородСокращение" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("НаселенныйПунктНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("НаселенныйПунктСокращение" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("УлицаНазвание" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("УлицаСокращение" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("Дом" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("Корпус" + НаименованиеАдреса, "");
	ДанныеЗаполнения.Вставить("Квартира" + НаименованиеАдреса, "");

	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияМестомРождения(ДанныеЗаполнения, НаименованиеМестаРождения)
	
	ДанныеЗаполнения.Вставить("СтранаНазвание" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("РегионНазвание" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("РегионСокращение" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("РайонНазвание" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("РайонСокращение" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("НаселенныйПунктНазвание" + НаименованиеМестаРождения, "");
	ДанныеЗаполнения.Вставить("НаселенныйПунктСокращение" + НаименованиеМестаРождения, "");

	
КонецПроцедуры

Процедура ЗаполнитьДанныеАдреса(СтрокаДанных, НазваниеКолонки)
	
	СтруктураАдреса = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СтруктураАдресаСтрокиДанных = ЗарплатаКадры.СтруктураАдресаИзXML(
		СтрокаДанных[НазваниеКолонки], Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	
	ЗаполнитьЗначенияСвойств(СтруктураАдреса, СтруктураАдресаСтрокиДанных);
	
	СтрокаДанных["Индекс" + НазваниеКолонки] = СтруктураАдреса.Индекс;
	СтрокаДанных["СтранаНазвание" + НазваниеКолонки] = СтруктураАдреса.Страна;
	СтрокаДанных["СтранаКод" + НазваниеКолонки] = СтруктураАдреса.КодСтраны;
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Регион, "Регион", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Район, "Район", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Город, "Город", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Улица, "Улица", НазваниеКолонки);
	СтрокаДанных["Дом" + НазваниеКолонки] = СтруктураАдреса.Дом;
	СтрокаДанных["Корпус" + НазваниеКолонки] = СтруктураАдреса.Корпус;
	СтрокаДанных["Квартира" + НазваниеКолонки] = СтруктураАдреса.Квартира;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМестаРождения(СтрокаДанных, НазваниеКолонки)
	
	СтруктураМестоРождения = ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(СтрокаДанных[НазваниеКолонки], Ложь);
	
	СтрокаДанных["СтранаНазвание" + НазваниеКолонки] = СтруктураМестоРождения.Страна;
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.Область, "Регион", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.Район, "Район", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.НаселенныйПункт, "НаселенныйПункт", НазваниеКолонки);
	
КонецПроцедуры

Процедура ЗаполнитьНазваниеИСокращение(СтрокаДанных, ПолноеНазвание, НазваниеЭлемента, НазваниеКолонки)
	
	СтруктураЭлемента = АдресныйКлассификаторСлужебный.НаименованиеИСокращение(ПолноеНазвание);
	
	Если НЕ ПустаяСтрока(СтруктураЭлемента.Наименование) Тогда
		СтрокаДанных[НазваниеЭлемента + "Название" + НазваниеКолонки] = СтруктураЭлемента.Наименование;
		Если НЕ ПустаяСтрока(СтруктураЭлемента.Сокращение) Тогда
			СтрокаДанных[НазваниеЭлемента + "Сокращение" + НазваниеКолонки] = СтруктураЭлемента.Сокращение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли