
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ВспомогательныеПроцедурыИФункции

// Подготоваливает файлы для выгрузки в локальную систему.
// Парметры:
//  ПолноеИмяФайла          - Строка - имя файла, которое необходимо указать при создании файла и выгрузке, содержащее путь.
//  КодОрганизации          - Строка - код организации.
//  РежимРаботы             - Строка - режим, в котором будет работать документ.
//  МассивВыгружаемыхФайлов - Массив - массив, содержащий описания передаваемых файлов.
//
Процедура ПодготовитьФайлВыгрузкиВГЦЖС(ПолноеИмяФайла, КодОрганизации, РежимРаботы, МассивВыгружаемыхФайлов) Экспорт
	
	// Если "СтруктураИтоговыхСуммовыхПоказателей = Неопределено" то это означает,
	// что в настройках выгрузки ГЦЖС в таблице ""Коды услуг"" не заполнены типы услуг.
	// В таком случае, файл выгрузки не будет формироваться.
	СтруктураИтоговыхСуммовыхПоказателей = ПодготовитьСтруктуруИтоговыхСуммовыхПоказателей();
	Если СтруктураИтоговыхСуммовыхПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЧленовСемьи = ПодготовитьТаблицуЧленовСемейНосителейЛьгот();
	
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаДанных, "windows-1251");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ОтборСведенийОЛьготныхКатегориях = Новый Структура("Плательщик");
	ОтборСведенийОНачисленныхЛьготах = Новый Структура("Плательщик, Льгота");
	ОтборЧленовСемьиНосителяЛьгот    = Новый Структура("Плательщик");
	
	// Порядок заполнения файла с отчетом для ГЦЖС:
	//1. Блок "Report".
	
	#Область Report
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Report"); // 1 +
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("","http://www.jaxb.msp/report/IncomeReport");
	
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "DateCreate", Формат(Дата, "ДФ=yyyy-MM-dd"));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "Dognum",     Строка(КодОрганизации));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "ReportType", Строка(РежимРаботы));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "BnfMonth",   Формат(Период, "ДФ=yyyy-MM-01"));
	
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "Check1", Формат(СтруктураИтоговыхСуммовыхПоказателей.Check1, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "Check2", Формат(СтруктураИтоговыхСуммовыхПоказателей.Check2, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "Check3", Формат(СтруктураИтоговыхСуммовыхПоказателей.Check3, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
	ЗаписатьТекстВXMLФайле(ЗаписьXML, "Check4", Формат(СтруктураИтоговыхСуммовыхПоказателей.Check4, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
		
		#Область Beneficiaries
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Beneficiaries"); // 1.2 +
			
			// Получение таблицы, в которой будут содержаться сведения для заполнения полей
			// "OwnSquare", "RegType" и "LivingType".
			ДопСведенияОПлательщике = ПолучитьДополнительныеСведенияОПлательщикеЛьгот(Плательщики);
			
			// 1. Перебираем всех льготников и записываем по ним данные в блоке "Beneficiary"
			Для каждого СтрТекПлательщик Из Плательщики Цикл
				
				#Область Beneficiary
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Beneficiary"); // 1.3 +
				
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "MoID",         Формат(СтрТекПлательщик.КодРайона, "ЧРГ=; ЧН=0; ЧГ=0"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "PayID",        Формат(СтрТекПлательщик.КодПлательщика, "ЧРГ=; ЧН=0; ЧГ=0"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "NUMLS",        ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(СтрТекПлательщик.ЛицевойСчет, Истина));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "SNILS",        Строка(СтрТекПлательщик.СтраховойНомер));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name1",        Строка(СтрТекПлательщик.Фамилия));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name2",        Строка(СтрТекПлательщик.Имя));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name3",        Строка(СтрТекПлательщик.Отчество));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "StreetID",     Формат(СтрТекПлательщик.КодУлицы, "ЧРГ=; ЧН=0; ЧГ=0"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "HouseNum",     Строка(СтрТекПлательщик.Дом));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "CorpusNum",    Строка(СтрТекПлательщик.Корпус));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "BuildingNum",  Строка(СтрТекПлательщик.Строение));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Flat",         Строка(СтрТекПлательщик.Квартира));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "UNOM",         "0");
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "HouseFIAS",    "");
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Phone",        Строка(СтрТекПлательщик.Телефон));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "OccupType",    Строка(СтрТекПлательщик.КодТипЗаселения));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "OwnProperty",  Строка(СтрТекПлательщик.КодФормаСобственности));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "PPLReg",       Строка(СтрТекПлательщик.КолвоПостоянноПроживающих));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "PPLCnt",       Строка(СтрТекПлательщик.КолвоФактическиПроживающих));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "TotalSquare",  Формат(СтрТекПлательщик.ОбщаяПлощадь, "ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "LivingSquare", Формат(СтрТекПлательщик.ЖилаяПлощадь, "ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Gender",       Строка(СтрТекПлательщик.Пол));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "Birthday",     Формат(СтрТекПлательщик.ДатаРождения, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
				
				ДопСведенияПлательщика = ДопСведенияОПлательщике.Найти(СтрТекПлательщик.Плательщик, "Плательщик");
				
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "OwnSquare",    ?(ДопСведенияПлательщика = Неопределено, "", Формат(ДопСведенияПлательщика.OwnSquare, "ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0")));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "RegType",      ?(ДопСведенияПлательщика = Неопределено, "", Строка(ДопСведенияПлательщика.RegType)));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "LivingType",   ?(ДопСведенияПлательщика = Неопределено, "", Строка(ДопСведенияПлательщика.LivingType)));
				
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocType",      Строка(СтрТекПлательщик.КодВидДокументаЛичности));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocSeries",    Строка(СтрТекПлательщик.СерияДокументаЛичности));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocNumber",    Строка(СтрТекПлательщик.НомерДокументаЛичности));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocDate",      Формат(СтрТекПлательщик.ДатаВыдачиДокументаЛичности, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
				ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocOrg",       Строка(СтрТекПлательщик.ОрганизацияДокументаЛичности));
					
					#Область FamilyMembers
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FamilyMembers"); // 1.3.1 +
					
					// 1. Отбираем членов семьи из таблицы "ТаблицаЧленовСемьи".
					// 2. По каждому найденному члену семьи выводим сведения в блоке "FamilyMember".
					// 3. Сначала выводим сведения о носителе льгот.
					
					ОтборЧленовСемьиНосителяЛьгот.Плательщик = СтрТекПлательщик.Плательщик;
					НайденныеСтрокиСЧленамиСемьи = ТаблицаЧленовСемьи.НайтиСтроки(ОтборЧленовСемьиНосителяЛьгот);
					
					Для каждого ТекСтрокаСЧленомСемьи Из НайденныеСтрокиСЧленамиСемьи Цикл
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FamilyMember");
						
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "SNILS",          ТекСтрокаСЧленомСемьи.SNILS); // ??
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name1",          ТекСтрокаСЧленомСемьи.Name1);
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name2",          ТекСтрокаСЧленомСемьи.Name2);
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "Name3",          ТекСтрокаСЧленомСемьи.Name3);
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "Gender",         ТекСтрокаСЧленомСемьи.Gender);
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "Birthday",       Формат(ТекСтрокаСЧленомСемьи.Birthday,       "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "FamilyRelation", Формат(ТекСтрокаСЧленомСемьи.FamilyRelation, "ЧРГ=; ЧН=0; ЧГ=0"));
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "OwnSquare",      Формат(ТекСтрокаСЧленомСемьи.OwnSquare,      "ЧРД=.; ЧН=0.00; ЧГ=0"));
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
					КонецЦикла;
					ЗаписьXML.ЗаписатьКонецЭлемента(); //  1.3.1 -
					
					#КонецОбласти
					
					#Область Categories
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Categories");
					
					ОтборСведенийОЛьготныхКатегориях.Плательщик = СтрТекПлательщик.Плательщик;
					
					НайденныеСтрокиСоЛьготнымиКатегориями = ДокументыЛьгот.НайтиСтроки(ОтборСведенийОЛьготныхКатегориях);
					
					Для каждого СтрТекЛьготнаяКатегория Из НайденныеСтрокиСоЛьготнымиКатегориями Цикл
						
						// Сведения о документах на льготы и начисленных льготах.
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Category"); // 1.3.2 +
						
						ЗаписатьТекстВXMLФайле(ЗаписьXML, "BenefitID", Строка(СтрТекЛьготнаяКатегория.КодЛьготы));
						
						#Область Documents
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Documents"); // 1.3.2.1 +
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("Document"); // 1.3.2.1.1 +
							
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocType",   Строка(СтрТекЛьготнаяКатегория.КодВидДокументаЛьготы));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocSeries", Строка(СтрТекЛьготнаяКатегория.СерияДокументаЛьготы));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocNumber", Строка(СтрТекЛьготнаяКатегория.НомерДокументаЛьготы));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocDate",   Формат(СтрТекЛьготнаяКатегория.ДатаВыдачиДокументаЛьготы, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocEnd",    Формат(СтрТекЛьготнаяКатегория.ДатаОкончанияДокументаЛьготы, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocOrg",    Строка(СтрТекЛьготнаяКатегория.КемВыданДокументЛьготы));
							
							ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.1.1 -
							
							Если НЕ СтрТекЛьготнаяКатегория.КодВидДокументаЛьготы2 = 0 Тогда
								
								ЗаписьXML.ЗаписатьНачалоЭлемента("Document"); // 1.3.2.1.1 +
								
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocType",   Строка(СтрТекЛьготнаяКатегория.КодВидДокументаЛьготы2));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocSeries", Строка(СтрТекЛьготнаяКатегория.СерияДокументаЛьготы2));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocNumber", Строка(СтрТекЛьготнаяКатегория.НомерДокументаЛьготы2));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocDate",   Формат(СтрТекЛьготнаяКатегория.ДатаВыдачиДокументаЛьготы2, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocEnd",    Формат(СтрТекЛьготнаяКатегория.ДатаОкончанияДокументаЛьготы2, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocOrg",    Строка(СтрТекЛьготнаяКатегория.КемВыданДокументЛьготы2));
								ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.1.1 -
								
							КонецЕсли;
							
							Если НЕ СтрТекЛьготнаяКатегория.КодВидДокументаЛьготы3 = 0 Тогда
								
								ЗаписьXML.ЗаписатьНачалоЭлемента("Document"); // 1.3.2.1.1 +
								
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocType",   Строка(СтрТекЛьготнаяКатегория.КодВидДокументаЛьготы3));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocSeries", Строка(СтрТекЛьготнаяКатегория.СерияДокументаЛьготы3));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocNumber", Строка(СтрТекЛьготнаяКатегория.НомерДокументаЛьготы3));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocDate",   Формат(СтрТекЛьготнаяКатегория.ДатаВыдачиДокументаЛьготы3, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocEnd",    Формат(СтрТекЛьготнаяКатегория.ДатаОкончанияДокументаЛьготы3, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "DocOrg",    Строка(СтрТекЛьготнаяКатегория.КемВыданДокументЛьготы3));
								
								ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.1.1 -
								
							КонецЕсли;
							
						ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.1 -
						
						#КонецОбласти
						
						// Сведения о начисленных льготах.
						
						#Область Services
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Services"); // 1.3.2.2 +
						
						ОтборСведенийОНачисленныхЛьготах.Плательщик = СтрТекЛьготнаяКатегория.Плательщик;
						ОтборСведенийОНачисленныхЛьготах.Льгота     = СтрТекЛьготнаяКатегория.Льгота;
						
						НайденныеСтрокиСНачисленнымиЛьготами = Скидки.НайтиСтроки(ОтборСведенийОНачисленныхЛьготах);
						
						Для каждого СтрТекНачисленнаяЛьгота Из НайденныеСтрокиСНачисленнымиЛьготами Цикл
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("Service"); // 1.3.2.2.1 +
							
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "ServiceID",   Строка(СтрТекНачисленнаяЛьгота.КодУслуги));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "Tariff",      Формат(СтрТекНачисленнаяЛьгота.Тариф, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0"));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "ConsumerQty", Строка(СтрТекНачисленнаяЛьгота.КолвоПользующихсяЛьготой));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "Quant",       Формат(СтрТекНачисленнаяЛьгота.Объем, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0"));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "BnfSquare",   Формат(СтрТекНачисленнаяЛьгота.Площадь, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0"));
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "Summa",       Формат(СтрТекНачисленнаяЛьгота.РазмерСкидки, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0"));       // Есть условие на режим работы.
							
							Если РежимРаботы = 1 Тогда
								ЗаписатьТекстВXMLФайле(ЗаписьXML, "SummaCorr",   Формат(СтрТекНачисленнаяЛьгота.СуммаКорректировки, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0")); // Есть условие на режим работы.
							КонецЕсли;
							
							ЗаписатьТекстВXMLФайле(ЗаписьXML, "TotalQuant",  Формат(СтрТекНачисленнаяЛьгота.ФактическийОбъем, "ЧРД=.; ЧРГ=; ЧН=0.00; ЧГ=0"));
							
							ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.2.1 -
							
						КонецЦикла;
						
						ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2.2 -
						
						#КонецОбласти
						
						ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3.2 -
						
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					#КонецОбласти
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.3 -
				
				#КонецОбласти
				
			КонецЦикла;
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // 1.2 -
		
		#КонецОбласти
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // 1 -
	
	#КонецОбласти
	
	ЗаписьXML.Закрыть();
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайла, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаДанных), Новый УникальныйИдентификатор));
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры // ПодготовитьФайлВыгрузкиВГЦЖС()

Функция ПодготовитьТаблицуЧленовСемейНосителейЛьгот()
	
	// План доработки механизма формирования таблицы с членами семей носителей льгот.
	// 1. Сворачиваем таблицу "Скидки" по колонкам "Плательщик", "Льгота" и "Услуга".
	// 2. По данным РС "Скидки" получаем актуальные на дату документа сведения о получателях льгот с отобором "Льгота" и "Услуга" из таблицы 1.
	//    Поля выборки:
	//    а. Льготная категория,
	//    б. Услуга,
	//    в. ЛицаПользующиесяЛьготами ("ОдинЧеловек", "Семья" и "БлизкиеРодственники").
	// 3. Связываем результаты п.1 и п.2, 
	//    При этом, 
	//    Если "ЛицаПользующиесяЛьготами" = "БлизкиеРодственники", то приоритет максимальный (3),
	//    Если "ЛицаПользующиесяЛьготами" = "ОдинЧеловек", то приоритет максимальный (2),
	//    Если "ЛицаПользующиесяЛьготами" = "Семья", то приоритет максимальный (1),
	// 4. Сворачиваем результат п.3 по полям "Плательщик", "Льгота". При этом получаем максимум по приоритету.
	// 5. Для всех строк результата п.4 получаем, у которых в поле "Приоритет" = "3" (вариант "БлизкиеРодственники"),
	//    по данным РС "УПЖКХ_СтепеньРодстваФизЛиц" ищем для всех носителей льгот "Плательщик.ФизЛицо" ищем близких родственников.
	// 6. Для каждого человека, полученного по итогам п.5, выводим сведения о степени родства (в соответствии со справочником ГЦЖС).
	// 7. По данным РС "ФИОФизЛиц" тянем сведения о Фамилии, Имени и Отчестве.
	// 8. По данным справочника "Физические лица" тянем сведения о поле и дате рождения.
	// 9. По данным РС "Собственность на помещение", "Собственники помещений" и "Плошади помещений"
	//    определяем размеры площадей, приходящиеся на каждого члена семьи, включая носителя льгот.
	
	// Поля финальной таблицы:
	// 1. "SNILS" (Страховой номер),
	// 2. "Name1" (Фамилия),
	// 3. "Name2" (Имя),
	// 4. "Name3" (Отчество),
	// 5. "Gender" (Пол),
	// 6. "Birthday" (Дата рождения),
	// 7. "FamilyRelation" (Степень родства),
	// 8. "OwnSquare" (Площадь в собственности).
	
	врТаблица = Скидки.Выгрузить(, "Плательщик, Льгота, Услуга");
	врТаблица.Свернуть("Плательщик, Льгота, Услуга");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("Плательщики", врТаблица);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Плательщики.Плательщик КАК Плательщик,
	|	Плательщики.Льгота КАК Льгота,
	|	Плательщики.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНосителиЛьгот
	|ИЗ
	|	&Плательщики КАК Плательщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.Услуга КАК Услуга,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	ВЫБОР
	|		КОГДА КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.Семья)
	|			ТОГДА 1
	|		КОГДА КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втАктуальныеСкидки
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(
	|			&Дата,
	|			(ЛьготнаяКатегория, Услуга) В
	|				(ВЫБРАТЬ
	|					втНосителиЛьгот.Льгота КАК Льгота,
	|					втНосителиЛьгот.Услуга КАК Услуга
	|				ИЗ
	|					втНосителиЛьгот КАК втНосителиЛьгот)) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНосителиЛьгот.Плательщик.Владелец КАК ЛицевойСчет,
	|	втНосителиЛьгот.Плательщик.Владелец.Адрес КАК Адрес,
	|	втНосителиЛьгот.Плательщик КАК Плательщик,
	|	втНосителиЛьгот.Льгота КАК Льгота,
	|	втНосителиЛьгот.Услуга КАК Услуга,
	|	втАктуальныеСкидки.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	втАктуальныеСкидки.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами
	|ИЗ
	|	втНосителиЛьгот КАК втНосителиЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАктуальныеСкидки КАК втАктуальныеСкидки
	|		ПО втНосителиЛьгот.Льгота = втАктуальныеСкидки.ЛьготнаяКатегория
	|			И втНосителиЛьгот.Услуга = втАктуальныеСкидки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Адрес КАК Адрес,
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Плательщик КАК Плательщик,
	|	МАКСИМУМ(втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Приоритет) КАК Приоритет
	//|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Льгота КАК Льгота
	|ПОМЕСТИТЬ втНосителиЛьготСМаксПриоритетами
	|ИЗ
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами КАК втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.ЛицевойСчет,
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Адрес,
	|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Плательщик
	//|	втТаблицаНосителейЛьготСЛицамиПользующимисяЛьготами.Льгота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное КАК ФизическоеЛицоНосителяЛьгот,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоЧленаСемьи,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|ПОМЕСТИТЬ втБлизкиеРодственникиНосителяЛьгот1
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицоОсновное В
	|				(ВЫБРАТЬ
	|					втНосителиЛьготСМаксПриоритетами.Плательщик.ФизЛицо КАК ФизЛицо
	|				ИЗ
	|					втНосителиЛьготСМаксПриоритетами КАК втНосителиЛьготСМаксПриоритетами
	|				ГДЕ
	|					втНосителиЛьготСМаксПриоритетами.Приоритет = 3)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|ГДЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНосителиЛьгот.Плательщик.ФизЛицо КАК ФизическоеЛицоНосителяЛьгот,
	|	втНосителиЛьгот.Плательщик.ФизЛицо КАК ФизическоеЛицоЧленаСемьи,
	|	ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Квартиросъемщик) КАК СтепеньРодства
	|ПОМЕСТИТЬ втНосителиЛьгот1
	|ИЗ
	|	втНосителиЛьгот КАК втНосителиЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлизкиеРодственникиНосителяЛьгот1.ФизическоеЛицоНосителяЛьгот КАК ФизическоеЛицоНосителяЛьгот,
	|	втБлизкиеРодственникиНосителяЛьгот1.ФизическоеЛицоЧленаСемьи КАК ФизическоеЛицоЧленаСемьи,
	|	втБлизкиеРодственникиНосителяЛьгот1.СтепеньРодства КАК СтепеньРодства
	|ПОМЕСТИТЬ втБлизкиеРодственникиНосителяЛьгот
	|ИЗ
	|	втБлизкиеРодственникиНосителяЛьгот1 КАК втБлизкиеРодственникиНосителяЛьгот1
	|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	втНосителиЛьгот1.ФизическоеЛицоНосителяЛьгот,
	//|	втНосителиЛьгот1.ФизическоеЛицоЧленаСемьи,
	//|	втНосителиЛьгот1.СтепеньРодства
	//|ИЗ
	//|	втНосителиЛьгот1 КАК втНосителиЛьгот1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ втФИОЧленовСемьиНосителяЛьгот
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					втБлизкиеРодственникиНосителяЛьгот.ФизическоеЛицоЧленаСемьи КАК ФизическоеЛицоЧленаСемьи
	|				ИЗ
	|					втБлизкиеРодственникиНосителяЛьгот КАК втБлизкиеРодственникиНосителяЛьгот)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности
	|ПОМЕСТИТЬ втСведенияОСобственностиНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втНосителиЛьготСМаксПриоритетами.Адрес КАК Адрес
	|				ИЗ
	|					втНосителиЛьготСМаксПриоритетами КАК втНосителиЛьготСМаксПриоритетами)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|	И УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|					(ВЫБРАТЬ
	|						втНосителиЛьготСМаксПриоритетами.Адрес
	|					ИЗ
	|						втНосителиЛьготСМаксПриоритетами КАК втНосителиЛьготСМаксПриоритетами)
	|				И Собственник В
	|					(ВЫБРАТЬ
	|						втБлизкиеРодственникиНосителяЛьгот.ФизическоеЛицоЧленаСемьи
	|					ИЗ
	|						втБлизкиеРодственникиНосителяЛьгот КАК втБлизкиеРодственникиНосителяЛьгот)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК КоличествоСобственников
	|ПОМЕСТИТЬ втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втСведенияОСобственностиНаПомещения.Помещение КАК Помещение
	|				ИЗ
	|					втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения
	|				ГДЕ
	|					втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная))) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втСведенияОбОбщихПлощадях
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Дата,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втНосителиЛьготСМаксПриоритетами.Адрес КАК Адрес
	|					ИЗ
	|						втНосителиЛьготСМаксПриоритетами КАК втНосителиЛьготСМаксПриоритетами)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственникиПомещений.Помещение КАК Адрес,
	|	втСобственникиПомещений.Собственник КАК ФизическоеЛицоЧленаСемьи,
	|	ВЫБОР
	|		КОГДА втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|			ТОГДА втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|		КОГДА втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|			ТОГДА ВЫБОР
	|					КОГДА втСобственникиПомещений.ДоляСобственникаЗнаменатель = 0
	|						ТОГДА втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|					ИНАЧЕ втСобственникиПомещений.ДоляСобственникаЧислитель / втСобственникиПомещений.ДоляСобственникаЗнаменатель * втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|				КОНЕЦ
	|		ИНАЧЕ 1 / втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью.КоличествоСобственников * втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|	КОНЕЦ КАК ПлощадьВСобственности
	|ПОМЕСТИТЬ втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот
	|ИЗ
	|	втСобственникиПомещений КАК втСобственникиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения
	|		ПО втСобственникиПомещений.Помещение = втСведенияОСобственностиНаПомещения.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОбОбщихПлощадях КАК втСведенияОбОбщихПлощадях
	|		ПО втСобственникиПомещений.Помещение = втСведенияОбОбщихПлощадях.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью КАК втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью
	|		ПО втСобственникиПомещений.Помещение = втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОСобственностиНаПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственникиПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОбОбщихПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНосителиЛьготСМаксПриоритетами.ЛицевойСчет КАК ЛицевойСчет,
	|	втНосителиЛьготСМаксПриоритетами.Адрес КАК Адрес,
	|	втНосителиЛьготСМаксПриоритетами.Плательщик КАК Плательщик,
	|	втНосителиЛьготСМаксПриоритетами.Приоритет КАК Приоритет,
	//|	втНосителиЛьготСМаксПриоритетами.Льгота КАК Льгота,
	|	втБлизкиеРодственникиНосителяЛьгот.ФизическоеЛицоНосителяЛьгот КАК ФизическоеЛицоНосителяЛьгот,
	|	втБлизкиеРодственникиНосителяЛьгот.ФизическоеЛицоЧленаСемьи КАК ФизическоеЛицоЧленаСемьи,
	|	втБлизкиеРодственникиНосителяЛьгот.СтепеньРодства КАК СтепеньРодства
	|ПОМЕСТИТЬ втНосителиЛьготСЧленамиСемей
	|ИЗ
	|	втНосителиЛьготСМаксПриоритетами КАК втНосителиЛьготСМаксПриоритетами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБлизкиеРодственникиНосителяЛьгот КАК втБлизкиеРодственникиНосителяЛьгот
	|		ПО втНосителиЛьготСМаксПриоритетами.Плательщик.ФизЛицо = втБлизкиеРодственникиНосителяЛьгот.ФизическоеЛицоНосителяЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНосителиЛьготСЧленамиСемей.ЛицевойСчет КАК ЛицевойСчет,
	|	втНосителиЛьготСЧленамиСемей.Плательщик КАК Плательщик,
	|	втНосителиЛьготСЧленамиСемей.Приоритет КАК Приоритет,
	|	втНосителиЛьготСЧленамиСемей.ФизическоеЛицоНосителяЛьгот КАК ФизическоеЛицоНосителяЛьгот,
	|	втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи КАК ФизическоеЛицоЧленаСемьи,
	|	ВЫБОР
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Муж)
	|			ТОГДА 1
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Жена)
	|			ТОГДА 2
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Отец)
	|			ТОГДА 3
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Мать)
	|			ТОГДА 4
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Сын)
	|			ТОГДА 5
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.Дочь)
	|			ТОГДА 6
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства.Наименование = ""Брат""
	|			ТОГДА 7
	|		КОГДА втНосителиЛьготСЧленамиСемей.СтепеньРодства.Наименование = ""Сестра""
	|			ТОГДА 8
	|		ИНАЧЕ 23
	|	КОНЕЦ КАК FamilyRelation,
	|	ЕСТЬNULL(втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот.ПлощадьВСобственности, 0) КАК OwnSquare,
	|	ЕСТЬNULL(втФИОЧленовСемьиНосителяЛьгот.Фамилия, """") КАК Name1,
	|	ЕСТЬNULL(втФИОЧленовСемьиНосителяЛьгот.Имя, """") КАК Name2,
	|	ЕСТЬNULL(втФИОЧленовСемьиНосителяЛьгот.Отчество, """") КАК Name3,
	|	втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи.СтраховойНомерПФР КАК SNILS,
	|	ВЫБОР
	|		КОГДА втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		КОГДА втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""Ж""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Gender,
	|	втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи.ДатаРождения КАК Birthday
	|ИЗ
	|	втНосителиЛьготСЧленамиСемей КАК втНосителиЛьготСЧленамиСемей
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОЧленовСемьиНосителяЛьгот КАК втФИОЧленовСемьиНосителяЛьгот
	|		ПО втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи = втФИОЧленовСемьиНосителяЛьгот.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот КАК втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот
	|		ПО втНосителиЛьготСЧленамиСемей.Адрес = втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот.Адрес
	|			И втНосителиЛьготСЧленамиСемей.ФизическоеЛицоЧленаСемьи = втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиЧленовСемьиНосителейЛьгот.ФизическоеЛицоЧленаСемьи";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Нужно добавить Дату рождения, Пол и Степень родства по справочнику.
	Возврат Результат;
	
КонецФункции // ПодготовитьТаблицуЧленовСемейНосителейЛьгот()

// Вспомогательная функция, предназначенная для записи значений в xml-файл.
//
Процедура ЗаписатьТекстВXMLФайле(ЗаписьXML, НаименованиеЭлемента, ЗначениеЭлемента)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(НаименованиеЭлемента);
	ЗаписьXML.ЗаписатьТекст(ЗначениеЭлемента);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьТекстВXMLФайле()

// Предназначена для подготовки сведений о площади в собственности, типе регистрации и признаках проживания носителей льгот.
//
Функция ПолучитьДополнительныеСведенияОПлательщикеЛьгот(Плательщики)
	
	// 1. Получим сведения о долях собственности носителей льгот.
	//    Если вид собственности на помещение частная (индивидуальная), тогда доля собственности равна 1.
	// 2. Получим сведения о площадях помещений, к лицевым счетам которых привязаны носители льгот.
	// 3. Получим площади в собственности носителей льгот при помощи связывания таблиц, полученных в результате
	//    соединения таблиц 1 и 2.
	// 4. Получим сведения о статусах регистрации носителей льгот.
	// 5. Получим сведения о признаках проживания носителей льгот.
	// 6. Получим итоговую таблицу, путем соединения таблиц 3, 5 и 6.
	//    Основная таблица будет 3.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Плательщики.Плательщик КАК Плательщик,
	|	Плательщики.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втНосителейЛьгот
	|ИЗ
	|	&Плательщики КАК Плательщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНосителейЛьгот.Плательщик КАК Плательщик,
	|	втНосителейЛьгот.ЛицевойСчет КАК ЛицевойСчет,
	|	втНосителейЛьгот.ЛицевойСчет.Адрес КАК Адрес,
	|	втНосителейЛьгот.Плательщик.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втНосителиЛьготСПомещениями
	|ИЗ
	|	втНосителейЛьгот КАК втНосителейЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности
	|ПОМЕСТИТЬ втСведенияОСобственностиНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втНосителиЛьготСПомещениями.Адрес КАК Адрес
	|				ИЗ
	|					втНосителиЛьготСПомещениями КАК втНосителиЛьготСПомещениями)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|	И УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втСведенияОСобственностиНаПомещения.Помещение КАК Помещение
	|				ИЗ
	|					втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК КоличествоСобственников
	|ПОМЕСТИТЬ втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втСведенияОСобственностиНаПомещения.Помещение КАК Помещение
	|				ИЗ
	|					втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения
	|				ГДЕ
	|					втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная))) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втСведенияОбОбщихПлощадях
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Дата,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втНосителиЛьготСПомещениями.Адрес КАК Адрес
	|					ИЗ
	|						втНосителиЛьготСПомещениями КАК втНосителиЛьготСПомещениями)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственникиПомещений.Помещение КАК Помещение,
	|	втСобственникиПомещений.Собственник КАК Собственник,
	|	ВЫБОР
	|		КОГДА втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|			ТОГДА втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|		КОГДА втСведенияОСобственностиНаПомещения.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|			ТОГДА ВЫБОР
	|					КОГДА втСобственникиПомещений.ДоляСобственникаЗнаменатель = 0
	|						ТОГДА втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|					ИНАЧЕ втСобственникиПомещений.ДоляСобственникаЧислитель / втСобственникиПомещений.ДоляСобственникаЗнаменатель * втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|				КОНЕЦ
	|		ИНАЧЕ 1 / втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью.КоличествоСобственников * втСведенияОбОбщихПлощадях.ОбщаяПлощадь
	|	КОНЕЦ КАК ПлощадьВСобственности
	|ПОМЕСТИТЬ втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот
	|ИЗ
	|	втСобственникиПомещений КАК втСобственникиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения
	|		ПО втСобственникиПомещений.Помещение = втСведенияОСобственностиНаПомещения.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОбОбщихПлощадях КАК втСведенияОбОбщихПлощадях
	|		ПО втСобственникиПомещений.Помещение = втСведенияОбОбщихПлощадях.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью КАК втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью
	|		ПО втСобственникиПомещений.Помещение = втСведенияОЧисленностиСобственниковПомещенийССовместнойЧастнойСобственностью.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Плательщик,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК RegType
	|ПОМЕСТИТЬ втСведенияОРегистрацииПлательщиков
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втНосителиЛьготСПомещениями.Плательщик КАК Плательщик
	|					ИЗ
	|						втНосителиЛьготСПомещениями КАК втНосителиЛьготСПомещениями)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец КАК Плательщик,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК LivingType
	|ПОМЕСТИТЬ СведенияОПризнакахПроживания
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&Дата,
	|			Жилец В
	|					(ВЫБРАТЬ
	|						втНосителиЛьготСПомещениями.Плательщик КАК Плательщик
	|					ИЗ
	|						втНосителиЛьготСПомещениями КАК втНосителиЛьготСПомещениями)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНосителиЛьготСПомещениями.Плательщик КАК Плательщик,
	|	втНосителиЛьготСПомещениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втНосителиЛьготСПомещениями.Адрес КАК Адрес,
	|	втНосителиЛьготСПомещениями.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот.ПлощадьВСобственности, 0) КАК OwnSquare,
	|	ЕСТЬNULL(втСведенияОРегистрацииПлательщиков.RegType, 0) КАК RegType,
	|	ЕСТЬNULL(СведенияОПризнакахПроживания.LivingType, 0) КАК LivingType
	|ИЗ
	|	втНосителиЛьготСПомещениями КАК втНосителиЛьготСПомещениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот КАК втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот
	|		ПО втНосителиЛьготСПомещениями.ФизЛицо = втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот.Собственник
	|			И втНосителиЛьготСПомещениями.Адрес = втСведенияОПлощадяхПомещенийНаходящихсяВСобственностиНосителейЛьгот.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОРегистрацииПлательщиков КАК втСведенияОРегистрацииПлательщиков
	|		ПО втНосителиЛьготСПомещениями.Плательщик = втСведенияОРегистрацииПлательщиков.Плательщик
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОПризнакахПроживания КАК СведенияОПризнакахПроживания
	|		ПО втНосителиЛьготСПомещениями.Плательщик = СведенияОПризнакахПроживания.Плательщик";
	
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("Плательщики", Плательщики.Выгрузить());
	
	ТаблицаДопСведений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДопСведений;
	
КонецФункции // ПолучитьДополнительныеСведенияОПлательщикеЛьгот()

// Предназначена для подготовки итоговых суммовых показателей, которые выводятся в полях "Check1", "Check2", "Check3" и "Check4".
//
Функция ПодготовитьСтруктуруИтоговыхСуммовыхПоказателей()
	
	// 1. Получаем настройки услуг из настроек выгрузки ГЦЖС.
	// 2. Подгружаем их в запрос и сгруппируем данные о выпадающих доходах по типам услуг.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовУслуг КАК ТаблицаКодовУслуг
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(&Дата, ) КАК УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		ТаблицаКодовУслуг = ВыборкаДанных.ТаблицаКодовУслуг.Получить();
		
		Если НЕ ТаблицаКодовУслуг = Неопределено Тогда
			
			Если ТаблицаКодовУслуг.Колонки.Найти("ТипУслуги") = Неопределено Тогда
				ТекстОшибки = "Файл выгрузки не сформирован!" + Символы.ПС
							+ "В настройках выгрузки ГЦЖС в таблице ""Коды услуг"" не заполнены типы услуг." + Символы.ПС
							+ "Данные типы услуг учитывает при подсчете итоговых суммовых показателей, выводимых в полях ""Check1"", ""Check2"", ""Check3"" и ""Check4""." + Символы.ПС
							+ "Заполните данные типы услуг и повторно сформируйте файл выгрузки.";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
			
			СписокCheck1 = Новый СписокЗначений;
			СписокCheck2 = Новый СписокЗначений;
			СписокCheck3 = Новый СписокЗначений;
			СписокCheck4 = Новый СписокЗначений;
			
			Для каждого ТекСтрока Из ТаблицаКодовУслуг Цикл
				
				Если ТекСтрока.ТипУслуги = "Оплата жилого помещения" Тогда
					СписокCheck1.Добавить(ТекСтрока.Наименование);
				ИначеЕсли ТекСтрока.ТипУслуги = "Коммунальная услуга" Тогда
					СписокCheck2.Добавить(ТекСтрока.Наименование);
				ИначеЕсли ТекСтрока.ТипУслуги = "Взнос на капитальный ремонт" Тогда
					СписокCheck3.Добавить(ТекСтрока.Наименование);
				ИначеЕсли ТекСтрока.ТипУслуги = "Связь (радиоточка и телеантенна)" Тогда
					СписокCheck4.Добавить(ТекСтрока.Наименование);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Скидки",       Скидки.Выгрузить());
	Запрос.УстановитьПараметр("СписокCheck1", СписокCheck1);
	Запрос.УстановитьПараметр("СписокCheck2", СписокCheck2);
	Запрос.УстановитьПараметр("СписокCheck3", СписокCheck3);
	Запрос.УстановитьПараметр("СписокCheck4", СписокCheck4);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Скидки.Услуга КАК Услуга,
	|	Скидки.РазмерСкидки КАК РазмерСкидки,
	|	Скидки.СуммаКорректировки КАК СуммаКорректировки
	|ПОМЕСТИТЬ втСведенияОВыпадающихДоходах
	|ИЗ
	|	&Скидки КАК Скидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck1)
	|			ТОГДА 1
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck2)
	|			ТОГДА 2
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck3)
	|			ТОГДА 3
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck4)
	|			ТОГДА 4
	|	КОНЕЦ КАК Check,
	|	СУММА(втСведенияОВыпадающихДоходах.РазмерСкидки) КАК РазмерСкидки,
	|	СУММА(втСведенияОВыпадающихДоходах.СуммаКорректировки) КАК СуммаКорректировки
	|ИЗ
	|	втСведенияОВыпадающихДоходах КАК втСведенияОВыпадающихДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck1)
	|			ТОГДА 1
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck2)
	|			ТОГДА 2
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck3)
	|			ТОГДА 3
	|		КОГДА втСведенияОВыпадающихДоходах.Услуга В (&СписокCheck4)
	|			ТОГДА 4
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Check";
	
	ВыборкаИтоговыхПоказателей = Запрос.Выполнить().Выбрать();
	
	СтруктураИтоговыхСуммовыхПоказателей = Новый Структура("Check1, Check2, Check3, Check4");
	СтруктураИтоговыхСуммовыхПоказателей.Check1 = 0;
	СтруктураИтоговыхСуммовыхПоказателей.Check2 = 0;
	СтруктураИтоговыхСуммовыхПоказателей.Check3 = 0;
	СтруктураИтоговыхСуммовыхПоказателей.Check4 = 0;
	
	Пока ВыборкаИтоговыхПоказателей.Следующий() Цикл
		
		Если ВыборкаИтоговыхПоказателей.Check = 1 Тогда
			СтруктураИтоговыхСуммовыхПоказателей.Check1 = ?(РежимРаботы = 0, ВыборкаИтоговыхПоказателей.РазмерСкидки, ВыборкаИтоговыхПоказателей.СуммаКорректировки);
		ИначеЕсли ВыборкаИтоговыхПоказателей.Check = 2 Тогда
			СтруктураИтоговыхСуммовыхПоказателей.Check2 = ?(РежимРаботы = 0, ВыборкаИтоговыхПоказателей.РазмерСкидки, ВыборкаИтоговыхПоказателей.СуммаКорректировки);
		ИначеЕсли ВыборкаИтоговыхПоказателей.Check = 3 Тогда
			СтруктураИтоговыхСуммовыхПоказателей.Check3 = ?(РежимРаботы = 0, ВыборкаИтоговыхПоказателей.РазмерСкидки, ВыборкаИтоговыхПоказателей.СуммаКорректировки);
		ИначеЕсли ВыборкаИтоговыхПоказателей.Check = 4 Тогда
			СтруктураИтоговыхСуммовыхПоказателей.Check4 = ?(РежимРаботы = 0, ВыборкаИтоговыхПоказателей.РазмерСкидки, ВыборкаИтоговыхПоказателей.СуммаКорректировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураИтоговыхСуммовыхПоказателей;
	
КонецФункции // ПодготовитьСтруктуруИтоговыхСуммовыхПоказателей()

// Процедура заполняет табличные части документа.
//
// Параметры
//  мНеУчитыватьЛьготыВоВзаиморасчетах - булево, признак учета льготы во взаиморасчетах.
//
Функция ЗаполнитьТабличныеЧасти(ЛицевойСчет = Неопределено, Плательщик = Неопределено, ЗаполнятьПоСтроке = Ложь) Экспорт
	
	СтруктураТаблиц = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СформироватьТаблицыКодов(Дата, Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("КодыРайонов",            СтруктураТаблиц.КодыРайонов);
	Запрос.УстановитьПараметр("КодыУлиц",               СтруктураТаблиц.КодыУлиц);
	Запрос.УстановитьПараметр("КодыПлательщиков",       СтруктураТаблиц.КодыПлательщиков);
	Запрос.УстановитьПараметр("КодыЖилищныхФондов",     СтруктураТаблиц.КодыЖилищныхФондов);
	Запрос.УстановитьПараметр("КодыТиповЗаселения",     СтруктураТаблиц.КодыТиповЗаселения);
	Запрос.УстановитьПараметр("КодыДокументовЛичности", СтруктураТаблиц.КодыДокументовЛичности);
	Запрос.УстановитьПараметр("КодыУслуг",              СтруктураТаблиц.КодыУслуг);
	Запрос.УстановитьПараметр("КодыЛьгот",              СтруктураТаблиц.КодыЛьгот);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	втКодыРайонов.Код КАК Код,
	|	втКодыРайонов.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыРайонов
	|ИЗ
	|	&КодыРайонов КАК втКодыРайонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыУлиц.Код КАК Код,
	|	втКодыУлиц.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыУлиц
	|ИЗ
	|	&КодыУлиц КАК втКодыУлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыПлательщиков.Код КАК Код,
	|	втКодыПлательщиков.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыПлательщиков
	|ИЗ
	|	&КодыПлательщиков КАК втКодыПлательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыЖилищныхФондов.Код КАК Код,
	|	втКодыЖилищныхФондов.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыЖилищныхФондов
	|ИЗ
	|	&КодыЖилищныхФондов КАК втКодыЖилищныхФондов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыТиповЗаселения.Код КАК Код,
	|	втКодыТиповЗаселения.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыТиповЗаселения
	|ИЗ
	|	&КодыТиповЗаселения КАК втКодыТиповЗаселения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыДокументовЛичности.Код КАК Код,
	|	втКодыДокументовЛичности.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыДокументовЛичности
	|ИЗ
	|	&КодыДокументовЛичности КАК втКодыДокументовЛичности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
	|	ТаблицаТелефоновЖильцов.СписокТелефонов КАК СписокТелефонов
	|ПОМЕСТИТЬ втТаблицаТелефоновЖильцов
	|ИЗ
	|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Льготный) КАК ВидТарифаПоПеречислению
	|ПОМЕСТИТЬ ПеречислениеВидовТарифов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыУслуг.Код КАК Код,
	|	втКодыУслуг.Наименование КАК Наименование,
	|	втКодыУслуг.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ КодыУслугДляОбработки
	|ИЗ
	|	&КодыУслуг КАК втКодыУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугДляОбработки.Код КАК Код,
	|	КодыУслугДляОбработки.Наименование КАК Наименование,
	|	КодыУслугДляОбработки.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ КодыУслугСУказаннымВидомТарифа
	|ИЗ
	|	КодыУслугДляОбработки КАК КодыУслугДляОбработки
	|ГДЕ
	|	НЕ КодыУслугДляОбработки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугДляОбработки.Код КАК Код,
	|	КодыУслугДляОбработки.Наименование КАК Наименование
	|ПОМЕСТИТЬ КодыУслугБезВидаТарифа
	|ИЗ
	|	КодыУслугДляОбработки КАК КодыУслугДляОбработки
	|ГДЕ
	|	КодыУслугДляОбработки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугБезВидаТарифа.Код КАК Код,
	|	КодыУслугБезВидаТарифа.Наименование КАК Наименование,
	|	ПеречислениеВидовТарифов.ВидТарифаПоПеречислению КАК ВидТарифа
	|ПОМЕСТИТЬ ВозможныеКодыУслугЕслиВидТарифаНеУказан
	|ИЗ
	|	КодыУслугБезВидаТарифа КАК КодыУслугБезВидаТарифа,
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПеречислениеВидовТарифов ПО ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугСУказаннымВидомТарифа.Код КАК Код,
	|	КодыУслугСУказаннымВидомТарифа.Наименование КАК Наименование,
	|	КодыУслугСУказаннымВидомТарифа.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ КодыУслуг
	|ИЗ
	|	КодыУслугСУказаннымВидомТарифа КАК КодыУслугСУказаннымВидомТарифа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.Код,
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.Наименование,
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.ВидТарифа
	|ИЗ
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан КАК ВозможныеКодыУслугЕслиВидТарифаНеУказан
	|ГДЕ
	|	НЕ (ВозможныеКодыУслугЕслиВидТарифаНеУказан.Наименование, ВозможныеКодыУслугЕслиВидТарифаНеУказан.ВидТарифа) В
	|				(ВЫБРАТЬ
	|					КодыУслугСУказаннымВидомТарифа.Наименование КАК Наименование,
	|					КодыУслугСУказаннымВидомТарифа.ВидТарифа КАК ВидТарифа
	|				ИЗ
	|					КодыУслугСУказаннымВидомТарифа КАК КодыУслугСУказаннымВидомТарифа)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	| ПеречислениеВидовТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	| КодыУслугДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	| КодыУслугСУказаннымВидомТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ
	| КодыУслугБезВидаТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыЛьгот.Код,
	|	втКодыЛьгот.Наименование
	|ПОМЕСТИТЬ КодыЛьгот
	|ИЗ
	|	&КодыЛьгот КАК втКодыЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленныеЛьготы.Организация,
	|	НачисленныеЛьготы.ЛицевойСчет,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Владелец.ТипЖилФонда КАК ТипЖилФонда,
	|	НачисленныеЛьготы.Услуга,
	|	НачисленныеЛьготы.ЛьготнаяКатегория,
	|	НачисленныеЛьготы.МесяцНачисления КАК МесяцНачисления,
	|	НачисленныеЛьготы.Проживающий КАК Проживающий,
	|	СУММА(НачисленныеЛьготы.СуммаНачисления) КАК СуммаНачисленияОборот,
	|	МАКСИМУМ(НачисленныеЛьготы.Тариф) КАК Тариф,
	|	НачисленныеЛьготы.ВидТарифа КАК ВидТарифа,
	|	СУММА(НачисленныеЛьготы.ЛьготнаяПлощадь) КАК Площадь,
	|	СУММА(НачисленныеЛьготы.Количество) КАК НачисленныеЛьготыПолеКоличества
	|ПОМЕСТИТЬ НачисленныеЛьготыОбороты
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы КАК НачисленныеЛьготы
	|	
	|ГДЕ
	|	Период <= &ДатаДокумента
	|	И Организация = &Организация
	|	И &УсловиеЛьготнаяКатегория
	|	И &УсловиеУслуги
	|	И &ОбъектНачисление
	|	И МесяцНачисления = &ДатаНач
	|	И &УсловиеДляРегистраНакопления
	|СГРУППИРОВАТЬ ПО
	|	НачисленныеЛьготы.Организация,
	|	НачисленныеЛьготы.ЛицевойСчет,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Код,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Суффикс,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Владелец,
	|	НачисленныеЛьготы.ЛицевойСчет.Адрес.Владелец.ТипЖилФонда,
	|	НачисленныеЛьготы.Услуга,
	|	НачисленныеЛьготы.ЛьготнаяКатегория,
	|	НачисленныеЛьготы.МесяцНачисления,
	|	НачисленныеЛьготы.Проживающий,
	|	НачисленныеЛьготы.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами,
	|КВП_СкидкиСрезПоследних.Услуга,
	|КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|ПОМЕСТИТЬ ТаблицаЛицПользующихсяЛьготами
	|ИЗ
	|РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаКон, &УсловиеУслуги) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если РежимРаботы = 1 Тогда //Корректировка
		
		ТекстЗапросаФрагмент = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
		                       |	НачисленныеЛьготыОбороты.ЛицевойСчет.Адрес КАК Помещение,
		                       |	НачисленныеЛьготыОбороты.НомерКвартиры КАК НомерКвартиры,
		                       |	НачисленныеЛьготыОбороты.СуффиксКвартиры КАК СуффиксКвартиры,
		                       |	НачисленныеЛьготыОбороты.Здание КАК Здание,
		                       |	НачисленныеЛьготыОбороты.ТипЖилФонда КАК ТипЖилФонда,
		                       |	НачисленныеЛьготыОбороты.Услуга КАК Услуга,
		                       |	НачисленныеЛьготыОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
		                       |	НачисленныеЛьготыОбороты.МесяцНачисления КАК МесяцНачисления,
		                       |	НачисленныеЛьготыОбороты.Проживающий КАК Проживающий,
		                       |	НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		                       |	0 КАК Тариф,
		                       |	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка) КАК ВидТарифа,
		                       |	0 КАК Площадь,
		                       |	0 КАК ФактическийОбъем,
		                       |	0 КАК Объем,
		                       |	НачисленныеЛьготыОбороты.МесяцНачисления КАК МесяцКорректировки,
		                       |	ТаблицаЛицПользующихсяЛьготами.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами
		                       |ПОМЕСТИТЬ ТаблицаНачислений
		                       |ИЗ
		                       |	НачисленныеЛьготыОбороты КАК НачисленныеЛьготыОбороты
		                       |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛицПользующихсяЛьготами КАК ТаблицаЛицПользующихсяЛьготами
		                       |		ПО НачисленныеЛьготыОбороты.Услуга = ТаблицаЛицПользующихсяЛьготами.Услуга
		                       |			И НачисленныеЛьготыОбороты.ЛьготнаяКатегория = ТаблицаЛицПользующихсяЛьготами.ЛьготнаяКатегория
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |";
		
	Иначе //Обычный режим
		
		ТекстЗапросаФрагмент = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		                       |	НачисленияОбороты.Услуга КАК Услуга,
		                       |	НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		                       |	НАЧАЛОПЕРИОДА(НачисленияОбороты.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления,
		                       |	СУММА(НачисленияОбороты.Количество) КАК ФактическийОбъем
		                       |ПОМЕСТИТЬ втТаблицаФактическийОбъем
		                       |ИЗ
		                       |	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		                       |			&ДатаНач,
		                       |			&ДатаКон,
		                       |			Регистратор,
		                       |			Организация = &Организация
		                       |				И &УсловиеУслуги
		                       |				И &ОбъектНачисление
		                       |				И (ЛицевойСчет, Услуга, ВидТарифа, НАЧАЛОПЕРИОДА(МесяцНачисления, МЕСЯЦ)) В
		                       |					(ВЫБРАТЬ
		                       |						ВнутрТаблица.ЛицевойСчет,
		                       |						ВнутрТаблица.Услуга,
		                       |						ВнутрТаблица.ВидТарифа,
		                       |						ВнутрТаблица.МесяцНачисления
		                       |					ИЗ
		                       |						НачисленныеЛьготыОбороты КАК ВнутрТаблица)
		                       |				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		                       |				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))) КАК НачисленияОбороты
		                       |СГРУППИРОВАТЬ ПО
		                       |	НачисленияОбороты.ЛицевойСчет,
		                       |	НачисленияОбороты.Услуга,
		                       |	НачисленияОбороты.ВидТарифа,
		                       |	НАЧАЛОПЕРИОДА(НачисленияОбороты.МесяцНачисления, МЕСЯЦ)
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                       |	НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
		                       |	НачисленныеЛьготыОбороты.ЛицевойСчет.Адрес КАК Помещение,
		                       |	НачисленныеЛьготыОбороты.НомерКвартиры КАК НомерКвартиры,
		                       |	НачисленныеЛьготыОбороты.СуффиксКвартиры КАК СуффиксКвартиры,
		                       |	НачисленныеЛьготыОбороты.Здание КАК Здание,
		                       |	НачисленныеЛьготыОбороты.ТипЖилФонда КАК ТипЖилФонда,
		                       |	НачисленныеЛьготыОбороты.Услуга КАК Услуга,
		                       |	НачисленныеЛьготыОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
		                       |	НачисленныеЛьготыОбороты.МесяцНачисления КАК МесяцНачисления,
		                       |	НачисленныеЛьготыОбороты.Проживающий КАК Проживающий,
		                       |	НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		                       |	НачисленныеЛьготыОбороты.Тариф КАК Тариф,
		                       |	НачисленныеЛьготыОбороты.ВидТарифа КАК ВидТарифа,
		                       |	НачисленныеЛьготыОбороты.Площадь КАК Площадь,
		                       |	ЕСТЬNULL(ТаблицаФактическийОбъем.ФактическийОбъем, 0) КАК ФактическийОбъем,
		                       |	НачисленныеЛьготыОбороты.НачисленныеЛьготыПолеКоличества КАК Объем,
		                       |	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцКорректировки,
		                       |	ТаблицаЛицПользующихсяЛьготами.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами
		                       |ПОМЕСТИТЬ ТаблицаНачислений
		                       |ИЗ
		                       |	НачисленныеЛьготыОбороты КАК НачисленныеЛьготыОбороты
		                       |ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаФактическийОбъем КАК ТаблицаФактическийОбъем
		                       |	ПО (НачисленныеЛьготыОбороты.ЛицевойСчет = ТаблицаФактическийОбъем.ЛицевойСчет)
		                       |		И (НачисленныеЛьготыОбороты.Услуга = ТаблицаФактическийОбъем.Услуга)
		                       |		И (НачисленныеЛьготыОбороты.ВидТарифа = ТаблицаФактическийОбъем.ВидТарифа)
		                       |		И (НачисленныеЛьготыОбороты.МесяцНачисления = ТаблицаФактическийОбъем.МесяцНачисления)
		                       |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛицПользующихсяЛьготами КАК ТаблицаЛицПользующихсяЛьготами
		                       |	ПО НачисленныеЛьготыОбороты.Услуга = ТаблицаЛицПользующихсяЛьготами.Услуга
		                       |		И НачисленныеЛьготыОбороты.ЛьготнаяКатегория = ТаблицаЛицПользующихсяЛьготами.ЛьготнаяКатегория
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |УНИЧТОЖИТЬ втТаблицаФактическийОбъем
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаФрагмент;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_Скидки.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_Скидки.ЛьготнаяКатегорияДляСверхобъема КАК ЛьготнаяКатегорияДляСверхобъема
	|ПОМЕСТИТЬ врТаблицаСверхобъемныхЛьгот
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаКон, &УсловиеУслуги) КАК КВП_Скидки
	|ГДЕ
	|	НЕ КВП_Скидки.ЛьготнаяКатегорияДляСверхобъема = ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающих.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаВсехПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТабНач.ЛицевойСчет
	|					ИЗ
	|						ТаблицаНачислений КАК ТабНач)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ врТаблицаВсехПроживающих.Жилец) КАК КоличествоПроживающих,
	|	врТаблицаВсехПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаПроживающих
	|ИЗ
	|	врТаблицаВсехПроживающих КАК врТаблицаВсехПроживающих
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаВсехПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОЗарегистрированных.Жилец) КАК КоличествоЗарегистрированных,
	|	СведенияОЗарегистрированных.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТабНач.ЛицевойСчет
	|					ИЗ
	|						ТаблицаНачислений КАК ТабНач)
	|				И ДатаИзменения <= &ДатаКон) КАК СведенияОЗарегистрированных
	|ГДЕ
	|	СведенияОЗарегистрированных.Зарегистрирован
	|	И НЕ СведенияОЗарегистрированных.ВременнаяРегистрация
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗарегистрированных.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Площади.Объект КАК Объект,
	|	СУММА(ВЫБОР
	|			КОГДА Площади.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА Площади.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА Площади.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА Площади.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ врТаблицаПлощадей
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаНачислений.Помещение КАК Помещение
	|					ИЗ
	|						ТаблицаНачислений КАК ТаблицаНачислений)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь), ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК Площади
	|
	|СГРУППИРОВАТЬ ПО
	|	Площади.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.ФизЛицо КАК ФизЛицо,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан2,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан3,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента3
	|ПОМЕСТИТЬ ВрТаблицаЛьготников
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаНач,
	|			&УсловиеОбъектДляСрезаПоследних
	|				И &УсловиеЛьготнаяКатегория
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец,
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.Проживающий.ФизЛицо КАК ФизЛицо,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.ДатаВыдачиДокумента,
	|	КВП_НазначенныеЛьготы.ДатаВыдачиДокумента2,
	|	КВП_НазначенныеЛьготы.ДатаВыдачиДокумента3,
	|	КВП_НазначенныеЛьготы.НомерДокумента,
	|	КВП_НазначенныеЛьготы.НомерДокумента2,
	|	КВП_НазначенныеЛьготы.НомерДокумента3,
	|	КВП_НазначенныеЛьготы.СерияДокумента,
	|	КВП_НазначенныеЛьготы.СерияДокумента2,
	|	КВП_НазначенныеЛьготы.СерияДокумента3,
	|	КВП_НазначенныеЛьготы.ВидДокумента,
	|	КВП_НазначенныеЛьготы.ВидДокумента2,
	|	КВП_НазначенныеЛьготы.ВидДокумента3,
	|	КВП_НазначенныеЛьготы.КемВыдан,
	|	КВП_НазначенныеЛьготы.КемВыдан2,
	|	КВП_НазначенныеЛьготы.КемВыдан3,
	|	КВП_НазначенныеЛьготы.ДатаОкончанияДокумента,
	|	КВП_НазначенныеЛьготы.ДатаОкончанияДокумента2,
	|	КВП_НазначенныеЛьготы.ДатаОкончанияДокумента3
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеЛьготы.Действие
	|	И &УсловиеОбъект
	|	И &УсловиеЛьготнаяКатегорияВНазначении
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ
	|	врТаблицаФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ФизическоеЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВрТаблицаЛьготников)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НазначенныеЛьготы.ЛицевойСчет,
	|	НазначенныеЛьготы.Проживающий КАК Жилец,
	|	НазначенныеЛьготы.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(втТаблицаТелефоновЖильцов.СписокТелефонов, """") КАК Телефон,
	|	НазначенныеЛьготы.Проживающий.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомер,
	|	НазначенныеЛьготы.Проживающий.ФизЛицо.Пол КАК Пол,
	|	НазначенныеЛьготы.Проживающий.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ТаблицаФИОФизЛиц.Фамилия,
	|	ТаблицаФИОФизЛиц.Имя,
	|	ТаблицаФИОФизЛиц.Отчество,
	|	НазначенныеЛьготы.ЛьготнаяКатегория,
	|	ЕСТЬNULL(врТаблицаСверхобъемныхЛьгот.ЛьготнаяКатегорияДляСверхобъема, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегорияДляСверхобъема,
	|	НазначенныеЛьготы.ДатаВыдачиДокумента,
	|	НазначенныеЛьготы.ДатаВыдачиДокумента2,
	|	НазначенныеЛьготы.ДатаВыдачиДокумента3,
	|	НазначенныеЛьготы.НомерДокумента,
	|	НазначенныеЛьготы.НомерДокумента2,
	|	НазначенныеЛьготы.НомерДокумента3,
	|	НазначенныеЛьготы.СерияДокумента,
	|	НазначенныеЛьготы.СерияДокумента2,
	|	НазначенныеЛьготы.СерияДокумента3,
	|	НазначенныеЛьготы.ВидДокумента,
	|	НазначенныеЛьготы.ВидДокумента2,
	|	НазначенныеЛьготы.ВидДокумента3,
	|	НазначенныеЛьготы.КемВыдан,
	|	НазначенныеЛьготы.КемВыдан2,
	|	НазначенныеЛьготы.КемВыдан3,
	|	НазначенныеЛьготы.ДатаОкончанияДокумента КАК ДатаОкончанияДокументаЛьготы,
	|	НазначенныеЛьготы.ДатаОкончанияДокумента2 КАК ДатаОкончанияДокументаЛьготы2,
	|	НазначенныеЛьготы.ДатаОкончанияДокумента3 КАК ДатаОкончанияДокументаЛьготы3,
	|	врТаблицаЗарегистрированных.КоличествоЗарегистрированных,
	|	врТаблицаПроживающих.КоличествоПроживающих,
	|	врТаблицаПлощадей.ОбщаяПлощадь,
	|	врТаблицаПлощадей.ЖилаяПлощадь
	|ПОМЕСТИТЬ ТаблицаЛьготников
	|ИЗ
	|	ВрТаблицаЛьготников КАК НазначенныеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПроживающих КАК врТаблицаПроживающих
	|		ПО НазначенныеЛьготы.ЛицевойСчет = врТаблицаПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаЗарегистрированных КАК врТаблицаЗарегистрированных
	|		ПО НазначенныеЛьготы.ЛицевойСчет = врТаблицаЗарегистрированных.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПлощадей КАК врТаблицаПлощадей
	|		ПО НазначенныеЛьготы.ЛицевойСчет.Адрес = врТаблицаПлощадей.Объект
	|	ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаФИОФизЛиц КАК ТаблицаФИОФизЛиц
	|		ПО НазначенныеЛьготы.ФизЛицо = ТаблицаФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаСверхобъемныхЛьгот КАК врТаблицаСверхобъемныхЛьгот
	|		ПО НазначенныеЛьготы.ЛьготнаяКатегория = врТаблицаСверхобъемныхЛьгот.ЛьготнаяКатегория
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаТелефоновЖильцов КАК втТаблицаТелефоновЖильцов
	|		ПО НазначенныеЛьготы.Проживающий = втТаблицаТелефоновЖильцов.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаФИОФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное КАК ФизическоеЛицоОсновное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное
	|ПОМЕСТИТЬ КоличествоВсехРодственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&ДатаКон, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|ГДЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВсехРодственников.ФизическоеЛицоСвязанное) КАК КолРодственников,
	|	КоличествоВсехРодственников.ФизическоеЛицоОсновное КАК ФизическоеЛицоОсновное
	|ПОМЕСТИТЬ КоличествоРодственников
	|ИЗ
	|	КоличествоВсехРодственников КАК КоличествоВсехРодственников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаВсехПроживающих КАК врТаблицаВсехПроживающих
	|		ПО КоличествоВсехРодственников.ФизическоеЛицоСвязанное = врТаблицаВсехПроживающих.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоВсехРодственников.ФизическоеЛицоОсновное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаЛьготников.Жилец) КАК КоличествоЛьготников
	|ПОМЕСТИТЬ втКоличестваЛьготников
	|ИЗ
	|	ТаблицаЛьготников КАК ТаблицаЛьготников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЛьготников.ЛицевойСчет";
	
	Если ЗначениеЗаполнено(ЛьготнаяКатегория) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЛьготнаяКатегорияВНазначении", "КВП_НазначенныеЛьготы.ЛьготнаяКатегория = &ЛьготнаяКатегория");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЛьготнаяКатегория",            "ЛьготнаяКатегория = &ЛьготнаяКатегория");
		Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегория);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЛьготнаяКатегорияВНазначении", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЛьготнаяКатегория",            "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		
		СписокУслуг = Новый СписокЗначений;
		
		Если Услуга.ЭтоГруппа Тогда
			СписокУслуг = ПолучитьЭлементыСправочникаПоГруппе(Услуга);
		Иначе
			СписокУслуг.Добавить(Услуга);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУслуги", "Услуга В (&Услуги)");
		Запрос.УстановитьПараметр("Услуги", СписокУслуг);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУслуги", "Истина");
	КонецЕсли;
	
	Если НЕ ЗаполнятьПоСтроке Тогда
		
		Если ЗначениеЗаполнено(ОбъектОтбор) Тогда
			
			ТипОбъекта       = ТипЗнч(ОбъектОтбор);
			ОтбираемыйОбъект = ОбъектОтбор;
			
			Если ОбъектОтбор.ЭтоГруппа Тогда
				ОтбираемыйОбъект = ПолучитьЭлементыСправочникаПоГруппе(ОбъектОтбор);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Объект", ОтбираемыйОбъект);
			
			Если ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектДляСрезаПоследних", "Проживающий.Владелец.Адрес.Владелец В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъект",                  "КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Владелец В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление",               "ЛицевойСчет.Адрес.Владелец В (&Объект)");
				
				СписокЛСЗдания = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(ОтбираемыйОбъект, НачалоМесяца(Период), КонецМесяца(Период), Истина, Ложь);
				
				ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(СписокЛСЗдания);
				
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_Подъезды") Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектДляСрезаПоследних", "Проживающий.Владелец.Адрес.Подъезд В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъект",                  "КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Подъезд В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление",               "ЛицевойСчет.Адрес.Подъезд В (&Объект)");
				
				СписокЛСПодъезда = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(ОтбираемыйОбъект, НачалоМесяца(Период), КонецМесяца(Период), Истина);
				
				ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(СписокЛСПодъезда);
				
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектДляСрезаПоследних", "Проживающий.Владелец В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъект",                  "КВП_НазначенныеЛьготы.Проживающий.Владелец В (&Объект)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление",               "ЛицевойСчет В (&Объект)");
				
				ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ОтбираемыйОбъект);
				
			Иначе
				
				ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов();
				
			КонецЕсли;
			
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектДляСрезаПоследних", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъект",                  "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление",               "ИСТИНА");
			
			ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов();
			
		КонецЕсли;
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектДляСрезаПоследних", "Проживающий.Владелец = &Объект");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъект",                  "КВП_НазначенныеЛьготы.Проживающий.Владелец = &Объект");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление",               "ЛицевойСчет = &Объект");
		Запрос.УстановитьПараметр("Объект", ЛицевойСчет);
		
		ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ЛицевойСчет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", ТаблицаТелефоновЖильцов);
	
	Если РежимРаботы = 1 Тогда //Корректировка
		УсловиеДляРегистраНакопления = "Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений";
		
	Иначе
		
		УсловиеДляРегистраНакопления = "НЕ Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляРегистраНакопления", УсловиеДляРегистраНакопления);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Здание КАК Объект
	|ИЗ
	|	ТаблицаНачислений КАК ТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Приоритет,
	|	ДокументыФизическихЛицСрезПоследних.ФизЛицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан
	|ПОМЕСТИТЬ втВсеПаспортныеДанныеФизЛиц
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&ДатаКон,
	|			ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВнутрТаблица.ФизЛицо Из ТаблицаЛьготников КАК ВнутрТаблица)
	|			И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2,
	|	ДокументыФизическихЛицСрезПоследних.ФизЛицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&ДатаКон,
	|			ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВнутрТаблица.ФизЛицо Из ТаблицаЛьготников КАК ВнутрТаблица)
	|			И НЕ ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеФизЛиц.ФизЛицо КАК ФизЛицо,
	|	МИНИМУМ(втВсеПаспортныеДанныеФизЛиц.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втПриоритетыДокументовФизическихЛиц
	|ИЗ
	|	втВсеПаспортныеДанныеФизЛиц КАК втВсеПаспортныеДанныеФизЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПаспортныеДанныеФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеФизЛиц.ФизЛицо КАК ФизЛицо,
	|	втВсеПаспортныеДанныеФизЛиц.ВидДокумента КАК ВидДокумента,
	|	втВсеПаспортныеДанныеФизЛиц.Серия КАК Серия,
	|	втВсеПаспортныеДанныеФизЛиц.Номер КАК Номер,
	|	втВсеПаспортныеДанныеФизЛиц.ДатаВыдачи КАК ДатаВыдачи,
	|	втВсеПаспортныеДанныеФизЛиц.КемВыдан КАК КемВыдан
	|ПОМЕСТИТЬ втПаспортныеДанныеФизЛиц
	|ИЗ
	|	втПриоритетыДокументовФизическихЛиц КАК втПриоритетыДокументовФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПаспортныеДанныеФизЛиц КАК втВсеПаспортныеДанныеФизЛиц
	|		ПО втПриоритетыДокументовФизическихЛиц.Приоритет = втВсеПаспортныеДанныеФизЛиц.Приоритет
	|		И втПриоритетыДокументовФизическихЛиц.ФизЛицо = втВсеПаспортныеДанныеФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ПОМЕСТИТЬ
	|	втСобственностьНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаКон, Помещение В (ВЫБРАТЬ ВнутрТаблица.Помещение ИЗ ТаблицаНачислений КАК ВнутрТаблица)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	МАКСИМУМ(УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность) КАК ОснованиеПолученияВСобственность
	|ПОМЕСТИТЬ
	|	втТаблицаОснованийПолученияВСобственность
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение В (ВЫБРАТЬ ВнутрТаблица.Помещение ИЗ ТаблицаНачислений КАК ВнутрТаблица)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность = 
	|		ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|		УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КВП_СостояниеПомещения.Объект КАК Объект,
	|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияКвартиры
	|ПОМЕСТИТЬ
	|	втТаблицаСостояниеПомещения
	|ИЗ
	|	РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|ГДЕ
	|	КВП_СостояниеПомещения.Объект В (ВЫБРАТЬ ВнутрТаблица.Помещение ИЗ ТаблицаНачислений КАК ВнутрТаблица)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.НомерКвартиры,
	|	ТаблицаНачислений.СуффиксКвартиры,
	|	ТаблицаНачислений.Здание,
	|	ТаблицаНачислений.ТипЖилФонда,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.Услуга.СпособРасчета КАК СпособРасчета,
	|	ТаблицаНачислений.ЛьготнаяКатегория,
	|	ТаблицаНачислений.МесяцНачисления,
	|	ТаблицаНачислений.СуммаНачисленияОборот,
	|	ТаблицаНачислений.СуммаНачисленияОборот КАК РазмерСкидки,
	|	ТаблицаНачислений.МесяцКорректировки,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.ВидТарифа,
	|	ТаблицаНачислений.ФактическийОбъем,
	|	ТаблицаНачислений.Объем,
	|	ТаблицаНачислений.Площадь,
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.Семья)
					// КДБ (02.04.2019) +
					// При подготовке файла выгрузки для ГЦЖС по согласованию с Дон-Строем решено:
					// 1. Если по услуге предоставляется скидка "на семью", тогда указываем в качестве количества пользующихся льготой равным "1".
					// 2. Если по услуге предоставляется скидка "на одного человека", тогда указываем в качестве количества пользующихся льготой равным "1".
					// 2. Если по услуге предоставляется скидка "на близких родственников", тогда указываем в качестве количества пользующихся льготой равным "Количество близких родственников + 1(сам носитель льготы)".
	|				ТОГДА 1
	//|				ТОГДА ТаблицаЛьготников.КоличествоПроживающих
					// КДБ (02.04.2019) -
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНачислений.ЛицаПользующиесяЛьготами = 
	|						ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники)
	|					ТОГДА ВЫБОР
	|							КОГДА НЕ КоличествоРодственников.КолРодственников ЕСТЬ NULL
	|								ТОГДА КоличествоРодственников.КолРодственников + 1
	|							ИНАЧЕ ЕСТЬNULL(КоличествоРодственников.КолРодственников, 1)
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоЖильцов,
	|	ТаблицаЛьготников.Жилец,
	|	ТаблицаЛьготников.Телефон,
	|	ТаблицаЛьготников.СтраховойНомер,
	|	ВЫБОР
	|		КОГДА ТаблицаЛьготников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЛьготников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""Ж""
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ТаблицаЛьготников.ДатаРождения,
	|	ТаблицаЛьготников.ДатаВыдачиДокумента КАК ДатаВыдачиДокументаЛьготы,
	|	ТаблицаЛьготников.ДатаВыдачиДокумента2 КАК ДатаВыдачиДокументаЛьготы2,
	|	ТаблицаЛьготников.ДатаВыдачиДокумента3 КАК ДатаВыдачиДокументаЛьготы3,
	|	ТаблицаЛьготников.НомерДокумента КАК НомерДокументаЛьготы,
	|	ТаблицаЛьготников.НомерДокумента2 КАК НомерДокументаЛьготы2,
	|	ТаблицаЛьготников.НомерДокумента3 КАК НомерДокументаЛьготы3,
	|	ТаблицаЛьготников.СерияДокумента КАК СерияДокументаЛьготы,
	|	ТаблицаЛьготников.СерияДокумента2 КАК СерияДокументаЛьготы2,
	|	ТаблицаЛьготников.СерияДокумента3 КАК СерияДокументаЛьготы3,
	|	ТаблицаЛьготников.ВидДокумента КАК ВидДокументаЛьготы,
	|	ТаблицаЛьготников.ВидДокумента2 КАК ВидДокументаЛьготы2,
	|	ТаблицаЛьготников.ВидДокумента3 КАК ВидДокументаЛьготы3,
	|	ТаблицаЛьготников.ВидДокумента.Код КАК КодВидДокументаЛьготы,
	|	ТаблицаЛьготников.ВидДокумента2.Код КАК КодВидДокументаЛьготы2,
	|	ТаблицаЛьготников.ВидДокумента3.Код КАК КодВидДокументаЛьготы3,
	|	ТаблицаЛьготников.КемВыдан КАК КемВыданДокументЛьготы,
	|	ТаблицаЛьготников.КемВыдан2 КАК КемВыданДокументЛьготы2,
	|	ТаблицаЛьготников.КемВыдан3 КАК КемВыданДокументЛьготы3,
	|	ТаблицаЛьготников.ДатаОкончанияДокументаЛьготы,
	|	ТаблицаЛьготников.ДатаОкончанияДокументаЛьготы2,
	|	ТаблицаЛьготников.ДатаОкончанияДокументаЛьготы3,
	|	ТаблицаЛьготников.КоличествоЗарегистрированных,
	|	ТаблицаЛьготников.КоличествоПроживающих,
	|	ТаблицаЛьготников.ОбщаяПлощадь,
	|	ТаблицаЛьготников.ЖилаяПлощадь,
	|	ТаблицаЛьготников.Фамилия,
	|	ТаблицаЛьготников.Имя,
	|	ТаблицаЛьготников.Отчество,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус,
	|	СобственностьНаПомещения.ВидСобственности,
	|	ТаблицаОснованийПолученияВСобственность.ОснованиеПолученияВСобственность,
	|	втПаспортныеДанныеФизЛиц.ВидДокумента КАК ДокументВидЛичности,
	|	втПаспортныеДанныеФизЛиц.Серия КАК ДокументСерияЛичности,
	|	втПаспортныеДанныеФизЛиц.Номер КАК ДокументНомерЛичности,
	|	втПаспортныеДанныеФизЛиц.ДатаВыдачи КАК ДокументДатаВыдачиЛичности,
	|	втПаспортныеДанныеФизЛиц.КемВыдан КАК КемВыданДокументЛичности,
	|	ТаблицаСостояниеПомещения.КатегорияКвартиры,
	|	ТаблицаКоличествоЛьготников.КоличествоЛьготников
	|ПОМЕСТИТЬ втТаблицаДанных
	|ИЗ
	|	ТаблицаНачислений КАК ТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛьготников КАК ТаблицаЛьготников
	|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоРодственников КАК КоличествоРодственников
	|			ПО ТаблицаЛьготников.ФизЛицо = КоличествоРодственников.ФизическоеЛицоОсновное
	|		ПО ТаблицаНачислений.ЛицевойСчет = ТаблицаЛьготников.ЛицевойСчет
	|			И ((ТаблицаЛьготников.ЛьготнаяКатегория = ТаблицаНачислений.ЛьготнаяКатегория
	| 				ИЛИ ТаблицаЛьготников.ЛьготнаяКатегорияДляСверхобъема = ТаблицаНачислений.ЛьготнаяКатегория) И ТаблицаЛьготников.Жилец = ТаблицаНачислений.Проживающий)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО ТаблицаНачислений.Здание = втКонтактнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещения
	|		КАК СобственностьНаПомещения
	|		ПО ТаблицаНачислений.Помещение = СобственностьНаПомещения.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПаспортныеДанныеФизЛиц КАК втПаспортныеДанныеФизЛиц
	|		ПО (ТаблицаЛьготников.ФизЛицо = втПаспортныеДанныеФизЛиц.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСостояниеПомещения КАК ТаблицаСостояниеПомещения
	|		ПО ТаблицаНачислений.Помещение = ТаблицаСостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОснованийПолученияВСобственность КАК ТаблицаОснованийПолученияВСобственность
	|		ПО ТаблицаНачислений.Помещение = ТаблицаОснованийПолученияВСобственность.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличестваЛьготников КАК ТаблицаКоличествоЛьготников
	|			ПО ТаблицаНачислений.ЛицевойСчет = ТаблицаКоличествоЛьготников.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоРодственников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственностьНаПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаОснованийПолученияВСобственность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаСостояниеПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.НомерКвартиры,
	|	ТаблицаДанных.СуффиксКвартиры,
	|	ТаблицаДанных.Здание,
	|	ТаблицаДанных.ТипЖилФонда КАК ЖилищныйФонд,
	|	ТаблицаДанных.Услуга,
	|	ТаблицаДанных.ЛьготнаяКатегория КАК Льгота,
	|	КодыЛьгот.Код КАК КодЛьготы,
	|	ТаблицаДанных.МесяцНачисления КАК ДатаСкидки,
	|	ТаблицаДанных.РазмерСкидки,
	|	ТаблицаДанных.МесяцКорректировки,
	|	ТаблицаДанных.Жилец КАК Плательщик,
	|	ТаблицаДанных.Телефон,
	|	ТаблицаДанных.СтраховойНомер,
	|	ТаблицаДанных.Пол,
	|	ТаблицаДанных.ДатаРождения,
	|	ТаблицаДанных.ДатаВыдачиДокументаЛьготы,
	|	ТаблицаДанных.ДатаВыдачиДокументаЛьготы2,
	|	ТаблицаДанных.ДатаВыдачиДокументаЛьготы3,
	|	ТаблицаДанных.НомерДокументаЛьготы,
	|	ТаблицаДанных.НомерДокументаЛьготы2,
	|	ТаблицаДанных.НомерДокументаЛьготы3,
	|	ТаблицаДанных.СерияДокументаЛьготы,
	|	ТаблицаДанных.СерияДокументаЛьготы2,
	|	ТаблицаДанных.СерияДокументаЛьготы3,
	|	ТаблицаДанных.ВидДокументаЛьготы,
	|	ТаблицаДанных.ВидДокументаЛьготы2,
	|	ТаблицаДанных.ВидДокументаЛьготы3,
	|	ТаблицаДанных.КодВидДокументаЛьготы,
	|	ТаблицаДанных.КодВидДокументаЛьготы2,
	|	ТаблицаДанных.КодВидДокументаЛьготы3,
	|	ТаблицаДанных.КемВыданДокументЛьготы,
	|	ТаблицаДанных.КемВыданДокументЛьготы2,
	|	ТаблицаДанных.КемВыданДокументЛьготы3,
	|	ТаблицаДанных.ДатаОкончанияДокументаЛьготы,
	|	ТаблицаДанных.ДатаОкончанияДокументаЛьготы2,
	|	ТаблицаДанных.ДатаОкончанияДокументаЛьготы3,
	|	ТаблицаДанных.КоличествоЗарегистрированных КАК КолвоПостоянноПроживающих,
	|	ТаблицаДанных.КоличествоПроживающих КАК КолвоФактическиПроживающих,
	|	ТаблицаДанных.КоличествоЖильцов КАК КолвоПользующихсяЛьготой,
	|	ТаблицаДанных.ОбщаяПлощадь,
	|	ТаблицаДанных.ЖилаяПлощадь,
	|	ТаблицаДанных.Район,
	|	ТаблицаДанных.Улица,
	|	ТаблицаДанных.Дом,
	|	ТаблицаДанных.Корпус,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|				ИЛИ ТаблицаДанных.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДанных.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|						И ТаблицаДанных.ОснованиеПолученияВСобственность = 
	|							ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.Приватизация)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодФормаСобственности,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|				ИЛИ ТаблицаДанных.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокРасчетаУслуги,
	|	ТаблицаДанных.ДокументВидЛичности КАК ВидДокументаЛичности,
	|	ТаблицаДанных.ДокументСерияЛичности КАК СерияДокументаЛичности,
	|	ТаблицаДанных.ДокументНомерЛичности КАК НомерДокументаЛичности,
	|	ТаблицаДанных.ДокументДатаВыдачиЛичности КАК ДатаВыдачиДокументаЛичности,
	|	ВЫРАЗИТЬ(ТаблицаДанных.КемВыданДокументЛичности КАК СТРОКА(200)) КАК ОрганизацияДокументаЛичности,
	|	ТаблицаДанных.КатегорияКвартиры КАК ТипЗаселения,
	|	ТаблицаДанных.Фамилия,
	|	ТаблицаДанных.Имя,
	|	ТаблицаДанных.Отчество,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК Квартира,
	|	ТаблицаДанных.Тариф,
	|	ТаблицаДанных.ВидТарифа,
	|	ТаблицаДанных.ФактическийОбъем,
	|	ТаблицаДанных.Объем,
	|	ТаблицаДанных.Площадь,
	|	ТаблицаДанных.КоличествоЛьготников,
	|	КодыРайонов.Код КАК КодРайона,
	|	КодыУлиц.Код КАК КодУлицы,
	|	КодыПлательщиков.Код КАК КодПлательщика,
	|	КодыЖилищныхФондов.Код КАК КодЖилФонд,
	|	КодыТиповЗаселения.Код КАК КодТипЗаселения,
	|	КодыДокументовЛичности.Код КАК КодВидДокументаЛичности,
	|	КодыУслуг.Код КАК КодУслуги
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	втТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыРайонов КАК КодыРайонов
	|		ПО ТаблицаДанных.Район = КодыРайонов.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыУлиц КАК КодыУлиц
	|		ПО ТаблицаДанных.Улица = КодыУлиц.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыПлательщиков КАК КодыПлательщиков
	|		ПО ТаблицаДанных.Жилец = КодыПлательщиков.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЖилищныхФондов КАК КодыЖилищныхФондов
	|		ПО ТаблицаДанных.ТипЖилФонда = КодыЖилищныхФондов.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыТиповЗаселения КАК КодыТиповЗаселения
	|		ПО ТаблицаДанных.КатегорияКвартиры = КодыТиповЗаселения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыДокументовЛичности КАК КодыДокументовЛичности
	|		ПО ТаблицаДанных.ДокументВидЛичности = КодыДокументовЛичности.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыУслуг КАК КодыУслуг
	|		ПО ТаблицаДанных.Услуга = КодыУслуг.Наименование
	|		И ТаблицаДанных.ВидТарифа = КодыУслуг.ВидТарифа
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЛьгот КАК КодыЛьгот
	|		ПО ТаблицаДанных.ЛьготнаяКатегория = КодыЛьгот.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыРайонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыУлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыПлательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыЖилищныхФондов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыТиповЗаселения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыДокументовЛичности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.ЛицевойСчет КАК ЛицевойСчет,
	|	ИтоговаяТаблица.НомерКвартиры КАК НомерКвартиры,
	|	ИтоговаяТаблица.СуффиксКвартиры КАК СуффиксКвартиры,
	|	ИтоговаяТаблица.Здание КАК Здание,
	|	ИтоговаяТаблица.ЖилищныйФонд КАК ЖилищныйФонд,
	|	ИтоговаяТаблица.Услуга КАК Услуга,
	|	ИтоговаяТаблица.Льгота КАК Льгота,
	|	ИтоговаяТаблица.ДатаСкидки КАК ДатаСкидки,
	|	СУММА(ИтоговаяТаблица.РазмерСкидки) КАК ПараметрЗаменыНаименованиеСуммы,
	|	ИтоговаяТаблица.МесяцКорректировки КАК МесяцКорректировки,
	|	ИтоговаяТаблица.Плательщик КАК Плательщик,
	|	ИтоговаяТаблица.Телефон КАК Телефон,
	|	ИтоговаяТаблица.СтраховойНомер КАК СтраховойНомер,
	|	ИтоговаяТаблица.Пол КАК Пол,
	|	ИтоговаяТаблица.ДатаРождения КАК ДатаРождения,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы КАК ДатаВыдачиДокументаЛьготы,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы2 КАК ДатаВыдачиДокументаЛьготы2,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы3 КАК ДатаВыдачиДокументаЛьготы3,
	|	ИтоговаяТаблица.НомерДокументаЛьготы КАК НомерДокументаЛьготы,
	|	ИтоговаяТаблица.НомерДокументаЛьготы2 КАК НомерДокументаЛьготы2,
	|	ИтоговаяТаблица.НомерДокументаЛьготы3 КАК НомерДокументаЛьготы3,
	|	ИтоговаяТаблица.СерияДокументаЛьготы КАК СерияДокументаЛьготы,
	|	ИтоговаяТаблица.СерияДокументаЛьготы2 КАК СерияДокументаЛьготы2,
	|	ИтоговаяТаблица.СерияДокументаЛьготы3 КАК СерияДокументаЛьготы3,
	|	ИтоговаяТаблица.ВидДокументаЛьготы КАК ВидДокументаЛьготы,
	|	ИтоговаяТаблица.ВидДокументаЛьготы2 КАК ВидДокументаЛьготы2,
	|	ИтоговаяТаблица.ВидДокументаЛьготы3 КАК ВидДокументаЛьготы3,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы КАК КодВидДокументаЛьготы,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы2 КАК КодВидДокументаЛьготы2,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы3 КАК КодВидДокументаЛьготы3,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы КАК КемВыданДокументЛьготы,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы2 КАК КемВыданДокументЛьготы2,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы3 КАК КемВыданДокументЛьготы3,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы КАК ДатаОкончанияДокументаЛьготы,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы2 КАК ДатаОкончанияДокументаЛьготы2,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы3 КАК ДатаОкончанияДокументаЛьготы3,
	|	ИтоговаяТаблица.КолвоПостоянноПроживающих КАК КолвоПостоянноПроживающих,
	|	ИтоговаяТаблица.КолвоФактическиПроживающих КАК КолвоФактическиПроживающих,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.КолвоПользующихсяЛьготой = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ИтоговаяТаблица.КолвоПользующихсяЛьготой, 1)
	|	КОНЕЦ КАК КолвоПользующихсяЛьготой,
	|	ИтоговаяТаблица.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ИтоговаяТаблица.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	ИтоговаяТаблица.Район КАК Район,
	|	ИтоговаяТаблица.Улица КАК Улица,
	|	ИтоговаяТаблица.Дом КАК Дом,
	|	ИтоговаяТаблица.Корпус КАК Корпус,
	|	ИтоговаяТаблица.КодФормаСобственности КАК КодФормаСобственности,
	|	ИтоговаяТаблица.ВидДокументаЛичности КАК ВидДокументаЛичности,
	|	ИтоговаяТаблица.СерияДокументаЛичности КАК СерияДокументаЛичности,
	|	ИтоговаяТаблица.НомерДокументаЛичности КАК НомерДокументаЛичности,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛичности КАК ДатаВыдачиДокументаЛичности,
	|	ИтоговаяТаблица.ОрганизацияДокументаЛичности КАК ОрганизацияДокументаЛичности,
	|	ИтоговаяТаблица.ТипЗаселения КАК ТипЗаселения,
	|	ИтоговаяТаблица.Фамилия КАК Фамилия,
	|	ИтоговаяТаблица.Имя КАК Имя,
	|	ИтоговаяТаблица.Отчество КАК Отчество,
	|	ИтоговаяТаблица.Квартира КАК Квартира,
	|	ИтоговаяТаблица.Тариф КАК Тариф,
	|	ИтоговаяТаблица.ФактическийОбъем КАК ФактическийОбъем,
	|	СУММА(ИтоговаяТаблица.Объем) КАК Объем,
	|	СУММА(ИтоговаяТаблица.Площадь) КАК Площадь,
	|	ИтоговаяТаблица.ПорядокРасчетаУслуги КАК ПорядокРасчетаУслуги,
	|	ИтоговаяТаблица.КоличествоЛьготников КАК КоличествоЛьготников,
	|	МАКСИМУМ(ИтоговаяТаблица.КодРайона) КАК КодРайона,
	|	МАКСИМУМ(ИтоговаяТаблица.КодУлицы) КАК КодУлицы,
	|	МАКСИМУМ(ИтоговаяТаблица.КодПлательщика) КАК КодПлательщика,
	|	МАКСИМУМ(ИтоговаяТаблица.КодЖилФонд) КАК КодЖилФонд,
	|	МАКСИМУМ(ИтоговаяТаблица.КодТипЗаселения) КАК КодТипЗаселения,
	|	МАКСИМУМ(ИтоговаяТаблица.КодВидДокументаЛичности) КАК КодВидДокументаЛичности,
	|	МАКСИМУМ(ИтоговаяТаблица.КодУслуги) КАК КодУслуги,
	|	МАКСИМУМ(ИтоговаяТаблица.КодЛьготы) КАК КодЛьготы
	|ПОМЕСТИТЬ втНеСвернутаяПоКодамИтоговаяТаблица
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.ЛицевойСчет,
	|	ИтоговаяТаблица.НомерКвартиры,
	|	ИтоговаяТаблица.СуффиксКвартиры,
	|	ИтоговаяТаблица.Здание,
	|	ИтоговаяТаблица.ЖилищныйФонд,
	|	ИтоговаяТаблица.Услуга,
	|	ИтоговаяТаблица.Льгота,
	|	ИтоговаяТаблица.ДатаСкидки,
	|	ИтоговаяТаблица.МесяцКорректировки,
	|	ИтоговаяТаблица.Плательщик,
	|	ИтоговаяТаблица.Телефон,
	|	ИтоговаяТаблица.СтраховойНомер,
	|	ИтоговаяТаблица.Пол,
	|	ИтоговаяТаблица.ДатаРождения,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы2,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛьготы3,
	|	ИтоговаяТаблица.НомерДокументаЛьготы,
	|	ИтоговаяТаблица.НомерДокументаЛьготы2,
	|	ИтоговаяТаблица.НомерДокументаЛьготы3,
	|	ИтоговаяТаблица.СерияДокументаЛьготы,
	|	ИтоговаяТаблица.СерияДокументаЛьготы2,
	|	ИтоговаяТаблица.СерияДокументаЛьготы3,
	|	ИтоговаяТаблица.ВидДокументаЛьготы,
	|	ИтоговаяТаблица.ВидДокументаЛьготы2,
	|	ИтоговаяТаблица.ВидДокументаЛьготы3,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы2,
	|	ИтоговаяТаблица.КодВидДокументаЛьготы3,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы2,
	|	ИтоговаяТаблица.КемВыданДокументЛьготы3,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы2,
	|	ИтоговаяТаблица.ДатаОкончанияДокументаЛьготы3,
	|	ИтоговаяТаблица.КолвоПостоянноПроживающих,
	|	ИтоговаяТаблица.КолвоФактическиПроживающих,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.КолвоПользующихсяЛьготой = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ИтоговаяТаблица.КолвоПользующихсяЛьготой, 1)
	|	КОНЕЦ,
	|	ИтоговаяТаблица.ОбщаяПлощадь,
	|	ИтоговаяТаблица.ЖилаяПлощадь,
	|	ИтоговаяТаблица.Район,
	|	ИтоговаяТаблица.Улица,
	|	ИтоговаяТаблица.Дом,
	|	ИтоговаяТаблица.Корпус,
	|	ИтоговаяТаблица.ВидДокументаЛичности,
	|	ИтоговаяТаблица.СерияДокументаЛичности,
	|	ИтоговаяТаблица.НомерДокументаЛичности,
	|	ИтоговаяТаблица.ДатаВыдачиДокументаЛичности,
	|	ИтоговаяТаблица.ОрганизацияДокументаЛичности,
	|	ИтоговаяТаблица.ТипЗаселения,
	|	ИтоговаяТаблица.Фамилия,
	|	ИтоговаяТаблица.Имя,
	|	ИтоговаяТаблица.Отчество,
	|	ИтоговаяТаблица.Квартира,
	|	ИтоговаяТаблица.Тариф,
	|	ИтоговаяТаблица.ФактическийОбъем,
	|	ИтоговаяТаблица.КодФормаСобственности,
	|	ИтоговаяТаблица.ПорядокРасчетаУслуги,
	|	ИтоговаяТаблица.КоличествоЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЛицевойСчет КАК ЛицевойСчет,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерКвартиры КАК НомерКвартиры,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СуффиксКвартиры КАК СуффиксКвартиры,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Здание КАК Здание,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЖилищныйФонд КАК ЖилищныйФонд,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Услуга КАК Услуга,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Льгота КАК Льгота,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаСкидки КАК ДатаСкидки,
	|	СУММА(втНеСвернутаяПоКодамИтоговаяТаблица.ПараметрЗаменыНаименованиеСуммы) КАК ПараметрЗаменыНаименованиеСуммы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.МесяцКорректировки КАК МесяцКорректировки,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Плательщик КАК Плательщик,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Телефон КАК Телефон,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СтраховойНомер КАК СтраховойНомер,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Пол КАК Пол,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаРождения КАК ДатаРождения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы КАК ДатаВыдачиДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы2 КАК ДатаВыдачиДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы3 КАК ДатаВыдачиДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы КАК НомерДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы2 КАК НомерДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы3 КАК НомерДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы КАК СерияДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы2 КАК СерияДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы3 КАК СерияДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы КАК ВидДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы2 КАК ВидДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы3 КАК ВидДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы КАК КодВидДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы2 КАК КодВидДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы3 КАК КодВидДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы КАК КемВыданДокументЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы2 КАК КемВыданДокументЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы3 КАК КемВыданДокументЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы КАК ДатаОкончанияДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы2 КАК ДатаОкончанияДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы3 КАК ДатаОкончанияДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КолвоПостоянноПроживающих КАК КолвоПостоянноПроживающих,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КолвоФактическиПроживающих КАК КолвоФактическиПроживающих,
	|	МАКСИМУМ(втНеСвернутаяПоКодамИтоговаяТаблица.КолвоПользующихсяЛьготой) КАК КолвоПользующихсяЛьготой,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Район КАК Район,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Улица КАК Улица,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Дом КАК Дом,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Корпус КАК Корпус,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодФормаСобственности КАК КодФормаСобственности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛичности КАК ВидДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛичности КАК СерияДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛичности КАК НомерДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛичности КАК ДатаВыдачиДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ОрганизацияДокументаЛичности КАК ОрганизацияДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ТипЗаселения КАК ТипЗаселения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Фамилия КАК Фамилия,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Имя КАК Имя,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Отчество КАК Отчество,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Квартира КАК Квартира,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Тариф КАК Тариф,
	|	СУММА(втНеСвернутаяПоКодамИтоговаяТаблица.ФактическийОбъем) КАК ФактическийОбъем,
	|	СУММА(втНеСвернутаяПоКодамИтоговаяТаблица.Объем) КАК Объем,
	|	МАКСИМУМ(втНеСвернутаяПоКодамИтоговаяТаблица.Площадь) КАК Площадь,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ПорядокРасчетаУслуги КАК ПорядокРасчетаУслуги,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КоличествоЛьготников КАК КоличествоЛьготников,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодРайона КАК КодРайона,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодУлицы КАК КодУлицы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодПлательщика КАК КодПлательщика,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодЖилФонд КАК КодЖилФонд,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодТипЗаселения КАК КодТипЗаселения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛичности КАК КодВидДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодУслуги КАК КодУслуги,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодЛьготы КАК КодЛьготы
	|ИЗ
	|	втНеСвернутаяПоКодамИтоговаяТаблица КАК втНеСвернутаяПоКодамИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Услуга,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерКвартиры,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СуффиксКвартиры,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Здание,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЖилищныйФонд,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Льгота,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаСкидки,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Плательщик,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Телефон,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СтраховойНомер,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Пол,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.МесяцКорректировки,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаРождения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Дом,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ОбщаяПлощадь,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Корпус,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КолвоПостоянноПроживающих,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодФормаСобственности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЖилаяПлощадь,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ОрганизацияДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ТипЗаселения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.СерияДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Район,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Улица,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.НомерДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ВидДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаВыдачиДокументаЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы2,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КемВыданДокументЛьготы3,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ДатаОкончанияДокументаЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КолвоФактическиПроживающих,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Имя,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Фамилия,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодЖилФонд,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодУслуги,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодВидДокументаЛичности,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодЛьготы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодУлицы,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодТипЗаселения,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КоличествоЛьготников,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодРайона,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.КодПлательщика,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Квартира,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Отчество,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ЛицевойСчет,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.Тариф,
	|	втНеСвернутаяПоКодамИтоговаяТаблица.ПорядокРасчетаУслуги";
	
	Если РежимРаботы = 1 Тогда //Корректировка
		НаименованиеСуммы = "СуммаКорректировки";
	Иначе
		НаименованиеСуммы = "РазмерСкидки";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПараметрЗаменыНаименованиеСуммы", НаименованиеСуммы);

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Плательщик) Тогда
		ТаблицаДанных = ТаблицаДанных.Скопировать(Новый Структура("Плательщик", Плательщик));
	КонецЕсли;
	
	// Заполнение табличной части "Плательщики".
	СтрокаКолонок = "";
	Для Каждого ТекКолонка Из Плательщики.ВыгрузитьКолонки().Колонки Цикл
		Если Найти("НомерСтроки, Строение", ТекКолонка.Имя) = 0 Тогда
			СтрокаКолонок = СтрокаКолонок + ", " + ТекКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 3) + ", НомерКвартиры, СуффиксКвартиры";
	
	ТаблицаПлательщиков = ТаблицаДанных.Скопировать(, СтрокаКолонок);
	ТаблицаПлательщиков.Свернуть(СтрокаКолонок);
	Для Каждого ТекСтрока Из ТаблицаПлательщиков Цикл
		
		ТекСтрока.Квартира = "" + ТекСтрока.НомерКвартиры + ТекСтрока.СуффиксКвартиры;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Фамилия)
			И ЗначениеЗаполнено(ТекСтрока.Плательщик) Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, РазделитьФИО(ТекСтрока.Плательщик.Наименование));
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗаполнятьПоСтроке Тогда
		Плательщики.Загрузить(ТаблицаПлательщиков);
	Иначе
		
		СтрокаПлательщики = Плательщики.НайтиСтроки(Новый Структура("Плательщик", Плательщик));
		СтрокаПлательщиков = ТаблицаПлательщиков.НайтиСтроки(Новый Структура("Плательщик", Плательщик));
		Если НЕ СтрокаПлательщики.Количество() = 0
			И НЕ СтрокаПлательщиков.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПлательщики.Получить(0), СтрокаПлательщиков.Получить(0));
		КонецЕсли;
		
	КонецЕсли;
	
	// заполнение табличной части "Документы льгот".
	СтрокаКолонок = "";
	Для Каждого ТекКолонка Из ДокументыЛьгот.ВыгрузитьКолонки().Колонки Цикл
		Если Найти("НомерСтроки", ТекКолонка.Имя) = 0 Тогда
			СтрокаКолонок = СтрокаКолонок + ", " + ТекКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 3);
	ТаблицаДокументовЛьгот = ТаблицаДанных.Скопировать(, СтрокаКолонок);
	ТаблицаДокументовЛьгот.Свернуть(СтрокаКолонок);
	Если НЕ ЗаполнятьПоСтроке Тогда
		ДокументыЛьгот.Загрузить(ТаблицаДокументовЛьгот);
	Иначе
		Для Каждого СтрокаДокументовЛьгот Из ТаблицаДокументовЛьгот Цикл
			ЗаполнитьЗначенияСвойств(ДокументыЛьгот.Добавить(), СтрокаДокументовЛьгот);
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение табличной части "Скидки".
	Если НЕ ЗаполнятьПоСтроке Тогда
		Скидки.Загрузить(ТаблицаДанных);
	Иначе
		Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
			ЗаполнитьЗначенияСвойств(Скидки.Добавить(), СтрокаТаблицаДанных);
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЗаполнитьТабличныеЧасти()

// Функция возвращает текст файла выгрузки.
//
// Параметры
//  Нет.
//
// Возвращаемое значение
//  Строка - содержимое файла выгрузки.
//
Функция ПолучитьТекстФайлаДляВыгрузки(МесяцКорректировки = Неопределено, КодОрганизации) Экспорт
	
	Текст = "";
	КолЗаписейТипа1    = 0;
	КолЗаписейТипа2    = 0;
	КолЗаписейТипа3    = 0;
	СуммаПоВсемЛьготам = 0;
	
	// Определяем действие настройки "ОбрезатьПрефиксЛС".
	ОбрезатьПрефиксЛС = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ОпределитьДействиеНастройки_ОбрезатьПрефиксЛС(Дата);
	
	Для Каждого ТекПлательщик Из Плательщики Цикл // цикл по плательщикам
		
		ТекТекст = "";
		
		НайденныеДокументы = ДокументыЛьгот.НайтиСтроки(Новый Структура("Плательщик", ТекПлательщик.Плательщик));
		Если НайденныеДокументы.Количество() > 0 Тогда
			
			КолЗаписейТипа1 = КолЗаписейТипа1 + 1;
			
			ТекТекст = ЗаписьДанныхТипа1(ТекПлательщик, НайденныеДокументы.Количество(), ОбрезатьПрефиксЛС);
				
			ИмеютсяСтрокиСкидок = Ложь;
			Для Каждого ТекДокумент Из НайденныеДокументы Цикл // цикл по документам
				
				СтруктураПоискаСкидок = Новый Структура;
				СтруктураПоискаСкидок.Вставить("Плательщик", ТекПлательщик.Плательщик);
				СтруктураПоискаСкидок.Вставить("Льгота",     ТекДокумент.Льгота);
				Если НЕ МесяцКорректировки = Неопределено Тогда
					СтруктураПоискаСкидок.Вставить("МесяцКорректировки", МесяцКорректировки);
				КонецЕсли;
				
				НайденныеСкидки = Скидки.НайтиСтроки(СтруктураПоискаСкидок);
				Если НайденныеСкидки.Количество() > 0 Тогда
					
					ИмеютсяСтрокиСкидок = Истина;
					КолЗаписейТипа2 = КолЗаписейТипа2 + 1;
					ТекТекст = ТекТекст + ЗаписьДанныхТипа2(ТекДокумент, НайденныеСкидки.Количество());
					Для Каждого ТекСкидка Из НайденныеСкидки Цикл // цикл по скидкам
						
						КолЗаписейТипа3 = КолЗаписейТипа3 + 1;
						СуммаПоВсемЛьготам = СуммаПоВсемЛьготам 
										   + ?(РежимРаботы = 0, ТекСкидка.РазмерСкидки, ТекСкидка.СуммаКорректировки);
						ТекТекст = ТекТекст + ЗаписьДанныхТипа3(ТекСкидка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// если записей типа 3 не существует, то удалим запись с типом 1
			Если Не ИмеютсяСтрокиСкидок Тогда
				КолЗаписейТипа1 = КолЗаписейТипа1 - 1;
				ТекТекст = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = Текст + ТекТекст;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Текст = Текст + ЗаписьДанныхТипа4(КолЗаписейТипа1, КолЗаписейТипа2, КолЗаписейТипа3, СуммаПоВсемЛьготам, КодОрганизации);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Формирует запись, содержащую сведения о владельце льгот (тип 1).
//
// Параметры:
//  ВыборкаЛьготник - выборка данных по льготнику;
//  КолЗаписейТипа2 - количество записей типа 2 по текущему льготнику.
//
Функция ЗаписьДанныхТипа1(ВыборкаЛьготник, КолЗаписейТипа2, ОбрезатьПрефиксЛС)
	
	// Тип записи: 1 - тип записи.
	СтрокаРезультат = "1";
	
	// Количество записей типа 2: Количество последующих  записей типа 2 до следующей записи типа 1 или типа 4.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(КолЗаписейТипа2, 2);
	
	// Код района: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник районов).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодРайона, 3);
	
	// Код плательщика: Код, присвоенный ЕИРЦ семье владельца льгот.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодПлательщика, 10);
	
	// Номер лицевого счета / карточки учета/ абонента: Номер, присвоенный организацией семье владельца льгот.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ВыборкаЛьготник.ЛицевойСчет, ОбрезатьПрефиксЛС), 20);
	
	// Страховой номер: Номер индивидуального счета в системе обязательного пенсионного страхования, заполняется по шаблону  000-000-000 00.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.СтраховойНомер, 14);
	
	// Фамилия: Фамилия владельца льгот, указывается полностью.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Фамилия, 30);
	
	// Имя: Имя владельца льгот,указывается полностью.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Имя, 30);
	
	// Отчество: Отчество владельца льгот,  указывается полностью. Если отчества не существует, поле заполняется пробелами.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Отчество, 30);
	
	// Код  улицы: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник улиц).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодУлицы, 5);
	
	// Дом: Номер дома.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Дом, 8);
	
	// Корпус:  номер корпуса
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Корпус, 6);
	
	// Строение: Номер строения.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Строение, 5);
	
	// Квартира: Номер квартиры.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Квартира, 10);
	
	Попытка
		// Телефон: Номер телефона, заполняется только цифрами (без разделителей).
		СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.Телефон, 10);
	Исключение
		СтрокаРезультат = СтрокаРезультат + ФорматЧисло(0, 10);
	КонецПопытки;
	
	// Жилищный фонд: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник типов жилищного фонда).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодЖилФонд, 1);
	
	// Тип заселения: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник типов заселения).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодТипЗаселения, 1);
	
	// Форма собственности: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник форм собственности).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодФормаСобственности, 1);  // не задано
	
	// Количество постоянно проживающих: Количество человек,  постоянно зарегистрированных по месту жительства на площади, занимаемой семьей владельца льгот.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КолвоПостоянноПроживающих, 2);
	
	// Количество фактически  проживающих: Количество человек, фактически проживающих  на площади, занимаемой семьей владельца льгот.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КолвоФактическиПроживающих, 2);
	
	// Общая площадь: Общая площадь занимаемого помещения в кв.м.  Размер поля равен 6 знакам. Целая часть занимает 4 знака, а дробная занимает 2 знака. 
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.ОбщаяПлощадь, 6, 2);
	
	// Жилая площадь: Жилая площадь занимаемого помещения в кв.м. Размер поля равен 6 знакам. Целая часть занимает 4 знака, а дробная занимает 2 знака.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.ЖилаяПлощадь, 6, 2);
	
	// Пол: Пол владельца льгот: М - мужчина Ж - женщина Заполняется русскими заглавными буквами.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.Пол, 1);
	
	// Дата рождения: Дата рождения владельца льгот, заполняется по шаблону ДДММГГГГ
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьготник.ДатаРождения);
	
	// Документ, удостоверяющий личность владельца льгот.
	
	// Вид документа: Заполняется в соответствии со справочником ГУ ГЦЖС  (справочник видов документов, удостоверяющих личность).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодВидДокументаЛичности, 1);
	
	// Серия документа.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.СерияДокументаЛичности, 8);
	
	// Номер документа.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.НомерДокументаЛичности, 8);
	
	// Дата выдачи: Дата выдачи документа, заполняется по шаблону  ДДММГГГГ. 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьготник.ДатаВыдачиДокументаЛичности);
	
	// Организация: Наименование организации, выдавшей документ.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьготник.ОрганизацияДокументаЛичности, 80);
	
	СтрокаРезультат = СтрокаРезультат + Символы.ПС;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Формирует запись, содержащую сведения о документах, подтверждающих право на льготу (тип 2).
//
// Параметры:
//  ВыборкаЛьготник - выборка данных по льготнику;
//  КолЗаписейТипа3 - количество записей типа 3 по текущему льготнику.
//
Функция ЗаписьДанныхТипа2(ВыборкаЛьгота, КолЗаписейТипа3)
	
	// Тип записи: 2 - тип записи.
	СтрокаРезультат = "2";
	
	// Количество записей типа 3: Количество последующих записей типа 3 до следующей записи типа 2 или типа 1 или типа 4.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(КолЗаписейТипа3, 2);
	
	// Код льготы: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник льготных категорий). 
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьгота.КодЛьготы, 3); //не задано
	
	// Вид документа: Заполняется в соответствии со справочником ГУ ГЦЖС  (справочник видов документов, подтверждающих право на льготы).
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьгота.КодВидДокументаЛьготы, 2); // не задано
	
	// Серия документа
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.СерияДокументаЛьготы, 8);
	
	// Номер документа 
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.НомерДокументаЛьготы, 10);
	
	// Дата выдачи: Дата выдачи документа, заполняется по шаблону  ДДММГГГГ. 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаВыдачиДокументаЛьготы);
	
	// Дата окончания: Дата окончания действия документа, заполняется по шаблону ДДММГГГГ. Если документ бессрочный,  то в поле ставятся нули. 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаОкончанияДокументаЛьготы);
	
	// Организация: Наименование организации, выдавшей документ.
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.КемВыданДокументЛьготы, 50);
	
	// Вид документа 2
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьгота.КодВидДокументаЛьготы2, 2);
	
	// Серия документа 2
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.СерияДокументаЛьготы2, 8);
	
	// Номер документа 2
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.НомерДокументаЛьготы2, 10);
	
	// Дата выдачи 2 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаВыдачиДокументаЛьготы2);
	
	// Дата окончания 2 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаОкончанияДокументаЛьготы2);
	
	// Организация 2
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.КемВыданДокументЛьготы2, 50);
	
	// Вид документа 3
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьгота.КодВидДокументаЛьготы3, 2);
	
	// Серия документа 3
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.СерияДокументаЛьготы3, 8);
	
	// Номер документа 3
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.НомерДокументаЛьготы3, 10);
	
	// Дата выдачи 3 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаВыдачиДокументаЛьготы3);
	
	// Дата окончания 3 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьгота.ДатаОкончанияДокументаЛьготы3);
	
	// Организация 3
	СтрокаРезультат = СтрокаРезультат + ФорматСтрока(ВыборкаЛьгота.КемВыданДокументЛьготы3, 50);
	
	СтрокаРезультат = СтрокаРезультат + Символы.ПС;
	
	// СтрокаРезультат = СтрокаРезультат + "00                  0000000000000000                                             "
	//								  + "     00                  0000000000000000                                        "
	//								  + "          " + Символы.ПС;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Формирует запись, содержащую сведения о льготных скидках по услугам (тип 3).
//
// Параметры:
//  ВыборкаЛьготник - выборка данных по льготнику.
//
Функция ЗаписьДанныхТипа3(ВыборкаЛьготник)
	
	// Тип записи: 3 - тип записи.
	СтрокаРезультат = "3";
	
	// Месяц, за который предоставлена льгота: Заполняется по шаблону ММГГГГ. 
	СтрокаРезультат = СтрокаРезультат + ФорматДата(ВыборкаЛьготник.ДатаСкидки, Истина);
	
	// Код  услуги: Заполняется в соответствии со справочником ОАО «Банк Москвы». 
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КодУслуги, 4);
	
	// Цена/ставка/тариф на услугу: Цена/ставка/тариф в рублях, по которой произведен расчет льготной скидки по услуге. Размер поля равен 6 знакам. Целая часть занимает 4 знака, а дробная занимает 2 знака.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.Тариф, 6, 2);
	
	// Количество человек, пользующихся льготой по услуге.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.КолвоПользующихсяЛьготой, 2);
	
	// Объем, на который произведен расчет льготной скидки: В зависимости от кода услуги указывается количество человек, куб.м,  кв.м, кВт/час, гКал, антенн, радиоточек. Размер поля равен 10 знакам. Целая часть занимает 4 знака, а дробная занимает 6 знаков.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.Объем, 10, 6);
	
	// Площадь, с которой предоставлена льготная скидка
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.Площадь, 6, 2);
	
	// Размер льготной скидки  по услуге: Сумма в  рублях. Размер поля равен 9 знакам. Целая часть занимает 7 знаков, а дробная занимает 2 знака.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.РазмерСкидки, 9, 2);
	
	Если РежимРаботы = 1 Тогда
		// Величина  корректировки льготной скидки: Разность между льготной скидкой, указанной в  поле 7 данной записи и размером скидки, указанным в корректируемом отчете. Сумма в  рублях. Размер поля равен 10 знакам. Целая часть занимает 8 знаков, а дробная занимает 2 знака.
		СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.СуммаКорректировки, 10, 2);
	КонецЕсли;
	
	// Фактический объем расхода ресурса, определенный по показаниям прибора учета для жилого помещения, занимаемого семьей владельца льготы.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.ФактическийОбъем, 10, 6);
	
	// Порядок расчета услуги: Услуга рассчитана: 0 – по ставкам 1 -  по домовым приборам учета 2 – по квартирным приборам учета. Порядок расчета должен соответствовать коду услуги.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(ВыборкаЛьготник.ПорядокРасчетаУслуги, 1);
	
	СтрокаРезультат = СтрокаРезультат + Символы.ПС;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Формирует контрольную запись (тип 4).
//
// Параметры:
//  КолЗаписейТипа1 - количество записей типа 1 по всем льготникам;
//  КолЗаписейТипа2 - количество записей типа 2 по всем льготникам;
//  КолЗаписейТипа3 - количество записей типа 3 по всем льготникам;
//  СуммаПоВсемЛьготам - итоговая сумма по всем услугам и льготам.
//
Функция ЗаписьДанныхТипа4(КолЗаписейТипа1, КолЗаписейТипа2, КолЗаписейТипа3, СуммаПоВсемЛьготам, КодОрганизации)
	
	// Тип записи: 4 - тип записи.
	СтрокаРезультат = "4";
	
	// Номер договора - Номер договора на возмещение выпадающих доходов, присваивается ГУ ГЦЖС при заключении договора.
	СтрокаРезультат = СтрокаРезультат + КодОрганизации;
	
	// Контрольная цифра1: Количество записей типа 1
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(КолЗаписейТипа1, 8);
	
	// Контрольная цифра2: Количество записей типа 2
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(КолЗаписейТипа2, 8);
	
	// Контрольная цифра3: Количество записей типа 3
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(КолЗаписейТипа3, 8);
	
	// Контрольная цифра4: Сумма льготных скидок (в рублях) по всем записям типа 3. Размер поля равен 12 знакам. Целая часть занимает 10 знаков, а дробная занимает 2 знака.
	СтрокаРезультат = СтрокаРезультат + ФорматЧисло(СуммаПоВсемЛьготам, 12, 2);
	
	СтрокаРезультат = СтрокаРезультат + Символы.ПС;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Форматирует данные типа "Текст": преобразует в тип "Строка", выравнивает по левому краю,
// добавляет незначащими пробелами до указанной длины.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать;
//  Размер - фиксированная длина выходного значения.
//
Функция ФорматСтрока(Знач Данные, Размер)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат СтрокаИзСимволов(Размер, " ");
	КонецЕсли;
	Если ТипЗнч(Данные) = Тип("Число") Тогда
		Данные = Формат(Данные, "ЧГ=");
	КонецЕсли;
	ТекДлина = СтрДлина("" + Данные);
	
	Возврат ?(ТекДлина > Размер, Лев( "" + Данные, Размер), "" + Данные + СтрокаИзСимволов(Размер - ТекДлина, " "));
	
КонецФункции

// Форматирует данные типа "Число": выравнивает по правому краю, добавляет незначащими нулями до указанной длины.
// Дробная и целая части имеют фиксированную длину и пишутся друг за другом без разделителя.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать;
//  РазмерЦелойЧасти - фиксированная длина всего числа;
//  РазмерДробнойЧасти - фиксированная длина дробной части выходного значения.
//
Функция ФорматЧисло(Данные, РазмерЦелойЧасти, РазмерДробнойЧасти = 0)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат СтрокаИзСимволов(РазмерЦелойЧасти, "0");
	КонецЕсли;
	ФорматнаяСтрока = "ЧЦ=" + РазмерЦелойЧасти + "; ЧДЦ=" + РазмерДробнойЧасти + "; ЧН=0; ЧВН=; ЧГ=0";
	ДанныеЧисло = Число(Данные);
	
	СтрокаИтог = СтрЗаменить(Формат(ДанныеЧисло, ФорматнаяСтрока), ",", "");
	Возврат ?(ДанныеЧисло = 0, СтрокаИзСимволов(РазмерЦелойЧасти + РазмерДробнойЧасти, "0"), СтрокаИтог);
	
КонецФункции

// Форматирует данные типа "Дата": состоит из цифр, без разделителей, фиксированной длины 8.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать.
//
Функция ФорматДата(Данные, ТолькоМесяц = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Если ТолькоМесяц Тогда
			Возврат СтрокаИзСимволов(6, "0");
		Иначе
			Возврат СтрокаИзСимволов(8, "0");
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоМесяц Тогда
		Возврат ФорматЧисло(Формат(Дата(Данные), "ДФ=MMyyyy; ДП=000000"), 6);
	Иначе
		Возврат ФорматЧисло(Формат(Дата(Данные), "ДФ=ddMMyyyy; ДП=00000000"), 8);
	КонецЕсли;
	
Конецфункции

// Формируем номер лицевого счета без символов "л/с №".
//
// Параметры:
//  ЛицевойСчет  - Строка, ссылка на лицевой счет - лицевой счет, для которого
//                 необходимо определить номер.
//  ВозвращатьНаименованиеВСлучаеОтсутствияНомера  - Булево, признак, в зависимости
//                 от которого будет возвращаться наименование лицевого счета в случае,
//                 если лицевой счет задан без числовых значений (например, как ФИО собственника).
//
// Возвращаемое значение:
//  Срока - номер указанного лицевого счета.
//
Функция ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ЛицевойСчет, ОбрезатьПрефиксЛС = Ложь) Экспорт
//Функция НомерЛицевогоСчетаВТекущемДокументе(ЛицевойСчет, ВозвращатьНаименованиеВСлучаеОтсутствияНомера = Ложь) Экспорт
	
	СтрокаЛС = НРег(Строка(ЛицевойСчет));
	
	// Если не нужно исключать префикс из наименования лицевого счета,
	// то возвращаем полное наименование.
	Если НЕ ОбрезатьПрефиксЛС Тогда
		Возврат СокрЛП(СтрокаЛС);
	КонецЕсли;
	
	// Ниже перечислены популярные префиксы, которые необходимо исключить при совпадении.
	#Область Популярные_префиксы_для_исключения
	
	// Первым делом пытаемся найти самый распространенный префикс "л/с №",
	// т.к. данный префикс по умолчанию устанавливается при создании нового элемента
	// справочника "Лицевые счета".
	Если Найти(СтрокаЛС, "л/с №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л/с №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л\с №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л\с №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "лс №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "лс №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л/с ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л/с ", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л\с ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л\с ", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "лс ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "лс ", "");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Обработка_Случае_С_Непопулярными_префиксами
	
	// Если есть пробел в наименовании л/с, тогда запускаем старый механизм, который отбрасывает все нечисловые символы.
	Если Найти(СтрокаЛС, " ") > 0 Тогда
		СписокЦифр = Новый СписокЗначений();
		Для Сч = 0 По 9 Цикл
			СписокЦифр.Добавить("" + Сч);
		КонецЦикла;
		
		Для Сч = 1 По СтрДлина(СтрокаЛС) Цикл
			Если Не СписокЦифр.НайтиПоЗначению(Сред(СтрокаЛС, Сч, 1)) = Неопределено Тогда
				Возврат Сред(СтрокаЛС, Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	// В противном случае передаем всю строку в качестве номера лицевого счета.
	Возврат СтрокаЛС;
	
КонецФункции // НомерЛицевогоСчета()

// Возвращает строку указанной длины из определенных символов.
//
// Параметры:
//  Длина - длина строки
//  Символ - символ из которого будет составлена строка.
//
Функция СтрокаИзСимволов(Длина, Символ)
	
	Результат = "";
	Для Сч = 1 По Длина Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает данные по выбранному лицевому счету.
//
// Параметры:
//  Лицевой счет - СправочникСсылка, анализируемый лицевой счет;
//
// Возвращаемое значение
//  Структура,  Структура с данными по лицевому счету.
//
Функция ПолучитьДанныеПоЛС(ЛицевойСчет) Экспорт
	
	СтруктураТаблиц = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СформироватьТаблицыКодов(Дата, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаНач",            НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",            КонецМесяца(Дата));
	Запрос.УстановитьПараметр("КодыРайонов",        СтруктураТаблиц.КодыРайонов);
	Запрос.УстановитьПараметр("КодыУлиц",           СтруктураТаблиц.КодыУлиц);
	Запрос.УстановитьПараметр("КодыЖилищныхФондов", СтруктураТаблиц.КодыЖилищныхФондов);
	Запрос.УстановитьПараметр("КодыТиповЗаселения", СтруктураТаблиц.КодыТиповЗаселения);
	Запрос.УстановитьПараметр("ЛицевойСчет",        ЛицевойСчет);
	Запрос.УстановитьПараметр("Дом",                ЛицевойСчет.Адрес.Владелец);
	Запрос.УстановитьПараметр("Квартира",           ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("КодКвартиры",        ЛицевойСчет.Адрес.Код);
	Запрос.УстановитьПараметр("Суффикс",            ЛицевойСчет.Адрес.Суффикс);
	Запрос.УстановитьПараметр("ТипЖилФонда",        ЛицевойСчет.Адрес.Владелец.ТипЖилФонда);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	втКодыРайонов.Код,
	|	втКодыРайонов.Наименование
	|ПОМЕСТИТЬ КодыРайонов
	|ИЗ
	|	&КодыРайонов КАК втКодыРайонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыУлиц.Код,
	|	втКодыУлиц.Наименование
	|ПОМЕСТИТЬ КодыУлиц
	|ИЗ
	|	&КодыУлиц КАК втКодыУлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыЖилищныхФондов.Код,
	|	втКодыЖилищныхФондов.Наименование
	|ПОМЕСТИТЬ КодыЖилищныхФондов
	|ИЗ
	|	&КодыЖилищныхФондов КАК втКодыЖилищныхФондов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыТиповЗаселения.Код,
	|	втКодыТиповЗаселения.Наименование
	|ПОМЕСТИТЬ КодыТиповЗаселения
	|ИЗ
	|	&КодыТиповЗаселения КАК втКодыТиповЗаселения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЛицевойСчет КАК ЛицевойСчет,
	|	&Дом КАК Дом,
	|	&Квартира КАК Квартира,
	|	&КодКвартиры КАК КодКвартиры,
	|	&Суффикс КАК Суффикс,
	|	&ТипЖилФонда КАК ТипЖилФонда
	|ПОМЕСТИТЬ втЛицевойСчет";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчет.ЛицевойСчет.Адрес.Владелец КАК Объект
	|ИЗ
	|	втЛицевойСчет КАК втЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевойСчет.ЛицевойСчет.Адрес.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус,
	|	КВП_СостояниеПомещения.КатегорияКвартиры КАК ТипЗаселения,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Квартира,
	|	ЛицевыеСчета.КодКвартиры,
	|	ЛицевыеСчета.Суффикс,
	|	ЛицевыеСчета.ТипЖилФонда,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих,
	|	КВП_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь,
	|	КВП_ПлощадьПомещенияОбщаяСрезПоследних.ЖилаяПлощадь,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|		  ИЛИ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|						ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|						И ТаблицаОснованийПолученияВСобственность.ОснованиеПолученияВСобственность = 
	|							ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.Приватизация)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодФормаСобственности
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	втЛицевойСчет КАК ЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО ЛицевыеСчета.Дом = втКонтактнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО ЛицевыеСчета.Квартира = КВП_СостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СведенияОПроживающих.Жилец КАК Жилец,
	|			УПЖКХ_СведенияОПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|					,
	|					ДатаИзменения <= &ДатаКон
	|						И ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияОПроживающих
	|		ГДЕ
	|			УПЖКХ_СведенияОПроживающих.Проживает) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО ЛицевыеСчета.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СведенияОЗарегистрированных.Жилец КАК Жилец,
	|			СведенияОЗарегистрированных.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|					,
	|					ДатаИзменения <= &ДатаКон
	|						И ЛицевойСчет = &ЛицевойСчет) КАК СведенияОЗарегистрированных
	|		ГДЕ
	|			СведенияОЗарегистрированных.Зарегистрирован
	|			И НЕ СведенияОЗарегистрированных.ВременнаяРегистрация) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО ЛицевыеСчета.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Площади.Объект КАК Объект,
	|			СУММА(ВЫБОР
	|					КОГДА Площади.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|						ТОГДА Площади.Площадь
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ОбщаяПлощадь,
	|			СУММА(ВЫБОР
	|					КОГДА Площади.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|						ТОГДА Площади.Площадь
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЖилаяПлощадь
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаКон, Объект = &Квартира) КАК Площади
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Площади.Объект) КАК КВП_ПлощадьПомещенияОбщаяСрезПоследних
	|		ПО ЛицевыеСчета.Квартира = КВП_ПлощадьПомещенияОбщаяСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаКон, Помещение = &Квартира) 
	|			КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО ЛицевыеСчета.Квартира = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность) 
	|			КАК ОснованиеПолученияВСобственность,
	|			УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение = &Квартира) 
	|				КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ГДЕ
	|			НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность = 
	|				ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение) КАК ТаблицаОснованийПолученияВСобственность
	|		ПО ЛицевыеСчета.Квартира = ТаблицаОснованийПолученияВСобственность.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицевыеСчета.Суффикс,
	|	ЛицевыеСчета.КодКвартиры,
	|	втКонтактнаяИнформация.Корпус,
	|	втКонтактнаяИнформация.Улица,
	|	ЛицевыеСчета.Квартира,
	|	втКонтактнаяИнформация.Район,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	КВП_СостояниеПомещения.КатегорияКвартиры,
	|	ЛицевыеСчета.ТипЖилФонда,
	|	втКонтактнаяИнформация.Дом,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|		  ИЛИ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|				ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = 
	|						ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|						И ТаблицаОснованийПолученияВСобственность.ОснованиеПолученияВСобственность = 
	|							ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.Приватизация)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ,
	|	КВП_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь,
	|	КВП_ПлощадьПомещенияОбщаяСрезПоследних.ЖилаяПлощадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Район,
	|	ИтоговаяТаблица.Улица,
	|	ИтоговаяТаблица.Дом,
	|	ИтоговаяТаблица.Корпус,
	|	ИтоговаяТаблица.ТипЗаселения,
	|	ИтоговаяТаблица.ЛицевойСчет,
	|	ИтоговаяТаблица.Квартира,
	|	ИтоговаяТаблица.КодКвартиры,
	|	ИтоговаяТаблица.Суффикс,
	|	ИтоговаяТаблица.ТипЖилФонда КАК ЖилищныйФонд,
	|	ИтоговаяТаблица.КоличествоЗарегистрированных КАК КолвоПостоянноПроживающих,
	|	ИтоговаяТаблица.КоличествоПроживающих КАК КолвоФактическиПроживающих,
	|	ИтоговаяТаблица.ОбщаяПлощадь,
	|	ИтоговаяТаблица.ЖилаяПлощадь,
	|	ИтоговаяТаблица.КодФормаСобственности,
	|	МАКСИМУМ(КодыЖилищныхФондов.Код) КАК КодЖилФонд,
	|	МАКСИМУМ(КодыРайонов.Код) КАК КодРайона,
	|	МАКСИМУМ(КодыТиповЗаселения.Код) КАК КодТипЗаселения,
	|	МАКСИМУМ(КодыУлиц.Код) КАК КодУлицы
	|ИЗ
	|	ТаблицаДанных КАК ИтоговаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыРайонов КАК КодыРайонов
	|		ПО ИтоговаяТаблица.Район = КодыРайонов.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыУлиц КАК КодыУлиц
	|		ПО ИтоговаяТаблица.Улица = КодыУлиц.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЖилищныхФондов КАК КодыЖилищныхФондов
	|		ПО ИтоговаяТаблица.ТипЖилФонда = КодыЖилищныхФондов.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыТиповЗаселения КАК КодыТиповЗаселения
	|		ПО ИтоговаяТаблица.ТипЗаселения = КодыТиповЗаселения.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Район,
	|	ИтоговаяТаблица.Улица,
	|	ИтоговаяТаблица.Дом,
	|	ИтоговаяТаблица.Корпус,
	|	ИтоговаяТаблица.ТипЗаселения,
	|	ИтоговаяТаблица.ЛицевойСчет,
	|	ИтоговаяТаблица.КодКвартиры,
	|	ИтоговаяТаблица.Квартира,
	|	ИтоговаяТаблица.Суффикс,
	|	ИтоговаяТаблица.ТипЖилФонда,
	|	ИтоговаяТаблица.КоличествоЗарегистрированных,
	|	ИтоговаяТаблица.КоличествоПроживающих,
	|	ИтоговаяТаблица.ОбщаяПлощадь,
	|	ИтоговаяТаблица.ЖилаяПлощадь,
	|	ИтоговаяТаблица.КодФормаСобственности";
	
	СтруктураПолей = Новый Структура("Район, Улица, Дом, Корпус, Строение, Квартира, ЖилищныйФонд, "
	                                + "КолвоПостоянноПроживающих, КолвоФактическиПроживающих, "
	                                + "ОбщаяПлощадь, ЖилаяПлощадь, КодФормаСобственности, КодЖилФонд, "
	                                + "КодРайона, КодТипЗаселения, КодУлицы, ТипЗаселения");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
		СтруктураПолей.Квартира = "" + Выборка.КодКвартиры + Выборка.Суффикс;
	КонецЕсли;
	
	Возврат СтруктураПолей;
	
КонецФункции

// Функция возвращает данные по выбранному плательщику.
//
// Параметры:
//  Плательщик - СправочникСсылка, анализируемый плательщик.
//
// Возвращаемое значение
//  Структура,  Структура с данными по плательщику.
//
Функция ПолучитьДанныеПоЖильцу(Плательщик) Экспорт
	
	СтруктураТаблиц = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СформироватьТаблицыКодов(Дата, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втКодыПлательщиков.Код,
	|	втКодыПлательщиков.Наименование
	|ПОМЕСТИТЬ КодыПлательщиков
	|ИЗ
	|	&КодыПлательщиков КАК втКодыПлательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыДокументовЛичности.Код,
	|	втКодыДокументовЛичности.Наименование
	|ПОМЕСТИТЬ КодыДокументовЛичности
	|ИЗ
	|	&КодыДокументовЛичности КАК втКодыДокументовЛичности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыЛьгот.Код,
	|	втКодыЛьгот.Наименование
	|ПОМЕСТИТЬ КодыЛьгот
	|ИЗ
	|	&КодыЛьгот КАК втКодыЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Плательщик КАК Плательщик,
	|	&ФизЛицо КАК ФизЛицоПлательщика,
	|	&Телефон КАК Телефон,
	|	&СтраховойНомер КАК СтраховойНомер,
	|	&Пол КАК Пол,
	|	&ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втПлательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлательщиков.Плательщик,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента2,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан2,
	|	КВП_НазначенныеЛьготыСрезПоследних.ВидДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаВыдачиДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаОкончанияДокумента3,
	|	КВП_НазначенныеЛьготыСрезПоследних.КемВыдан3
	|ПОМЕСТИТЬ втНазначенныеЛьготы
	|ИЗ
	|	втПлательщиков КАК втПлательщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|				&ДатаКон,
	|				Проживающий.ФизЛицо = &ФизЛицо
	|					И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ПО втПлательщиков.Плательщик = КВП_НазначенныеЛьготыСрезПоследних.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Приоритет,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан
	|ПОМЕСТИТЬ втВсеПаспортныеДанныеФизЛиц
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&ДатаКон,
	|			Физлицо = &ФизЛицо
	|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&ДатаКон,
	|			Физлицо = &ФизЛицо
	|				И НЕ ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеФизЛиц.Физлицо КАК Физлицо,
	|	МИНИМУМ(втВсеПаспортныеДанныеФизЛиц.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втПриоритетыДокументовФизическихЛиц
	|ИЗ
	|	втВсеПаспортныеДанныеФизЛиц КАК втВсеПаспортныеДанныеФизЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПаспортныеДанныеФизЛиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеФизЛиц.Физлицо КАК Физлицо,
	|	втВсеПаспортныеДанныеФизЛиц.ВидДокумента КАК ВидДокумента,
	|	втВсеПаспортныеДанныеФизЛиц.Серия КАК Серия,
	|	втВсеПаспортныеДанныеФизЛиц.Номер КАК Номер,
	|	втВсеПаспортныеДанныеФизЛиц.ДатаВыдачи КАК ДатаВыдачи,
	|	втВсеПаспортныеДанныеФизЛиц.КемВыдан КАК КемВыдан
	|ПОМЕСТИТЬ втПаспортныеДанныеФизЛиц
	|ИЗ
	|	втПриоритетыДокументовФизическихЛиц КАК втПриоритетыДокументовФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПаспортныеДанныеФизЛиц КАК втВсеПаспортныеДанныеФизЛиц
	|		ПО втПриоритетыДокументовФизическихЛиц.Приоритет = втВсеПаспортныеДанныеФизЛиц.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Плательщики.Плательщик,
	|	Плательщики.Телефон,
	|	Плательщики.СтраховойНомер,
	|	Плательщики.Пол,
	|	Плательщики.ДатаРождения,
	|	ФИОФизическихЛиц.Фамилия,
	|	ФИОФизическихЛиц.Имя,
	|	ФИОФизическихЛиц.Отчество,
	|	втПаспортныеДанныеФизЛиц.ВидДокумента КАК ВидДокументаЛичности,
	|	втПаспортныеДанныеФизЛиц.Серия КАК СерияДокументаЛичности,
	|	втПаспортныеДанныеФизЛиц.Номер КАК НомерДокументаЛичности,
	|	втПаспортныеДанныеФизЛиц.ДатаВыдачи КАК ДатаВыдачиДокументаЛичности,
	|	ВЫРАЗИТЬ(втПаспортныеДанныеФизЛиц.КемВыдан КАК СТРОКА(200)) КАК ОрганизацияДокументаЛичности,
	|	СУММА(КодыДокументовЛичности.Код) КАК КодВидДокументаЛичности,
	|	СУММА(КодыПлательщиков.Код) КАК КодПлательщика,
	|	КодыЛьгот.Код КАК КодЛьготы,
	|	втНазначенныеЛьготы.ЛьготнаяКатегория КАК Льгота,
	|	втНазначенныеЛьготы.ВидДокумента.Код КАК КодВидДокументаЛьготы,
	|	втНазначенныеЛьготы.ВидДокумента КАК ВидДокументаЛьготы,
	|	втНазначенныеЛьготы.СерияДокумента КАК СерияДокументаЛьготы,
	|	втНазначенныеЛьготы.НомерДокумента КАК НомерДокументаЛьготы,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента КАК ДатаВыдачиДокументаЛьготы,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента КАК ДатаОкончанияДокументаЛьготы,
	|	втНазначенныеЛьготы.КемВыдан КАК КемВыданДокументЛьготы,
	|	втНазначенныеЛьготы.ВидДокумента2.Код КАК КодВидДокументаЛьготы2,
	|	втНазначенныеЛьготы.ВидДокумента2 КАК ВидДокументаЛьготы2,
	|	втНазначенныеЛьготы.СерияДокумента2 КАК СерияДокументаЛьготы2,
	|	втНазначенныеЛьготы.НомерДокумента2 КАК НомерДокументаЛьготы2,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента2 КАК ДатаВыдачиДокументаЛьготы2,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента2 КАК ДатаОкончанияДокументаЛьготы2,
	|	втНазначенныеЛьготы.КемВыдан2 КАК КемВыданДокументЛьготы2,
	|	втНазначенныеЛьготы.ВидДокумента3.Код КАК КодВидДокументаЛьготы3,
	|	втНазначенныеЛьготы.ВидДокумента3 КАК ВидДокументаЛьготы3,
	|	втНазначенныеЛьготы.СерияДокумента3 КАК СерияДокументаЛьготы3,
	|	втНазначенныеЛьготы.НомерДокумента3 КАК НомерДокументаЛьготы3,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента3 КАК ДатаВыдачиДокументаЛьготы3,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента3 КАК ДатаОкончанияДокументаЛьготы3,
	|	втНазначенныеЛьготы.КемВыдан3 КАК КемВыданДокументЛьготы3
	|ИЗ
	|	втПлательщиков КАК Плательщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизическихЛиц
	|		ПО Плательщики.ФизЛицоПлательщика = ФИОФизическихЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПаспортныеДанныеФизЛиц КАК втПаспортныеДанныеФизЛиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ КодыДокументовЛичности КАК КодыДокументовЛичности
	|			ПО втПаспортныеДанныеФизЛиц.ВидДокумента = КодыДокументовЛичности.Наименование
	|		ПО Плательщики.ФизЛицоПлательщика = втПаспортныеДанныеФизЛиц.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыПлательщиков КАК КодыПлательщиков
	|		ПО Плательщики.Плательщик = КодыПлательщиков.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНазначенныеЛьготы КАК втНазначенныеЛьготы
	|			ЛЕВОЕ СОЕДИНЕНИЕ КодыЛьгот КАК КодыЛьгот
	|			ПО втНазначенныеЛьготы.ЛьготнаяКатегория = КодыЛьгот.Наименование
	|		ПО Плательщики.Плательщик = втНазначенныеЛьготы.Плательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Плательщики.Плательщик,
	|	Плательщики.Телефон,
	|	Плательщики.СтраховойНомер,
	|	Плательщики.Пол,
	|	Плательщики.ДатаРождения,
	|	ФИОФизическихЛиц.Фамилия,
	|	ФИОФизическихЛиц.Имя,
	|	ФИОФизическихЛиц.Отчество,
	|	втПаспортныеДанныеФизЛиц.ВидДокумента,
	|	втПаспортныеДанныеФизЛиц.Серия,
	|	втПаспортныеДанныеФизЛиц.Номер,
	|	втПаспортныеДанныеФизЛиц.ДатаВыдачи,
	|	ВЫРАЗИТЬ(втПаспортныеДанныеФизЛиц.КемВыдан КАК СТРОКА(200)),
	|	втНазначенныеЛьготы.ВидДокумента,
	|	втНазначенныеЛьготы.СерияДокумента,
	|	втНазначенныеЛьготы.НомерДокумента,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента,
	|	втНазначенныеЛьготы.КемВыдан,
	|	втНазначенныеЛьготы.ЛьготнаяКатегория,
	|	втНазначенныеЛьготы.ВидДокумента2,
	|	втНазначенныеЛьготы.СерияДокумента2,
	|	втНазначенныеЛьготы.НомерДокумента2,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента2,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента2,
	|	втНазначенныеЛьготы.КемВыдан2,
	|	втНазначенныеЛьготы.ВидДокумента3,
	|	втНазначенныеЛьготы.СерияДокумента3,
	|	втНазначенныеЛьготы.НомерДокумента3,
	|	втНазначенныеЛьготы.ДатаВыдачиДокумента3,
	|	втНазначенныеЛьготы.ДатаОкончанияДокумента3,
	|	втНазначенныеЛьготы.КемВыдан3,
	|	КодыЛьгот.Код,
	|	втНазначенныеЛьготы.ВидДокумента.Код,
	|	втНазначенныеЛьготы.ВидДокумента2.Код,
	|	втНазначенныеЛьготы.ВидДокумента3.Код";
	
	Запрос.УстановитьПараметр("ДатаНач",                НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",                КонецМесяца(Дата));
	Запрос.УстановитьПараметр("КодыПлательщиков",       СтруктураТаблиц.КодыПлательщиков);
	Запрос.УстановитьПараметр("КодыДокументовЛичности", СтруктураТаблиц.КодыДокументовЛичности);
	Запрос.УстановитьПараметр("КодыЛьгот",              СтруктураТаблиц.КодыЛьгот);
	Запрос.УстановитьПараметр("Плательщик",             Плательщик);
	Запрос.УстановитьПараметр("ФизЛицо",                Плательщик.ФизЛицо);
	Запрос.УстановитьПараметр("СтраховойНомер",         Плательщик.ФизЛицо.СтраховойНомерПФР);
	Запрос.УстановитьПараметр("Пол",            ?(Плательщик.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской, "М",
												?(Плательщик.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский, "Ж", "")));
	Запрос.УстановитьПараметр("ДатаРождения",           Плательщик.ФизЛицо.ДатаРождения);
	
	ТаблицаТелефоновПлательщика = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(Плательщик);
	
	Если ТаблицаТелефоновПлательщика.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Телефон", 0);
	Иначе
		ТипЧисло = Новый ОписаниеТипов("Число");
		Запрос.УстановитьПараметр("Телефон", ТипЧисло.ПривестиЗначение(ТаблицаТелефоновПлательщика[0].СписокТелефонов));
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура обработчик события "ПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если РежимРаботы = 0 Тогда
		ПроверяемыеРеквизиты.Добавить("Скидки.РазмерСкидки");
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(Отказ);
	
КонецПроцедуры

// Процедура проверяет заполнение документа.
Процедура ПроверитьЗаполнениеДокумента(Отказ)
	
	// проверка таблицы плательщиков
	НомерСтроки = 1;
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("Плательщик",                 "Плательщик");
	СписокКолонок.Добавить("ЛицевойСчет",                "Лицевой счет");
	СписокКолонок.Добавить("Фамилия",                    "Фамилия");
	СписокКолонок.Добавить("Имя",                        "Имя");
	СписокКолонок.Добавить("КодУлицы",                   "Код улицы");
	СписокКолонок.Добавить("Квартира",                   "Квартира");
	СписокКолонок.Добавить("КодЖилФонд",                 "Код жил фонда");
	СписокКолонок.Добавить("КодФормаСобственности",      "Код формы собственности");
	СписокКолонок.Добавить("КолвоФактическиПроживающих", "Фактически проживающих");
	СписокКолонок.Добавить("ОбщаяПлощадь",               "Общая площадь");
	СписокКолонок.Добавить("Пол",                        "Пол");
	СписокКолонок.Добавить("ДатаРождения",               "Дата рождения");
	
	Для Каждого ТекПлательщик Из Плательщики Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если Не ЗначениеЗаполнено(ТекПлательщик[ТекЭлемент.Значение]) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"Строка " + НомерСтроки + ", плательщик """ + ТекПлательщик.Плательщик + """:"
					  + " В таблице ""Плательщики"" не заполнена колонка """ + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// проверка таблицы документов льгот
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("КодЛьготы",                 "Код льготы");
	СписокКолонок.Добавить("Льгота",                    "Льгота");
	СписокКолонок.Добавить("КодВидДокументаЛьготы",     "Код вида документа");
	СписокКолонок.Добавить("НомерДокументаЛьготы",      "Номер документа");
	СписокКолонок.Добавить("ДатаВыдачиДокументаЛьготы", "Дата выдачи");
	СписокКолонок.Добавить("КемВыданДокументЛьготы",    "Кем выдан");
	
	Для Каждого ТекДокЛьготы Из ДокументыЛьгот Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если НЕ ЗначениеЗаполнено(ТекДокЛьготы[ТекЭлемент.Значение]) Тогда
				СтрокаПлательщики = Плательщики.Найти(ТекДокЛьготы.Плательщик, "Плательщик");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка " + СтрокаПлательщики.НомерСтроки 
												  + ", плательщик """ + ТекДокЛьготы.Плательщик + """:"
												  + " В таблице ""Документы, удостоверяющие льготы""" + ?(ЗначениеЗаполнено(ТекДокЛьготы.Льгота), 
												  " с льготой """ + ТекДокЛьготы.Льгота + """", "") + " не заполнена колонка """ 
												  + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// проверка таблицы потребителей услуг
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("КодУслуги",                "Код услуги");
	СписокКолонок.Добавить("Услуга",                   "Услуга");
	СписокКолонок.Добавить("Тариф",                    "Тариф");
	СписокКолонок.Добавить("КолвоПользующихсяЛьготой", "Пользующиеся льготой");
	СписокКолонок.Добавить("Объем",                    "Объем");
	СписокКолонок.Добавить("РазмерСкидки",             "Размер скидки");
	
	Для Каждого ТекСкидка Из Скидки Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если НЕ ЗначениеЗаполнено(ТекСкидка[ТекЭлемент.Значение]) Тогда
				СтрокаПлательщики = Плательщики.Найти(ТекСкидка.Плательщик, "Плательщик");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка " + СтрокаПлательщики.НомерСтроки 
												  + ", плательщик """ + ТекСкидка.Плательщик + """:"
												  + " В таблице ""Льготные скидки на услуги""" + ?(ЗначениеЗаполнено(ТекСкидка.Услуга), 
												  " с услугой """ + ТекСкидка.Услуга + """", "") + " не заполнена колонка """ 
												  + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли