
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Заполняет табличные части документа.
Процедура ЗаполнитьТабличнуюЧасть()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличныеЧасти();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаСервере
// Заполняет табличные части документа.
Функция ЗаполнитьСтрокуТабличнойЧасти(ЛицевойСчет, Плательщик)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеЗагружены = ДокументОбъект.ЗаполнитьТабличныеЧасти(ЛицевойСчет, Плательщик, Истина);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Возврат ДанныеЗагружены;
	
КонецФункции

&НаКлиенте
// Процедура устанавливает видимость элементов управления формы.
Процедура УстановитьВидимость()
	
	Элементы.СкидкиСуммаКорректировки.Видимость = Объект.РежимРаботы = 1;
	Элементы.СкидкиМесяцКорректировки.Видимость = Объект.РежимРаботы = 1;
	Элементы.СкидкиЛьгота.Видимость = Элементы.БезУчетаЛьгот.Пометка;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает доступность элементов управления формы.
Процедура УстановитьДоступность()
	
	Элементы.ФормаЗаполнить.Доступность         = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаШапка.Доступность            = НЕ Объект.ОтчетСдан;
	Элементы.Организация.Доступность            = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаОтбора.Доступность           = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаРежимРаботы.Доступность      = НЕ Объект.ОтчетСдан;
	Элементы.ТаблицаПлательщиков.Доступность    = НЕ Объект.ОтчетСдан;
	Элементы.ТаблицаДокументовЛьгот.Доступность = НЕ Объект.ОтчетСдан;
	Элементы.ТаблицаСкидок.Доступность          = НЕ Объект.ОтчетСдан;
	Элементы.Ответственный.Доступность          = НЕ Объект.ОтчетСдан;
	Элементы.Комментарий.Доступность            = НЕ Объект.ОтчетСдан;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор для табличной части "Документы льгот".
Процедура УстановитьОтборТабличнойЧастиДокументыЛьгот(Элемент)
	
	Элемент.Обновить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.ДокументыЛьгот.ОтборСтрок = Новый ФиксированнаяСтруктура("Плательщик", Элемент.ТекущиеДанные.Плательщик);
		УстановитьОтборТабличнойЧастиСкидки(Элементы.ДокументыЛьгот);
	Иначе
		Элементы.ДокументыЛьгот.ОтборСтрок = Новый ФиксированнаяСтруктура("Плательщик",
		                                     ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура удаляет строки из табличной части "Документы льгот".
Процедура УдалитьСтрокиТабличнойЧастиДокументыЛьготИСкидок(Плательщик, УдалитьСтрокуТабличнойЧастиДокументыЛьгот = Ложь, ЛьготнаяКатегория = Неопределено)
	
	МассивСтрок = Новый Массив;
	
	Если УдалитьСтрокуТабличнойЧастиДокументыЛьгот Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.ДокументыЛьгот Цикл
			Если НЕ СтрокаТаблицы.Плательщик = Плательщик Тогда 
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДокументыЛьгот.Загрузить(Объект.ДокументыЛьгот.Выгрузить(МассивСтрок));
		
	КонецЕсли;
	
	МассивСтрок.Очистить();
	Для Каждого СтрокаТаблицы Из Объект.Скидки Цикл
		Если ЛьготнаяКатегория = Неопределено Тогда
			Если НЕ СтрокаТаблицы.Плательщик = Плательщик Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			Если НЕ СтрокаТаблицы.Плательщик = Плательщик
				ИЛИ НЕ СтрокаТаблицы.Льгота = ЛьготнаяКатегория Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Скидки.Загрузить(Объект.Скидки.Выгрузить(МассивСтрок));
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор для табличной части "Скидки".
Процедура УстановитьОтборТабличнойЧастиСкидки(Элемент)
	
	Элемент.Обновить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.БезУчетаЛьгот.Пометка Тогда
			Элементы.Скидки.ОтборСтрок = Новый ФиксированнаяСтруктура("Плательщик, Льгота",
			                             Элемент.ТекущиеДанные.Плательщик, Элемент.ТекущиеДанные.Льгота);
		Иначе
			Элементы.Скидки.ОтборСтрок = Новый ФиксированнаяСтруктура("Плательщик", Элемент.ТекущиеДанные.Плательщик);
		КонецЕсли;
	Иначе
		Элементы.Скидки.ОтборСтрок = Новый ФиксированнаяСтруктура("Плательщик",
		                             ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция сохраняет файл на диск.
Процедура СохранитьФайлНаДискН(ДиалогВыбораКаталога = Неопределено, ИмяФайла, КодОрганизации)
	
	ТекстФайла = ПолучитьТекстФайла(МесяцКорректировки);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	ТекстовыйДокумент.НачатьЗапись(,ИмяФайла, "cp866");
	
	// Сформируем информацию по файлу.
	Структура = Новый Структура;
	Структура.Вставить("ИмяФайла",          КраткоеИмя);
	Структура.Вставить("КоличествоЗаписей", СтрЧислоСтрок(ТекстФайла));
	СуммаВФайле = Прав(ТекстФайла, 13);
	Попытка
		ИтоговоеЧисло = Число(Лев(СуммаВФайле, 10) + "," + Прав(СуммаВФайле, 3));
	Исключение
		ИтоговоеЧисло = 0;
	КонецПопытки;
	Структура.Вставить("Сумма", ИтоговоеЧисло);
	
	Если НЕ МесяцКорректировки = Неопределено Тогда
		Структура.Вставить("МесяцКорректировки", МесяцКорректировки);
	КонецЕсли;
	
	//Возврат Структура;
	
	Если ДиалогВыбораКаталога <> Неопределено Тогда
		КаталогСохранения = ДиалогВыбораКаталога.Каталог;
		ПолноеИмяФайла = КаталогСохранения + "\" + ИмяФайла;
		ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", ЭтотОбъект,  Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла));
	Иначе
		КаталогСохранения = "";
		ПолноеИмяФайла = ИмяФайла;
		ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", ЭтотОбъект);
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив();
	
	СохранитьФайлНаДискНаСервере(ПолноеИмяФайла, КодОрганизации, МассивВыгружаемыхФайлов);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
	
КонецПроцедуры // СохранитьФайлНаДиск()

&НаСервере
// Функция возвращает текст файла выгрузки.
Функция ПолучитьТекстФайла(МесяцКорректировки)
	
	ТекстФайла = "";
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТекстФайла = ДокументОбъект.ПолучитьТекстФайлаДляВыгрузки(МесяцКорректировки);
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервере
// Функция возвращает код организации.
Функция ПолучитьКодОрганизации()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	КодОрганизации = ДокументОбъект.ПолучитьКодОрганизации();
	
	Возврат КодОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает л/сч жильца.
Функция ПолучитьЛицевойСчетПроживающего(Проживающий)
	
	Возврат Проживающий.Владелец;
	
КонецФункции

&НаСервере
// Функция возвращает данные по лицевому счету.
Функция ПолучитьДанныеПоЛицевомуСчету(ЛицевойСчет)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Данные = ДокументОбъект.ПолучитьДанныеПоЛС(ЛицевойСчет);
	Возврат Данные;
	
КонецФункции

&НаСервере
// Процедура заполняет данные по плательщику.
Процедура ЗаполнитьДанныеПоПлательщику(СтрокаПлательщик)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТекДанные = Объект.Плательщики.НайтиПоИдентификатору(СтрокаПлательщик);
	Плательщик = ТекДанные.Плательщик;
	
	ДанныеПоПлательщику = ДокументОбъект.ПолучитьДанныеПоЖильцу(Плательщик);
	Если ЗначениеЗаполнено(ДанныеПоПлательщику) Тогда
		
		КолонкиДляСворачивания = "Плательщик, Телефон, СтраховойНомер, Пол, ДатаРождения, Фамилия, Имя, Отчество, "
		+ "ВидДокументаЛичности, СерияДокументаЛичности, НомерДокументаЛичности, ДатаВыдачиДокументаЛичности, "
		+ "ОрганизацияДокументаЛичности, КодВидДокументаЛичности, КодПлательщика";
		
		ТаблицаПлательщиков = ДанныеПоПлательщику.Скопировать(, КолонкиДляСворачивания);
		ТаблицаПлательщиков.Свернуть(КолонкиДляСворачивания);
		ЗаполнитьЗначенияСвойств(ТекДанные, ТаблицаПлательщиков.Получить(0));
		
		Для Каждого СтрокаДанныхПлательщика Из ДанныеПоПлательщику Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхПлательщика.Льгота) Тогда
				ЗаполнитьЗначенияСвойств(Объект.ДокументыЛьгот.Добавить(), СтрокаДанныхПлательщика);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура очищает текущую строку табличной части "Плательщики".
Процедура ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока)
	
	Для Каждого ТекЭлемент Из Элементы.Плательщики.ПодчиненныеЭлементы Цикл
		ИмяТекЭлемента = СтрЗаменить(ТекЭлемент.Имя, "Плательщики", "");
		Если ИмяТекЭлемента = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока[ИмяТекЭлемента] = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция получает ключ записи настроек выгрузки.
Функция ПолучитьКлючЗаписи()
	
	ТаблицаЗаписей = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(Объект.Дата);
	Если ТаблицаЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СоздатьКлючЗаписи(Новый Структура("Период", 
		ТаблицаЗаписей.Получить(0).Период));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура формирует итоговые сводные ведомости.
Процедура СформироватьСводныеВедомости(ПараметрыДляПечати)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Документ.УПЖКХ_ОтчетОВыпадающихДоходах", 
														 "СводнуюВедомость", 
														 МассивОбъектов,
														 ЭтаФорма,
														 ПараметрыДляПечати);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Документ.УПЖКХ_ОтчетОВыпадающихДоходах", 
														 "ИтоговыеДанные", 
														 МассивОбъектов,
														 ЭтаФорма,
														 Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов управления формы.
Процедура УстановитьВидимостьКолонок()
	
	Элементы.ПлательщикиРайон.Видимость                = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиУлица.Видимость                = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиЖилищныйФонд.Видимость         = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиТипЗаселения.Видимость         = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиВидДокументаЛичности.Видимость = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ДокументыЛьготВидДокумента.Видимость      = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ДокументыЛьготВидДокумента2.Видимость     = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ДокументыЛьготВидДокумента3.Видимость     = Элементы.ФормаРасшифровка.Пометка;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ФОРМЫ

#Область ПроцедурыИФункцииСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбъектДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_ОтчетОВыпадающихДоходах"));
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ОбъектДокумента,
		УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
		
	Иначе
		// Это существующий документ. 
		// Проверим, что его можно менять.
		СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ОБРАБОТЧИКИ КОМАНД

#Область ПроцедурыИФункцииСобытийКомандФормы

&НаКлиенте
// Процедура обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если ПолучитьКлючЗаписи() = Неопределено Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнить", ЭтотОбъект),
		"Не найдены настройки выгрузки в ГЦЖС. Создать настройку?",
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "Заполнить()".
Процедура ОбработатьРезультатВопросаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ФормаЗаписи",
		Новый Структура("Ключ, ПараметрНастройки", ПолучитьКлючЗаписи(), "Настройки выгрузки начислений за ЖКУ"),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ЗаполнитьПродолжение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнить()

&НаКлиенте
// Процедура-продолжение поцедуры-обработчика "Заполнить()".
Процедура ЗаполнитьПродолжение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверитьКоличествоПлательщиковВТаблице();
	
КонецПроцедуры // ЗаполнитьПродолжение()

&НаКлиенте
// Процедура проверяет количество записей в таблице и 
// вызывает процедуру заполнения ТЧ.
Процедура ПроверитьКоличествоПлательщиковВТаблице()
	
	Если Объект.Плательщики.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПроверитьКоличествоПлательщиковВТаблице", ЭтотОбъект),
		"Табличные части будут очищены! Продолжить?",
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВызватьЗаполнениеТабличнойЧасти();
	
КонецПроцедуры // ПроверитьКоличествоПлательщиковВТаблице()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПроверитьКоличествоПлательщиковВТаблице()".
Процедура ОбработатьРезультатВопросаПроверитьКоличествоПлательщиковВТаблице(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьЗаполнениеТабличнойЧасти();
	
КонецПроцедуры // ОбработатьРезультатВопросаПроверитьКоличествоПлательщиковВТаблице()

&НаКлиенте
// Процедура вызывает процедуру заполнения табличной части и 
// вызывает процедуру установки отбора в ТЧ "ДокументыЛьгот".
Процедура ВызватьЗаполнениеТабличнойЧасти()
	
	ЗаполнитьТабличнуюЧасть();
	
	УстановитьОтборТабличнойЧастиДокументыЛьгот(Элементы.Плательщики);

КонецПроцедуры // ВызватьЗаполнениеТабличнойЧасти()

&НаКлиенте
// Процедура обработчик команды "БезУчетаЛьгот".
Процедура БезУчетаЛьгот(Команда)
	
	Элементы.БезУчетаЛьгот.Пометка = НЕ Элементы.БезУчетаЛьгот.Пометка;
	ДокументыЛьготПриАктивизацииСтроки(Элементы.ДокументыЛьгот);
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "СохранитьНаДиск".
Процедура СохранитьНаДиск(Команда)
	
	Если Объект.Плательщики.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Табличные части не заполнены!");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = "Перед формированием файла необходимо записать документ. Записать?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранитьНаДиск", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СохранитьНаДискПродолжение();
	
КонецПроцедуры // СохранитьНаДиск()
&НаКлиенте
// Функция сохраняет файл на диск.
Функция СохранитьФайлНаДиск(ИмяФайла, КраткоеИмя, МесяцКорректировки = Неопределено)
	
	ТекстФайла = ПолучитьТекстФайла(МесяцКорректировки);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	ТекстовыйДокумент.НачатьЗапись(,ИмяФайла, "cp866");
	
	// Сформируем информацию по файлу.
	Структура = Новый Структура;
	Структура.Вставить("ИмяФайла",          КраткоеИмя);
	Структура.Вставить("КоличествоЗаписей", СтрЧислоСтрок(ТекстФайла));
	СуммаВФайле = Прав(ТекстФайла, 13);
	Попытка
		ИтоговоеЧисло = Число(Лев(СуммаВФайле, 10) + "," + Прав(СуммаВФайле, 3));
	Исключение
		ИтоговоеЧисло = 0;
	КонецПопытки;
	Структура.Вставить("Сумма", ИтоговоеЧисло);
	
	Если НЕ МесяцКорректировки = Неопределено Тогда
		Структура.Вставить("МесяцКорректировки", МесяцКорректировки);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции


&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "СохранитьНаДиск()".
Процедура ОбработатьРезультатВопросаСохранитьНаДиск(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьНаДискПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаСохранитьНаДиск()

// Обрабатывает результат выбора католога сохранения.
&НаКлиенте
Процедура СохранитьНаДискПродолжениеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораКаталога = ДополнительныеПараметры.ДиалогВыбораКаталога;
	
	Длг = ДополнительныеПараметры.Длг;
	ИмяФайла             = ДополнительныеПараметры.ИмяФайла;
	КодОрганизации       = ДополнительныеПараметры.КодОрганизации;
	МассивПараметровПечати = ДополнительныеПараметры.МассивПараметровПечати;
	ПараметрыДляПечати = ДополнительныеПараметры.ПараметрыДляПечати;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		СохранитьФайлНаДиск(ДиалогВыбораКаталога, ИмяФайла,КодОрганизации);
		ТекПараметрДляПечати = СохранитьФайлНаДиск(Длг.ПолноеИмяФайла, ИмяФайла);
		МассивПараметровПечати.Добавить(ТекПараметрДляПечати);
		ПараметрыДляПечати.Вставить("МассивПараметров", МассивПараметровПечати);
		Текст = "Файл успешно сохранен!" + Символы.ПС + "Путь файла: " + Длг.ПолноеИмяФайла + Символы.ПС
		+ "Сформировать сводные ведомости?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранитьНаДискПродолжение", ЭтотОбъект, Новый Структура("ПараметрыДляПечати", ПараметрыДляПечати));
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаДискПродолжениеЗавершение()

&НаКлиенте

&НаСервере
// Инициирует процедуру формирования файлов выгрузки.
Процедура СохранитьФайлНаДискНаСервере(ПолноеИмяФайла, КодОрганизации, МассивВыгружаемыхФайлов)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПодготовитьФайлВыгрузкиВГЦЖС(ПолноеИмяФайла, КодОрганизации, Объект.РежимРаботы, МассивВыгружаемыхФайлов);
	
КонецПроцедуры // СохранитьФайлНаДискНаСервере()

&НаКлиенте
// Процедура-обработчик, вызванная в процедуре "ВыгрузкаФайлов()".
Процедура ОбработатьПослеВыгрузки(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПомещенныеФайлы = Неопределено И Не ПомещенныеФайлы.Количество() = 0 Тогда
		Если ДополнительныеПараметры <> Неопределено Тогда
			СтрокаПути = "Путь к сохраненному файлу с отчетом: " + ДополнительныеПараметры.ПолноеИмяФайла;
		Иначе 
			СтрокаПути = ""
		КонецЕсли;
		ТекстСообщения = "Сформирован отчет о выпадающих доходах за " + Формат(Объект.Период, "ДФ='MMMM yyyy'") + " по организации " + Объект.Организация + Символы.ПС + СтрокаПути;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать отчет о выпадающих доходах за " + Формат(Объект.Период, "ДФ='MMMM yyyy'") + "по организации " + Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПослеВыгрузки()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СохранитьНаДиск()".
Процедура СохранитьНаДискПродолжение()
	
	КодОрганизации = ПолучитьКодОрганизации();
	
	Если Объект.РежимРаботы = 1 Тогда //Корректировка
		ВыбранныйРежимВыбораФайлов = РежимДиалогаВыбораФайла.ВыборКаталога;
		ЗаголовокВыбораФайлов      = "Выбор каталога для сохранения файлов";
	Иначе
		ВыбранныйРежимВыбораФайлов = РежимДиалогаВыбораФайла.Сохранение;
		ЗаголовокВыбораФайлов      = "Сохранение файла";
	КонецЕсли;
	
	Длг           = Новый ДиалогВыбораФайла(ВыбранныйРежимВыбораФайлов);
	WSShell        = Новый COMОбъект("Wscript.Shell");
	LOCALAPPDATA   = WSShell.Environment("PROCESS").Item("LOCALAPPDATA") + "\Temp";
	USERPROFILE    = WSShell.Environment("PROCESS").Item("USERPROFILE");
	
	Если НЕ ЗначениеЗаполнено(LOCALAPPDATA) Тогда
		LOCALAPPDATA = USERPROFILE + "\Local Settings\Application Data\Temp";
	КонецЕсли;
	
	Длг.Каталог                     = LOCALAPPDATA;
	Длг.Заголовок                   = ЗаголовокВыбораФайлов;
	Длг.ПроверятьСуществованиеФайла = Истина;
	
	ПараметрыДляПечати     = Новый Структура;
	МассивПараметровПечати = Новый Массив;
	
	Если Объект.РежимРаботы = 1 Тогда //Корректировка
		Длг.Показать(Новый ОписаниеОповещения("СохранитьНаДискПродолжениеКорректировкаЗавершение", ЭтотОбъект, Новый Структура("Длг, КодОрганизации, МассивПараметровПечати, ПараметрыДляПечати", Длг, КодОрганизации, МассивПараметровПечати, ПараметрыДляПечати)));
	Иначе
		ИмяФайла = КодОрганизации + "_" + Формат(Объект.Дата, "ДФ=""ММгггг""") + ".txt";
		
		Длг.ПолноеИмяФайла              = ИмяФайла;
		Длг.Фильтр                      = "Файл данных (*.txt)|*.txt";
		Длг.Расширение                  = "txt";
		
		Длг.Показать(Новый ОписаниеОповещения("СохранитьНаДискПродолжениеЗавершение", ЭтотОбъект, Новый Структура("Длг, ИмяФайла, МассивПараметровПечати, ПараметрыДляПечати", Длг, ИмяФайла, МассивПараметровПечати, ПараметрыДляПечати)));
		
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат выбора файла при корректировке.
&НаКлиенте
Процедура СохранитьНаДискПродолжениеКорректировкаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Длг = ДополнительныеПараметры.Длг;
	КодОрганизации = ДополнительныеПараметры.КодОрганизации;
	МассивПараметровПечати = ДополнительныеПараметры.МассивПараметровПечати;
	ПараметрыДляПечати = ДополнительныеПараметры.ПараметрыДляПечати;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		МассивМесяцевКорректировки = ПолучитьРазличныеМесяцыКорректировки();
		
		Для Каждого ТекМесяцКорректировки ИЗ МассивМесяцевКорректировки Цикл
			ИмяФайла = КодОрганизации + "_" + Формат(ТекМесяцКорректировки, "ДФ=""ММгггг""") + "_" + Формат(Объект.Дата, "ДФ=""ММгггг""") + ".txt";
			ТекПараметрДляПечати = СохранитьФайлНаДиск(Длг.Каталог + "\" + ИмяФайла, ИмяФайла, ТекМесяцКорректировки);
			МассивПараметровПечати.Добавить(ТекПараметрДляПечати);
		КонецЦикла;
		
		ПараметрыДляПечати.Вставить("МассивПараметров", МассивПараметровПечати);
		
		Текст = "Файлы успешно сохранены!" + Символы.ПС + "Путь файлов: " + Длг.Каталог + Символы.ПС
		+ "Сформировать сводные ведомости?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранитьНаДискПродолжение", ЭтотОбъект, Новый Структура("ПараметрыДляПечати", ПараметрыДляПечати));
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат выбора файла.
&НаКлиенте

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "СохранитьНаДискПродолжение()".
Процедура ОбработатьРезультатВопросаСохранитьНаДискПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьСводныеВедомости(ДополнительныеПараметры.ПараметрыДляПечати);
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаСохранитьНаДискПродолжение()

&НаКлиенте
// Процедура обработчик команды "ПечатьТекущегоЛС".
Процедура ПечатьТекущегоЛС(Команда)
	
	ТекДанные = Элементы.Плательщики.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено И ЗначениеЗаполнено(ТекДанные.ЛицевойСчет) Тогда
		
		ФормаОтчета = ПолучитьФорму("Отчет.КВП_ВыпискаПоЛицевомуСчету.Форма", , ЭтаФорма);
		ФормаОтчета.Отчет.ЛицевойСчет   = ТекДанные.ЛицевойСчет;
		ФормаОтчета.Отчет.НачалоПериода = НачалоМесяца(Объект.Дата);
		ФормаОтчета.Отчет.КонецПериода  = КонецМесяца(Объект.Дата);
		ФормаОтчета.Отчет.ДатаВыдачи    = Объект.Дата;
		ФормаОтчета.Отчет.Организация   = Объект.Организация;
		ФормаОтчета.СформироватьОтчетНаСервере();
		ФормаОтчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "Настройки".
Процедура Настройки(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ФормаЗаписи",
	Новый Структура("Ключ, ПараметрНастройки", ПолучитьКлючЗаписи(),
	"Настройки отчета о выпадающих доходах"), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "Расшифровка".
Процедура Расшифровка(Команда)
	
	Элементы.ФормаРасшифровка.Пометка = Не Элементы.ФормаРасшифровка.Пометка;
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПроцедурыИФункцииСобытийЭлементовФормы

&НаКлиенте
// Процедура обработчик события "ПриАктивизацииСтроки" табличной части " Плательщики".
Процедура ПлательщикиПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборТабличнойЧастиДокументыЛьгот(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриАктивизацииСтроки" табличной части "ДокументыЛьгот".
Процедура ДокументыЛьготПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборТабличнойЧастиСкидки(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля "ДокументыЛьготЛьгота".
Процедура ДокументыЛьготЛьготаПриИзменении(Элемент)
	
	УстановитьОтборТабличнойЧастиСкидки(Элементы.ДокументыЛьгот);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" реквизита "РежимРаботы".
Процедура РежимРаботыПриИзменении(Элемент)
	
	Если Объект.Плательщики.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаРежимРаботыПриИзменении", ЭтотОбъект);
		ТекстВопроса       = "Табличные части будут перезаполнены!" + Символы.ПС + "Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	РежимРаботыПриИзмененииПродолжение();
	
КонецПроцедуры // РежимРаботыПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "РежимРаботыПриИзменении()".
Процедура ОбработатьРезультатВопросаРежимРаботыПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧасть();
	Иначе
		Объект.РежимРаботы = ?(Объект.РежимРаботы = 0, 1, 0);
		Возврат;
	КонецЕсли;
	
	РежимРаботыПриИзмененииПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаРежимРаботыПриИзменении()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "РежимРаботыПриИзменении()".
Процедура РежимРаботыПриИзмененииПродолжение()
	
	УстановитьВидимость();
	
КонецПроцедуры // РежимРаботыПриИзмененииПродолжение()

&НаКлиенте
// Процедура обработчик события "ПередНачаломДобавления" табличной части "ДокументыЛьгот".
Процедура ДокументыЛьготПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Плательщики.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Плательщики.ТекущиеДанные.Плательщик) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен плательщик в табличной части ""Плательщики""!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриНачалеРедактирования" табличной части "ДокументыЛьгот".
Процедура ДокументыЛьготПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Плательщик = Элементы.Плательщики.ТекущиеДанные.Плательщик;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередНачаломДобавления" табличной части "Скидки".
Процедура СкидкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.ДокументыЛьгот.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.ДокументыЛьгот.ТекущиеДанные.Льгота) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Не заполнена льгота в табличной части ""Документы, предоставляющие льготы""!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриНачалеРедактирования" табличной части "Скидки".
Процедура СкидкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Плательщик = Элементы.ДокументыЛьгот.ТекущиеДанные.Плательщик;
		Элемент.ТекущиеДанные.Льгота     = Элементы.ДокументыЛьгот.ТекущиеДанные.Льгота;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриОкончанииРедактирования" табличной части "Плательщики".
Процедура ПлательщикиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьОтборТабличнойЧастиДокументыЛьгот(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" флажка "ОтчетПринят".
Процедура ОтчетПринятПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередУдалением" табличной части "Плательщики".
Процедура ПлательщикиПередУдалением(Элемент, Отказ)
	
	Элемент.Обновить();
	Плательщик = ?(НЕ Элемент.ТекущиеДанные = Неопределено, Элемент.ТекущиеДанные.Плательщик,
	ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка"));
	
	УдалитьСтрокиТабличнойЧастиДокументыЛьготИСкидок(Плательщик, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередУдалением" табличной части "ДокументыЛьгот".
Процедура ДокументыЛьготПередУдалением(Элемент, Отказ)
	
	Элемент.Обновить();
	Плательщик = ?(НЕ Элемент.ТекущиеДанные = Неопределено, Элемент.ТекущиеДанные.Плательщик,
	ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка"));
	
	ЛьготнаяКатегория = ?(НЕ Элемент.ТекущиеДанные = Неопределено, Элемент.ТекущиеДанные.Льгота,
	ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка"));
	
	УдалитьСтрокиТабличнойЧастиДокументыЛьготИСкидок(Плательщик, Ложь, ЛьготнаяКатегория);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" колонки "ЛицевойСчет" табличной части "Плательщики".
Процедура ПлательщикиЛицевойСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Плательщики.ТекущиеДанные;
	ЛицевойСчет   = ТекущаяСтрока.ЛицевойСчет;
	
	Если ЗначениеЗаполнено(ПредыдущийПлательщик) Тогда
		УдалитьСтрокиТабличнойЧастиДокументыЛьготИСкидок(ПредыдущийПлательщик, Истина);
	КонецЕсли;
	
	ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПолучитьДанныеПоЛицевомуСчету(ЛицевойСчет));
	
	ТекущаяСтрока.ЛицевойСчет = ЛицевойСчет;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" колонки "Плательщик" табличной части "Плательщики".
Процедура ПлательщикиПлательщикПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные;
	
	ТекущийПлательщик = ТекущаяСтрока.Плательщик;
	ТекущийЛицевойСчет = ?(ЗначениеЗаполнено(ТекущийПлательщик),ПолучитьЛицевойСчетПроживающего(ТекущаяСтрока.Плательщик),
						   ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	
	// Проверяем, есть ли плательщик в табличной части.
	Если ЗначениеЗаполнено(ТекущийПлательщик)
		И Объект.Плательщики.НайтиСтроки(Новый Структура("Плательщик", ТекущийПлательщик)).Количество() > 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Плательщик """ + Строка(ТекущийПлательщик) + """ уже присутствует в табличной части!");
		ТекущаяСтрока.Плательщик  = ПредыдущийПлательщик;
		Возврат;
	КонецЕсли;
	
	// Если предыдущее значение не пустое, то очищаем все данные для него.
	Если ЗначениеЗаполнено(ПредыдущийПлательщик) Тогда
		УдалитьСтрокиТабличнойЧастиДокументыЛьготИСкидок(ПредыдущийПлательщик, Истина);
		ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПолучитьДанныеПоЛицевомуСчету(ТекущийЛицевойСчет));
		ТекущаяСтрока.ЛицевойСчет = ПолучитьЛицевойСчетПроживающего(ПредыдущийПлательщик);
	КонецЕсли;
	
	// Если текущее значение не пустое, то заполняем новыми значениями.
	Если ЗначениеЗаполнено(ТекущийПлательщик) Тогда
		
		ДанныеЗагружены = ЗаполнитьСтрокуТабличнойЧасти(ТекущийЛицевойСчет, ТекущийПлательщик);
		
		// Если по плательщику нет расчитанных льгот, то
		Если НЕ ДанныеЗагружены Тогда
			
			// заполняем сведениями по лицевому счету.
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПолучитьДанныеПоЛицевомуСчету(ТекущийЛицевойСчет));
			
			// и заполняем сведениями по плательщику.
			ЗаполнитьДанныеПоПлательщику(ТекущаяСтрока.ПолучитьИдентификатор());
			
		КонецЕсли;
		
		ТекущаяСтрока.Плательщик  = ТекущийПлательщик;
		ТекущаяСтрока.ЛицевойСчет = ТекущийЛицевойСчет;
		
	КонецЕсли;
	
	УстановитьОтборТабличнойЧастиДокументыЛьгот(ЭтаФорма.Элементы.Плательщики);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриНачалеРедактирования" колонки "Плательщик" табличной части "Плательщики".
Процедура ПлательщикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Если это копирование, то очищаем всю строку.
	Если Копирование Тогда
		ТекущаяСтрока = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные;
		ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередНачаломИзменения" табличной части "Плательщики".
Процедура ПлательщикиПередНачаломИзменения(Элемент, Отказ)
	
	ПредыдущийПлательщик = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик;
	
КонецПроцедуры

#КонецОбласти




#Область СлужебныеПроцедурыРаботыСФайлами


&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
