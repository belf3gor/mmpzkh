#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Процедура заполняет рассчитываемые реквизиты переданного документа заявки.
//
// Параметры:
//	Объект - ДокументОбъект, ДанныеФормыКоллекция - Документ заявки.
//
Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт

	// Список банков и предоставляемой им отчетности для каждой заявки может быть свой.
	Объект.Банки.Очистить();
	Объект.Отчетность.Очистить();
	Объект.ПолучателиОтчетности.Очистить();
	Объект.ТребуетсяОбновлениеОтчетности = Истина;
	Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Ложь;
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса()); // Заявку заполняем всегда по состоянию "на сегодня".
	
	Объект.ПериодРегистрации = ПериодРегистрацииПоУмолчанию();

КонецПроцедуры

// Проверяет корректность и полноту заполнения полей заявки.
// Если указано имя страницы, то проверяются только поля, расположенные на указанной странице.
//
// Параметры:
//	ОбъектИлиФорма - ДокументОбъект, УправляемаяФорма - Документ заявки или его форма.
//	ИмяСтраницы - Строка - Имя страницы заявки для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если поля заполнены корректно, иначе Ложь.
//
Функция ПроверитьЗаполнение(ОбъектИлиФорма, ИмяСтраницы = "") Экспорт

	Отказ = Ложь;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект               = ОбъектИлиФорма.Объект;
		РеквизитыОрганизации = ОбъектИлиФорма.Организация;
	Иначе
		Объект               = ОбъектИлиФорма;
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
			"Ссылка, ЮридическоеФизическоеЛицо, ИндивидуальныйПредприниматель,
			|ДатаРегистрации, ОГРН, ИНН,
			|КодОКОПФ, НаименованиеОКОПФ,
			|КодОКВЭД2, НаименованиеОКВЭД2,
			|НаименованиеСокращенное, НаименованиеПолное");
	КонецЕсли;

	// Организация
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Организация", , Отказ);
			
			// Остальные поля не проверяем, пока не заполнят организацию.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхРуководителяЮЛ(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);

	ПроверитьЗаполнениеБанки(ОбъектИлиФорма, ИмяСтраницы, Отказ);
	
	ПроверитьЗаполнениеОтчетность(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ);
	
	Возврат НЕ Отказ;

КонецФункции

// Возвращает структуру с подробной информацией из заявки для выгрузки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//
// Возвращаемое значение:
//	Структура - содержит ключи:
//		* ДанныеЗаявки - Структура - Поля из документа Заявка на кредит.
//		* ДанныеЗаемщика - Структура - см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* ДанныеИП - Структура - см. УчетЗарплаты.ДанныеФизическихЛиц()
//		* ДанныеРуководителя - Структура - см. УчетЗарплаты.ДанныеФизическихЛиц()
//
Функция СведенияОЗаявке(ЗаявкаНаКредит) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("ДанныеЗаявки",       Новый Структура());
	Результат.Вставить("ДанныеЗаемщика",     Новый Структура());
	Результат.Вставить("ДанныеИП",           Новый Структура());
	Результат.Вставить("ДанныеРуководителя", Новый Структура());

	// Заявка
	ДанныеЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаКредит,
		"Ссылка, Дата, Организация, СуммаДокумента, СрокКредита, ЦельКредита, ПериодРегистрации,
		|КонтактноеЛицо, ДолжностьКонтактногоЛица, ТелефонКонтактногоЛица, АдресЭПКонтактногоЛица");
	ПоказателиДеятельности = ПоказателиДеятельности(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата);
	ДанныеЗаявки.Вставить("ДатаФактическогоНачалаВеденияБизнеса", ПоказателиДеятельности.ДатаФактическогоНачалаВеденияБизнеса);
	ДанныеЗаявки.Вставить("СреднемесячноеПоступлениеНаСчет",      ПоказателиДеятельности.СреднемесячноеПоступлениеНаСчет);
	ДанныеЗаявки.Вставить("ДатаНачалаУчетаВПрограмме",            ПоказателиДеятельности.ДатаНачалаУчетаВПрограмме);
	Результат.ДанныеЗаявки = ДанныеЗаявки;
	
	ДополнитьПредставленияДанныхКонтактногоЛицаДляВыгрузки(ДанныеЗаявки);
	
	// Заемщик
	Результат.ДанныеЗаемщика = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеЗаявки.Организация);
	ДанныеЗаемщика = Результат.ДанныеЗаемщика;
	
	// Идентификатор заемщика для образования имени файлов.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ИдентификаторЗаемщика = СокрЛП(ДанныеЗаемщика.ИНН);
	Иначе
		ИдентификаторЗаемщика = СокрЛП(ДанныеЗаемщика.ИНН) + СокрЛП(ДанныеЗаемщика.КПП);
	КонецЕсли;
	ДанныеЗаемщика.Вставить("ИдентификаторЗаемщика", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИдентификаторЗаемщика));
	
	// Дополнительные реквизиты заемщика, которые используются для заявки.
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаявки.Организация, 
		"КодОКВЭД2, КодОКОПФ, ИностраннаяОрганизация");
	ДанныеЗаемщика.Вставить("КодОКВЭД2",  РеквизитыОрганизации.КодОКВЭД2);
	ДанныеЗаемщика.Вставить("КодОКОПФ",   РеквизитыОрганизации.КодОКОПФ);
	ДанныеЗаемщика.Вставить("Нерезидент", РеквизитыОрганизации.ИностраннаяОрганизация);
	
	// Город (населенный пункт) из адреса организации.
	ДанныеЗаемщика.Вставить("Город",
		УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес));

	// Полное наименование организации до реорганизации - только для юр.лица.
	ДанныеЗаемщика.Вставить("ПолноеНаименованиеДоРеорганизации",      "");
	ДанныеЗаемщика.Вставить("СокращенноеНаименованиеДоРеорганизации", "");
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ДанныеЗаявки.Организация);
		Запрос.УстановитьПараметр("Дата",        ДанныеЗаявки.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ОрганизацииИсторияНаименований.Период КАК Период,
		|	ОрганизацииИсторияНаименований.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ОрганизацииИсторияНаименований.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Организации.ИсторияНаименований КАК ОрганизацииИсторияНаименований
		|ГДЕ
		|	ОрганизацииИсторияНаименований.Ссылка = &Организация
		|	И ОрганизацииИсторияНаименований.Период <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";

		ИсторияНаименований = Запрос.Выполнить().Выгрузить();
		Если ИсторияНаименований.Количество() = 2 Тогда
			ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации      = ИсторияНаименований[1].НаименованиеПолное;
			ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации = ИсторияНаименований[1].НаименованиеСокращенное;
		КонецЕсли;
		
	КонецЕсли;


	// Дополнительные сведения об индивидуальном предпринимателе.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ЗначениеЗаполнено(ДанныеЗаемщика.ИндивидуальныйПредприниматель) Тогда
		
		ДанныеФизЛица = ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ДанныеЗаемщика.ИндивидуальныйПредприниматель);
		Результат.ДанныеИП = ДанныеФизЛица;
				
		// Семейное положение предпринимателя.
		ДанныеФизЛица.Вставить("СостояниеВБракеПредставление", "");
		ДанныеФизЛица.Вставить("СостояниеВБракеКод",           "");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ДанныеЗаемщика.ИндивидуальныйПредприниматель);
		Запрос.УстановитьПараметр("Дата",    ДанныеЗаявки.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияВБракеФизическихЛиц.СостояниеВБраке.Наименование КАК Наименование,
		|	СостоянияВБракеФизическихЛиц.СостояниеВБраке.Код КАК Код
		|ИЗ
		|	РегистрСведений.СостоянияВБракеФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК СостоянияВБракеФизическихЛиц";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФизЛица.СостояниеВБракеПредставление = Выборка.Наименование;
			ДанныеФизЛица.СостояниеВБракеКод           = Выборка.Код;
		КонецЕсли;
	КонецЕсли;

	// Дополнительные сведения о руководителе.
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И ЗначениеЗаполнено(ДанныеЗаемщика.Руководитель) Тогда

		ДанныеФизЛица = ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ДанныеЗаемщика.Руководитель);
		Результат.ДанныеРуководителя = ДанныеФизЛица;
		
		// Контактная информация руководителя - добавляем ключи в данные руководителя всегда, даже если сами значения пустые.
		ВидыКонтактнойИнформации = Новый Соответствие;
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "АдресПоПропискеФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,           "EMailФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,  "ТелефонРабочийФизическиеЛица");
		ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашнийФизическиеЛица");
			
		ВидыКИ = Новый Массив;
		Для Каждого КлючИЗначение Из ВидыКонтактнойИнформации Цикл
			ВидыКИ.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаемщика.Руководитель),
			,
			ВидыКИ,
			ДанныеЗаявки.Дата);

		Для Каждого КлючИЗначение Из ВидыКонтактнойИнформации Цикл
			
			ВидКонтактнойИнформации     = КлючИЗначение.Ключ;
			ИмяВидаКонтактнойИнформации = КлючИЗначение.Значение;
		
			Представление = "";
			ЗначениеJSON  = "";
			
			СтрокаКонтактнойИнформации = КонтактнаяИнформация.Найти(ВидКонтактнойИнформации, "Вид");
			Если СтрокаКонтактнойИнформации <> Неопределено Тогда
				Представление = СтрокаКонтактнойИнформации.Представление;
				ЗначениеJSON  = СтрокаКонтактнойИнформации.Значение;
			КонецЕсли;
			ДанныеФизЛица.Вставить(ИмяВидаКонтактнойИнформации,                  Представление);
			ДанныеФизЛица.Вставить("ЗначениеJSON" + ИмяВидаКонтактнойИнформации, ЗначениеJSON);
		
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает структуру с заполненными полями для формирования текста согласия.
//
// Параметры:
//	СведенияОЗаявке - Структура - Результат функции СведенияОЗаявке().
//
// Возвращаемое значение:
//	Структура - см. ЗаявкиНаКредит.ПараметрыСогласия().
// 
Функция ПараметрыСогласия(СведенияОЗаявке) Экспорт

	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	ДанныеРуководителя = СведенияОЗаявке.ДанныеРуководителя;
	ДанныеИП           = СведенияОЗаявке.ДанныеИП;
	ЭтоЮрЛицо          = ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;

	Результат = ЗаявкиНаКредит.ПараметрыСогласия(ЭтоЮрЛицо);
	
	// Заполняем поля
	Результат.Организация  = ДанныеЗаявки.Организация;
	Результат.ДатаСогласия = ДанныеЗаявки.Дата;
	Результат.ЭтоЮридическоеЛицо = ЭтоЮрЛицо;
	
	// Общие поля согласия.
	Результат.ИНН              = ДанныеЗаемщика.ИНН;
	Результат.ЮридическийАдрес = ДанныеЗаемщика.ЮридическийАдрес;
	Результат.Город            = ДанныеЗаемщика.Город;
	
	Если ЭтоЮрЛицо Тогда
		// Заемщик - юр.лицо.
		Результат.ПолноеНаименование      = ДанныеЗаемщика.ПолноеНаименование;
		Результат.СокращенноеНаименование = ДанныеЗаемщика.СокращенноеНаименование;
		Результат.ПолноеНаименованиеДоРеорганизации      = ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации;
		Результат.СокращенноеНаименованиеДоРеорганизации = ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации;
		Результат.ОГРН                                   = ДанныеЗаемщика.ОГРН;
		
		// Данные руководителя.
		Результат.ПредставлениеФЛ                 = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеРуководителя.Фамилия, ДанныеРуководителя.Имя, ДанныеРуководителя.Отчество, Ложь);
		Результат.ПредставлениеФЛРодительныйПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(
			Результат.ПредставлениеФЛ,
			2, // Родительный падеж
			ДанныеЗаемщика.Руководитель,
			?(ДанныеРуководителя.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
		Результат.ДолжностьРуководителяПредставление = ДанныеЗаемщика.ДолжностьРуководителяПредставление;
		
		Результат.ПолФЛ                    = ДанныеРуководителя.Пол;
		Результат.МестоРожденияФЛ          = ДанныеРуководителя.МестоРождения;
		Результат.ДатаРожденияФЛ           = ДанныеРуководителя.ДатаРождения;
		Результат.СтраховойНомерПФРФЛ      = ДанныеРуководителя.СтраховойНомерПФР;
		Результат.ПредставлениеДокументаФЛ = ДанныеРуководителя.ПредставлениеДокумента;
		Результат.ИННФЛ                    = ДанныеРуководителя.ИНН;
		
			
		// Адреса руководителя как физического лица.
		Результат.АдресПоПропискеФизическиеЛицаФЛ = ДанныеРуководителя.АдресПоПропискеФизическиеЛица;
		Результат.EMailФизическиеЛицаФЛ           = ДанныеРуководителя.EMailФизическиеЛица;
		Результат.ТелефонРабочийФизическиеЛицаФЛ  = ДанныеРуководителя.ТелефонРабочийФизическиеЛица;
		Результат.ТелефонДомашнийФизическиеЛицаФЛ = ДанныеРуководителя.ТелефонДомашнийФизическиеЛица;
		
	Иначе
	
		// Данные индивидуального предпринимателя.
	
		Результат.ПредставлениеФЛ     = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			ДанныеИП.Фамилия, ДанныеИП.Имя, ДанныеИП.Отчество, Ложь);
		Результат.ПолФЛ                    = ДанныеИП.Пол;
		Результат.ДатаРожденияФЛ           = ДанныеИП.ДатаРождения;
		Результат.СтраховойНомерПФРФЛ      = ДанныеИП.СтраховойНомерПФР;
		Результат.ПредставлениеДокументаФЛ = ДанныеИП.ПредставлениеДокумента;
		Результат.МестоРожденияФЛ          = ДанныеИП.МестоРождения;
		Результат.СтранаФЛ                 = ДанныеИП.СтранаПредставление;
		Результат.СемейноеПоложениеФЛ      = ДанныеИП.СостояниеВБракеПредставление;
	
		// Контактная информация заемщика из справочника Организации.
		Результат.Email                     = ДанныеЗаемщика.Email;
		Результат.Телефоны                  = ДанныеЗаемщика.Телефоны;
		Результат.ТелефонЮридическогоАдреса = ДанныеЗаемщика.ТелефонЮридическогоАдреса;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает текст для представления пустого юридического адреса в форме заявки.
// Редактирование самого адреса в форме заявки не поддерживается, его необходимо заполнять
// в форме организации, т.к. при его изменении возможно изменение регистрации в ФНС, ПФР и т.п.
//
Функция ТекстПустогоЮрАдресаВВидеГиперссылки() Экспорт

	Возврат НСтр("ru = 'Заполнить в форме организации'");

КонецФункции

// Возвращает период регистрации по умолчанию - конец прошлого месяца.
//
Функция ПериодРегистрацииПоУмолчанию() Экспорт
	
	Возврат НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1);
	
КонецФункции

#КонецОбласти

#Область ПоказателиДеятельности

// Возвращает структуру с ключевым показателями деятельности заемщика.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой оформляется заявка.
//	Дата - Дата - Дата расчета показателей.
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция ПоказателиДеятельности(Организация, Дата) Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("СреднемесячноеПоступлениеНаСчет",                0);
	Результат.Вставить("ДатаНачалаУчетаВПрограмме",            '0001-01-01');
	Результат.Вставить("ДатаФактическогоНачалаВеденияБизнеса", '0001-01-01');
	
	ДоступныеОрганизации = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		// Нет доступа к организации, нечего возвращать.
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСреднемесячногоПоступленияНаСчет = СреднемесячноеПоступлениеНаСчет(Дата, , Организация);
	Результат.СреднемесячноеПоступлениеНаСчет = ТаблицаСреднемесячногоПоступленияНаСчет.Итог("Сумма");
	Результат.ДатаНачалаУчетаВПрограмме = ДатаНачалаУчетаВПрограмме(Организация);
	Результат.ДатаФактическогоНачалаВеденияБизнеса = ДатаФактическогоНачалаВеденияБизнеса(Организация, Дата);
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу значений со среднемесячным поступлением на расчетные счета по организациям информационной базы.
// Допускается установка отбора по одной организации или массиву организаций.
// В этом случае в таблице будут выведены строки только по указанным организациям.
//
// Параметры:
//	Дата - Дата - Дата расчета.
//	Количество - Число - Количество месяцев, за которые выполняется расчет.
//	Организация - СправочникСсылка.Организации - Организация, для которой выполняется расчет.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* Организация - СправочникСсылка.Организации - Организация
//		* Сумма - Число - Сумма среднемесячной выручки
//
Функция СреднемесячноеПоступлениеНаСчет(Дата, Знач КоличествоМесяцев = 0, Организация = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КоличествоМесяцев) Тогда
		КоличествоМесяцев = МесяцевРасчетаСреднемесячногоПоступленияНаСчет();
	КонецЕсли;
	
	КонецПериода = КонецМесяца(Дата);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , &ОтборПоОрганизации, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "Организация В (&Организация)");
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоМесяца(КонецПериода), -КоличествоМесяцев));
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСреднемесячногоПоступленияНаСчет = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСреднемесячногоПоступленияНаСчет Цикл

		СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.Сумма / КоличествоМесяцев, 0);  // в руб.

	КонецЦикла;
	
	Возврат ТаблицаСреднемесячногоПоступленияНаСчет;
	
КонецФункции

#КонецОбласти

#Область ОбращениеКСервису

// Выполняет обновление закэшированных данных о банках и их кредитных предложениях из веб-сервиса.
// Предназначена для вызова в качестве метода фонового задания.
//
Процедура ОбновитьДанныеСервиса(Параметры, АдресХранилища) Экспорт

	Попытка
		УниверсальныйОбменСБанками.АктуализироватьДанныеСервиса(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации("ЗаявкаНаКредит.ОбновитьДанныеСервиса",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
	КонецПопытки;

КонецПроцедуры

// Выполняет подписание и отправку пакета заявок в несколько банков на сервере.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит .
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - сертификат, используемый для подписания файлов.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//		* ДокументооборотыПолучателей - Соответстввие - Ключ - ссылка на банк получатель, Значение - ссылка на документооборот.
//				Если для получателя нет соответствия, то будет создан новый документооборот.
//		* ПараметрыОтбораСертификата - Структура - см. ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата()
//
Процедура ПодписатьИОтправитьЭлектроннаяПодписьВМоделиСервиса(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаСообщений");
	Результат.Вставить("Транзакции");

	Если Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда

		РезультатОперации = ПодготовитьФайлыДляОтправки_ЗаявкаНаКредит(Параметры.ПредметОбмена, Параметры.Банки, Истина);
		Результат.ТаблицаСообщений = РезультатОперации.ТаблицаСообщений;

	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		
		РезультатОперации = РегистрыСведений.СостояниеЗаявокНаКредит.ПодготовитьАкцептДляОтправки(Параметры.ПредметОбмена, Параметры.Банки[0], Истина);
		
	КонецЕсли;
	ИдентификаторВременногоХранилищаТранзакций = РезультатОперации.ИдентификаторВременногоХранилищаТранзакций;
	Если Не РезультатОперации.Выполнено Тогда
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
		СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
		СостояниеПрогресса.КоличествоДействий = 2 + Параметры.Банки.Количество(); // заявка + банки
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.КоличествоДействий;
		ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			НСтр("ru = 'Подготовлены файлы'"),
			СостояниеПрогресса.ДополнительныеПараметры);

		// Подписание и шифрование файлов на сервере.
		СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подписание";
		РезультатОперации = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
			ИдентификаторВременногоХранилищаТранзакций,
			Параметры.ОтпечатокСертификата,
			СостояниеПрогресса.ДополнительныеПараметры,
			Параметры.ПараметрыОтбораСертификата);
			
		Если Не РезультатОперации.Выполнено Тогда
				
			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Результат.Выполнено Тогда
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ИдентификаторВременногоХранилищаТранзакций", ИдентификаторВременногоХранилищаТранзакций);
		ПараметрыПроцедуры.Вставить("ПредметОбмена",        Параметры.ПредметОбмена);
		ПараметрыПроцедуры.Вставить("ТипТранзакции",        Параметры.ТипТранзакции);
		ПараметрыПроцедуры.Вставить("ОтпечатокСертификата", Параметры.ОтпечатокСертификата);
		ПараметрыПроцедуры.Вставить("Банки",                Параметры.Банки);
		ПараметрыПроцедуры.Вставить("ДокументооборотыПолучателей", Параметры.ДокументооборотыПолучателей);
		
		РезультатОперации = ОтправитьФайлы(ПараметрыПроцедуры);
		Результат.Транзакции = РезультатОперации.Транзакции;
		Если Не РезультатОперации.Выполнено Тогда

			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет формирование пакета заявок в несколько банков на сервере для дальнейшего подписания на клиенте.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит .
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - (не используется) сертификат, используемый для подписания.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//
Процедура ПодготовитьФайлыДляОтправки(Параметры, АдресХранилища) Экспорт

	Если Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда

		Результат = ПодготовитьФайлыДляОтправки_ЗаявкаНаКредит(Параметры.ПредметОбмена, Параметры.Банки, Ложь);

	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		
		Результат = РегистрыСведений.СостояниеЗаявокНаКредит.ПодготовитьАкцептДляОтправки(Параметры.ПредметОбмена, Параметры.Банки[0], Ложь);
		
	Иначе
		
		Результат = Новый Структура("Выполнено, ОписаниеОшибки, ТаблицаСообщений", Ложь, "");
		
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет формирование архива с файлами заявки на кредит на сервере для дальнейшего сохранения на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//
Процедура ПодготовитьФайлыДляСохранения(Параметры, АдресХранилища, АдресАрхива) Экспорт

	Банки = ВыбранныеБанки(Параметры.ПредметОбмена);

	УстановитьПривилегированныйРежим(Истина);
	Результат = ПодготовитьФайлыДляОтправки_ЗаявкаНаКредит(Параметры.ПредметОбмена, Банки, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	Если Не Результат.Выполнено Тогда
		
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	ПутьКВременномуКаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(ПутьКВременномуКаталогу);
	
	Выборка = УниверсальныйОбменСБанками.ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(
				Результат.ИдентификаторВременногоХранилищаТранзакций, Истина);
	Пока Выборка.Следующий() Цикл

		ДанныеДляЗаписи = Выборка.ИсходныеДанные.Получить();
		Если ДанныеДляЗаписи <> Неопределено Тогда
			ДанныеДляЗаписи.Записать(ПутьКВременномуКаталогу + Выборка.ИсходноеИмяФайла);
		КонецЕсли;

	КонецЦикла;

	СоздаваемыйАрхив = Новый ЗаписьZipФайла;
	СоздаваемыйАрхив.Добавить(ПутьКВременномуКаталогу + "*");
	ПоместитьВоВременноеХранилище(СоздаваемыйАрхив.ПолучитьДвоичныеДанные( , Строка(Параметры.ПредметОбмена)), АдресАрхива);
	
	Попытка
		УдалитьФайлы(ПутьКВременномуКаталогу);
	Исключение
		// Запишем в журнал регистрации, но не будет прерывать выполнение.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении временного каталога %1: %2'"),
			ПутьКВременномуКаталогу, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкаНаКредит.ПодготовитьФайлыДляСохранения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЗаявкаНаКредит,
			Параметры.ПредметОбмена,
			ТекстСообщения);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(
				Результат.ИдентификаторВременногоХранилищаТранзакций);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет отправку в несколько банков пакета заявок, ранее подписанных на клиенте.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит .
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - например, заявка на кредит.
//      * ОтпечатокСертификата - Строка - сертификат, используемый для подписания файлов.
//		* Банки - Массив - Массив элементов справочника БанкиУниверсальногоОбмена, в которые нужно отправить заявку.
//				Необязательный: если нужно отправить во все банки из заявки, то Неопределено.
//		* ИдентификаторВременногоХранилищаТранзакций - Строка - местонахождение подписанных файлов.
//
Процедура ОтправитьПодписанныеФайлы(Параметры, АдресХранилища) Экспорт
	
	Результат = ОтправитьФайлы(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета формировать табличный документ.

	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ПодборБанков

// Возвращает структуру для параметра СведенияОЗаемщике функции СведенияОБанках().
//
Функция НовыеСведенияОЗаемщике() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Результат.Вставить("Нерезидент",                Ложь);
	Результат.Вставить("ДатаРождения",              '0001-01-01');
	Результат.Вставить("ДатаРегистрации",           '0001-01-01');
	Результат.Вставить("КодОКВЭД2",                 "");
	Результат.Вставить("КодОКОПФ",                  "");
	Результат.Вставить("ЮрАдресОрганизации",        ""); //  Значения полей в формате XML/JSON подсистемы КонтактнаяИнформация БСП.
	Результат.Вставить("ДатаФактическогоНачалаВеденияБизнеса", '0001-01-01');
	Результат.Вставить("СреднемесячноеПоступлениеНаСчет", 0);  // в рублях
	Результат.Вставить("ДатаНачалаУчетаВПрограмме", '0001-01-01');
	Результат.Вставить("ПодключенДокументооборотСКонтролирующимОрганом", Ложь); // Заполняется только если требуется не фактически отправленные отчеты, а обобщенное их описание.
	
	// Параметры, которые не требуется заполнять, они будут рассчитаны автоматически.
	Результат.Вставить("ВозрастИП",                      0); // полных лет
	Результат.Вставить("СрокОтДатыРегистрации",          0); // в месяцах
	Результат.Вставить("СрокФактическогоВеденияБизнеса", 0); // в месяцах
	Результат.Вставить("СрокВеденияУчетаВПрограмме",     0); // в месяцах
	Результат.Вставить("КодРегиона",                     "");
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу с данными о банках, которые требуются для подбора подходящих кредитных предложений.
//
// Параметры:
//	СведенияОЗаемщике - Структура - см. НовыеСведенияОЗаемщике(), структура модифицируется в процессе работы процедуры.
//	ДатаЗаявки - Дата - Дата, по состоянию на которую возвращаются данные.
//  ВозвращатьНеактивные - Булево - Если Истина, то возвращаются все банки, которые когда-либо были зарегистрированы в сервисе,
//									вне зависимости от текущей активности.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. переменную Результат.
//
Функция СведенияОБанках(СведенияОЗаемщике, ДатаЗаявки, ВозвращатьНеактивные) Экспорт

	МетаданныеЗаявки = Метаданные.Документы.ЗаявкаНаКредит;

	ТипЦелое     = ОбщегоНазначения.ОписаниеТипаЧисло(4);
	ТипСумма     = МетаданныеЗаявки.Реквизиты.СуммаДокумента.Тип;
	ТипПроцент   = Метаданные.РегистрыСведений.СостояниеЗаявокНаКредит.Ресурсы.Ставка.Тип;
	ТипСтрока    = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево    = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Банк",         МетаданныеЗаявки.ТабличныеЧасти.Банки.Реквизиты.Банк.Тип);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	Результат.Колонки.Добавить("АдресЛоготипа",ТипСтрока); // Адрес хранилища с картинкой, загружаем ее не сразу, а по требованию, чтобы не занимать лишнюю память.
	Результат.Колонки.Добавить("СтопФакторыПройдены", Новый ОписаниеТипов("Булево")); // Истина, если заемщик удовлетворяет первичным стоп-факторам банка.
	Результат.Колонки.Добавить("ПорядокСортировки",   ТипЦелое); // Порядок сортировки банка в общем списке.
	
	// Срок кредита в месяцах.
	Результат.Колонки.Добавить("МинСрокКредита",  ТипЦелое);
	Результат.Колонки.Добавить("МаксСрокКредита", ТипЦелое);

	// Сумма кредита в рублях.
	Результат.Колонки.Добавить("МинСуммаКредита",  ТипСумма);
	Результат.Колонки.Добавить("МаксСуммаКредита", ТипСумма);

	// Ставки (% годовых).
	Результат.Колонки.Добавить("МинСтавка",  ТипПроцент);
	Результат.Колонки.Добавить("МаксСтавка", ТипПроцент);

	// Отчетность заемщика.
	Результат.Колонки.Добавить("ОтчетностьЗаемщика", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаемщике, ДатаЗаявки);
	
	// Получим условия банков-партнеров сервиса.
	УсловияКредитования = УниверсальныйОбменСБанками.ХарактеристикиСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.УсловияКредитования,
		,
		ВозвращатьНеактивные);
	
	Для Каждого СтрокаТаблицы Из УсловияКредитования Цикл
	    ПрочитатьУсловияКредитованияБанка(
	    	СведенияОЗаемщике,
	    	НачалоДня(ДатаЗаявки),
	    	СтрокаТаблицы.Банк,
	    	СтрокаТаблицы.Значение,
	    	Результат);
	КонецЦикла;
	
	// Индексируем таблицу после заполнения для быстрого поиска банков.
	Результат.Индексы.Добавить("Банк");
	
	// Получим список отчетности заемщика для банков-партнеров сервиса
	ОтчетностьЗаемщика = УниверсальныйОбменСБанками.ХарактеристикиСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ОтчетностьЗаемщика,
		,
		ВозвращатьНеактивные);
	
	Для Каждого СтрокаТаблицы Из ОтчетностьЗаемщика Цикл
		ПрочитатьОтчетностьЗаемщика(
			СведенияОЗаемщике,
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			СтрокаТаблицы.Значение,
			Результат);
	КонецЦикла;
	
	ЗаполнитьНаименованияБанков(Результат);
	
	Возврат Результат;

КонецФункции

// Возвращает массив банков, в которые необходимо отправить заявку.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//
// Возвращаемое значение:
//	Массив - Содержит ссылки на справочник БанкиУниверсальногоОбмена.
//
Функция ВыбранныеБанки(ЗаявкаНаКредит) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаКредитБанки.Банк
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Банки КАК ЗаявкаНаКредитБанки
	|ГДЕ
	|	ЗаявкаНаКредитБанки.Ссылка = &ЗаявкаНаКредит";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Банк");

КонецФункции

// Заполняем наименование банков в переданной таблице сведений о банках.
//
// Параметры:
//	СведенияОБанках - ТаблицаЗначений - см. СведенияОБанках().
//
Процедура ЗаполнитьНаименованияБанков(СведенияОБанках) Экспорт

	// Получим названия банков.
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		СведенияОБанках.ВыгрузитьКолонку("Банк"),
		"Наименование");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанка = СведенияОБанках.Найти(СтрокаТаблицы.Банк, "Банк");
		Если ДанныеБанка <> Неопределено Тогда
			ДанныеБанка.Наименование = СтрокаТаблицы.Наименование;
		КонецЕсли;
	КонецЦикла;

	// Упорядочиваем согласно порядку сортировки.
	СведенияОБанках.Сортировать("ПорядокСортировки");

КонецПроцедуры

// Загружает двоичные данные логотипов банков из базы и заполняет их адреса временных хранилищ.
//
// Параметры:
//	Банки - Массив - Массив ссылок банков, для которых загрузить логотипы.
//	СведенияОБанках - ТаблицаЗначений - см. результат функции СведенияОБанках().
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, во временное хранилище которой будет помещены данные логотипа.
//
Процедура ЗагрузитьЛоготипыБанков(Банки, СведенияОБанках, ИдентификаторФормы) Экспорт

	Если Банки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		Банки, "Логотип");
		
	Для Каждого СтрокаТаблицы Из РеквизитыБанков Цикл
		ДанныеБанка = СведенияОБанках.Найти(СтрокаТаблицы.Банк, "Банк");
		Если ДанныеБанка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеБанка.АдресЛоготипа = ПоместитьВоВременноеХранилище(СтрокаТаблицы.Логотип, ИдентификаторФормы);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтчетностьЗаемщика

// Возвращает пустую структуру с ключами, которая передается в качестве параметра в функцию ТребуемаяОтчетностьЗаемщика().
//
// Возвращаемое значение:
//	Структура
//
Функция НовыеСведенияОЗаемщикеДляОтчетности() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Результат.Вставить("ДатаРегистрации",           '0001-01-01');
	Результат.Вставить("ПериодРегистрации",         '0001-01-01');
	Результат.Вставить("ДатаНачалаУчетаВПрограмме", '0001-01-01');
	
	Возврат Результат;

КонецФункции

// Возвращает пустую структуру с ключами, которая передается в качестве параметра в функцию ТребуемаяОтчетностьЗаемщика().
//
// Возвращаемое значение:
//	Структура
//
Функция ПодготовитьСведенияОЗаемщикеДляОтчетности(Организация, ПериодРегистрации) Экспорт
	
	Результат = НовыеСведенияОЗаемщикеДляОтчетности();
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ДатаРегистрации");

	Результат.Организация               = Организация;
	Результат.ЮридическоеФизическоеЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо;
	Результат.ДатаРегистрации           = РеквизитыОрганизации.ДатаРегистрации;
	Результат.ПериодРегистрации         = ПериодРегистрации;
	Результат.ДатаНачалаУчетаВПрограмме = ДатаНачалаУчетаВПрограмме(Организация);

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений с описанием отчетности заемщика, которую требуются подготовить для указанных банков.
//
// Параметры:
//	СведенияОЗаемщике - Структура - см. НовыеСведенияОЗаемщикеДляОтчетности().
//	ДатаЗаявки - Дата - Дата подачи заявки.
//	Банки - Массив - Содержит элементы справочника БанкиУниверсальногоОбмена.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Содержит колонки:
//		* ВидОтчета - Строка - Имя отчета, как оно определено в пакете XDTO ЗаявкиНаКредит.
//		* ИсточникОтчета - Строка - Имя регламентированного отчета БРО (вида "РегламентированныйОтчетБухОтчетность")
//		* НаименованиеОтчета - Строка - Пользовательское представление отчета, включает название и период.
//		* НомерГруппыОтчета - Число - Номер группы отчета для сортировки в зависимости от вида отчета.
//		* ПорядокСортировкиПоМесяцам - Число - Порядок отчета в списке в зависимости от количества месяцев в периоде.
//		* ДатаНачала - Дата - Дата начала периода, за который требуется отчет.
//		* ДатаОкончания - Дата - Дата начала периода, за который требуется отчет.
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет, по которому строится отчет (для карточки и анализа счетов).
//		* Банки - Массив - Содержит ссылки на справочник БанкиУниверсальногоОбмена, для которых требуется отчет.
//
//	Один и тот же вид отчет (по одному и тому же счету) может встречаться в таблице несколько раз за разные периоды.
//
Функция ТребуемаяОтчетностьЗаемщика(СведенияОЗаемщике, ДатаЗаявки, Банки) Экспорт

	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата); // В документе РегламентированныйОтчет даты без времени.

	СоставОтчетности = Новый ТаблицаЗначений;
	СоставОтчетности.Колонки.Добавить("ВидОтчета",           ТипСтрока);
	СоставОтчетности.Колонки.Добавить("ДатаНачала",          ТипДата);
	СоставОтчетности.Колонки.Добавить("ДатаОкончания",       ТипДата);
	СоставОтчетности.Колонки.Добавить("КодСчета",            ТипСтрока);
	СоставОтчетности.Колонки.Добавить("Банк",                Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));

	ХарактеристикиСервиса = УниверсальныйОбменСБанками.ХарактеристикиСервиса(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		Перечисления.ХарактеристикиСервисаЗаявкиНаКредит.ОтчетностьЗаемщика,
		Банки,
		Истина); // При открытии ранее отправленной заявки необходимо отображать сведения об отчетности для банка как они были на момент сохранения.
		
	Для Каждого СтрокаТаблицы Из ХарактеристикиСервиса Цикл
	
		ПрочитатьТребованияБанкаКОтчетностиЗаемщика(
			СведенияОЗаемщике,
			НачалоДня(ДатаЗаявки),
			СтрокаТаблицы.Банк,
			СтрокаТаблицы.Значение,
			СоставОтчетности);
	
	КонецЦикла;

	// Оставим уникальные комбинации настроек отчетов.
	ИменаКлючевыхКолонок = "ВидОтчета, КодСчета, ДатаНачала, ДатаОкончания";
	СоставОтчетности.Индексы.Добавить(ИменаКлючевыхКолонок);
	Отбор = Новый Структура(ИменаКлючевыхКолонок);
	
	УникальныеОтчеты = СоставОтчетности.Скопировать(, ИменаКлючевыхКолонок);
	УникальныеОтчеты.Свернуть(ИменаКлючевыхКолонок);
	
	// Укажем для каждого отчета список банков, которым требуется такой отчет.
	УникальныеОтчеты.Колонки.Добавить("НаименованиеОтчета",         ТипСтрока);
	УникальныеОтчеты.Колонки.Добавить("ИсточникОтчета",             ТипСтрока);
	УникальныеОтчеты.Колонки.Добавить("НомерГруппыОтчета",          ОбщегоНазначения.ОписаниеТипаЧисло(3));
	УникальныеОтчеты.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	УникальныеОтчеты.Колонки.Добавить("Банки",                      Новый ОписаниеТипов("Массив"));
	УникальныеОтчеты.Колонки.Добавить("Счет",                       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	КэшСчетов = Новый Соответствие;
	
	Для Каждого СтрокаОтчета Из УникальныеОтчеты Цикл

		СтрокаОтчета.НаименованиеОтчета = ПредставлениеОтчета(
			СтрокаОтчета.ВидОтчета, СтрокаОтчета.КодСчета, СтрокаОтчета.ДатаНачала, СтрокаОтчета.ДатаОкончания);
	
		СтрокаОтчета.ИсточникОтчета = ИсточникОтчета(СтрокаОтчета.ВидОтчета);
			
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаОтчета);
		НайденныеСтроки = СоставОтчетности.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			// Включаем банк в список, если его еще нет.
			Если СтрокаОтчета.Банки.Найти(НайденнаяСтрока.Банк) = Неопределено Тогда
				СтрокаОтчета.Банки.Добавить(НайденнаяСтрока.Банк);
			КонецЕсли;
		КонецЦикла;
		
		// Сортируем таким образом, чтобы сначала была бух.отчетность,
		// далее все налоговые декларации, и только в самом конце - дополнительные отчеты.
		Если СтрокаОтчета.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
			СтрокаОтчета.НомерГруппыОтчета = 1;
		ИначеЕсли СтрокаОтчета.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			СтрокаОтчета.НомерГруппыОтчета = 100;
		Иначе
			СтрокаОтчета.НомерГруппыОтчета = 2;
		КонецЕсли;
		
		// Вычислим количество месяцев в периоде отчета,
		// чтобы при сортировке показывать сначала отчеты с меньшим периодом, потом - с большим.
		КоличествоМесяцев  = КоличествоМесяцев(
			СтрокаОтчета.ДатаНачала, КонецДня(СтрокаОтчета.ДатаОкончания) + 1); // Увеличиваем на 1 секунду, чтобы месяц считался закончившимся.
			
		Если КоличествоМесяцев > 1 И СтрокаОтчета.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Если период составляет более 1 месяца, то определяем порядок сортировки строки таким образом, 
			// чтобы сначала шли периоды с датами, не кратными кварталу, полугодию, году, а потом уже кратные.
			Если СтрокаОтчета.ДатаНачала = НачалоКвартала(СтрокаОтчета.ДатаОкончания) Тогда
				// Квартал
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 3;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 6 Тогда
				// Полугодие
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 6;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 9 Тогда
				// 9 месяцев
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 9;
			ИначеЕсли НачалоМесяца(СтрокаОтчета.ДатаНачала) = НачалоГода(СтрокаОтчета.ДатаНачала)
				И Месяц(СтрокаОтчета.ДатаОкончания) = 12 Тогда
				// Год
				СтрокаОтчета.ПорядокСортировкиПоМесяцам = 12;
			КонецЕсли;
		КонецЕсли;

		// Определим по строковому коду счета ссылку из плана счетов.
		Если ЗначениеЗаполнено(СтрокаОтчета.КодСчета) Тогда
			// Сначала ищем в кэше, если там еще нет, то ищем в плане счетов.
			Счет = КэшСчетов[СтрокаОтчета.КодСчета];
			Если Счет = Неопределено Тогда
				Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаОтчета.КодСчета);
				КэшСчетов.Вставить(СтрокаОтчета.КодСчета, Счет);
			КонецЕсли;
			
			СтрокаОтчета.Счет = Счет;
		КонецЕсли;
		
	КонецЦикла;
	
	УникальныеОтчеты.Сортировать("НомерГруппыОтчета, ВидОтчета, КодСчета, ПорядокСортировкиПоМесяцам, ДатаНачала, ДатаОкончания");
	
	Возврат УникальныеОтчеты;

КонецФункции

// Обновляет состав строк в табличной части Отчетность по новым данным заявки на кредит.
// При этом сохраняются данные в тех строках отчетов, которые были включены в табличную часть ранее,
// если они по-прежнему актуальны.
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаКредит, ДанныеФормыКоллекция - Заявка, состав отчетности в которой требуется обновить.
//
Процедура ОбновитьОтчетность(Объект) Экспорт

	Банки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Банки Цикл
		Банки.Добавить(СтрокаТаблицы.Банк);
	КонецЦикла;

	СведенияОЗаемщике = ПодготовитьСведенияОЗаемщикеДляОтчетности(Объект.Организация, Объект.ПериодРегистрации);

	ТребуемаяОтчетностьЗаемщика = ТребуемаяОтчетностьЗаемщика(СведенияОЗаемщике, Объект.Дата, Банки);
	
	// Сохраняем уже имеющиеся отчеты.
	ПодготовленнаяОтчетность = Объект.Отчетность.Выгрузить();
	// Добавим признак того, что отчет был включен ранее.
	// Если он не потребуется снова, то удалим его в конце процедуры.
	ПодготовленнаяОтчетность.Колонки.Добавить("ОтчетТребуется",             Новый ОписаниеТипов("Булево"));
	ПодготовленнаяОтчетность.Колонки.Добавить("НомерГруппыОтчета",          ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ПодготовленнаяОтчетность.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ПодготовленнаяОтчетность.Индексы.Добавить("ИсточникОтчета, ДатаНачала, ДатаОкончания");

	// Определяем очередной ключ строки для новых отчетов.
	ТекущийКлючСтроки = 0;
	Для Каждого ПодготовленныйОтчет Из ПодготовленнаяОтчетность Цикл
		ТекущийКлючСтроки = Макс(ТекущийКлючСтроки, ПодготовленныйОтчет.КлючСтроки);
	КонецЦикла;

	// Налоговые декларации необходимо предоставлять в отметкой ФНС,
	// поэтому для них требуется подобрать сданные отчеты по данным базы.
	// Для этого накапливаем их в отдельной таблице.
	НовыеОтчеты = ПодготовленнаяОтчетность.СкопироватьКолонки();
	НовыеОтчеты.Колонки.Добавить("Банки", Новый ОписаниеТипов("Массив")); // Банки получатели отчета.

	ОтборИсточникПериод = Новый Структура("ИсточникОтчета, ДатаНачала, ДатаОкончания");
	ОтборИсточник = Новый Структура("ИсточникОтчета");
	ОтборКлючБанк = Новый Структура("КлючСтроки, Банк");
	
	Для Каждого ТребуемыйОтчет Из ТребуемаяОтчетностьЗаемщика Цикл
	
		Если ТребуемыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Расшифровка бух.отчетности всегда в единственном экземляре,
			// разные периоды отчетов она самостоятельно учитывает внутри себя.
			ПараметрыОтбора = ОтборИсточник;
		Иначе
			// Все остальные отчеты ищем с учетом периода.
			ПараметрыОтбора = ОтборИсточникПериод;
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТребуемыйОтчет);
		НайденныеСтрокиОтчетности = ПодготовленнаяОтчетность.НайтиСтроки(ПараметрыОтбора);

		Если НайденныеСтрокиОтчетности.Количество() > 0 Тогда
			// Отметим для всех найденных отчетов, что они являются востребованными
			// и добавим в список получателей отчета новые банки.
			Для Каждого НайденнаяСтрокаОтчетности Из НайденныеСтрокиОтчетности Цикл
				НайденнаяСтрокаОтчетности.ОтчетТребуется             = Истина;
				НайденнаяСтрокаОтчетности.НомерГруппыОтчета          = ТребуемыйОтчет.НомерГруппыОтчета;
				НайденнаяСтрокаОтчетности.ПорядокСортировкиПоМесяцам = ТребуемыйОтчет.ПорядокСортировкиПоМесяцам;
				
				Для Каждого Банк Из ТребуемыйОтчет.Банки Цикл
					ОтборКлючБанк.КлючСтроки = НайденнаяСтрокаОтчетности.КлючСтроки;
					ОтборКлючБанк.Банк       = Банк;
					
					НайденныеПолучателиОтчета = Объект.ПолучателиОтчетности.НайтиСтроки(ОтборКлючБанк);
					Если НайденныеПолучателиОтчета.Количество() = 0 Тогда
						// Добавляем банк в список получателей.
						ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
						ПолучательОтчета.Банк       = Банк;
						ПолучательОтчета.КлючСтроки = НайденнаяСтрокаОтчетности.КлючСтроки;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;

		ИначеЕсли ТребуемыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			// Расшифровку бухотчетности добавляем только один раз.
			ТекущийКлючСтроки = ТекущийКлючСтроки + 1;
			
			НовыйОтчет = ПодготовленнаяОтчетность.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ТребуемыйОтчет);
			НовыйОтчет.НаименованиеОтчета = НСтр("ru = 'Дополнительные отчеты'");
			НовыйОтчет.КлючСтроки         = ТекущийКлючСтроки;
			НовыйОтчет.ОтчетТребуется     = Истина;
			
			// Добавляем получателей отчета.
			Для Каждого Банк Из ТребуемыйОтчет.Банки Цикл
				ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
				ПолучательОтчета.Банк       = Банк;
				ПолучательОтчета.КлючСтроки = ТекущийКлючСтроки;
			КонецЦикла;

		Иначе
			// Все прочие отчеты добавляем в таблицу новых для последующего подбора регламентированных отчетов.
			НовыйОтчет = НовыеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ТребуемыйОтчет);
			
		КонецЕсли;
	
	КонецЦикла;

	// Подберем ссылки на сданные ранее рег.отчеты.
	ПодобратьБухОтчетность(СведенияОЗаемщике, НовыеОтчеты);
	ПодобратьНалоговыеДекларации(СведенияОЗаемщике, НовыеОтчеты);

	// Добавляем новые отчеты в состав отчетности для заявки.
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл

		// Если не нашли в базе отправленные через 1С-Отчетность налоговые декларации, 
		// то не включаем их в состав заявки.
		// Бухгалтерскую отчетность включаем в любом случае.
		// Расшифровка бухгалтерской отчетности для каждой заявки самостоятельная.
		Если ЗначениеЗаполнено(НовыйОтчет.РегламентированныйОтчет)
			ИЛИ НовыйОтчет.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда

			ТекущийКлючСтроки = ТекущийКлючСтроки + 1;

			ПодготовленныйОтчет = ПодготовленнаяОтчетность.Добавить();
			ЗаполнитьЗначенияСвойств(ПодготовленныйОтчет, НовыйОтчет);
			ПодготовленныйОтчет.ОтчетТребуется = Истина;
			ПодготовленныйОтчет.КлючСтроки     = ТекущийКлючСтроки;
		
			// Добавляем получателей нового отчетов.
			Для Каждого Банк Из НовыйОтчет.Банки Цикл
				ПолучательОтчета = Объект.ПолучателиОтчетности.Добавить();
				ПолучательОтчета.КлючСтроки = ТекущийКлючСтроки;
				ПолучательОтчета.Банк       = Банк;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Удалим строки отчетов, которые стали не нужны. Удаляем с конца к началу.
	Индекс = ПодготовленнаяОтчетность.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрокаОтчета = ПодготовленнаяОтчетность[Индекс];
		Если НЕ СтрокаОтчета.ОтчетТребуется Тогда
			ПодготовленнаяОтчетность.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ПодготовленнаяОтчетность.Сортировать("НомерГруппыОтчета, ИсточникОтчета, ПорядокСортировкиПоМесяцам, ДатаНачала, ДатаОкончания");
	
	Объект.Отчетность.Загрузить(ПодготовленнаяОтчетность);

	// Скорректируем таблицу получателей отчетов.
	ОбновитьПолучателейОтчетности(Объект);
	
	УстановитьПризнакПерезаполненияРасшифровкиБухОтчетности(Объект);

КонецПроцедуры

// Обновляет информацию о получателях отчетности по заявке. 
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаКредит, ДанныеФормыКоллекция - Заявка на кредит
//
Процедура ОбновитьПолучателейОтчетности(Объект) Экспорт

	// Удалим получателей отчетности, которых нет среди банков для отправки заявки.
	БанкиПолучателиОтчетности = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ПолучателиОтчетности, "Банк", Истина);
	БанкиПолучателиЗаявки     = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Банки, "Банк", Истина);
	БанкиПолучателиКУдалению  = ОбщегоНазначенияКлиентСервер.РазностьМассивов(БанкиПолучателиОтчетности, БанкиПолучателиЗаявки);
	
	Отбор = Новый Структура("Банк");
	
	Для Каждого БанкКУдалению Из БанкиПолучателиКУдалению Цикл
		Отбор.Банк = БанкКУдалению;
		НайденныеСтроки = Объект.ПолучателиОтчетности.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.ПолучателиОтчетности.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	// Пересчитаем количество банков-получателей отчетов и удалим отчеты, для которых не осталось получателей.
	СводПоПолучателям = Объект.ПолучателиОтчетности.Выгрузить(, "КлючСтроки");
	СводПоПолучателям.Колонки.Добавить("КоличествоБанков", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	СводПоПолучателям.ЗаполнитьЗначения(1, "КоличествоБанков");
	СводПоПолучателям.Свернуть("КлючСтроки", "КоличествоБанков");
	СводПоПолучателям.Индексы.Добавить("КлючСтроки");
	
	Индекс = Объект.Отчетность.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
	    СтрокаОтчета = Объект.Отчетность[Индекс];
	    
	    СтрокаПолучателей = СводПоПолучателям.Найти(СтрокаОтчета.КлючСтроки, "КлючСтроки");
	    Если СтрокаПолучателей <> Неопределено Тогда
	    	СтрокаОтчета.КоличествоБанков = СтрокаПолучателей.КоличествоБанков;
	    Иначе
	    	Объект.Отчетность.Удалить(Индекс);
	    КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// При изменении состав отчетов ранее заполненную расшифровку бух.отчетности, скорее всего, потребуется перезаполнить.
//
Процедура УстановитьПризнакПерезаполненияРасшифровкиБухОтчетности(Объект)

	Отбор = Новый Структура();
	Отбор.Вставить("ИсточникОтчета", "РасшифровкиБухгалтерскойОтчетности");

	НайденныеСтроки = Объект.Отчетность.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Расшифровки бухотчетности не требуются.
		Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Ложь;
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	Если ЗначениеЗаполнено(НайденнаяСтрока.РегламентированныйОтчет) Тогда
		НайденнаяСтрока.СостояниеОтчета = НСтр("ru = 'Требуется перезаполнить'");
	 	Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности = Истина;
	Иначе
		НайденнаяСтрока.СостояниеОтчета = "";
	КонецЕсли;

КонецПроцедуры

// Возвращает строки наименования и состояния отчета в том виде,
// как они записываются в табличную часть Отчетность.
//
// Параметры:
//	СведенияОбОтчете - Структура, СтрокаТаблицыЗначений, ВыборкаИзРезультатаЗапроса - Коллекция, содержащая 
//    следующую информацию об отчете:
//		* ИсточникОтчета - Строка - Имя отчета;
//		* ДатаНачала - Дата - Начало периода отчета;
//		* ДатаОкончания - Дата - Конец периода отчета;
//		* НаименованиеОтчета - Строка - Представление отчета в БРО;
//		* Статус - Строка - Описание статуса отчета;
//		* ВариантОтчета - Строка - Представление варианта отчета;
//		* ФинансовыйПериод - Строка - Представление периода отчета;
//		* ПредставлениеКонтролирующегоОргана - Строка - Наименование органа-получателя отчетности.
//
// Возвращаемое значение:
//	Структура - Содержит ключ:
//		* НаименованиеОтчета - Строка - Наименование отчета для сохранения в строка табличной части Отчетность;
//		* СостояниеОтчета - Строка - Статус отчета для сохранения в строка табличной части Отчетность;
//
Функция ОписаниеОтчета(СведенияОбОтчете) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("НаименованиеОтчета", "");
	Результат.Вставить("СостояниеОтчета",    "");

	Если СведенияОбОтчете.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
		Результат.НаименованиеОтчета = НСтр("ru = 'Дополнительные отчеты'");

	ИначеЕсли СтрНачинаетсяС(СведенияОбОтчете.ИсточникОтчета, "РегламентированныйОтчетБухОтчетность")
		ИЛИ СведенияОбОтчете.ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
	
		Результат.НаименованиеОтчета = СтрШаблон(НСтр("ru = 'Бухгалтерская отчетность за %1'"),
			СведенияОбОтчете.ФинансовыйПериод);

	Иначе
		// Все остальное считаем налоговой отчетность.

		Результат.НаименованиеОтчета = СтрШаблон(НСтр("ru = '%1 за %2'"),
			СведенияОбОтчете.НаименованиеОтчета, СведенияОбОтчете.ФинансовыйПериод);
	
	КонецЕсли;
	
	Результат.СостояниеОтчета = СтрШаблон(НСтр("ru = 'Готово (%1)'"),
		СведенияОбОтчете.ВариантОтчета);
	
	Возврат Результат;

КонецФункции

// Возвращает массив имен регламентированных отчетов, с помощью которых реализуется бухгалтерская отчетность.
//
Функция ИсточникБухгалтерскойОтчетности() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("РегламентированныйОтчетБухОтчетность");
	Результат.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		// Открываем существующую заявку сразу в стандартной форме.
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	СведенияОСервисе = ЗаявкиНаКредитВызовСервера.СведенияОСервисе();
	
	// Если требуется подключение к интернет-поддержке, то для новой заявки
	// не открываем форму, пока не подключится.
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		ВыбраннаяФорма = "ПодключениеИПП";
	Иначе
		// Чтобы второй раз не делать проверку доступности сервиса, передадим в параметре.
		Параметры.Вставить("СведенияОСервисе", СведенияОСервисе);
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Записывает данные о гражданстве физлица, указанные в менеджере записи регистра.
//
// Параметры:
//	МенеджерЗаписи - РегистрСведенийМенеджерЗаписи.ГражданствоФизическихЛиц - Менеджер записи регистра. 
//
Процедура ЗаписатьГражданствоФизЛица(МенеджерЗаписи) Экспорт

	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
		МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЕсли;
	
	// Записываем через набор записей, чтобы обойти дату запрета изменений.
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(МенеджерЗаписи.ФизическоеЛицо);
	НаборЗаписей.Отбор.Период.Установить(МенеджерЗаписи.Период);

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, МенеджерЗаписи);

	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

#Область УсловияКредитования

Процедура ПрочитатьУсловияКредитованияБанка(СведенияОЗаемщике, ДатаЗаявки, Банк, ХранилищеXML, СведенияОБанках)

	УсловияКредитования = ЗаявкиНаКредит.УсловияКредитованияXDTO(ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Найдем актуальное предложение банка.
	ДействующийКредитныйПродукт = Неопределено;
	Для Каждого КредитныйПродукт Из УсловияКредитования.КредитныйПродукт Цикл
		Если КредитныйПродукт.ДатаНачала <= ДатаЗаявки
			И КредитныйПродукт.ДатаОкончания >= ДатаЗаявки Тогда
			ДействующийКредитныйПродукт = КредитныйПродукт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДействующийКредитныйПродукт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = СведенияОБанках.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДействующийКредитныйПродукт);
	СтрокаТаблицы.Банк = Банк;
	
	// Проверяем первичные стоп-факторы.
	СтрокаТаблицы.СтопФакторыПройдены = Истина; // Первоначально считаем, что заемщик удовлетворяет стоп-факторам банка.

	Если НЕ ПроверитьВозрастЗаемщика(СведенияОЗаемщике, ДатаЗаявки, ДействующийКредитныйПродукт) Тогда
		// При не прохождении хотя бы одного из стоп-факторов, дальнейшую проверку не выполняем.
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьСрокОтДатыРегистрации(СведенияОЗаемщике, ДатаЗаявки, ДействующийКредитныйПродукт) Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьСрокФактическогоВеденияБизнеса(СведенияОЗаемщике, ДатаЗаявки, ДействующийКредитныйПродукт) Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьСрокВеденияУчетаВПрограмме(СведенияОЗаемщике, ДатаЗаявки, ДействующийКредитныйПродукт) Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, ДействующийКредитныйПродукт) Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьРезиденство(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт) Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	// Некредитуемые регионы.
	Если НайтиКодВСписке(СведенияОЗаемщике.КодРегиона, ДатаЗаявки, УсловияКредитования.НекредитуемыеРегионы, "КодРегиона") Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

	// Некредитуемые организационно-правовые формы.
	Если НайтиКодВСписке(СведенияОЗаемщике.КодОКОПФ, ДатаЗаявки, УсловияКредитования.НекредитуемыеОрганизационноПравовыеФормы, "КодОКОПФ") Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;
	
	// Некредитуемые виды деятельности - этот список потенциально самый большой, его проверяем в последнюю очередь.
	Если НайтиКодВСписке(СведенияОЗаемщике.КодОКВЭД2, ДатаЗаявки, УсловияКредитования.НекредитуемыеВидыДеятельности, "КодОКВЭД2") Тогда
		СтрокаТаблицы.СтопФакторыПройдены = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает по данным о заемщике показатели для проверки стоп-факторов.
//
Процедура ПодготовитьПараметрыРасчетаСтопФакторов(СведенияОЗаемщике, ДатаЗаявки)

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		СведенияОЗаемщике.ВозрастИП = КоличествоЛет(СведенияОЗаемщике.ДатаРождения, ДатаЗаявки);
	КонецЕсли;

	СведенияОЗаемщике.СрокОтДатыРегистрации = КоличествоМесяцев(СведенияОЗаемщике.ДатаРегистрации, ДатаЗаявки);

	СведенияОЗаемщике.СрокФактическогоВеденияБизнеса = КоличествоМесяцев(СведенияОЗаемщике.ДатаФактическогоНачалаВеденияБизнеса, ДатаЗаявки);

	СведенияОЗаемщике.СрокВеденияУчетаВПрограмме = КоличествоМесяцев(СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме, ДатаЗаявки);

	КодРегиона = "";
	Если ЗначениеЗаполнено(СведенияОЗаемщике.ЮрАдресОрганизации) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОЗаемщике.ЮрАдресОрганизации);
		КодРегиона = СведенияОбАдресе.КодРегиона;
	КонецЕсли;
	СведенияОЗаемщике.КодРегиона = СокрЛП(КодРегиона);
	
	// Исключим лишние пробелы из кодов.
	СведенияОЗаемщике.КодОКВЭД2 = СокрЛП(СведенияОЗаемщике.КодОКВЭД2);
	СведенияОЗаемщике.КодОКОПФ  = СокрЛП(СведенияОЗаемщике.КодОКОПФ);

КонецПроцедуры

Функция ПроверитьВозрастЗаемщика(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если СведенияОЗаемщике.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Не является физлицом, не проверяем условие по возрасту совсем.
		Возврат Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(КредитныйПродукт.МинВозрастИП) Тогда
		Если СведенияОЗаемщике.ВозрастИП < КредитныйПродукт.МинВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КредитныйПродукт.МаксВозрастИП) Тогда
		Если СведенияОЗаемщике.ВозрастИП > КредитныйПродукт.МаксВозрастИП Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокОтДатыРегистрации(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокОтДатыРегистрации) Тогда
		Если СведенияОЗаемщике.СрокОтДатыРегистрации < КредитныйПродукт.МинСрокОтДатыРегистрации Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокФактическогоВеденияБизнеса(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокФактическойДеятельности) Тогда
		Если СведенияОЗаемщике.СрокФактическогоВеденияБизнеса < КредитныйПродукт.МинСрокФактическойДеятельности Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСрокВеденияУчетаВПрограмме(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСрокВеденияУчетаВПрограмме) Тогда
		Если СведенияОЗаемщике.СрокВеденияУчетаВПрограмме < КредитныйПродукт.МинСрокВеденияУчетаВПрограмме Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСреднемесячноеПоступлениеНаСчет(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если ЗначениеЗаполнено(КредитныйПродукт.МинСреднемесячноеПоступлениеНаСчет) Тогда
		Если СведенияОЗаемщике.СреднемесячноеПоступлениеНаСчет < КредитныйПродукт.МинСреднемесячноеПоступлениеНаСчет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьРезиденство(СведенияОЗаемщике, ДатаЗаявки, КредитныйПродукт)

	Если КредитныйПродукт.ВозможноКредитованиеНерезидентов <> Истина Тогда
		Если СведенияОЗаемщике.Нерезидент Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция НайтиКодВСписке(ИскомыйКод, ДатаЗаявки, СпискиНекредитуемыхКодов, ИмяПоля)

	Если СпискиНекредитуемыхКодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Найдем актуальный список.
	ДействующийСписок = Неопределено;
	Для Каждого ТекущиеДанные Из СпискиНекредитуемыхКодов Цикл
		Если ТекущиеДанные.ДатаНачала <= ДатаЗаявки
			И ТекущиеДанные.ДатаОкончания >= ДатаЗаявки Тогда
			ДействующийСписок = ТекущиеДанные;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДействующийСписок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим код.
	НекредитуемыеКоды = ДействующийСписок[ИмяПоля];
	Для Каждого ТекущийКод Из НекредитуемыеКоды Цикл
		Если СокрЛП(ТекущийКод) = ИскомыйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитов

Процедура ПроверитьЗаполнениеДанныхОрганизации(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект       = ОбъектИлиФорма.Объект;
		КлючДанных   = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		НачалоПутиКДанным = "Организация.";
		
		// Контактную информацию берем из реквизитов формы.
		ЮрАдресОрганизации = ОбъектИлиФорма.КонтактнаяИнформацияПолеЮрАдресОрганизации;
		ТелефонОрганизации = ОбъектИлиФорма.КонтактнаяИнформацияПолеТелефонОрганизации;
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект       = ОбъектИлиФорма;
		КлючДанных   = РеквизитыОрганизации.Ссылка;
		НачалоПутиКДанным = "";

		ПроверкаИзФормы   = Ложь;
		
		ПроверяемыеВидыКонтактнойИнформации = Новый Массив;
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыОрганизации.Ссылка),
			,
			ПроверяемыеВидыКонтактнойИнформации,
			Объект.Дата);
		
	КонецЕсли;

	ЭтоЮрЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	// Дата регистрации
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата регистрации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРегистрации", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.КодОКОПФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКОПФ
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеОКОПФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКОПФ'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКОПФ", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Код ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.КодОКВЭД2) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КодОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Наименование ОКВЭД2
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеОКВЭД2) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование ОКВЭД ред.2'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеОКВЭД2", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// ЮрАдресОрганизации - не даем его изменять непосредственно в форме заявки,
	// т.к. от него зависят регистрации в налоговой, ПРФ, ФСС и др. органах.
	// Смены юр.адреса поддерживается в карточке организации, отправляем пользователя туда.
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
	
		Если ПроверкаИзФормы Тогда
			Адрес = ОбъектИлиФорма.КонтактнаяИнформацияПолеЮрАдресОрганизации;
		Иначе
			Адрес = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Адрес = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Адрес)
			ИЛИ Адрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
			ИЛИ Адрес = ТекстПустогоЮрАдресаВВидеГиперссылки() Тогда

			Если ЭтоЮрЛицо Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Юридический адрес'"));
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес места жительства'"));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// НаименованиеСокращенное
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеСокращенное) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сокращенное наименование'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеСокращенное", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// НаименованиеПолное
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеПолное) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Полное наименование'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "НаименованиеПолное", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// ИНН
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
				РеквизитыОрганизации.ИНН, ЭтоЮрЛицо);

			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					РезультатПроверки.ОписаниеОшибки,
					КлючДанных,
					НачалоПутиКДанным + "ИНН",
					,
					Отказ);
			КонецЕсли;
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ИНН'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ИНН", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// ОГРН
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОГРН) Тогда
			ТекстСообщения = "";
			Успешно = РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(
				РеквизитыОрганизации.ОГРН, ЭтоЮрЛицо, ТекстСообщения);

			Если НЕ Успешно Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ОГРН", , Отказ);
			КонецЕсли;
		Иначе
			Если ЭтоЮрЛицо Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОГРНИП'"));
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'ОГРН'"));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ОГРН", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Система налогообложения
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ УчетнаяПолитика.Существует(РеквизитыОрганизации.Ссылка, Объект.Дата) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Система налогообложения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СистемаНалогообложенияПредставление", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Последний закрытый месяц
	Если ИмяСтраницы = "Отчетность" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Месяц, по который включительно выверены данные учета'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ПериодРегистрации", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	// Контактный телефон для заемщика ИП
	Если НЕ ЭтоЮрЛицо
		И (ИмяСтраницы = "ЗаемщикИП" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы)) Тогда
	
		Если ПроверкаИзФормы Тогда
			Телефон = ОбъектИлиФорма.КонтактнаяИнформацияПолеТелефонОрганизации;
		Иначе
			Телефон = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Телефон = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Телефон) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхИП(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		РеквизитыФизЛица = ОбъектИлиФорма.ФизическоеЛицо;
	Иначе
		Объект           = ОбъектИлиФорма;
		РеквизитыФизЛица = РеквизитыФизическогоЛица(РеквизитыОрганизации.ИндивидуальныйПредприниматель, Объект.Дата);
	КонецЕсли;

	// ИндивидуальныйПредприниматель
	Если ИмяСтраницы = "Начало" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИндивидуальныйПредприниматель) Тогда
			Подстроки = Новый Массив;
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Индивидуальный предприниматель'"));
			Подстроки.Добавить(ТекстСообщения);
			Подстроки.Добавить(НСтр("ru = 'Нарушена связь между данными справочников ""Организации"" и ""Физические лица"".'"));
			Подстроки.Добавить(НСтр("ru = 'Для исправления откройте форму организации и перезапишите ее.'"));
			Подстроки.Добавить(НСтр("ru = 'После чего повторите создание заявки на кредит еще раз.'"));
			
			ТекстСообщения = СтрСоединить(Подстроки, Символы.ПС);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				РеквизитыОрганизации.Ссылка,
				"Объект.ИндивидуальныйПредприниматель",
				,
				Отказ);
			
			// Остальные поля не проверяем, пока не заполнят индивидуального предпринимателя в организации.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхРуководителяЮЛ(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы = "", Отказ)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Заемщик - ИП сам является руководителем, поэтому повторно его проверять не требуется.
		Возврат;
	КонецЕсли;

	РеквизитыРуководителя = Новый Структура();
	РеквизитыРуководителя.Вставить("Руководитель");
	РеквизитыРуководителя.Вставить("РуководительДолжность");
	РеквизитыРуководителя.Вставить("РеквизитыФизЛица");

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект                                      = ОбъектИлиФорма.Объект;
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных                                  = Неопределено;
		РеквизитыРуководителя.Руководитель          = ОбъектИлиФорма.Руководитель;
		РеквизитыРуководителя.РуководительДолжность = ОбъектИлиФорма.РуководительДолжность;
		РеквизитыРуководителя.РеквизитыФизЛица      = ОбъектИлиФорма.ФизическоеЛицо;
		
	Иначе
		Объект                 = ОбъектИлиФорма;
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных                                   = РеквизитыОрганизации.Ссылка;
		ДанныеОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
		РеквизитыРуководителя.Руководитель           = ДанныеОтветственныхЛиц.Руководитель;
		РеквизитыРуководителя.РуководительДолжность  = ДанныеОтветственныхЛиц.РуководительДолжность;
		РеквизитыРуководителя.РеквизитыФизЛица       = РеквизитыФизическогоЛица(
			ДанныеОтветственныхЛиц.Руководитель, Объект.Дата);
	КонецЕсли;

	// Руководитель
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыРуководителя.Руководитель) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Руководитель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "Руководитель", ,	Отказ);
			// Остальные поля не проверяем, пока не заполнят руководителя.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДанныхФизЛица(
		ОбъектИлиФорма,
		РеквизитыОрганизации,
		РеквизитыРуководителя.РеквизитыФизЛица,
		ИмяСтраницы,
		Отказ);
	
	// Должность руководитель
	Если ИмяСтраницы = "ЗаемщикЮЛ" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыРуководителя.РуководительДолжность) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "РуководительДолжность", , Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция РеквизитыФизическогоЛица(ФизЛицо, Дата)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = УчетЗарплаты.ДанныеФизическихЛиц(, ФизЛицо, Дата, Ложь, Ложь);
	
	// Для совместимости с типом СправочникОбъект.ФизическиеЛица добавим ключ Ссылка.
	Результат.Вставить("Ссылка", ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнениеДанныхФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		
		// Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		КлючДанных        = Неопределено;
		НачалоПутиКДанным = "ФизическоеЛицо.";
		ПроверкаИзФормы   = Истина;
	Иначе
		Объект            = ОбъектИлиФорма;
		КлючДанных        = РеквизитыФизЛица.Ссылка;
		НачалоПутиКДанным = "";
		ПроверкаИзФормы   = Ложь;
		
	КонецЕсли;

	ЭтоСамИП = РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И РеквизитыОрганизации.ИндивидуальныйПредприниматель = РеквизитыФизЛица.Ссылка;
		
	ТребуетсяПроверка = НЕ ЗначениеЗаполнено(ИмяСтраницы)
		ИЛИ (ЭтоСамИП И ИмяСтраницы = "ЗаемщикИП")
		ИЛИ (НЕ ЭтоСамИП И ИмяСтраницы = "ЗаемщикЮЛ");
		
	// Личные данные из справочника ФизическиеЛица.
		
	// Фамилия
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Фамилия) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Фамилия", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Имя
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Имя) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Имя", , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	// Дата рождения - для самого ИП располагается на самой первой странице,
	// для руководителя юр.лица - вместе со всеми другими данными руководителя.
	Если НЕ ЗначениеЗаполнено(ИмяСтраницы)
		ИЛИ (ЭтоСамИП И ИмяСтраницы = "Начало")
		ИЛИ (НЕ ЭтоСамИП И ИмяСтраницы = "ЗаемщикЮЛ") Тогда

		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.ДатаРождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаРождения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Пол
	Если ТребуетсяПроверка Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыФизЛица.Пол) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Пол", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Место рождения
	Если ТребуетсяПроверка Тогда
		СтруктураМестоРождения = ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(РеквизитыФизЛица.МестоРождения);
		ЕстьДанные = Ложь;
		Для Каждого КлючИЗначение Из СтруктураМестоРождения Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьДанные Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
			Если ПроверкаИзФормы Тогда
				// Поле на форме документа заявка на кредит.
				Если ЭтоСамИП Тогда
					ПолеФормы = "МестоРожденияИП";
				Иначе
					ПолеФормы = "МестоРожденияРуководителя";
				КонецЕсли;
			Иначе
				// Поле на форме элемента справочника Физические лица.
				ПолеФормы = "ФизическоеЛицоМестоРождения";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, ПолеФормы, , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Семейное положение
	ПроверитьЗаполнениеСостоянияВБракеФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);

	// ИНН - проверяем только для руководителя, для самого ИП проверили ранее по данным справочника Организации.
	// При этом проверяем, если ИНН заполнен, т.к. у физлица может не быть ИНН.
	Если ТребуетсяПроверка И НЕ ЭтоСамИП И ЗначениеЗаполнено(РеквизитыФизЛица.ИНН) Тогда
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
			РеквизитыФизЛица.ИНН, Ложь);
		Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				РезультатПроверки.ОписаниеОшибки,
				КлючДанных,
				НачалоПутиКДанным + "ИНН",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// СНИЛС
	СНИЛС = СокрЛП(СтрЗаменить(РеквизитыФизЛица.СтраховойНомерПФР, "-", "")); // Может быть пустая маска ввода.
	Если ТребуетсяПроверка Тогда
		ТекстСообщения = "";
		Успешно = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СНИЛС, ТекстСообщения);

		Если НЕ Успешно Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				НачалоПутиКДанным + "СтраховойНомерПФР",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Паспортные данные.
	ПроверитьЗаполнениеПаспортныхДанных(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ);
	
	// Проверка заполненности контактной информации для руководителя.
	// Для самого ИП используем контактную информацию из справочника Организации, а не физлица.
	Если ТребуетсяПроверка И НЕ ЭтоСамИП Тогда
	
		// Прочитаем из базы контактную информацию при необходимости.
		Если НЕ ПроверкаИзФормы Тогда
			ПроверяемыеВидыКонтактнойИнформации = Новый Массив;
			ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			ПроверяемыеВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
			
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыФизЛица.Ссылка),
				,
				ПроверяемыеВидыКонтактнойИнформации,
				Объект.Дата);
		КонецЕсли;
	
		// Адрес по прописке - для руководителя. Для ИП он проверен еще на первой странице заявки.
		Если ПроверкаИзФормы Тогда
			Адрес = ОбъектИлиФорма.КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица;
		Иначе
			Адрес = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Адрес = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Адрес)
			ИЛИ Адрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Адрес по прописке'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
		КонецЕсли;


		// Телефон руководителя
		Если ПроверкаИзФормы Тогда
			Телефон = ОбъектИлиФорма.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
		Иначе
			Телефон = "";
			НайденнаяСтрока = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				Телефон = НайденнаяСтрока.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Телефон) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеСостоянияВБракеФизЛица(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Проверяем только для самого ИП, для руководителя ЮЛ - не требуется.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		СостояниеВБраке = ОбъектИлиФорма.СостояниеВБракеФизическихЛиц.СостояниеВБраке;
		КлючДанных   = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		ПолеФормы    = "СостояниеВБракеФизическихЛиц.СостояниеВБраке";
	Иначе
		Объект       = ОбъектИлиФорма;
		КлючДанных   = РеквизитыФизЛица.Ссылка;
		ПолеФормы    = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", РеквизитыФизЛица.Ссылка);
		Запрос.УстановитьПараметр("Дата",    Объект.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияВБракеФизическихЛиц.СостояниеВБраке КАК СостояниеВБраке
		|ИЗ
		|	РегистрСведений.СостоянияВБракеФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК СостоянияВБракеФизическихЛиц";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СостояниеВБраке = Выборка.СостояниеВБраке;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеВБраке) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Семейное положение'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, ПолеФормы, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПаспортныхДанных(ОбъектИлиФорма, РеквизитыОрганизации, РеквизитыФизЛица, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		ПаспортныеДанные  = ОбъектИлиФорма.ПаспортныеДанные;
		КлючДанных        = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
		НачалоПутиКДанным = "ПаспортныеДанные.";
		ПроверкаИзФормы   = Истина;
	Иначе
		ПаспортныеДанные  = РеквизитыФизЛица;
		КлючДанных        = РеквизитыФизЛица.Ссылка;
		НачалоПутиКДанным = "ДокументыФизическихЛиц.";
		ПроверкаИзФормы   = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.ВидДокумента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Вид документа, удостоверяющего личность'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ВидДокумента", , Отказ);
	КонецЕсли;
	
	// Серия
	ТекстСообщения = "";
	Успешно = ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(
		ПаспортныеДанные.ВидДокумента, ПаспортныеДанные.Серия, ТекстСообщения);
	Если НЕ Успешно Тогда
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СерияНомерПаспорта", , Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Серия", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Номер
	Если ЗначениеЗаполнено(ПаспортныеДанные.Номер) Тогда
		ТекстСообщения = "";
		Успешно = ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(
			ПаспортныеДанные.ВидДокумента, ПаспортныеДанные.Номер, ТекстСообщения);
	Иначе
		Успешно = Ложь;
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Серия и номер'"));
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Номер'"));
		КонецЕсли;
	КонецЕсли;
	Если НЕ Успешно Тогда
		Если ПроверкаИзФормы И ПаспортныеДанные.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "СерияНомерПаспорта", , Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, НачалоПутиКДанным + "Номер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата выдачи
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "ДатаВыдачи", , Отказ);
	КонецЕсли;

	// Кем выдан
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, НачалоПутиКДанным + "КемВыдан", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхКонтактногоЛица(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "ЗаемщикИП" И ИмяСтраницы <> "ЗаемщикЮЛ" Тогда
		// Сейчас требуется проверка других страниц заявки.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		Объект     = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено; // Для правильной привязки сообщений пользователю к полям формы ключ должен быть равен Неопределено.
	Иначе
		Объект     = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		// Отдельное контактное лицо по заявке не назначено.
		// Считаем, что сам ИП или руководитель ЮЛ будет контактировать.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДолжностьКонтактногоЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Должность контактного лица'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ДолжностьКонтактногоЛица", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТелефонКонтактногоЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Телефон контактного лица'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, КлючДанных, "Объект.ТелефонКонтактногоЛица", , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеБанки(ОбъектИлиФорма, ИмяСтраницы = "", Отказ)

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		Банки  = Объект.Банки;
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		Банки  = ВыбранныеБанки(Объект.Ссылка);
	КонецЕсли;

	// Сумма кредита
	Если ИмяСтраницы = "Банки" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сумма кредита'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.СуммаДокумента", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Срок кредита
	Если ИмяСтраницы = "Банки" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СрокКредита) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Срок'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.СрокКредита", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Цель кредита
	Если ИмяСтраницы = "Банки" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЦельКредита) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Цель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, КлючДанных, "Объект.ЦельКредита", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Банки
	Если ИмяСтраницы = "Банки" ИЛИ НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Если НЕ ЗначениеЗаполнено(Банки) Тогда
			Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") И ИмяСтраницы = "Банки" Тогда
				// Если проверяется только одна страница Банки в форме,
				// то сама форма может сообщить более точную причину,
				// поэтому в этом случае не выводим здесь сообщение пользователю, чтобы не дублировать.
				Отказ = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбраны банки для отправки заявки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, , , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОтчетность(ОбъектИлиФорма, РеквизитыОрганизации, ИмяСтраницы, Отказ)

	Если ЗначениеЗаполнено(ИмяСтраницы) И ИмяСтраницы <> "Отчетность" Тогда
		// Проверка отчетность сейчас не требуется.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОбъектИлиФорма) = Тип("УправляемаяФорма") Тогда
		// Если проверка осуществляется в форме, то поля в связанных объектах берем из реквизитов формы.
		Объект = ОбъектИлиФорма.Объект;
		КлючДанных = Неопределено;
		НачалоПутиКДанным = "Объект.";
		Отчетность = Объект.Отчетность;
	Иначе
		Объект = ОбъектИлиФорма;
		КлючДанных = Объект.Ссылка;
		НачалоПутиКДанным = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаНаКредит", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОтчетность.НомерСтроки,
		|	ТЧОтчетность.РегламентированныйОтчет,
		|	ТЧОтчетность.ИсточникОтчета,
		|	ТЧОтчетность.НаименованиеОтчета,
		|	ТЧОтчетность.ДатаНачала,
		|	ТЧОтчетность.ДатаОкончания,
		|	ТЧОтчетность.СостояниеОтчета
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Отчетность КАК ТЧОтчетность
		|ГДЕ
		|	ТЧОтчетность.Ссылка = &ЗаявкаНаКредит
		|УПОРЯДОЧИТЬ ПО
		|	ТЧОтчетность.НомерСтроки";
		
		Отчетность = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого ОтчетЗаемщика Из Отчетность Цикл
	
		Если НЕ ЗначениеЗаполнено(ОтчетЗаемщика.РегламентированныйОтчет) Тогда
			ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Отчетность", ОтчетЗаемщика.НомерСтроки, "СостояниеОтчета");

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен отчет ""%1"" в строке %2'"),
				ОтчетЗаемщика.НаименованиеОтчета, Формат(ОтчетЗаемщика.НомерСтроки, "ЧГ="));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
			Продолжить;
		КонецЕсли;
		
		Если ОтчетЗаемщика.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности"
			И Объект.ТребуетсяПерезаполнениеРасшифровкиБухОтчетности Тогда
			// Расшифровки бухотчетности могут требовать перезаполнения.
			ПутьКДанным    = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Отчетность", ОтчетЗаемщика.НомерСтроки, "СостояниеОтчета");

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Откройте и перезаполните ""%1"" в строке %2'"),
				ОтчетЗаемщика.НаименованиеОтчета, Формат(ОтчетЗаемщика.НомерСтроки, "ЧГ="));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, НачалоПутиКДанным + ПутьКДанным, , Отказ);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ДополнитьПредставленияДанныхКонтактногоЛицаДляВыгрузки(ДанныеЗаявки)

	ДанныеЗаявки.Вставить("КонтактноеЛицоФамилия",                 "");
	ДанныеЗаявки.Вставить("КонтактноеЛицоИмя",                     "");
	ДанныеЗаявки.Вставить("КонтактноеЛицоОтчество",                "");
	ДанныеЗаявки.Вставить("ДолжностьКонтактногоЛицаПредставление", "");
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаявки.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО контактного лица.
	ПредставлениеФизЛица = УчетЗарплаты.ПредставлениеФизическогоЛица(ДанныеЗаявки.КонтактноеЛицо, ДанныеЗаявки.Дата);
	ДанныеЗаявки.КонтактноеЛицоФамилия = ПредставлениеФизЛица.Фамилия;
	ДанныеЗаявки.КонтактноеЛицоИмя     = ПредставлениеФизЛица.Имя;
	ДанныеЗаявки.КонтактноеЛицоОтчество= ПредставлениеФизЛица.Отчество;
	
	// Должность контактного лица.
	Если ЗначениеЗаполнено(ДанныеЗаявки.ДолжностьКонтактногоЛица) Тогда
		ДанныеЗаявки.ДолжностьКонтактногоЛицаПредставление = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаявки.ДолжностьКонтактногоЛица, "Наименование");
	КонецЕсли;

КонецПроцедуры

Функция ДанныеФизлицаДляВыгрузки(ДанныеЗаявки, ФизЛицо)

	ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(ДанныеЗаявки.Организация,
		ФизЛицо, ДанныеЗаявки.Дата);
	
	ДанныеФизЛица.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеФизЛица.МестоРождения);

	// Представление страны гражданства.
	ДанныеФизЛица.Вставить("СтранаПредставление", "");
	ДанныеФизЛица.Вставить("СтранаКод",           "");
	Если ЗначениеЗаполнено(ДанныеФизлица.Страна) Тогда
		РеквизитыСтраны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФизлица.Страна, "Код, Наименование");
		ДанныеФизЛица.СтранаКод           = РеквизитыСтраны.Код;
		ДанныеФизЛица.СтранаПредставление = РеквизитыСтраны.Наименование;
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("Нерезидент", ЗначениеЗаполнено(ДанныеФизЛица.Страна) И ДанныеФизЛица.Страна <> Справочники.СтраныМира.Россия);
	
	// Код вида документа, удостоверяющего личность.
	ДанныеФизЛица.Вставить("ВидДокументаКод", "");
	Если ЗначениеЗаполнено(ДанныеФизЛица.ВидДокумента) Тогда
		ДанныеФизЛица.ВидДокументаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизЛица.ВидДокумента, "КодМВД");
	КонецЕсли;
	
	Возврат ДанныеФизЛица;

КонецФункции

#КонецОбласти

#Область ПоказателиДеятельности

// Количество полных месяцев, включаемых в расчет среднемесячной выручки.
//
Функция МесяцевРасчетаСреднемесячногоПоступленияНаСчет()
	
	Возврат 6;
	
КонецФункции

Функция ДатаНачалаУчетаВПрограмме(Организация)

	// Если указана дата начальных остатков, возвращаем следующий за ней день.
	Результат = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Возврат '0001-01-01';

КонецФункции

Функция ДатаФактическогоНачалаВеденияБизнеса(Организация, Дата)

	// Определим дату первой проводки по поступлению на расчетный счет оплаты от покупателей
	// или даты первой розничной продажи.
	Результат = '3999-12-31';

	Запрос = Новый Запрос;
	
	// Заемщиком выступает юр.лицо "целиком" со всеми его обособленными подразделениями.
	Запрос.УстановитьПараметр("Организация",   ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Дата",          КонецДня(Дата));
	
	СчетаУчетаДС = Новый Массив;
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.Касса); // 50
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); // 51
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);  // 52
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);  // 55
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаДС);
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам); // 57.03
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); // 62
	СчетаРасчетовСПокупателями = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("СчетаРасчетовСПокупателями", СчетаРасчетовСПокупателями);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация В (&Организация)
	|	И Хозрасчетный.Период <= &Дата
	|	И Хозрасчетный.СчетДт В(&СчетаУчетаДС)
	|	И Хозрасчетный.СчетКт В(&СчетаРасчетовСПокупателями)
	|	И Хозрасчетный.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация В (&Организация)
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаХозрасчетный = РезультатЗапроса[0].Выбрать();
	ВыборкаОтчетОРозничныхПродажах = РезультатЗапроса[1].Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаХозрасчетный.Следующий() Тогда
		Результат = Мин(ВыборкаХозрасчетный.Период, Результат);
	КонецЕсли;
	
	Если ВыборкаОтчетОРозничныхПродажах.Следующий() Тогда
		Результат = Мин(ВыборкаОтчетОРозничныхПродажах.Дата, Результат);
	КонецЕсли;
	
	Если Результат = '3999-12-31' Тогда
		Результат = '0001-01-01';
	КонецЕсли;
	
	Возврат НачалоДня(Результат);

КонецФункции

#КонецОбласти

#Область ОбращениеКСервису

// Возвращает двоичные данные с XML-текстом заявки на кредит.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//
Функция ВыгрузитьЗаявкуНаКредит(СведенияОЗаявке)

	ДанныеЗаявки       = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика     = СведенияОЗаявке.ДанныеЗаемщика;
	ДанныеИП           = СведенияОЗаявке.ДанныеИП;
	ДанныеРуководителя = СведенияОЗаявке.ДанныеРуководителя;
	
	ПараметрыВыгрузки = ЗаявкиНаКредит.НовыеСведенияЗаявкиНаКредит();
	ПараметрыВыгрузки.ИдентификаторФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика,
		Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml,
		СведенияОЗаявке);
	
	// Общие реквизиты заявки.
	ПараметрыВыгрузки.ИдентификаторЗаявки = XMLСтрока(ДанныеЗаявки.Ссылка);
	ПараметрыВыгрузки.ДатаЗаявки          = ДанныеЗаявки.Дата;
	ПараметрыВыгрузки.СуммаКредита        = ДанныеЗаявки.СуммаДокумента;
	ПараметрыВыгрузки.СрокКредита         = ДанныеЗаявки.СрокКредита;
	ПараметрыВыгрузки.ЦельКредита         = ЦельКредитаXML(ДанныеЗаявки.ЦельКредита);
	
	// Общие реквизиты заемщика.
	ПараметрыВыгрузки.ОКВЭД               = ДанныеЗаемщика.КодОКВЭД2;
	ПараметрыВыгрузки.ОКОПФ               = ДанныеЗаемщика.КодОКОПФ;
	ПараметрыВыгрузки.ДатаРегистрации 	  = ДанныеЗаемщика.ДатаРегистрации;
	ПараметрыВыгрузки.ДатаФактНачалаДеят  = ДанныеЗаявки.ДатаФактическогоНачалаВеденияБизнеса;
	ПараметрыВыгрузки.ДатаНачалаУчета 	  = ДанныеЗаявки.ДатаНачалаУчетаВПрограмме;
	ПараметрыВыгрузки.ДатаОтчетности 	  = КонецМесяца(ДанныеЗаявки.ПериодРегистрации);
	ПараметрыВыгрузки.СистемыНО           = СистемыНалогообложенияXML(СведенияОЗаявке);
	
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// Данные об индивидуальном предпринимателе.
		ОтправительИП                 = ПараметрыВыгрузки.ОтправительИП;
		ОтправительИП.ОГРН            = ДанныеЗаемщика.ОГРН;
		
		// Личные данные предпринимателя.
		Руководитель = ПараметрыВыгрузки.Руководитель;
		ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(Руководитель, ДанныеИП);

		// Контактная информация предпринимателя из справочника Организации.
		Руководитель.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		Руководитель.Телефон     = ДанныеЗаемщика.Телефоны;
		Руководитель.ДопТелефон  = ДанныеЗаемщика.ТелефонЮридическогоАдреса;
		
	Иначе
		// Данные о юридическом лице.
		ОтправительЮЛ                 = ПараметрыВыгрузки.ОтправительЮЛ;
		ОтправительЮЛ.Наименование    = ДанныеЗаемщика.ПолноеНаименование;
		ОтправительЮЛ.СокрНаименование = ДанныеЗаемщика.СокращенноеНаименование;
		ОтправительЮЛ.ИНН             = ДанныеЗаемщика.ИНН;
		ОтправительЮЛ.КПП             = ДанныеЗаемщика.КПП;
		ОтправительЮЛ.Нерезидент      = Число(ДанныеЗаемщика.Нерезидент);
		ОтправительЮЛ.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаемщика.ЗначениеJSONЮридическийАдрес);
		ОтправительЮЛ.ОГРН            = ДанныеЗаемщика.ОГРН;
		
		ОтправительЮЛ.ПолноеНаименованиеДоРеорганизации = ДанныеЗаемщика.ПолноеНаименованиеДоРеорганизации;
		ОтправительЮЛ.СокращенноеНаименованиеДоРеорганизации = ДанныеЗаемщика.СокращенноеНаименованиеДоРеорганизации;
		
		// Личные данные руководителя юридического лица.
		Руководитель = ПараметрыВыгрузки.Руководитель;
		ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(Руководитель, ДанныеРуководителя);

		// Контактная информация предпринимателя из справочника ФизическиеЛица.
		Руководитель.СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеРуководителя.ЗначениеJSONАдресПоПропискеФизическиеЛица);
		Руководитель.Телефон     = ДанныеРуководителя.ТелефонРабочийФизическиеЛица;
		Руководитель.ДопТелефон  = ДанныеРуководителя.ТелефонДомашнийФизическиеЛица;
		
	КонецЕсли;
	
	// Контактное лицо по заявке.
	Если ЗначениеЗаполнено(ДанныеЗаявки.КонтактноеЛицо) Тогда
		КонтактноеЛицо = ПараметрыВыгрузки.КонтактноеЛицо;
		КонтактноеЛицо.ФИО.Фамилия = ДанныеЗаявки.КонтактноеЛицоФамилия;
		КонтактноеЛицо.ФИО.Имя     = ДанныеЗаявки.КонтактноеЛицоИмя;
		КонтактноеЛицо.ФИО.Отчество= ДанныеЗаявки.КонтактноеЛицоОтчество;
		КонтактноеЛицо.Должность   = ДанныеЗаявки.ДолжностьКонтактногоЛицаПредставление;
		КонтактноеЛицо.Телефон     = ДанныеЗаявки.ТелефонКонтактногоЛица;
		КонтактноеЛицо.ЭлПочта     = ДанныеЗаявки.АдресЭПКонтактногоЛица;
	КонецЕсли;
	
	Возврат ЗаявкиНаКредит.ЭлектронноеПредставлениеСообщения(
		Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит,
		ПараметрыВыгрузки);

КонецФункции

Функция СистемыНалогообложенияXML(СведенияОЗаявке)

	ДанныеЗаявки   = СведенияОЗаявке.ДанныеЗаявки;
	ДанныеЗаемщика = СведенияОЗаявке.ДанныеЗаемщика;

	Результат = Новый Массив;
	
	Если ДанныеЗаемщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если УчетнаяПолитика.ПлательщикНДФЛ(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
			// Индивидуальный предприниматель на общей системе налогообложения.
			Результат.Добавить("ОСНО");
		КонецЕсли;
	Иначе
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
			// Юридическое лицо на общей системе налогообложения.
			Результат.Добавить("ОСНО");
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("УСНД");
	КонецЕсли;

	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("УСНДМР");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("ПСНО");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("ЕНВД");
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(ДанныеЗаявки.Организация, ДанныеЗаявки.Дата) Тогда
		Результат.Добавить("НПД");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьОбщиеПараметрыВыгрузкиДанныеФизЛица(ПараметрФизЛицо, ДанныеФизЛица)

	ПараметрФизЛицо.ФИО.Фамилия = ДанныеФизЛица.Фамилия;
	ПараметрФизЛицо.ФИО.Имя     = ДанныеФизЛица.Имя;
	ПараметрФизЛицо.ФИО.Отчество= ДанныеФизЛица.Отчество;
	ПараметрФизЛицо.ДатаРождения= ДанныеФизЛица.ДатаРождения;
	ПараметрФизЛицо.Пол         = ?(ДанныеФизЛица.Пол = Перечисления.ПолФизическогоЛица.Женский, "2", "1");
	ПараметрФизЛицо.МестоРождения = ДанныеФизЛица.МестоРождения;
	
	Если ДанныеФизЛица.Свойство("СостояниеВБракеКод") Тогда
		// Семейное положение указывается не для всех физлиц, а только для самого индивидуального предпринимателя.
		ПараметрФизЛицо.СемейноеПоложение = СостояниеВБракеXML(ДанныеФизЛица.СостояниеВБракеКод);
	КонецЕсли;

	ПараметрФизЛицо.Гражданство = ДанныеФизЛица.СтранаКод;
	ПараметрФизЛицо.ИНН         = ДанныеФизЛица.ИНН;
	ПараметрФизЛицо.СНИЛС       = ДанныеФизЛица.СтраховойНомерПФР;

	УдостоверениеЛичности = ПараметрФизЛицо.УдостоверениеЛичности;
	УдостоверениеЛичности.КодВидаДокумента = ДанныеФизЛица.ВидДокументаКод;
	УдостоверениеЛичности.СерияДокумента   = ДанныеФизЛица.Серия;
	УдостоверениеЛичности.НомерДокумента   = ДанныеФизЛица.Номер;
	УдостоверениеЛичности.КемВыдан         = ДанныеФизЛица.КемВыдан;
	УдостоверениеЛичности.ДатаВыдачи       = ДанныеФизЛица.ДатаВыдачи;
	УдостоверениеЛичности.КодПодразделения = ДанныеФизЛица.КодПодразделения;

КонецПроцедуры

// Возвращает значение для выгрузки в XML по коду справочника "Состояние в браке".
//
// Параметры:
//	СостояниеВБракеКод - Строка - Код справочника "Состояние в браке"
//
// Возвращаемое значение:
//	Строка - значение для выгрузки в XML-файл заявки.
//
Функция СостояниеВБракеXML(Знач СостояниеВБракеКод)

	СостояниеВБракеКод = СокрЛП(СостояниеВБракеКод);

	Если СостояниеВБракеКод      = "1" Тогда // Никогда не состоял (не состояла в браке)
		Возврат "1"; // Холост/Не замужем
	
	ИначеЕсли СостояниеВБракеКод = "2" Тогда // Состоит в зарегистрированном браке
		Возврат "3"; // Женат/Замужем

	ИначеЕсли СостояниеВБракеКод = "3" Тогда // Состоит в незарегистрированном браке
		Возврат "5"; // Гражданский брак

	ИначеЕсли СостояниеВБракеКод = "4" Тогда // Вдовец (вдова)
		Возврат "4"; // Вдовец/Вдова

	ИначеЕсли СостояниеВБракеКод = "5" Тогда // Разведен (разведена)
		Возврат "2"; // В разводе

	ИначеЕсли СостояниеВБракеКод = "6" Тогда // Разошелся (разошлась)
		Возврат "2"; // В разводе
	
	КонецЕсли;
	
	Возврат ""; // Не заполнено.

КонецФункции

Функция ЦельКредитаXML(ЦельКредита)

	Если ЦельКредита = Перечисления.ЦельКредитования.ПополнениеОборотныхСредств Тогда
		Возврат "1";
	ИначеЕсли ЦельКредита = Перечисления.ЦельКредитования.ИнвестицииВОсновныеСредства Тогда
		Возврат "2";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ВыгрузитьСогласие(СведенияОЗаявке, ТекстHTML)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура());
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".pdf");
	
	ФорматированныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаФорматированногоДокумента.PDF);
	
	// Получаем файл PDF как двоичные данные и удаляем сам временный файл.
	Результат = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		// Запишем в журнал регистрации, но не будет прерывать выполнение.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении временного файла %1: %2'"),
			ИмяВременногоФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкаНаКредит.ВыгрузитьСогласие'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЗаявкаНаКредит,
			СведенияОЗаявке.ДанныеЗаявки.Ссылка,
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьОписаниеОшибки(ОписаниеОшибок, ОписаниеНовойОшибки)

	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
	КонецЕсли;
	ОписаниеОшибок = ОписаниеОшибок + ОписаниеНовойОшибки;

КонецПроцедуры

// Помещает во временное хранилище транзакций обмена с банками файлы заявки и возвращает их идентификатор отправки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаякаНаКредит - Заполненная заявка.
//	Банки - Массив - Банки-получатели.
//	ЭтоЭлектроннаяПодписьВМоделиСервиса - Булево - Истина, если используется облачный сертификат.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//      * Выполнено - Булево - признак успешного выполнения шага.
//		* ИдентификаторВременногоХранилищаТранзакций - Строка - Уникальный идентификатор, под которым во временном
//                                                              хранилище транзакций обмена помещены данные.
//		* ОписаниеОшибки - Строка - Текст ошибки, если были ошибки в процессе обмена.
//		* ТаблицаСообщений - Массив структур - содержит список ошибок в отчетности, прикрепляемой к заявке.
// 
Функция ПодготовитьФайлыДляОтправки_ЗаявкаНаКредит(ЗаявкаНаКредит, Банки, ЭтоЭлектроннаяПодписьВМоделиСервиса)

	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаСообщений", Новый Массив); // Для передачи на клиент требуется преобразование таблицы значений БРО в массив структур.
	Результат.Вставить("ИдентификаторВременногоХранилищаТранзакций", Строка(Новый УникальныйИдентификатор()));
	
	СведенияОЗаявке = СведенияОЗаявке(ЗаявкаНаКредит);
	
	СведенияОЗаемщике = НовыеСведенияОЗаемщикеДляОтчетности();
	СведенияОЗаемщике.Организация               = СведенияОЗаявке.ДанныеЗаявки.Организация;
	СведенияОЗаемщике.ЮридическоеФизическоеЛицо = СведенияОЗаявке.ДанныеЗаемщика.ЮридическоеФизическоеЛицо;
	СведенияОЗаемщике.ДатаРегистрации           = СведенияОЗаявке.ДанныеЗаемщика.ДатаРегистрации;
	СведенияОЗаемщике.ПериодРегистрации         = СведенияОЗаявке.ДанныеЗаявки.ПериодРегистрации;
	СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме = СведенияОЗаявке.ДанныеЗаявки.ДатаНачалаУчетаВПрограмме;
	
	ТребуемаяОтчетностьЗаемщика = ТребуемаяОтчетностьЗаемщика(
		СведенияОЗаемщике, СведенияОЗаявке.ДанныеЗаявки.Дата, Банки);
	
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
	// Заявка + Согласие в каждый банк + Каждый отчет.
	СостояниеПрогресса.КоличествоДействий = 3 + Банки.Количество() + ТребуемаяОтчетностьЗаемщика.Количество();
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(
		СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Подготовка информации заявки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	// Для каждого банка вкладываем в пакет заявки:
	// 1. xml-файл самой заявки и отчетности общие для всех банков.
	Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
	Вложение.Предмет          = ЗаявкаНаКредит;
	Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
	Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
	Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АнкетаЗаемщика;
	Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
		Вложение.ТипДокумента, Вложение.ТипСодержимого, СведенияОЗаявке);
	Вложение.ИсходныеДанные   = ВыгрузитьЗаявкуНаКредит(СведенияОЗаявке);
	Вложение.БанкиПолучатели  = Банки;
	Вложение.Зашифровать      = Истина;
	Вложение.Подписать        = Истина;
	Вложение.Сжать            = Истина;
	Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса  = ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
	Если НЕ РезультатОперации.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(
		СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Согласие на обработку данных...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	// 2. pdf-файл согласия на обработку данных - для каждого банка свое.
	ПараметрыСогласия            = ПараметрыСогласия(СведенияОЗаявке);
	ИнформацияОБанкахДляСогласий = ЗаявкиНаКредит.ПодготовитьИнформациюОБанкахДляСогласий(Банки);
	ТекстыСогласий               = ЗаявкиНаКредит.ТекстСогласия(ПараметрыСогласия, ИнформацияОБанкахДляСогласий, Ложь);
	Если ТекстыСогласий.Количество() <> Банки.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Не для всех банков, принимающих заявки на кредит, удалось подобрать тексты согласий на обработку данных.
			|Обратитесь в службу поддержки сервиса кредитования.'");
	КонецЕсли;
	
	ШаблонСообщенияПрогресса = НСтр("ru = 'Согласие в %1'");
	Для Индекс = 0 По Банки.Количество() - 1 Цикл
		Банк = Банки[Индекс];
		СведенияОБанке = ИнформацияОБанкахДляСогласий.Найти(Банк, "Банк");
		Если СведенияОБанке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
		Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
		Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
		Вложение.Предмет          = ЗаявкаНаКредит;
		Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
		Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.pdf;
		Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.СогласиеНаОбработкуДанных;
		Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
			Вложение.ТипДокумента, Вложение.ТипСодержимого, СведенияОЗаявке, СведенияОБанке.ИННБанка);
		Вложение.ИсходныеДанные   = ВыгрузитьСогласие(СведенияОЗаявке, ТекстыСогласий[Индекс]);
		Вложение.БанкиПолучатели.Добавить(Банк);
		Вложение.Зашифровать      = Истина;
		Вложение.Подписать        = Истина;
		Вложение.Сжать            = Истина;
		Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭтоЭлектроннаяПодписьВМоделиСервиса;
		
		РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
		Если НЕ РезультатОперации.Выполнено Тогда
			ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
		
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(
			СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			СтрШаблон(ШаблонСообщенияПрогресса, СведенияОБанке.Наименование),
			СостояниеПрогресса.ДополнительныеПараметры);
		
	КонецЦикла;
	
	// 3. Список счетов из плана счетов общий для всех банков.
	Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
	Вложение.Предмет          = ЗаявкаНаКредит;
	Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
	Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
	Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ПланСчетов;
	Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
		Вложение.ТипДокумента, Вложение.ТипСодержимого, СведенияОЗаявке);
	Вложение.ИсходныеДанные   = ЗаполнениеРасшифровокБухОтчетности.ВыгрузитьПланСчетов(СведенияОЗаявке.ДанныеЗаявки.Организация);
	Вложение.БанкиПолучатели  = Банки;
	Вложение.Зашифровать      = Истина;
	Вложение.Подписать        = Истина;
	Вложение.Сжать            = Истина;
	Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса  = ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
	ДлительныеОперации.СообщитьПрогресс(
		СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'План счетов'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
	Если НЕ РезультатОперации.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// 4. Отчетность заемщика.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОтчетность.НомерСтроки,
		|	ТЧОтчетность.КлючСтроки,
		|	ТЧОтчетность.ИсточникОтчета,
		|	ТЧОтчетность.РегламентированныйОтчет,
		|	ТЧОтчетность.НаименованиеОтчета,
		|	ТЧОтчетность.ДатаНачала,
		|	ТЧОтчетность.ДатаОкончания
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Отчетность КАК ТЧОтчетность
		|ГДЕ
		|	ТЧОтчетность.Ссылка = &ЗаявкаНаКредит";
	
	ТаблицаОтчетности = Запрос.Выполнить().Выгрузить();
	ТаблицаОтчетности.Индексы.Добавить("ИсточникОтчета");
	
	ОтборИсточникОтчета = Новый Структура("ИсточникОтчета");
	
	КешСхемВыгрузкиБО = Новый Структура;
	
	Для Каждого ТребуемыйОтчетЗаемщика Из ТребуемаяОтчетностьЗаемщика Цикл
		ИсточникОтчета = ИсточникОтчета(ТребуемыйОтчетЗаемщика.ВидОтчета);
		
		ЭтоРасшифровкиБухОтчетности = (ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности");
		
		// Ищем регламентированный отчет в составе заявки.
		ОтборИсточникОтчета.ИсточникОтчета = ИсточникОтчета;
		НайденныеОтчеты = ТаблицаОтчетности.НайтиСтроки(ОтборИсточникОтчета);
		ОтчетНайден     = Ложь;
		
		// Выгружаем все прикрепленные к заявки отчеты по одного вида.
		Для Каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			Если НЕ ЭтоРасшифровкиБухОтчетности
				И НачалоДня(ТребуемыйОтчетЗаемщика.ДатаОкончания) <> НачалоДня(НайденныйОтчет.ДатаОкончания) Тогда
				// Найден отчет за другой период, его сейчас выгружать не требуется, пропускаем.
				// При этом расшифровки бухотчетности может быть за разные периоды,
				// но физически содержатся в одном рег.отчете, поэтому их не ограничиваем.
				Продолжить;
			КонецЕсли;
			
			ОтчетНайден = Истина;
			
			Если НЕ ЗначениеЗаполнено(НайденныйОтчет.РегламентированныйОтчет) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
					НСтр("ru = 'Отчет'"), НайденныйОтчет.НомерСтроки, НСтр("ru = 'Отчетность'"));
				ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Если ЭтоРасшифровкиБухОтчетности Тогда
				// Каждый отчет из расшифровки бухгалтерской отчетности выгружаем в отдельные файлы по счету и периоду.
				ПараметрыРасшифровкиБухОтчетности = ЗаявкиНаКредитКлиентСервер.ПараметрыОтчетаЗаемщика();
				
				ПараметрыРасшифровкиБухОтчетности.ВидОтчета     = ТребуемыйОтчетЗаемщика.ВидОтчета;
				ПараметрыРасшифровкиБухОтчетности.ДатаНачала    = ТребуемыйОтчетЗаемщика.ДатаНачала;
				ПараметрыРасшифровкиБухОтчетности.ДатаОкончания = ТребуемыйОтчетЗаемщика.ДатаОкончания;
				ПараметрыРасшифровкиБухОтчетности.Счет          = ТребуемыйОтчетЗаемщика.Счет;
				ПараметрыРасшифровкиБухОтчетности.Банки         = ТребуемыйОтчетЗаемщика.Банки;
				
				ДополнительныеПараметрыВыгрузки = Новый Структура();
				ДополнительныеПараметрыВыгрузки.Вставить("Отбор", ПараметрыРасшифровкиБухОтчетности);
				
				РезультатВыгрузки = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(
					НайденныйОтчет.РегламентированныйОтчет, ДополнительныеПараметрыВыгрузки);
				
			ИначеЕсли ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
				// Если бух.отчетность сдавалась через 1С-Отчетность, то предоставляем ее с отметкой ФНС,
				// иначе - просто выгружаем xml без отметки.
				СостояниеДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(НайденныйОтчет.РегламентированныйОтчет);
				Если СостояниеДокумента.Отправлено И СостояниеДокумента.Сдано Тогда
					РезультатВыгрузки = ВыгрузитьПакетПоСдачеОтчетностиВФНС(НайденныйОтчет.РегламентированныйОтчет);
				Иначе
					// Банки просят предоставлять отчетность за "нестандартные" периоды (например, по-квартально).
					// В ФНС за такие периоды отчеты не сдаются и штатная проверка их не пропускает при выгрузке.
					// Чтобы отключить эту проверку, передадим специальный флаг для выгрузки, при этом в xml-файле
					// будут использованы особые значения для тега периода, которые отсутствуют в формате ФНС.
					ДополнительныеПараметрыВыгрузки = Новый Структура();
					ДополнительныеПараметрыВыгрузки.Вставить("РеглОтчетВыгружаетсяВБанк", Истина);
					ДополнительныеПараметрыВыгрузки.Вставить("КешСхемВыгрузки", КешСхемВыгрузкиБО);
					
					РезультатВыгрузки = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(
						НайденныйОтчет.РегламентированныйОтчет, ДополнительныеПараметрыВыгрузки);
				КонецЕсли;
				
			Иначе
				// Для налоговых деклараций выгружаем пакет файлов с отметкой ФНС о приеме.
				РезультатВыгрузки = ВыгрузитьПакетПоСдачеОтчетностиВФНС(НайденныйОтчет.РегламентированныйОтчет);
				
			КонецЕсли;
			
			Если Не РезультатВыгрузки.РеглОтчетВыгружен Тогда
				
				Если ЗначениеЗаполнено(РезультатВыгрузки.ТаблицаСообщений) Тогда
					// Если при выгрузке возникли какие-то ошибки, то сообщим о них.
					Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
						Результат.ОписаниеОшибки = СтрШаблон(
							НСтр("ru = 'Выгрузка прервана.
							|Ошибка при выгрузке отчета %1'"), НайденныйОтчет.РегламентированныйОтчет);
					КонецЕсли;
					// В составе заявки на кредит могут быть несколько разных регламентированных отчетов, 
					// а функция БРО возвращает таблицу сообщений в привязке к одной рег.отчету.
					РезультатВыгрузки.ТаблицаСообщений.ЗаполнитьЗначения(НайденныйОтчет.РегламентированныйОтчет, "ОтчетДок");
					РезультатВыгрузки.ТаблицаСообщений.ЗаполнитьЗначения(
						РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(НайденныйОтчет.РегламентированныйОтчет),
						"Отчет");
					
					// Дополняем описание ранее найденных ошибок в других отчетах.
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						Результат.ТаблицаСообщений,
						ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатВыгрузки.ТаблицаСообщений));
				Иначе
					ТекстОшибки = СтрСоединить(РезультатВыгрузки.Ошибки, Символы.ПС);
					Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
						ПредставлениеОтчета = ПредставлениеОтчета(
							ТребуемыйОтчетЗаемщика.ВидОтчета,
							ТребуемыйОтчетЗаемщика.КодСчета,
							ТребуемыйОтчетЗаемщика.ДатаНачала,
							ТребуемыйОтчетЗаемщика.ДатаОкончания);
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен отчет ""%1""'"), ПредставлениеОтчета);
					КонецЕсли;
					ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, ТекстОшибки);
				КонецЕсли;

				Продолжить;

			КонецЕсли;

			Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
			Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
			Вложение.Организация      = СведенияОЗаявке.ДанныеЗаявки.Организация;
			Вложение.Предмет          = ЗаявкаНаКредит;
			Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
			Вложение.ТипСодержимого   = УниверсальныйОбменСБанками.ТипСодержимогоПоИмениФайла(РезультатВыгрузки.ИмяФайлаВыгрузки);
			Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.ОтчетЗаемщика;
			Если ЭтоРасшифровкиБухОтчетности Тогда
				
				СоставнойКлючУникальности = Новый Массив;
				СоставнойКлючУникальности.Добавить(ПараметрыРасшифровкиБухОтчетности.ВидОтчета);
				Если ЗначениеЗаполнено(ПараметрыРасшифровкиБухОтчетности.Счет) Тогда
					СоставнойКлючУникальности.Добавить(СтрЗаменить(СокрЛП(ПараметрыРасшифровкиБухОтчетности.Счет), ".", ""));
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыРасшифровкиБухОтчетности.ДатаНачала) Тогда
					СоставнойКлючУникальности.Добавить(Формат(ПараметрыРасшифровкиБухОтчетности.ДатаНачала, "ДФ=ггггММдд"));
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыРасшифровкиБухОтчетности.ДатаОкончания) Тогда
					СоставнойКлючУникальности.Добавить(Формат(ПараметрыРасшифровкиБухОтчетности.ДатаОкончания, "ДФ=ггггММдд"));
				КонецЕсли;
				
				Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
					Вложение.ТипДокумента, Вложение.ТипСодержимого, СведенияОЗаявке, СоставнойКлючУникальности);
					
			Иначе
				
				Вложение.ИсходноеИмяФайла = РезультатВыгрузки.ИмяФайлаВыгрузки;
				
			КонецЕсли;
			Вложение.ИсходныеДанные   = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
			Вложение.БанкиПолучатели  = ТребуемыйОтчетЗаемщика.Банки;
			Вложение.Зашифровать      = Истина;
			Вложение.Подписать        = Истина;
			Вложение.Сжать            = (Вложение.ТипСодержимого <> Перечисления.ТипыСодержимогоФайловОбменаСБанками.zip);
			Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭтоЭлектроннаяПодписьВМоделиСервиса;
			
			РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
			Если НЕ РезультатОперации.Выполнено Тогда
				ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, СтрСоединить(РезультатВыгрузки.Ошибки, Символы.ПС));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОтчетНайден Тогда
			// Бух.отчетность и расшифровки к ней необходимо прикладывать к заявке на кредит обязательно.
			// Налоговую отчетность прикладываем только, если ее сдавали через 1С-Отчетность и можно получить отметку ФНС о приеме,
			// поэтому налоговая отчетность может отсутствовать.
			ТекстСообщения = "";
			Если ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В составе заявки на кредит требуется предоставить ""%1""'"),
					ТребуемыйОтчетЗаемщика.НаименованиеОтчета);
			
			ИначеЕсли ЭтоРасшифровкиБухОтчетности Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В составе дополнительных отчетов для заявки на кредит требуется предоставить ""%1""'"),
					ТребуемыйОтчетЗаемщика.НаименованиеОтчета);
			
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ДобавитьОписаниеОшибки(Результат.ОписаниеОшибки, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		// Отмечаем прогресс подготовки файлов.
		СостояниеПрогресса.ВыполненоДействий = СостояниеПрогресса.ВыполненоДействий + 1;
		ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
			ТребуемыйОтчетЗаемщика.НаименованиеОтчета,
			СостояниеПрогресса.ДополнительныеПараметры);

	КонецЦикла;

	// Если не зафиксировано ошибок, то считаем, что все прошло успешно.
	Результат.Выполнено = НЕ ЗначениеЗаполнено(Результат.ОписаниеОшибки)
		И НЕ ЗначениеЗаполнено(Результат.ТаблицаСообщений);

	Если Результат.Выполнено Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			"ПодготовкаФайловДляОтправкиЗаявкиНаКредит",
			ВремяНачала,
			Банки.Количество());
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет)

	// Используем стандартную структуру с результатом выгрузки для единообразной обработки далее.
	РезультатВыгрузки = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	// Отчеты могли ранее сдаваться в ФНС другим пользователем.
	// Поэтому чтобы не возникало сообщений про нехватку прав доступа на выгрузки пакетов отчетов,
	// выполняем выгрузку в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПакета = ИнтерфейсыВзаимодействияБРО.ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет);
	УстановитьПривилегированныйРежим(Ложь);

	Если ЗначениеЗаполнено(СвойстваПакета.ОписаниеОшибки) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1"": %2'"), 
			РегламентированныйОтчет,
			СвойстваПакета.ОписаниеОшибки);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	ИначеЕсли НЕ ЭтоАдресВременногоХранилища(СвойстваПакета.Адрес) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выгрузке пакета файлов с отметкой ФНС для отчета ""%1""'"), 
			РегламентированныйОтчет);
		РезультатВыгрузки.Ошибки.Добавить(ТекстСообщения);
	Иначе
		РезультатВыгрузки.РеглОтчетВыгружен = Истина;
		РезультатВыгрузки.АдресФайлаВыгрузки = СвойстваПакета.Адрес;
		РезультатВыгрузки.ИмяФайлаВыгрузки   = СвойстваПакета.ИмяФайла;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;

КонецФункции

// Отправляет подписанные файлы.
//
Функция ОтправитьФайлы(Параметры)

	КлючеваяОперация = "";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда
		КлючеваяОперация = "ОтправкаЗаявкаНаКредит";
	ИначеЕсли Параметры.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		КлючеваяОперация = "ОтправкаАкцептаЗаявкаНаКредит";
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Транзакции");
	Результат.Вставить("НеОтправленныеТранзакции");
	
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "транзакции";
	СостояниеПрогресса.КоличествоДействий = ?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество() + 1, 33);
	СостояниеПрогресса.ВыполненоДействий = 1;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Формирование транзакций отправки...'"),
		СостояниеПрогресса.ДополнительныеПараметры);

	// Создание транзакций обмена с банками.
	ПараметрыТранзакций = УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();
	ПараметрыТранзакций.ИдентификаторВоВременномХранилище = Параметры.ИдентификаторВременногоХранилищаТранзакций;
	ПараметрыТранзакций.Сервис              = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	ПараметрыТранзакций.ТипДокументооборота = Перечисления.ДокументооборотыОбменаСБанками.ЗаявкаНаКредит;
	ПараметрыТранзакций.ПараметрыПрогрессаВыполнения = СостояниеПрогресса.ДополнительныеПараметры;
	
	ПараметрыТранзакций.Предмет                     = Параметры.ПредметОбмена; // предмет обмена с банками
	ПараметрыТранзакций.ДокументооборотыПолучателей = Параметры.ДокументооборотыПолучателей;
	ПараметрыТранзакций.ТипТранзакции               = Параметры.ТипТранзакции;
	ПараметрыТранзакций.ОтпечатокСертификатаПодписи = Параметры.ОтпечатокСертификата;
	ПараметрыТранзакций.Организация =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПредметОбмена, "Организация"); // организация-абонент

	РезультатОперации = УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(ПараметрыТранзакций);
	Если Не РезультатОперации.Выполнено Тогда
			
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
		
	// Отправка подготовленных транзакций.
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "отправка";
	СостояниеПрогресса.КоличествоДействий = РезультатОперации.Транзакции.Количество() + 1;
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Отправка файлов...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	Результат.Транзакции = РезультатОперации.Транзакции;

	РезультатОперации = УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		РезультатОперации.Транзакции,
		СостояниеПрогресса.ДополнительныеПараметры);
	Результат.НеОтправленныеТранзакции = РезультатОперации.НеОтправленныеТранзакции;
	Если Не РезультатОперации.Выполнено Тогда
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;

	Результат.Выполнено = Истина;
	
	Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			КлючеваяОперация,
			ВремяНачала,
			?(ЗначениеЗаполнено(Параметры.Банки), Параметры.Банки.Количество(), 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#Область РаботаСДатами

Функция КоличествоЛет(Дата1, Дата2)

	Если НЕ ЗначениеЗаполнено(Дата1)
		ИЛИ НЕ ЗначениеЗаполнено(Дата2)
		ИЛИ Дата2 <= Дата1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = Год(Дата2) - Год(Дата1);
	
	Месяц1 = Месяц(Дата1);
	Месяц2 = Месяц(Дата2);
	
	Если Месяц1 > Месяц2 Тогда
		Результат = Результат - 1;
	ИначеЕсли Месяц1 = Месяц2 
		И День(Дата1) > День(Дата2) Тогда
		Результат = Результат - 1;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция КоличествоМесяцев(Дата1, Дата2)

	Если НЕ ЗначениеЗаполнено(Дата1)
		ИЛИ НЕ ЗначениеЗаполнено(Дата2)
		ИЛИ Дата2 <= Дата1 Тогда
		Возврат 0;
	КонецЕсли;

	Результат = (Год(Дата2) - Год(Дата1)) * 12 + (Месяц(Дата2) - Месяц(Дата1));

	Если День(Дата1) > День(Дата2) Тогда
		Результат = Результат - 1;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОтчетностьЗаемщика

Процедура ПрочитатьОтчетностьЗаемщика(СведенияОЗаемщике, ДатаЗаявки, Банк, ХранилищеXML, СведенияОБанках)
	
	ОтчетностьЗаемщика = Новый ТаблицаЗначений;
	ОтчетностьЗаемщика.Колонки.Добавить("ВидОтчета", Новый ОписаниеТипов("Строка"));
	ОтчетностьЗаемщика.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов("Строка"));
	ОтчетностьЗаемщика.Колонки.Добавить("КоличествоПериодов", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ОтчетностьЗаемщика.Колонки.Добавить("Счета", Новый ОписаниеТипов("СписокЗначений"));
	ОтчетностьЗаемщика.Колонки.Добавить("КодСчета", Новый ОписаниеТипов("Строка"));
	ОтчетностьЗаемщика.Колонки.Добавить("ПредставлениеОтчета", Новый ОписаниеТипов("Строка"));
	ОтчетностьЗаемщика.Колонки.Добавить("НомерГруппыОтчета", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ОтчетностьЗаемщика.Колонки.Добавить("ПорядокСортировкиПоМесяцам", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	УсловияКредитования = ЗаявкиНаКредит.УсловияКредитованияXDTO(ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем актуальный список отчетности, который требуется банку.
	ДействующиеТребования = ДействующиеТребованияНаДату(УсловияКредитования.ОтчетностьЗаемщика, ДатаЗаявки);
	Если ДействующиеТребования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЮрЛицо = СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Для Каждого ОтчетЗаемщика Из ДействующиеТребования.ОтчетЗаемщика Цикл
		
		ОтчетПрименимКЗаемщику     = Ложь;
		ПериодОтчета               = ОтчетЗаемщика.ПериодОтчета;
		КодСчета                   = "";
		НомерГруппыОтчета          = 2;
		ПорядокСортировкиПоМесяцам = 0;
		
		// Количество периодов, за который необходимо предоставлять отчет.
		Если ЗначениеЗаполнено(ОтчетЗаемщика.КоличествоПериодов) Тогда
			КоличествоПериодов = ОтчетЗаемщика.КоличествоПериодов;
		Иначе
			КоличествоПериодов = 1;
		КонецЕсли;
		
		Если ОтчетЗаемщика.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
			// Бух.отчетность только для юр.лиц, ИП бух.учет вести не обязаны.
			ОтчетПрименимКЗаемщику = ЭтоЮрЛицо;
			НомерГруппыОтчета = 1;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
			// ОСВ возможно формировать для любого заемщика.
			ОтчетПрименимКЗаемщику = Истина;
			НомерГруппыОтчета = 90;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "КарточкаСчета" 
			ИЛИ ОтчетЗаемщика.ВидОтчета = "АнализСчета" Тогда
			// Стандартные бухгалтерские отчеты возможно формировать для любого заемщика.
			ОтчетПрименимКЗаемщику = Истина;
			НомерГруппыОтчета = 100;
			КодСчета = СокрЛП(ОтчетЗаемщика.Счет);
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияПрибыль" Тогда
			ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
				И (УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки)
				ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки - 1));
				
			Если ОтчетПрименимКЗаемщику И ПериодОтчета = "ПредыдущийМесяц" Тогда
				// Месячные отчеты могут быть только в том случае, если налогоплательщик уплачивает авансы по налогу на прибыль ежемесячно.
				ПорядокУплатыАвансов   = УчетнаяПолитика.ПорядокУплатыАвансов(СведенияОЗаемщике.Организация, ДатаЗаявки);
				ОтчетПрименимКЗаемщику = ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно
					ИЛИ ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
			КонецЕсли;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияНДС" Тогда
			// Всегда за предыдущий квартал.
			ПериодОтчета = "ПредыдущийКвартал";
			ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
				И (УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаЗаявки)
				ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияУСН" Тогда
			// Всегда за предыдущий год.
			ПериодОтчета           = "ПредыдущийГод";
			ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
				И (УчетнаяПолитика.ПрименяетсяУСН(СведенияОЗаемщике.Организация, ДатаЗаявки)
				ИЛИ УчетнаяПолитика.ПрименяетсяУСН(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
		
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияЕНВД" Тогда
			// Всегда за предыдущий квартал.
			ПериодОтчета = "ПредыдущийКвартал";
			
			ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
				И (УчетнаяПолитика.ПлательщикЕНВД(СведенияОЗаемщике.Организация, ДатаЗаявки)
				ИЛИ УчетнаяПолитика.ПлательщикЕНВД(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
		
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "Декларация3НДФЛ" Тогда
			// Всегда за предыдущий год.
			ПериодОтчета = "ПредыдущийГод";
			
			ОтчетПрименимКЗаемщику = СведенияОЗаемщике.ПодключенДокументооборотСКонтролирующимОрганом
				И (УчетнаяПолитика.ПлательщикНДФЛ(СведенияОЗаемщике.Организация, ДатаЗаявки)
				ИЛИ УчетнаяПолитика.ПлательщикНДФЛ(СведенияОЗаемщике.Организация, НачалоГода(ДатаЗаявки) - 1));
			
		КонецЕсли;
		
		Если НЕ ОтчетПрименимКЗаемщику Тогда
			Продолжить;
		КонецЕсли;
		
		// Подбираем вариант сортировки по месяцам в зависимости от периода отчета
		ВариантыСортировкиПоМесяцам = Новый Структура;
		ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийГод", 12);
		ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийКвартал", 3);
		ВариантыСортировкиПоМесяцам.Вставить("ПредыдущийМесяц", 1);
		ВариантыСортировкиПоМесяцам.Свойство(ПериодОтчета, ПорядокСортировкиПоМесяцам);
		
		СворачиватьВОднуСтроку = ОтчетЗаемщика.ВидОтчета = "АнализСчета" 
			ИЛИ ОтчетЗаемщика.ВидОтчета = "КарточкаСчета"
			ИЛИ ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость";
		
		// Отчеты одного вида за одинаковое количество периодов сворачиваем в одну строку.
		// Анализ счета и карточка счета всегда сворачивается до одной строки, независимо
		// от количества периодов.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВидОтчета", ОтчетЗаемщика.ВидОтчета);
		Если НЕ СворачиватьВОднуСтроку Тогда
			ПараметрыОтбора.Вставить("ПериодОтчета", ПериодОтчета);
			ПараметрыОтбора.Вставить("КоличествоПериодов", КоличествоПериодов);
		КонецЕсли;
		СуществующиеСтроки = ОтчетностьЗаемщика.НайтиСтроки(ПараметрыОтбора);
		
		Если СуществующиеСтроки.Количество() > 0 Тогда
			СуществующаяСтрока = СуществующиеСтроки[0];
			Если НЕ ПустаяСтрока(КодСчета) И СуществующаяСтрока.Счета.НайтиПоЗначению(КодСчета) = Неопределено Тогда
				СуществующаяСтрока.Счета.Добавить(КодСчета);
				СуществующаяСтрока.Счета.СортироватьПоЗначению();
				СуществующаяСтрока.КодСчета = СуществующаяСтрока.Счета[0].Значение;
			КонецЕсли;
			
			ПериодыОтчетовРазличаются = ПериодОтчета <> СуществующаяСтрока.ПериодОтчета
				ИЛИ КоличествоПериодов <> СуществующаяСтрока.КоличествоПериодов;
				
			Если СворачиватьВОднуСтроку И ПериодыОтчетовРазличаются Тогда
				СуществующаяСтрока.ПериодОтчета = "НесколькоПериодов";
				СуществующаяСтрока.КоличествоПериодов = 0;
			КонецЕсли;
		Иначе
			СписокСчетов = Новый СписокЗначений;
			Если НЕ ПустаяСтрока(КодСчета) Тогда
				СписокСчетов.Добавить(КодСчета);
			КонецЕсли;
			
			НоваяСтрока = ОтчетностьЗаемщика.Добавить();
			НоваяСтрока.ВидОтчета = ОтчетЗаемщика.ВидОтчета;
			НоваяСтрока.ПериодОтчета = ПериодОтчета;
			НоваяСтрока.КоличествоПериодов = КоличествоПериодов;
			НоваяСтрока.Счета = СписокСчетов;
			НоваяСтрока.КодСчета = КодСчета;
			НоваяСтрока.НомерГруппыОтчета = НомерГруппыОтчета;
			НоваяСтрока.ПорядокСортировкиПоМесяцам = ПорядокСортировкиПоМесяцам;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтчетностьЗаемщика.Сортировать("НомерГруппыОтчета, ВидОтчета, КодСчета, ПорядокСортировкиПоМесяцам");
	
	// Сформируем представление отчета для пользователя.
	Для Каждого СтрокаТаблицы Из ОтчетностьЗаемщика Цикл
		
		Если СтрокаТаблицы.ВидОтчета = "АнализСчета" Тогда
			ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Анализ %1 %2'"),
				?(СтрокаТаблицы.Счета.Количество() > 1, НСтр("ru = 'счетов'"), НСтр("ru = 'счета'")),
				СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
		ИначеЕсли СтрокаТаблицы.ВидОтчета = "КарточкаСчета" Тогда
			ПредставлениеОтчета = СтрШаблон(НСтр("ru = 'Операции по %1 %2'"),
				?(СтрокаТаблицы.Счета.Количество() > 1, НСтр("ru = 'счетам'"), НСтр("ru = 'счету'")),
				СтрСоединить(СтрокаТаблицы.Счета.ВыгрузитьЗначения(), ", "));
		Иначе
			ВидОтчетаБРО  = ВидОтчетаЗаемщикаXDTOвИдентификаторБРО(СтрокаТаблицы.ВидОтчета);
			ПредставлениеОтчета = ПредставлениеОтчета(ВидОтчетаБРО);
		КонецЕсли;
		
		ПредставлениеПериода = "";
		Если СтрокаТаблицы.ПериодОтчета = "НесколькоПериодов" Тогда
			ПредставлениеПериода = НСтр("ru = 'за несколько периодов'");
		ИначеЕсли СтрокаТаблицы.ПериодОтчета = "СНачалаТекущегоГода" Тогда
			ПредставлениеПериода = НСтр("ru = 'с начала текущего года'");
		Иначе
			Если СтрокаТаблицы.ПериодОтчета = "ПредыдущийГод" Тогда
				ПредставлениеПериода = СтрокаСЧислом("; предыдущий год;; предыдущих года; предыдущих лет; предыдущих года",
					СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
			ИначеЕсли СтрокаТаблицы.ПериодОтчета = "ПредыдущийКвартал" Тогда
				ПредставлениеПериода = СтрокаСЧислом("; предыдущий квартал;; предыдущих квартала; предыдущих кварталов; предыдущих квартала",
					СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
			ИначеЕсли СтрокаТаблицы.ПериодОтчета = "ПредыдущийМесяц" Тогда
				ПредставлениеПериода = СтрокаСЧислом("; предыдущий месяц;; предыдущих месяца; предыдущих месяцев; предыдущих месяца",
					СтрокаТаблицы.КоличествоПериодов, ВидЧисловогоЗначения.Количественное, "L=ru");
			КонецЕсли;
			ПредставлениеПериода = НСтр("ru = 'за '")
				+ ?(СтрокаТаблицы.КоличествоПериодов > 1,
					СтрШаблон(НСтр("ru = '%1 '"), СтрокаТаблицы.КоличествоПериодов),
					"")
				+ ПредставлениеПериода;
		КонецЕсли;
		
		СтрокаТаблицы.ПредставлениеОтчета = СтрШаблон(НСтр("ru = '%1 %2'"),
			ПредставлениеОтчета,
			ПредставлениеПериода);
	КонецЦикла;
	
	СтрокаТаблицы = СведенияОБанках.Найти(Банк, "Банк");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.ОтчетностьЗаемщика = ОтчетностьЗаемщика;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТребованияБанкаКОтчетностиЗаемщика(СведенияОЗаемщике, ДатаЗаявки, Банк, ХранилищеXML, СоставОтчетности)

	УсловияКредитования = ЗаявкиНаКредит.УсловияКредитованияXDTO(ХранилищеXML);
	Если УсловияКредитования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем актуальный список отчетности, который требуется банку.
	ДействующиеТребования = ДействующиеТребованияНаДату(УсловияКредитования.ОтчетностьЗаемщика, ДатаЗаявки);
	Если ДействующиеТребования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПервогоМесяцаРаботы = НачалоМесяца(Макс(СведенияОЗаемщике.ДатаНачалаУчетаВПрограмме, СведенияОЗаемщике.ДатаРегистрации));
	КонецПоследнегоЗакрытогоМесяца    = КонецМесяца(СведенияОЗаемщике.ПериодРегистрации);
	Если КонецДня(ДатаЗаявки) = КонецМесяца(ДатаЗаявки) Тогда
		// Дата заявки совпадает с последним днем месяца, берем его целиком.
		КонецПоследнегоКалендарногоМесяца = КонецМесяца(ДатаЗаявки);
	Иначе
		// Учитываем последний полный завершенный календарный месяц перед датой заявки.
		КонецПоследнегоКалендарногоМесяца = НачалоМесяца(ДатаЗаявки) - 1;
	КонецЕсли;
	
	ЭтоЮрЛицо = СведенияОЗаемщике.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	// В списке требований банка присутствуют максимально возможный перечень отчетов.
	// В зависимости от вида организации (юридическое лицо или ИП), а также системы налогообложения,
	// определим из списка банка те отчеты, которые применимы к организации из заявки на кредит.
	Для Каждого ОтчетЗаемщика Из ДействующиеТребования.ОтчетЗаемщика Цикл
	
		ОтчетПрименимКЗаемщику  = Ложь;
		ДатаНачала              = '0001-01-01';
		ДатаОкончания           = '0001-01-01';
		ПериодОтчета            = ОтчетЗаемщика.ПериодОтчета;
		НакопительноСНачалаГода = Ложь; // Признак того, что отчет всегда формируется накопительно с начала года.
		КоличествоМесяцевВПериоде = 0;

		// По умолчанию считаем, что отсчитываем периоды до последнего закрытого месяца (включительно), 
		// но банк может заказать до последнего полного календарного месяца перед датой заявки (тоже включительно).
		Если ОтчетЗаемщика.ПраваяГраницаПериода = "КалендарныйМесяцДоДатыЗаявки" Тогда
			КонецМесяцаОтчета = КонецПоследнегоКалендарногоМесяца;
		Иначе
			КонецМесяцаОтчета = КонецПоследнегоЗакрытогоМесяца;
		КонецЕсли;

		// Количество периодов, за который необходимо предоставлять отчет.
		Если ЗначениеЗаполнено(ОтчетЗаемщика.КоличествоПериодов) Тогда
			КоличествоПериодов = ОтчетЗаемщика.КоличествоПериодов;
		Иначе
			КоличествоПериодов = 1;
		КонецЕсли;

		Если ОтчетЗаемщика.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
			// Бух.отчетность только для юр.лиц, ИП бух.учет вести не обязаны.
			ОтчетПрименимКЗаемщику = ЭтоЮрЛицо;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов);
			НакопительноСНачалаГода=Истина;
			
			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ПериодОтчета = "ПредыдущийМесяц" ИЛИ ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" ИЛИ ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			Иначе
				// Бух.отчетность всегда за период не более, чем за год.
				КоличествоМесяцевВПериоде = 12;
			КонецЕсли;
			
		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "КарточкаСчета"
			  ИЛИ ОтчетЗаемщика.ВидОтчета = "АнализСчета" 
			  ИЛИ ОтчетЗаемщика.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
			// Стандартные бухгалтерские отчеты возможно формировать для любого заемщика.
			ОтчетПрименимКЗаемщику = Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов);

			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			КонецЕсли;

		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияПрибыль" Тогда
			// Определим количество месяцев в периоде одного отчета в зависимости от параметров формирования.
			Если ПериодОтчета = "ПредыдущийМесяц" ИЛИ ОтчетЗаемщика.Периодичность = "Месяц" Тогда
				КоличествоМесяцевВПериоде = 1;
			ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" ИЛИ ОтчетЗаемщика.Периодичность = "Квартал" Тогда
				КоличествоМесяцевВПериоде = 3;
			Иначе
				// Декларация по прибыли всегда за период не более, чем за год.
				КоличествоМесяцевВПериоде = 12;
			КонецЕсли;
			
			НакопительноСНачалаГода= Истина;			
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов);

			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаНачала)
				ИЛИ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОЗаемщике.Организация, ДатаОкончания);
				
			Если ОтчетПрименимКЗаемщику И КоличествоМесяцевВПериоде = 1 Тогда
				// Месячные отчеты могут быть только в том случае, если налогоплательщик уплачивает авансы по налогу на прибыль ежемесячно.
				ПорядокУплатыАвансов   = УчетнаяПолитика.ПорядокУплатыАвансов(СведенияОЗаемщике.Организация, ДатаОкончания);
				ОтчетПрименимКЗаемщику = ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно
					ИЛИ ПорядокУплатыАвансов = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
			КонецЕсли;

		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияНДС" Тогда
			// Всегда за предыдущий квартал.
			КоличествоМесяцевВПериоде = 3;
			ПериодОтчета       = "ПредыдущийКвартал";
			ДатаОкончания      = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала         = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета , КоличествоПериодов);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНДС(СведенияОЗаемщике.Организация, ДатаНачала)
				ИЛИ УчетнаяПолитика.ПлательщикНДС(СведенияОЗаемщике.Организация, ДатаОкончания);

		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияУСН" Тогда
			// Всегда за предыдущий год.
			КоличествоМесяцевВПериоде = 12;
			ПериодОтчета           = "ПредыдущийГод";
			НакопительноСНачалаГода= Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);

		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "ДекларацияЕНВД" Тогда
			// Всегда за предыдущий квартал.
			КоличествоМесяцевВПериоде = 3;
			ПериодОтчета       = "ПредыдущийКвартал";
			ДатаОкончания      = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала         = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета , КоличествоПериодов);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);

		ИначеЕсли ОтчетЗаемщика.ВидОтчета = "Декларация3НДФЛ" Тогда
			// Всегда за предыдущий год.
			КоличествоМесяцевВПериоде = 12;
			ПериодОтчета           = "ПредыдущийГод";
			НакопительноСНачалаГода= Истина;
			ДатаОкончания          = КонецПериодаОтчета(КонецМесяцаОтчета, ПериодОтчета);
			ДатаНачала             = НачалоПериодаОтчета(ДатаОкончания, ПериодОтчета, КоличествоПериодов);
				
			ОтчетПрименимКЗаемщику = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(
				СведенияОЗаемщике.Организация, ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
		Если НЕ ОтчетПрименимКЗаемщику Тогда
			Продолжить;
		КонецЕсли;

		КодСчета      = СокрЛП(ОтчетЗаемщика.Счет);
		ВидОтчетаБРО  = ВидОтчетаЗаемщикаXDTOвИдентификаторБРО(ОтчетЗаемщика.ВидОтчета);
		
		// В зависимости от указанной банком периодичности формируем несколько строк отчетов.
		// Периоды определяем, последовательно отступая назад в прошлое.
		ДатаНачала = Макс(ДатаНачала, НачалоПервогоМесяцаРаботы);
		ТекущаяДатаОкончания = ДатаОкончания;
		Пока ТекущаяДатаОкончания >= ДатаНачала Цикл

			// Определяем начало текущего периода.
			Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) Тогда
				ТекущаяДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаОкончания), - (КоличествоМесяцевВПериоде - 1));
				ТекущаяДатаНачала = Макс(ТекущаяДатаНачала, ДатаНачала);
			Иначе
				ТекущаяДатаНачала = ДатаНачала;
			КонецЕсли;
			Если НакопительноСНачалаГода Тогда
				ТекущаяДатаНачала = НачалоГода(ТекущаяДатаНачала);
			КонецЕсли;

			НоваяСтрока = СоставОтчетности.Добавить();
			НоваяСтрока.ВидОтчета     = ВидОтчетаБРО;
			НоваяСтрока.ДатаНачала    = ТекущаяДатаНачала;
			НоваяСтрока.ДатаОкончания = ТекущаяДатаОкончания;
			НоваяСтрока.КодСчета      = КодСчета;
			НоваяСтрока.Банк          = Банк;
			
			// Переходим к предыдущему периоду.
			Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) Тогда
				ТекущаяДатаОкончания = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ТекущаяДатаОкончания), - КоличествоМесяцевВПериоде));
			Иначе
				// Требуется только один период.
				Прервать;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Функция ДействующиеТребованияНаДату(ОтчетностьЗаемщика, Период)
	
	ДействующиеТребования = Неопределено;
	Для Каждого ТребованияБанка Из ОтчетностьЗаемщика Цикл
		Если ТребованияБанка.ДатаНачала <= Период
			И ТребованияБанка.ДатаОкончания >= Период Тогда
			ДействующиеТребования = ТребованияБанка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеТребования;
	
КонецФункции

// Возвращает по виду отчета из XML файла вид отчета БРО.
//
// Параметры:
//	ВидОтчетаXDTO - Строка - Вид отчета, как он задан в XML файле характеристик сервиса заявок на кредит.
//
// Возвращаемое значение:
//	Строка - идентификатор отчета.
//
Функция ВидОтчетаЗаемщикаXDTOвИдентификаторБРО(ВидОтчетаXDTO)

	Если ВидОтчетаXDTO = "КарточкаСчета" Тогда
		// На текущий момент поддерживается формирование карточек только
		// по счетам учета безналичных денежных средств в банках.
		Возврат "ОперацииПоБанковскимСчетам";
	
	Иначе
		Возврат ВидОтчетаXDTO;
		
	КонецЕсли;

КонецФункции

// Возвращает дату начала периода отчета, исходя из указанного периода в XML файле. 
// 
Функция НачалоПериодаОтчета(КонецПериода, ПериодОтчетаXDTO, КоличествоПериодов)

	Результат = '0001-01-01';
	КоличествоМесяцевВПериоде = 0;

	Если ПериодОтчетаXDTO = "ПредыдущийГод" Тогда
		КоличествоМесяцевВПериоде = 12;
		Если КонецПериода = КонецГода(КонецПериода) Тогда
			Результат = НачалоГода(КонецПериода);
	    Иначе
	    	Результат = НачалоГода(НачалоГода(КонецПериода) - 1);
	    КонецЕсли;
		
	ИначеЕсли ПериодОтчетаXDTO = "СНачалаТекущегоГода" Тогда
		КоличествоМесяцевВПериоде = Месяц(КонецПериода);
	    Результат = НачалоГода(КонецПериода);

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийКвартал" Тогда
		КоличествоМесяцевВПериоде = 3;
	    Результат = НачалоКвартала(КонецПериода);

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийМесяц" Тогда
		КоличествоМесяцевВПериоде = 1;
		Результат = НачалоМесяца(КонецПериода);

	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Документ.ЗаявкаНаКредит.НачалоПериодаОтчета(): Не поддерживаемый вид периода ""%1"" '"));
	    
	КонецЕсли;

	Если ЗначениеЗаполнено(КоличествоМесяцевВПериоде) И ЗначениеЗаполнено(КоличествоПериодов) Тогда
		Результат = ДобавитьМесяц(Результат, - (КоличествоПериодов - 1) * КоличествоМесяцевВПериоде);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает дату окончания периода отчета, исходя из указанного периода в XML файле 
// 
Функция КонецПериодаОтчета(КонецПоследнегоЗакрытогоМесяца, ПериодОтчетаXDTO)

	Результат = '0001-01-01';

	Если ПериодОтчетаXDTO = "ПредыдущийГод" Тогда
		Если КонецПоследнегоЗакрытогоМесяца = КонецГода(КонецПоследнегоЗакрытогоМесяца) Тогда
			Результат = КонецПоследнегоЗакрытогоМесяца;
	    Иначе
	    	Результат = НачалоГода(КонецПоследнегоЗакрытогоМесяца) - 1;
	    КонецЕсли;
		
	ИначеЕсли ПериодОтчетаXDTO = "СНачалаТекущегоГода" Тогда
	    Результат = КонецПоследнегоЗакрытогоМесяца;

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийКвартал" Тогда
		Если КонецПоследнегоЗакрытогоМесяца = КонецКвартала(КонецПоследнегоЗакрытогоМесяца) Тогда
			Результат = КонецПоследнегоЗакрытогоМесяца;
		Иначе
			Результат = НачалоКвартала(КонецПоследнегоЗакрытогоМесяца) - 1;
		КонецЕсли;

	ИначеЕсли ПериодОтчетаXDTO = "ПредыдущийМесяц" Тогда
		Результат = КонецПоследнегоЗакрытогоМесяца;

	Иначе

		ВызватьИсключение СтрШаблон(НСтр("ru = 'Документ.ЗаявкаНаКредит.КонецПериодаОтчета(): Не поддерживаемый вид периода ""%1"" '"));

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает полное пользовательское представление отчета по его параметрам.
//
Функция ПредставлениеОтчета(ВидОтчетаБРО, КодСчета = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено)

	// Определим пользовательское имя отчета.
	Если ВидОтчетаБРО = "БухгалтерскаяОтчетность" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Бухгалтерская отчетность'");

	ИначеЕсли ВидОтчетаБРО = "АнализСчета" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Анализ счета'");

	ИначеЕсли ВидОтчетаБРО = "ОперацииПоБанковскимСчетам" Тогда
		НаименованиеОтчета =  СтрШаблон(НСтр("ru = 'Операции по банковским счетам'"));

	ИначеЕсли ВидОтчетаБРО = "ОборотноСальдоваяВедомость" Тогда
		НаименованиеОтчета =  СтрШаблон(НСтр("ru = 'Оборотно-сальдовая ведомость'"));
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияПрибыль" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по налогу на прибыль'");

	ИначеЕсли ВидОтчетаБРО = "ДекларацияНДС" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по НДС'");

	ИначеЕсли ВидОтчетаБРО = "ДекларацияУСН" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по УСН'");

	ИначеЕсли ВидОтчетаБРО = "ДекларацияЕНВД" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация по ЕНВД'");

	ИначеЕсли ВидОтчетаБРО = "Декларация3НДФЛ" Тогда
		НаименованиеОтчета =  НСтр("ru = 'Декларация 3-НДФЛ'");
	
	Иначе
		НаименованиеОтчета = ВидОтчетаБРО;
	
	КонецЕсли;

	Подстроки = Новый Массив;
	Подстроки.Добавить(НаименованиеОтчета);
	
	Если ЗначениеЗаполнено(КодСчета) Тогда
		Подстроки.Добавить(КодСчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПериодПредставление = ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), НСтр("ru = 'ФП=Истина'"));
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'за %1'"), ПериодПредставление));
	КонецЕсли;
	
	Возврат СтрСоединить(Подстроки, " ");

КонецФункции

Функция ИсточникОтчета(ВидОтчетаБРО)

	Если ВидОтчетаБРО = "БухгалтерскаяОтчетность" Тогда
		// Бухгалтерская отчетность может быть либо общая ("РегламентированныйОтчетБухОтчетность")
		// либо малых предприятий ("РегламентированныйОтчетБухОтчетностьМП").
		// В заявке сохраняем в ИсточникОтчета строку с обобщенным наименованием, 
		// подбор отчетов нужно выполнять среди обоих видов.
		Возврат "БухгалтерскаяОтчетность";

	ИначеЕсли ВидОтчетаБРО = "АнализСчета" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";

	ИначеЕсли ВидОтчетаБРО = "ОперацииПоБанковскимСчетам" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";

	ИначеЕсли ВидОтчетаБРО = "ОборотноСальдоваяВедомость" Тогда
		Возврат "РасшифровкиБухгалтерскойОтчетности";
		
	ИначеЕсли ВидОтчетаБРО = "ДекларацияПрибыль" Тогда
		Возврат "РегламентированныйОтчетПрибыль";

	ИначеЕсли ВидОтчетаБРО = "ДекларацияНДС" Тогда
		Возврат "РегламентированныйОтчетНДС";

	ИначеЕсли ВидОтчетаБРО = "ДекларацияУСН" Тогда
		Возврат "РегламентированныйОтчетУСН";

	ИначеЕсли ВидОтчетаБРО = "ДекларацияЕНВД" Тогда
		Возврат "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход";

	ИначеЕсли ВидОтчетаБРО = "Декларация3НДФЛ" Тогда
		Возврат "РегламентированныйОтчет3НДФЛ";
	
	Иначе
		// Оставляем имя отчета без изменения.
		Возврат ВидОтчетаБРО;

	КонецЕсли;

КонецФункции

// Для переданного набора аналитик подбирает соответствующие им регламентированные отчеты, выбирая последний по
// статусу (сдан/подготовлен/в работе) и версии (номеру корректировки).
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой выбираются отчеты.
//  ПараметрыРеглОтчетов - ТаблицаЗначений - см. описание одноименного параметра в ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты()
//  ОтборПоСтатусу - Строка - определяет отбор по статусу сдачи отчета:
//                       * "СданЧерез1СОтчетность" - только отчеты, уже сданные через 1С-Отчетность;
//                       * "Сдано" - только отчеты, уже получившиеся статус "Сдано" (вручную или автоматически);
//                       * любое другое значение - отбор по статусу не накладывается.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. описание колонки "Документы" в ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты()
//
Функция ПодобратьРегламентированныеОтчеты(Организация, ПараметрыРеглОтчетов, ОтборПоСтатусу = "")
	
	Если ПараметрыРеглОтчетов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Добавляем колонки для вызова функции БРО.
	Если ПараметрыРеглОтчетов.Колонки.Найти("Организация") = Неопределено Тогда
		ПараметрыРеглОтчетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ПараметрыРеглОтчетов.ЗаполнитьЗначения(Организация, "Организация");
	КонецЕсли;
	
	Если ПараметрыРеглОтчетов.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ПараметрыРеглОтчетов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	КонецЕсли;
	
	Если ПараметрыРеглОтчетов.Колонки.Найти("Правило") = Неопределено Тогда
		ПараметрыРеглОтчетов.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	КонецЕсли;
	
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыРеглОтчетов, Истина);
	
	// Структура таблиц во всех строках одна и та же.
	ПодготавливаемаяТаблица = ПараметрыРеглОтчетов[0].Документы.СкопироватьКолонки();
	ПодготавливаемаяТаблица.Колонки.Добавить("ИсточникОтчета", ПараметрыРеглОтчетов.Колонки.ИсточникОтчета.ТипЗначения);
		
	СданоСтрокой        = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	ПодготовленоСтрокой = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой();

	Для Каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		
		РегистрацииВНалоговыхОрганах = Новый Соответствие;
		Для Каждого СтрокаРеглОтчета Из ПараметрыРеглОтчета.Документы Цикл
			
			Если ОтборПоСтатусу = "Сдано" Или ОтборПоСтатусу = "СданЧерез1СОтчетность" Тогда
		
				Если СтрокаРеглОтчета.Статус <> СданоСтрокой Тогда
					Продолжить;
				КонецЕсли;
				Если ОтборПоСтатусу = "СданЧерез1СОтчетность"
				   И СтрокаРеглОтчета.СостояниеСдачиОтчетности <> Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
				
			// Если есть корректировочный отчет, то подставляем его.
			ТекущийПриоритет = ?(СтрокаРеглОтчета.ВариантОтчета = "П", "1", "2") + СтрокаРеглОтчета.ВариантОтчета;

			Если СтрокаРеглОтчета.Статус = СданоСтрокой Тогда
				ТекущийПриоритет = ТекущийПриоритет + "3";
			ИначеЕсли СтрокаРеглОтчета.Статус = ПодготовленоСтрокой Тогда
				ТекущийПриоритет = ТекущийПриоритет + "2";
			Иначе
				ТекущийПриоритет = ТекущийПриоритет + "1";
			КонецЕсли;
			
			НаиболееПриоритетный = РегистрацииВНалоговыхОрганах[СтрокаРеглОтчета.ПредставлениеКонтролирующегоОргана];
			Если НаиболееПриоритетный <> Неопределено И ТекущийПриоритет <= НаиболееПриоритетный.Приоритет Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаиболееПриоритетный = Неопределено Тогда
				
				НаиболееПриоритетный = Новый Структура("СтрокаРеглОтчета,Приоритет");
				РегистрацииВНалоговыхОрганах.Вставить(СтрокаРеглОтчета.ПредставлениеКонтролирующегоОргана, НаиболееПриоритетный);
				
			КонецЕсли;		
			НаиболееПриоритетный.Приоритет        = ТекущийПриоритет;
			НаиболееПриоритетный.СтрокаРеглОтчета = СтрокаРеглОтчета;
			
		КонецЦикла; 
		
		Для Каждого НаиболееПриоритетный Из РегистрацииВНалоговыхОрганах Цикл
		
			НоваяСтрока = ПодготавливаемаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НаиболееПриоритетный.Значение.СтрокаРеглОтчета);
			НоваяСтрока.ИсточникОтчета = ПараметрыРеглОтчета.ИсточникОтчета;
		
		КонецЦикла;
	
	КонецЦикла;

	Возврат ПодготавливаемаяТаблица;
	
КонецФункции

Процедура ПодобратьБухОтчетность(СведенияОЗаемщике, НовыеОтчеты)

	// Бухгалтерская отчетность может предоставлять в виде разных форм,
	// учитываем все, но с приоритетом общей формы.
	ИсточникиБухОтчетности = ИсточникБухгалтерскойОтчетности();
	
	ИскомыеОтчеты = НовыеОтчеты.СкопироватьКолонки("ИсточникОтчета, ДатаОкончания");
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		Если НовыйОтчет.ИсточникОтчета <> "БухгалтерскаяОтчетность" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
			ИскомыйОтчет = ИскомыеОтчеты.Добавить();
			ИскомыйОтчет.ИсточникОтчета = ИсточникБухОтчетности;
			ИскомыйОтчет.ДатаОкончания  = НовыйОтчет.ДатаОкончания;
		КонецЦикла;
		
	КонецЦикла;

	Если ИскомыеОтчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Ищем отчеты вне зависимости от статус сдачи, так как:
	//	- за промежуточные периоды бухотчетность не сдается в ФНС;
	//	- даже если годовая бух.отчетность сдана не через 1С-Отчетность, ее нужно включить в состав заявки.
	БухОтчетность = ПодобратьРегламентированныеОтчеты(
		СведенияОЗаемщике.Организация, ИскомыеОтчеты);
		
	Если НЕ ЗначениеЗаполнено(БухОтчетность) Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("ИсточникОтчета, ДатаОкончания");
		
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		
		Если НовыйОтчет.ИсточникОтчета <> "БухгалтерскаяОтчетность" Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
		
			Если ИсточникБухОтчетности = "РегламентированныйОтчетБухОтчетностьМП" И НовыйОтчет.ДатаОкончания >= '2019-01-01' Тогда
				// Выгрузка упрощенной бух.отчетность по форме в редакции приказа Минфина России от 19.04.2019 № 61
				// пока не поддерживается, поэтому пропускаем такой вариант.
				Продолжить;
			КонецЕсли;
		
			Отбор.ИсточникОтчета = ИсточникБухОтчетности;
			Отбор.ДатаОкончания  = НовыйОтчет.ДатаОкончания;
			
			НайденныеСтроки = БухОтчетность.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
			
				НайденнаяСтрока = НайденныеСтроки[0];

				// Пока не утвержден формат выгрузки бух.отчетности по форме 2019 года
				// используем форму как в 2018 году, чтобы ее можно было выгрузить для передачи в банк в электронном виде.
				// Поэтому даем выбрать только ее.
				Если ИсточникБухОтчетности = "РегламентированныйОтчетБухОтчетность" И НовыйОтчет.ДатаОкончания >= '2019-01-01' Тогда
					ВыбраннаяФорма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСтрока.Ссылка, "ВыбраннаяФорма");
					Если ВыбраннаяФорма <> "ФормаОтчета2011Кв4" Тогда
						// Найденная форма не подходит, пропускаем ее.
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Запоминаем ссылку и представление найденного рег.отчета.
				НовыйОтчет.РегламентированныйОтчет = НайденнаяСтрока.Ссылка;
				
				ОписаниеОтчета                = ОписаниеОтчета(НайденнаяСтрока);
				НовыйОтчет.НаименованиеОтчета = ОписаниеОтчета.НаименованиеОтчета;
				НовыйОтчет.СостояниеОтчета    = ОписаниеОтчета.СостояниеОтчета;
				
				// Нашли сохраненную бух.отчетность за период, останавливаем на этом поиск.
				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПодобратьНалоговыеДекларации(СведенияОЗаемщике, НовыеОтчеты)

	ИскомыеОтчеты = НовыеОтчеты.СкопироватьКолонки("ИсточникОтчета, ДатаОкончания");
	Для Каждого НовыйОтчет Из НовыеОтчеты Цикл
		// Выбираем отчеты, которые являются декларациями.
		Если НовыйОтчет.ИсточникОтчета = "БухгалтерскаяОтчетность"
			ИЛИ НовыйОтчет.ИсточникОтчета = "РасшифровкиБухгалтерскойОтчетности" Тогда
			Продолжить;
		КонецЕсли;
		
		ИскомыйОтчет = ИскомыеОтчеты.Добавить();
		ЗаполнитьЗначенияСвойств(ИскомыйОтчет, НовыйОтчет);
		
	КонецЦикла;

	Если ИскомыеОтчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Ищем только те отчеты, которые были сданы через 1С-Отчетность,
	// отправленные по другим каналам не учитываем.
	НалоговыеДекларации = ПодобратьРегламентированныеОтчеты(
		СведенияОЗаемщике.Организация, ИскомыеОтчеты, "СданЧерез1СОтчетность");
		
	Если НЕ ЗначениеЗаполнено(НалоговыеДекларации) Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("ИсточникОтчета, ДатаОкончания");
		
	Для Каждого ИскомыйОтчет Из ИскомыеОтчеты Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ИскомыйОтчет);
		
		ЗапрошенныеОтчеты    = НовыеОтчеты.НайтиСтроки(Отбор);
		Если ЗапрошенныеОтчеты.Количество() = 0 Тогда
			// В обычной ситуации не должны сюда попасть, что-то пошло не так.
			Продолжить;
		КонецЕсли;
		
		НайденныеДекларации  = НалоговыеДекларации.НайтиСтроки(Отбор);
		
		// За один и тот же период некоторые декларации могут предоставляться в разные налоговые органы по месту регистрации,
		// например, декларация ЕНВД.
		// Поэтому количество строк в таблице НалоговыеДекларации может быть больше, 
		// чем в исходной таблице ИскомыеОтчеты.
		// Добавляем в исходную таблицу НовыеОтчеты все такие найденные декларации.
		ЗапрошенныйОтчет = ЗапрошенныеОтчеты[0];
		ПерваяЗапись     = Истина;
		
		Для Каждого НайденнаяСтрока Из НайденныеДекларации Цикл
		
			Если ПерваяЗапись Тогда
				// Меняем свойства в строка самого отчета.
				НовыйОтчет = ЗапрошенныйОтчет;
			Иначе
				// Включаем в состав отчетности дополнительную строку.
				НовыйОтчет = НовыеОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйОтчет, ЗапрошенныйОтчет);
			КонецЕсли;
		
			// Запоминаем ссылку и представление найденного рег.отчета.
			НовыйОтчет.РегламентированныйОтчет = НайденнаяСтрока.Ссылка;

			ОписаниеОтчета                = ОписаниеОтчета(НайденнаяСтрока);
			НовыйОтчет.НаименованиеОтчета = ОписаниеОтчета.НаименованиеОтчета;
			НовыйОтчет.СостояниеОтчета    = ОписаниеОтчета.СостояниеОтчета;

			ПерваяЗапись = Ложь;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли