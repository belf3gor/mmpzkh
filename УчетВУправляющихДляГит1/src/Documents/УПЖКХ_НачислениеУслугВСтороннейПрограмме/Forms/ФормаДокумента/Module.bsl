
#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура заполнения дополнительных данных
// в строках дерева.
Процедура ЗаполнитьДопДанныеВТаблице()
	
	СписокЛС = Объект.Начисления.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиТаблицы = Объект.Начисления.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаТаблицы Из СтрокиТаблицы Цикл
			ТекСтрокаТаблицы.Помещение = ТекСтрока.Помещение;
			ТекСтрокаТаблицы.Владелец  = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Пересчитывает сумму в строке ТЧ "Начисления".
//
// Параметры
//  СтрокаТЧ - строка табличной части.
//
Процедура ПересчитатьСуммуСтрокиТЧ(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
	
КонецПроцедуры // ПересчитатьСуммуСтрокиТЧ()

&НаСервере
// Формирует таблицу соответствия разделов учета и видов начисления.
//
// Возвращаемое значений:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуРазделовИВидов()
	
	Если ТаблицаРазделовИВидов.Количество() = 0 Тогда
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_НачислениеУслугВСтороннейПрограмме"));
		ТаблицаРазделовИВидов.Загрузить(ДокументОбъект.ПолучитьТаблицуРазделовИВидовИзМакета());
	КонецЕсли;
	
	Возврат ТаблицаРазделовИВидов.Выгрузить();
	
КонецФункции // ПолучитьТаблицуРазделовИВидов()

&НаСервере
// Формирует таблицу значений по умолчанию для каждого способа расчета услуг.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуЗначенийПоУмолчанию()
	
	Если ТаблицаЗначенийПоУмолчанию.Количество() = 0 Тогда
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_НачислениеУслугВСтороннейПрограмме"));
		ТаблицаЗначенийПоУмолчанию.Загрузить(ДокументОбъект.ПолучитьТаблицуЗначенийПоУмолчаниюИзМакета());
	КонецЕсли;
	
	Возврат ТаблицаЗначенийПоУмолчанию.Выгрузить();
	
КонецФункции // ПолучитьТаблицуЗначенийПоУмолчанию()

&НаСервере
// Процедура устанавливает точность для поля ввода "Количество" табличного поля "Начисления"
// в соответствии с выбранной пользователем точностью в настройках программы.
Процедура УстановитьТочностьОбъемовНачислений()
	Элементы.НачисленияКоличество.Формат = "ЧДЦ=" + Строка(Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить()) + "";
КонецПроцедуры

&НаСервере
// Формирует список видов начисления, соответствующих текущему разделу учета.
//
// Параметры:
//  ТаблицаРазделовИВидов - таблица соответствия разделов учета и видов начисления.
//  РазделУчета - текущий раздел учета.
//
// Возвращаемое значение:
//  СписокЗначений - список видов начисления.
//
Функция ПолучитьСписокДоступныхВидовНачисления(РазделУчета, Услуга)
	
	СписокВидовНачисления = Новый СписокЗначений;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Услуга = УслугаДобровольногоСтрахования Тогда
		СписокВидовНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		
	Иначе
		врТаблицаРазделовИВидов = ПолучитьТаблицуРазделовИВидов();
		
		СтрокиРазделаУчета  = врТаблицаРазделовИВидов.НайтиСтроки(Новый Структура("РазделУчета", РазделУчета));
		ТаблицаРазделаУчета = врТаблицаРазделовИВидов.Скопировать(СтрокиРазделаУчета);
		
		// Если услуга рассчитывается по ПУ, вид начисления "Начисление" ей не соответствует.
		Если ЗначениеЗаполнено(Услуга) И (Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		 Или Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		 И РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
			СтрокаРазделаНачисления = ТаблицаРазделаУчета.Найти(Перечисления.УПЖКХ_ВидыНачислений.Начисление, "ВидНачисления");
			
			Если Не СтрокаРазделаНачисления = Неопределено Тогда
				ТаблицаРазделаУчета.Удалить(СтрокаРазделаНачисления);
			КонецЕсли;
		КонецЕсли;
		
		СписокВидовНачисления.ЗагрузитьЗначения(ТаблицаРазделаУчета.ВыгрузитьКолонку("ВидНачисления"));
	КонецЕсли;
	
	Возврат СписокВидовНачисления;
	
КонецФункции // ПолучитьСписокДоступныхВидовНачисления()

&НаСервере
// Проверяет, соответствует ли текущий вид начисления текущему разделу учета.
// Если не соответствует, устанавливает меняет значение текущего вида начисления на значение по умолчанию
// для текущего раздела учета.
//
// Параметры:
//  ТаблицаРазделовИВидов - таблица соответствия разделов учета и видов начисления.
//  РазделУчета - текущий раздел учета.
//  ВидНачисления - текущий вид начисления.
//
Процедура ПроверитьЗначениеВидаНачисления(ТекущаяСтрока)
	
	ДанныеТекущейСтроки = Объект.Начисления.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// При смене значения поля очистим поля "Льготник", "Льготная категория".
	ДанныеТекущейСтроки.Льготник          = Справочники.УПЖКХ_Жильцы.ПустаяСсылка();
	ДанныеТекущейСтроки.ЛьготнаяКатегория = Справочники.КВП_ЛьготныеКатегории.ПустаяСсылка();
	
	СпособРасчета = ДанныеТекущейСтроки.Услуга.СпособРасчета;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ДанныеТекущейСтроки.Услуга = УслугаДобровольногоСтрахования Тогда
		
		// Для добровольного страхования в качетстве раздела учета можно указать только "Добровольное страхование".
		// В качестве вида начисления - только "Начисление".
		Если Не ДанныеТекущейСтроки.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование Тогда
			ДанныеТекущейСтроки.РазделУчета   = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование;
			ДанныеТекущейСтроки.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
			ДанныеТекущейСтроки.ВидТарифа     = Перечисления.КВП_ВидыТарифов.Общий;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для добровольного страхования в качетстве раздела учета можно указать только ""Добровольное страхование""");
		КонецЕсли;
		
	Иначе
		
		врТаблицаРазделовИВидов = ПолучитьТаблицуРазделовИВидов();
		
		СтрокиРазделаУчета  = врТаблицаРазделовИВидов.НайтиСтроки(Новый Структура("РазделУчета", ДанныеТекущейСтроки.РазделУчета));
		ТаблицаРазделаУчета = врТаблицаРазделовИВидов.Скопировать(СтрокиРазделаУчета);
		
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_НачислениеУслугВСтороннейПрограмме"));
		
		Если Не ДокументОбъект.ВидНачисленияЗаполненКорректно(ТаблицаРазделаУчета, СпособРасчета, ДанныеТекущейСтроки.ВидНачисления) Тогда
			Если (СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			 Или СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
			 И ДанныеТекущейСтроки.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
				ДанныеТекущейСтроки.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления;
			
			Иначе
				ДанныеТекущейСтроки.ВидНачисления = ТаблицаРазделаУчета.Найти(Истина, "ЗначениеПоУмолчанию").ВидНачисления;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗначениеВидаНачисления()

&НаСервере
// Формирует список разделов учета, доступных для данного документа.
//
// Параметры:
//  ТаблицаРазделовИВидов - таблица соответствия разделов учета и видов начисления.
//
// Возвращаемое значение:
//  СписокЗначений - список доступных разделов учета.
//
Функция ПолучитьСписокДоступныхРазделовУчета(Услуга)
	
	врТаблицаРазделовИВидов = ПолучитьТаблицуРазделовИВидов();
	
	СписокДоступныхРазделовУчета = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Услуга = УслугаДобровольногоСтрахования Тогда
			СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование);
		Иначе
			СпособРасчета = Услуга.СпособРасчета;
			
			СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
			СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Льготы);
			СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Пени);
			
			Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			 
				СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
			ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка Тогда
				
				СписокДоступныхРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТаблицаРазделовУчета = врТаблицаРазделовИВидов.Скопировать();
		ТаблицаРазделовУчета.Свернуть("РазделУчета");
		
		СписокДоступныхРазделовУчета.ЗагрузитьЗначения(ТаблицаРазделовУчета.ВыгрузитьКолонку("РазделУчета"));
	КонецЕсли;
	
	Возврат СписокДоступныхРазделовУчета;
	
КонецФункции // ПолучитьСписокДоступныхРазделовУчета()

&НаСервере
// Формирует список видов тарифов, доступных для текущего способо расчета услуги.
//
// Параметры:
//  Услуга - текущая услуга.
//
// Возвращаемое значение:
//  СписокЗначений - список доступных видов тарифов.
//
Функция ПолучитьСписокДоступныхВидовТарифов(Услуга)
	
	ДоступныеЗначения = Новый СписокЗначений;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Услуга = УслугаДобровольногоСтрахования Тогда
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
		
	ИначеЕсли ЗначениеЗаполнено(Услуга) И (Не Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 И Не Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
	
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
	Иначе
		
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
		ДоступныеЗначения.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	КонецЕсли;
	
	Возврат ДоступныеЗначения;
	
КонецФункции // ПолучитьСписокДоступныхВидовТарифов()

&НаСервере
// Заполняет реквизиты строки табличной части "Начисления" значениями по умолчанию.
//
// Параметры:
//  ТаблицаЗначенийПоУмолчанию - таблица значений реквзитов по умолчанию для каждого способа расчета услуги.
//  СтрокаТаблицы - текущая строка табличной части "Начисления".
//  ПредставлениеРеквизита - название реквизита, значение которого необходимо заполнить.
//
Процедура ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТекущаяСтрока, ПредставлениеРеквизита = Неопределено)
	
	ДанныеСтроки = Объект.Начисления.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// Очистим поля "Льготник", "Льготная категория".
	ДанныеСтроки.Льготник          = Справочники.УПЖКХ_Жильцы.ПустаяСсылка();
	ДанныеСтроки.ЛьготнаяКатегория = Справочники.КВП_ЛьготныеКатегории.ПустаяСсылка();
	
	врТаблицаЗначенийПоУмолчанию = ПолучитьТаблицуЗначенийПоУмолчанию();
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ДанныеСтроки.Услуга = УслугаДобровольногоСтрахования Тогда
		ДанныеСтроки.РазделУчета   = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование;
		ДанныеСтроки.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
		ДанныеСтроки.ВидТарифа     = Перечисления.КВП_ВидыТарифов.Общий;
		
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Услуга) И (ДанныеСтроки.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		 Или ДанныеСтроки.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме
		 Или ДанныеСтроки.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка) Тогда
			СпособРасчета = ДанныеСтроки.Услуга.СпособРасчета;
			
		Иначе
			СпособРасчета = Перечисления.КВП_СпособыРасчета.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаЗначений = врТаблицаЗначенийПоУмолчанию.Найти(СпособРасчета, "СпособРасчета");
		
		Если ПредставлениеРеквизита = Неопределено Тогда
			ДанныеСтроки.РазделУчета   = СтрокаЗначений.РазделУчета;
			ДанныеСтроки.ВидНачисления = СтрокаЗначений.ВидНачисления;
			ДанныеСтроки.ВидТарифа     = СтрокаЗначений.ВидТарифа;
			
		Иначе
			ДанныеСтроки[ПредставлениеРеквизита] = СтрокаЗначений[ПредставлениеРеквизита];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеРеквизитаПоУмолчанию()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Заполним списки выбора элементов по умолчанию.
	СписокРазделовУчета = ПолучитьСписокДоступныхРазделовУчета(Неопределено);
	Для Каждого ТекЭлемент Из СписокРазделовУчета Цикл
		Элементы.НачисленияРазделУчета.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	ЗаполнитьДопДанныеВТаблице();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	УстановитьТочностьОбъемовНачислений();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// При использовании нового механизма отражения колонку с договором выводить не будем. Видимость устанавливается
	// только при открытии формы, так как новый механизм использует только один клиент и он скорее всего не будет
	// создавать документы в периоде до начала использования нового механизма.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда
		Элементы.НачисленияДоговорКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.НеверныеДвижения
	   И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Истина;
		ТекстВопроса = "При проведении документа будут сформированы новые движения для строк,
					   |соответствующих льготам, что повлечет за собой изменение текущих остатков. 
					   |Вы точно хотите провести документ?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПередЗаписью()".
Процедура ОбработатьРезультатВопросаПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.НеверныеДвижения = Ложь;
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДопДанныеВТаблице();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачисленияУслуга".
Процедура НачисленияУслугаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущаяСтрока;
	
	ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияПомещение".
Процедура НачисленияПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияВладелец".
Процедура НачисленияВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачисленияЛицевойСчет".
Процедура НачисленияЛицевойСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЛицевойСчет) Тогда
			ТекущиеДанные.ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекущиеДанные.ЛицевойСчет, Объект.Организация, Объект.Дата, "Договор");
		Иначе
			ТекущиеДанные.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		ТекущиеДанные.Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевойСчет, "Адрес");
		ТекущиеДанные.Владелец  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
									ТекущиеДанные.ЛицевойСчет, Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияДоговорКонтрагента".
Процедура НачисленияДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекущаяСтрока", ТекущиеДанные.ДоговорКонтрагента);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец",
								УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекущиеДанные.ЛицевойСчет, Объект.Организация,
																												Объект.Дата, "Контрагент"));
	
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", СтруктураПараметров, Элемент);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачисленияКоличество".
Процедура НачисленияКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Начисления.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачисленияЦена".
Процедура НачисленияЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Начисления.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияВидНачисления".
Процедура НачисленияВидНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.РазделУчета) Тогда
		СписокВидовНачисления = ПолучитьСписокДоступныхВидовНачисления(ТекущаяСтрока.РазделУчета, ТекущаяСтрока.Услуга);
		Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидовНачисления.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры // НачисленияВидНачисленияНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияРазделУчета".
Процедура НачисленияРазделУчетаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущаяСтрока;
	
	// Если текущий вид начисления не соответстсвует установленному разделу учета,
	// присваиваем виду начисления значение по умолчанию для текущего вида.
	ПроверитьЗначениеВидаНачисления(ТекущаяСтрока);
	
	// При смене значения поля очистим поля "Льготник", "Льготная категория".
	Элементы.Начисления.ТекущиеДанные.Льготник          = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	Элементы.Начисления.ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияРазделУчета".
Процедура НачисленияРазделУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	СписокРазделовУчета  = ПолучитьСписокДоступныхРазделовУчета(ТекущаяСтрока.Услуга);
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокРазделовУчета.ВыгрузитьЗначения());
	
КонецПроцедуры // НачисленияРазделУчетаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "НачисленияВидТарифа".
Процедура НачисленияВидТарифаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	
	СписокВидовТарифа  = ПолучитьСписокДоступныхВидовТарифов(ТекущаяСтрока.Услуга);
	ДопПараметры       = Новый Структура("ТекущаяСтрока", ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыбораИзСпискаНачисленияВидТарифаНачалоВыбора", ЭтотОбъект, ДопПараметры);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВидовТарифа, Элемент, СписокВидовТарифа.НайтиПоЗначению(ТекущаяСтрока.ВидТарифа));
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПередЗаписью()".
Процедура ОбработатьРезультатВыбораИзСпискаНачисленияВидТарифаНачалоВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ТекущаяСтрока.ВидТарифа = ВыбранныйЭлемент.Значение;
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВыбораИзСпискаНачисленияВидТарифаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачисленияСумма".
Процедура НачисленияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Цена = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.Сумма / ТекущиеДанные.Количество);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

