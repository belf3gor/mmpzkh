
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеМодуля

Перем ВестиУчетНачисленийПоДобровольномуСтрахованию;
Перем УслугаДобровольногоСтрахования;
Перем мУдалятьДвижения Экспорт;                        // Хранит признак новый ли это документ.

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Формирует таблицу соответствия разделов учета и видов начисления на основе значений, 
// представленных в макете.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуРазделовИВидовИзМакета() Экспорт
	
	ТаблицаРазделовИВидов = Новый ТаблицаЗначений;
	ТаблицаРазделовИВидов.Колонки.Добавить("РазделУчета",         Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_РазделыУчета"));
	ТаблицаРазделовИВидов.Колонки.Добавить("ВидНачисления",       Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВидыНачислений"));
	ТаблицаРазделовИВидов.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов("Булево"));
	
	Макет = ПолучитьМакет("РазделыУчетаИВидыНачисления");
	
	ОбластьТаблицы = Макет.ПолучитьОбласть("ТаблицаСоответствия");
	
 	Для НомерСтроки = 1 По ОбластьТаблицы.ВысотаТаблицы Цикл
 		НоваяСтрока = ТаблицаРазделовИВидов.Добавить();
		
		НоваяСтрока.РазделУчета         = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета." + ОбластьТаблицы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		НоваяСтрока.ВидНачисления       = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыНачислений." + ОбластьТаблицы.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		НоваяСтрока.ЗначениеПоУмолчанию = ?(ОбластьТаблицы.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = "Истина", Истина, Ложь);
	КонецЦикла;
	
	Возврат ТаблицаРазделовИВидов;
	
КонецФункции // ПолучитьТаблицуРазделовИВидовИзМакета()

// Формирует таблицу значений по умолчанию для каждого способа расчета услуги на основе
// значений, представленных в макете.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуЗначенийПоУмолчаниюИзМакета() Экспорт
	
	ТаблицаЗначенийПоУмолчанию = Новый ТаблицаЗначений;
	ТаблицаЗначенийПоУмолчанию.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_СпособыРасчета"));
	ТаблицаЗначенийПоУмолчанию.Колонки.Добавить("РазделУчета",   Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_РазделыУчета"));
	ТаблицаЗначенийПоУмолчанию.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВидыНачислений"));
	ТаблицаЗначенийПоУмолчанию.Колонки.Добавить("ВидТарифа",     Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	
	Макет = ПолучитьМакет("РазделыУчетаИВидыНачисления");
	
	ОбластьТаблицы = Макет.ПолучитьОбласть("ТаблицаЗначенийПоУмолчанию");
	
	Для НомерСтроки = 1 По ОбластьТаблицы.ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаЗначенийПоУмолчанию.Добавить();
		
		ПредставлениеСпособаРасчета = ОбластьТаблицы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если Не ПредставлениеСпособаРасчета = "ПрочиеСпособыРасчета" Тогда
			НоваяСтрока.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета." + ПредставлениеСпособаРасчета);
		КонецЕсли;
		
		НоваяСтрока.РазделУчета   = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета." + ОбластьТаблицы.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		НоваяСтрока.ВидНачисления = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыНачислений." + ОбластьТаблицы.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		НоваяСтрока.ВидТарифа     = ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов." + ОбластьТаблицы.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
	КонецЦикла;
	
	Возврат ТаблицаЗначенийПоУмолчанию;
	
КонецФункции // ПолучитьТаблицуЗначенийПоУмолчаниюИзМакета()

// Заполняет реквизиты строки табличной части "Начисления" значениями по умолчанию.
//
// Параметры:
//  ТаблицаЗначенийПоУмолчанию - таблица значений реквзитов по умолчанию для каждого способа расчета услуги.
//  СтрокаТаблицы - текущая строка табличной части "Начисления".
//  ПредставлениеРеквизита - название реквизита, значение которого необходимо заполнить.
//
Процедура ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТаблицаЗначенийПоУмолчанию, СтрокаТаблицы, ПредставлениеРеквизита = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) И (СтрокаТаблицы.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 Или СтрокаТаблицы.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме
	 Или СтрокаТаблицы.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка) Тогда
		СпособРасчета = СтрокаТаблицы.Услуга.СпособРасчета;
		
	Иначе
		СпособРасчета = Перечисления.КВП_СпособыРасчета.ПустаяСсылка();
	КонецЕсли;
	
	СтрокаЗначений = ТаблицаЗначенийПоУмолчанию.Найти(СпособРасчета, "СпособРасчета");
	
	Если ПредставлениеРеквизита = Неопределено Тогда
		СтрокаТаблицы.РазделУчета   = СтрокаЗначений.РазделУчета;
		СтрокаТаблицы.ВидНачисления = СтрокаЗначений.ВидНачисления;
		СтрокаТаблицы.ВидТарифа     = СтрокаЗначений.ВидТарифа;
		
	Иначе
		СтрокаТаблицы[ПредставлениеРеквизита] = СтрокаЗначений[ПредставлениеРеквизита];
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеРеквизитаПоУмолчанию()

// Проверяет, соответствует ли текущий вид тарифа способу расчета текущей услуги.
// Если не соответствует, устанавливает значение вида тарифа по умолчанию для текущего
// способа расчета услуги.
//
// Параметры:
//  Услуга - текущая услуга.
//  ВидТарифа - текущий вид тарифа.
//
Процедура ПроверитьЗначениеВидаТарифа(Услуга, ВидТарифа) Экспорт
	
	СпособРасчета = Услуга.СпособРасчета;
	
	Если Не ВидТарифаЗаполненКорректно(СпособРасчета, ВидТарифа) Тогда
		Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		 Или СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной;
		Иначе
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначениеВидаТарифа()

// Проверяет, соответствует ли способ расчета текущей услуги текущему разделу учета.
// Если не соответствует, устанавливает значение раздела учета по умолчанию для
// текущего способа расчета.
//
// Параметры:
//  Услуга - текущая услуга.
//  РазделУчета - текущий раздел учета.
//
Процедура ПроверитьЗначениеРазделаУчета(Услуга, РазделУчета) Экспорт
	
	СпособРасчета = Услуга.СпособРасчета;
	
	Если Не РазделУчетаЗаполненКорректно(СпособРасчета, РазделУчета) Тогда
		
		Если СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка Тогда
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка;
			
		ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ;
			
		Иначе
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначениеРазделаУчета()

// Проверяет соответствие текущего вида начисления текущему разделу учета.
//
// Параметры:
//  ТаблицаРазделаУчета - таблица видов начисления текущего раздела учета.
//  ВидНачисления - текущий вид начисления.
//
// Возвращаемое значение:
//  Булево - корректность заполнения.
//
Функция ВидНачисленияЗаполненКорректно(ТаблицаРазделаУчета, СпособРасчета, ВидНачисления) Экспорт
	
	СтрокаВидаНачисления = ТаблицаРазделаУчета.Найти(ВидНачисления, "ВидНачисления");
	
	Если СтрокаВидаНачисления = Неопределено Тогда
		Возврат Ложь;
		
	ИначеЕсли (СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 Или СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	  И ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Начисление
	  И СтрокаВидаНачисления.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ Тогда
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВидНачисленияЗаполненКорректно()

// Проверяет соответствие текущего вида тарифа текущему способу расчета услуги.
//
// Параметры:
//  СпособРасчета - способ расчета текущей услуги.
//  ВидТарифа - текущий вид тарифа.
//
// Возвращаемое значение:
//  Булево - корректность заполнения.
//
Функция ВидТарифаЗаполненКорректно(СпособРасчета, ВидТарифа)
	
	Если Не (СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 И Не СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) 
	 И Не ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВидТарифаЗаполненКорректно()

// Проверяет соответствие текущего раздела учета способу расчета текущей услуги.
//
// Параметры:
//  СпособРасчета - способ расчета текущей услуги.
//  РазделУчета - текущий раздел учета.
//
// Возвращаемое значение:
//  Булево - корректность заполнения.
//
Функция РазделУчетаЗаполненКорректно(СпособРасчета, РазделУчета)
	
	Если (Не СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 И Не СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	 И РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ Тогда
		Возврат Ложь;
	
	ИначеЕсли Не СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка
	 И РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РазделУчетаЗаполненКорректно()

// Процедура изменяет знаки сумм начислений в таблице.
//
// Параметры
//  ТаблицаЛьгот  - Таблица значений - таблица льгот.
//
Процедура ИзменитьЗнакиСуммНачислений(ТаблицаЛьгот)

	Для Каждого ТекущаяСтрока Из ТаблицаЛьгот Цикл
		ТекущаяСтрока.СуммаНачисления = ?(ТекущаяСтрока.СуммаНачисления > 0, ТекущаяСтрока.СуммаНачисления * (-1), ТекущаяСтрока.СуммаНачисления);
	КонецЦикла;

КонецПроцедуры // ИзменитьЗнакиСуммНачислений()

// Функция производит поиск в таблице значений строк по условию.
// Параметры
//  ТаблицаНачислений - Тип "ТаблицаЗначений" - таблица, содержащая данные по начислениям.
//  ТолькоЛьготы - Тип "Булево" - параметр условия поиска.
//
// Возвращаемое значение
//  Тип "ТаблицаЗначений" - наблица с данными по начислениям: по льготам или без льгот.
//
Функция СформироватьТаблицуНачислений(Знач ТаблицаНачислений, ТолькоЛьготы)
	
	врТаблицаНачислений = ТаблицаНачислений.Скопировать();
	СтрокиСоЛьготами    = врТаблицаНачислений.НайтиСтроки(Новый Структура("РазделУчета", Перечисления.УПЖКХ_РазделыУчета.Льготы));
	
	Если ТолькоЛьготы Тогда
		Возврат врТаблицаНачислений.Скопировать(СтрокиСоЛьготами);
	Иначе
		Для Каждого ТекущаяСтрока Из СтрокиСоЛьготами Цикл
			врТаблицаНачислений.Удалить(ТекущаяСтрока);
		КонецЦикла;
		Возврат врТаблицаНачислений;
	КонецЕсли;
	
КонецФункции // СформироватьТаблицуНачислений()
#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Проверяет строки табличной части документа на корректность заполнения следующих реквизитов:
// раздел учета, вид начисления, вид тарифа.
//
// Параметры:
//  Отказ        - Булево - флаг отказа в проведении.
//  Заголовок    - Строка - заголовок сообщения об ошибке.
//
Процедура ПроверитьКорректностьЗаполненияТабличнойЧасти(Отказ)
	
	ТаблицаРазделовИВидов = ПолучитьТаблицуРазделовИВидовИзМакета();
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		СпособРасчета = СтрокаНачисления.Услуга.СпособРасчета;
		РазделУчета   = СтрокаНачисления.РазделУчета;
		ВидНачисления = СтрокаНачисления.ВидНачисления;
		ВидТарифа     = СтрокаНачисления.ВидТарифа;
		
		ТекстОшибки = "";
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И СтрокаНачисления.Услуга = УслугаДобровольногоСтрахования Тогда
			Если Не РазделУчета = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование 
			 Или Не ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Начисление
			 Или Не ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
			
				ТекстОшибки = "В строке №" + (Начисления.Индекс(СтрокаНачисления) + 1)
							  + " табличной части документа указанны неверные сведения! Для услуги добровольного страхования доступны только следующие параметры:
							  |раздел учета - ""Начисление услуг"", вид начисления - ""Начисление"", вид тарифа - ""Общий"".";
			КонецЕсли;
			
		Иначе
			
			Если Не РазделУчетаЗаполненКорректно(СпособРасчета, РазделУчета) Тогда
				ТекстОшибки = "В строке №" + (Начисления.Индекс(СтрокаНачисления) + 1)
							+ " табличной части документа указанный раздел учета не соответствует способу расчета услуги!";
			КонецЕсли;
			
			СтрокиРазделаУчета  = ТаблицаРазделовИВидов.НайтиСтроки(Новый Структура("РазделУчета", РазделУчета));
			ТаблицаРазделаУчета = ТаблицаРазделовИВидов.Скопировать(СтрокиРазделаУчета);
			
			Если Не ВидНачисленияЗаполненКорректно(ТаблицаРазделаУчета, СпособРасчета, ВидНачисления) Тогда
				ТекстОшибкиТек = "В строке №" + (Начисления.Индекс(СтрокаНачисления) + 1)
								+ " табличной части документа указанный вид начисления не соответствует разделу учета!";
				ТекстОшибки    = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстОшибкиТек, ТекстОшибкиТек);
			КонецЕсли;
		
			Если Не ВидТарифаЗаполненКорректно(СпособРасчета, ВидТарифа) Тогда
				ТекстОшибкиТек = "В строке №" + (Начисления.Индекс(СтрокаНачисления) + 1)
							+ " табличной части документа указанный вид тарифа не соответствует способу расчета услуги!";
				ТекстОшибки    = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстОшибкиТек, ТекстОшибкиТек);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияТабличнойЧасти()

// Заполняет ряд реквзитов табличной части "Начисления" значениями по умолчанию.
//
Процедура ЗаполнитьРеквизитыТабличнойЧасти()
	
	ТаблицаЗначенийПоУмолчанию = ПолучитьТаблицуЗначенийПоУмолчаниюИзМакета();
	
	Для Каждого Строка Из Начисления Цикл
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Строка.Услуга = УслугаДобровольногоСтрахования Тогда
			Если Не ЗначениеЗаполнено(Строка.РазделУчета) Тогда
				Строка.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ВидНачисления) Тогда
				Строка.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ВидТарифа) Тогда
				Строка.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
			КонецЕсли;
			
		Иначе
			Если Не ЗначениеЗаполнено(Строка.РазделУчета) Тогда
				ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТаблицаЗначенийПоУмолчанию, Строка, "РазделУчета");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ВидНачисления) Тогда
				ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТаблицаЗначенийПоУмолчанию, Строка, "ВидНачисления");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ВидТарифа) Тогда
				ЗаполнитьЗначениеРеквизитаПоУмолчанию(ТаблицаЗначенийПоУмолчанию, Строка, "ВидТарифа");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитыТабличнойЧасти()

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Начисления", "Сумма");
	
	ЗаполнитьРеквизитыТабличнойЧасти();
	
	ПроверитьКорректностьЗаполненияТабличнойЧасти(Отказ);
	
КонецПроцедуры // ПередЗаписью()

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_НачислениеУслугВСтороннейПрограмме.ПодготовитьПараметрыПроведения(Ссылка, ВестиУчетНачисленийПоДобровольномуСтрахованию,
																											УслугаДобровольногоСтрахования, Отказ);
	
	НачисленияПоСтрахованию  = ПараметрыПроведения.НачисленияПоСтрахованию;
	НачисленияБезСтрахования = ПараметрыПроведения.НачисленияБезСтрахования;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор в проводках не заполняется.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	ТаблицаНачислений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
	ТаблицаНачислений.Колонки.Добавить("Льготник", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	
	Для Каждого ТекСтрокаНачисления Из НачисленияБезСтрахования Цикл
		
		Движение                             = ТаблицаНачислений.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.ЛицевойСчет                 = ТекСтрокаНачисления.ЛицевойСчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор                 = ТекСтрокаНачисления.ДоговорКонтрагента;
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаНачисления.Услуга;
		Движение.РазделУчета                 = ТекСтрокаНачисления.РазделУчета;
		Движение.ВидНачисленияНаЛицевыеСчета = ТекСтрокаНачисления.ВидНачисления;
		Движение.ВидТарифа                   = ТекСтрокаНачисления.ВидТарифа;
		Движение.Тариф                       = ТекСтрокаНачисления.Цена;
		Движение.Количество                  = ТекСтрокаНачисления.Количество;
		Движение.СуммаНачисления             = ТекСтрокаНачисления.Сумма;
		Движение.ДнейНачислено               = День(КонецМесяца(СтруктураШапкиДокумента.Дата));
		Движение.Начало                      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Окончание                   = КонецМесяца(СтруктураШапкиДокумента.Дата);
		Движение.ЛьготнаяКатегория           = ТекСтрокаНачисления.ЛьготнаяКатегория;
		Движение.Льготник                    = ТекСтрокаНачисления.Льготник;
		
	КонецЦикла;
	
	ТаблицаЛьгот = СформироватьТаблицуНачислений(ТаблицаНачислений, Истина);
	СформироватьДвиженияПоЛьготам(ТаблицаЛьгот);
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация, Отказ);
	ТаблицаНачисленийБезЛьгот    = СформироватьТаблицуНачислений(ТаблицаНачислений, Ложь);
	
	Если Не мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИзменитьЗнакиСуммНачислений(ТаблицаЛьгот);
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, Новый Структура("Приход, Расход",
																				ТаблицаНачисленийБезЛьгот,
																				ТаблицаЛьгот));
	Иначе
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, Новый Структура("Приход", ТаблицаНачисленийБезЛьгот));
	КонецЕсли;
	
	// Движения для отражения начислений в регл. учете.
	СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
	
	ДвиженияВРегистреНачисленияДобровольногоСтрахования(НачисленияПоСтрахованию, ЗаполнятьДоговорВПроводках);
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Формирует движения по регистру "Начисления по добровольному страхованию".
Процедура ДвиженияВРегистреНачисленияДобровольногоСтрахования(НачисленияПоСтрахованию, ЗаполнятьДоговорВПроводках)
	
	Для Каждого СтрокаНачисления Из НачисленияПоСтрахованию Цикл
		Движение = Движения.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Добавить();
		
		Движение.Период          = Дата;
		Движение.Организация     = Организация;
		Движение.ЛицевойСчет     = СтрокаНачисления.ЛицевойСчет;
		Движение.Услуга          = СтрокаНачисления.Услуга;
		Движение.МесяцНачисления = КонецМесяца(ДобавитьМесяц(Дата, 2));
		Движение.Тариф           = СтрокаНачисления.Цена;
		Движение.Количество      = СтрокаНачисления.Количество;
		Движение.СуммаНачисления = СтрокаНачисления.Сумма;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаНачисления.ДоговорКонтрагента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреНачисленияДобровольногоСтрахования()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Процедура формирует движения по регистру накоплений "Начисленные льготы".
Процедура СформироватьДвиженияПоЛьготам(ТаблицаЛьгот)
	
	НаборДвижений = Движения.КВП_НачисленныеЛьготы;
	НаборДвижений.Очистить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаЛьгот Цикл
		Движение                   = НаборДвижений.Добавить();
		Движение.Период            = Дата;
		Движение.Организация       = Организация;
		Движение.ЛьготнаяКатегория = ТекущаяСтрока.ЛьготнаяКатегория;
		Движение.Услуга            = ТекущаяСтрока.Услуга;
		Движение.ЛицевойСчет       = ТекущаяСтрока.ЛицевойСчет;
		Движение.Проживающий       = ТекущаяСтрока.Льготник;
		Движение.СуммаНачисления   = ТекущаяСтрока.СуммаНачисления;
		Движение.Тариф             = ТекущаяСтрока.Тариф;
		Движение.Количество        = ТекущаяСтрока.Количество;
		Движение.МесяцНачисления   = НачалоМесяца(Дата);
		Движение.ВидТарифа         = ТекущаяСтрока.ВидТарифа;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДвиженияПоЛьготам()

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	ПроверяемыеРеквизиты.Добавить("Начисления.Услуга");
	ПроверяемыеРеквизиты.Добавить("Начисления.ЛицевойСчет");
	
	// Для тех, кто использует новый механизм отражения начислений в регл. учете проверять заполненность договора
	// не будем, так в этом случае договор при формировании проводок не заполняется.
	Если Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата) Тогда
		ПроверяемыеРеквизиты.Добавить("Начисления.ДоговорКонтрагента");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Начисления.РазделУчета");
	ПроверяемыеРеквизиты.Добавить("Начисления.ВидНачисления");
	ПроверяемыеРеквизиты.Добавить("Начисления.ВидТарифа");
	
	// Если ДС не ведется, то все строки.
	// Если ДС ведется, то все, кроме услуги ДС.
	
	// Проверим, не начислили ли уже услуги на объекты.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНачислений.Услуга КАК Услуга,
	|	ТаблицаНачислений.Льготник КАК Льготник,
	|	ТаблицаНачислений.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаНачислений.РазделУчета КАК РазделУчета,
	|	ТаблицаНачислений.ВидНачисления КАК ВидНачисления,
	|	ТаблицаНачислений.Сумма КАК Сумма
	|ПОМЕСТИТЬ врНачисленияБезСтрахования
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	НЕ ТаблицаНачислений.Сумма = 0
	|	И (НЕ &ВестиУчетНачисленийПоДобровольномуСтрахованию
	|			ИЛИ НЕ ТаблицаНачислений.Услуга = &УслугаДобровольногоСтрахования)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Услуга КАК Услуга,
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Льготник КАК Льготник,
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.РазделУчета КАК РазделУчета,
	|	УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.ВидНачисления КАК ВидНачисления
	|ПОМЕСТИТЬ врНачисленияВТекущемМесяце
	|ИЗ
	|	Документ.УПЖКХ_НачислениеУслугВСтороннейПрограмме.Начисления КАК УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления
	|ГДЕ
	|	НЕ УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Ссылка = &ТекущийДокумент
	|	И УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Ссылка.Проведен
	|	И УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				врНачисленияБезСтрахования.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				врНачисленияБезСтрахования)
	|	И НАЧАЛОПЕРИОДА(УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Ссылка.Дата, МЕСЯЦ) = &ДатаНачМес
	|	И НЕ УПЖКХ_НачислениеУслугВСтороннейПрограммеНачисления.Сумма = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияБезСтрахования.НомерСтроки КАК НомерСтроки,
	|	врНачисленияБезСтрахования.ЛицевойСчет КАК ЛицевойСчет,
	|	врНачисленияБезСтрахования.Услуга КАК Услуга,
	|	врНачисленияБезСтрахования.Льготник КАК Льготник,
	|	врНачисленияБезСтрахования.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	врНачисленияБезСтрахования.РазделУчета КАК РазделУчета,
	|	врНачисленияБезСтрахования.ВидНачисления КАК ВидНачисления
	|ИЗ
	|	врНачисленияБезСтрахования КАК врНачисленияБезСтрахования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врНачисленияВТекущемМесяце КАК врНачисленияВТекущемМесяце
	|		ПО врНачисленияБезСтрахования.ЛицевойСчет = врНачисленияВТекущемМесяце.ЛицевойСчет
	|			И врНачисленияБезСтрахования.Услуга = врНачисленияВТекущемМесяце.Услуга
	|			И врНачисленияБезСтрахования.РазделУчета = врНачисленияВТекущемМесяце.РазделУчета
	|			И врНачисленияБезСтрахования.ВидНачисления = врНачисленияВТекущемМесяце.ВидНачисления";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений",                             Начисления.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачМес",                                    НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ТекущийДокумент",                               Ссылка);
	Запрос.УстановитьПараметр("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования",                УслугаДобровольногоСтрахования);
	
	УжеНачисленныеУслуги = Запрос.Выполнить().Выгрузить();
	
	РазделУчетаЛьготы = Перечисления.УПЖКХ_РазделыУчета.Льготы;
	
	Для Каждого ТекСтр Из УжеНачисленныеУслуги Цикл
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка №" + ТекСтр.НомерСтроки + ": на объект """ + ТекСтр.ЛицевойСчет
														  + """ : по услуге """ + ТекСтр.Услуга + """ уже были начисления!",
														  Отказ);
		
	КонецЦикла;
	
	РазделУчетаЛьготы = Перечисления.УПЖКХ_РазделыУчета.Льготы;
	
	Для Каждого ТекНачисление Из Начисления Цикл
		
		Если ТекНачисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Льготы Тогда
			Если Не ЗначениеЗаполнено(ТекНачисление.Льготник) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка №" + ТекНачисление.НомерСтроки + ": не заполнено поле ""Льготник.""");
				Отказ = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекНачисление.ЛьготнаяКатегория) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка №" + ТекНачисление.НомерСтроки + ": не заполнено поле ""Льготная категория.""");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если ведется учет по страхованию, то берем строки с услугой страхования.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтрокиУслугДобровольногоСтрахования = Начисления.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если СтрокиУслугДобровольногоСтрахования.Количество() > 0 Тогда
			
			СписокЛС = Новый Массив;
			
			Для Каждого ТекСтр Из СтрокиУслугДобровольногоСтрахования Цикл
				СписокЛС.Добавить(ТекСтр.ЛицевойСчет);
			КонецЦикла;
			
			Документы.КВП_НачислениеУслуг.ПроверитьНаличиеНачисленийПоДобровольномуСтрахованию(Ссылка, Дата, Организация, СписокЛС, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиУчетаДобровольногоСтрахования
НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
#КонецОбласти

#КонецЕсли