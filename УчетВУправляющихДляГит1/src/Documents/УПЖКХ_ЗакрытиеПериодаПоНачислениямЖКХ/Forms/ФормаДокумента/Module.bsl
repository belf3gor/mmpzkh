
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КоманднаяПанельЛицевыеСчета.Видимость = Объект.КорректировкаРасчета;
	Элементы.ГруппаОсновная.Видимость              = Объект.КорректировкаРасчета;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
// Очищает табличные части документа.
Функция ОчиститьТабличныеЧастиДокумента()
	
	Объект.Переплаты.Очистить();
	Объект.Долги.Очистить();
	Объект.ЛицевыеСчета.Очистить();
	
КонецФункции

&НаСервере
// Получает таблицу корректировок, содержащую только переплаты или только долги, в зависимости от параметра ЭтоПереплата.
Функция ОтборПереплата(ТаблицаКорректировок, ЭтоПереплата)
	
	Если ИспользоватьДоговор Тогда
		СписокКолонок = "Объект, ДоговорКонтрагента, ВидНачисления, Услуга, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку,
						|СуммаОстатка, СуммаКорректировки, НачислениеВМесяц, ПроцентнаяСтавка";
	Иначе
		СписокКолонок = "Объект, ВидНачисления, Услуга, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку,
						|СуммаОстатка, СуммаКорректировки, НачислениеВМесяц, ПроцентнаяСтавка";
	КонецЕсли;
	
	Структура = Новый Структура("ЭтоПереплата", ЭтоПереплата);
	Результат = ТаблицаКорректировок.Скопировать(Структура, СписокКолонок);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Дополняет таблицу остатков сведениями о непогашенной рассрочке.
//
// ТаблицаОстатков - таблица с сальдо по услугам.
// ТаблицаКорректировок - таблица, содержащая информацию о рассрочке.
//
Процедура ДополнитьТаблицуОстатковСведениямиОРассрочке(ТаблицаОстатков, ТаблицаКорректировок)
	
	СтрокиРассрочки = ТаблицаКорректировок.НайтиСтроки(Новый Структура("МесяцНачисления", '00010101'));
	
	Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
		НоваяСтрока = ТаблицаОстатков.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРассрочки);
		НоваяСтрока.НераспределеннаяСуммаПереплаты = 0;
		НоваяСтрока.ОставшаясяСуммаДолга           = НоваяСтрока.СуммаОстатка + НоваяСтрока.СуммаКорректировки;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуОстатковСведениямиОРассрочке()

&НаСервере
// Получает таблицу остатков с автоматическим заполнением сумм корректировок.
Функция ПолучитьТаблицуОстатковСКорректировками()
	
	ТаблицаОстатков      = ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцевНаСервере(
							?(Объект.ЛицевыеСчета.Количество() = 0, Ложь, Истина));
	ТаблицаКорректировок = ПодготовитьТаблицуКорректировкиНаСервере(Ложь);
	ДополнитьТаблицуОстатковСведениямиОРассрочке(ТаблицаОстатков, ТаблицаКорректировок);
	
	Если ИспользоватьДоговор Тогда
		
		ТаблицаКорректировок.Свернуть("Объект, ДоговорКонтрагента, Услуга, ВидНачисления, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку,
		|НачислениеВМесяц, ПроцентнаяСтавка", "СуммаКорректировки");
		
	Иначе
		
		ТаблицаКорректировок.Свернуть("Объект, Услуга, ВидНачисления, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку,
		|НачислениеВМесяц, ПроцентнаяСтавка", "СуммаКорректировки");
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицаКорректировок Из ТаблицаКорректировок Цикл
		Если ИспользоватьДоговор Тогда
			Отбор = Новый Структура("Объект, ДоговорКонтрагента, Услуга, ВидНачисления, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку", 
							СтрокаТаблицаКорректировок.Объект, СтрокаТаблицаКорректировок.ДоговорКонтрагента, 
							СтрокаТаблицаКорректировок.Услуга, СтрокаТаблицаКорректировок.ВидНачисления,
							СтрокаТаблицаКорректировок.МесяцНачисления, СтрокаТаблицаКорректировок.МесяцРассрочки, СтрокаТаблицаКорректировок.ЗаявлениеНаРассрочку);
		
		Иначе
			Отбор = Новый Структура("Объект, Услуга, ВидНачисления, МесяцНачисления, МесяцРассрочки, ЗаявлениеНаРассрочку", 
							СтрокаТаблицаКорректировок.Объект, СтрокаТаблицаКорректировок.Услуга, СтрокаТаблицаКорректировок.ВидНачисления,
							СтрокаТаблицаКорректировок.МесяцНачисления, СтрокаТаблицаКорректировок.МесяцРассрочки, СтрокаТаблицаКорректировок.ЗаявлениеНаРассрочку);
		КонецЕсли;
		
		Строки = ТаблицаОстатков.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда 
			Продолжить; 
		КонецЕсли;
		
		СтрокаТаблицаОстатков = Строки[0];
		СтрокаТаблицаОстатков.СуммаКорректировки = СтрокаТаблицаКорректировок.СуммаКорректировки;
		
	КонецЦикла;
	
	Возврат ТаблицаОстатков;
	
КонецФункции

&НаСервере
// Заполняет табличные части документа по таблице корректировок.
Функция ЗаполнитьТабличныеЧастиДокумента(ПолучатьОстаткиСКорректировками)
	
	Если ПолучатьОстаткиСКорректировками Тогда
		ТаблицаКорректировок = ПолучитьТаблицуОстатковСКорректировками();
	Иначе
		ТаблицаКорректировок = ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцевНаСервере();
	КонецЕсли;
	
	Объект.Переплаты.Загрузить(ОтборПереплата(ТаблицаКорректировок, Истина));
	Объект.Долги.Загрузить(ОтборПереплата(ТаблицаКорректировок, Ложь));
	УстановитьЗаголовкиДляСтрокРассрочки();
	
	Если ИспользоватьДоговор Тогда
		тз_ЛицевыеСчета = ТаблицаКорректировок.Скопировать(, "Объект, ДоговорКонтрагента");
		тз_ЛицевыеСчета.Свернуть("Объект, ДоговорКонтрагента");
	Иначе
		тз_ЛицевыеСчета = ТаблицаКорректировок.Скопировать(, "Объект");
		тз_ЛицевыеСчета.Свернуть("Объект");
	КонецЕсли;
	
	Объект.ЛицевыеСчета.Загрузить(тз_ЛицевыеСчета);
	
	ЗаполнитьДопДанныеВТаблице();
	
КонецФункции

&НаСервере
// Для строк тч "Долги", соответствующих рассрочке, устанавливает заголовки в колонке "Месяц начисления".
//
// Параметры:
//  Долги - тч "Долги".
//
Процедура УстановитьЗаголовкиДляСтрокРассрочки()
	
	СтрокиРассрочки = Объект.Долги.НайтиСтроки(Новый Структура("МесяцНачисления", '00010101'));
	
	Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
		СтрокаРассрочки.МесяцНачисления = "Остаток по рассрочке";
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗаголовкиДляСтрокРассрочки()

&НаКлиенте
// Процедура перезаполняет данные.
Процедура ПерезаполнитьДанные(Отбор = Ложь)
	
	Если Объект.КорректировкаРасчета Тогда
		
		Если Объект.Проведен Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПерезаполнитьДанные", ЭтотОбъект, Новый Структура("Отбор", Отбор));
			ТекстВопроса       = "Автоматически заполнить документ можно только после отмены его проведения. 
								 |Выполнить отмену проведения документа?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ПерезаполнитьДанныеПродолжение(Отбор);
		
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьДанные()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного из процедуры "ПерезаполнитьДанные()".
Процедура ОбработатьРезультатВопросаПерезаполнитьДанные(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьДанныеПродолжение(ДополнительныеПараметры.Отбор);

КонецПроцедуры // ОбработатьРезультатВопросаПерезаполнитьДанные()

&НаКлиенте
// Процедура выводит вопрос пользователю о дальнейших действиях перед заполнением данных.
Процедура ПерезаполнитьДанныеПродолжение(Отбор)
	
	Если Отбор Тогда
		Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить табличные части?";
		Иначе
			ТекстВопроса = "Заполнить табличные части?";
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеОтбор", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	ИначеЕсли Объект.ЛицевыеСчета.Количество() > 0 Тогда
		ТекстВопроса       = "Перед заполнением табличные части будут очищены. Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеЛицевыеСчета", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВызватьПерезаполнениеДанных();

КонецПроцедуры // ПерезаполнитьДанныеПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПерезаполнитьДанныеПродолжение()".
Процедура ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеОтбор(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОчиститьТабличныеЧастиДокумента();
	
	ВызватьПерезаполнениеДанных();

КонецПроцедуры // ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеОтбор()

&НаКлиенте
// Процедура вызывает процедуру заполнения табличных частей документа.
Процедура ВызватьПерезаполнениеДанных()
	
	ВывестиВопросОРаспределенииСумм();

КонецПроцедуры // ВызватьПерезаполнениеДанных()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПерезаполнитьДанныеПродолжение()".
Процедура ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеЛицевыеСчета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОчиститьТабличныеЧастиДокумента();
	
	ВывестиВопросОРаспределенииСумм();

КонецПроцедуры // ОбработатьРезультатВопросаПерезаполнитьДанныеПродолжениеЛицевыеСчета()

&НаКлиенте
// Процедура выводит вопрос пользователю о распределении сумм.
Процедура ВывестиВопросОРаспределенииСумм()
	
	ТекстВопроса       = "Провести автоматическое распределение сумм?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаВывестиВопросОРаспределенииСумм", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры // ВывестиВопросОРаспределенииСумм()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ВывестиВопросОРаспределенииСумм()".
Процедура ОбработатьРезультатВопросаВывестиВопросОРаспределенииСумм(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличныеЧастиДокумента(Истина);
	Иначе
		ЗаполнитьТабличныеЧастиДокумента(Ложь);
	КонецЕсли;
	
	Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
		Элементы.ЛицевыеСчета.ТекущаяСтрока = Объект.ЛицевыеСчета[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВывестиВопросОРаспределенииСумм()

&НаКлиенте
// Функция удаляет текущий лицевой счет из переплат и долгов.
Процедура УдалитьТекущийЛицевойСчетИзПереплатИДолгов()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",             ТекущиеДанные.Объект);
	Отбор.Вставить("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	
	СтрокиПереплат = Объект.Переплаты.НайтиСтроки(Отбор);
	Для Каждого Стр Из СтрокиПереплат Цикл
		Объект.Переплаты.Удалить(Объект.Переплаты.Индекс(Стр));
	КонецЦикла;
	
	СтрокиДолгов = Объект.Долги.НайтиСтроки(Отбор);
	Для Каждого Стр Из СтрокиДолгов Цикл
		Объект.Долги.Удалить(Объект.Долги.Индекс(Стр));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура установки отбора в подчиненных таблицах.
Процедура УстановитьОтборВПодчиненныхТаблицах()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		// Отбор данных в таблице переплат.
		Элементы.Переплаты.ОтборСтрок = Новый ФиксированнаяСтруктура("Объект, ДоговорКонтрагента", ТекущиеДанные.Объект, ТекущиеДанные.ДоговорКонтрагента);
		
		// Отбор данных в таблице долгов.
		Элементы.Долги.ОтборСтрок = Новый ФиксированнаяСтруктура("Объект, ДоговорКонтрагента", ТекущиеДанные.Объект, ТекущиеДанные.ДоговорКонтрагента);
		
		ОбновитьИтогиНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных данных в строках дерева.
Процедура ЗаполнитьДопДанныеВТаблице()
	
	СписокЛС = Объект.ЛицевыеСчета.Выгрузить().ВыгрузитьКолонку("Объект");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиТаблицы = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаТаблицы Из СтрокиТаблицы Цикл
			ТекСтрокаТаблицы.Помещение = ТекСтрока.Помещение;
			ТекСтрокаТаблицы.Владелец  = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновления итогов на клиенте.
Процедура ОбновитьИтогиНаКлиенте()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СтруктураИтогов = ПолучитьИтогиТаблицНаСервере(ТекущиеДанные.Объект, ТекущиеДанные.ДоговорКонтрагента);
		
		ПереплатыСуммаОстатка       = СтруктураИтогов.ПереплатыСуммаОстатка;
		ПереплатыСуммаКорректировки = СтруктураИтогов.ПереплатыСуммаКорректировки;
		
		ДолгиСуммаОстатка       = СтруктураИтогов.ДолгиСуммаОстатка;
		ДолгиСуммаКорректировки = СтруктураИтогов.ДолгиСуммаКорректировки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура пересчета итогов на клиенте.
Функция ПолучитьИтогиТаблицНаСервере(ЛицевойСчет, ДоговорКонтрагента)
	
	СтруктураИтогов = 
		Новый Структура("ПереплатыСуммаОстатка,ПереплатыСуммаКорректировки,ДолгиСуммаОстатка,ДолгиСуммаКорректировки");
	
	// Переплаты
	
	СтрокиОтбора = Объект.Переплаты.НайтиСтроки(
		Новый Структура("Объект,ДоговорКонтрагента", ЛицевойСчет, ДоговорКонтрагента));
	ТаблицаПереплат = Объект.Переплаты.Выгрузить(СтрокиОтбора, "СуммаОстатка,СуммаКорректировки");
	
	СтруктураИтогов.ПереплатыСуммаОстатка       = ТаблицаПереплат.Итог("СуммаОстатка");
	СтруктураИтогов.ПереплатыСуммаКорректировки = ТаблицаПереплат.Итог("СуммаКорректировки");
	
	// Долги
	
	СтрокиОтбора = Объект.Долги.НайтиСтроки(Новый Структура("Объект,ДоговорКонтрагента", ЛицевойСчет, ДоговорКонтрагента));
	ТаблицаДолгов = Объект.Долги.Выгрузить(СтрокиОтбора, "СуммаОстатка,СуммаКорректировки");
	
	СтруктураИтогов.ДолгиСуммаОстатка       = ТаблицаДолгов.Итог("СуммаОстатка");
	СтруктураИтогов.ДолгиСуммаКорректировки = ТаблицаДолгов.Итог("СуммаКорректировки");
	
	Возврат СтруктураИтогов;
	
КонецФункции

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

#КонецОбласти

#Область ПроцедурыРаботыСметодамиМодуляОбъекта

&НаСервере
// Процедура заполняет табличную часть на сервере.
Функция ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцевНаСервере(ОтборПоОбъектам = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ"));
	Возврат ДокументОбъект.ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцев(ОтборПоОбъектам);
	
КонецФункции

&НаСервере
// Процедура заполняет табличную часть на сервере.
Функция ПодготовитьТаблицуКорректировкиНаСервере(ЭтоПроведениеДокумента = Истина)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ"));
	Возврат ДокументОбъект.ПодготовитьТаблицуКорректировки(ЭтоПроведениеДокумента);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	Иначе
		
		ЗаполнитьДопДанныеВТаблице();
		
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "ПериодСтрокой");
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// При использовании нового механизма отражения колонки с договором выводить не будем. Видимость устанавливается
	// только при открытии формы, так как новый механизм использует только один клиент и он скорее всего не будет
	// создавать документы в периоде до начала использования нового механизма.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда
		
		Элементы.ЛицевыеСчетаДоговорКонтрагента.Видимость = Ложь;
		Элементы.ПереплатыДоговорКонтрагента.Видимость    = Ложь;
		Элементы.ДолгиДоговорКонтрагента.Видимость        = Ложь;
		
	КонецЕсли;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.Дата = КонецМесяца(Объект.Дата);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДопДанныеВТаблице();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Дата", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Дата", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Дата", "ПериодСтрокой",
														Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Объект".
Процедура ОбъектПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		ПерезаполнитьДанные(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Объект".
Процедура ОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	ПерезаполнитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КорректировкаРасчета".
Процедура КорректировкаРасчетаПриИзменении(Элемент)
	
	Если НЕ Объект.КорректировкаРасчета Тогда
		ТекстВопроса       = "Внесенные корректировки не будут сохранены. Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаКорректировкаРасчетаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КорректировкаРасчетаПриИзмененииПродолжение();
	
КонецПроцедуры // КорректировкаРасчетаПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КорректировкаРасчетаПриИзменении()".
Процедура ОбработатьРезультатЗапросаКорректировкаРасчетаПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.КорректировкаРасчета = Истина;
		Возврат;
	КонецЕсли;
	ОчиститьТабличныеЧастиДокумента();
	
	КорректировкаРасчетаПриИзмененииПродолжение();

КонецПроцедуры // ОбработатьРезультатЗапросаКорректировкаРасчетаПриИзменении()

&НаКлиенте
// Процедура вызывает процедуру управления видимостью элементов формы.
Процедура КорректировкаРасчетаПриИзмененииПродолжение()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // КорректировкаРасчетаПриИзмененииПродолжение()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборВПодчиненныхТаблицах", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПередУдалением(Элемент, Отказ)
	
	УдалитьТекущийЛицевойСчетИзПереплатИДолгов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаПомещение".
Процедура ЛицевыеСчетаПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаВладелец".
Процедура ЛицевыеСчетаВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевыеСчетаОбъект".
Процедура ЛицевыеСчетаОбъектПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Объект, "Адрес");
		ТекущиеДанные.Владелец  = 
			  УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекущиеДанные.Объект, Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Переплаты".
Процедура ПереплатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Долги".
Процедура ДолгиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "Переплаты".
Процедура ПереплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтогиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "Переплаты".
Процедура ПереплатыПослеУдаления(Элемент)
	
	ОбновитьИтогиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "Долги".
Процедура ДолгиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтогиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "Долги".
Процедура ДолгиПослеУдаления(Элемент)
	
	ОбновитьИтогиНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ПерезаполнитьДанные();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаРаспределить(Команда)
	
	Если Объект.Проведен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаРаспределить", ЭтотОбъект);
		ТекстВопроса = "Автоматически заполнить документ можно только после отмены его проведения. 
						|Выполнить отмену проведения документа?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаРаспределитьПродолжение();
	
КонецПроцедуры // КомандаРаспределить()

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаСортироватьПоВозрастанию".
Процедура ЛицевыеСчетаСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ЛицевыеСчета", Элементы.ЛицевыеСчета.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаСортироватьПоУбыванию".
Процедура ЛицевыеСчетаСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ЛицевыеСчета", Элементы.ЛицевыеСчета.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КомандаРаспределить".
Процедура ОбработатьРезультатВопросаКомандаРаспределить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
	КомандаРаспределитьПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаКомандаРаспределить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаРаспределить()".
Процедура КомандаРаспределитьПродолжение()
	
	Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед автоматическим распределением введенные данные будут очищены. Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаРаспределитьПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ВызываетЗаполнениеТабличнойЧастиДокумента();

КонецПроцедуры // КомандаРаспределитьПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КомандаРаспределитьПродолжение".
Процедура ОбработатьРезультатВопросаКомандаРаспределитьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТабличныеЧастиДокумента();
	
	ВызываетЗаполнениеТабличнойЧастиДокумента();

КонецПроцедуры // ОбработатьРезультатВопросаКомандаРаспределитьПродолжение()

&НаКлиенте
// Процедура вызывает процедуру заполнения табличной части документа.
Процедура ВызываетЗаполнениеТабличнойЧастиДокумента()
	
	ЗаполнитьТабличныеЧастиДокумента(Истина);
	
КонецПроцедуры // ВызываетЗаполнениеТабличнойЧастиДокумента()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
// Обработчик команды "ОткрытьЭкспрессПроверкуВеденияУчета".
Процедура ОткрытьЭкспрессПроверкуВеденияУчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("КонецПериода",  КонецМесяца(Объект.Дата));
	
	ОткрытьФорму("Отчет.ЭкспрессПроверкаВеденияУчета.Форма", Новый Структура("ПараметрыФормы", ПараметрыФормы));
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти
