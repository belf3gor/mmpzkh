
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;             // Хранит признак новый ли это документ.
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт; // Хранит настройки учетной политики по ТСЖ.
Перем мПорядокУслуг Экспорт;                // Хранит порядок услуг для распределения переплаты.

#Область ЭкспортныеПроцедурыИФункции

// Получает таблицу остатков по начислениям услуг в разрезе месяцев.
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица остатков.
//
Функция ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцев(ОтборПоОбъектам = Ложь) Экспорт

	Запрос = Новый Запрос;
	УсловиеОтбораОбъекты = "";
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если ОтборПоОбъектам Тогда
		
		СписокВидовНачислений = Новый СписокЗначений;
		СписокВидовНачислений.Добавить(Перечисления.КВП_ВидыНачисленияОстатки.Начисление);
		СписокВидовНачислений.Добавить(Перечисления.КВП_ВидыНачисленияОстатки.Пени);
		СписокВидовНачислений.Добавить(Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка);
		
		Запрос.УстановитьПараметр("ЛицевыеСчета",   ЛицевыеСчета.ВыгрузитьКолонку("Объект"));
		Если ИспользоватьДоговор Тогда
				Запрос.УстановитьПараметр("Договоры",       ЛицевыеСчета.ВыгрузитьКолонку("ДоговорКонтрагента"));
		КонецЕсли;
				
		Запрос.УстановитьПараметр("ВидыНачисления", СписокВидовНачислений);
		
		Если ИспользоватьДоговор Тогда
					УсловиеОтбораОбъекты = " И ЛицевойСчет В (&ЛицевыеСчета) 
								|	И Договор В (&Договоры) 
								|	И ВидНачисления В (&ВидыНачисления)";
		Иначе
			УсловиеОтбораОбъекты = " И ЛицевойСчет В (&ЛицевыеСчета) 
								|	И ВидНачисления В (&ВидыНачисления)";
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект) Тогда
			
			ЭтоЛС = ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета");
			
			ОкончаниеУсловия = ?(Объект.ЭтоГруппа, "В ИЕРАРХИИ(&Объект)", ?(ЭтоЛС, "=&Объект", "В (&Объект)"));
			
			Если НЕ ЭтоЛС Тогда
				СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Объект, Дата, ,Ложь);
			КонецЕсли;
			
			УсловиеОтбораОбъекты = "	И ЛицевойСчет " + ОкончаниеУсловия;
			Запрос.УстановитьПараметр("Объект", ?(ЭтоЛС, Объект, СписокЛС));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК Объект,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Договор,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцРассрочки,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаОстатка
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&Дата, Организация = &Организация" + УсловиеОтбораОбъекты + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Объект,
	|	ТаблицаОстатков.Договор КАК ДоговорКонтрагента,
	|	ТаблицаОстатков.Услуга,
	|	ТаблицаОстатков.ВидНачисления КАК ВидНачисления,
	|	ТаблицаОстатков.МесяцНачисления КАК МесяцНачисления,
	|	ТаблицаОстатков.МесяцРассрочки КАК МесяцРассрочки,
	|	ТаблицаОстатков.СуммаОстатка,
	|	ЗНАЧЕНИЕ(Документ.УПЖКХ_ЗаявлениеНаРассрочку.ПустаяСсылка) КАК ЗаявлениеНаРассрочку,
	|	0 КАК СуммаКорректировки,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатков.СуммаОстатка < 0
	|			ТОГДА ТаблицаОстатков.СуммаОстатка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НераспределеннаяСуммаПереплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатков.СуммаОстатка < 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаОстатков.СуммаОстатка
	|	КОНЕЦ КАК ОставшаясяСуммаДолга,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатков.СуммаОстатка < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПереплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОстатков.Объект.Наименование,
	|	МесяцНачисления,
	|	ТаблицаОстатков.Услуга.Наименование,
	|	ВидНачисления УБЫВ,
	|	МесяцРассрочки";
	
	Если НЕ ИспользоватьДоговор Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Договор,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ТаблицаОстатков.Договор КАК ДоговорКонтрагента,", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата",           Граница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("НачислениеВМесяц", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ПроцентнаяСтавка", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцев()

// Добавляет в таблицу значений строки из табличной части.
Функция ДобавитьСтрокиВТзИзТч(Источник, Приемник) Экспорт
	
	Для Каждого Строка из Источник.Выгрузить() Цикл
		НоваяСтрока = Приемник.Добавить();
		Для Каждого Колонка Из Приемник.Колонки Цикл
			Попытка
				НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
			Исключение
				НоваяСтрока[Колонка.Имя] = 0;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

// Устанавливает актуальные настройки учетной политики ТСЖ при необходимости.
//
// Параметры
//  ФлагОбновления  - флаг обязательного обновления настроек учетной политики.
//
Процедура ОбновитьНастройкиУчетнойПолитикиТСЖ(ФлагОбновления = Истина) Экспорт
	
	Если ФлагОбновления ИЛИ мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиУчетнойПолитикиТСЖ()

// Функция предназначена для добавления в таблицу групп ограничения распределения аванса
// новой группы ограничения "Капитальный ремонт".
// Добавляется только в том случае, если в организации ведется раздельный учет по услугам капитального ремонта
// и запрещен взаимозачет авансов и долгов между услугами капремонта и прочими услугами.
//
Функция ПодготовитьТаблицуГруппОграниченияРаспределенияАванса()
	
	// Таблица результат.
	ТаблицаГруппУслугОграниченияДляРаспределенияАванса = Новый ТаблицаЗначений;
	ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Колонки.Добавить("Услуга",                      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Колонки.Добавить("МассивУслугДляРаспределения", Новый ОписаниеТипов("Массив"));
	
	// Получаем настройки групп ограничения из учетной политики ЖКХ.
	ТаблицаГруппОграниченияИзНастроекЖХК = мНастройкиУчетнойПолитикиТСЖ.ГруппыУслугДляРаспределенияАвансовПриЗакрытииПериода.Получить();
	
	// Добавим группы услуг из настроек ЖКХ.
	// При этом может быть ситуация, когда в настройках задана только одна предопределенная группа "Капитальный ремонт".
	// В данном случае в настройках таблица групп услуг может быть пустой, тогда таблицу надо определить здесь.
	// Это нужно для того, чтобы предопределенная группа кап. ремонта, если она есть, была учтена.
	Если Не ТипЗнч(ТаблицаГруппОграниченияИзНастроекЖХК) = Тип("ТаблицаЗначений") Тогда
		ТаблицаГруппОграниченияИзНастроекЖХК = Новый ТаблицаЗначений;
		ТаблицаГруппОграниченияИзНастроекЖХК.Колонки.Добавить("ГруппаОграничения", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
		ТаблицаГруппОграниченияИзНастроекЖХК.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	КонецЕсли;
	
	мСтруктураНастроекПоКапремонту = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
	// Если запрещен взаимозачет авансов и долгов между услугами капитального ремонта и основными услугами,
	// то добавим новую группу ограничения "Капитальный ремонт".
	Если мСтруктураНастроекПоКапремонту.ЗапретитьВзаимозачетАвансовИДолгов Тогда
		Для Каждого ТекУслугаКР Из мСтруктураНастроекПоКапремонту.СписокУслуг Цикл
			НоваяСтрока                   = ТаблицаГруппОграниченияИзНастроекЖХК.Добавить();
			НоваяСтрока.ГруппаОграничения = "Капитальный ремонт";
			НоваяСтрока.Услуга            = ТекУслугаКР.Значение;
		КонецЦикла;
	КонецЕсли;
	
	втТаблицаУслуг = ТаблицаГруппОграниченияИзНастроекЖХК.Скопировать(,"Услуга");
	втТаблицаУслуг.Свернуть("Услуга");
	
	СтруктураПоискаГО = Новый Структура("Услуга");
	СтруктураПоискаУ  = Новый Структура("ГруппаОграничения");
	
	Для Каждого ТекУслуга Из втТаблицаУслуг Цикл
		
		НоваяУслуга = ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Добавить();
		НоваяУслуга.Услуга = ТекУслуга.Услуга;
		
		СтруктураПоискаГО.Услуга = ТекУслуга.Услуга;
		
		врМассивУслугДляРаспределения = Новый Массив;
		
		НайденныеГО = ТаблицаГруппОграниченияИзНастроекЖХК.НайтиСтроки(СтруктураПоискаГО);
		Для Каждого ТекГО Из НайденныеГО Цикл
			СтруктураПоискаУ.ГруппаОграничения = ТекГО.ГруппаОграничения;
			НайденныеУслуги = ТаблицаГруппОграниченияИзНастроекЖХК.НайтиСтроки(СтруктураПоискаУ);
			Для Каждого ТекУГО Из НайденныеУслуги Цикл
				Если врМассивУслугДляРаспределения.Найти(ТекУГО.Услуга) = Неопределено Тогда
					врМассивУслугДляРаспределения.Добавить(ТекУГО.Услуга);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НоваяУслуга.МассивУслугДляРаспределения = врМассивУслугДляРаспределения;
		
	КонецЦикла;
	
	// Добавляем новую группу услуг не входящих ни в одну группу ограничения.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И НЕ КВП_Услуги.Ссылка В (&УслугиВходящиеВГруппыОграничения)";
	
	Запрос.УстановитьПараметр("УслугиВходящиеВГруппыОграничения", ТаблицаГруппУслугОграниченияДляРаспределенияАванса.ВыгрузитьКолонку("Услуга"));
	
	МассивУслугНеВходящихВГруппыОграничения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга");
	Для каждого ТекЭлемент Из МассивУслугНеВходящихВГруппыОграничения Цикл
		НоваяУслуга = ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Добавить();
		НоваяУслуга.Услуга                      = ТекЭлемент;
		НоваяУслуга.МассивУслугДляРаспределения = МассивУслугНеВходящихВГруппыОграничения;
	КонецЦикла;
	
	Возврат ТаблицаГруппУслугОграниченияДляРаспределенияАванса;
	
КонецФункции // ПодготовитьТаблицуГруппОграниченияРаспределенияАванса()

// Функция возвращает массив строк с остаткми по отбору.
//
Функция ПодготовитьМассивСтрокСОстаткамиСУчетомОтборов(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска, Услуга, РаспределятьНаУслуги, ТаблицаГруппУслугОграниченияДляРаспределенияАванса = Неопределено)
	
	МассивСОтобраннымиСтроками = Новый Массив;
	// Если разрешено распределение авансов на погашение задолженности по другим услугам.
	// То:
	Если РаспределятьНаУслуги Тогда
		
		текУслугаДляРаспределенияАванса = Неопределено;
		
		Если ТипЗнч(ТаблицаГруппУслугОграниченияДляРаспределенияАванса) = Тип("ТаблицаЗначений") Тогда
			текУслугаДляРаспределенияАванса = ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Найти(Услуга, "Услуга");
		КонецЕсли;
		
		// Если текущая услуга с авансом состоит в группах ограничения, то условия на группу ограничения накладываются 
		// и результирующая таблица постепенно накапливается услугами из текущей группы ограничения.
		Если НЕ текУслугаДляРаспределенияАванса = Неопределено Тогда
			
			СтруктураПоиска.Вставить("Услуга");
			
			ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
			
			Для каждого ТекУслуга Из текУслугаДляРаспределенияАванса.МассивУслугДляРаспределения Цикл
				
				СтруктураПоиска.Услуга = ТекУслуга;
				
				НайденныеСтрокиОстатков = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
				Для каждого ТекОстаток Из НайденныеСтрокиОстатков Цикл
					МассивСОтобраннымиСтроками.Добавить(ТекОстаток);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
		МассивСОтобраннымиСтроками = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Возврат МассивСОтобраннымиСтроками;
	
КонецФункции // ПодготовитьМассивСтрокСОстаткамиСУчетомОтборов()

// Дополняет таблицу остатков сведениями о непогашенной рассрочке.
//
// ТаблицаОстатков - таблица с сальдо по услугам.
// ТаблицаКорректировок - таблица, содержащая информацию о рассрочке.
//
Процедура ДополнитьТаблицуОстатковСведениямиОРассрочке(ТаблицаОстатков, ТаблицаКорректировок) Экспорт
	
	СтруктураПоиска = Новый Структура("МесяцНачисления", '00010101');
	ДополнитьТаблицуОстатковИндексами(ТаблицаКорректировок, СтруктураПоиска);
	СтрокиРассрочки = ТаблицаКорректировок.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
		НоваяСтрока = ТаблицаОстатков.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРассрочки);
		НоваяСтрока.НераспределеннаяСуммаПереплаты = 0;
		НоваяСтрока.ОставшаясяСуммаДолга           = НоваяСтрока.СуммаОстатка + НоваяСтрока.СуммаКорректировки;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуОстатковСведениямиОРассрочке()

// Дополняет таблицу остатков требуемым в текущий момент индексом, если такой индекс отсутствует.
// Наличие индексов по полям таблицы необходимо для увеличения быстродействия поиска.
//
// ТаблицаОстатков - таблица с сальдо по услугам.
// СтруктураПоиска - структура, по ключам которой будет выполняться поиск в таблице значений "ТаблицаОстатков".
//
Процедура ДополнитьТаблицуОстатковИндексами(ТаблицаОстатков, СтруктураПоиска)
	
	СтрокаКлючей = "";
	ПервыйОбход  = Истина;
	Для Каждого КлючСтруктуры Из СтруктураПоиска Цикл
		Если НЕ ПервыйОбход Тогда
			СтрокаКлючей = СтрокаКлючей + ", " + КлючСтруктуры.Ключ;
		Иначе
			СтрокаКлючей = СтрокаКлючей + КлючСтруктуры.Ключ;
			ПервыйОбход = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПолейИндексов = Новый Массив;
	
	Для Каждого ТекИндекс Из ТаблицаОстатков.Индексы Цикл
		МассивСтрокПолейИндексов.Добавить(Строка(ТекИндекс));
	КонецЦикла;
	
	Если МассивСтрокПолейИндексов.Найти(СтрокаКлючей) = Неопределено Тогда
		ТаблицаОстатков.Индексы.Добавить(СтрокаКлючей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроведенияДокумента

// Выполняет проверку сумм корректировок документа.
// Сумма корректировок в пределах одной строки (лицевого счета + договора + вида начисления) должна быть равна 0.
Функция ПроверкаСуммыКорректировки(Отказ)
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого Строка Из ЛицевыеСчета Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Строка.Объект);
		
		Если ИспользоватьДоговор Тогда
			Отбор.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента);
		КонецЕсли;
		
		Переплаты_Итог = Переплаты.Выгрузить(Отбор);
		Долги_Итог=Долги.Выгрузить(Отбор);
		СуммаКорректировкиПереплаты = Переплаты_Итог.Итог("СуммаКорректировки");
		СуммаКорректировкиДолги = Долги_Итог.Итог("СуммаКорректировки");
		
		Если СуммаКорректировкиДолги + СуммаКорректировкиПереплаты = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для строки " + (ЛицевыеСчета.Индекс(Строка) + 1)
														+ " таблицы ""Лицевые счета"" указаны не верные суммы корректировки!", Отказ);
		
	КонецЦикла;
	
КонецФункции

Функция СортироватьТаблицуОстатков(ТаблицаОстатков)
	
	мПорядокУслуг = КВП_ЗаполнитьПорядокУслуг();
	МаксНомер = мПорядокУслуг.Количество() + 1;
	
	ТаблицаОстатков.Колонки.Добавить("ПорядокУслуги");
	
	Для Каждого ТекУслуга Из ТаблицаОстатков Цикл
		ТекЗначение = мПорядокУслуг.НайтиПоЗначению(ТекУслуга.Услуга.ВидУслуги);
		Если ТекЗначение = Неопределено Тогда
			ТекУслуга.ПорядокУслуги = МаксНомер;
		Иначе
			ТекУслуга.ПорядокУслуги = мПорядокУслуг.Индекс(ТекЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОстатков.Сортировать("МесяцНачисления, ВидНачисления Убыв, ПорядокУслуги, МесяцРассрочки");
	
	Для Каждого ТекУслуга Из ТаблицаОстатков Цикл
		ТекУслуга.ПорядокУслуги=?(ТекУслуга.ПорядокУслуги=МаксНомер, Ложь, Истина);
	КонецЦикла;
	
КонецФункции

// Формирует таблицу корректировок записей регистров по остаткам начисления.
Функция ПодготовитьТаблицуКорректировки(ЭтоПроведениеДокумента = Истина) Экспорт
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, 
																											  Организация);
	КонецЕсли;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если КорректировкаРасчета И ЭтоПроведениеДокумента Тогда
		
		ТаблицаОбщая = Переплаты.ВыгрузитьКолонки();
		ТаблицаОбщая.Колонки.Добавить("МесяцРассрочки",       Новый ОписаниеТипов("Дата"));
		ТаблицаОбщая.Колонки.Добавить("НачислениеВМесяц",     Новый ОписаниеТипов("Число"));
		ТаблицаОбщая.Колонки.Добавить("ПроцентнаяСтавка",     Новый ОписаниеТипов("Число"));
		ТаблицаОбщая.Колонки.Добавить("ЗаявлениеНаРассрочку", Новый ОписаниеТипов("ДокументСсылка.УПЖКХ_ЗаявлениеНаРассрочку"));
		
		ДобавитьСтрокиВТзИзТч(Переплаты, ТаблицаОбщая);
		ДобавитьСтрокиВТзИзТч(Долги,     ТаблицаОбщая);
		ТаблицаОбщая.Колонки.Добавить("ЭтоПереплата");
		Для каждого Строка Из ТаблицаОбщая Цикл
			Строка.ЭтоПереплата = ?(Строка.СуммаОстатка < 0, Истина, Ложь);
		КонецЦикла;
		
		ТаблицаКорректировки = ТаблицаОбщая;
		
	Иначе
		
		ТаблицаОстатковВРазрезеМесяцев = ПолучитьТаблицуОстатковПоНачислениямВРазрезеМесяцев(?(ЛицевыеСчета.Количество() = 0,
																							   Ложь,
																							   Истина));
		
		РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "Начисление", Ложь);
		
		Если мНастройкиУчетнойПолитикиТСЖ.РазрешитьПереносАвансаПоНачислениямНаПогашениеЗадолженностиПоПени Тогда
			РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "Пени", Ложь);
		КонецЕсли;
		
		ВРамкахОдногоМесяца   = мНастройкиУчетнойПолитикиТСЖ.ВыполнятьПереносВРамкахОдногоМесяцаНачисления;
		РаспределятьПоУслугам = мНастройкиУчетнойПолитикиТСЖ.РазрешитьПереносАвансовНаДолгиПоВсемУслугам;
		
		Если РаспределятьПоУслугам Тогда
			
			ТаблицаГруппУслугОграниченияДляРаспределенияАванса = ПодготовитьТаблицуГруппОграниченияРаспределенияАванса();
			
			СортироватьТаблицуОстатков(ТаблицаОстатковВРазрезеМесяцев);
			
			СпособРасчетаПени = Неопределено;
			Если мНастройкиУчетнойПолитикиТСЖ.РазрешитьПереносАвансаПоНачислениямНаПогашениеЗадолженностиПоПени
				И ЗначениеЗаполнено(мНастройкиУчетнойПолитикиТСЖ.НастройкаРасчетаПени) Тогда
				СпособРасчетаПени = мНастройкиУчетнойПолитикиТСЖ.НастройкаРасчетаПени.ВариантОплатыПени;
			КонецЕсли;
			
			Если СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.ВПервуюОчередь Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиПениПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачисленийПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			ИначеЕсли СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.ВПоследнююОчередь Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачисленийПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиПениПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			ИначеЕсли СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.РаспределятьПропорционально Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			Иначе
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачисленийПоСписку", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			КонецЕсли;
			
			Если СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.ВПервуюОчередь Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиПени", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачислений", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			ИначеЕсли СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.ВПоследнююОчередь Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачислений", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиПени", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			ИначеЕсли СпособРасчетаПени = Перечисления.КВП_ВариантыОплатыПени.РаспределятьПропорционально Тогда
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "Остатки", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			Иначе
				РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, "ОстаткиНачислений", ВРамкахОдногоМесяца, Истина, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ТаблицаОстатковВРазрезеМесяцев.Итог("НераспределеннаяСуммаПереплаты") = 0
		 И Не ВРамкахОдногоМесяца Тогда
			РаспределитьПереплатуНаНепогашеннуюРассрочку(ТаблицаОстатковВРазрезеМесяцев, РаспределятьПоУслугам, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
		КонецЕсли;
		
		Если ИспользоватьДоговор Тогда 
			ТаблицаОстатковВРазрезеМесяцев.Свернуть("ВидНачисления, ДоговорКонтрагента, МесяцНачисления, МесяцРассрочки, Объект, Услуга, ЗаявлениеНаРассрочку,
												|ЭтоПереплата, НачислениеВМесяц, ПроцентнаяСтавка",
												"СуммаКорректировки, СуммаОстатка");
		Иначе
			ТаблицаОстатковВРазрезеМесяцев.Свернуть("ВидНачисления, МесяцНачисления, МесяцРассрочки, Объект, Услуга, ЗаявлениеНаРассрочку,
												|ЭтоПереплата, НачислениеВМесяц, ПроцентнаяСтавка",
												"СуммаКорректировки, СуммаОстатка");
		КонецЕсли;
		
		ТаблицаКорректировки = ТаблицаОстатковВРазрезеМесяцев;
		
	КонецЕсли;
	
	Если ЭтоПроведениеДокумента Тогда          
		НулевыеСтроки = ТаблицаКорректировки.НайтиСтроки(Новый Структура("СуммаКорректировки", 0));
		Для Каждого ТекСтрока Из НулевыеСтроки Цикл
			ТаблицаКорректировки.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
		
	Возврат ТаблицаКорректировки;
	
КонецФункции // ПодготовитьТаблицуКорректировки()

// Процедура распределяет переплату.
Процедура РаспределитьПереплату(ТаблицаОстатковВРазрезеМесяцев, СпособРаспределения, ВРазрезеМесяца, РаспределятьНаУслуги = Ложь, ТаблицаГруппУслугОграниченияДляРаспределенияАванса = Неопределено)
	
	СтруктураПоиска = Новый Структура("ЭтоПереплата", Истина);
	Если НЕ СпособРаспределения = "Начисление" Тогда
		СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Начисление);
	КонецЕсли;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
	
	СтрокиПереплат = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаПереплаты Из СтрокиПереплат Цикл
		
		Если СтрокаПереплаты.НераспределеннаяСуммаПереплаты = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		МесяцНачисления = Неопределено;
		Если СпособРаспределения = "ОстаткиПени" ИЛИ СпособРаспределения = "ОстаткиНачислений"
			ИЛИ СпособРаспределения = "Остатки" ИЛИ СпособРаспределения = "ОстаткиПоСписку" ИЛИ ВРазрезеМесяца Тогда
			
			Если ИспользоватьДоговор Тогда 
				СтруктураПоиска = Новый Структура("Объект, ДоговорКонтрагента, ЭтоПереплата, ПорядокУслуги",
												   СтрокаПереплаты.Объект, СтрокаПереплаты.ДоговорКонтрагента, Ложь, Ложь);
			Иначе	
				СтруктураПоиска = Новый Структура("Объект, ЭтоПереплата, ПорядокУслуги",
												   СтрокаПереплаты.Объект, Ложь, Ложь);
			КонецЕсли;
			
			Если СпособРаспределения = "ОстаткиПоСписку" Тогда
				СтруктураПоиска.ПорядокУслуги = Истина;
			КонецЕсли;
			
			СтрокиСМесяцамиДолгов = ПодготовитьМассивСтрокСОстаткамиСУчетомОтборов(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска, СтрокаПереплаты.Услуга, РаспределятьНаУслуги, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			
			ТаблицаМесяцевДолгов = ТаблицаОстатковВРазрезеМесяцев.Скопировать(СтрокиСМесяцамиДолгов, "МесяцНачисления");
			
			Для Каждого МесяцДолга Из ТаблицаМесяцевДолгов Цикл
				МесяцДолга.МесяцНачисления = НачалоДня(КонецМесяца(МесяцДолга.МесяцНачисления));
			КонецЦикла;
			
			ТаблицаМесяцевДолгов.Свернуть("МесяцНачисления");
			ТаблицаМесяцевДолгов.Сортировать("МесяцНачисления");
			
			НайденныйМесяц = ТаблицаМесяцевДолгов.Найти(НачалоДня(КонецМесяца(СтрокаПереплаты.МесяцНачисления)));
			Если НЕ НайденныйМесяц = Неопределено Тогда
				МесяцНачисления = НайденныйМесяц.МесяцНачисления;
			КонецЕсли;
			
			Если ВРазрезеМесяца Тогда
				ТаблицаМесяцевДолгов = ТаблицаМесяцевДолгов.Скопировать(Новый Структура("МесяцНачисления", МесяцНачисления));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьДоговор Тогда 
			СтруктураПоиска = Новый Структура("Объект, ДоговорКонтрагента, ЭтоПереплата", 
											   СтрокаПереплаты.Объект, СтрокаПереплаты.ДоговорКонтрагента, Ложь);
		Иначе
			СтруктураПоиска = Новый Структура("Объект, ЭтоПереплата", 
											   СтрокаПереплаты.Объект, Ложь);
		КонецЕсли;
		
		Если СпособРаспределения = "Начисление" Тогда
			СтруктураПоиска.Вставить("Услуга",        СтрокаПереплаты.Услуга);
			СтруктураПоиска.Вставить("ВидНачисления", СтрокаПереплаты.ВидНачисления);
		ИначеЕсли СпособРаспределения = "Пени" Тогда
			СтруктураПоиска.Вставить("Услуга",        СтрокаПереплаты.Услуга);
			СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Пени);
		ИначеЕсли СпособРаспределения = "ОстаткиПениПоСписку" Тогда
			
			СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Пени);
			СтруктураПоиска.Вставить("ПорядокУслуги", Истина);
			
			Если ВРазрезеМесяца Тогда
				СтруктураПоиска.Вставить("МесяцНачисления", МесяцНачисления);
			КонецЕсли;
			
		ИначеЕсли СпособРаспределения = "ОстаткиНачисленийПоСписку" Тогда 
			
			СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Начисление);
			СтруктураПоиска.Вставить("ПорядокУслуги", Истина);
			
			Если ВРазрезеМесяца Тогда
				СтруктураПоиска.Вставить("МесяцНачисления", МесяцНачисления);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СпособРаспределения = "ОстаткиПени" И НЕ СпособРаспределения = "ОстаткиНачислений"
			И НЕ СпособРаспределения = "Остатки" И НЕ СпособРаспределения = "ОстаткиПоСписку" Тогда
			
			СтрокиДолговПоУслуге = ПодготовитьМассивСтрокСОстаткамиСУчетомОтборов(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска, СтрокаПереплаты.Услуга, РаспределятьНаУслуги, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
			
			// При распределении переплаты на начисления учитываем также и рассрочку.
			Если СтруктураПоиска.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Начисление Тогда
				СтрокиДолговПоУслуге = ПолучитьМассивСтрокСДолгами(СтрокиДолговПоУслуге, СтруктураПоиска, ТаблицаОстатковВРазрезеМесяцев);
			КонецЕсли;
			
			Для Каждого СтрокаДолгаПоУслуге Из СтрокиДолговПоУслуге Цикл
				
				Если СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаПогашения = ?(-СтрокаПереплаты.НераспределеннаяСуммаПереплаты > СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга, 
									-СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга, 
									СтрокаПереплаты.НераспределеннаяСуммаПереплаты);
				СтрокаДолгаПоУслуге.СуммаКорректировки         = СтрокаДолгаПоУслуге.СуммаКорректировки + СуммаПогашения;
				СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга       = СтрокаДолгаПоУслуге.СуммаОстатка 
															   + СтрокаДолгаПоУслуге.СуммаКорректировки;
				СтрокаПереплаты.СуммаКорректировки             = СтрокаПереплаты.СуммаКорректировки - СуммаПогашения;
				СтрокаПереплаты.НераспределеннаяСуммаПереплаты = СтрокаПереплаты.СуммаОстатка + СтрокаПереплаты.СуммаКорректировки;
				
				Если НЕ СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга = 0 Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого МесяцНачисления Из ТаблицаМесяцевДолгов Цикл
				
				Если ИспользоватьДоговор Тогда 
					СтруктураПоиска = Новый Структура("Объект, ДоговорКонтрагента, ЭтоПереплата, ПорядокУслуги, МесяцНачисления",
												       СтрокаПереплаты.Объект, СтрокаПереплаты.ДоговорКонтрагента, Ложь, Ложь, МесяцНачисления.МесяцНачисления);
				Иначе
					СтруктураПоиска = Новый Структура("Объект, ЭтоПереплата, ПорядокУслуги, МесяцНачисления",
												       СтрокаПереплаты.Объект, Ложь, Ложь, МесяцНачисления.МесяцНачисления);
				КонецЕсли;
				
				Если СпособРаспределения = "ОстаткиПени" Тогда
					СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Пени);
				ИначеЕсли СпособРаспределения = "ОстаткиНачислений" Тогда
					СтруктураПоиска.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Начисление);
				ИначеЕсли СпособРаспределения = "ОстаткиПоСписку" Тогда
					СтруктураПоиска.Вставить("ПорядокУслуги", Истина);
				КонецЕсли;
				
				СтрокиДолгов = ПодготовитьМассивСтрокСОстаткамиСУчетомОтборов(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска, СтрокаПереплаты.Услуга, РаспределятьНаУслуги, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
				
				// При распределении переплаты на начисления учитываем также и рассрочку.
				Если СтруктураПоиска.Свойство("ВидНачисления")
				 И СтруктураПоиска.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Начисление Тогда
					СтрокиДолгов = ПолучитьМассивСтрокСДолгами(СтрокиДолгов, СтруктураПоиска, ТаблицаОстатковВРазрезеМесяцев);
				КонецЕсли;
				
				ОбщаяСуммаДолгаЗаМесяц = 0;
				Для Каждого СтрокаДолга Из СтрокиДолгов Цикл
					ОбщаяСуммаДолгаЗаМесяц = ОбщаяСуммаДолгаЗаМесяц + СтрокаДолга.ОставшаясяСуммаДолга;
				КонецЦикла;
				
				ГасимДолгиПолностью = ?(-СтрокаПереплаты.НераспределеннаяСуммаПереплаты >= ОбщаяСуммаДолгаЗаМесяц, Истина, Ложь);
				
				Если ГасимДолгиПолностью Тогда
					
					Для Каждого СтрокаДолгаПоУслуге Из СтрокиДолгов Цикл
						
						Если СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга = 0 Тогда 
							Продолжить; 
						КонецЕсли;
						
						СуммаПогашения = -СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга;
						СтрокаДолгаПоУслуге.СуммаКорректировки         = СтрокаДолгаПоУслуге.СуммаКорректировки 
																	   + СуммаПогашения;
						СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга       = СтрокаДолгаПоУслуге.СуммаОстатка 
																	   + СтрокаДолгаПоУслуге.СуммаКорректировки;
						СтрокаПереплаты.СуммаКорректировки             = СтрокаПереплаты.СуммаКорректировки - СуммаПогашения;
						СтрокаПереплаты.НераспределеннаяСуммаПереплаты = СтрокаПереплаты.СуммаОстатка + СтрокаПереплаты.СуммаКорректировки;
						
					КонецЦикла;
					
				Иначе
					
					ОбщаяСуммаПереплаты = СтрокаПереплаты.НераспределеннаяСуммаПереплаты;
					
					Для Каждого СтрокаДолгаПоУслуге Из СтрокиДолгов Цикл
						
						Если СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга = 0 Тогда 
							Продолжить; 
						КонецЕсли;
						
						СуммаПогашения = Цел(ОбщаяСуммаПереплаты * СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга / ОбщаяСуммаДолгаЗаМесяц * 100) 
									   / 100;
						СтрокаДолгаПоУслуге.СуммаКорректировки         = СтрокаДолгаПоУслуге.СуммаКорректировки 
																	   + СуммаПогашения;
						СтрокаДолгаПоУслуге.ОставшаясяСуммаДолга       = СтрокаДолгаПоУслуге.СуммаОстатка 
																	   + СтрокаДолгаПоУслуге.СуммаКорректировки;
						СтрокаПереплаты.СуммаКорректировки             = СтрокаПереплаты.СуммаКорректировки - СуммаПогашения;
						СтрокаПереплаты.НераспределеннаяСуммаПереплаты = СтрокаПереплаты.СуммаОстатка + СтрокаПереплаты.СуммаКорректировки;
						
					КонецЦикла;
					
					Если СтрокаПереплаты.НераспределеннаяСуммаПереплаты < 0 Тогда
						
						Для Каждого СтрокаДолга Из СтрокиДолгов Цикл
							
							Если СтрокаПереплаты.НераспределеннаяСуммаПереплаты = 0 Тогда
								Прервать;
							КонецЕсли;
							
							Если СтрокаДолга.ОставшаясяСуммаДолга = 0 Тогда 
								Продолжить;
							КонецЕсли;
							
							СуммаПогашения = СтрокаПереплаты.НераспределеннаяСуммаПереплаты;
							
							Если СтрокаДолга.ОставшаясяСуммаДолга < СуммаПогашения Тогда
								СуммаПогашения = СтрокаДолга.ОставшаясяСуммаДолга;
							КонецЕсли;
							
							СтрокаДолга.СуммаКорректировки                 = СтрокаДолга.СуммаКорректировки 
																		   + СуммаПогашения;
							СтрокаДолга.ОставшаясяСуммаДолга               = СтрокаДолга.СуммаОстатка 
																		   + СтрокаДолга.СуммаКорректировки;
							СтрокаПереплаты.СуммаКорректировки             = СтрокаПереплаты.СуммаКорректировки 
																		   - СуммаПогашения;
							СтрокаПереплаты.НераспределеннаяСуммаПереплаты = СтрокаПереплаты.СуммаОстатка 
																		   + СтрокаПереплаты.СуммаКорректировки;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПереплату()

// Формирует массив с долгами по услуге в разрезе видов начисления "Начисление" и "Рассрочка". 
// При этом строки с долгами в разрезе вида начисления "Рассрочка" для каждого месяца заносим 
// в массив на первые позиции т.к. рассрочка приоритетнее начислений.
//
// Параметры:
//  СтрокиДолговПоУслуге - строки с долгами по услуге в разрезе вида начисления "Начисление".
//  СтруктураПоиска - структура с параметрами поиска долгов.
//  ТаблицаОстатковВРазрезеМесяцев - общая таблица с долгами.
//
// Возвращаемое значение:
//  Массив - массив с долгами.
//
Функция ПолучитьМассивСтрокСДолгами(СтрокиДолговПоУслуге, СтруктураПоиска, ТаблицаОстатковВРазрезеМесяцев)
	
	СтруктураПоиска.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
	
	ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
	
	СтрокиДолговПоУслугеРассрочка = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
	
	ОбщийМассивДолгов = Новый Массив;
	ТаблицаИндексов   = Новый ТаблицаЗначений;
	ТаблицаИндексов.Колонки.Добавить("ИндексСтроки");
	ТаблицаИндексов.Колонки.Добавить("СтрокаТаблицы");
	
	Для Каждого СтрокаДолгаРассрочка Из СтрокиДолговПоУслугеРассрочка Цикл
		СтрокиДолговПоУслуге.Добавить(СтрокаДолгаРассрочка);
	КонецЦикла;
	
	Для Каждого СтрокаДолга Из СтрокиДолговПоУслуге Цикл
		НоваяСтрока = ТаблицаИндексов.Добавить();
		НоваяСтрока.ИндексСтроки = ТаблицаОстатковВРазрезеМесяцев.Индекс(СтрокаДолга);
		НоваяСтрока.СтрокаТаблицы = СтрокаДолга;
	КонецЦикла;
	
	ТаблицаИндексов.Сортировать("ИндексСтроки");
	
	Для Каждого Строка Из ТаблицаИндексов Цикл
		ОбщийМассивДолгов.Добавить(Строка.СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ОбщийМассивДолгов;
		
КонецФункции // ПолучитьМассивСтрокСДолгами()

// Распределяет оставшиеся переплаты на непогашенную рассрочку.
//
// Параметры:
//  ТаблицаОстатковВРазрезеМесяцев - таблица с сальдо по услугам.
//
Процедура РаспределитьПереплатуНаНепогашеннуюРассрочку(ТаблицаОстатковВРазрезеМесяцев, РаспределятьПоУслугам, ТаблицаГруппУслугОграниченияДляРаспределенияАванса)
	
	// Ищем строки с переплатами.
	СтрокиПереплаты = Новый Массив;
	Для Каждого СтрокаОстатка Из ТаблицаОстатковВРазрезеМесяцев Цикл
		Если СтрокаОстатка.НераспределеннаяСуммаПереплаты < 0 Тогда
			СтрокиПереплаты.Добавить(СтрокаОстатка);
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьСведенияОНепогашеннойРассрочке(ТаблицаОстатковВРазрезеМесяцев, РаспределятьПоУслугам);
	
	// Распределяем переплату на непогашенную рассрочку в разрезе услуг.
	СтруктураПоиска = Новый Структура("МесяцНачисления", '00010101');
	ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
	
	СтрокиРассрочки = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
	РаспределитьПереплатуНаРассрочку(ТаблицаОстатковВРазрезеМесяцев, СтрокиРассрочки, СтрокиПереплаты, ТаблицаГруппУслугОграниченияДляРаспределенияАванса);
	
	// Распределяем переплату на непогашенную рассрочку с учетом приоритета услуг.
	Если ТаблицаОстатковВРазрезеМесяцев.Итог("НераспределеннаяСуммаПереплаты") < 0 И РаспределятьПоУслугам Тогда
		
		СтруктураПоиска = Новый Структура("МесяцНачисления, ПорядокУслуги", '00010101', Истина);
		ДополнитьТаблицуОстатковИндексами(ТаблицаОстатковВРазрезеМесяцев, СтруктураПоиска);
		
		СтрокиРассрочки = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
		РаспределитьПереплатуНаРассрочку(ТаблицаОстатковВРазрезеМесяцев, СтрокиРассрочки, СтрокиПереплаты, ТаблицаГруппУслугОграниченияДляРаспределенияАванса, Ложь);
		
		СтруктураПоиска.ПорядокУслуги = Ложь;
		СтрокиРассрочки = ТаблицаОстатковВРазрезеМесяцев.НайтиСтроки(СтруктураПоиска);
		РаспределитьПереплатуНаРассрочку(ТаблицаОстатковВРазрезеМесяцев, СтрокиРассрочки, СтрокиПереплаты, ТаблицаГруппУслугОграниченияДляРаспределенияАванса, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПереплатуНаНепогашеннуюРассрочку()

// Добавляет в таблицу остатков строки, соответствующие непогашенной рассрочке, указывая нулевой месяц
// в качестве месяца начислений.
//
// Параметры:
//  ТаблицаОстатковВРазрезеМесяцев - таблица остатков.
//  РаспределятьПоУслугам - флаг распределения переплаты между услугами.
//
Процедура ПодготовитьСведенияОНепогашеннойРассрочке(ТаблицаОстатковВРазрезеМесяцев, РаспределятьПоУслугам)
	
	ТаблицаЛС = ТаблицаОстатковВРазрезеМесяцев.Скопировать();
	ТаблицаЛС.Свернуть("Объект");
	
	СписокЛС = Новый СписокЗначений;
	СписокЛС.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("Объект"));
	
	ТаблицаРассрочки = Документы.УПЖКХ_ЗаявлениеНаРассрочку.ПолучитьТаблицуОстатковПоРассрочке(Организация,
																							СписокЛС,
																							,
																							КонецМесяца(Дата));
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор не используется при учете.
	ИспользоватьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если РаспределятьПоУслугам Тогда
		СортироватьТаблицуРассрочки(ТаблицаРассрочки);
	КонецЕсли;
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		НоваяСтрока = ТаблицаОстатковВРазрезеМесяцев.Добавить();
		НоваяСтрока.Объект                         = СтрокаРассрочки.ЛицевойСчет;
		
		Если ИспользоватьДоговор Тогда
			НоваяСтрока.ДоговорКонтрагента             = СтрокаРассрочки.Договор;
		КонецЕсли;
		
		НоваяСтрока.Услуга                         = СтрокаРассрочки.Услуга;
		НоваяСтрока.ВидНачисления                  = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
		НоваяСтрока.МесяцНачисления                = '00010101';
		НоваяСтрока.МесяцРассрочки                 = СтрокаРассрочки.МесяцРассрочки;
		НоваяСтрока.НачислениеВМесяц               = СтрокаРассрочки.НачислениеВМесяц;
		НоваяСтрока.ПроцентнаяСтавка               = СтрокаРассрочки.ГодоваяПроцентнаяСтавка;
		НоваяСтрока.СуммаОстатка                   = СтрокаРассрочки.ОстатокРассрочки;
		НоваяСтрока.ОставшаясяСуммаДолга           = СтрокаРассрочки.ОстатокРассрочки;
		НоваяСтрока.СуммаКорректировки             = 0;
		НоваяСтрока.НераспределеннаяСуммаПереплаты = 0;
		НоваяСтрока.ЭтоПереплата                   = Ложь;
		НоваяСтрока.ЗаявлениеНаРассрочку           = СтрокаРассрочки.ЗаявлениеНаРассрочку;
		
		Если РаспределятьПоУслугам Тогда
			НоваяСтрока.ПорядокУслуги = СтрокаРассрочки.ПорядокУслуги;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьСведенияОНепогашеннойРассрочке()

// Распределяет переплату на непогашенную рассрочку.
//
// Параметры:
//  ТаблицаОстатковВРазрезеМесяцев - таблица остатков.
//  СтрокиРассрочки - массив со строками непогашенной рассрочки (т.е. ТО, на что распределится переплата).
//  СтрокиПереплаты - массив со страками переплаты (т.е. ТО, откуда переплата будет списана).
//  ТекущаяУслуга - признак распределения переплаты только в рамках текущей услуги.
//
Процедура РаспределитьПереплатуНаРассрочку(ТаблицаОстатковВРазрезеМесяцев, СтрокиРассрочки, СтрокиПереплаты, ТаблицаГруппУслугОграниченияДляРаспределенияАванса, ТекущаяУслуга = Истина)
	
	Для Каждого СтрокаПереплаты Из СтрокиПереплаты Цикл
		
		Если НЕ ТекущаяУслуга Тогда
			текУслугаДляРаспределенияАванса = ТаблицаГруппУслугОграниченияДляРаспределенияАванса.Найти(СтрокаПереплаты.Услуга, "Услуга");
		КонецЕсли;
		
		Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
			
			Если СтрокаПереплаты.НераспределеннаяСуммаПереплаты = 0
			 Или СтрокаРассрочки.ОставшаясяСуммаДолга = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПереплаты.Объект = СтрокаРассрочки.Объект Тогда
				      // Распределение аванса на погашение долга по рассрочке идет в рамках текущей услуги.
				Если (ТекущаяУслуга И СтрокаПереплаты.Услуга = СтрокаРассрочки.Услуга)
					// Распределение аванса идет в рамках групп ограничения.
					Или (Не ТекущаяУслуга И 
						НЕ текУслугаДляРаспределенияАванса.МассивУслугДляРаспределения.Найти(СтрокаРассрочки.Услуга) = Неопределено) Тогда
					
					СуммаКорректировки = МИН(СтрокаРассрочки.СуммаОстатка, - СтрокаПереплаты.НераспределеннаяСуммаПереплаты);
					
					СтрокаРассрочки.СуммаКорректировки             = СтрокаРассрочки.СуммаКорректировки - СуммаКорректировки;
					СтрокаРассрочки.ОставшаясяСуммаДолга           = СтрокаРассрочки.ОставшаясяСуммаДолга - СуммаКорректировки;
					
					СтрокаПереплаты.СуммаКорректировки             = СтрокаПереплаты.СуммаКорректировки + СуммаКорректировки;
					СтрокаПереплаты.НераспределеннаяСуммаПереплаты = СтрокаПереплаты.НераспределеннаяСуммаПереплаты + СуммаКорректировки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПереплатуНаРассрочку()

// Сортирует таблицу рассрочки в соответствии с порядком услуг, указанным в Учетной политике (ЖКХ).
//
// Параметры:
//  ТаблицаРассрочки - таблица рассрочки.
//
Процедура СортироватьТаблицуРассрочки(ТаблицаРассрочки)
	
	ТаблицаРассрочки.Колонки.Добавить("ПорядокУслуги",   Новый ОписаниеТипов("Булево"));
	ТаблицаРассрочки.Колонки.Добавить("ПриоритетУслуги", Новый ОписаниеТипов("Число"));
	
	ТаблицаРассрочки.ЗаполнитьЗначения(Ложь, "ПорядокУслуги");
	ТаблицаРассрочки.ЗаполнитьЗначения(0,    "ПриоритетУслуги");
	
	Счетчик = 1;
	Если мПорядокУслуг = Неопределено Тогда
		мПорядокУслуг = КВП_ЗаполнитьПорядокУслуг();
	КонецЕсли;
	
	Если Не мПорядокУслуг.Количество() = 0 Тогда

		Для Каждого Элемент Из мПорядокУслуг Цикл
			
			СтрокиТекУслуги = ТаблицаРассрочки.НайтиСтроки(Новый Структура("ВидУслуги", Элемент.Значение));
			
			Для Каждого СтрокаТекУслуги Из СтрокиТекУслуги Цикл
				
				СтрокаТекУслуги.ПриоритетУслуги = Счетчик;
				СтрокаТекУслуги.ПорядокУслуги   = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	ТаблицаРассрочки.Сортировать("МесяцРассрочки, ПриоритетУслуги Убыв");
		
КонецПроцедуры // СортироватьТаблицуРассрочки()

// Подготавливает таблицы, предназначенные для формирования движений предоплаты рассрочки.
//
// Параметры:
//  ТаблицаКорректировки - таблица движений регистров начисления.
//  ТаблицаСведенийОРассрочке - таблица движений регистра "Начисления по рассрочке".
//  СтруктураШапкиДокумента - структура со значениями реквизитов шапки документа.
//
Процедура СформироватьДвиженияПредоплатыРассрочки(ТаблицаКорректировки, ТаблицаСведенийОРассрочке, СтруктураШапкиДокумента)
	
	ТаблицаКорректировки.Колонки.Добавить("ЭтоДопНачислениеРассрочки", Новый ОписаниеТипов("Булево"));
	
	СтруктураПоиска = Новый Структура("МесяцНачисления", '00010101');
	ДополнитьТаблицуОстатковИндексами(ТаблицаКорректировки, СтруктураПоиска);
	СтрокиРассрочки = ТаблицаКорректировки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
		СтрокаРассрочки.МесяцНачисления = КонецМесяца(Дата);
		
		ДвижениеРассрочка = ТаблицаСведенийОРассрочке.Добавить();
		
		ДвижениеРассрочка.Период               = СтруктураШапкиДокумента.Дата;
		ДвижениеРассрочка.Организация          = Организация;
		ДвижениеРассрочка.ЛицевойСчет          = СтрокаРассрочки.Объект;
		ДвижениеРассрочка.Услуга               = СтрокаРассрочки.Услуга;
		ДвижениеРассрочка.МесяцРассрочки       = СтрокаРассрочки.МесяцРассрочки;
		ДвижениеРассрочка.ВидОперации          = Перечисления.УПЖКХ_Рассрочка.Предоплата;
		ДвижениеРассрочка.СуммаНачисления      = - СтрокаРассрочки.СуммаКорректировки;
		ДвижениеРассрочка.ЗаявлениеНаРассрочку = СтрокаРассрочки.ЗаявлениеНаРассрочку;
		
		ДвижениеНачисление = ТаблицаКорректировки.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеНачисление, СтрокаРассрочки);
		ДвижениеНачисление.СуммаКорректировки        = - ДвижениеНачисление.СуммаКорректировки;
		ДвижениеНачисление.ЭтоДопНачислениеРассрочки = Истина;
	КонецЦикла;
	
	ТаблицаКорректировки.Сортировать("Объект, МесяцНачисления, МесяцРассрочки, ЭтоДопНачислениеРассрочки Убыв");
	
КонецПроцедуры // СформироватьДвиженияПредоплатыРассрочки()

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	ОбновитьНастройкиУчетнойПолитикиТСЖ(Ложь);
	
	Если Не Отказ Тогда
		
		ТаблицаКорректировки = ПодготовитьТаблицуКорректировки();
		
		ТаблицаВзаиморасчеты = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам;
		ТаблицаРННачисления  = Движения.УПЖКХ_Начисления;
		
		ТаблицаРассрочки     = Движения.УПЖКХ_НачисленияПоРассрочке;
		
		ТаблицаДвиженийОстатков   = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
		ТаблицаСведенийОРассрочке = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СформироватьТаблицуДвиженийРассрочки();
		
		СформироватьДвиженияПредоплатыРассрочки(ТаблицаКорректировки, ТаблицаСведенийОРассрочке, СтруктураШапкиДокумента);
		
		// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
		// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
		// механизм отражения, договор в проводках не заполняется.
		ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
		
		Для Каждого СтрокаКорректировки Из ТаблицаКорректировки Цикл
			
			// РН "Взаиморасчеты по лицевым счетам".
			СтрокаНачисления = ТаблицаВзаиморасчеты.Добавить();
			СтрокаНачисления.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаНачисления.ВидДвижения     = ВидДвиженияНакопления.Расход;
			СтрокаНачисления.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаНачисления.ЛицевойСчет     = СтрокаКорректировки.Объект;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				СтрокаНачисления.Договор     = СтрокаКорректировки.ДоговорКонтрагента;
			КонецЕсли;
			
			СтрокаНачисления.Услуга          = СтрокаКорректировки.Услуга;
			СтрокаНачисления.ВидНачисления   = СтрокаКорректировки.ВидНачисления;
			СтрокаНачисления.МесяцНачисления = СтрокаКорректировки.МесяцНачисления;
			СтрокаНачисления.МесяцРассрочки  = СтрокаКорректировки.МесяцРассрочки;
			СтрокаНачисления.СуммаНачисления = (-1) * СтрокаКорректировки.СуммаКорректировки;
			
			// РН "Начисления".
			СтрокаНачисления = ТаблицаРННачисления.Добавить();
			СтрокаНачисления.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаНачисления.Активность      = Истина;
			СтрокаНачисления.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаНачисления.ЛицевойСчет     = СтрокаКорректировки.Объект;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				СтрокаНачисления.Договор     = СтрокаКорректировки.ДоговорКонтрагента;
			КонецЕсли;
			
			СтрокаНачисления.Услуга          = СтрокаКорректировки.Услуга;
			Если СтрокаКорректировки.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Начисление Тогда
				СтрокаНачисления.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
			ИначеЕсли СтрокаКорректировки.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
				СтрокаНачисления.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени;
			Иначе
				СтрокаНачисления.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
			КонецЕсли;
			СтрокаНачисления.ВидНачисления   = ?(СтрокаКорректировки.ЭтоДопНачислениеРассрочки, Перечисления.УПЖКХ_ВидыНачислений.Начисление,
												Перечисления.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат);
			СтрокаНачисления.МесяцНачисления = СтрокаКорректировки.МесяцНачисления;
			СтрокаНачисления.МесяцРассрочки  = СтрокаКорректировки.МесяцРассрочки;
			СтрокаНачисления.СуммаНачисления = СтрокаКорректировки.СуммаКорректировки;
			
			Если Не СтрокаКорректировки.ЭтоДопНачислениеРассрочки Тогда
				СтрокаНачисления = ТаблицаДвиженийОстатков.Добавить();
				СтрокаНачисления.Период            = СтруктураШапкиДокумента.Дата;
				СтрокаНачисления.Организация       = СтруктураШапкиДокумента.Организация;
				СтрокаНачисления.ЛицевойСчет       = СтрокаКорректировки.Объект;
				СтрокаНачисления.ВидНачисления     = СтрокаКорректировки.ВидНачисления;
				СтрокаНачисления.Услуга            = СтрокаКорректировки.Услуга;
				СтрокаНачисления.МесяцНачисления   = СтрокаКорректировки.МесяцНачисления;
				СтрокаНачисления.МесяцРассрочки    = СтрокаКорректировки.МесяцРассрочки;
				СтрокаНачисления.СуммаПлатежа      = (-1) * СтрокаКорректировки.СуммаКорректировки;
				СтрокаНачисления.ФактическаяОплата = Ложь;
			КонецЕсли;
			
		КонецЦикла;
			
		Для Каждого СтрокаРассрочки Из ТаблицаСведенийОРассрочке Цикл
			НоваяСтрока = ТаблицаРассрочки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРассрочки);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЦикла;
		
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоПоступлениюДенежныхСредствПоВидамПлатежей(ЭтотОбъект,
																										   ТаблицаДвиженийОстатков);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	ПроверяемыеРеквизиты.Добавить("Переплаты.Объект");
	ПроверяемыеРеквизиты.Добавить("Переплаты.Услуга");
	ПроверяемыеРеквизиты.Добавить("Переплаты.МесяцНачисления");
	
	ПроверяемыеРеквизиты.Добавить("Долги.Объект");
	ПроверяемыеРеквизиты.Добавить("Долги.Услуга");
	ПроверяемыеРеквизиты.Добавить("Долги.МесяцНачисления");
	
	ПроверкаСуммыКорректировки(Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли