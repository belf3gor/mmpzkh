#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПринятиеКУчетуОС",
		"ФормаДокумента",
		НСтр("ru='Новости: Принятие к учету ОС'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПринятиеКУчетуОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ТекущийОбъект.ОбъектСтроительства = Неопределено;
	ИначеЕсли ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ТекущийОбъект.Номенклатура = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) отличается от амортизации, очищаются некоторые параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
		ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		ТекущийОбъект.СпособНачисленияАмортизацииБУ = Неопределено;
		ТекущийОбъект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) не подразумевает начисление амортизации (износа), очищаются все параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
			ИЛИ ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ТекущийОбъект.СрокПолезногоИспользованияБУ = 0;
		ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		ТекущийОбъект.НачислятьАмортизациюБУ = 0;
		ТекущийОбъект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	// В зависимости от выбранного способа амортизации (БУ) нужно очистить неиспользуемые параметры амортизации (БУ)
	Если ЗначениеЗаполнено(ТекущийОбъект.СпособНачисленияАмортизацииБУ) Тогда

		// зависимость объема работ от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
			ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		КонецЕсли;
	
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
			ТекущийОбъект.СрокПолезногоИспользованияБУ = 0;
			ТекущийОбъект.НачислятьАмортизациюБУ = Ложь;
		КонецЕсли;

	КонецЕсли;

	// Если вариант включения в состав расходов (НУ) отличается от амортизации, параметры амортизации (НУ) очищаются
	Если ТекущийОбъект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		ТекущийОбъект.НачислятьАмортизациюНУ        = Ложь;
		ТекущийОбъект.СпособНачисленияАмортизацииНУ = Неопределено;
		ТекущийОбъект.СрокПолезногоИспользованияНУ  = 0;
		ТекущийОбъект.СпециальныйКоэффициентНУ      = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		УстановитьФункциональныеОпцииФормы();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийГруппыСтраницы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ГруппаНалоговыйУчетУСН Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыВнеоборотныйАктив

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаВнеоборотногоАктива(Объект.ВидОперации);
		СчетУчетаВнеоборотногоАктиваОбработкаИзменения();
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособПоступленияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СпособПоступления) Тогда
		
		Если Объект.СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
			
			Объект.ПорядокВключенияСтоимостиВСоставРасходовУСН = 
				ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов");
				
			Если ПлательщикНДФЛ Тогда
				
				Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = 
					ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
				
			КонецЕсли;
				
		КонецЕсли;
		
		УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Объект.СпособПоступления <> ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		
		Объект.Контрагент = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
		Объект.ПервоначальнаяСтоимостьНУ = Неопределено;
		Объект.СпособОтраженияРасходовПоАренднымПлатежам = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);
	Иначе
		Объект.СчетУчетаВнеоборотногоАктива = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВнеоборотногоАктиваПриИзменении(Элемент)
	
	СчетУчетаВнеоборотногоАктиваОбработкаИзменения();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыБухгалтерскийУчет

&НаКлиенте
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)

	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);

КонецПроцедуры

&НаКлиенте
Процедура ГодоваяНормаАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоЕНАОФНа1000кмПробега = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	
	СтандартнаяОбработка = Ложь;
	Список     = Новый СписокЗначений();
	СписокНорм = ПолучитьСписокВыбораГодовыхНормАмортизации(ПоЕНАОФНа1000кмПробега);
	Список.ЗагрузитьЗначения(СписокНорм);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(Оповещение, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ГодоваяНормаАмортизацииБУ = Результат.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчет

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)

	Объект.СпециальныйКоэффициентНУ = 1;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьПервоначальнуюСтоимостьПриИзменении(Элемент)
	
	УказатьПервоначальнуюСтоимостьОбработкаИзменения();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если НЕ Объект.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ") Тогда
		Объект.КоэффициентАмортизацииНУ = 0;
		Объект.СпециальныйКоэффициентНУ = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);

КонецПроцедуры

&НаКлиенте
Процедура СпособСписанияОСНаРасходыНУПриИзменении(Элемент)
	
	Если СпособСписанияОСНаРасходыНУ = "АналогичноАмортизации" Тогда
		Объект.СпособОтраженияРасходовПриВключенииВСтоимость = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНалоговыйУчетУСН

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыАмортизационнаяПремия

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)

	Если НЕ ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		Если ПараметрыАмортизационнойПремииЗаполнены(Объект) Тогда
			ТекстВопроса = НСтр("ru = 'Установленные параметры амортизационной премии будут очищены.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УправлениеФормой(ЭтаФорма);
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
				ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СпособыОтраженияРасходовПоАмортизации) Тогда
			СтруктураПараметровАмортизационнойПремии = 
				УчетОСВызовСервера.ПолучитьПараметрыНачисленияАмортизационнойПремии(Объект.СпособыОтраженияРасходовПоАмортизации);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметровАмортизационнойПремии);
			СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		Объект.СчетУчетаЗатратПоАмортизационнойПремии = Неопределено;
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии1 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии2 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии3 = Неопределено;
		СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
	Иначе
		ВключитьАмортизационнуюПремиюВСоставРасходов = Истина;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	СписокОСИзменен = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)

	// Есть ли оплаты для этого ОС?
	МассивОплат = Объект.Оплата.НайтиСтроки(Новый Структура("ОсновноеСредство", Элемент.ТекущиеДанные.ОсновноеСредство));
	Если МассивОплат.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах.
			|Продолжить?'");
			
		// Удалим строку в описании оповещения
		Отказ = Истина;
		
		ЭлементКоллекции = Объект.ОС.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ИндексСтроки = Объект.ОС.Индекс(ЭлементКоллекции);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивОплат", МассивОплат);
		ДополнительныеПараметры.Вставить("ИндексСтроки", ИндексСтроки);
		Оповещение = Новый ОписаниеОповещения("ВопросОСПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОСПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаОплат Из ДополнительныеПараметры.МассивОплат Цикл
			Объект.Оплата.Удалить(СтрокаОплат);
		КонецЦикла;
		Объект.ОС.Удалить(ДополнительныеПараметры.ИндексСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	ЭлементКоллекции = Элементы.ОС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ПолучитьКод(ЭлементКоллекции.ОсновноеСредство);
		ЭлементКоллекции.СпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Распределяется"); 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если СписокОСИзменен = Истина Тогда
		ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммыПоОбъектуСтроительства(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Объект строительства'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОбъектСтроительства", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаВнеоборотногоАктива) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Счет учета внеоборотного актива'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаВнеоборотногоАктива", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УчетОСВызовСервера.РассчитатьСтоимостьОбъектаСтроительства(Объект.Организация,
		Объект.ПодразделениеОрганизации, КонецМесяца(Объект.Дата), Объект.СчетУчетаВнеоборотногоАктива,
		Объект.ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)

	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюНаСервере(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюНаСервере(Знач ОсновноеСредство)

	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетУчетаЗатратПоАмортизационнойПремии

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗатратПоАмортизационнойПремии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	МассивОсновныхСредств = Объект.ОС.Выгрузить(ДобавленныеСтроки, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");	
	ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код");
	
	Для каждого Строка Из ДобавленныеСтроки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ИнвентарныйНомер) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураКоды = ОсновныеСредстваКоды.Получить(Строка.ОсновноеСредство);
		Если СтруктураКоды <> Неопределено Тогда 
			Строка.ИнвентарныйНомер = СтруктураКоды.Код;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента = Объект.Дата;
	
	ВключитьАмортизационнуюПремиюВСоставРасходов = ПараметрыАмортизационнойПремииЗаполнены(Объект);
	
	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);
	
	Если ЗначениеЗаполнено(Объект.СпособОтраженияРасходовПриВключенииВСтоимость) Тогда
		СпособСписанияОСНаРасходыНУ = "ДругойСпособ";
	Иначе
		СпособСписанияОСНаРасходыНУ = "АналогичноАмортизации";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии",
		"СчетУчетаЗатратПоАмортизационнойПремии");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАмортизационнойПремииЗаполнены(Знач Объект)

	Если Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0
			И НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатратПоАмортизационнойПремии)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии1)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии2)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии3) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыВыбораОСДляОплатУСН()

	СписокОС.ЗагрузитьЗначения(Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));
	Если СписокОС.Количество() = 0 Тогда
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
	Иначе
		ПараметрВыбораПоОС = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокОС.ВыгрузитьЗначения()));
		ПараметрыВыбораОСДляОплатУСН = Новый Массив;
		ПараметрыВыбораОСДляОплатУСН.Добавить(ПараметрВыбораПоОС);
	КонецЕсли;
	Элементы.ОплатаОсновноеСредство.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОСДляОплатУСН);
	СписокОСИзменен = Ложь;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДФЛ            = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ВестиУчетПоДоговорам      = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(Форма)

	СтоимостьНеПогашается = 
		ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается");
	СтоимостьНеВключаетсяВРасходы = 
		ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");

	Если Форма.Объект.ПорядокПогашенияСтоимостиБУ = СтоимостьНеПогашается
		И Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> СтоимостьНеВключаетсяВРасходы Тогда

		Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = СтоимостьНеВключаетсяВРасходы;
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
		Форма.Модифицированность = Истина;

		ШаблонСообщения = 
			НСтр("ru = 'В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение ""%1""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы"));
		#Если Клиент Тогда
		ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	Оборудование = Объект.ВидОперации 
		= ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование");
	ОбъектыСтроительства = Объект.ВидОперации 
		= ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства");
	ПоРезультатамИнвентаризации = Объект.ВидОперации 
		= ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации");

	ПоДоговоруЛизинга = Объект.СпособПоступления 
		= ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
		
	// Страница Внеоборотный актив
	Элементы.Контрагент.Видимость = ПоДоговоруЛизинга И Не ПоРезультатамИнвентаризации;
	Элементы.ДоговорКонтрагента.Видимость = ПоДоговоруЛизинга И Не ПоРезультатамИнвентаризации;
	Элементы.Номенклатура.Видимость = Оборудование;
	Элементы.ОбъектСтроительства.Видимость = ОбъектыСтроительства;
	Элементы.Склад.Видимость = Оборудование;
	Элементы.СтатьяДоходов.Видимость = ПоРезультатамИнвентаризации;
	Элементы.СчетУчетаВнеоборотногоАктива.Видимость = Оборудование ИЛИ ОбъектыСтроительства;
	Элементы.РассчитатьСуммыПоОбъектуСтроительства.Видимость = ОбъектыСтроительства;
	Элементы.СтоимостьБУ.Видимость = ОбъектыСтроительства ИЛИ ПоРезультатамИнвентаризации;
	Элементы.СтоимостьНУ.Видимость = ОбъектыСтроительства ИЛИ ПоРезультатамИнвентаризации;
	Элементы.СтоимостьПР.Видимость = ОбъектыСтроительства;
	Элементы.СтоимостьВР.Видимость = ОбъектыСтроительства;
	
	// Страница Бухгалтерский учет
	НачислениеАмортизации = Объект.ПорядокПогашенияСтоимостиБУ
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		
	Элементы.ГруппаПараметрыНачисленияАмортизации.Видимость = НачислениеАмортизации;
	
	Если НачислениеАмортизации Тогда
		Линейный = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
		ПоСуммеЧиселЛетИспользования = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
		УменьшаемогоОстатка = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
		ПропорциональноОбъемуПродукции = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
		ПоЕНАОФ = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
		ПоЕНАОФНа1000кмПробега = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега") ;
		ЕдиновременноПриПринятииКУчету = Объект.СпособНачисленияАмортизацииБУ 
			= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету") ;
			
		Элементы.КоэффициентУскоренияБУ.Видимость = УменьшаемогоОстатка;
		Элементы.ГруппаГодоваяНормаАмортизацииБУ.Видимость = ПоЕНАОФ ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ПараметрВыработкиБУ.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ГруппаОбъемРаботБУ.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
		Элементы.ГрафикАмортизацииПоГодуБУ.Видимость = Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования ИЛИ ПоЕНАОФ;
		Элементы.НачислятьАмортизациюБУ.Видимость = НЕ ЕдиновременноПриПринятииКУчету;
		Элементы.ГруппаСрокИспользованияБУ.Видимость = НЕ ЕдиновременноПриПринятииКУчету;
	КонецЕсли;
	
	// Страница Налоговый учет
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.ТолькоПросмотр = НЕ НачислениеАмортизации;
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.КнопкаВыпадающегоСписка = НачислениеАмортизации;
	
	НачислениеАмортизацииНУ = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	ВключениеВРасходыПриПринятииКУчету = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
	СтоимостьНеВключаетсяВРасходы = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
	
	Элементы.УказатьПервоначальнуюСтоимость.Видимость = Объект.СчетУчетаВнеоборотногоАктива =
		ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств");
	Элементы.ПервоначальнаяСтоимостьНУ.Видимость = Форма.ПлательщикНДФЛ И Объект.УказатьПервоначальнуюСтоимость;
	Элементы.РеквизитыДокументаОплаты.Видимость = Объект.УказатьПервоначальнуюСтоимость;
	
	Элементы.СпособСписанияОСНаРасходыНУ.Видимость = ВключениеВРасходыПриПринятииКУчету;
	Элементы.СпособСписанияОСНаРасходыНУ.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.СпособОтраженияРасходовПриВключенииВСтоимость.Видимость = ВключениеВРасходыПриПринятииКУчету
	                                                                   И Форма.СпособСписанияОСНаРасходыНУ = "ДругойСпособ";
	Элементы.СтатьяПрочихРасходов.Видимость = ВключениеВРасходыПриПринятииКУчету;
	
	Элементы.ГруппаНУЛизинг.Видимость = ПоДоговоруЛизинга И НЕ Форма.ПлательщикНДФЛ;
	
	Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Видимость = НачислениеАмортизацииНУ;
	
	Если НачислениеАмортизацииНУ Тогда
		ПоЕНАОФНУ = Объект.СпособНачисленияАмортизацииНУ 
			= ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ");
			
		Элементы.КоэффициентАмортизацииНУ.Видимость = ПоЕНАОФНУ;
		Элементы.СпециальныйКоэффициентНУ.Видимость = НЕ Форма.ПлательщикНДФЛ ИЛИ ПоЕНАОФНУ;
	КонецЕсли;
	
	// Страница Налоговый учет (УСН)
	Элементы.Оплата.ТолькоПросмотр = Объект.ОС.Количество() = 0;
	
	// Страница Амортизационная премия
	Элементы.ГруппаАмортизационнаяПремия.Видимость = НЕ ПоРезультатамИнвентаризации И НачислениеАмортизацииНУ;
	
	Элементы.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
	
	Элементы.ГруппаСчетСубконтоАмортизационнойПремии.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаВнеоборотногоАктива(Знач ВидОперации)
	
	Возврат Документы.ПринятиеКУчетуОС.СчетУчетаВнеоборотногоАктива(ВидОперации);
	
КонецФункции

&НаКлиенте
Процедура УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ()
	
	Если Объект.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если Объект.СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
			Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества");
		Иначе
			Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01");
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АрендованноеИмущество");
	Иначе
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ИмяТабличнойЧасти", "ОС");
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКод(Знач ОС)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОС, "Код");
	
КонецФункции

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаНоменклатуры(Знач Организация, Знач Номенклатура, Знач Склад)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
	Возврат СчетаУчета.СчетУчета;

КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораГодовыхНормАмортизации(Знач На1000КмПробега = Ложь)

	Если На1000КмПробега Тогда
		ИмяРеквизита = "ПроцентОтСтоимостиМашины";
	Иначе
		ИмяРеквизита = "НормаАмортизационныхОтчислений";
	КонецЕсли;
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ." + ИмяРеквизита + " КАК Норма
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	(НЕ ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ.Ссылка ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Норма";
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Норма");

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура СчетУчетаВнеоборотногоАктиваОбработкаИзменения()
	
	Если НЕ Объект.СчетУчетаВнеоборотногоАктива 
		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств") Тогда
		
		Объект.УказатьПервоначальнуюСтоимость = Истина;
		УказатьПервоначальнуюСтоимостьОбработкаИзменения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПервоначальнуюСтоимостьОбработкаИзменения()
	
	Если Не Объект.УказатьПервоначальнуюСтоимость Тогда
		Объект.ПервоначальнаяСтоимостьНУ = 0;
		Объект.РеквизитыДокументаОплаты  = "";
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти