#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Депоненты.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка о списании депонированной зарплаты.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_СправкаОСписанииДепонированнойЗарплаты";
	КомандаПечати.Представление = НСтр("ru = 'Справка о списании депонированной зарплаты'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы 
//                                            (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение      - ссылка на объект;
//                                            представление - имя области в которой был выведен объект
//                                            (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов
//                                            (выходной параметр);
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	НужноПечататьСправку = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОСписанииДепонированнойЗарплаты");
	
	Если НужноПечататьСправку Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_СправкаОСписанииДепонированнойЗарплаты",
			НСтр("ru = 'Справка о списании депонированной зарплаты'"), 
			ПечатьСправки(МассивОбъектов, ОбъектыПечати), ,
			"Документ.СписаниеДепонированнойЗарплаты.ПФ_MXL_СправкаОСписанииДепонированнойЗарплаты");
	КонецЕсли;
						
КонецПроцедуры								

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СписаниеДепонированнойЗарплаты;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ПечатьСправки(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеДепонированнойЗарплаты_СправкаОСписанииДепонированнойЗарплаты";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиДокументов(МассивОбъектов);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеДепонированнойЗарплаты.ПФ_MXL_СправкаОСписанииДепонированнойЗарплаты");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаПовторятьПриПечати = Макет.ПолучитьОбласть("ШапкаПовторятьПриПечати");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаОтметка = Макет.ПолучитьОбласть("Отметка");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		ДанныеДокумента = ДанныеПечати.Значение;
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Для каждого ДанныеСотрудника Из ДанныеДокумента.ТабличнаяЧастьДокумента Цикл
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаПодвал);
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьМакетаШапкаПовторятьПриПечати);
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеСотрудника);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ОбластьМакетаОтметка);
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат,МассивВыводимыхОбластей ) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаОтметка);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
				
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеПечатиДокументов(МассивОбъектов)
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПорядокЗаполнения = Новый Структура("ЗаполнятьИсполнителя");
	КадровыйУчетПереопределяемый.СоздатьВТОтветственныхЛиц(Запрос.МенеджерВременныхТаблиц,
															МассивОбъектов,
															ПорядокЗаполнения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеДепонированнойЗарплатыДепоненты.Ссылка.Организация.НаименованиеПолное КАК Организация,
	|	СписаниеДепонированнойЗарплатыДепоненты.Ссылка КАК Ссылка,
	|	СписаниеДепонированнойЗарплатыДепоненты.Ссылка.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(СписаниеДепонированнойЗарплатыДепоненты.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	СписаниеДепонированнойЗарплатыДепоненты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписаниеДепонированнойЗарплатыДепоненты.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СписаниеДепонированнойЗарплатыДепоненты.Ссылка.Исполнитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Исполнитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|		ИНАЧЕ СписаниеДепонированнойЗарплатыДепоненты.Ссылка.Исполнитель.ФИО
	|	КОНЕЦ КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СписаниеДепонированнойЗарплатыДепоненты.Ссылка.ДолжностьИсполнителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьИсполнителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
	|		ИНАЧЕ СписаниеДепонированнойЗарплатыДепоненты.Ссылка.ДолжностьИсполнителя
	|	КОНЕЦ КАК ДолжностьИсполнителя
	|ИЗ
	|	Документ.СписаниеДепонированнойЗарплаты.Депоненты КАК СписаниеДепонированнойЗарплатыДепоненты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ВТОтветственныеЛица
	|		ПО СписаниеДепонированнойЗарплатыДепоненты.Ссылка = ВТОтветственныеЛица.Документ
	|ГДЕ
	|	СписаниеДепонированнойЗарплатыДепоненты.Ссылка В(&МассивОбъектов)
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	ГруппировкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ГруппировкаПоДокументу.Следующий() Цикл
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("Ссылка", ГруппировкаПоДокументу.Ссылка);
		ДанныеПечати.Вставить("НазваниеОрганизации", ГруппировкаПоДокументу.Организация);
		ДанныеПечати.Вставить("НазваниеПодразделения", "");
		ДанныеПечати.Вставить("ЕдиницаИзмерения", ВалютаУчета.НаименованиеПолное);
		ДанныеПечати.Вставить("ДатаДокумента", Формат(ГруппировкаПоДокументу.Дата, "ДЛФ=D"));
		ДанныеПечати.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ГруппировкаПоДокументу.Номер, Истина, Истина));
		ДанныеПечати.Вставить("ИсполнительРасшифровкаПодписи", ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ГруппировкаПоДокументу.Исполнитель));
		ДанныеПечати.Вставить("ДолжностьИсполнителя", ГруппировкаПоДокументу.ДолжностьИсполнителя);
		ДанныеПечати.Вставить("ТабличнаяЧастьДокумента", Новый Массив);
		
		ГруппировкаПоСотрудникам = ГруппировкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ГруппировкаПоСотрудникам.Следующий() Цикл
			
			СтрокаДанныхПечати = Новый Структура;
			СтрокаДанныхПечати.Вставить("НомерДокумента", ДанныеПечати.НомерДокумента);
			СтрокаДанныхПечати.Вставить("ДатаДокумента", ДанныеПечати.ДатаДокумента);
			СтрокаДанныхПечати.Вставить("Операция", НСтр("ru = 'Списание депонированной зарплаты'"));
			СтрокаДанныхПечати.Вставить("СчетДебета", "");
			СтрокаДанныхПечати.Вставить("СчетКредита", "");
			СтрокаДанныхПечати.Вставить("СуммаДокумента", ГруппировкаПоСотрудникам.Сумма);
			
			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГруппировкаПоСотрудникам.ФизическоеЛицо), 
				"ФИОПолные,Пол", ГруппировкаПоДокументу.Дата);
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				ФамилияИО = ДанныеФизическогоЛица[0].ФИОПолные;
				ФизическиеЛицаЗарплатаКадры.Просклонять(ДанныеФизическогоЛица[0].ФИОПолные, 2, ФамилияИО, ДанныеФизическогоЛица[0].Пол);
				СтрокаДанныхПечати.Операция = СтрокаДанныхПечати.Операция + " " + ФамилияИО;
			КонецЕсли;			
			
			ДанныеПечати.ТабличнаяЧастьДокумента.Добавить(СтрокаДанныхПечати);
			
		КонецЦикла;		
		
		ДанныеПечатиОбъектов.Вставить(ГруппировкаПоДокументу.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли