
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;                      // Хранит валюту регламентированного учета.
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;                         // Хранит настройки учетной политики по ТСЖ.
Перем мСписокЛСОбъекта Экспорт;                                     // Хранит список лицевых счетов выбранного здания.
Перем мУдалятьДвижения Экспорт;                                     // Хранит признак новый ли это документ.
Перем мТаблТарифовПоУслуге Экспорт;                                 // Хранит структуру тарифов по услуге.
Перем ТаблицаЗависимыхУслуг;                                        // Хранит таблицу зависимых услуг. Заполняется только функцией 
                                                                    // СформироватьТаблицуЗависимыхУслуг.
Перем ТаблицаРасходаПоСреднемуБезДействующихПУ;                     // Хранит дерево расхода по среднему значению.
Перем ТаблицаРасходаПоСреднемуБезПоказаний;                         // Хранит дерево расхода по среднему значению.
Перем ТаблицаСоответствияУслуг;                                     // Таблица соответствия услуг и услуг ОПУ для распределения ОДН по составным услугам.
Перем ДлинаСуток;                                                   // Хранит длину суток в секундах.
Перем мИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ;           // Признак использования повышающих коэффициентов.
Перем мЗависимыеУслугиПоОрганизациям;                               // Признак начисления зависимых услуг по другой организации.
Перем мЗависимыеУслугиПоСобственномуНормативу;                      // Способ начисления зависимых услуг.
Перем мРасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний; // Выполнять расчет среднего расхода по ПУ с учетом даты ввода
                                                                    // последних показаний.
Перем мСпособОпределенияСреднегоРасходаПоПриборамУчета;             // Способ определения расхода по ПУ.
Перем мТаблицаПериодовДействияУслуги;                               // Хранит таблицу периодов действия услуги для заполнения
                                                                    // данных по ПУ.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию;                // Хранит признак учета начислений по добровольному страхованию.
Перем НастройкаКорректировкиОДН;                                    // Хранить настройки программы по корректировке ОДН.
Перем мТочностьОбъемаНачислений Экспорт;                            // Хранит точность значения для округления объемов.

Перем ИспользоватьРежимОтладкиРасчетов Экспорт;                     // Признак использования режима отладки расчетов.
Перем мПричиныВременногоОтключенияПУ;                               // Хранит причины отключения приборов учета такие как поверка, утрата и выход из строя.

#Область ПодсистемыЖКХ_ОтладкаРасчетов

// ПодсистемыЖКХ.ОтладкаРасчетов

// Процедура добавляет информацию в протокол.
Процедура ОтладкаРасчетов_ДобавитьИнформациюВПротокол(ТекстоваяИнформация)
	
	// Протоколирование ведется только при включенном режиме отладки расчетов.
	Если ИспользоватьРежимОтладкиРасчетов Тогда
		
		// Добавление новой информации в протокол расчетов.
		
		ТекстПротокола = ПротоколРасчетов.Получить();
		
		Если ТипЗнч(ТекстПротокола) = Тип("ТекстовыйДокумент") Тогда
			ТекстПротокола.ДобавитьСтроку(ТекстоваяИнформация);
		КонецЕсли;
		
		ПротоколРасчетов = Новый ХранилищеЗначения(ТекстПротокола);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ПодсистемыЖКХ.ОтладкаРасчетов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет колонку <ИмяКолонки> в объект при условии, что колонка с таким именем отсутствует в объекте.
//
Процедура ДобавитьКолонкуВОбъект(Объект, ИмяКолонки, ТипЗначения)
	
	// Добавлять колонки можем только в таблицу или дерево значений.
	Если Не ТипЗнч(Объект) = Тип("ТаблицаЗначений") И Не ТипЗнч(Объект) = Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Объект.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипЗначения));
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКолонкуВОбъект()

// Процедура очищает кеш таблиц, зависящих от услуги.
Процедура ОчиститьКешТаблицЗависящихОтУслуги() Экспорт
	
	ТаблицаЗависимыхУслуг                    = Неопределено;
	ТаблицаРасходаПоСреднемуБезДействующихПУ = Неопределено;
	ТаблицаРасходаПоСреднемуБезПоказаний     = Неопределено;
	
КонецПроцедуры

// Функция возвращает структуру поиска, которая позволит в таблице услуг по ПУ
// найти только те строки, которые не относятся ни к сторно, ни к начислениям по повышающим коэффициентам,
// ни к начислениям зависимых услуг.
Функция СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов()
	
	// В качестве ключа структуры указывается имя поля отбора,
	// в качестве значения - значение отбора, в данном случае ЛОЖЬ.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сторно",                              Ложь);
	СтруктураОтбора.Вставить("НачислениеПоПовышающемуКоэффициенту", Ложь);
	СтруктураОтбора.Вставить("Зависимая",                           Ложь);
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Функция возвращает минимальное положительное ненулевое значение заданной точности.
// Данное значение используется при получении остатков расхода ПУ, а именно для того,
// чтобы отсечь такие остатки, которые бы все-равно потерялись за счет округления
// при начислении услуги по данному расходу.
//
Функция ПолучитьМинимальноеЗначениеДляТочностиОбъемаНачислений()
	
	// Для получения минимального значения возводим число 10 в степень точности с минусом.
	// Например, если точность 3 знака, то 10^(-3) = 0,001, т.е. минимальное значение.
	МинимальноеЗначение = Pow(10, - мТочностьОбъемаНачислений);
	
	Возврат МинимальноеЗначение;
	
КонецФункции

// Процедура формирует список значений по одной из колонок таблицы.
Функция СформироватьСписокПоКолонкеТаблицы(Таблица, ИмяКолонки)
	
	НовыйСписок = Новый СписокЗначений();
	
	ВрТаблица = Таблица.Скопировать(, ИмяКолонки);
	ВрТаблица.Свернуть(ИмяКолонки);
	
	НовыйСписок.ЗагрузитьЗначения(ВрТаблица.ВыгрузитьКолонку(ИмяКолонки));
	
	Возврат НовыйСписок;
	
КонецФункции // СформироватьСписокПоКолонкеТаблицы()

// Функция возвращает структуру поиска, которая позволит в таблице услуг по ПУ
// найти только те строки, которые относятся к начислениям зависимых услуг без учета 
// периодов сторно и начисления зависимых услуг по собственному нормативу.
Функция СтруктураОтбораСтрокПУНачисленияЗУ()
	
	// В качестве ключа структуры указывается имя поля отбора,
	// в качестве значения - значение отбора.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Зависимая",            Истина);
	СтруктураОтбора.Вставить("ЗависимаяПоНормативу", Ложь);
	СтруктураОтбора.Вставить("Сторно",               Ложь);
	
	Возврат СтруктураОтбора;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРасчета

// Процедура определяет формулу расчета текущего объекта по данным подчиненных лицевых счетов из табличной части.
// Формула расчета для лицевых счетов определяется на этапе заполнения табличной части документа.
//
Функция УстановитьФормулуРасчетаОбъекта(ЛицевыеСчета)
	
	// Значение по умолчанию:
	ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги();
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	ДобавитьКолонкуВОбъект(СводнаяТаблица, "ФормулаРасчета", "Число");
	
	Для Каждого ТекСтрока ИЗ ЛицевыеСчета Цикл
		НоваяСтрока = СводнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	СводнаяТаблица.Свернуть("ФормулаРасчета");
	Если СводнаяТаблица.Количество() > 0 Тогда;
		ФормулаРасчета = СводнаяТаблица[0].ФормулаРасчета;
	КонецЕсли;
	
	Возврат ФормулаРасчета;
	
КонецФункции //УстановитьФормулуРасчетаОбъекта()

// Процедура очищает доли распределения расхода на ОДН в массиве лицевых счетов.
Процедура ОчиститьДолиРаспределенияПоказаний(ЛицевыеСчета)
	
	Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
		СтрокаЛС.Доля = 0;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДолиРаспределенияПоказаний()

// Процедура определяет тип индивидуального расчета при отстутствии действующих приборов учета
// (по показаниям/норме/среднему значению/не производить).
Процедура ОпределитьПараметрыРасчетаПриОтсутствииПрибораУчета(СтрокаТекПериода, СтрокаПУ)
	
	// Если нет действующего счетчика
	СтрокаТекПериода.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
	
	Если СтрокаПУ.СпособРасчетаПоПУБезДействующихПУ = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления Тогда
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
		
	ИначеЕсли СтрокаПУ.СпособРасчетаПоПУБезДействующихПУ = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению Тогда
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу();
		
	Иначе
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПараметрыРасчетаПриОтсутствииПрибораУчета()

// Процедура определяет тип индивидуального расчета при отстутствии показаний приборов учета
// (по показаниям/норме/среднему значению/не производить).
Процедура ОпределитьПараметрыРасчетаПриОтсутствииПоказанийПрибораУчета(СтрокаТекПериода, СтрокаПУ)
	
	// Если действующий счетчик есть, но нет показаний
	СтрокаТекПериода.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний;
	
	Если СтрокаПУ.СпособРасчетаПоПУБезПоказаний = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления Тогда
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
		
	ИначеЕсли СтрокаПУ.СпособРасчетаПоПУБезПоказаний = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению Тогда
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу();
		
	Иначе
		
		СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПараметрыРасчетаПриОтсутствииПоказанийПрибораУчета()

// Функция проверяет настройку услуги "СпособРаспределенияПоказанийНаЛицевыеСчета".
// (условие выполнялось 4 раза в коде, поэтому перенесено в одну функцию).
Функция ПроверитьСпособРаспределенияПоказанийНаЛицевыеСчета(ТекущаяСтрока, ТекУслуга)

	Если ТекущаяСтрока.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги() 
	   И (
	      (ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ 
	       И Услуга.СпособРаспределенияПоказанийНаЛицевыеСчета = 
				Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ)
	      ИЛИ 
		  (НЕ ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ 
		   И (НЕ ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен 
		      ИЛИ ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)
		   И Услуга.СпособРаспределенияПоказанийНаЛицевыеСчета =
				Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ)
		  ) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции //ПроверитьСпособРаспределенияПоказанийНаЛицевыеСчета()

// Функция проверяет настройки услуги "НастройкаОтсутствияДействующегоПУ" и "НастройкаОтсутствияПоказанийПУ".
// (условие выполнялось 4 раза в коде, поэтому перенесено в одну функцию).
Функция ПроверитьНастройкуРасчетаПоСреднему_Норме(ТекущаяСтрокаПУ, ТекущаяСтрокаЛС, ТекущаяСтрокаОбщихПериодов)

	Если (НЕ ТекущаяСтрокаПУ.ЕстьСчетчик 
		  И ТекущаяСтрокаЛС.НастройкаОтсутствияДействующегоПУ
		  И ТекущаяСтрокаОбщихПериодов.КоличествоСчетчиков > 0) 
	 ИЛИ (ТекущаяСтрокаПУ.ЕстьСчетчик 
		  И ТекущаяСтрокаЛС.НастройкаОтсутствияПоказанийПУ
		  И ТекущаяСтрокаОбщихПериодов.ИмеютсяПоказания > 0) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции //ПроверитьНастройкуРасчетаПоСреднему_Норме()

// Определяет размер начислений на указанный лицевой счет по услугам,
// включенным в список базы начисления комиссии.
//
// Параметры:
//  ЛицевойСчет - лицевой счет 
//  Услуга - услуга Комиссия банка.
//
// Возвращаемое значение:
//  Число - размер начисления
//
Функция ПолучитьСуммуНачисленийПоОбъекту(ЛицевойСчет, Услуга)
	
	// получим базу начисления комиссии банка.
	Отбор = Новый Структура;
	Отбор.Вставить("Использовать", Истина);
	МассивСтрок = Услуга.БазаКомиссии.НайтиСтроки(Отбор);
	СпУслуг = Новый СписокЗначений;
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		СпУслуг.Добавить(СтрокаМассива.Услуга);
	КонецЦикла;
	
	// получим таблицу всех начислений на лицевые счета за текущий месяц
	ЗапросНачислений = Новый Запрос;
	ЗапросНачислений.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатНач,
	|			&ДатКон,
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Услуга В (&СпУслуг)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты";
	
	ЗапросНачислений.УстановитьПараметр("ДатНач",      НачалоМесяца(Дата));
	ЗапросНачислений.УстановитьПараметр("ДатКон",      КонецМесяца(Дата));
	ЗапросНачислений.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросНачислений.УстановитьПараметр("СпУслуг",     СпУслуг);
	
	ВыборкаНачислений = ЗапросНачислений.Выполнить().Выбрать();
	Если ВыборкаНачислений.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(ВыборкаНачислений.СуммаНачислений), ВыборкаНачислений.СуммаНачислений, 0);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции //ПолучитьСуммуНачисленийПоОбъекту()

// Заполняет табличную часть.
//
// Параметры:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьУслуги(СписокОбъектов) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Начисления на л/с
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета
	 Или ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
		
		СтруктураПараметров = Новый Структура;
		// Добровольное страхование начисляем за месяц по принципу "текущий месяц + 2 месяца".
		СтруктураПараметров.Вставить("Период",                     ?(ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования, ДобавитьМесяц(Дата, 2), Дата));
		СтруктураПараметров.Вставить("ДатаДок",                    Дата);
		СтруктураПараметров.Вставить("Организация",                Организация);
		СтруктураПараметров.Вставить("Услуга",                     Услуга);
		СтруктураПараметров.Вставить("ЭтоДобровольноеСтрахование", ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования);
		
		ТаблицаНачислений = КВП_СформироватьТаблицуНачислений(Ссылка, СтруктураПараметров, СписокОбъектов, 
													мНастройкиУчетнойПолитикиТСЖ, КоличествоДнейНачисления);
		
		// Определим границы периода начисления.
		НачалоПериода = НачалоМесяца(Дата);
		КонецПериода  = НачалоПериода + (КоличествоДнейНачисления - 1) * ДлинаСуток;
		
		СтруктураПараметров.Вставить("НачалоПериода",  НачалоПериода);
		СтруктураПараметров.Вставить("КонецПериода",   КонецПериода);
		СтруктураПараметров.Вставить("СписокОбъектов", СписокОбъектов);
		
		// Дополним таблицу услуг начислениями зависимых услуг.
		ДополнитьТаблицуНачисленийЗависимымиУслугами(ТаблицаНачислений, СтруктураПараметров);
		
		Услуги.Загрузить(ТаблицаНачислений);
		
	// Начисления на парковочные места
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста Тогда
		
		Если Услуга.Пустая() Тогда
			УслугаПараметр = Новый СписокЗначений();
			Выборка = Справочники.КВП_Услуги.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.ЭтоГруппа И (НЕ Выборка.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка) Тогда
					УслугаПараметр.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			УслугаПараметр = ПолучитьЭлементыСправочникаПоГруппе(Услуга);
		КонецЕсли;
		
		// Общая таблица парковочных мест по услуге и объекту
		ТаблицаПарковочныхМест = КВП_СформироватьТаблицуПарковочныхМест(Дата, СписокОбъектов, УслугаПараметр);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
		|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, ) КАК КВП_ПлощадьПомещенияСрезПоследних";
		ВыборкаПлощади = Запрос.Выполнить().Выбрать();
		
		// заполним табличную часть документа
		Для Каждого Строка Из ТаблицаПарковочныхМест Цикл
			Если Не ЗначениеЗаполнено(Строка.ПарковочноеМесто) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ = Услуги.Добавить();
			СтрокаТЧ.Услуга       = Строка.Услуга;
			СтрокаТЧ.ЛицевыеСчета = Строка.ПарковочноеМесто;
			СтрокаТЧ.Тариф        = ПолучитьТарифПоПарковочномуМесту(Дата, Организация, Строка.Услуга, Строка.ПарковочноеМесто);
			Если Строка.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
				Поиск = Новый Структура;
				Поиск.Вставить("Объект", Строка.ПарковочноеМесто);
				ВыборкаПлощади.Сбросить();
				Если ВыборкаПлощади.НайтиСледующий(Поиск) Тогда
					СтрокаТЧ.Количество = ВыборкаПлощади.Площадь;
				КонецЕсли;
			ИначеЕсли Строка.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ФиксированноеНачисление Тогда
				СтрокаТЧ.Количество = 1;
			КонецЕсли;
			СтрокаТЧ.Начислено = СтрокаТЧ.Количество * СтрокаТЧ.Тариф;
			СтрокаТЧ.Договор = 
				Документы.КВП_НачислениеУслуг.ПолучитьДоговорВладельцаПарковочногоМеста(Дата, СтрокаТЧ.ЛицевыеСчета, Организация);
		КонецЦикла;
		
	// Начисления комиссии банка
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка Тогда
		
		Если ЗначениеЗаполнено(Услуга) Тогда
			Если НЕ Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выберите услугу со способом расчета ""Комиссия банка"".");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НачалоПериода = НачалоМесяца(Дата);
		КонецПериода  = КонецДня(КонецМесяца(Дата));
		
		НачислениеНаПарковочныеМеста = Ложь;
		
		// получим список лицевых счетов для списка объектов
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(Дата, СписокОбъектов);
		СписокЛицевыхСчетов = Новый СписокЗначений();
		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
			КонецЕсли;
		КонецЦикла;
		
		// Получим таблицу всех лицевых счетов, для которых назначена услуга Комиссия банка.
		ТаблицаОбъектов = КВП_ПолучитьТаблицуДействующихУслугВПериоде(Дата, СписокЛицевыхСчетов, Услуга, Новый Структура("Организация", Организация));
		
		// В полученной таблице объектов будет колонка "Объект", содержащая лицевые счета.
		// Далее данная таблица будет загружаться в ТЧ Услуги, в которой колонка, содержащая
		// лицевые счета, называется "ЛицевыеСчета". Поэтому переименуем в данной таблице
		// колонку "Объект" в "ЛицевыеСчета".
		ТаблицаОбъектов.Колонки.Объект.Имя = "ЛицевыеСчета";
		
		ТаблицаОбъектов.Колонки.Добавить("СуммаНачислений");
		ТаблицаОбъектов.Колонки.Добавить("Тариф");
		ТаблицаОбъектов.Колонки.Добавить("Начислено");
		ТаблицаОбъектов.Колонки.Добавить("Договор");
		
		// Определим сумму комиссии банка исходя из всех начислений лицевого счета.
		Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
			ЛицевойСчет = ТекСтрока.ЛицевыеСчета;
			Если НачислениеНаПарковочныеМеста Тогда
				ТекВладелецОбъекта = 
					УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекСтрока.ЛицевыеСчета, Дата);
				Если ТипЗнч(ТекВладелецОбъекта) = Тип("СправочникСсылка.Контрагенты") Тогда
					ЛицевойСчет = ТекВладелецОбъекта;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Тариф = ПолучитьТарифПоЛицевомуСчету(Дата, 
														   Организация, 
														   Услуга, 
														   ЛицевойСчет, 
														   Перечисления.КВП_ВидыТарифов.КомиссияБанка);
			ТекСтрока.СуммаНачислений = ПолучитьСуммуНачисленийПоОбъекту(ЛицевойСчет, ТекСтрока.Услуга);
			ТекСтрока.Начислено = ТекСтрока.СуммаНачислений 
								* ?(Услуга.РасчетКомиссииСверху, 
									ТекСтрока.Тариф / 100, 
									ТекСтрока.Тариф / ( ?(ТекСтрока.Тариф = 100, ТекСтрока.Тариф, 100 - ТекСтрока.Тариф) ));
			ТекСтрока.Договор = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевыеСчета, Организация,
																								КонецПериода, "Договор");
		КонецЦикла;
		
		// удалим строки, по которым не было начислений.
		Отбор = Новый Структура;
		Отбор.Вставить("СуммаНачислений", 0);
		МассивСтрок = ТаблицаОбъектов.НайтиСтроки(Отбор);
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ТаблицаОбъектов.Удалить(СтрокаМассива);
		КонецЦикла;
		
		Услуги.Загрузить(ТаблицаОбъектов);
		
	// Начисления по приборам учета
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		
		УслугиПоПоказаниямПУ.Очистить();
		
		// Очищаем таблицу объектов, по которым распределен ОДН.
		// Таблицу необходимо очищать как при расчете, так и при перезаполнении,
		// в противном случае могут возникнуть ситуации, когда распределения не было, а таблица заполнена.
		ОбъектыСРаспределеннымРасходомОДН.Очистить();
		
		ТЗУслугиПоПоказаниямПУ = УслугиПоПоказаниямПУ.ВыгрузитьКолонки();
		// Удалим колонки и добавим новые для увеличения разрядности дробной части.
		// Сделано для увеличения точности расчета.
		ТЗУслугиПоПоказаниямПУ.Колонки.Удалить("Сумма");
		ТЗУслугиПоПоказаниямПУ.Колонки.Удалить("ПоказаниеСчЛС");
		ТЗУслугиПоПоказаниямПУ.Колонки.Добавить("Сумма",
													УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(20, 6));
		ТЗУслугиПоПоказаниямПУ.Колонки.Добавить("ПоказаниеСчЛС",
													УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(20, 6));
		
		// Получим список услуг из регистра "УПЖКХ_УслугиОбщедомовогоСчетчика".
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      Услуга);
		СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Истина);
		
		ДопСписокУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("Услуга");
		
		// Сформируем таблицу лицевых счетов с назначенными услугами, по которым будем производить начисление.
		ТаблицаЛС = ПолучитьТаблицуЛСПоУслуге(СписокОбъектов, ДопСписокУслуг);
		
		// Определим таблицу периодов действия услуг на лицевых счетах.
		// Сделано для оптимизации определения периодов. Данные по всем л/с и услугам
		// будут храниться в одной таблице.
		СписокУслуг = ДопСписокУслуг;
		СписокУслуг.Добавить(Услуга);
		
		мТаблицаПериодовДействияУслуги = ПолучитьПериодыДействияУслуги(ТаблицаЛС.ВыгрузитьКолонку("Объект"), СписокУслуг, Организация,
		                                                  НачалоМесяца(Дата), КонецМесяца(Дата), Дата);
		
		// Добавим данные по ИПУ в таблицу услуг
		ДополнитьТаблицуУслугПоПоказаниямИндивидуальнымиПУ(ТЗУслугиПоПоказаниямПУ, ТаблицаЛС, ДопСписокУслуг);
		
		мТаблицаПериодовДействияУслуги = Неопределено;
		
		// Для информации:
		// Теперь зависимые услуги сразу начисляются в табличной части документа, а не при его проведении.
		
		// Дополним таблицу услуг начислениями зависимых услуг.
		ДополнитьТаблицуУслугПУЗависимымиУслугами(ТЗУслугиПоПоказаниямПУ);
		
		// Для информации:
		// Сторно определяется сразу как для основных услуг, так и для зависимых,
		// т.к на момент вычисления сторно данные по зависимым имеются в табличной части.
		
		// Дополним таблицу услуг суммами сторно.
		ДополнитьТаблицуУслугПоПоказаниямСуммамиСторно(ТЗУслугиПоПоказаниямПУ);
		
		// Сворачиваем по типу расчета для того, чтобы при проведении можно было
		// однозначно определить какие начисления произведены по показаниям
		// для списания показаний с регистра "Расчет приборов учета".
		ТЗУслугиПоПоказаниямПУ.Свернуть("ЛицевойСчет, Услуга, СоставнаяУслуга, ВидТарифа, Тариф, ТипРасчета, ФормулаРасчета,
		                                |Договор, НачалоПериода, КонецПериода, СостояниеПУ, Тарифность, Сторно, 
		                                |ТарифДляСторнирования, НачислениеПоПовышающемуКоэффициенту, 
		                                |УслугаОснование, Зависимая, ЗависимаяПоНормативу", 
		                                "ПоказаниеСчЛС, Сумма");
		
		УслугиПоПоказаниямПУ.Загрузить(ТЗУслугиПоПоказаниямПУ);
		
	// Начисления по рассрочке.
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда
		
		ТаблицаЛС = Новый ТаблицаЗначений;
		ТаблицаЛС.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		
		// получим список лицевых счетов для списка объектов
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(Дата, СписокОбъектов);
		
		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
			
			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
				
				СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
				Для Каждого ТекЭлементСписка Из ТекОбъект.СписокОбъектов Цикл
					
					ТекущийЛС = ТекЭлементСписка.Значение;
					
					НоваяСтрокаТаблицыЛС = ТаблицаЛС.Добавить();
					НоваяСтрокаТаблицыЛС.ЛицевойСчет = ТекущийЛС;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРассрочки = ПолучитьТаблицуСведенийОРассрочке(ТаблицаЛС);
		НачисленияПоРассрочке.Загрузить(ТаблицаРассрочки);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачислениеУслугПоПУЖкх", ВремяНачала);
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачислениеУслугПоОбычнойУслугеЖкх", ВремяНачала);
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьУслуги()

// Пересчитывает сумму начисления по количеству и тарифу.
//
// Параметры:
//  СтрокаТЧ     - строка табличной части документа.
//
Процедура ПересчитатьСуммуСтрокиТЧ(СтрокаТЧ, ИмяКолонкиТЧ = Неопределено) Экспорт
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета Тогда
		
		Если НЕ ИмяКолонкиТЧ = Неопределено И ИмяКолонкиТЧ = "Начислено" Тогда
			СтрокаТЧ.Количество = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаТЧ.Начислено / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф)
			                        * СтрокаТЧ.ДнейНачислено / КоличествоДнейНачисления, мТочностьОбъемаНачислений);
		Иначе
			СтрокаТЧ.Начислено = СтрокаТЧ.Количество * СтрокаТЧ.Тариф * СтрокаТЧ.ДнейНачислено / КоличествоДнейНачисления;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста Тогда
		
		СтрокаТЧ.Начислено = СтрокаТЧ.Количество * СтрокаТЧ.Тариф * СтрокаТЧ.ДнейНачислено / УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата);
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка Тогда
		
		Если СтрокаТЧ.Услуга.РасчетКомиссииСверху Тогда
			КоэфНачисления = СтрокаТЧ.Тариф / 100;
		Иначе
			КоэфНачисления = СтрокаТЧ.Тариф /(100 - СтрокаТЧ.Тариф);
		КонецЕсли;
		
		СтрокаТЧ.Начислено = СтрокаТЧ.СуммаНачислений * КоэфНачисления;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		
		Если НЕ ИмяКолонкиТЧ = Неопределено Тогда
			Если ИмяКолонкиТЧ = "СуммаПоНормативу" Тогда
				Если СтрокаТЧ.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ Тогда
					СтрокаТЧ.КоличествоПоНормативуБезИПУ = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаТЧ.СуммаПоНормативу / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф), мТочностьОбъемаНачислений);
				ИначеЕсли СтрокаТЧ.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний Тогда
					СтрокаТЧ.КоличествоПоНормативуБезПоказаний = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаТЧ.СуммаПоНормативу / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф), мТочностьОбъемаНачислений);
				КонецЕсли;
			ИначеЕсли ИмяКолонкиТЧ = "СуммаПоПУ" Тогда
				СтрокаТЧ.КоличествоПоПУ        = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаТЧ.СуммаПоПУ / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф), мТочностьОбъемаНачислений);
			ИначеЕсли ИмяКолонкиТЧ = "КоличествоПоПУ" 
			      ИЛИ ИмяКолонкиТЧ = "КоличествоПоНормативуБезИПУ"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоПоНормативуБезПоказаний"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияПомещение"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияПодъезд"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияЗдание"
			      ИЛИ ИмяКолонкиТЧ = "Тариф" Тогда
				СтрокаТЧ.СуммаПоПУ             = СтрокаТЧ.КоличествоПоПУ        * СтрокаТЧ.Тариф;
				СтрокаТЧ.СуммаПоНормативу      = (СтрокаТЧ.КоличествоПоНормативуБезИПУ
				                               + СтрокаТЧ.КоличествоПоНормативуБезПоказаний) * СтрокаТЧ.Тариф;
				СтрокаТЧ.СуммаРаспределения    = (СтрокаТЧ.КоличествоРаспределенияПомещение
				                                + СтрокаТЧ.КоличествоРаспределенияПодъезд
				                                + СтрокаТЧ.КоличествоРаспределенияЗдание) * СтрокаТЧ.Тариф;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Начислено = СтрокаТЧ.СуммаПоПУ + СтрокаТЧ.СуммаПоНормативу + СтрокаТЧ.СуммаРаспределения;
		
	КонецЕсли;

КонецПроцедуры // ПересчитатьСуммуСтрокиТЧ()

// Получает таблицу лицевых счетов в здании, для которых назначена выбранная услуга.
//
// Параметры
//  СписокОбъектов - список объектов для получения списка лицевых счетов.
//
Функция ПолучитьТаблицуЛСПоУслуге(СписокОбъектов, ДопСписокУслуг = Неопределено) Экспорт
	
	ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(НачалоМесяца(Дата), СписокОбъектов, КонецМесяца(Дата));
	СписокЛицевыхСчетов = Новый СписокЗначений();
	Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
		Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
			СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	СписокУслуг = Неопределено;
	Если ЗначениеЗаполнено(Услуга) Тогда
		СписокУслуг = Новый СписокЗначений;
		Если Услуга.ЭтоГруппа Тогда
			СписокУслуг = ПолучитьЭлементыСправочникаПоГруппе(Услуга);
		Иначе
			СписокУслуг.Добавить(Услуга);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДопСписокУслуг = Неопределено Тогда
		Для Каждого ТекУслуга Из ДопСписокУслуг Цикл
			СписокУслуг.Добавить(ТекУслуга);
		КонецЦикла;
	КонецЕсли;
	
	// Условия отбора услуг со способами расчета "По показаниям счетчика" и "По показаниям счетчика и норме потребления".
	ДополнительныеУсловия = "(СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика))";
	
	Возврат КВП_ПолучитьТаблицуДействующихУслугВПериоде(Дата,
														СписокЛицевыхСчетов,
														СписокУслуг,
														Новый Структура("Организация", Организация),
														ДополнительныеУсловия);
	
КонецФункции // ПолучитьТаблицуЛСПоУслуге()

// Получает таблицу объектов(лицевые счета, помещения, подъезды, здание) для расчета показаний по ПУ.
//
// Параметры
//  ТаблицаЛС  - таблица лицевых счетов в здании, для которых назначена выбранная услуга.
//
// Возвращаемое значение:
//  ТаблицаОбъектов - таблица объектов для расчета показаний по ПУ.
//
Функция ПолучитьТаблицуОбъектовРасчетаПоказанийПУ(СписокЛС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	""ЛицевойСчет"" КАК ВидОбъекта
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)";
	
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбъектов.Колонки.Добавить("Объект", 
									 Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета,
														 | СправочникСсылка.УПЖКХ_Помещения,
														 | СправочникСсылка.КВП_Подъезды,
														 | СправочникСсылка.КВП_Здания"));
	
	// добавим в таблицу объектов лицевые счета.
	ТаблицаОбъектов.ЗагрузитьКолонку(ТаблицаОбъектов.ВыгрузитьКолонку("ЛицевойСчет"), "Объект");
	
	// добавим в таблицу объектов помещения.
	ТаблицаПомещений = ТаблицаОбъектов.Скопировать();
	ТаблицаПомещений.Свернуть("Помещение, Подъезд, Здание");
	Для Каждого ТекСтрока Из ТаблицаПомещений Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ВидОбъекта = "Помещение";
		НоваяСтрока.Объект     = ТекСтрока.Помещение;
	КонецЦикла;
	
	// добавим в таблицу объектов подъезды.
	ТаблицаПодъездов = ТаблицаОбъектов.Скопировать();
	ТаблицаПодъездов.Свернуть("Подъезд, Здание");
	Для Каждого ТекСтрока Из ТаблицаПодъездов Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ВидОбъекта = "Подъезд";
		НоваяСтрока.Объект     = ТекСтрока.Подъезд;
	КонецЦикла;
	
	// добавим в таблицу объектов здание.
	ТаблицаЗданий = ТаблицаОбъектов.Скопировать();
	ТаблицаЗданий.Свернуть("Здание");
	Для Каждого ТекСтрока Из ТаблицаЗданий Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ВидОбъекта = "Здание";
		НоваяСтрока.Объект     = ТекСтрока.Здание;
	КонецЦикла;
	
	Возврат ТаблицаОбъектов;
	
КонецФункции // ПолучитьТаблицуОбъектовРасчетаПоказанийПоПУ()

// Заполняет таблицу показаний по объекту данными из сводной таблицы показаний.
//
Процедура ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, СводнаяТаблицаПоказаний, Объект,
												СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа = Неопределено, КоличествоТарифов,
												ОтбиратьПоТипуРасчета = Истина)
	
	УчитыватьНорму = (СоставСуммарногоРасходаИПУДляРаспределения = 
						Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу
				  ИЛИ СоставСуммарногоРасходаИПУДляРаспределения = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему);
	
	УчитыватьСреднее = (СоставСуммарногоРасходаИПУДляРаспределения = 
							Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему);
	
	ЕстьТипРасчета = (Не СводнаяТаблицаПоказаний.Колонки.Найти("ТипРасчета") = Неопределено);
	
	ДобавитьКолонкуВОбъект(ТаблицаПоказаний, "Счетчик",        "СправочникСсылка.КВП_Счетчики");
	ДобавитьКолонкуВОбъект(ТаблицаПоказаний, "ВидТарифа",      "ПеречислениеСсылка.КВП_ВидыТарифов");
	ДобавитьКолонкуВОбъект(ТаблицаПоказаний, "Показание",      "Число");
	ДобавитьКолонкуВОбъект(ТаблицаПоказаний, "ТипРасчета",     "Число");
	
	ОтборПоказаний = Новый Структура("Объект", Объект);
	
	ПоказанияПоОбъекту = СводнаяТаблицаПоказаний.НайтиСтроки(ОтборПоказаний);
	
	Для Каждого СтрокаПоказания ИЗ ПоказанияПоОбъекту Цикл
		
		// При получении показаний исключаем следующие данные:
		// 1. Начисления по норме, если норму не нужно учитывать.
		// 2. Начисления по среднему, если среднее не нужно учитывать.
		// 3. Начисления по виду тарифа, отличного от текущего и от ОБЩЕГО,
		//    если распределение идет по конкретному виду тарифа.
		
		// Если учитываются все типы расчета, то пропускать строки не будем, берем все начисления.
		Если ОтбиратьПоТипуРасчета Тогда
			
			Если (НЕ УчитыватьНорму И СтрокаПоказания.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий)
			 ИЛИ (ЕстьТипРасчета И НЕ УчитыватьСреднее И СтрокаПоказания.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу())
			 ИЛИ (НЕ СтрокаПоказания.ВидТарифа = ВидТарифа И НЕ ВидТарифа = Неопределено
			      И НЕ СтрокаПоказания.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоказаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказания);
		
		Если УчитыватьНорму И НЕ ВидТарифа = Неопределено
		   И СтрокаПоказания.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
			НоваяСтрока.Показание = НоваяСтрока.Показание / КоличествоТарифов;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоказаний.Свернуть("Счетчик, ВидТарифа, ТипРасчета", "Показание");
	
КонецПроцедуры // ЗаполнитьТаблицуПоказанийПоОбъекту()

// Получает дерево объектов (здание, подъезды, помещения, лицевые счета) с данными по установленным счетчикам.
//
// Параметры
//  ТаблицаОбъектов  - таблица объектов (здание, подъезды, помещения, лицевые счета).
//
// Возвращаемое значение:
//  ДеревоПоказанийПУ - дерево объектов с показаниями ПУ.
//
Функция ПолучитьДеревоПоказанийПУ(Знач ТаблицаОбъектов, ВидТарифа, КоличествоТарифов)

	Граница = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	
	ЗапросПоПоказаниям = Новый Запрос;
	ЗапросПоПоказаниям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_РасчетПриборовУчетаОстатки.Объект,
	|	УПЖКХ_РасчетПриборовУчетаОстатки.Счетчик,
	|	УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания КАК ВидТарифа,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|					ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|				ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Показание
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
	|			&Дата,
	|			Услуга = &Услуга
	|				И Объект В (&СпОбъектов)) КАК УПЖКХ_РасчетПриборовУчетаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасчетПриборовУчетаОстатки.Объект,
	|	УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания,
	|	УПЖКХ_РасчетПриборовУчетаОстатки.Счетчик";
	
	ЗапросПоПоказаниям.УстановитьПараметр("Дата",          Граница.Значение);
	ЗапросПоПоказаниям.УстановитьПараметр("Услуга",        Услуга);
	ЗапросПоПоказаниям.УстановитьПараметр("СпОбъектов",    ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	ЗапросПоПоказаниям.УстановитьПараметр("ВидПоказания",  ВидТарифа);
	
	// Для начисления по показаниям ПУ необходимо получать расход ПУ с ограничением
	// по минимальному значению с точностью объема начислений. Если этого не делать,
	// то при вводе показаний с более высокой точностью, чем точность начислений,
	// после начисления останутся зависшие остатки расхода ПУ, которые потом приведут
	// к некорректному начислению в следующих периодах.
	ЗапросПоПоказаниям.УстановитьПараметр("МинимальноеЗначениеДляТочностиОбъемаНачислений", ПолучитьМинимальноеЗначениеДляТочностиОбъемаНачислений());
	
	ПоказанияПриборовУчета = ЗапросПоПоказаниям.Выполнить().Выгрузить();
	ПоказанияПриборовУчета.Индексы.Добавить("Объект");
	
	// Объемы потребления услуг-баз расчета, в случае когда начисление по общедомовой услуге и услуге-базе расчета
	// производится одним документом, переведем в единицы измерения общедомовой услуги.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ПоказаниеСчЛС КАК ПоказаниеСчЛС,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ВидТарифа КАК ВидТарифа,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.УчетныйИндивидуальныйОбъем КАК УчетныйИндивидуальныйОбъем,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ТипРасчета КАК ТипРасчета,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ФормулаРасчета КАК ФормулаРасчета,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Услуга КАК Услуга
	|ПОМЕСТИТЬ втПоказанияВТабличнойЧасти
	|ИЗ
	|	&УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
	|ГДЕ
	|	НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.Сторно
	|	И НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.НачислениеПоПовышающемуКоэффициенту
	|	И НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.Зависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втПоказанияВТабличнойЧасти.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
	|	втПоказанияВТабличнойЧасти.ВидТарифа КАК ВидТарифа,
	|	втПоказанияВТабличнойЧасти.ТипРасчета КАК ТипРасчета,
	|	втПоказанияВТабличнойЧасти.ФормулаРасчета КАК ФормулаРасчета,
	|	втПоказанияВТабличнойЧасти.ЛицевойСчет КАК Объект,
	|	СУММА(втПоказанияВТабличнойЧасти.УчетныйИндивидуальныйОбъем * ЕСТЬNULL(УПЖКХ_УслугиОбщедомовогоСчетчика.Коэффициент, 1)) КАК Показание
	|ИЗ
	|	втПоказанияВТабличнойЧасти КАК втПоказанияВТабличнойЧасти
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика
	|		ПО (УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика = &УслугаОбщедомовогоСчетчика)
	|			И втПоказанияВТабличнойЧасти.Услуга = УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга
	|			И (УПЖКХ_УслугиОбщедомовогоСчетчика.РаспределятьНаУслугуБазаРасчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоказанияВТабличнойЧасти.ЛицевойСчет,
	|	втПоказанияВТабличнойЧасти.ВидТарифа,
	|	втПоказанияВТабличнойЧасти.ТипРасчета,
	|	втПоказанияВТабличнойЧасти.ФормулаРасчета";
	
	Запрос.УстановитьПараметр("УслугиПоПоказаниямПУ",       УслугиПоПоказаниямПУ.Выгрузить());
	Запрос.УстановитьПараметр("УслугаОбщедомовогоСчетчика", Услуга);
	
	ПоказанияВТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	ТаблицаОбъектов.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаОбъектов.Здание КАК Здание,
	|	ТаблицаОбъектов.Подъезд КАК Подъезд,
	|	ТаблицаОбъектов.Помещение КАК Помещение,
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.ЛицевойСчет КАК ЛицевойСчет,
	|	ТабличнаяЧасть.ФормулаРасчета КАК ФормулаРасчета
	|ПОМЕСТИТЬ врТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Сторно
	|	И НЕ ТабличнаяЧасть.НачислениеПоПовышающемуКоэффициенту
	|	И ТабличнаяЧасть.Услуга = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.КВП_ЛицевыеСчета).Адрес.ВидПомещения.ЭтоЖилойФонд
	|							И &ДатаНач < ДОБАВИТЬКДАТЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ, КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений)
	|						ТОГДА ИСТИНА
	|					КОГДА НЕ ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.КВП_ЛицевыеСчета).Адрес.ВидПомещения.ЭтоЖилойФонд
	|							И &ДатаНач < ДОБАВИТЬКДАТЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ, КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.УПЖКХ_Помещения).ВидПомещения.ЭтоЖилойФонд
	|							И &ДатаНач < ДОБАВИТЬКДАТЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ, КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений)
	|						ТОГДА ИСТИНА
	|					КОГДА НЕ ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.УПЖКХ_Помещения).ВидПомещения.ЭтоЖилойФонд
	|							И &ДатаНач < ДОБАВИТЬКДАТЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ, КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетСрокПоверкиУтратыВыходаИзСтроя
	|ПОМЕСТИТЬ ТаблицаСчетчиковОтключенныхПоПоверкеУтратеВыходуИзСтроя
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Счетчик.ВидУслуги = &Услуга
	|				И Объект В (&СпОбъектов)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	И КВП_ЗакрепленныеСчетчикиСрезПоследних.ПричинаОтключения В(&ПричиныВременногоОтключенияПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчики.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ КВП_ЗакрепленныеСчетчикиВПериоде
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = &Услуга
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЗакрепленныеСчетчики.Объект В(&СпОбъектов)
	|	И НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ КВП_ЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Счетчик.ВидУслуги = &Услуга
	|				И Объект В (&СпОбъектов)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ ТаблицаСчетчиков
	|ИЗ
	|	КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиВПериоде.Объект,
	|	КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик
	|ИЗ
	|	КВП_ЗакрепленныеСчетчикиВПериоде КАК КВП_ЗакрепленныеСчетчикиВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	ТаблицаОбъектов.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаОбъектов.Здание КАК Здание,
	|	ТаблицаОбъектов.Подъезд КАК Подъезд,
	|	ТаблицаОбъектов.Помещение КАК Помещение,
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.Счетчик ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСчетчик,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.Счетчик ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ТаблицаСчетчиковОтключенныхПоПоверкеУтратеВыходуИзСтроя.ДействуетСрокПоверкиУтратыВыходаИзСтроя, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя
	|ПОМЕСТИТЬ ДанныеПоОбъектам
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ПО ТаблицаОбъектов.Объект = ТаблицаСчетчиков.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетчиковОтключенныхПоПоверкеУтратеВыходуИзСтроя КАК ТаблицаСчетчиковОтключенныхПоПоверкеУтратеВыходуИзСтроя
	|		ПО ТаблицаОбъектов.Объект = ТаблицаСчетчиковОтключенныхПоПоверкеУтратеВыходуИзСтроя.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоОбъектам.Помещение КАК Помещение,
	|	УПЖКХ_Помещения.ПроектПомещения.ИндивидуальноеОтопление КАК ИспользуетсяИндивидуальноеОтопление
	|ПОМЕСТИТЬ втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях
	|ИЗ
	|	ДанныеПоОбъектам КАК ДанныеПоОбъектам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО ДанныеПоОбъектам.Помещение = УПЖКХ_Помещения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоОбъектам.Объект КАК Объект,
	|	ДанныеПоОбъектам.ВидОбъекта КАК ВидОбъекта,
	|	ДанныеПоОбъектам.Здание КАК Здание,
	|	ДанныеПоОбъектам.Подъезд КАК Подъезд,
	|	ДанныеПоОбъектам.Помещение КАК Помещение,
	|	ДанныеПоОбъектам.ЛицевойСчет КАК ЛицевойСчет,
	|	ДанныеПоОбъектам.ЕстьСчетчик КАК ЕстьСчетчик,
	|	МАКСИМУМ(ДанныеПоОбъектам.СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя) КАК СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя,
	|	ЛОЖЬ КАК ЕстьИПУ,
	|	СУММА(0) КАК ПоказаниеСч,
	|	ЕСТЬNULL(ТабличнаяЧасть.ФормулаРасчета, -1) КАК ФормулаРасчета,
	|	ЕСТЬNULL(втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях.ИспользуетсяИндивидуальноеОтопление, ЛОЖЬ) КАК ИспользуетсяИндивидуальноеОтоплениеВПомещении
	|ИЗ
	|	ДанныеПоОбъектам КАК ДанныеПоОбъектам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТабличнаяЧасть КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.ЛицевойСчет = ДанныеПоОбъектам.ЛицевойСчет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях КАК втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях
	|		ПО ДанныеПоОбъектам.Помещение = втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоОбъектам.Подъезд,
	|	ДанныеПоОбъектам.Объект,
	|	ДанныеПоОбъектам.Здание,
	|	ДанныеПоОбъектам.ЕстьСчетчик,
	|	ДанныеПоОбъектам.ЛицевойСчет,
	|	ДанныеПоОбъектам.Помещение,
	|	ДанныеПоОбъектам.ВидОбъекта,
	|	ТабличнаяЧасть.ФормулаРасчета,
	|	втДанныеПоИспользованиюИндивидуальногоОтопленияВПомещениях.ИспользуетсяИндивидуальноеОтопление";
	
	Запрос.УстановитьПараметр("Дата",            Граница.Значение);
	Запрос.УстановитьПараметр("ДатаНач",         НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",         КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Услуга",          Услуга);
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("СпОбъектов",      ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	Запрос.УстановитьПараметр("ТабличнаяЧасть",  УслугиПоПоказаниямПУ);
	Запрос.УстановитьПараметр("ПричиныВременногоОтключенияПУ", мПричиныВременногоОтключенияПУ);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоПоказанийПУ = ТаблицаОбъектов.Скопировать();
	ДеревоПоказанийПУ.Строки.Очистить();
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "ТаблицаПоказаний", "ТаблицаЗначений");
	
	// Колонка используется для того, чтобы при распределении отрицательного расхода
	// проверять, не будет ли объем начислений по ИПУ с объемом отрицательного распределения
	// меньше нуля. В данную колонку включается расход по показаниям, по норме, по среднему.
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "ПоказаниеСчПоИПУ", "Число");
	
	// В данную колонку записывается размер ограничения ОДН по зданию (с учетом вида тарифа).
	// Размер ограничения рассчитывается с учетом настройки услуги "Способ распределения 
	// нормативов потребления по видам тарифов".
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "НормативОграниченияОДН", "Число");
	
	ОтборПоЗданию    = Новый Структура("ВидОбъекта",                                         "Здание");
	ОтборПоПодъезду  = Новый Структура("ВидОбъекта, Здание",                                 "Подъезд");
	ОтборПоПомещению = Новый Структура("ВидОбъекта, Здание, Подъезд",                        "Помещение");
	ОтборПоЛС        = Новый Структура("ВидОбъекта, Здание, Подъезд, Помещение",             "ЛицевойСчет");
	ОтборПоЛСБезПУ   = Новый Структура("ЕстьСчетчик, ВидОбъекта, Здание, Подъезд, Помещение", Ложь, "ЛицевойСчет");
	
	Здания = ТаблицаОбъектов.Строки.НайтиСтроки(ОтборПоЗданию);
	
	Для Каждого СтрокаЗдания ИЗ Здания Цикл
		
		ТекСтрокаЗдания = ДеревоПоказанийПУ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаЗдания, СтрокаЗдания);
		
		// заполним таблицу показаний по зданию
		ТаблицаПоказаний = ТекСтрокаЗдания.ТаблицаПоказаний;
		ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, ПоказанияПриборовУчета, СтрокаЗдания.Здание,
		                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов);
		ТекСтрокаЗдания.ПоказаниеСч    = ТаблицаПоказаний.Итог("Показание");
		
		// Получим лицевые счета, которые относятся к текущему зданию.
		ПараметрыОтбора = Новый Структура("ВидОбъекта", "ЛицевойСчет");
		ПараметрыОтбора.Вставить(ТекСтрокаЗдания.ВидОбъекта, ТекСтрокаЗдания.Объект);
		ЛицевыеСчета = ТаблицаОбъектов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		// Определим формулу расчета по зданию на основании формулы по л/с.
		ТекСтрокаЗдания.ФормулаРасчета = УстановитьФормулуРасчетаОбъекта(ЛицевыеСчета);
		
		/////////////////////////////////////////////////////////////////////////////////
		// Если используется расчет по формуле №15, то определим размер норматива 
		// потребления для текущего здания.
		Если ТекСтрокаЗдания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15() Тогда
			
			СтруктураДопПараметров = Новый Структура;
			СтруктураДопПараметров.Вставить("Объект",      ТекСтрокаЗдания.Здание);
			СтруктураДопПараметров.Вставить("Услуга",      Услуга);
			СтруктураДопПараметров.Вставить("Организация", Организация);
			СтруктураДопПараметров.Вставить("Период",      Дата);
			НормаПотребленияЗдания = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураДопПараметров);
			
			ТекСтрокаЗдания.ПоказаниеСч = НормаПотребленияЗдания;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////
		// Если используется ограничение ОДН нормативом, то определим размер ограничения
		// для текущего здания.
		
		// Расход для распределения ОДН не уменьшается в случаях:
		// 1. Индивидуальное потребление коммунального ресурса рассчитано по формуле №3 постановления 354 по показаниям коллективного прибора учета.
		// 2. Расход ОДН рассчитывается по норме по формуле 15 постановления 354 при отсутствии коллективных ПУ (на здание и подъезды).
		
		Если Услуга.НастройкаОграниченияОДННормативом 
		   И НЕ ТекСтрокаЗдания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14() 
		   И НЕ ТекСтрокаЗдания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15() Тогда
			
			// Получим показания ОПУ для их ограничения.
			ТаблицаПоказанийОПУ = ТаблицаПоказаний.СкопироватьКолонки();
			ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказанийОПУ, ПоказанияПриборовУчета, СтрокаЗдания.Здание,
			                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов, Ложь);
			
			// Если есть, что ограничивать, то будем получать необходимые данные.
			Если ТаблицаПоказанийОПУ.Количество() > 0 Тогда
				
				// Если используется вариант распределения расхода КПУ по тарифам "РаспределениеПоВидамТарифа"
				// и способ распределения ограничений "ПоровнуСОграничениемПоФактическомуРасходу",
				// то необходимо получить реальные объемы к распределению. Для этого из показаний ОДН
				// нужно вычесть объемы из состава ИПУ.
				//
				Если Услуга.ВариантРаспределенияРасходаКПУПоТарифам = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа")
				  И (Услуга.СпособРаспределенияОграниченийПоВидамТарифов = Перечисления.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПоровнуСОграничениемПоФактическомуРасходу
					 ИЛИ Услуга.СпособРаспределенияОграниченийПоВидамТарифов = Перечисления.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПропорциональноФактическомуРасходу) Тогда
					
					// Добавим вспомогательную колонку, в которой и будем уменьшать ОДН.
					ДобавитьКолонкуВОбъект(ТаблицаПоказанийОПУ, "ПоказаниеСУчетомРасходаИПУ", "Число");
					
					// Заполним новую колонку исходными показаниями ОДН.
					Для Каждого ТекСтрокаПоказанийОПУ Из ТаблицаПоказанийОПУ Цикл
						ТекСтрокаПоказанийОПУ.ПоказаниеСУчетомРасходаИПУ = ТекСтрокаПоказанийОПУ.Показание;
					КонецЦикла;
					
					СписокОбъектов = Новый СписокЗначений;
					ОбщийРасходПоИПУ = 0;
					
					// Добавим таблицу, которая предназначена для последующей свертки и учета сводных объемов в показаниях ОПУ.
					СводнаяТаблицаПоказанийДляИсключенияИзОПУ = ТаблицаПоказаний.СкопироватьКолонки();
					
					// Обходим таблицу лицевых счетов. Для каждого л/с определяем индивидуальный расход
					// и в зависимости от настроек услуги относим к показаниям для исключения.
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						
						ТаблицаПоказанийЛС = ТаблицаПоказаний.СкопироватьКолонки();
						ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказанийЛС, ПоказанияПриборовУчета, СтрокаЛС.ЛицевойСчет,
															Услуга.СоставСуммарногоРасходаИПУДляРаспределения, Неопределено, КоличествоТарифов, Ложь);
						
						Для Каждого ТекСтрокаПоказания Из ТаблицаПоказанийЛС Цикл
							ЗаполнитьЗначенияСвойств(СводнаяТаблицаПоказанийДляИсключенияИзОПУ.Добавить(), ТекСтрокаПоказания);
						КонецЦикла;
						
						СписокОбъектов.Добавить(СтрокаЛС.Объект);
						
					КонецЦикла;
					
					// Свернем показания для исключения по виду тарифа.
					СводнаяТаблицаПоказанийДляИсключенияИзОПУ.Свернуть("ВидТарифа", "Показание");
					
					// Определим список видов тарифа, по которым нужно исключить показания из ОПУ.
					// Обход производим именно по видам тарифов показаний ОПУ, так как именно их
					// мы уменьшаем, а исключаемые объемы могут быть как в таблице исключения,
					// так и получены по объемам начисления общедомовых услуг.
					врТаблицаВидовТарифов = ТаблицаПоказанийОПУ.Скопировать(, "ВидТарифа");
					врТаблицаВидовТарифов.Свернуть("ВидТарифа");
					СписокВидовТарифов = врТаблицаВидовТарифов.ВыгрузитьКолонку("ВидТарифа");
					
					// Будем исключать отдельно по каждому виду тарифа.
					Для Каждого ТекВидТарифаИсключения Из СписокВидовТарифов Цикл
						
						// Определим общий расход для исключения.
						ОбщийРасходПоИПУ = 0;
						
						СтрокиИсключения = СводнаяТаблицаПоказанийДляИсключенияИзОПУ.НайтиСтроки(Новый Структура("ВидТарифа", ТекВидТарифаИсключения));
						Для Каждого ТекСтрокаИсключения Из СтрокиИсключения Цикл
							ОбщийРасходПоИПУ = ОбщийРасходПоИПУ + ТекСтрокаИсключения.Показание;
						КонецЦикла;
						
						РасходОДН = ПолучитьРасходПоУслугамКоллективногоПрибораУчета(СписокОбъектов, ТекВидТарифаИсключения, КоличествоТарифов);
						
						Если НЕ ТекСтрокаЗдания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15() Тогда
							ОбщийРасходПоИПУ = ОбщийРасходПоИПУ + РасходОДН;
						КонецЕсли;
						
						// Получим строки ОДН, из которых будем исключать ИПУ.
						СтрокиОДН = ТаблицаПоказанийОПУ.НайтиСтроки(Новый Структура("ВидТарифа", ТекВидТарифаИсключения));
						
						// В цикле перебираем строки показаний КПУ, постепенно уменьшая общий расход по ИПУ на текущее показание в строке.
						// Как только общий расход по ИПУ зачтен полностью за счет коллективных показаний, оставшийся расход КПУ
						// пойдет для распределения.
						Для Каждого ТекСтрокаПоказанийОПУ Из СтрокиОДН Цикл
							
							// Если весь объем индивидуальных показаний уже был зачтен, продолжать перебирать строки показаний КПУ не нужно.
							Если ОбщийРасходПоИПУ = 0 Тогда
								Прервать;
							КонецЕсли;
							
							// Вычислим текущий объем зачета расхода ИПУ. В качестве объема для зачета возьмем:
							// 1. Либо полное показание строки, если оно не превышает остаток общего расхода по ИПУ.
							// 2. Либо остаток общего расхода по ИПУ. В этом случае мы зачли только часть расхода, оставшуюся часть
							//    необходимо учесть к распределению.
							ТекОбъемЗачетаРасходаИПУ = Мин(ТекСтрокаПоказанийОПУ.ПоказаниеСУчетомРасходаИПУ, ОбщийРасходПоИПУ);
							Если ТекОбъемЗачетаРасходаИПУ = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							// Текущее показание с учетом расхода по ИПУ и общий расход по ИПУ уменьшаем на текущий объем зачета.
							ТекСтрокаПоказанийОПУ.ПоказаниеСУчетомРасходаИПУ = ТекСтрокаПоказанийОПУ.ПоказаниеСУчетомРасходаИПУ - ТекОбъемЗачетаРасходаИПУ;
							ОбщийРасходПоИПУ = ОбщийРасходПоИПУ - ТекОбъемЗачетаРасходаИПУ;
							
						КонецЦикла;
						
					КонецЦикла;
					
					// Возьмем в качестве колонки показаний ОДН новую колонку "ПоказаниеСУчетомРасходаИПУ".
					Если Не ТаблицаПоказанийОПУ.Колонки.Найти("Показание") = Неопределено Тогда
						ТаблицаПоказанийОПУ.Колонки.Удалить("Показание");
					КонецЕсли;
					ТаблицаПоказанийОПУ.Колонки.ПоказаниеСУчетомРасходаИПУ.Имя = "Показание";
					
				КонецЕсли;
				
				// Получим размеры ограничения по определенным параметрам.
				ДобавитьКолонкуВОбъект(ТаблицаПоказанийОПУ, "Ограничение", "Число");
				
				Параметры = Новый Структура;
				Параметры.Вставить("Организация",        Организация);
				Параметры.Вставить("Период",             Дата);
				Параметры.Вставить("Объект",             СтрокаЗдания.Здание);
				Параметры.Вставить("Услуга",             Услуга);
				Параметры.Вставить("ТарифностьСчетчика", КоличествоТарифов);
				
				ПолучитьРазмерОграниченияОДН(ТаблицаПоказанийОПУ, Параметры);
				
				// Запишем полученный размер ограничения в колонку строки дерева.
				// В случае, если имеется несколько приборов учета, то размер ограничения,
				// разбитый по ПУ пропорционально показаниям, нужно учитывать весь,
				// а значит брать по всем найденным строкам ограничения.
				НормативОграниченияОДН = 0;
				Если НЕ ВидТарифа = Неопределено Тогда
					СтрокиОграниченияОДН = ТаблицаПоказанийОПУ.НайтиСтроки(Новый Структура("ВидТарифа", ВидТарифа));
					Если СтрокиОграниченияОДН.Количество() > 0 Тогда
						врТаблицаПоказанийОПУПоВидуТарифа = ТаблицаПоказанийОПУ.Скопировать(СтрокиОграниченияОДН);
						НормативОграниченияОДН = врТаблицаПоказанийОПУПоВидуТарифа.Итог("Ограничение");
					КонецЕсли;
				Иначе
					НормативОграниченияОДН = ТаблицаПоказанийОПУ.Итог("Ограничение");
				КонецЕсли;
				
				ТекСтрокаЗдания.НормативОграниченияОДН = НормативОграниченияОДН;
				
			КонецЕсли;
			
		КонецЕсли;
		//
		/////////////////////////////////////////////////////////////////////////////////
		
		ОтборПоПодъезду.Здание = СтрокаЗдания.Здание;
		Подъезды = ТаблицаОбъектов.Строки.НайтиСтроки(ОтборПоПодъезду);
		
		Для Каждого СтрокаПодъезда ИЗ Подъезды Цикл
			
			ТекСтрокаПодъезда = ТекСтрокаЗдания.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрокаПодъезда, СтрокаПодъезда);
			
			// заполним таблицу показаний по подъезду
			ТаблицаПоказаний = ТекСтрокаПодъезда.ТаблицаПоказаний;
			ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, ПоказанияПриборовУчета, СтрокаПодъезда.Подъезд,
			                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов);
			
			ТекСтрокаПодъезда.ПоказаниеСч = ТаблицаПоказаний.Итог("Показание");
			
			ПараметрыОтбора.Вставить(ТекСтрокаПодъезда.ВидОбъекта, ТекСтрокаПодъезда.Объект);
			
			// Нужно удалить из структуры лишний ключ по помещениям, если он присутствует,
			// т.к. при обходе "следующего" подъезда в структуре остается ключ с последним помещением предыдущего подъезда.
			УдалитьНижестоящиеОтборы(ПараметрыОтбора, ТекСтрокаПодъезда.ВидОбъекта);
			
			ЛицевыеСчета = ТаблицаОбъектов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
			// определим формулу расчета по подъезду на основании формулы по л/с
			ТекСтрокаПодъезда.ФормулаРасчета = УстановитьФормулуРасчетаОбъекта(ЛицевыеСчета);
			
			ОтборПоПомещению.Здание  = СтрокаПодъезда.Здание;
			ОтборПоПомещению.Подъезд = СтрокаПодъезда.Подъезд;
			Помещения = ТаблицаОбъектов.Строки.НайтиСтроки(ОтборПоПомещению);
			
			Для Каждого СтрокаПомещения ИЗ Помещения Цикл
				
				ТекСтрокаПомещения = ТекСтрокаПодъезда.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(ТекСтрокаПомещения, СтрокаПомещения);
				
				// заполним таблицу показаний по помещению
				ТаблицаПоказаний = ТекСтрокаПомещения.ТаблицаПоказаний;
				
				ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, ПоказанияПриборовУчета, СтрокаПомещения.Помещение,
				                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов);
				ТекСтрокаПомещения.ПоказаниеСч = ТаблицаПоказаний.Итог("Показание");
								ПараметрыОтбора.Вставить(ТекСтрокаПомещения.ВидОбъекта, ТекСтрокаПомещения.Объект);
				ЛицевыеСчета = ТаблицаОбъектов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			
				// определим формулу расчета по помещению на основании формулы по л/с
				ТекСтрокаПомещения.ФормулаРасчета = УстановитьФормулуРасчетаОбъекта(ЛицевыеСчета);
				
				ОтборПоЛС.Здание    = СтрокаПомещения.Здание;
				ОтборПоЛС.Подъезд   = СтрокаПомещения.Подъезд;
				ОтборПоЛС.Помещение = СтрокаПомещения.Помещение;
				
				ЗаполнитьЗначенияСвойств(ОтборПоЛСБезПУ, ОтборПоЛС);
				
				ЛицевыеСчета      = ТаблицаОбъектов.Строки.НайтиСтроки(ОтборПоЛС);
				ЛицевыеСчетаБезПУ = ТаблицаОбъектов.Строки.НайтиСтроки(ОтборПоЛСБезПУ);
				
				КоличествоЛС      = ЛицевыеСчета.Количество();
				КоличествоЛСБезПУ = ЛицевыеСчетаБезПУ.Количество();
				
				Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
					
					ТекСтрокаЛС = ТекСтрокаПомещения.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ТекСтрокаЛС, СтрокаЛС);
					
					ТаблицаПоказаний = ТекСтрокаЛС.ТаблицаПоказаний;
					
					// заполним таблицу показаний по лицевому счету
					Если СтрокаЛС.ЕстьСчетчик
					 ИЛИ (НЕ СтрокаЛС.ЕстьСчетчик И НЕ СтрокаПомещения.ЕстьСчетчик) Тогда
						
						ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, ПоказанияВТабличнойЧасти, СтрокаЛС.ЛицевойСчет,
						                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов);
						ТекСтрокаЛС.ПоказаниеСч = ТаблицаПоказаний.Итог("Показание");
						
						ТаблицаПоказанийИПУ = ТаблицаПоказаний.СкопироватьКолонки();
						ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказанийИПУ, ПоказанияВТабличнойЧасти, СтрокаЛС.ЛицевойСчет,
						                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов, Ложь);
						ТекСтрокаЛС.ПоказаниеСчПоИПУ = ТаблицаПоказанийИПУ.Итог("Показание");
						
						// Если ПУ установленный на помещение отключен на поверку, утрачен или вышел из строя,
						// то для корректного расчета по Постановлению 1708 установим данный признак и для веток с л/с.
						Если ТекСтрокаПомещения.СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя
							 И Не СтрокаЛС.ЕстьСчетчик Тогда
							ТекСтрокаЛС.СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя = Истина;
						КонецЕсли;
						
					ИначеЕсли КоличествоЛС = КоличествоЛСБезПУ 
						    И СтрокаПомещения.ЕстьСчетчик Тогда
							
						
						// перенесем данные по приборам учета из строки по помещению.
						ТекСтрокаЛС.ЕстьСчетчик = Истина;
						
						ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказаний, ПоказанияВТабличнойЧасти, СтрокаЛС.ЛицевойСчет,
						                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов);
						ТекСтрокаЛС.ПоказаниеСч = ТаблицаПоказаний.Итог("Показание");
						
						ТаблицаПоказанийИПУ = ТаблицаПоказаний.СкопироватьКолонки();
						ЗаполнитьТаблицуПоказанийПоОбъекту(ТаблицаПоказанийИПУ, ПоказанияВТабличнойЧасти, СтрокаЛС.ЛицевойСчет,
						                                   Услуга.СоставСуммарногоРасходаИПУДляРаспределения, ВидТарифа, КоличествоТарифов, Ложь);
						ТекСтрокаЛС.ПоказаниеСчПоИПУ = ТаблицаПоказанийИПУ.Итог("Показание");
						
						ТекСтрокаПомещения.ЕстьСчетчик = Ложь;
						ТекСтрокаПомещения.ПоказаниеСч = 0;
						ТекСтрокаПомещения.ТаблицаПоказаний.Очистить();
						
					КонецЕсли;
					
				КонецЦикла; // по л/с
				
			КонецЦикла; // по помещениям
			
		КонецЦикла; // по подъездам
		
	КонецЦикла; // по зданиям
	
	Возврат ДеревоПоказанийПУ;
	
КонецФункции // ПолучитьДеревоПоказанийПУ()

// Удаляет из структуры отборы по нижестоящим видам объектов.
//
Процедура УдалитьНижестоящиеОтборы(ПараметрыОтбора, ВидОбъекта)
	
	Если ВидОбъекта = "Подъезд" ИЛИ ВидОбъекта = "Здание" Тогда
		ПараметрыОтбора.Удалить("Помещение");
	КонецЕсли;
	
	Если ВидОбъекта = "Здание" Тогда
		ПараметрыОтбора.Удалить("Подъезд");
	КонецЕсли;
	
КонецПроцедуры // УдалитьНижестоящиеОтборы()

// Процедура производит распределение коллективных показаний приборов учета пропорционально долям лицевых счетов.
//
Процедура РаспределитьПропорционально(ВеткаДерева, ПараметрыОтбора, ВидТарифа, КоличествоТарифов, ДопПараметры = Неопределено)
	
	Для Каждого СтрокаВетки ИЗ ВеткаДерева.Строки Цикл
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Объект распределения: " + СтрокаВетки.ВидОбъекта + " - " + СтрокаВетки.Объект);
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Вид тарифа распределения: " + ?(ЗначениеЗаполнено(ВидТарифа), ВидТарифа, "суммарный расход"));
		
		// Добавим в табличную часть "Счетчики" показания по общедомовым ПУ.
		// Необходимо для списания расхода общедомовых приборов учета, если используется
		// настройка во всех новых документах "Списывать расход ПУ по таблице счетчиков".
		Если (СтрокаВетки.ВидОбъекта = "Здание" Или СтрокаВетки.ВидОбъекта = "Подъезд" Или СтрокаВетки.ВидОбъекта = "Помещение")
			И СтрокаВетки.ЕстьСчетчик = Истина Тогда
			
			Для Каждого ТекСтрокаПоказаний Из СтрокаВетки.ТаблицаПоказаний Цикл
			
				НоваяСтрокаСчетчика = Счетчики.Добавить();
				НоваяСтрокаСчетчика.ОбщедомовойПУ = Истина;
				НоваяСтрокаСчетчика.Объект        = СтрокаВетки.Объект;
				НоваяСтрокаСчетчика.Счетчик       = ТекСтрокаПоказаний.Счетчик;
				НоваяСтрокаСчетчика.ВидТарифа     = ТекСтрокаПоказаний.ВидТарифа;
				НоваяСтрокаСчетчика.Расход        = ТекСтрокаПоказаний.Показание;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УдалитьНижестоящиеОтборы(ПараметрыОтбора, СтрокаВетки.ВидОбъекта);
		
		ПараметрыОтбора.Вставить(СтрокаВетки.ВидОбъекта, СтрокаВетки.Объект);
		
		ЛицевыеСчета = СтрокаВетки.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		РасчетПоФормуле15 = (СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15());
		
		// получим данные для распределения по индивидуальным приборам учета.
		МассивДолейПоложительныйРасход = Новый Массив;
		МассивДолейОтрицательныйРасход = Новый Массив;
		
		СписокОбъектов = Новый СписокЗначений;
		ОбщийРасходПоИПУ = 0;
		Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
			
			// Расход для распределения ОДН не уменьшается в случаях:
			//
			// 1. Индивидуальное потребление коммунального ресурса рассчитано по формуле №3 постановления 354 по показаниям коллективного прибора учета.
			// 2. Расход ОДН рассчитывается по норме по формуле 15 постановления 354 при отсутствии коллективных ПУ (на здание и подъезды).
			
			ОбщийРасходПоИПУ = ОбщийРасходПоИПУ + ?(НЕ СтрокаЛС.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14()
													И НЕ РасчетПоФормуле15, 
														СтрокаЛС.ПоказаниеСч, 
														0);
			МассивДолейПоложительныйРасход.Добавить(СтрокаЛС.Доля);
			МассивДолейОтрицательныйРасход.Добавить(СтрокаЛС.ДоляОтрицательныйРасход);
			СписокОбъектов.Добавить(СтрокаЛС.Объект);
		КонецЦикла;
		
		//////////////////////////////////////////////////
		// Получим расход ОДН по услугам коллективного ПУ.
		
		РасходОДН = 0;
		
		ТаблицаРасходаОДН = ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета(СписокОбъектов, ВидТарифа, КоличествоТарифов);
		
		// Таблицу начислений по услугам-базам дополним теми лицевыми счетами и услугами,
		// по которым не было начислений. Это нужно для корректного учета расхождений в случае,
		// если расход ИПУ равен 0, а начисление сторно к учету есть.
		Если НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      Услуга);
			СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Ложь);
			СписокУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("Услуга");
			
			Для Каждого ТекУслуга Из СписокУслуг Цикл
				Для Каждого ТекОбъект Из СписокОбъектов Цикл
					
					// Добавляем строки с нулевым расходом для всех объектов и услуг,
					// так как далее таблица будет свернута.
					НоваяСтрока = ТаблицаРасходаОДН.Добавить();
					
					НоваяСтрока.ЛицевойСчет = ТекОбъект.Значение;
					НоваяСтрока.Услуга      = ТекУслуга;
					НоваяСтрока.Количество  = 0;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		// Свернем таблицу расхода.
		ТаблицаРасходаОДН.Свернуть("ЛицевойСчет, Услуга", "Количество");
		
		// Добавляем индекс для поиска данных в таблице.
		ТаблицаРасходаОДН.Индексы.Добавить("ЛицевойСчет, Услуга");
		
		Если ТаблицаРасходаОДН.Количество() > 0 Тогда
			
			// Здесь пытаемся учесть объемы расхождений приборов учета.
			Для Каждого ТекСтрокаРасходаОДН Из ТаблицаРасходаОДН Цикл
				
				// Получим неучтенные объемы из табличной части документа.
				СтруктураПоиска = Новый Структура("Учтено, ЛицевойСчет, Услуга",
												  Ложь,
												  ТекСтрокаРасходаОДН.ЛицевойСчет,
												  ТекСтрокаРасходаОДН.Услуга);
				
				СтрокиРасхождения = УчтенныеОбъемыРасхожденийПУ.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиРасхождения.Количество() > 0 Тогда
					
					// Будем уменьшать объем ОДН за счет учета расхождений.
					ТекКоличествоОДН = ТекСтрокаРасходаОДН.Количество;
					
					Для Каждого ТекСтрокаИсключения Из СтрокиРасхождения Цикл
						
						Если ТекКоличествоОДН = 0 И Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме Тогда
							Прервать;
						КонецЕсли;
						
						ТекущийОбъемИсключения = ТекСтрокаИсключения.Количество;
						ВидТарифаИсключения    = ТекСтрокаИсключения.ВидТарифа;
						
						// Уменьшим объем ОДН на возможный учет ограничения.
						ЗначениеИсключения = ?(Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И ТекКоличествоОДН - ТекущийОбъемИсключения < 0, ТекКоличествоОДН, ТекущийОбъемИсключения);
						ТекКоличествоОДН = ТекКоличествоОДН - ЗначениеИсключения;
						
						// Уменьшим неучтенный объем на исключенный объем, чтобы не исключить его дважды.
						ТекСтрокаИсключения.Количество = ТекСтрокаИсключения.Количество - ЗначениеИсключения;
						
						// Добавим данные в таблицу учтенных объемов.
						ДобавитьСтрокуВТаблицуУчтенныхОбъемов(ТекСтрокаИсключения, ЗначениеИсключения);
						
					КонецЦикла;
					
					ТекСтрокаРасходаОДН.Количество = ТекКоличествоОДН;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РасходОДН = ТаблицаРасходаОДН.Итог("Количество");
			
		КонецЕсли;
		
		//////////////////////////////////////////////////
		
		// Заполним доп. данные для отображения на панели информации на форме документа.
		Если СтрокаВетки.ВидОбъекта = "Здание" И НЕ РасчетПоФормуле15 Тогда
			РасходПоОбщедомовымУслугам = РасходПоОбщедомовымУслугам + РасходОДН;
		КонецЕсли;
		РасходПоОбщедомовымПУ = РасходПоОбщедомовымПУ + СтрокаВетки.ПоказаниеСч;
		
		// Отнесем расход по общедомовым услугам к расходу по ИПУ.
		Если НЕ РасчетПоФормуле15 Тогда
			ОбщийРасходПоИПУ = ОбщийРасходПоИПУ + РасходОДН;
		КонецЕсли;
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Расход по ОПУ: " + СтрокаВетки.ПоказаниеСч);
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Расход по услугам общедомового счетчика: " + РасходОДН);
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Суммарный расход по ОПУ: " + РасходПоОбщедомовымПУ);
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Суммарный расход по ИПУ: " + ОбщийРасходПоИПУ);
		
		КоличествоРаспределения = 0;
		Если Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ И СтрокаВетки.ЕстьСчетчик Тогда
			
			// На данный момент решили, что если общедомовых показаний нет или они равны нулю,
			// а распределять отрицательный расход можно, то распределение будем производить.
			
			//Если СтрокаВетки.ПоказаниеСч <= 0 Тогда
			//	Возврат;
			//КонецЕсли;
			КоличествоРаспределения = СтрокаВетки.ПоказаниеСч - ОбщийРасходПоИПУ;
			
		ИначеЕсли СтрокаВетки.ЕстьСчетчик Или РасчетПоФормуле15 Тогда
			
			// Ранее, в случаях, когда счетчик не установлен, а формула №15 не используется,
			// происходило распределение ОДН. При этом объем УИН мог быть отрицательным, а объем к распределению
			// становился положительным, в результате было распределение ОДН, хотя счетчика нет, а формула №15 не используется.
			// Например:
			//   Объем УИН составил -100 куб.м., тогда КоличествоРаспределения = Макс(0 - (-100), 0) = Макс(100, 0) = 100.
			// Для решения этой проблемы добавлено новое условие: теперь распределение производится только если есть счетчик
			// или используется формула №15.
			
			// Если КПУ нет и не используется расчет по формуле 15, то количество распределения будет равно нулю.
			КоличествоРаспределения = Макс(СтрокаВетки.ПоказаниеСч - ОбщийРасходПоИПУ, 0);
			
		КонецЕсли;
		
		// Зафиксируем объект, по которому распределяется ОДН в отдельной табличной части
		// "Объекты с распределенным расходом ОДН". Это необходимо для корректного определения
		// списка л/с, которые участвовали в распределении ОДН.
		// Затем эта информация может быть использована в следующих периодах, когда
		// будет производится сторнирование нормативных начислений текущего периода.
		
		// ОСОБЕННОСТЬ:
		// Важно при определении факта распределения ОДН ориентироваться не только на расход,
		// но и на количество распределения.
		// Т.к. в некоторых случаях расход по КПУ может быть нулевой, но ОДН все равно распределяется,
		// например, когда разрешено распределение отрицательного ОДН.
		Если (СтрокаВетки.ВидОбъекта = "Здание" Или СтрокаВетки.ВидОбъекта = "Подъезд")
		   И (НЕ СтрокаВетки.ПоказаниеСч = 0 ИЛИ НЕ КоличествоРаспределения = 0) Тогда
			НоваяСтрокаОбъектаОДН = ОбъектыСРаспределеннымРасходомОДН.Добавить();
			НоваяСтрокаОбъектаОДН.ВидОбъекта = СтрокаВетки.ВидОбъекта;
			НоваяСтрокаОбъектаОДН.Объект     = СтрокаВетки.Объект;
		КонецЕсли;
		
		// Если в услуге установлена настройка "Ограничить распределяемый расход на ОДН нормативом
		// потребления", при этом на здание установлен норматив потребления по текущей услуге, то 
		// перед распределением выполняется ограничение распределяемого на л/с расхода ОДН.
		// В соответствии с изменениями п.44 постановления №354 от 06 мая 2011 г., описанными в 
		// постановлении №344 от 16 апреля 2013 г.
		Если НЕ РасчетПоФормуле15 Тогда
			
			Если СтрокаВетки.ВидОбъекта = "Здание" И Услуга.НастройкаОграниченияОДННормативом Тогда
				
				РазмерОграничения = СтрокаВетки.НормативОграниченияОДН;
				КоличествоРаспределения = ?(РазмерОграничения > 0, 
											Мин(КоличествоРаспределения, РазмерОграничения), 
											КоличествоРаспределения);
				
				// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
				ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Размер норматива ОДН для ограничения: " + РазмерОграничения);
				
			КонецЕсли;
			
			// Если в услуге установлена настройка "Ограничить распределяемый расход на ОДН
			// процентом от суммарного индивидуального расхода", то перед распределением
			// выполняется получение процента ограничения по услуге по данным регистра сведений
			// "Размеры процентов от индивидуального расхода для ограничения ОДН". По полученному
			// проценту рассчитывается ограничение распределяемого на л/с расхода ОДН как МИНИМУМ
			// из двух значений:
			// [Расчитанное ранее количество распределения] и [Расчитанное по проценту ограничения услуги].
			Если Услуга.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода Тогда
				
				// Попытка получения процента ограничения из кеша.
				Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПроцентОграниченияОДН") Тогда
					ПроцентОграниченияОДН = ДопПараметры.ПроцентОграниченияОДН;
				Иначе
					
					// Получение процента ограничения из настроек.
					ПроцентОграниченияОДН = ПолучитьПроцентОтИндивидуальногоРасходаДляОграниченияОДН(КонецМесяца(Дата), Организация, Услуга);
					
					// Определение структуры параметров, если это требуется для помещения параметра в кеш.
					Если Не ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
						ДопПараметры = Новый Структура;
					КонецЕсли;
					
					// Добавление процента ограничения ОДН в кеш.
					ДопПараметры.Вставить("ПроцентОграниченияОДН", ПроцентОграниченияОДН);
					
				КонецЕсли;
				
				РазмерОграничения = ПроцентОграниченияОДН * ОбщийРасходПоИПУ / 100;
				КоличествоРаспределения = ?(РазмерОграничения > 0, 
											Мин(КоличествоРаспределения, РазмерОграничения), 
											КоличествоРаспределения);
											
				// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
				ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Размер норматива ОДН для ограничения за счет процента от суммарного индивидуального расхода: " + РазмерОграничения);
				
			КонецЕсли;
			
		ИначеЕсли РасчетПоФормуле15 И СтрокаВетки.ВидОбъекта = "Здание" Тогда
			
			// При расчете по формуле 15 параметр КоличествоРаспределения уже содержит 
			// размер норматива потребления по зданию.
			
			ЖилаяНежилаяПлощадь = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Здание, "ПлощадьЖилыхНежилыхПомещений");
			
			// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
			ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №15. Исходный объем к распределению: " + КоличествоРаспределения);
			ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №15. Общая площадь всех жилых и нежилых помещений здания: " + ЖилаяНежилаяПлощадь);
			
			КоличествоРаспределения = ?(ЖилаяНежилаяПлощадь = 0, 0, КоличествоРаспределения / ЖилаяНежилаяПлощадь);
			
		КонецЕсли;
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		Если Не СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()
			 И Не СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708()
			 И Не СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708() Тогда
			ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Объем к распределению: " + КоличествоРаспределения);
		КонецЕсли;
		
		Если КоличествоРаспределения < 0 Тогда
			МассивДолей = МассивДолейОтрицательныйРасход;
		Иначе
			МассивДолей = МассивДолейПоложительныйРасход;
		КонецЕсли;
		
		Если НЕ СтрокаВетки.ВидОбъекта = "Помещение" Тогда // на нижестоящих уровнях нет коллективных приборов учета.
			
			// 1. При расчете по постановлению №1708, когда в МКД не установлен ОДПУ (формулы 2(3) и 2(5)), количество
			// распределения равно 0, но распределение выполнять нужно, так как индивидуальный объем и объем ОДН,
			// приходящийся на отдельное помещение, рассчитываются по формулам.
			// 2. При расчете по постановлению №1708, когда МКД оборудован ОДПУ и хотя бы одно помещение оборудовано ИПУ
			// (формулы 3(1) и 3(7)), количество распределения может быть равно 0, но распределение выполнять нужно,
			// так как для помещений не оборудованных ИПУ нужно рассчитать индивидуальные показания.
			// При этом на уровень подъездов переходим только если на уровне здания нет ОДПУ.
			Если КоличествоРаспределения = 0
				 И Не СтрокаЛС.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()
				 И Не (СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()
					   И СтрокаВетки.ЕстьСчетчик
					   И СтрокаВетки.ВидОбъекта = "Здание"
					   Или СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()
					   И СтрокаВетки.ВидОбъекта = "Подъезд") Тогда
				
				РаспределитьПропорционально(СтрокаВетки, ПараметрыОтбора, ВидТарифа, КоличествоТарифов, ДопПараметры);
				
			Иначе
				
				// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
				// Массив долей распределения, используемый для протоколирования расчетов.
				// Данный массив долей собирается в зависимости от формулы распределения.
				МассивДолейДляПротоколированияРасчетов = Новый Массив;
				
				// При определении доли лицевого счета необходимо добавить настройку, которая будет учитывать порядок включения
				// общего объема по нормативу в суммарный индивидуальный расход (ОбщийРасходПоИПУ).
				
				МассивРаспределения          = Новый Массив;
				МассивРаспределенияИндОбъема = Новый Массив;
				
				// Распределение ОДН по формулам отлично от распределения ОДН по настройкам услуги.
				// А именно, при распределении ОДН согласно формулам применяется следующее правило:
				// 1. Распределение ОДН по формуле 9 постановления 307 производится по настройкам услуги 
				//    (постановление не актуально, принято решение его не переделывать).
				// 2. Распределение ОДН по всем остальным формулам постановлений 354, 344 производится по предопределенным настройкам, заложенным в формулу.
				//    С учетом того, что в одном документе могут рассчитываться разные дома, для которых применяются разные формулы, 
				//    поэтому для текущего здания, по которому применяется какая-либо формула расчета:
				//    1) очищаются доли, определенные по настройкам услуги,
				//    2) заново определяются доли с учетом настроек формулы,
				//    3) произодится распределение согласно формуле.
				
				Если Услуга.ИспользоватьФормулу9 Тогда
					
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						МассивРаспределения.Добавить(?(ОбщийРасходПоИПУ = 0, 
													   0,
													   СтрокаЛС.Доля * КоличествоРаспределения / ОбщийРасходПоИПУ));
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						МассивДолейДляПротоколированияРасчетов.Добавить(СтрокаЛС.Доля);
						
					КонецЦикла;
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14() Тогда
					// Для текущего здания:
					// 1) Очищаем доли распределения по настройкам услуги.
					ОчиститьДолиРаспределенияПоказаний(ЛицевыеСчета);
					// 2) Определяем доли распределения по настройкам формулы 
					УстановитьДолиРаспределенияПоказаний(СтрокаВетки, Услуга, Истина);
					
					ОбщаяПлощадь        = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, "ПлощадьОбщая");
					ЖилаяНежилаяПлощадь = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, 
																									"ПлощадьЖилыхНежилыхПомещений");
					
					// 3) Производим распределение
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						
						// Формула №3 постановления №354 для определения объема индивидуального потребления.
						ИндивидуальныйОбъем = ?(ОбщаяПлощадь = 0, 
												0, 
												КоличествоРаспределения * СтрокаЛС.Доля / ОбщаяПлощадь);
						
						// формула №14 постановления №354 для определения доли ОДН.
						ОДН = ?(ЖилаяНежилаяПлощадь = 0,
								0, 
								КоличествоРаспределения * СтрокаЛС.Доля / ЖилаяНежилаяПлощадь - ИндивидуальныйОбъем);
						
						МассивРаспределенияИндОбъема.Добавить(ИндивидуальныйОбъем);
						МассивРаспределения.Добавить(ОДН);
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						МассивДолейДляПротоколированияРасчетов.Добавить(СтрокаЛС.Доля);
						
					КонецЦикла;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3,14. Общая площадь здания: " + ОбщаяПлощадь);
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3,14. Жилая, нежилая площадь здания: " + ЖилаяНежилаяПлощадь);
					
				ИначеЕсли РасчетПоФормуле15 Тогда
					// Для текущего здания:
					// 1) Очищаем доли распределения по настройкам услуги.
					ОчиститьДолиРаспределенияПоказаний(ЛицевыеСчета);
					МассивДолейПоложительныйРасход.Очистить();
					// 2) Определяем доли распределения по настройкам формулы 
					УстановитьДолиРаспределенияПоказаний(СтрокаВетки, Услуга, Истина);
					
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						МассивДолейПоложительныйРасход.Добавить(СтрокаЛС.Доля);
					КонецЦикла;
					
					// В качестве массива долей берем массив долей положительного расхода.
					МассивДолей = МассивДолейПоложительныйРасход;
					
					// 3) Производим распределение
					// По формуле 15 постановления №354: Vi = N x Sои x Si / Sоб,
					// где:
					// N - норматив потребления на общедомовые нужды в многоквартирном доме;
					// Sои - общая площадь помещений, входящих в состав общего имущества в многоквартирном доме;
					// Si - общая площадь i-го жилого помещения (квартиры) или нежилого помещения в многоквартирном доме;
					// Sоб - общая площадь всех жилых помещений (квартир) и нежилых помещений в многоквартирном доме.
					//
					// КоличествоРаспределения = N x Sои / Sоб
					// МассивДолей содержит доли лицевых счетов (Si).
					// 
					МассивРаспределения = Новый Массив(МассивДолей.Количество());
					
					ЖилаяНежилаяПлощадьПоДокументу = 0;
					Для ТекИндекс = 0 По МассивДолей.Количество() - 1 Цикл
						МассивРаспределения[ТекИндекс] = Окр(КоличествоРаспределения * МассивДолей[ТекИндекс], мТочностьОбъемаНачислений, 1);
						ЖилаяНежилаяПлощадьПоДокументу = ЖилаяНежилаяПлощадьПоДокументу + МассивДолей[ТекИндекс];
					КонецЦикла;
					
					Если ЖилаяНежилаяПлощадьПоДокументу = ЖилаяНежилаяПлощадь Тогда
						МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения * ЖилаяНежилаяПлощадь, МассивДолей, мТочностьОбъемаНачислений, Истина);
					КонецЕсли;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3Постановления344()
					  ИЛИ СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3_1Постановления344() Тогда
					
					// Для текущего здания:
					// 1) Очищаем доли распределения по настройкам услуги.
					ОчиститьДолиРаспределенияПоказаний(ЛицевыеСчета);
					МассивДолейПоложительныйРасход.Очистить();
					МассивДолейОтрицательныйРасход.Очистить();
					// 2) Определяем доли распределения по настройкам формулы.
					УстановитьДолиРаспределенияПоказаний(СтрокаВетки, Услуга, Истина);
					
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						МассивДолейПоложительныйРасход.Добавить(СтрокаЛС.Доля);
						МассивДолейОтрицательныйРасход.Добавить(СтрокаЛС.ДоляОтрицательныйРасход);
					КонецЦикла;
					
					Если КоличествоРаспределения < 0 Тогда
						МассивДолей = МассивДолейОтрицательныйРасход;
					Иначе
						МассивДолей = МассивДолейПоложительныйРасход;
					КонецЕсли;
					
					// 3) Производим распределение.
					МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708() Тогда
					
					ПлощадьМОП                       = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, "ПлощадьМестОбщегоПользования");
					ЖилаяНежилаяПлощадь              = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, 
																									"ПлощадьЖилыхНежилыхПомещений");
					ПлощадьСИндивидуальнымОтоплением = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, "ПлощадьСИндивидуальнымОтоплением");
					
					// Производим распределение.
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						
						СтруктураДопПараметров = Новый Структура;
						СтруктураДопПараметров.Вставить("Объект",        СтрокаЛС.ЛицевойСчет);
						СтруктураДопПараметров.Вставить("Услуга",        Услуга);
						СтруктураДопПараметров.Вставить("Организация",   Организация);
						СтруктураДопПараметров.Вставить("Период",        НачалоМесяца(Дата));
						СтруктураДопПараметров.Вставить("ДатаДокумента", КонецМесяца(Дата));
						НормаЗаМесяцНаЛС = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураДопПараметров);
						
						// Рассчитываем индивидуальный объем.
						Если СтрокаЛС.ИспользуетсяИндивидуальноеОтоплениеВПомещении Тогда
							СтрокаЛС.ПоказаниеСчЛС = 0;
						Иначе
							
							ЧислительИндивидуальныйОбъем = СтрокаЛС.Доля * НормаЗаМесяцНаЛС * (ЖилаяНежилаяПлощадь - ПлощадьСИндивидуальнымОтоплением);
							ЗнаменательИндивидуальныйОбъем = ЖилаяНежилаяПлощадь - ПлощадьСИндивидуальнымОтоплением + ПлощадьМОП;
							
							// Формула №2(5) постановления №1708 для определения объема индивидуального потребления.
							СтрокаЛС.ПоказаниеСчЛС = ?(ЗнаменательИндивидуальныйОбъем = 0, 0, УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ЧислительИндивидуальныйОбъем / ЗнаменательИндивидуальныйОбъем, мТочностьОбъемаНачислений));
							
						КонецЕсли;
						
						// Рассчитываем объем ОДН.
						
						// формула №2(3) постановления №354 для определения доли ОДН.
						ЧислительОДН = СтрокаЛС.Доля * ПлощадьМОП * НормаЗаМесяцНаЛС * (ЖилаяНежилаяПлощадь - ПлощадьСИндивидуальнымОтоплением);
						ЗнаменательОДН = ЖилаяНежилаяПлощадь * (ЖилаяНежилаяПлощадь - ПлощадьСИндивидуальнымОтоплением + ПлощадьМОП);
						
						ОДН = ?(ЗнаменательОДН = 0, 0, УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ЧислительОДН / ЗнаменательОДН, мТочностьОбъемаНачислений));
						
						МассивРаспределения.Добавить(ОДН);
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						МассивДолейДляПротоколированияРасчетов.Добавить(СтрокаЛС.Доля);
						
					КонецЦикла;
					
					МассивДолей = МассивДолейПоложительныйРасход;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №2(3),2(5). Жилая, нежилая площадь здания: " + ЖилаяНежилаяПлощадь);
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №2(3),2(5). Площадь МОП здания: " + ПлощадьМОП);
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №2(3),2(5). Площадь здания с индивидуальными источниками ТЭ: " + ПлощадьСИндивидуальнымОтоплением);
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708() Тогда
					
					ПлощадьМОП                       = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, "ПлощадьМестОбщегоПользования");
					ЖилаяНежилаяПлощадь              = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, 
																									"ПлощадьЖилыхНежилыхПомещений");
					ПлощадьСИндивидуальнымОтоплением = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, "ПлощадьСИндивидуальнымОтоплением");
					
					СуммарныйИндивидуальныйОбъем = 0;
					
					// Производим распределение индивидуальных показаний.
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						
						Если СтрокаЛС.ИспользуетсяИндивидуальноеОтоплениеВПомещении Тогда
							СтрокаЛС.ПоказаниеСчЛС = 0;
						Иначе
							
							ЧислительИндивидуальныйОбъем = СтрокаЛС.Доля * СтрокаВетки.ПоказаниеСч;
							ЗнаменательИндивидуальныйОбъем = ЖилаяНежилаяПлощадь - ПлощадьСИндивидуальнымОтоплением + ПлощадьМОП;
							
							// Формула №3(6) постановления №1708 для определения объема индивидуального потребления.
							СтрокаЛС.ПоказаниеСчЛС = ?(ЗнаменательИндивидуальныйОбъем = 0, 0, УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ЧислительИндивидуальныйОбъем / ЗнаменательИндивидуальныйОбъем, мТочностьОбъемаНачислений));
							
						КонецЕсли;
						
						// Колонка "ПоказаниеСчПоИПУ" используется при распределении отрицательного ОДН.
						СтрокаЛС.ПоказаниеСчПоИПУ = СтрокаЛС.ПоказаниеСчЛС;
						
						СуммарныйИндивидуальныйОбъем = СуммарныйИндивидуальныйОбъем + СтрокаЛС.ПоказаниеСчЛС;
						
					КонецЦикла;
					
					КоличествоРаспределения = СтрокаВетки.ПоказаниеСч - СуммарныйИндивидуальныйОбъем;
					
					Если КоличествоРаспределения < 0 Тогда
						МассивДолей = МассивДолейОтрицательныйРасход;
					Иначе
						МассивДолей = МассивДолейПоложительныйРасход;
					КонецЕсли;
					
					// Производим распределение ОДН.
					МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина, Истина, ЖилаяНежилаяПлощадь);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3,3(6). Жилая, нежилая площадь здания: " + ЖилаяНежилаяПлощадь);
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3,3(6). Площадь МОП здания: " + ПлощадьМОП);
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3,3(6). Площадь здания с индивидуальными источниками ТЭ: " + ПлощадьСИндивидуальнымОтоплением);
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708() Тогда
					
					ЖилаяНежилаяПлощадь = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, 
																									"ПлощадьЖилыхНежилыхПомещений");
					
					// Производим распределение индивидуальных показаний для помещений без ИПУ.
					
					СуммаОбъемовПоИПУ    = 0;
					ПлощадьПомещенийСИПУ = 0;
					
					ОпределитьСуммуОбъемовПоИПУИСуммуПлощадейПомещенийСИПУ(СтрокаВетки, СуммаОбъемовПоИПУ, ПлощадьПомещенийСИПУ);
					
					СуммаОбъемовБезИПУ = 0;
					
					СтруктураПоискаЛС = Новый Структура("ВидОбъекта, ЕстьСчетчик", "ЛицевойСчет", Ложь);
					
					// Если в услуге стоит настройка "При утрате прибора учета, выходе из строя или отключении на поверку",
					// то расчет по формуле 3(7) для помещений, соответствующих данной настройке, производить не будем. Для
					// них расчет был выполнен при распределении индивидуальных показаний.
					Если Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
						СтруктураПоискаЛС.Вставить("СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя", Ложь);
					КонецЕсли;
					
					ЛицевыеСчетаБезИПУ = СтрокаВетки.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
					Для Каждого СтрокаЛС Из ЛицевыеСчетаБезИПУ Цикл
						
						Если СтрокаЛС.ИспользуетсяИндивидуальноеОтоплениеВПомещении Тогда
							СтрокаЛС.ПоказаниеСчЛС = 0;
						Иначе
							// Формула №3(7) постановления №1708 для определения объема индивидуального потребления для помещений без ИПУ.
							СтрокаЛС.ПоказаниеСчЛС = ?(ПлощадьПомещенийСИПУ = 0, 
													0, 
													УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаЛС.Доля * СуммаОбъемовПоИПУ / ПлощадьПомещенийСИПУ, мТочностьОбъемаНачислений));
						КонецЕсли;
						
						// Колонка "ПоказаниеСчПоИПУ" используется при распределении отрицательного ОДН.
						СтрокаЛС.ПоказаниеСчПоИПУ = СтрокаЛС.ПоказаниеСчЛС;
						
						СуммаОбъемовБезИПУ = СуммаОбъемовБезИПУ + СтрокаЛС.ПоказаниеСчЛС;
						
					КонецЦикла;
					
					КоличествоРаспределения = СтрокаВетки.ПоказаниеСч - СуммаОбъемовПоИПУ - СуммаОбъемовБезИПУ;
					
					Если КоличествоРаспределения < 0 Тогда
						МассивДолей = МассивДолейОтрицательныйРасход;
					Иначе
						МассивДолей = МассивДолейПоложительныйРасход;
					КонецЕсли;
					
					// Производим распределение ОДН.
					МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина, Истина, ЖилаяНежилаяПлощадь);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3(1),3(7). Жилая, нежилая площадь здания: " + ЖилаяНежилаяПлощадь);
					
				ИначеЕсли СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3_3Постановления1708() Тогда
					
					ЖилаяНежилаяПлощадь = Справочники.КВП_Здания.ОпределитьОбщуюПлощадьПомещений(СтрокаВетки.Объект, 
																									"ПлощадьЖилыхНежилыхПомещений");
					
					// Производим распределение ОДН.
					МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина, Истина, ЖилаяНежилаяПлощадь);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Формула №3(3). Жилая, нежилая площадь здания: " + ЖилаяНежилаяПлощадь);
					
				Иначе
					МассивРаспределения = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					МассивДолейДляПротоколированияРасчетов = МассивДолей;
					
				КонецЕсли;
				
				ИмяКолонки = "КоличествоРаспределения" + СтрокаВетки.ВидОбъекта;
				
				// Заполним распределенные показания ОПУ по лицевым счетам.
				Если ЗначениеЗаполнено(МассивРаспределения) Тогда
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					// Определим суму долей распределения (знаменатель распределения)
					// для вывода в протокол расчетов пользователю.
					СуммаДолейДляПротоколирования = 0;
					Для Каждого ТекущаяДоляДляРаспределения Из МассивДолейДляПротоколированияРасчетов Цикл
						СуммаДолейДляПротоколирования = СуммаДолейДляПротоколирования + ТекущаяДоляДляРаспределения;
					КонецЦикла;
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Сумма коэффициентов распределения: " + СуммаДолейДляПротоколирования);
					
					Индекс = 0;
					
					Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
						
						Если СтрокаВетки.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14()
						   И МассивРаспределения[Индекс] + МассивРаспределенияИндОбъема[Индекс] > 0 Тогда
							
							СтрокаЛС.ПоказаниеСчЛС = МассивРаспределенияИндОбъема[Индекс];
							СтрокаЛС[ИмяКолонки]   = МассивРаспределения[Индекс];
							
						// Далее дублирование строки: СтрокаЛС[ИмяКолонки] = МассивРаспределения[Индекс];
						// сделано для увеличения быстродействия, чтобы не всегда получать ТекРасходЛСПоОбщедомовымУслугам.
						ИначеЕсли МассивРаспределения[Индекс] < 0 Тогда
							
							ТекРасходЛСПоОбщедомовымУслугам = 0;
							
							СтрокиРасходаОДН = ТаблицаРасходаОДН.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаЛС.Объект));
							Если СтрокиРасходаОДН.Количество() > 0 Тогда
								
								Для Каждого ТекСтрокаРасходаОДН Из СтрокиРасходаОДН Цикл
									ТекРасходЛСПоОбщедомовымУслугам = ТекРасходЛСПоОбщедомовымУслугам + ТекСтрокаРасходаОДН.Количество;
								КонецЦикла;
								
							КонецЕсли;
							
							// Если сумма распределения отрицательная и разница показаний ИПУ и распределения меньше 0.
							Если Макс(СтрокаЛС.ПоказаниеСчПоИПУ + ТекРасходЛСПоОбщедомовымУслугам, 0) + МассивРаспределения[Индекс] < 0
								И Не УПЖКХ_ПараметрыУчетаПереопределяемый.ВсегдаРаспределятьОтрицательныйОбъемОДНПолностью() Тогда
								// Берем максимум индивидуального показания, так как оно может быть отрицательным.
								СтрокаЛС[ИмяКолонки] = - Макс(СтрокаЛС.ПоказаниеСчПоИПУ + ТекРасходЛСПоОбщедомовымУслугам, 0);
							Иначе
								СтрокаЛС[ИмяКолонки] = МассивРаспределения[Индекс];
							КонецЕсли;
							
						Иначе
							СтрокаЛС[ИмяКолонки] = МассивРаспределения[Индекс];
						КонецЕсли;
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						// Для предотвращения потенциальных ошибок при протоколировании добавим проверку
						// на наличие доли для текущего индекса строки начисления.
						Если Индекс < МассивДолей.Количество() Тогда
							ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Объем распределения на " + СтрокаЛС.Объект + ": " + УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокаЛС[ИмяКолонки]) + "; коэффициент распределения: " + МассивДолей[Индекс] + "/" + СуммаДолейДляПротоколирования);
						КонецЕсли;
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПропорционально()

// Распределяет показания ПУ по лицевым счетам в зависимости от доли.
//
// Параметры
//  ДеревоПоказанийПУ  - дерево показаний ПУ.
//
Процедура РаспределитьПоказанияПоЛицевымСчетам(ДеревоПоказанийПУ, Услуга, ВидТарифа, КоличествоТарифов)

	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "КоличествоРаспределенияПомещение",       "Число");
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "КоличествоРаспределенияПодъезд",         "Число");
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "КоличествоРаспределенияЗдание",          "Число");
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "ПоказаниеСчЛС",                          "Число");
	
	ПараметрыОтбора = Новый Структура("ВидОбъекта", "ЛицевойСчет");
	
	РаспределитьПропорционально(ДеревоПоказанийПУ, ПараметрыОтбора, ВидТарифа, КоличествоТарифов);
	
КонецПроцедуры // РаспределитьПоказанияПоЛицевымСчетам()

// Функция возвращает результат запроса, содержащий расход по услугам коллективного прибора учета.
//
Функция ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета(СписокОбъектов, ВидТарифа, КоличествоТарифов)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      Услуга);
	СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Ложь);
	
	// Используется в запросе для получения коэффициентов услуг-баз расчета.
	// Коэффициент используется для перевода объема потребления услуг-баз расчета
	// в единицы измерения общедомовой услуги.
	ТаблицаУслугОбщедомовогоСчетчика = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров);
	
	СписокУслуг = ТаблицаУслугОбщедомовогоСчетчика.ВыгрузитьКолонку("Услуга");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",      НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Дата",              Дата);
	Запрос.УстановитьПараметр("СписокОбъектов",    СписокОбъектов);
	Запрос.УстановитьПараметр("СписокУслуг",       СписокУслуг);
	Запрос.УстановитьПараметр("ВидТарифа",         ВидТарифа);
	Запрос.УстановитьПараметр("КоличествоТарифов", КоличествоТарифов);
	Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
	Запрос.УстановитьПараметр("ТаблицаУслугОбщедомовогоСчетчика", ТаблицаУслугОбщедомовогоСчетчика);
	
	Если СписокУслуг.Количество() = 0 Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ТаблицаРезультат.Колонки.Добавить("ВидТарифа",   Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		ТаблицаРезультат.Колонки.Добавить("Тарифность",  Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаРезультат.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		
		Возврат ТаблицаРезультат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслугОбщедомовогоСчетчика.Услуга КАК Услуга,
	|	ТаблицаУслугОбщедомовогоСчетчика.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ втТаблицаУслугОбщедомовогоСчетчика
	|ИЗ
	|	&ТаблицаУслугОбщедомовогоСчетчика КАК ТаблицаУслугОбщедомовогоСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА УПЖКХ_НачисленияОбороты.Количество / &КоличествоТарифов * втТаблицаУслугОбщедомовогоСчетчика.Коэффициент
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.Количество * втТаблицаУслугОбщедомовогоСчетчика.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тарифность КАК Тарифность,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|		СУММА(ВЫБОР
	|				КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|				ИНАЧЕ УПЖКХ_НачисленияОбороты.Количество
	|			КОНЕЦ) КАК Количество,
	|		УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|		МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тарифность) КАК Тарифность,
	|		УПЖКХ_НачисленияОбороты.Услуга КАК Услуга
	|	ИЗ
	|		РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_НачисленияОбороты
	|	ГДЕ
	|		УПЖКХ_НачисленияОбороты.Период >= &НачалоМесяца
	|		И УПЖКХ_НачисленияОбороты.Период <= &Дата
	|		И УПЖКХ_НачисленияОбороты.ЛицевойСчет В(&СписокОбъектов)
	|		И УПЖКХ_НачисленияОбороты.Услуга В(&СписокУслуг)
	|		И УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|		И НЕ УПЖКХ_НачисленияОбороты.Регистратор = &ТекущийДокумент
	|		И &УсловиеНаВидНачисления
	|		И &УсловиеНаТариф
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|		УПЖКХ_НачисленияОбороты.ВидТарифа,
	|		УПЖКХ_НачисленияОбороты.Услуга) КАК УПЖКХ_НачисленияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслугОбщедомовогоСчетчика КАК втТаблицаУслугОбщедомовогоСчетчика
	|		ПО УПЖКХ_НачисленияОбороты.Услуга = втТаблицаУслугОбщедомовогоСчетчика.Услуга";
	
	Если НЕ ВидТарифа = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеНаТариф", " И (УПЖКХ_НачисленияОбороты.ВидТарифа = &ВидТарифа 
		                                         |	ИЛИ УПЖКХ_НачисленияОбороты.ВидТарифа= ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеНаТариф", "");
		Запрос.УстановитьПараметр("КоличествоТарифов", 1);
	КонецЕсли;
	
	УчитыватьНорму = (Услуга.СоставСуммарногоРасходаИПУДляРаспределения = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу
						ИЛИ Услуга.СоставСуммарногоРасходаИПУДляРаспределения = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему);
	
	УчитыватьСреднее = (Услуга.СоставСуммарногоРасходаИПУДляРаспределения = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему);
	
	// Описание логики получения данных по начислениям услуг-баз:
	// 1. Если учитываем норму, то берем начисления при отсутствии ИПУ или показаний ИПУ только по нормативу.
	// 2. Если, при этом учитываем среднее, то берем еще начисления при отсутствии ИПУ или показаний ИПУ по среднему.
	// 3. Также берем сторно начислений при отсутствии показаний ИПУ в зависимости от настроек услуги:
	//    3.1. Если учитываем норму, то берем корректировки с видом тарифа "Общий",
	//    3.2. Если учитываем среднее, то берем корректировки с видом тарифа, отличным от "Общий".
	//
	// ОСОБЕННОСТЬ:
	// Для начисления по услуге общедомового ПУ не учитываем начисление по повышающему коэффициенту,
	// так как считаем, что оно не участвует в распределении ОДН.
	
	// Данное условие использует оператор ИЛИ, поэтому весь текст
	// условия должен быть заключен в операторы скобок.
	УсловиеНаВидНачисления = "(УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)";
	Если УчитыватьНорму Или УчитыватьСреднее Тогда
		
		УсловиеНаВидНачисления = УсловиеНаВидНачисления + "
								 |	ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
								 |	ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
								 |	ИЛИ (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
								 |		И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))";
		
		Если УчитыватьСреднее Тогда
			УсловиеНаВидНачисления = УсловиеНаВидНачисления + "
									 |	ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
									 |	ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
									 |	ИЛИ (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
									 |		И НЕ УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))";
		КонецЕсли;
		
	КонецЕсли;
	// Закрывающая условие скобка.
	УсловиеНаВидНачисления = УсловиеНаВидНачисления + ")";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаВидНачисления", УсловиеНаВидНачисления);
	
	ТаблицаРасходаПоУслугамКПУ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРасходаПоУслугамКПУ;
	
КонецФункции // ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета()

// Возвращает суммарный расход по услугам коллективного прибора учета
//
Функция ПолучитьРасходПоУслугамКоллективногоПрибораУчета(СписокОбъектов, ВидТарифа, КоличествоТарифов)
	
	КоличествоРасхода = 0;
	
	Результат = ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета(СписокОбъектов, ВидТарифа, КоличествоТарифов);
	Если Результат.Количество() > 0 Тогда
		КоличествоРасхода = Результат.Итог("Количество");
	КонецЕсли;
	
	Возврат КоличествоРасхода;
	
КонецФункции // ПолучитьРасходПоУслугамКоллективногоПрибораУчета()

// Дополняет таблицу показаний из табличной части документа показаниями
// услуг-баз, если распределения на услуги-базы общедомовых услуг не делается.
Процедура ДополнитьТаблицуПоказаниямиБазовыхУслуг(ПоказанияВТабличнойЧасти)
	
	ТаблицаПУ = ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета(
					УслугиПоПоказаниямПУ.ВыгрузитьКолонку("ЛицевойСчет"), Неопределено, 1);
	
	Для Каждого ТекСтрока Из ТаблицаПУ Цикл
		НайденныеСтроки = ПоказанияВТабличнойЧасти.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекСтрока.ЛицевойСчет));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаЛС = НайденныеСтроки[0];
			СтрокаЛС.ПоказаниеСчЛС = СтрокаЛС.ПоказаниеСчЛС + ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доли для распределения показаний по лицевым счетам в зависимости от способа распределения.
//
// Параметры
//  ТаблицаЛС                             - таблица лицевых счетов.
//  ДеревоПоказанийПУ                     - может быть деревом показаний ПУ и строкой дерева показаний ПУ.
//  РасчетПоФиксированнымНастройкамФормул - определяет как производить расчет.
//
Процедура УстановитьДолиРаспределенияПоказаний(ДеревоПоказанийПУ, ТекУслуга, РасчетПоФиксированнымНастройкамФормул = Ложь)
	
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "Доля",                    "Число");
	ДобавитьКолонкуВОбъект(ДеревоПоказанийПУ, "ДоляОтрицательныйРасход", "Число");
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	ЛицевыеСчета        = Новый Массив;
	
	// по настройкам услуги:
	СпособРаспределенияПоказанийНаЛицевыеСчета = ТекУслуга.СпособРаспределенияПоказанийНаЛицевыеСчета;
	СпособРаспределенияУслугиПоСчетчику        = ТекУслуга.СпособРаспределенияУслугиПоСчетчику;
	ВидПлощади = ТекУслуга.ВидПлощади;
	
	// Выгрузим из табличной части строки начислений, но без сторнировок,
	// так как сторнировки не определяют расчет начислений в текущем месяце.
	СтрокиНачисленийБезСторно = УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("Сторно, Зависимая", Ложь, Ложь));
	ТаблицаПоказаний          = УслугиПоПоказаниямПУ.Выгрузить(СтрокиНачисленийБезСторно);
	
	Если РасчетПоФиксированнымНастройкамФормул Тогда
		
		// По фиксированным настройкам для формул:
		// Для формул 3 и 3(1) постановления 344 (а также формул 3 и 14 постановления 354) 
		// не используем настройку услуги "Распределять на лицевые счета":
		// - для формул 3 и 14 всегда распределяем на л/с без ИПУ;
		// - для формулы 3     всегда распределяем на л/с без ИПУ;
		// - для формулы 3(1)  всегда распределяем на л/с с ИПУ.
		// При этом для формул игнорируем настройку "при отсутствии показаний считать, что счетчик не установлен".
		
		Если ДеревоПоказанийПУ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3Постановления344()
		 ИЛИ ДеревоПоказанийПУ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14() Тогда
			
			СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ;
			
		ИначеЕсли ДеревоПоказанийПУ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3_1Постановления344() Тогда
			
			СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ;
			
		ИначеЕсли ДеревоПоказанийПУ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15() Тогда
			
			СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета;
			
		КонецЕсли;
		
		// А также для всех вышеописанных формул распределение выполняется пропорционально размеру общей площади.
		СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади;
		ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь;
		
	КонецЕсли;
	
	// Определим структуру поиска лицевых счетов.
	СтруктураПоискаЛС = Новый Структура("ВидОбъекта", "ЛицевойСчет");
	
	Если СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета Тогда
		
		ЛицевыеСчета = ДеревоПоказанийПУ.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
		
		Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
			Если СписокЛицевыхСчетов.НайтиПоЗначению(СтрокаЛС.Объект) = Неопределено Тогда
				СписокЛицевыхСчетов.Добавить(СтрокаЛС.Объект);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ Тогда
			
			// Получим список л/с в зависимости от установленных настроек.
			Если Не (ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен И НЕ РасчетПоФиксированнымНастройкамФормул) Тогда
				
				// Если счетчик установлен, и выключена настройка, когда при отсутствии показаний считается, 
				// что счетчика нет, тогда при получении списка л/с берем только те счета
				// у которых в расчетном периоде были отключенные счетчики, и затем исключаем
				// л/с, у которых хотя бы один день в расчетном периоде счетчик действовал.
				
				СтруктураПоискаЛС.Вставить("ЕстьСчетчик", Ложь);
				врЛицевыеСчета = ДеревоПоказанийПУ.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
				
				// Для исключения лицевых счетов с действовавшим в рассчетном периоде счетчиком,
				// получим массив л/с, с действующими в расчетном периоде счетчиками.
				СтруктураПоискаЛС.Вставить("ЕстьСчетчик", Истина);
				ЛицевыеСчетаСПУ = ДеревоПоказанийПУ.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
				МассивЛицевыхСчетовСПУ = Новый Массив;
				Для Каждого СтрокаЛС Из ЛицевыеСчетаСПУ Цикл
					МассивЛицевыхСчетовСПУ.Добавить(СтрокаЛС.ЛицевойСчет);
				КонецЦикла;
				
				// Проверяем, есть ли в списке лицевых счетов без приборов учета,
				// лицевые счета, по которым в отчетном периоде была информация о наличии прибора учета.
				
				ЛицевыеСчета = Новый Массив;
				
				Для Каждого врСтрокаЛС Из врЛицевыеСчета Цикл
					
					Если МассивЛицевыхСчетовСПУ.Найти(врСтрокаЛС.ЛицевойСчет) = Неопределено Тогда
						ЛицевыеСчета.Добавить(врСтрокаЛС);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				// Если счетчик установлен, но нет показаний, и считается, что счетчика нет,
				// то при получении списка л/с берем все счета, а затем исключаем из полученного списка
				// лицевые счета, по которым в расчетном периоде были установленные счетчики
				// и представлены показания.
				врЛицевыеСчета = ДеревоПоказанийПУ.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
				
				// Получим список л/с с установленными счетчиками и представленныим показаниями.
				МассивЛицевыхСчетовСПУиПоказаниями = Новый Массив;
				
				Для Каждого СтрокаЛС Из ТаблицаПоказаний Цикл
					
					Если СтрокаЛС.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания Тогда
						МассивЛицевыхСчетовСПУиПоказаниями.Добавить(СтрокаЛС.ЛицевойСчет);
					КонецЕсли;
					
				КонецЦикла;
				
				// Исключим из итогового списка л/с со счетчиками и показаниями по ним.
				ЛицевыеСчета = Новый Массив;
				
				Для Каждого врСтрокаЛС Из врЛицевыеСчета Цикл
					
					Если МассивЛицевыхСчетовСПУиПоказаниями.Найти(врСтрокаЛС.ЛицевойСчет) = Неопределено Тогда
						ЛицевыеСчета.Добавить(врСтрокаЛС);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ Тогда
			
			СтруктураПоискаЛС.Вставить("ЕстьСчетчик", Истина);
			
			// Выбор лицевых счетов с индивидуальными приборами учета.
			ЛицевыеСчета = ДеревоПоказанийПУ.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
			
		КонецЕсли;
		
		Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
			Если СписокЛицевыхСчетов.НайтиПоЗначению(СтрокаЛС.Объект) = Неопределено Тогда
				СписокЛицевыхСчетов.Добавить(СтрокаЛС.Объект);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ ЛицевыеСчетаИзСправочника
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В (&СписокЛицевыхСчетов)";
	Запрос.Выполнить();
	
	// Дополним запрос временной таблицей, в которой будут содержаться данные о 
	// количестве проживающих и зарегистрированных жильцов.
	ДополнитьЗапросКоличествомЖильцов(Запрос, КонецМесяца(Дата), СписокЛицевыхСчетов);
	
	// Дополним запрос временной таблицей, в которой будут содержаться данные о количествах дней
	// действия лицевых счетов в месяце начисления. Предусмотрено это для тех ситуаций когда
	// требуется расчет показаний с ОПУ разнести по всем ЛС.
	ДополнитьЗапросКоличествомДнейДействияЛСВМесяце(Запрос, Дата, СписокЛицевыхСчетов);
	
	// Дополним запрос временной таблицей, в которой будут содержаться данные о долях лицевых счетов
	// с учетом периода действия услуги на них.
	ДополнитьЗапросДолямиЛицевыхСчетовСУчетомПериодовДействияУслуги(Запрос, Дата, ТаблицаПоказаний, ТекУслуга, СписокЛицевыхСчетов);
	
	// Дополним показания в табличной части показаниями базовых услуг, если используются
	// услуги общедомового учета, при этом распределения на услугу-базу расчета нет.
	ДополнитьТаблицуПоказаниямиБазовыхУслуг(ТаблицаПоказаний);
	
	ТаблицаПоказаний.Свернуть("ЛицевойСчет, ВидТарифа, СостояниеПУ, Услуга, ТипРасчета, ФормулаРасчета", "ПоказаниеСчЛС");
	
	Запрос.УстановитьПараметр("ТаблицаПоказаний", ТаблицаПоказаний);
	Запрос.УстановитьПараметр("Дата",             КонецМесяца(Дата));
	
	////////////////////////////////////////////////////////////////
	// УСТАНОВКА ОСНОВНОЙ ДОЛИ
	
	Если СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади Тогда
		
		Запрос.УстановитьПараметр("ВидПлощади",      ВидПлощади);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	втДолиЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	ПлощадьПомещения.Площадь * втДолиЛС.ДоляЛС КАК Доля
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	втДолиЛС КАК втДолиЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, ВидПлощади = &ВидПлощади) КАК ПлощадьПомещения
		|		ПО втДолиЛС.ЛицевойСчет.Адрес = ПлощадьПомещения.Объект";
		
	ИначеЕсли СпособРаспределенияУслугиПоСчетчику = 
		Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов Тогда
		
		// При данном способе распределения имеется одна "тонкость":
		// закрытые лицевые счета будут попадать в табличную часть, но распределения для них производиться не будет,
		// т.к. при закрытии ЛС мы выписываем всех жильцов. Соответственно, если дата закрытия ЛС меньше,
		// чем дата начисления услуги, то проживающих/зарегистрированных на ЛС не будет.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
		|	" + ?(ТекУслуга.ВидыЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Зарегистрированные, "
		|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) * врТаблицаКоличеств.КоличествоЗарегистрированных", "
		|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) * врТаблицаКоличеств.КоличествоПроживающих") + " КАК Доля
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛицевыеСчетаИзСправочника КАК СпЛицевыхСчетов
		|		ПО врТаблицаКоличеств.ЛицевойСчет = СпЛицевыхСчетов.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодовДействияЛС КАК втПериодовДействияЛС
		|		ПО врТаблицаКоличеств.ЛицевойСчет = втПериодовДействияЛС.ЛицевойСчет";
		
	ИначеЕсли СпособРаспределенияУслугиПоСчетчику = 
		Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуПомещенийВКвартире Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.Комната) = 0
		|			ТОГДА ВЫБОР
		|					КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) = 0
		|						ТОГДА СпЛицевыхСчетов.Помещение.КоличествоКомнат
		|					ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка)
		|				КОНЕЦ
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.Комната)
		|	КОНЕЦ КАК Доля
		|ПОМЕСТИТЬ врТаблЛицевыхСчетов
		|ИЗ
		|	ЛицевыеСчетаИзСправочника КАК СпЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(&Дата, ) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты
		|		ПО (УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.ЛицевойСчет = СпЛицевыхСчетов.ЛицевойСчет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|		ПО СпЛицевыхСчетов.Помещение = УПЖКХ_Помещения.Родитель
		|
		|СГРУППИРОВАТЬ ПО
		|	СпЛицевыхСчетов.ЛицевойСчет,
		|	СпЛицевыхСчетов.Помещение.КоличествоКомнат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблЛицевыхСчетов.ЛицевойСчет,
		|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) * врТаблЛицевыхСчетов.Доля КАК Доля
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	врТаблЛицевыхСчетов КАК врТаблЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодовДействияЛС КАК втПериодовДействияЛС
		|		ПО врТаблЛицевыхСчетов.ЛицевойСчет = втПериодовДействияЛС.ЛицевойСчет";
		
	ИначеЕсли СпособРаспределенияУслугиПоСчетчику = 
		Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПоказаний.ЛицевойСчет,
		|	ТаблицаПоказаний.ВидТарифа,
		|	ТаблицаПоказаний.ПоказаниеСчЛС КАК Количество
		|ПОМЕСТИТЬ ТаблицаПоказаний
		|ИЗ
		|	&ТаблицаПоказаний КАК ТаблицаПоказаний
		|ГДЕ
		|	ТаблицаПоказаний.ЛицевойСчет В(&СписокЛицевыхСчетов)
		|	И &ОграничениеТиповРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоказаний.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ТаблицаПоказаний.Количество) КАК Доля
		|ИЗ
		|	ТаблицаПоказаний КАК ТаблицаПоказаний
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПоказаний.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПоказаний.Количество) > 0";
		
	Иначе // если ничего не указано, всем поровну
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) КАК Доля
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	ЛицевыеСчетаИзСправочника КАК СпЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодовДействияЛС КАК втПериодовДействияЛС
		|		ПО СпЛицевыхСчетов.ЛицевойСчет = втПериодовДействияЛС.ЛицевойСчет";
		
	КонецЕсли;
	
	Если НЕ СпособРаспределенияУслугиПоСчетчику = 
	     Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге Тогда
		
		Запрос.Текст = Запрос.Текст + ";
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаПоказаний.ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаПоказаний
		|ИЗ
		|	&ТаблицаПоказаний КАК ТаблицаПоказаний
		|ГДЕ
		|	ТаблицаПоказаний.ЛицевойСчет В(&СписокЛицевыхСчетов)
		|	И &ОграничениеТиповРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Доля
		|ИЗ
		|	ТаблицаПоказаний КАК ТаблицаПоказаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыхСчетов КАК втЛицевыхСчетов
		|		ПО ТаблицаПоказаний.ЛицевойСчет = втЛицевыхСчетов.ЛицевойСчет";
		
	КонецЕсли;
	
	СтрокаЗамены = "ИСТИНА";
	
	Если СпособРаспределенияПоказанийНаЛицевыеСчета =
						Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ Тогда
		
		СтрокаЗамены = "НЕ ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
		Если ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен И НЕ РасчетПоФиксированнымНастройкамФормул Тогда
			СтрокаЗамены = "ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)";
		КонецЕсли;
		
	ИначеЕсли СпособРаспределенияПоказанийНаЛицевыеСчета =
						Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ Тогда
		
		СтрокаЗамены = "ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
		Если ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен И НЕ РасчетПоФиксированнымНастройкамФормул Тогда
			СтрокаЗамены = СтрокаЗамены + "
			| ИЛИ ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОграничениеТиповРасчета", СтрокаЗамены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаЛС = ДеревоПоказанийПУ.Строки.Найти(Выборка.ЛицевойСчет, "Объект", Истина);
			
			Если НЕ СтрокаЛС = Неопределено Тогда
				
				СтрокаПомещения = СтрокаЛС.Родитель;
				СтрокаПодъезда  = СтрокаПомещения.Родитель;
				СтрокаЗдания    = СтрокаПодъезда.Родитель;
				
				СтрокаЛС.Доля        = СтрокаЛС.Доля        + Выборка.Доля;
				СтрокаПомещения.Доля = СтрокаПомещения.Доля + Выборка.Доля;
				СтрокаПодъезда.Доля  = СтрокаПодъезда.Доля  + Выборка.Доля;
				СтрокаЗдания.Доля    = СтрокаЗдания.Доля    + Выборка.Доля;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	// УСТАНОВКА ДОЛИ ДЛЯ ОТРИЦАТЕЛЬНЫХ ПОКАЗАНИЙ
	
	Если ТекУслуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ Тогда
		
		Если НЕ СпособРаспределенияУслугиПоСчетчику = 
				Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге Тогда
			// Очистим временную таблицу лицевых счетов.
			Запрос.Текст = "УНИЧТОЖИТЬ втЛицевыхСчетов";
			Запрос.Выполнить();
		КонецЕсли;
		
		// Очистим временную таблицу показаний.
		Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаПоказаний";
		Запрос.Выполнить();
		
		Если ТекУслуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = 
			Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади Тогда
			
			Запрос.УстановитьПараметр("ВидПлощади",      ТекУслуга.ВидПлощадиРаспределенияОтрицательныхПоказаний);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втДолиЛС.ЛицевойСчет,
			|	втДолиЛС.ВидПомещения,
			|	втДолиЛС.ДоляЛС
			|ПОМЕСТИТЬ втДолиЛССОтбором
			|ИЗ
			|	втДолиЛС КАК втДолиЛС
			|ГДЕ
			|	&УсловиеНаЖилыеПомещения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДолиЛССОтбором.ЛицевойСчет КАК ЛицевойСчет,
			|	ПлощадьПомещения.Площадь * втДолиЛССОтбором.ДоляЛС КАК Доля
			|ПОМЕСТИТЬ втЛицевыхСчетов
			|ИЗ
			|	втДолиЛССОтбором КАК втДолиЛССОтбором
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, ВидПлощади = &ВидПлощади) КАК ПлощадьПомещения
			|		ПО втДолиЛССОтбором.ЛицевойСчет.Адрес = ПлощадьПомещения.Объект";
			
			ИмяТаблицыДляУсловияОтбора = "втДолиЛС";
			
		ИначеЕсли ТекУслуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = 
			Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов Тогда
			
			ТипРаспред = Перечисления.УПЖКХ_ВидыЖильцов.Зарегистрированные;
			
			// При данном способе распределения имеется одна "тонкость":
			// закрытые лицевые счета будут попадать в табличную часть, но распределения для них производиться не будет,
			// т.к. при закрытии ЛС мы выписываем всех жильцов. Соответственно, если дата закрытия ЛС меньше,
			// чем дата начисления услуги, то проживающих/зарегистрированных на ЛС не будет.
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СпЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
			|	" + ?(ТекУслуга.ВидыЖильцовРаспределенияОтрицательныхПоказаний = ТипРаспред, "
			|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) * врТаблицаКоличеств.КоличествоЗарегистрированных", "
			|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) * врТаблицаКоличеств.КоличествоПроживающих") + " КАК Доля
			|ПОМЕСТИТЬ втЛицевыхСчетов
			|ИЗ
			|	врТаблицаКоличеств КАК врТаблицаКоличеств
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛицевыеСчетаИзСправочника КАК СпЛицевыхСчетов
			|		ПО врТаблицаКоличеств.ЛицевойСчет = СпЛицевыхСчетов.ЛицевойСчет
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодовДействияЛС КАК втПериодовДействияЛС
			|		ПО врТаблицаКоличеств.ЛицевойСчет = втПериодовДействияЛС.ЛицевойСчет
			|ГДЕ
			|	&УсловиеНаЖилыеПомещения";
			
			ИмяТаблицыДляУсловияОтбора = "СпЛицевыхСчетов";
			
		Иначе // если ничего не указано, всем поровну
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
			|	ЕСТЬNULL(втПериодовДействияЛС.ДоляПоДням, 1) КАК Доля
			|ПОМЕСТИТЬ втЛицевыхСчетов
			|ИЗ
			|	ЛицевыеСчетаИзСправочника КАК СпЛицевыхСчетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодовДействияЛС КАК втПериодовДействияЛС
			|		ПО СпЛицевыхСчетов.ЛицевойСчет = втПериодовДействияЛС.ЛицевойСчет
			|ГДЕ
			|	&УсловиеНаЖилыеПомещения";
			
			ИмяТаблицыДляУсловияОтбора = "СпЛицевыхСчетов";
			
		КонецЕсли;
		
		// Если установлено распределение отрицательного расхода ОДН только по жилым помещениям,
		// то объем образовавшейся экономии будет распределяться только между жилыми помещениями
		// в соответствии с п.47 постановления №354 от 06 мая 2011 г.
		УсловиеНаЖилыеПомещения = "ИСТИНА";
		Если ТекУслуга.РаспределятьТолькоНаЖилыеПомещения Тогда
			
			// Получим список видов помещений, являющихся жилыми.
			Запрос.УстановитьПараметр("СпВидовЖилыхПомещений", Справочники.УПЖКХ_ВидыПомещений.ПолучитьСписокВидовПомещений(Истина));
			УсловиеНаЖилыеПомещения = ИмяТаблицыДляУсловияОтбора + ".ВидПомещения В(&СпВидовЖилыхПомещений)";
			
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЖилыеПомещения", УсловиеНаЖилыеПомещения);
		
		Запрос.Текст = Запрос.Текст + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаПоказаний.ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаПоказаний
		|ИЗ
		|	&ТаблицаПоказаний КАК ТаблицаПоказаний
		|ГДЕ
		|	ТаблицаПоказаний.ЛицевойСчет В(&СписокЛицевыхСчетов)
		|	И &ОграничениеТиповРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Доля
		|ИЗ
		|	ТаблицаПоказаний КАК ТаблицаПоказаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыхСчетов КАК втЛицевыхСчетов
		|		ПО ТаблицаПоказаний.ЛицевойСчет = втЛицевыхСчетов.ЛицевойСчет";
		
		СтрокаЗамены = "ИСТИНА";
		
		Если СпособРаспределенияПоказанийНаЛицевыеСчета =
							Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ Тогда
			
			СтрокаЗамены = "НЕ ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
			Если ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен И НЕ РасчетПоФиксированнымНастройкамФормул Тогда
				СтрокаЗамены = "ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)";
			КонецЕсли;
			
		ИначеЕсли СпособРаспределенияПоказанийНаЛицевыеСчета =
							Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ Тогда
			
			СтрокаЗамены = "ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
			Если ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен И НЕ РасчетПоФиксированнымНастройкамФормул Тогда
				СтрокаЗамены = СтрокаЗамены + "
				| ИЛИ ТаблицаПоказаний.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОграничениеТиповРасчета", СтрокаЗамены);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаЛС = ДеревоПоказанийПУ.Строки.Найти(Выборка.ЛицевойСчет, "Объект", Истина);
				
				Если НЕ СтрокаЛС = Неопределено Тогда
					
					СтрокаПомещения = СтрокаЛС.Родитель;
					СтрокаПодъезда  = СтрокаПомещения.Родитель;
					СтрокаЗдания    = СтрокаПодъезда.Родитель;
					
					СтрокаЛС.ДоляОтрицательныйРасход        = СтрокаЛС.ДоляОтрицательныйРасход        + Выборка.Доля;
					СтрокаПомещения.ДоляОтрицательныйРасход = СтрокаПомещения.ДоляОтрицательныйРасход + Выборка.Доля;
					СтрокаПодъезда.ДоляОтрицательныйРасход  = СтрокаПодъезда.ДоляОтрицательныйРасход  + Выборка.Доля;
					СтрокаЗдания.ДоляОтрицательныйРасход    = СтрокаЗдания.ДоляОтрицательныйРасход    + Выборка.Доля;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьДолиРаспределенияПоказаний()

// Процедура добавляет менеджер временных таблиц к запросу.
// Во временной таблице содержится количества дней действия лицевого счета в периоде.
// 
Процедура ДополнитьЗапросКоличествомДнейДействияЛСВМесяце(Запрос, Дата, СписокЛС)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ЛицевыеСчета.Действует
	|			ТОГДА (РАЗНОСТЬДАТ(ЛицевыеСчета.Период, КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), ДЕНЬ) + 1) / ДЕНЬ(КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ))
	|		ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ), ЛицевыеСчета.Период, ДЕНЬ) / ДЕНЬ(КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ))
	|	КОНЕЦ КАК ДоляПоДням
	|ПОМЕСТИТЬ втПериодовДействияЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В (&СписокЛС)) КАК ЛицевыеСчета
	|ГДЕ
	|	ЛицевыеСчета.Период >= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("Дата",     КонецМесяца(Дата));
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура добавляет менеджер временных таблиц к запросу.
// Во временной таблице содержатся сведения о размерах долей лицевых счетов в периоде.
Процедура ДополнитьЗапросДолямиЛицевыхСчетовСУчетомПериодовДействияУслуги(Запрос, Дата, ТаблицаПоказаний, ТекУслуга, СписокЛицевыхСчетов)
	
	// 1. Получим таблицу периодов изменения долей лицевых счетов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ДатаНач КАК Период,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект.ВидПомещения КАК ВидПомещения,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель = 0
	|				ИЛИ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ врДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&ДатаНач, ЛицевойСчет В (&СписокЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетов.Период,
	|	КВП_РазмерыДолейЛицевыхСчетов.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетов.Объект.ВидПомещения,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетов.ДоляЧислитель = 0
	|				ИЛИ КВП_РазмерыДолейЛицевыхСчетов.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетов.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетов.ДоляЗнаменатель
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов КАК КВП_РазмерыДолейЛицевыхСчетов
	|ГДЕ
	|	КВП_РазмерыДолейЛицевыхСчетов.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_РазмерыДолейЛицевыхСчетов.ЛицевойСчет В(&СписокЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДолиЛС.Период КАК Период,
	|	врДолиЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	врДолиЛС.ВидПомещения,
	|	врДолиЛС.ДоляЛС
	|ИЗ
	|	врДолиЛС КАК врДолиЛС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Период
	|ИТОГИ ПО
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаНач",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("СписокЛС", СписокЛицевыхСчетов);
	
	ВыборкаДолейЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Предназначена для хранения периодов действия долей текущего лицевого счета в месяце.
	ТаблицаДолейЛС = Новый ТаблицаЗначений;
	ТаблицаДолейЛС.Колонки.Добавить("ЛицевойСчет",   Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДолейЛС.Колонки.Добавить("ВидПомещения",  Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_ВидыПомещений"));
	ТаблицаДолейЛС.Колонки.Добавить("НачалоПериода", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаДолейЛС.Колонки.Добавить("КонецПериода",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаДолейЛС.Колонки.Добавить("ДоляЛС",        Новый ОписаниеТипов("Число"));
	
	ДлинаСуток = 24 * 60 * 60;
	
	Пока ВыборкаДолейЛС.Следующий() Цикл
		
		// Вид помещения есть только на втором уровне иерархии,
		// поэтому выделим его в переменную.
		ТекущийВидПомещения = Неопределено;
		
		ДатаТекущая = НачалоМесяца(Дата);
		ДоляТекущая = 0;
		
		ВыборкаПериодов = ВыборкаДолейЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериодов.Следующий() Цикл
			
			ТекущийВидПомещения = ВыборкаПериодов.ВидПомещения;
			
			// Условие сработает только в том случае, если по лицевому счету была установлена ненулевая доля на начало месяца.
			Если ДатаТекущая = ВыборкаПериодов.Период Тогда
				ДоляТекущая = ВыборкаПериодов.ДоляЛС;
				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаПериода = ТаблицаДолейЛС.Добавить();
			НоваяСтрокаПериода.ЛицевойСчет   = ВыборкаДолейЛС.ЛицевойСчет;
			НоваяСтрокаПериода.ВидПомещения  = ТекущийВидПомещения;
			НоваяСтрокаПериода.НачалоПериода = ДатаТекущая;
			НоваяСтрокаПериода.КонецПериода  = НачалоДня(ВыборкаПериодов.Период - ДлинаСуток);
			НоваяСтрокаПериода.ДоляЛС        = ДоляТекущая;
			
			// Переопределяем текущую дату и долю лицевого счета.
			ДатаТекущая = ВыборкаПериодов.Период;
			ДоляТекущая = ВыборкаПериодов.ДоляЛС;
			
		КонецЦикла;
		
		// Добавляем запись с действием последней доли лицевого счета.
		НоваяСтрока = ТаблицаДолейЛС.Добавить();
		НоваяСтрока.ЛицевойСчет   = ВыборкаДолейЛС.ЛицевойСчет;
		НоваяСтрока.ВидПомещения  = ТекущийВидПомещения;
		НоваяСтрока.НачалоПериода = ДатаТекущая;
		НоваяСтрока.КонецПериода  = КонецМесяца(Дата);
		НоваяСтрока.ДоляЛС        = ДоляТекущая;
		
	КонецЦикла;
	
	// 2. Получим интервалы пересечения периодов действия услуги и периодов изменения долей лицевых счетов.
	ЗапросПересеченияПериодов = Новый Запрос;
	
	ЗапросПересеченияПериодов.УстановитьПараметр("ТабличнаяЧасть",        ТаблицаПоказаний);
	ЗапросПересеченияПериодов.УстановитьПараметр("ТекУслуга",             ТекУслуга);
	ЗапросПересеченияПериодов.УстановитьПараметр("ТаблицаДолейЛС",        ТаблицаДолейЛС);
	ЗапросПересеченияПериодов.УстановитьПараметр("КоличествоДнейВМесяце", УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата));
	
	// Ранее для способа распределения по площади не учитывались периоды действия услуги.
	// Данный подход некорректен в случае, когда, например, услуга назначена в середине месяца.
	// Теперь периоды учитываются. Для возврата к прежнему алгоритму расчета без учета
	// действия услуги в расчетном периоде, необходимо изменить значение в переопределяемом модуле.
	//
	// Если периоды действия не учитываются, то в запросе не происходит соединение таблицы долей
	// с таблицей периодов действия, а в выборе в качестве периода берется основной период действия доли л/с.
	//
	ЗапросПересеченияПериодов.УстановитьПараметр("УчитыватьПериодДействияУслуги", УПЖКХ_ПараметрыУчетаПереопределяемый.УчитыватьПериодДействияУслугиПриРаспределенииОДНПоПлощади());
	
	ЗапросПересеченияПериодов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.ЛицевойСчет,
	|	ТабличнаяЧасть.НачалоПериода,
	|	ТабличнаяЧасть.КонецПериода
	|ПОМЕСТИТЬ врТаблицаПериодовДействияЛС
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Услуга = &ТекУслуга
	|	И НЕ ТабличнаяЧасть.Сторно
	|	И НЕ ТабличнаяЧасть.НачислениеПоПовышающемуКоэффициенту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДолейЛС.ЛицевойСчет,
	|	ТаблицаДолейЛС.ВидПомещения,
	|	ТаблицаДолейЛС.ДоляЛС,
	|	ТаблицаДолейЛС.НачалоПериода,
	|	ТаблицаДолейЛС.КонецПериода
	|ПОМЕСТИТЬ врТаблицаДолейЛС
	|ИЗ
	|	&ТаблицаДолейЛС КАК ТаблицаДолейЛС
	|ГДЕ
	|	НЕ ТаблицаДолейЛС.ДоляЛС = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДолейЛС.ЛицевойСчет,
	|	врТаблицаДолейЛС.ВидПомещения,
	|	врТаблицаДолейЛС.ДоляЛС,
	|	ВЫБОР
	|		КОГДА &УчитыватьПериодДействияУслуги
	|			ТОГДА ВЫБОР
	|					КОГДА врТаблицаПериодовДействияЛС.НачалоПериода ЕСТЬ NULL 
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|					КОГДА врТаблицаДолейЛС.НачалоПериода > врТаблицаПериодовДействияЛС.НачалоПериода
	|						ТОГДА врТаблицаДолейЛС.НачалоПериода
	|					ИНАЧЕ врТаблицаПериодовДействияЛС.НачалоПериода
	|				КОНЕЦ
	|		ИНАЧЕ врТаблицаДолейЛС.НачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &УчитыватьПериодДействияУслуги
	|			ТОГДА ВЫБОР
	|					КОГДА врТаблицаПериодовДействияЛС.КонецПериода ЕСТЬ NULL 
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|					КОГДА врТаблицаДолейЛС.КонецПериода < врТаблицаПериодовДействияЛС.КонецПериода
	|						ТОГДА врТаблицаДолейЛС.КонецПериода
	|					ИНАЧЕ врТаблицаПериодовДействияЛС.КонецПериода
	|				КОНЕЦ
	|		ИНАЧЕ врТаблицаДолейЛС.КонецПериода
	|	КОНЕЦ КАК КонецПериода
	|ПОМЕСТИТЬ врПересеченияПериодов
	|ИЗ
	|	врТаблицаДолейЛС КАК врТаблицаДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПериодовДействияЛС КАК врТаблицаПериодовДействияЛС
	|		ПО врТаблицаДолейЛС.ЛицевойСчет = врТаблицаПериодовДействияЛС.ЛицевойСчет
	|			И врТаблицаДолейЛС.НачалоПериода <= врТаблицаПериодовДействияЛС.КонецПериода
	|			И врТаблицаДолейЛС.КонецПериода >= врТаблицаПериодовДействияЛС.НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПересеченияПериодов.ЛицевойСчет,
	|	врПересеченияПериодов.ВидПомещения,
	|	СУММА(врПересеченияПериодов.ДоляЛС * (РАЗНОСТЬДАТ(врПересеченияПериодов.НачалоПериода, врПересеченияПериодов.КонецПериода, ДЕНЬ) + 1) / &КоличествоДнейВМесяце) КАК ДоляЛС
	|ИЗ
	|	врПересеченияПериодов КАК врПересеченияПериодов
	|ГДЕ
	|	НЕ врПересеченияПериодов.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ врПересеченияПериодов.КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	врПересеченияПериодов.ЛицевойСчет,
	|	врПересеченияПериодов.ВидПомещения";
	
	ТаблицаДолейЛС = ЗапросПересеченияПериодов.Выполнить().Выгрузить();
	
	// 3. Дополним основной запрос временной таблицей с долями лицевых счетов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДолейЛС.ЛицевойСчет,
	|	ТаблицаДолейЛС.ВидПомещения,
	|	ТаблицаДолейЛС.ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	&ТаблицаДолейЛС КАК ТаблицаДолейЛС";
	
	Запрос.УстановитьПараметр("ТаблицаДолейЛС", ТаблицаДолейЛС);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ДополнитьЗапросДолямиЛицевыхСчетовСУчетомПериодовДействияУслуги()

// Определяет количество месяцев, в которых закреплены ПУ для каждого объекта.
//
Процедура ОпределитьКоличествоМесяцевРаботыПрибораУчета(ДатаНач, ДатаКон, СписокУслуг, СписокОбъектов,
	                                                    ТаблицаРасходаПоСреднему, УчитыватьПрибор = Ложь)
	
	ТекДатаНачала = ДатаНач;
	
	ЗапросПоЗакрепленнымПУ = Новый Запрос;
	ЗапросПоЗакрепленнымПУ.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.СчетчикНаЛицевойСчет,
	|	ВложенныйЗапрос.Услуга,
	|	&ТекстВыбораПрибора
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|		ВЫБОР
	|			КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СчетчикНаЛицевойСчет,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&НачалоМесяца,
	|				Объект В (&СписокОбъектов)
	|				И ДатаИзменения <= &НачалоМесяца
	|					И &ТекстУсловия1) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчики.Объект,
	|		ВЫБОР
	|			КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|		КВП_ЗакрепленныеСчетчики.Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчики.Объект В(&СписокОбъектов)
	|		И &ТекстУсловия2
	|		И КВП_ЗакрепленныеСчетчики.Действует
	|		И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &НачалоМесяца И &КонецМесяца) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.СчетчикНаЛицевойСчет,
	|	ВложенныйЗапрос.Услуга,
	|	&ТекстВыбораПрибора";
	
	ТекстУсловия1      = "ИСТИНА";
	ТекстУсловия2      = "ИСТИНА";
	ТекстВыбораПрибора = "ИСТИНА";
	
	Если УчитыватьПрибор Тогда
		ТекстВыбораПрибора = "ВложенныйЗапрос.Счетчик";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокУслуг) Тогда
		ТекстУсловия1 = "Счетчик.ВидУслуги В (&Услуга)";
		ТекстУсловия2 = "КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В (&Услуга)";
	КонецЕсли;
	
	ЗапросПоЗакрепленнымПУ.Текст = СтрЗаменить(ЗапросПоЗакрепленнымПУ.Текст, "&ТекстВыбораПрибора", ТекстВыбораПрибора);
	ЗапросПоЗакрепленнымПУ.Текст = СтрЗаменить(ЗапросПоЗакрепленнымПУ.Текст, "&ТекстУсловия1",      ТекстУсловия1);
	ЗапросПоЗакрепленнымПУ.Текст = СтрЗаменить(ЗапросПоЗакрепленнымПУ.Текст, "&ТекстУсловия2",      ТекстУсловия2);
	
	ЗапросПоЗакрепленнымПУ.УстановитьПараметр("Услуга",         СписокУслуг);
	ЗапросПоЗакрепленнымПУ.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	
	Пока ТекДатаНачала < ДатаКон Цикл
		
		ЗапросПоЗакрепленнымПУ.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекДатаНачала));
		ЗапросПоЗакрепленнымПУ.УстановитьПараметр("КонецМесяца",  КонецМесяца(ТекДатаНачала));
		
		ВыборкаОбъектов = ЗапросПоЗакрепленнымПУ.Выполнить().Выбрать();
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Объект", ВыборкаОбъектов.Объект);
			Если УчитыватьПрибор Тогда
				СтруктураОтбора.Вставить("Счетчик", ВыборкаОбъектов.Счетчик);
			КонецЕсли;
			
			СтрокиРасходаПоОбъекту = ТаблицаРасходаПоСреднему.НайтиСтроки(СтруктураОтбора);
			
			// Если получены данные о действии ПУ, но данных о среднем расходе нет, то добавим служебную строку
			// в таблицу расхода по среднему. При этом для строки установим признак "СтрокаДлительностиДействияПУ",
			// чтобы при расчете начисления служебные строки без среднего расхода не брались в расчет объема среднего расхода.
			// Сама служебная строка нужна для корректного определения количества месяцев действия ПУ, например, в случае,
			// когда счетчик установлен, а показания не вводились.
			Если СтрокиРасходаПоОбъекту.Количество() = 0 Тогда
				
				// Добавление новой служебной строки.
				НоваяСтрокаРасходаПоСреднему = ТаблицаРасходаПоСреднему.Добавить();
				НоваяСтрокаРасходаПоСреднему.Объект               = ВыборкаОбъектов.Объект;
				НоваяСтрокаРасходаПоСреднему.СчетчикНаЛицевойСчет = ВыборкаОбъектов.СчетчикНаЛицевойСчет;
				НоваяСтрокаРасходаПоСреднему.Услуга               = ВыборкаОбъектов.Услуга;
				НоваяСтрокаРасходаПоСреднему.РасходПоПУ           = 0;
				НоваяСтрокаРасходаПоСреднему.ВидПоказания         = Перечисления.КВП_ВидыТарифов.ПустаяСсылка();
				НоваяСтрокаРасходаПоСреднему.КоличествоМесяцев    = 0;
				Если УчитыватьПрибор Тогда
					НоваяСтрокаРасходаПоСреднему.Счетчик = ВыборкаОбъектов.Счетчик;
				КонецЕсли;
				
				// Установим признак строки длительности действия ПУ,
				// чтобы выделить служебную строку от строк со средним расходом.
				НоваяСтрокаРасходаПоСреднему.СтрокаДлительностиДействияПУ = Истина;
				
				СтрокиРасходаПоОбъекту.Добавить(НоваяСтрокаРасходаПоСреднему);
				
			КонецЕсли;
			
			Для Каждого ТекСтрокаРасходаПоОбъекту Из СтрокиРасходаПоОбъекту Цикл
				ТекСтрокаРасходаПоОбъекту.КоличествоМесяцев = ТекСтрокаРасходаПоОбъекту.КоличествоМесяцев + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		ТекДатаНачала = ДобавитьМесяц(ТекДатаНачала, 1);
		
	КонецЦикла;
	
КонецПроцедуры // ОпределитьКоличествоМесяцевРаботыПрибораУчета()

// Получает среднее показание по приборам учета за указанный период.
//
// Параметры:
//  Период                   - текущий период.
//  ТаблицаРасходаПоСреднему - таблица значений, содержащая расход по ПУ за указанный период.
//  КолМесяцев               - количество месяцев, за которые необходимо получить расход по счетчикам лицевого счета.
//  Услуга                   - услуга, по которой необходимо получить средний расход.
//  СписокЛицевыхСчетов      - список лицевых счетов для отбора данных.
//  СписокПомещений          - список помещений для отбора данных.
//  
// Возвращаемое значение:
//   Нет.
//
Процедура ПолучитьРасходПоСреднему(Период, ТаблицаРасходаПоСреднему, КолМесяцев,
								   СписокУслуг = Неопределено, СписокЛицевыхСчетов = Неопределено,
								   СписокПомещений = Неопределено, ИмяНастройкиРасчета = "")
	
	Если НЕ ЗначениеЗаполнено(ТаблицаРасходаПоСреднему) Тогда
		
		Запрос = Новый Запрос;
		
		// Определим настройку расчета.
		
		НастройкаРасчета = Неопределено;
		НастройкаОпределена = Ложь;
		ЕстьУслугиПоСреднему = Ложь;
		
		Если ИмяНастройкиРасчета = "СпособРасчетаПоПУБезДействующихПУ" Или ИмяНастройкиРасчета = "СпособРасчетаПоПУБезПоказаний" Тогда
			
			НастройкаРасчета = Услуга[ИмяНастройкиРасчета];
			НастройкаОпределена = Истина;
			
			// Проверим, возможно расчет по среднему используется для одной из списка услуг (для общедомовых).
			Если ТипЗнч(СписокУслуг) = Тип("Массив") Тогда
				Для Каждого ТекУслуга Из СписокУслуг Цикл
					Если ТекУслуга[ИмяНастройкиРасчета] = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению Тогда
						ЕстьУслугиПоСреднему = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НастройкаОпределена Или
			(Не НастройкаРасчета = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению И Не ЕстьУслугиПоСреднему) Тогда
			
			// Создадим пустую таблицу и не будем ее заполнять.
			ТаблицаРасходаПоСреднему = Новый ТаблицаЗначений;
			ТаблицаРасходаПоСреднему.Колонки.Добавить("РасходПоПУ");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("ВидПоказания");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("Объект");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("СчетчикНаЛицевойСчет");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("Счетчик");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("Услуга");
			ТаблицаРасходаПоСреднему.Колонки.Добавить("КоличествоМесяцев"); // Количество месяцев действия приборов учета
			
			// Признак строки, содержащей только сведения по количеству месяцев действия ПУ.
			// В таких строках нет расхода ПУ, они предназначены только для получения количества месяцев
			// действия ПУ в случае, когда расхода не было.
			ТаблицаРасходаПоСреднему.Колонки.Добавить("СтрокаДлительностиДействияПУ", Новый ОписаниеТипов("Булево"));
			
			Возврат;
			
		КонецЕсли;
		
		УсловиеНаОбъект = "ИСТИНА";
		УсловиеНаУслугу = "ИСТИНА";
		// Служебный список объектов, который используется при получении количества месяцев действия ПУ
		// в случае, когда среднего расхода нет, а ПУ действует.
		СписокОбъектовДляОтбора = Новый Массив;
		Если Не СписокЛицевыхСчетов = Неопределено И Не СписокПомещений = Неопределено Тогда
			УсловиеНаОбъект = "(Объект В(&СписокЛицевыхСчетов) ИЛИ Объект В(&СписокПомещений))";
			
			// Заполнение списка объектов для получения месяцев действия ПУ.
			Для Каждого ТекОбъект Из СписокЛицевыхСчетов Цикл
				СписокОбъектовДляОтбора.Добавить(ТекОбъект);
			КонецЦикла;
			Для Каждого ТекОбъект Из СписокПомещений Цикл
				СписокОбъектовДляОтбора.Добавить(ТекОбъект);
			КонецЦикла;
			
		ИначеЕсли Не СписокЛицевыхСчетов = Неопределено Тогда
			УсловиеНаОбъект = "Объект В(&СписокЛицевыхСчетов)";
			
			// Заполнение списка объектов для получения месяцев действия ПУ.
			Для Каждого ТекОбъект Из СписокЛицевыхСчетов Цикл
				СписокОбъектовДляОтбора.Добавить(ТекОбъект);
			КонецЦикла;
			
		ИначеЕсли Не СписокПомещений = Неопределено Тогда
			УсловиеНаОбъект = "Объект В(&СписокПомещений)";
			
			// Заполнение списка объектов для получения месяцев действия ПУ.
			Для Каждого ТекОбъект Из СписокПомещений Цикл
				СписокОбъектовДляОтбора.Добавить(ТекОбъект);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокУслуг) Тогда
			УсловиеНаУслугу = "Счетчик.ВидУслуги В (&Услуга)";
		КонецЕсли;
		
		Если мРасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний Тогда
			
			// Период для расчета среднего расхода при отсутствии счетчика по объекту, на начало месяца начислений, получаем как:
			// Конец периода - конец месяца последнего ввода показаний по объекту;
			// Начало периода - максимальная из дат: начало месяца установки первого счетчика объекта
			//                  и начало месяца разницы между Концом периода и количеством месяцев,
			//                  указанного в настройках услуги в поле "Производить по среднему значению за период".
			// Период для расчета среднего расхода при отсутсвии показаний по объекту, на начало месяца начислений, получаем как:
			// Конец периода - конец месяца последнего ввода показаний по действующему счетчику объекта;
			// Начало периода - максимальная из дат: начало месяца установки действующего счетчика
			//                  и начало месяца разницы между Концом периода и количеством месяцев,
			//                  указанного в настройках услуги в поле "Производить по среднему значению за период".
			// По данному периоду получаем расход и делим на количество месяцев работы счетчика в полученном периоде.
			
			// 1. Получаем период для расчета среднего.
			Запрос.УстановитьПараметр("КолМесяцев",             КолМесяцев);
			Запрос.УстановитьПараметр("ДатаДокумента",          Период);
			Запрос.УстановитьПараметр("НачалоМесяца",           НачалоМесяца(Период));
			Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(ДобавитьМесяц(Период, -1)));
			
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
			|ПОМЕСТИТЬ втАктивныеПУ
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|			&НачалоМесяца,
			|			&УсловиеНаУслугу
			|				И &УсловиеНаОбъект
			|				И НЕ Счетчик.ПризнакВыходногоСчетчика
			|				И ДатаИзменения <= &НачалоМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАктивныеПУ.Объект КАК Объект,
			|	втАктивныеПУ.Счетчик КАК Счетчик,
			|	МАКСИМУМ(КОНЕЦПЕРИОДА(ЕСТЬNULL(КВП_ПоказанияСчетчиков.Период, &КонецПредыдущегоМесяца), МЕСЯЦ)) КАК КонецПериода
			|ПОМЕСТИТЬ втКонецПериодаАктивныхПУ
			|ИЗ
			|	втАктивныеПУ КАК втАктивныеПУ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиков
			|		ПО (КВП_ПоказанияСчетчиков.Счетчик = втАктивныеПУ.Счетчик)
			|			И (КВП_ПоказанияСчетчиков.Период < &НачалоМесяца)
			|
			|СГРУППИРОВАТЬ ПО
			|	втАктивныеПУ.Объект,
			|	втАктивныеПУ.Счетчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УПЖКХ_РасчетПриборовУчета.Объект КАК Объект,
			|	МАКСИМУМ(УПЖКХ_РасчетПриборовУчета.Период) КАК ДатаПоследнегоПоказания
			|ПОМЕСТИТЬ втПоследниеПоказанияНеактивныхПУ
			|ИЗ
			|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета КАК УПЖКХ_РасчетПриборовУчета
			|ГДЕ
			|	&УсловиеНаОбъект
			|	И НЕ УПЖКХ_РасчетПриборовУчета.Объект В
			|				(ВЫБРАТЬ
			|					втАктивныеПУ.Объект
			|				ИЗ
			|					втАктивныеПУ КАК втАктивныеПУ)
			|	И УПЖКХ_РасчетПриборовУчета.Период < &НачалоМесяца
			|	И УПЖКХ_РасчетПриборовУчета.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И &УсловиеНаУслугу
			|	И НЕ УПЖКХ_РасчетПриборовУчета.Счетчик.ПризнакВыходногоСчетчика
			|
			|СГРУППИРОВАТЬ ПО
			|	УПЖКХ_РасчетПриборовУчета.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втАктивныеПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПоследниеПоказанияНеактивныхПУ.Объект КАК Объект,
			|	КОНЕЦПЕРИОДА(втПоследниеПоказанияНеактивныхПУ.ДатаПоследнегоПоказания, МЕСЯЦ) КАК КонецПериода,
			|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик,
			|	МАКСИМУМ(КВП_ЗакрепленныеСчетчики.Период) КАК Период
			|ПОМЕСТИТЬ втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ
			|ИЗ
			|	втПоследниеПоказанияНеактивныхПУ КАК втПоследниеПоказанияНеактивныхПУ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
			|		ПО втПоследниеПоказанияНеактивныхПУ.Объект = КВП_ЗакрепленныеСчетчики.Объект
			|			И (&УсловиеНаУслугу)
			|			И (КВП_ЗакрепленныеСчетчики.Период <= втПоследниеПоказанияНеактивныхПУ.ДатаПоследнегоПоказания)
			|			И (КВП_ЗакрепленныеСчетчики.ДатаИзменения <= втПоследниеПоказанияНеактивныхПУ.ДатаПоследнегоПоказания)
			|			И (НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика)
			|
			|СГРУППИРОВАТЬ ПО
			|	КВП_ЗакрепленныеСчетчики.Счетчик,
			|	втПоследниеПоказанияНеактивныхПУ.Объект,
			|	втПоследниеПоказанияНеактивныхПУ.ДатаПоследнегоПоказания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втПоследниеПоказанияНеактивныхПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втКонецПериодаАктивныхПУ.Объект КАК Объект,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ)) КАК ДатаУстановки,
			|	МАКСИМУМ(втКонецПериодаАктивныхПУ.КонецПериода) КАК КонецПериода
			|ПОМЕСТИТЬ втДатаУстановкиПУИКонецПериода
			|ИЗ
			|	втКонецПериодаАктивныхПУ КАК втКонецПериодаАктивныхПУ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|				&НачалоМесяца,
			|				(Объект, Счетчик) В
			|						(ВЫБРАТЬ
			|							КонецПериодаАктивныхПУ.Объект,
			|							КонецПериодаАктивныхПУ.Счетчик
			|						ИЗ
			|							втКонецПериодаАктивныхПУ КАК КонецПериодаАктивныхПУ)
			|					И Действует) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|		ПО втКонецПериодаАктивныхПУ.Объект = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
			|			И втКонецПериодаАктивныхПУ.Счетчик = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
			|
			|СГРУППИРОВАТЬ ПО
			|	втКонецПериодаАктивныхПУ.Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.Объект,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(КВП_ЗакрепленныеСчетчики.ДатаИзменения, МЕСЯЦ)),
			|	МАКСИМУМ(втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.КонецПериода)
			|ИЗ
			|	втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ КАК втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
			|		ПО втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.Объект = КВП_ЗакрепленныеСчетчики.Объект
			|			И втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.Счетчик = КВП_ЗакрепленныеСчетчики.Счетчик
			|			И втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.Период = КВП_ЗакрепленныеСчетчики.Период
			|			И (КВП_ЗакрепленныеСчетчики.Действует)
			|
			|СГРУППИРОВАТЬ ПО
			|	втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.КонецПериода,
			|	втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втКонецПериодаАктивныхПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втАктивныеПУНаДатуПоследнегоПоказанияЛицевыхСчетовНеактивныхПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДатаУстановкиПУИКонецПериода.Объект КАК Объект,
			|	ВЫБОР
			|		КОГДА втДатаУстановкиПУИКонецПериода.ДатаУстановки > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(втДатаУстановкиПУИКонецПериода.КонецПериода, МЕСЯЦ, -&КолМесяцев + 1), МЕСЯЦ)
			|			ТОГДА втДатаУстановкиПУИКонецПериода.ДатаУстановки
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(втДатаУстановкиПУИКонецПериода.КонецПериода, МЕСЯЦ, -&КолМесяцев + 1), МЕСЯЦ)
			|	КОНЕЦ КАК НачалоПериода,
			|	втДатаУстановкиПУИКонецПериода.КонецПериода КАК КонецПериода
			|ПОМЕСТИТЬ втПериодыДляРасчетаСреднегоПоОбъектам
			|ИЗ
			|	втДатаУстановкиПУИКонецПериода КАК втДатаУстановкиПУИКонецПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втДатаУстановкиПУИКонецПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(втПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода) КАК НачалоПериода,
			|	МАКСИМУМ(втПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода) КАК КонецПериода
			|ИЗ
			|	втПериодыДляРасчетаСреднегоПоОбъектам КАК втПериодыДляРасчетаСреднегоПоОбъектам";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслугу", УсловиеНаУслугу);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъект", УсловиеНаОбъект);
			
			Запрос.УстановитьПараметр("Услуга",              СписокУслуг);
			Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
			Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
			
			ВыборкаПериодов = Запрос.Выполнить().Выбрать();
			
			// Определим пустые даты начала и конца периода для получения показаний по всем объектам, так как запрос может оказаться пустым.
			НачалоПериода = Дата(1, 1, 1);
			Конецпериода  = Дата(1, 1, 1);
			
			Если ВыборкаПериодов.Следующий() Тогда
				Если Не ВыборкаПериодов.НачалоПериода = Null Тогда
					НачалоПериода = ВыборкаПериодов.НачалоПериода;
				КонецЕсли;
				Если Не ВыборкаПериодов.КонецПериода = Null Тогда
					КонецПериода  = ВыборкаПериодов.КонецПериода
				КонецЕсли;
			КонецЕсли;
			
			// 2. Получаем расход по приборам и количество месяцев для расчета.
			Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(РасчетПриборовУчета.ПоказаниеПриход) / (РАЗНОСТЬДАТ(ПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода, ПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода, МЕСЯЦ) + 1) КАК РасходПоПУ,
			|	РасчетПриборовУчета.ВидПоказания КАК ВидПоказания,
			|	РасчетПриборовУчета.Объект КАК Объект,
			|	ВЫБОР
			|		КОГДА РасчетПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СчетчикНаЛицевойСчет,
			|	РасчетПриборовУчета.Услуга КАК Услуга,
			|	РАЗНОСТЬДАТ(ПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода, ПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода, МЕСЯЦ) + 1 КАК КоличествоМесяцев,
			|	ЛОЖЬ КАК СтрокаДлительностиДействияПУ,
			|	NULL КАК Счетчик
			|ИЗ
			|	втПериодыДляРасчетаСреднегоПоОбъектам КАК ПериодыДляРасчетаСреднегоПоОбъектам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(
			|				&НачалоПериода,
			|				&КонецПериода,
			|				Месяц,
			|				&УсловиеНаУслугу
			|					И &УсловиеНаОбъект) КАК РасчетПриборовУчета
			|		ПО (РасчетПриборовУчета.Объект = ПериодыДляРасчетаСреднегоПоОбъектам.Объект)
			|			И (РасчетПриборовУчета.Период МЕЖДУ ПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода И ПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода)
			|
			|СГРУППИРОВАТЬ ПО
			|	РАЗНОСТЬДАТ(ПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода, ПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода, МЕСЯЦ) + 1,
			|	ПериодыДляРасчетаСреднегоПоОбъектам.НачалоПериода,
			|	ПериодыДляРасчетаСреднегоПоОбъектам.КонецПериода,
			|	РасчетПриборовУчета.ВидПоказания,
			|	РасчетПриборовУчета.Объект,
			|	РасчетПриборовУчета.Услуга";
			
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслугу", УсловиеНаУслугу);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъект", УсловиеНаОбъект);
			
			Запрос.УстановитьПараметр("Услуга", СписокУслуг);
			Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
			Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
			
			ТаблицаРасходаПоСреднему = Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			ДатаКон = КонецМесяца(ДобавитьМесяц(КонецМесяца(Период), - 1));
			ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаКон, -КолМесяцев + 1));
			
			Если мСпособОпределенияСреднегоРасходаПоПриборамУчета = Перечисления.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСНенулевымРасходом Тогда
				
				// Берем расход за весь период и получаем среднее по тем месяцам, когда был расход. 
				// Т.е. объем делится на количество месяцев, в которых расход ненулевой.
				
				// 1. Получаем расход по приборам за весь период.
				Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
				Запрос.УстановитьПараметр("ДатаКон",             ДатаКон);
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СРЕДНЕЕ(ЕСТЬNULL(РасчетПриборовУчета.ПоказаниеПриход, 0)) КАК РасходПоПУ,
				|	РасчетПриборовУчета.ВидПоказания КАК ВидПоказания,
				|	РасчетПриборовУчета.Объект,
				|	ВЫБОР
				|		КОГДА РасчетПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК СчетчикНаЛицевойСчет,
				|	РасчетПриборовУчета.Счетчик,
				|	РасчетПриборовУчета.Услуга,
				|	0 КАК КоличествоМесяцев,
				|	ЛОЖЬ КАК СтрокаДлительностиДействияПУ
				|ИЗ
				|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(
				|			&ДатаНач,
				|			&ДатаКон,
				|			Месяц,
				|			&УсловиеНаУслугу
				|				И &УсловиеНаОбъект) КАК РасчетПриборовУчета
				|
				|СГРУППИРОВАТЬ ПО
				|	РасчетПриборовУчета.Счетчик,
				|	РасчетПриборовУчета.Объект,
				|	РасчетПриборовУчета.ВидПоказания,
				|	РасчетПриборовУчета.Услуга,
				|	ВЫБОР
				|		КОГДА РасчетПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	СРЕДНЕЕ(ЕСТЬNULL(РасчетПриборовУчета.ПоказаниеПриход, 0)) > 0";
				
				// ПРИМЕЧАНИЕ:
				// Если средний расход прибора учета за период отрицательный, то считаем, что средний расход нулевой.
				// Это необходимо, так как начислять по среднему с отрицательным расходом неверно.
				// При этом если в каком-то месяце расход был отрицательный, то он берется для расчета среднего,
				// главное, чтобы итоговый расход был положительным.
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслугу", УсловиеНаУслугу);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъект", УсловиеНаОбъект);
				
				Запрос.УстановитьПараметр("Услуга", СписокУслуг);
				Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
				Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
				
				ТаблицаРасходаПоСреднему = Запрос.Выполнить().Выгрузить();
				
				// 2. Определяем количество месяцев, в которых закреплен ПУ для объекта.
				ОпределитьКоличествоМесяцевРаботыПрибораУчета(ДатаНач, ДатаКон, СписокУслуг, СписокОбъектовДляОтбора, ТаблицаРасходаПоСреднему, Истина);
				
			ИначеЕсли мСпособОпределенияСреднегоРасходаПоПриборамУчета = Перечисления.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСДействующимПУ Тогда
				
				// Берем расход за весь период. Полученный расход делим на количество месяцев, 
				// в которых был закреплен хотя бы один счетчик по услуге.
				
				// 1. Получаем общий расход по объекту за весь период.
				Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
				Запрос.УстановитьПараметр("ДатаКон",             ДатаКон);
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(ЕСТЬNULL(РасчетПриборовУчета.ПоказаниеПриход, 0)) КАК РасходПоПУ,
				|	РасчетПриборовУчета.ВидПоказания КАК ВидПоказания,
				|	РасчетПриборовУчета.Объект,
				|	ВЫБОР
				|		КОГДА РасчетПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК СчетчикНаЛицевойСчет,
				|	РасчетПриборовУчета.Услуга,
				|	0 КАК КоличествоМесяцев,
				|	ЛОЖЬ КАК СтрокаДлительностиДействияПУ,
				|	NULL КАК Счетчик
				|ИЗ
				|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(
				|			&ДатаНач,
				|			&ДатаКон,
				|			Месяц,
				|			&УсловиеНаУслугу
				|				И &УсловиеНаОбъект) КАК РасчетПриборовУчета
				|
				|СГРУППИРОВАТЬ ПО
				|	РасчетПриборовУчета.Объект,
				|	РасчетПриборовУчета.Услуга,
				|	РасчетПриборовУчета.ВидПоказания,
				|	ВЫБОР
				|		КОГДА РасчетПриборовУчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	СУММА(ЕСТЬNULL(РасчетПриборовУчета.ПоказаниеПриход, 0)) > 0";
				
				// ПРИМЕЧАНИЕ:
				// Если средний расход прибора учета за период отрицательный, то считаем, что средний расход нулевой.
				// Это необходимо, так как начислять по среднему с отрицательным расходом неверно.
				// При этом если в каком-то месяце расход был отрицательный, то он берется для расчета среднего,
				// главное, чтобы итоговый расход был положительным.
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслугу", УсловиеНаУслугу);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъект", УсловиеНаОбъект);
				
				Запрос.УстановитьПараметр("Услуга", СписокУслуг);
				Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
				Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
				
				ТаблицаРасходаПоСреднему = Запрос.Выполнить().Выгрузить();
				
				// 2. Определяем количество месяцев, в которых есть закрепленные ПУ для каждого объекта.
				ОпределитьКоличествоМесяцевРаботыПрибораУчета(ДатаНач, ДатаКон, СписокУслуг, СписокОбъектовДляОтбора, ТаблицаРасходаПоСреднему, Ложь);
				
				// 3. Делим расход по каждому объекту на количество месяцев, в которых был закреплен
				// хотя бы один счетчик на объект.
				Для Каждого ТекСтрокаРасхода Из ТаблицаРасходаПоСреднему Цикл
					
					// В служебной строке нет расхода ПУ, поэтому служебные строки пропускаем.
					Если ТекСтрокаРасхода.СтрокаДлительностиДействияПУ Тогда
						Продолжить;
					КонецЕсли;
					
					ТекСтрокаРасхода.РасходПоПУ = ?(ТекСтрокаРасхода.КоличествоМесяцев = 0, 
													0, 
													ТекСтрокаРасхода.РасходПоПУ / ТекСтрокаРасхода.КоличествоМесяцев);
				КонецЦикла;
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьРасходПоСреднему()

// Заполняет таблицу распределения сумм начислений по показаниям.
//
// Параметры
//  ТаблицаРаспределения - таблица значений - общая таблица для сохранения результатов распределения.
//  ДеревоПоказанийПУ    - дерево показаний.
//  Вид тарифа           - перечисление.
//
Процедура ДополнитьТаблицуРаспределения(ТаблицаРаспределения, ДеревоПоказанийПУ, ВидТарифа)

	ЛицевыеСчета = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта", "ЛицевойСчет"), Истина);
	Для Каждого СтрокаЛС ИЗ ЛицевыеСчета Цикл
		СтрокаРаспределения = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаЛС);
		СтрокаРаспределения.ВидТарифа = ?(ВидТарифа = Неопределено, Перечисления.КВП_ВидыТарифов.Общий, ВидТарифа); 
	КонецЦикла;

КонецПроцедуры // ДополнитьТаблицуРаспределения()

// Распределяет количество по показаниям индивидуальных приборов учета текущего объекта.
//
Процедура РаспределитьКоличествоПоПоказаниямСчетчикаОбъекта(КоличествоРаспределения, Объект, ТекУслуга, 
															ИмяКолонкиКоличество, ИмяКолонкиСумма, СписокТарифовОПУ, ВидТарифа)
	
	МассивДолей = Новый Массив;
	
	СтруктураОтбора = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
	
	СтруктураОтбора.Вставить("ЛицевойСчет", Объект);
	СтруктураОтбора.Вставить("Услуга",      ТекУслуга);
	
	СтрокиТабличнойЧасти = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
	
	ТаблицаПоСтрокам = Новый ТаблицаЗначений;
	ТаблицаПоСтрокам.Колонки.Добавить("ЛицевойСчет",       Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаПоСтрокам.Колонки.Добавить("НачалоПериода",     Новый ОписаниеТипов("Дата"));
	ТаблицаПоСтрокам.Колонки.Добавить("КонецПериода",      Новый ОписаниеТипов("Дата"));
	ТаблицаПоСтрокам.Колонки.Добавить("ПоказаниеСчЛС",     Новый ОписаниеТипов("Число"));
	ТаблицаПоСтрокам.Колонки.Добавить("Распределение",     Новый ОписаниеТипов("Число"));
	
	ОбщаяДоля = 0;
	КоличествоТарифов = ?(СписокТарифовОПУ.Количество() = 0, 1, СписокТарифовОПУ.Количество());
	
	// Проверим, есть ли начисления по ИПУ.
	ЕстьНачисленияПоИПУ = Ложь;
	Для Каждого ТекущаяСтрока Из СтрокиТабличнойЧасти Цикл
		Если ТекущаяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ()
		 Или ТекущаяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу() Тогда
			ЕстьНачисленияПоИПУ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Получим количество дней начисления для каждого подпериода.
	Для Каждого ТекущаяСтрока ИЗ СтрокиТабличнойЧасти Цикл
		
		// проверка настройки услуги "СпособРаспределенияПоказанийНаЛицевыеСчета"
		Если ПроверитьСпособРаспределенияПоказанийНаЛицевыеСчета(ТекущаяСтрока, ТекУслуга) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДнейНачислено = (День(ТекущаяСтрока.КонецПериода) - День(ТекущаяСтрока.НачалоПериода) + 1);
		
		Если НЕ ТекущаяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
			ТекДнейНачислено = ТекДнейНачислено / ?(ТекущаяСтрока.ТолькоДляРаспределения, КоличествоТарифов, 
												  ?(ТекущаяСтрока.Тарифность = 0, КоличествоТарифов, ТекущаяСтрока.Тарифность));
		КонецЕсли;
		
		// Добавляем данные в массив долей, если:
		// 1. Вид тарифа распределенной суммы - "ОБЩИЙ" - нужно ее раскидывать
		// ИЛИ
		// 2. Вид тарифа распределенной суммы и вид тарифа строки табличной части совпадают, например "Дневной" - "Дневной".
		//
		// ИЛИ
		// 3. Вариант распределения расхода по тарифам - по видам тарифа, вариант распределения при отсутствии ИПУ по "ОБЩЕМУ" тарифу
		// и Вид тарифа текущей строки табличной части "ОБЩИЙ" - добавлено для того, чтобы происходило распределение, когда
		// распределение произошло по видам тарифа, отличным от "ОБЩИЙ", в ТЧ есть строка только с видом тарифа "ОБЩИЙ".
		
		Если (Услуга.ВариантРаспределенияРасходаКПУПоТарифам = 
				Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
			И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = 
				Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоОбщемуТарифу
			И ТекущаяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий
			И Не ЕстьНачисленияПоИПУ)
		 ИЛИ (ТекущаяСтрока.ВидТарифа = ВидТарифа ИЛИ ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий) Тогда
			МассивДолей.Добавить(ТекДнейНачислено);
			ОбщаяДоля = ОбщаяДоля + ТекДнейНачислено;
			НоваяСтрока = ТаблицаПоСтрокам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если общий расход равно 0, но необходимо распределить количество по текущему лицевому счету,
	// то заполним массив долей 1.
	Если ОбщаяДоля = 0 Тогда
		Для Индекс = 0 По МассивДолей.ВГраница() Цикл
			МассивДолей[Индекс] = 1;
		КонецЦикла;
	КонецЕсли;
	
	// Исходя из количества дней каждого подпериода распределим показание, которое попало на лицевой счет.
	МассивРаспределения = 
		УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоРаспределения, МассивДолей, мТочностьОбъемаНачислений, Истина);
	
	Если ЗначениеЗаполнено(МассивРаспределения) Тогда
		
		// Определим переменную, определяющую, нужно ли распределять на начисления с отрицательным расходом.
		РаспределятьНаОтрицательныйРасход = Истина;
		
		Если ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
			
			// Будем определять наличие отрицательного и положительного расхода.
			тмЕстьОтрицательныйРасход = Ложь;
			тмЕстьПоложительныйРасход = Ложь;
			
			Для Индекс = 0 ПО МассивРаспределения.Количество() - 1 Цикл
				СтрокаТаблицы = ТаблицаПоСтрокам.Получить(Индекс);
				СтрокаТаблицы.Распределение = МассивРаспределения[Индекс];
				
				// Отметим признаки наличия отрицательного и положительного расхода.
				Если СтрокаТаблицы.ПоказаниеСчЛС < 0 Тогда
					тмЕстьОтрицательныйРасход = Истина;
					
				ИначеЕсли СтрокаТаблицы.ПоказаниеСчЛС > 0 Тогда
					тмЕстьПоложительныйРасход = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// При наличии отрицательного и положительного расхода одновременно
			// занулим отрицательный расход, чтобы распределение попало только на положительные расходы.
			Если тмЕстьОтрицательныйРасход И тмЕстьПоложительныйРасход Тогда
				
				РаспределятьНаОтрицательныйРасход = Ложь;
				
				Для Каждого ТекСтрокаТаблицыПоСтрокам Из ТаблицаПоСтрокам Цикл
					
					Если ТекСтрокаТаблицыПоСтрокам.ПоказаниеСчЛС < 0 ТОгда
						ТекСтрокаТаблицыПоСтрокам.ПоказаниеСчЛС = 0;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаПоСтрокам.Свернуть("ЛицевойСчет, НачалоПериода, КонецПериода",
			                          "Распределение, ПоказаниеСчЛС");
		КонецЕсли;
		
		Индекс = 0;
		// Заполним объемы распределения по каждому подпериоду.
		Для Каждого ТекущаяСтрока ИЗ СтрокиТабличнойЧасти Цикл
			
			// Проверка настройки услуги "СпособРаспределенияПоказанийНаЛицевыеСчета".
			Если ПроверитьСпособРаспределенияПоказанийНаЛицевыеСчета(ТекущаяСтрока, ТекУслуга) Тогда
				Продолжить;
			КонецЕсли;
			
			// Опять же, распределяем, если:
			// 1. Вид тарифа распределенной суммы - общий
			// ИЛИ
			// 2. Вид тарифа распределенной суммы и вид тарифа строки табличной части совпадают, например "Дневной" - "Дневной"
			// ИЛИ
			// 3. Вариант распределения расхода по тарифам - по видам тарифа, вариант распределения при отсутствии ИПУ по "ОБЩЕМУ" тарифу
			// и Вид тарифа текущей строки табличной части "ОБЩИЙ" - добавлено для того, чтобы происходило распределение, когда
			// распределение произошло по видам тарифа, отличным от "ОБЩИЙ", в ТЧ есть строка только с видом тарифа "ОБЩИЙ".
			
			Если (Услуга.ВариантРаспределенияРасходаКПУПоТарифам = 
					Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
				И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = 
					Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоОбщемуТарифу
				И ТекущаяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий
				И Не ЕстьНачисленияПоИПУ)
			 ИЛИ (ТекущаяСтрока.ВидТарифа = ВидТарифа ИЛИ ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий) Тогда
				
				// Если тарифности ИПУ и ОПУ не совпадают, то внутри каждого подпериода будем делить показание
				// пропорционально объему.
				Если ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
					НайденнаяСтрока = ТаблицаПоСтрокам.НайтиСтроки(Новый Структура("ЛицевойСчет, НачалоПериода, КонецПериода",
									  ТекущаяСтрока.ЛицевойСчет, ТекущаяСтрока.НачалоПериода, ТекущаяСтрока.КонецПериода));
					Если НайденнаяСтрока.Количество() > 0 Тогда
						ОбщееКоличествоРаспределения = НайденнаяСтрока.Получить(0).Распределение;
						ОбщееКоличествоПоказаний     = НайденнаяСтрока.Получить(0).ПоказаниеСчЛС;
					КонецЕсли;
					// ОбщееКоличествоРаспределения = ?(ОбщееКоличествоРаспределения = 0, 1, ОбщееКоличествоРаспределения);
					
					// Разрешим распределение расхода ОДН, когда общее количество индивидуального
					// расхода по л/с < 0 при использовании формулы №15. Это возможно,
					// так как распределение зависит от площади, поэтому не может быть отрицательного распределения.
					//
					// ВАЖНО: Сейчас определяем использование формулы №15 по реквизиту "ИспользоватьФормулу15"
					// справочника "Услуги", а надо бы при распределении показаний определять
					// здания с формулой расчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15() 
					// и уже передавать признак использования формулы №15
					// сюда вместе с распределением для каждого лицевого счета (определяя по зданию).
					
					// Дополнительно: также распределять нужно в случае, если суммарный расход отрицательный, а распределять на отрицательный расход можно.
					// В любом случае, распределять можем по начислениям:
					// 1. С положительным расходом.
					// 2. С отрицательным расходом, если нужно распределять на отрицательный расход.
					
					// Варианты распределения на отрицательные - положительные расходы в подпериоде:
					// 1. Только отрицательный расход: распределение на отрицательный расход пропорционально объемам.
					// 2. Только положительный расход: распределение на положительный расход пропорционально объемам.
					// 3. Присутствует и отрицательный и положительный расход: распределение только на положительный
					// расход пропорционально объемам положительного расхода.
					//          Т.е. распределять на отрицательный расход нельзя тогда, когда имеется и отрицательный и положительный
					//          расход на текущем подпериоде.
					
					Если (ОбщееКоличествоПоказаний > 0
					 ИЛИ (ОбщееКоличествоПоказаний < 0 И (Услуга.ИспользоватьФормулу15 Или РаспределятьНаОтрицательныйРасход))
					 ИЛИ (ОбщееКоличествоПоказаний = 0 И ТекущаяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий))
						  И (РаспределятьНаОтрицательныйРасход Или ТекущаяСтрока.ПоказаниеСчЛС >= 0) Тогда
					
						ТекущаяСтрока[ИмяКолонкиКоличество] = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекущаяСтрока[ИмяКолонкиКоличество]
																+ (?(ОбщееКоличествоПоказаний = 0, 1, ТекущаяСтрока.ПоказаниеСчЛС)
																/ ?(ОбщееКоличествоПоказаний = 0, КоличествоТарифов, ОбщееКоличествоПоказаний))
																* ОбщееКоличествоРаспределения, мТочностьОбъемаНачислений);
					КонецЕсли;
					
				Иначе // Если распределение производится в разрезе тарифов, то ничего делить не нужно.
					ТекущаяСтрока[ИмяКолонкиКоличество] = ТекущаяСтрока[ИмяКолонкиКоличество] + МассивРаспределения.Получить(Индекс);
					
				КонецЕсли;
				
				ТекущаяСтрока[ИмяКолонкиСумма] = 
					ТекущаяСтрока[ИмяКолонкиСумма] + ТекущаяСтрока[ИмяКолонкиКоличество] * ТекущаяСтрока.Тариф;
				Индекс = Индекс + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьКоличествоПоПоказаниямСчетчикаОбъекта()

// Функция возвращает таблицу соответствия услуг общедомовых приборов учета с индивидуальными.
//
Функция ПолучитьТаблицуПериодовНачисленияУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ЛицевойСчет,
	|	ТабличнаяЧасть.Услуга,
	|	ТабличнаяЧасть.НачалоПериода,
	|	ТабличнаяЧасть.КонецПериода,
	|	ТабличнаяЧасть.Тарифность
	|ПОМЕСТИТЬ врТаблица
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодов.ЛицевойСчет,
	|	ТаблицаПериодов.НачалоПериода,
	|	ТаблицаПериодов.КонецПериода,
	|	ТаблицаПериодов.Услуга,
	|	МАКСИМУМ(ТаблицаПериодов.Тарифность) КАК Тарифность
	|ИЗ
	|	врТаблица КАК ТаблицаПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ЛицевойСчет,
	|	ТаблицаПериодов.Услуга,
	|	ТаблицаПериодов.НачалоПериода,
	|	ТаблицаПериодов.КонецПериода";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть", УслугиПоПоказаниямПУ);
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить();
	ТаблицаУслуг.Свернуть("ЛицевойСчет, Услуга, НачалоПериода, КонецПериода, Тарифность");
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуПериодовНачисленияУслуг()

// Функция проверяет, можно ли распределять ОДН по составной услуге в соответствии
// с настройкой "Распределять ограничения по видам тарифов прибора учета".
//
Функция ПроверитьВозможностьРаспределенияОДНПоПоПоказаниямСчетчикаИНормеОбъекта(ЛицевойСчет)
	
	// Значение по умолчанию.
	РаспределениеПоВидамТарифовДоступно = Ложь;
	
	// Данные об индивидуальном расходе получаем по таблице соответствия услуг,
	// так как нам нужен расход в целом по всем составным услугам, например, если в документе
	// рассчитываются услуги общедомового счетчика, и они все составные.
	// При этом, если в документе производится расчет сразу двух общедомовых услуг,
	// то распределение по видам тарифов выполнить не можем.
	
	// ВАЖНО: наличие индивидуальных начислений определяем по реквизиту "Услуга" документа,
	// т.е. по основной услуге. Нельзя распределять ОДН по видам тарифа отдельно по каждой
	// из составной услуг, так как не понятно, как получать объем распределения, приходищийся на каждую из них.
	
	СтруктураПоиска = Новый Структура("ЛицевойСчет, УслугаОПУ", ЛицевойСчет, Услуга);
	СрокиРасходаПоЛСИУслугеОПУ = ТаблицаСоответствияУслуг.НайтиСтроки(СтруктураПоиска);
	ТаблицаУслуг = ТаблицаСоответствияУслуг.Скопировать(СрокиРасходаПоЛСИУслугеОПУ, "ЛицевойСчет, Услуга, УслугаОПУ, ПоказаниеСчЛС");
	
	// Сворачиваем таблицу услуг по лицевому счету и услуге общедомового счетчика,
	// суммируя при этом индивидуальный расход.
	ТаблицаУслуг.Свернуть("ЛицевойСчет, Услуга, УслугаОПУ", "ПоказаниеСчЛС");
	
	// Получим суммарный индивидуальный расход по услуге.
	ИндивидуальныйРасходПоЛСВсего = ТаблицаУслуг.Итог("ПоказаниеСчЛС");
	
	// Считаем, что можем распределить ОДН с настройкой "Распределять ограничения по видам тарифов прибора учета"
	// при одновременном выполнении следующих условий:
	// 1. В документе есть строки по начислениям составной услуги текущего лицевого счета.
	// 2. В строках, полученных в п.1 нет индивидуальных начислений, т.е. сумма расхода равна 0.
	// 3. В документе присутствует только одна текущая составная услуга, а нескольких общедомовых услуг нет,
	//    так как распределить по видам тарифов сразу на несколько составных общедомовых услуг не можем.
	
	Если ТаблицаУслуг.Количество() = 1 И ИндивидуальныйРасходПоЛСВсего = 0 Тогда
		РаспределениеПоВидамТарифовДоступно = Истина;
	КонецЕсли;
	
	Возврат РаспределениеПоВидамТарифовДоступно;
	
КонецФункции // ПроверитьВозможностьРаспределенияОДНПоПоПоказаниямСчетчикаИНормеОбъекта()

// Распределяет количество по показаниям индивидуальных приборов учета и начислениям по норме текущего объекта.
//
Процедура РаспределитьКоличествоПоПоказаниямСчетчикаИНормеОбъекта(КоличествоРаспределения, ЛицевойСчет, ТекУслуга,
																  ИмяКолонкиКоличество, ИмяКолонкиСумма, 
																  СписокТарифовОПУ, ВидТарифа, 
																  ТаблицаРаспределения, ТаблицаПериодов)
	
	КоличествоТарифов = ?(СписокТарифовОПУ.Количество() = 0, 1, СписокТарифовОПУ.Количество());
	
	// Индивидуальный расход (по формуле № 3 постановления № 354) и 
	// расход на ОДН при отсутствии индивидуального расхода (если распределяется ОДН на л/с без ИПУ, при условии, 
	//                                                       что установлено не производить начисление по норме
	//                                                       или среднему значению при отсутствии действующего ПУ, а также, 
	//                                                       если текущие показания по ИПУ равны предыдущим) 
	// следует распределять по составным услугам и периодам с учетом настройки услуги 
	// "Распределять ограничения по видам тарифов прибора учета".
	//
	// Для этого:
	// 1. По каждому подпериоду собирается общий расход по дневному / ночному / пиковому тарифам.
	// 2. Расход по видам тарифа распределяется по составным услугам с учетом ограничения на данном подпериоде и
	//    с учетом настройки услуги "Распределять ограничения по видам тарифов прибора учета".
	// 3. Результат распределения записывается сразу в табличную часть.
	
	ЭтоРаспределениеИндивидуальногоРасхода = (ИмяКолонкиКоличество = "ПоказаниеСчЛС");
	Если ЭтоРаспределениеИндивидуальногоРасхода ИЛИ ПроверитьВозможностьРаспределенияОДНПоПоПоказаниямСчетчикаИНормеОбъекта(ЛицевойСчет) Тогда
		
		СтрокиПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, ТекУслуга));
		
		ВсегоДнейНачислений = 0;
		Для Каждого ТекущаяСтрока ИЗ СтрокиПериодов Цикл
			ДнейНачислено = (День(ТекущаяСтрока.КонецПериода) - День(ТекущаяСтрока.НачалоПериода) + 1);
			ВсегоДнейНачислений = ВсегоДнейНачислений + ДнейНачислено;
		КонецЦикла;
		
		СтрокиСИндРаспределениемПоВидамТарифа = ТаблицаРаспределения.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
		
		// 1. Пройдем по периодам начисления (общие периоды определили с учетом того, что периоды услуги по норме и сверхнормы одинаковые).
		Для Каждого ТекущаяСтрока ИЗ СтрокиПериодов Цикл
			
			Параметры = Новый Структура();
			Параметры.Вставить("Период",                  ТекущаяСтрока.КонецПериода);
			Параметры.Вставить("Организация",             Организация);
			Параметры.Вставить("Объект",                  ЛицевойСчет);
			Параметры.Вставить("СоставнаяУслуга",         ТекУслуга);
			
			ДнейНачислено            = (День(ТекущаяСтрока.КонецПериода) - День(ТекущаяСтрока.НачалоПериода) + 1);
			ВсегоДнейНачислений      = ?(ВсегоДнейНачислений = 0, 
											УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата), ВсегоДнейНачислений);
			КоэффициентРаспределения = ДнейНачислено / ВсегоДнейНачислений;
			
			Параметры.Вставить("Коэффициент", ДнейНачислено / УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата));
			Параметры.Вставить("ТарифностьСчетчика",      КоличествоТарифов);
			Параметры.Вставить("ДневноеПоказаниеОстаток", 0);
			Параметры.Вставить("НочноеПоказаниеОстаток",  0);
			Параметры.Вставить("ПиковоеПоказаниеОстаток", 0);
			
			Для Каждого ИндРаспределение ИЗ СтрокиСИндРаспределениемПоВидамТарифа Цикл
				
				Если ИндРаспределение.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий 
				 ИЛИ ИндРаспределение.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
					Параметры.Вставить("ДневноеПоказаниеОстаток", ИндРаспределение[ИмяКолонкиКоличество] * КоэффициентРаспределения);
				ИначеЕсли ИндРаспределение.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
					Параметры.Вставить("НочноеПоказаниеОстаток",  ИндРаспределение[ИмяКолонкиКоличество] * КоэффициентРаспределения);
				ИначеЕсли ИндРаспределение.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
					Параметры.Вставить("ПиковоеПоказаниеОстаток", ИндРаспределение[ИмяКолонкиКоличество] * КоэффициентРаспределения);
				КонецЕсли;
				
			КонецЦикла;
			
			// 2. Распределяем расход по составным услугам с учетом ограничения на данном подпериоде 
			//    и с учетом настройки услуги "Распределять ограничения по видам тарифов прибора учета".
			
			ТаблицаПоСоставнымУслугам = КВП_ПолучитьТаблицуНачисленияСоставныхУслугПоПриборамУчета(Параметры);
			Для Каждого ТекСтрокаРаспределенияПоСоставнымУслугам Из ТаблицаПоСоставнымУслугам Цикл
				
				СтруктураОтбора = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
				СтруктураОтбора.Вставить("ЛицевойСчет",     ЛицевойСчет);
				СтруктураОтбора.Вставить("СоставнаяУслуга", ТекСтрокаРаспределенияПоСоставнымУслугам.СоставнаяУслуга);
				СтруктураОтбора.Вставить("ВидТарифа",       ?(ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий, ВидТарифа, ТекСтрокаРаспределенияПоСоставнымУслугам.ВидТарифа));
				СтруктураОтбора.Вставить("НачалоПериода",   ТекущаяСтрока.НачалоПериода);
				СтруктураОтбора.Вставить("КонецПериода",    ТекущаяСтрока.КонецПериода);
				
				СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
				
				Если СтрокиТЧ.Количество() = 0
				   И Услуга.ВариантРаспределенияРасходаКПУПоТарифам = 
				   		Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
				   И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = 
				   		Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоОбщемуТарифу Тогда
					
					СтруктураОтбора = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
					СтруктураОтбора.Вставить("ЛицевойСчет",     ЛицевойСчет);
					СтруктураОтбора.Вставить("СоставнаяУслуга", ТекСтрокаРаспределенияПоСоставнымУслугам.СоставнаяУслуга);
					СтруктураОтбора.Вставить("ВидТарифа",       Перечисления.КВП_ВидыТарифов.Общий);
					СтруктураОтбора.Вставить("НачалоПериода",   ТекущаяСтрока.НачалоПериода);
					СтруктураОтбора.Вставить("КонецПериода",    ТекущаяСтрока.КонецПериода);
					
					СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
				КонецЕсли;
				
				Для Каждого ТекСтрокаТЧ ИЗ СтрокиТЧ Цикл
					ТекСтрокаТЧ[ИмяКолонкиКоличество] = 
						ТекСтрокаТЧ[ИмяКолонкиКоличество] + ТекСтрокаРаспределенияПоСоставнымУслугам.Количество;
					ТекСтрокаТЧ[ИмяКолонкиСумма]      = 
						ТекСтрокаТЧ[ИмяКолонкиСумма] + ТекСтрокаТЧ[ИмяКолонкиКоличество] * ТекСтрокаТЧ.Тариф;
				КонецЦикла;
			
			КонецЦикла; // Цикл по составным услугам

		КонецЦикла; // Цикл по периодам
		
		Для Каждого ИндРаспределение ИЗ СтрокиСИндРаспределениемПоВидамТарифа Цикл
			
			ИндРаспределение[ИмяКолонкиКоличество] = 0;
			
		КонецЦикла;
		
	Иначе // Распределим расход на ОДН.
		
		ПериодыРаспределения = ОпределитьПериодыДляРаспределенияОДН(ТекУслуга);
		
		Для Каждого ТекПериод ИЗ ПериодыРаспределения Цикл 
			ТекПериод.ДнейНачислено = (День(ТекПериод.КонецПериода) - День(ТекПериод.НачалоПериода) + 1);
		КонецЦикла;
		
		ПериодыРаспределения.Свернуть("ЛицевойСчет", "ДнейНачислено");
		
		СтрокиПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, ТекУслуга));
		
		ТаблицаСтрок   = Новый ТаблицаЗначений;
		ТаблицаСтрок.Колонки.Добавить("СоставнаяУслуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаСтрок.Колонки.Добавить("ВидТарифа",       Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		ТаблицаСтрок.Колонки.Добавить("ПоказаниеСчЛС",   Новый ОписаниеТипов("Число"));
		ТаблицаСтрок.Колонки.Добавить("Тарифность",      Новый ОписаниеТипов("Число"));
		ТаблицаСтрок.Колонки.Добавить("Порядок",         Новый ОписаниеТипов("Число"));
		ТаблицаСтрок.Колонки.Добавить("КоличествоРаспределенияПомещение", Новый ОписаниеТипов("Число"));
		ТаблицаСтрок.Колонки.Добавить("КоличествоРаспределенияПодъезд",   Новый ОписаниеТипов("Число"));
		ТаблицаСтрок.Колонки.Добавить("КоличествоРаспределенияЗдание",    Новый ОписаниеТипов("Число"));

		
		ПредСтрокиТЧ = Новый Массив;
		
		// Пройдем по периодам начисления (общие периоды определили с учетом того, что периоды услуги по норме и сверхнормы одинаковые).
		Для Каждого ТекущаяСтрокаПериода ИЗ СтрокиПериодов Цикл
			
			ДнейНачислено       = (День(ТекущаяСтрокаПериода.КонецПериода) - День(ТекущаяСтрокаПериода.НачалоПериода) + 1);
			ВсегоДнейНачислений = 0;
			ТаблицаСтрок.Очистить();
			
			СтруктураОтбора = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
			СтруктураОтбора.Вставить("ЛицевойСчет",   ЛицевойСчет);
			СтруктураОтбора.Вставить("Услуга",        ТекУслуга);
			СтруктураОтбора.Вставить("НачалоПериода", ТекущаяСтрокаПериода.НачалоПериода);
			СтруктураОтбора.Вставить("КонецПериода",  ТекущаяСтрокаПериода.КонецПериода);
			
			СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
			
			// Заполним таблицу долей для распределения ОДН по видам тарифа.
			Для Каждого ТекущаяСтрока ИЗ СтрокиТЧ Цикл
				
				// проверка настройки услуги "СпособРаспределенияПоказанийНаЛицевыеСчета"
				Если ПроверитьСпособРаспределенияПоказанийНаЛицевыеСчета(ТекущаяСтрока, ТекУслуга) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Порядок = ОпределитьПорядокВидаТарифа(ТекущаяСтрока.ВидТарифа);
				
			КонецЦикла; // Цикл по строкам ТЧ
			
			Если ТаблицаСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор  = Новый Структура("ЛицевойСчет", ЛицевойСчет);
			Строки = ПериодыРаспределения.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				ВсегоДнейНачислений = Строки[0].ДнейНачислено;
			КонецЕсли;
			
			ТаблицаРасходаПоТарифам = ТаблицаСтрок.Скопировать();
			ТаблицаРасходаПоТарифам.Свернуть("СоставнаяУслуга, ВидТарифа", 
											  "ПоказаниеСчЛС, КоличествоРаспределенияПомещение, КоличествоРаспределенияПодъезд, КоличествоРаспределенияЗдание");
			
			ВсегоДнейНачислений     = 
				?(ВсегоДнейНачислений = 0, УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата), ВсегоДнейНачислений);
			КоличествоОДНПодпериода = КоличествоРаспределения * ДнейНачислено / ВсегоДнейНачислений;
			
			// Тарифность коллективного и индивидуальных приборов учета не совпадают.
			Если ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
				
				ТаблицаДолей = ТаблицаСтрок.Скопировать();
				ТаблицаДолей.Свернуть("ВидТарифа, Порядок", "ПоказаниеСчЛС");
				
				МассивДолей = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоОДНПодпериода, 
				                                                           ТаблицаДолей.ВыгрузитьКолонку("ПоказаниеСчЛС"), мТочностьОбъемаНачислений, Истина);
				Если НЕ МассивДолей = Неопределено Тогда
					ТаблицаДолей.ЗагрузитьКолонку(МассивДолей, "ПоказаниеСчЛС");
				Иначе
					ТаблицаДолей.Очистить();
					НоваяСтрока = ТаблицаДолей.Добавить();
					НоваяСтрока.ВидТарифа     = ВидТарифа;
					НоваяСтрока.ПоказаниеСчЛС = КоличествоОДНПодпериода;
				КонецЕсли;
				
				ТаблицаДолей.Сортировать("Порядок");
				
			Иначе
				
				ТаблицаДолей = ТаблицаСтрок.Скопировать();
				ТаблицаДолей.Очистить();
				
				НоваяСтрока = ТаблицаДолей.Добавить();
				НоваяСтрока.ВидТарифа     = ВидТарифа;
				НоваяСтрока.ПоказаниеСчЛС = КоличествоОДНПодпериода;
				
			КонецЕсли;
			
			РаспределитьРасходПоВидамТарифа(ЛицевойСчет, ТекУслуга, ТекущаяСтрокаПериода, ИмяКолонкиКоличество,
											ИмяКолонкиСумма, КоличествоТарифов, ТаблицаДолей, ТаблицаРасходаПоТарифам, 
											ТаблицаРаспределения, ВидТарифа, ДнейНачислено, ВсегоДнейНачислений);
			
		КонецЦикла; // Цикл по периодам
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьКоличествоПоПоказаниямСчетчикаИНормеОбъекта()

// Функция возвращает числовое значение порядка тарифа в зависимости от вида тарифа.
//
Функция ОпределитьПорядокВидаТарифа(ВидТарифа)
	
	Если ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
		Порядок = 1;
	ИначеЕсли ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
		Порядок = 2;
	ИначеЕсли ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
		Порядок = 3;
	ИначеЕсли ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
		Порядок = 4;
	Иначе
		Порядок = 5;
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции // ОпределитьПорядокВидаТарифа()

// Функция определяет периоды, на которые необходимо распределять ОДН с учетом настроек услуги.
//
Функция ОпределитьПериодыДляРаспределенияОДН(ТекУслуга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ЛицевойСчет,
	|	ТабличнаяЧасть.НачалоПериода,
	|	ТабличнаяЧасть.КонецПериода,
	|	ТабличнаяЧасть.СостояниеПУ,
	|	ТабличнаяЧасть.ФормулаРасчета
	|ПОМЕСТИТЬ врТаблица
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Сторно
	|	И НЕ ТабличнаяЧасть.НачислениеПоПовышающемуКоэффициенту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодов.ЛицевойСчет,
	|	ТаблицаПериодов.НачалоПериода,
	|	ТаблицаПериодов.КонецПериода
	|ИЗ
	|	врТаблица КАК ТаблицаПериодов
	|ГДЕ
	|	&Условие";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть",               УслугиПоПоказаниямПУ);
	Запрос.УстановитьПараметр("СпособРаспределенияПоказаний", ТекУслуга.СпособРаспределенияПоказанийНаЛицевыеСчета);
	
	Если ТекУслуга.СпособРаспределенияПоказанийНаЛицевыеСчета = 
		Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаБезИПУ Тогда
		УсловиеЗамены = "ТаблицаПериодов.СостояниеПУ = Значение(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
		
		Если ТекУслуга.ПриОтсутствииПоказанийСчетчикНеУстановлен Тогда
			УсловиеЗамены = УсловиеЗамены + "
			| ИЛИ ТаблицаПериодов.СостояниеПУ = Значение(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)";
		КонецЕсли;
		
	ИначеЕсли ТекУслуга.СпособРаспределенияПоказанийНаЛицевыеСчета = 
		Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ Тогда
		УсловиеЗамены = "НЕ ТаблицаПериодов.СостояниеПУ = Значение(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)";
		
		Если ТекУслуга.ИспользоватьФормулы3и14 Тогда
			УсловиеЗамены = УсловиеЗамены + "
			| ИЛИ ТаблицаПериодов.ФормулаРасчета = " + Строка(Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14());
		КонецЕсли;
	Иначе
		
		УсловиеЗамены = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", УсловиеЗамены);
	
	ПериодыРаспределения = Запрос.Выполнить().Выгрузить();
	ПериодыРаспределения.Колонки.Добавить("ДнейНачислено", Новый ОписаниеТипов("Число"));
	
	Возврат ПериодыРаспределения;

КонецФункции // ОпределитьПериодыДляРаспределенияОДН()

// Процедура распределяет расход по коллективному счетчику по видам тарифов и 
// по составным услугам с учетом ограничения по тарифам на подпериоде.
Процедура РаспределитьРасходПоВидамТарифа(ЛицевойСчет, ТекУслуга, ТекущаяСтрока, ИмяКолонкиКоличество,
											ИмяКолонкиСумма, КоличествоТарифов, ТаблицаДолей, ТаблицаРасходаПоТарифам,
											ТаблицаРаспределения, ВидТарифа, ДнейНачислено, ВсегоДнейНачислений);
	
	РасходОДНПоНорме = 0;
	
	Для Каждого ТекВидТарифа Из ТаблицаДолей Цикл
		
		Если ТекВидТарифа.ПоказаниеСчЛС > 0 Тогда
			
			// При распределении положительного объема ОДН обход составных услуг идет в прямом 
			// порядке (в каком они заданы в услуге). При этом объем распределения на услугу с 
			// ограничением по норме потребления не должен превышать размер ограничения.
			
			Для Каждого СоставнаяУслуга ИЗ ТекУслуга.СоставныеУслуги Цикл
			
				Если ТекВидТарифа.ПоказаниеСчЛС = 0 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("ЛицевойСчет, 
																			|СоставнаяУслуга, 
																			|ВидТарифа, 
																			|НачалоПериода, 
																			|КонецПериода", 
																			 ЛицевойСчет, 
																			 СоставнаяУслуга.Услуга, 
																			 ТекВидТарифа.ВидТарифа,
																			 ТекущаяСтрока.НачалоПериода, 
																			 ТекущаяСтрока.КонецПериода));
				Если СтрокиТЧ.Количество() = 0
				   И Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
				   И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоОбщемуТарифу Тогда
					СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("ЛицевойСчет, 
																			|СоставнаяУслуга, 
																			|ВидТарифа, 
																			|НачалоПериода, 
																			|КонецПериода", 
																			 ЛицевойСчет, 
																			 СоставнаяУслуга.Услуга, 
																			 Перечисления.КВП_ВидыТарифов.Общий,
																			 ТекущаяСтрока.НачалоПериода, 
																			 ТекущаяСтрока.КонецПериода));
				КонецЕсли;
				
				ЭтоУслугаСОграничением = Ложь;
				Если СоставнаяУслуга.ВидОграничения = Перечисления.КВП_ВидыОграниченийСоставныхУслуг.НормаПотребления Тогда
					
					Отбор  = Новый Структура("СоставнаяУслуга", СоставнаяУслуга.Услуга);
					Строки = ТаблицаРасходаПоТарифам.НайтиСтроки(Отбор);
					ОбщийИндРасходВсехТарифовИПУ = 0; // Общий инд.расход всех тарифов, кроме общего, используется 
													  // для определения размера ограничения на один вид тарифа в случае распределения 
													  // "пропорционально фактическому расходу", т.к. при распределении ОДН 
													  // на нормативную услугу и определении ограничения на один вид тарифа
													  // учитывается та же пропорция, что и при распределении индивидуального расхода. 
													  
					ОбщийИндРасходВсехТарифов    = 0; // Используется для определения остатка ограничения 
													  // для составной услуги с ограничением.
					Для Каждого ТекСтрока ИЗ Строки Цикл
						ОбщийИндРасходВсехТарифов = ОбщийИндРасходВсехТарифов 
														+ ТекСтрока.ПоказаниеСчЛС 
														+ ТекСтрока.КоличествоРаспределенияПомещение 
														+ ТекСтрока.КоличествоРаспределенияПодъезд 
														+ ТекСтрока.КоличествоРаспределенияЗдание;
						Если ТекСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
							Продолжить;
						КонецЕсли;
						ОбщийИндРасходВсехТарифовИПУ = ОбщийИндРасходВсехТарифовИПУ + ТекСтрока.ПоказаниеСчЛС;
					КонецЦикла;
					
					Отбор  = Новый Структура("СоставнаяУслуга, ВидТарифа", СоставнаяУслуга.Услуга, ТекВидТарифа.ВидТарифа);
					Строки = ТаблицаРасходаПоТарифам.НайтиСтроки(Отбор);
					ИндивидуальныйРасходТарифа = 0;
					Если Строки.Количество() > 0 Тогда
						ИндивидуальныйРасходТарифа = Строки[0].ПоказаниеСчЛС;
					КонецЕсли;
					
					ЭтоУслугаСОграничением = Истина;
					// Получим количество ограничения для услуги.
					КоличествоОграничения = КВП_ПолучитьКоличествоОграниченияСоставнойУслуги(ТекущаяСтрока.КонецПериода,
																							 Организация,
																							 ЛицевойСчет,
																							 ТекУслуга,
																							 СоставнаяУслуга.ВидОграничения,
																							 СоставнаяУслуга.РазмерОграничения);
					
					Если КоличествоОграничения > 0 Тогда
						// При расчете ограничения учитывается количество дней начисления услуги (кол-во дней в подпериоде).
						РазмерОграничения = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоОграничения * ДнейНачислено / УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата), мТочностьОбъемаНачислений);
						
						// Получим количество ограничения на один вид тарифа.
						КоличествоОграниченияТарифа = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РазмерОграничения / ?(ТекущаяСтрока.Тарифность = 0, 
																				КоличествоТарифов, 
																				ТекущаяСтрока.Тарифность), мТочностьОбъемаНачислений);
						
						// Остаток от размера ограничения по всем тарифам.
						ОбщийОстатокОграничения = РазмерОграничения - ОбщийИндРасходВсехТарифов - РасходОДНПоНорме;
						Если ОбщийОстатокОграничения <= 0 Тогда
							ПредСтрокиТЧ = СтрокиТЧ;
							Продолжить;
						КонецЕсли;
						
						// !!! НУЖНА СОРТИРОВКА ПО видам тарифа, чтобы Общий вид тарифа был в конце.
						Если ТекВидТарифа.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
							КоличествоОграничения = Мин(ОбщийОстатокОграничения, ТекВидТарифа.ПоказаниеСчЛС);
						Иначе
							
							// 1) Поровну без ограничением по фактическому расходу.
							// 2) Поровну с ограничением по фактическому расходу.
							Если ТекУслуга.СпособРаспределенияОграниченийПоВидамТарифов = 
								Перечисления.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПоровнуБезОграниченияПоФактическомуРасходу
							 ИЛИ ТекУслуга.СпособРаспределенияОграниченийПоВидамТарифов = 
								Перечисления.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПоровнуСОграничениемПоФактическомуРасходу Тогда
								
								КоличествоОграничения = Мин(Макс(КоличествоОграниченияТарифа - ИндивидуальныйРасходТарифа, 0), 
															ТекВидТарифа.ПоказаниеСчЛС);
								КоличествоОграничения = Мин(КоличествоОграничения, ОбщийОстатокОграничения);
								
								// Поровну с ограничением по фактическому расходу
								Если ТекУслуга.СпособРаспределенияОграниченийПоВидамТарифов = 
									Перечисления.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПоровнуСОграничениемПоФактическомуРасходу Тогда
									
									// После того как определили расход с учетом ограничения по тарифу, определяем
									// какие будут "излишки" ограничения (нормы) после распределения по др.видам тарифа.
									ОбщийОстатокОграничения = ОбщийОстатокОграничения - КоличествоОграничения;
									Если ОбщийОстатокОграничения > 0 Тогда
										
										// Для этого:
										//  1) считаем расход с учетом ограничения для др.видов тарифа, распределение по которым еще не выполнено,
										//  2) уменьшаем на него общий остаток ограничения.
										
										Если ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
											ТаблицаСРасходомПоВидамТарифа = ТаблицаДолей;
											ИмяКолонкиСРасходом = "ПоказаниеСчЛС";
										Иначе
											ТаблицаСРасходомПоВидамТарифа = ТаблицаРаспределения;
											ИмяКолонкиСРасходом = ИмяКолонкиКоличество;
										КонецЕсли;
										
										Для Каждого ТекСтрока Из ТаблицаСРасходомПоВидамТарифа Цикл 
											Если ТекСтрока.ВидТарифа = ТекВидТарифа.ВидТарифа 
											 ИЛИ ОпределитьПорядокВидаТарифа(ТекСтрока.ВидТарифа) < ОпределитьПорядокВидаТарифа(ТекВидТарифа.ВидТарифа) Тогда
												Продолжить;
											КонецЕсли;
											Отбор.Вставить("ВидТарифа", ТекСтрока.ВидТарифа);
											Строки = ТаблицаРасходаПоТарифам.НайтиСтроки(Отбор);
											ИндРасходТекТарифа = 0;
											Если Строки.Количество() > 0 Тогда
												ИндРасходТекТарифа = Строки[0].ПоказаниеСчЛС;
											КонецЕсли;
											ОбщийОстатокОграничения = ОбщийОстатокОграничения 
																		- Мин(Макс(КоличествоОграниченияТарифа - ИндРасходТекТарифа, 0), 
																			  ТекСтрока[ИмяКолонкиСРасходом] * ДнейНачислено / ВсегоДнейНачислений);
										КонецЦикла; // Цикл по таблице расхода
										
										// Если "излишки" есть, то используем их по текущему виду тарифу.
										Если ОбщийОстатокОграничения > 0 Тогда
											КоличествоОграничения = КоличествоОграничения 
																		+ Мин(ТекВидТарифа.ПоказаниеСчЛС - КоличествоОграничения, ОбщийОстатокОграничения);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							// 3) Пропорционально фактическому расходу.
							Иначе 
								
								// При распределении ОДН на нормативную услугу и определении ограничения на один вид тарифа
								// учитывается та же пропорция, что и при распределении индивидуального расхода. 
								Если НЕ ОбщийИндРасходВсехТарифовИПУ = 0 Тогда
									КоличествоОграниченияТарифа = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РазмерОграничения * ИндивидуальныйРасходТарифа / ОбщийИндРасходВсехТарифовИПУ, мТочностьОбъемаНачислений);
								КонецЕсли;
								
								КоличествоОграничения = Мин(Макс(КоличествоОграниченияТарифа - ИндивидуальныйРасходТарифа, 0),
															ТекВидТарифа.ПоказаниеСчЛС);
								
							КонецЕсли;
							
							РасходОДНПоНорме = РасходОДНПоНорме + КоличествоОграничения;
						КонецЕсли;
						
					КонецЕсли;
					
					ПредСтрокиТЧ = СтрокиТЧ;
					
				КонецЕсли;
				
				// Для составной услуги с ограничением записывается объем с учетом ограничения,
				// на составную услугу без ограничения записывается весь оставшийся объем.
				Количество = ?(ЭтоУслугаСОграничением, КоличествоОграничения, ТекВидТарифа.ПоказаниеСчЛС);
				Если Количество > 0 Тогда
					
					ДобавитьСтрокуВТабличнуюЧастьУслугПоПоказаниямПУ(Количество, 
																	 СтрокиТЧ, 
																	 ?(ПредСтрокиТЧ = Неопределено, СтрокиТЧ, ПредСтрокиТЧ), 
																	 СоставнаяУслуга, 
																	 ИмяКолонкиКоличество,
																	 ИмяКолонкиСумма);
					
					ТекВидТарифа.ПоказаниеСчЛС = ТекВидТарифа.ПоказаниеСчЛС - Количество;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по составным услугам
		
		Иначе //Если ТекВидТарифа.ПоказаниеСчЛС < 0 Тогда
			
			// При распределении отрицательного расхода ОДН обход составных услуг идет в обратном 
			// порядке, начиная с максимального размера тарифа. При этом общий размер начисления, 
			// включая индивидуальные и общедомовые начисления, не должен быть меньше нуля.
			
			Знак = -1;
			КоличествоСоставныхУслуг = ТекУслуга.СоставныеУслуги.Количество();
			Пока КоличествоСоставныхУслуг > 0 Цикл
				
				Если ТекВидТарифа.ПоказаниеСчЛС = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоСоставныхУслуг = КоличествоСоставныхУслуг - 1;
				СоставнаяУслуга = ТекУслуга.СоставныеУслуги[КоличествоСоставныхУслуг];
				
				СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("ЛицевойСчет, 
																			|СоставнаяУслуга, 
																			|ВидТарифа, 
																			|НачалоПериода, 
																			|КонецПериода", 
																			 ЛицевойСчет, 
																			 СоставнаяУслуга.Услуга, 
																			 ТекВидТарифа.ВидТарифа,
																			 ТекущаяСтрока.НачалоПериода, 
																			 ТекущаяСтрока.КонецПериода));
				Если СтрокиТЧ.Количество() = 0
				   И Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
				   И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоОбщемуТарифу Тогда
					СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("ЛицевойСчет, 
																			|СоставнаяУслуга, 
																			|ВидТарифа, 
																			|НачалоПериода, 
																			|КонецПериода", 
																			 ЛицевойСчет, 
																			 СоставнаяУслуга.Услуга, 
																			 Перечисления.КВП_ВидыТарифов.Общий,
																			 ТекущаяСтрока.НачалоПериода, 
																			 ТекущаяСтрока.КонецПериода));
				КонецЕсли;
				
				Отбор  = Новый Структура("СоставнаяУслуга, ВидТарифа", СоставнаяУслуга.Услуга, ТекВидТарифа.ВидТарифа);
				Строки = ТаблицаРасходаПоТарифам.НайтиСтроки(Отбор);
				ИндивидуальныйРасходТарифа = 0;
				Если Строки.Количество() > 0 Тогда
					ИндивидуальныйРасходТарифа = Строки[0].ПоказаниеСчЛС;
				КонецЕсли;
				
				Количество = Мин(ИндивидуальныйРасходТарифа, ТекВидТарифа.ПоказаниеСчЛС * Знак) * Знак;
					
				Если НЕ Количество = 0 Тогда
					
					Для Каждого ТекСтрокаТЧ ИЗ СтрокиТЧ Цикл
						ТекСтрокаТЧ[ИмяКолонкиКоличество] = ТекСтрокаТЧ[ИмяКолонкиКоличество] + Количество;
						ТекСтрокаТЧ[ИмяКолонкиСумма]      = ТекСтрокаТЧ[ИмяКолонкиСумма] + ТекСтрокаТЧ[ИмяКолонкиКоличество] * ТекСтрокаТЧ.Тариф;
					КонецЦикла;
					
					ТекВидТарифа.ПоказаниеСчЛС = ТекВидТарифа.ПоказаниеСчЛС - Количество;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по составным услугам
			
		КонецЕсли;
		
	КонецЦикла; // Цикл по видам тарифа
	
КонецПроцедуры // РаспределитьРасходПоВидамТарифа()

// Процедура добавляет строку в табличную часть услуг по показаниям ПУ.
//
Процедура ДобавитьСтрокуВТабличнуюЧастьУслугПоПоказаниямПУ(Количество, СтрокиТЧ, ПредСтрокиТЧ, СоставнаяУслуга, 
															ИмяКолонкиКоличество, ИмяКолонкиСумма)
	
	Если СтрокиТЧ.Количество() = 0 Тогда
		
		ПервыйОбход = Истина;
		ПредСтрока  = Неопределено;
		Для Каждого ТекСтрокаТч Из ПредСтрокиТЧ Цикл
			
			Если ПервыйОбход Тогда
				ПервыйОбход = Ложь;
			Иначе
				
				Если ПредСтрока.ЛицевойСчет = ТекСтрокаТч.ЛицевойСчет И ПредСтрока.ВидТарифа = ТекСтрокаТч.ВидТарифа
					И ПредСтрока.Тариф = ТекСтрокаТч.Тариф И ПредСтрока.Услуга = ТекСтрокаТч.Услуга
					И ПредСтрока.Договор = ТекСтрокаТч.Договор И ПредСтрока.ТипРасчета = ТекСтрокаТч.ТипРасчета
					И ПредСтрока.ФормулаРасчета = ТекСтрокаТч.ФормулаРасчета
					И ПредСтрока.НачалоПериода = ТекСтрокаТч.НачалоПериода И ПредСтрока.КонецПериода = ТекСтрокаТч.КонецПериода
					И ПредСтрока.ТолькоДляРаспределения = ТекСтрокаТч.ТолькоДляРаспределения Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = УслугиПоПоказаниямПУ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТч, "ЛицевойСчет, ВидТарифа, Тариф, Услуга,
																|Договор, ТипРасчета, ФормулаРасчета, Тарифность, НачалоПериода, КонецПериода,
																|СостояниеПУ, ТолькоДляРаспределения");
			НоваяСтрока.СоставнаяУслуга = СоставнаяУслуга.Услуга;
			НоваяСтрока.Тариф           = ПолучитьТарифПоЛицевомуСчету(ТекСтрокаТч.КонецПериода, 
																		Организация,
																		СоставнаяУслуга.Услуга,
																		ТекСтрокаТч.ЛицевойСчет, 
																		ТекСтрокаТч.ВидТарифа);
			СтрокиТЧ.Добавить(НоваяСтрока);
			ПредСтрока = ТекСтрокаТч;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекСтрокаТЧ ИЗ СтрокиТЧ Цикл
		ТекСтрокаТЧ[ИмяКолонкиКоличество] = ТекСтрокаТЧ[ИмяКолонкиКоличество] + Количество;
		ТекСтрокаТЧ[ИмяКолонкиСумма]      = ТекСтрокаТЧ[ИмяКолонкиСумма] + ТекСтрокаТЧ[ИмяКолонкиКоличество] * ТекСтрокаТЧ.Тариф;
		// Если в массиве "СтрокиТЧ" оказалось несколько строк с одинаковым видом тарифа,
		// то распределим весь объем ОДН на первую строку массива.
		Прервать;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуВТабличнуюЧастьУслугПоПоказаниямПУ()

// Процедура добавляет пустую строку с тарифом в таблицу по показаниям ПУ.
//
Процедура ДобавитьПустуюСтрокуСТарифом(СтрокаПоказания, СписокТарифовОПУ, СтрокиТабличнойЧастиПоОбъекту, УслугиПоПоказаниямПУБезСторно)

	СтрокаПоказания.ТолькоДляРаспределения = Истина;
	
	Для Каждого ТекВидТарифа ИЗ СписокТарифовОПУ Цикл
		
		// Определяем, есть ли строки с данным видом тарифа по объекту в табличной части,
		// если есть, тогда добавлять строку с текущим видом тарифа не нужно.
		ЕстьВидТарифаПоОбъекту = Ложь;
		Для Каждого ТекущаяСтрокаПоОбъекту Из СтрокиТабличнойЧастиПоОбъекту Цикл
			Если ТекущаяСтрокаПоОбъекту.ВидТарифа = ТекВидТарифа.Значение Тогда
				ЕстьВидТарифаПоОбъекту = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьВидТарифаПоОбъекту Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = УслугиПоПоказаниямПУ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказания);
		НоваяСтрока.ВидТарифа = ТекВидТарифа.Значение;
		НоваяСтрока.ТолькоДляРаспределения = Истина;
		НоваяСтрока.ПоказаниеСчЛС              = 0;
		НоваяСтрока.Сумма                      = 0;
		НоваяСтрока.УчетныйИндивидуальныйОбъем = 0;
		НоваяСтрока.Тариф                      = ПолучитьТарифПоЛицевомуСчету(НоваяСтрока.КонецПериода,
																Организация,
																?(ЗначениеЗаполнено(НоваяСтрока.СоставнаяУслуга), 
																	НоваяСтрока.СоставнаяУслуга, 
																	НоваяСтрока.Услуга),
																НоваяСтрока.ЛицевойСчет,
																ТекВидТарифа.Значение);
		
		НоваяСтрокаСлужебная = УслугиПоПоказаниямПУБезСторно.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСлужебная, НоваяСтрока);
		НоваяСтрокаСлужебная.ЭтоДобавленнаяСтрока = Истина;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьПустуюСтрокуСТарифом()

// Рассчитывает показания и суммы начислений для л/с по услуге.
//
// Параметры
//  нет
//
Процедура РассчитатьПоказания() Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Прибор учета является коллективным, если:
	//  - установлен на здание;
	//  - установлен на подъезд;
	//  - установлен на помещение или на группу помещений,
	//    но при условии наличия индивидуального прибора учета у одного из помещений или лицевых счетов.
	
	// 1. Очистим таблицу счетчиков от общедомовых приборов учета. Полная очистка ТЧ
	// производится при заполнении документа, при перерасчете нужно чистить только счетчики ОПУ.
	СтрокиДляУдаления = Счетчики.НайтиСтроки(Новый Структура("ОбщедомовойПУ", Истина));
	Для Каждого ТекСтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Счетчики.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	// 2. Очищаем таблицу объектов, по которым распределен ОДН.
	ОбъектыСРаспределеннымРасходомОДН.Очистить();
	
	// 3. Заполнение учетного индивидуального объема.
	ДополнитьТаблицуУслугПоПоказаниямДаннымиУчетногоИндивидуальногоОбъема();
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("----- Начало распределения ОДН (" + ТекущаяДатаСеанса() + ") -----");
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Вариант распределения по тарифам: " + Услуга.ВариантРаспределенияРасходаКПУПоТарифам);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("При отсутствии счетчика считается, что он не установлен: " + Услуга.ПриОтсутствииПоказанийСчетчикНеУстановлен);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Лицевые счета для распределения: " + Услуга.СпособРаспределенияПоказанийНаЛицевыеСчета);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Способ распределения на лицевые счета: " + Услуга.СпособРаспределенияУслугиПоСчетчику);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Распределение отрицательного расхода разрешено: " + Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Способ распределения отрицательного расхода на лицевые счета: " + Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику);
	
	// Получение таблицы объектов, она понадобиться дальше.
	ТаблицаОбъектов = ПолучитьТаблицуОбъектовРасчетаПоказанийПУ(УслугиПоПоказаниямПУ.ВыгрузитьКолонку("ЛицевойСчет"));
	
	// 4. Обнулим колонки распределения показаний в строках ТЧ.
	Для Каждого СтрокаПоказания ИЗ УслугиПоПоказаниямПУ Цикл
		
		СтрокаПоказания.КоличествоРаспределенияПомещение = 0;
		СтрокаПоказания.КоличествоРаспределенияПодъезд   = 0;
		СтрокаПоказания.КоличествоРаспределенияЗдание    = 0;
		СтрокаПоказания.СуммаРаспределения               = 0;
		
		// Индивидуальное потребление по формуле №3 постановления №354 определяется по показаниям
		// коллективного ПУ и рассчитывается вместе с ОДН, поэтому перед расчетом его тоже обнуляем.
		// Также обнуляем индивидуальное потребление при расчете по постановлению №1708, в случаях когда:
		// 1. в МКД нет ОДПУ (формулы 2(3) и 2(5)),
		// 2. в МКД есть ОДПУ, но нет ИПУ (формулы 3 и 3(6)),
		// 3. в МКД есть ОДПУ, но ИПУ установлены не у всех (формулы 3(1) и 3(7)). Здесь также проверяется
		// тип расчета для того, чтобы не обнулять показания для строк, в которых прибор находится на поверке
		// утрачен или вышел из строя. Если прибор находится на поверке, утрачен или вышел из строя, то расчет
		// производится по настройкам услуги или по нормативу, а не по формуле 3(7).
		// На сегодняшний день в этих случаях индивидуальное потребление рассчитывается вместе с ОДН.
		Если СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14()
			Или СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()
			Или СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708()
			Или (СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()
			И СтрокаПоказания.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление()
			И СтрокаПоказания.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ) Тогда
			СтрокаПоказания.ПоказаниеСчЛС                = 0;
			СтрокаПоказания.Сумма                        = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	// 5. Добавим недостающие тарифы для распределения показаний.
	СтруктураСоответствия   = ПолучитьСтруктуруСоответствияТарифностиКоллективногоПУ(ТаблицаОбъектов);
	СписокТарифовОПУ        = СтруктураСоответствия.СписокТарифов;
	ТарифностьСоответствует = СтруктураСоответствия.СоответствиеТарифности;
	
	// Из таблицы начислений документа выделим только строки по начислениям без сторно
	// и без начисления по повышающим коэффициентам, так как на эти строки распределение не производится.
	СтрокиНачисленийБезСторно = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов());
	УслугиПоПоказаниямПУБезСторно = УслугиПоПоказаниямПУ.Выгрузить(СтрокиНачисленийБезСторно);
	
	// В служебной колонке таблицы значений отмечаем добавленные строки для того,
	// чтобы при обходе таблицы иметь возможность не анализировать (пропускать при обходе)
	// ранее добавленные строки.
	УслугиПоПоказаниямПУБезСторно.Колонки.Добавить("ЭтоДобавленнаяСтрока", Новый ОписаниеТипов("Булево"));
	
	// Определим временную свернутую таблицу индивидуальных начислений.
	врТаблицаИндивидуальныхНачислений = УслугиПоПоказаниямПУБезСторно.Скопировать(, "ЛицевойСчет, Услуга, НачалоПериода, ПоказаниеСчЛС");
	врТаблицаИндивидуальныхНачислений.Свернуть("ЛицевойСчет, Услуга, НачалоПериода","ПоказаниеСчЛС");
	
	// Бежим по временной таблице начислений и добавляем недостающие тарифы. При этом поиск
	// и проверка строк выполняется по временной таблице, так как в ней нет сторно,
	// а добавление новых строк осуществляется в табличную часть документа, и в временную таблицу.
	// Раньше обход и добавление выполнялось по табличной части, получалось, что после добавления строки
	// в конце выполнялся также ее обход и проверка, хотя в этом нет необходимости.
	Для Каждого СтрокаПоказания ИЗ УслугиПоПоказаниямПУБезСторно Цикл
		
		Если СтрокаПоказания.ЭтоДобавленнаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим недостающие тарифы для распределения показаний ОПУ только тогда, когда:
		// А. Вариант распределения по тарифам - "распределение по видам тарифа";
		// Б. Тарифности ОПУ и КПУ соответствуют;
		// В. Вариант распределения по тарифам на Л/С при отсутствии начисления по ИПУ - "по тарифам соответствующим ОПУ".
		//
		Если СтрокаПоказания.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий
		   И ТарифностьСоответствует
		   И Услуга.ВариантРаспределенияРасходаКПУПоТарифам = 
		   		Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа
		   И Услуга.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = 
		   		Перечисления.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПоТарифамСоответствующимОПУ
		   И НЕ СтрокаПоказания.ТолькоДляРаспределения Тогда
			
			Если СтрокаПоказания.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				Для Каждого ТекСоставнаяУслуга ИЗ СтрокаПоказания.Услуга.СоставныеУслуги Цикл
					СтрокиТабличнойЧастиПоОбъекту = УслугиПоПоказаниямПУБезСторно.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, СоставнаяУслуга", 
																									СтрокаПоказания.ЛицевойСчет, 
																									СтрокаПоказания.Услуга, 
																									ТекСоставнаяУслуга.Услуга));
					ДобавитьПустуюСтрокуСТарифом(СтрокаПоказания, СписокТарифовОПУ, СтрокиТабличнойЧастиПоОбъекту, УслугиПоПоказаниямПУБезСторно);
				КонецЦикла;
			Иначе
				СтрокиТабличнойЧастиПоОбъекту = УслугиПоПоказаниямПУБезСторно.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", 
																								СтрокаПоказания.ЛицевойСчет, 
																								СтрокаПоказания.Услуга));
				ДобавитьПустуюСтрокуСТарифом(СтрокаПоказания, СписокТарифовОПУ, СтрокиТабличнойЧастиПоОбъекту, УслугиПоПоказаниямПУБезСторно);
			КонецЕсли;
			
		ИначеЕсли Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода 
			  ИЛИ (НЕ ТарифностьСоответствует 
			        И Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа) Тогда
			
			// Г. Вариант распределения по тарифам - "суммарный расход" (когда выбрана соответствующая настройка или когда
			//    настройка "распределение по видам тарифа" не работает из-за несоответствия тарифов), 
			//    способ распределения ОДН по л/с отличен от "пропорционально количеству расхода по услуге" (здесь в условии не проверяется, 
			//    т.к. расход вычисляется на этапе определения долей распределения расхода ОДН по л/с), 
			//    индивидуальный расход = 0.
			
			// Пример: расход по л/с = 0 (подали показания равные предыдущим), распределение ОДН производится по площади, 
			//         при этом распределяется суммарный расход (а он в свою очередь распределяется по видам тарифа л/с 
			//         пропорционально объемам на подпериоде).
			//         Т.к. индивидуального расхода нет, то не понятно как корректно распределить по видам тарифа.
			//         РЕШИЛИ пока в таких ситуациях относить расход ОДН на общий вид тарифа.
			СтрокиИндНачислений = врТаблицаИндивидуальныхНачислений.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, НачалоПериода", 
																						СтрокаПоказания.ЛицевойСчет, 
																						СтрокаПоказания.Услуга,
																						СтрокаПоказания.НачалоПериода));
			Если СтрокиИндНачислений.Количество() > 0 И СтрокиИндНачислений[0].ПоказаниеСчЛС = 0 Тогда
				
				ВрСписокТарифов = Новый СписокЗначений;
				ВрСписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
				
				Если СтрокаПоказания.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
					Для Каждого ТекСоставнаяУслуга ИЗ СтрокаПоказания.Услуга.СоставныеУслуги Цикл
						СтрокиТабличнойЧастиПоОбъекту = УслугиПоПоказаниямПУБезСторно.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, СоставнаяУслуга, НачалоПериода", 
																										СтрокаПоказания.ЛицевойСчет, 
																										СтрокаПоказания.Услуга, 
																										ТекСоставнаяУслуга.Услуга,
																										СтрокаПоказания.НачалоПериода));
						ДобавитьПустуюСтрокуСТарифом(СтрокаПоказания, ВрСписокТарифов, СтрокиТабличнойЧастиПоОбъекту, УслугиПоПоказаниямПУБезСторно);
					КонецЦикла;
				Иначе
					СтрокиТабличнойЧастиПоОбъекту = УслугиПоПоказаниямПУБезСторно.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, НачалоПериода", 
																									СтрокаПоказания.ЛицевойСчет, 
																									СтрокаПоказания.Услуга,
																									СтрокаПоказания.НачалоПериода));
					ДобавитьПустуюСтрокуСТарифом(СтрокаПоказания, ВрСписокТарифов, СтрокиТабличнойЧастиПоОбъекту, УслугиПоПоказаниямПУБезСторно);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Таблица распределения расхода по видам тарифа по всем л/с.
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("ЛицевойСчет");
	ТаблицаРаспределения.Колонки.Добавить("ВидТарифа");
	ТаблицаРаспределения.Колонки.Добавить("КоличествоРаспределенияПомещение",       Новый ОписаниеТипов("Число"));
	ТаблицаРаспределения.Колонки.Добавить("КоличествоРаспределенияПодъезд",         Новый ОписаниеТипов("Число"));
	ТаблицаРаспределения.Колонки.Добавить("КоличествоРаспределенияЗдание",          Новый ОписаниеТипов("Число"));
	ТаблицаРаспределения.Колонки.Добавить("ПоказаниеСчЛС",                          Новый ОписаниеТипов("Число"));
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	// Информации о соответствии тарифности выводим только в случае,
	// когда в настройках услуги установлено распределение в разрезе видов тарифов.
	Если Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа Тогда
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Тарифности ОПУ и ИПУ соответствуют: " + ТарифностьСоответствует);
	КонецЕсли;
	
	// Если тарифность ОПУ и всех ИПУ совпадают, то тогда распределение произведем в разрезе тарифов ОПУ.
	Если ТарифностьСоответствует Тогда
		Для Каждого ТекВидТарифа ИЗ СписокТарифовОПУ Цикл
			РаспределитьПоказания(ТаблицаРаспределения, ТаблицаОбъектов, СписокТарифовОПУ, ТекВидТарифа.Значение);
		КонецЦикла;
	Иначе // в разрезе тарифов ИПУ
		РаспределитьПоказания(ТаблицаРаспределения, ТаблицаОбъектов, СписокТарифовОПУ);
	КонецЕсли;
	
	ТаблицаРаспределения.Свернуть("ЛицевойСчет, ВидТарифа",
								  "КоличествоРаспределенияПомещение,
								  |КоличествоРаспределенияПодъезд,
								  |КоличествоРаспределенияЗдание,
								  |ПоказаниеСчЛС");
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОбщийРаспределяемыйОбъем = ТаблицаРаспределения.Итог("КоличествоРаспределенияЗдание")
							 + ТаблицаРаспределения.Итог("КоличествоРаспределенияПодъезд")
							 + ТаблицаРаспределения.Итог("КоличествоРаспределенияПомещение");
	
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Распределяемый объем всего: " + УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ОбщийРаспределяемыйОбъем));
	
	// Список колонок для коллективного распределения.
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("КоличествоРаспределенияЗдание");
	СписокКолонок.Добавить("КоличествоРаспределенияПодъезд");
	СписокКолонок.Добавить("КоличествоРаспределенияПомещение");
	
	УслугиПоПоказаниямПУ.Сортировать("ЛицевойСчет, НачалоПериода, ВидТарифа Убыв");
	
	// Получим таблицу соответствия услуг ОПУ с ИПУ.
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	ТаблицаПериодов = ПолучитьТаблицуПериодовНачисленияУслуг();

	Для Каждого СтрокаРаспределения ИЗ ТаблицаРаспределения Цикл
		
		// Обходить будем строки начислений из таблицы соответствия услуг,
		// так как в документе может быть сразу несколько общедомовых услуг.
		СтрокиПоУслугам = ТаблицаСоответствияУслуг.НайтиСтроки(Новый Структура("ЛицевойСчет, УслугаОПУ",
															   СтрокаРаспределения.ЛицевойСчет, Услуга));
		
		// Посчитаем суммарный объем по услугам на текущем лицевом счете.
		ВсегоОбъем = 0;
		Для Каждого ТекСтрока ИЗ СтрокиПоУслугам Цикл
			ВсегоОбъем = ВсегоОбъем + ТекСтрока.ПоказаниеСчЛС;
		КонецЦикла;
		
		// Для распределения объема ОДН между услугами л/с получим объем индивидуальных начислений.
		ДелитьРаспределение = ?(ВсегоОбъем = 0, Ложь, Истина);
		ВсегоОбъем = ?(ВсегоОбъем = 0, 1, ВсегоОбъем);
		
		// Получим суммарный объем к распределению по л/с.
		ИмяКолонки = "";
		КоличествоРаспределения = -999999999999;
		Для Каждого ТекКолонка ИЗ СписокКолонок Цикл
			Если СтрокаРаспределения[ТекКолонка.Значение] > КоличествоРаспределения
			   И Не СтрокаРаспределения[ТекКолонка.Значение] = 0 Тогда
				ИмяКолонки = ТекКолонка.Значение;
				КоличествоРаспределения = СтрокаРаспределения[ТекКолонка.Значение];
			КонецЕсли;
		КонецЦикла;
		ВсегоОбъемРаспределения = КоличествоРаспределения;
		
		Для Каждого ТекСтрока ИЗ СтрокиПоУслугам Цикл
			
			// Индивидуальный расход распределяется в случаях, когда расчет производится:
			// 1. по формуле №3 постановления №354,
			// 2. по формулам 2(3) и 2(5) постановления №1708,
			// 3. по формулам 3 и 3(6) постановления №1708,
			// 4. по формулам 3(1) и 3(7) постановления №1708 для помещений без ИПУ.
			
			ИндКоличествоРаспределения = СтрокаРаспределения["ПоказаниеСчЛС"];
			Если НЕ ИндКоличествоРаспределения = 0 Тогда
				Если Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика Тогда
					// распределим по периодам
					РаспределитьКоличествоПоПоказаниямСчетчикаОбъекта(ИндКоличествоРаспределения, СтрокаРаспределения.ЛицевойСчет,
																	  ТекСтрока.Услуга, "ПоказаниеСчЛС", "Сумма", СписокТарифовОПУ, 
																	  СтрокаРаспределения.ВидТарифа);
				ИначеЕсли Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
					// распределим по составным услугам и периодам
					РаспределитьКоличествоПоПоказаниямСчетчикаИНормеОбъекта(ИндКоличествоРаспределения, 
																			СтрокаРаспределения.ЛицевойСчет, ТекСтрока.Услуга, "ПоказаниеСчЛС", "Сумма", СписокТарифовОПУ,
																			СтрокаРаспределения.ВидТарифа, ТаблицаРаспределения, ТаблицаПериодов);
				КонецЕсли;
			КонецЕсли;
		
			Если КоличествоРаспределения = 0 ИЛИ НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если есть показания ИПУ, то будем распределять пропорционально объему
			Если ДелитьРаспределение Тогда // количество распределения поделим пропорционально объему услуги
				ТекКоличествоРаспределения = КоличествоРаспределения * (ТекСтрока.ПоказаниеСчЛС / ВсегоОбъем);
			Иначе // Показаний ИПУ нет, разделим объем распределения поровну на все услуги.
				ТекКоличествоРаспределения = КоличествоРаспределения / СтрокиПоУслугам.Количество();
			КонецЕсли;
			ТекКоличествоРаспределения = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекКоличествоРаспределения, мТочностьОбъемаНачислений);
			
			// Для последней услуги всегда записывается оставшийся объем, чтобы
			// суммарный распределенный по услугам объем не превышал общий объем распределения.
			// Проверка выполняется по модулю, так как может быть и отрицательное распределение.
			ТекКоличествоРаспределенияПоМодулю = ?(ТекКоличествоРаспределения > 0, ТекКоличествоРаспределения, - ТекКоличествоРаспределения);
			ВсегоОбъемРаспределенияПоМодулю    = ?(ВсегоОбъемРаспределения > 0, ВсегоОбъемРаспределения, - ВсегоОбъемРаспределения);
			Если ТекКоличествоРаспределенияПоМодулю > ВсегоОбъемРаспределенияПоМодулю Тогда
				ТекКоличествоРаспределения = ВсегоОбъемРаспределения;
			КонецЕсли;
			
			Если Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика Тогда
				
				// распределим по показаниям
				РаспределитьКоличествоПоПоказаниямСчетчикаОбъекта(ТекКоличествоРаспределения, СтрокаРаспределения.ЛицевойСчет,
																  ТекСтрока.Услуга, ИмяКолонки, "СуммаРаспределения", СписокТарифовОПУ, 
																  СтрокаРаспределения.ВидТарифа);
				
			ИначеЕсли Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				
				// распределим по показаниям и норме
				РаспределитьКоличествоПоПоказаниямСчетчикаИНормеОбъекта(ТекКоличествоРаспределения, СтрокаРаспределения.ЛицевойСчет,
																		ТекСтрока.Услуга, ИмяКолонки, "СуммаРаспределения", СписокТарифовОПУ, 
																		СтрокаРаспределения.ВидТарифа, ТаблицаРаспределения, ТаблицаПериодов);
				
			КонецЕсли;
			
			// Уменьшаем общий объем распределения на уже распределенный в текущей итерации.
			ВсегоОбъемРаспределения = ВсегоОбъемРаспределения - ТекКоличествоРаспределения;
			
		КонецЦикла;
	
	КонецЦикла;
	
	УдалитьНеучтенныеСтрокиИзТаблицыУчтенныхОбъемовРасхожденийПУ();
	
	РаспределитьРасходОДННаЗависимыеУслуги();
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("----- Окончание распределения ОДН (" + ТекущаяДатаСеанса() + ") -----" + Символы.ПС);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетОДНВНачисленииУслугЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(

КонецПроцедуры // РассчитатьПоказания()

// Процедура распределяет показания общедомовых приборов учета по лицевым счетам.
Процедура РаспределитьПоказания(ТаблицаРаспределения, ТаблицаОбъектов, СписокТарифовОПУ, ВидТарифа = Неопределено)
	
	КоличествоТарифов = СписокТарифовОПУ.Количество();
	КоличествоТарифов = ?(КоличествоТарифов = 0, 1, КоличествоТарифов);
	
	ДеревоПоказанийПУ = ПолучитьДеревоПоказанийПУ(ТаблицаОбъектов, ВидТарифа, КоличествоТарифов);
	
	Здания        = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта, ЕстьСчетчик", "Здание",    Истина),
													 Истина);
	Подъезды      = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта, ЕстьСчетчик", "Подъезд",   Истина),
													 Истина);
	Помещения     = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта, ЕстьСчетчик", "Помещение", Истина),
													 Истина);
	ЗданияПоНорме = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта, ФормулаРасчета", "Здание",
									Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15()), Истина);
	ЗданияБезОДПУПоПостановлению1708 = ДеревоПоказанийПУ.Строки.НайтиСтроки(Новый Структура("ВидОбъекта, ФормулаРасчета", "Здание",
									Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()), Истина);
	
	Если ЗданияПоНорме.Количество() > 0 ИЛИ Здания.Количество() > 0 
	 ИЛИ Подъезды.Количество() > 0 ИЛИ Помещения.Количество() > 0 
	 ИЛИ ЗданияБезОДПУПоПостановлению1708.Количество() > 0 Тогда
		УстановитьДолиРаспределенияПоказаний(ДеревоПоказанийПУ, Услуга);
		РаспределитьПоказанияПоЛицевымСчетам(ДеревоПоказанийПУ, Услуга, ВидТарифа, КоличествоТарифов);
	КонецЕсли;
	
	ДополнитьТаблицуРаспределения(ТаблицаРаспределения, ДеревоПоказанийПУ, ВидТарифа);
	
КонецПроцедуры // РаспределитьПоказания()

// Функция возвращает таблицу соответствия услуг общедомовых приборов учета с индивидуальными.
Функция ПолучитьТаблицуСоответствияУслуг()
	
	СтрокиУслуг = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов());
	
	ТаблицаУслуг = УслугиПоПоказаниямПУ.Выгрузить(СтрокиУслуг, "ЛицевойСчет, Услуга, ПоказаниеСчЛС");
	ТаблицаУслуг.Свернуть("ЛицевойСчет, Услуга", "ПоказаниеСчЛС");
	
	ТаблицаУслуг.Колонки.Добавить("УслугаОПУ", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаУслуг.ЗаполнитьЗначения(Услуга, "УслугаОПУ");
	
	// Добавим индексы для ускорения поиска строк
	// при проверке распределения ОДН по составным услугам.
	ТаблицаУслуг.Индексы.Добавить("ЛицевойСчет, УслугаОПУ");
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуСоответствияУслуг()

// Функция возвращает структуру с тарифами коллективных приборов учета и флагом соответствия тарифности всех ИПУ с ОПУ.
Функция ПолучитьСтруктуруСоответствияТарифностиКоллективногоПУ(ТаблицаОбъектов)
	
	Структура = Новый Структура;
	СписокТарифов = Новый СписокЗначений;
	Структура.Вставить("СоответствиеТарифности", Ложь);
	Структура.Вставить("СписокТарифов",          СписокТарифов);
	
	// Если нужно производить распределение суммарного расхода, то проверять соответствие тарифности не нужно.
	Если Услуга.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода Тогда
		Возврат Структура;
	КонецЕсли;
	
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	
	// Получим тарифность коллективного прибора учета.
	// При этом необходимо учитывать приоритет. 
	// Приоритет устанавливается в следующем порядке(по убыванию): здания, подъезды, помещения.
	ЗапросПоПоказаниям = Новый Запрос;
	ЗапросПоПоказаниям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчики.Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ПОМЕСТИТЬ врТаблицаСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Счетчик.ВидУслуги = &Услуга
	|				И Объект В (&СпОбъектов)
	|				И НЕ Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения < &ДатаДокумента) КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|							ТОГДА 3
	|						ИНАЧЕ 4
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидОбъекта,
	|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|ИЗ
	|	врТаблицаСчетчиков КАК КВП_ЗакрепленныеСчетчики
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОбъекта";
	
	ЗапросПоПоказаниям.УстановитьПараметр("Дата",          Граница.Значение);
	ЗапросПоПоказаниям.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросПоПоказаниям.УстановитьПараметр("Услуга",        Услуга);
	ЗапросПоПоказаниям.УстановитьПараметр("СпОбъектов",    ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	
	ТаблицаВидовОбъектов = ЗапросПоПоказаниям.Выполнить().Выгрузить();
	
	Если ТаблицаВидовОбъектов.Количество() = 0 Тогда
		Возврат Структура;
	Иначе
		Тарифность = ТаблицаВидовОбъектов.Получить(0).Счетчик.Тарифность;
	КонецЕсли;
	
	Если Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Однотарифный Тогда
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
	ИначеЕсли Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Двухтарифный Тогда
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
	ИначеЕсли Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Трехтарифный Тогда
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
		СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	КонецЕсли;
	
	Структура.Вставить("СписокТарифов", СписокТарифов);
	
	// Проверим соответствие тарифности ОПУ и ИПУ.
	Запрос = Новый Запрос;
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      Услуга);
	//СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Ложь);
	//
	//СписокУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("Услуга");
	
	//ЗапросПоПоказаниям.УстановитьПараметр("СписокУслуг",   СписокУслуг);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.ЛицевойСчет,
	|	ТабличнаяЧасть.Тарифность
	|ПОМЕСТИТЬ врТаблицаТарифов
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|	И ТабличнаяЧасть.ТипРасчета = &ТипРасчетПоПоказаниям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.Тарифность
	|ПОМЕСТИТЬ врТаблицаНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	НЕ ТаблицаНачислений.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяТаблица.ЛицевойСчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТарифов.ЛицевойСчет КАК ЛицевойСчет,
	|		ТаблицаТарифов.Тарифность КАК Тарифность
	|	ИЗ
	|		врТаблицаТарифов КАК ТаблицаТарифов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНачислений.ЛицевойСчет,
	|		ТаблицаНачислений.Тарифность
	|	ИЗ
	|		врТаблицаНачислений КАК ТаблицаНачислений) КАК ОбщаяТаблица
	|ГДЕ
	|	ОбщаяТаблица.Тарифность <> &Тарифность";
	
	ТаблицаНачисленийПУ = ПолучитьРезультатЗапросаПоУслугамКоллективногоПрибораУчета(УслугиПоПоказаниямПУ.ВыгрузитьКолонку("ЛицевойСчет"), Неопределено, 1);
	Если ТаблицаНачисленийПУ.Колонки.Количество() = 0 Тогда
		ТаблицаНачисленийПУ.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		ТаблицаНачисленийПУ.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
		ТаблицаНачисленийПУ.Колонки.Добавить("ВидТарифа",   Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		ТаблицаНачисленийПУ.Колонки.Добавить("Тарифность",  Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ТабличнаяЧасть",        УслугиПоПоказаниямПУ);
	Запрос.УстановитьПараметр("ТаблицаНачислений",     ТаблицаНачисленийПУ);
	Запрос.УстановитьПараметр("Тарифность",            СписокТарифов.Количество());
	Запрос.УстановитьПараметр("ТипРасчетПоПоказаниям", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Структура.Вставить("СоответствиеТарифности", Истина);
	Иначе
		ПустойСписокТарифов = Новый СписокЗначений;
		Структура.Вставить("СписокТарифов", ПустойСписокТарифов);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруСоответствияТарифностиКоллективногоПУ()

// Вызывается для получения долей л/с, по которым распределяются показания.
//
// Параметры:
//  Запрос   - ссылка на запрос, в котором подготовлена таблица приборов учета.
//  СписокЛС - массив, содержащий список лицевых счетов.
//
Функция ОпределитьДолиЛС(Запрос, СписокЛС)
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("Помещение",   Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
	ТаблицаДляВозврата.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДляВозврата.Колонки.Добавить("Доля",        Новый ОписаниеТипов("Число"));
	
	ПолеВыборки = "1";
	ТаблицаСоединения = "";
	
	СтруктураСпособаРаспределения = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета();
	СпособРаспределения           = СтруктураСпособаРаспределения.СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета;
	
	Если СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов Тогда
		ПолеВыборки = "
		|	ВЫБОР
		|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель ЕСТЬ NULL 
		|			ИЛИ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
		|		ТОГДА 0
		|	ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель
		|			 / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ";
		ТаблицаСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&Период, ) 
		|		КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|		ПО ТаблицаПУ.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет";
	ИначеЕсли СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным Тогда
		ПолеВыборки = "ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0)";
		ТаблицаСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаПУ.ЛицевойСчет = врТаблицаКоличеств.ЛицевойСчет";
	ИначеЕсли СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим Тогда
		ПолеВыборки = "ЕСТЬNULL(врТаблицаКоличеств.КоличествоПроживающих, 0)";
		ТаблицаСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаПУ.ЛицевойСчет = врТаблицаКоличеств.ЛицевойСчет";
	КонецЕсли;
	
	Если СпособРаспределения =
				Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным
	 ИЛИ СпособРаспределения =
				Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим Тогда
		ДополнитьЗапросКоличествомЖильцов(Запрос, Дата, СписокЛС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",      МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	
	// Группировку выполняем по помещению, так как прибор учета 
	// может быть установлен на помещение (или несколько помещений), но при
	// этом на помещение может быть открыто несколько л/с.
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаОткрытыхЛС.Помещение,
	|	ТаблицаОткрытыхЛС.ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаПУ
	|ИЗ
	|	ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаЗакрепленныхПУНаПомещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОткрытыхЛС КАК ТаблицаОткрытыхЛС
	|		ПО (ТаблицаОткрытыхЛС.Помещение = ТаблицаЗакрепленныхПУНаПомещения.Помещение)
	|;
	|/////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПУ.Помещение КАК Помещение,
	|	ТаблицаПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	" + ПолеВыборки + " КАК Доля
	|ИЗ
	|	ТаблицаПУ КАК ТаблицаПУ
	|		" + ТаблицаСоединения + "
	|ИТОГИ
	|	СУММА(Доля), КОЛИЧЕСТВО(ЛицевойСчет)
	|ПО
	|	Помещение";
	
	
	РезультатЗапроса  = Запрос.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаРезультата.Следующий() Цикл
		СуммаДолей = ВыборкаРезультата.Доля;
		КолвоЛС    = ВыборкаРезультата.ЛицевойСчет;
		Если НЕ КолвоЛС > 1 Тогда
			Продолжить;
		КонецЕсли;
			
		ВыборкаПоЛС = ВыборкаРезультата.Выбрать();
		Пока ВыборкаПоЛС.Следующий() Цикл 
			
			СтрокаТаблицы = ТаблицаДляВозврата.Добавить();
			СтрокаТаблицы.Помещение   = ВыборкаПоЛС.Помещение;
			СтрокаТаблицы.ЛицевойСчет = ВыборкаПоЛС.ЛицевойСчет;
			
			// Для расчета долей используется единый механизм и в документе "Ввод показаний приборов учета",
			// и при расчете в документе "Начисление услуг".
			СтруктураКоэффициентов = Документы.УПЖКХ_ВводПоказанийСчетчика.ОпределитьРазмерДоли(СпособРаспределения,
														  ВыборкаПоЛС.Доля,
														  1,
														  СуммаДолей,
														  1,
														  КолвоЛС);
			СтрокаТаблицы.Доля = СтруктураКоэффициентов.ДоляЧислитель / СтруктураКоэффициентов.ДоляЗнаменатель;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;

КонецФункции //ОпределитьДолиЛС

// Возвращает долю распределения показаний для лицевого счета
Функция ДоляЛицевогоСчета(ТаблицаДолейЛицевыхСчетов, Объект)
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЛицевойСчет", Объект);
	Доли = ТаблицаДолейЛицевыхСчетов.НайтиСтроки(Отбор);
	Если Доли.Количество() > 0 Тогда
		Возврат Доли[0].Доля;
	Иначе 
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Возвращает процент от индивидуального расхода для ограничения ОДН по данным регистра сведений
// "Размеры процентов от индивидуальных расходов для ограничения ОДН".
//
Функция ПолучитьПроцентОтИндивидуальногоРасходаДляОграниченияОДН(Период, Организация, Услуга)
	
	// Значение по умолчанию.
	ПроцентОграничения = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_РазмерыПроцентовОтИндивидуальногоРасходаДляОграниченияОДНСрезПоследних.ПроцентОграничения КАК ПроцентОграничения
	|ИЗ
	|	РегистрСведений.УПЖКХ_РазмерыПроцентовОтИндивидуальногоРасходаДляОграниченияОДН.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Услуга = &Услуга) КАК УПЖКХ_РазмерыПроцентовОтИндивидуальногоРасходаДляОграниченияОДНСрезПоследних";
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Услуга",      Услуга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентОграничения = Выборка.ПроцентОграничения;
	КонецЕсли;
	
	Возврат ПроцентОграничения;
	
КонецФункции

// Производит расчет суммарного объема по ИПУ, в том числе объем рассчитанный по норме и среднему,
// в соответствии с п. 59 Постановления 354, а также расчет суммы площадей жилых и нежилых помещений
// с установленными ИПУ.
Процедура ОпределитьСуммуОбъемовПоИПУИСуммуПлощадейПомещенийСИПУ(СтрокаВетки, СуммаОбъемовПоИПУ, ПлощадьПомещенийСИПУ)
	
	// Определим сумму объемов по ИПУ и сумму площадей жилых и нежилых помещений с ИПУ в МКД.
	// Показания по ИПУ будем получать из табличной части "УслугиПоПоказаниямПУ",
	// а не "ОбщийРасходПоИПУ", чтобы не учитывать настройку услуги "В суммарный индивидуальный расход включать",
	// и брать все показания: по ИПУ, по норме и по среднему.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ПоказаниеСчЛС КАК ПоказаниеСчЛС,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ВидТарифа КАК ВидТарифа,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ТипРасчета КАК ТипРасчета,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ФормулаРасчета КАК ФормулаРасчета
	|ПОМЕСТИТЬ втПоказанияВТабличнойЧасти
	|ИЗ
	|	&УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
	|ГДЕ
	|	НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.Сторно
	|	И НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.НачислениеПоПовышающемуКоэффициенту
	|	И НЕ КВП_НачислениеУслугУслугиПоПоказаниямПУ.Зависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоказанияВТабличнойЧасти.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втПоказанияВТабличнойЧасти.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
	|	втПоказанияВТабличнойЧасти.ВидТарифа КАК ВидТарифа,
	|	втПоказанияВТабличнойЧасти.ТипРасчета КАК ТипРасчета,
	|	втПоказанияВТабличнойЧасти.ФормулаРасчета КАК ФормулаРасчета
	|ИЗ
	|	втПоказанияВТабличнойЧасти КАК втПоказанияВТабличнойЧасти
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоказанияВТабличнойЧасти.ЛицевойСчет,
	|	втПоказанияВТабличнойЧасти.ВидТарифа,
	|	втПоказанияВТабличнойЧасти.ТипРасчета,
	|	втПоказанияВТабличнойЧасти.ФормулаРасчета";
	
	Запрос.УстановитьПараметр("УслугиПоПоказаниямПУ", УслугиПоПоказаниямПУ.Выгрузить());
	
	ПоказанияВТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоискаЛС = Новый Структура("ВидОбъекта, ЕстьСчетчик", "ЛицевойСчет", Истина);
	ЛицевыеСчетаИПУ = СтрокаВетки.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
	Для Каждого СтрокаЛС Из ЛицевыеСчетаИПУ Цикл
		
		ОтборПоказаний = Новый Структура("ЛицевойСчет", СтрокаЛС.ЛицевойСчет);
		ПоказанияПоОбъекту = ПоказанияВТабличнойЧасти.НайтиСтроки(ОтборПоказаний);
		
		Для Каждого СтрокаПоказаний Из ПоказанияПоОбъекту Цикл
			СуммаОбъемовПоИПУ = СуммаОбъемовПоИПУ + СтрокаПоказаний.ПоказаниеСчЛС;
		КонецЦикла;
		
		ПлощадьПомещенийСИПУ = ПлощадьПомещенийСИПУ + СтрокаЛС.Доля;
		
	КонецЦикла;
	
	Если Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
		
		// Добавим к суммарному объему ИПУ объем, рассчитанный в соответствии
		// с п. 59 Постановления 354 по нормативу или по среднему.
		СтруктураПоискаЛС.Вставить("ЕстьСчетчик", Ложь);
		СтруктураПоискаЛС.Вставить("СчетчикОтключенПоУтратеПоверкеВыходуИзСтроя", Истина);
		ЛицевыеСчетаИПУУтратаПоверкаВыходИзСтроя = СтрокаВетки.Строки.НайтиСтроки(СтруктураПоискаЛС, Истина);
		Для Каждого СтрокаЛС Из ЛицевыеСчетаИПУУтратаПоверкаВыходИзСтроя Цикл
			
			ОтборПоказаний = Новый Структура("ЛицевойСчет", СтрокаЛС.ЛицевойСчет);
			ПоказанияПоОбъекту = ПоказанияВТабличнойЧасти.НайтиСтроки(ОтборПоказаний);
			
			Для Каждого СтрокаПоказаний Из ПоказанияПоОбъекту Цикл
				СуммаОбъемовПоИПУ = СуммаОбъемовПоИПУ + СтрокаПоказаний.ПоказаниеСчЛС;
			КонецЦикла;
			
			ПлощадьПомещенийСИПУ = ПлощадьПомещенийСИПУ + СтрокаЛС.Доля;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыУслугПоПоказаниямИндивидуальнымиПоказаниями

// Функция возвращает текст запроса для начисления по ПУ.
//
Функция ПолучитьТекстЗапросаПоПоказаниямИндивидуальныхПУ()
	
	// Лицевые счета, по которым будет производиться начисление услуги.
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.Объект КАК ЛицевойСчет,
	|	ТаблицаЛС.ОбъектАдрес КАК Помещение,
	|	ТаблицаЛС.ОбъектНаименование КАК ЛицевойСчетНаименование,
	|	ТаблицаЛС.Услуга,
	|	ТаблицаЛС.СпособРасчета
	|ПОМЕСТИТЬ ТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|";
	
	
	// Получаем приборы учета,закрепленные за лицевыми счетами.
	// Для начисления получаем только приборы учета, не являющиеся "выходными".
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.ЛицевойСчет.Адрес, КВП_ЗакрепленныеСчетчикиВПериоде.ЛицевойСчет.Адрес) КАК Помещение,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.ЛицевойСчет, КВП_ЗакрепленныеСчетчикиВПериоде.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик.ВидУслуги) КАК Услуга
	|ПОМЕСТИТЬ ТаблицаЗакрепленныхПУНаЛС
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач, 
	|				Объект В (&СпОбъектов) 
	|					И Счетчик.ВидУслуги В (&Услуга) 
	|					И НЕ Счетчик.ПризнакВыходногоСчетчика
	|					И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует) КАК КВП_ЗакрепленныеСчетчики
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ЗакрепленныеСчетчики.Объект КАК ЛицевойСчет,
	|			КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|		ИЗ
	|			РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ГДЕ
	|			КВП_ЗакрепленныеСчетчики.Действует
	|			И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|			И КВП_ЗакрепленныеСчетчики.Объект В(&СпОбъектов)
	|			И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В (&Услуга) 
	|			И НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика) КАК КВП_ЗакрепленныеСчетчикиВПериоде
	|		ПО КВП_ЗакрепленныеСчетчики.ЛицевойСчет = КВП_ЗакрепленныеСчетчикиВПериоде.ЛицевойСчет
	|			И КВП_ЗакрепленныеСчетчики.Счетчик = КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик
	|;
	|";
	
	
	// Получаем приборы учета,закрепленные за помещениями.
	// Для начисления получаем только приборы учета, не являющиеся "выходными".
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Помещение, КВП_ЗакрепленныеСчетчикиВПериоде.Помещение) КАК Помещение,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик.ВидУслуги) КАК Услуга
	|ПОМЕСТИТЬ ТаблицаЗакрепленныхПУНаПомещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Помещение,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач, 
	|				Объект В (&СпПомещений)
	|					И Счетчик.ВидУслуги В (&Услуга) 
	|					И НЕ Счетчик.ПризнакВыходногоСчетчика
	|					И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует) КАК КВП_ЗакрепленныеСчетчики
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ЗакрепленныеСчетчики.Объект КАК Помещение,
	|			КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|		ИЗ
	|			РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ГДЕ
	|			КВП_ЗакрепленныеСчетчики.Действует
	|			И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|			И КВП_ЗакрепленныеСчетчики.Объект В(&СпПомещений)
	|			И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В (&Услуга)
	|			И НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика) КАК КВП_ЗакрепленныеСчетчикиВПериоде
	|		ПО КВП_ЗакрепленныеСчетчики.Помещение = КВП_ЗакрепленныеСчетчикиВПериоде.Помещение
	|			И КВП_ЗакрепленныеСчетчики.Счетчик = КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик
	|;
	|";
	
	
	// Дополняем список приборов учета помещениями, за которыми закреплен прибор учета,
	// т.к. документ может заполняться с отбором.
	// Например, прибор учета установлен на несколько помещений, начисление услуги производится 
	// по конкретному л/с или помещению.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Помещение, КВП_ЗакрепленныеСчетчикиВПериоде.Помещение) КАК Помещение,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги, КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик.ВидУслуги) КАК Услуга
	|ПОМЕСТИТЬ ДополненнаяТаблицаЗакрепленныхПУНаПомещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Помещение,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач,
	|				Счетчик В
	|					(ВЫБРАТЬ
	|						СписокПУ.Счетчик
	|					ИЗ
	|						ТаблицаЗакрепленныхПУНаПомещения КАК СписокПУ)
	|					И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует) КАК КВП_ЗакрепленныеСчетчики
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ЗакрепленныеСчетчики.Объект КАК Помещение,
	|			КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|		ИЗ
	|			РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ГДЕ
	|			КВП_ЗакрепленныеСчетчики.Действует
	|			И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|			И КВП_ЗакрепленныеСчетчики.Счетчик В
	|					(ВЫБРАТЬ
	|						СписокПУ.Счетчик
	|					ИЗ
	|						ТаблицаЗакрепленныхПУНаПомещения КАК СписокПУ)) КАК КВП_ЗакрепленныеСчетчикиВПериоде
	|		ПО КВП_ЗакрепленныеСчетчики.Помещение = КВП_ЗакрепленныеСчетчикиВПериоде.Помещение
	|			И КВП_ЗакрепленныеСчетчики.Счетчик = КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДопТаблицаЛС.Помещение,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка),
	|	ДопТаблицаЛС.Услуга.ВидУслуги
	|ИЗ
	|	ТаблицаЛС КАК ДопТаблицаЛС
	|;
	|";
	
	
	// Определяем открытые лицевые счета, на которые назначена услуга.
	// Они необходимы для определения долей распределения показаний ПУ по л/с.
	// Определяем их в этом же запросе, а не по заранее подготовленной таблице ТаблицаЛС, 
	// т.к. документ может заполняться с отбором.
	// Например, прибор учета установлен на помещение, начисление услуги производится по конкретному л/с,
	// при этом на это же помещение открыт еще один л/с. В таблице ТаблицаЛС будет только выбранный л/с.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Назначения.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ НазначенныеНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет
	|	ИЗ
	|		РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И Услуга В (&Услуга)
	|					И ДатаИзменения < &ДатаНач
	|					И Объект.Адрес В
	|						(ВЫБРАТЬ
	|							СписокПомещений.Помещение
	|						ИЗ
	|							ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|	ГДЕ
	|		КВП_НазначенныеНачисленияСрезПоследних.Действует
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КВП_НазначенныеНачисления.Объект
	|	ИЗ
	|		РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|	ГДЕ
	|		КВП_НазначенныеНачисления.Период <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)
	|		И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|		И КВП_НазначенныеНачисления.Услуга В (&Услуга)
	|		И КВП_НазначенныеНачисления.Организация = &Организация
	|		И КВП_НазначенныеНачисления.Действует
	|		И КВП_НазначенныеНачисления.Объект.Адрес В
	|				(ВЫБРАТЬ
	|					СписокПомещений.Помещение
	|				ИЗ
	|					ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК Назначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.Объект КАК Помещение,
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ВрТаблицаОткрытыхЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|				(ВЫБРАТЬ
	|					СписокПомещений.Помещение
	|				ИЗ
	|					ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Объект,
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.Объект В
	|			(ВЫБРАТЬ
	|				СписокПомещений.Помещение
	|			ИЗ
	|				ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК СписокПомещений)
	|	И КВП_ЛицевыеСчета.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаблицаОткрытыхЛС.Помещение КАК Помещение,
	|	ВрТаблицаОткрытыхЛС.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаОткрытыхЛС
	|ИЗ
	|	ВрТаблицаОткрытыхЛС КАК ВрТаблицаОткрытыхЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НазначенныеНачисления КАК ТаблицаНазначенных
	|		ПО (ТаблицаНазначенных.ЛицевойСчет = ВрТаблицаОткрытыхЛС.ЛицевойСчет)
	|;
	|";
	
	
	// Определим количество открытых лицевых счетов по помещениям, на которые установлены ПУ.
	// Оно необходимо для определения долей распределения показаний ПУ по л/с.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|		ТаблицаЗакрепленныхПУНаПомещения.Счетчик,
	|		ТаблицаЗакрепленныхПУНаПомещения.Помещение,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОткрытыхЛС.ЛицевойСчет) КАК КоличествоВладельцев
	|ПОМЕСТИТЬ ТаблицаКоличестваВладельцевПУ
	|ИЗ
	|	ДополненнаяТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаЗакрепленныхПУНаПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОткрытыхЛС КАК ТаблицаОткрытыхЛС
	|		ПО (ТаблицаОткрытыхЛС.Помещение = ТаблицаЗакрепленныхПУНаПомещения.Помещение)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗакрепленныхПУНаПомещения.Счетчик,
	|	ТаблицаЗакрепленныхПУНаПомещения.Помещение
	|;
	|";
	
	
	// Определяем введены ли показания приборов учета за текущий период.
	// По данному признаку определяется, что начисление будет производиться по показаниям
	// приборов учета.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ПоказанияСчетчиков.Счетчик,
	|	ИСТИНА КАК ЕстьПоказания
	|ПОМЕСТИТЬ ТаблицаПоказанийЗаПериод
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиков
	|ГДЕ
	|	КВП_ПоказанияСчетчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И (НЕ КВП_ПоказанияСчетчиков.НачальноеПоказание)
	|	И (КВП_ПоказанияСчетчиков.Счетчик.ВидУслуги В (&Услуга))
	|	И НЕ КВП_ПоказанияСчетчиков.Счетчик.ПризнакВыходногоСчетчика
	|;
	|";
	
	
	// Получаем итоговую таблицу лицевых счетов с расходом по приборам учета.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.Помещение.Владелец КАК Здание,
	|	ТаблицаЛС.Помещение.Подъезд КАК Подъезд,
	|	ТаблицаЛС.Помещение КАК Помещение,
	|	ТаблицаЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛС.ЛицевойСчетНаименование КАК ЛицевойСчетНаименование,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ЕСТЬNULL(ТаблицаСчетчиков.ЕстьСчетчик, ЛОЖЬ) КАК ЕстьСчетчик,
	|	ЕСТЬNULL(ТаблицаСчетчиков.СчетчикНаПомещение, ЛОЖЬ) КАК СчетчикНаПомещение,
	|	ТаблицаЛС.Услуга КАК Услуга,
	|	ТаблицаЛС.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТаблицаСчетчиков.ДневноеПоказаниеОстаток, 0) КАК ДневноеПоказаниеОстаток,
	|	ЕСТЬNULL(ТаблицаСчетчиков.НочноеПоказаниеОстаток, 0) КАК НочноеПоказаниеОстаток,
	|	ЕСТЬNULL(ТаблицаСчетчиков.ПиковоеПоказаниеОстаток, 0) КАК ПиковоеПоказаниеОстаток
	|ПОМЕСТИТЬ ГотоваяТаблицаСРасходомПоПУ
	|ИЗ
	|	ТаблицаЛС КАК ТаблицаЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетчиковЛС.Помещение КАК Помещение,
	|			ТаблицаСчетчиковЛС.ЛицевойСчет КАК ЛицевойСчет,
	|			ТаблицаСчетчиковЛС.Счетчик КАК Счетчик,
	|			ИСТИНА КАК ЕстьСчетчик,
	|			ЛОЖЬ КАК СчетчикНаПомещение,
	|			ТаблицаСчетчиковЛС.Услуга КАК Услуга,
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ДневноеПоказаниеОстаток,
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК НочноеПоказаниеОстаток,
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ПиковоеПоказаниеОстаток
	|		ИЗ
	|			ТаблицаЗакрепленныхПУНаЛС КАК ТаблицаСчетчиковЛС
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
	|						&Дата,
	|						Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|							И Услуга В (&Услуга)) КАК УПЖКХ_РасчетПриборовУчетаОстатки
	|				ПО ТаблицаСчетчиковЛС.Услуга = УПЖКХ_РасчетПриборовУчетаОстатки.Услуга
	|					И (УПЖКХ_РасчетПриборовУчетаОстатки.Объект = ТаблицаСчетчиковЛС.ЛицевойСчет)
	|					И (УПЖКХ_РасчетПриборовУчетаОстатки.Счетчик = ТаблицаСчетчиковЛС.Счетчик)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетчиковЛС.Помещение,
	|			ТаблицаСчетчиковЛС.ЛицевойСчет,
	|			ТаблицаСчетчиковЛС.Счетчик,
	|			ТаблицаСчетчиковЛС.Услуга
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаСчетчиковПомещений.Помещение,
	|			NULL,
	|			ТаблицаСчетчиковПомещений.Счетчик,
	|			ИСТИНА,
	|			ИСТИНА,
	|			ТаблицаСчетчиковПомещений.Услуга,
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ),
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ),
	|			СУММА(ВЫБОР
	|					КОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|							И НЕ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток ЕСТЬ NULL
	|							И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|								ИЛИ УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток <= -1 * &МинимальноеЗначениеДляТочностиОбъемаНачислений)
	|						ТОГДА УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.ПоказаниеОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|		ИЗ
	|			ТаблицаЗакрепленныхПУНаПомещения КАК ТаблицаСчетчиковПомещений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
	|						&Дата,
	|						Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|							И Услуга В (&Услуга)) КАК УПЖКХ_РасчетПриборовУчетаПомещенийОстатки
	|				ПО (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Объект = ТаблицаСчетчиковПомещений.Помещение)
	|					И (УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Счетчик = ТаблицаСчетчиковПомещений.Счетчик)
	|					И ТаблицаСчетчиковПомещений.Услуга = УПЖКХ_РасчетПриборовУчетаПомещенийОстатки.Услуга
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетчиковПомещений.Помещение,
	|			ТаблицаСчетчиковПомещений.Счетчик,
	|			ТаблицаСчетчиковПомещений.Услуга) КАК ТаблицаСчетчиков
	|		ПО ТаблицаЛС.Помещение = ТаблицаСчетчиков.Помещение
	|			И (ТаблицаЛС.ЛицевойСчет = ТаблицаСчетчиков.ЛицевойСчет
	|				ИЛИ ТаблицаСчетчиков.ЛицевойСчет ЕСТЬ NULL)
	|			И ТаблицаЛС.Услуга = ТаблицаСчетчиков.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.КВП_ЛицевыеСчета).Адрес КАК Помещение,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ ТаблицаЗакрепленныхПУПоверкаУтратаПоломка
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|					(ВЫБРАТЬ
	|						ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
	|					ГДЕ
	|						НЕ ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик)
	|				И Счетчик.ВидУслуги В (&Услуга)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	И КВП_ЗакрепленныеСчетчикиСрезПоследних.ПричинаОтключения В(&ПричиныВременногоОтключенияПУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Справочник.УПЖКХ_Помещения),
	|	NULL,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|					(ВЫБРАТЬ
	|						ГотоваяТаблицаСРасходомПоПУ.Помещение КАК Помещение
	|					ИЗ
	|						ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
	|					ГДЕ
	|						НЕ ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик)
	|				И Счетчик.ВидУслуги В (&Услуга)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	И КВП_ЗакрепленныеСчетчикиСрезПоследних.ПричинаОтключения В(&ПричиныВременногоОтключенияПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Помещение КАК Помещение,
	|	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Помещение.ВидПомещения.ЭтоЖилойФонд
	|			ТОГДА ВЫБОР
	|					КОГДА &ДатаНач < ДОБАВИТЬКДАТЕ(ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ДатаИзменения, МЕСЯЦ, ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДатаНач < ДОБАВИТЬКДАТЕ(ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.ДатаИзменения, МЕСЯЦ, ТаблицаЗакрепленныхПУПоверкаУтратаПоломка.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЕстьСчетчикСУчетомПоверкиПоломкиУтраты
	|ПОМЕСТИТЬ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета
	|ИЗ
	|	ТаблицаЗакрепленныхПУПоверкаУтратаПоломка КАК ТаблицаЗакрепленныхПУПоверкаУтратаПоломка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГотоваяТаблицаСРасходомПоПУ.Здание КАК Здание,
	|	ГотоваяТаблицаСРасходомПоПУ.Подъезд КАК Подъезд,
	|	ГотоваяТаблицаСРасходомПоПУ.Помещение КАК Помещение,
	|	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчетНаименование КАК ЛицевойСчетНаименование,
	|	ГотоваяТаблицаСРасходомПоПУ.Счетчик КАК Счетчик,
	|	ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик КАК ЕстьСчетчик,
	|	ГотоваяТаблицаСРасходомПоПУ.СчетчикНаПомещение КАК СчетчикНаПомещение,
	|	ГотоваяТаблицаСРасходомПоПУ.Услуга КАК Услуга,
	|	ГотоваяТаблицаСРасходомПоПУ.СпособРасчета КАК СпособРасчета,
	|	СУММА(ГотоваяТаблицаСРасходомПоПУ.ДневноеПоказаниеОстаток) КАК ДневноеПоказаниеОстаток,
	|	СУММА(ГотоваяТаблицаСРасходомПоПУ.НочноеПоказаниеОстаток) КАК НочноеПоказаниеОстаток,
	|	СУММА(ГотоваяТаблицаСРасходомПоПУ.ПиковоеПоказаниеОстаток) КАК ПиковоеПоказаниеОстаток,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик
	|					ИЛИ ЕСТЬNULL(ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты, ЛОЖЬ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьСчетчикСУчетомПоверкиПоломкиУтраты
	|ПОМЕСТИТЬ ГотоваяТаблицаПУ
	|ИЗ
	|	ГотоваяТаблицаСРасходомПоПУ КАК ГотоваяТаблицаСРасходомПоПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета КАК ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета
	|		ПО ГотоваяТаблицаСРасходомПоПУ.Помещение = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.Помещение
	|			И (ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЛицевойСчет
	|				ИЛИ ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.ЛицевойСчет ЕСТЬ NULL)
	|			И ГотоваяТаблицаСРасходомПоПУ.Услуга = ПУПоверкаУтратаПоломкаСУчетомКоличестваМесяцевРасчета.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ГотоваяТаблицаСРасходомПоПУ.СчетчикНаПомещение,
	|	ГотоваяТаблицаСРасходомПоПУ.ЕстьСчетчик,
	|	ГотоваяТаблицаСРасходомПоПУ.Счетчик,
	|	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчетНаименование,
	|	ГотоваяТаблицаСРасходомПоПУ.ЛицевойСчет,
	|	ГотоваяТаблицаСРасходомПоПУ.Помещение,
	|	ГотоваяТаблицаСРасходомПоПУ.Подъезд,
	|	ГотоваяТаблицаСРасходомПоПУ.Здание,
	|	ГотоваяТаблицаСРасходомПоПУ.Услуга,
	|	ГотоваяТаблицаСРасходомПоПУ.СпособРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГотоваяТаблицаПУ.Здание КАК ЗданиеПодъезд
	|ПОМЕСТИТЬ ТаблицаЗданийПодъездов
	|ИЗ
	|	ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГотоваяТаблицаПУ.Подъезд
	|ИЗ
	|	ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ";
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоПоказаниямИндивидуальныхПУ()

// Процедура добавляет данные по ИПУ в таблицу услуг по показаниям.
Процедура ДополнитьТаблицуУслугПоПоказаниямИндивидуальнымиПУ(ТЗУслугиПоПоказаниямПУ, ТаблицаЛС, ДопСписокУслуг)
	
	Счетчики.Очистить();
	
	Запрос = Новый Запрос;
	
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Дата",        Граница.Значение);
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	// Список услуг содержит услуги, начисления по которым будут производиться в текущем документе. Это:
	// 1) услуга, указанная в шапке документа;
	// 2) услуги, указанные в регистре "Услуги общедомового счетчика" с установленным 
	//    признаком "Распределять на услугу-базу расчета".
	СписокУслуг = ДопСписокУслуг;
	СписокУслуг.Добавить(Услуга);
	Запрос.УстановитьПараметр("Услуга",          СписокУслуг);
	// ВАЖНО:
	// Но только по настройкам услуги, указанной в шапке документа, определяются формулы для расчета ОДН.
	
	Запрос.УстановитьПараметр("ТаблицаЛС",   ТаблицаЛС);
	Запрос.УстановитьПараметр("СпОбъектов",  ТаблицаЛС.ВыгрузитьКолонку("Объект"));
	Запрос.УстановитьПараметр("СпПомещений", ТаблицаЛС.ВыгрузитьКолонку("ОбъектАдрес"));
	
	// Для начисления по показаниям ПУ необходимо получать расход ПУ с ограничением
	// по минимальному значению с точностью объема начислений. Если этого не делать,
	// то при вводе показаний с более высокой точностью, чем точность начислений,
	// после начисления останутся зависшие остатки расхода ПУ, которые потом приведут
	// к некорректному начислению в следующих периодах.
	Запрос.УстановитьПараметр("МинимальноеЗначениеДляТочностиОбъемаНачислений", ПолучитьМинимальноеЗначениеДляТочностиОбъемаНачислений());
	
	Запрос.УстановитьПараметр("ПричиныВременногоОтключенияПУ", мПричиныВременногоОтключенияПУ);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Подготовим данные для расчета по ПУ.
	Запрос.Текст = ПолучитьТекстЗапросаПоПоказаниямИндивидуальныхПУ();
	ТаблицаОткрытыхЛС = Запрос.Выполнить();
	
	// Определяем список открытых л/с, для которых будут рассчитываться доли.
	// Использовать подготовленную таблицу ТаблицаЛС нельзя, 
	// т.к. документ может заполняться с отбором.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОткрытыхЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОткрытыхЛС.Помещение КАК Помещение
	|ИЗ
	|	ТаблицаОткрытыхЛС КАК ТаблицаОткрытыхЛС";
	СписокОткрытыхЛС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
	СписокПомещенийОткрытыхЛС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Помещение");
	
	// Доли необходимо учитывать только для случая, когда прибор учета установлен на помещение
	// (несколько помещений), при этом на помещение открыто несколько л/с.
	// Разделение расхода в случае, когда один прибор учета установлен на несколько л/с 
	// производится на этапе ввода показаний ПУ.
	
	ТаблицаДолей = ОпределитьДолиЛС(Запрос, СписокОткрытыхЛС);
	
	// Получаем таблицы расхода по среднему значению:
	// Для простоты получаем две разные таблицы, т.к. количество дней для расчета по среднему при
	// отсутствии действующего ПУ и при отсутствии показаний может быть различным.
	
	ПолучитьРасходПоСреднему(Дата, ТаблицаРасходаПоСреднемуБезДействующихПУ, 
					Услуга.ПериодРасчетаПоСреднемуБезДействующихПУ, СписокУслуг, СписокОткрытыхЛС, СписокПомещенийОткрытыхЛС, "СпособРасчетаПоПУБезДействующихПУ");
	ПолучитьРасходПоСреднему(Дата, ТаблицаРасходаПоСреднемуБезПоказаний, 
						Услуга.ПериодРасчетаПоСреднемуБезПоказаний, СписокУслуг, СписокОткрытыхЛС, СписокПомещенийОткрытыхЛС, "СпособРасчетаПоПУБезПоказаний");
	
	// Дополняем итоговую таблицу лицевых счетов необходимыми данными.
	
	// Определяем есть ли действующие коллективные приборы учета.
	// Требуется для определения формулы расчета.
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Объект, КВП_ЗакрепленныеСчетчикиВПериоде.Объект) КАК Объект,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Объект,
	|						КВП_ЗакрепленныеСчетчикиВПериоде.Объект) ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДомовойСчетчик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Объект,
	|						КВП_ЗакрепленныеСчетчикиВПериоде.Объект) ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПодъездныйСчетчик,
	|	ИСТИНА КАК ЕстьКоллективныйСчетчик
	|ПОМЕСТИТЬ ТаблицаКоллективныхПУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач,
	|				Объект В
	|						(ВЫБРАТЬ
	|							ТаблицаЗданийПодъездов.ЗданиеПодъезд
	|						ИЗ
	|							ТаблицаЗданийПодъездов КАК ТаблицаЗданийПодъездов)
	|						И Счетчик.ВидУслуги В (&Услуга)
	|						И НЕ Счетчик.ПризнакВыходногоСчетчика
	|						И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует) КАК КВП_ЗакрепленныеСчетчики
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ЗакрепленныеСчетчики.Объект КАК Объект,
	|			КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|		ИЗ
	|			РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ГДЕ
	|			КВП_ЗакрепленныеСчетчики.Действует
	|			И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|			И КВП_ЗакрепленныеСчетчики.Объект В
	|					(ВЫБРАТЬ
	|						ТаблицаЗданийПодъездов.ЗданиеПодъезд
	|					ИЗ
	|						ТаблицаЗданийПодъездов КАК ТаблицаЗданийПодъездов)
	|			И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В(&Услуга)
	|			И НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика) КАК КВП_ЗакрепленныеСчетчикиВПериоде
	|		ПО КВП_ЗакрепленныеСчетчики.Объект = КВП_ЗакрепленныеСчетчикиВПериоде.Объект
	|			И КВП_ЗакрепленныеСчетчики.Счетчик = КВП_ЗакрепленныеСчетчикиВПериоде.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоллективныхПУ.Объект КАК Здание,
	|	МАКСИМУМ(ТаблицаКоллективныхПУ.ЕстьДомовойСчетчик) КАК ЕстьДомовойСчетчик,
	|	МАКСИМУМ(ТаблицаКоллективныхПУ.ЕстьКоллективныйСчетчик) КАК ЕстьКоллективныйСчетчик
	|ПОМЕСТИТЬ ТаблицаКоллективныхСчетчиковЗдания
	|ИЗ
	|	ТаблицаКоллективныхПУ КАК ТаблицаКоллективныхПУ
	|ГДЕ
	|	ТаблицаКоллективныхПУ.Объект ССЫЛКА Справочник.КВП_Здания
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКоллективныхПУ.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоллективныхПУ.Объект КАК Подъезд,
	|	МАКСИМУМ(ТаблицаКоллективныхПУ.ЕстьПодъездныйСчетчик) КАК ЕстьПодъездныйСчетчик,
	|	МАКСИМУМ(ТаблицаКоллективныхПУ.ЕстьКоллективныйСчетчик) КАК ЕстьКоллективныйСчетчик
	|ПОМЕСТИТЬ ТаблицаКоллективныхСчетчиковПодъезды
	|ИЗ
	|	ТаблицаКоллективныхПУ КАК ТаблицаКоллективныхПУ
	|ГДЕ
	|	ТаблицаКоллективныхПУ.Объект ССЫЛКА Справочник.КВП_Подъезды
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКоллективныхПУ.Объект";
	Запрос.Выполнить();
	
	// Дополним запрос необходимыми сведениями по повышающим коэффициентам для расчета по нормативу.
	// Для этого выполним подзапросы, которые определяют наличие возможности установки приборов учета 
	// в зданиях и помещениях, а также значения коэффициентов повышения по услугам.
	// В итоговой таблице по данным показателям берется максимум, чтобы на уровне детализации по услугам
	// была возможность получить их значения. При этом на уровне услуг значения будут объективны, так как
	// сведения получаются по зданиям, помещениям и услугам.
	
	// Наличие возможности установки приборов учета может указываться для всего здания и для помещения в этом
	// здании. Сначала обработаем сведения в разрезе зданий, а затем обновим информацию для помещений, по которым
	// имеются сведения о возможности установки приборов учета.
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГотоваяТаблицаПУ.Здание,
	|	ГотоваяТаблицаПУ.Помещение,
	|	ГотоваяТаблицаПУ.Услуга
	|ПОМЕСТИТЬ врПомещенияСУстановленнымиПУ
	|ИЗ
	|	ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Здание,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Услуга,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.ТехническаяВозможностьПрисутствует
	|ПОМЕСТИТЬ врСведенияОВозможностиУстановкиПУВЗданиях
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях КАК УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях
	|ГДЕ
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Помещение = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПомещенияСУстановленнымиПУ.Здание,
	|	врПомещенияСУстановленнымиПУ.Помещение,
	|	врПомещенияСУстановленнымиПУ.Услуга,
	|	ЕСТЬNULL(врСведенияОВозможностиУстановкиПУВЗданиях.ТехническаяВозможностьПрисутствует, ЛОЖЬ) КАК ТехническаяВозможностьПрисутствует
	|ПОМЕСТИТЬ врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий
	|ИЗ
	|	врПомещенияСУстановленнымиПУ КАК врПомещенияСУстановленнымиПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСведенияОВозможностиУстановкиПУВЗданиях КАК врСведенияОВозможностиУстановкиПУВЗданиях
	|		ПО врПомещенияСУстановленнымиПУ.Здание = врСведенияОВозможностиУстановкиПУВЗданиях.Здание
	|			И врПомещенияСУстановленнымиПУ.Услуга = врСведенияОВозможностиУстановкиПУВЗданиях.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Здание,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Помещение,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Услуга,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.ТехническаяВозможностьПрисутствует
	|ПОМЕСТИТЬ врСведенияОВозможностиУстановкиПУВПомещениях
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях КАК УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях
	|ГДЕ
	|	НЕ УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Помещение = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Здание,
	|	врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Помещение,
	|	врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Услуга,
	|	ЕСТЬNULL(врСведенияОВозможностиУстановкиПУВПомещениях.ТехническаяВозможностьПрисутствует, врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.ТехническаяВозможностьПрисутствует) КАК ТехническаяВозможностьУстановкиПУПрисутствует
	|ПОМЕСТИТЬ врСведенияОВозможностиУстановкиПУ
	|ИЗ
	|	врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий КАК врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСведенияОВозможностиУстановкиПУВПомещениях КАК врСведенияОВозможностиУстановкиПУВПомещениях
	|		ПО врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Здание = врСведенияОВозможностиУстановкиПУВПомещениях.Здание
	|			И врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Помещение = врСведенияОВозможностиУстановкиПУВПомещениях.Помещение
	|			И врПомещенияСоСведениямиОВозможностиУстановкиПУВРазрезеЗданий.Услуга = врСведенияОВозможностиУстановкиПУВПомещениях.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПовышающихКоэффициентов.Услуга,
	|	ЗначенияПовышающихКоэффициентов.ПовышающийКоэффициент КАК ПовышающийКоэффициентДляНачисленияПоНормативу
	|ПОМЕСТИТЬ врЗначенияПовышающихКоэффициентов
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативу.СрезПоследних(
	|			&Период,
	|			Услуга В
	|				(ВЫБРАТЬ
	|					ГотоваяТаблицаПУ.Услуга
	|				ИЗ
	|					ГотоваяТаблицаПУ КАК ГотоваяТаблицаПУ)) КАК ЗначенияПовышающихКоэффициентов";
	Запрос.Выполнить();
	
	// Выполнение итогового запроса со всеми ранее полученными временными таблицами.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЛС_с_ПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛС_с_ПУ.Помещение КАК Помещение,
	|	ТаблицаЛС_с_ПУ.Здание КАК Здание,
	|	ТаблицаЛС_с_ПУ.Подъезд КАК Подъезд,
	|	ТаблицаЛС_с_ПУ.ЛицевойСчетНаименование КАК ЛицевойСчетНаименование,
	|	ТаблицаЛС_с_ПУ.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА ТаблицаЛС_с_ПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЛС_с_ПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифностьСчетчика,
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчик КАК ЕстьСчетчик,
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты КАК ЕстьСчетчикСУчетомПоверкиПоломкиУтраты,
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчик КАК ЕстьПриборУчета,
	|	ТаблицаЛС_с_ПУ.СчетчикНаПомещение КАК СчетчикНаПомещение,
	|	ЕСТЬNULL(ТаблицаКоллективныхСчетчиковЗдания.ЕстьДомовойСчетчик, ЛОЖЬ) КАК ЕстьДомовойСчетчик,
	|	ЕСТЬNULL(ТаблицаКоллективныхСчетчиковПодъезды.ЕстьПодъездныйСчетчик, ЛОЖЬ) КАК ЕстьПодъездныйСчетчик,
	|	ЕСТЬNULL(ТаблицаКоллективныхСчетчиковЗдания.ЕстьКоллективныйСчетчик, ЕСТЬNULL(ТаблицаКоллективныхСчетчиковПодъезды.ЕстьКоллективныйСчетчик, ЛОЖЬ)) КАК ЕстьКоллективныйСчетчик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаЛС_с_ПУ.ДневноеПоказаниеОстаток, 0) + ЕСТЬNULL(ТаблицаЛС_с_ПУ.НочноеПоказаниеОстаток, 0) + ЕСТЬNULL(ТаблицаЛС_с_ПУ.ПиковоеПоказаниеОстаток, 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРасход,
	|	ЕСТЬNULL(ТаблицаПоказанийСчетчиковЗаПериод.ЕстьПоказания, ЛОЖЬ) КАК ПоказанияЗаПериодВведены,
	|	ТаблицаЛС_с_ПУ.Услуга КАК Услуга,
	|	ТаблицаЛС_с_ПУ.Услуга.СпособРасчетаПоПУБезДействующихПУ КАК СпособРасчетаПоПУБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.ПериодРасчетаПоСреднемуБезДействующихПУ КАК ПериодРасчетаПоСреднемуБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.СпособРасчетаПоПУБезПоказаний КАК СпособРасчетаПоПУБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.ПериодРасчетаПоСреднемуБезПоказаний КАК ПериодРасчетаПоСреднемуБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.НастройкаОтсутствияДействующегоПУ КАК НастройкаОтсутствияДействующегоПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний КАК ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений КАК КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений,
	|	ТаблицаЛС_с_ПУ.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений КАК КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений,
	|	ТаблицаЛС_с_ПУ.Услуга.НастройкаОтсутствияПоказанийПУ КАК НастройкаОтсутствияПоказанийПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.МинимальныйПериодРасчетаПоСреднемуБезПоказаний КАК МинимальныйПериодРасчетаПоСреднемуБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ КАК МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЛС_с_ПУ.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСоставнаяУслуга,
	|	ТаблицаЛС_с_ПУ.ДневноеПоказаниеОстаток КАК ДневноеПоказаниеОстаток,
	|	ТаблицаЛС_с_ПУ.НочноеПоказаниеОстаток КАК НочноеПоказаниеОстаток,
	|	ТаблицаЛС_с_ПУ.ПиковоеПоказаниеОстаток КАК ПиковоеПоказаниеОстаток,
	|	СУММА(ЕСТЬNULL(ТаблицаКоличестваВладельцевПУ.КоличествоВладельцев, 1)) КАК КоличествоВладельцев,
	|	ЕСТЬNULL(врСведенияОВозможностиУстановкиПУ.ТехническаяВозможностьУстановкиПУПрисутствует, ЛОЖЬ) КАК ТехническаяВозможностьУстановкиПУПрисутствует,
	|	ЕСТЬNULL(врЗначенияПовышающихКоэффициентов.ПовышающийКоэффициентДляНачисленияПоНормативу, 1) КАК ПовышающийКоэффициентДляНачисленияПоНормативу
	|ИЗ
	|	ГотоваяТаблицаПУ КАК ТаблицаЛС_с_ПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоказанийЗаПериод КАК ТаблицаПоказанийСчетчиковЗаПериод
	|		ПО ТаблицаЛС_с_ПУ.Счетчик = ТаблицаПоказанийСчетчиковЗаПериод.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличестваВладельцевПУ КАК ТаблицаКоличестваВладельцевПУ
	|		ПО ТаблицаЛС_с_ПУ.Счетчик = ТаблицаКоличестваВладельцевПУ.Счетчик
	|			И ТаблицаЛС_с_ПУ.Помещение = ТаблицаКоличестваВладельцевПУ.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоллективныхСчетчиковЗдания КАК ТаблицаКоллективныхСчетчиковЗдания
	|		ПО ТаблицаЛС_с_ПУ.Здание = ТаблицаКоллективныхСчетчиковЗдания.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоллективныхСчетчиковПодъезды КАК ТаблицаКоллективныхСчетчиковПодъезды
	|		ПО ТаблицаЛС_с_ПУ.Подъезд = ТаблицаКоллективныхСчетчиковПодъезды.Подъезд
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСведенияОВозможностиУстановкиПУ КАК врСведенияОВозможностиУстановкиПУ
	|		ПО ТаблицаЛС_с_ПУ.Здание = врСведенияОВозможностиУстановкиПУ.Здание
	|			И ТаблицаЛС_с_ПУ.Помещение = врСведенияОВозможностиУстановкиПУ.Помещение
	|			И ТаблицаЛС_с_ПУ.Услуга = врСведенияОВозможностиУстановкиПУ.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ врЗначенияПовышающихКоэффициентов КАК врЗначенияПовышающихКоэффициентов
	|		ПО ТаблицаЛС_с_ПУ.Услуга = врЗначенияПовышающихКоэффициентов.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЛС_с_ПУ.Здание,
	|	ТаблицаЛС_с_ПУ.Подъезд,
	|	ТаблицаЛС_с_ПУ.Помещение,
	|	ТаблицаЛС_с_ПУ.ЛицевойСчет,
	|	ТаблицаЛС_с_ПУ.ЛицевойСчетНаименование,
	|	ТаблицаЛС_с_ПУ.Счетчик,
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчик,
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты,
	|	ТаблицаЛС_с_ПУ.ДневноеПоказаниеОстаток,
	|	ТаблицаЛС_с_ПУ.НочноеПоказаниеОстаток,
	|	ТаблицаЛС_с_ПУ.ПиковоеПоказаниеОстаток,
	|	ТаблицаПоказанийСчетчиковЗаПериод.ЕстьПоказания,
	|	ТаблицаЛС_с_ПУ.СчетчикНаПомещение,
	|	ТаблицаКоллективныхСчетчиковЗдания.ЕстьДомовойСчетчик,
	|	ТаблицаКоллективныхСчетчиковПодъезды.ЕстьПодъездныйСчетчик,
	|	ЕСТЬNULL(ТаблицаКоллективныхСчетчиковЗдания.ЕстьКоллективныйСчетчик, ЕСТЬNULL(ТаблицаКоллективныхСчетчиковПодъезды.ЕстьКоллективныйСчетчик, ЛОЖЬ)),
	|	ТаблицаЛС_с_ПУ.Услуга,
	|	ТаблицаЛС_с_ПУ.Услуга.СпособРасчетаПоПУБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.ПериодРасчетаПоСреднемуБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.СпособРасчетаПоПУБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.ПериодРасчетаПоСреднемуБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.НастройкаОтсутствияДействующегоПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений,
	|	ТаблицаЛС_с_ПУ.Услуга.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений,
	|	ТаблицаЛС_с_ПУ.Услуга.НастройкаОтсутствияПоказанийПУ,
	|	ТаблицаЛС_с_ПУ.Услуга.МинимальныйПериодРасчетаПоСреднемуБезПоказаний,
	|	ТаблицаЛС_с_ПУ.Услуга.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ,
	|	ТаблицаЛС_с_ПУ.СпособРасчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЛС_с_ПУ.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЛС_с_ПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЛС_с_ПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЕСТЬNULL(врСведенияОВозможностиУстановкиПУ.ТехническаяВозможностьУстановкиПУПрисутствует, ЛОЖЬ),
	|	ЕСТЬNULL(врЗначенияПовышающихКоэффициентов.ПовышающийКоэффициентДляНачисленияПоНормативу, 1),
	|	ТаблицаЛС_с_ПУ.ЕстьСчетчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчетНаименование,
	|	ТарифностьСчетчика
	|ИТОГИ
	|	МАКСИМУМ(ЕстьСчетчик),
	|	МИНИМУМ(ЕстьПриборУчета),
	|	МИНИМУМ(ЕстьСчетчикСУчетомПоверкиПоломкиУтраты),
	|	МАКСИМУМ(СчетчикНаПомещение),
	|	МАКСИМУМ(ЭтоСоставнаяУслуга),
	|	СУММА(КоличествоВладельцев),
	|	МАКСИМУМ(ТехническаяВозможностьУстановкиПУПрисутствует),
	|	МАКСИМУМ(ПовышающийКоэффициентДляНачисленияПоНормативу)
	|ПО
	|	Здание,
	|	Подъезд,
	|	Помещение,
	|	ЛицевойСчет,
	|	Услуга";
	
	ЗапросПоКолвуПУ = Неопределено;
	
	// Таблица периодов используется для того, чтобы выполнять начисление в разбивке по периодам начисления.

	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",                Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",             Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДнейНачислено",             Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("ВсегоДнейНачислено",        Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("ЕстьСчетчик",               Новый ОписаниеТипов("Булево"));
	ТаблицаПериодов.Колонки.Добавить("Счетчик",                   Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	ТаблицаПериодов.Колонки.Добавить("Объект",                    Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета, СправочникСсылка.УПЖКХ_Помещения")); 
																					  // Помещение или л/с, на кот. установлен прибор учета.
	ТаблицаПериодов.Колонки.Добавить("ЭтоСоставнаяУслуга",        Новый ОписаниеТипов("Булево"));
	ТаблицаПериодов.Колонки.Добавить("СостояниеПУ",               Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_СостоянияПриборовУчета"));
	ТаблицаПериодов.Колонки.Добавить("ТарифностьСчетчика",        Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("ДневноеПоказаниеОстаток",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(18,6));
	ТаблицаПериодов.Колонки.Добавить("НочноеПоказаниеОстаток",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(18,6));
	ТаблицаПериодов.Колонки.Добавить("ПиковоеПоказаниеОстаток",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(18,6));
	ТаблицаПериодов.Колонки.Добавить("СверткаНевозможна",         Новый ОписаниеТипов("Булево"));
	ТаблицаПериодов.Колонки.Добавить("ТипРасчета",                Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("ФормулаРасчета",            Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("РасчетПоОтсутствиюПоказанийПриУтереПоломкеПоверке", Новый ОписаниеТипов("Булево"));
	
	// Таблица периодов по всем ПУ, связанным с л/с.
	ТаблицаПериодовПоВсемПУ = ТаблицаПериодов.Скопировать(); 
	СтруктураПараметров = Новый Структура();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоЗданию = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураТаблицКэша = ПолучитьСтруктуруТаблицКэша(РезультатЗапроса.Выгрузить());
	
	// КэшПериодовСчетчиков - таблица значений, содержащая данные о периодах всех счетчиков всех лицевых счетов табличной части документа.
	// Используется в оптимизационных целях - поиск требуемого периода счетчика будет осуществляться в данной таблице, а не выполнением запроса по каждому отдельному счетчику.
	КэшПериодовСчетчиков = СтруктураТаблицКэша.КэшПериодовСчетчиков;
	
	// КэшТарифов - таблица значений, содержащая актуальные данные о требуемых тарифах всех лицевых счетов табличной части документа.
	// Используется в оптимизационных целях - поиск требуемого тарифа будет осуществляться в данной таблице. Передается в функцию "ПолучитьТарифПоЛицевомуСчету" через структуру "СтруктураПараметров".
	КэшТарифов           = СтруктураТаблицКэша.КэшТарифов;
	
	СтруктураПараметров.Вставить("КэшТарифов", КэшТарифов);
	
	Если СтруктураТаблицКэша.Свойство("КэшТарифовНаКонецМесяца") Тогда
		СтруктураПараметров.Вставить("КэшТарифовНаКонецМесяца", СтруктураТаблицКэша.КэшТарифовНаКонецМесяца);
	КонецЕсли;
	
	КолДнейВМесяце = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата);
	
	Пока ВыборкаПоЗданию.Следующий() Цикл
		
		// При определении наличия в здании, сооружении/подъезде действующих ИПУ учитываются 
		// ситуации, когда ИПУ действовал даже только часть периода начисления.
		
		// Расчет по формуле №3 постановления №354 не производится, если в одном из помещений
		// ИПУ действовал только часть периода начисления.
		
		ЕстьИндивидуальныеПУВДоме             = ВыборкаПоЗданию.ЕстьСчетчик;
		УВсехВДомеУстановленыИндивидуальныеПУ = ВыборкаПоЗданию.ЕстьПриборУчета;
		
		// При расчете по Постановлению №1708 если счетчик временно отключен (на поверку, по утрате или выходу из строя),
		// то считаем, что счетчик в помещении есть.Если в помещении ранее счетчик не устанавливался или зафиксирован факт
		// его полного отключения, то считаем что в помещении счетчика нет.
		Если Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
			 И Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
			УВсехВДомеУстановленыИндивидуальныеПУ = ВыборкаПоЗданию.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты;
		КонецЕсли;
		
		ВыборкаПоПодъезду = ВыборкаПоЗданию.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПодъезду.Следующий() Цикл
			
			ЕстьИндивидуальныеПУВПодъезде             = ВыборкаПоПодъезду.ЕстьСчетчик;
			УВсехВПодъездеУстановленыИндивидуальныеПУ = ВыборкаПоПодъезду.ЕстьПриборУчета;
			
			// При расчете по Постановлению №1708 если счетчик временно отключен (на поверку, по утрате или выходу из строя),
			// то считаем, что счетчик в помещении есть.Если в помещении ранее счетчик не устанавливался или зафиксирован факт
			// его полного отключения, то считаем что в помещении счетчика нет.
			Если Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
				 И Услуга.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
				УВсехВПодъездеУстановленыИндивидуальныеПУ = ВыборкаПоПодъезду.ЕстьСчетчикСУчетомПоверкиПоломкиУтраты;
			КонецЕсли;
			
			ВыборкаПоПомещению = ВыборкаПоПодъезду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ВыборкаПоПомещению.Следующий() Цикл
				
				ВыборкаПоЛС = ВыборкаПоПомещению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоЛС.Следующий() Цикл
					
					ВыборкаПоУслугам = ВыборкаПоЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоУслугам.Следующий() Цикл
						
						ВыборкаПоПУ = ВыборкаПоУслугам.Выбрать();
						ДневноеПоказаниеОстаток = 0;
						НочноеПоказаниеОстаток  = 0;
						ПиковоеПоказаниеОстаток = 0;
						ТаблицаПериодовПоВсемПУ.Очистить();
						
						Пока ВыборкаПоПУ.Следующий() Цикл
							
							// Заполним таблицу периодов: для ПУ определяются периоды действия.
							// По каждому периоду определим тип расчета.
							ЗаполнитьТаблицуПериодов(ТаблицаПериодов, ВыборкаПоПУ, 
													 ЕстьИндивидуальныеПУВДоме, 
													 ЕстьИндивидуальныеПУВПодъезде, 
													 УВсехВДомеУстановленыИндивидуальныеПУ, 
													 УВсехВПодъездеУстановленыИндивидуальныеПУ,
													 КэшПериодовСчетчиков);
							
							ТаблицаПериодов.ЗаполнитьЗначения(?(ВыборкаПоПУ.СчетчикНаПомещение, ВыборкаПоПУ.Помещение, 
																								ВыборкаПоЛС.ЛицевойСчет), "Объект");
							
							// Когда на помещение открыто несколько л/с и один прибор учета установлен на эти лицевые счета,
							// или когда один прибор учета установлен на несколько помещений,
							// то распределение расхода по лицевым счетам/помещениям происходит на этапе ввода показаний.
							
							// Если на одно помещение открыто несколько л/с и прибор учета установлен на помещение,
							// то для распределения расхода по лицевым счетам необходимо учитывать доли.
							Если ВыборкаПоПУ.СчетчикНаПомещение И ВыборкаПоПУ.КоличествоВладельцев > 1 Тогда
								ДоляЛС = ДоляЛицевогоСчета(ТаблицаДолей, ВыборкаПоЛС.ЛицевойСчет);
							Иначе
								ДоляЛС = 1;
							КонецЕсли;
							
							ТарифностьСчетчика = ВыборкаПоПУ.ТарифностьСчетчика;
							
							ВсегоДнейНачислено = 0;
							Для Каждого Стр Из ТаблицаПериодов Цикл
								Если Стр.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания Тогда
									ВсегоДнейНачислено = ВсегоДнейНачислено + Стр.ДнейНачислено;
								Иначе
									Стр.ДневноеПоказаниеОстаток = 0;
									Стр.НочноеПоказаниеОстаток  = 0;
									Стр.ПиковоеПоказаниеОстаток = 0;
								КонецЕсли;
							КонецЦикла;
							ВсегоДнейНачислено = ?(ВсегоДнейНачислено = 0, КолДнейВМесяце, ВсегоДнейНачислено);
							
							Для Каждого Стр Из ТаблицаПериодов Цикл
								Стр.ВсегоДнейНачислено = ВсегоДнейНачислено;
								Стр.ДневноеПоказаниеОстаток = Стр.ДневноеПоказаниеОстаток * (Стр.ДнейНачислено / ВсегоДнейНачислено) * ДоляЛС;
								
								// добавим в табличную часть "Счетчики" расход по дневному показанию.
								НоваяСтрокаСчетчика = Счетчики.Добавить();
								НоваяСтрокаСчетчика.Объект      = ВыборкаПоЛС.ЛицевойСчет;
								НоваяСтрокаСчетчика.Счетчик     = ВыборкаПоПУ.Счетчик;
								НоваяСтрокаСчетчика.ВидТарифа   = Перечисления.КВП_ВидыТарифов.Дневной;
								НоваяСтрокаСчетчика.Расход      = Стр.ДневноеПоказаниеОстаток;
								
								Если ТарифностьСчетчика > 1 Тогда
									Стр.НочноеПоказаниеОстаток = Стр.НочноеПоказаниеОстаток * (Стр.ДнейНачислено / ВсегоДнейНачислено) * ДоляЛС;
									
									// добавим в табличную часть "Счетчики" расход по ночному показанию.
									НоваяСтрокаСчетчика = Счетчики.Добавить();
									НоваяСтрокаСчетчика.Объект      = ВыборкаПоЛС.ЛицевойСчет;
									НоваяСтрокаСчетчика.Счетчик     = ВыборкаПоПУ.Счетчик;
									НоваяСтрокаСчетчика.ВидТарифа   = Перечисления.КВП_ВидыТарифов.Ночной;
									НоваяСтрокаСчетчика.Расход      = Стр.НочноеПоказаниеОстаток;
									
								КонецЕсли;
								Если ТарифностьСчетчика > 2 Тогда
									Стр.ПиковоеПоказаниеОстаток = Стр.ПиковоеПоказаниеОстаток * (Стр.ДнейНачислено / ВсегоДнейНачислено) * ДоляЛС;
									
									// добавим в табличную часть "Счетчики" расход по пиковому показанию.
									НоваяСтрокаСчетчика = Счетчики.Добавить();
									НоваяСтрокаСчетчика.Объект      = ВыборкаПоЛС.ЛицевойСчет;
									НоваяСтрокаСчетчика.Счетчик     = ВыборкаПоПУ.Счетчик;
									НоваяСтрокаСчетчика.ВидТарифа   = Перечисления.КВП_ВидыТарифов.Пиковый;
									НоваяСтрокаСчетчика.Расход      = Стр.ПиковоеПоказаниеОстаток;
									
								КонецЕсли;
								НоваяСтрока = ТаблицаПериодовПоВсемПУ.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
							КонецЦикла;
							
						КонецЦикла; // Цикл по ПУ
						
						СтруктураПараметров.Вставить("ЛицевойСчет",           ВыборкаПоЛС.ЛицевойСчет);
						СтруктураПараметров.Вставить("Услуга",                ВыборкаПоУслугам.Услуга);
						СтруктураПараметров.Вставить("ВсегоДнейНачислений",   КолДнейВМесяце);
						
						// выделим общие периоды
						ТаблицаОбщихПериодов = ПолучитьОбщиеПериоды(ТаблицаПериодовПоВсемПУ, СтруктураПараметров);
						
						// Приведем таблицу периодов к минимальным периодам.
						// После преобразования таблица периодов не будет иметь пересечений между периодами.
						РазбитьТаблицуПериодовНаМинимальные(ТаблицаПериодовПоВсемПУ, ТаблицаОбщихПериодов);
						
						Если НЕ ВыборкаПоЛС.ЭтоСоставнаяУслуга Тогда
							ДобавитьСтрокиПоНачислениюУслугПоПУ(ТЗУслугиПоПоказаниямПУ, ТаблицаПериодовПоВсемПУ, ТаблицаОбщихПериодов,
							                                    СтруктураПараметров, ВыборкаПоУслугам, ЗапросПоКолвуПУ, ТаблицаДолей);
						Иначе
							ДобавитьСтрокиПоНачислениюУслугПоСоставнымУслугам(ТЗУслугиПоПоказаниямПУ, ТаблицаПериодовПоВсемПУ,
							                                                  ТаблицаОбщихПериодов, СтруктураПараметров, ВыборкаПоУслугам, 
							                                                  ЗапросПоКолвуПУ, ТаблицаДолей);
						КонецЕсли;
						
					КонецЦикла; // Цикл по услуге
					
				КонецЦикла; // Цикл по л/с
				
			КонецЦикла; // Цикл по помещению
			
		КонецЦикла; // Цикл по подъезду
		
	КонецЦикла; // Цикл по зданию
	
КонецПроцедуры //ДополнитьТаблицуУслугПоПоказаниямИндивидуальнымиПУ()

// Функция возвращает структуру, содержащую таблицы кэша: "кэш периодов счетчиков" и "кэш тарифов".
Функция ПолучитьСтруктуруТаблицКэша(ТаблицаРезультата)
	
	СтруктураТаблицКэша = Новый Структура();
	
	// Создадим и заполним таблицу услуг для получения "кэша" тарифов.
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	// Создадим и заполним таблицу значений по счетчикам, а по ней получии таблицу "кэша" периодов счетчиков.
	ТаблицаСчетчиков = Новый ТаблицаЗначений;
	
	МассивТиповУслуг = Новый Массив;
	МассивТиповУслуг.Добавить(Тип("СправочникСсылка.КВП_Услуги"));
	МассивТиповУслуг.Добавить(Новый ОписаниеТипов("Массив"));
	
	ТаблицаСчетчиков.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаСчетчиков.Колонки.Добавить("Счетчик",     Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	ТаблицаСчетчиков.Колонки.Добавить("Объект",      Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаСчетчиков.Колонки.Добавить("Помещение",   Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
	ТаблицаСчетчиков.Колонки.Добавить("Здание",      Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ТаблицаСчетчиков.Колонки.Добавить("СписокУслуг", Новый ОписаниеТипов(МассивТиповУслуг));
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТарифностьСчетчика) Тогда
			СписокУслуг = ?(ТекСтрока.Услуга.СоставныеУслуги.Количество() > 0,
			                ТекСтрока.Услуга.СоставныеУслуги.ВыгрузитьКолонку("Услуга"),
			                ТекСтрока.Услуга);
			СтрокаТаблицыСчетчиков = ТаблицаСчетчиков.Добавить();
			СтрокаТаблицыСчетчиков.Услуга      = ТекСтрока.Услуга;
			СтрокаТаблицыСчетчиков.Счетчик     = ТекСтрока.Счетчик;
			СтрокаТаблицыСчетчиков.Объект      = ТекСтрока.ЛицевойСчет;
			СтрокаТаблицыСчетчиков.Помещение   = ТекСтрока.Помещение;
			СтрокаТаблицыСчетчиков.Здание      = ТекСтрока.Здание;
			СтрокаТаблицыСчетчиков.СписокУслуг = СписокУслуг;
			
			Если СписокЛицевыхСчетов.НайтиПоЗначению(ТекСтрока.ЛицевойСчет) = Неопределено Тогда
				СписокЛицевыхСчетов.Добавить(ТекСтрока.ЛицевойСчет);
			КонецЕсли;
			
			Если ТекСтрока.Услуга.СоставныеУслуги.Количество() > 0 Тогда
				Для Каждого ТекУслуга Из СписокУслуг Цикл
					СтрокаТаблицыУслуг = ТаблицаУслуг.Добавить();
					СтрокаТаблицыУслуг.Услуга = ТекУслуга;
				КонецЦикла;
			Иначе
				СтрокаТаблицыУслуг = ТаблицаУслуг.Добавить();
				СтрокаТаблицыУслуг.Услуга = СписокУслуг;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	КэшПериодовСчетчиков = ПолучитьКэшПериодовСчетчиков(ТаблицаСчетчиков);
	
	ТаблицаУслуг.Свернуть("Услуга");
	КэшТарифов = ПолучитьКэшТарифов(ТаблицаСчетчиков, ТаблицаУслуг);
	
	// "Закэшируем" тарифы на конец месяца для каждого л/с по каждой услуге, чтобы в случае,
	// если период равен концу месяца, тарифы получались из кэша, а не для каждого л/с.
	// Реализовано в целях оптимизации.
	КэшТарифовПоВсемЛС = Новый ТаблицаЗначений;
	
	СтруктураПараметров = Новый Структура("КэшТарифов", КэшТарифов);
	
	ДатаКонцаМесяца = КонецМесяца(Дата);
	
	СписокТарифов = Новый СписокЗначений;
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
	
	Для Каждого ТекСтрока ИЗ ТаблицаУслуг Цикл
		
		КэшПоУслуге = ПолучитьТарифПоЛицевомуСчету(ДатаКонцаМесяца, Организация, ТекСтрока.Услуга, СписокЛицевыхСчетов, СписокТарифов, СтруктураПараметров);
		
		Если КэшТарифовПоВсемЛС.Количество() = 0 Тогда
			
			КэшТарифовПоВсемЛС = КэшПоУслуге.Скопировать();
			
			КэшТарифовПоВсемЛС.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(ДатаКонцаМесяца, "Период");
			
			КэшТарифовПоВсемЛС.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(ТекСтрока.Услуга, "Услуга");
			
		Иначе
			Для Каждого СтрокаТарифа ИЗ КэшПоУслуге Цикл
				
				НоваяСтрока = КэшТарифовПоВсемЛС.Добавить();
				НоваяСтрока.Период = ДатаКонцаМесяца;
				НоваяСтрока.Услуга = ТекСтрока.Услуга;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТарифа);
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КэшТарифовПоВсемЛС.Количество() > 0 Тогда
		КэшТарифовПоВсемЛС.Индексы.Добавить("Объект, Услуга, ВидТарифа");
		СтруктураТаблицКэша.Вставить("КэшТарифовНаКонецМесяца", КэшТарифовПоВсемЛС);
	КонецЕсли;
	
	СтруктураТаблицКэша.Вставить("КэшПериодовСчетчиков", КэшПериодовСчетчиков);
	СтруктураТаблицКэша.Вставить("КэшТарифов",           КэшТарифов);
	
	Возврат СтруктураТаблицКэша;
	
КонецФункции

// Функция возвращает кэш периодов для таблицы счетчиков.
Функция ПолучитьКэшПериодовСчетчиков(ТаблицаСчетчиков)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.Услуга КАК Услуга,
	|	ТаблицаДанных.Счетчик КАК Счетчик,
	|	ТаблицаДанных.Объект КАК Объект,
	|	ТаблицаДанных.СписокУслуг КАК СписокУслуг,
	|	ТаблицаДанных.Здание КАК Здание,
	|	ТаблицаДанных.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДанных.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) КАК ДатаНач,
	|	ЕСТЬNULL(СчетчикиНаНачалоПериода.Действует, ЛОЖЬ) КАК Действует,
	|	ВЫБОР
	|		КОГДА СчетчикиНаНачалоПериода.Счетчик ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетчикБылУстановлен,
	|	СчетчикиНаНачалоПериода.ДатаИзменения КАК Период,
	|	ТаблицаСчетчиков.Услуга КАК Услуга,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.СписокУслуг КАК СписокУслуг,
	|	ТаблицаСчетчиков.Здание КАК Здание,
	|	ТаблицаСчетчиков.Помещение КАК Помещение
	|ПОМЕСТИТЬ врСрезНаНачалоПериода
	|ИЗ
	|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач,
	|				Счетчик В
	|						(ВЫБРАТЬ
	|							ТаблицаСчетчиков.Счетчик
	|						ИЗ
	|							ТаблицаСчетчиков)
	|					И ДатаИзменения <= &ДатаНач) КАК СчетчикиНаНачалоПериода
	|		ПО (СчетчикиНаНачалоПериода.Счетчик = ТаблицаСчетчиков.Счетчик)
	|			И (ВЫБОР
	|				КОГДА СчетчикиНаНачалоПериода.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|					ТОГДА СчетчикиНаНачалоПериода.Объект = ТаблицаСчетчиков.Объект
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ врАктуальныйДокумент
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			Счетчик В
	|				(ВЫБРАТЬ
	|					ТаблицаСчетчиков.Счетчик
	|				ИЗ
	|					ТаблицаСчетчиков)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения КАК Период,
	|	КВП_ЗакрепленныеСчетчики.Действует КАК Действует,
	|	ИСТИНА КАК СчетчикБылУстановлен,
	|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Объект КАК Объект
	|ПОМЕСТИТЬ врКВП_ЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врАктуальныйДокумент КАК врАктуальныйДокумент
	|		ПО (врАктуальныйДокумент.Регистратор = КВП_ЗакрепленныеСчетчики.Регистратор)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик В
	|			(ВЫБРАТЬ
	|				ТаблицаСчетчиков.Счетчик
	|			ИЗ
	|				ТаблицаСчетчиков)
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Тарифы.Период КАК Период,
	|	КВП_Тарифы.Объект КАК Объект,
	|	КВП_Тарифы.Услуга КАК Услуга
	|ПОМЕСТИТЬ врКВП_Тарифы
	|ИЗ
	|	РегистрСведений.КВП_Тарифы КАК КВП_Тарифы
	|ГДЕ
	|	КВП_Тарифы.Организация = &Организация
	|	И КВП_Тарифы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период КАК Период,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врУПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Период КАК Период,
	|	КВП_ЗакрепленныеСчетчики.Действует КАК Действует,
	|	КВП_ЗакрепленныеСчетчики.СчетчикБылУстановлен КАК СчетчикБылУстановлен,
	|	NULL КАК СменаТарифа,
	|	NULL КАК СменаДоговора,
	|	ТаблицаСчетчиков.Услуга КАК Услуга,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.СписокУслуг КАК СписокУслуг,
	|	ТаблицаСчетчиков.Здание КАК Здание,
	|	ТаблицаСчетчиков.Помещение КАК Помещение
	|ПОМЕСТИТЬ врТаблицаИтоговыхПериодов
	|ИЗ
	|	врКВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ПО КВП_ЗакрепленныеСчетчики.Счетчик = ТаблицаСчетчиков.Счетчик
	|			И (ВЫБОР
	|				КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|					ТОГДА КВП_ЗакрепленныеСчетчики.Объект = ТаблицаСчетчиков.Объект
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врСрезНаНачалоПериода.ДатаНач,
	|	врСрезНаНачалоПериода.Действует,
	|	врСрезНаНачалоПериода.СчетчикБылУстановлен,
	|	NULL,
	|	NULL,
	|	врСрезНаНачалоПериода.Услуга,
	|	врСрезНаНачалоПериода.Счетчик,
	|	врСрезНаНачалоПериода.Объект,
	|	врСрезНаНачалоПериода.СписокУслуг,
	|	врСрезНаНачалоПериода.Здание,
	|	врСрезНаНачалоПериода.Помещение
	|ИЗ
	|	врСрезНаНачалоПериода КАК врСрезНаНачалоПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_Тарифы.Период,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.СписокУслуг,
	|	ТаблицаСчетчиков.Здание,
	|	ТаблицаСчетчиков.Помещение
	|ИЗ
	|	врКВП_Тарифы КАК КВП_Тарифы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ПО (ИСТИНА)
	|			И (КВП_Тарифы.Объект = НЕОПРЕДЕЛЕНО
	|				ИЛИ КВП_Тарифы.Объект = ТаблицаСчетчиков.Здание
	|				ИЛИ КВП_Тарифы.Объект = ТаблицаСчетчиков.Помещение)
	|			И (КВП_Тарифы.Услуга В (ТаблицаСчетчиков.СписокУслуг))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.СписокУслуг,
	|	ТаблицаСчетчиков.Здание,
	|	ТаблицаСчетчиков.Помещение
	|ИЗ
	|	врУПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ПО УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = ТаблицаСчетчиков.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоговыхПериодов.Период КАК Период,
	|	МАКСИМУМ(ТаблицаИтоговыхПериодов.Действует) КАК Действует,
	|	МАКСИМУМ(ТаблицаИтоговыхПериодов.СчетчикБылУстановлен) КАК СчетчикБылУстановлен,
	|	МАКСИМУМ(ТаблицаИтоговыхПериодов.СменаТарифа) КАК СменаТарифа,
	|	МАКСИМУМ(ТаблицаИтоговыхПериодов.СменаДоговора) КАК СменаДоговора,
	|	ТаблицаИтоговыхПериодов.Услуга КАК Услуга,
	|	ТаблицаИтоговыхПериодов.Счетчик КАК Счетчик,
	|	ТаблицаИтоговыхПериодов.Объект КАК Объект,
	|	ТаблицаИтоговыхПериодов.СписокУслуг КАК СписокУслуг,
	|	ТаблицаИтоговыхПериодов.Здание КАК Здание,
	|	ТаблицаИтоговыхПериодов.Помещение КАК Помещение
	|ИЗ
	|	врТаблицаИтоговыхПериодов КАК ТаблицаИтоговыхПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИтоговыхПериодов.Период,
	|	ТаблицаИтоговыхПериодов.Услуга,
	|	ТаблицаИтоговыхПериодов.Счетчик,
	|	ТаблицаИтоговыхПериодов.Объект,
	|	ТаблицаИтоговыхПериодов.СписокУслуг,
	|	ТаблицаИтоговыхПериодов.Здание,
	|	ТаблицаИтоговыхПериодов.Помещение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаИтоговыхПериодов.Период";
	
	Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаСчетчиков);
	
	КэшПериодовСчетчиков = Запрос.Выполнить().Выгрузить();
	
	КэшПериодовСчетчиков.Индексы.Добавить("Счетчик,Объект,Услуга");
	
	// Добавляем индексирование для дальнейшего отбора периодов объектов, в которых уже был установлен другой счетчик.
	// Это нужно для того, чтобы разделять случаи, когда счетчики на объект никогда не устанавливались и нужно начислять
	// по норме за период до его установки, и случая, когда уже был установлен другой счетчик и по новому не нужно
	// начислять по норме за период до его установки.
	КэшПериодовСчетчиков.Индексы.Добавить("Объект, Услуга, Здание, Помещение, СчетчикБылУстановлен");
	
	Возврат КэшПериодовСчетчиков;
	
КонецФункции

// Функция возвращает кэш тарифов для таблицы счетчиков.
Функция ПолучитьКэшТарифов(ТаблицаСчетчиков, ТаблицаУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Услуга,
	|	КВП_ТарифыСрезПоследних.ВидТарифа,
	|	&ДатаНач КАК Период,
	|	КВП_ТарифыСрезПоследних.Объект,
	|	КВП_ТарифыСрезПоследних.Тариф
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И Услуга В (&СписокУслуг)
	|				И Объект В (&СписокОбъектов)) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_Тарифы.Услуга,
	|	КВП_Тарифы.ВидТарифа,
	|	ВЫБОР
	|		КОГДА КВП_Тарифы.Период < &ДатаНач
	|			ТОГДА &ДатаНач
	|		ИНАЧЕ КВП_Тарифы.Период
	|	КОНЕЦ,
	|	КВП_Тарифы.Объект,
	|	ВЫБОР
	|		КОГДА НЕ КВП_Тарифы.Действует
	|			ТОГДА 0
	|		ИНАЧЕ КВП_Тарифы.Тариф
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.КВП_Тарифы КАК КВП_Тарифы
	|ГДЕ
	|	КВП_Тарифы.Организация = &Организация
	|	И КВП_Тарифы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_Тарифы.Услуга В(&СписокУслуг)
	|	И КВП_Тарифы.Объект В(&СписокОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	СписокПомещений = ТаблицаСчетчиков.ВыгрузитьКолонку("Помещение");
	СписокЗданий    = ТаблицаСчетчиков.ВыгрузитьКолонку("Здание");
	
	МассивТиповОбъектов = Новый Массив;
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	ТипОбъект = Новый ОписаниеТипов(МассивТиповОбъектов);
	
	ТЗСписокОбъектовТарифы = Новый ТаблицаЗначений;
	ТЗСписокОбъектовТарифы.Колонки.Добавить("Объект", ТипОбъект);
	
	Для Каждого ТекПомещение Из СписокПомещений Цикл
		НоваяСтрока = ТЗСписокОбъектовТарифы.Добавить();
		НоваяСтрока.Объект = ТекПомещение;
		//НоваяСтрока.Объект = ТекПомещение.Значение;
	КонецЦикла;
	
	Для Каждого ТекЗдание Из СписокЗданий Цикл
		НоваяСтрока = ТЗСписокОбъектовТарифы.Добавить();
		НоваяСтрока.Объект = ТекЗдание;
		//НоваяСтрока.Объект = ТекЗдание.Значение;
	КонецЦикла;
	
	НоваяСтрока = ТЗСписокОбъектовТарифы.Добавить();
	НоваяСтрока.Объект = Неопределено;
	
	ТЗСписокОбъектовТарифы.Свернуть("Объект");
	
	Запрос.УстановитьПараметр("ДатаНач",        НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",        КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("СписокУслуг",    ТаблицаУслуг);
	Запрос.УстановитьПараметр("СписокОбъектов", ТЗСписокОбъектовТарифы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеТаблицыУслугЗависимымиУслугами

// Дополняет таблицу услуг зависимыми услугами.
//
Процедура ДополнитьТаблицуНачисленийЗависимымиУслугами(ТаблицаПоУслугам, СтруктураПараметров, ПоПрочимОрганизациям = Ложь)
	
	// Процедура вызывается дважды:
	// 1. При заполнении табличной части для начисления зависимых услуг по организации, указанной в шапке документа.
	// 2. При проведении документа для начисления зависимых услуг по прочим организациям.
	
	
	// Начисляем зависимые услуги (ЗУ) в 2 этапа:
	// 1 этап: начисляем ЗУ непосредственно на услуги-основания из табличной части;
	// 2 этап: начисляем ЗУ по ПУ по собственному нормативу в периоды, когда по одной 
	//         из услуг-оснований отсутствуют действующие приборы учета.
	
	// 1 этап: 
	// Начисляем ЗУ непосредственно на услуги-основания из табличной части.
	ДополнитьТаблицуУслугЗависимымиУслугами(Дата, Организация, ТаблицаПоУслугам,,, ПоПрочимОрганизациям);
	
	// 2 этап: 
	// Проверяем настройку начисления зависимых услуг (задается в "Настройках параметров учета (ЖКХ)").
	Если мЗависимыеУслугиПоСобственномуНормативу Тогда
		
		// Начисляем ЗУ по ПУ по собственному нормативу в периоды, когда по одной 
		// из услуг-оснований отсутствуют действующие приборы учета.
		//
		// Для информации: такие ЗУ начисляем без услуги-основания.
		// Начисления этих ЗУ не подлежит сторнировке.
		
		Если ТаблицаПоУслугам.Колонки.Найти("ЗависимаяПоНормативу") = Неопределено Тогда
			ТаблицаПоУслугам.Колонки.Добавить("ЗависимаяПоНормативу", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		// Получаем услуги по ПУ, для которых на момент начисления имеются зависимые услуги.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			&УсловиеУслуга
		|				И УслугаОснование.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика),
		|					ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует";
		
		Запрос.УстановитьПараметр("ПериодСреза", КонецМесяца(Дата));
		
		Если ЗначениеЗаполнено(Услуга) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУслуга", "Услуга В ИЕРАРХИИ(&Услуга)");
			Запрос.УстановитьПараметр("Услуга", СтруктураПараметров.Услуга);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУслуга", "ИСТИНА");
		КонецЕсли;
		
		ЗависимыеУслуги = Запрос.Выполнить().Выгрузить();
		
		// Получаем периоды, в которых ЗУ по ПУ необходимо начислить по собственному нормативу.
		ТаблицаПериодов = Документы.КВП_НачислениеУслуг.ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу(ТаблицаПоУслугам,
																			 СтруктураПараметров ,ЗависимыеУслуги, ПоПрочимОрганизациям);
		
		СтруктураПараметров.Вставить("СпособРасчета", Перечисления.КВП_СпособыРасчета.ПоНормамПотребления);
		
		Если ПоПрочимОрганизациям Тогда
			МассивВидовДоговоров = УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьВидыДоговоров();
		КонецЕсли;
		
		// Дополним таблицу начислений начислениями по зависимым услугам.
		Для Каждого ТекПериод Из ТаблицаПериодов Цикл
			
			НоваяСтрока = ТаблицаПоУслугам.Добавить();
			НоваяСтрока.ЛицевыеСчета  = ТекПериод.ЛицевойСчет;
			НоваяСтрока.Услуга        = ТекПериод.Услуга;
			// Для информации: 
			// ЗУ по ПУ по собственному нормативу начисляем без услуги-основания.
			НоваяСтрока.Зависимая            = Истина;
			НоваяСтрока.ЗависимаяПоНормативу = Истина;
			
			Если ПоПрочимОрганизациям И НЕ ТаблицаПериодов.Колонки.Найти("Организация") = Неопределено Тогда
				ТекОрганизация = ТекПериод.Организация;
				НоваяСтрока.Организация = ТекОрганизация;
			Иначе
				ТекОрганизация = Организация;
			КонецЕсли;
			
			Тариф      = ПолучитьТарифПоЛицевомуСчету(ТекПериод.КонецПериода, ТекОрганизация, ТекПериод.Услуга, 
																ТекПериод.ЛицевойСчет, , );
			Количество = КВП_ПолучитьНачислениеНаОбъектПоУслуге(ТекПериод.КонецПериода, ТекОрганизация, ТекПериод.ЛицевойСчет,
																ТекПериод.Услуга, мНастройкиУчетнойПолитикиТСЖ, , Ложь, 
																ТекПериод.КонецПериода, , Дата, СтруктураПараметров);
			Договор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекПериод.ЛицевойСчет,
																ТекОрганизация, ТекПериод.КонецПериода, "Договор");
			Если ПоПрочимОрганизациям Тогда
				// Решили получение договора при начислении зависимых услуг по прочим организациям
				// оставить таким образом, а не через сведения для взаиморасчетов, чтобы пользователям 
				// на данном этапе не пришлось для каждого л/с вводить доп.данные.
				Контрагент = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекПериод.ЛицевойСчет,
																Организация, ТекПериод.КонецПериода, "Контрагент");
				УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(Договор, Контрагент, ТекОрганизация, МассивВидовДоговоров,
																Новый Структура("СрокДействия", Новый Структура("ВидСравненияОтбора, ЗначениеОтбора", 
																								ВидСравнения.БольшеИлиРавно, ТекПериод.КонецПериода)), 
																Ложь);
					
				Если НЕ ЗначениеЗаполнено(Договор) Тогда
					// Если договоры с актуальным сроком действия не найдены, пробуем найти без указания срока.
					УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(Договор, Контрагент, ТекОрганизация, 
																МассивВидовДоговоров,
																Новый Структура("СрокДействия", Новый Структура("ВидСравненияОтбора, ЗначениеОтбора", 
																								ВидСравнения.Равно, '00010101')), 
																Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			// Для информации:
			// нормативное кол-во в зависимости от длительности периода не перерасчитываем
			// (по аналогии с начислением по нормативам обычных услуг).
			// В зависимости от кол-ва дней пересчитывается только сумма начисления.
			// И, кроме этого, здесь не применяется коэффициент ЗУ.
			НоваяСтрока.Количество    = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(Количество);
			НоваяСтрока.Тариф         = Тариф;
			НоваяСтрока.Договор       = Договор;
			НоваяСтрока.ДнейНачислено = (ТекПериод.КонецПериода - ТекПериод.НачалоПериода) / ДлинаСуток + 1;
			НоваяСтрока.НачалоПериода = ТекПериод.НачалоПериода;
			НоваяСтрока.КонецПериода  = ТекПериод.КонецПериода;
			
			//ПересчитатьСуммуСтрокиТЧ(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	// Пересчитаем суммы начисления сразу для всех ЗУ.
	СтрокиЗУ = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("Зависимая", Истина));
	Для Каждого ТекСтрокаЗУ Из СтрокиЗУ Цикл
		Если ПоПрочимОрганизациям И НЕ ТаблицаПоУслугам.Колонки.Найти("Организация") = Неопределено 
		   И ТекСтрокаЗУ.Организация = СтруктураПараметров.Организация Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьСуммуСтрокиТЧ(ТекСтрокаЗУ);
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуНачисленийЗависимымиУслугами()

#КонецОбласти

#Область ЗаполнениеТаблицыУслугПоПоказаниямЗависимымиУслугами

// Дополняет таблицу услуг ПУ зависимыми услугами.
//
// Параметры
//  ТаблицаПоУслугам  - таблица значений - таблица услуг ПУ.
//
Процедура ДополнитьТаблицуУслугПУЗависимымиУслугами(ТаблицаПоУслугам, ПоПрочимОрганизациям = Ложь)
	
	// Процедура вызывается дважды:
	// 1. При заполнении табличной части для начисления зависимых услуг по организации, указанной в шапке документа.
	// 2. При проведении документа для начисления зависимых услуг по прочим организациям.
	
	
	// Начислять зависимые услуги (ЗУ) на сторно, на объемы повышающих коэффициентов, на сами ЗУ не нужно.
	// Поэтому подготовим таблицу, из которой исключим начисления по сторно, по повышающим коэффициентам и ЗУ.
	// А далее уже продолжим начисление ЗУ по полученной таблице.
	СтруктураПоиска = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
	СтрокиДляНачисленияЗависимыхУслуг = ТаблицаПоУслугам.НайтиСтроки(СтруктураПоиска);
	ТаблицаПоказаний = ТаблицаПоУслугам.Скопировать(СтрокиДляНачисленияЗависимыхУслуг);
	
	// Дополним таблицу данными по зданиям лицевых счетов.
	// Здания необходимы для учета настроек по зависимым услугам в разрезе домов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаПоказаний
	|ИЗ
	|	&ТаблицаПоказаний КАК ТаблицаПоказаний
	|;
	|
	|ВЫБРАТЬ
	|	*,
	|	ЛицевойСчет.Адрес.Владелец КАК Здание
	|ИЗ
	|	ТаблицаПоказаний";
	Запрос.УстановитьПараметр("ТаблицаПоказаний", ТаблицаПоказаний);
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	// Зависимые услуги рассчитываются без учета составных, поэтому сворачиваем строки начислений.
	ТаблицаПоказаний.Свернуть("ЛицевойСчет, Здание, Услуга, УслугаОснование, ВидТарифа, ТипРасчета, ФормулаРасчета, 
	                          |НачалоПериода, КонецПериода, Тарифность, СостояниеПУ, Договор, Зависимая, ЗависимаяПоНормативу",
	                          "ПоказаниеСчЛС, КоличествоРаспределенияПомещение, 
	                          |КоличествоРаспределенияПодъезд, КоличествоРаспределенияЗдание");
	
	СписокЛС     = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "ЛицевойСчет");
	СписокЗданий = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "Здание");
	СписокУслуг  = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "Услуга");
	
	// Получим зависимые услуги.
	ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата), 
															  СписокУслуг, 
															  Организация, 
															  СписокЗданий,, 
															  ПоПрочимОрганизациям);
	Если ТаблицаЗависимыхУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопСтруктураПараметров = Новый Структура;
	Если ПоПрочимОрганизациям Тогда
		МассивВидовДоговоров = УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьВидыДоговоров();
		ДопСтруктураПараметров.Вставить("МассивВидовДоговоров", МассивВидовДоговоров);
	КонецЕсли;
	
	// "Закэшируем" тарифы на конец месяца для каждого л/с по каждой зависимой услуге, чтобы в случае,
	// если период равен концу месяца, тарифы получались из кэша, а не для каждого л/с.
	// Реализовано в целях оптимизации.
	КэшТарифовПоВсемЛС = Новый ТаблицаЗначений;
	
	ДатаКонцаМесяца = КонецМесяца(Дата);
	СписокТарифов = Новый СписокЗначений;
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	СписокТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Общий);
	
	Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл
		
		КэшПоУслуге = ПолучитьТарифПоЛицевомуСчету(ДатаКонцаМесяца, Организация, СтрокаЗависимойУслуги.Услуга, СписокЛС, СписокТарифов);
		
		Если КэшТарифовПоВсемЛС.Количество() = 0 Тогда
			
			КэшТарифовПоВсемЛС = КэшПоУслуге.Скопировать();
			
			КэшТарифовПоВсемЛС.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(ДатаКонцаМесяца, "Период");
			
			КэшТарифовПоВсемЛС.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
			КэшТарифовПоВсемЛС.ЗаполнитьЗначения(СтрокаЗависимойУслуги.Услуга, "Услуга");
			
		Иначе
			Для Каждого СтрокаТарифа ИЗ КэшПоУслуге Цикл
				
				НоваяСтрока = КэшТарифовПоВсемЛС.Добавить();
				НоваяСтрока.Период = ДатаКонцаМесяца;
				НоваяСтрока.Услуга = СтрокаЗависимойУслуги.Услуга;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТарифа);
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КэшТарифовПоВсемЛС.Количество() > 0 Тогда
		КэшТарифовПоВсемЛС.Индексы.Добавить("Объект, Услуга, ВидТарифа");
		ДопСтруктураПараметров.Вставить("КэшТарифовНаКонецМесяца", КэшТарифовПоВсемЛС);
	КонецЕсли;
	
	// Для информации: 
	// В таблице зависимых услуг хранятся настройки зависимостей услуг
	// всегда в разрезе зданий, полученные с учетом приоритетов настроек по объектам.
	// Поэтому сразу отбираем по объекту и начисляем зависимые услуги.
	
	// Проверяем настройку начисления зависимых услуг (задается в "Настройках параметров учета (ЖКХ)").
	Если НЕ мЗависимыеУслугиПоСобственномуНормативу Тогда
		
		// Если настройка не установлена, начисление ЗУ выполнется по периодам начисления услуг-оснований
		// в соответствии с объемами начисления услуг-оснований и коэффициентов ЗУ.
		
		Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл
			
			СтрокиТаблицыПоказаний = ТаблицаПоказаний.НайтиСтроки(Новый Структура("Услуга, Здание", 
																	СтрокаЗависимойУслуги.УслугаОснование, 
																	СтрокаЗависимойУслуги.Объект));
			
			Для Каждого СтрокаПоказания ИЗ СтрокиТаблицыПоказаний Цикл
				
				Если НЕ СтрокаЗависимойУслуги.УслугаОснование = СтрокаПоказания.Услуга Тогда
					Продолжить;
				КонецЕсли;
				
				// Добавляем новую строку в таблицу начислений по текущей зависимой услуге.
				ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, СтрокаПоказания, ТаблицаПоУслугам, 
																			ДопСтруктураПараметров, ПоПрочимОрганизациям);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		// Если настройка установлена, тогда начисление ЗУ выполняется по расходу услуг-оснований только
		// в случае установленных действующих ИПУ по всем услугам-основаниям.
		// Поэтому проверяем есть ли установленные ИПУ по всем услугам-основаниям.
		// Если приборы имеются по всем услугам-основаниям - расчет ЗУ производим по объемам услуг-оснований,
		// в противном случае (если хотя бы по одной услуге-основанию нет ИПУ) - расчет будет произведен по 
		// нормативу самой зависимой услуги (при начислении "обычных" услуг).
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",        Дата);
		СтруктураПараметров.Вставить("НачалоПериода", НачалоМесяца(Дата));
		СтруктураПараметров.Вставить("КонецПериода",  КонецМесяца(Дата));
		СтруктураПараметров.Вставить("Организация",   Организация);
		СтруктураПараметров.Вставить("СписокЗданий",  СписокЗданий);
		
		// Получаем периоды, в которых ЗУ по ПУ необходимо начислить по собственному нормативу.
		ТаблицаПериодов = Документы.КВП_НачислениеУслуг.ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу(ТаблицаПоказаний,
																		СтруктураПараметров, ТаблицаЗависимыхУслуг, ПоПрочимОрганизациям);
		ТаблицаПериодов.Колонки.Добавить("ДнейНачислено", Новый ОписаниеТипов("Число"));
		
		// Определим временную таблицу периодов, в которых зависимую 
		// услугу необходимо начислять по собственному нормативу.
		ВрТаблицаПериодов = ТаблицаПериодов.СкопироватьКолонки();
		
		Для Каждого СтрокаЛС ИЗ СписокЛС Цикл
			
			Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл
				
				ВрТаблицаПериодов.Очистить();
				
				// Отбираем периоды зависимой услуги, где она будет начисляться по собственному нормативу,
				// и записываем во временную таблицу.
				СтрокиПоЗависимойУслуге = ТаблицаПериодов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, Здание", 
																		СтрокаЛС.Значение,
																		СтрокаЗависимойУслуги.Услуга, 
																		СтрокаЗависимойУслуги.Объект));
				
				Для Каждого ТекСтрока Из СтрокиПоЗависимойУслуге Цикл 
					НоваяСтрока = ВрТаблицаПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.УслугаОснование = СтрокаЗависимойУслуги.УслугаОснование;
					НоваяСтрока.ДнейНачислено   = (ТекСтрока.КонецПериода - ТекСтрока.НачалоПериода) / ДлинаСуток + 1;
				КонецЦикла;
				
				// Отбираем только нужные нам строки с начислениями услуги-основания,
				// и записываем во временную таблицу.
				СтрокиПоУслугеОснованию = ТаблицаПоказаний.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, Здание", 
																		СтрокаЛС.Значение,
																		СтрокаЗависимойУслуги.УслугаОснование, 
																		СтрокаЗависимойУслуги.Объект));
				Для Каждого ТекСтрока Из СтрокиПоУслугеОснованию Цикл 
					НоваяСтрока = ВрТаблицаПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.Услуга          = СтрокаЗависимойУслуги.Услуга;
					НоваяСтрока.УслугаОснование = СтрокаЗависимойУслуги.УслугаОснование;
					НоваяСтрока.ДнейНачислено   = (ТекСтрока.КонецПериода - ТекСтрока.НачалоПериода) / ДлинаСуток + 1;
				КонецЦикла;
				
				// Разбиваем на общие подпериоды.
				ТаблицаОбщихПериодов = ПолучитьОбщиеПериодыНачисленияЗависимойУслуги(ВрТаблицаПериодов);
				
				// Таблица общих периодов уже имеет все нужные данные.
				Для Каждого ТекСтрока Из ТаблицаОбщихПериодов Цикл
					// Добавляем новую строку в таблицу начислений по текущей зависимой услуге.
					ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, ТекСтрока, ТаблицаПоУслугам, 
																				ДопСтруктураПараметров, ПоПрочимОрганизациям);
				КонецЦикла;
				
			КонецЦикла; // Цикл по зависимым услугам
			
		КонецЦикла; // Цикл по л/с
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьТаблицуУслугПУЗависимымиУслугами()

// Процедура добавляет строку в таблицу услуг по показаниям ПУ для зависимой услуги.
//
Процедура ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, СтрокаПоказания, 
							ТаблицаПоУслугам, СтруктураПараметров = Неопределено, ПоПрочимОрганизациям = Ложь)
	
	ДопКоэффициент = 1;
	НачалоПериода  = СтрокаПоказания.НачалоПериода;
	КонецПериода   = СтрокаПоказания.КонецПериода;
	МассивВидовДоговоров = Новый СписокЗначений;
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если СтруктураПараметров.Свойство("НачалоПериода") И СтруктураПараметров.Свойство("КонецПериода") Тогда
			НачалоПериода = СтруктураПараметров.НачалоПериода;
			КонецПериода  = СтруктураПараметров.КонецПериода;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Коэффициент") Тогда
			ДопКоэффициент = СтруктураПараметров.Коэффициент;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("МассивВидовДоговоров") Тогда
			МассивВидовДоговоров = СтруктураПараметров.МассивВидовДоговоров;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КэшТарифовНаКонецМесяца") Тогда
			ДопСтруктураПараметров = Новый Структура;
			ДопСтруктураПараметров.Вставить("КэшТарифовНаКонецМесяца", СтруктураПараметров.КэшТарифовНаКонецМесяца);
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоУслугам.Добавить();
	НоваяСтрока.ЛицевойСчет     = СтрокаПоказания.ЛицевойСчет;
	НоваяСтрока.Услуга          = СтрокаЗависимойУслуги.Услуга;
	НоваяСтрока.УслугаОснование = СтрокаЗависимойУслуги.УслугаОснование;
	НоваяСтрока.ВидТарифа       = СтрокаПоказания.ВидТарифа;
	НоваяСтрока.ТипРасчета      = СтрокаПоказания.ТипРасчета;
	НоваяСтрока.ФормулаРасчета  = СтрокаПоказания.ФормулаРасчета;
	НоваяСтрока.Тарифность      = СтрокаПоказания.Тарифность;
	НоваяСтрока.СостояниеПУ     = СтрокаПоказания.СостояниеПУ;
	НоваяСтрока.НачалоПериода   = НачалоПериода;
	НоваяСтрока.КонецПериода    = КонецПериода;
	
	НоваяСтрока.Зависимая            = Истина;
	НоваяСтрока.ЗависимаяПоНормативу = СтрокаПоказания.ЗависимаяПоНормативу;
	
	Если ПоПрочимОрганизациям Тогда 
		
		ТекОрганизация = СтрокаЗависимойУслуги.Организация;
		ТекДоговор     = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(СтрокаПоказания.Договор) Тогда
			ДоговорКонтрагента = СтрокаПоказания.Договор;
			
			// Пробуем получить договора с отбором по сроку действия.
			УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, ДоговорКонтрагента.Владелец,
																	  ТекОрганизация, МассивВидовДоговоров,
																	  Новый Структура("СрокДействия", Новый Структура("ВидСравненияОтбора, ЗначениеОтбора",
																	  ВидСравнения.БольшеИлиРавно, Дата)), Ложь);
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				// Если договора с актуальным сроком действия не найдены, пробуем найти без указания срока.
				ДоговорКонтрагента = СтрокаПоказания.Договор;
				УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, ДоговорКонтрагента.Владелец,
																		  ТекОрганизация, МассивВидовДоговоров,
																		  Новый Структура("СрокДействия", Новый Структура("ВидСравненияОтбора, ЗначениеОтбора",
																		  ВидСравнения.Равно, '00010101')) , Ложь);
			КонецЕсли;
			ТекДоговор = ДоговорКонтрагента;
		КонецЕсли;
		
		НоваяСтрока.Организация = ТекОрганизация;
		
	Иначе
		ТекОрганизация = Организация;
		ТекДоговор     = СтрокаПоказания.Договор;
	КонецЕсли;
	
	Если СтрокаПоказания.ЗависимаяПоНормативу Тогда
		Тариф = 0;
	Иначе
		Тариф = ПолучитьТарифПоЛицевомуСчету(КонецДня(КонецПериода),
											 ТекОрганизация,
											 СтрокаЗависимойУслуги.Услуга,
											 СтрокаПоказания.ЛицевойСчет,
											 СтрокаПоказания.ВидТарифа,
											 ДопСтруктураПараметров);
	КонецЕсли;
	
	НоваяСтрока.Договор         = ТекДоговор;
	НоваяСтрока.Тариф           = Тариф;
	
	// Начисление зависимых услуг по показаниям индивидуальных приборов учета.
	Если НЕ СтрокаПоказания.ЗависимаяПоНормативу
	   И НЕ СтрокаПоказания.ПоказаниеСчЛС = 0 Тогда
		НоваяСтрока.ПоказаниеСчЛС = СтрокаПоказания.ПоказаниеСчЛС * СтрокаЗависимойУслуги.Коэффициент * ДопКоэффициент;
		НоваяСтрока.ПоказаниеСчЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(НоваяСтрока.ПоказаниеСчЛС, мТочностьОбъемаНачислений);
		НоваяСтрока.Сумма         = Тариф * НоваяСтрока.ПоказаниеСчЛС;
	КонецЕсли;
	
	// ВАЖНО: 
	// Распределение ОДН производится после заполнения ТЧ по данным инд.потребления, 
	// поэтому на этапе заполнения ТЧ количество распределения будет 0. 
	// Объем ОДН в этом случае будет дораспределен по строкам ЗУ после завершения процедуры распределения ОДН.
	// Но строки начисления по ЗУ могут добавляться не только при инд.начислении, но и после 
	// распределения ОДН (для добавления недостающих видов тарифа).
	// А также при начислении ЗУ по прочим организациям при проведении документа.
	
	// Начисление зависимых услуг при распределении показаний коллективных приборов учета.
	Если СтрокаЗависимойУслуги.НачислятьПриРаспределенииПоказаний Тогда
		
		тмКоличествоРаспределенияПомещение = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
											   СтрокаПоказания.КоличествоРаспределенияПомещение,
											   Макс(СтрокаПоказания.КоличествоРаспределенияПомещение, 0));
		
		тмКоличествоРаспределенияПодъезд   = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
											   СтрокаПоказания.КоличествоРаспределенияПодъезд,
											   Макс(СтрокаПоказания.КоличествоРаспределенияПодъезд, 0));
		
		тмКоличествоРаспределенияЗдание    = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
											   СтрокаПоказания.КоличествоРаспределенияЗдание,
											   Макс(СтрокаПоказания.КоличествоРаспределенияЗдание, 0));
		
		КоличествоРаспределения = тмКоличествоРаспределенияПомещение
								+ тмКоличествоРаспределенияПодъезд
								+ тмКоличествоРаспределенияЗдание;
		
		Если НЕ КоличествоРаспределения = 0 Тогда
			НоваяСтрока.КоличествоРаспределенияПомещение = тмКоличествоРаспределенияПомещение * СтрокаЗависимойУслуги.Коэффициент * ДопКоэффициент;
			НоваяСтрока.КоличествоРаспределенияПодъезд   = тмКоличествоРаспределенияПодъезд   * СтрокаЗависимойУслуги.Коэффициент * ДопКоэффициент;
			НоваяСтрока.КоличествоРаспределенияЗдание    = тмКоличествоРаспределенияЗдание    * СтрокаЗависимойУслуги.Коэффициент * ДопКоэффициент;
			
			НоваяСтрока.КоличествоРаспределенияПомещение = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(НоваяСтрока.КоличествоРаспределенияПомещение, мТочностьОбъемаНачислений);
			НоваяСтрока.КоличествоРаспределенияПодъезд   = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(НоваяСтрока.КоличествоРаспределенияПодъезд,   мТочностьОбъемаНачислений);
			НоваяСтрока.КоличествоРаспределенияЗдание    = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(НоваяСтрока.КоличествоРаспределенияЗдание,    мТочностьОбъемаНачислений);
			
			НоваяСтрока.СуммаРаспределения               = Тариф * (НоваяСтрока.КоличествоРаспределенияПомещение
																  + НоваяСтрока.КоличествоРаспределенияПодъезд
																  + НоваяСтрока.КоличествоРаспределенияЗдание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ()

// Процедура определяет общие периоды начисления зависимой услуги, заполняет их данными.
Функция ПолучитьОбщиеПериодыНачисленияЗависимойУслуги(ТаблицаПериодов)
	
	ТаблицаНачисленияЗависимойУслуги = ТаблицаПериодов.СкопироватьКолонки();
	
	// Запомним дату окончания последнего периода.
	КонецПериода = КонецМесяца(Дата);
	
	Если ТаблицаПериодов.Количество() > 0 Тогда
		врТаблицаПериодов = ТаблицаПериодов.Скопировать(, "КонецПериода");
		врТаблицаПериодов.Свернуть("КонецПериода");
		врТаблицаПериодов.Сортировать("КонецПериода");
		КонецПериода = врТаблицаПериодов.Получить(врТаблицаПериодов.Количество() - 1).КонецПериода;
	КонецЕсли;
	
	// Сформируем таблицу дат начала.
	врТаблицаПериодов = Новый ТаблицаЗначений;
	врТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	
	Для Каждого ТекСтрокаПериода Из ТаблицаПериодов Цикл
		
		НоваяСтрока = врТаблицаПериодов.Добавить();
		НоваяСтрока.НачалоПериода = ТекСтрокаПериода.НачалоПериода;
		
		Если Не ТекСтрокаПериода.КонецПериода = КонецПериода Тогда
			НоваяСтрока = врТаблицаПериодов.Добавить();
			НоваяСтрока.НачалоПериода = ТекСтрокаПериода.КонецПериода + ДлинаСуток;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем общие начала периодов.
	ТаблицаОбщихПериодов = врТаблицаПериодов.Скопировать(, "НачалоПериода");
	ТаблицаОбщихПериодов.Свернуть("НачалоПериода");
	ТаблицаОбщихПериодов.Сортировать("НачалоПериода");
	
	// Дополним таблицу общих периодов следующими полями.
	ТаблицаОбщихПериодов.Колонки.Добавить("КонецПериода",  Новый ОписаниеТипов("Дата"));
	ТаблицаОбщихПериодов.Колонки.Добавить("ДнейНачислено", Новый ОписаниеТипов("Число"));
	
	// Дополняем окончанием периодов.
	Если ТаблицаОбщихПериодов.Количество() > 0 Тогда
		
		Для Индекс = 0 По ТаблицаОбщихПериодов.Количество() - 2 Цикл
			ТаблицаОбщихПериодов[Индекс].КонецПериода = НачалоДня(ТаблицаОбщихПериодов[Индекс + 1].НачалоПериода - ДлинаСуток);
		КонецЦикла;
		
		ТаблицаОбщихПериодов[Индекс].КонецПериода = КонецПериода;
		
	КонецЕсли;
	
	// Пересчитаем количество дней начисления в каждом подпериоде.
	Если ТаблицаОбщихПериодов.Количество() > 0 Тогда
		
		Для Индекс = 0 По ТаблицаОбщихПериодов.Количество() - 2 Цикл
			ТаблицаОбщихПериодов[Индекс].ДнейНачислено     = (ТаблицаОбщихПериодов[Индекс].КонецПериода 
														   - ТаблицаОбщихПериодов[Индекс].НачалоПериода) / ДлинаСуток + 1;
		КонецЦикла;
		ТаблицаОбщихПериодов[Индекс].ДнейНачислено       = (НачалоДня(ТаблицаОбщихПериодов[Индекс].КонецПериода)
														 - ТаблицаОбщихПериодов[Индекс].НачалоПериода) / ДлинаСуток + 1;
		
	КонецЕсли;
	
	// Дополним таблицу общих периодов расчетными данными.
	Для Каждого ТекСтрокаОбщегоПериода Из ТаблицаОбщихПериодов Цикл
		
		ТекущаяДатаНачала = ТекСтрокаОбщегоПериода.НачалоПериода;
		
		Для Каждого ТекСтрокаИсходногоПериода Из ТаблицаПериодов Цикл
			
			// На текущем общем периоде берем все детальные периоды, в которые входит текущий общий период.
			// Важно, что конец интервала периодов может совпадать, так как и в общем периоде, 
			// и в детальном конец интервала - это дата окончания периода, а не начало нового.
			Если ТекущаяДатаНачала >= ТекСтрокаИсходногоПериода.НачалоПериода
			   И ТекущаяДатаНачала <= ТекСтрокаИсходногоПериода.КонецПериода Тогда
				
				Если ТаблицаНачисленияЗависимойУслуги.НайтиСтроки(Новый Структура("НачалоПериода, КонецПериода, ЗависимаяПоНормативу",
																			ТекущаяДатаНачала, 
																			ТекСтрокаОбщегоПериода.КонецПериода, 
																			Истина)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаНачисленияЗависимойУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаОбщегоПериода, 
										 "НачалоПериода, КонецПериода, ДнейНачислено");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаИсходногоПериода, , 
										 "НачалоПериода, КонецПериода, ДнейНачислено, ПоказаниеСчЛС, 
										 |КоличествоРаспределенияПомещение, КоличествоРаспределенияПодъезд, КоличествоРаспределенияЗдание");
				Если НоваяСтрока.ЗависимаяПоНормативу Тогда
				 //ИЛИ ТекСтрокаИсходногоПериода.ПоказаниеСчЛС = Неопределено Тогда
					НоваяСтрока.ПоказаниеСчЛС                    = 0;
					НоваяСтрока.КоличествоРаспределенияПомещение = 0;
					НоваяСтрока.КоличествоРаспределенияПодъезд   = 0;
					НоваяСтрока.КоличествоРаспределенияЗдание    = 0;
				Иначе
					Коэффициент = ?(ТекСтрокаИсходногоПериода.ДнейНачислено = 0, 0, 
										ТекСтрокаОбщегоПериода.ДнейНачислено / ТекСтрокаИсходногоПериода.ДнейНачислено);
					НоваяСтрока.ПоказаниеСчЛС                    = ТекСтрокаИсходногоПериода.ПоказаниеСчЛС * Коэффициент;
					НоваяСтрока.КоличествоРаспределенияПомещение = ТекСтрокаИсходногоПериода.КоличествоРаспределенияПомещение * Коэффициент;
					НоваяСтрока.КоличествоРаспределенияПодъезд   = ТекСтрокаИсходногоПериода.КоличествоРаспределенияПодъезд   * Коэффициент;
					НоваяСтрока.КоличествоРаспределенияЗдание    = ТекСтрокаИсходногоПериода.КоличествоРаспределенияЗдание    * Коэффициент;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНачисленияЗависимойУслуги;
	
КонецФункции //ПолучитьОбщиеПериодыНачисленияЗависимойУслуги()

// Процедура раскидывает распределенные расход ОДН на строки зависимых услуг (ЗУ).
Процедура РаспределитьРасходОДННаЗависимыеУслуги()
	
	// Т.к. распределение ОДН производится после основного начисления, поэтому необходимо дополнительно 
	// проходить по строкам ОДН услуг-оснований и дораспределять объем по зависимым услугам (с учетом настроек ЗУ).
	
	// Подготовим таблицу, из которой исключим начисления по сторно, по повышающим коэффициентам и ЗУ.
	СтруктураПоиска = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
	СтрокиНачисленияУслугОснований = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураПоиска);
	ТаблицаНачисленийУО = УслугиПоПоказаниямПУ.Выгрузить(СтрокиНачисленияУслугОснований);
	
	// Дополним таблицу начислений данными по домам для быстрого отбора зависимостей по зданиям.
	Если ТаблицаНачисленийУО.Колонки.Найти("Здание") = Неопределено Тогда
		ВрТаблицаНачислений = ТаблицаНачисленийУО.Скопировать();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ТаблицаНачислений
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|;
		|
		|ВЫБРАТЬ
		|	*,
		|	ЛицевойСчет.Адрес.Владелец КАК Здание
		|ИЗ
		|	ТаблицаНачислений";
		Запрос.УстановитьПараметр("ТаблицаНачислений", ВрТаблицаНачислений);
		ТаблицаНачисленийУО = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// Т.к. зависимые услуги рассчитываются без учета составных, то строки начислений
	// необходимо сворачивать.
	ТаблицаНачисленийУО.Свернуть("ЛицевойСчет, Здание, Услуга, УслугаОснование, ВидТарифа, НачалоПериода, КонецПериода,
								 |ТипРасчета, ФормулаРасчета, Тарифность, СостояниеПУ, ЗависимаяПоНормативу, Договор",
								 "ПоказаниеСчЛС, КоличествоРаспределенияПомещение, КоличествоРаспределенияПодъезд, КоличествоРаспределенияЗдание");
	
	// Подготовим таблицу с начислениями ЗУ, без учета периодов сторно и начисления ЗУ по собственному нормативу.
	СтрокиНачисленияЗависимыхУслуг = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбораСтрокПУНачисленияЗУ());
	ТаблицаНачисленийЗУ = УслугиПоПоказаниямПУ.Выгрузить(СтрокиНачисленияЗависимыхУслуг);
	// Т.к. виды тарифа распределения ОДН услуг-оснований и начисления ЗУ могут быть различны,
	// будем анализировать только периоды, без учета видов тарифа.
	ТаблицаНачисленийЗУ.Свернуть("ЛицевойСчет, Услуга, УслугаОснование, НачалоПериода, КонецПериода"); 
	
	// Если распределение ОДН выполняется одновременно с индивидуальным начислением, то
	// нет необходимости заново получать таблицу зависимости услуг.
	Если ТаблицаЗависимыхУслуг = Неопределено Тогда
		
		СписокЛС     = СформироватьСписокПоКолонкеТаблицы(ТаблицаНачисленийУО, "ЛицевойСчет");
		СписокЗданий = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛС);//СформироватьСписокПоКолонкеТаблицы(ТаблицаПоказаний, "Здание");
		СписокУслуг  = СформироватьСписокПоКолонкеТаблицы(ТаблицаНачисленийУО, "Услуга"); // нужны только основные
		
		// Получим зависимые услуги.
		ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата), 
																  СписокУслуг, 
																  Организация, 
																  СписокЗданий);
	КонецЕсли;
	
	Если ТаблицаЗависимыхУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ОПИСАНИЕ АЛГОРИТМА:
	// Если установлена настройка начисления ЗУ по собственному нормативу
	// (задается в "Настройках параметров учета (ЖКХ)"), то раскидываем по ЗУ
	// уже распределенный на услуги-основания расход ОДН с учетом того, что
	// периоды начисления услуг-оснований и ЗУ различны.
	// Для этого обходим периоды основной услуги, обходим периоды зависимой услуги
	// и раскидываем расход ОДН с учетом количества дней вхождения подпериода ЗУ
	// в подпериод начисления усуги-основания.
	// Если настройка начисления ЗУ по собственному нормативу не установлена, 
	// полагаем, что периоды начисления услуг-оснований и ЗУ одинаковы.
	
	// Для информации: 
	// В таблице зависимых услуг хранятся настройки зависимостей услуг
	// всегда в разрезе зданий, полученные с учетом приоритетов настроек по объектам.
	
	Для Каждого СтрокаЗависимойУслуги ИЗ ТаблицаЗависимыхУслуг Цикл
		
		Если НЕ СтрокаЗависимойУслуги.НачислятьПриРаспределенииПоказаний Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПоУслугеОснованию = ТаблицаНачисленийУО.НайтиСтроки(Новый Структура("Услуга, Здание", 
																	СтрокаЗависимойУслуги.УслугаОснование, 
																	СтрокаЗависимойУслуги.Объект));
		
		Для Каждого ТекСтрокаУО Из СтрокиПоУслугеОснованию Цикл 
			
			тмКоличествоРаспределенияПомещение = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
												   ТекСтрокаУО.КоличествоРаспределенияПомещение,
												   Макс(ТекСтрокаУО.КоличествоРаспределенияПомещение, 0));
			тмКоличествоРаспределенияПодъезд   = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
												   ТекСтрокаУО.КоличествоРаспределенияПодъезд,
												   Макс(ТекСтрокаУО.КоличествоРаспределенияПодъезд, 0));
			тмКоличествоРаспределенияЗдание    = ?(СтрокаЗависимойУслуги.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
												   ТекСтрокаУО.КоличествоРаспределенияЗдание,
												   Макс(ТекСтрокаУО.КоличествоРаспределенияЗдание, 0));
			КоличествоРаспределения = тмКоличествоРаспределенияПомещение
									+ тмКоличествоРаспределенияПодъезд
									+ тмКоличествоРаспределенияЗдание;
			Если КоличествоРаспределения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДнейВПодпериодеУО = (ТекСтрокаУО.КонецПериода - ТекСтрокаУО.НачалоПериода) / ДлинаСуток + 1;
			
			// Отбираем периоды зависимой услуги.
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЛицевойСчет",     ТекСтрокаУО.ЛицевойСчет);
			СтруктураОтбора.Вставить("Услуга",          СтрокаЗависимойУслуги.Услуга);
			СтруктураОтбора.Вставить("УслугаОснование", СтрокаЗависимойУслуги.УслугаОснование);
			
			// Проверяем настройку начисления зависимых услуг (задается в "Настройках параметров учета (ЖКХ)").
			Если НЕ мЗависимыеУслугиПоСобственномуНормативу Тогда
				
				// Если настройка не установлена, полагаем, что периоды одинаковы,
				// поэтому не обходим периоды начисления ЗУ, а сразу ищем нужный период
				// и рассчитываем объем ОДН для ЗУ с учетом коэффициента ЗУ.
				
				СтруктураОтбора.Вставить("ВидТарифа",     ТекСтрокаУО.ВидТарифа);
				СтруктураОтбора.Вставить("НачалоПериода", ТекСтрокаУО.НачалоПериода);
				СтруктураОтбора.Вставить("КонецПериода",  ТекСтрокаУО.КонецПериода);
				
				СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
				Если СтрокиТЧ.Количество() > 0 Тогда
					
					ТекСтрокаТЧ = СтрокиТЧ.Получить(0);
					
					// При распределении ОДН:
					// 1. по формулам 3 и 14 постановления 354,
					// 2. по формулам 2(3) и 2(5) постановления 1708,
					// 3. по формулам 3 и 3(6) постановления 1708,
					// 4. по формулам 3(1) и 3(7) постановления 1708 для строк без ПУ
					// нужно дополнительно распределять по ЗУ индивидуальный расход.
					Если ТекСтрокаТЧ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14()
						 Или ТекСтрокаТЧ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()
						 Или ТекСтрокаТЧ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708()
						 Или (ТекСтрокаТЧ.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()
						 И ТекСтрокаТЧ.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ) Тогда
						ТекСтрокаТЧ.ПоказаниеСчЛС = ТекСтрокаУО.ПоказаниеСчЛС * СтрокаЗависимойУслуги.Коэффициент;
						ТекСтрокаТЧ.ПоказаниеСчЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.ПоказаниеСчЛС, мТочностьОбъемаНачислений);
						ТекСтрокаТЧ.Сумма         = ТекСтрокаТЧ.Тариф * ТекСтрокаТЧ.ПоказаниеСчЛС;
					КонецЕсли;
					
					ТекСтрокаТЧ.КоличествоРаспределенияПомещение = тмКоличествоРаспределенияПомещение * СтрокаЗависимойУслуги.Коэффициент;
					ТекСтрокаТЧ.КоличествоРаспределенияПодъезд   = тмКоличествоРаспределенияПодъезд   * СтрокаЗависимойУслуги.Коэффициент;
					ТекСтрокаТЧ.КоличествоРаспределенияЗдание    = тмКоличествоРаспределенияЗдание    * СтрокаЗависимойУслуги.Коэффициент;
					
					ТекСтрокаТЧ.КоличествоРаспределенияПомещение = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияПомещение, мТочностьОбъемаНачислений);
					ТекСтрокаТЧ.КоличествоРаспределенияПодъезд   = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияПодъезд,   мТочностьОбъемаНачислений);
					ТекСтрокаТЧ.КоличествоРаспределенияЗдание    = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияЗдание,    мТочностьОбъемаНачислений);
					
					ТекСтрокаТЧ.СуммаРаспределения               = ТекСтрокаТЧ.Тариф * (ТекСтрокаТЧ.КоличествоРаспределенияПомещение
																  + ТекСтрокаТЧ.КоличествоРаспределенияПодъезд
																  + ТекСтрокаТЧ.КоличествоРаспределенияЗдание);
				Иначе
					
					// Добавляем новую строку по текущей зависимой услуге.
					ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, ТекСтрокаУО, УслугиПоПоказаниямПУ);
					
				КонецЕсли;
				
			Иначе
				
				// Если настройка установлена, периоды могут быть различны.
				// Поэтому обходим периоды начисления ЗУ, анализируем пересечение периодов начисления услуги-основания и ЗУ.
				// Если периоды пересекаются, то для ЗУ рассчитываем объем ОДН для текущего подпериода с учетом коэффициента ЗУ.
				
				// ОСОБЕННОСТЬ:
				// Полагаем, что при распределении ОДН по формулам 3 и 14 постановления 354, когда необходимым условием работы
				// формулы считается отсутствие для всех л/с в доме индивидуальных ПУ, дополнительно распределять по ЗУ
				// индивидуальный расход не нужно, поскольку ЗУ при отсутствии ИПУ весь период начисляется по собственному нормативу.
				
				СтрокиПоЗависимойУслуге = ТаблицаНачисленийЗУ.НайтиСтроки(СтруктураОтбора);
				Для Каждого ТекСтрокаЗУ Из СтрокиПоЗависимойУслуге Цикл 
					
					ПересечениеПериодовВДнях = (Мин(ТекСтрокаУО.КонецПериода, ТекСтрокаЗУ.КонецПериода)
											 - Макс(ТекСтрокаУО.НачалоПериода,ТекСтрокаЗУ.НачалоПериода))
											 /ДлинаСуток
											 + 1;
					Если ПересечениеПериодовВДнях > 1 Тогда
						
						Коэффициент = ПересечениеПериодовВДнях / ДнейВПодпериодеУО;
						
						// Если строка ЗУ с видом тарифа есть, то на нее
						
						СтруктураОтбора.Вставить("ВидТарифа",     ТекСтрокаУО.ВидТарифа);
						СтруктураОтбора.Вставить("НачалоПериода", ТекСтрокаЗУ.НачалоПериода);
						СтруктураОтбора.Вставить("КонецПериода",  ТекСтрокаЗУ.КонецПериода);
						
						СтрокиТЧ = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
						Если СтрокиТЧ.Количество() > 0 Тогда
							Коэффициент = Коэффициент * СтрокаЗависимойУслуги.Коэффициент;
							
							ТекСтрокаТЧ = СтрокиТЧ.Получить(0);
							
							ТекСтрокаТЧ.КоличествоРаспределенияПомещение = ТекСтрокаТЧ.КоличествоРаспределенияПомещение + 
																		   тмКоличествоРаспределенияПомещение * Коэффициент;
							ТекСтрокаТЧ.КоличествоРаспределенияПодъезд   = ТекСтрокаТЧ.КоличествоРаспределенияПодъезд   + 
																		   тмКоличествоРаспределенияПодъезд   * Коэффициент;
							ТекСтрокаТЧ.КоличествоРаспределенияЗдание    = ТекСтрокаТЧ.КоличествоРаспределенияЗдание    + 
																		   тмКоличествоРаспределенияЗдание    * Коэффициент;
							
							ТекСтрокаТЧ.КоличествоРаспределенияПомещение = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияПомещение, мТочностьОбъемаНачислений);
							ТекСтрокаТЧ.КоличествоРаспределенияПодъезд   = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияПодъезд,   мТочностьОбъемаНачислений);
							ТекСтрокаТЧ.КоличествоРаспределенияЗдание    = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаТЧ.КоличествоРаспределенияЗдание,    мТочностьОбъемаНачислений);
							
							ТекСтрокаТЧ.СуммаРаспределения               = ТекСтрокаТЧ.Тариф * (ТекСтрокаТЧ.КоличествоРаспределенияПомещение
																		  + ТекСтрокаТЧ.КоличествоРаспределенияПодъезд
																		  + ТекСтрокаТЧ.КоличествоРаспределенияЗдание);
						Иначе
							
							// Добавляем новую строку по текущей зависимой услуге.
							СтруктураПараметров = Новый Структура;
							СтруктураПараметров.Вставить("Коэффициент",   Коэффициент);
							СтруктураПараметров.Вставить("НачалоПериода", ТекСтрокаЗУ.НачалоПериода);
							СтруктураПараметров.Вставить("КонецПериода",  ТекСтрокаЗУ.КонецПериода);
							
							ДобавитьСтрокуПоЗависимойУслугеВТаблицуУслугПоПоказаниямПУ(СтрокаЗависимойУслуги, ТекСтрокаУО, УслугиПоПоказаниямПУ, СтруктураПараметров);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; // Цикл по периодам начисления ЗУ
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам услуги-основания
		
	КонецЦикла; // Цикл по зависимым услугам
	
КонецПроцедуры // РаспределитьРасходОДННаЗависимыеУслуги()

#КонецОбласти

#Область ЗаполнениеТаблицыУслугПоПоказаниямСуммамиСторно

// Процедура добавляет данные по ИПУ в таблицу услуг по показаниям.
Процедура ДополнитьТаблицуУслугПоПоказаниямСуммамиСторно(ТЗУслугиПоПоказаниямПУ, ТолькоЗависимыеПоПрочимОрганизациям = Ложь)
	
	// Процедура вызывается дважды:
	// 1. При заполнении табличной части для начисления сторно по основным и зависимым услугам по организации, 
	//    указанной в шапке документа.
	// 2. При проведении документа для начисления сторно по зависимым услугам по прочим организациям
	//    (для совместимости алгоритма).
	//    Для информации: 
	//    На данный момент от настройки начисления ЗУ по прочим организациям решили отказаться, но постепенно.
	//    Сейчас использование отключено, но возможность сохранена для необходимости возврата.
	
	
	// Подготовка таблицы лицевых счетов и услуг, по которым необходимо сторнирование (есть ИПУ, но нет показаний).
	
	ТаблицаЛС = ТЗУслугиПоПоказаниямПУ.Скопировать();
	
	Если ТолькоЗависимыеПоПрочимОрганизациям Тогда
		ТаблицаЛС.Свернуть("ЛицевойСчет, СостояниеПУ, Услуга, УслугаОснование, Зависимая, Организация");
	Иначе
		ТаблицаЛС.Свернуть("ЛицевойСчет, СостояниеПУ, Услуга, УслугаОснование, Зависимая");
		// Для совместимости алгоритмов добавим поле организация.
		ТаблицаЛС.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛС", ТаблицаЛС);
	Запрос.УстановитьПараметр("Дата",      Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.СостояниеПУ,
	|	ТаблицаЛС.Услуга,
	|	ТаблицаЛС.УслугаОснование,
	|	ТаблицаЛС.Зависимая,
	|	ТаблицаЛС.Организация
	|ПОМЕСТИТЬ втТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Услуга,
	|	ЛицевыеСчета.УслугаОснование,
	|	ЛицевыеСчета.Зависимая,
	|	ЛицевыеСчета.Организация
	|ИЗ
	|	втТаблицаЛС КАК ЛицевыеСчета
	|ГДЕ
	|	ЛицевыеСчета.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)";
	
	ТаблицаЛицевыхСчетовИУслуг = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаЛицевыхСчетовИУслуг.Количество() = 0 Тогда
		
		// Получаем таблицу зависимых услуг, она понадобится для сторнирования зависимых услуг,
		// а также для определения данных к сторнированию в разрезе счетчиков.
		
		// Но т.к. в таблице начислений уже есть данные по начислению ЗУ, поэтому сразу отбираем
		// ЗУ и записываем в ТаблицаЗависимыхУслуг, дополнительно получать зависимости не нужно.
		
		// ОСОБЕННОСТЬ:
		// Если производится начисление по прочим организациям, то отбираем для анализа сторно
		// только ЗУ по прочим организациям.
		// В противном случае, отбираем для анализа сторно как основные услуги, так и зависимые от них.
		// Чтобы сразу получить данные по сторно по тем и другим.
		
		Если ТолькоЗависимыеПоПрочимОрганизациям Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетовИУслуг", ТаблицаЛицевыхСчетовИУслуг);
			Запрос.УстановитьПараметр("Организация",                Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаЛицевыхСчетовИУслуг.Услуга КАК Услуга,
			|	ТаблицаЛицевыхСчетовИУслуг.УслугаОснование КАК УслугаОснование,
			|	ТаблицаЛицевыхСчетовИУслуг.Организация КАК Организация,
			|	ТаблицаЛицевыхСчетовИУслуг.Зависимая КАК Зависимая
			|ПОМЕСТИТЬ ВрТаблицаЛицевыхСчетовИУслуг
			|ИЗ
			|	&ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаЛицевыхСчетовИУслуг.Услуга КАК Услуга,
			|	ТаблицаЛицевыхСчетовИУслуг.УслугаОснование КАК УслугаОснование,
			|	ТаблицаЛицевыхСчетовИУслуг.Организация КАК Организация
			|ИЗ
			|	ВрТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг
			|ГДЕ
			|	НЕ ТаблицаЛицевыхСчетовИУслуг.Организация = &Организация
			|	И ТаблицаЛицевыхСчетовИУслуг.Зависимая";
			
			ТаблицаЛицевыхСчетовИУслуг     = Запрос.Выполнить().Выгрузить();
			ТаблицаЗависимыхУслугДляСторно = ТаблицаЛицевыхСчетовИУслуг.Скопировать();
			
		Иначе
			
			СтрокиЗУ = ТаблицаЛицевыхСчетовИУслуг.НайтиСтроки(Новый Структура("Зависимая", Истина));
			ТаблицаЗависимыхУслугДляСторно = ТаблицаЛицевыхСчетовИУслуг.Скопировать(СтрокиЗУ);
			
		КонецЕсли;
		
		ПолучитьНачисленияУслугДляСторнирования(ТЗУслугиПоПоказаниямПУ, ТаблицаЛицевыхСчетовИУслуг, ТаблицаЗависимыхУслугДляСторно,
												ТолькоЗависимыеПоПрочимОрганизациям);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу по услугам начислениями, которые необходимо отсторнировать.
//
Процедура ПолучитьНачисленияУслугДляСторнирования(ТаблицаПоУслугам, ТаблицаЛицевыхСчетовИУслуг, ТаблицаЗависимыхУслугДляСторно, 
												  ТолькоЗависимыеПоПрочимОрганизациям = Ложь)
	
	// Данная процедура выполняется дважды:
	// 1. При заполнении табличной части документа данными сторно. При этом сторно определяется сразу как для основных,
	//    так и зависимых услуг (зависимые услуги из табличной части).
	// 2. При проведении документа для формирования движений по сторнированию зависимых услуг, начисляемых по 
	//    организациям, отличным от организации начисления услуг-оснований.
	
	// Для п.2 сформируем список организаций, по которым может производиться начисление зависимых услуг.
	// Если зависимые услуги учитываются в разрезе организаций, то берем все организации из
	// заранее подготовленной таблицы зависимых услуг (в ней присутствуют только зависимости по организациям
	// отличным от организации, указанной в документе).
	// В остальных случаях берем только текущую организацию документа.
	
	Если ТолькоЗависимыеПоПрочимОрганизациям Тогда
		СписокОрганизаций = ТаблицаЗависимыхУслугДляСторно.ВыгрузитьКолонку("Организация");
	Иначе
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	Граница = Новый Граница(Дата, ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	// Отбор данных для сторнирования по лицевым счетам, услугам и услугам-основаниям
	// накладывается на комбинацию полей, подготовленную заранее в виде таблицы.
	// Т.е. сторнировать можем только в случае, если условие выполняется по лицевому счету,
	// услуге и услуге-основанию сразу в одной строке данных для сторнирования.
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетовИУслуг", ТаблицаЛицевыхСчетовИУслуг);
	
	Запрос.УстановитьПараметр("КонецПериода",        Граница);
	Запрос.УстановитьПараметр("ДатаДокумента",       Граница.Значение);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("ЗначениеПоНормативу", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	
	// Если используется настройка "СторнированиеПриНачисленииВРазрезеСчетчиков"
	// (константа принимает значение ИСТИНА), то при получении оборотов по видам начисления
	// при отсутствии показаний ИПУ и корректировка при отсутствии показаний по ИПУ
	// обороты будут браться только с момента установки действующего счетчика.
	// Если настройка не используется, то берутся обороты без отбора по периодам, т.е. все.
	//
	// Для определения даты установки счетчика используется табличная часть "Счетчики",
	// которая содержит перечень счетчиков и лицевых счетов, к которым они относятся.
	
	СторнированиеПриНачисленииВРазрезеСчетчиков = Константы.УПЖКХ_СторнированиеПриНачисленииВРазрезеСчетчиков.Получить();
	
	Если СторнированиеПриНачисленииВРазрезеСчетчиков Тогда
		
		//
		// ! ПОДЛЕЖИТ ПЕРЕРАБОТКЕ !
		//
		// Блок по сторнированию начислений в разрезе приборов учета работает неоптимально
		// и его в ближайшее время планируется переработать.
		// Подробнее описано в тех.задании (см. документ "ТЗ. Переработка механизма сторнирования
		// начислений с переходом на остаточный регистр накопления".
		//
		
		// При сторнировке зависимых услуг в запрос передается свернутая по услуге и услуге-основанию
		// таблица зависимых услуг.
		// При этом, из таблицы счетчиков получается вид услуги счетчика, а также соединение по данному виду услуги
		// услуг зависимых из таблицы зависимых услуг, т.е. связь: Счетчики.ВидУслуги = ЗависимыеУслуги.УслугаОснование.
		// При отсечке начислений по счетчикам используется следующее условие по услуге:
		// а) либо услуга начислений равна виду услуги счетчика;
		// б) либо услуга начислений равна зависимой услуге для вида услуги счетчика.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|	ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|	ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|ПОМЕСТИТЬ ТаблицаЛицевыхСчетовИУслуг
		|ИЗ
		|	&ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Организация,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор
		|ПОМЕСТИТЬ врТаблицаДоговоров
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаДокумента,
		|			Организация В (&СписокОрганизаций)
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет
		|					ИЗ
		|						ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Счетчики.Объект КАК ЛицевойСчет,
		|	Счетчики.Счетчик
		|ПОМЕСТИТЬ втСчетчиков
		|ИЗ
		|	&Счетчики КАК Счетчики
		|ГДЕ
		|	НЕ Счетчики.ОбщедомовойПУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Счетчики.ЛицевойСчет КАК ЛицевойСчет,
		|	Счетчики.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ втСчетчикиСПоказаниями
		|ИЗ
		|	втСчетчиков КАК Счетчики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОНаличииПоказанийПриборовУчета КАК УПЖКХ_СведенияОНаличииПоказанийПриборовУчета
		|		ПО (УПЖКХ_СведенияОНаличииПоказанийПриборовУчета.Счетчик = Счетчики.Счетчик)
		|ГДЕ
		|	УПЖКХ_СведенияОНаличииПоказанийПриборовУчета.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаДокумента, МЕСЯЦ)
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗависимыхУслугДляСторно.Услуга,
		|	ТаблицаЗависимыхУслугДляСторно.УслугаОснование
		|ПОМЕСТИТЬ ТаблицаЗависимыхУслугДляСторно
		|ИЗ
		|	&ТаблицаЗависимыхУслугДляСторно КАК ТаблицаЗависимыхУслугДляСторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСчетчиков.ЛицевойСчет,
		|	ТаблицаСчетчиков.Счетчик,
		|	КВП_Счетчики.ВидУслуги КАК ВидУслуги,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК Начало
		|ПОМЕСТИТЬ втПериодыУстановкиСчетчиков
		|ИЗ
		|	втСчетчикиСПоказаниями КАК ТаблицаСчетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|				&КонецПериода,
		|				Действует
		|					И Счетчик В
		|						(ВЫБРАТЬ
		|							ТаблицаСчетчиков.Счетчик
		|						ИЗ
		|							втСчетчикиСПоказаниями КАК ТаблицаСчетчиков)
		|					И ДатаИзменения < &ДатаДокумента) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|		ПО ТаблицаСчетчиков.Счетчик = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК КВП_Счетчики
		|		ПО (КВП_Счетчики.Ссылка = ТаблицаСчетчиков.Счетчик)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПериоды.ЛицевойСчет,
		|	втПериоды.Счетчик,
		|	втПериоды.ВидУслуги,
		|	втПериоды.Начало,
		|	ТаблицаЗависимыхУслугДляСторно.Услуга КАК ЗависимаяУслуга
		|ПОМЕСТИТЬ втПериодыУстановкиСчетчиковСЗависимымиУслугами
		|ИЗ
		|	втПериодыУстановкиСчетчиков КАК втПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗависимыхУслугДляСторно КАК ТаблицаЗависимыхУслугДляСторно
		|		ПО втПериоды.ВидУслуги = ТаблицаЗависимыхУслугДляСторно.УслугаОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Период,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.УслугаОснование,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Организация,
		|	-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Сумма,
		|	УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
		|ПОМЕСТИТЬ ТаблицаНачислений
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			,
		|			&КонецПериода,
		|			День,
		|			Организация В (&СписокОрганизаций)
		|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
		|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПосреднему)
		|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				И (ЛицевойСчет, Услуга, УслугаОснование) В
		|					(ВЫБРАТЬ
		|						ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|						ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|						ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|					ИЗ
		|						ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.ЛицевойСчет,
		|	ТаблицаПУ.Услуга,
		|	ТаблицаПУ.СоставнаяУслуга,
		|	ТаблицаПУ.УслугаОснование,
		|	ТаблицаПУ.ВидТарифа,
		|	ТаблицаПУ.Организация,
		|	СУММА(ТаблицаПУ.Сумма) КАК Сумма,
		|	ТаблицаПУ.МесяцНачисления
		|ПОМЕСТИТЬ врОборотыСОтбором
		|ИЗ
		|	втПериодыУстановкиСчетчиковСЗависимымиУслугами КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНачислений КАК ТаблицаПУ
		|		ПО (ТаблицаПУ.ЛицевойСчет = Периоды.ЛицевойСчет)
		|			И (ТаблицаПУ.Услуга = Периоды.ВидУслуги
		|				ИЛИ ТаблицаПУ.Услуга = Периоды.ЗависимаяУслуга)
		|			И (ТаблицаПУ.Период В
		|				(ВЫБРАТЬ
		|					УПЖКХ_Начисления.Период КАК Период
		|				ИЗ
		|					ТаблицаНачислений КАК УПЖКХ_Начисления
		|				ГДЕ
		|					УПЖКХ_Начисления.Период >= Периоды.Начало))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.ЛицевойСчет,
		|	ТаблицаПУ.Услуга,
		|	ТаблицаПУ.СоставнаяУслуга,
		|	ТаблицаПУ.УслугаОснование,
		|	ТаблицаПУ.ВидТарифа,
		|	ТаблицаПУ.Организация,
		|	ТаблицаПУ.МесяцНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало,
		|	УПЖКХ_Начисления.Окончание,
		|	УПЖКХ_Начисления.МесяцНачисления,
		|	УПЖКХ_Начисления.Количество КАК Количество
		|ПОМЕСТИТЬ врНачисленияОбщие
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
		|ГДЕ
		|	УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
		|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПосреднему))
		|	И УПЖКХ_Начисления.Период <= &ДатаДокумента
		|	И УПЖКХ_Начисления.Регистратор <> &Ссылка
		|	И УПЖКХ_Начисления.Организация В(&СписокОрганизаций)
		|	И (УПЖКХ_Начисления.ЛицевойСчет, УПЖКХ_Начисления.Услуга, УПЖКХ_Начисления.УслугаОснование) В
		|			(ВЫБРАТЬ
		|				ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|				ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|				ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|			ИЗ
		|				ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.Организация,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.ЛицевойСчет,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.Услуга,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.СоставнаяУслуга,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.УслугаОснование,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.ВидТарифа,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.Тариф,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.НачалоПериода,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.КонецПериода,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.КонецПериода, МЕСЯЦ), ДЕНЬ),
		|	-УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.КоличествоРасход
		|ИЗ
		|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Обороты(
		|			,
		|			&КонецПериода,
		|			,
		|			Организация В (&СписокОрганизаций)
		|				И (ЛицевойСчет, Услуга, УслугаОснование) В
		|					(ВЫБРАТЬ
		|						ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|						ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|						ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|					ИЗ
		|						ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|				ТОГДА УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОбороты.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало,
		|	УПЖКХ_Начисления.Окончание,
		|	УПЖКХ_Начисления.МесяцНачисления,
		|	СУММА(УПЖКХ_Начисления.Количество) КАК Количество
		|ПОМЕСТИТЬ врНачисления
		|ИЗ
		|	врНачисленияОбщие КАК УПЖКХ_Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало,
		|	УПЖКХ_Начисления.Окончание,
		|	УПЖКХ_Начисления.МесяцНачисления
		|;
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
		|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
		|	СУММА(-УПЖКХ_Начисления.СуммаНачисления) КАК СуммаКорректировок
		|ПОМЕСТИТЬ врСуммыКорректировокНормативныхНачислений
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
		|ГДЕ
		|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|	И УПЖКХ_Начисления.Период <= &ДатаДокумента
		|	И УПЖКХ_Начисления.Регистратор <> &Ссылка
		|	И УПЖКХ_Начисления.Организация В(&СписокОрганизаций)
		|	И (УПЖКХ_Начисления.ЛицевойСчет, УПЖКХ_Начисления.Услуга, УПЖКХ_Начисления.УслугаОснование) В
		|			(ВЫБРАТЬ
		|				ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|				ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|				ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|			ИЗ
		|				ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало,
		|	УПЖКХ_Начисления.Окончание
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врНачисления.Организация,
		|	врНачисления.ЛицевойСчет,
		|	врНачисления.Услуга,
		|	врНачисления.СоставнаяУслуга,
		|	врНачисления.УслугаОснование,
		|	врНачисления.ВидТарифа,
		|	врНачисления.Тариф,
		|	врНачисления.Начало,
		|	врНачисления.Окончание,
		|	врНачисления.МесяцНачисления,
		|	врНачисления.Количество КАК Количество,
		|	ЕСТЬNULL(врСуммыКорректировокНормативныхНачислений.СуммаКорректировок, 0) КАК СуммаКорректировок
		|ПОМЕСТИТЬ врНачисленияВременноеРешение
		|ИЗ
		|	врНачисления КАК врНачисления
		|ЛЕВОЕ СОЕДИНЕНИЕ врСуммыКорректировокНормативныхНачислений КАК врСуммыКорректировокНормативныхНачислений
		|		ПО врНачисления.Организация = врСуммыКорректировокНормативныхНачислений.Организация
		|			И врНачисления.ЛицевойСчет = врСуммыКорректировокНормативныхНачислений.ЛицевойСчет
		|			И врНачисления.Услуга = врСуммыКорректировокНормативныхНачислений.Услуга
		|			И врНачисления.СоставнаяУслуга = врСуммыКорректировокНормативныхНачислений.СоставнаяУслуга
		|			И врНачисления.УслугаОснование = врСуммыКорректировокНормативныхНачислений.УслугаОснование
		|			И врНачисления.ВидТарифа = врСуммыКорректировокНормативныхНачислений.ВидТарифа
		|			И врНачисления.Тариф = врСуммыКорректировокНормативныхНачислений.Тариф
		|			И врНачисления.Начало = врСуммыКорректировокНормативныхНачислений.НачалоПериода
		|			И врНачисления.Окончание = врСуммыКорректировокНормативныхНачислений.КонецПериода;
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врОборотыСОтбором.ЛицевойСчет,
		|	врОборотыСОтбором.Услуга,
		|	врОборотыСОтбором.СоставнаяУслуга,
		|	врОборотыСОтбором.УслугаОснование,
		|	врОборотыСОтбором.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	врОборотыСОтбором.Организация,
		|	УПЖКХ_Начисления.Количество КАК ПоказаниеСчЛС,
		|	врОборотыСОтбором.МесяцНачисления,
		|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
		|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
		|	ЕСТЬNULL(ТаблицаДоговоров.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	ИСТИНА КАК Сторно,
		|	ВЫБОР
		|		КОГДА врОборотыСОтбором.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Зависимая,
		|	&ЗначениеПоНормативу КАК ТипРасчета,
		|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний) КАК СостояниеПУ
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		|	, УПЖКХ_Начисления.СуммаКорректировок КАК СуммаКорректировок
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|ИЗ
		|	врОборотыСОтбором КАК врОборотыСОтбором
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врНачисления КАК УПЖКХ_Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врНачисленияВременноеРешение КАК УПЖКХ_Начисления
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|		ПО врОборотыСОтбором.ЛицевойСчет = УПЖКХ_Начисления.ЛицевойСчет
		|			И врОборотыСОтбором.Услуга = УПЖКХ_Начисления.Услуга
		|			И врОборотыСОтбором.СоставнаяУслуга = УПЖКХ_Начисления.СоставнаяУслуга
		|			И врОборотыСОтбором.УслугаОснование = УПЖКХ_Начисления.УслугаОснование
		|			И врОборотыСОтбором.ВидТарифа = УПЖКХ_Начисления.ВидТарифа
		|			И врОборотыСОтбором.Организация = УПЖКХ_Начисления.Организация
		|			И врОборотыСОтбором.МесяцНачисления = УПЖКХ_Начисления.МесяцНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаДоговоров КАК ТаблицаДоговоров
		|		ПО врОборотыСОтбором.Организация = ТаблицаДоговоров.Организация
		|			И врОборотыСОтбором.ЛицевойСчет = ТаблицаДоговоров.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_Начисления.Количество > 0";
		
		врТаблицаСчетчиков = Счетчики.Выгрузить(, "Объект,Счетчик,ОбщедомовойПУ");
		врТаблицаСчетчиков.Свернуть("Объект,Счетчик,ОбщедомовойПУ");
		
		Запрос.УстановитьПараметр("Счетчики", врТаблицаСчетчиков);
		
		// Передадим таблицу зависимых услуг в параметр запроса.
		врТаблицаЗависимыхУслугДляСторно = ТаблицаЗависимыхУслугДляСторно.Скопировать(, "Услуга,УслугаОснование");
		врТаблицаЗависимыхУслугДляСторно.Свернуть("Услуга,УслугаОснование");
		
		Запрос.УстановитьПараметр("ТаблицаЗависимыхУслугДляСторно", врТаблицаЗависимыхУслугДляСторно);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|	ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|	ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|ПОМЕСТИТЬ ТаблицаЛицевыхСчетовИУслуг
		|ИЗ
		|	&ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Организация,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор
		|ПОМЕСТИТЬ врТаблицаДоговоров
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаДокумента,
		|			Организация В (&СписокОрганизаций)
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет
		|					ИЗ
		|						ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.Организация,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.ЛицевойСчет,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.Услуга,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.СоставнаяУслуга,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.УслугаОснование,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.ВидТарифа,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.Тариф,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.НачалоПериода,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.КонецПериода,
		|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ врТаблицаОстатков
		|ИЗ
		|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Остатки(
		|			&КонецПериода,
		|			Организация В (&СписокОрганизаций)
		|				И (ЛицевойСчет, Услуга, УслугаОснование) В
		|					(ВЫБРАТЬ
		|						ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|						ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|						ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|					ИЗ
		|						ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|				ТОГДА УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУОстатки.КоличествоОстаток > 0
		|;
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
		|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
		|	СУММА(-УПЖКХ_Начисления.СуммаНачисления) КАК СуммаКорректировок
		|ПОМЕСТИТЬ врСуммыКорректировокНормативныхНачислений
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
		|ГДЕ
		|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|	И УПЖКХ_Начисления.Период <= &ДатаДокумента
		|	И УПЖКХ_Начисления.Регистратор <> &Ссылка
		|	И УПЖКХ_Начисления.Организация В(&СписокОрганизаций)
		|	И (УПЖКХ_Начисления.ЛицевойСчет, УПЖКХ_Начисления.Услуга, УПЖКХ_Начисления.УслугаОснование) В
		|			(ВЫБРАТЬ
		|				ТаблицаЛицевыхСчетовИУслуг.ЛицевойСчет,
		|				ТаблицаЛицевыхСчетовИУслуг.Услуга,
		|				ТаблицаЛицевыхСчетовИУслуг.УслугаОснование
		|			ИЗ
		|				ТаблицаЛицевыхСчетовИУслуг КАК ТаблицаЛицевыхСчетовИУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Начисления.Организация,
		|	УПЖКХ_Начисления.ЛицевойСчет,
		|	УПЖКХ_Начисления.Услуга,
		|	УПЖКХ_Начисления.СоставнаяУслуга,
		|	УПЖКХ_Начисления.УслугаОснование,
		|	УПЖКХ_Начисления.ВидТарифа,
		|	УПЖКХ_Начисления.Тариф,
		|	УПЖКХ_Начисления.Начало,
		|	УПЖКХ_Начисления.Окончание
		|;
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация,
		|	ТаблицаОстатков.ЛицевойСчет,
		|	ТаблицаОстатков.Услуга,
		|	ТаблицаОстатков.СоставнаяУслуга,
		|	ТаблицаОстатков.УслугаОснование,
		|	ТаблицаОстатков.ВидТарифа,
		|	ТаблицаОстатков.Тариф,
		|	ТаблицаОстатков.НачалоПериода,
		|	ТаблицаОстатков.КонецПериода,
		|	ТаблицаОстатков.КоличествоОстаток КАК ПоказаниеСчЛС,
		|	ЕСТЬNULL(ТаблицаДоговоров.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	0 КАК Сумма,
		|	ИСТИНА КАК Сторно,
		|	ВЫБОР
		|		КОГДА ТаблицаОстатков.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Зависимая,
		|	&ЗначениеПоНормативу КАК ТипРасчета,
		|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний) КАК СостояниеПУ
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		|	, ЕСТЬNULL(врСуммыКорректировокНормативныхНачислений.СуммаКорректировок, 0) КАК СуммаКорректировок
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|ИЗ
		|	врТаблицаОстатков КАК ТаблицаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаДоговоров КАК ТаблицаДоговоров
		|		ПО ТаблицаОстатков.Организация = ТаблицаДоговоров.Организация
		|			И ТаблицаОстатков.ЛицевойСчет = ТаблицаДоговоров.ЛицевойСчет
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		|		ЛЕВОЕ СОЕДИНЕНИЕ врСуммыКорректировокНормативныхНачислений КАК врСуммыКорректировокНормативныхНачислений
		|		ПО ТаблицаОстатков.Организация = врСуммыКорректировокНормативныхНачислений.Организация
		|			И ТаблицаОстатков.ЛицевойСчет = врСуммыКорректировокНормативныхНачислений.ЛицевойСчет
		|			И ТаблицаОстатков.Услуга = врСуммыКорректировокНормативныхНачислений.Услуга
		|			И ТаблицаОстатков.СоставнаяУслуга = врСуммыКорректировокНормативныхНачислений.СоставнаяУслуга
		|			И ТаблицаОстатков.УслугаОснование = врСуммыКорректировокНормативныхНачислений.УслугаОснование
		|			И ТаблицаОстатков.ВидТарифа = врСуммыКорректировокНормативныхНачислений.ВидТарифа
		|			И ТаблицаОстатков.Тариф = врСуммыКорректировокНормативныхНачислений.Тариф
		|			И ТаблицаОстатков.НачалоПериода = врСуммыКорректировокНормативныхНачислений.НачалоПериода
		|			И ТаблицаОстатков.КонецПериода = врСуммыКорректировокНормативныхНачислений.КонецПериода
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		|";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СторнироватьНачисленияПоАктуальномуТарифу = Константы.УПЖКХ_СторнироватьНачисленияПоАктуальномуТарифу.Получить();
	
	Если СторнироватьНачисленияПоАктуальномуТарифу 
	   И НЕ РезультатЗапроса.Пустой() Тогда
		
		// Формируем таблицу тарифов.
		//
		// Чтобы не получать тариф для каждого л/с в цикле по объектам с учетом приоритетов,
		// подготовим сразу таблицу тарифов для всех л/с, услуг и видов тарифа.
		// Т.к. возможно, что начисление зависимых услуг будет производиться по организации
		// отличной от выбранной в документе, то еще и получаем сразу тарифы для всех
		// нужных организаций.
		
		КэшТарифовСторно = Новый ТаблицаЗначений;
		
		мТипыОбъектов   = Новый Массив;
		мТипыОбъектов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		//мТипыОбъектов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
		мТипыОбъектов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
		мТипыОбъектов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
		
		КэшТарифовСторно.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КэшТарифовСторно.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		КэшТарифовСторно.Колонки.Добавить("Объект",      Новый ОписаниеТипов(мТипыОбъектов));
		КэшТарифовСторно.Колонки.Добавить("ВидТарифа",   Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		КэшТарифовСторно.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
		
		СписокОбъектов    = Новый СписокЗначений;
		СписокОбъектов.ЗагрузитьЗначения(ТаблицаЛицевыхСчетовИУслуг.ВыгрузитьКолонку("ЛицевойСчет"));
		
		СписокВидовТарифа = Новый СписокЗначений;
		СписокВидовТарифа.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидТарифа"));
		
		СписокУслуг       = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетовИУслуг Цикл
			
			Если ТекСтрока.Услуга.СоставныеУслуги.Количество() > 0 Тогда
				// Если услуга составная, то тариф нужно получать для составной услуги.
				Для Каждого ТекУслуга Из ТекСтрока.Услуга.СоставныеУслуги Цикл
					Если СписокУслуг.Найти(ТекУслуга.Услуга) = Неопределено Тогда
						СписокУслуг.Добавить(ТекУслуга.Услуга);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СписокУслуг.Найти(ТекСтрока.Услуга) = Неопределено Тогда
					СписокУслуг.Добавить(ТекСтрока.Услуга);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Для информации:
		// Т.к. функция ПолучитьТарифПоЛицевомуСчету возвращает готовую таблицу тарифов с учетом 
		// приоритетов единовременно только по одной услуге и одной организации, то выполним получение 
		// итоговой таблицы тарифов в несколько циклов.
		// Как показывает практика максимальное количество организаций 1-2, услуг 2-3 (основная
		// услуга в шапке + все составные услуги, если услуга по показаниям счетчика и норме).
		// Это в любом случае будет оптимальнее, нежели получение тарифов отдельно для каждого л/с.
		
		Для Каждого ТекОрганизация Из СписокОрганизаций Цикл
			Для Каждого ТекУслуга Из СписокУслуг Цикл
				// Если есть установленные тарифы по объектам, то определяем с учетом приоритета.
				ВрТаблицаТарифов = ПолучитьТарифПоЛицевомуСчету(Дата, 
															    ТекОрганизация,
															    ТекУслуга,
															    СписокОбъектов,
															    СписокВидовТарифа);
				СкопироватьДанныеВОбщуюТаблицу(ВрТаблицаТарифов, КэшТарифовСторно, ТекОрганизация, ТекУслуга);
			КонецЦикла;
		КонецЦикла;
		
		КэшТарифовСторно.Индексы.Добавить("Организация, Услуга, Объект, ВидТарифа");
		
	КонецЕсли;
	
	ВыборкаСторно = РезультатЗапроса.Выбрать();
	Пока ВыборкаСторно.Следующий() Цикл
		
		// Сторнируем всегда по актуальному договору.
		// Для этого в запросе сразу получаются актуальные договоры.
		
		НоваяСтрока = ТаблицаПоУслугам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСторно);
		
		// Сохраним тариф, действовавший на момент начисления расхода по услуге, подлежащего сторнированию.
		// Необходим для корректного списания остатков сторно.
		НоваяСтрока.ТарифДляСторнирования = ВыборкаСторно.Тариф;
		
		Если СторнироватьНачисленияПоАктуальномуТарифу Тогда
			
			// Получаем актуальный тариф.
			// Если услуга составная, то тариф получаем для составной услуги.
			ТекущаяУслуга = ?(ЗначениеЗаполнено(ВыборкаСторно.СоставнаяУслуга), 
								ВыборкаСторно.СоставнаяУслуга,
								ВыборкаСторно.Услуга);
			
			Отбор = Новый Структура("Организация, Услуга, Объект, ВидТарифа",
								ВыборкаСторно.Организация,
								ТекущаяУслуга,
								ВыборкаСторно.ЛицевойСчет,
								ВыборкаСторно.ВидТарифа);
			РазмерыТарифов = КэшТарифовСторно.НайтиСтроки(Отбор);
			
			// Если нет данных по размерам тарифа, то тариф 0.
			// Если есть, то берем сразу тариф, т.к. в подготовленной заранее 
			// таблице кэша тарифов он уже определен с учетом приоритета.
			
			Если РазмерыТарифов.Количество() = 0 Тогда
				НоваяСтрока.Тариф = 0;
			Иначе
				НоваяСтрока.Тариф = РазмерыТарифов[0].Тариф;
			КонецЕсли;
			
		КонецЕсли;
		
		// Для информации:
		// В запросе сумму сразу не считаем, чтобы разгрузить СУБД.
		// Подсчет выполняется на сервере 1С после получения тарифа:
		// тариф, действовавший в периоде начисления (из запроса) или актуальный тариф (из функции).
		
		// Сумму рассчитываем, т.к. в регистре данных для сторно хранятся только объемы, 
		// подлежащие сторно.
		// При этом не учитываем период, т.к. предполагаем, что объемы уже были рассчитаны
		// с учетом периода и записаны в регистр.
		
		НоваяСтрока.Сумма = (-1) * Окр(ВыборкаСторно.ПоказаниеСчЛС * НоваяСтрока.Тариф, 2);
		
		// ВРЕМЕННОЕ РЕШЕНИЕ +
		// При сторнировании начислений необходимо учитывать суммы произведенных корректировок.
		// Для этого временно в запросе получаем суммы корректировок по оборотам регистра
		// накопления "Начисления", и вычитаем ее из текущей расчетной суммы корректировки.
		// В будущем доработаем регистр остатков по сторно, добавив в него ресурс "Сумма",
		// который будет заполняться при начислении, корректировке и сторнировании.
		Если Не ВыборкаСторно.СуммаКорректировок = 0 Тогда
			НоваяСтрока.Сумма = Мин(НоваяСтрока.Сумма + ВыборкаСторно.СуммаКорректировок, 0);
		КонецЕсли;
		// ВРЕМЕННОЕ РЕШЕНИЕ -
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьНачисленияУслугДляСторнирования()

// Процедура копирует данные из таблицы тарифов по одной услуге в общую таблицу тарифов.
Процедура СкопироватьДанныеВОбщуюТаблицу(ТаблицаИсточник, ТаблицаПриемник, ТекОрганизация, ТекУслуга)
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
			СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
			СтрокаТаблицыПриемника.Организация = ТекОрганизация;
			СтрокаТаблицыПриемника.Услуга      = ТекУслуга;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыУслугПоПоказаниямДаннымиУчетногоИндивидуальногоОбъема

// Процедура дополняет таблицу данными учетного индивидуального объема.
Процедура ДополнитьТаблицуУслугПоПоказаниямДаннымиУчетногоИндивидуальногоОбъема()
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА УИО
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("----- Начало расчета учетного индивидуального объема (" + ТекущаяДатаСеанса() + ") -----");
	
	УчтенныеОбъемыРасхожденийПУ.Очистить();
	
	ТаблицаЛС = УслугиПоПоказаниямПУ.Выгрузить();
	
	ТаблицаЛС.ЗаполнитьЗначения(0, "УчетныйИндивидуальныйОбъем");
	
	СоставСуммарногоРасхода = Услуга.СоставСуммарногоРасходаИПУДляРаспределения;
	
	// Показания нужны всегда
	НужноПоПоказаниям = Истина;
	
	// Определим по умолчанию, на случай, если в услугах настройка не заполнена.
	НужноПоНорме    = Ложь;
	НужноПоСреднему = Ложь;
	
	// Распишем подробно, что в каких случаях нужно.
	Если СоставСуммарногоРасхода = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.ТолькоРасходПоПриборамУчета Тогда
		НужноПоНорме    = Ложь;
		НужноПоСреднему = Ложь;
	ИначеЕсли СоставСуммарногоРасхода = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу Тогда
		НужноПоНорме    = Истина;
		НужноПоСреднему = Ложь;
	ИначеЕсли СоставСуммарногоРасхода = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему Тогда
		НужноПоНорме    = Истина;
		НужноПоСреднему = Истина;
	КонецЕсли;
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА УИО
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Учитывать сторнирование индивидуальных начислений при расчете ОДН: " + НастройкаКорректировкиОДН.Использовать);
	Если НастройкаКорректировкиОДН.Использовать Тогда
		ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Сторнирование индивидуальных начислений при расчете ОДН учитывать сразу в полном объеме: " + НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме);
	КонецЕсли;
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("В суммарный индивидуальный расход включать расход по ПУ: " + НужноПоПоказаниям);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("В суммарный индивидуальный расход включать начисления по нормативу: " + НужноПоНорме);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("В суммарный индивидуальный расход включать начисления по среднему: " + НужноПоСреднему);
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Учетный индивидуальный объем - далее УИО");
	
	// Определим список услуг.
	врТаблицаЛС = ТаблицаЛС.Скопировать(, "Услуга");
	врТаблицаЛС.Свернуть("Услуга");
	СписокУслугИсходный = врТаблицаЛС.ВыгрузитьКолонку("Услуга");
	СписокУслуг         = врТаблицаЛС.ВыгрузитьКолонку("Услуга");
	
	// Дополним список услуг услугами общедомового счетчика.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УслугаОбщедомовогоСчетчика",      СписокУслуг);
	СтруктураПараметров.Вставить("РаспределятьНаУслугуБазаРасчета", Ложь);
	
	ТаблицаУслугОбщедомовогоСчетчика = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров);
	
	СписокДопУслуг = ТаблицаУслугОбщедомовогоСчетчика.ВыгрузитьКолонку("Услуга");
	
	Для Каждого ТекДопУслуга Из СписокДопУслуг Цикл
		СписокУслуг.Добавить(ТекДопУслуга);
	КонецЦикла;
	
	// Определим вспомогательное соответствие, которое будет хранить соответствие
	// услуг ОДН услугам-базам.
	СоответствиеУслугОбщедомовогоСчетчика = Новый Соответствие;
	Для Каждого ТекУслуга Из СписокУслугИсходный Цикл
		
		СтрокиНастроекОбщедомовогоСчетчика = ТаблицаУслугОбщедомовогоСчетчика.НайтиСтроки(Новый Структура("УслугаОбщедомовогоСчетчика", ТекУслуга));
		
		Если СтрокиНастроекОбщедомовогоСчетчика.Количество() > 0 Тогда
			
			МассивУслуг = Новый Массив;
			
			Для Каждого ТекСтрокаНастроек Из СтрокиНастроекОбщедомовогоСчетчика Цикл
				МассивУслуг.Добавить(ТекСтрокаНастроек.Услуга);
			КонецЦикла;
			
			СоответствиеУслугОбщедомовогоСчетчика.Вставить(ТекУслуга, МассивУслуг);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ОСОБЕННОСТЬ:
	// При определении учетного индивидуального объема для составных услуг,
	// в настоящий момент распределение происходит только на первую из составных услуг.
	//
	// Планируется получать данные для распределения учетного индивидуального объема в разрезе составных услуг,
	// для этого необходимо поучать и обрабатывать данные не только по основной услуге, но и по составляющим услугам,
	// также нужно будет добавить дополнительное измерение "Составная услуга" в регистр накопления
	// "Расхождения объемов потреблений по приборам учета и нормативу".
	//
	// По заявке №З00018583.
	
	// Определим запрос получения данных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЛС",           ТаблицаЛС);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет"));
	Запрос.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	Запрос.УстановитьПараметр("Дата",                Дата);
	Запрос.УстановитьПараметр("НужноПоПоказаниям",   НужноПоПоказаниям);
	Запрос.УстановитьПараметр("НужноПоНорме",        НужноПоНорме);
	Запрос.УстановитьПараметр("НужноПоСреднему",     НужноПоСреднему);
	Запрос.УстановитьПараметр("ТипРасчетаПоПоказаниям", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
	Запрос.УстановитьПараметр("ТипРасчетаПоНорме",      Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	Запрос.УстановитьПараметр("ТипРасчетаПоСреднему",   Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
	
	// ОСОБЕННОСТЬ:
	// При определении учетного индивидуального объема не учитываются
	// объемы начисления за счет повышающих коэффициентов, так как повышающие коэффициенты,
	// это по сути корректировки начислений в виде штрафов за отсутствие прибора учета.
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.Услуга,
	|	ТаблицаЛС.ВидТарифа,
	|	ТаблицаЛС.ПоказаниеСчЛС,
	|	ТаблицаЛС.Сторно,
	//|	ТаблицаЛС.НачислениеПоПовышающемуКоэффициенту,
	//|	ТаблицаЛС.Зависимая,
	|	ТаблицаЛС.ТипРасчета,
	|	ТаблицаЛС.СостояниеПУ,
	|	ТаблицаЛС.НачалоПериода,
	|	ТаблицаЛС.КонецПериода
	|ПОМЕСТИТЬ втТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|ГДЕ
	|	НЕ ТаблицаЛС.НачислениеПоПовышающемуКоэффициенту
	|	И НЕ ТаблицаЛС.Зависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	ЛицевыеСчета.Услуга КАК Услуга,
	|	ЛицевыеСчета.ВидТарифа КАК ВидТарифа,
	|	СУММА(ЛицевыеСчета.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
	|	ЛицевыеСчета.Сторно,
	|	ЛицевыеСчета.ТипРасчета,
	|	ЛицевыеСчета.СостояниеПУ,
	|	ЛицевыеСчета.НачалоПериода КАК НачалоПериода,
	|	ЛицевыеСчета.КонецПериода,
	|	ВЫБОР
	|		КОГДА ЛицевыеСчета.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьПоказания
	|ИЗ
	|	втТаблицаЛС КАК ЛицевыеСчета
	|ГДЕ
	|	(&НужноПоПоказаниям
	|				И ЛицевыеСчета.ТипРасчета = &ТипРасчетаПоПоказаниям
	|			ИЛИ &НужноПоНорме
	|				И ЛицевыеСчета.ТипРасчета = &ТипРасчетаПоНорме
	|			ИЛИ &НужноПоСреднему
	|				И ЛицевыеСчета.ТипРасчета = &ТипРасчетаПоСреднему)
	|	И НЕ ЛицевыеСчета.Сторно
	//|	И НЕ ЛицевыеСчета.НачислениеПоПовышающемуКоэффициенту
	//|	И НЕ ЛицевыеСчета.Зависимая
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Услуга,
	|	ЛицевыеСчета.ВидТарифа,
	|	ЛицевыеСчета.Сторно,
	|	ЛицевыеСчета.ТипРасчета,
	|	ЛицевыеСчета.СостояниеПУ,
	|	ЛицевыеСчета.НачалоПериода,
	|	ЛицевыеСчета.КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода
	|ИТОГИ
	|	СУММА(ПоказаниеСчЛС),
	|	СУММА(ЕстьПоказания)
	|ПО
	|	Услуга,
	|	ЛицевойСчет,
	|	ВидТарифа";
	
	ДеревоПоПоказаниям = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Подготовим таблицу исключений, если она необходима.
	ТаблицаИсключений = Неопределено;
	
	Если НастройкаКорректировкиОДН.Использовать И Дата >= НастройкаКорректировкиОДН.ДатаНачалаИспользования Тогда
		
		// Получим таблицу начислений с необходимыми полями.
		ТаблицаНачислений = ТаблицаЛС.Скопировать(, "ЛицевойСчет, НачалоПериода, Сторно, Зависимая");
		
		// Определим параметры, необходимые для получения сведений о начислениях,
		// по которым введено сторно.
		СтрокиСторно    = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сторно, Зависимая", Истина, Ложь));
		врТаблицаСторно = ТаблицаНачислений.Скопировать(СтрокиСторно);
		
		МассивЛССторно = врТаблицаСторно.ВыгрузитьКолонку("ЛицевойСчет");
		
		МассивМесяцевНачисленияСторно = врТаблицаСторно.ВыгрузитьКолонку("НачалоПериода");
		Для ТекНомер = 0 По МассивМесяцевНачисленияСторно.Количество() - 1 Цикл
			МассивМесяцевНачисленияСторно[ТекНомер] = НачалоДня(КонецМесяца(МассивМесяцевНачисленияСторно[ТекНомер]));
		КонецЦикла;
		
		// Определим список услуг для получения данных сторно.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Услуга", Услуга);
		СписокДопУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("УслугаОбщедомовогоСчетчика");
		
		СписокУслугСторно = Новый СписокЗначений;
		СписокУслугСторно.ЗагрузитьЗначения(СписокУслуг);
		
		Для Каждого ТекДопУслуга Из СписокДопУслуг Цикл
			СписокУслугСторно.Добавить(ТекДопУслуга);
		КонецЦикла;
		
		// Параметры для получения оборотов.
		Запрос.УстановитьПараметр("Организация",           Организация);
		Запрос.УстановитьПараметр("МесяцНачисленияСторно", МассивМесяцевНачисленияСторно);
		Запрос.УстановитьПараметр("ЛицевойСчетСторно",     МассивЛССторно);
		Запрос.УстановитьПараметр("СписокУслугСторно",     СписокУслугСторно);
		
		// ОСОБЕННОСТЬ:
		//
		// Планы оптимизации:
		// Сейчас определение того, было ли распределение на л/с в месяцы, за который производится
		// сторнирование, берется по оборотам начислений ОПУ в регистре "Начисления", а также
		// по новому регистру сведений "Сведения о распределении ОДН на лицевые счета".
		// В будущем планируется полностью перейти на использование только регистра сведений.
		//
		// Описание проблемы
		// Требуется доработка, так как сейчас для услуг общедомового счетчика регистр
		// сведений может заполняться некорректно, например, в следующей ситуации:
		// Услуга-база и общедомовая услуги начисляются отдельными документами, причем индивидуальные начисления
		// формируются только услугой-базой, а общедомовая услуга не имеет индивидуальных начислений,
		// а предназначена только для распределения ОДН. В таком случае сведения о распределении ОДН
		// не фиксируются в регистре сведений, так как в начислении услуги-базы нет ОДН, а в начислении
		// общедомовой услуги нет индивидуальных начислений, которые повлияли на ОДН, т.е. данные разбросаны.
		//
		// Предложение по реализации:
		// Для решения описанной проблемы нужно получать данные об индивидуальных начислениях услуги-базы расчета
		// при проведении начисления по общедомовой услуги в процедуре "ДвижениеПоРегиструСведенияОРаспределенииОДННаЛицевыеСчета".
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйНаличиеРаспределения.ЛицевойСчет,
		|	ВложенныйНаличиеРаспределения.МесяцНачисления
		|ПОМЕСТИТЬ врОборотыНачисленийСторно
		|ИЗ
		|	(ВЫБРАТЬ
		|		УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|		УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
		|	ИЗ
		|		РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|				,
		|				,
		|				,
		|				Организация = &Организация
		|					И МесяцНачисления В (&МесяцНачисленияСторно)
		|					И Услуга В (&СписокУслугСторно)
		|					И ЛицевойСчет В (&ЛицевойСчетСторно)
		|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)) КАК УПЖКХ_НачисленияОбороты
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет,
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления
		|	ИЗ
		|		РегистрСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета КАК УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета
		|	ГДЕ
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Организация = &Организация
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления В(&МесяцНачисленияСторно)
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Услуга В(&СписокУслугСторно)
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет В(&ЛицевойСчетСторно)) КАК ВложенныйНаличиеРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втТаблицаЛС.ЛицевойСчет,
		|	втТаблицаЛС.Услуга,
		|	втТаблицаЛС.ВидТарифа,
		|	СУММА(втТаблицаЛС.ПоказаниеСчЛС) КАК ПоказаниеСчЛС
		|ПОМЕСТИТЬ врТаблицаИсключений
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врОборотыНачисленийСторно КАК врОборотыНачисленийСторно
		|		ПО втТаблицаЛС.ЛицевойСчет = врОборотыНачисленийСторно.ЛицевойСчет
		|			И (КОНЕЦПЕРИОДА(втТаблицаЛС.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(врОборотыНачисленийСторно.МесяцНачисления, МЕСЯЦ))
		|ГДЕ
		|	втТаблицаЛС.Сторно
		|	И (&НужноПоНорме
		|				И втТаблицаЛС.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
		|			ИЛИ &НужноПоСреднему
		|				И НЕ втТаблицаЛС.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий))
		|
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаЛС.ЛицевойСчет,
		|	втТаблицаЛС.Услуга,
		|	втТаблицаЛС.ВидТарифа,
		|	втТаблицаЛС.Сторно,
		|	втТаблицаЛС.ТипРасчета,
		|	втТаблицаЛС.СостояниеПУ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОстатки.ЛицевойСчет,
		|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОстатки.Услуга,
		|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОстатки.ВидТарифа,
		|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Остатки(
		|			&Дата,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Услуга В (&СписокУслуг)) КАК УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаИсключений.ЛицевойСчет,
		|	врТаблицаИсключений.Услуга,
		|	врТаблицаИсключений.ВидТарифа,
		|	СУММА(врТаблицаИсключений.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
		|	СУММА(врТаблицаИсключений.ПоказаниеСчЛС) КАК ПоказаниеСчЛСКопия,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК НачалоПериода,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК КонецПериода,
		|	0 КАК УчетныйИндивидуальныйОбъем
		|ИЗ
		|	врТаблицаИсключений КАК врТаблицаИсключений
		|
		|СГРУППИРОВАТЬ ПО
		|	врТаблицаИсключений.ЛицевойСчет,
		|	врТаблицаИсключений.Услуга,
		|	врТаблицаИсключений.ВидТарифа";
		
		ТаблицаИсключений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого ТекСтрокаУслуги Из ДеревоПоПоказаниям.Строки Цикл
		
		Для Каждого ТекСтрокаЛС Из ТекСтрокаУслуги.Строки Цикл
			
			// Определим вспомогательное дерево.
			врДеревоНачислений = Новый ДеревоЗначений;
			врДеревоНачислений.Колонки.Добавить("ВидТарифа");
			врДеревоНачислений.Колонки.Добавить("ПоказаниеСчЛС");
			врДеревоНачислений.Колонки.Добавить("Сторно");
			врДеревоНачислений.Колонки.Добавить("ТипРасчета");
			врДеревоНачислений.Колонки.Добавить("СостояниеПУ");
			врДеревоНачислений.Колонки.Добавить("НачалоПериода");
			врДеревоНачислений.Колонки.Добавить("КонецПериода");
			врДеревоНачислений.Колонки.Добавить("УчетныйИндивидуальныйОбъем", Новый ОписаниеТипов("Число"));
			
			// Заполним вспомогательное дерево.
			Для Каждого ТекСтрокаВидаТарифа Из ТекСтрокаЛС.Строки Цикл
				
				СтрокаПериода = врДеревоНачислений.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПериода, ТекСтрокаВидаТарифа);
				СтрокаПериода.УчетныйИндивидуальныйОбъем = ТекСтрокаВидаТарифа.ПоказаниеСчЛС;
				
				// Заполним дерево данными по начислениям по показаниям.
				Для Каждого ТекСтрокаНачисления Из ТекСтрокаВидаТарифа.Строки Цикл
					
					СтрокаНачисления = СтрокаПериода.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНачисления, ТекСтрокаНачисления);
					СтрокаНачисления.УчетныйИндивидуальныйОбъем = СтрокаНачисления.ПоказаниеСчЛС;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Если показаний нет, то уменьшать объем не нужно.
			Если Не ТекСтрокаЛС.ЕстьПоказания = 0 И Не ТаблицаИсключений = Неопределено Тогда
				
				// Будем обходить строки исключения и распределять объемы по строкам начисления.
				СтруктураПараметров = Новый Структура("ЛицевойСчет, Услуга", ТекСтрокаЛС.ЛицевойСчет, ТекСтрокаУслуги.Услуга);
				СтрокиИсключения = ТаблицаИсключений.НайтиСтроки(СтруктураПараметров);
				
				// Пополним строки исключения данными по услугам базам для услуг ОДН.
				МассивУслугБаз = СоответствиеУслугОбщедомовогоСчетчика.Получить(ТекСтрокаУслуги.Услуга);
				
				Если Не МассивУслугБаз = Неопределено Тогда
					Для Каждого ТекУслугаБаза Из МассивУслугБаз Цикл
						
						СтруктураПараметров = Новый Структура("ЛицевойСчет, Услуга", ТекСтрокаЛС.ЛицевойСчет, ТекУслугаБаза);
						СтрокиИсключенияБаз = ТаблицаИсключений.НайтиСтроки(СтруктураПараметров);
						
						Для Каждого ТекСтрокаИсключенияБазы Из СтрокиИсключенияБаз Цикл
							СтрокиИсключения.Добавить(ТекСтрокаИсключенияБазы);
						КонецЦикла;
						
					КонецЦикла;
				КонецЕсли;
				
				// 1. Сначала распределим исключения по видам тарифов
				Для Каждого ТекСтрокаИсключения Из СтрокиИсключения Цикл
					
					ТекущийОбъемИсключения = ТекСтрокаИсключения.ПоказаниеСчЛС;
					ВидТарифаИсключения = ТекСтрокаИсключения.ВидТарифа;
					
					// А) В первую очередь отнесем объемы исключения на инд. начисления с соответствующим видом тарифа.
					Для Каждого ТекСтрокаПервогоУровня Из врДеревоНачислений.Строки Цикл
						
						// Исключать не можем, если имеющиеся объемы показаний отрицательные.
						Если Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И Не ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем > 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если ВидТарифаИсключения = ТекСтрокаПервогоУровня.ВидТарифа Тогда
							
							ЗначениеИсключения = ?(Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ТекущийОбъемИсключения < 0, ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем, ТекущийОбъемИсключения);
							
							ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем = ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ЗначениеИсключения;
							
							// Добавим данные в таблицу учтенных объемов.
							ДобавитьСтрокуВТаблицуУчтенныхОбъемов(ТекСтрокаИсключения, ЗначениеИсключения);
							
							ТекущийОбъемИсключения = ТекущийОбъемИсключения - ЗначениеИсключения;
							Если ТекущийОбъемИсключения = 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					// Б) Если что-то не распределилось, а вид тарифа "Общий", то распределим по всем остальным инд. начислениям
					// пропорционально оставшемуся учетному инд. объему начислений.
					Если ВидТарифаИсключения = Перечисления.КВП_ВидыТарифов.Общий И ТекущийОбъемИсключения > 0 Тогда
						
						// Зафиксируем в переменной оставшийся объем исключения, который будем
						// распределять пропорционально оставшимся учетным инд. объемам.
						врОставшийсяОбъемИсключения = ТекущийОбъемИсключения;
						
						// Определим суммарный оставшийся учетный индивидуальный объем,
						// чтобы распределить оставшееся исключение пропорционально ему.
						ОставшийсяУчетныйИндивидуальныйОбъемВсего = 0;
						Для Каждого ТекСтрокаПервогоУровня Из врДеревоНачислений.Строки Цикл
							ОставшийсяУчетныйИндивидуальныйОбъемВсего = ОставшийсяУчетныйИндивидуальныйОбъемВсего + ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем;
						КонецЦикла;
						
						Для Каждого ТекСтрокаПервогоУровня Из врДеревоНачислений.Строки Цикл
							
							// Исключать не можем, если имеющиеся объемы показаний отрицательные.
							Если Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И Не ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем > 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ЗначениеИсключения = 0;
							
							Если врДеревоНачислений.Строки.Количество() = (врДеревоНачислений.Строки.Индекс(ТекСтрокаПервогоУровня) + 1) Тогда
								
								// Если это последняя строка, попробуем отнести на нее остаток исключения.
								ЗначениеИсключения = ?(Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ТекущийОбъемИсключения < 0, ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем, ТекущийОбъемИсключения);
								
								ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем = ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ЗначениеИсключения;
								
								// Добавим данные в таблицу учтенных объемов.
								ДобавитьСтрокуВТаблицуУчтенныхОбъемов(ТекСтрокаИсключения, ЗначениеИсключения);
								
							Иначе
								
								// Если это не последняя строка, получаем пропорционально учетному инд. объему
								// приходящийся на текущую строку объем исключения.
								ПропорциональныйОбъемПоказания = ?(ОставшийсяУчетныйИндивидуальныйОбъемВсего = 0, 0, врОставшийсяОбъемИсключения * ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем / ОставшийсяУчетныйИндивидуальныйОбъемВсего);
								
								ЗначениеИсключения = ?(Не НастройкаКорректировкиОДН.УчитыватьСразуВПолномОбъеме И ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ПропорциональныйОбъемПоказания < 0, ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем, ПропорциональныйОбъемПоказания);
								
								ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем = ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем - ЗначениеИсключения;
								
								// Добавим данные в таблицу учтенных объемов.
								ДобавитьСтрокуВТаблицуУчтенныхОбъемов(ТекСтрокаИсключения, ЗначениеИсключения);
								
							КонецЕсли;
							
							ТекущийОбъемИсключения = ТекущийОбъемИсключения - ЗначениеИсключения;
							Если ТекущийОбъемИсключения = 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					// Поместим обратно в строку исключения оставшийся объем исключения.
					ТекСтрокаИсключения.ПоказаниеСчЛС = ТекущийОбъемИсключения;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// 2. Затем распределим отнесенные на виды тарифа учетные объемы по подпериодам
			// пропорционально объемам расхода в них.
			
			Для Каждого ТекСтрокаПервогоУровня Из врДеревоНачислений.Строки Цикл
				
				УчетныйОбъемДляРаспределения = ТекСтрокаПервогоУровня.УчетныйИндивидуальныйОбъем;
				ОбъемПоказанияПоВидуТарифаВсего = ТекСтрокаПервогоУровня.Строки.Итог("ПоказаниеСчЛС");
				
				Для Каждого ТекСтрокаВторогоУровня Из ТекСтрокаПервогоУровня.Строки Цикл
					
					Если ТекСтрокаПервогоУровня.Строки.Количество() = (ТекСтрокаПервогоУровня.Строки.Индекс(ТекСтрокаВторогоУровня) + 1) Тогда
						ТекУчетныйИндивидуальныйОбъем = УчетныйОбъемДляРаспределения;
					Иначе
						ТекУчетныйИндивидуальныйОбъем = ?(ОбъемПоказанияПоВидуТарифаВсего = 0, 0, УчетныйОбъемДляРаспределения * ТекСтрокаВторогоУровня.ПоказаниеСчЛС / ОбъемПоказанияПоВидуТарифаВсего);
					КонецЕсли;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА УИО
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол("УИО на " + ТекСтрокаЛС.ЛицевойСчет +
																" за " + Формат(ТекСтрокаВторогоУровня.НачалоПериода, "ДФ=dd.MM.yyyy") + "-" + 
																Формат(ТекСтрокаВторогоУровня.КонецПериода, "ДФ=dd.MM.yyyy") + " " +
																ТекСтрокаВторогоУровня.ВидТарифа + ": " +
																"расход - " + ТекСтрокаВторогоУровня.ПоказаниеСчЛС + "; " +
																"учтено - " + ТекУчетныйИндивидуальныйОбъем + 
																?(Не ТекСтрокаВторогоУровня.ПоказаниеСчЛС = ТекУчетныйИндивидуальныйОбъем, "; исключено - " + (ТекСтрокаВторогоУровня.ПоказаниеСчЛС - ТекУчетныйИндивидуальныйОбъем), ""));
					
					ТекСтрокаВторогоУровня.УчетныйИндивидуальныйОбъем = ТекУчетныйИндивидуальныйОбъем;
					
					УчетныйОбъемДляРаспределения = УчетныйОбъемДляРаспределения - ТекУчетныйИндивидуальныйОбъем;
					
					// 3. Перенесем результаты исключения в табличную часть документа.
					Если Не ТекСтрокаВторогоУровня.УчетныйИндивидуальныйОбъем = 0 Тогда
						
						СтруктураПараметровПоискаЛС = Новый Структура("ЛицевойСчет, Услуга, ВидТарифа, ТипРасчета, НачалоПериода, КонецПериода");
						СтруктураПараметровПоискаЛС.ЛицевойСчет   = ТекСтрокаЛС.ЛицевойСчет;
						СтруктураПараметровПоискаЛС.Услуга        = ТекСтрокаУслуги.Услуга;
						СтруктураПараметровПоискаЛС.ВидТарифа     = ТекСтрокаВторогоУровня.ВидТарифа;
						СтруктураПараметровПоискаЛС.ТипРасчета    = ТекСтрокаВторогоУровня.ТипРасчета;
						СтруктураПараметровПоискаЛС.НачалоПериода = ТекСтрокаВторогоУровня.НачалоПериода;
						СтруктураПараметровПоискаЛС.КонецПериода  = ТекСтрокаВторогоУровня.КонецПериода;
						
						СтрокиЛС = ТаблицаЛС.НайтиСтроки(СтруктураПараметровПоискаЛС);
						Если СтрокиЛС.Количество() > 0 Тогда
							СтрокиЛС[0].УчетныйИндивидуальныйОбъем = ТекСтрокаВторогоУровня.УчетныйИндивидуальныйОбъем;
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
			
			// Если есть исключения и они были учтены, Формируем в протоколе расчетов записи по лицевому счету с информацией о том,
			// какой объем остатков по сторнировкам надо учесть в УИО, сколько учтено, сколько осталось учесть.
			
			Если ИспользоватьРежимОтладкиРасчетов И Не ТаблицаИсключений = Неопределено И УчтенныеОбъемыРасхожденийПУ.Количество() > 0 Тогда
				
				Отбор = Новый Структура("ЛицевойСчет, Услуга", ТекСтрокаЛС.ЛицевойСчет, ТекСтрокаУслуги.Услуга);
				
				СтрокиИсключений = ТаблицаИсключений.НайтиСтроки(Отбор);
				
				Отбор.Вставить("ВидТарифа", Неопределено);
				Отбор.Вставить("Учтено",    Истина);
				
				Для Каждого ТекСтрокаИсключение Из СтрокиИсключений Цикл
					
					Отбор.ВидТарифа = ТекСтрокаИсключение.ВидТарифа;
					
					УчтенныеСтроки = УчтенныеОбъемыРасхожденийПУ.НайтиСтроки(Отбор);
					
					УчтенныйУИО = 0;
					
					Для Каждого ТекСтрокаУчтенная Из УчтенныеСтроки Цикл
						УчтенныйУИО = УчтенныйУИО + ТекСтрокаУчтенная.Количество;
					КонецЦикла;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА УИО
					ОтладкаРасчетов_ДобавитьИнформациюВПротокол(Символы.Таб + "Исключаемый объем " + ТекСтрокаИсключение.ВидТарифа + ": " +
																"исходный - " + ТекСтрокаИсключение.ПоказаниеСчЛСКопия + "; " +
																"исключено - " + УчтенныйУИО +
																?(Не ТекСтрокаИсключение.ПоказаниеСчЛСКопия = УчтенныйУИО, "; остаток - " + (ТекСтрокаИсключение.ПоказаниеСчЛСКопия - УчтенныйУИО), ""));
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в таблице исключений остались неучтенные остатки, запишем их в таблицу учтенных объемов без пометки учета.
	// Они могут понадобиться для учета показаний общедомовых услуг.
	Если НастройкаКорректировкиОДН.Использовать И Дата >= НастройкаКорректировкиОДН.ДатаНачалаИспользования Тогда
		
		Для Каждого ТекСтрокаИсключения Из ТаблицаИсключений Цикл
			
			Если ТекСтрокаИсключения.ПоказаниеСчЛС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим данные в таблицу учтенных объемов.
			ДобавитьСтрокуВТаблицуУчтенныхОбъемов(ТекСтрокаИсключения, ТекСтрокаИсключения.ПоказаниеСчЛС, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УслугиПоПоказаниямПУ.Загрузить(ТаблицаЛС);
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА УИО
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("Учетный индивидуальный объем всего: " + ТаблицаЛС.Итог("УчетныйИндивидуальныйОбъем"));
	ОтладкаРасчетов_ДобавитьИнформациюВПротокол("----- Окончание расчета учетного индивидуального объема (" + ТекущаяДатаСеанса() + ") -----" + Символы.ПС);
	
КонецПроцедуры

// Процедура добавляет строку в таблицу учтенных объемов.
Процедура ДобавитьСтрокуВТаблицуУчтенныхОбъемов(СтруктураДанных, Количество, Учтено = Истина)
	
	// Добавим данные в таблицу учтенных объемов.
	НоваяСтрокаУчтенногоОбъема = УчтенныеОбъемыРасхожденийПУ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаУчтенногоОбъема, СтруктураДанных);
	
	НоваяСтрокаУчтенногоОбъема.Количество           = Количество;
	НоваяСтрокаУчтенногоОбъема.Учтено               = Учтено;
	
КонецПроцедуры

// Процедура удаления неучтенных объемов расхождения ПУ.
// Удалим те объемы, которые реально не были учтены в текущем начислении.
Процедура УдалитьНеучтенныеСтрокиИзТаблицыУчтенныхОбъемовРасхожденийПУ()
	
	СтрокиДляУдаления = УчтенныеОбъемыРасхожденийПУ.НайтиСтроки(Новый Структура("Учтено", Ложь));
	
	Для Каждого ТекСтрокаУдаления Из СтрокиДляУдаления Цикл
		УчтенныеОбъемыРасхожденийПУ.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияТаблицыПериодов

// Процедура заполняет таблицу периодов для начисления по ПУ.
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериодов, СтрокаПУ, ЕстьИндивидуальныеПУВДоме, ЕстьИндивидуальныеПУВПодъезде,
								   УВсехВДомеУстановленыИндивидуальныеПУ, УВсехВПодъездеУстановленыИндивидуальныеПУ, КэшПериодовСчетчиков)
	
	ТаблицаПериодов.Очистить();
	
	// Если у нас есть счетчик, то имеет смысл определить все даты за период,
	// на которые происходит изменение действия счетчика (действует, не действует),
	// а также тарифа по услуге.
	// Если услуга составная, то дробить на периоды будем только если были изменения
	// в действии услуги.
	
	Отбор = Новый Структура;
	Отбор.Вставить("Счетчик", ?(СтрокаПУ.Счетчик = NULL, Справочники.КВП_Счетчики.ПустаяСсылка(), СтрокаПУ.Счетчик));
	Отбор.Вставить("Объект",  СтрокаПУ.ЛицевойСчет);
	Отбор.Вставить("Услуга",  СтрокаПУ.Услуга);
	НайденныеСтроки = КэшПериодовСчетчиков.НайтиСтроки(Отбор);
	
	// Теперь сформируем таблицу периодов, в строках которой находятся
	// даты начала и окончания периода, признак действия счетчика
	// и признак того, что счетчик когда-либо ранее устанавливался.
	ЭтоПерваяСтрока      = Истина;
	НоваяСтрока          = Неопределено;
	ПредДействиеСчетчика = Ложь;
	СчетчикБылУстановлен = Ложь;
	
	// Проверяем количество строк счетчика в кэше.
	КоличествоСтрокКэшаПериодов = НайденныеСтроки.Количество();
	
	// Если строк больше нуля, то начинаем заполнять таблицу периодов.
	Если НЕ КоличествоСтрокКэшаПериодов = 0 Тогда
		
		// Последовательно обходим все периоды счетчика.
		МаксимальныйИндексМассиваСтрокПериодов = КоличествоСтрокКэшаПериодов - 1;
		
		Для Сч = 0 по МаксимальныйИндексМассиваСтрокПериодов Цикл
			
			НайденнаяСтрока = НайденныеСтроки[Сч];
			
			// Если элемент последний, то в качестве даты окончания присваиваем ему дату окончания месяца начисления.
			Если Сч = МаксимальныйИндексМассиваСтрокПериодов Тогда
				ДатаОкончанияТекущегоПериода = КонецМесяца(Дата);
			// Если элемент не последний, то в качестве даты окончания присваиваем ему дату начала следующего периода - 1 сутки.
			Иначе
				ДатаОкончанияТекущегоПериода = НайденныеСтроки[Сч + 1].Период - ДлинаСуток;
			КонецЕсли;
			
			// Проверяем был ли счетчик установлен ранее или устанавливается в текущем.
			Если НЕ СчетчикБылУстановлен И ЗначениеЗаполнено(НайденнаяСтрока.СчетчикБылУстановлен) Тогда
				СчетчикБылУстановлен = НайденнаяСтрока.СчетчикБылУстановлен;
			КонецЕсли;
			
			// Если счетчик устанавливался, то добавляем такой период в таблицу периодов без дополнительных проверок.
			Если СчетчикБылУстановлен Тогда
				
				ДобавитьСтрокуВТаблицуПериодов(ТаблицаПериодов, СтрокаПУ, НайденнаяСтрока, ПредДействиеСчетчика, ДатаОкончанияТекущегоПериода);
				
			// Если счетчик не был установлен ранее и не установлен в текущем периоде, то проверяем, нужно ли добавлять его период в таблицу.
			Иначе
				
				// ВАЖНО:
				// Возможны следующие случаи:
				// 1. На объект никогда не устанавливался счетчик. В таком случае для всех периодов нужно начислять по норме/среднему.
				// 2. Счетчик на объект устанавливается впервые, других счетчиков по услуге ранее не устанавливалось. В таком
				//    случае за периоды до установки счетчика нужно начислять по норме/среднему.
				// 3. Счетчик на объект устанавливается впервые, но ранее уже был установлен другой счетчик. В таком случае за периоды до
				//    установки счетчика начислять не нужно.
				//
				// Соответственно:
				// 1. Периоды до установки счетчика, относящиеся к случаям 1 и 2, должны попасть в таблицу периодов, так как по данным
				//    периодам необходимо выполнять начисление по норме/среднему.
				// 2. Периоды до установки счетчика, относящиеся к 3-му случаю, не должны попасть в таблицу периодов, так как по ним
				//    не нужно выполнять начисление по норме/среднему.
				
				// Находим периоды текущей группировки, где были установлены счетчики.
				СтрокиПериода = КэшПериодовСчетчиков.НайтиСтроки(Новый Структура("Объект, Услуга, Здание, Помещение, СчетчикБылУстановлен",
																				  НайденнаяСтрока.Объект, НайденнаяСтрока.Услуга,
																				  НайденнаяСтрока.Здание, НайденнаяСтрока.Помещение, Истина));
				
				ДобавитьПериодВТаблицуПериодов = Истина;
				
				// Проверяем, существуют ли периоды других счетчиков, начало которых меньше окончания текущего периода.
				// Если такие периоды существуют, то текущий период не добавляем в таблицу периодов.
				Для каждого ТекСтрокаПериодаСУстановленнымСчетчиком из СтрокиПериода Цикл
					
					Если НЕ ТекСтрокаПериодаСУстановленнымСчетчиком.Счетчик = НайденнаяСтрока.Счетчик И ТекСтрокаПериодаСУстановленнымСчетчиком.Период < ДатаОкончанияТекущегоПериода Тогда
						ДобавитьПериодВТаблицуПериодов = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДобавитьПериодВТаблицуПериодов Тогда
					
					ДобавитьСтрокуВТаблицуПериодов(ТаблицаПериодов, СтрокаПУ, НайденнаяСтрока, ПредДействиеСчетчика, ДатаОкончанияТекущегоПериода);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвернутьТаблицуПериодов(ТаблицаПериодов);
	
	// Исключим периоды когда услуга не была назначена.
	ИсключитьПериодыНеназначенияУслуги(ТаблицаПериодов, СтрокаПУ.ЛицевойСчет, СтрокаПУ.Услуга);
	
	// Теперь для каждого периода определим, по какому алгоритму будем выполнять начисление.
	// Для этого определим:
	//   1) тип индивидуального расчета 
	//   и 
	//   2) формулу расчета.
	
	Для Каждого СтрокаТекПериода Из ТаблицаПериодов Цикл
		
		// 1) Определим параметры индивидуального расчета
		Если НЕ СтрокаТекПериода.ЕстьСчетчик Тогда
			
			// Если счетчик не действует, то проверим настройку начисления по настройкам
			// отсутствия показаний услуги. Если настройка задана, то проверяем причину
			// последнего отключения счетчика и время, которое прошло с момента отключения.
			ПринудительноРассчитыватьПоНастройкеОтсутствияПоказаний = Ложь;
			
			Если СтрокаПУ.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
				
				// Проверим, можно ли рассчитывать по настройкам отсутствия показаний.
				СтруктураРезультата
					= ПроверитьНеобходимостьРасчетаПриОтсутствииПоказанийПрибораУчетаКогдаПУУтерянСломанИлиНаПоверке(СтрокаТекПериода.ДатаНачала,
																													 СтрокаТекПериода.ДатаОкончания,
																													 СтрокаПУ.ЛицевойСчет,
																													 СтрокаПУ.Помещение,
																													 СтрокаПУ.Услуга,
																													 СтрокаПУ.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений,
																													 СтрокаПУ.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений);
				
				ПринудительноРассчитыватьПоНастройкеОтсутствияПоказаний = СтруктураРезультата.НуженРасчетПриОтсутствииПоказаний;
				
				// Нужно разбить текущий период на 2 подпериода,
				// если в текущем периоде находится граница определения настройки.
				Если СтруктураРезультата.НужноРазбитьПериод Тогда
					
					// Добавляем и заполняем новый период.
					НовыйПериод = ТаблицаПериодов.Добавить();
					
					ЗаполнитьЗначенияСвойств(НовыйПериод, СтрокаТекПериода);
					
					НовыйПериод.ДатаНачала    = СтруктураРезультата.ГраницаРазбиенияПериода;
					НовыйПериод.ДатаОкончания = СтрокаТекПериода.ДатаОкончания;
					
					// Установим новую дату окончания текущего периода.
					СтрокаТекПериода.ДатаОкончания = НачалоДня(СтруктураРезультата.ГраницаРазбиенияПериода - 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПринудительноРассчитыватьПоНастройкеОтсутствияПоказаний Тогда
				
				// Если действующий счетчик есть, но нет показаний
				ОпределитьПараметрыРасчетаПриОтсутствииПоказанийПрибораУчета(СтрокаТекПериода, СтрокаПУ);
				
				// Определим признак начисления по настройкам отсутствия показаний, чтобы при расчете по среднему
				// получать данные по среднему из таблицы по отсутствию показаний.
				СтрокаТекПериода.РасчетПоОтсутствиюПоказанийПриУтереПоломкеПоверке = Истина;
				
				// Принудительно установим состояние ПУ "Нет ИПУ", так как расчет по настройкам
				// отсутствия показаний принудительный. Также нужно для того, чтобы после включения счетчика
				// и ввода показаний не производилось сторнирование текущих начислений.
				СтрокаТекПериода.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
				
			Иначе
				// Если нет действующего счетчика, отрабатываем стандартно.
				ОпределитьПараметрыРасчетаПриОтсутствииПрибораУчета(СтрокаТекПериода, СтрокаПУ);
			КонецЕсли;
			
		ИначеЕсли НЕ СтрокаПУ.ЕстьРасход И НЕ СтрокаПУ.ПоказанияЗаПериодВведены Тогда
			
			// Если действующий счетчик есть, но нет показаний
			ОпределитьПараметрыРасчетаПриОтсутствииПоказанийПрибораУчета(СтрокаТекПериода, СтрокаПУ);
			
		Иначе
			
			// Если действующий счетчик есть и есть показания
			СтрокаТекПериода.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания;
			СтрокаТекПериода.ТипРасчета  = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ();
			
		КонецЕсли;
		
		// 2) Определим формулы расчета
		Если Услуга.ИспользоватьФормулы3и14
		   И ((СтрокаПУ.ЕстьДомовойСчетчик И НЕ ЕстьИндивидуальныеПУВДоме) 
		 ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И НЕ ЕстьИндивидуальныеПУВПодъезде)) Тогда
			
			// Если в услуге установлено, что объем индивидуального потребления рассчитывать
			// по формуле №3 постановления №354, и если в доме отсутствуют индивидуальные приборы учета.
			СтрокаТекПериода.ТипРасчета     = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
			СтрокаТекПериода.СостояниеПУ    = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14();
			
		ИначеЕсли Услуга.ИспользоватьФормулу3
		        И ((СтрокаПУ.ЕстьДомовойСчетчик И ЕстьИндивидуальныеПУВДоме И НЕ УВсехВДомеУстановленыИндивидуальныеПУ) 
		      ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И ЕстьИндивидуальныеПУВПодъезде И НЕ УВсехВПодъездеУстановленыИндивидуальныеПУ)) Тогда
			
			// Если в услуге установлено, что объем индивидуального потребления рассчитывать
			// по формуле №3 постановления №344, и если дом оборудован коллективным (общедомовым) прибором учета
			// и в доме не все жилые и нежилые помещения оборудованы индивидуальными (или) общими (квартирными) приборами учета.
			
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3Постановления344();
			
			// РЕШИЛИ РЕАЛИЗОВАТЬ ТАКИМ ОБРАЗОМ, т.к. на наш взгляд в формуле допущена ошибка.
			// Т.к. по формуле весь объем потребленной за расчетный период услуги, определенный по показаниям коллективного 
			// прибора учета, распределяется только на помещения, не оборудованные индивидуальным прибором учета, при этом из 
			// объема, определенного по показаниям коллективного прибора учета, не вычитается суммарный индивидуальный расход,
			// определенный по показаниям индивидуальных приборов учета и рассчитанный исходя из норматива при отсутствии приборов учета.
			Если НЕ СтрокаТекПериода.ЕстьСчетчик Тогда
				// Если нет прибора, тогда не производим начисление,
				// если прибор есть, тогда по настройкам услуги.
				СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление(); 
			КонецЕсли;
			
		ИначеЕсли Услуга.ИспользоватьФормулу3_1
		        И ((СтрокаПУ.ЕстьДомовойСчетчик И УВсехВДомеУстановленыИндивидуальныеПУ) 
		      ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И УВсехВПодъездеУстановленыИндивидуальныеПУ)) Тогда
			
			// Если в услуге установлено, что объем индивидуального потребления рассчитывать
			// по формуле №3(1) постановления №344, и если дом оборудован коллективным (общедомовым) прибором учета 
			// и в доме все жилые и нежилые помещения оборудованы индивидуальными и (или) общими (квартирными) приборами учета.
			
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3_1Постановления344();
			
		ИначеЕсли Услуга.ИспользоватьФормулу15
		        И НЕ СтрокаПУ.ЕстьДомовойСчетчик И НЕ СтрокаПУ.ЕстьПодъездныйСчетчик Тогда
			
			// Если в услуге установлено, что объем потребления на ОДН рассчитывать
			// по формуле №15 постановления №354, и если дом не оборудован коллективным (общедомовым) прибором учета.
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле15();
			
		ИначеЕсли Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
				  И НЕ СтрокаПУ.ЕстьДомовойСчетчик И НЕ СтрокаПУ.ЕстьПодъездныйСчетчик Тогда
			
			// !!! Сейчас индивидуальные показания определяются при расчете ОДН.
			// При заполнении табличной части в нее добавляются строки с нулевыми
			// показателями в соответствии с подпериодами расчета.
			
			// Если в услуге установлен вариант начисления по постановлению №1708
			// и дом не оборудован коллективным (общедомовым) прибором учета.
			СтрокаТекПериода.ТипРасчета     = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
			СтрокаТекПериода.СостояниеПУ    = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708();
			
		ИначеЕсли Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
				  И ((СтрокаПУ.ЕстьДомовойСчетчик И НЕ ЕстьИндивидуальныеПУВДоме) 
				  ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И НЕ ЕстьИндивидуальныеПУВПодъезде)) Тогда
			
			// !!! Сейчас индивидуальные показания определяются при расчете ОДН.
			// При заполнении табличной части в нее добавляются строки с нулевыми
			// показателями в соответствии с подпериодами расчета.
			
			// Если в услуге установлен вариант начисления по постановлению №1708
			// и в доме отсутствуют индивидуальные приборы учета.
			СтрокаТекПериода.ТипРасчета     = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
			СтрокаТекПериода.СостояниеПУ    = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708();
			
		ИначеЕсли Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
				  И ((СтрокаПУ.ЕстьДомовойСчетчик И ЕстьИндивидуальныеПУВДоме И НЕ УВсехВДомеУстановленыИндивидуальныеПУ) 
				  ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И ЕстьИндивидуальныеПУВПодъезде И НЕ УВсехВПодъездеУстановленыИндивидуальныеПУ)) Тогда
			
			// Если в услуге установлен вариант начисления по постановлению №1708 и дом оборудован
			// коллективным (общедомовым) прибором учета, но не все жилые и нежилые помещения
			// оборудованы индивидуальными (или) общими (квартирными) приборами учета.
			
			// Если прибор есть или установлен признак, что прибор утерян, на поверке или произошла поломка,
			// тогда начисление производим по настройкам услуги.
			Если Не СтрокаТекПериода.ЕстьСчетчик
				 И Не СтрокаТекПериода.РасчетПоОтсутствиюПоказанийПриУтереПоломкеПоверке Тогда
				// Иначе производим начисление по формуле 3(7). Расчет производится при расчете ОДН.
				СтрокаТекПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
			КонецЕсли;
			
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708();
			
		ИначеЕсли Услуга.ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708
				  И ((СтрокаПУ.ЕстьДомовойСчетчик И УВсехВДомеУстановленыИндивидуальныеПУ) 
				  ИЛИ (НЕ СтрокаПУ.ЕстьДомовойСчетчик И СтрокаПУ.ЕстьПодъездныйСчетчик И УВсехВПодъездеУстановленыИндивидуальныеПУ)) Тогда
			
			// Если в услуге установлен вариант начисления по постановлению №1708 и дом оборудован
			// коллективным (общедомовым) прибором учета и в доме все жилые и нежилые помещения
			// оборудованы индивидуальными и (или) общими (квартирными) приборами учета.
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3_3Постановления1708();
			
		Иначе
			СтрокаТекПериода.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги();
		КонецЕсли;
		
	КонецЦикла;
	
	// Будем дробить периоды, если расчет производится по норме.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	СтрокиБезДействияПУ = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока Из СтрокиБезДействияПУ Цикл
	// Если нет счетчика и в услуге установлено рассчитывать начисления по норме при отсутствии счетчика
	// или если счетчик действует, но не введены показания и в услуге установлено рассчитывать начисления 
	// по норме при отсутствии показаний, то разобъем периоды с учетом изменения параметров для расчета нормы.
		
		Если (НЕ ТекСтрока.ЕстьСчетчик 
		   И СтрокаПУ.СпособРасчетаПоПУБезДействующихПУ = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления) 
		 ИЛИ (ТекСтрока.ЕстьСчетчик И НЕ СтрокаПУ.ПоказанияЗаПериодВведены И НЕ СтрокаПУ.ЕстьРасход
		   И СтрокаПУ.СпособРасчетаПоПУБезПоказаний = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления) Тогда
			
			ДобавитьПериодыИзмененияПараметровРасчетаНормыЗаПериод(ТаблицаПериодов, ТекСтрока, СтрокаПУ.ЛицевойСчет, 
																	СтрокаПУ.Услуга, ТекСтрока.ДатаНачала, ТекСтрока.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	// Также будем дробить периоды, если расчет производится по среднему для случаев, когда при отсутствии возможности
	// произвести расчет по среднему будет выполняться расчет по норме потребления.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
	СтрокиБезДействияПУПоСреднему = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока Из СтрокиБезДействияПУПоСреднему Цикл
	// Если нет счетчика и в услуге установлено рассчитывать начисления по среднему при отсутствии счетчика
	// или если счетчик действует, но не введены показания и в услуге установлено рассчитывать начисления 
	// по среднему при отсутствии показаний, но при этом данные для расчета по среднему отсутствуют и расчет происходит
	// по норме потребления, то разобъем периоды с учетом изменения параметров для расчета нормы.
		
		Если (НЕ ТекСтрока.ЕстьСчетчик 
		   И СтрокаПУ.СпособРасчетаПоПУБезДействующихПУ = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению) 
		 ИЛИ (ТекСтрока.ЕстьСчетчик И НЕ СтрокаПУ.ПоказанияЗаПериодВведены И НЕ СтрокаПУ.ЕстьРасход
		   И СтрокаПУ.СпособРасчетаПоПУБезПоказаний = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению) Тогда
			
			ДобавитьПериодыИзмененияПараметровРасчетаНормыЗаПериод(ТаблицаПериодов, ТекСтрока, СтрокаПУ.ЛицевойСчет, 
																	СтрокаПУ.Услуга, ТекСтрока.ДатаНачала, ТекСтрока.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	// По услугам, рассчитываемым по норме и по количеству жильцов, в течение периода расчета
	// могло произойти изменение значения основания расчета (изменение количества проживающих,
	// или зарегистрированных жильцов).
	// Для таких ситуаций необходимо выполнять разделение периода расчета на подпериоды.
	СпособРасчетаПоУслуге = СтрокаПУ.СпособРасчета;
	
	Если ЗначениеЗаполнено(СпособРасчетаПоУслуге)
	   И СпособРасчетаПоУслуге = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
		
		Для Каждого ТекСтрока Из ТаблицаПериодов Цикл
			
			ДобавитьПериодыИзмененияПараметровРасчетаНормыЗаПериод(ТаблицаПериодов, ТекСтрока, СтрокаПУ.ЛицевойСчет, 
																	СтрокаПУ.Услуга, ТекСтрока.ДатаНачала, ТекСтрока.ДатаОкончания);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаПериодов.Сортировать("ДатаНачала");
	
	// Заполним колонку "Количество дней" в таблице периодов.
	Для Каждого ТекСтрока Из ТаблицаПериодов Цикл
		ТекСтрока.ДнейНачислено = 1 + (НачалоДня(ТекСтрока.ДатаОкончания) - ТекСтрока.ДатаНачала) / (ДлинаСуток)
	КонецЦикла;
	
КонецПроцедуры  //ЗаполнитьТаблицуПериодов()

// Процедура выполняет добавление новой строки в таблицу периодов.
//
Процедура ДобавитьСтрокуВТаблицуПериодов(ТаблицаПериодов, СтрокаПУ, НайденнаяСтрока, ПредДействиеСчетчика, ДатаОкончанияТекущегоПериода)
	
	НоваяСтрока = ТаблицаПериодов.Добавить();
	НоваяСтрока.ДатаНачала    = НайденнаяСтрока.Период;
	НоваяСтрока.ДатаОкончания = ДатаОкончанияТекущегоПериода;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПУ);
	Если ЗначениеЗаполнено(НайденнаяСтрока.Действует) Тогда
		НоваяСтрока.ЕстьСчетчик = НайденнаяСтрока.Действует;
	Иначе
		НоваяСтрока.ЕстьСчетчик = ПредДействиеСчетчика;
	КонецЕсли;
	
	Если НайденнаяСтрока.СменаТарифа = Истина ИЛИ НайденнаяСтрока.СменаДоговора = Истина Тогда
		НоваяСтрока.СверткаНевозможна = Истина;
	КонецЕсли;
	
	ПредДействиеСчетчика = НоваяСтрока.ЕстьСчетчик;
	
КонецПроцедуры

// Процедура определяет общие периоды действия приборов учета, заполняет их данными.
Функция ПолучитьОбщиеПериоды(ТаблицаПериодов, Параметры)
	
	// Запомним дату окончания последнего периода.
	ДатаОкончания = КонецМесяца(Дата);
	
	Если ТаблицаПериодов.Количество() > 0 Тогда
		врТаблицаПериодов = ТаблицаПериодов.Скопировать(, "ДатаОкончания");
		врТаблицаПериодов.Свернуть("ДатаОкончания");
		врТаблицаПериодов.Сортировать("ДатаОкончания");
		ДатаОкончания = врТаблицаПериодов.Получить(врТаблицаПериодов.Количество() - 1).ДатаОкончания;
	КонецЕсли;
	
	// Сформируем таблицу дат начала.
	врТаблицаПериодов = Новый ТаблицаЗначений;
	врТаблицаПериодов.Колонки.Добавить("ДатаНачала");
	
	Для Каждого ТекСтрокаПериода Из ТаблицаПериодов Цикл
		
		НоваяСтрока = врТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаНачала = ТекСтрокаПериода.ДатаНачала;
		
		Если Не ТекСтрокаПериода.ДатаОкончания = ДатаОкончания Тогда
			НоваяСтрока = врТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаНачала = ТекСтрокаПериода.ДатаОкончания + ДлинаСуток;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем общие начала периодов.
	ТаблицаОбщихПериодов = врТаблицаПериодов.Скопировать(, "ДатаНачала");
	ТаблицаОбщихПериодов.Свернуть("ДатаНачала");
	ТаблицаОбщихПериодов.Сортировать("ДатаНачала");
	ТаблицаОбщихПериодов.Колонки.Добавить("ДатаОкончания",       Новый ОписаниеТипов("Дата"));
	
	// Дополняем окончанием периодов.
	Если ТаблицаОбщихПериодов.Количество() > 0 Тогда
		
		Для Индекс = 0 По ТаблицаОбщихПериодов.Количество() - 2 Цикл
			ТаблицаОбщихПериодов[Индекс].ДатаОкончания = НачалоДня(ТаблицаОбщихПериодов[Индекс + 1].ДатаНачала - ДлинаСуток);
		КонецЦикла;
		
		ТаблицаОбщихПериодов[Индекс].ДатаОкончания = ДатаОкончания;
		
	КонецЕсли;
	
	// Дополним таблицу общих периодов следующими полями.
	// Найдем количество действующих счетчиков в периодах для расчета нормы в случае нескольких ПУ.
	ТаблицаОбщихПериодов.Колонки.Добавить("КоличествоСчетчиков", Новый ОписаниеТипов("Число"));
	ТаблицаОбщихПериодов.Колонки.Добавить("Тарифность",          Новый ОписаниеТипов("Число"));
	ТаблицаОбщихПериодов.Колонки.Добавить("ИмеютсяПоказания",    Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрокаОбщегоПериода Из ТаблицаОбщихПериодов Цикл
		
		ТекущаяДатаНачала = ТекСтрокаОбщегоПериода.ДатаНачала;
		
		Для Каждого ТекСтрокаИсходногоПериода Из ТаблицаПериодов Цикл
			
			// Для определения количества счетчиков на текущем общем периоде берем все детальные периоды,
			// в которые входит текущий общий период. Важно, что конец интервала периодов может совпадать,
			// так как и в общем периоде, и в детальном конец интервала - это дата окончания периода, а не начало нового.
			Если ТекущаяДатаНачала >= ТекСтрокаИсходногоПериода.ДатаНачала
			   И ТекущаяДатаНачала <= ТекСтрокаИсходногоПериода.ДатаОкончания
			   И ТекСтрокаИсходногоПериода.ЕстьСчетчик Тогда
				
				ТекСтрокаОбщегоПериода.КоличествоСчетчиков = ТекСтрокаОбщегоПериода.КоличествоСчетчиков + 1;
				ТекСтрокаОбщегоПериода.Тарифность = Макс(ТекСтрокаОбщегоПериода.Тарифность, 
															ТекСтрокаИсходногоПериода.ТарифностьСчетчика);
				ТекСтрокаОбщегоПериода.ИмеютсяПоказания = ТекСтрокаОбщегоПериода.ИмеютсяПоказания + 
															?(ТекСтрокаИсходногоПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ(), 1, 0);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Исключим периоды когда услуга не была назначена.
	Если Параметры.Свойство("ЛицевойСчет") И Параметры.Свойство("Услуга") Тогда
		
		ИсключитьПериодыНеназначенияУслуги(ТаблицаОбщихПериодов, Параметры.ЛицевойСчет, Параметры.Услуга);
		
	КонецЕсли;
	
	ТаблицаОбщихПериодов.Колонки.Добавить("ДнейНачислено", Новый ОписаниеТипов("Число"));
	ТаблицаОбщихПериодов.Колонки.Добавить("ВсегоДнейНачислений", Новый ОписаниеТипов("Число"));
	
	// Пересчитаем количество начисленных дней
	Если ТаблицаОбщихПериодов.Количество() > 0 Тогда
		
		Для Индекс = 0 По ТаблицаОбщихПериодов.Количество() - 2 Цикл
			ТаблицаОбщихПериодов[Индекс].ДнейНачислено     = (ТаблицаОбщихПериодов[Индекс].ДатаОкончания 
														   - ТаблицаОбщихПериодов[Индекс].ДатаНачала) / (ДлинаСуток) + 1;
			ТаблицаОбщихПериодов[Индекс].ВсегоДнейНачислений = Параметры.ВсегоДнейНачислений;
		КонецЦикла;
		
		ТаблицаОбщихПериодов[Индекс].ДнейНачислено       = (НачалоДня(ТаблицаОбщихПериодов[Индекс].ДатаОкончания)
														 - ТаблицаОбщихПериодов[Индекс].ДатаНачала) / (ДлинаСуток) + 1;
		ТаблицаОбщихПериодов[Индекс].ВсегоДнейНачислений = Параметры.ВсегоДнейНачислений;
		
	КонецЕсли;
	
	Возврат ТаблицаОбщихПериодов;
	
КонецФункции //ПолучитьОбщиеПериоды()

// Процедура разбивает таблицу периодов на минимальные.
// Записи из таблицы "ТаблицаПериодов" дробятся по периодам
// из таблицы "ТаблицаОбщихПериодов".
//
Процедура РазбитьТаблицуПериодовНаМинимальные(ТаблицаПериодов, ТаблицаОбщихПериодов)
	
	Для Каждого ТекСтрокаОбщегоПериода Из ТаблицаОбщихПериодов Цикл
		
		НайденныеСтроки = ТаблицаПериодов.НайтиСтроки(Новый Структура("ДатаНачала", ТекСтрокаОбщегоПериода.ДатаНачала));
		
		Для Индекс = 0 По НайденныеСтроки.Количество() - 1 Цикл
			
			Если НайденныеСтроки[Индекс].ДатаОкончания <= ТекСтрокаОбщегоПериода.ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим новую,заполним ее данными текущей строки, заменим у нее дату начала.
			НоваяСтрока               = ТаблицаПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[Индекс]);
			НоваяСтрока.ДатаНачала    = ТекСтрокаОбщегоПериода.ДатаОкончания + (ДлинаСуток);
			НоваяСтрока.ДнейНачислено = (НачалоДня(НоваяСтрока.ДатаОкончания) - НоваяСтрока.ДатаНачала) / (ДлинаСуток) + 1;
			
			// У текущей строки заменим дату окончания.
			НайденныеСтроки[Индекс].ДатаОкончания = ТекСтрокаОбщегоПериода.ДатаОкончания;
			ТекДнейНачислено                      = НайденныеСтроки[Индекс].ДнейНачислено;
			
			Если ТекДнейНачислено = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки[Индекс].ДнейНачислено           = (НайденныеСтроки[Индекс].ДатаОкончания 
															- НайденныеСтроки[Индекс].ДатаНачала) / (ДлинаСуток) + 1;
			НайденныеСтроки[Индекс].ДневноеПоказаниеОстаток = НайденныеСтроки[Индекс].ДневноеПоказаниеОстаток 
															* (НайденныеСтроки[Индекс].ДнейНачислено / ТекДнейНачислено);
			НайденныеСтроки[Индекс].НочноеПоказаниеОстаток  = НайденныеСтроки[Индекс].НочноеПоказаниеОстаток 
															* (НайденныеСтроки[Индекс].ДнейНачислено / ТекДнейНачислено);
			НайденныеСтроки[Индекс].ПиковоеПоказаниеОстаток = НайденныеСтроки[Индекс].ПиковоеПоказаниеОстаток 
															* (НайденныеСтроки[Индекс].ДнейНачислено / ТекДнейНачислено);
			
			НоваяСтрока.ДневноеПоказаниеОстаток = НоваяСтрока.ДневноеПоказаниеОстаток 
												* (НоваяСтрока.ДнейНачислено / ТекДнейНачислено);
			НоваяСтрока.НочноеПоказаниеОстаток  = НоваяСтрока.НочноеПоказаниеОстаток 
												* (НоваяСтрока.ДнейНачислено / ТекДнейНачислено);
			НоваяСтрока.ПиковоеПоказаниеОстаток = НоваяСтрока.ПиковоеПоказаниеОстаток 
												* (НоваяСтрока.ДнейНачислено / ТекДнейНачислено);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("ДатаНачала, ДатаОкончания");
	
КонецПроцедуры

// Процедура исключает периоды, когда услуга не была назначена.
//
// Например, начисление по счетчикам за период с 13 по 20 число месяца,
// а услуга назначена только на период с 10 по 15 число. В результате работы процедуры
// получим период с 10 по 15 число месяца.
//
Процедура ИсключитьПериодыНеназначенияУслуги(ТаблицаПериодов, ЛицевойСчет, Услуга)
	
	// Обозначения в комментариях:
	// ( ) - период, в котором услуга не действует
	// [ ] - период начисления.
	
	// Алгоритм работает следующим образом:
	// Мы получаем периоды, на которые изменяется состояние действия услуги (назначена или отменена)
	// и для каждого такого периода анализируем таблицу периодов начисления, из которой нужно убрать те интервалы,
	// в которых услуга не действует. Если текущий период изменения состояния пересекается с рассматриваемым
	// периодом начисления, то анализируем тип пересечения и в зависимости от типа делаем отсечение ненужных промежутков.
	// Есть 4 варианта пересечения:
	//
	// 1. Период начисления полностью входит в период, когда услуга не действует - значит период начисления нам
	// не подходит, удаляем его.
	//
	// 2. Период недействия полностью входит в период начисления услуги - значит мы должны из периода начисления
	// удалить интервал недействия - для этого делим период начисления на два промежутка.
	//
	// 3. Левая граница периода недействия принадлежит промежутку начисления, а правая граница за пределами
	// периода начисления - в таком случае от периода начисления отсекаем правую часть промежутка,
	// начиная от даты начала периода недействия.
	//
	// 4. Правая граница периода недействия принадлежит промежутку начисления, а левая граница за пределами
	// периода начисления - в таком случае от периода начисления отсекаем левую часть промежутка, начиная
	// от даты начала периода начисления и заканчивая концом периода недействия.
	
	// Определим данные о действии услуги по уже сформированной таблице.
	НайденныеСтроки = мТаблицаПериодовДействияУслуги.НайтиСтроки(Новый Структура("Объект, Услуга", ЛицевойСчет, Услуга));
	ТаблицаДействияУслуги = мТаблицаПериодовДействияУслуги.Скопировать(НайденныеСтроки, "Период, Действует");
	
	// Если по действию услуга на л/с нет, то добавим сведения на начало и конец периода.
	Если ТаблицаДействияУслуги.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаДействияУслуги.Добавить();
		НоваяСтрока.Период = НачалоМесяца(Дата);
		НоваяСтрока.Действует = Ложь;
		
		НоваяСтрока = ТаблицаДействияУслуги.Добавить();
		НоваяСтрока.Период = КонецМесяца(Дата);
		НоваяСтрока.Действует = Ложь;
	КонецЕсли;
	
	ТаблицаДействияУслуги.Сортировать("Период");
	
	ДатаНачалаПериода    = Неопределено;
	ДатаОкончанияПериода = Неопределено;
	
	врТаблицаПериодов = ТаблицаПериодов.Скопировать();
	
	Для Каждого ТекСтрокаНазначения Из ТаблицаДействияУслуги Цикл
		
		Если НЕ ДатаНачалаПериода = Неопределено 
		 И (ТекСтрокаНазначения.Действует Или ТекСтрокаНазначения.Период = КонецМесяца(Дата)) Тогда
			
			Если ТекСтрокаНазначения.Действует Тогда
				ДатаОкончанияПериода = ТекСтрокаНазначения.Период;
				
			ИначеЕсли ТекСтрокаНазначения.Период = КонецМесяца(Дата) Тогда
				ДатаОкончанияПериода = ТекСтрокаНазначения.Период + ДлинаСуток;
				
			КонецЕсли;
			
			МассивСтрокДляУдаления = Новый Массив;
			
			врТаблицаПериодов.Очистить();
			
			Для Каждого ТекСтрокаПериода Из ТаблицаПериодов Цикл
				
				//    [    ]
				// (            )
				Если ТекСтрокаПериода.ДатаНачала >= ДатаНачалаПериода
				   И ТекСтрокаПериода.ДатаОкончания < ДатаОкончанияПериода Тогда
					МассивСтрокДляУдаления.Добавить(ТекСтрокаПериода);
				
				// [            ]
				//     (    )
				ИначеЕсли ТекСтрокаПериода.ДатаНачала <= ДатаНачалаПериода
				   И ТекСтрокаПериода.ДатаОкончания >= ДатаОкончанияПериода Тогда
					
					НоваяСтрока = врТаблицаПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПериода);
					НоваяСтрока.ДатаНачала = ТекСтрокаНазначения.Период;
					
					// Если дата начала начислния и дата начала исключения совпадают,
					// то нужно удалить первый подпериод, наче просто разобъем
					// период на две части.
					Если ТекСтрокаПериода.ДатаНачала < ДатаНачалаПериода Тогда
						ТекСтрокаПериода.ДатаОкончания = ДатаНачалаПериода - ДлинаСуток;
					Иначе
						МассивСтрокДляУдаления.Добавить(ТекСтрокаПериода);
					КонецЕсли;
				
				//    [    ]
				//      (         )
				ИначеЕсли ТекСтрокаПериода.ДатаНачала <= ДатаНачалаПериода
				   И ТекСтрокаПериода.ДатаОкончания >= ДатаНачалаПериода Тогда
					
					ТекСтрокаПериода.ДатаОкончания = ДатаНачалаПериода - ДлинаСуток;
				
				//        [    ]
				// (         )
				ИначеЕсли ТекСтрокаПериода.ДатаНачала <= ДатаОкончанияПериода
				   И ТекСтрокаПериода.ДатаОкончания >= ДатаОкончанияПериода Тогда
					
					ТекСтрокаПериода.ДатаНачала = ДатаОкончанияПериода;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ТекСтрокаВрТаблицыПериодов Из врТаблицаПериодов Цикл
				НоваяСтрока = ТаблицаПериодов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВрТаблицыПериодов);
			КонецЦикла;
			
			Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
				ТаблицаПериодов.Удалить(ТекСтрока);
			КонецЦикла;
			
			ДатаНачалаПериода    = Неопределено;
			ДатаОкончанияПериода = Неопределено;
			
		КонецЕсли;
		
		Если Не ТекСтрокаНазначения.Действует Тогда
			ДатаНачалаПериода = ТекСтрокаНазначения.Период;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("ДатаНачала");
	
КонецПроцедуры

// Процедура проверяет необходимость расчета по настройкам при отсутствии показаний,
// когда счетчик утерян, сломан или снят на поверку. При этом проверяются следующие условия:
// а) причина последнего отключения счетчика есть в следующем списке:
//    - выход из строя,
//    - утеря,
//    - поверка;
// б)с даты последнего отключения счетчика до текущего периода прошло месяцев не более количества,
//   заданного в настройках услуги для жилых и нежилых помещений.
//
Функция ПроверитьНеобходимостьРасчетаПриОтсутствииПоказанийПрибораУчетаКогдаПУУтерянСломанИлиНаПоверке(ДатаНачала,
																									   ДатаОкончания,
																									   ЛицевойСчет,
																									   Помещение,
																									   Услуга,
																									   КоличествоМесяцевДляЖилыхПомещений,
																									   КоличествоМесяцевДляНежилыхПомещений)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("НуженРасчетПриОтсутствииПоказаний", Ложь);
	СтруктураРезультата.Вставить("НужноРазбитьПериод",                Ложь);
	СтруктураРезультата.Вставить("ГраницаРазбиенияПериода",           Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения КАК ДатаОтключенияПУ,
	|	КВП_ЗакрепленныеСчетчики.ПричинаОтключения
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Период,
	|			(Объект = &ЛицевойСчет
	|				ИЛИ Объект = &Помещение)
	|				И Счетчик.ВидУслуги В (&Услуга)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения <= &Период) КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчики.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения УБЫВ";
	
	Запрос.УстановитьПараметр("Период",      ДатаНачала);
	Запрос.УстановитьПараметр("Услуга",      Услуга);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		КоличествоМесяцевОтключенияДопустимо = 0;
		
		Если Помещение.ВидПомещения.ЭтоЖилойФонд Тогда
			// Это жилое помещение
			КоличествоМесяцевОтключенияДопустимо = КоличествоМесяцевДляЖилыхПомещений;
		Иначе
			// Это нежилое помещение
			КоличествоМесяцевОтключенияДопустимо = КоличествоМесяцевДляНежилыхПомещений;
		КонецЕсли;
		
		Лет = 0;
		Месяцев = 0;
		УПЖКХ_ТиповыеМетодыКлиентСервер.РазобратьРазностьДат(ДатаНачала, Выборка.ДатаОтключенияПУ, Лет, Месяцев);
		
		КоличествоМесяцевОтключения = Лет * 12 + Месяцев;
		
		// Если с момента отключения ПУ прошло менее заданного количества месяцев,
		// а причиной отключения явился выход из строя, утрата или поверка, то расчет
		// нужно провести по настройке отсутствия показаний.
		Если Не мПричиныВременногоОтключенияПУ.Найти(Выборка.ПричинаОтключения) = Неопределено
			И КоличествоМесяцевОтключения < КоличествоМесяцевОтключенияДопустимо Тогда
			
			СтруктураРезультата.НуженРасчетПриОтсутствииПоказаний = Истина;
			
		КонецЕсли;
		
		// Если в текущем периоде настает срок окончания допустимого количества месяцев отключения,
		// то необходимо разбить текущий период на 2 части.
		ПредполагаемаяДатаВключенияПУ = ДобавитьМесяц(Выборка.ДатаОтключенияПУ, КоличествоМесяцевОтключенияДопустимо);
		Если ДатаНачала < ПредполагаемаяДатаВключенияПУ И ПредполагаемаяДатаВключенияПУ < ДатаОкончания Тогда
			СтруктураРезультата.НужноРазбитьПериод = Истина;
			СтруктураРезультата.ГраницаРазбиенияПериода = ПредполагаемаяДатаВключенияПУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Процедура добавляет периоды, в которые произошло изменение параметров для определения нормы.
// Например, площадь помещения, если норма задается на единицу площади.
//
Процедура ДобавитьПериодыИзмененияПараметровРасчетаНормыЗаПериод(ТаблицаПериодов, ТекСтрокаПериода, ЛицевойСчет,
																				Услуга, ДатаНачала, ДатаОкончания)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                 Организация);
	СтруктураПараметров.Вставить("ЛицевойСчет",                 ЛицевойСчет);
	СтруктураПараметров.Вставить("Услуга",                      Услуга);
	СтруктураПараметров.Вставить("ДатаДокумента",               Дата);
	СтруктураПараметров.Вставить("ДатаНачала",                  ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",               ДатаОкончания);
	СтруктураПараметров.Вставить("НастройкиУчетнойПолитикиТСЖ", мНастройкиУчетнойПолитикиТСЖ);
	
	ТаблицаИзмененияПараметров = ПолучитьТаблицуПериодовИзмененияПараметровРасчетаНормы(СтруктураПараметров);
	
	ДатаОкончанияПериода = ТекСтрокаПериода.ДатаОкончания;
	НоваяСтрока = Неопределено;
	
	Для Каждого СтрокаИзменения ИЗ ТаблицаИзмененияПараметров Цикл
		
		ДатаТекущегоИзменения = НачалоДня(СтрокаИзменения.Период);
		
		Если ДатаТекущегоИзменения = ДатаОкончания 
		 ИЛИ ДатаТекущегоИзменения < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		
		Если НоваяСтрока = Неопределено Тогда
			ТекСтрокаПериода.ДатаОкончания = ДатаТекущегоИзменения;
		Иначе
			НоваяСтрока.ДатаОкончания = ДатаТекущегоИзменения;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПериодов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПериода, , "ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
		НоваяСтрока.ДатаНачала = КонецДня(СтрокаИзменения.Период) + 1;
		
	КонецЦикла;
	
	Если Не НоваяСтрока = Неопределено Тогда
		НоваяСтрока.ДатаОкончания = ДатаОкончанияПериода;
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет за какое количество месяцев брать среднее значение.
//
Функция ОпределитьРасходПоСреднему(СтруктураОтбора, ЕстьПУ)
	
	Если НЕ ЕстьПУ Тогда
		// если нет действующего ПУ
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезДействующихПУ.НайтиСтроки(СтруктураОтбора);
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезДействующихПУ.Скопировать(СтрокиРасходаПоСреднему);
		
	Иначе
		// если нет показаний
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезПоказаний.НайтиСтроки(СтруктураОтбора);
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезПоказаний.Скопировать(СтрокиРасходаПоСреднему);
	КонецЕсли;
	
	Возврат СтрокиРасходаПоСреднему;
	
КонецФункции //ОпределитьРасходПоСреднему

// Процедура добавляет строки в таблицу значений по данным массива.
//
// Параметры:
//  ВыборкаРасходаПоСреднему - массив 
//  СтрокиРасходаПоСреднему  - таблицазначений.
//
Процедура ДополнитьТаблицу(ВыборкаРасходаПоСреднему, СтрокиРасходаПоСреднему)
	
	Для Каждого Стр Из ВыборкаРасходаПоСреднему Цикл 
		НоваяСтрока = СтрокиРасходаПоСреднему.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	
КонецПроцедуры //ДополнитьТаблицу

// Процедура добавляет строки в таблицу услуг по таблице периодов.
//
Процедура ДобавитьСтрокиПоНачислениюУслугПоПУ(ТЗУслугиПоПоказаниямПУ, ТаблицаПериодов, ТаблицаОбщихПериодов,
												СтруктураПараметров, СтрокаЛС, ЗапросПоКолвуПУ, ТаблицаДолей)
	
	КолДнейВМесяце = СтруктураПараметров.ВсегоДнейНачислений;
	
	Для Каждого ТекСтрокаОбщихПериодов Из ТаблицаОбщихПериодов Цикл
		
		/////////////////////////////////////////////////////////////////
		// Добавим строки для возможности распределения расхода ОДН по л/с, 
		// по которым установлено не производить индивидуальное начисление.
		
		ДобавитьСтрокиБезНачисления(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов, ТЗУслугиПоПоказаниямПУ, Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление());
		
		/////////////////////////////////////////////////////////////////
		// Начислим по среднему
		
		ДобавитьСтрокиСНачислениемПоСреднему(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
		                                     ЗапросПоКолвуПУ, ТаблицаДолей, КолДнейВМесяце, , ТЗУслугиПоПоказаниямПУ, , , , СтруктураПараметров);
		
		/////////////////////////////////////////////////////////////////
		// Начислим по норме
		
		ДобавитьСтрокиСНачислениемПоНорме(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
		                                  КолДнейВМесяце, ТЗУслугиПоПоказаниямПУ, СтруктураПараметров);
		
		/////////////////////////////////////////////////////////////////
		// Начислим по показаниям
		
		ДобавитьСтрокиСНачислениемПоПоказаниям(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов, ТЗУслугиПоПоказаниямПУ, СтруктураПараметров);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиПоНачислениюУслугПоПУ

// Процедура добавляет строки в таблицу услуг по составным услугам.
//
Процедура ДобавитьСтрокиПоНачислениюУслугПоСоставнымУслугам(ТЗУслугиПоПоказаниямПУ, ТаблицаПериодов,
															ТаблицаОбщихПериодов, СтруктураПараметров, СтрокаЛС, ЗапросПоКолвуПУ, ТаблицаДолей)
	
	// Алгоритм работает следующим образом:
	// 1. Получаем расход по всем приборам учета.
	// 2. Если есть периоды для начисления по среднему значению, то получаем расход по среднему значению.
	// 3. Суммируем расход по пп.1 и 2 по видам тарифа.
	// 4. Распределяем по составным услугам с учетом ограничения.
	// 5. Выполняем обратное разделение начислений по составным услугам по типу расчета и состоянию ПУ:
	//    сначала выделяется начисление по типу расчета 0 - по показаниям ИПУ,
	//    затем - по типу расчета 2 - по среднему значению.
	// 6. Если есть периоды для начисления по норме, то получаем расход по норме по общему тарифу.
	// 7. Дораспределяем расход п.6 по составным услугам: если есть ограничение и значение ограничения не превышено,
	//    то кидаем часть расхода на эту услугу, все что останется - на услугу сверх норматива (без ограничения).
	// 8. пп.1-7 выполняются в разрезе подпериодов начисления услуги по л/с. 
	//    Размер ограничения в п.4 вычисляется также с учетом кол-ва дней в подпериоде.
	
	КолДнейВМесяце = СтруктураПараметров.ВсегоДнейНачислений;
	СтруктураОтбора = Новый Структура;
	
	МассивТарифов = Новый Массив;
	МассивТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Дневной);
	МассивТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Ночной);
	МассивТарифов.Добавить(Перечисления.КВП_ВидыТарифов.Пиковый);
	
	ПредоставлятьОбъемПоНормативуЗаМесяцыСторноДляТекущейСоставнойУслуги = СтрокаЛС.Услуга.ПредоставлятьОбъемПоНормативуЗаМесяцыСторноДляСоставнойУслуги;
	
	Для Каждого ТекСтрокаОбщихПериодов Из ТаблицаОбщихПериодов Цикл
		
		// Добавим строки для возможности распределения расхода ОДН по л/с,
		// по которым установлено не производить индивидуальное начисление.
		
		ДобавитьСтрокиБезНачисления(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов, ТЗУслугиПоПоказаниямПУ, Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление());
		
		//////////////////////////////////////////////
		// Начислим по показаниям
		
		// 1. Получаем расход по всем приборам учета.
		
		// По ИПУ
		ДневноеПоказаниеОстаток = 0;
		НочноеПоказаниеОстаток  = 0;
		ПиковоеПоказаниеОстаток = 0;
		
		СтруктураОтбора.Вставить("ДатаНачала", ТекСтрокаОбщихПериодов.ДатаНачала);
		СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
		СтрокиПоПоказаниям = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекСтрокаПериода Из СтрокиПоПоказаниям Цикл
			
			Если НЕ ТекСтрокаОбщихПериодов.ИмеютсяПоказания > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДневноеПоказаниеОстаток = ДневноеПоказаниеОстаток + ТекСтрокаПериода.ДневноеПоказаниеОстаток;
			НочноеПоказаниеОстаток  = НочноеПоказаниеОстаток  + ТекСтрокаПериода.НочноеПоказаниеОстаток;
			ПиковоеПоказаниеОстаток = ПиковоеПоказаниеОстаток + ТекСтрокаПериода.ПиковоеПоказаниеОстаток;
			
		КонецЦикла;
		
		// Добавим строки для распределения расхода ОДН по л/с, по которым текущие показаний равны предыдущим
		// (т.е. показания введены, а индивидуальный расход = 0).
		Если ТекСтрокаОбщихПериодов.ИмеютсяПоказания > 0
		   И ДневноеПоказаниеОстаток + НочноеПоказаниеОстаток + ПиковоеПоказаниеОстаток = 0 Тогда
			ДобавитьСтрокиБезНачисления(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов, ТЗУслугиПоПоказаниямПУ, Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ДневноеПоказаниеОстаток", ДневноеПоказаниеОстаток);
		СтруктураПараметров.Вставить("НочноеПоказаниеОстаток",  НочноеПоказаниеОстаток);
		СтруктураПараметров.Вставить("ПиковоеПоказаниеОстаток", ПиковоеПоказаниеОстаток);
		
		//////////////////////////////////////////////
		// Начислим по среднему
		
		// 2. Если есть периоды для начисления по среднему значению, то получаем расход по среднему значению.
		
		// По среднему значению
		ДневноеПоказаниеСреднее = 0;
		НочноеПоказаниеСреднее  = 0;
		ПиковоеПоказаниеСреднее = 0;

		ДобавитьСтрокиСНачислениемПоСреднему(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
		                                     ЗапросПоКолвуПУ, ТаблицаДолей, КолДнейВМесяце,
		                                     Истина,
		                                     Неопределено,
		                                     ДневноеПоказаниеСреднее,
		                                     НочноеПоказаниеСреднее,
		                                     ПиковоеПоказаниеСреднее);
		
		СтруктураПараметров.Вставить("ДневноеПоказаниеСреднее", ДневноеПоказаниеСреднее);
		СтруктураПараметров.Вставить("НочноеПоказаниеСреднее",  НочноеПоказаниеСреднее);
		СтруктураПараметров.Вставить("ПиковоеПоказаниеСреднее", ПиковоеПоказаниеСреднее);
		
		// 3. Суммируем расход по п.1 и 2 по видам тарифа.
		
		Параметры = Новый Структура();
		Параметры.Вставить("Период",                  ТекСтрокаОбщихПериодов.ДатаОкончания);
		Параметры.Вставить("Организация",             Организация);
		Параметры.Вставить("Объект",                  СтрокаЛС.ЛицевойСчет);
		Параметры.Вставить("СоставнаяУслуга",         СтрокаЛС.Услуга);
		
		ВсегоДнейНачислений = 0;
		КопияТаблицаПериодов = ТаблицаПериодов.Скопировать();
		КопияТаблицаПериодов.Свернуть("Счетчик, ТипРасчета", "ДнейНачислено");
		Для Каждого ТекСтрокаПериода ИЗ КопияТаблицаПериодов Цикл
			Если ТекСтрокаПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу() 
			 ИЛИ ТекСтрокаПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление() Тогда
				Продолжить;
			КонецЕсли;
			Если ВсегоДнейНачислений < ТекСтрокаПериода.ДнейНачислено Тогда
				ВсегоДнейНачислений = ТекСтрокаПериода.ДнейНачислено;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоДнейНачислений = (?(ВсегоДнейНачислений = 0,
									УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Дата), ВсегоДнейНачислений));
		Параметры.Вставить("Коэффициент", 
						   ТекСтрокаОбщихПериодов.ДнейНачислено / ТекСтрокаОбщихПериодов.ВсегоДнейНачислений);
		
		// Определим количество тарифов.
		Тарифность = ?(ПиковоеПоказаниеОстаток + ПиковоеПоказаниеСреднее > 0, 3, 
						?(НочноеПоказаниеОстаток + НочноеПоказаниеСреднее > 0, 2, 1));
		
		Параметры.Вставить("ТарифностьСчетчика",      Тарифность);
		Параметры.Вставить("ДневноеПоказаниеОстаток", ДневноеПоказаниеОстаток + ДневноеПоказаниеСреднее);
		Параметры.Вставить("НочноеПоказаниеОстаток",  НочноеПоказаниеОстаток  + НочноеПоказаниеСреднее);
		Параметры.Вставить("ПиковоеПоказаниеОстаток", ПиковоеПоказаниеОстаток + ПиковоеПоказаниеСреднее);
		
		// В случае, если начисление производится по показаниям, подготовим таблицу начислений сторно.
		// Далее эту информацию используем для определения объема услуги по нормативу:
		// За каждый месяц начисления сторно норматив должен быть учтен. Например, норматив равен 5 куб.м.,
		// ввели показания 20, сторно за 2 месяца, тогда начисление по нормативу составит
		// 5 куб.м. (за текущий месяц) + 10 куб.м. (за 2 месяца сторнирования) = 15 куб.м. в пределах нормы.
		// Начисление сверх нормы составит 20 - 15 = 5 куб.м.
		
		Если ПредоставлятьОбъемПоНормативуЗаМесяцыСторноДляТекущейСоставнойУслуги Тогда
			
			врТЗДляРасчетаСторноМесяцевПоНормативу = ТЗУслугиПоПоказаниямПУ.СкопироватьКолонки();
			
			НоваяСтрокаТЗ = врТЗДляРасчетаСторноМесяцевПоНормативу.Добавить();
			НоваяСтрокаТЗ.ЛицевойСчет = СтрокаЛС.ЛицевойСчет;
			НоваяСтрокаТЗ.Услуга      = СтрокаЛС.Услуга;
			Если СтрокиПоПоказаниям.Количество() > 0 Тогда
				НоваяСтрокаТЗ.СостояниеПУ = СтрокиПоПоказаниям[0].СостояниеПУ;
			КонецЕсли;
			
			ДополнитьТаблицуУслугПоПоказаниямСуммамиСторно(врТЗДляРасчетаСторноМесяцевПоНормативу);
			
			СтрокиСторно = врТЗДляРасчетаСторноМесяцевПоНормативу.НайтиСтроки(Новый Структура("Сторно", Истина));
			врСвернутаяТаблицаПериодовРасчетаСторно = врТЗДляРасчетаСторноМесяцевПоНормативу.Скопировать(СтрокиСторно, "НачалоПериода");
			врСвернутаяТаблицаПериодовРасчетаСторно.Свернуть("НачалоПериода");
			КоличествоМесяцевСторно = врСвернутаяТаблицаПериодовРасчетаСторно.Количество();
			
			// Если производится сторнирование начислений предыдущих периодов,
			// тогда коэффициент для определения норматива умножаем на количество месяцев,
			// за которые можем предоставить норматив, т.е. текущий месяц (1) + количество
			// месяцев сторнирования.
			Если КоличествоМесяцевСторно > 0 Тогда
				Параметры["Коэффициент"] = Параметры["Коэффициент"] * (КоличествоМесяцевСторно + 1);
			КонецЕсли;
			
		КонецЕсли;
		
		// 4. Распределяем по составным услугам с учетом ограничения на данном подпериоде.
		//    Распределяем по составным услугам общее количество и по показаниям и по среднему значению.
		
		ТаблицаПоСоставнымУслугам = КВП_ПолучитьТаблицуНачисленияСоставныхУслугПоПриборамУчета(Параметры);
		ВремТабПоСоставнымУслугам = ТаблицаПоСоставнымУслугам.Скопировать();
		
		СтруктураПараметров.Вставить("ВсегоДнейНачислений",     ВсегоДнейНачислений);
		СтруктураПараметров.Вставить("Услуга",                  СтрокаЛС.Услуга);
		
		// Теперь с помощью временной таблицы составных услуг заполним таблицу услуг.
		Для Каждого ТекСтрокаВрТаблицы ИЗ ВремТабПоСоставнымУслугам Цикл 
			
			// 5. Т.к. возможны ситуации, когда ПУ был установлен или отключен среди месяца и часть начислений
			//    должна быть выполнена по показаниям, а часть - по среднему значению, то
			//    необходимо обратно разделить начисление по составной услуге по типу расчета:
			//    сначала выделяется начисление по типу расчета 0 - по показаниям ИПУ,
			//    затем - по типу расчета 2 - по среднему значению.
				
				Если ТекСтрокаВрТаблицы.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
					ПоказаниеОстаток = "ДневноеПоказаниеОстаток";
					ПоказаниеСреднее = "ДневноеПоказаниеСреднее";
				ИначеЕсли ТекСтрокаВрТаблицы.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
					ПоказаниеОстаток = "НочноеПоказаниеОстаток";
					ПоказаниеСреднее = "НочноеПоказаниеСреднее";
				Иначе // пиковый
					ПоказаниеОстаток = "ПиковоеПоказаниеОстаток";
					ПоказаниеСреднее = "ПиковоеПоказаниеСреднее";
				КонецЕсли;
			
			Если СтруктураПараметров[ПоказаниеОстаток] > 0 Тогда
				
				СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
				СтрокиПоПоказаниям = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого ТекСтрокаПериода Из СтрокиПоПоказаниям Цикл
					
					Если ТекСтрокаВрТаблицы.Количество > 0 
					   И СтруктураПараметров[ПоказаниеОстаток] > 0 Тогда
						
						СтруктураПараметров.Вставить("НачалоПериода",       ТекСтрокаПериода.ДатаНачала);
						СтруктураПараметров.Вставить("КонецПериода",        ТекСтрокаПериода.ДатаОкончания);
						СтруктураПараметров.Вставить("СостояниеПУ",         ТекСтрокаПериода.СостояниеПУ);
						СтруктураПараметров.Вставить("ДнейНачислено",       ТекСтрокаПериода.ДнейНачислено);
						СтруктураПараметров.Вставить("Тарифность",          ТекСтрокаПериода.ТарифностьСчетчика);
						СтруктураПараметров.Вставить("ФормулаРасчета",      ТекСтрокаПериода.ФормулаРасчета);
						
						РаспределитьНачислениеПоТипуРасчета(ТекСтрокаВрТаблицы, СтруктураПараметров, ПоказаниеОстаток, 
						                                    ТЗУслугиПоПоказаниямПУ, СтрокаЛС.ЛицевойСчет, Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
					КонецЕсли;
					
				КонецЦикла; // Цикл по периодам
				
			КонецЕсли;
			
			Если ТекСтрокаВрТаблицы.Количество > 0 И СтруктураПараметров[ПоказаниеСреднее] > 0 Тогда
				
				СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
				СтрокиПоПоказаниям = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого ТекСтрокаПериода Из СтрокиПоПоказаниям Цикл
					
					Если ТекСтрокаВрТаблицы.Количество > 0 
					   И СтруктураПараметров[ПоказаниеСреднее] > 0 
					   И ТекСтрокаПериода.ДневноеПоказаниеОстаток
					     + ТекСтрокаПериода.НочноеПоказаниеОстаток 
					     + ТекСтрокаПериода.ПиковоеПоказаниеОстаток > 0 Тогда
					
						СтруктураПараметров.Вставить("НачалоПериода",       ТекСтрокаПериода.ДатаНачала);
						СтруктураПараметров.Вставить("КонецПериода",        ТекСтрокаПериода.ДатаОкончания);
						СтруктураПараметров.Вставить("СостояниеПУ",         ТекСтрокаПериода.СостояниеПУ);
						СтруктураПараметров.Вставить("ДнейНачислено",       ТекСтрокаПериода.ДнейНачислено);
						СтруктураПараметров.Вставить("Тарифность",          ТекСтрокаПериода.ТарифностьСчетчика);
						СтруктураПараметров.Вставить("ФормулаРасчета",      ТекСтрокаПериода.ФормулаРасчета);
						
						РаспределитьНачислениеПоТипуРасчета(ТекСтрокаВрТаблицы, СтруктураПараметров, ПоказаниеСреднее, 
						                                    ТЗУслугиПоПоказаниямПУ, СтрокаЛС.ЛицевойСчет, Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
					КонецЕсли;
					
				КонецЦикла; // Цикл по периодам
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по составным услугам
		
		Если НЕ ВремТабПоСоставнымУслугам.Количество() = 0 Тогда
			// Добавим строки с пустыми показаниями, с тарифами, соответствующим тарифности ИПУ.
			ДобавитьСтрокиСНедостающимиТарифамиДоТарифностиИПУ(ТаблицаПоСоставнымУслугам, ТЗУслугиПоПоказаниямПУ,
			                                                  ТаблицаПериодов, ТекСтрокаОбщихПериодов, СтрокаЛС, МассивТарифов);
			
		КонецЕсли;
		
		// Данное действие необходимо для ситуаций, когда объем к распределению больше фактического объема потребления.
		РаспределитьОставшиесяПоказания(ВремТабПоСоставнымУслугам, ТаблицаПериодов, ТекСтрокаОбщихПериодов,
		                                СтруктураПараметров, ВсегоДнейНачислений, ТЗУслугиПоПоказаниямПУ, СтрокаЛС);
		
		//////////////////////////////////////////////
		// Начислим по норме
		
		// 6. Если есть периоды для начисления по норме, то получаем расход по норме по общему тарифу.
		
		ДобавитьСтрокиСНачислениемПоНормеСоставнойУслуги(ТекСтрокаОбщихПериодов, ТаблицаПериодов, СтрокаЛС,
		                                                 КолДнейВМесяце, ТаблицаПоСоставнымУслугам,
		                                                 ТЗУслугиПоПоказаниямПУ, Параметры);
		
	КонецЦикла; // Цикл по составным услугам
	
КонецПроцедуры // ДобавитьСтрокиПоНачислениюУслугПоСоставнымУслугам()

// Процедура добавляет строку в таблицу услуг по показаниям ПУ.
//
Процедура ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ, ДатаНачала, ДатаОкончания,
									Услуга, СоставнаяУслуга = Неопределено, ЛицевойСчет, ВидТарифа, РасчетЗаТекПериод,
									ТипРасчета, ФормулаРасчета, СостояниеПУ, Тарифность, Тариф = Неопределено,
									НачислениеПоПовышающемуКоэффициенту = Ложь, СтруктураПараметров = Неопределено)
	
	Если Тариф = Неопределено Тогда
		Тариф = ПолучитьТарифПоЛицевомуСчету(ДатаОкончания,
											Организация,
											?(СоставнаяУслуга = Неопределено, Услуга, СоставнаяУслуга),
											ЛицевойСчет,
											ВидТарифа,
											СтруктураПараметров);
	КонецЕсли;
	
	НоваяСтрока = ТЗУслугиПоПоказаниямПУ.Добавить();
	НоваяСтрока.НачалоПериода   = ДатаНачала;
	НоваяСтрока.КонецПериода    = ДатаОкончания;
	НоваяСтрока.Услуга          = Услуга;
	НоваяСтрока.СоставнаяУслуга = СоставнаяУслуга;
	НоваяСтрока.ЛицевойСчет     = ЛицевойСчет;
	НоваяСтрока.ВидТарифа       = ВидТарифа;
	
	// Здесь используем округление до трех знаков, так как предварительно тип был расширен до 6 знаков
	// с целью увеличения точности расчете.
	// Если тип колонки табличной части будет расширен до 6 знаков, то ни расширение ни округление
	// не понадобится.
	
	НоваяСтрока.ПоказаниеСчЛС   = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РасчетЗаТекПериод, мТочностьОбъемаНачислений);
	
	НоваяСтрока.Тариф           = Тариф;
	НоваяСтрока.Сумма           = Тариф * НоваяСтрока.ПоказаниеСчЛС;
	НоваяСтрока.ТипРасчета      = ТипРасчета;
	НоваяСтрока.ФормулаРасчета  = ФормулаРасчета;
	НоваяСтрока.СостояниеПУ     = СостояниеПУ;
	НоваяСтрока.Тарифность      = Тарифность;
	
	// Признак начисления по повышающему коэффициенту.
	НоваяСтрока.НачислениеПоПовышающемуКоэффициенту = НачислениеПоПовышающемуКоэффициенту;
	
	НоваяСтрока.Договор         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
									ЛицевойСчет, Организация, ДатаОкончания, "Договор");
	
КонецПроцедуры //ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ

// Процедура распределяет рассчитанное с учетом ограничений количество составной услуги по типам расчета 
// и вызывает процедуру добавления строки в таблицу услуг по показаниям ПУ.
//
Процедура РаспределитьНачислениеПоТипуРасчета(ТекСтрокаВрТаблицы, СтруктураПараметров, НаименованиеПараметра, 
                                              ТЗУслугиПоПоказаниямПУ, ЛицевойСчет, ТипРасчета)
	
	ПоказаниеОстаток = СтруктураПараметров[НаименованиеПараметра];
	ТекКоличество    = Мин(ТекСтрокаВрТаблицы.Количество, ПоказаниеОстаток);
	ПоказаниеОстаток = ПоказаниеОстаток - ТекКоличество;
	ТекСтрокаВрТаблицы.Количество = ТекСтрокаВрТаблицы.Количество - ТекКоличество;
	
	Если УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекКоличество, мТочностьОбъемаНачислений) > 0 Тогда
		
		ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
													СтруктураПараметров.НачалоПериода,
													СтруктураПараметров.КонецПериода,
													СтруктураПараметров.Услуга,
													ТекСтрокаВрТаблицы.СоставнаяУслуга,
													ЛицевойСчет,
													ТекСтрокаВрТаблицы.ВидТарифа,
													ТекКоличество,
													ТипРасчета,
													СтруктураПараметров.ФормулаРасчета,
													СтруктураПараметров.СостояниеПУ,
													СтруктураПараметров.Тарифность,
													ТекСтрокаВрТаблицы.Тариф);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить(НаименованиеПараметра, ПоказаниеОстаток);
	
КонецПроцедуры //РаспределитьНачислениеПоТипуРасчета

// Функция проверки длительности начисления по среднему значению.
//
Функция ПроверитьДлительностьНачисленияПоСреднемуЗначению(Период, Счетчик, Услуга)
	
	ПереходРасчетаНаНорматив = Истина;
	
	// Получим таблицу дат установки и последних показаний прибора для подпериода
	// и рассчитаем длительность расчета по среднему с учетом даты расчета и даты 
	// последнего предоставления показаний прибора учета (или даты установки прибора 
	// учета в случае, если показания ни разу не передавались).
	//
	// При этом берется минимальная длительность, чтобы получить длительность
	// от самого последнего изменения данных: ввода показаний или установки счетчика.
	// Например, если ввод показаний был позднее установки, то длительность расчета
	// по среднему считаем от ввода показаний, и наоборот.
	//
	// Дата установки прибора учета берется как есть и не сдвигается на минимальное
	// количество месяцев для расчета по среднему. То есть, например, если прибор учета
	// установлен в феврале, показания по нему не передаются с момента установки, а минимальное
	// количество месяцев для расчета по среднему равно 3, то считается, что февраль - это первый
	// месяц расчета по среднему, март - второй месяц для расчета по среднему и т.д. При этом в
	// эти месяцы сам расчет будет выполнять по нормативу, так как период работы прибора учета
	// меньше минимального количества месяцев для расчета по среднему.
	//
	// Это логично с точки зрения жизни, а также не противоречит Постановлению №344. Потому что,
	// если сдвигать дату установки прибора учета, то в приведенном выше примере первым месяцем
	// для расчета по среднему будет месяц май, но так как показания по прибору учета ни разу не
	// передавались, то и начисление будет равно 0. Получается жилец будет бесплатно пользоваться
	// услугой в течение количества месяцев для расчета по среднему, что неправильно.
	
	ЗапросНачислений = Новый Запрос;
	ЗапросНачислений.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КВП_ПоказанияСчетчиковСрезПоследних.Период, МЕСЯЦ, 1), МЕСЯЦ), &ДатаРасчета, МЕСЯЦ) КАК ДлительностьРасчетаПоСреднему
	|ПОМЕСТИТЬ врДлительностьРасчетаПоСреднему
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&Период, Счетчик = &Счетчик) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|ГДЕ
	|	НЕ КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения, МЕСЯЦ), &ДатаРасчета, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Период,
	|			Счетчик = &Счетчик
	|				И Действует
	|				И ДатаИзменения <= &Период) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(врДлительностьРасчетаПоСреднему.ДлительностьРасчетаПоСреднему) КАК ДлительностьРасчетаПоСреднему
	|ИЗ
	|	врДлительностьРасчетаПоСреднему КАК врДлительностьРасчетаПоСреднему
	|
	|ИМЕЮЩИЕ
	|	НЕ ЕСТЬNULL(МИНИМУМ(врДлительностьРасчетаПоСреднему.ДлительностьРасчетаПоСреднему), ИСТИНА) = ИСТИНА";
	
	// ПРИМЕЧАНИЕ к тексту запроса:
	// В последнем подзапросе накладываем условие на результат функции МИНИМУМ(),
	// так как в случае, если по счетчику не было данных по показаниям и установке ПУ,
	// то запрос возвращает одну строку со значением NULL.
	// Использование ЕСТЬNULL() в полях выборки не решает проблему, так как в первом
	// подзапросе нет ни одной записи (значит не будет ни одной строки в результате),
	// а во втором подзапросе агрегатная функция игнорирует ЕСТЬNULL().
	
	ЗапросНачислений.УстановитьПараметр("Счетчик",     Счетчик);            // индивидуальный прибор
	ЗапросНачислений.УстановитьПараметр("Период",      Период);             // конец подпериода для расчета по прибору
	ЗапросНачислений.УстановитьПараметр("ДатаРасчета", НачалоМесяца(Дата)); // дата документа
	
	ВыборкаНачисленийПоСреднему = ЗапросНачислений.Выполнить().Выбрать();
	Если ВыборкаНачисленийПоСреднему.Следующий() Тогда
		
		// Если длительность расчета по среднему превышает длительность, указаную в настройках
		// услуги, то дальнейший расчет выполняется по установленному нормативу потребления.
		Если НЕ ВыборкаНачисленийПоСреднему.ДлительностьРасчетаПоСреднему >= Услуга.ДлительностьРасчетаПоСреднемуБезПоказаний Тогда
			ПереходРасчетаНаНорматив = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПереходРасчетаНаНорматив;
	
КонецФункции // ПроверитьДлительностьНачисленияПоСреднемуЗначению()

// Процедура добавляет в табличную часть строки с типом расчета "По среднему".
//
// Параметры:
//  ЭтоСоставнаяУслуга - признак расчета составной услуги;
//  ТЗУслугиПоПоказаниямПУ - таблица значений - содержит услуги по показаниям ПУ - передается для несоставной услуги;
//  ДневноеПоказаниеСреднее - среднее дневное показание - передается только при расчете составной услуги;
//  НочноеПоказаниеСреднее - среднее ночное показание - передается только при расчете составной услуги;
//  ПиковоеПоказаниеСреднее - среднее пиковое показание - передается только при расчете составной услуги.
//
Процедура ДобавитьСтрокиСНачислениемПоСреднему(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
	                                           ЗапросПоКолвуПУ, ТаблицаДолей, КолДнейВМесяце, ЭтоСоставнаяУслуга = Ложь,
	                                           ТЗУслугиПоПоказаниямПУ  = Неопределено,
	                                           ДневноеПоказаниеСреднее = Неопределено,
	                                           НочноеПоказаниеСреднее  = Неопределено,
	                                           ПиковоеПоказаниеСреднее = Неопределено,
	                                           СтруктураПараметров = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
	СтруктураОтбора.Вставить("ДатаНачала", ТекСтрокаОбщихПериодов.ДатаНачала);
	СтрокиПоСреднему = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	// Попробуем посчитать среднее начисление, если оно равно 0,
	// то расчет будем производить по норме.
	Отбор = Новый Структура;
	
	// Массив строк, по которым средний расход по ПУ найден.
	МассивСтрокСРасходомПУ = Новый Массив;
	
	// Массив строк, по которым не найден средний расход по ПУ.
	МассивСтрокБезРасходаПУ = Новый Массив;
	
	// Таблица показаний с расходом по ПУ. Используется для вычитания
	// данных расходов из среднего расхода без ПУ.
	ТаблицаПоказанийСРасходомПоПУ = Новый ТаблицаЗначений;
	ТаблицаПоказанийСРасходомПоПУ.Колонки.Добавить("ВидПоказания");
	ТаблицаПоказанийСРасходомПоПУ.Колонки.Добавить("РасходПоПУ");
	
	// При расчете по среднему значению возможны ситуации:
	// 1. Счетчик отключен в период расчета или по ПУ не принесли показание, т.е.
	//    в этом случае прибор учета известен.
	// 2. Счетчик не установлен или отключен в предшествующие периоду расчета месяцы,
	//    т.е. в этом случае прибор учета не известен.
	
	// Подробнее:
	//
	// 1. В процедуре производится расчет на конкретный период, например с 01.01 по 09.01.
	// На данный период сначала получаются средний расход прибора учета - расход самого
	// прибора учета. При этом в массив "МассивСтрокБезРасходаПУ" записываются приборы,
	// по которым не найден средний расход по ПУ, а в таблицу "ТаблицаПоказанийСРасходомПоПУ"
	// заносится расход по ПУ.
	//
	// 2. Далее получается средний расход для лицевого счета и помещения в целом.
	//
	// 3. Затем для всех ПУ, у которых не найден средний расход по ПУ определяется средний расход
	// путем вычитания из среднего расхода для лицевого счета и помещения расхода по ПУ.
	// При этом полученная разность распределяется пропорционально длине текущего периода
	// и делится на количество приборов учета, по которым не найден расход по ПУ.
	
	// Для ситуации 1 будем искать средний расход по ПУ.
	
	// 1.
	
	Для Каждого ТекСтрока Из СтрокиПоСреднему Цикл
		
		// Если при отсутствии приборов для услуги установлено начислять по норме /среднему значению только 
		// когда отключены все ПУ сразу, но в текущем периоде отключены не все ПУ или же
		// если при отстутствии показаний для услуги установлено начислять по норме /среднему значению только 
		// когда не введены показания по всем действующим ПУ сразу, но в текущем периоде есть показания хотя 
		// бы по одному из них, то начисление не производим.
		Если ПроверитьНастройкуРасчетаПоСреднему_Норме(ТекСтрока, СтрокаЛС, ТекСтрокаОбщихПериодов) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если установлено начислять по среднему значению при отсутствии показаний 
		// и начисление по среднему производить "в течение указанного периода",
		// но длительность отсутствия показаний превышает заданный период для расчета 
		// по среднему, то расчет производится по норме.
		Если ТекСтрока.ЕстьСчетчик И ТекСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний
		   И СтрокаЛС.Услуга.НастройкаНачисленияПоСреднему
		   И ПроверитьДлительностьНачисленияПоСреднемуЗначению(ТекСтрока.ДатаОкончания, ТекСтрока.Счетчик, СтрокаЛС.Услуга) Тогда
			ТекСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
			Продолжить;
		КонецЕсли;
		
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезДействующихПУ.Скопировать();
		СтрокиРасходаПоСреднему.Очистить();
		
		СчетчикНаЛицевойСчет = Ложь;
		
		МинимальныйПериодРасчетаПоСреднему = ?(ТекСтрока.ЕстьСчетчик, 
		                                       СтрокаЛС.МинимальныйПериодРасчетаПоСреднемуБезПоказаний, 
		                                       СтрокаЛС.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ);
		
		// а) найдем средний расход по ПУ, установленному на л/с
		Отбор.Вставить("Объект",  СтрокаЛС.ЛицевойСчет);
		Отбор.Вставить("Счетчик", ТекСтрока.Счетчик);
		Отбор.Вставить("Услуга",  СтрокаЛС.Услуга);
		
		ВыборкаРасходаПоСреднему = ОпределитьРасходПоСреднему(Отбор, ТекСтрока.ЕстьСчетчик);
		Если ВыборкаРасходаПоСреднему.Количество() > 0 Тогда
			СчетчикНаЛицевойСчет = Истина;
		КонецЕсли;
		ДополнитьТаблицу(ВыборкаРасходаПоСреднему, СтрокиРасходаПоСреднему);
		
		// б) найдем средний расход по ПУ, установленному на помещение
		Отбор.Вставить("Объект",  СтрокаЛС.Помещение);
		
		ВыборкаРасходаПоСреднему = ОпределитьРасходПоСреднему(Отбор, ТекСтрока.ЕстьСчетчик);
		ДополнитьТаблицу(ВыборкаРасходаПоСреднему, СтрокиРасходаПоСреднему);
		
		// Определим количество месяцев действия ПУ, свернув таблицу по колонке количества месяцев.
		СтрокиДействияПрибора = СтрокиРасходаПоСреднему.Скопировать(, "КоличествоМесяцев");
		СтрокиДействияПрибора.Свернуть("КоличествоМесяцев");
		
		// Из таблицы данных по среднему нужно удалить служебные строки, предназначенные
		// для определения количества месяцев действия ПУ, но не содержащие данных о среднем расходе.
		// Поэтому оставим в таблице только строки, не являющиеся служебными.
		СтруктураПоискаСтрок = Новый Структура("СтрокаДлительностиДействияПУ", Ложь);
		СтрокиРасходаПоСреднему = СтрокиРасходаПоСреднему.Скопировать(СтрокиРасходаПоСреднему.НайтиСтроки(СтруктураПоискаСтрок));
		
		// Свернем таблицу среднего расхода по виду показания.
		СтрокиРасходаПоСреднему.Свернуть("ВидПоказания", "РасходПоПУ");
		
		Если Не СтрокиРасходаПоСреднему.Количество() = 0 Тогда // начисляем по среднему значению в разрезе тарифов.
			
			// Если период работы прибора учета составил меньше минимального указанного в услуге
			// количества месяцев, то расчет производится по норме.
			// В соответствии с п.59 постановления Правительства РФ № 354 (в ред. постановления № 344).
			Если СтрокиДействияПрибора[0].КоличествоМесяцев < МинимальныйПериодРасчетаПоСреднему Тогда
				ТекСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
				Продолжить;
			КонецЕсли;
			
			Для Каждого ВыборкаРасходаПоСреднему Из СтрокиРасходаПоСреднему Цикл
				
				РасходПоПУ = ВыборкаРасходаПоСреднему.РасходПоПУ * ?(СчетчикНаЛицевойСчет, 1,
				                                ДоляЛицевогоСчета(ТаблицаДолей, СтрокаЛС.ЛицевойСчет));
				
				РасчетЗаТекПериод = ТекСтрокаОбщихПериодов.ДнейНачислено * РасходПоПУ / КолДнейВМесяце;
				
				Если Не ЭтоСоставнаяУслуга Тогда // обычная услуга
					
					ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
															  ТекСтрокаОбщихПериодов.ДатаНачала,
															  ТекСтрокаОбщихПериодов.ДатаОкончания, 
															  СтрокаЛС.Услуга,
															  Неопределено,
															  СтрокаЛС.ЛицевойСчет, 
															  ВыборкаРасходаПоСреднему.ВидПоказания, 
															  РасчетЗаТекПериод,
															  ТекСтрока.ТипРасчета,
															  ТекСтрока.ФормулаРасчета,
															  ТекСтрока.СостояниеПУ,
															  ТекСтрока.ТарифностьСчетчика,
															  ,
															  ,
															  СтруктураПараметров);
					
					НоваяСтрока = ТаблицаПоказанийСРасходомПоПУ.Добавить();
					НоваяСтрока.ВидПоказания = ВыборкаРасходаПоСреднему.ВидПоказания;
					НоваяСтрока.РасходПоПУ   = РасходПоПУ;
					
				Иначе // составная услуга
					
					Если ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Дневной Тогда
						// Дневной
						ТекСтрока.ДневноеПоказаниеОстаток = ТекСтрока.ДневноеПоказаниеОстаток + РасчетЗаТекПериод;
						ДневноеПоказаниеСреднее = ДневноеПоказаниеСреднее + РасчетЗаТекПериод;
						
						НоваяСтрока = ТаблицаПоказанийСРасходомПоПУ.Добавить();
						НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Дневной;
						НоваяСтрока.РасходПоПУ   = РасчетЗаТекПериод;
						
					ИначеЕсли ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Ночной Тогда
						// Ночной
						ТекСтрока.НочноеПоказаниеОстаток = ТекСтрока.НочноеПоказаниеОстаток + РасчетЗаТекПериод;
						НочноеПоказаниеСреднее  = НочноеПоказаниеСреднее  + РасчетЗаТекПериод;
						
						НоваяСтрока = ТаблицаПоказанийСРасходомПоПУ.Добавить();
						НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Ночной;
						НоваяСтрока.РасходПоПУ   = РасчетЗаТекПериод;
						
					ИначеЕсли ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
						// Пиковый
						ТекСтрока.ПиковоеПоказаниеОстаток = ТекСтрока.ПиковоеПоказаниеОстаток + РасчетЗаТекПериод;
						ПиковоеПоказаниеСреднее = ПиковоеПоказаниеСреднее + РасчетЗаТекПериод;
						
						НоваяСтрока = ТаблицаПоказанийСРасходомПоПУ.Добавить();
						НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Пиковый;
						НоваяСтрока.РасходПоПУ   = РасчетЗаТекПериод;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по видам тарифа
			
			МассивСтрокСРасходомПУ.Добавить(ТекСтрока);
			
		Иначе
			
			МассивСтрокБезРасходаПУ.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоказанийСРасходомПоПУ.Свернуть("ВидПоказания", "РасходПоПУ");
	
	// Если не найден расход по ПУ, то пробуем найти расход по объекту (ситуация 2).
	
	КоличествоСтрокСРасходомПУ  = МассивСтрокСРасходомПУ.Количество();
	КоличествоСтрокБезРасходаПУ = МассивСтрокБезРасходаПУ.Количество();
	
	Если КоличествоСтрокБезРасходаПУ > 0 Тогда
		
		// 2.
		
		СтрокиРасходаПоСреднему = ТаблицаРасходаПоСреднемуБезДействующихПУ.Скопировать();
		СтрокиРасходаПоСреднему.Очистить();
		
		Отбор.Удалить("Счетчик");
		
		// а) найдем средний расход по л/с
		Отбор.Вставить("Объект",  СтрокаЛС.ЛицевойСчет);
		Отбор.Вставить("Услуга",  СтрокаЛС.Услуга);
		
		// В случае, если расчет нужно производить по остутствию показаний при утере поломке или поверке ПУ,
		// в качестве данных среднего берем таблицу при отсутствии показаний, как если бы счетчик был.
		ЕстьСчетчикДляСреднего = (СтрокаЛС.ЕстьСчетчик Или ТекСтрока.РасчетПоОтсутствиюПоказанийПриУтереПоломкеПоверке);
		
		ВыборкаРасходаПоСреднему = ОпределитьРасходПоСреднему(Отбор, ЕстьСчетчикДляСреднего);
		
		Если ВыборкаРасходаПоСреднему.Количество() > 0 Тогда
			СчетчикНаЛицевойСчет = Истина;
		КонецЕсли;
		
		ДополнитьТаблицу(ВыборкаРасходаПоСреднему, СтрокиРасходаПоСреднему);
		
		// б) найдем средний расход по помещению
		Отбор.Вставить("Объект",  СтрокаЛС.Помещение);
		
		ВыборкаРасходаПоСреднему = ОпределитьРасходПоСреднему(Отбор, ЕстьСчетчикДляСреднего);
		ДополнитьТаблицу(ВыборкаРасходаПоСреднему, СтрокиРасходаПоСреднему);
		
		// Определим количество месяцев действия ПУ, свернув таблицу по колонке количества месяцев.
		СтрокиДействияПрибора = СтрокиРасходаПоСреднему.Скопировать(, "КоличествоМесяцев");
		СтрокиДействияПрибора.Свернуть("КоличествоМесяцев");
		
		// Из таблицы данных по среднему нужно удалить служебные строки, предназначенные
		// для определения количества месяцев действия ПУ, но не содержащие данных о среднем расходе.
		// Поэтому оставим в таблице только строки, не являющиеся служебными.
		СтруктураПоискаСтрок = Новый Структура("СтрокаДлительностиДействияПУ", Ложь);
		СтрокиРасходаПоСреднему = СтрокиРасходаПоСреднему.Скопировать(СтрокиРасходаПоСреднему.НайтиСтроки(СтруктураПоискаСтрок));
		
		// Свернем таблицу среднего расхода по виду показания.
		СтрокиРасходаПоСреднему.Свернуть("ВидПоказания", "РасходПоПУ");
		
		// Вычтем средний расход по ПУ.
		МассивСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрокаРасходаПоСреднему Из СтрокиРасходаПоСреднему Цикл
			
			НайденнаяСтрокаРасхода = ТаблицаПоказанийСРасходомПоПУ.Найти(ТекСтрокаРасходаПоСреднему.ВидПоказания, "ВидПоказания");
			Если Не НайденнаяСтрокаРасхода = Неопределено Тогда
				ТекСтрокаРасходаПоСреднему.РасходПоПУ = Макс(0, ТекСтрокаРасходаПоСреднему.РасходПоПУ - НайденнаяСтрокаРасхода.РасходПоПУ);
			КонецЕсли;
			
			Если ТекСтрокаРасходаПоСреднему.РасходПоПУ = 0 Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрокаРасходаПоСреднему);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаУдаления Из МассивСтрокДляУдаления Цикл
			СтрокиРасходаПоСреднему.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
		
		// 3.
		
		Для Каждого ТекСтрока Из МассивСтрокБезРасходаПУ Цикл
			
			МинимальныйПериодРасчетаПоСреднему = ?(ТекСтрока.ЕстьСчетчик, 
			                                       СтрокаЛС.МинимальныйПериодРасчетаПоСреднемуБезПоказаний, 
			                                       СтрокаЛС.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ);
			
			// Если при отсутствии приборов для услуги установлено начислять по норме /среднему значению только 
			// когда отключены все ПУ сразу, но в текущем периоде отключены не все ПУ или же
			// если при отстутствии показаний для услуги установлено начислять по норме /среднему значению только 
			// когда не введены показания по всем действующим ПУ сразу, но в текущем периоде есть показания хотя 
			// бы по одному из них, то начисление не производим.
			Если ПроверитьНастройкуРасчетаПоСреднему_Норме(ТекСтрока, СтрокаЛС, ТекСтрокаОбщихПериодов) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если не нашли среднее значение, то начисляем по норме только в случаях, когда:
			// 1) расчет по среднему выполняется при отсутствии действующего прибора;
			// 2) расчет по среднему выполняется при отсутствии показаний прибора и 
			//    установлено начисление по среднему производить "при наличии данных".
			Если (ТекСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ 
			 ИЛИ (ТекСтрока.ЕстьСчетчик 
			   И ТекСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний 
			   И НЕ СтрокаЛС.Услуга.НастройкаНачисленияПоСреднему))
			   И СтрокиРасходаПоСреднему.Количество() = 0 Тогда
				
				ТекСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
				
			// Если период работы прибора учета составил меньше минимального указанного в услуге
			// количества месяцев, то расчет производится по норме.
			// В соответствии с п.59 постановления Правительства РФ № 354 (в ред. постановления № 344).
			//
			// Примечание:
			// В случае, когда данных о действии ПУ в периоде для расчета среднего нет, но счетчик действует
			// в текущем месяце (видимо, счетчик установлен и текущий месяц - первый месяц работы счетчика),
			// считаем, что период действия ПУ меньше минимального периода, поэтому рассчитываем по нормативу.
			ИначеЕсли (СтрокиДействияПрибора.Количество() > 0 И СтрокиДействияПрибора[0].КоличествоМесяцев < МинимальныйПериодРасчетаПоСреднему)
				  ИЛИ (СтрокиДействияПрибора.Количество() = 0 И ТекСтрока.ЕстьСчетчик) Тогда
				
				ТекСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу();
				
			ИначеЕсли СтрокиРасходаПоСреднему.Количество() = 0 
				    И НЕ ТЗУслугиПоПоказаниямПУ = Неопределено Тогда
				
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														  ТекСтрокаОбщихПериодов.ДатаНачала,
														  ТекСтрокаОбщихПериодов.ДатаОкончания,
														  СтрокаЛС.Услуга,
														  Неопределено,
														  СтрокаЛС.ЛицевойСчет, 
														  Перечисления.КВП_ВидыТарифов.Общий, 
														  0,
														  ТекСтрока.ТипРасчета,
														  ТекСтрока.ФормулаРасчета,
														  ТекСтрока.СостояниеПУ,
														  ТекСтрока.ТарифностьСчетчика,
														  ,
														  ,
														  СтруктураПараметров)
				
			Иначе // начисляем по среднему значению в разрезе тарифов.
				
				Для каждого ВыборкаРасходаПоСреднему Из СтрокиРасходаПоСреднему Цикл
					
					РасходПоПУ = ВыборкаРасходаПоСреднему.РасходПоПУ * ?(СчетчикНаЛицевойСчет, 1,
					                                ДоляЛицевогоСчета(ТаблицаДолей, СтрокаЛС.ЛицевойСчет));
					
					// Расход по ПУ делим пропорционально дням в текущем подпериоде и делим на количество приборов учета,
					// по которым не найден средний расход. Если производится расчет без ПУ, то делить будем на количество
					// строк, для которых опять же не найден расход по ПУ.
					РасчетЗаТекПериод = ТекСтрокаОбщихПериодов.ДнейНачислено * РасходПоПУ / КолДнейВМесяце
											/ ?((ТекСтрокаОбщихПериодов.КоличествоСчетчиков - КоличествоСтрокСРасходомПУ) > 0,
												(ТекСтрокаОбщихПериодов.КоличествоСчетчиков - КоличествоСтрокСРасходомПУ),
												 КоличествоСтрокБезРасходаПУ);
					
					Если Не ЭтоСоставнаяУслуга Тогда
						
						ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
																  ТекСтрокаОбщихПериодов.ДатаНачала,
																  ТекСтрокаОбщихПериодов.ДатаОкончания, 
																  СтрокаЛС.Услуга,
																  Неопределено,
																  СтрокаЛС.ЛицевойСчет, 
																  ВыборкаРасходаПоСреднему.ВидПоказания, 
																  РасчетЗаТекПериод,
																  ТекСтрока.ТипРасчета,
																  ТекСтрока.ФормулаРасчета,
																  ТекСтрока.СостояниеПУ,
																  ТекСтрока.ТарифностьСчетчика,
																  ,
																  ,
																  СтруктураПараметров)
					Иначе
						
						Если ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Дневной Тогда
							// Дневной
							ТекСтрока.ДневноеПоказаниеОстаток = ТекСтрока.ДневноеПоказаниеОстаток + РасчетЗаТекПериод;
							ДневноеПоказаниеСреднее = ДневноеПоказаниеСреднее + РасчетЗаТекПериод;
							
						ИначеЕсли ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Ночной Тогда
							// Ночной
							ТекСтрока.НочноеПоказаниеОстаток = ТекСтрока.НочноеПоказаниеОстаток + РасчетЗаТекПериод;
							НочноеПоказаниеСреднее  = НочноеПоказаниеСреднее  + РасчетЗаТекПериод;
							
						ИначеЕсли ВыборкаРасходаПоСреднему.ВидПоказания = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
							// Пиковый
							ТекСтрока.ПиковоеПоказаниеОстаток = ТекСтрока.ПиковоеПоказаниеОстаток + РасчетЗаТекПериод;
							ПиковоеПоказаниеСреднее = ПиковоеПоказаниеСреднее + РасчетЗаТекПериод;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; // Цикл по видам тарифа
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокиСНачислениемПоСреднему()

// Процедура добавляет в табличную часть строки с типом расчета "По норме".
//
Процедура ДобавитьСтрокиСНачислениемПоНорме(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
	                                        КолДнейВМесяце, ТЗУслугиПоПоказаниямПУ, СтруктураПараметров = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	СтруктураОтбора.Вставить("ДатаНачала", ТекСтрокаОбщихПериодов.ДатаНачала);
	СтрокиПоНорме = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиПоНорме.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получение нормы в целом за месяц. Далее от этой нормы
	// будет браться норма, приходящаяся на конкретные подпериды расчета.
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("Объект",        СтрокаЛС.ЛицевойСчет);
	СтруктураДопПараметров.Вставить("Услуга",        СтрокаЛС.Услуга);
	СтруктураДопПараметров.Вставить("Организация",   Организация);
	СтруктураДопПараметров.Вставить("Период",        ТекСтрокаОбщихПериодов.ДатаОкончания);
	СтруктураДопПараметров.Вставить("ДатаДокумента", КонецМесяца(Дата));
	НормаЗаМесяц = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураДопПараметров);
	
	// В случае, если используются повышающие коэффициенты при расчете по нормативу,
	// применим повышающий коэффициент к исходному размеру нормы за месяц.
	// Повышающий коэффициент нужно учитывать при выполнении следующих условий:
	// 1. Нужно учитывать повышающие коэффициенты в соответствии с настройкой параметров учета ЖКХ.
	// 2. В соответствии с настройками услуги начисление при отсутствии ПУ производится по норме потребления.
	// 3. По текущему лицевому счету в данном периоде нет ни одного действующего ПУ.
	// 4. В помещении, к которому относится текущий лицевой счет, есть возможность установки приборов учета услуги.
	
	ПовышающийКоэффициент = СтрокаЛС.ПовышающийКоэффициентДляНачисленияПоНормативу;
	НачислятьПоПовышающемуКоэффициенту = Ложь;
	
	Если мИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ
	   И СтрокаЛС.СпособРасчетаПоПУБезДействующихПУ = Перечисления.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления
	   И ТекСтрокаОбщихПериодов.КоличествоСчетчиков = 0
	   И СтрокаЛС.ТехническаяВозможностьУстановкиПУПрисутствует Тогда
		
		НачислятьПоПовышающемуКоэффициенту = Истина;
		
	КонецЕсли;
	
	//////////////////////////
	// УЧЕТ РАСХОЖДЕНИЙ НОРМЫ
	
	// В случае, если:
	// 1. Действующих ПУ или строк по норме несколько - параметр "КоличествоСчетчиков".
	// 2. Производится вычисление нормы по последней строке.
	//       то необходимо учитывать остатки нераспределенной нормы, с учетом округления,
	//       т.е. к объему начисления последней строки прибавляем остатки расхождений от нормы за подпериод,
	//       которые возникли в результате деления с округлением.
	// При вычислении текущей распределенного объема нормы нужно использовать округление с точностью,
	// заданной в реквизите ТЧ.
	
	НеобходимоУчестьОстаткиРаспределенияНормы = Истина;
	КоличествоСтрокПоНорме = СтрокиПоНорме.Количество();
	НомерТекущейСтроки = 0;
	
	НормаЗаПодпериод = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(НормаЗаМесяц * (ТекСтрокаОбщихПериодов.ДнейНачислено / КолДнейВМесяце), мТочностьОбъемаНачислений);
	УчтенныйОбъемНормы = 0;
	
	//////////////////////////
	
	Для Каждого ТекСтрока ИЗ СтрокиПоНорме Цикл
		
		// Отмечаем текущий номер строки для учета расхождений нормы.
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		// Если при отсутствии приборов для услуги установлено начислять по норме /среднему значению только 
		// когда отключены все ПУ сразу, но в текущем периоде отключены не все ПУ или же
		// если при отстутствии показаний для услуги установлено начислять по норме /среднему значению только 
		// когда не введены показания по всем действующим ПУ сразу, но в текущем периоде есть показания хотя 
		// бы по одному из них, то начисление не производим.
		Если ПроверитьНастройкуРасчетаПоСреднему_Норме(ТекСтрока, СтрокаЛС, ТекСтрокаОбщихПериодов) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСчетчиков = ?(СтрокаЛС.НастройкаОтсутствияДействующегоПУ
								И ТекСтрокаОбщихПериодов.КоличествоСчетчиков = 0,
								СтрокиПоНорме.Количество(),
								?(ТекСтрокаОбщихПериодов.КоличествоСчетчиков = 0, 
								  СтрокиПоНорме.Количество(), ТекСтрокаОбщихПериодов.КоличествоСчетчиков));
		
		// Если нет действующего ПУ,то в таблице изменения количества ПУ всегда будет 0.
		РасчетЗаТекПодПериод = (НормаЗаМесяц / КоличествоСчетчиков) 
							 * (ТекСтрокаОбщихПериодов.ДнейНачислено / КолДнейВМесяце);
							 		
		//////////////////////////
		// УЧЕТ РАСХОЖДЕНИЙ НОРМЫ
		
		// Если счетчик только один, то учитывать расхождения нормы не нужно.
		Если КоличествоСчетчиков < 2 Тогда
			НеобходимоУчестьОстаткиРаспределенияНормы = Ложь;
		КонецЕсли;
		
		Если НеобходимоУчестьОстаткиРаспределенияНормы Тогда
			
			// Суммируем общий распределенный объем нормы.
			УчтенныйОбъемНормы = УчтенныйОбъемНормы + УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РасчетЗаТекПодПериод, мТочностьОбъемаНачислений);
			
			// Если счетчик последний, то пытаемся учесть разницу нормы за весь подпериод и учтенной нормы.
			Если НомерТекущейСтроки = КоличествоСтрокПоНорме Тогда
				РасчетЗаТекПодПериод = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РасчетЗаТекПодПериод, мТочностьОбъемаНачислений) + (НормаЗаПодпериод - УчтенныйОбъемНормы);
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////
		
		ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
													ТекСтрокаОбщихПериодов.ДатаНачала,
													ТекСтрокаОбщихПериодов.ДатаОкончания, 
													СтрокаЛС.Услуга,
													Неопределено,
													СтрокаЛС.ЛицевойСчет, 
													Перечисления.КВП_ВидыТарифов.Общий, 
													РасчетЗаТекПодПериод,
													ТекСтрока.ТипРасчета,
													ТекСтрока.ФормулаРасчета,
													ТекСтрока.СостояниеПУ,
													ТекСтрока.ТарифностьСчетчика,
													,
													,
													СтруктураПараметров);
		
		// Добавим новую строку по начислению за счет повышающего коэффициента.
		// Это начисление отражается в отдельной строке табличной части и отображается
		// в отдельной ветке дерева услуг по ПУ в форме документа.
		//
		// Добавляем новую строку только в том случае, когда считаем что показаний нет, что счетчик утерян, поломан или на поверке.
		Если НачислятьПоПовышающемуКоэффициенту И Не ТекСтрока.РасчетПоОтсутствиюПоказанийПриУтереПоломкеПоверке Тогда
			
			// Объем начисления по повышающему коэффициенту определяется
			// по формуле: [объем норматива] * [повышающий коэффициент] - [объем норматива].
			// В итоге получаем ту часть начисления от, которая увеличивает норматив за счет повышения.
			РасчетЗаТекПодПериодЗаСчетПовышающегоКоэффициента = РасчетЗаТекПодПериод * ПовышающийКоэффициент - РасчетЗаТекПодПериод;
			
			ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														ТекСтрокаОбщихПериодов.ДатаНачала,
														ТекСтрокаОбщихПериодов.ДатаОкончания, 
														СтрокаЛС.Услуга,
														Неопределено,
														СтрокаЛС.ЛицевойСчет, 
														Перечисления.КВП_ВидыТарифов.Общий, 
														РасчетЗаТекПодПериодЗаСчетПовышающегоКоэффициента,
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика,
														,
														Истина,
														СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиСНачислениемПоНорме()

// Процедура добавляет в табличную часть строки с типом расчета "Не производить".
//
Процедура ДобавитьСтрокиБезНачисления(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов, ТЗУслугиПоПоказаниямПУ, ТипРасчета)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", ТипРасчета);
	СтруктураОтбора.Вставить("ДатаНачала", ТекСтрокаОбщихПериодов.ДатаНачала);
	СтрокиПоТипуРасчета = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока ИЗ СтрокиПоТипуРасчета Цикл
		
		Если НЕ СтрокаЛС.ЭтоСоставнаяУслуга Тогда
			ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														ТекСтрока.ДатаНачала,
														ТекСтрока.ДатаОкончания, 
														СтрокаЛС.Услуга,
														Неопределено,
														СтрокаЛС.ЛицевойСчет, 
														Перечисления.КВП_ВидыТарифов.Общий, 
														0,
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика)
		Иначе
			Для Каждого СоставнаяУслуга ИЗ СтрокаЛС.Услуга.СоставныеУслуги Цикл
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
															ТекСтрока.ДатаНачала,
															ТекСтрока.ДатаОкончания, 
															СтрокаЛС.Услуга,
															СоставнаяУслуга.Услуга,
															СтрокаЛС.ЛицевойСчет, 
															Перечисления.КВП_ВидыТарифов.Общий, 
															0,
															ТекСтрока.ТипРасчета,
															ТекСтрока.ФормулаРасчета,
															ТекСтрока.СостояниеПУ,
															ТекСтрока.ТарифностьСчетчика)
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  //ДобавитьСтрокиБезНачисления()

// Процедура добавляет в табличную часть строки с типом расчета "По показаниям".
//
Процедура ДобавитьСтрокиСНачислениемПоПоказаниям(ТекСтрокаОбщихПериодов, СтрокаЛС, ТаблицаПериодов,
												 ТЗУслугиПоПоказаниямПУ, СтруктураПараметров = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СостояниеПУ", Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания);
	СтруктураОтбора.Вставить("ДатаНачала",  ТекСтрокаОбщихПериодов.ДатаНачала);
	СтрокиПоПоказаниям = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока ИЗ СтрокиПоПоказаниям Цикл
		
		// По дневному тарифу
		ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ, 
													ТекСтрока.ДатаНачала,
													ТекСтрока.ДатаОкончания, 
													СтрокаЛС.Услуга, 
													Неопределено,
													СтрокаЛС.ЛицевойСчет, 
													Перечисления.КВП_ВидыТарифов.Дневной, 
													ТекСтрока.ДневноеПоказаниеОстаток,
													ТекСтрока.ТипРасчета,
													ТекСтрока.ФормулаРасчета,
													ТекСтрока.СостояниеПУ,
													ТекСтрока.ТарифностьСчетчика,
													,
													,
													СтруктураПараметров);
		
		// По ночному тарифу
		Если ТекСтрока.ТарифностьСчетчика > 1 Тогда
			ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ, 
														ТекСтрока.ДатаНачала,
														ТекСтрока.ДатаОкончания, 
														СтрокаЛС.Услуга, 
														Неопределено,
														СтрокаЛС.ЛицевойСчет, 
														Перечисления.КВП_ВидыТарифов.Ночной, 
														ТекСтрока.НочноеПоказаниеОстаток, 
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика,
														,
														,
														СтруктураПараметров);
		КонецЕсли;
		
		// По пиковому тарифу
		Если ТекСтрока.ТарифностьСчетчика > 2 Тогда
			ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ, 
														ТекСтрока.ДатаНачала,
														ТекСтрока.ДатаОкончания, 
														СтрокаЛС.Услуга, 
														Неопределено,
														СтрокаЛС.ЛицевойСчет, 
														Перечисления.КВП_ВидыТарифов.Пиковый, 
														ТекСтрока.ПиковоеПоказаниеОстаток, 
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика,
														,
														,
														СтруктураПараметров);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет строки с тарифами с пустыми показаниями.
//
Процедура ДобавитьСтрокиСНедостающимиТарифамиДоТарифностиИПУ(ТаблицаПоСоставнымУслугам, ТЗУслугиПоПоказаниямПУ,
	                                          ТаблицаПериодов, ТекСтрокаОбщихПериодов, СтрокаЛС, МассивТарифов)
	
	ВремТабПоСоставнымУслугам = ТаблицаПоСоставнымУслугам.Скопировать();
	ВремТабПоСоставнымУслугам.Колонки.Добавить("КоличествоТарифов", Новый ОписаниеТипов("Число"));
	ВремТабПоСоставнымУслугам.ЗаполнитьЗначения(1, "КоличествоТарифов");
	ВремТабПоСоставнымУслугам.Свернуть("СоставнаяУслуга", "КоличествоТарифов, Количество");
	
	Для Каждого ТекСтрока Из ВремТабПоСоставнымУслугам Цикл
		
		Если УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрока.Количество, мТочностьОбъемаНачислений) <= 1 / Pow(10, мТочностьОбъемаНачислений) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаПериода ИЗ ТаблицаПериодов Цикл
			
			Если ТекСтрокаПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу()
			 ИЛИ НЕ ТекСтрокаПериода.ДатаНачала = ТекСтрокаОбщихПериодов.ДатаНачала Тогда
				Продолжить;
			КонецЕсли;
			
			Для Счетчик = ТекСтрока.КоличествоТарифов По ТекСтрокаПериода.ТарифностьСчетчика Цикл
				
				ТекТариф = ПолучитьТарифПоЛицевомуСчету(ТекСтрокаПериода.ДатаОкончания, Организация,
													ТекСтрока.СоставнаяУслуга, СтрокаЛС.ЛицевойСчет,
													МассивТарифов[Счетчик - 1]);
				
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														ТекСтрокаПериода.ДатаНачала,
														ТекСтрокаПериода.ДатаОкончания,
														СтрокаЛС.Услуга,
														ТекСтрока.СоставнаяУслуга,
														СтрокаЛС.ЛицевойСчет,
														МассивТарифов[Счетчик - 1],
														0,
														ТекСтрокаПериода.ТипРасчета,
														ТекСтрокаПериода.ФормулаРасчета,
														ТекСтрокаПериода.СостояниеПУ,
														ТекСтрокаПериода.ТарифностьСчетчика,
														ТекТариф);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиСНедостающимиТарифамиДоТарифностиИПУ()

// Процедура распределяет оставшиеся показания для ситуаций, когда объем к распределению больше
// фактического объема потребления.
//
Процедура РаспределитьОставшиесяПоказания(ВремТабПоСоставнымУслугам, ТаблицаПериодов, ТекСтрокаОбщихПериодов,
	                                      СтруктураПараметров, ВсегоДнейНачислений, ТЗУслугиПоПоказаниямПУ, СтрокаЛС)
	
	Для Каждого ТекСтрокаВрТаблицы ИЗ ВремТабПоСоставнымУслугам Цикл 
		
		Для Каждого ТекСтрокаПериода ИЗ ТаблицаПериодов Цикл
			
			Если ТекСтрокаПериода.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу()
			 ИЛИ НЕ ТекСтрокаПериода.ДатаНачала = ТекСтрокаОбщихПериодов.ДатаНачала Тогда
				Продолжить;
			КонецЕсли;
			
			Если УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаВрТаблицы.Количество, мТочностьОбъемаНачислений) > 0 Тогда
				
				ПоказаниеОстаток = СтруктураПараметров.ДневноеПоказаниеОстаток
								 + СтруктураПараметров.НочноеПоказаниеОстаток
								 + СтруктураПараметров.ПиковоеПоказаниеОстаток;
				ТекКоличество    = Мин(ТекСтрокаВрТаблицы.Количество, ПоказаниеОстаток);
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
															ТекСтрокаПериода.ДатаНачала,
															ТекСтрокаПериода.ДатаОкончания,
															СтрокаЛС.Услуга,
															ТекСтрокаВрТаблицы.СоставнаяУслуга, 
															СтрокаЛС.ЛицевойСчет, 
															ТекСтрокаВрТаблицы.ВидТарифа, 
															ТекКоличество,
															Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ(),
															ТекСтрокаПериода.ФормулаРасчета,
															ТекСтрокаПериода.СостояниеПУ,
															ТекСтрокаПериода.ТарифностьСчетчика,
															ТекСтрокаВрТаблицы.Тариф);
				ТекСтрокаВрТаблицы.Количество = ТекСтрокаВрТаблицы.Количество - ТекКоличество;
				
				Если УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрокаВрТаблицы.Количество, мТочностьОбъемаНачислений) > 0 Тогда
					
					ПоказаниеОстаток = СтруктураПараметров.ДневноеПоказаниеСреднее
									 + СтруктураПараметров.НочноеПоказаниеСреднее
									 + СтруктураПараметров.ПиковоеПоказаниеСреднее;
					ТекКоличество    = Мин(ТекСтрокаВрТаблицы.Количество, ПоказаниеОстаток);
					ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
																ТекСтрокаПериода.ДатаНачала,
																ТекСтрокаПериода.ДатаОкончания,
																СтрокаЛС.Услуга,
																ТекСтрокаВрТаблицы.СоставнаяУслуга, 
																СтрокаЛС.ЛицевойСчет, 
																ТекСтрокаВрТаблицы.ВидТарифа, 
																ТекКоличество,
																Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу(),
																ТекСтрокаПериода.ФормулаРасчета,
																ТекСтрокаПериода.СостояниеПУ,
																ТекСтрокаПериода.ТарифностьСчетчика,
																ТекСтрокаВрТаблицы.Тариф);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по составным услугам
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьОставшиесяПоказания()

// Процедура добавляет в табличную часть строки с типом расчета "По норме" в случае составной услуги.
//
Процедура ДобавитьСтрокиСНачислениемПоНормеСоставнойУслуги(ТекСтрокаОбщихПериодов, ТаблицаПериодов, СтрокаЛС,
	                                                       КолДнейВМесяце, ТаблицаПоСоставнымУслугам,
	                                                       ТЗУслугиПоПоказаниямПУ, Параметры)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчета", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	СтруктураОтбора.Вставить("ДатаНачала", ТекСтрокаОбщихПериодов.ДатаНачала);
	СтрокиПоНорме = ТаблицаПериодов.НайтиСтроки(СтруктураОтбора);
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("Период",        ТекСтрокаОбщихПериодов.ДатаОкончания);
	СтруктураДопПараметров.Вставить("Объект",        СтрокаЛС.ЛицевойСчет);
	СтруктураДопПараметров.Вставить("Услуга",        СтрокаЛС.Услуга);
	СтруктураДопПараметров.Вставить("Организация",   Организация);
	
	НормаЗаМесяц = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураДопПараметров);
	
	Для Каждого ТекСтрока ИЗ СтрокиПоНорме Цикл
		
		// Поделим на периоды с разным количеством ПУ.
		
		// Если при отсутствии приборов для услуги установлено начислять по норме /среднему значению только 
		// когда отключены все ПУ сразу, но в текущем периоде отключены не все ПУ или же
		// если при отстутствии показаний для услуги установлено начислять по норме /среднему значению только 
		// когда не введены показания по всем действующим ПУ сразу, но в текущем периоде есть показания хотя 
		// бы по одному из них, то начисление не производим.
		Если ПроверитьНастройкуРасчетаПоСреднему_Норме(ТекСтрока, СтрокаЛС, ТекСтрокаОбщихПериодов) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если нет действующего ПУ,то в таблице изменения количества ПУ всегда будет 0.
		КоличествоСчетчиков = ?(СтрокаЛС.НастройкаОтсутствияДействующегоПУ И ТекСтрокаОбщихПериодов.КоличествоСчетчиков = 0,
									СтрокиПоНорме.Количество(),
									?(ТекСтрокаОбщихПериодов.КоличествоСчетчиков = 0, 
											СтрокиПоНорме.Количество(), 
											ТекСтрокаОбщихПериодов.КоличествоСчетчиков));
		
		// Если нет действующего ПУ,то в таблице изменения количества ПУ всегда будет 0.
		РасчетЗаТекПодПериод = (НормаЗаМесяц / КоличествоСчетчиков) 
							 * (ТекСтрокаОбщихПериодов.ДнейНачислено / КолДнейВМесяце);
		
		// 6. Дораспределяем расход п.5 по составным услугам: если есть ограничение и значение ограничения не превышено,
		// то кидаем часть расхода на эту услугу, все что останется - на услугу сверх норматива (без ограничения).
		
		// распределим количество начисления по норме по составным услугам
		Для Каждого СоставнаяУслуга ИЗ СтрокаЛС.Услуга.СоставныеУслуги Цикл
			
			// расчет по услуге с ограничением
			Если СоставнаяУслуга.ВидОграничения = Перечисления.КВП_ВидыОграниченийСоставныхУслуг.НормаПотребления Тогда
				
				// получим количество ограничения текущей услуги
				КоличествоОграничения = КВП_ПолучитьКоличествоОграниченияСоставнойУслуги(ТекСтрока.ДатаОкончания,
																						 Организация,
																						 СтрокаЛС.ЛицевойСчет,
																						 СтрокаЛС.Услуга,
																						 СоставнаяУслуга.ВидОграничения,
																						 СоставнаяУслуга.РазмерОграничения);
																						
				КоличествоОграничения = КоличествоОграничения * Параметры.Коэффициент;
				// Определим уже произведенное начисление в пределах ограничения и найдем остаток.
				ТаблицаПоСоставнымУслугам.Свернуть("СоставнаяУслуга", "Количество");
				НайденнаяСтрока = ТаблицаПоСоставнымУслугам.Найти(СоставнаяУслуга.Услуга, "СоставнаяУслуга");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					КоличествоОграничения = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоОграничения, мТочностьОбъемаНачислений) - НайденнаяСтрока.Количество;
				КонецЕсли;
				КоличествоОграничения = Мин(КоличествоОграничения, РасчетЗаТекПодПериод);
				
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														ТекСтрока.ДатаНачала,
														ТекСтрока.ДатаОкончания,
														СтрокаЛС.Услуга,
														СоставнаяУслуга.Услуга,
														СтрокаЛС.ЛицевойСчет,
														Перечисления.КВП_ВидыТарифов.Общий,
														КоличествоОграничения,
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика);
				
				Если КоличествоОграничения > 0 Тогда
					
					НоваяСтрока = ТаблицаПоСоставнымУслугам.Добавить();
					НоваяСтрока.СоставнаяУслуга = СоставнаяУслуга.Услуга;
					НоваяСтрока.Количество = КоличествоОграничения;
					
					РасчетЗаТекПодПериод = Макс(РасчетЗаТекПодПериод - КоличествоОграничения, 0);
					
				КонецЕсли;
				
			Иначе // расчет по услуге без ограничения
				
				ДобавитьСтрокуВТаблицуУслугПоПоказаниямПУ(ТЗУслугиПоПоказаниямПУ,
														ТекСтрока.ДатаНачала,
														ТекСтрока.ДатаОкончания,
														СтрокаЛС.Услуга,
														СоставнаяУслуга.Услуга,
														СтрокаЛС.ЛицевойСчет,
														Перечисления.КВП_ВидыТарифов.Общий,
														РасчетЗаТекПодПериод,
														ТекСтрока.ТипРасчета,
														ТекСтрока.ФормулаРасчета,
														ТекСтрока.СостояниеПУ,
														ТекСтрока.ТарифностьСчетчика);
				РасчетЗаТекПодПериод = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит свертку таблицы периодов.
Процедура СвернутьТаблицуПериодов(ТаблицаПериодов)
	
	Индекс = ТаблицаПериодов.Количество() - 1;
	
	Пока Индекс > 0 Цикл
		
		Если ТаблицаПериодов[Индекс].СверткаНевозможна Тогда
			Индекс = Индекс - 1;
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаПериодов[Индекс].ЕстьСчетчик        = ТаблицаПериодов[Индекс - 1].ЕстьСчетчик
		   И ТаблицаПериодов[Индекс].Счетчик            = ТаблицаПериодов[Индекс - 1].Счетчик
		   И ТаблицаПериодов[Индекс].ЭтоСоставнаяУслуга = ТаблицаПериодов[Индекс - 1].ЭтоСоставнаяУслуга
		   И ТаблицаПериодов[Индекс].ТарифностьСчетчика = ТаблицаПериодов[Индекс - 1].ТарифностьСчетчика
		   И ТаблицаПериодов[Индекс].ТипРасчета         = ТаблицаПериодов[Индекс - 1].ТипРасчета
		   И ТаблицаПериодов[Индекс].ФормулаРасчета     = ТаблицаПериодов[Индекс - 1].ФормулаРасчета Тогда
			ТаблицаПериодов[Индекс - 1].ДатаОкончания = ТаблицаПериодов[Индекс].ДатаОкончания;
			ТаблицаПериодов.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры // СвернутьТаблицуПериодов()

// Формирует движения по регистру "Начисления на лицевые счета".
Процедура ДвижениеПоРегиструНачислений(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках)

	Для Каждого ТекСтрокаУслуги Из ТаблицаПоУслугам Цикл

		Если ТекСтрокаУслуги.Начислено = 0 Тогда
			Продолжить;
		КонецЕсли;

		ТекЛицевойСчет = ТекСтрокаУслуги.ЛицевыеСчета;
		Если ТипЗнч(ТекЛицевойСчет) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			СтруктураДанных = КВП_ПолучитьСведенияОПарковочномМесте(ТекЛицевойСчет, ТекСтрокаУслуги.Организация, СтруктураШапкиДокумента.Дата);
			Если НЕ СтруктураДанных.Контрагент = Неопределено Тогда
				ТекЛицевойСчет = СтруктураДанных.Контрагент;
			ИначеЕсли НЕ СтруктураДанных.ЛицевойСчет = Неопределено Тогда
				ТекЛицевойСчет = СтруктураДанных.ЛицевойСчет;
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для парковочного места "+ ТекЛицевойСчет + " не указан собственник (владелец).
																|Это можно осуществить с помощью документа ""Управление парковочными местами"".");
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Движение = ТаблицаДвижений.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = ТекСтрокаУслуги.Организация;
		Движение.ЛицевойСчет                 = ТекЛицевойСчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = ТекСтрокаУслуги.Договор;
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаУслуги.Услуга;
		Движение.УслугаОснование             = ТекСтрокаУслуги.УслугаОснование;
		Движение.СоставнаяУслуга             = ТекСтрокаУслуги.СоставнаяУслуга;
		Движение.РазделУчета                 = СтруктураШапкиДокумента.РазделУчета;
		Движение.ВидНачисленияНаЛицевыеСчета = СтруктураШапкиДокумента.ВидНачисленияНаЛицевыеСчета;
		Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
		Движение.Тариф                       = ТекСтрокаУслуги.Тариф;
		Движение.Количество                  = ТекСтрокаУслуги.Количество;
		Движение.СуммаНачисления             = ТекСтрокаУслуги.Начислено;
		Движение.ДнейНачислено               = ТекСтрокаУслуги.ДнейНачислено;
		Движение.Начало                      = ТекСтрокаУслуги.НачалоПериода;
		Движение.Окончание                   = ТекСтрокаУслуги.КонецПериода;
		
	КонецЦикла;

КонецПроцедуры // ДвижениеПоРегиструНачислений()

// Формирует движения по регистру "Начисления на лицевые счета" при начислении по ПУ.
Процедура ДвижениеПоРегиструНачисленийПУ(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках)

	ТаблицаНачислений = ТаблицаПоУслугам.Скопировать();
	
	Для Каждого СтрокаНачисления ИЗ ТаблицаНачислений Цикл
		
		// Движение по начислениям не добавляем, если сумма начисления равна нулю.
		// Но могут быть ситуации, когда введены показания, равные предыдущим, расход нулевой.
		// При этом возникает сторнировка предыдущих начислений, учитывать ее надо в полном объеме.
		// В результате имеем нулевое начисление, сторнировку и УИО в размере сторнировки со знаком минус.
		// В таком случае запись формировать надо, чтобы данные по УИО попадали в квитанцию.
		//
		// Например:
		// Ввели показания, но расход равен 0 (предыдущие и текущие показания равны), сумма начисления равна нулю.
		// Произошло сторнирование начислений в объеме 89 куб.м.
		// УИО составил -89 куб.м.
		// Сумма начисления равна нулю, а сумма УИО - нет, поэтому все-равно отражаем начисление в движениях.
		//
		Если СтрокаНачисления.Сумма = 0 И СтрокаНачисления.УчетныйИндивидуальныйОбъем = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Месяц начисления определим по дате начала периода начисления текущей строки.
		ТекущийМесяцНачисления = Неопределено;
		Если ЗначениеЗаполнено(СтрокаНачисления.НачалоПериода) Тогда
			ТекущийМесяцНачисления = КонецМесяца(СтрокаНачисления.НачалоПериода);
		КонецЕсли;
		
		ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.ПустаяСсылка();
		
		Если СтрокаНачисления.Сторно Тогда
			ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ;
			ТипНачисления               = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное;
		Иначе
			Если СтрокаНачисления.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний
			   И СтрокаНачисления.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу() Тогда
				ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу;
			ИначеЕсли СтрокаНачисления.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний
			        И СтрокаНачисления.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу() Тогда
				ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему;
			ИначеЕсли СтрокаНачисления.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ
			   И СтрокаНачисления.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу() Тогда
				
				// Если это начисление за счет повышающего коэффициента, то отразим его
				// со специальным видом начисления. В остальных случаях используется вид начисления
				// при отсутствии ИПУ по нормативу.
				Если СтрокаНачисления.НачислениеПоПовышающемуКоэффициенту Тогда
					ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента;
				Иначе
					ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу;
				КонецЕсли;
				
			ИначеЕсли СтрокаНачисления.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ
			        И СтрокаНачисления.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу() Тогда
				ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему;
			ИначеЕсли СтрокаНачисления.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ
					И СтрокаНачисления.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление()
					И (СтрокаНачисления.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()
				  ИЛИ СтрокаНачисления.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708()
				  ИЛИ СтрокаНачисления.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()) Тогда
				
				ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу;
				
			Иначе
				ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ;
			КонецЕсли;
		КонецЕсли;
		
		Движение = ТаблицаДвижений.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = СтрокаНачисления.Организация;
		Движение.МесяцНачисления             = ТекущийМесяцНачисления;
		Движение.ЛицевойСчет                 = СтрокаНачисления.Лицевойсчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаНачисления.Договор;
		КонецЕсли;
		
		Движение.Услуга                      = СтрокаНачисления.Услуга;
		Движение.СоставнаяУслуга             = СтрокаНачисления.СоставнаяУслуга;
		Движение.УслугаОснование             = СтрокаНачисления.УслугаОснование;
		Движение.РазделУчета                 = СтруктураШапкиДокумента.РазделУчета;
		Движение.ВидНачисленияНаЛицевыеСчета = ВидНачисленияНаЛицевыеСчета;
		Движение.ВидТарифа                   = СтрокаНачисления.ВидТарифа;
		Движение.Тариф                       = СтрокаНачисления.Тариф;
		Движение.Количество                  = СтрокаНачисления.ПоказаниеСчЛС;
		Движение.СуммаНачисления             = СтрокаНачисления.Сумма;
		Движение.Начало                      = СтрокаНачисления.НачалоПериода;
		Движение.Окончание                   = СтрокаНачисления.КонецПериода;
		Движение.ДнейНачислено               = 1 + (СтрокаНачисления.КонецПериода - СтрокаНачисления.НачалоПериода)
		                                         / (ДлинаСуток);
		Движение.ТипНачисления               = ТипНачисления;
		// Тарифность нужна для определения соответствия тарифности ОПУ и ИПУ при распределении
		// показаний ОПУ по видам тарифов услуг общедомового счетчика.
		Движение.Тарифность                  = СтрокаНачисления.Тарифность;
		
		// Учетный индивидуальный объем нужен для квитанций и платежных документов.
		Движение.КоличествоУчетное           = СтрокаНачисления.УчетныйИндивидуальныйОбъем;
		
	КонецЦикла;
	
	// движения по распределению показаний коллективных приборов учета.
	ТаблицаНачислений.Свернуть( "Услуга, УслугаОснование, СоставнаяУслуга, ЛицевойСчет,
								|ВидТарифа, Тариф, НачалоПериода, КонецПериода, Договор, Организация",
								"КоличествоРаспределенияПомещение,
								|КоличествоРаспределенияПодъезд,
								|КоличествоРаспределенияЗдание,
								|СуммаРаспределения");
	
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		
		Если СтрокаНачисления.СуммаРаспределения = 0 И СтрокаНачисления.КоличествоРаспределенияЗдание = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УровеньРаспределения = "";
		Количество = 0;
		
		// Для определения уровня распределения будем использовать рассчитанные количества распределения по модулю.
		КоличествоРаспределенияПомещение = Макс(СтрокаНачисления.КоличествоРаспределенияПомещение,
		                                       -СтрокаНачисления.КоличествоРаспределенияПомещение);
		КоличествоРаспределенияПодъезд   = Макс(СтрокаНачисления.КоличествоРаспределенияПодъезд,
		                                       -СтрокаНачисления.КоличествоРаспределенияПодъезд);
		КоличествоРаспределенияЗдание    = Макс(СтрокаНачисления.КоличествоРаспределенияЗдание,
		                                       -СтрокаНачисления.КоличествоРаспределенияЗдание);
		
		Если КоличествоРаспределенияПомещение > Количество Тогда
			Количество = СтрокаНачисления.КоличествоРаспределенияПомещение;
			УровеньРаспределения = "Помещение"
		КонецЕсли;
		Если КоличествоРаспределенияПодъезд > Количество Тогда
			Количество = СтрокаНачисления.КоличествоРаспределенияПодъезд;
			УровеньРаспределения = "Подъезд"
		КонецЕсли;
		Если КоличествоРаспределенияЗдание > Количество Тогда
			Количество = СтрокаНачисления.КоличествоРаспределенияЗдание;
			УровеньРаспределения = "Здание"
		КонецЕсли;
		
		Движение = ТаблицаДвижений.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = СтрокаНачисления.Организация;
		Движение.ЛицевойСчет                 = СтрокаНачисления.Лицевойсчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаНачисления.Договор;
		КонецЕсли;
		
		Движение.Услуга                      = СтрокаНачисления.Услуга;
		Движение.УслугаОснование             = СтрокаНачисления.УслугаОснование;
		Движение.СоставнаяУслуга             = СтрокаНачисления.СоставнаяУслуга;
		Движение.РазделУчета                 = СтруктураШапкиДокумента.РазделУчета;
		Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ;
		Движение.ВидТарифа                   = СтрокаНачисления.ВидТарифа;
		Движение.Тариф                       = СтрокаНачисления.Тариф;
		Движение.Количество                  = Количество;
		Движение.СуммаНачисления             = СтрокаНачисления.СуммаРаспределения;
		Движение.Коллективный                = Истина;
		Движение.УровеньРаспределения        = УровеньРаспределения;
		Движение.Начало                      = СтрокаНачисления.НачалоПериода;
		Движение.Окончание                   = СтрокаНачисления.КонецПериода;
		Движение.ДнейНачислено               = 1 + (СтрокаНачисления.КонецПериода - СтрокаНачисления.НачалоПериода)
		                                         / (ДлинаСуток);
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачисленийПУ()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		
		ДвижениеПоРегиструНачисленийПУ(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках);
		
		ТаблицаСчетчиков = Счетчики.Выгрузить();
		ТаблицаСчетчиков.Свернуть("ВидТарифа,Объект,Счетчик,ОбщедомовойПУ", "Расход");
		
		СписокУслуг = СформироватьСписокПоКолонкеТаблицы(ТаблицаПоУслугам, "Услуга");
		
		ДвижениеПоРегиструРасчетПриборовУчета(СтруктураШапкиДокумента, ТаблицаСчетчиков, ТаблицаПоУслугам, СписокУслуг, Отказ, Заголовок);
		ДвижениеПоРегиструДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		ДвижениеПоРегиструРасхожденияОбъемовПотребленияПоПУИНормативу(СтруктураШапкиДокумента, ТаблицаПоУслугам, СписокУслуг);
		ДвижениеПоРегиструСведенияОРаспределенииОДННаЛицевыеСчета(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		
	Иначе
		
		ТаблицаНачислений = ТаблицаПоУслугам.Скопировать();
		ТаблицаНачислений.Свернуть("Услуга, СоставнаяУслуга, УслугаОснование, ЛицевыеСчета, Договор, Количество,
		                           |Тариф, ДнейНачислено, Организация, НачалоПериода, КонецПериода",
		                           "Начислено");
		
		ДвижениеПоРегиструНачислений(СтруктураШапкиДокумента, ТаблицаНачислений, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "Расчет приборов учета" при начислении по ПУ.
Процедура ДвижениеПоРегиструРасчетПриборовУчета(СтруктураШапкиДокумента, ТаблицаСчетчиков,
												ТаблицаПоУслугам, СписокУслуг, Отказ, Заголовок)
	
	НаборДвижений = Движения.УПЖКХ_РасчетПриборовУчета;
	
	ТаблицаРасчетаПоОбъектам = НаборДвижений.Выгрузить();
	ТаблицаРасчетаПоОбъектам.Очистить();
	
	ТаблицаРасчетаПоОбъектам.Индексы.Добавить("Объект, ВидПоказания");
	ТаблицаРасчетаПоОбъектам.Индексы.Добавить("Объект, Услуга, ВидПоказания");
	
	ТаблицаОбъектов = ПолучитьТаблицуОбъектовРасчетаПоказанийПУ(УслугиПоПоказаниямПУ.ВыгрузитьКолонку("ЛицевойСчет"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Объект КАК Объект,
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА УПЖКХ_РасчетПриборовУчетаОбороты.Объект ССЫЛКА Справочник.КВП_Здания
	|				ИЛИ УПЖКХ_РасчетПриборовУчетаОбороты.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ИЛИ УПЖКХ_РасчетПриборовУчетаОбороты.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетчикОПУ,
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга,
	|	УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания КАК ВидПоказания,
	|	ВЫБОР
	|		КОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеОстаток >= &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|				ИЛИ УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеОстаток <= (-1) * &МинимальноеЗначениеДляТочностиОбъемаНачислений
	|			ТОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Показание
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
	|			&ДатаКон,
	|			Услуга В (&СписокУслуг)
	|				И Объект В (&СпОбъектов)) КАК УПЖКХ_РасчетПриборовУчетаОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект
	|ИТОГИ
	|	СУММА(Показание)
	|ПО
	|	Объект,
	|	ВидПоказания,
	|	Счетчик";
	
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",     Граница);
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	Запрос.УстановитьПараметр("СпОбъектов",  ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	
	// Для начисления по показаниям ПУ необходимо получать расход ПУ с ограничением
	// по минимальному значению с точностью объема начислений. Если этого не делать,
	// то при вводе показаний с более высокой точностью, чем точность начислений,
	// после начисления останутся зависшие остатки расхода ПУ, которые потом приведут
	// к некорректному начислению в следующих периодах.
	Запрос.УстановитьПараметр("МинимальноеЗначениеДляТочностиОбъемаНачислений", ПолучитьМинимальноеЗначениеДляТочностиОбъемаНачислений());
	
	// Сформируем таблицу сводных показаний по приборам учета.
	СтруктураОтбора = Новый Структура("ТипРасчета, Зависимая", 
										Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ(), 
										Ложь);
	СтрокиПоказаний = УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураОтбора);
	
	ТаблицаСводныхПоказаний = УслугиПоПоказаниямПУ.Выгрузить(СтрокиПоказаний, "ЛицевойСчет, ВидТарифа, ПоказаниеСчЛС");
	// Необходимо свернуть таблицу сводных показаний, так как в ней могут быть несколько строк по составным услугам.
	// В противном случае, будет списан не весь объем показаний, а только по одной из состава услуг.
	ТаблицаСводныхПоказаний.Свернуть("ЛицевойСчет, ВидТарифа", "ПоказаниеСчЛС");
	ТаблицаСводныхПоказаний.Индексы.Добавить("ЛицевойСчет, ВидТарифа");
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		ВыборкаВидовПоказания = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидовПоказания.Следующий() Цикл
			
			НоваяСтрока = Неопределено;
			
			// Для списания расходов по показаниям будем анализировать как данные регистра накопления "УПЖКХ_РасчетПриборовУчета"
			// так и данные табличной части "Счетчики".
			// Если документ создается заново или его табличная часть перезаполняется, то будем анализировать дополнительно
			// данные табличной части "Счетчики", в которой для каждого счетчика по виду тарифа теперь хранится также и расход.
			
			// Для распределения введенного расхода между счетчиками найдем "Сумму показаний", а также "Сумму показаний по модулю".
			// "Сумма показаний по модулю" понадобится для пропорционального распределения отрицательных показаний по счетчикам.
			// Пример пропорционального распределения введенного расхода:
			// Пусть по услуге назначены 3 счетчика: ПУ1, ПУ2 и ПУ3. 
			// По одному из видов тарифов (например по дневному) введены показания и расход следующий: ПУ1=5; ПУ2=15; ПУ3=-10;
			// Таким образом "СуммаПоказаний" = 5 + 15 + (-10) = 10;
			// При этом "СуммаПоказанийПоМодулю" = |5| + |15| + |-10| = 30;
			// После заполнения документа расход по данной услуге изменили вручную (было "10") на значение "28".
			// Разница между значением по показаниям и значением по расходу стало 28 - 10 = 18. Эту сумму необходимо распределить
			// пропорционально между всеми счетчиками.
			// Коэффициенты для каждого из счетчиков будут рассчитываться в зависимости
			// от доли по модулю показания каждого из счетчиков к сумме показаний по модулю.
			// К1 = |5|/30   = 1/6;
			// К2 = |15|/30  = 1/2;
			// К3 = |-10|/30 = 1/3;
			// Увеличиваем показание каждого из счетчиков на долю от дополнительного расхода:
			// ПУ1 =   5 + 1/6 * 18 = 8;
			// ПУ2 =  15 + 1/2 * 18 = 24;
			// ПУ3 = -10 + 1/3 * 18 = -4;
			
			// Найдем в таблице сводных показаний все строки по объекту с данным видом тарифа.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЛицевойСчет", ВыборкаВидовПоказания.Объект);
			СтруктураОтбора.Вставить("ВидТарифа",   ВыборкаВидовПоказания.ВидПоказания);
			
			СтрокиПоОбъекту = ТаблицаСводныхПоказаний.НайтиСтроки(СтруктураОтбора);
			
			// Найдем в таблице счетчиков все строки по объекту с данным видом тарифа.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Объект",      ВыборкаВидовПоказания.Объект);
			СтруктураОтбора.Вставить("ВидТарифа",   ВыборкаВидовПоказания.ВидПоказания);
			
			СтрокиПоВсемСчетчикам = ТаблицаСчетчиков.НайтиСтроки(СтруктураОтбора);
			
			// Получим сумму показаний и сумму показаний по модулю по всем счетчикам объекта для текущего вида показания.
			// Необходимы для определения объема расхода ПУ, подлежащего списанию, если используется списание по таблице счетчиков,
			// а размеры показаний в остатках и в таблице счетчиков не совпадают.
			СуммаПоказаний         = 0;
			СуммаПоказанийПоМодулю = 0;
			Для Каждого ПоказаниеСчетчика Из СтрокиПоВсемСчетчикам Цикл
				СуммаПоказаний         = СуммаПоказаний + ПоказаниеСчетчика.Расход;
				СуммаПоказанийПоМодулю = СуммаПоказанийПоМодулю + Макс(ПоказаниеСчетчика.Расход, -1*ПоказаниеСчетчика.Расход);
			КонецЦикла;
			
			// Обходим счетчики.
			ВыборкаСчетчиков = ВыборкаВидовПоказания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСчетчиков.Следующий() Цикл
				
				// Найдем в табличной части "Счетчики" все строки по объекту для указанного счетчика и вида тарифа.
				СтрокаПоТекущемуСчетчику = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Объект, Счетчик, ВидТарифа", ВыборкаСчетчиков.Объект, ВыборкаСчетчиков.Счетчик, ВыборкаСчетчиков.ВидПоказания));
				
				ВыборкаПоказаний = ВыборкаСчетчиков.Выбрать();
			
				Пока ВыборкаПоказаний.Следующий() Цикл
					
					НоваяСтрока = ТаблицаРасчетаПоОбъектам.Добавить();
					НоваяСтрока.Счетчик      = ВыборкаПоказаний.Счетчик;
					НоваяСтрока.Объект       = ВыборкаПоказаний.Объект;
					НоваяСтрока.Услуга       = ВыборкаПоказаний.Услуга;
					НоваяСтрока.ВидПоказания = ВыборкаПоказаний.ВидПоказания;
					
					Если НЕ СписыватьРасходПУПоТаблицеСчетчиков Тогда
						
						// Списываем по данным регистра накопления "Расчет приборов учета".
						Если НЕ СтрокиПоОбъекту.Количество() = 0 Тогда
							НоваяСтрока.Показание = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(СтрокиПоОбъекту[0].ПоказаниеСчЛС * ВыборкаСчетчиков.Показание
														/ ?(ВыборкаВидовПоказания.Показание = 0, 1, ВыборкаВидовПоказания.Показание), мТочностьОбъемаНачислений);
						Иначе
							НоваяСтрока.Показание = ВыборкаПоказаний.Показание;
						КонецЕсли;
						
					Иначе
						
						// Списываем по данным табличной части "Счетчики".
						Если НЕ СтрокиПоОбъекту.Количество() = 0 Тогда
							
							Если НЕ СтрокаПоТекущемуСчетчику.Количество() = 0 Тогда
							
								РасходТекущегоСчетчика = СтрокаПоТекущемуСчетчику[0].Расход;
								Если СтрокиПоОбъекту[0].ПоказаниеСчЛС = СуммаПоказаний Тогда
									
									// Если объем начислений и объем расхода по счетчикам совпадают,
									// то списываем просто весь расход счетчиков.
									НоваяСтрока.Показание = РасходТекущегоСчетчика;
									
								Иначе
									
									// Иначе списываем расход каждого счетчика пропорционально расходу каждого ПУ.
									НоваяСтрока.Показание = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(РасходТекущегоСчетчика + (СтрокиПоОбъекту[0].ПоказаниеСчЛС - СуммаПоказаний) * Макс(РасходТекущегоСчетчика, -1 * РасходТекущегоСчетчика)
																														/ ?(СуммаПоказанийПоМодулю = 0, 1, СуммаПоказанийПоМодулю), мТочностьОбъемаНачислений);
									
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли ВыборкаСчетчиков.СчетчикОПУ Тогда
							
							Если НЕ СтрокаПоТекущемуСчетчику.Количество() = 0 Тогда
							
								НоваяСтрока.Показание = СтрокаПоТекущемуСчетчику[0].Расход;
								
							Иначе
								
								// Если в таблице счетчиков данных по текущему ПУ нет, а ПУ - общедомовой (установлен на здание или подъезд),
								// все-равно нужно списать остатки. Приходится использовать данный подход, так как при переработке
								// механизма списания показаний ПУ счетчики ОПУ не добавлялись в Табличную часть "Счетчики".
								НоваяСтрока.Показание = ВыборкаПоказаний.Показание;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; // Конец цикла по показаниям
				
			КонецЦикла; // Конец цикла по ПУ
			
			// Для учета погрешности, которая могла возникнуть при распределении дополнительного расхода,
			// необходимо сверить сумму расходов по каждому из счетчиков и суммарный расход.
			// Если суммы расходов отличаются, то необходимо откорректировать величину расхода последнего счетчика.
			Если НЕ НоваяСтрока = Неопределено И НЕ СтрокиПоОбъекту.Количество() = 0 Тогда
				
				Если НЕ СтрокиПоОбъекту[0].ПоказаниеСчЛС = СуммаПоказаний Тогда
					
					НайденныеСтроки = ТаблицаРасчетаПоОбъектам.НайтиСтроки(Новый Структура("Объект, Услуга, ВидПоказания", НоваяСтрока.Объект, НоваяСтрока.Услуга, НоваяСтрока.ВидПоказания));
					
					СуммарныйРасход = 0;
					Для Каждого СтрокаРасчета Из НайденныеСтроки Цикл
						СуммарныйРасход = СуммарныйРасход + СтрокаРасчета.Показание;
					КонецЦикла;
					
					НоваяСтрока.Показание = НоваяСтрока.Показание + СтрокиПоОбъекту[0].ПоказаниеСчЛС - СуммарныйРасход;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Конец цикла по видам тарифа
		
	КонецЦикла; // Конец цикла по объектам
	
	// Удалим строки с нулевыми показаниями.
	// Если в РН Расчет ПУ нет прихода по какому-либо счетчику (по документу ввода показаний нет расхода),
	// а в документе начисления вводят показания, то нужно распределить введенный расход по счетчикам.
	Для Каждого Показание Из ТаблицаСводныхПоказаний Цикл
		
		// Для каждого показания из таблицы сводных показаний по лицевому счету будем искать строки в таблице расчета.
		НайденныеСтроки = ТаблицаРасчетаПоОбъектам.НайтиСтроки(Новый Структура("Объект, ВидПоказания", Показание.ЛицевойСчет, Показание.ВидТарифа));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Если в таблице расчета нет таких строк, а в таблице показаний они есть, значит нужно распределить показания
			// по видам тарифа по существующим счетчикам.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Объект",    Показание.ЛицевойСчет);
			СтруктураОтбора.Вставить("ВидТарифа", Показание.ВидТарифа);
			
			СтрокиПоВсемСчетчикам = ТаблицаСчетчиков.НайтиСтроки(СтруктураОтбора);
			КоличествоСчетчиков = СтрокиПоВсемСчетчикам.Количество();
			
			СуммарныйРасход = 0;
			НоваяСтрока = Неопределено;
			
			Для Каждого СтрокаСчетчика Из СтрокиПоВсемСчетчикам Цикл
				
				РазмерПоказания = Показание.ПоказаниеСчЛС;
				
				Если ТипЗнч(СтрокаСчетчика.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
					
					СтруктураПоискаСписания = Новый Структура;
					СтруктураПоискаСписания.Вставить("ВидПоказания", СтрокаСчетчика.ВидТарифа);
					СтруктураПоискаСписания.Вставить("Объект",       СтрокаСчетчика.Объект.Адрес);
					СтруктураПоискаСписания.Вставить("Счетчик",      СтрокаСчетчика.Счетчик);
					
					НайденныеСтрокиСписанияПоПомещению = ТаблицаРасчетаПоОбъектам.НайтиСтроки(СтруктураПоискаСписания);
					
					Если НайденныеСтрокиСписанияПоПомещению.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРасчетаПоОбъектам.Добавить();
				НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
				НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
				НоваяСтрока.Услуга       = СтрокаСчетчика.Счетчик.ВидУслуги;
				НоваяСтрока.ВидПоказания = СтрокаСчетчика.ВидТарифа;
				НоваяСтрока.Показание    = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(Показание.ПоказаниеСчЛС / ?(КоличествоСчетчиков = 0, 1, КоличествоСчетчиков), мТочностьОбъемаНачислений);
				СуммарныйРасход = СуммарныйРасход + НоваяСтрока.Показание;
			КонецЦикла;
			
			// Для учета погрешности, которая могла возникнуть при распределении расхода,
			// необходимо сверить суммарный расход по счетчикам и общий расход.
			// Если суммы расходов отличаются, то необходимо откорректировать величину расхода последнего счетчика.
			Если НЕ НоваяСтрока = Неопределено И НЕ СуммарныйРасход = Показание.ПоказаниеСчЛС Тогда
				НоваяСтрока.Показание = НоваяСтрока.Показание + Показание.ПоказаниеСчЛС - СуммарныйРасход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим строки с нулевыми показаниями.
	МассивСтрокДляУдаления = Новый Массив;
	МассивСтрокДляУдаления = ТаблицаРасчетаПоОбъектам.НайтиСтроки(Новый Структура("Показание", 0));
	
	Для Каждого ТекСтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаРасчетаПоОбъектам.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	ТаблицаРасчетаПоОбъектам.Свернуть("Активность, ВидДвижения, Период, Услуга, Объект, Счетчик, ВидПоказания", 
									  "Показание");
	
	ТаблицаРасчетаПоОбъектам.ЗаполнитьЗначения(Истина,                         "Активность");
	ТаблицаРасчетаПоОбъектам.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,   "ВидДвижения");
	ТаблицаРасчетаПоОбъектам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,   "Период");
	//ТаблицаРасчетаПоОбъектам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Услуга, "Услуга");
	
	НаборДвижений.Загрузить(ТаблицаРасчетаПоОбъектам);
	
КонецПроцедуры // ДвижениеПоРегиструРасчетПриборовУчета()

// Формирует движения по регистру "Данные для сторнирования начислений при отсутствии показаний ИПУ" при начислении по ПУ.
Процедура ДвижениеПоРегиструДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	// Таблица "ТаблицаПоУслугам" к моменту проведения уже дополнена зависимыми услугами 
	// и строками сторно по зависимым услугам.
	
	// Приход
	
	// Записываем объемы начислений для последующего сторнирования.
	// Подлежат сторнированию только начисления при отсутствии показаний ИПУ 
	// при наличии действующего ИПУ (по нормативу или среднему в данном случае значения не имеет).
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СостояниеПУ", Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний);
	СтруктураОтбора.Вставить("Сторно",      Ложь);
	
	СтрокиСторно = ТаблицаПоУслугам.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из СтрокиСторно Цикл
		
		// Корректнее ориентироваться на сумму
		// Варианты: 
		// 1. В настройках не установлено начисление по среднему/норме при отсутствии показаний, т.е. объем = 0, сумма = 0.
		// 2. Норма/среднее есть, но тариф нулевой, сумма ноль. В рез-те ничего не начислили, объем > 0, сумма = 0.
		
		Если ТекущаяСтрока.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Добавить();
		Движение.ВидДвижения     = ВидДвиженияНакопления.Приход;
		Движение.Период          = СтруктураШапкиДокумента.Дата;
		ЗаполнитьЗначенияСвойств(Движение, ТекущаяСтрока);
		Движение.Количество      = ТекущаяСтрока.ПоказаниеСчЛС;
		
	КонецЦикла;
	
	// Расход
	
	// Списываем отсторнированные объемы.
	
	СтруктураОтбора.Удалить("СостояниеПУ");
	СтруктураОтбора.Вставить("Сторно",      Истина);
	
	СтрокиСторно = ТаблицаПоУслугам.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из СтрокиСторно Цикл
		
		Движение = Движения.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Добавить();
		Движение.ВидДвижения     = ВидДвиженияНакопления.Расход;
		Движение.Период          = СтруктураШапкиДокумента.Дата;
		ЗаполнитьЗначенияСвойств(Движение, ТекущаяСтрока);
		
		// Тариф для сторнирования - тариф, действующий на момент начисления расхода 
		// по услуге при отсутствии показаний ИПУ, подлежащий сторнированию в последующих периодах.
		
		// В зависимости от настройки сторнирования начислений, задаваемой в настройках параметров учета, 
		// сторнирование может производиться:
		// 1) по актуальному тарифу, т.е. объем, подлежащий сторнированию, умножается на действующий на момент сторнировки тариф.
		// 2) по тарифу начисления, когда сторнировка выполняется с учетом тарифа, действующего на момент начисления.
		// В первом случае тариф может не совпадать с тарифом сторнирования, 
		// поэтому списание производим именно по тарифу начисления, чтобы остатки закрывались.
		
		Движение.Тариф           = ТекущаяСтрока.ТарифДляСторнирования;
		Движение.Количество      = ТекущаяСтрока.ПоказаниеСчЛС;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ()

// Формирует движения по регистру "Расхождения объемов потребления по ПУ и нормативу" при начислении по ПУ.
Процедура ДвижениеПоРегиструРасхожденияОбъемовПотребленияПоПУИНормативу(СтруктураШапкиДокумента, ТаблицаПоУслугам, СписокУслуг)
	
	Если Не НастройкаКорректировкиОДН.Использовать Или Дата < НастройкаКорректировкиОДН.ДатаНачалаИспользования Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу для формирования движений.
	НаборДвижений = Движения.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу;
	
	ТаблицаРасхождений = НаборДвижений.Выгрузить();
	ТаблицаРасхождений.Очистить();
	
	// Получим таблицу начислений с необходимыми полями.
	ТаблицаНачислений = ТаблицаПоУслугам.Скопировать(, "ЛицевойСчет, Услуга, УслугаОснование, ВидТарифа, НачалоПериода, ПоказаниеСчЛС, КоличествоРаспределенияЗдание, КоличествоРаспределенияПодъезд, КоличествоРаспределенияПомещение, СостояниеПУ, Сторно");
	
	// Определим параметры, необходимые для получения сведений о начислениях,
	// по которым введено сторно.
	СтрокиСторно = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сторно, УслугаОснование", Истина, Справочники.КВП_Услуги.ПустаяСсылка()));
	врТаблицаСторно = ТаблицаНачислений.Скопировать(СтрокиСторно);
	
	МассивЛССторно = врТаблицаСторно.ВыгрузитьКолонку("ЛицевойСчет");
	
	МассивМесяцевНачисленияСторно = врТаблицаСторно.ВыгрузитьКолонку("НачалоПериода");
	Для ТекНомер = 0 По МассивМесяцевНачисленияСторно.Количество() - 1 Цикл
		МассивМесяцевНачисленияСторно[ТекНомер] = НачалоДня(КонецМесяца(МассивМесяцевНачисленияСторно[ТекНомер]));
	КонецЦикла;
	
	// Определим список услуг для получения данных сторно.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Услуга", Услуга);
	СписокДопУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("УслугаОбщедомовогоСчетчика");
	
	СписокУслугСторно = СписокУслуг.Скопировать();
	
	Для Каждого ТекДопУслуга Из СписокДопУслуг Цикл
		СписокУслугСторно.Добавить(ТекДопУслуга);
	КонецЦикла;
	
	// Определим запрос получения данных.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ТаблицаПоУслугам.ВыгрузитьКолонку("ЛицевойСчет"));
	
	Запрос.УстановитьПараметр("МесяцНачисленияСторно", МассивМесяцевНачисленияСторно);
	Запрос.УстановитьПараметр("ЛицевойСчетСторно",     МассивЛССторно);
	Запрос.УстановитьПараметр("СписокУслугСторно",     СписокУслугСторно);
	
	Запрос.УстановитьПараметр("УчтенныеОбъемыРасхожденийПУ", УчтенныеОбъемыРасхожденийПУ.Выгрузить());
	Запрос.УстановитьПараметр("ОбъектыСРаспределеннымРасходомОДН", ОбъектыСРаспределеннымРасходомОДН.Выгрузить());
	
	// ОСОБЕННОСТЬ:
	//
	// Планы оптимизации:
	// Сейчас определение того, было ли распределение на л/с в месяцы, за который производится
	// сторнирование, берется по оборотам начислений ОПУ в регистре "Начисления", а также
	// по новому регистру сведений "Сведения о распределении ОДН на лицевые счета".
	// В будущем планируется полностью перейти на использование только регистра сведений.
	//
	// Описание проблемы
	// Требуется доработка, так как сейчас для услуг общедомового счетчика регистр
	// сведений может заполняться некорректно, например, в следующей ситуации:
	// Услуга-база и общедомовая услуги начисляются отдельными документами, причем индивидуальные начисления
	// формируются только услугой-базой, а общедомовая услуга не имеет индивидуальных начислений,
	// а предназначена только для распределения ОДН. В таком случае сведения о распределении ОДН
	// не фиксируются в регистре сведений, так как в начислении услуги-базы нет ОДН, а в начислении
	// общедомовой услуги нет индивидуальных начислений, которые повлияли на ОДН, т.е. данные разбросаны.
	//
	// Предложение по реализации:
	// Для решения описанной проблемы нужно получать данные об индивидуальных начислениях услуги-базы расчета
	// при проведении начисления по общедомовой услуги в процедуре "ДвижениеПоРегиструСведенияОРаспределенииОДННаЛицевыеСчета".
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.Услуга,
	|	ТаблицаДанных.УслугаОснование,
	|	ТаблицаДанных.ВидТарифа,
	|	ТаблицаДанных.НачалоПериода,
	|	ТаблицаДанных.ПоказаниеСчЛС,
	|	ТаблицаДанных.КоличествоРаспределенияЗдание,
	|	ТаблицаДанных.КоличествоРаспределенияПодъезд,
	|	ТаблицаДанных.КоличествоРаспределенияПомещение,
	|	ТаблицаДанных.СостояниеПУ,
	|	ТаблицаДанных.Сторно
	|ПОМЕСТИТЬ врТаблицаДанных
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыСРаспределеннымРасходомОДН.ВидОбъекта,
	|	ОбъектыСРаспределеннымРасходомОДН.Объект
	|ПОМЕСТИТЬ врОбъектыСРаспределеннымРасходомОДН
	|ИЗ
	|	&ОбъектыСРаспределеннымРасходомОДН КАК ОбъектыСРаспределеннымРасходомОДН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйНаличиеРаспределения.ЛицевойСчет,
	|	ВложенныйНаличиеРаспределения.МесяцНачисления
	|ПОМЕСТИТЬ врОборотыНачисленийСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|		УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
	|	ИЗ
	|		РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				,
	|				,
	|				,
	|				Организация = &Организация
	|					И МесяцНачисления В (&МесяцНачисленияСторно)
	|					И Услуга В (&СписокУслугСторно)
	|					И ЛицевойСчет В (&ЛицевойСчетСторно)
	|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)) КАК УПЖКХ_НачисленияОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет,
	|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета КАК УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета
	|	ГДЕ
	|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Организация = &Организация
	|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления В(&МесяцНачисленияСторно)
	|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Услуга В(&СписокУслугСторно)
	|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет В(&ЛицевойСчетСторно)) КАК ВложенныйНаличиеРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДанных.ЛицевойСчет,
	|	врТаблицаДанных.Услуга,
	|	врТаблицаДанных.ВидТарифа,
	|	врТаблицаДанных.ПоказаниеСчЛС КАК Количество
	|ИЗ
	|	врТаблицаДанных КАК врТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врОборотыНачисленийСторно КАК врОборотыНачисленийСторно
	|		ПО врТаблицаДанных.ЛицевойСчет = врОборотыНачисленийСторно.ЛицевойСчет
	|			И (КОНЕЦПЕРИОДА(врТаблицаДанных.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(врОборотыНачисленийСторно.МесяцНачисления, МЕСЯЦ))
	|ГДЕ
	|	врТаблицаДанных.Сторно
	|	И врТаблицаДанных.ПоказаниеСчЛС > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчтенныеОбъемыРасхожденийПУ.Учтено,
	|	УчтенныеОбъемыРасхожденийПУ.ЛицевойСчет,
	|	УчтенныеОбъемыРасхожденийПУ.Услуга,
	|	УчтенныеОбъемыРасхожденийПУ.ВидТарифа,
	|	УчтенныеОбъемыРасхожденийПУ.Количество
	|ПОМЕСТИТЬ врУчтенныеОбъемыРасхожденийПУ
	|ИЗ
	|	&УчтенныеОбъемыРасхожденийПУ КАК УчтенныеОбъемыРасхожденийПУ
	|ГДЕ
	|	УчтенныеОбъемыРасхожденийПУ.Учтено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врУчтенныеОбъемыРасхожденийПУ.Учтено,
	|	врУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет,
	|	врУчтенныеОбъемыРасхожденийПУ.Услуга,
	|	врУчтенныеОбъемыРасхожденийПУ.ВидТарифа,
	|	врУчтенныеОбъемыРасхожденийПУ.Количество,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд
	|ПОМЕСТИТЬ врУчтенныеОбъемыРасхожденийПУСОбъектами
	|ИЗ
	|	врУчтенныеОбъемыРасхожденийПУ КАК врУчтенныеОбъемыРасхожденийПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО врУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врУчтенныеОбъемыРасхожденийПУСОбъектами.ЛицевойСчет,
	|	врУчтенныеОбъемыРасхожденийПУСОбъектами.Услуга,
	|	врУчтенныеОбъемыРасхожденийПУСОбъектами.ВидТарифа,
	|	врУчтенныеОбъемыРасхожденийПУСОбъектами.Количество
	|ИЗ
	|	врУчтенныеОбъемыРасхожденийПУСОбъектами КАК врУчтенныеОбъемыРасхожденийПУСОбъектами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врОбъектыСРаспределеннымРасходомОДН КАК врОбъектыСРаспределеннымРасходомОДН
	|		ПО (врОбъектыСРаспределеннымРасходомОДН.ВидОбъекта = ""Здание""
	|					И врОбъектыСРаспределеннымРасходомОДН.Объект = врУчтенныеОбъемыРасхожденийПУСОбъектами.Здание
	|				ИЛИ врОбъектыСРаспределеннымРасходомОДН.ВидОбъекта = ""Подъезд""
	|					И врОбъектыСРаспределеннымРасходомОДН.Объект = врУчтенныеОбъемыРасхожденийПУСОбъектами.Подъезд)";
	
	МассивРезультата = Запрос.ВыполнитьПакет();
	
	// Отразим начисления сторно для учета.
	ТаблицаНачисленияСторно = МассивРезультата[3].Выгрузить();
	
	Для Каждого ТекСтрокаСторно Из ТаблицаНачисленияСторно Цикл
		
		НовоеДвижение = ТаблицаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаСторно);
		
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
	КонецЦикла;
	
	// Отразим учтенные объемы.
	ТаблицаУчтенныхОбъемов  = МассивРезультата[6].Выгрузить();
	
	Для Каждого ТекСтрокаУчтенногоОбъема Из ТаблицаУчтенныхОбъемов Цикл
		
		НовоеДвижение = ТаблицаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаУчтенногоОбъема);
		
		НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
	КонецЦикла;
	
	// Доработаем таблицу движений перед помещением в набор записей.
	ТаблицаРасхождений.Свернуть("Активность, ВидДвижения, Период, Услуга, ЛицевойСчет, ВидТарифа", "Количество");
	
	ТаблицаРасхождений.ЗаполнитьЗначения(Истина,                         "Активность");
	ТаблицаРасхождений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,   "Период");
	
	НаборДвижений.Загрузить(ТаблицаРасхождений);
	
КонецПроцедуры // ДвижениеПоРегиструРасхожденияОбъемовПотребленияПоПУИНормативу()

// Формирует движения по регистру "Сведения о распределении ОДН на лицевые счета" при начислении по ПУ.
Процедура ДвижениеПоРегиструСведенияОРаспределенииОДННаЛицевыеСчета(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	// Подготовим таблицу для формирования движений.
	НаборДвижений = Движения.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Получим данные для формирования движений.
	Запрос = Новый Запрос;
	
	// Подготовим таблицу начислений с нужными полями для запроса.
	СтруктураОтбора = СтруктураОтбораСтрокПУБезСторноИПовышающихКоэффициентов();
	СтруктураОтбора.Вставить("УслугаОснование", Справочники.КВП_Услуги.ПустаяСсылка());
	
	НайденныеСтроки = ТаблицаПоУслугам.НайтиСтроки(СтруктураОтбора);
	врТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать(НайденныеСтроки, "ЛицевойСчет,Услуга,ТипРасчета,ПоказаниеСчЛС");
	врТаблицаПоУслугам.Свернуть("ЛицевойСчет,Услуга,ТипРасчета", "ПоказаниеСчЛС");
	
	Запрос.УстановитьПараметр("ТаблицаПоУслугам",                  врТаблицаПоУслугам);
	
	Запрос.УстановитьПараметр("ОбъектыСРаспределеннымРасходомОДН", ОбъектыСРаспределеннымРасходомОДН.Выгрузить());
	
	Запрос.УстановитьПараметр("ТипРасчетаПоПоказаниям", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
	Запрос.УстановитьПараметр("ТипРасчетаПоНорме",      Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
	Запрос.УстановитьПараметр("ТипРасчетаПоСреднему",   Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыСРаспределеннымРасходомОДН.ВидОбъекта,
	|	ОбъектыСРаспределеннымРасходомОДН.Объект
	|ПОМЕСТИТЬ врОбъектыСРаспределеннымРасходомОДН
	|ИЗ
	|	&ОбъектыСРаспределеннымРасходомОДН КАК ОбъектыСРаспределеннымРасходомОДН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.ЛицевойСчет,
	|	ТаблицаПоУслугам.Услуга,
	|	ТаблицаПоУслугам.ТипРасчета,
	|	ТаблицаПоУслугам.ПоказаниеСчЛС
	|ПОМЕСТИТЬ врТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаПоУслугам.ЛицевойСчет,
	|	врТаблицаПоУслугам.Услуга,
	|	врТаблицаПоУслугам.ТипРасчета,
	|	врТаблицаПоУслугам.ПоказаниеСчЛС,
	|	КВП_Услуги.СоставСуммарногоРасходаИПУДляРаспределения,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд
	|ПОМЕСТИТЬ ТаблицаПоУслугамСоВспДанными
	|ИЗ
	|	врТаблицаПоУслугам КАК врТаблицаПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО врТаблицаПоУслугам.Услуга = КВП_Услуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО врТаблицаПоУслугам.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПоУслугамСоВспДанными.ЛицевойСчет,
	|	ТаблицаПоУслугамСоВспДанными.Услуга,
	|	ТаблицаПоУслугамСоВспДанными.Здание,
	|	ТаблицаПоУслугамСоВспДанными.Подъезд
	|ПОМЕСТИТЬ ЛицевыеСчетаПоВидамНачислений
	|ИЗ
	|	ТаблицаПоУслугамСоВспДанными КАК ТаблицаПоУслугамСоВспДанными
	|ГДЕ
	|	(ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоПоказаниям
	|			ИЛИ ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоНорме
	|				И (ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу)
	|					ИЛИ ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему))
	|			ИЛИ ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоСреднему
	|				И ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему))
	|	И НЕ ТаблицаПоУслугамСоВспДанными.ПоказаниеСчЛС = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛицевыеСчетаПоВидамНачислений.ЛицевойСчет,
	|	ЛицевыеСчетаПоВидамНачислений.Услуга
	|ИЗ
	|	врОбъектыСРаспределеннымРасходомОДН КАК врОбъектыСРаспределеннымРасходомОДН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛицевыеСчетаПоВидамНачислений КАК ЛицевыеСчетаПоВидамНачислений
	|		ПО (врОбъектыСРаспределеннымРасходомОДН.ВидОбъекта = ""Здание""
	|					И врОбъектыСРаспределеннымРасходомОДН.Объект = ЛицевыеСчетаПоВидамНачислений.Здание
	|				ИЛИ врОбъектыСРаспределеннымРасходомОДН.ВидОбъекта = ""Подъезд""
	|					И врОбъектыСРаспределеннымРасходомОДН.Объект = ЛицевыеСчетаПоВидамНачислений.Подъезд)";
	
	ВыборкаЛицевыхСчетовСРаспределением = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛицевыхСчетовСРаспределением.Следующий() Цикл
		
		НовоеДвижение = ТаблицаДвижений.Добавить();
		НовоеДвижение.ЛицевойСчет = ВыборкаЛицевыхСчетовСРаспределением.ЛицевойСчет;
		НовоеДвижение.Услуга      = ВыборкаЛицевыхСчетовСРаспределением.Услуга;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(КонецМесяца(СтруктураШапкиДокумента.Дата), "МесяцНачисления");
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСведенияОРаспределенииОДННаЛицевыеСчета()

// Формирует движения по регистру "Начисления по добровольному страхованию".
Процедура ДвиженияВРегистреНачисленияДобровольногоСтрахования(ТаблицаПоУслугам, ЗаполнятьДоговорВПроводках)
	
	Для Каждого СтрокаНачисления Из ТаблицаПоУслугам Цикл
		Движение = Движения.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Добавить();
		
		Движение.Период          = Дата;
		Движение.Организация     = Организация;
		Движение.ЛицевойСчет     = СтрокаНачисления.ЛицевыеСчета;
		Движение.Услуга          = СтрокаНачисления.Услуга;
		Движение.МесяцНачисления = КонецМесяца(ДобавитьМесяц(Дата, 2));
		Движение.Тариф           = СтрокаНачисления.Тариф;
		Движение.Количество      = СтрокаНачисления.Количество;
		Движение.СуммаНачисления = СтрокаНачисления.Начислено;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаНачисления.Договор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреНачисленияДобровольногоСтрахования()

// Процедура выполняет проверку использования проведения .
Процедура ПроверитьИспользованиеЗависимыхУслугПоОрганизациям(Отказ)
	
	// Для истории:
	// Коды клиентов в БЗ, которые использовали или используют функционал:
	// ФР-002973 (обращение К00332614),
	// 00-001677 (обращение К00319270),
	// -00033266 (обращение К00349347),
	// -00002899 (обращение К00358289),
	// -00025916 (обращение К00363688).
	
	Если мЗависимыеУслугиПоОрганизациям 
	   И (ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ
	   ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета) Тогда
		
		ТекстСообщения = "В текущей информационной базе используется начисление зависимых услуг по организациям, отличным от организации начисления основной услуги. 
						 |Данная возможность не является частью заявленного в программе функционала, и в текущей версии программы она была переработана. 
						 |Для возможности продолжения работы просим вас обратиться на линию технической поддержки разработчика программы.
						 |
						 |Вы можете связаться с нами одним из следующих способов: 
						 |Тел. для Москвы и Московской Области: + 7 (495) 777-25-43. 
						 |Тел. для регионов: + 7 (8362) 49-46-89. 
						 |Прочие контактные данные доступны в разделе «Контакты» на сайте https://otr-soft.ru/";
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИспользованиеЗависимыхУслугПоОрганизациям()

#КонецОбласти

#Область ФормированиеДвиженийПоРассрочке

// Формирует таблицу со сведениями, необходимыми для начисления рассрочки.
//
// Параметры:
//  СписокЛС - список лицевых счетов документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о рассрочке.
//
Функция ПолучитьТаблицуСведенийОРассрочке(ТаблицаЛС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки,
	|	СУММА(0) КАК СуммаКомиссии,
	|	СУММА(УПЖКХ_НачисленияПоРассрочкеОстатки.СуммаНачисленияОстаток) КАК СуммаОстатка,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку
	|ПОМЕСТИТЬ втНачисленияПоРассрочке
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_НачисленияПоРассрочкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Регистратор,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.СрокРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Договор,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидПлатежей,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.НачислениеВМесяц,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.СуммаРассрочки
	|ПОМЕСТИТЬ втСведенияОРассрочке
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРассрочке.СрезПоследних(
	|			&Дата,
	|			(ЛицевойСчет, Услуга, ЗаявлениеНаРассрочку) В
	|				(ВЫБРАТЬ
	|					втНачисленияПоРассрочке.ЛицевойСчет,
	|					втНачисленияПоРассрочке.Услуга,
	|					втНачисленияПоРассрочке.ЗаявлениеНаРассрочку
	|				ИЗ
	|					втНачисленияПоРассрочке КАК втНачисленияПоРассрочке)) КАК УПЖКХ_СведенияОРассрочкеСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.СрокРассрочки,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Договор,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Регистратор,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ВидПлатежей,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.НачислениеВМесяц,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.СуммаРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки,
	|	СУММА(ВЫБОР
	|			КОГДА втНачисленияПоРассрочке.СуммаОстатка >= втСведенияОРассрочке.НачислениеВМесяц
	|				ТОГДА втСведенияОРассрочке.НачислениеВМесяц
	|			ИНАЧЕ втНачисленияПоРассрочке.СуммаОстатка
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(втНачисленияПоРассрочке.СуммаКомиссии) КАК СуммаКомиссии,
	|	СУММА(втНачисленияПоРассрочке.СуммаОстатка) КАК СуммаОстатка,
	|	втСведенияОРассрочке.ГодоваяПроцентнаяСтавка КАК ГодоваяПроцентнаяСтавка,
	|	втСведенияОРассрочке.ВидПлатежей КАК ВидПлатежей,
	|	втСведенияОРассрочке.СуммаРассрочки КАК СуммаРассрочки,
	|	втСведенияОРассрочке.ВидРассрочки КАК ВидРассрочки,
	|	втСведенияОРассрочке.СрокРассрочки КАК СрокРассрочки,
	|	втСведенияОРассрочке.Договор КАК Договор,
	|	втНачисленияПоРассрочке.ЗаявлениеНаРассрочку
	|ИЗ
	|	втНачисленияПоРассрочке КАК втНачисленияПоРассрочке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияОРассрочке КАК втСведенияОРассрочке
	|		ПО втНачисленияПоРассрочке.ЗаявлениеНаРассрочку = втСведенияОРассрочке.Регистратор
	|			И втНачисленияПоРассрочке.ЛицевойСчет = втСведенияОРассрочке.ЛицевойСчет
	|			И втНачисленияПоРассрочке.Услуга = втСведенияОРассрочке.Услуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втНачисленияПоРассрочке.ЛицевойСчет = втЛицевыеСчета.ЛицевойСчет
	|ГДЕ
	|	НЕ втНачисленияПоРассрочке.СуммаОстатка = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|	втНачисленияПоРассрочке.МесяцРассрочки,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втСведенияОРассрочке.ГодоваяПроцентнаяСтавка,
	|	втСведенияОРассрочке.ВидПлатежей,
	|	втСведенияОРассрочке.СуммаРассрочки,
	|	втСведенияОРассрочке.ВидРассрочки,
	|	втСведенияОРассрочке.СрокРассрочки,
	|	втСведенияОРассрочке.Договор";
	
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаЛС",   ТаблицаЛС);
	
	ТаблицаРассрочки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаРассрочки Цикл
		
		МесячнаяПроцентнаяСтавка = Строка.ГодоваяПроцентнаяСтавка / 12;
		
		Если Строка.ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Аннуитетные") Тогда
			
			ЗнаменательДроби = Pow(1 + МесячнаяПроцентнаяСтавка, Строка.СрокРассрочки) - 1;
			ЗнаменательДроби = ?(ЗнаменательДроби = 0, 1, ЗнаменательДроби);
			
			ИтоговыйРазмерПлаты = Строка.СуммаРассрочки * (МесячнаяПроцентнаяСтавка + МесячнаяПроцентнаяСтавка / ЗнаменательДроби);
			КомиссияЗаРассрочку = Строка.СуммаОстатка * МесячнаяПроцентнаяСтавка;
			СуммаРассрочки      = ?(ИтоговыйРазмерПлаты > Строка.СуммаОстатка, Строка.СуммаОстатка, ИтоговыйРазмерПлаты - КомиссияЗаРассрочку);
			
			Строка.СуммаНачисления = СуммаРассрочки;
			Строка.СуммаКомиссии   = КомиссияЗаРассрочку;
		Иначе
			
			Строка.СуммаКомиссии = Строка.СуммаОстатка * МесячнаяПроцентнаяСтавка;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРассрочки;
	
КонецФункции // ПолучитьТаблицуСведенийОРассрочке()

// Процедура выполняет проверку дублирования начислений по рассрочке
// в текущем месяце.
Процедура ПроверитьДублированиеНачисленийПоРассрочке(Отказ)
	
	// Очистим движения начислений по рассрочке для проверки наличия прочих
	// начислений в текущем месяце.
	Если Проведен Тогда
		Движения.УПЖКХ_НачисленияПоРассрочке.Очистить();
		Движения.УПЖКХ_НачисленияПоРассрочке.Записывать = Истина;
		Движения.Записать();
	КонецЕсли;
	
	// Проверим, не начислена ли уже рассрочка в текущем месяце.
	ЗапросПроверкиДублированияНачисленияРассрочки = Новый Запрос;
	ЗапросПроверкиДублированияНачисленияРассрочки.УстановитьПараметр("Период", Дата);
	ЗапросПроверкиДублированияНачисленияРассрочки.Текст =
	"ВЫБРАТЬ
	|	врТаблицаНачисленияПоРассрочке.НомерСтроки,
	|	врТаблицаНачисленияПоРассрочке.ЛицевойСчет,
	|	врТаблицаНачисленияПоРассрочке.Услуга,
	|	врТаблицаНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|	врТаблицаНачисленияПоРассрочке.МесяцРассрочки
	|ПОМЕСТИТЬ врТаблицаНачисленияПоРассрочке
	|ИЗ
	|	&врТаблицаНачисленияПоРассрочке КАК врТаблицаНачисленияПоРассрочке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.ЗаявлениеНаРассрочку,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.СуммаНачисленияРасход
	|ПОМЕСТИТЬ врИмеющиесяВИБНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
	|			,
	|			ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Начисление)
	|				И (ЛицевойСчет, Услуга, ЗаявлениеНаРассрочку, МесяцРассрочки) В
	|					(ВЫБРАТЬ
	|						врТаблицаНачисленияПоРассрочке.ЛицевойСчет,
	|						врТаблицаНачисленияПоРассрочке.Услуга,
	|						врТаблицаНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|						врТаблицаНачисленияПоРассрочке.МесяцРассрочки
	|					ИЗ
	|						врТаблицаНачисленияПоРассрочке КАК врТаблицаНачисленияПоРассрочке)) КАК УПЖКХ_НачисленияПоРассрочкеОбороты
	|ГДЕ
	|	НЕ УПЖКХ_НачисленияПоРассрочкеОбороты.СуммаНачисленияРасход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаНачисленияПоРассрочке.НомерСтроки,
	|	врТаблицаНачисленияПоРассрочке.ЛицевойСчет,
	|	врТаблицаНачисленияПоРассрочке.Услуга,
	|	врТаблицаНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|	врТаблицаНачисленияПоРассрочке.МесяцРассрочки,
	|	врИмеющиесяВИБНачисления.СуммаНачисленияРасход
	|ИЗ
	|	врТаблицаНачисленияПоРассрочке КАК врТаблицаНачисленияПоРассрочке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врИмеющиесяВИБНачисления КАК врИмеющиесяВИБНачисления
	|		ПО врТаблицаНачисленияПоРассрочке.ЛицевойСчет = врИмеющиесяВИБНачисления.ЛицевойСчет
	|			И врТаблицаНачисленияПоРассрочке.Услуга = врИмеющиесяВИБНачисления.Услуга
	|			И врТаблицаНачисленияПоРассрочке.ЗаявлениеНаРассрочку = врИмеющиесяВИБНачисления.ЗаявлениеНаРассрочку
	|			И врТаблицаНачисленияПоРассрочке.МесяцРассрочки = врИмеющиесяВИБНачисления.МесяцРассрочки";
	
	врТаблицаНачисленияПоРассрочке = НачисленияПоРассрочке.Выгрузить(, "НомерСтроки,ЛицевойСчет,Услуга,ЗаявлениеНаРассрочку,МесяцРассрочки");
	ЗапросПроверкиДублированияНачисленияРассрочки.УстановитьПараметр("врТаблицаНачисленияПоРассрочке", врТаблицаНачисленияПоРассрочке);
	
	Выборка = ЗапросПроверкиДублированияНачисленияРассрочки.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка №" + Выборка.НомерСтроки + ": начисление рассрочки по услуге уже проведено в данном месяце.", Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистру "Начисления по рассрочке".
//
// Параметры:
//  СтрокаРассрочки - строка со сведениями, необходимыми для начислении рассрочки.
//
Процедура ДвиженияВРегистреНачисленияПоРассрочке(ТаблицаРассрочки)
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		
		Движение = Движения.УПЖКХ_НачисленияПоРассрочке.Добавить();
		Движение.Период               = Дата;
		Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
		Движение.Организация          = Организация;
		Движение.ЛицевойСчет          = СтрокаРассрочки.ЛицевойСчет;
		Движение.Услуга               = СтрокаРассрочки.Услуга;
		Движение.МесяцРассрочки       = СтрокаРассрочки.МесяцРассрочки;
		Движение.ВидОперации          = Перечисления.УПЖКХ_Рассрочка.Начисление;
		Движение.СуммаНачисления      = СтрокаРассрочки.СуммаНачисления;
		Движение.ЗаявлениеНаРассрочку = СтрокаРассрочки.ЗаявлениеНаРассрочку;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреСведенияОРассрочке()

// Формирует движения по начислению рассрочки в регистре "Начисления".
//
// Параметры:
//  СтрокаРассрочки - строка со сведениями, необходимыми для начислении рассрочки.
//
Процедура РассрочкаВРегистреНачисления(ТаблицаРассрочки, ЗаполнятьДоговорВПроводках)
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		
		// Рассрочка.
		Движение = Движения.УПЖКХ_Начисления.Добавить();
		Движение.Период          = Дата;
		Движение.Организация     = Организация;
		Движение.ЛицевойСчет     = СтрокаРассрочки.ЛицевойСчет;
		Движение.Услуга          = СтрокаРассрочки.Услуга;
		Движение.РазделУчета     = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
		Движение.ВидНачисления   = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
		Движение.МесяцНачисления = КонецМесяца(Дата);
		Движение.МесяцРассрочки  = СтрокаРассрочки.МесяцРассрочки;
		Движение.СуммаНачисления = СтрокаРассрочки.СуммаНачисления;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаРассрочки.Договор;
		КонецЕсли;
		
		// Комиссия за рассрочку.
		Если Не СтрокаРассрочки.СуммаКомиссии = 0 Тогда
			Движение = Движения.УПЖКХ_Начисления.Добавить();
			Движение.Период          = Дата;
			Движение.Организация     = Организация;
			Движение.ЛицевойСчет     = СтрокаРассрочки.ЛицевойСчет;
			Движение.Услуга          = СтрокаРассрочки.Услуга;
			Движение.РазделУчета     = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
			Движение.ВидНачисления   = Перечисления.УПЖКХ_ВидыНачислений.Комиссия;
			Движение.МесяцНачисления = КонецМесяца(Дата);
			Движение.МесяцРассрочки  = СтрокаРассрочки.МесяцРассрочки;
			Движение.СуммаНачисления = СтрокаРассрочки.СуммаКомиссии;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор = СтрокаРассрочки.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассрочкаВРегистреНачисления()

// Формирует движения по начислению рассрочки в регистре "Взаиморасчеты по лицевым счетам".
//
// Параметры:
//  СтрокаРассрочки - строка со сведениями, необходимыми для начислении рассрочки.
// 
Процедура РассрочкаВРегистреВзаиморасчетыПоЛицевымСчетам(ТаблицаРассрочки, ЗаполнятьДоговорВПроводках)
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		
		// Рассрочка.
		Движение = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
		Движение.ВидДвижения     = ВидДвиженияНакопления.Приход;
		Движение.Период          = Дата;
		Движение.Организация     = Организация;
		Движение.ЛицевойСчет     = СтрокаРассрочки.ЛицевойСчет;
		Движение.Услуга          = СтрокаРассрочки.Услуга;
		Движение.ВидНачисления   = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
		Движение.МесяцНачисления = КонецМесяца(Дата);
		Движение.МесяцРассрочки  = СтрокаРассрочки.МесяцРассрочки;
		Движение.СуммаНачисления = СтрокаРассрочки.СуммаНачисления;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаРассрочки.Договор;
		КонецЕсли;
		
		// Комиссия за рассрочку.
		Если Не СтрокаРассрочки.СуммаКомиссии = 0 Тогда
			Движение = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
			Движение.ВидДвижения     = ВидДвиженияНакопления.Приход;
			Движение.Период          = Дата;
			Движение.Организация     = Организация;
			Движение.ЛицевойСчет     = СтрокаРассрочки.ЛицевойСчет;
			Движение.Услуга          = СтрокаРассрочки.Услуга;
			Движение.ВидНачисления   = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
			Движение.МесяцНачисления = КонецМесяца(Дата);
			Движение.МесяцРассрочки  = СтрокаРассрочки.МесяцРассрочки;
			Движение.СуммаНачисления = СтрокаРассрочки.СуммаКомиссии;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор = СтрокаРассрочки.Договор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассрочкаВРегистреВзаиморасчетыПоЛицевымСчетам()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		
		СтруктураОтбора = Новый Структура("Зависимая", Ложь);
		СуммаДокумента  = КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "УслугиПоПоказаниямПУ", "Сумма", СтруктураОтбора)
					    + КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "УслугиПоПоказаниямПУ", "СуммаРаспределения", СтруктураОтбора);
		
		СтруктураОтбора.Вставить("Зависимая", Истина);
		СуммаПоЗависимымУслугам = КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "УслугиПоПоказаниямПУ", "Сумма", СтруктураОтбора)
							    + КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "УслугиПоПоказаниямПУ", "СуммаРаспределения", СтруктураОтбора);
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда
		СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "НачисленияПоРассрочке", "СуммаНачисления")
					   + КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "НачисленияПоРассрочке", "СуммаКомиссии")
	Иначе
		
		СтруктураОтбора = Новый Структура("Зависимая", Ложь);
		СуммаДокумента  = КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "Услуги", "Начислено", СтруктураОтбора);
		
		СтруктураОтбора.Вставить("Зависимая", Истина);
		СуммаПоЗависимымУслугам = КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ЭтотОбъект, "Услуги", "Начислено", СтруктураОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда
		ПроверитьДублированиеНачисленийПоРассрочке(Отказ);
	КонецЕсли;
	
	// ОСОБЕННОСТЬ:
	// Если используется настройка начисления зависимых в разрезе организаций,
	// то временно (для получения обратной связи) запрещаем проведение документа.
	ПроверитьИспользованиеЗависимыхУслугПоОрганизациям(Отказ);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_НачислениеУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор в проводках не заполняется.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если Не Отказ Тогда
		
		Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда
			
			// Рассрочку отражаем вне общего механизма проведения.
			ТаблицаРассрочки = НачисленияПоРассрочке.Выгрузить();
			
			ДвиженияВРегистреНачисленияПоРассрочке(ТаблицаРассрочки);
			
			РассрочкаВРегистреНачисления(ТаблицаРассрочки, ЗаполнятьДоговорВПроводках);
			РассрочкаВРегистреВзаиморасчетыПоЛицевымСчетам(ТаблицаРассрочки, ЗаполнятьДоговорВПроводках);
			
		ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
			
			ТаблицаПоУслугам = Услуги.Выгрузить();
			ТаблицаПоУслугам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			ТаблицаПоУслугам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
			
			ДвиженияВРегистреНачисленияДобровольногоСтрахования(ТаблицаПоУслугам, ЗаполнятьДоговорВПроводках);
			
		Иначе
			
			Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
				
				ТаблицаПоУслугам = УслугиПоПоказаниямПУ.Выгрузить();
				ТаблицаПоУслугам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
				ТаблицаПоУслугам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
				
				// Начисление зависимых услуг выполняется в табличной части документа
				// одновременно с начислением услуг-оснований.
				// При этом, если используется настройка начисления зависимых в разрезе организаций,
				// то дополним движения документа начислениями и сторно зависимых услуг по организациям,
				// отличным от организации начисления услуг-оснований.
				Если мЗависимыеУслугиПоОрганизациям Тогда
					
					// Дополним таблицу услуг начислениями зависимых услуг по прочим организациям.
					ДополнитьТаблицуУслугПУЗависимымиУслугами(ТаблицаПоУслугам, Истина);
					
					// Дополним таблицу услуг суммами сторно по прочим организациям
					ДополнитьТаблицуУслугПоПоказаниямСуммамиСторно(ТаблицаПоУслугам, Истина);
					
				КонецЕсли;
				
			Иначе
				
				ТаблицаПоУслугам = Услуги.Выгрузить();
				ТаблицаПоУслугам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
				ТаблицаПоУслугам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
				
				// Начисление зависимых услуг выполняется в табличной части документа
				// одновременно с начислением услуг-оснований.
				// При этом, если используется настройка начисления зависимых в разрезе организаций,
				// то дополним движения документа начислениями зависимых услуг по организациям,
				// отличным от организации начисления услуг-оснований.
				Если мЗависимыеУслугиПоОрганизациям Тогда
					
					// Определим границы периода начисления.
					НачалоПериода = НачалоМесяца(Дата);
					КонецПериода  = НачалоПериода + (СтруктураШапкиДокумента.КоличествоДнейНачисления - 1) * ДлинаСуток;
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
					СтруктураПараметров.Вставить("Период",         СтруктураШапкиДокумента.Дата);
					СтруктураПараметров.Вставить("Услуга",         СтруктураШапкиДокумента.Услуга);
					СтруктураПараметров.Вставить("НачалоПериода",  НачалоПериода);
					СтруктураПараметров.Вставить("КонецПериода",   КонецПериода);
					СтруктураПараметров.Вставить("СписокОбъектов", СтруктураШапкиДокумента.Объект);
					
					ДополнитьТаблицуНачисленийЗависимымиУслугами(ТаблицаПоУслугам, СтруктураПараметров, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Создадим таблицу значений, в которую поместим данные для движений.
			ТаблицаДвижений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
			
			ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках);
			
			УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
			                                                                        Новый Структура("Приход", ТаблицаДвижений));
			
			// Движения для отражения начислений в регл. учете.
			СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаНачислениеУслугПоПУЖкх", ВремяНачала);
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаНачислениеУслугПоОбычнойУслугеЖкх", ВремяНачала);
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры // ОбработкаПроведения()

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		ПроверяемыеРеквизиты.Добавить("Объект");
		ПроверяемыеРеквизиты.Добавить("Услуга");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Услуги.ЛицевойСчет");
	
	// Проверка реквизитов табличной части документа.
	Если Не ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.Услуга");
	КонецЕсли;
	
	
	// Для тех, кто использует новый механизм отражения начислений в регл. учете проверять заполненность договора
	// не будем, так в этом случае договор при формировании проводок не заполняется.
	Если Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата)
	 И (ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета
	 Или ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста) Тогда
		
		Для Каждого ТекСтрока Из Услуги Цикл
			Если ТекСтрока.Договор.Пустая() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекСтрока.НомерСтроки + " не заполнен договор");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ
		И Не ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки
		И Не ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
		// Проверим, не начислили ли уже услуги на объекты.
		СписокОбъектов = Услуги.ВыгрузитьКолонку("ЛицевыеСчета");
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачислениеУслугУслуги.ЛицевыеСчета КАК Объект,
		|	КВП_НачислениеУслугУслуги.Услуга,
		|	КВП_НачислениеУслугУслуги.УслугаОснование
		|ИЗ
		|	Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслугУслуги
		|ГДЕ
		|	КВП_НачислениеУслугУслуги.Ссылка <> &ТекущийДокумент
		|	И КВП_НачислениеУслугУслуги.Ссылка.Проведен
		|	И КВП_НачислениеУслугУслуги.ЛицевыеСчета В(&СписокОбъектов)
		|	И НАЧАЛОПЕРИОДА(КВП_НачислениеУслугУслуги.Ссылка.Дата, МЕСЯЦ) = &ДатаНачМес
		|	И КВП_НачислениеУслугУслуги.Начислено <> 0";
		
		Запрос.УстановитьПараметр("СписокОбъектов",  СписокОбъектов);
		Запрос.УстановитьПараметр("ДатаНачМес",      НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
		ТаблицаНачислений.Индексы.Добавить("Объект");
		
		Для Каждого ТекНачисление Из Услуги Цикл
			Если ТекНачисление.Начислено = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиОбъекта = ТаблицаНачислений.НайтиСтроки(Новый Структура("Объект, Услуга, УслугаОснование", 
																			ТекНачисление.ЛицевыеСчета, 
																			ТекНачисление.Услуга,
																			ТекНачисление.УслугаОснование));
			Если Не СтрокиОбъекта.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("На объект """ + ТекНачисление.ЛицевыеСчета
				+ """ : по услуге """ + ТекНачисление.Услуга + """ уже были начисления!", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки Тогда
		
		// Проверим заполнение основных параметров рассрочки.
		ПроверяемыеРеквизиты.Добавить("НачисленияПоРассрочке.ЛицевойСчет");
		ПроверяемыеРеквизиты.Добавить("НачисленияПоРассрочке.Услуга");
		ПроверяемыеРеквизиты.Добавить("НачисленияПоРассрочке.ЗаявлениеНаРассрочку");
		ПроверяемыеРеквизиты.Добавить("НачисленияПоРассрочке.МесяцРассрочки");
		ПроверяемыеРеквизиты.Добавить("НачисленияПоРассрочке.СуммаНачисления");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
			Документы.КВП_НачислениеУслуг.ПроверитьНаличиеНачисленийПоДобровольномуСтрахованию(Ссылка, Дата, Организация, Услуги.ВыгрузитьКолонку("ЛицевыеСчета"), Отказ);
		Иначе
			// В рамках тестирования функционала была воспроизведена учетная ситуация:
			// 1. Заполнили документ, но не проводили.
			// 2. В Настройках параметров учета (ЖКХ) сняли флаг "Вести учет начислений по добровольному страхованию".
			// 3. Провели документ.
			// При этом начисления по добровольному страхованию записываются в регистры, чего быть не должно.
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Учет начислений по добровольному страхованию не ведется. Проверьте настройки в ""Настройках параметров учета (ЖКХ)"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриКопировании" документа.
Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
КонецПроцедуры

#КонецОбласти

#Область РазделОсновнойПрограммы

мВалютаРегламентированногоУчета                    = Константы.ВалютаРегламентированногоУчета.Получить();
мИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ = Константы.УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ.Получить();
мЗависимыеУслугиПоОрганизациям                     = Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить();
мЗависимыеУслугиПоСобственномуНормативу            = Константы.УПЖКХ_НачислятьЗависимуюУслугуПоСобственномуНормативу.Получить();

мРасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний = Константы.УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний.Получить();
мСпособОпределенияСреднегоРасходаПоПриборамУчета             = Константы.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета.Получить();

Если мСпособОпределенияСреднегоРасходаПоПриборамУчета.Пустая() Тогда
	мСпособОпределенияСреднегоРасходаПоПриборамУчета = Перечисления.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСНенулевымРасходом;
КонецЕсли;

НастройкаКорректировкиОДН = Новый Структура;
НастройкаКорректировкиОДН.Вставить("ДатаНачалаИспользования",     Константы.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН.Получить());
НастройкаКорректировкиОДН.Вставить("Использовать",                ЗначениеЗаполнено(НастройкаКорректировкиОДН.ДатаНачалаИспользования));
НастройкаКорректировкиОДН.Вставить("УчитыватьСразуВПолномОбъеме", Константы.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу.Получить());

мТаблТарифовПоУслуге = Новый ТаблицаЗначений;
мТаблТарифовПоУслуге.Колонки.Добавить("Услуга");
мТаблТарифовПоУслуге.Колонки.Добавить("ВидТарифа");
мТаблТарифовПоУслуге.Колонки.Добавить("Тариф");

мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();

ДлинаСуток = 24 * 60 * 60;

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;

// Признак использования режима отладки расчетов.
ИспользоватьРежимОтладкиРасчетов = ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьРежимОтладкиРасчетов");

мПричиныВременногоОтключенияПУ = Новый Массив(3);
мПричиныВременногоОтключенияПУ[0] = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка;
мПричиныВременногоОтключенияПУ[1] = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Утрата;
мПричиныВременногоОтключенияПУ[2] = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.ВыходИзСтроя;

#КонецОбласти

#КонецЕсли