
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область СлужебныеПроцедурыиФункции

// Функция возвращает признак вывода предупреждения о начислениях зависимых услуг в разрезе организаций.
//
Функция ПолучитьНастройкуВыводаПредупрежденияОНачисленияхЗависимыхУслугВРазрезеОрганизаций() Экспорт
	
	// Значение по умолчанию.
	ПоказыватьПредупреждения = Ложь;
	
	// Получение настройки.
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ФормаПредупрежденияОЗависимыхУслугахВРазрезеОрганизаций", "ПоказыватьПредупреждение");
	Если ЗначениеНастройки = Неопределено Тогда
		
		ЗначениеНастройки = Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить();
		ХранилищеОбщихНастроек.Сохранить("ФормаПредупрежденияОЗависимыхУслугахВРазрезеОрганизаций", "ПоказыватьПредупреждение", ЗначениеНастройки);
		
	КонецЕсли;
	
	// Установим значение результата, если настройка получена.
	Если ЗначениеНастройки = Истина Тогда
		ПоказыватьПредупреждения = Истина;
	КонецЕсли;
	
	Возврат ПоказыватьПредупреждения;
	
КонецФункции

// Функция возвращает соответствие форм документа видам операций документа.
//
Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыНачислениеУслуг = Новый Соответствие;
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ,            "ФормаДокумента");
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета,            "ФормаДокумента");
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста, "ФормаДокумента");
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка,                       "ФормаДокумента");
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки,                 "ФормаДокумента");
	ФормыНачислениеУслуг.Вставить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования,  "ФормаДокумента");
	
	Возврат ФормыНачислениеУслуг;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Услуга,
	|	Реквизиты.Объект,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.КоличествоДнейНачисления,
	|	Реквизиты.Комментарий,
	|	Реквизиты.Ответственный,
	|	Реквизиты.НовыйДокумент,
	|	Реквизиты.РасходПоОбщедомовымУслугам,
	|	Реквизиты.СуммаДокумента
	|ИЗ
	|	Документ.КВП_НачислениеУслуг КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,Организация,Услуга,Объект,
								|ВидОперации,КоличествоДнейНачисления,Комментарий,Ответственный,
								|НовыйДокумент,РасходПоОбщедомовымУслугам,СуммаДокумента");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Реквизиты.Дата, Реквизиты.Организация, Отказ);
	
	РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
	ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
	
	Если Реквизиты.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета
	 ИЛИ Реквизиты.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования
	 ИЛИ Реквизиты.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста Тогда
		РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка Тогда
		РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка;
		
	КонецЕсли;
	
	Реквизиты.Вставить("РазделУчета",                 РазделУчета);
	Реквизиты.Вставить("ВидНачисленияНаЛицевыеСчета", ВидНачисленияНаЛицевыеСчета);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаПолученияФормы".
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = Неопределено; 
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыНачисленияУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыНачисленияУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаВыбораОперации";
		Параметры.Вставить("ИзменитьВидОперации");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает договор владельца парковочного места.
//
Функция ПолучитьДоговорВладельцаПарковочногоМеста(Дата, ЛицевыеСчета, Организация) Экспорт
	
	Договор = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ПарковочноеМесто", ЛицевыеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СведенияОПарковочныхМестахСрезПоследних.ВладелецМеста
	|ИЗ
	|	РегистрСведений.Удалить_КВП_СведенияОПарковочныхМестах.СрезПоследних(&Период, ПарковочноеМесто = &ПарковочноеМесто) КАК КВП_СведенияОПарковочныхМестахСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.ВладелецМеста) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			Договор  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Выборка.ВладелецМеста.Владелец,
			                                                                                          Организация, Дата, "Договор");
		Иначе
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если ЗначениеЗаполнено(Выборка.ВладелецМеста) Тогда
				УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(Договор, Выборка.ВладелецМеста, Организация);
			Иначе
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПРЕДЕЛЕНИЯ ПАРАМЕТРОВ РАСЧЕТА

// Функции возвращают значение типа индивидуального расчета.
//
// Возвращаемое значение: 
//		ТипРасчета - число.
//			Возможные значения:
//				0 – по показаниям,
//				1 – по норме,
//				2 – по среднему значению,
//				4 - не производить начисление по инд.расходу;

// Функция возвращает значение типа расчета по показаниям прибора учета.
Функция ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ() Экспорт
	
	Возврат 0;
	
КонецФункции //ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ()

// Функция возвращает значение типа расчета по нормативу потребления.
Функция ТипРасчета_ПолучитьЗначениеПоНормативу() Экспорт
	
	Возврат 1;
	
КонецФункции //ТипРасчета_ПолучитьЗначениеПоНормативу()

// Функция возвращает значение типа расчета по среднему расходу.
Функция ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу() Экспорт
	
	Возврат 2;
	
КонецФункции //ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу()

// Функция возвращает значение типа расчета не производить начисление.
Функция ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление() Экспорт
	
	Возврат 4;
	
КонецФункции //ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление()

// Функции возвращают значение формулы расчета.
//
// Возвращаемое значение: 
//		ФормулаРасчета - число.
//			Возможные значения: 
//				0 – значение не заполнено,
//				1 – расчет по настройкам услуги,
//				2 - по формулам №3 и 14 постановления №354;
//				3 - по формуле №15 постановления №354 (расчет ОДН по норме на здание): распределять норму на здание, но не уменьшать ИПУ;
//				4 - по формуле №3 постановления №344;
//				5 - по формуле №3(1) постановления №344;
//				6 - по формулам №2(3) и №2(5) постановления №1708;
//				7 - по формулам №3 и №3(6) постановления №1708;
//				8 - по формулам №3(1) и №3(7) постановления №1708;
//				9 - по формуле №3(3) постановления №1708.

// Функция возвращает значение расчета по настройкам услуги.
Функция ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги() Экспорт
	
	Возврат 1;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги()

// Функция возвращает значение формулы расчета по формулам 3 и 14 постановления №354.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14() Экспорт
	
	Возврат 2;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14()

// Функция возвращает значение формулы расчета по формуле 15 постановления №354.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормуле15() Экспорт
	
	Возврат 3;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормуле15()

// Функция возвращает значение формулы расчета по формуле 3 постановления №344.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормуле3Постановления344() Экспорт
	
	Возврат 4;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормуле3Постановления344()

// Функция возвращает значение формулы расчета по формуле 3(1) постановления №344.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормуле3_1Постановления344() Экспорт
	
	Возврат 5;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормуле3_1Постановления344()

// Функция возвращает значение формулы расчета по формулам 2(3) и 2(5) постановления №1708.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708() Экспорт
	
	Возврат 6;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормулам2_3И2_5Постановления1708()

// Функция возвращает значение формулы расчета по формулам 3 и 3(6) постановления №1708.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708() Экспорт
	
	Возврат 7;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормулам3И3_6Постановления1708()

// Функция возвращает значение формулы расчета по формулам 3(1) и 3(7) постановления №1708.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708() Экспорт
	
	Возврат 8;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормулам3_1И3_7Постановления1708()

// Функция возвращает значение формулы расчета по формуле 3(3) постановления №1708.
Функция ФормулаРасчета_ПолучитьЗначениеПоФормуле3_3Постановления1708() Экспорт
	
	Возврат 9;
	
КонецФункции //ФормулаРасчета_ПолучитьЗначениеПоФормуле3_3Постановления1708()

// Проверяет, были ли уже начисления по добровольному страхованию.
// (данную услугу можно начислять не более 1 раза в месяц)
Процедура ПроверитьНаличиеНачисленийПоДобровольномуСтрахованию(СсылкаНаДокумент, Период, Организация, СписокЛицевыхСчетов, Отказ) Экспорт
	
	НастройкиУчетДобровольногоСтрахования = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	УслугаДобровольногоСтрахования        = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга = &Услуга) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Регистратор <> &Ссылка
	|	И НЕ УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет";
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("Услуга",              УслугаДобровольногоСтрахования);
	Запрос.УстановитьПараметр("Ссылка",              СсылкаНаДокумент);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Таблица Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("На лицевой счет """ + Строка.ЛицевойСчет + """ уже были начисления по добровольному страхованию!", Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыУслугЗависимымиУслугами

// Возвращает таблицу периодов, в которых зависимую услугу необходимо начислять по собственному нормативу, т.к.
// по одной из услуг-оснований зависимой услуги нет действующего прибора учета.
Функция ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу(ТаблицаПоУслугам, СтруктураПараметров, 
																ЗависимыеУслуги, ПоПрочимОрганизациям = Ложь) Экспорт
	
	ТаблицаПоказаний = ТаблицаПоУслугам.Скопировать();
	
	// Для совместимости имен колонок в разных табличных частях.
	Если НЕ ТаблицаПоказаний.Колонки.Найти("ЛицевыеСчета") = Неопределено Тогда
		ТаблицаПоказаний.Колонки.ЛицевыеСчета.Имя = "ЛицевойСчет";
	КонецЕсли;
	
	// Начисление зависимых услуг по ПУ выполняется по расходу услуг-оснований только
	// в случае установленных действующих ИПУ по всем услугам-основаниям.
	// Т.е. если услуга канализация рассчитывается в зависимости от услуг ГВС и ХВС,
	// тогда проверяем, есть ли установленные ИПУ по услугам ХВС и ГВС.
	// Если приборы имеются по обоим услугам - расчет канализации производим по объемам услуг-оснований,
	// в противном случае (если хотя бы по одной услуге нет ИПУ) - расчет будет произведен по нормативу 
	// самой зависимой услуги (при начислении "обычных" услуг).
	
	// Определим временную таблицу периодов, в которых зависимую 
	// услугу необходимо начислять по собственному нормативу.
	ТаблицаПериодов = ТаблицаПоказаний.СкопироватьКолонки();
	Если ТаблицаПериодов.Колонки.Найти("ЗависимаяПоНормативу") = Неопределено Тогда
		ТаблицаПериодов.Колонки.Добавить("ЗависимаяПоНормативу", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ЗависимыеУслуги.Количество() = 0 Тогда
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СписокОбъектов") Тогда
		
		// Заново определяем список л/с, а не берем л/с из табличной части,
		// т.к. при заполнении документа с отбором по зависимой услуге по ПУ
		// табличная часть будет пустой (без основных начислений).
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(СтруктураПараметров.НачалоПериода,
																	  СтруктураПараметров.СписокОбъектов, 
																	  СтруктураПараметров.КонецПериода, 
																	  Истина);
		// Сформируем списки лицевых счетов, зданий, помещений по списку объектов.
		СписокЛицевыхСчетов = Новый СписокЗначений();
		СписокЗданий        = Новый СписокЗначений();
		СписокПомещений     = Новый СписокЗначений();
		
		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
			ИначеЕсли ТекОбъект.ТипОбъекта = "Здания" Тогда
				СписокЗданий = ТекОбъект.СписокОбъектов.Скопировать();
			ИначеЕсли ТекОбъект.ТипОбъекта = "Помещения" Тогда
				СписокПомещений = ТекОбъект.СписокОбъектов.Скопировать();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СтруктураПараметров.Свойство("СписокЛицевыхСчетов") Тогда
		СписокЛицевыхСчетов = СтруктураПараметров.СписокЛицевыхСчетов;
		СписокЗданий        = СтруктураПараметров.СписокЗданий;
		СписокПомещений     = КВП_ПолучитьСписокПомещенийПоЛицевымСчетам(СписокЛицевыхСчетов);
	Иначе
		СписокЛицевыхСчетов = ТаблицаПоказаний.ВыгрузитьКолонку("ЛицевойСчет");
		СписокЗданий        = СтруктураПараметров.СписокЗданий;//КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛицевыхСчетов);
		СписокПомещений     = КВП_ПолучитьСписокПомещенийПоЛицевымСчетам(СписокЛицевыхСчетов);
	КонецЕсли;
	
	СписокЗависимыхУслуг = ЗависимыеУслуги.ВыгрузитьКолонку("Услуга");
	
	// Получим все услуги-основания зависимых услуг.
	ТаблицаУслугОснований = СформироватьТаблицуЗависимыхУслуг(СтруктураПараметров.КонецПериода, , 
															  СтруктураПараметров.Организация, 
															  СписокЗданий, 
															  СписокЗависимыхУслуг,
															  ПоПрочимОрганизациям);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",                  СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("ДатаНач",               СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",               СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Организация",           СтруктураПараметров.Организация);
	//Запрос.УстановитьПараметр("ТаблицаЛС",             ТаблицаПоказаний);
	Запрос.УстановитьПараметр("ТаблицаУслугОснований", ТаблицаУслугОснований);
	Запрос.УстановитьПараметр("СпУслугОснований",      ТаблицаУслугОснований.ВыгрузитьКолонку("УслугаОснование"));
	Запрос.УстановитьПараметр("СпЛицевыхСчетов",       СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СпПомещений",           СписокПомещений);
	
	Запрос.Текст = ПолучитьТекстЗапросаПоПоказаниямДляЗависимыхУслуг();
	РезультатЗапроса = Запрос.Выполнить();
	
	СтэкУслугОснований = Новый Массив;
	ДлинаСуток = 24 * 60 * 60;
	
	ВыборкаПоЛС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЛС.Следующий() Цикл
		
		ВыборкаПоЗависимымУслугам = ВыборкаПоЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗависимымУслугам.Следующий() Цикл
			
			// Сформируем таблицу особых периодов, в которых зависимую
			// услугу необходимо начислять по собственному нормативу
			// (независимо от объема потребления по услуге-основанию).
			
			НоваяСтрока = Неопределено;
			//ТаблицаПериодов.Очистить();
			СтэкУслугОснований.Очистить();
			
			ВыборкаПоПериодамУслугОснований = ВыборкаПоЗависимымУслугам.Выбрать();
			Пока ВыборкаПоПериодамУслугОснований.Следующий() Цикл
				
				// Обходим выборку услуг-оснований по возрастанию периода и с помощью стека
				// определяем объединение периодов, в которых хотя бы по одной начисляемой услуге-основанию
				// нет действующего индивидуального прибора учета.
				// Пример:
				// Периоды по услугам-основаниям:
				//   (_____)
				//       (__________)
				// (___________)
				// Результат для зависимой услуги:
				// (_________________)
				
				Если ВыборкаПоПериодамУслугОснований.НетИПУПоУслугеОснованию Тогда
					
					Если СтэкУслугОснований.Количество() = 0 Тогда
						НоваяСтрока = ТаблицаПериодов.Добавить();
						НоваяСтрока.НачалоПериода = ВыборкаПоПериодамУслугОснований.Период;
						НоваяСтрока.ЗависимаяПоНормативу = Истина;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоПериодамУслугОснований);
					КонецЕсли;
					
					Если СтэкУслугОснований.Найти(ВыборкаПоПериодамУслугОснований.УслугаОснование) = Неопределено Тогда
						СтэкУслугОснований.Добавить(ВыборкаПоПериодамУслугОснований.УслугаОснование);
					КонецЕсли;
					
				Иначе
					
					Индекс = СтэкУслугОснований.Найти(ВыборкаПоПериодамУслугОснований.УслугаОснование);
					Если НЕ Индекс = Неопределено Тогда
						СтэкУслугОснований.Удалить(Индекс);
					КонецЕсли;
					
					Если СтэкУслугОснований.Количество() = 0 И НЕ НоваяСтрока = Неопределено Тогда
						НоваяСтрока.КонецПериода = ВыборкаПоПериодамУслугОснований.Период - ДлинаСуток;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по периодам
			
			Если НЕ СтэкУслугОснований.Количество() = 0 И НЕ НоваяСтрока = Неопределено Тогда
				НоваяСтрока.КонецПериода = СтруктураПараметров.КонецПериода;
			КонецЕсли;
			
		КонецЦикла; // Цикл по зависимым услугам
		
	КонецЦикла; // Цикл по л/с
	
	Возврат ТаблицаПериодов;
	
КонецФункции // ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу()

// Функция возвращает текст запроса для начисления по ПУ.
//
Функция ПолучитьТекстЗапросаПоПоказаниямДляЗависимыхУслуг()
	
	// Лицевые счета, по которым произведено начисление услуг-оснований.
	
	ТекстЗапроса = "
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ТаблицаЛС.ЛицевойСчет
	//|ПОМЕСТИТЬ ВрТаблицаЛС
	//|ИЗ
	//|	&ТаблицаЛС КАК ТаблицаЛС
	//|;
	//|
	//|ВЫБРАТЬ
	//|	ТаблицаЛС.ЛицевойСчет,
	//|	ТаблицаЛС.ЛицевойСчет.Адрес КАК Помещение
	//|ПОМЕСТИТЬ ТаблицаЛС
	//|ИЗ
	//|	ВрТаблицаЛС КАК ТаблицаЛС
	//|;
	//|";
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ ТаблицаЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК ЛицевыеСчета
	|ГДЕ
	|	ЛицевыеСчета.Ссылка В (&СпЛицевыхСчетов)
	|;
	|";
	
	// Таблица услуг-оснований.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслугОснований.УслугаОснование,
	|	ТаблицаУслугОснований.Услуга,
	|	ТаблицаУслугОснований.Организация,
	|	ТаблицаУслугОснований.Объект КАК Здание
	|ПОМЕСТИТЬ ТаблицаУслугОснований
	|ИЗ
	|	&ТаблицаУслугОснований КАК ТаблицаУслугОснований
	|;
	|";
	
	
	// Получаем приборы учета,закрепленные за лицевыми счетами и помещениями.
	// Получаем только приборы учета, не являющиеся "выходными".
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаНач КАК Период,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|ПОМЕСТИТЬ врТаблицаИзмененийПриборовУчета
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			(Объект В (&СпЛицевыхСчетов)
	|				ИЛИ Объект В (&СпПомещений))
	|				И Счетчик.ВидУслуги В (&СпУслугОснований)
	|				И НЕ Счетчик.ПризнакВыходногоСчетчика
	|				И ДатаИзменения < &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения,
	|	КВП_ЗакрепленныеСчетчики.Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Действует
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Период <= &Дата
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И (КВП_ЗакрепленныеСчетчики.Объект В (&СпЛицевыхСчетов)
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект В (&СпПомещений))
	|	И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В(&СпУслугОснований)
	|	И НЕ КВП_ЗакрепленныеСчетчики.Счетчик.ПризнакВыходногоСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененийПриборовУчета.Период,
	|	ТаблицаИзмененийПриборовУчета.Объект,
	|	ТаблицаИзмененийПриборовУчета.Услуга,
	|	МАКСИМУМ(ТаблицаИзмененийПриборовУчета.Действует) КАК Действует
	|ПОМЕСТИТЬ ВрОбщаяТаблицаИзмененийПриборовУчета
	|ИЗ
	|	врТаблицаИзмененийПриборовУчета КАК ТаблицаИзмененийПриборовУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзмененийПриборовУчета.Период,
	|	ТаблицаИзмененийПриборовУчета.Объект,
	|	ТаблицаИзмененийПриборовУчета.Услуга
	|;
	|";
	
	// Получаем таблицу включений/отключений услуг-оснований.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	&ДатаНач КАК Период,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|ПОМЕСТИТЬ врТаблицаИзмененийУслугОснований
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И Услуга В (&СпУслугОснований)
	|				И ДатаИзменения < &ДатаНач
	|				И Объект В (&СпЛицевыхСчетов)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.ДатаИзменения,
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	КВП_НазначенныеНачисления.Действует
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период <= &Дата
	|	И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Услуга В(&СпУслугОснований)
	|	И КВП_НазначенныеНачисления.Объект В(&СпЛицевыхСчетов)
	|;
	|";
	
	// Получаем таблицу лицевых счетов с периодами изменений.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТаблицаЛС.Помещение КАК Помещение,
	|	ТаблицаЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Услуга
	|ПОМЕСТИТЬ ВрТаблицаПериодов
	|ИЗ
	|	ТаблицаЛС КАК ТаблицаЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаИзмененийПриборовУчета.Период КАК Период,
	|			ТаблицаИзмененийПриборовУчета.Объект КАК Объект,
	|			ТаблицаИзмененийПриборовУчета.Услуга КАК Услуга
	|		ИЗ
	|			ВрОбщаяТаблицаИзмененийПриборовУчета КАК ТаблицаИзмененийПриборовУчета
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаИзмененийУслугОснований.Период,
	|			ТаблицаИзмененийУслугОснований.ЛицевойСчет,
	|			ТаблицаИзмененийУслугОснований.Услуга
	|		ИЗ
	|			врТаблицаИзмененийУслугОснований КАК ТаблицаИзмененийУслугОснований) КАК ТаблицаИзменений
	|		ПО (ТаблицаЛС.Помещение = ТаблицаИзменений.Объект
	|				ИЛИ ТаблицаЛС.ЛицевойСчет = ТаблицаИзменений.Объект)
	|;
	|";
	
	// Получаем итоговую таблицу лицевых счетов с изменениями по периодам.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТаблицаПериодов.Помещение,
	|	ТаблицаПериодов.ЛицевойСчет,
	|	ТаблицаПериодов.Период,
	|	ТаблицаПериодов.Услуга,
	|	ЕСТЬNULL(ТаблицаИзмененийПриборовУчета.Действует, ЛОЖЬ) КАК ЕстьПУ,
	|	ЕСТЬNULL(ТаблицаИзмененийУслугОснований.Действует, ЛОЖЬ) КАК ДействуетУслуга
	|ПОМЕСТИТЬ ВрИтоговаяТаблицаПериодов
	|ИЗ
	|	ВрТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрОбщаяТаблицаИзмененийПриборовУчета КАК ТаблицаИзмененийПриборовУчета
	|		ПО (ТаблицаПериодов.Помещение = ТаблицаИзмененийПриборовУчета.Объект
	|				ИЛИ ТаблицаПериодов.ЛицевойСчет = ТаблицаИзмененийПриборовУчета.Объект)
	|			И ТаблицаПериодов.Услуга = ТаблицаИзмененийПриборовУчета.Услуга
	|			И (ТаблицаИзмененийПриборовУчета.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ТаблицаИзмененийПриборовУчета.Период) КАК Период
	|				ИЗ
	|					ВрОбщаяТаблицаИзмененийПриборовУчета КАК ТаблицаИзмененийПриборовУчета
	|				ГДЕ
	|					ТаблицаИзмененийПриборовУчета.Период <= ТаблицаПериодов.Период))
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаИзмененийУслугОснований КАК ТаблицаИзмененийУслугОснований
	|		ПО ТаблицаПериодов.ЛицевойСчет = ТаблицаИзмененийУслугОснований.ЛицевойСчет
	|			И ТаблицаПериодов.Услуга = ТаблицаИзмененийУслугОснований.Услуга
	|			И (ТаблицаИзмененийУслугОснований.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ТаблицаИзмененийУслугОснований.Период) КАК Период
	|				ИЗ
	|					врТаблицаИзмененийУслугОснований КАК ТаблицаИзмененийУслугОснований
	|				ГДЕ
	|					ТаблицаИзмененийУслугОснований.Период <= ТаблицаПериодов.Период))
	|;
	|";
	
	// Дополняем итоговую таблицу лицевых счетов зависимыми услугами.
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ИтоговаяТаблицаПериодов.Помещение,
	|	ИтоговаяТаблицаПериодов.ЛицевойСчет КАК ЛицевойСчет,
	|	ИтоговаяТаблицаПериодов.Период КАК Период,
	|	ИтоговаяТаблицаПериодов.Услуга КАК УслугаОснование,
	|	ТаблицаУслугОснований.Услуга КАК Услуга,
	|	ТаблицаУслугОснований.Организация,
	|	ТаблицаУслугОснований.Здание,
	|	ВЫБОР
	|		КОГДА НЕ ИтоговаяТаблицаПериодов.ЕстьПУ
	|				И ИтоговаяТаблицаПериодов.ДействуетУслуга
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетИПУПоУслугеОснованию
	|ИЗ
	|	ВрИтоговаяТаблицаПериодов КАК ИтоговаяТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслугОснований КАК ТаблицаУслугОснований
	|		ПО ИтоговаяТаблицаПериодов.Услуга = ТаблицаУслугОснований.УслугаОснование
	|			И ИтоговаяТаблицаПериодов.Помещение.Владелец = ТаблицаУслугОснований.Здание
	// Дополнительная проверка-отбор, на случай, если ЗУ закреплена еще за услугой не по ПУ, 
	// т.к. в программе такое допускается. А зависимость от услуг не по ПУ начисляется совместно с 
	// начислениями услуг-оснований не по ПУ (т.е. при начислении "обыных" услуг).
	|			И  ИтоговаяТаблицаПериодов.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика),
	|				ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	Период,
	|	НетИПУПоУслугеОснованию
	|ИТОГИ
	|ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоПоказаниямДляЗависимыхУслуг()

#КонецОбласти

#КонецЕсли