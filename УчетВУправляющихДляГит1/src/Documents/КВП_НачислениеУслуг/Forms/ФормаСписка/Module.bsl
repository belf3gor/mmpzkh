
#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Возвращает структуру параметров формы.
//
Функция ПолучитьСтруктуруПараметровФормы(ВидОперации)
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
// Сохраняет настройки отбора на сервере.
//
Процедура СохранитьНастройкиОтбораНаСервере(ОтборПоВидуОперации)
	
	ХранилищеОбщихНастроек.Сохранить("КВП_НачислениеУслуг", "ОтборПоВидуОперации", ОтборПоВидуОперации);
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет быстрые отборы списка документов.
//
Процедура ОбновитьБыстрыеОтборыСпискаДокументов()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация",
																	ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ВидОперации",
																	ОтборПоВидуОперации, ЗначениеЗаполнено(ОтборПоВидуОперации));
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму предупреждения.
//
Процедура ПоказатьФормуПредупрежденияОЗависимыхУслугахВРазрезеОрганизаций()
	
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.Форма.ФормаПредупрежденияОЗависимыхУслугахВРазрезеОрганизаций",, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Определим настройки отбора по умолчанию.
	ОтборОрганизация = УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	ОтборПоВидуОперации = ХранилищеОбщихНастроек.Загрузить("КВП_НачислениеУслуг", "ОтборПоВидуОперации");
	
	// Определим необходимость вывода предупреждения о сведениях для взаиморасчетов.
	ПоказыватьПредупреждения = Документы.КВП_НачислениеУслуг.ПолучитьНастройкуВыводаПредупрежденияОНачисленияхЗависимыхУслугВРазрезеОрганизаций();
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
	УстановитьСписокЗначенийДляОтбораПоВидуОперацииДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКоманднаяПанель);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьБыстрыеОтборыСпискаДокументов();
	
	// Открываем форму предупреждения, если требуется.
	Если ПоказыватьПредупреждения Тогда
		ПодключитьОбработчикОжидания("ПоказатьФормуПредупрежденияОЗависимыхУслугахВРазрезеОрганизаций", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиОтбораНаСервере(ОтборПоВидуОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтборОрганизация".
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбновитьБыстрыеОтборыСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтборПоВидуОперации".
Процедура ОтборПоВидуОперацииПриИзменении(Элемент)
	
	ОбновитьБыстрыеОтборыСпискаДокументов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ВычислитьСуммуДокументов");
	ПодключитьОбработчикОжидания("ВычислитьСуммуДокументов", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
// Обработчик команды "ИзменитьВидОперации".
//
Процедура ИзменитьВидОперации(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Ссылка);
	ПараметрыФормы.Вставить("ВидОперации", СтрокаТаблицы.ВидОперации);
	ПараметрыФормы.Вставить("ИзменитьВидОперации", Истина);
	
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.Форма.ФормаВыбораОперации", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеНаЛицевыеСчета".
//
Процедура СоздатьНачислениеНаЛицевыеСчета(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеПоПоказаниямПУ".
//
Процедура СоздатьНачислениеПоПоказаниямПУ(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеПоПоказаниямПУ".
//
Процедура УдалитьСоздатьНачислениеНаПарковочныеМеста(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеРассрочки".
//
Процедура СоздатьНачислениеРассрочки(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеКомиссииБанка".
//
Процедура СоздатьНачислениеКомиссииБанка(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьМастерНачислений".
//
Процедура ОткрытьМастерНачислений(Команда)
	
	ФормаМастераНачислений = ПолучитьФорму("Обработка.УПЖКХ_МастерНачислений.Форма");
	ФормаМастераНачислений.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьНачислениеДобровольногоСтрахования".
//
Процедура СоздатьНачислениеДобровольногоСтрахования(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования"));
	ОткрытьФорму("Документ.КВП_НачислениеУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры // СоздатьНачислениеДобровольногоСтрахования()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Получает значение суммы документов в выделенных строках списка документа.
Процедура ВычислитьСуммуДокументов()
	
	СуммаДокументов = 0;
	
	//СуммаДокументов = УПЖКХ_РаботаСДиалогамиКлиент.ВычислитьСуммуДокументов(Элементы.Список, "СуммаДокумента")
	//				+ УПЖКХ_РаботаСДиалогамиКлиент.ВычислитьСуммуДокументов(Элементы.Список, "СуммаПоЗависимымУслугам");
	
	Для Каждого Строка Из Элементы.Список.ВыделенныеСтроки Цикл 
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		СуммаДокументов = СуммаДокументов + ?(ДанныеСтроки.Свойство("СуммаДокумента"),          ДанныеСтроки["СуммаДокумента"],          0)
										  + ?(ДанныеСтроки.Свойство("СуммаПоЗависимымУслугам"), ДанныеСтроки["СуммаПоЗависимымУслугам"], 0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СоздатьНачислениеДобровольногоСтрахования.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Управляет списком выбора значений в отборе документов по виду операций.
Процедура УстановитьСписокЗначенийДляОтбораПоВидуОперацииДокумента()
	
	НачислениеДобровольногоСтрахования = Элементы.ОтборПоВидуОперации.СписокВыбора.НайтиПоЗначению(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования);
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Если НачислениеДобровольногоСтрахования = Неопределено Тогда
			Элементы.ОтборПоВидуОперации.СписокВыбора.Добавить(Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования);
		КонецЕсли;
		
	Иначе
		Если Не НачислениеДобровольногоСтрахования = Неопределено Тогда
			Элементы.ОтборПоВидуОперации.СписокВыбора.Удалить(НачислениеДобровольногоСтрахования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
