
&НаКлиенте
Перем мСоотвСпРасчетаУслуг; // Хранить соответствие способов расчета услугам.

#Область ПодсистемыЖКХ_ОтладкаРасчетов

// ПодсистемыЖКХ.ОтладкаРасчетов

&НаСервереБезКонтекста
// Процедура изменяет режим отладки расчетов.
Процедура ИзменитьРежимОтладкиРасчетов(ИспользоватьРежимОтладкиРасчетов)
	
	Константы.УПЖКХ_ИспользоватьРежимОтладкиРасчетов.Установить(ИспользоватьРежимОтладкиРасчетов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтладкаНачислений_ОткрытьПротоколРасчетов".
Процедура ОтладкаНачислений_ОткрытьПротоколРасчетов(Команда)
	
	// Отображение текстового документа пользователю.
	
	ПротоколРасчетовДок = Новый ТекстовыйДокумент;
	
	Если ПротоколРасчетов.КоличествоСтрок() > 0 Тогда
		ПротоколРасчетовДок.ДобавитьСтроку(ПротоколРасчетов.ПолучитьТекст());
	Иначе
		// Добавление информационного сообщения в пустой протокол.
		ПротоколРасчетовДок.ДобавитьСтроку("Действия, информация по которым фиксируется в протоколе, не выполнялись.");
	КонецЕсли;
	
	ПротоколРасчетовДок.Показать("Протокол расчета начислений: " + Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура возвращает режим отладки расчетов.
Функция ИспользоватьРежимОтладкиРасчетов()
	
	Возврат ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьРежимОтладкиРасчетов");
	
КонецФункции

&НаСервере
// Возвращает текстовый документ "Протокол расчетов".
Функция ПолучитьПротоколРасчетов()
	
	ПротоколРасчетовТабДок = РеквизитФормыВЗначение("Объект").ПротоколРасчетов.Получить();
	
	Если ПротоколРасчетовТабДок = Неопределено Тогда
		ПротоколРасчетовТабДок = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат ПротоколРасчетовТабДок;
	
КонецФункции

&НаКлиенте
// Обработчик события "ОбработкаНавигационнойСсылки" поля "ДекорацияВключитьРежимОтладкиРасчетов".
Процедура РежимОтладкиРасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИспользоватьРежимОтладкиРасчетов = Неопределено;
	
	Если НавигационнаяСсылка = "ВключитьРежимОтладкиРасчетов" Тогда
		ИспользоватьРежимОтладкиРасчетов = Истина
	ИначеЕсли НавигационнаяСсылка = "ОтключитьРежимОтладкиРасчетов" Тогда
		
		ИспользоватьРежимОтладкиРасчетов = Ложь;
		
		ТекстПредупреждения = "Протокол расчетов теперь недоступен во всех документах ""Начисление услуг"", при этом уже сформированные протоколы будут храниться в программе.
							  |Включить режим отладки расчетов можно в любом документе ""Начисление услуг"" в панели расшифровки документа.";
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьИнструкцию" Тогда
		ЗапуститьПриложение("https://vgkh.ru/faq-1s-zhkh/odn_3_0/proverit-raspredeleniye-odn/");
	КонецЕсли;
	
	Если Не ИспользоватьРежимОтладкиРасчетов = Неопределено Тогда
		
		ИзменитьРежимОтладкиРасчетов(ИспользоватьРежимОтладкиРасчетов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ПодсистемыЖКХ.ОтладкаРасчетов

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура для текущей строки возвращает строку лицевого счета.
Функция ПолучитьСтрокуЛицевогоСчетаПоТекущейСтрокеДерева(ДанныеТекущейСтроки)
	
	// Пустое значение по умолчанию.
	СтрокаЛицевогоСчета = Неопределено;
	
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		// Если в строке родителя не обнаружена ссылка на лицевой счет - повторно вызываем функцию,
		// если ссылка обнаружена значит это нужная нам строка лицевого счета, возвращаем ее.
		Если ТипЗнч(ДанныеТекущейСтроки.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			СтрокаЛицевогоСчета = ДанныеТекущейСтроки;
		Иначе
			СтрокаЛицевогоСчета = ПолучитьСтрокуЛицевогоСчетаПоТекущейСтрокеДерева(ДанныеТекущейСтроки.ПолучитьРодителя());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЛицевогоСчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура для текущей строки возвращает строку услуги.
Функция ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки, Признак = Ложь)
	
	// Пустое значение по умолчанию.
	СтрокаУслуги = Неопределено;
	
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		Если ТипЗнч(ДанныеТекущейСтроки.ЛицевойСчет) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			
			Если Признак Тогда
				
				РодительТекущейСтроки = ДанныеТекущейСтроки.ПолучитьРодителя();
				
				Если НЕ РодительТекущейСтроки = Неопределено Тогда
					
					Если ТипЗнч(РодительТекущейСтроки.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
						СтрокаУслуги = ДанныеТекущейСтроки;
					Иначе
						СтрокаУслуги = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(РодительТекущейСтроки, Признак);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				СтрокаУслуги = ДанныеТекущейСтроки;
			КонецЕсли;
		Иначе
			СтрокаУслуги = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки.ПолучитьРодителя(), Признак);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаУслуги;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает структуру настроек зависимой услуги.
Функция ПолучитьНастройкиРасчетаЗависимойУслуги(Дата, Организация, УслугаОснование, ЗависимаяУслуга, Здание)
	
	// Для информации:
	// Решили, что операция ручного изменения довольна редкая, поэтому хранить настройки 
	// расчета по всем ЗУ нет смысла. Проще получить настройки по нужной ЗУ при необходимости.
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КоэффициентЗУ",                                               0);
	СтруктураНастроек.Вставить("НачислятьПриРаспределенииПоказаний",                          Ложь);
	СтруктураНастроек.Вставить("РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН", Ложь);
	
	СписокУслуг = Новый СписокЗначений;
	СписокУслуг.Добавить(УслугаОснование);
	
	СписокЗависимыхУслуг = Новый СписокЗначений;
	СписокЗависимыхУслуг.Добавить(ЗависимаяУслуга);
	
	СписокЗданий = Новый СписокЗначений;
	СписокЗданий.Добавить(Здание);
	
	ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата), 
																СписокУслуг, 
																Организация,
																СписокЗданий,
																СписокЗависимыхУслуг,
																Ложь);
	
	Если ТаблицаЗависимыхУслуг.Количество() > 0 Тогда
		СтруктураНастроек.КоэффициентЗУ = ТаблицаЗависимыхУслуг[0].Коэффициент;
		СтруктураНастроек.НачислятьПриРаспределенииПоказаний 
										= ТаблицаЗависимыхУслуг[0].НачислятьПриРаспределенииПоказаний;
		СтруктураНастроек.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН 
										= ТаблицаЗависимыхУслуг[0].РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН;
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с изменением строк в дереве услуг.

&НаСервере
// Обновляет количество начисления по зависимым услугам в соответствии с 
// количеством начисления услуги-основания.
Процедура ПересчитатьСтрокиПоЗависимымУслугам(ДанныеТекущейСтроки)
	
	ВеткаЛицевогоСчета   = ПолучитьСтрокуЛицевогоСчетаПоТекущейСтрокеДерева(ДанныеТекущейСтроки);
	// Если меняются начисления по составным услугам, то ВеткаУслугиОснования и ВеткаУслуги различны.
	ВеткаУслугиОснования = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки, Истина);
	ВеткаУслуги          = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки);
	
	Для Каждого СтрокаУслуги Из ВеткаЛицевогоСчета.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаУслуги.Зависимая 
		 ИЛИ СтрокаУслуги.ЗависимаяПоНормативу
		 ИЛИ НЕ СтрокаУслуги.УслугаОснование = ВеткаУслугиОснования.ЛицевойСчет Тогда
			Продолжить;
		КонецЕсли;
		
		ЗависимаяУслуга     = СтрокаУслуги.ЛицевойСчет;
		СтруктураНастроекЗУ = ПолучитьНастройкиРасчетаЗависимойУслуги(Объект.Дата, 
																	  Объект.Организация, 
																	  ВеткаУслугиОснования.ЛицевойСчет, 
																	  ЗависимаяУслуга, 
																	  ВеткаЛицевогоСчета.Здание);
		
		Для Каждого СтрокаСостУслуги Из СтрокаУслуги.ПолучитьЭлементы() Цикл
			Если СтрокаСостУслуги.ПолучитьЭлементы().Количество() > 0 Тогда
				
				Если НЕ СтрокаСостУслуги.ЛицевойСчет = ВеткаУслуги.ЛицевойСчет Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаПериода Из СтрокаСостУслуги.ПолучитьЭлементы() Цикл
					ПересчитатьСтрокуЗависимойУслуги(ДанныеТекущейСтроки, СтрокаПериода, СтруктураНастроекЗУ)
				КонецЦикла;
			Иначе
				ПересчитатьСтрокуЗависимойУслуги(ДанныеТекущейСтроки, СтрокаСостУслуги, СтруктураНастроекЗУ)
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры  //ПересчитатьВсегоНачисленоПоУслугеВклСоставные()

&НаСервере
// Обновляет количество начисления в строке зависимой услуги и пересчитывает сумму начисления.
Процедура ПересчитатьСтрокуЗависимойУслуги(ДанныеТекущейСтроки, СтрокаПериодаЗависимойУслуги, СтруктураНастроекЗУ)
	
	Если НЕ СтрокаПериодаЗависимойУслуги.НачалоПериода = ДанныеТекущейСтроки.НачалоПериода 
	 ИЛИ НЕ СтрокаПериодаЗависимойУслуги.КонецПериода  = ДанныеТекущейСтроки.КонецПериода Тогда
		Возврат;
	КонецЕсли;
	
	// Пока без округления, т.к. нигде округление при расчете ЗУ с учетом коэффициента не происходит.
	//егор округление до 3 знаков
	СтрокаПериодаЗависимойУслуги.Количество = Окр(ДанныеТекущейСтроки.Количество * СтруктураНастроекЗУ.КоэффициентЗУ,3,РежимОкругления.Окр15как20);
	
	ПересчитатьСуммуСтрокиТЧНаСервере(СтрокаПериодаЗависимойУслуги);
	ПересчитатьВсегоНачисленоПоУслугеВклСоставные(СтрокаПериодаЗависимойУслуги);
	ПересчитатьВсегоНачислено();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с изменением строк в дереве услуг по показаниям ПУ.

&НаКлиенте
// Обновляет количество начисления по зависимым услугам в соответствии с 
// количеством начисления услуги-основания, рассчитываемой по ПУ.
Процедура ПересчитатьСтрокиПоЗависимымУслугамВДеревеПоПоказаниямПУ(ДанныеТекущейСтроки, ИмяКолонки)
	
	// ОСОБЕННОСТЬ:
	// Если услуга-основание составная, то зависимая от нее услуга (в отличие от зависимых не по ПУ)
	// не начисляется в разрезе составных. Поэтому при ручном изменении одного из количеств по
	// одной из составных услуг услуги-основания, необходимо сначала посчитать общее количество по
	// периоду и виду тарифа составных услуг услуги-основания, а потом уже менять значение для ЗУ.
	
	СтрокаЛицевогоСчета    = ПолучитьСтрокуЛицевогоСчетаПоТекущейСтрокеДерева(ДанныеТекущейСтроки);
	// Если меняются начисления по составным услугам, то СтрокаУслугиОснования и СтрокаИзмененнойУслуги различны.
	СтрокаУслугиОснования  = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки, Истина);
	СтрокаИзмененнойУслуги = ПолучитьСтрокуУслугиПоТекущейСтрокеДерева(ДанныеТекущейСтроки);
	
	Для Каждого СтрокаУслуги Из СтрокаЛицевогоСчета.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаУслуги.Зависимая 
		 ИЛИ СтрокаУслуги.ЗависимаяПоНормативу
		 ИЛИ НЕ СтрокаУслуги.УслугаОснование = СтрокаУслугиОснования.ЛицевойСчет Тогда
			Продолжить;
		КонецЕсли;
		
		ЗависимаяУслуга     = СтрокаУслуги.ЛицевойСчет;
		СтруктураНастроекЗУ = ПолучитьНастройкиРасчетаЗависимойУслуги(Объект.Дата, 
																	  Объект.Организация, 
																	  СтрокаУслугиОснования.ЛицевойСчет, 
																	  ЗависимаяУслуга, 
																	  СтрокаЛицевогоСчета.Здание);
		
		// Если по услуге-основанию изменили объем ОДН, то для ЗУ меняем только в том случае, если 
		// стоит соответствующая настройка.
		Если (ИмяКолонки = "КоличествоРаспределенияПомещение" 
		 ИЛИ ИмяКолонки = "КоличествоРаспределенияПодъезд"
		 ИЛИ ИмяКолонки = "КоличествоРаспределенияЗдание") 
		   И НЕ СтруктураНастроекЗУ.НачислятьПриРаспределенииПоказаний Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаПериода Из СтрокаУслуги.ПолучитьЭлементы() Цикл
			
			Если СтрокаПериода.ЛицевойСчет = ПолучитьПредставлениеСтроки_Сторно()
			 ИЛИ СтрокаПериода.ЛицевойСчет = ПолучитьПредставлениеСтроки_НачислениеПоПовышающемуКоэффициенту() Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаВидаТарифа Из СтрокаПериода.ПолучитьЭлементы() Цикл
				
				Если НЕ СтрокаВидаТарифа.НачалоПериода = ДанныеТекущейСтроки.НачалоПериода 
				 ИЛИ НЕ СтрокаВидаТарифа.КонецПериода  = ДанныеТекущейСтроки.КонецПериода 
				 ИЛИ НЕ СтрокаВидаТарифа.ВидТарифа     = ДанныеТекущейСтроки.ВидТарифа Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ СтрокаУслугиОснования = СтрокаИзмененнойУслуги Тогда
					// Услуга-основание составная.
					// Поэтому ,сначала пересчитаем общее количество по периоду и виду тарифа 
					// составных услуг услуги-основания, а потом уже изменим значение для ЗУ.
					
					КоличествоДляИзменения = РассчитьОбщееКоличествоПоСоставнойУслугеОснованию(СтрокаУслугиОснования, ДанныеТекущейСтроки, ИмяКолонки);
				Иначе
					КоличествоДляИзменения = ДанныеТекущейСтроки[ИмяКолонки];
				КонецЕсли;
				
				ПересчитатьСтрокуЗависимойУслугиВДеревеПоПоказаниямПУ(КоличествоДляИзменения, СтрокаВидаТарифа, СтруктураНастроекЗУ, ИмяКолонки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры  //ПересчитатьВсегоНачисленоПоУслугеВклСоставные()

&НаКлиенте
// Возвращает общее количество начисления составной услуги-основания, без учета составных услуг.
Функция РассчитьОбщееКоличествоПоСоставнойУслугеОснованию(СтрокаУслугиОснования, ДанныеТекущейСтроки, ИмяКолонки);
	
	КоличествоУслугиОснования = 0;
	
	Для Каждого СтрокаСостУслуги Из СтрокаУслугиОснования.ПолучитьЭлементы() Цикл
		
		Если СтрокаСостУслуги.ЛицевойСчет = ПолучитьПредставлениеСтроки_Сторно()
		 ИЛИ СтрокаСостУслуги.ЛицевойСчет = ПолучитьПредставлениеСтроки_НачислениеПоПовышающемуКоэффициенту() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПериода Из СтрокаСостУслуги.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаВидаТарифа Из СтрокаПериода.ПолучитьЭлементы() Цикл
				
				Если НЕ СтрокаВидаТарифа.НачалоПериода = ДанныеТекущейСтроки.НачалоПериода 
				 ИЛИ НЕ СтрокаВидаТарифа.КонецПериода  = ДанныеТекущейСтроки.КонецПериода 
				 ИЛИ НЕ СтрокаВидаТарифа.ВидТарифа     = ДанныеТекущейСтроки.ВидТарифа Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоУслугиОснования = КоличествоУслугиОснования + СтрокаВидаТарифа[ИмяКолонки];
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоличествоУслугиОснования;
	
КонецФункции

&НаКлиенте
// Обновляет количество начисления в строке зависимой услуги и пересчитывает сумму начисления.
Процедура ПересчитатьСтрокуЗависимойУслугиВДеревеПоПоказаниямПУ(КоличествоДляИзменения, СтрокаВидаТарифаЗависимойУслуги, СтруктураНастроекЗУ, ИмяКолонки)
	
	// Проверка, что по ЗУ не нужно начислять ОДН, выполнена ранее в алгоритме.
	Если (ИмяКолонки = "КоличествоРаспределенияПомещение" 
	 ИЛИ ИмяКолонки = "КоличествоРаспределенияПодъезд"
	 ИЛИ ИмяКолонки = "КоличествоРаспределенияЗдание") Тогда
		ИзмененноеКоличествоУслугиОснования = ?(СтруктураНастроекЗУ.РазрешитьНачислениеПриРаспределенииОтрицательногоРасходаОДН,
													КоличествоДляИзменения,
													Макс(КоличествоДляИзменения, 0));
	Иначе
		ИзмененноеКоличествоУслугиОснования = КоличествоДляИзменения;
	КонецЕсли;
	
	// Пока без округления, т.к. нигде округление при расчете ЗУ с учетом коэффициента не происходит.
	СтрокаВидаТарифаЗависимойУслуги[ИмяКолонки] = ИзмененноеКоличествоУслугиОснования * СтруктураНастроекЗУ.КоэффициентЗУ;
	
	ПересчитатьСуммуСтрокиТЧ(СтрокаВидаТарифаЗависимойУслуги, ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Истина;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость               = Ложь;
		Элементы.СтраницаРассрочка.Видимость            = Ложь;
		
		Элементы.Услуга.Видимость      = Истина;
		Элементы.Услуга.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Истина;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Ложь;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаИПУСторно.Видимость               = Ложь;
		Элементы.ГруппаОПУОДН.Видимость                  = Ложь;
		Элементы.ГруппаНачисления.Видимость              = Истина;
		Элементы.ГруппаСуммаНачисленияКомиссии.Видимость = Ложь;
		Элементы.ГруппаСуммаНачисленияПоПУ.Видимость     = Ложь;
		Элементы.ГруппаНачисления.ТекущаяСтраница = Элементы.ГруппаСуммаНачисления;
		
		ВидимостьИтоговНачисленияЗУ = Форма.СуммаНачисленияЗУЗначение <> 0 ИЛИ Форма.ИмеютсяСтрокиЗУ;
		
		Элементы.ДеревоУслугУслугаОснование.Видимость = ВидимостьИтоговНачисленияЗУ;
		Элементы.ГруппаЗУ.Видимость                   = ВидимостьИтоговНачисленияЗУ;
		Элементы.ГруппаНачисленияЗУ.ТекущаяСтраница   = Элементы.ГруппаСуммаНачисленияЗУ;
		Элементы.ОбъемНачисленияЗУ.Видимость          = Ложь;
		Элементы.ГруппаОУ.ОтображатьЗаголовок         = ВидимостьИтоговНачисленияЗУ;
	
		// Установка заголовка группы итогов под табличной частью.
		Элементы.ГруппаПодвал.Поведение           = ПоведениеОбычнойГруппы.Обычное;
		Элементы.ГруппаПодвал.ОтображатьЗаголовок = Ложь;
		
		Элементы.ДеревоУслугГруппаРазвернуть.Видимость  = ВидимостьИтоговНачисленияЗУ;
		Элементы.ДеревоУслугКомандаРазвернуть.Видимость = НЕ ВидимостьИтоговНачисленияЗУ;
		
		// ! Возможность добавления новых строк в ТЧ "ДеревоУслуг" ИСКЛЮЧЕНА по следующим причинам:
		// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
		//    Большой риск того, что при заполнении что-то будет упущено.
		// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
		//    "Количество" и "Договор".
		Элементы.ДеревоУслуг.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоУслугКонтекстноеМенюДобавить.Видимость    = Ложь;
		Элементы.ДеревоУслуг.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоУслугКонтекстноеМенюСкопировать.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Ложь;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость               = Истина;
		Элементы.СтраницаРассрочка.Видимость            = Ложь;
		
		Элементы.Услуга.Видимость      = Истина;
		Элементы.Услуга.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Ложь;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Ложь;
		
		Элементы.УслугиЛицевыеСчета.Заголовок = "Парковочное место";
		Элементы.УслугиНачислено.Заголовок    = "Начислено";
		
		Элементы.УслугиКвартира.Видимость        = Ложь;
		Элементы.УслугиДоговор.Видимость         = Истина;
		Элементы.УслугиКоличество.Видимость      = Истина;
		Элементы.УслугиДнейНачислено.Видимость   = Истина;
		Элементы.УслугиСуммаНачислений.Видимость = Ложь;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаОУ.Видимость = Ложь;
		Элементы.ГруппаЗУ.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Ложь;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Истина;
		Элементы.СтраницаУслуги.Видимость               = Ложь;
		Элементы.СтраницаРассрочка.Видимость            = Ложь;
		
		Элементы.Услуга.Видимость      = Истина;
		Элементы.Услуга.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Ложь;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Ложь;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаИПУСторно.Видимость        = Истина;
		Элементы.ГруппаНачисления.Видимость       = Истина;
		Элементы.ГруппаНачисления.ТекущаяСтраница = Элементы.ГруппаСуммаНачисленияПоПУ;
		
		// Настройка видимости колонок дерева значений и итогов.
		
		СтрокиДереваПУ = Форма.ДеревоПоПоказаниямПУ.ПолучитьЭлементы();
		
		ВидимостьОбъемаБезИПУ       = Форма.КоличествоПоНормативуБезИПУ       <> 0;
		ВидимостьОбъемаБезПоказаний = Форма.КоличествоПоНормативуБезПоказаний <> 0 ИЛИ Форма.ОбъемСторно <> 0;
		ВидимостьОбъемаСПоказаниями = Форма.КоличествоПоПУ                    <> 0;
		
		Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ.Видимость       = ВидимостьОбъемаБезИПУ;
		Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний.Видимость = ВидимостьОбъемаБезПоказаний;
		Элементы.ДеревоПоПоказаниямПУСуммаПоНормативу.Видимость   = ВидимостьОбъемаБезИПУ ИЛИ ВидимостьОбъемаБезПоказаний;
		Элементы.ГруппаНачислениеПриОтсутствииПоказаний.Видимость = ВидимостьОбъемаБезИПУ ИЛИ ВидимостьОбъемаБезПоказаний;
		
		Элементы.ДеревоПоПоказаниямПУКоличествоПоПУ.Видимость     = ВидимостьОбъемаСПоказаниями;
		Элементы.ДеревоПоПоказаниямПУСуммаПоПУ.Видимость          = ВидимостьОбъемаСПоказаниями;
		Элементы.ГруппаНачислениеПоИПУ.Видимость                  = ВидимостьОбъемаСПоказаниями;
		
		ВидимостьКолваПоПомещениям  = Форма.КоличествоРаспределенияПомещение <> 0;
		ВидимостьКолваПоПодъездам   = Форма.КоличествоРаспределенияПодъезд   <> 0;
		ВидимостьКолваПоЗданиям     = Форма.КоличествоРаспределенияЗдание    <> 0;
		ВидимостьКолваРаспределения = (ВидимостьКолваПоПомещениям ИЛИ ВидимостьКолваПоПодъездам ИЛИ ВидимостьКолваПоЗданиям);
		
		ВидимостьУчетногоИндОбъема  = Форма.УчетныйИндивидуальныйОбъем       <> 0;
		
		Элементы.ГруппаОПУОДН.Видимость        = ВидимостьКолваРаспределения ИЛИ ВидимостьУчетногоИндОбъема;
		//Элементы.ГруппаНачисления.Видимость = ВидимостьКолваРаспределения ИЛИ ВидимостьУчетногоИндОбъема;
		
		Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение.Видимость = ВидимостьКолваПоПомещениям;
		Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд.Видимость   = ВидимостьКолваПоПодъездам;
		Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание.Видимость    = ВидимостьКолваПоЗданиям;
		Элементы.ДеревоПоПоказаниямПУУчетныйИндивидуальныйОбъем.Видимость       = ВидимостьУчетногоИндОбъема;
		Элементы.ДеревоПоПоказаниямПУСуммаРаспределения.Видимость = ВидимостьКолваРаспределения;
		Элементы.ГруппаРаспределение.Видимость                    = ВидимостьКолваРаспределения;
		
		ВидимостьИтоговНачисленияЗУ = Форма.СуммаНачисленияЗУЗначение <> 0 ИЛИ Форма.ИмеютсяСтрокиЗУ;
		
		Элементы.ДеревоПоПоказаниямПУУслугаОснование.Видимость = ВидимостьИтоговНачисленияЗУ;
		Элементы.ГруппаЗУ.Видимость                 = ВидимостьИтоговНачисленияЗУ;
		Элементы.ГруппаНачисленияЗУ.ТекущаяСтраница = Элементы.ГруппаСуммаНачисленияЗУПоПУ;
		Элементы.ОбъемНачисленияЗУ.Видимость  = Истина;
		Элементы.ГруппаОУ.ОтображатьЗаголовок = ВидимостьИтоговНачисленияЗУ;
		
		// Установка заголовка группы итогов под табличной частью.
		УстановитьЗаголовокСворачиваемойГруппыИтогов(Форма);
		
		Элементы.ДеревоПоПоказаниямПУГруппаРазвернуть.Видимость  = ВидимостьИтоговНачисленияЗУ;
		Элементы.ДеревоПоПоказаниямПУКомандаРазвернуть.Видимость = НЕ ВидимостьИтоговНачисленияЗУ;
		
		// ! Возможность добавления новых строк в ТЧ "ДеревоПоПоказаниямПУ" ИСКЛЮЧЕНА по следующим причинам:
		// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
		//    Большой риск того, что при заполнении что-то будет упущено.
		// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
		//    "Количество" и "Договор".
		Элементы.ДеревоПоПоказаниямПУ.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПоПоказаниямПУКонтекстноеМенюДобавить.Видимость    = Ложь;
		Элементы.ДеревоПоПоказаниямПУ.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоПоПоказаниямПУКонтекстноеМенюСкопировать.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Ложь;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость               = Истина;
		Элементы.СтраницаРассрочка.Видимость            = Ложь;
		
		Элементы.Услуга.Видимость      = Истина;
		Элементы.Услуга.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Ложь;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Ложь;
		
		Элементы.УслугиЛицевыеСчета.Заголовок = "Лицевой счет";
		Элементы.УслугиНачислено.Заголовок    = "Начислена комиссия";
		
		Элементы.УслугиДоговор.Видимость         = Ложь;
		Элементы.УслугиКоличество.Видимость      = Ложь;
		Элементы.УслугиДнейНачислено.Видимость   = Ложь;
		Элементы.УслугиСуммаНачислений.Видимость = Истина;
		
		ТипСооруженияОбъекта = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Объект, "ТипСооружения");
		
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			Если ТипСооруженияОбъекта = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Паркинг") Тогда
				Элементы.УслугиКвартира.Видимость = Ложь;
			Иначе
				Элементы.УслугиКвартира.Видимость = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			Элементы.УслугиКвартира.Видимость = Ложь;
		Иначе
			Элементы.УслугиКвартира.Видимость = Истина;
		КонецЕсли;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаИПУСторно.Видимость    = Ложь;
		Элементы.ГруппаОПУОДН.Видимость       = Ложь;
		Элементы.ГруппаЗУ.Видимость           = Ложь;
		Элементы.ГруппаОУ.ОтображатьЗаголовок = Ложь;
		
		Элементы.ГруппаНачисления.Видимость       = Истина;
		Элементы.ГруппаНачисления.ТекущаяСтраница = Элементы.ГруппаСуммаНачисленияКомиссии;
		
		Элементы.ГруппаПодвал.Поведение           = ПоведениеОбычнойГруппы.Обычное;
		Элементы.ГруппаПодвал.ОтображатьЗаголовок = Ложь;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Ложь;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость               = Ложь;
		Элементы.СтраницаРассрочка.Видимость            = Истина;
		
		Элементы.Услуга.Видимость = Ложь;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Ложь;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Ложь;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаОУ.Видимость = Ложь;
		Элементы.ГруппаЗУ.Видимость = Ложь;
		
		// Скрываем кнопку "Добавить", т.к. её функционал программно ограничен.
		Элементы.НачисленияПоРассрочке.КоманднаяПанель.ПодчиненныеЭлементы.НачисленияПоРассрочкеДобавить.Видимость = Ложь;
		
		// ! Возможность добавления новых строк в ТЧ "НачисленияПоРассрочке" не предусмотрена:
		Элементы.НачисленияПоРассрочке.КонтекстноеМеню.ПодчиненныеЭлементы.НачисленияПоРассрочкеКонтекстноеМенюДобавить.Видимость    = Ложь;
		Элементы.НачисленияПоРассрочке.КонтекстноеМеню.ПодчиненныеЭлементы.НачисленияПоРассрочкеКонтекстноеМенюСкопировать.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования") Тогда
		
		// Установим видимость страниц. Ненужные страницы скроем.
		Элементы.СтраницаДеревоУслуг.Видимость          = Истина;
		Элементы.СтраницаДеревоПоПоказаниямПУ.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость               = Ложь;
		Элементы.СтраницаРассрочка.Видимость            = Ложь;
		
		Элементы.Услуга.Видимость      = Истина;
		Элементы.Услуга.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаКоличествоДней.Видимость                     = Ложь;
		Элементы.НадписьПояснениеДобровольногоСтрахования.Видимость = Истина;
		
		// Установим видимость итогов. Ненужные разделы скроем.
		Элементы.ГруппаИПУСторно.Видимость               = Ложь;
		Элементы.ГруппаОПУОДН.Видимость                  = Ложь;
		Элементы.ГруппаСуммаНачисленияКомиссии.Видимость = Ложь;
		Элементы.ГруппаЗУ.Видимость                      = Ложь;
		Элементы.ГруппаОУ.ОтображатьЗаголовок            = Ложь;
		
		Элементы.ГруппаНачисления.Видимость              = Истина;
		Элементы.ГруппаНачисления.ТекущаяСтраница        = Элементы.ГруппаСуммаНачисленияПоДС;
		
		Элементы.ГруппаПодвал.Поведение           = ПоведениеОбычнойГруппы.Обычное;
		Элементы.ГруппаПодвал.ОтображатьЗаголовок = Ложь;
		
		Элементы.ДеревоУслугГруппаРазвернуть.Видимость        = Ложь;
		Элементы.ДеревоУслугКомандаРазвернуть.Видимость       = Истина;
		Элементы.ДеревоУслугДобавитьВУзел.Видимость           = Ложь;
		Элементы.ДеревоУслугДобавитьУзел.Видимость            = Ложь;
		Элементы.ДеревоУслугЗакончитьРедактирование.Видимость = Ложь;
		
	КонецЕсли;
	
	// ПодсистемыЖКХ.ОтладкаРасчетов
	ИспользоватьРежимОтладкиРасчетов = ИспользоватьРежимОтладкиРасчетов();
	
	Элементы.ФормаОтладкаНачислений_ОткрытьПротоколРасчетов.Видимость = ИспользоватьРежимОтладкиРасчетов;
	Элементы.ГруппаВключитьРежимОтладкиРасчетов.Видимость             = Не ИспользоватьРежимОтладкиРасчетов;
	// Конец ПодсистемыЖКХ.ОтладкаРасчетов
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// УСЛОВНОЕ ОФОРМЛЕНИЕ

&НаСервере
// Процедура устанавливает условное оформление формы.
//
Процедура УстановитьУсловноеОформление()
	
	// ПРИМЕЧАНИЕ:
	// Условное оформление устанавливается программно, так как анализировать и поддерживать
	// настройки условного оформления, заданные через свойства формы в диалоге сложно.
	
	//////////////////////////////////////
	// 1. ДЕРЕВО УСЛУГ
	
	// 1.1. Для строк верхнего уровня (лицевые счета - тип строки 1) установим чередование строк,
	//      для этого для нечетных строк зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень1);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ЧетнаяСтрока",      ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.2. Для строк верхнего уровня (лицевые счета - тип строки 1) установим только просмотр
	//      для числовых полей и поля "Договор контрагента".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугТариф");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугКоличество");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугНачислено");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугДоговор");
	
	// 1.3. Для строк верхнего уровня (лицевые счета - тип строки 1) установим жирный шрифт.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь));
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.4. Для строк с услугами (тип строки 2) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень2);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 2);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.5. Для строк с периодом (тип строки 3) зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень3);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.6. Для строк нижнего уровня, где поле "Лицевой счет" не содержит
	//      данные об услуге (тип строки 2) и периоде (тип строки 3) зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень4);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.7. Для строк с услугами (тип строки 2) установим только просмотр для количественных полей и поля "Договор контрагента".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 2);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугТариф");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугКоличество");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугНачислено");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугДоговор");
	
	// 1.8. Для строк с периодом (тип строки 1) установим только просмотр для поля "Период".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугЛицевойСчет");
	
	// __________________________________________________________
	// Дополнительно зададим настройки оформления зависимых услуг.
	// __________________________________________________________
	
	// 1.9. Для строк с зависимыми услугами (тип строки 2) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияЗависимойУслуги_Уровень1);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.10. Для строк с периодом зависимых услуг(тип строки 3) зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияЗависимойУслуги_Уровень2);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 3);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.11. Для всех строк зависимых услуг зададим цвет текста.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УПЖКХ_ЦветТекстаНачисленияЗависимойУслуги);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг");
	
	// 1.12. Для всех строк зависимых услуг, рассчитываемых по собственному нормативу зададим цвет текста.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатПредупреждениеЦвет);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслуг.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 6);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоУслугУслугаОснование");
	
	
	//////////////////////////////////////
	// 2.ДЕРЕВО УСЛУГ ПО ПОКАЗАНИЯМ ПУ
	
	// 2.1. Для строк верхнего уровня (лицевые счета - тип строки 1) установим чередование строк,
	//      для этого для нечетных строк зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень1);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ЧетнаяСтрока",      ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.2. Для строк верхнего уровня (лицевые счета - тип строки 1) установим только просмотр
	//      для количественных полей и поля "Договор контрагента".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУТариф");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаРаспределения");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУДоговор");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание");
	
	// 2.3. Для строк верхнего уровня (лицевые счета - тип строки 1) установим жирный шрифт.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь));
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.4. Для строк с услугами (тип строки 2) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень2);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 2);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.5. Для строк с периодами (тип строки 3) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень3);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");

	
	// 2.6. Для строк нижнего уровня, не содержащих данные об услугах (тип строки 2) и периодах (тип строки 3) зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияОсновнойУслуги_Уровень4);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно,   Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.7. Для строк периода (тип строки 3) и вида тарифа (тип строки 4) установим только просмотр
	//      для полей "Период" и "Вид тарифа" соответственно.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ГруппаОтбора, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 3);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ГруппаОтбора, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 4);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУЛицевойСчет");
	
	//  2.8. Для строк нижнего уровня при типе индивидуального расчета по показаниям,
	//    установим только просмотр для полей с нормативными показаниями без ИПУ и без показаний.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.ТипРасчета",            ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний");
	
	// 2.9. Для строк нижнего уровня при типе индивидуального расчета отличным от расчета по показаниям,
	//      установим только просмотр для полей с суммой и количеством по ПУ.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно,   Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.ТипРасчета",            ВидСравненияКомпоновкиДанных.НеРавно, 0);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоПУ");
	
	// 2.10. Для строк услуги (тип строки 2) и периода (тип строки 3) установим только просмотр
	//       для количественных полей и поля "Договор контрагента".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ГруппаОтбора, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ГруппаОтбора, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки", ВидСравненияКомпоновкиДанных.Равно, 3);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУТариф");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУДоговор");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаРаспределения");
	
	// 2.11. Для строк нижнего уровня, содержащих значение "Сторно" (тип строки 5), зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 5);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУЛицевойСчет");
	
	// 2.12. Для строк нижнего уровня, содержащих данные о сторно, установим только просмотр
	//       для всех количественных полей и поля "Договор контрагента".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Сторно",                ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаПоНормативу");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУТариф");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоПоПУ");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУДоговор");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУСуммаРаспределения");
	// __________________________________________________________
	// Дополнительно зададим настройки оформления зависимых услуг.
	// __________________________________________________________
	
	// 2.13. Для строк с зависимыми услугами (тип строки 2) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияЗависимойУслуги_Уровень1);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.14. Для строк с периодами зависимых услуг (тип строки 3) установим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияЗависимойУслуги_Уровень2);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.Равно, 3);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.15. Для строк нижнего уровня зависимых услуг, не содержащих данные об услугах (тип строки 2)
	//       и периодах (тип строки 3) зададим цвет фона.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.УПЖКХ_ЦветФонаНачисленияЗависимойУслуги_Уровень3);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_РодительОпределен", ВидСравненияКомпоновкиДанных.Равно,   Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 2);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Доп_ТипСтроки",         ВидСравненияКомпоновкиДанных.НеРавно, 3);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.16. Для всех строк зависимых услуг зададим цвет текста.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УПЖКХ_ЦветТекстаНачисленияЗависимойУслуги);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.Зависимая",             ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ");
	
	// 2.17. Для строк "по собственному нормативу" зададим цвет текста.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатПредупреждениеЦвет);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУ.ЗависимаяПоНормативу",  ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоПоказаниямПУЛицевойСчет");
	
КонецПроцедуры

&НаСервере
// Процедура добавляет элемент отбора в для оформления в условном оформлении формы.
//
// Параметры:
//  ЭлементОформления		 - ЭлементУсловногоОформленияКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных
//                           - Текущий элемент условного формления или группа элементов;
//  ИмяПоляКомпоновкиДанных	 - Строка - Имя поля, по которому станавливается отбор;
//  ВидСравнения			 - Перечисление ВидСравненияКомпоновкиДанных - вид для сравнения значений для отбора;
//  ПравоеЗначение			 - Тип поля левого значения - Значение, которое должно принимать поле компоновки 
//                                                        данных для использования оформления.
//
Процедура ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, ИмяПоляКомпоновкиДанных, ВидСравнения, ПравоеЗначение)
	
	Если ТипЗнч(ЭлементОформления) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ЭлементОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет элемент формы в оформляемые поля условного оформления.
//
Процедура ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, ИмяПоля)
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Устанавливает пояснение к месяцу начисления добровольного страхования.
Процедура УстановитьПояснениеКДобровольномуСтрахованию(Дата, ЗаголовокНадписи)
	
	ЗаголовокНадписи = "Начисление добровольного страхования за " + Формат(ДобавитьМесяц(Дата, 2), "ДФ='ММММ гггг'") + " г.";
	
КонецПроцедуры // УстановитьПояснениеКДобровольномуСтрахованию()

///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
// Процедура установки заголовка сворачиваемой группы итогов.
//
Функция ПолучитьЗаголовокГруппыИтогов(Форма)
	
	// Для информации:
	// Свертка группы итогов используется пока только при начислении услуг по ПУ.
	
	ЗаголовокГруппы = НСтр("ru='Начислено'");
	
	Если Форма.ИмеютсяСтрокиЗУ Тогда
		
		ЗаголовокГруппы = ЗаголовокГруппы + " по основным услугам: "  + Форма.СуммаНачисления + " руб.;";
		ЗаголовокГруппы = ЗаголовокГруппы + " по зависимым услугам: " + Форма.СуммаНачисленияЗУ + " руб.";
		
	ИначеЕсли НЕ ПустаяСтрока(Форма.СуммаНачисления) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ": " + Форма.СуммаНачисления + " руб."
	КонецЕсли;
	
	Возврат ЗаголовокГруппы;
	
КонецФункции // ПолучитьЗаголовокГруппыИтогов()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСворачиваемойГруппыИтогов(Форма)
	
	// Для информации:
	// Свертка группы итогов используется пока только при начислении услуг по ПУ.
	
	Элементы = Форма.Элементы;
	
	// Установка заголовка группы итогов под табличной частью.
	Элементы.ГруппаПодвал.Заголовок = ПолучитьЗаголовокГруппыИтогов(Форма);
	Элементы.ГруппаПодвал.ЗаголовокСвернутогоОтображения = Элементы.ГруппаПодвал.Заголовок;
	
КонецПроцедуры // УстановитьЗаголовокСворачиваемойГруппыИтогов()

&НаКлиентеНаСервереБезКонтекста
// Процедура установки заголовка формы.
//
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	
	ТекстЗаголовка= НСтр("ru = 'Начисление'");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' на лицевые счета'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' по показаниям приборов учета'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' на парковочные места'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' рассрочки'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' комиссии банка'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования") Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' добровольного страхования'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
// Функция возвращает составные услуги услуги.
Функция ПолучитьСоставныеУслуги(Услуга)
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого ТекСтрока Из Услуга.СоставныеУслуги Цикл
		СтруктураУслуги = Новый Структура;
		СтруктураУслуги.Вставить("Услуга",         ТекСтрока.Услуга);
		СтруктураУслуги.Вставить("ВидОграничения", ТекСтрока.ВидОграничения);
		МассивСтруктур.Добавить(СтруктураУслуги);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервере
// Функция возвращает услуги не по ПУ и комиссии банка + зависимые услуги от услуг по ПУ
// для выбора при начислении обычных услуг.
Функция ПолучитьСписокУслугДляВыбора(СписокСпособовРасчетаДляИсключения)
	
	СписокВыбранныхУслуг = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Услуги.Ссылка,
	|	КВП_Услуги.СпособРасчета
	|ПОМЕСТИТЬ ВрУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга
	|ПОМЕСТИТЬ ВрЗависимыеПоПУ
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(&ПериодСреза, УслугаОснование.СпособРасчета В (&СписокСпособовРасчетаДляИсключения)) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Ссылка КАК Услуга
	|ИЗ
	|	ВрУслуги КАК Услуги
	|ГДЕ
	|	НЕ Услуги.СпособРасчета В (&СписокСпособовРасчетаДляИсключения)
	|	И ВЫБОР
	|			КОГДА &ВестиУчетНачисленийПоДобровольномуСтрахованию
	|				ТОГДА НЕ Услуги.Ссылка = &УслугаДобровольногоСтрахования
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗависимыеПоПУ.Услуга
	|ИЗ
	|	ВрЗависимыеПоПУ КАК ЗависимыеПоПУ";
	
	Запрос.УстановитьПараметр("СписокСпособовРасчетаДляИсключения",            СписокСпособовРасчетаДляИсключения);
	Запрос.УстановитьПараметр("ПериодСреза",                                   Объект.Дата);
	Запрос.УстановитьПараметр("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования",                УслугаДобровольногоСтрахования);
	
	СписокВыбранныхУслуг.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга"));
	
	Возврат СписокВыбранныхУслуг;
	
КонецФункции // ПолучитьСписокУслугДляВыбора()

&НаКлиенте
// Устанавливает отбор услуг в справочнике "Услуги" в зависимости от вида операции документа.
Функция УстановитьОтборУслуг(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		
		ССпРасчета = Новый СписокЗначений;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
			
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка"));
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
			
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СпособРасчета", ССпРасчета);
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", 
								Новый Структура("ТекущаяСтрока, Отбор, ЭтоГруппа, ОтображатьСписком", 
												Объект.Услуга, СтруктураОтбора, Ложь, Истина), Элемент);
		
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
	ИначеЕсли НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования") Тогда
		
		ССпРасчета = Новый СписокЗначений;
		ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
		ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
		ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка"));
		
		// ОСОБЕННОСТЬ:
		// При начислении "обычных" услуг теперь начисляются в т.ч. зависимые услуги по ПУ, рассчитываемые по собственному нормативу.
		// Поэтому определяем нужные услуги и устанавливаем отбор в списке.
		// Кроме этого, если ведется учет начислений по добровольному страхованию, то исключаем еще и услугу добровольного страхования.
		СписокВыбранныхУслуг = ПолучитьСписокУслугДляВыбора(ССпРасчета);
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.Услуга), Элемент);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
																ВидСравненияКомпоновкиДанных.ВСписке, , Истина, 
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		
	КонецЕсли;
	
	Форма.Открыть();
	
КонецФункции // УстановитьОтборУслуг()

&НаСервере
// Устанавливает количество дней начисления по текущей дате.
Процедура ЗаполнитьКоличествоДнейНачисления(Перезаполнять = Истина)
	
	ЭтоДобровольноеСтрахование = (Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования);
	
	ДнейВМесяце = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(?(ЭтоДобровольноеСтрахование, ДобавитьМесяц(Объект.Дата, 2), Объект.Дата));
	
	Если Не ЭтоДобровольноеСтрахование И мКоличествоДнейЗаданоВручную Тогда
		Если Перезаполнять Тогда
			// Проверим, не было ли введено больше, чем теперь стало.
			Объект.КоличествоДнейНачисления = Мин(Объект.КоличествоДнейНачисления, ДнейВМесяце);
		КонецЕсли;
	Иначе
		Объект.КоличествоДнейНачисления = ДнейВМесяце;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоличествоДнейНачисления()

&НаКлиенте
// Получает способ расчета услуги.
//
// Параметры:
//  Услуга  - услуга, для которой определяется способ расчета.
//
// Возвращаемое значение:
//   Способ расчета услуги.
//
Функция ПолучитьСпособРасчетаУслуги(Услуга)
	
	СпособРасчета = мСоотвСпРасчетаУслуг.Получить(Услуга);
	Если СпособРасчета = Неопределено Тогда
		СпособРасчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Услуга, "СпособРасчета");
		мСоотвСпРасчетаУслуг.Вставить(Услуга, СпособРасчета);
	КонецЕсли;
	
	Возврат СпособРасчета;
	
КонецФункции // ПолучитьСпособРасчетаУслуги()

&НаКлиенте
// Функция разбивает месяц начисления на подпериоды при добавлении нового периода в дерево значений.
Функция ВыполнитьРазбивкуНаПодпериоды(Строки, ВыбранныйПериод, ПУ)
	
	Индекс = 1;
	Для Каждого ТекСтрока Из Строки Цикл
		Если НачалоДня(ТекСтрока.НачалоПериода) < НачалоДня(ВыбранныйПериод)
		   И НачалоДня(ТекСтрока.КонецПериода) >= НачалоДня(ВыбранныйПериод) Тогда
			
			КонецПериода = ТекСтрока.КонецПериода;
			
			ТекСтрока.КонецПериода = НачалоДня(ВыбранныйПериод) - 1;
			ТекСтрока.ЛицевойСчет  = Формат(ТекСтрока.НачалоПериода, "ДЛФ=Д") + " - " + Формат(ТекСтрока.КонецПериода, "ДЛФ=Д");
			
			Если Не ПУ Тогда
				ТекСтрока.ДнейНачислено = День(ТекСтрока.КонецПериода) - День(ТекСтрока.НачалоПериода) + 1;
			КонецЕсли;
			
			ПересчитатьСуммуСтрокиТЧ(ТекСтрока);
			
			НоваяВетка = Строки.Добавить();
			НоваяВетка.ЛицевойСчет   = Формат(ВыбранныйПериод, "ДЛФ=Д") + " - " + Формат(КонецПериода, "ДЛФ=Д");
			НоваяВетка.НачалоПериода = ВыбранныйПериод;
			НоваяВетка.КонецПериода  = КонецПериода;
			
			Если Не ПУ Тогда
				НоваяВетка.ДнейНачислено = День(НоваяВетка.КонецПериода) - День(НоваяВетка.НачалоПериода) + 1;
			КонецЕсли;
			
			Если ПУ Тогда
				ВидыТарифов = ОпределитьВидыТарифов();
				Для Каждого ТекВидТарифа Из ВидыТарифов Цикл 
					НоваяСтрока = НоваяВетка.ПолучитьЭлементы().Добавить();
					НоваяСтрока.ВидТарифа   = ТекВидТарифа.Значение;
					НоваяСтрока.ЛицевойСчет = НоваяСтрока.ВидТарифа;
					НоваяСтрока.НачалоПериода = ВыбранныйПериод;
					НоваяСтрока.КонецПериода  = КонецПериода;
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
			
			ИндексНовойСтроки = НоваяВетка;
			
			Прервать;
			
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// сместим новую строку в порядке возрастания периодов
	Если Не ИндексНовойСтроки = Неопределено И НЕ Индекс = Строки.Количество() - 1 Тогда
		Строки.Сдвинуть(Строки.Количество() - 1, - (Строки.Количество() - 1 - Индекс));
	КонецЕсли;
	
КонецФункции //ВыполнитьРазбивкуНаПодпериоды()

&НаКлиенте
// Пересчитывает сумму начисления по количеству и тарифу.
//
// Параметры:
//  СтрокаТЧ     - строка табличной части документа.
//
Процедура ПересчитатьСуммуСтрокиТЧ(СтрокаТЧ, ИмяКолонкиТЧ = Неопределено)

	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
		
		Если НЕ ИмяКолонкиТЧ = Неопределено И ИмяКолонкиТЧ = "Начислено" Тогда
			СтрокаТЧ.Количество = СтрокаТЧ.Начислено / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф)
			                    * СтрокаТЧ.ДнейНачислено / Объект.КоличествоДнейНачисления;
		Иначе
			СтрокаТЧ.Начислено = СтрокаТЧ.Количество * СтрокаТЧ.Тариф * СтрокаТЧ.ДнейНачислено / Объект.КоличествоДнейНачисления;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") Тогда
		
		СтрокаТЧ.Начислено = СтрокаТЧ.Количество * СтрокаТЧ.Тариф * СтрокаТЧ.ДнейНачислено / УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Объект.Дата);
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтрокаТЧ.Услуга, "РасчетКомиссииСверху") Тогда
			КоэфНачисления = СтрокаТЧ.Тариф;
		Иначе
			КоэфНачисления = СтрокаТЧ.Тариф/(1 + СтрокаТЧ.Тариф);
		КонецЕсли;
		
		СтрокаТЧ.Начислено = СтрокаТЧ.СуммаНачислений * КоэфНачисления;
		
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		
		Если НЕ ИмяКолонкиТЧ = Неопределено Тогда
			Если ИмяКолонкиТЧ = "СуммаПоНормативу" Тогда
				Если СтрокаТЧ.СостояниеПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ") Тогда
					СтрокаТЧ.КоличествоПоНормативуБезИПУ = СтрокаТЧ.СуммаПоНормативу / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф);
				ИначеЕсли СтрокаТЧ.СостояниеПУ = 
							ПредопределенноеЗначение("Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний") Тогда
					СтрокаТЧ.КоличествоПоНормативуБезПоказаний = СтрокаТЧ.СуммаПоНормативу / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф);
				КонецЕсли;
			ИначеЕсли ИмяКолонкиТЧ = "СуммаПоПУ" Тогда
				СтрокаТЧ.КоличествоПоПУ        = СтрокаТЧ.СуммаПоПУ / ?(СтрокаТЧ.Тариф = 0, 1, СтрокаТЧ.Тариф);
			ИначеЕсли ИмяКолонкиТЧ = "КоличествоПоПУ" 
			      ИЛИ ИмяКолонкиТЧ = "КоличествоПоНормативуБезИПУ"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоПоНормативуБезПоказаний"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияПомещение"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияПодъезд"
			      ИЛИ ИмяКолонкиТЧ = "КоличествоРаспределенияЗдание"
			      ИЛИ ИмяКолонкиТЧ = "Тариф" Тогда
				СтрокаТЧ.СуммаПоПУ             = СтрокаТЧ.КоличествоПоПУ        * СтрокаТЧ.Тариф;
				СтрокаТЧ.СуммаПоНормативу      = (СтрокаТЧ.КоличествоПоНормативуБезИПУ
				                               + СтрокаТЧ.КоличествоПоНормативуБезПоказаний) * СтрокаТЧ.Тариф;
				СтрокаТЧ.СуммаРаспределения    = (СтрокаТЧ.КоличествоРаспределенияПомещение
				                                + СтрокаТЧ.КоличествоРаспределенияПодъезд
				                                + СтрокаТЧ.КоличествоРаспределенияЗдание) * СтрокаТЧ.Тариф;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Начислено = СтрокаТЧ.СуммаПоПУ + СтрокаТЧ.СуммаПоНормативу + СтрокаТЧ.СуммаРаспределения;
		
	КонецЕсли;

КонецПроцедуры // ПересчитатьСуммуСтрокиТЧ()

&НаКлиенте
// Процедура заполняет данные всех дочерних строк у текущей строки.
Процедура ЗаполнитьДанныеДочернихСтрок(Строка, ШаблонСтроки, ПУ = Ложь)
	
	КоллекцияЭлементов = Строка.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из ШаблонСтроки Цикл
		
		НоваяСтрока = КоллекцияЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор(), , ПУ);
		
		Если ТекСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьДанныеДочернихСтрок(НоваяСтрока, ТекСтрока.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //ЗаполнитьДанныеДочернихСтрок()

&НаКлиенте
// Функция возвращает максимальный номер строки дерева значений.
Функция ПолучитьМаксимальныйНомерСтроки(ТекДерево)
	
	Возврат ТекДерево.ПолучитьЭлементы().Количество();
	
КонецФункции //ПолучитьМаксимальныйНомерСтроки()

&НаКлиенте
// Устанавливает список видов тарифов.
Функция ОпределитьВидыТарифов()

	СпВидовТарифов = Новый СписокЗначений();
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Дневной"));
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Ночной"));
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Пиковый"));
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Общий"));
	ИначеЕсли Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.КомиссияБанка"));
	Иначе // начисление на л/с 
		СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Общий"));
	КонецЕсли;
	
	Возврат СпВидовТарифов;
	
КонецФункции // ОпределитьВидыТарифов()

&НаСервере
// Процедура устанавливает точность для полей ввода, содержащих объемы начислений для всех табличных полей документа
// в соответствии с выбранной пользователем точностью в настройках программы.
Процедура УстановитьТочностьОбъемовНачислений()
	
	СтрокаФормата = "ЧДЦ=" + Строка(мТочностьОбъемаНачислений) + "";
	
	Элементы.ДеревоУслугКоличество.Формат = СтрокаФормата;
	
	Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ.Формат       = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний.Формат = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУКоличествоПоПУ.Формат                    = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУУчетныйИндивидуальныйОбъем.Формат        = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение.Формат  = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд.Формат    = СтрокаФормата;
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание.Формат     = СтрокаФормата;
	
	Элементы.УслугиКоличество.Формат = СтрокаФормата;
	
КонецПроцедуры // УстановитьТочностьОбъемовНачислений()

&НаКлиенте
// Процедура выполняет добавление новой строки в дерево значений.
Процедура ВыполнитьДобавлениеСтроки(Элемент, Копирование, Отказ, ТекДерево, ПУ = Ложь)
	
	Отказ              = Истина;
	Модифицированность = Истина;
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = ТекСтрока.ПолучитьРодителя();
	ТекТип      = ТипЗнч(ТекСтрока.ЛицевойСчет);
	
	Если Копирование Тогда
		
		Если ТекРодитель = Неопределено Тогда
			НоваяСтрока = ТекДерево.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ном = ПолучитьМаксимальныйНомерСтроки(ТекДерево) + 1;
		Иначе
			НоваяСтрока = ТекРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		Если ТекТип = Тип("Строка") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, "ЛицевойСчет");
		КонецЕсли;
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
		ЗаполнитьДанныеДочернихСтрок(НоваяСтрока, ТекСтрока.ПолучитьЭлементы(), ПУ);
		
		Если НЕ ПУ Тогда
			ЗаполнитьТабличнуюЧастьПоДереву();
			ПересчитатьВсегоНачислено();
		Иначе
			ПересчитатьСуммуСтрокиТЧ(ТекСтрока);
			ЗаполнитьТабличнуюЧастьПоДеревуПоказанийПУ();
			РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ();
		КонецЕсли;
		
		ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор(), , ПУ);
		
	Иначе
		
		Если ТекТип = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			
			ССпРасчета = Новый СписокЗначений;
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
			Если НЕ ПУ Тогда
				ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка"));
			КонецЕсли;
			
			Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", ,Элемент);
			
			Если ПУ Тогда
				
				Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
				Форма.Параметры.ОтображатьСписком = Истина;
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "ЭтоГруппа", Ложь,
												 ВидСравненияКомпоновкиДанных.Равно, , Истина);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "СпособРасчета", ССпРасчета,
											 ?(ПУ, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.НеВСписке), , Истина);
											 
			Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "Ссылка", УслугаДобровольногоСтрахования,
											 	ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
			КонецЕсли;
			
			Форма.ВладелецФормы = ЭтаФорма;
			
			ДопПараметры = Новый Структура("ТекСтрока, ПУ", ТекСтрока, ПУ);
			Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораУслугиВыполнитьДобавлениеСтроки", ЭтаФорма, ДопПараметры);
			Форма.Открыть();
			
		ИначеЕсли ТекТип = Тип("СправочникСсылка.КВП_Услуги") Тогда
			
			ВыбранныйПериод    = НачалоМесяца(Объект.Дата);
			ДопПараметры       = Новый Структура("ПУ, ТекСтрока, ВыбранныйПериод", ПУ, ТекСтрока, ВыбранныйПериод);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВводЗначенияВыполнитьДобавлениеСтроки", ЭтотОбъект, ДопПараметры);
			ПоказатьВводЗначения(ОписаниеОповещения, ВыбранныйПериод, "Укажите дату для установки");
			Возврат;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДобавлениеСтроки()

&НаКлиенте
// Обработчик результата выбора услуги, вызванного в процедуре "ВыполнитьДобавлениеСтроки()".
Процедура ОбработатьРезультатВыбораУслугиВыполнитьДобавлениеСтроки(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Результат, "ЭтоГруппа") Тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрока = ДопПараметры.ТекСтрока;
		ПУ        = ДопПараметры.ПУ;
		
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			
			НоваяВеткаУслуги             = ТекСтрока.ПолучитьЭлементы().Добавить();
			НоваяВеткаУслуги.ЛицевойСчет = Результат;
			
			ЗаполнитьДанныеДляУсловногоОформления(НоваяВеткаУслуги.ПолучитьИдентификатор(), , ПУ);
			
			СпособРасчета = ПолучитьСпособРасчетаУслуги(Результат);
			
			Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
			 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
				
				Для Каждого ТекУслуга Из ПолучитьСоставныеУслуги(Результат) Цикл
					НоваяВетка             = НоваяВеткаУслуги.ПолучитьЭлементы().Добавить();
					НоваяВетка.ЛицевойСчет = ТекУслуга.Услуга;
					
					ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
					
					НоваяВетка             = НоваяВетка.ПолучитьЭлементы().Добавить();
					НоваяВетка.ЛицевойСчет = Формат(НачалоМесяца(Объект.Дата), "ДЛФ=Д") + " - "
					                        + Формат(КонецМесяца(Объект.Дата), "ДЛФ=Д");
					НоваяВетка.НачалоПериода = НачалоМесяца(Объект.Дата);
					НоваяВетка.КонецПериода  = КонецМесяца(Объект.Дата);
					Если НЕ ПУ Тогда
						НоваяВетка.ДнейНачислено = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Объект.Дата);
					КонецЕсли;
					
					ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
					
					Если ПУ Тогда
						ВидыТарифов = ОпределитьВидыТарифов();
						Для Каждого ТекВидТарифа Из ВидыТарифов Цикл 
							НоваяСтрока = НоваяВетка.ПолучитьЭлементы().Добавить();
							НоваяСтрока.ВидТарифа     = ТекВидТарифа.Значение;
							НоваяСтрока.ЛицевойСчет   = НоваяСтрока.ВидТарифа;
							НоваяСтрока.НачалоПериода = НачалоМесяца(Объект.Дата);
							НоваяСтрока.КонецПериода  = КонецМесяца(Объект.Дата);
							
							ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор(), , ПУ);
							
						КонецЦикла;
					КонецЕсли;
					
					Если ТекУслуга.ВидОграничения = 
							ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг.БезОграничения") Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				НоваяВетка             = НоваяВеткаУслуги.ПолучитьЭлементы().Добавить();
				НоваяВетка.ЛицевойСчет = Формат(НачалоМесяца(Объект.Дата), "ДЛФ=Д") + " - "
				                       + Формат(КонецМесяца(Объект.Дата), "ДЛФ=Д");
				НоваяВетка.НачалоПериода = НачалоМесяца(Объект.Дата);
				НоваяВетка.КонецПериода  = КонецМесяца(Объект.Дата);
				Если НЕ ПУ Тогда
					НоваяВетка.ДнейНачислено = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Объект.Дата);
				КонецЕсли;
				
				ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
				
				Если ПУ Тогда
					ВидыТарифов = ОпределитьВидыТарифов();
					Для Каждого ТекВидТарифа Из ВидыТарифов Цикл 
						НоваяСтрока = НоваяВетка.ПолучитьЭлементы().Добавить();
						НоваяСтрока.ВидТарифа     = ТекВидТарифа.Значение;
						НоваяСтрока.ЛицевойСчет   = НоваяСтрока.ВидТарифа;
						НоваяСтрока.НачалоПериода = НачалоМесяца(Объект.Дата);
						НоваяСтрока.КонецПериода  = КонецМесяца(Объект.Дата);
						
						ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор(), , ПУ);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			НоваяВетка              = ТекСтрока.ПолучитьЭлементы().Добавить();
			НоваяВетка.ЛицевойСчет = Результат.Ссылка;
			
			ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораУслугиВыполнитьДобавлениеСтроки()

&НаКлиенте
// Обработчик результата ввода значения, вызванного в процедуре "ВыполнитьДобавлениеСтроки()".
Процедура ОбработатьВводЗначенияВыполнитьДобавлениеСтроки(Значение, ДополнительныеПараметры) Экспорт
	
	ПУ              = ДополнительныеПараметры.ПУ;
	ТекСтрока       = ДополнительныеПараметры.ТекСтрока;
	ВыбранныйПериод = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбранныйПериод, Значение);
	
	Если (Значение <> Неопределено) Тогда
		Периоды = ВыполнитьРазбивкуНаПодпериоды(ТекСтрока.ПолучитьЭлементы(), ВыбранныйПериод, ПУ);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВводЗначенияВыполнитьДобавлениеСтроки()

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает имя колонки без имени дерева.
Функция ПолучитьИмяКолонкиДерева(ИмяКолонки, ИмяДерева)
	
	ПозицияПодстроки = Найти(ИмяКолонки, ИмяДерева);
	
	Если ПозицияПодстроки > 0 Тогда
		ИмяКолонки = Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - СтрДлина(ИмяДерева));
	КонецЕсли;
	
	Возврат ИмяКолонки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Пересчитывает итоги комиссии банка для панели информации.
Процедура ПересчитатьИтогиПоКомиссииБанка(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		
		// Определим параметры форматирования.
		СтрокаФорматированияСуммы  = "ЧДЦ=2; ЧН=0,00";
		
		Форма.СуммаНачисленияКомиссииБанка = Формат(Объект.Услуги.Итог("СуммаНачислений"), СтрокаФорматированияСуммы);
		Форма.СуммаКомиссии                = Формат(Объект.Услуги.Итог("Начислено"),       СтрокаФорматированияСуммы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Возвращает структуру параметров для заполнения начислений с отбором.
//
Функция ПолучитьСтруктуруПараметровДляЗаполненияСОтбором()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	СтруктураПараметров.Вставить("НачПериодЛС"           , НачалоМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("КонПериодЛС"           , Объект.Дата);
	СтруктураПараметров.Вставить("Организация"           , Объект.Организация);
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") 
	 ИЛИ (Объект.ВидОперации = 
	 		ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") 
	   И ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания") 
	   И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Объект, "ТипСооружения") = 
	   		ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Паркинг")) Тогда
		
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("ВладелецПарковочногоМеста" , Объект.Объект);
		
	Иначе
		
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ОбъектЛС"                  , Объект.Объект);
		СтруктураПараметров.Вставить("ЗданияКвартиры"            , Объект.Объект);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОчиститьКешНаСервере()
	
	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ОчиститьКешТаблицЗависящихОтУслуги();
	
КонецПроцедуры

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	Если ЭтоДерево Тогда
		ДанныеФормы = ДанныеФормыВЗначение(ЭтотОбъект[ИмяТЧ], Тип("ДеревоЗначений"));
	Иначе
		ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	КонецЕсли;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, ?(ЭтоДерево, ЭтотОбъект[ИмяТЧ], Объект[ИмяТЧ]));
	
КонецПроцедуры // СортироватьТЧНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Процедура осуществляет очистку таблиц документа начисления для избежания ошибок
// при копировании документа и изменении даты, организации документа в уже заполненном документе.
Процедура ОчиститьТаблицыНачисленийТекущегоДокумента(Форма)
	
	Объект = Форма.Объект;
	Объект.Услуги.Очистить();
	Объект.УслугиПоПоказаниямПУ.Очистить();
	Объект.Счетчики.Очистить();
	Объект.УчтенныеОбъемыРасхожденийПУ.Очистить();
	Объект.ОбъектыСРаспределеннымРасходомОДН.Очистить();
	Объект.НачисленияПоРассрочке.Очистить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с условным оформлением и дополнительными таблицу услуг.

&НаСервере
// Процедура заполняет доп. данные в строках таблицы услуг.
Процедура ЗаполнитьДопДанныеВУслугах()
	
	СписокЛС = Объект.Услуги.Выгрузить().ВыгрузитьКолонку("ЛицевыеСчета");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиТаблицы = Объект.Услуги.НайтиСтроки(Новый Структура("ЛицевыеСчета", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаТаблицы Из СтрокиТаблицы Цикл
			ТекСтрокаТаблицы.Здание   = ТекСтрока.Здание;
			ТекСтрокаТаблицы.Квартира = ТекСтрока.Помещение;
			ТекСтрокаТаблицы.Владелец = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с условным оформлением и дополнительными данными деревья.

&НаСервере
// Процедура заполняет данные для условного оформления в строке.
Процедура ЗаполнитьДанныеДляУсловногоОформления(ТекущаяСтрока, ЭтоСтрокаДерева = Ложь, ПУ = Ложь)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоСтрокаДерева Тогда
		// Это строка коллекции формы
		Если ПУ Тогда
			СтрокаДерева = ДеревоПоПоказаниямПУ.НайтиПоИдентификатору(ТекущаяСтрока);
		Иначе
			СтрокаДерева = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
		КонецЕсли;
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		СтрокиДерева    = СтрокаДерева.ПолучитьЭлементы();
		
	Иначе
		// Это строка дерева значений.
		СтрокаДерева = ТекущаяСтрока;
		
		ТекущийРодитель = СтрокаДерева.Родитель;
		СтрокиДерева    = СтрокаДерева.Строки;
		
	КонецЕсли;
	
	СтрокаДерева.Доп_РодительОпределен = Не (ТекущийРодитель = Неопределено);
	СтрокаДерева.Доп_ЧетнаяСтрока      = ((СтрокаДерева.Ном%2) = 0);
	
	Если ТипЗнч(СтрокаДерева.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		СтрокаДерева.Доп_ТипСтроки = 1;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.ЛицевойСчет) = Тип("СправочникСсылка.КВП_Услуги") Тогда
		
		СтрокаДерева.Доп_ТипСтроки = 2;
		Если ТипЗнч(СтрокаДерева.УслугаОснование) = Тип("Строка") 
		   И СтрокаДерева.УслугаОснование = ПолучитьПредставлениеСтроки_НачислениеЗУПоНормативу() Тогда
			СтрокаДерева.Доп_ТипСтроки = 6;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.ЛицевойСчет) = Тип("ПеречислениеСсылка.КВП_ВидыТарифов") Тогда
		
		СтрокаДерева.Доп_ТипСтроки = 4;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.ЛицевойСчет) = Тип("Строка") Тогда
		
		СтрокаДерева.Доп_ТипСтроки = 3;
		Если СтрокаДерева.ЛицевойСчет = ПолучитьПредставлениеСтроки_Сторно() Тогда
			СтрокаДерева.Доп_ТипСтроки = 5;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СтрокиДерева.Количество() > 0) И ЭтоСтрокаДерева Тогда
		ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные для условного оформления.
Процедура ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева, ПУ = Ложь)
	
	Для Каждого ТекСтрокаДерева Из СтрокиДерева Цикл
		
		ЗаполнитьДанныеДляУсловногоОформления(ТекСтрокаДерева, Истина, ПУ);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных данных
// в строках дерева.
Процедура ЗаполнитьДопДанныеВСтрокахДерева(ПУ = Ложь)
	
	Если ПУ Тогда
		ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоПоПоказаниямПУ", Тип("ДеревоЗначений"));
	Иначе
		ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	КонецЕсли;
	СписокЛС = ТЗДеревоУслуг.Строки.ВыгрузитьКолонку("ЛицевойСчет");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиДерева = ТЗДеревоУслуг.Строки.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаДерева Из СтрокиДерева Цикл
			ТекСтрокаДерева.Здание   = ТекСтрока.Здание;
			Если ПУ Тогда
				ТекСтрокаДерева.Помещение = ТекСтрока.Помещение;
			Иначе
				ТекСтрокаДерева.Квартира = ТекСтрока.Помещение;
			КонецЕсли;
			ТекСтрокаДерева.Владелец = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьДанныеДляУсловногоОформленияВСтроках(ТЗДеревоУслуг.Строки, ПУ);
	
	Если ПУ Тогда
		ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоПоПоказаниямПУ");
	Иначе
		ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоУслуг");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с условным оформлением и дополнительными данными "Дерево по ПУ".

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НАЧИСЛЕНИЙ УСЛУГ

&НаСервере
// Пересчитывает сумму начисления всего по документу.
Процедура ПересчитатьВсегоНачислено()
	
	НомерСтрокиДерева = 1;
	ВсегоНачисленоПоДокументу = 0;
	
	Для Каждого СтрокаЛС Из ДеревоУслуг.ПолучитьЭлементы() Цикл
		
		ВсегоНачисленоПоЛС = 0;
		Для Каждого СтрокаУслуги Из СтрокаЛС.ПолучитьЭлементы() Цикл
			ВсегоПоУслуге = 0;
			Для Каждого СтрокаСостУслуги Из СтрокаУслуги.ПолучитьЭлементы() Цикл
				Если СтрокаСостУслуги.ПолучитьЭлементы().Количество() > 0 Тогда
					ВсегоПоСостУслуге = 0;
					Для Каждого СтрокаПериода Из СтрокаСостУслуги.ПолучитьЭлементы() Цикл
						ВсегоПоСостУслуге = ВсегоПоСостУслуге + СтрокаПериода.Начислено;
					КонецЦикла;
					СтрокаСостУслуги.Начислено = ВсегоПоСостУслуге;
				КонецЕсли;
				ВсегоПоУслуге = ВсегоПоУслуге + СтрокаСостУслуги.Начислено;
			КонецЦикла;
			
			СтрокаУслуги.Начислено = ВсегоПоУслуге;
			// В строках л/с итоги без учета зависимых.
			ВсегоНачисленоПоЛС     = ВсегоНачисленоПоЛС + ?(СтрокаУслуги.Зависимая, 0, СтрокаУслуги.Начислено);
			
		КонецЦикла;
		СтрокаЛС.Начислено        = ВсегоНачисленоПоЛС;
		ВсегоНачисленоПоДокументу = ВсегоНачисленоПоДокументу + ВсегоНачисленоПоЛС;
		
		СтрокаЛС.Ном = НомерСтрокиДерева; 
		НомерСтрокиДерева = НомерСтрокиДерева + 1;
	КонецЦикла;
	
	// Заполним данные для панели информации (под табличной частью).
	
	// Определим параметры форматирования.
	СтрокаФорматированияОбъема = "ЧДЦ=" + Строка(мТочностьОбъемаНачислений) + "";
	СтрокаФорматированияСуммы  = "ЧДЦ=2; ЧН=0,00";
	
	// Основные услуги:
	
	ВсегоНачислено  = Формат(ВсегоНачисленоПоДокументу, СтрокаФорматированияСуммы);
	СуммаНачисления = Формат(ВсегоНачисленоПоДокументу, СтрокаФорматированияСуммы);
	
	// Зависимые услуги:
	
	// Итоговые значения по зависимым услугам берем из строк по услугам дерева.
	КоллекцияСтрок = ДеревоУслуг.ПолучитьЭлементы();
	ОтборПоЗУ      = Новый Структура("Зависимая", Истина);
	УровеньУслуг   = 1;
	
	// Особенность:
	// Т.к. объемы начислений услуг в таблице без учета периодов начисления,
	// то суммировать и показывать общие объемы начисления нет смысла.
	// Например, расчет услуги по норме, при этом в периоде расчета меняется тариф,
	// в итоге на каждом подпериоде отражается объем нормы за весь период, а не норма за подпериод.
	// Если складывать такие объемы, то общий суммарный объем будет неверным (задвоенным).
	
	ОбъемНачисленияЗУЗначение = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"Количество", Истина, ОтборПоЗУ, УровеньУслуг);
	СуммаНачисленияЗУЗначение = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"Начислено", Истина, ОтборПоЗУ, УровеньУслуг);
	ИмеютсяСтрокиЗУ           = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"Зависимая", Истина, ОтборПоЗУ, УровеньУслуг) > 0;
	
	ОбъемНачисленияЗУ = Формат(ОбъемНачисленияЗУЗначение, СтрокаФорматированияОбъема);
	СуммаНачисленияЗУ = Формат(СуммаНачисленияЗУЗначение, СтрокаФорматированияСуммы);
	
КонецПроцедуры  //ПересчитатьВсегоНачислено()

&НаСервере
// Заполняет дерево значений данными из табличной части документа.
Процедура ЗаполнитьДеревоУслуг(СортироватьПоНомеруСтрокиВТЧ = Ложь)
	
	МассивПолейСортировки = Новый Массив;
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Владелец");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.ВидПомещения");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Код");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Суффикс");
	МассивПолейСортировки.Добавить("ЛицевыеСчета");
	МассивПолейСортировки.Добавить("Зависимая");
	МассивПолейСортировки.Добавить("Услуга.Наименование");
	МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
	МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
	МассивПолейСортировки.Добавить("НачалоПериода");
	МассивПолейСортировки.Добавить("КонецПериода");
	МассивПолейСортировки.Добавить("ЗависимаяДляДерева");

	ТаблицаУслуг = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(Объект, "Услуги", МассивПолейСортировки);
	// Сортировать строки таблицы начислений по исходному номеру строки в табличной части
	// документа можно только при открытии формы, так как при заполнении документа и расчете ОДН
	// номер строки в ТЧ тоже будет заполнен, но он не будет соответствовать необходимым
	// правилам сортировки для корректного заполнения дерева начислений.
	Если СортироватьПоНомеруСтрокиВТЧ И Объект.Услуги.Количество() > 0 Тогда
		ТаблицаУслуг.Сортировать("ИсходныйНомерСтроки");
	КонецЕсли;
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	ТЗДеревоУслуг.Строки.Очистить();
	
	СписокСвойствВеткиПериод =
	"НачалоПериода,
	|КонецПериода,
	|Количество,
	|Тариф,
	|Начислено,
	|ДнейНачислено,
	|Договор,
	|Зависимая,
	|ЗависимаяПоНормативу";
	
	ПредставлениеНачислениеЗУПоНормативу = ПолучитьПредставлениеСтроки_НачислениеЗУПоНормативу();
	
	ПервыйОбходРезультата = Истина;
	Ном = 1;
	ВсегоНачисленоПоДокументу = 0;
	
	Для каждого стр из ТаблицаУслуг цикл
		Если стр.Зависимая тогда
			НаличиеУслугиЛС = проверитьНаличиеУслугиНаЛс(стр);
			Если   ЗначениеЗаполнено(НаличиеУслугиЛС) тогда
				стр.Договор=  ПолучитьДоговор(НаличиеУслугиЛС.лс);
				стр.ЛицевыеСчета = НаличиеУслугиЛС.лс;
				стр.ЗависимаяДляДерева = истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаУслуг.сортировать("ЛицевыеСчета Убыв, Зависимая Убыв ");
	Для Каждого ТекЗначение Из ТаблицаУслуг Цикл
		
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийЛС              = ТекЗначение.ЛицевыеСчета;
			ТекущаяУслуга          = ТекЗначение.Услуга;
			ТекущаяСостУслуга      = ТекЗначение.СоставнаяУслуга;
			ТекущаяУслугаОснование = ТекЗначение.УслугаОснование;
			ТекущееНачало          = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д");
			ТекущийКонец           = Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
			
			ВеткаЛС             = ТЗДеревоУслуг.Строки.Добавить();
			ВеткаЛС.Ном         = Ном;
			ВеткаЛС.ЛицевойСчет = ТекЗначение.ЛицевыеСчета;
			ВеткаЛС.ЗависимаяДляДерева =  ТекЗначение.ЗависимаяДляДерева;
			
			ВеткаУслуг                 = ВеткаЛС.Строки.Добавить();
			ВеткаУслуг.ЛицевойСчет     = ТекЗначение.Услуга;
			ВеткаУслуг.УслугаОснование = ?(ТекЗначение.ЗависимаяПоНормативу, ПредставлениеНачислениеЗУПоНормативу, ТекЗначение.УслугаОснование);
			ВеткаУслуг.Зависимая       = ТекЗначение.Зависимая;
			
			Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
				ВеткаСостУслуг             = ВеткаУслуг.Строки.Добавить();
				ВеткаСостУслуг.ЛицевойСчет = ТекЗначение.СоставнаяУслуга;
				ВеткаСостУслуг.Зависимая   = ТекЗначение.Зависимая;
				ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
			Иначе
				ВеткаПериод = ВеткаУслуг.Строки.Добавить();
			КонецЕсли;
			
			ВеткаПериод.ЛицевойСчет   = ТекущееНачало + " - " + ТекущийКонец;
			ЗаполнитьЗначенияСвойств(ВеткаПериод, ТекЗначение, СписокСвойствВеткиПериод);
			
			ПервыйОбходРезультата = Ложь;
			
		Иначе
			
			Если ТекЗначение.ЛицевыеСчета = ТекущийЛС Тогда
				
				Если ТекущаяУслуга = ТекЗначение.Услуга И ТекущаяУслугаОснование = ТекЗначение.УслугаОснование Тогда
					
					Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга)
					   И ТекущаяСостУслуга = ТекЗначение.СоставнаяУслуга Тогда
						
						ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
						ВеткаПериод.ЛицевойСчет  = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д") + " - "
						                         + Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
						ЗаполнитьЗначенияСвойств(ВеткаПериод, ТекЗначение, СписокСвойствВеткиПериод);
						
					Иначе
						
						Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
							ВеткаСостУслуг             = ВеткаУслуг.Строки.Добавить();
							ВеткаСостУслуг.ЛицевойСчет = ТекЗначение.СоставнаяУслуга;
							ВеткаСостУслуг.Зависимая   = ТекЗначение.Зависимая;
							ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
						Иначе
							ВеткаПериод = ВеткаУслуг.Строки.Добавить();
						КонецЕсли;
						ВеткаПериод.ЛицевойСчет  = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д") + " - "
						                          + Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
						ЗаполнитьЗначенияСвойств(ВеткаПериод, ТекЗначение, СписокСвойствВеткиПериод);
						
					КонецЕсли;
					
				Иначе
					
					ВеткаУслуг                 = ВеткаЛС.Строки.Добавить();
					ВеткаУслуг.ЛицевойСчет     = ТекЗначение.Услуга;
					ВеткаУслуг.УслугаОснование = ?(ТекЗначение.ЗависимаяПоНормативу, ПредставлениеНачислениеЗУПоНормативу, ТекЗначение.УслугаОснование);
					ВеткаУслуг.Зависимая       = ТекЗначение.Зависимая;
					
					Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
						ВеткаСостУслуг             = ВеткаУслуг.Строки.Добавить();
						ВеткаСостУслуг.ЛицевойСчет = ТекЗначение.СоставнаяУслуга;
						ВеткаСостУслуг.Зависимая   = ТекЗначение.Зависимая;
						ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
					Иначе
						ВеткаПериод = ВеткаУслуг.Строки.Добавить();
					КонецЕсли;
					
					ВеткаПериод.ЛицевойСчет   = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д") + " - "
					                          + Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
					ЗаполнитьЗначенияСвойств(ВеткаПериод, ТекЗначение, СписокСвойствВеткиПериод);
					
				КонецЕсли;
				
			Иначе
				
				ВеткаЛС             = ТЗДеревоУслуг.Строки.Добавить();
				ВеткаЛС.Ном         = Ном;
				ВеткаЛС.ЛицевойСчет = ТекЗначение.ЛицевыеСчета;
				
				ВеткаУслуг                 = ВеткаЛС.Строки.Добавить();
				ВеткаУслуг.ЛицевойСчет     = ТекЗначение.Услуга;
				ВеткаУслуг.УслугаОснование = ?(ТекЗначение.ЗависимаяПоНормативу, ПредставлениеНачислениеЗУПоНормативу, ТекЗначение.УслугаОснование);
				ВеткаУслуг.Зависимая       = ТекЗначение.Зависимая;
				ВеткаЛС.ЗависимаяДляДерева =  ТекЗначение.ЗависимаяДляДерева;

				Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
					ВеткаСостУслуг             = ВеткаУслуг.Строки.Добавить();
					ВеткаСостУслуг.ЛицевойСчет = ТекЗначение.СоставнаяУслуга;
					ВеткаСостУслуг.Зависимая   = ТекЗначение.Зависимая;
					ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
				Иначе
					ВеткаПериод = ВеткаУслуг.Строки.Добавить();
				КонецЕсли;
				
				ВеткаПериод.ЛицевойСчет   = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д") + " - "
				                          + Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
				ЗаполнитьЗначенияСвойств(ВеткаПериод, ТекЗначение, СписокСвойствВеткиПериод);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийЛС              = ТекЗначение.ЛицевыеСчета;
		ТекущаяУслуга          = ТекЗначение.Услуга;
		ТекущаяСостУслуга      = ТекЗначение.СоставнаяУслуга;
		ТекущаяУслугаОснование = ТекЗначение.УслугаОснование;
		ТекущееНачало          = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д");
		ТекущийКонец           = Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоУслуг");
	
	ПересчитатьВсегоНачислено();
	
КонецПроцедуры  //ЗаполнитьДеревоУслуг()

Функция проверитьНаличиеУслугиНаЛс(ТекЗначение)
	
	структураУслуги = новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_НазначенныеНачисленияСрезПоследних.Период КАК Период,
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК Объект,
		|	КВП_НазначенныеНачисленияСрезПоследних.Организация КАК Организация,
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует КАК Действует,
		|	КВП_НазначенныеНачисленияСрезПоследних.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(, ) КАК КВП_НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует = ИСТИНА
		|	И КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес = &Адрес
		|	И КВП_НазначенныеНачисленияСрезПоследних.Услуга = &Услуга
		|	И КВП_НазначенныеНачисленияСрезПоследних.Объект.ПометкаУдаления = ложь";
	
	Запрос.УстановитьПараметр("Адрес", ТекЗначение.ЛицевыеСчета.Адрес);
	Запрос.УстановитьПараметр("Услуга", ТекЗначение.Услуга);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТекЗначение.ЛицевыеСчета =ВыборкаДетальныеЗаписи.Объект тогда
			возврат "";
		Иначе
			Если ПроверитьАктивынйЛс(ВыборкаДетальныеЗаписи.Объект) тогда

			структураУслуги.Вставить("лс" , ВыборкаДетальныеЗаписи.Объект);
			структураУслуги.Вставить("Договор", ВыборкаДетальныеЗаписи.Объект);

			возврат структураУслуги;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПроверитьАктивынйЛс(ЛС)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует КАК Действует
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&dt, ) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует = ИСТИНА
		|	И КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = &ЛС";
	
	Запрос.УстановитьПараметр("dt", объект.Дата);
	Запрос.УстановитьПараметр("ЛС", ЛС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()= 0 тогда
		возврат ложь;
	Иначе
		ВыборкаДетальныеЗаписи.Следующий();				
		возврат  Истина;
	КонецЕсли;	
	
КонецФункции
Функция ПолучитьДоговор(ЛицевойСчет)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор КАК Договор,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент КАК Контрагент,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", объект.Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		возврат ВыборкаДетальныеЗаписи.Договор;
	КонецЦикла;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НАЧИСЛЕНИЙ ПО ПОКАЗАНИЯМ ПУ.

&НаСервере
// Заполняет дерево значений "Услуги по показаниям ПУ" данными из табличной части документа "Услуги по показаниям ПУ".
Процедура ЗаполнитьДеревоУслугПоПоказаниямПУ(СортироватьПоНомеруСтрокиВТЧ = Ложь)
	
	МассивПолейСортировки = Новый Массив;
	МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Владелец");
	МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.ВидПомещения");
	МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Код");
	МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Суффикс");
	МассивПолейСортировки.Добавить("ЛицевойСчет");
	МассивПолейСортировки.Добавить("Зависимая");
	МассивПолейСортировки.Добавить("Услуга.Наименование");
	МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
	МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
	МассивПолейСортировки.Добавить("НачислениеПоПовышающемуКоэффициенту");
	МассивПолейСортировки.Добавить("НачалоПериода");
	МассивПолейСортировки.Добавить("КонецПериода");
	МассивПолейСортировки.Добавить("ВидТарифа.Порядок");
	
	ТаблицаЛС = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(Объект, "УслугиПоПоказаниямПУ", МассивПолейСортировки);
	// Сортировать строки таблицы начислений по исходному номеру строки в табличной части
	// документа можно только при открытии формы, так как при заполнении документа
	// номер строки в ТЧ тоже будет заполнен, но он не будет соответствовать необходимым
	// правилам сортировки для корректного заполнения дерева начислений.
	Если СортироватьПоНомеруСтрокиВТЧ И Объект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
		ТаблицаЛС.Сортировать("ИсходныйНомерСтроки");
	КонецЕсли;
	
	ТЗДеревоПоПоказаниямПУ = РеквизитФормыВЗначение("ДеревоПоПоказаниямПУ", Тип("ДеревоЗначений"));
	ТЗДеревоПоПоказаниямПУ.Строки.Очистить();
	
	СписокСвойствВеткиОбъекта =
	"ЛицевойСчет";
	
	СписокСвойствВеткиПоказаний =
	"ВидТарифа,
	|Тариф,
	|УчетныйИндивидуальныйОбъем,
	|КоличествоРаспределенияПомещение,
	|КоличествоРаспределенияПодъезд,
	|КоличествоРаспределенияЗдание,
	|СуммаРаспределения,
	|ТипРасчета,
	|ФормулаРасчета,
	|Договор,
	|НачалоПериода,
	|КонецПериода,
	|СостояниеПУ,
	|ТолькоДляРаспределения,
	|Тарифность,
	|Сторно,
	|ТарифДляСторнирования,
	|НачислениеПоПовышающемуКоэффициенту,
	|Зависимая,
	|ЗависимаяПоНормативу";
	
	ПредставлениеСторно                              = ПолучитьПредставлениеСтроки_Сторно();
	ПредставлениеНачислениеПоПовышающемуКоэффициенту = ПолучитьПредставлениеСтроки_НачислениеПоПовышающемуКоэффициенту();
	ПредставлениеНачислениеЗУПоНормативу             = ПолучитьПредставлениеСтроки_НачислениеЗУПоНормативу();
	
	// Для информации:
	// Признак зависимой услуги добавляем не только для строк, но и для веток дерева, 
	// чтобы можно было идентифицировать группу зависимых услуг и соответствующим образом
	// настроить условное оформление.
	
	ПервыйОбходРезультата = Истина;
	Ном = 1;
	
	Для Каждого ТекущаяСтрока ИЗ ТаблицаЛС Цикл
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийОбъект     = ТекущаяСтрока.ЛицевойСчет;
			ТекущаяУслуга     = ТекущаяСтрока.Услуга;
			ТекущаяСостУслуга = ТекущаяСтрока.СоставнаяУслуга;
			ТекущаяУслугаОсн  = ТекущаяСтрока.УслугаОснование;
			ТекущееНачало     = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
			ТекущийКонец      = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
			ТекущийВидТарифа  = ТекущаяСтрока.ВидТарифа;
			ТекущееСторно     = ТекущаяСтрока.Сторно;
			ТекущееНачислениеПоПовышающемуКоэффициенту = ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту;
			ТекущаяЗависимая  = ТекущаяСтрока.Зависимая;
			ТекущийТипРасчета = ТекущаяСтрока.ТипРасчета;
			
			ВеткаОбъекта = ТЗДеревоПоПоказаниямПУ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВеткаОбъекта, ТекущаяСтрока, СписокСвойствВеткиОбъекта);
			ВеткаОбъекта.Ном = Ном;
			
			ВеткаУслуг = ВеткаОбъекта.Строки.Добавить();
			ВеткаУслуг.ЛицевойСчет     = ТекущаяСтрока.Услуга;
			ВеткаУслуг.УслугаОснование = ТекущаяСтрока.УслугаОснование;
			ВеткаУслуг.Зависимая       = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СоставнаяУслуга) Тогда
				ВеткаСостУслуг = ВеткаУслуг.Строки.Добавить();
				ВеткаСостУслуг.ЛицевойСчет = ТекущаяСтрока.СоставнаяУслуга;
				ВеткаСостУслуг.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
			ИначеЕсли ТекущаяСтрока.Сторно Тогда
				ВеткаСторно = ВеткаУслуг.Строки.Добавить();
				ВеткаСторно.ЛицевойСчет = ПредставлениеСторно;
				ВеткаСторно.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаСторно.Строки.Добавить();
			ИначеЕсли ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту Тогда
				ВеткаНачислениеПоПовышающемуКоэффициенту = ВеткаУслуг.Строки.Добавить();
				ВеткаНачислениеПоПовышающемуКоэффициенту.ЛицевойСчет = ПредставлениеНачислениеПоПовышающемуКоэффициенту;
				ВеткаНачислениеПоПовышающемуКоэффициенту.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаНачислениеПоПовышающемуКоэффициенту.Строки.Добавить();
			Иначе
				ВеткаПериод = ВеткаУслуг.Строки.Добавить();
			КонецЕсли;
			
			ВеткаПериод.ЛицевойСчет = ТекущееНачало + " - " + ТекущийКонец;
			ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
			
			ВеткаПоказаний = ВеткаПериод.Строки.Добавить();
			Если ТекущаяСтрока.ЗависимаяПоНормативу Тогда
				ВеткаПоказаний.ЛицевойСчет = ПредставлениеНачислениеЗУПоНормативу;
			Иначе
				ВеткаПоказаний.ЛицевойСчет = ТекущаяСтрока.ВидТарифа;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ВеткаПоказаний, ТекущаяСтрока, СписокСвойствВеткиПоказаний);
			ВеткаПоказаний.Начислено = ВеткаПоказаний.Начислено + ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРаспределения;
			
			Если ТекущаяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ() Тогда
				ВеткаПоказаний.КоличествоПоПУ = ТекущаяСтрока.ПоказаниеСчЛС;
				ВеткаПоказаний.СуммаПоПУ      = ТекущаяСтрока.Сумма;
			Иначе
				Если ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезИПУ = ТекущаяСтрока.ПоказаниеСчЛС;
				ИначеЕсли ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезПоказаний = ТекущаяСтрока.ПоказаниеСчЛС;
				КонецЕсли;
				ВеткаПоказаний.СуммаПоНормативу      = ВеткаПоказаний.СуммаПоНормативу + ТекущаяСтрока.Сумма;
			КонецЕсли;
			
			ПервыйОбходРезультата = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ЛицевойСчет = ТекущийОбъект Тогда
			
			НеобходимоДобавлениеПериода         = Ложь;
			НеобходимоДобавлениеСтрокиПоказаний = Ложь;
			
			Если НЕ ТекущаяСтрока.Услуга = ТекущаяУслуга ИЛИ НЕ ТекущаяСтрока.УслугаОснование = ТекущаяУслугаОсн Тогда
				
				ТекущаяУслуга    = ТекущаяСтрока.Услуга;
				ТекущаяУслугаОсн = ТекущаяСтрока.УслугаОснование;
				
				// При изменении услуги нужно принудительно сбросить составную услугу,
				// так как в документе могут быть две общедомовых услуги с одним составом составных услуг.
				ТекущаяСостУслуга = Неопределено;
				
				ВеткаУслуг = ВеткаОбъекта.Строки.Добавить();
				ВеткаУслуг.ЛицевойСчет     = ТекущаяСтрока.Услуга;
				ВеткаУслуг.УслугаОснование = ТекущаяСтрока.УслугаОснование;
				ВеткаУслуг.Зависимая       = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				НеобходимоДобавлениеПериода         = Истина;
				НеобходимоДобавлениеСтрокиПоказаний = Истина;
				
			КонецЕсли;
			
			ТекНачало = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
			ТекКонец  = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
			
			Если НЕ ТекущаяСтрока.ВидТарифа = ТекущийВидТарифа 
			 ИЛИ НЕ ТекКонец = ТекущийКонец
			 ИЛИ НЕ ТекущаяСтрока.СоставнаяУслуга = ТекущаяСостУслуга
			 ИЛИ НЕ ТекущаяСтрока.Сторно = ТекущееСторно
			 ИЛИ НЕ ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту = ТекущееНачислениеПоПовышающемуКоэффициенту
			 ИЛИ НЕ ТекущаяСтрока.Зависимая = ТекущаяЗависимая
			 ИЛИ НЕ ТекущаяСтрока.ТипРасчета = ТекущийТипРасчета Тогда
				НеобходимоДобавлениеСтрокиПоказаний = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СоставнаяУслуга) Тогда
				
				Если НЕ ТекущаяСтрока.СоставнаяУслуга = ТекущаяСостУслуга Тогда
					
					ВеткаСостУслуг = ВеткаУслуг.Строки.Добавить();
					ВеткаСостУслуг.ЛицевойСчет = ТекущаяСтрока.СоставнаяУслуга;
					ВеткаСостУслуг.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
					
				КонецЕсли;
				
				Если НЕ ТекКонец = ТекущийКонец 
				 ИЛИ НЕ ТекущаяСтрока.СоставнаяУслуга = ТекущаяСостУслуга Тогда
					
					ТекущееНачало = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
					ТекущийКонец  = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
					ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
					ВеткаПериод.ЛицевойСчет = ТекНачало + " - " + ТекКонец;
					ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
					
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.СоставнаяУслуга = ТекущаяСостУслуга Тогда
					ТекущаяСостУслуга = ТекущаяСтрока.СоставнаяУслуга;
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.Сторно Тогда
				
				Если Не ТекущаяСтрока.Сторно = ТекущееСторно Тогда
					ВеткаСторно = ВеткаУслуг.Строки.Добавить();
					ВеткаСторно.ЛицевойСчет = ПредставлениеСторно;
					ВеткаСторно.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				КонецЕсли;
				
				Если НЕ ТекКонец = ТекущийКонец 
				 ИЛИ НЕ ТекущаяСтрока.Сторно = ТекущееСторно Тогда
					ТекущееНачало = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
					ТекущийКонец  = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
					ВеткаПериод = ВеткаСторно.Строки.Добавить();
					ВеткаПериод.ЛицевойСчет = ТекНачало + " - " + ТекКонец;
					ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.Сторно = ТекущееСторно Тогда
					ТекущееСторно = ТекущаяСтрока.Сторно;
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту Тогда
				
				Если Не ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту = ТекущееНачислениеПоПовышающемуКоэффициенту Тогда
					ВеткаНачислениеПоПовышающемуКоэффициенту = ВеткаУслуг.Строки.Добавить();
					ВеткаНачислениеПоПовышающемуКоэффициенту.ЛицевойСчет = ПредставлениеНачислениеПоПовышающемуКоэффициенту;
					ВеткаНачислениеПоПовышающемуКоэффициенту.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				КонецЕсли;
				
				Если НЕ ТекКонец = ТекущийКонец 
				 ИЛИ НЕ ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту = ТекущееНачислениеПоПовышающемуКоэффициенту Тогда
					ТекущееНачало = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
					ТекущийКонец  = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
					ВеткаПериод = ВеткаНачислениеПоПовышающемуКоэффициенту.Строки.Добавить();
					ВеткаПериод.ЛицевойСчет = ТекНачало + " - " + ТекКонец;
					ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту = ТекущееНачислениеПоПовышающемуКоэффициенту Тогда
					ТекущееНачислениеПоПовышающемуКоэффициенту = ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту;
				КонецЕсли;
				
			Иначе
				Если НЕ ТекКонец = ТекущийКонец ИЛИ НеобходимоДобавлениеПериода Тогда
					ТекущееНачало = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
					ТекущийКонец  = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
					ВеткаПериод = ВеткаУслуг.Строки.Добавить();
					ВеткаПериод.ЛицевойСчет = ТекНачало + " - " + ТекКонец;
					ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если НеобходимоДобавлениеСтрокиПоказаний Тогда
				ВеткаПоказаний = ВеткаПериод.Строки.Добавить();
				Если ТекущаяСтрока.ЗависимаяПоНормативу Тогда
					ВеткаПоказаний.ЛицевойСчет = ПредставлениеНачислениеЗУПоНормативу;
				Иначе
					ВеткаПоказаний.ЛицевойСчет = ТекущаяСтрока.ВидТарифа;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВеткаПоказаний, ТекущаяСтрока, СписокСвойствВеткиПоказаний);
				ВеткаПоказаний.Начислено = ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРаспределения;
				ТекущийВидТарифа  = ТекущаяСтрока.ВидТарифа;
				ТекущееСторно     = ТекущаяСтрока.Сторно;
				ТекущееНачислениеПоПовышающемуКоэффициенту = ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту;
				ТекущаяЗависимая  = ТекущаяСтрока.Зависимая;
				ТекущийТипРасчета = ТекущаяСтрока.ТипРасчета;
			Иначе
				ВеткаПоказаний.Начислено = ВеткаПоказаний.Начислено + ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРаспределения;
			КонецЕсли;
			
			Если ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания Тогда
				ВеткаПоказаний.КоличествоПоПУ = ВеткаПоказаний.КоличествоПоПУ + ТекущаяСтрока.ПоказаниеСчЛС;
				ВеткаПоказаний.СуммаПоПУ      = ВеткаПоказаний.СуммаПоПУ + ТекущаяСтрока.Сумма;
			Иначе
				Если ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезИПУ = ТекущаяСтрока.ПоказаниеСчЛС;
				ИначеЕсли ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезПоказаний = ТекущаяСтрока.ПоказаниеСчЛС;
				КонецЕсли;
				ВеткаПоказаний.СуммаПоНормативу      = ВеткаПоказаний.СуммаПоНормативу + ТекущаяСтрока.Сумма;
			КонецЕсли;
			
		Иначе
			
			Ном = Ном + 1;
			
			ТекущийОбъект     = ТекущаяСтрока.ЛицевойСчет;
			ТекущаяУслуга     = ТекущаяСтрока.Услуга;
			ТекущаяСостУслуга = ТекущаяСтрока.СоставнаяУслуга;
			ТекущаяУслугаОсн  = ТекущаяСтрока.УслугаОснование;
			ТекущееНачало     = Формат(ТекущаяСтрока.НачалоПериода, "ДЛФ=Д");
			ТекущийКонец      = Формат(ТекущаяСтрока.КонецПериода, "ДЛФ=Д");
			ТекущийВидТарифа  = ТекущаяСтрока.ВидТарифа;
			ТекущееСторно     = ТекущаяСтрока.Сторно;
			ТекущееНачислениеПоПовышающемуКоэффициенту = ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту;
			ТекущаяЗависимая  = ТекущаяСтрока.Зависимая;
			ТекущийТипРасчета = ТекущаяСтрока.ТипРасчета;
			
			ВеткаОбъекта = ТЗДеревоПоПоказаниямПУ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВеткаОбъекта, ТекущаяСтрока, СписокСвойствВеткиОбъекта);
			ВеткаОбъекта.Ном = Ном;
			
			ВеткаУслуг = ВеткаОбъекта.Строки.Добавить();
			ВеткаУслуг.ЛицевойСчет     = ТекущаяСтрока.Услуга;
			ВеткаУслуг.УслугаОснование = ТекущаяСтрока.УслугаОснование;
			ВеткаУслуг.Зависимая       = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СоставнаяУслуга) Тогда
				
				ТекущаяСостУслуга = ТекущаяСтрока.СоставнаяУслуга;
				ВеткаСостУслуг = ВеткаУслуг.Строки.Добавить();
				ВеткаСостУслуг.ЛицевойСчет = ТекущаяСтрока.СоставнаяУслуга;
				ВеткаСостУслуг.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаСостУслуг.Строки.Добавить();
				
			ИначеЕсли ТекущаяСтрока.Сторно Тогда
				
				ТекущееСторно = ТекущаяСтрока.Сторно;
				ВеткаСторно = ВеткаУслуг.Строки.Добавить();
				ВеткаСторно.ЛицевойСчет = ПредставлениеСторно;
				ВеткаСторно.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаСторно.Строки.Добавить();
				
			ИначеЕсли ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту Тогда
				
				ТекущееНачислениеПоПовышающемуКоэффициенту = ТекущаяСтрока.НачислениеПоПовышающемуКоэффициенту;
				ВеткаНачислениеПоПовышающемуКоэффициенту = ВеткаУслуг.Строки.Добавить();
				ВеткаНачислениеПоПовышающемуКоэффициенту.ЛицевойСчет = ПредставлениеНачислениеПоПовышающемуКоэффициенту;
				ВеткаНачислениеПоПовышающемуКоэффициенту.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
				ВеткаПериод = ВеткаНачислениеПоПовышающемуКоэффициенту.Строки.Добавить();
				
			Иначе
				ВеткаПериод = ВеткаУслуг.Строки.Добавить();
			КонецЕсли;
			
			ВеткаПериод.ЛицевойСчет = ТекущееНачало + " - " + ТекущийКонец;
			ВеткаПериод.Зависимая   = ?(ТекущаяСтрока.Зависимая, Истина, Ложь);
			
			ВеткаПоказаний = ВеткаПериод.Строки.Добавить();
			Если ТекущаяСтрока.ЗависимаяПоНормативу Тогда
				ВеткаПоказаний.ЛицевойСчет = ПредставлениеНачислениеЗУПоНормативу;
			Иначе
				ВеткаПоказаний.ЛицевойСчет = ТекущаяСтрока.ВидТарифа;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ВеткаПоказаний, ТекущаяСтрока, СписокСвойствВеткиПоказаний);
			ВеткаПоказаний.Начислено = ВеткаПоказаний.Начислено + ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРаспределения;
			
			Если ТекущаяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ() Тогда
				ВеткаПоказаний.КоличествоПоПУ = ТекущаяСтрока.ПоказаниеСчЛС;
				ВеткаПоказаний.СуммаПоПУ      = ТекущаяСтрока.Сумма;
			Иначе
				Если ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезИПУ = ТекущаяСтрока.ПоказаниеСчЛС;
				ИначеЕсли ТекущаяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний Тогда
					ВеткаПоказаний.КоличествоПоНормативуБезПоказаний = ТекущаяСтрока.ПоказаниеСчЛС;
				КонецЕсли;
				ВеткаПоказаний.СуммаПоНормативу      = ВеткаПоказаний.СуммаПоНормативу + ТекущаяСтрока.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗДеревоПоПоказаниямПУ, "ДеревоПоПоказаниямПУ");
	
	РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ();
	
КонецПроцедуры  //ЗаполнитьДеревоУслугПоПоказаниямПУ()

&НаСервере
// Рекурсивная процедура обсчитывает итоги веток дерева значений.
Процедура ПересчитатьИтоговыеСтроки(СтрокиДЗ, СтруктураПроверки = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДЗ Цикл
		
		// Если мы в строке, у нее нет итогов, пропустим.
		Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьИтоговыеСтроки(СтрокаДерева.ПолучитьЭлементы());
		ВычислитьСуммуВПодчиненныхСтроках(СтрокаДерева, СтруктураПроверки);
		
	КонецЦикла;
		
КонецПроцедуры // ПересчитатьИтоговыеСтроки()

&НаСервере
// Вычисляет сумму строк колонки для текущей строки.
Процедура ВычислитьСуммуВПодчиненныхСтроках(СтрокаДерева, СтруктураПроверки)
	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	СтрокаДерева.КоличествоПоПУ                    = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоПУ", , СтруктураПроверки);
	СтрокаДерева.КоличествоПоНормативуБезИПУ       = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоНормативуБезИПУ", , СтруктураПроверки);
	СтрокаДерева.УчетныйИндивидуальныйОбъем        = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "УчетныйИндивидуальныйОбъем", , СтруктураПроверки);
	СтрокаДерева.КоличествоПоНормативуБезПоказаний = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоНормативуБезПоказаний", , СтруктураПроверки);
	СтрокаДерева.КоличествоРаспределенияПомещение  = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияПомещение", , СтруктураПроверки);
	СтрокаДерева.КоличествоРаспределенияПодъезд    = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияПодъезд", , СтруктураПроверки);
	СтрокаДерева.КоличествоРаспределенияЗдание     = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияЗдание", , СтруктураПроверки);
	СтрокаДерева.СуммаРаспределения                = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаРаспределения", , СтруктураПроверки);
	СтрокаДерева.СуммаПоПУ                         = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПоПУ", , СтруктураПроверки);
	СтрокаДерева.СуммаПоНормативу                  = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПоНормативу", , СтруктураПроверки);
	СтрокаДерева.Начислено                         = 
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено", , СтруктураПроверки);
	
	// Поле "КоличествоПоНормативуБезПоказаний" будем рассчитывать вручную, 
	// т.к. для него не должны учитываться объемы сторно.
	// Кроме этого в строках по лицевым счетам нужно выводить итоги только 
	// по "основным" услугам (без учета зависимых), поэтому исключаем еще объемы по зависимым.
	КоличествоПоНормативуБезПоказаний = 0;
	Для Каждого ТекСтрокаСуммирования Из КоллекцияСтрок Цикл
		Если Не ТекСтрокаСуммирования.Сторно И ?(СтрокаДерева.Зависимая, Истина, НЕ ТекСтрокаСуммирования.Зависимая) Тогда
			КоличествоПоНормативуБезПоказаний = КоличествоПоНормативуБезПоказаний + ТекСтрокаСуммирования.КоличествоПоНормативуБезПоказаний;
		КонецЕсли;
	КонецЦикла;
	СтрокаДерева.КоличествоПоНормативуБезПоказаний = КоличествоПоНормативуБезПоказаний;
		
	
КонецПроцедуры

&НаСервере
// Рассчитывает итоговые строки в дереве значений "Услуги по показаниям ПУ".
//
// Параметры
// ИдентСтроки - Число - Идентификатор строки, значение которой было редактировано.
//
Процедура РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ(ИдентСтроки = Неопределено)
	
	// Особенность механизма:
	// В итогах подвала и в строках по лицевым счетам дерева услуг по показаниям ПУ выводятся 
	// итоги только по "основным" услугам (т.е. без учета данных по начислениям зависимых услуг).
	// Итоговые показатели по зависимым услугам выводятся на панели информации (под табличной частью)
	// и в строках с зависимыми услугами (у таких строк установлен признак "Зависимая").
	//
	// Для информации:
	// Если потребуется, например, строках по лицевым счетам дерева выводить итоги в т.ч. и по 
	// зависимым услугам, то необходимо будет изменить механизм получения итогов по основным 
	// показателям, выводимым на панели информации.
	
	
	// 1. Пересчитаем итоги строк дерева значений, если вызвано для заполнения дерева.
	// Пересчитаем итоги строк верхнего уровня, в случае редактирования значения одной строки.
	
	СтруктураПроверки = Новый Структура("Зависимая", Ложь);
	Если ИдентСтроки <> Неопределено Тогда
		ВерхняяСтрока = ДеревоПоПоказаниямПУ.НайтиПоИдентификатору(ИдентСтроки);
		ПересчитатьИтоговыеСтроки(ВерхняяСтрока.ПолучитьЭлементы());
		ВычислитьСуммуВПодчиненныхСтроках(ВерхняяСтрока, СтруктураПроверки);
	Иначе
		ПересчитатьИтоговыеСтроки(ДеревоПоПоказаниямПУ.ПолучитьЭлементы(), СтруктураПроверки);
	КонецЕсли;
	
	// Определим формат пустого значения показателя.
	ФорматПустогоЗначенияПоТочностиОбъемаНачисления = "ЧН=0,";
	НомерПорядкаТочности = 1;
	Пока НомерПорядкаТочности <= мТочностьОбъемаНачислений Цикл
		ФорматПустогоЗначенияПоТочностиОбъемаНачисления = ФорматПустогоЗначенияПоТочностиОбъемаНачисления + "0";
		НомерПорядкаТочности = НомерПорядкаТочности + 1;
	КонецЦикла;
	
	// Определим параметры форматирования.
	СтрокаФорматированияОбъема = "ЧДЦ=" + Строка(мТочностьОбъемаНачислений) + "; " + ФорматПустогоЗначенияПоТочностиОбъемаНачисления;
	СтрокаФорматированияСуммы  = "ЧДЦ=2; ЧН=0,00";
	
	КоллекцияСтрок = ДеревоПоПоказаниямПУ.ПолучитьЭлементы();
	
	
	// 2. Рассчитаем итоговые значения.
	
	// ОСНОВНЫЕ УСЛУГИ:
	
	// Итоговые значения по "основным" услугам берем из строк по л/с дерева (без дополнительного пересчета),
	// т.к. строки по л/с содержат итоги только по "основным" услугам.
	
	КоличествоПоПУ                    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоПУ");
	КоличествоПоНормативуБезИПУ       = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоНормативуБезИПУ");
	КоличествоПоНормативуБезПоказаний = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоНормативуБезПоказаний");
	УчетныйИндивидуальныйОбъем        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "УчетныйИндивидуальныйОбъем");
	КоличествоРаспределенияПомещение  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияПомещение");
	КоличествоРаспределенияПодъезд    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияПодъезд");
	КоличествоРаспределенияЗдание     = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоРаспределенияЗдание");
	ОбъемКРаспределениюЗначение       = КоличествоРаспределенияПомещение + КоличествоРаспределенияПодъезд + КоличествоРаспределенияЗдание;
	ОбъемСторно                       = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "КоличествоПоНормативуБезПоказаний", 
																											Истина, Новый Структура("Сторно, Зависимая", Истина, Ложь));
	СуммаПоПУ                         = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПоПУ");
	СуммаПоНормативу                  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПоНормативу");
	СуммаРаспределения                = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаРаспределения");
	Начислено                         = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено");
	
	
	// ЗАВИСИМЫЕ УСЛУГИ:
	
	// Итоговые значения по зависимым услугам берем из строк по услугам дерева,
	// т.е. спускаемся на уровень ниже. Ориентируемся на признак зависимой услуги.
	
	ОтборПоЗУ    = Новый Структура("Зависимая", Истина);
	УровеньУслуг = 1;
	
	РасходПоИПУЗУ             = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоПоПУ", Истина, ОтборПоЗУ, УровеньУслуг);
	РасходБезИПУПоказанийЗУ   = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоПоНормативуБезИПУ", Истина, ОтборПоЗУ, УровеньУслуг)
							  + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоПоНормативуБезПоказаний", Истина, ОтборПоЗУ, УровеньУслуг); 
	ОбъемРаспределенияЗУ      = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоРаспределенияПомещение", Истина, ОтборПоЗУ, УровеньУслуг)
							  + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоРаспределенияПодъезд", Истина, ОтборПоЗУ, УровеньУслуг)
							  + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоРаспределенияЗдание", Истина, ОтборПоЗУ, УровеньУслуг);
	ОбъемСторноЗУ             = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"КоличествоПоНормативуБезПоказаний", Истина, Новый Структура("Сторно, Зависимая", Истина, Истина));
	ОбъемНачисленияЗУЗначение = РасходПоИПУЗУ + РасходБезИПУПоказанийЗУ - ОбъемСторноЗУ + ОбъемРаспределенияЗУ;
	СуммаНачисленияЗУЗначение = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"Начислено", Истина, ОтборПоЗУ, УровеньУслуг);
	ИмеютсяСтрокиЗУ           = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, 
									"Зависимая", Истина, ОтборПоЗУ, УровеньУслуг) > 0;
	
	// 3. Установим итоги подвала табличной части.
	
	Элементы.ДеревоПоПоказаниямПУКоличествоПоПУ.ТекстПодвала                    = Формат(КоличествоПоПУ, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезИПУ.ТекстПодвала       = Формат(КоличествоПоНормативуБезИПУ, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУКоличествоПоНормативуБезПоказаний.ТекстПодвала = Формат(КоличествоПоНормативуБезПоказаний, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУУчетныйИндивидуальныйОбъем.ТекстПодвала        = Формат(УчетныйИндивидуальныйОбъем, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУСуммаПоПУ.ТекстПодвала                         = Формат(СуммаПоПУ, СтрокаФорматированияСуммы);
	Элементы.ДеревоПоПоказаниямПУСуммаПоНормативу.ТекстПодвала                  = Формат(СуммаПоНормативу, СтрокаФорматированияСуммы);
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПомещение.ТекстПодвала  = Формат(КоличествоРаспределенияПомещение, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияПодъезд.ТекстПодвала    = Формат(КоличествоРаспределенияПодъезд, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУКоличествоРаспределенияЗдание.ТекстПодвала     = Формат(КоличествоРаспределенияЗдание, СтрокаФорматированияОбъема);
	Элементы.ДеревоПоПоказаниямПУСуммаРаспределения.ТекстПодвала                = Формат(СуммаРаспределения, СтрокаФорматированияСуммы);
	Элементы.ДеревоПоПоказаниямПУНачислено.ТекстПодвала                         = Формат(Начислено, СтрокаФорматированияСуммы);
	
	
	 // 4. Установим параметры панели информации (под табличной частью).
	
	// Основные услуги:
	РасходПоИПУ                             = Формат(КоличествоПоПУ, СтрокаФорматированияОбъема);
	РасходПриОтсутствииИПУПоказаний         = Формат(КоличествоПоНормативуБезИПУ + КоличествоПоНормативуБезПоказаний, СтрокаФорматированияОбъема);
	СуммарныйОбъемСторно                    = Формат((-1) * ОбъемСторно, СтрокаФорматированияОбъема);
	ИндивидуальныйОбъемСУчетомСторно        = Формат(КоличествоПоПУ + КоличествоПоНормативуБезИПУ 
												   + КоличествоПоНормативуБезПоказаний - ОбъемСторно, СтрокаФорматированияОбъема);
	РасходПоОбщедомовымПУ                   = Формат(Объект.РасходПоОбщедомовымПУ, СтрокаФорматированияОбъема);
	ИндивидуальныйОбъем                     = Формат(УчетныйИндивидуальныйОбъем + Объект.РасходПоОбщедомовымУслугам, СтрокаФорматированияОбъема);
	РасходПриборовУчетаПоОбщедомовымУслугам = Формат(Объект.РасходПоОбщедомовымУслугам, СтрокаФорматированияОбъема);
	ОбъемКРаспределению                     = Формат(ОбъемКРаспределениюЗначение, СтрокаФорматированияОбъема);
	СуммаНачисления                         = Формат(Начислено, СтрокаФорматированияСуммы);
	
	// Зависимые услуги:
	ОбъемНачисленияЗУ                       = Формат(ОбъемНачисленияЗУЗначение, СтрокаФорматированияОбъема);
	СуммаНачисленияЗУ                       = Формат(СуммаНачисленияЗУЗначение, СтрокаФорматированияСуммы);
	
КонецПроцедуры // РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ()

&НаСервереБезКонтекста
// Получает массив идентификаторов элементов дерева данных формы, имеющих признак "Сторно".
//
Процедура ПолучитьМассивИДДерева(МассивИдентификаторов, Уровень)
	
	Подчиненные = Уровень.ПолучитьЭлементы();
	Для Каждого Подчиненный Из Подчиненные Цикл
		Если Подчиненный.Сторно Тогда
			МассивИдентификаторов.Добавить(Подчиненный.ПолучитьИдентификатор());
		КонецЕсли;
		ПолучитьМассивИДДерева(МассивИдентификаторов, Подчиненный);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет отмену проведения. Используется при перезаполнении
// табличной части услуг при начислении по показаниям ПУ.
Процедура ВыполнитьОтменуПроведенияДокументаВФорме()
	
	// Проверку корректности записи не проверяем для упрощения.
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
КонецПроцедуры // ВыполнитьОтменуПроведенияДокументаВФорме()

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличных частей при записи документа

&НаСервере
// Заполняет табличную часть документа по дереву значений.
//
// нет параметров
//
Процедура ЗаполнитьТабличнуюЧастьПоДереву()
	
	Если НЕ Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета Тогда
		Возврат;
	КонецЕсли;
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	Объект.Услуги.Очистить();
	
	// Перенесем данные из дерева в табличную часть документа.
	Для Каждого ВеткаЛС Из ТЗДеревоУслуг.Строки Цикл
		
		Для Каждого ВеткаУслуги Из ВеткаЛС.Строки Цикл
			
			Для Каждого ВеткаДеталей Из ВеткаУслуги.Строки Цикл
				
				Если ВеткаДеталей.Строки.Количество() > 0 Тогда
					Для Каждого ТекСтрока Из ВеткаДеталей.Строки Цикл
						НовСтр                      = Объект.Услуги.Добавить();
						НовСтр.Услуга               = ВеткаУслуги.ЛицевойСчет;
						НовСтр.УслугаОснование      = ВеткаУслуги.УслугаОснование;
						НовСтр.СоставнаяУслуга      = ВеткаДеталей.ЛицевойСчет;
						НовСтр.ЛицевыеСчета         = ВеткаЛС.ЛицевойСчет;
						НовСтр.Количество           = ТекСтрока.Количество;
						НовСтр.Тариф                = ТекСтрока.Тариф;
						НовСтр.Начислено            = ТекСтрока.Начислено;
						НовСтр.ДнейНачислено        = ТекСтрока.ДнейНачислено;
						НовСтр.Договор              = ТекСтрока.Договор;
						НовСтр.НачалоПериода        = ТекСтрока.НачалоПериода;
						НовСтр.КонецПериода         = ТекСтрока.КонецПериода;
						НовСтр.Зависимая            = ТекСтрока.Зависимая;
						НовСтр.ЗависимаяПоНормативу = ТекСтрока.ЗависимаяПоНормативу;
					КонецЦикла;
				Иначе
					НовСтр                      = Объект.Услуги.Добавить();
					НовСтр.Услуга               = ВеткаУслуги.ЛицевойСчет;
					НовСтр.УслугаОснование      = ВеткаУслуги.УслугаОснование;
					НовСтр.ЛицевыеСчета         = ВеткаЛС.ЛицевойСчет;
					НовСтр.Количество           = ВеткаДеталей.Количество;
					НовСтр.Тариф                = ВеткаДеталей.Тариф;
					НовСтр.Начислено            = ВеткаДеталей.Начислено;
					НовСтр.ДнейНачислено        = ВеткаДеталей.ДнейНачислено;
					НовСтр.Договор              = ВеткаДеталей.Договор;
					НовСтр.НачалоПериода        = ВеткаДеталей.НачалоПериода;
					НовСтр.КонецПериода         = ВеткаДеталей.КонецПериода;
					НовСтр.Зависимая            = ВеткаДеталей.Зависимая;
					НовСтр.ЗависимаяПоНормативу = ВеткаДеталей.ЗависимаяПоНормативу;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДереву()

&НаСервере
// Заполняет табличную часть документа по дереву значений "ДеревоПоПоказаниямПУ".
//
// нет параметров
//
Процедура ЗаполнитьТабличнуюЧастьПоДеревуПоказанийПУ()
	
	Объект.УслугиПоПоказаниямПУ.Очистить();
	
	ПредставлениеСторно                              = ПолучитьПредставлениеСтроки_Сторно();
	ПредставлениеНачислениеПоПовышающемуКоэффициенту = ПолучитьПредставлениеСтроки_НачислениеПоПовышающемуКоэффициенту();
	
	ТЗДеревоПоПоказаниямПУ = РеквизитФормыВЗначение("ДеревоПоПоказаниямПУ", Тип("ДеревоЗначений"));
	
	// Перенесем данные из дерева в табличную часть документа.
	Для Каждого ТекВеткаЛС Из ТЗДеревоПоПоказаниямПУ.Строки Цикл
		
		Для Каждого ТекВеткаУслуг Из ТекВеткаЛС.Строки Цикл
			
			Для Каждого ТекВеткаПериодов Из ТекВеткаУслуг.Строки Цикл
				
				// Составная услуга.
				Если ТипЗнч(ТекВеткаПериодов.ЛицевойСчет) = Тип("СправочникСсылка.КВП_Услуги") Тогда
					
					Для Каждого ТекВеткаСостПериодов Из ТекВеткаПериодов.Строки Цикл
						
						Для Каждого ТекСтрока Из ТекВеткаСостПериодов.Строки Цикл
							
							СоставнаяУслуга = ТекВеткаПериодов.ЛицевойСчет;
							ДобавитьСтрокуВТабличнуюЧастьУслугПоПУСУчетомТипаРасчета(ТекСтрока, ТекВеткаЛС, ТекВеткаУслуг, ТекВеткаПериодов, СоставнаяУслуга);
							
						КонецЦикла;
						
					КонецЦикла;
					
				// Начисление сторно.
				ИначеЕсли ТипЗнч(ТекВеткаПериодов.ЛицевойСчет) = Тип("Строка") И ТекВеткаПериодов.ЛицевойСчет = ПредставлениеСторно Тогда
					
					Для Каждого ТекВеткаСторно Из ТекВеткаПериодов.Строки Цикл
						
						Для Каждого ТекСтрока Из ТекВеткаСторно.Строки Цикл
							
							ДобавитьСтрокуВТабличнуюЧастьУслугПоПУСУчетомТипаРасчета(ТекСтрока, ТекВеткаЛС, ТекВеткаУслуг, ТекВеткаПериодов);
							
						КонецЦикла;
						
					КонецЦикла;
					
				// Начисление по повышающему коэффициенту.
				ИначеЕсли ТипЗнч(ТекВеткаПериодов.ЛицевойСчет) = Тип("Строка") И ТекВеткаПериодов.ЛицевойСчет = ПредставлениеНачислениеПоПовышающемуКоэффициенту Тогда
					
					Для Каждого ТекВеткаНачислениеПоПовышающемуКоэффициенту Из ТекВеткаПериодов.Строки Цикл
						
						Для Каждого ТекСтрока Из ТекВеткаНачислениеПоПовышающемуКоэффициенту.Строки Цикл
							
							ДобавитьСтрокуВТабличнуюЧастьУслугПоПУСУчетомТипаРасчета(ТекСтрока, ТекВеткаЛС, ТекВеткаУслуг, ТекВеткаПериодов);
							
						КонецЦикла;
						
					КонецЦикла;
					
				// Прочие начисления.
				Иначе
					
					Для Каждого ТекСтрока Из ТекВеткаПериодов.Строки Цикл
						
						ДобавитьСтрокуВТабличнуюЧастьУслугПоПУСУчетомТипаРасчета(ТекСтрока, ТекВеткаЛС, ТекВеткаУслуг, ТекВеткаПериодов);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДеревуПоказанийПУ()

&НаСервере
// Производит добавление строку в табличную часть "УслугиПоПоказаниямПУ" и заполняет ее данными из дерева значений.
Процедура ДобавитьСтрокуВТабличнуюЧастьУслугПоПУСУчетомТипаРасчета(СтрокаДобавления, ТекВеткаЛС, ТекВеткаУслуг, ТекВеткаПериодов, СоставнаяУслуга = Неопределено)
	
	// В процедуре производится анализ наличия тех или иных начислений,
	// а уже по ним производится добавление строк в табличную часть документа.
	
	КоличествоПоказаний = 1;
	Если ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоПУ) Тогда
		ДобавитьСтрокуВТабличнуюЧасть(СтрокаДобавления, ТекВеткаЛС.ЛицевойСчет,
									  ТекВеткаУслуг, СтрокаДобавления.КоличествоПоПУ,
									  Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания,
									  КоличествоПоказаний, ТекВеткаПериодов.ЛицевойСчет);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезИПУ)
	   И ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезПоказаний) Тогда
		КоличествоПоказаний = 2;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезИПУ) Тогда
		ДобавитьСтрокуВТабличнуюЧасть(СтрокаДобавления, ТекВеткаЛС.ЛицевойСчет, ТекВеткаУслуг,
									  СтрокаДобавления.КоличествоПоНормативуБезИПУ,
									  Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ,
									  КоличествоПоказаний, ТекВеткаПериодов.ЛицевойСчет);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезПоказаний) Тогда
		ДобавитьСтрокуВТабличнуюЧасть(СтрокаДобавления, ТекВеткаЛС.ЛицевойСчет, ТекВеткаУслуг,
									  СтрокаДобавления.КоличествоПоНормативуБезПоказаний,
									  Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний,
									  КоличествоПоказаний, ТекВеткаПериодов.ЛицевойСчет);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоПУ)
	   И НЕ ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезИПУ)
	   И НЕ ЗначениеЗаполнено(СтрокаДобавления.КоличествоПоНормативуБезПоказаний) Тогда
		ДобавитьСтрокуВТабличнуюЧасть(СтрокаДобавления, ТекВеткаЛС.ЛицевойСчет, ТекВеткаУслуг,
									  0, Неопределено, 1, ТекВеткаПериодов.ЛицевойСчет);
									  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Добавляет строку в табличную часть "УслугиПоПоказаниямПУ" и заполняет ее данными из дерева значений.
Процедура ДобавитьСтрокуВТабличнуюЧасть(ТекСтрока, ЛицевойСчет, ТекВеткаУслуг, Показание, 
	                                    Состояние = Неопределено, КоличествоПоказаний, СоставнаяУслуга = Неопределено)
	
	НовСтр                                  = Объект.УслугиПоПоказаниямПУ.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, ТекСтрока);
	Если НЕ Состояние = Неопределено Тогда
		НовСтр.СостояниеПУ                  = Состояние;
		Если Состояние = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания Тогда
			НовСтр.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ();
		КонецЕсли;
	КонецЕсли;
	НовСтр.ЛицевойСчет                      = ЛицевойСчет;
	НовСтр.Услуга                           = ТекВеткаУслуг.ЛицевойСчет;
	НовСтр.УслугаОснование                  = ТекВеткаУслуг.УслугаОснование;
	НовСтр.ПоказаниеСчЛС                    = Показание;
	ТекСумма = ?(Состояние = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания, ТекСтрока.СуммаПоПУ,
	                         (ТекСтрока.СуммаПоНормативу / КоличествоПоказаний));
	НовСтр.Сумма                            = ТекСумма;
	Если НЕ СоставнаяУслуга = Неопределено Тогда
		НовСтр.СоставнаяУслуга = СоставнаяУслуга;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные функции

&НаСервере
// Функция возвращает представления строки с начислением сторно.
Функция ПолучитьПредставлениеСтроки_Сторно()
	
	Возврат "Сторно";
	
КонецФункции

&НаСервере
// Функция возвращает представления строки с начислением по повышающему коэффициенту.
Функция ПолучитьПредставлениеСтроки_НачислениеПоПовышающемуКоэффициенту()
	
	Возврат "Повышающий коэффициент";
	
КонецФункции

&НаСервере
// Функция возвращает представления строки с начислением по нормативу зависимой услуги.
Функция ПолучитьПредставлениеСтроки_НачислениеЗУПоНормативу()
	
	Возврат "По собственному нормативу";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДЕРЕВЬЯМИ (перенести в общий модуль).

&НаКлиенте
// Процедура - обработчик команды "ДобавитьУзел".
Процедура ДобавитьУзел(ТекДерево, ПУ = Ложь)
	
	// Получим максимальный номер строки.
	НомСтрокиДерева = ПолучитьМаксимальныйНомерСтроки(ТекДерево);
	
	// Добавим в дерево новую строку.
	Если мСписокЛСОбъекта.Количество() = 0 Тогда
		мСписокЛСОбъекта = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСписокЛСОбъекта(Объект.Объект, НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата), Истина, Ложь);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", мСписокЛСОбъекта);
	
	Форма = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора), ТекДерево);
	
	ДопПараметры = Новый Структура("ТекДерево, НомСтрокиДерева, ПУ", ТекДерево, НомСтрокиДерева, ПУ);
	Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЛС", ЭтаФорма, ДопПараметры);
	Форма.ВладелецФормы = ЭтаФорма;
	Форма.Открыть();
	
КонецПроцедуры //ДобавитьУзел()

&НаКлиенте
// Обработать результат выбора элемента справочника "Лицевые счета".
Процедура ОбработатьРезультатВыбораЛС(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекДерево       = ДополнительныеПараметры.ТекДерево;
		НомСтрокиДерева = ДополнительныеПараметры.НомСтрокиДерева;
		ПУ              = ДополнительныеПараметры.ПУ;
		
		НоваяВетка             = ТекДерево.ПолучитьЭлементы().Добавить();
		НоваяВетка.Ном         = НомСтрокиДерева + 1;
		НоваяВетка.ЛицевойСчет = Результат;
		
		ЗаполнитьДанныеДляУсловногоОформления(НоваяВетка.ПолучитьИдентификатор(), , ПУ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЛС()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЦЕДУРАМИ И ФУНКЦИЯМИ МОДУЛЯ ОБЪЕКТА

&НаСервере
// Процедура заполнения табличной части "Услуги" на сервере.
Процедура ЗаполнитьТабличнуюЧастьУслугиНаСервере(СсылкаНаОбъект)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_НачислениеУслуг"));
	// При заполнении/перезаполнении документа очищаем протокол расчетов.
	ДокументОбъект.ПротоколРасчетов = Новый ХранилищеЗначения(Новый ТекстовыйДокумент);
	ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги(СсылкаНаОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Протокол расчетов присваивается промежуточному реквизиту формы "ПротоколРасчетов", т.к. платформа
	// на управляемой форме не может в объект формы записать значение реквизита с типом ХранилищеЗначения.
	ПротоколРасчетов = ДокументОбъект.ПротоколРасчетов.Получить();
	
КонецПроцедуры

&НаСервере
// Выполняет пересчет строки на сервере.
Процедура ПересчитатьСуммуСтрокиТЧНаСервере(ТекВеткаДерева, ИмяКолонки = Неопределено)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_НачислениеУслуг"));
	ДокументОбъект.ПересчитатьСуммуСтрокиТЧ(ТекВеткаДерева, ИмяКолонки);
	
КонецПроцедуры

&НаСервере
// Процедура рассчета показаний на сервере.
Процедура РассчитатьПоказанияНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_НачислениеУслуг"));
	ДокументОбъект.ПротоколРасчетов = Новый ХранилищеЗначения(ПротоколРасчетов);
	ДокументОбъект.РассчитатьПоказания();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Протокол расчетов присваивается промежуточному реквизиту формы "ПротоколРасчетов", т.к. платформа
	// на управляемой форме не может в объект формы записать значение реквизита с типом ХранилищеЗначения.
	ПротоколРасчетов = ДокументОбъект.ПротоколРасчетов.Получить();
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура установки договора владельца парковочного места.
Функция ПолучитьДоговорВладельцаПарковочногоМестаНаСервере(Дата, ЛицевойСчет, Организация)
	
	Возврат Документы.КВП_НачислениеУслуг.ПолучитьДоговорВладельцаПарковочногоМеста(Дата, ЛицевойСчет, Организация);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации") И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		
		// Если документ создается копированием, то необходимо очистить табличные части документа,
		// так как при начислении указываются периоды начисления, которые просто так нельзя копировать.
		// Документ нужно перезаполнять.
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ОчиститьТаблицыНачисленийТекущегоДокумента(ЭтаФорма);
		КонецЕсли;
			
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.СписыватьРасходПУПоТаблицеСчетчиков = Истина;
		
		// Установим время документа
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_НачислениеУслуг"));
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
			Объект.Услуга = УслугаДобровольногоСтрахования;
		КонецЕсли;
		
	Иначе
		
		ПредыдущийВидОперации = Объект.ВидОперации;
		
	КонецЕсли;
	
	мКоличествоДнейЗаданоВручную = Не Объект.Ссылка.Пустая();
	
	мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();
	
	Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
		УстановитьПояснениеКДобровольномуСтрахованию(Объект.Дата, Элементы.НадписьПояснениеДобровольногоСтрахования.Заголовок);
	КонецЕсли;
	
	// Заполнение оперативных параметров.
	мДатаДокумента = Объект.Дата;
	мОрганизация   = Объект.Организация;
	
	ЗаполнитьКоличествоДнейНачисления(Ложь);
	
	Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета 
	 ИЛИ Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
		// При открытии документа можем отсортировать строки по исходному номеру строки в ТЧ документа.
		ЗаполнитьДеревоУслуг(Истина);
		ЗаполнитьДопДанныеВСтрокахДерева();
	ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
		// При открытии документа можем отсортировать строки по исходному номеру строки в ТЧ документа.
		ЗаполнитьДеревоУслугПоПоказаниямПУ(Истина);
		ЗаполнитьДопДанныеВСтрокахДерева(Истина);
	Иначе
		ЗаполнитьДопДанныеВУслугах();
		ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установка условного оформления формы, вместо настройки оформления через свойства формы.
	// Это реализовано для обслуживания условного оформления.
	УстановитьУсловноеОформление();
	
	// Установка заголовка формы.
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	УстановитьТочностьОбъемовНачислений();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// При использовании нового механизма отражения колонки с договором выводить не будем. Видимость устанавливается
	// только при открытии формы, так как новый механизм использует только один клиент и он скорее всего не будет
	// создавать документы в периоде до начала использования нового механизма.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда
		
		Элементы.ДеревоУслугДоговор.Видимость           = Ложь;
		Элементы.ДеревоПоПоказаниямПУДоговор.Видимость  = Ложь;
		Элементы.УслугиДоговор.Видимость                = Ложь;
		Элементы.НачисленияПоРассрочкеДоговор.Видимость = Ложь;
		
	КонецЕсли;
	
	// ПодсистемыЖКХ.ОтладкаРасчетов
	ПротоколРасчетов = ПолучитьПротоколРасчетов();
	// Конец ПодсистемыЖКХ.ОтладкаРасчетов
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Объект.Ссылка.Пустая() 
	  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРаспределенияУслугиПоСчетчику") =
			ПредопределенноеЗначение(
				"Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПоказаниямПоквСчетчиков_Формула9") Тогда
		
		ПоказатьПредупреждение(Неопределено, "Перед проведением документа необходимо произвести перераспределение 
											 |показаний коллективных ПУ с помощью кнопки ""Рассчитать"".");
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Поместим данные дерева услуг в табличную часть документа.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
		ЗаполнитьТабличнуюЧастьПоДереву();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
		ЗаполнитьТабличнуюЧастьПоДеревуПоказанийПУ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка заголовка формы.
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// При проведении документа не сохраняются данные в добавленных на форме доп. сведениях
	// таких как "Здание", "Квартира" и "Владелец".
	// Для решения этой проблемы перезаполняем таблицу "Услуги" из формы.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка") Тогда
		ЗаполнитьДопДанныеВУслугах();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Номер".
Процедура НомерПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	ЕстьДанныеВТаблицахНачислений = ДеревоУслуг.ПолучитьЭлементы().Количество() > 0
								Или ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Количество() > 0
								Или Объект.Услуги.Количество() > 0;
	
	Если Не НачалоМесяца(мДатаДокумента) = НачалоМесяца(Объект.Дата) И ЕстьДанныеВТаблицахНачислений Тогда
		ДопПараметры = Новый Структура("Событие", "ИзменениеДаты");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры),
					   "При изменении даты документа таблицы начислений документа будут очищены. Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Нет);
	Иначе
		// Обработаем изменение даты документа.
		УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
		УстановитьЗаголовокФормы(ЭтаФорма);
		ЗаполнитьКоличествоДнейНачисления();
	КонецЕсли;
	
	УстановитьПояснениеКДобровольномуСтрахованию(Объект.Дата, Элементы.НадписьПояснениеДобровольногоСтрахования.Заголовок);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЕстьДанныеВТаблицахНачислений = ДеревоУслуг.ПолучитьЭлементы().Количество() > 0
								Или ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Количество() > 0
								Или Объект.Услуги.Количество() > 0;
	
	Если Не мОрганизация = Объект.Организация И ЕстьДанныеВТаблицахНачислений Тогда
		ДопПараметры = Новый Структура("Событие", "ИзменениеОрганизации");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры),
					   "При изменении организации таблицы начислений документа будут очищены. Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки завершения вопроса об очистке таблиц начислений.
Процедура ДатаОрганизацияПриИзмененииЗавершение(Ответ, ДопПараметры) Экспорт
	
	Событие = ДопПараметры.Событие;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Очистка таблиц документа.
		ОчиститьТаблицыНачисленийТекущегоДокумента(ЭтаФорма);
		
		// Очистка деревьев.
		ДеревоУслуг.ПолучитьЭлементы().Очистить();
		ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Очистить();
		
		// Установка новых значений временных переменных.
		Если Событие = "ИзменениеДаты" Тогда
			мДатаДокумента = Объект.Дата;
			
			// Обработаем изменение даты документа.
			УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
			УстановитьЗаголовокФормы(ЭтаФорма);
			ЗаполнитьКоличествоДнейНачисления();
			
		ИначеЕсли Событие = "ИзменениеОрганизации" Тогда
			мОрганизация = Объект.Организация;
		КонецЕсли;
		
	Иначе
		
		// Возврат исходных значений.
		Если Событие = "ИзменениеДаты" Тогда
			Объект.Дата = мДатаДокумента;
		ИначеЕсли Событие = "ИзменениеОрганизации" Тогда
			Объект.Организация = мОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга".
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборУслуг(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода объекта начислений.
Процедура ОбъектПриИзменении(Элемент)
	
	мСписокЛСОбъекта.Очистить();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры  //ОбъектПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КоличествоДнейНачисления".
Процедура КоличествоДнейНачисленияПриИзменении(Элемент)
	
	Если Объект.КоличествоДнейНачисления = 0 Тогда
		мКоличествоДнейЗаданоВручную = Ложь;
		ЗаполнитьКоличествоДнейНачисления();
	Иначе
		мКоличествоДнейЗаданоВручную = Истина;
	КонецЕсли;
	
	// Предлагаем перезаполнение.
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстВопроса = "Перезаполнить табличную часть?" + Символы.ПС + "Перед заполнением табличная часть будет очищена.";
	Иначе
		ТекстВопроса = "Заполнить табличную часть?";
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КоличествоДнейНачисленияПриИзмененииЗавершение", ЭтотОбъект),
				   ТекстВопроса,
				   РежимДиалогаВопрос.ДаНет, ,
				   КодВозвратаДиалога.Нет);
	
КонецПроцедуры // КоличествоДнейНачисленияПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре "КоличествоДнейНачисленияПриИзменении()".
Процедура КоличествоДнейНачисленияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
		ЗаполнитьДеревоУслуг();
		ЗаполнитьДопДанныеВСтрокахДерева();
	КонецЕсли;
	
КонецПроцедуры // КоличествоДнейНачисленияПриИзмененииЗавершение()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТА "ДЕРЕВО УСЛУГ"

////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаСервере
// Процедура помещает данные о текущей строке во временное хранилище.
Процедура ДеревоУслугПоместитьДанныеОТекущейСтрокеВХранилище(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураРедСтроки = Новый Структура;
	мСтруктураРедСтроки.Вставить("ЛицевойСчет",   ТекущиеДанные.ЛицевойСчет);
	мСтруктураРедСтроки.Вставить("Количество",    ТекущиеДанные.Количество);
	мСтруктураРедСтроки.Вставить("Тариф",         ТекущиеДанные.Тариф);
	мСтруктураРедСтроки.Вставить("Начислено",     ТекущиеДанные.Начислено);
	мСтруктураРедСтроки.Вставить("ДнейНачислено", ТекущиеДанные.ДнейНачислено);
	
	ДеревоУслугАдресХранилищаДанныхСтроки = 
		ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
// Процедура обрабатывает окончание редактирования на сервере дерева услуг.
Процедура ДеревоУслугОбработатьОкончаниеРедактированияДереваНаСервере(ТекущаяСтрока, ДеревоИзменено, ИмяКолонки)
	
	ТекВеткаДерева = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(ДеревоУслугАдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекВеткаДерева.ЛицевойСчет <> мСтруктураРедСтроки.ЛицевойСчет Тогда
		// Изменили значение лицевого счета.
		ДеревоИзменено = Истина;
		Если мСтруктураРедСтроки.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка()
		   И ТекВеткаДерева.ПолучитьРодителя() = Неопределено Тогда
			ДеревоИзменено = ПроверитьУникальностьВеткиВДереве(ТекВеткаДерева.ЛицевойСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекВеткаДерева.Количество <> мСтруктураРедСтроки.Количество 
	 ИЛИ ТекВеткаДерева.Тариф      <> мСтруктураРедСтроки.Тариф Тогда
		// Изменили значение количества или тарифа.
		ПересчитатьСуммуСтрокиТЧНаСервере(ТекВеткаДерева);
		ПересчитатьВсегоНачисленоПоУслугеВклСоставные(ТекВеткаДерева);
		ПересчитатьВсегоНачислено();
	КонецЕсли;
	
	Если ТекВеткаДерева.Начислено <> мСтруктураРедСтроки.Начислено Тогда
		// Изменили значение суммы начисления.
		ИмяКолонки = ПолучитьИмяКолонкиДерева(ИмяКолонки, "ДеревоУслуг");
		ПересчитатьСуммуСтрокиТЧНаСервере(ТекВеткаДерева, ИмяКолонки);
		ПересчитатьВсегоНачисленоПоУслугеВклСоставные(ТекВеткаДерева);
		ПересчитатьВсегоНачислено();
	КонецЕсли;
	
	Если ТекВеткаДерева.ДнейНачислено <> мСтруктураРедСтроки.ДнейНачислено Тогда
		// Изменили значение количества дней начисления.
		ПересчитатьСуммуСтрокиТЧНаСервере(ТекВеткаДерева);
		ПересчитатьВсегоНачисленоПоУслугеВклСоставные(ТекВеткаДерева);
		ПересчитатьВсегоНачислено();
	КонецЕсли;
	
	// Если изменилось количество и в документе есть зависимые услуги (ЗУ),
	// то необходимо пересчитать количество по всем строкам ЗУ.
	Если ИмеютсяСтрокиЗУ И НЕ ТекВеткаДерева.Зависимая 
	   И ТекВеткаДерева.Количество <> мСтруктураРедСтроки.Количество Тогда
		ПересчитатьСтрокиПоЗависимымУслугам(ТекВеткаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Пересчитывает сумму начисления по услуге, включающей составные
Процедура ПересчитатьВсегоНачисленоПоУслугеВклСоставные(ТекВетка)
	
	Родитель = ТекВетка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсегоНачислено = 0;
		Для Каждого ТекущаяСтрока Из Родитель.ПолучитьЭлементы() Цикл 
			ВсегоНачислено = ВсегоНачислено + ТекущаяСтрока.Начислено;
		КонецЦикла;
			Родитель.Начислено = ВсегоНачислено;
	КонецЕсли;
	
КонецПроцедуры  //ПересчитатьВсегоНачисленоПоУслугеВклСоставные()

&НаСервере
// Обновляет дерево услуг, записывая в табличную часть документа.
//
// Параметры
//  нет параметров
//
Процедура ОбновитьДеревоУслуг()

	ЗаполнитьТабличнуюЧастьПоДереву();
	ЗаполнитьДеревоУслуг();
	ЗаполнитьДопДанныеВСтрокахДерева();

КонецПроцедуры // ОбновитьДеревоУслуг()

&НаСервере
// Определяет, есть ли в дереве строка с указанной услугой/лицевым счетом.
//
// Параметры
//  ТекВетка  - строка дерева услуг.
//
// Возвращаемое значение
//  Булево.
//
Функция ПроверитьУникальностьВеткиВДереве(ЛицевойСчет)

	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	МассивСтрок = ТЗДеревоУслуг.Строки.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	Если МассивСтрок.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьУникальностьВеткиВДереве()

&НаКлиенте
// Возникает при активизации строки в дереве услуг.
Процедура ПриАктивизацииСтрокиДереваУслуг()
	
	ТекСтрока = Элементы.ДеревоУслуг.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(ТекСтрока.ЛицевойСчет);
	
	Если ТекТип = Тип("СправочникСсылка.КВП_Услуги")
	   И ЗначениеЗаполнено(ТекСтрока.ЛицевойСчет) Тогда
		СпособРасчета = ПолучитьСпособРасчетаУслуги(ТекСтрока.ЛицевойСчет);
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
		 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
			Элементы.ДеревоУслугДобавитьВУзел.Доступность = Ложь;
		Иначе
			Элементы.ДеревоУслугДобавитьВУзел.Доступность = Истина;
		КонецЕсли;
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		Элементы.ДеревоУслугДобавитьВУзел.Доступность = Ложь;
	Иначе
		Элементы.ДеревоУслугДобавитьВУзел.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////
// Обработчики событий

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ДеревоУслуг".
Процедура ДеревоУслугПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиДереваУслуг", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДеревоУслуг".
Процедура ДеревоУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// ! Возможность добавления новых строк в ТЧ "ДеревоУслуг" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
	//    "Количество" и "Договор".
	
	//ВыполнитьДобавлениеСтроки(Элемент, Копирование, Отказ, ДеревоУслуг);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоУслуг".
Процедура ДеревоУслугПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	РодительТекСтроки = ТекСтрока.ПолучитьРодителя();
	Если НЕ РодительТекСтроки = Неопределено И Не РодительТекСтроки.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "ДеревоУслуг".
Процедура ДеревоУслугПослеУдаления(Элемент)
	
	// Пересчитаем номера строк и итоговую сумму начисления в дереве.
	ПересчитатьВсегоНачислено();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "ДеревоУслуг".
Процедура ДеревоУслугПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУслугПоместитьДанныеОТекущейСтрокеВХранилище(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ДеревоУслуг".
Процедура ДеревоУслугПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока  = Элемент.ТекущаяСтрока;
	ТекВеткаДерева = Элемент.ТекущиеДанные;
	ИмяКолонки     = Элемент.ТекущийЭлемент.Имя;
	
	ДеревоИзменено = Ложь;
	
	ДеревоУслугОбработатьОкончаниеРедактированияДереваНаСервере(ТекущаяСтрока, ДеревоИзменено, ИмяКолонки);
	
	Если НоваяСтрока Тогда
		ДеревоИзменено = ПроверитьУникальностьВеткиВДереве(ТекВеткаДерева.ЛицевойСчет);
	КонецЕсли;
	
	Если ДеревоИзменено Тогда
		ОбновитьДеревоУслуг();
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ ДеревоИзменено Тогда
		ПересчитатьВсегоНачислено();
	КонецЕсли;
	
	ЗаполнитьДанныеДляУсловногоОформления(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугДоговор".
Процедура ДеревоУслугДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДоговора", УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьВидыДоговоров());
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
		ВладелецДоговора = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Договор, "Владелец");
		СтруктураОтбора.Вставить("Владелец", ВладелецДоговора);
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", 
								Новый Структура("ТекущаяСтрока, Отбор", ТекущиеДанные.Договор, СтруктураОтбора), Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугКвартира".
Процедура ДеревоУслугКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугВладелец".
Процедура ДеревоУслугВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "ДеревоУслугДобавитьУзел".
Процедура ДеревоУслугДобавитьУзел(Команда)
	
	// ! Возможность добавления новых строк в ТЧ "ДеревоУслуг" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
	//    "Количество" и "Договор".
	
	//ДобавитьУзел(ДеревоУслуг);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаСвернуть".
Процедура ДеревоКомандаСвернуть(Команда)
	
	Если СтрНайти(Команда.Имя, "ПоПоказаниямПУ") > 0 Тогда
		ИмяДерева = "ДеревоПоПоказаниямПУ";
	Иначе
		ИмяДерева = "ДеревоУслуг";
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭтаФорма[ИмяДерева].ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = ТекСтрока.ПолучитьИдентификатор();
		Элементы[ИмяДерева].Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаРазвернуть".
Процедура ДеревоКомандаРазвернуть(Команда)
	
	Если СтрНайти(Команда.Имя, "ПоПоказаниямПУ") > 0 Тогда
		ИмяДерева = "ДеревоПоПоказаниямПУ";
	Иначе
		ИмяДерева = "ДеревоУслуг";
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭтаФорма[ИмяДерева].ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = ТекСтрока.ПолучитьИдентификатор();
		
		Если СтрНайти(Команда.Имя, "Все") > 0 Тогда
			Элементы[ИмяДерева].Развернуть(ИдентификаторСтроки, Истина);
		Иначе
			Элементы[ИмяДерева].Развернуть(ИдентификаторСтроки);
			
			Для Каждого ТекПодстрока Из ТекСтрока.ПолучитьЭлементы() Цикл
				ИдентификаторСтроки = ТекПодстрока.ПолучитьИдентификатор();
				Элементы[ИмяДерева].Свернуть(ИдентификаторСтроки);
				
				Если (СтрНайти(Команда.Имя, "Зависимые") > 0 И ТекПодстрока.Зависимая) 
				 ИЛИ (СтрНайти(Команда.Имя, "Основные") > 0 И НЕ ТекПодстрока.Зависимая) Тогда
					Элементы[ИмяДерева].Развернуть(ИдентификаторСтроки, Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоУслугЗаполнить".
Процедура ДеревоУслугЗаполнить(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоУслугЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДеревоУслугЗаполнитьФрагмент();
	
КонецПроцедуры // ДеревоУслугЗаполнить()

&НаКлиенте
// Обработчик команды "ДеревоУслугСортироватьПоВозрастанию".
Процедура ДеревоУслугСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ДеревоУслуг", Элементы.ДеревоУслуг.ТекущийЭлемент.Имя, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоУслугСортироватьПоУбыванию".
Процедура ДеревоУслугСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ДеревоУслуг", Элементы.ДеревоУслуг.ТекущийЭлемент.Имя, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре "ДеревоУслугЗаполнить()".
Процедура ДеревоУслугЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	ДеревоУслугЗаполнитьФрагмент();
	
КонецПроцедуры // ДеревоУслугЗаполнитьЗавершение()

&НаКлиенте
// Процедура заполняет дерево услуг.
Процедура ДеревоУслугЗаполнитьФрагмент()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран объект.", ,"Объект", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка")
	   И Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для вида операции ""Комиссия банка"" необходимо заполнить поле ""Услуга""", ,"Услуга", "Объект");
		Возврат;
	КонецЕсли;
	
	// Если пользователь пытается начислить добровольное страхование с помощью вида операции, не предназначенного для этого.
	Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования")
	   И ВестиУчетНачисленийПоДобровольномуСтрахованию
	   И Объект.Услуга = УслугаДобровольногоСтрахования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для начисления добровольного страхования следует использовать вид операции ""Начисление добровольного страхования"".");
		Возврат;
	КонецЕсли;
	
	// Если пользователь пытается перезаполнить уже имеющиеся документы начисления добровольного страхования, и при этом на данный момент
	// начисления по добровольному страхованию не учитываются.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования")
	   И Не ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("На данный момент учет начислений по добровольному страхованию не ведется. Проверьте настройки в ""Настройках параметров учета (ЖКХ)"".");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
	
	ЗаполнитьДеревоУслуг();
	ЗаполнитьДопДанныеВСтрокахДерева();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ДеревоУслугЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "ДеревоУслугЗаполнитьСОтбором".
Процедура ДеревоУслугЗаполнитьСОтбором(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоУслугЗаполнитьСОтборомЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДеревоУслугЗаполнитьСОтборомФрагмент();
	
КонецПроцедуры // ДеревоУслугЗаполнитьСОтбором()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ДеревоУслугЗаполнитьСОтбором()".
Процедура ДеревоУслугЗаполнитьСОтборомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	ДеревоУслугЗаполнитьСОтборомФрагмент();
	
КонецПроцедуры // ДеревоУслугЗаполнитьСОтборомЗавершение()

&НаКлиенте
// Процедура заполняет дерево услуг с отбором.
Процедура ДеревоУслугЗаполнитьСОтборомФрагмент()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка")
		И Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для вида операции ""Комиссия банка"" необходимо заполнить поле ""Услуга""");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ДеревоУслугЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДеревоУслугЗаполнитьСОтборомФрагмент()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ДеревоУслугЗаполнитьСОтборомФрагмент()".
Процедура ДеревоУслугЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	мСписокОбъектов = СписокДляВозврата;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(мСписокОбъектов);
	
	ЗаполнитьДеревоУслуг();
	ЗаполнитьДопДанныеВСтрокахДерева();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ДеревоУслугЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА "УСЛУГИ ПО ПОКАЗАНИЯМ ПУ"

////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаКлиенте
// Возникает при активизации строки в дереве услуг.
Процедура ПриАктивизацииСтрокиДереваПоПоказаниямПУ()
	
	ТекСтрока = Элементы.ДеревоПоПоказаниямПУ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(ТекСтрока.ЛицевойСчет);
	
	Если ТекТип = Тип("СправочникСсылка.КВП_Услуги")
	   И ЗначениеЗаполнено(ТекСтрока.ЛицевойСчет) Тогда
		СпособРасчета = ПолучитьСпособРасчетаУслуги(ТекСтрока.ЛицевойСчет);
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
		 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
			Элементы.ДеревоПоПоказаниямПУДобавитьВУзел.Доступность = Ложь;
		Иначе
			Элементы.ДеревоПоПоказаниямПУДобавитьВУзел.Доступность = Истина;
		КонецЕсли;
	ИначеЕсли ТекТип = Тип("ПеречислениеСсылка.КВП_ВидыТарифов")
		  Или ТекТип = Тип("Строка") Тогда
		Элементы.ДеревоПоПоказаниямПУДобавитьВУзел.Доступность = Ложь;
	Иначе
		Элементы.ДеревоПоПоказаниямПУДобавитьВУзел.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает номера строк в дереве значений "Услуги по показаниям ПУ".
Процедура ПересчитатьНомераСтрок()
	
	НомерСтрокиДерева = 1;
	Для Каждого ТекущаяСтрока Из ДеревоПоПоказаниямПУ.ПолучитьЭлементы() Цикл
		ТекущаяСтрока.Ном = НомерСтрокиДерева;
		НомерСтрокиДерева = НомерСтрокиДерева + 1;
	КонецЦикла;
	
КонецПроцедуры //ПересчитатьНомераСтрок()

&НаСервере
// Процедура помещает данные о текущей строке во временное хранилище.
Процедура ДеревоПоПоказаниямПУПоместитьДанныеОТекущейСтрокеВХранилище(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоПоПоказаниямПУ.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураРедСтроки = Новый Структура;
	
	мСтруктураРедСтроки.Вставить("ЛицевойСчет",                       ТекущиеДанные.ЛицевойСчет);
	мСтруктураРедСтроки.Вставить("Тариф",                             ТекущиеДанные.Тариф);
	мСтруктураРедСтроки.Вставить("КоличествоПоПУ",                    ТекущиеДанные.КоличествоПоПУ);
	мСтруктураРедСтроки.Вставить("СуммаПоПУ",                         ТекущиеДанные.СуммаПоПУ);
	мСтруктураРедСтроки.Вставить("СуммаПоНормативу",                  ТекущиеДанные.СуммаПоНормативу);
	мСтруктураРедСтроки.Вставить("Начислено",                         ТекущиеДанные.Начислено);
	мСтруктураРедСтроки.Вставить("КоличествоПоНормативуБезИПУ",       ТекущиеДанные.КоличествоПоНормативуБезИПУ);
	мСтруктураРедСтроки.Вставить("КоличествоПоНормативуБезПоказаний", ТекущиеДанные.КоличествоПоНормативуБезПоказаний);
	мСтруктураРедСтроки.Вставить("УчетныйИндивидуальныйОбъем",        ТекущиеДанные.УчетныйИндивидуальныйОбъем);
	мСтруктураРедСтроки.Вставить("КоличествоРаспределенияПомещение",  ТекущиеДанные.КоличествоРаспределенияПомещение);
	мСтруктураРедСтроки.Вставить("КоличествоРаспределенияПодъезд",    ТекущиеДанные.КоличествоРаспределенияПодъезд);
	мСтруктураРедСтроки.Вставить("КоличествоРаспределенияЗдание",     ТекущиеДанные.КоличествоРаспределенияЗдание);
	
	ДеревоПоПоказаниямПУАдресХранилищаДанныхСтроки = 
		ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Процедура получает ссылку на лицевой счет из активной строки
Функция ПолучитьЛицевойСчетПоТекущейСтрокеПУ(ДанныеТекущейСтроки)
	
	// Пустое значение по умолчанию.
	ЛицевойСчет = Неопределено;
	
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		ТекущийЛицевойСчет = ДанныеТекущейСтроки.ЛицевойСчет;
		
		// Если в строке родителя не обнаружена ссылка на лицевой счет - повторно вызывает функцию,
		// если ссылка обнаружена - передаем ее значение в переменную "ЛицевойСчет" и возвращаем ее.
		Если ТипЗнч(ТекущийЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ЛицевойСчет = ТекущийЛицевойСчет;
		Иначе
			ЛицевойСчет = ПолучитьЛицевойСчетПоТекущейСтрокеПУ(ДанныеТекущейСтроки.ПолучитьРодителя());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЛицевойСчет;
	
КонецФункции

////////////////////////////////////////
// Обработчики событий

&НаКлиенте
// Обработчик события "ПриАктивизацииСтрок" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиДереваПоПоказаниямПУ", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// ! Возможность добавления новых строк в ТЧ "ДеревоПоПоказаниямПУ" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
	//    "Количество" и "Договор".
	
	//Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект.");
	//	Возврат;
	//КонецЕсли;
	//
	//Если Объект.Услуга.Пустая() Тогда
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана услуга.");
	//	Возврат;
	//КонецЕсли;
	//
	//ВыполнитьДобавлениеСтроки(Элемент, Копирование, Отказ, ДеревоПоПоказаниямПУ, Истина);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	РодительТекСтроки = ТекСтрока.ПолучитьРодителя();
	Если НЕ РодительТекСтроки = Неопределено И Не РодительТекСтроки.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПослеУдаления(Элемент)
	
	ПересчитатьНомераСтрок();
	РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПУПриНачалеРедактирования" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПоПоказаниямПУПоместитьДанныеОТекущейСтрокеВХранилище(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ДеревоПоПоказаниямПУ".
Процедура ДеревоПоПоказаниямПУПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоИзменено = Ложь;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ИмяКолонки = ПолучитьИмяКолонкиДерева(ИмяКолонки, "ДеревоПоПоказаниямПУ");
	
	Если НоваяСтрока Тогда
		ТекСтрока.Ном = ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Количество();
	КонецЕсли;
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(ДеревоПоПоказаниямПУАдресХранилищаДанныхСтроки);
	
	Если НЕ ТекСтрока.КоличествоПоПУ = мСтруктураРедСтроки.КоличествоПоПУ
	 ИЛИ НЕ ТекСтрока.КоличествоПоНормативуБезИПУ = мСтруктураРедСтроки.КоличествоПоНормативуБезИПУ
	 ИЛИ НЕ ТекСтрока.КоличествоПоНормативуБезПоказаний = мСтруктураРедСтроки.КоличествоПоНормативуБезПоказаний
	 ИЛИ НЕ ТекСтрока.УчетныйИндивидуальныйОбъем = мСтруктураРедСтроки.УчетныйИндивидуальныйОбъем
	 ИЛИ НЕ ТекСтрока.СуммаПоПУ = мСтруктураРедСтроки.СуммаПоПУ 
	 ИЛИ НЕ ТекСтрока.СуммаПоНормативу = мСтруктураРедСтроки.СуммаПоНормативу
	 ИЛИ НЕ ТекСтрока.Тариф = мСтруктураРедСтроки.Тариф
	 ИЛИ НЕ ТекСтрока.Начислено = мСтруктураРедСтроки.Начислено
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияПомещение = мСтруктураРедСтроки.КоличествоРаспределенияПомещение
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияПодъезд = мСтруктураРедСтроки.КоличествоРаспределенияПодъезд
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияЗдание = мСтруктураРедСтроки.КоличествоРаспределенияЗдание Тогда
		ПересчитатьСуммуСтрокиТЧ(ТекСтрока, ИмяКолонки);
		ДеревоИзменено = Истина;
	КонецЕсли;
	
	ЗаполнитьДанныеДляУсловногоОформления(Элемент.ТекущаяСтрока, , Истина);
	
	// Если изменилось количество и в документе есть зависимые услуги (ЗУ),
	// то необходимо пересчитать количество по всем строкам ЗУ.
	
	// Для информации:
	// Взять сразу имя колонки не можем, т.к. могут поменять не количество, а одну из сумм, 
	// в результате по основной-услуге пересчитается и количество.
	Если ИмеютсяСтрокиЗУ И НЕ ТекСтрока.Зависимая 
	   И НЕ ТекСтрока.Сторно И НЕ ТекСтрока.НачислениеПоПовышающемуКоэффициенту
	   И (НЕ ТекСтрока.КоличествоПоПУ = мСтруктураРедСтроки.КоличествоПоПУ
	 ИЛИ НЕ ТекСтрока.КоличествоПоНормативуБезИПУ = мСтруктураРедСтроки.КоличествоПоНормативуБезИПУ
	 ИЛИ НЕ ТекСтрока.КоличествоПоНормативуБезПоказаний = мСтруктураРедСтроки.КоличествоПоНормативуБезПоказаний
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияПомещение = мСтруктураРедСтроки.КоличествоРаспределенияПомещение
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияПодъезд = мСтруктураРедСтроки.КоличествоРаспределенияПодъезд
	 ИЛИ НЕ ТекСтрока.КоличествоРаспределенияЗдание = мСтруктураРедСтроки.КоличествоРаспределенияЗдание) Тогда
		Если НЕ ТекСтрока.КоличествоПоПУ = мСтруктураРедСтроки.КоличествоПоПУ Тогда
			ИмяКолонки = "КоличествоПоПУ";
		ИначеЕсли НЕ ТекСтрока.КоличествоПоНормативуБезИПУ = мСтруктураРедСтроки.КоличествоПоНормативуБезИПУ Тогда
			ИмяКолонки = "КоличествоПоНормативуБезИПУ";
		ИначеЕсли НЕ ТекСтрока.КоличествоПоНормативуБезПоказаний = мСтруктураРедСтроки.КоличествоПоНормативуБезПоказаний Тогда
			ИмяКолонки = "КоличествоПоНормативуБезПоказаний";
		ИначеЕсли НЕ ТекСтрока.КоличествоРаспределенияПомещение = мСтруктураРедСтроки.КоличествоРаспределенияПомещение Тогда
			ИмяКолонки = "КоличествоРаспределенияПомещение";
		ИначеЕсли НЕ ТекСтрока.КоличествоРаспределенияПодъезд = мСтруктураРедСтроки.КоличествоРаспределенияПодъезд Тогда
			ИмяКолонки = "КоличествоРаспределенияПодъезд";
		ИначеЕсли НЕ ТекСтрока.КоличествоРаспределенияЗдание = мСтруктураРедСтроки.КоличествоРаспределенияЗдание Тогда
			ИмяКолонки = "КоличествоРаспределенияЗдание";
		КонецЕсли;
		ПересчитатьСтрокиПоЗависимымУслугамВДеревеПоПоказаниямПУ(ТекСтрока, ИмяКолонки);
		ДеревоИзменено = Истина;
	КонецЕсли;
	
	Если ДеревоИзменено Тогда
		
		Пока ТекСтрока <> Неопределено Цикл
			ПредыдущаяСтрока = ТекСтрока;
			ТекСтрока = ТекСтрока.ПолучитьРодителя();
		КонецЦикла;
		
		РассчитатьИтоговыеСтрокиВДеревеПоПоказаниямПУ(ПредыдущаяСтрока.ПолучитьИдентификатор());
		
		// Обновим суммы в заголовке группы итогов под табличной частью.
		УстановитьЗаголовокСворачиваемойГруппыИтогов(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоПоПоказаниямПУПомещение".
Процедура ДеревоПоПоказаниямПУПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоПоПоказаниямПУВладелец".
Процедура ДеревоПоПоказаниямПУВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоПоПоказаниямПУЗдание".
Процедура ДеревоПоПоказаниямПУЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПоПоказаниямПУЛицевойСчет".
Процедура ДеревоПоПоказаниямПУЛицевойСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоПоказаниямПУ.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено
	   И ТипЗнч(ТекущиеДанные.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		ТекущиеДанные.Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевойСчет, "Адрес");
		ТекущиеДанные.Здание    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Помещение,"Владелец");
		ТекущиеДанные.Владелец  = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекущиеДанные.ЛицевойСчет,Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Обработчики команд

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУДобавитьУзел".
Процедура ДеревоПоПоказаниямПУДобавитьУзел(Команда)
	
	// ! Возможность добавления новых строк в ТЧ "ДеревоПоПоказаниямПУ" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом не заполняются поля "Квартира", "Владелец",
	//    "Количество" и "Договор".
	
	//ДобавитьУзел(ДеревоПоПоказаниямПУ, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУЗаполнить".
Процедура ДеревоПоПоказаниямПУЗаполнить(Команда)
	
	Если ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Количество() > 0 ИЛИ Объект.Проведен Тогда
		
		Если Объект.Проведен Тогда
			ТекстВопроса = "Перед заполнением будет выполнена отмена проведения документа и очистка табличной части. Продолжить?";
		Иначе
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
		КонецЕсли;
		
		ДопПараметры = Новый Структура("ТекстВопроса", ТекстВопроса);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнить", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДеревоПоПоказаниямПУЗаполнитьПродолжение();
	
КонецПроцедуры // ДеревоПоПоказаниямПУЗаполнить()

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУСортироватьПоВозрастанию".
Процедура ДеревоПоПоказаниямПУСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ДеревоПоПоказаниямПУ", Элементы.ДеревоПоПоказаниямПУ.ТекущийЭлемент.Имя, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУСортироватьПоУбыванию".
Процедура ДеревоПоПоказаниямПУСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ДеревоПоПоказаниямПУ", Элементы.ДеревоПоПоказаниямПУ.ТекущийЭлемент.Имя, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ДеревоПоПоказаниямПУЗаполнить()".
Процедура ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем отмену проведения документа для корректного
	// получения остатков по регистрам накопления.
	Если Объект.Проведен Тогда
		ВыполнитьОтменуПроведенияДокументаВФорме();
	КонецЕсли;
	
	ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Очистить();
	
	// Чистим кэш таблиц для обновления начислений.
	ОчиститьКешНаСервере();
	
	ДеревоПоПоказаниямПУЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнить()

&НаКлиенте
// Заполняет табличную часть "Услуги"
Процедура ДеревоПоПоказаниямПУЗаполнитьПродолжение()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран объект.", ,"Объект", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана услуга.", ,"Услуга", "Объект");
		Возврат;
	КонецЕсли;
	
	Объект.СписыватьРасходПУПоТаблицеСчетчиков = Истина;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
	
	ЗаполнитьДеревоУслугПоПоказаниямПУ();
	ЗаполнитьДопДанныеВСтрокахДерева(Истина);
	
	Если Объект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
		ТекстВопроса = "Произвести расчет ОДН?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДеревоПоПоказаниямПУЗаполнитьФрагмент();
	
КонецПроцедуры // ДеревоПоПоказаниямПУЗаполнитьПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ДеревоПоПоказаниямПУЗаполнитьПродолжение()".
Процедура ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДеревоПоПоказаниямПУРассчитать(Команды.ДеревоПоПоказаниямПУРассчитать);
	КонецЕсли;
	
	ДеревоПоПоказаниямПУЗаполнитьФрагмент();
	
КонецПроцедуры // ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьПродолжение()

&НаКлиенте
// Вызывает процедуру управления формой.
Процедура ДеревоПоПоказаниямПУЗаполнитьФрагмент()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ДеревоПоПоказаниямПУЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУЗаполнитьСОтбором".
Процедура ДеревоПоПоказаниямПУЗаполнитьСОтбором(Команда)
	
	Если ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Количество() > 0 ИЛИ Объект.Проведен Тогда
		
		Если Объект.Проведен Тогда
			ТекстВопроса = "Перед заполнением будет выполнена отмена проведения документа и очистка табличной части. Продолжить?";
		Иначе
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтбором", ЭтотОбъект, Новый Структура("ТекстВопроса", ТекстВопроса));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ДеревоПоПоказаниямПУЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // ДеревоПоПоказаниямПУЗаполнитьСОтбором()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ДеревоПоПоказаниямПУЗаполнитьСОтбором()".
Процедура ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем отмену проведения документа для корректного
	// получения остатков по регистрам накопления.
	Если Объект.Проведен Тогда
		ВыполнитьОтменуПроведенияДокументаВФорме();
	КонецЕсли;
	
	ДеревоПоПоказаниямПУ.ПолучитьЭлементы().Очистить();
	
	ДеревоПоПоказаниямПУЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтбором()

&НаКлиенте
// Процедура-продолжение процедуры "ДеревоПоПоказаниямПУЗаполнитьСОтбором()".
Процедура ДеревоПоПоказаниямПУЗаполнитьСОтборомПродолжение()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект.");
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана услуга.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ДеревоПоПоказаниямПУЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДеревоПоПоказаниямПУЗаполнитьСОтборомПродолжение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПродолжение()".
Процедура ДеревоПоПоказаниямПУЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	мСписокОбъектов = СписокДляВозврата;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(мСписокОбъектов);
	
	ЗаполнитьДеревоУслугПоПоказаниямПУ();
	ЗаполнитьДопДанныеВСтрокахДерева(Истина);
	
	Если Объект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
		ТекстВопроса = "Произвести расчет?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтборомЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВызватьУправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ДеревоПоПоказаниямПУЗаполнитьСОтборомПродолжение()".
Процедура ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтборомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДеревоПоПоказаниямПУРассчитать(Команды.ДеревоПоПоказаниямПУРассчитать);
	КонецЕсли;
	
	ВызватьУправлениеФормой();
	
КонецПроцедуры // ОбработатьРезультатВопросаДеревоПоПоказаниямПУЗаполнитьСОтборомЗавершение()

&НаКлиенте
// Вызывает процедуру управления формой.
Процедура ВызватьУправлениеФормой()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВызватьУправлениеФормой()

&НаКлиенте
// Обработчик команды "ДеревоПоПоказаниямПУРассчитать".
Процедура ДеревоПоПоказаниямПУРассчитать(Команда)
	
	ЗаполнитьТабличнуюЧастьПоДеревуПоказанийПУ();
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	РассчитатьПоказанияНаСервере();
	
	ЗаполнитьДеревоУслугПоПоказаниямПУ();
	ЗаполнитьДопДанныеВСтрокахДерева(Истина);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПерейтиКЗакрепленнымСчетчикам"
Процедура ПерейтиКЗакрепленнымСчетчикам(Команда)
	
	ДанныеТекущейСтроки = Элементы.ДеревоПоПоказаниямПУ.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		ПоказатьПредупреждение(, "Не определен текущий лицевой счет!");
		Возврат;
	КонецЕсли;
	
	ЛицевойСчет = ПолучитьЛицевойСчетПоТекущейСтрокеПУ(ДанныеТекущейСтроки);
	
	Если Не ЛицевойСчет = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Объект,Услуга,ДатаАктуальности", ЛицевойСчет, Объект.Услуга, Объект.Дата);
		ОткрытьФорму("Справочник.КВП_Счетчики.ФормаСписка", ПараметрыФормы);
	Иначе
		ПоказатьПредупреждение(, "Не определен текущий лицевой счет!");
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "УСЛУГИ"

////////////////////////////////////////
// Обработчики событий

&НаКлиенте
// Обработчик события "ПослеУдаления" табличной части "Услуги".
Процедура УслугиПослеУдаления(Элемент)
	
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугиКвартира".
Процедура УслугиКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугиВладелец".
Процедура УслугиВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугиЗдание".
Процедура УслугиЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугиУслуга".
Процедура УслугиУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборУслуг(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиЛицевыеСчета".
Процедура УслугиЛицевыеСчетаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущаяСтрока;
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Если Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") Тогда
			ТекущиеДанные.Договор = ПолучитьДоговорВладельцаПарковочногоМестаНаСервере(Объект.Дата, ТекущиеДанные.ЛицевыеСчета, Объект.Организация);
		КонецЕсли;
		
		ТекущиеДанные.Квартира = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевыеСчета, "Адрес");
		ТекущиеДанные.Здание   = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Квартира, "Владелец");
		ТекущиеДанные.Владелец = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекущиеДанные.ЛицевыеСчета,
																							Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугиЛицевыеСчета".
Процедура УслугиЛицевыеСчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.УдалитьНачисленияНаПарковочныеМеста") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПараметрОтборТипПомещения", 
										ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Автоместо"));
		
		Если Не Элементы.Услуги.ТекущиеДанные = Неопределено Тогда
			СтруктураПараметров.Вставить("ТекущаяСтрока", Элементы.Услуги.ТекущиеДанные.ЛицевыеСчета);
		КонецЕсли;
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", СтруктураПараметров, Элемент);
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиКоличество".
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Услуги.ТекущиеДанные);
	
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиТариф".
Процедура УслугиТарифПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Услуги.ТекущиеДанные);
	
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиСуммаНачислений".
Процедура УслугиСуммаНачисленийПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Услуги.ТекущиеДанные);
	
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиНачислено".
Процедура УслугиНачисленоПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Услуги.ТекущиеДанные);
	
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиДнейНачислено".
Процедура УслугиДнейНачисленоПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧ(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "НАЧИСЛЕНИЯ ПО РАССРОЧКЕ"

////////////////////////////////////////
// Обработчики событий

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличной части "НачисленияПоРассрочке".
Процедура НачисленияПоРассрочкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля табличной части "НачисленияПоРассрочке".
Процедура НачисленияПоРассрочкеОтказОтНачалаВыбораПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Обработчики команд

&НаКлиенте
// Обработчик команды "УслугиКомандаЗаполнить".
Процедура УслугиКомандаЗаполнить(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаУслугиКомандаЗаполнить", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	УслугиКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // УслугиКомандаЗаполнить()

&НаКлиенте
// Обработчик команды "УслугиКомандаСортироватьПоВозрастанию".
Процедура УслугиСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("Услуги", Элементы.Услуги.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УслугиКомандаСортироватьПоУбыванию".
Процедура УслугиСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("Услуги", Элементы.Услуги.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "УслугиКомандаЗаполнить()".
Процедура ОбработатьРезультатВопросаУслугиКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	УслугиКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУслугиКомандаЗаполнить()

&НаКлиенте
// Порцедура-продолжение процедуры обработчика команды "УслугиКомандаЗаполнить()".
Процедура УслугиКомандаЗаполнитьПродолжение()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка")
		И Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для вида операции ""Комиссия банка"" необходимо заполнить поле ""Услуга""");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
	ЗаполнитьДопДанныеВУслугах();
	
	// Заполним данные для панели информации.
	ПересчитатьИтогиПоКомиссииБанка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УслугиКомандаЗаполнитьПродолжение()

&НаКлиенте
// Обработчик команды "УслугиКомандаЗаполнитьСОтбором".
Процедура УслугиКомандаЗаполнитьСОтбором(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	УслугиКомандаЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // УслугиКомандаЗаполнитьСОтбором()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "УслугиКомандаЗаполнитьСОтбором()".
Процедура ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	УслугиКомандаЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором()

&НаКлиенте
// Порцедура-продолжение процедуры обработчика команды "УслугиКомандаЗаполнитьСОтбором()".
Процедура УслугиКомандаЗаполнитьСОтборомПродолжение()
	
	Объект.РасходПоОбщедомовымУслугам = 0;
	Объект.РасходПоОбщедомовымПУ      = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.КомиссияБанка")
		И Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для вида операции ""Комиссия банка"" необходимо заполнить поле ""Услуга""");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // УслугиКомандаЗаполнитьСОтборомПродолжение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "УслугиКомандаЗаполнитьСОтборомПродолжение()".
Процедура УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	мСписокОбъектов = СписокДляВозврата;
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(мСписокОбъектов);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг()

&НаКлиенте
// Обработчик команды "РассрочкаКомандаЗаполнить".
Процедура РассрочкаКомандаЗаполнить(Команда)
	
	Если Объект.НачисленияПоРассрочке.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаРассрочкаКомандаЗаполнить", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	РассрочкаКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // УслугиКомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "УслугиКомандаЗаполнить()".
Процедура ОбработатьРезультатВопросаРассрочкаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.НачисленияПоРассрочке.Очистить();
	
	РассрочкаКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУслугиКомандаЗаполнить()

&НаКлиенте
// Порцедура-продолжение процедуры обработчика команды "УслугиКомандаЗаполнить()".
Процедура РассрочкаКомандаЗаполнитьПродолжение()
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
	
КонецПроцедуры // УслугиКомандаЗаполнитьПродолжение()

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПротоколРасчетов = Новый ХранилищеЗначения(ПротоколРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугКоличествоПриИзменении(Элемент)
	ТекДанные = элементы.ДеревоУслуг.ТекущиеДанные;
	УслугаРодитель = ТекДанные.ПолучитьРодителя();
	ЛсРодитель = УслугаРодитель.ПолучитьРодителя();
	дерево = ДеревоУслуг.ПолучитьЭлементы();
	
	Для каждого Строка из дерево Цикл
		Если Строка.Квартира = ЛсРодитель.Квартира и не ЛсРодитель.ЛицевойСчет = Строка.ЛицевойСчет  Тогда
			ВеткаУслуга = Строка.ПолучитьЭлементы();
			Для каждого стр из ВеткаУслуга цикл
				Если стр.УслугаОснование = УслугаРодитель.ЛицевойСчет тогда
					ВеткаКол = стр.ПолучитьЭлементы();
					Для каждого стрК из ВеткаКол цикл
					Если стрК.Зависимая тогда
						стрК.Количество	=ТекДанные.Количество;
						стрК.Начислено = стрК.Количество * стрК.Тариф ;
					КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоУслуг");
	//
	//ДеревоЗначений.Строки.НайтиСтроки("Квартира");

	  //ПересчитатьСуммуСтрокиТЧНаСервере(ТекВеткаДерева);
	  //  ПересчитатьВсегоНачисленоПоУслугеВклСоставные(ТекВеткаДерева);
	  //  ПересчитатьВсегоНачислено();
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

мСоотвСпРасчетаУслуг = Новый Соответствие;

#КонецОбласти