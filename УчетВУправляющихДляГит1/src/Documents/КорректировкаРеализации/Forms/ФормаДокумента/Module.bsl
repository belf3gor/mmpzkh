// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();

		Если ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
			// ищем исходный документ, или документ с типом корректировки "По согласованию сторон"
			ДокументСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Ложь);
			// ищем к нему наиболее поздний документ с типом корректировки "Исправление в первичных документах"
			ДокументОснование = Документы.КорректировкаРеализации.ПолучитьПоследнийКорректирующийДокумент(
				Объект.Ссылка, ДокументСсылка);
			ДатаТекущегоДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРеализации, "Дата");
			Если Объект.ДокументРеализации <> ДокументОснование И ДатаТекущегоДокументаРеализации < ДокументОснование.Дата Тогда
				ПоследнийДокументИсправления = ДокументОснование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",          "Товары");
	СписокТабличныхЧастей.Добавить("Услуги",          "Услуги");
	СписокТабличныхЧастей.Добавить("АгентскиеУслуги", "АгентскиеУслуги");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	УстановитьВидимостьСчетовУчета();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.КорректировкаРеализации",
		"ФормаДокумента",
		НСтр("ru='Новости: Корректировка реализации'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(ПоследнийДокументИсправления) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
			|Использовать последнюю введенную корректировку?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросПриОткрытииПоследняяКорректировкаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если (ИмяСобытия = "Запись_СчетФактураВыданныйКорректировочный"
		ИЛИ ИмяСобытия = "Запись_СчетФактураВыданный")
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеКорректировкаРеализации";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);	

	ПредставлениеДокумента = Документы.КорректировкаРеализации.ПолучитьПредставлениеДокумента(Объект.Ссылка);		
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ТекущийОбъект.Ссылка, Неопределено, УникальныйИдентификатор);
		Если Не УчетНДСБП.НужноОжидатьОкончаниеАктуализации(РеквизитыСФ, ПараметрыЗаписи) Тогда
			ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;	
		
	УстановитьСостояниеДокумента();
	
	Если ВедетсяУчетНДСПоФЗ335
		И ПокупательНалоговыйАгентПоНДС = Истина Тогда 
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиент.ОжидатьОкончаниеАктуализации(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		ОповеститьОбИзменении(СчетФактура);
	КонецЕсли;
	
	Оповестить("Запись_КорректировкаРеализации", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	Иначе
		ТекущийВидОперации = Объект.ВидОперации;
	КонецЕсли;

	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьПриИзменении(Элемент)

	Объект.КорректироватьБУиНУ = (Корректировать = 1);
	
	Объект.КорректироватьНДС = (Корректировать <> 2);
	
	Если Корректировать = 2 Тогда
		ТребуетсяСчетФактура = Ложь;
	Иначе
		КорректироватьПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

	Если Корректировать = 1 И ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по основанию?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПерезаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КорректироватьПриИзмененииНаСервере()
	
	ДоговорУказан 		= ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	ВидДоговора		 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	ЭтоКомиссия 		= ДоговорУказан И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоОтгрузка 		= ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И 
						Объект.ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
						
	Если ЭтоОтгрузка Тогда
		ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия
		ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзменении(Элемент)

	ДокументРеализацииПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработки = ДокументРеализацииОбработкаВыбораСервер(Объект.Ссылка, ВыбранноеЗначение,
		Объект.ВидОперации, ВалютаРегламентированногоУчета);

	Если ПараметрыОбработки.ПредупреждениеОбОшибке <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение( , ПараметрыОбработки.ПредупреждениеОбОшибке);
	ИначеЕсли ПараметрыОбработки.Свойство("ВопросИспользоватьПоследнююКорректировку") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
			|Использовать последнюю введенную корректировку?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПоследняяКорректировка", ПараметрыОбработки.ПоследняяКорректировка);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююКорректировкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, 
		|Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НомерГТД, НомерГТДДоИзменения,
		|СтранаПроисхождения, СтранаПроисхожденияДоИзменения,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам,
		|СчетУчетаЗабалансовый, КодТНВЭД, КодТНВЭДДоИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения,
		|НадписьПослеИзменения, НадписьДоКорректировки, НадписьДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, КорректироватьБУиНУ,
		|Склад, ТипЦен, ВалютаДокумента, РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|СуммаВключаетНДС, ДоговорКонтрагента, ВедетсяУчетНДСПоФЗ335, ПокупательНалоговыйАгентПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	ДанныеОбъекта.РеализацияВЕАЭС            = РеализацияВЕАЭС;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150      = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335         = ВедетсяУчетНДСПоФЗ335;
	ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = ПокупательНалоговыйАгентПоНДС;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);

	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	ОтобразитьСубконтоСчетаДоходовТовары = ОтобразитьСубконтоСчетаДоходовТовары ИЛИ НЕ ТекущиеДанные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;

		СтрокаТабличнойЧасти.ЕстьВДокументеРеализации = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения 			= 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения 				= 0;
			СтрокаТабличнойЧасти.СуммаДоИзменения 				= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоИзменения 			= 0;
			СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 			= Неопределено;
			СтрокаТабличнойЧасти.НомерГТДДоИзменения 			= Неопределено;
			СтрокаТабличнойЧасти.СтранаПроисхожденияДоИзменения = Неопределено;

			СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары", "");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСумма("Товары", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСумма("Товары", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("Товары", "");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Товары", "ДоИзменения");
	ПриИзмененииСтавкаНДС("Товары", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Товары", "");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Товары", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Товары", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Товары", "");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
	СтрокаТаблицы.СчетУчетаЗабалансовый = СвойстваСчетаУчета.Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	Если ИспользоватьОднуНоменклатурнуюГруппу И СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам Тогда
		
		СтрокаТаблицы.Субконто = ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходовТовары = ОтобразитьСубконтоСчетаДоходовТовары ИЛИ НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	СтрокаТЧ = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеРеализации И Объект.КорректироватьБУиНУ Тогда
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
				"Товары["+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") +"].Количество", "Объект", Отказ)
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ УСЛУГИ

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, СодержаниеДоИзменения, Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения, СчетДоходовВедетсяУчетПоНоменклатурнымГруппам,
		|НадписьПослеИзменения, НадписьДоКорректировки, НадписьДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, ВидОперации, Организация,
		|Склад, ТипЦен, ВалютаДокумента, КорректироватьБУиНУ,
		|СуммаВключаетНДС, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ОтобразитьСубконтоСчетаДоходовУслуги = ОтобразитьСубконтоСчетаДоходовУслуги ИЛИ НЕ ТекущиеДанные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	СтрокаТЧ = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеРеализации И Объект.КорректироватьБУиНУ Тогда
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
				"Услуги["+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") +"].Количество", "Объект", Отказ)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;

		СтрокаТабличнойЧасти.ЕстьВДокументеРеализации = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения 			= 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения 				= 0;
			СтрокаТабличнойЧасти.СуммаДоИзменения 				= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоИзменения 			= 0;
			СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 			= Неопределено;

			СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Услуги", "");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСумма("Услуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСумма("Услуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("Услуги", "");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Услуги", "ДоИзменения");
	ПриИзмененииСтавкаНДС("Услуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Услуги", "");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Услуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Услуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("Услуги", "");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	Если ИспользоватьОднуНоменклатурнуюГруппу И СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам Тогда
		
		СтрокаТаблицы.Субконто = ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходовУслуги = ОтобразитьСубконтоСчетаДоходовУслуги ИЛИ НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ АГЕНТСКИЕ УСЛУГИ

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПередУдалением(Элемент, Отказ)

	СтрокаТЧ = Элементы.АгентскиеУслуги.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеРеализации И Объект.КорректироватьБУиНУ Тогда
		ТекстСообщения =
			НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
				"АгентскиеУслуги["+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") +"].Количество", "Объект", Отказ)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;

		СтрокаТабличнойЧасти.ЕстьВДокументеРеализации = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения 		= 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения 			= 0;
			СтрокаТабличнойЧасти.СуммаДоИзменения 			= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоИзменения 		= 0;
			СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 		= Неопределено;

			СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
			СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
			СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, СодержаниеДоИзменения, Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения,
		|НадписьПослеИзменения, НадписьДоКорректировки, НадписьДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация,
		|Склад, ТипЦен, ВалютаДокумента, КорректироватьБУиНУ,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("АгентскиеУслуги", "");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСумма("АгентскиеУслуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСумма("АгентскиеУслуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("АгентскиеУслуги", "");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("АгентскиеУслуги", "ДоИзменения");
	ПриИзмененииСтавкаНДС("АгентскиеУслуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("АгентскиеУслуги", "");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСДоКорректировкиПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("АгентскиеУслуги", "ДоКорректировки");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСДоИзмененияПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("АгентскиеУслуги", "ДоИзменения");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммыНДС("АгентскиеУслуги", "");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура("Организация", Объект.Организация);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"АгентскиеУслуги.Контрагент",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);

	АгентскиеУслугиКонтрагентПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.АгентскиеУслуги);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"АгентскиеУслуги.ДоговорКонтрагента", 
		Объект, 
		Элементы.АгентскиеУслуги.ТекущиеДанные);

	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	Отказ = Не ВозможностьСозданияСчетаФактуры(Объект.ДокументРеализации);
	
	Если Отказ Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДокументРеализации", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеТовары();
	
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеУслуги();

	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаАгентскиеУслуги
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// Отображаются только при исправлении корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСДоИзменения, ТоварыКодТНВЭДДоИзменения, УслугиСтавкаНДСДоИзменения, АгентскиеУслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭДДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетДоходов, ТоварыСчетРасходов, ТоварыСубконто, ТоварыСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТовары", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовУслуги", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыКодТНВЭД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭДДоИзменения");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты не используются, если покупатель является налоговым агентом по НДС.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПокупательНалоговыйАгентПоНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ335", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// При автоматическом отражения в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТДДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхожденияДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// ТоварыСчетДоходов, ТоварыСчетРасходов, ТоварыСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто", ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТовары", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыКодТНВЭД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("УслугиПроинициализировано", Истина);


	// При автоматическом отражения в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСодержаниеДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетРасходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНоменклатура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто", ВидСравненияКомпоновкиДанных.Заполнено,);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовУслуги", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// При автоматическом отражения в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСодержаниеДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента 	= Объект.Дата;
	ТекущийВидОперации 		= Объект.ВидОперации;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Корректировать = ?(Объект.КорректироватьБУиНУ,1,?(Объект.КорректироватьНДС,0,2));
	
	ЗаполнитьРеквизитыФормы();
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");

	Если ЗначениеЗаполнено(Объект.ДокументРеализации)
		И ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидОперацииРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРеализации, "ВидОперации");
		ЭтоОтгрузка = ВидОперацииРеализации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	Иначе
		ЭтоОтгрузка = Ложь;
	КонецЕсли;
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
		ОтобразитьСубконтоСчетаДоходовУслуги = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Услуги);
		ОтобразитьСубконтоСчетаДоходовТовары = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Товары);
	Иначе
		ОтобразитьСубконтоСчетаДоходовУслуги = Истина;
		ОтобразитьСубконтоСчетаДоходовТовары = Истина;
	КонецЕсли;

	ДоговорУказан 		= ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДСПокупателем");
		ВидДоговора		 	= РеквизитыДоговора.ВидДоговора;
		ЭтоКомиссия 		= ДоговорУказан И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		ПокупательНалоговыйАгентПоНДС = РеквизитыДоговора.УчетАгентскогоНДСПокупателем;
	Иначе
		ВидДоговора		 	= Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
		ЭтоКомиссия 		= Ложь;
		ПокупательНалоговыйАгентПоНДС = Ложь;
	КонецЕсли;
						
	// Формирование надписи "Счет-фактура"
	Если Корректировать = 2 Тогда
		ТребуетсяСчетФактура = Ложь;
	ИначеЕсли ЭтоОтгрузка Тогда
		ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный");
	КонецЕсли;				
					
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

	ДоступнаКорректировкаБУиНУ = Документы.КорректировкаРеализации.ДоступнаКорректировкаБУиНУ(Объект.ДокументРеализации);

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ПредставлениеДокумента = Документы.КорректировкаРеализации.ПолучитьПредставлениеДокумента(Объект.Ссылка);		
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ДоступнаКорректировкаБУиНУ Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Вставить(0, 1, "Во всех разделах учета");
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если Форма.Корректировать = 1 Тогда
				Форма.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Добавить(2, "Только в печатной форме");
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если Форма.Корректировать = 2 Тогда
				Форма.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.БанковскийСчетОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ИсправляемыйДокументРеализации.Видимость = ЗначениеЗаполнено(Объект.ДокументРеализации)
		И Объект.ДокументРеализации <> Объект.ИсправляемыйДокументРеализации;
	
	Элементы.ОтчетностьПодписана.Видимость = Год(Форма.ДатаДокументаРеализации) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ;

	Элементы.ГруппаАгентскиеУслуги.Видимость =
		(ЗначениеЗаполнено(Форма.ДокументРеализацииСсылка)
			И ТипЗнч(Форма.ДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"))
		ИЛИ (Объект.АгентскиеУслуги.Количество() > 0);

	Элементы.ГруппаТовары.Видимость =
		(НЕ (ЗначениеЗаполнено(Форма.ДокументРеализацииСсылка)
			И ТипЗнч(Форма.ДокументРеализацииСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")))
		ИЛИ (Объект.Товары.Количество() > 0);

	Если ЗначениеЗаполнено(Объект.ДокументРеализации) 
		И (Год(Форма.ДатаДокументаРеализации) < Год(Объект.Дата))
		И Объект.КорректироватьБУиНУ Тогда
		Элементы.ГруппаПрошлыйГод.Видимость = Истина;
		Элементы.ГруппаТекущийГод.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПрошлыйГод.Видимость = Ложь;
		Элементы.ГруппаТекущийГод.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаНомерДата.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ГруппаНомерДатаИсправления.Видимость = НЕ Элементы.ГруппаНомерДата.Видимость;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение") Тогда 
		ТекстЗаголовка = НСтр("ru='Корр. счет-фактура:'");
		ТекстКнопки = НСтр("ru='Выписать корректировочный счет-фактуру'");
	Иначе
		Если Форма.ИсправлениеКорректировки Тогда
			ТекстЗаголовка = НСтр("ru='Корр. счет-фактура:'");
		Иначе
			ТекстЗаголовка = НСтр("ru='Счет-фактура:'");
		КонецЕсли;
		ТекстКнопки = НСтр("ru='Выписать исправленный счет-фактуру'");
	КонецЕсли;
	
	Элементы.ДекорацияСчетФактура.Заголовок = ТекстЗаголовка;
	Элементы.НадписьСчетФактура.Заголовок = СтрЗаменить(ТекстЗаголовка, ":", "");
	
	Элементы.ВыписатьСчетФактуру.Заголовок = ТекстКнопки;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Ложь,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
		
	ИсправлениеКорректировки = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
		И ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
	
	НалоговыйАгентПоФЗ335 = Форма.ПокупательНалоговыйАгентПоНДС = Истина И Форма.ВедетсяУчетНДСПоФЗ335;
	Элементы.ИтогиВсегоНДС.Видимость = Не НалоговыйАгентПоФЗ335;
	Элементы.ГруппаУслуги.Видимость = Не НалоговыйАгентПоФЗ335;
	Элементы.ГруппаАгентскиеУслуги.Видимость = Не НалоговыйАгентПоФЗ335;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрации");
	РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	ВедетсяУчетНДСПоФЗ335        = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	ДокументРеализацииСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	
	ДатаДокументаРеализации = ?(ЗначениеЗаполнено(ДокументРеализацииСсылка), 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализацииСсылка, "Дата"), '00010101');

	СтавкаНДСИсчисляетсяНалоговымАгентом = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Объект.Дата);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуНаСервере()
	
	Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(Объект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	Если СтрокаТаблицы.Свойство("СчетДоходовВедетсяУчетПоНоменклатурнымГруппам") И СтрокаТаблицы.Свойство("СчетДоходов") Тогда
		СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
			БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
	КонецЕсли;
		
	Если СтрокаТаблицы.Свойство("СчетУчетаЗабалансовый") И СтрокаТаблицы.Свойство("СчетУчета") Тогда
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.СчетУчетаЗабалансовый = СвойстваСчетаУчета.Забалансовый;
	КонецЕсли;

	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	Если СтрокаТаблицы.Свойство("СчетДоходовВедетсяУчетПоНоменклатурнымГруппам") И СтрокаТаблицы.Свойство("СчетДоходов") Тогда
		СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
			БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
	КонецЕсли;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки = НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     =  НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  =  НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего")
					+ Форма.Объект.Услуги.Итог("Всего")
					+ Форма.Объект.АгентскиеУслуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Форма.Объект.Товары.Итог("СуммаНДС")
					+ Форма.Объект.Услуги.Итог("СуммаНДС")
					+ Форма.Объект.АгентскиеУслуги.Итог("СуммаНДС");

КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
		Форма,
		РеквизитыСФ,
		Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ФоновоеВыполнение", Истина);
	КонецЕсли;
	РеквизитыСФ = УчетНДСКлиент.ОбработатьВыпискуСчетаФактуры(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если РеквизитыСФ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(ДокументРеализацииСсылка) 
		И Год(ДатаДокументаРеализации) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ВидОперацииПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ДокументыОснования.Количество() > 1 Тогда
		
		ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(Объект.Ссылка);
		Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
			ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			
			Исправление = Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			
			Если НЕ СчетФактура.ВидСчетаФактуры = ВидСчетаФактурыПоОснованию
				ИЛИ Исправление <> СчетФактура.Исправление Тогда
				
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Попытка
					СчетФактураОбъект.Заблокировать();
					СтруктураПоиска = Новый Структура("ДокументОснование", Объект.Ссылка);
					СтрокиСОснованием = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаСОснованием Из СтрокиСОснованием Цикл
						СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаСОснованием);
					КонецЦикла; 
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					СчетФактура = Неопределено;
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"), СчетФактура);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТЧ из Объект.Товары Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Объект.Услуги Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Объект.АгентскиеУслуги Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		И Корректировать = 2 Тогда
		
		ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		
		// Формирование надписи "Счет-фактура"
		Если ЭтоОтгрузка Тогда
			ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
		Иначе
			ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.ДокументРеализации, Объект.ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Функция ОрганизацияПриИзмененииСервер()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	ПричиныИзмененияСчетовУчета.Добавить("Организация");

	УстановитьФункциональныеОпцииФормы();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.БанковскийСчетОрганизации, Объект.Организация, ВалютаРегламентированногоУчета);
	ДокументРеализацииПриИзмененииСервер(ПричиныИзмененияСчетовУчета);
	ЗаполнитьРеквизитыФормы();
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета("Организация", ПричиныИзмененияСчетовУчета) Тогда
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполненияСчетовУчета);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Функция ДокументРеализацииПриИзмененииСервер(ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("ДокументРеализации");

	ОбъектЗначение = РеквизитФормыВЗначение("Объект");

	ОбъектЗначение.ЗаполнитьСвойстваШапки();

	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ЗаполнитьРеквизитыФормы();

	ДоступнаКорректировкаБУиНУ = Документы.КорректировкаРеализации.ДоступнаКорректировкаБУиНУ(Объект.ДокументРеализации);
	
	Объект.КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ;
	Объект.КорректироватьНДС = Истина;
	Корректировать = ?(Объект.КорректироватьБУиНУ,1,?(Объект.КорректироватьНДС,0,2));
	
	Если ЗначениеЗаполнено(ДокументРеализацииСсылка) 
		И Год(ДатаДокументаРеализации) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.ДокументРеализации, Объект.ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
		
	ДоговорУказан 		= ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	ВидДоговора		 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	ЭтоКомиссия 		= ДоговорУказан И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоОтгрузка 		= ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И 
		Объект.ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
						
	// Формирование надписи "Счет-фактура"
	Если Корректировать = 2 Тогда
		ТребуетсяСчетФактура = Ложь;
	ИначеЕсли ЭтоОтгрузка Тогда
		ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗнч(Объект.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный");
	КонецЕсли;	
		
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета("ДокументРеализации", ПричиныИзмененияСчетовУчета) Тогда
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполненияСчетовУчета);
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ДокументРеализацииОбработкаВыбораСервер(Знач Документ, Знач ВыбранноеЗначение, Знач ВидОперации, Знач ВалютаРегламентированногоУчета)

	ПараметрыОбработки = Новый Структура("ПредупреждениеОбОшибке");

	Если Документ.Ссылка = ВыбранноеЗначение Тогда
		ПараметрыОбработки.ПредупреждениеОбОшибке = НСтр("ru = 'Нельзя выбирать в качестве корректируемого документа этот же документ'");
		Возврат(ПараметрыОбработки);
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И
		ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(ВыбранноеЗначение) Тогда
		
			ПараметрыОбработки.ПредупреждениеОбОшибке =
					НСтр("ru = 'В отчете комиссионера указан покупатель, отличный от комиссионера. 
								|В этом случае в качестве основания следует указывать счет-фактуру покупателя!'");
			Возврат(ПараметрыОбработки);
		
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение, "ДокументОснование,ВидСчетаФактуры, 
																							 |Контрагент, Продавец, ДоговорКонтрагента");
		
		ЭтоСчетФактураНаАванс = 
			(СтруктураРеквизитов.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ СтруктураРеквизитов.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
			
		Если ЭтоСчетФактураНаАванс Тогда
			ПараметрыОбработки.ПредупреждениеОбОшибке =
				НСтр("ru = 'В качестве основания можно выбрать только счет-фактуру, введенный на основании документов ""Оказание услуг"", ""Отчета комитенту (принципалу)"" или ""Отчет комиссионера (агента) о продажах""!'");
			
			Возврат(ПараметрыОбработки);		
		КонецЕсли;	
		
		ДокументОснование = СтруктураРеквизитов.ДокументОснование;
			
		ЭтоОтчетКомиссионера 	= ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
		ЭтоОтчетКомитенту 		= ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
		
		Если ЭтоОтчетКомиссионера Тогда

			ОтчетКомиссионераЗаполненПоНовому = ЗначениеЗаполнено(ДокументОснование) И ЭтоОтчетКомиссионера
				И НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(ДокументОснование);

			Если НЕ ОтчетКомиссионераЗаполненПоНовому Тогда
				ВыбранноеЗначение = ДокументОснование;
			КонецЕсли;
			
		ИначеЕсли ЭтоОтчетКомитенту Тогда
		
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВидОперации");
		
			Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
				// В качестве корректируемого документа выступает сам отчет комитенту.
				ВыбранноеЗначение =  ДокументОснование;
			Иначе
				// В случае отчета о закупках - если счет-фактура на вознаграждение, то документом основания является сам отчет комитента
				Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.Продавец)
					ИЛИ СтруктураРеквизитов.Продавец = СтруктураРеквизитов.Контрагент Тогда
					ВыбранноеЗначение = ДокументОснование;
				КонецЕсли;
			КонецЕсли;			
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(ДокументОснование)
			ИЛИ ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОказаниеУслуг")) Тогда
			
			ПараметрыОбработки.ПредупреждениеОбОшибке =
				НСтр("ru = 'В качестве основания можно выбрать только счет-фактуру, введенный на основании документов ""Оказание услуг"", ""Отчета комитенту (принципалу)"" или ""Отчет комиссионера (агента) о продажах""!'");
			
			Возврат(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;

	ДокументСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ВыбранноеЗначение, Ложь);

	ПоследнийДокумент = Документы.КорректировкаРеализации.ПолучитьПоследнийКорректирующийДокумент(Документ, ДокументСсылка);
	Если ВыбранноеЗначение <> ПоследнийДокумент Тогда
		ПараметрыОбработки.Вставить("ВопросИспользоватьПоследнююКорректировку", Истина);
		ПараметрыОбработки.Вставить("ПоследняяКорректировка", ПоследнийДокумент);
	КонецЕсли;
	
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейОтгруженныхТоваров(ВыбранноеЗначение) Тогда
		РеквизитыВыбранногоЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ДокументОтгрузки"),
			Новый Структура("ВалютаДокумента, ДоговорКонтрагента, ДоговорВУЕ",
				"ВалютаДокумента", "ДоговорКонтрагента", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах"));
	Иначе
		РеквизитыВыбранногоЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВыбранноеЗначение,
			Новый Структура("ВалютаДокумента, ДоговорКонтрагента, ДоговорВУЕ",
				"ВалютаДокумента", "ДоговорКонтрагента", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах"));
	КонецЕсли;

	Возврат(ПараметрыОбработки);

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	ДанныеОбъекта.Вставить("Реализация", Истина);
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь, Истина);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
	// Дополнительно устанавливаем ставку 0%.
	Если ДанныеОбъекта.РеализацияВЕАЭС
		И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 Тогда
		СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
		И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 Тогда 
		// Если покупатель исполняет обязанности налогового агента, то устанавливаем общую ставку НДС и очищаем сумму НДС.
		СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДанныеОбъекта.Дата);
		СтрокаТабличнойЧасти.СуммаНДС  = 0;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Если НЕ (ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
		И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335) Тогда 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	КонецЕсли;
	
	Если Не ДанныеОбъекта.КорректироватьБУиНУ Тогда
		СтрокаТабличнойЧасти.ЦенаДоИзменения                = СтрокаТабличнойЧасти.Цена;
		СтрокаТабличнойЧасти.НомерГТДДоИзменения            = СтрокаТабличнойЧасти.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхожденияДоИзменения = СтрокаТабличнойЧасти.СтранаПроисхождения;
		СтрокаТабличнойЧасти.СуммаДоИзменения               = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения            = СтрокаТабличнойЧасти.СуммаНДС;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения           = СтрокаТабличнойЧасти.СтавкаНДС;
		СтрокаТабличнойЧасти.КодТНВЭДДоИзменения            = СтрокаТабличнойЧасти.КодТНВЭД;
		Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
			СтрокаТабличнойЧасти.ЦенаДоКорректировки		= СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаДоКорректировки  		= СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСДоКорректировки	= СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаРеализации,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	ДанныеОбъекта.Вставить("Реализация", Истина);
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь, Истина);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Если Не ДанныеОбъекта.КорректироватьБУиНУ Тогда
		СтрокаТабличнойЧасти.СодержаниеДоИзменения			= СтрокаТабличнойЧасти.Содержание;
		СтрокаТабличнойЧасти.ЦенаДоИзменения				= СтрокаТабличнойЧасти.Цена;
		СтрокаТабличнойЧасти.СуммаДоИзменения  				= СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения			= СтрокаТабличнойЧасти.СуммаНДС;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 			= СведенияОНоменклатуре.СтавкаНДС;
		Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
			СтрокаТабличнойЧасти.ЦенаДоКорректировки		= СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаДоКорректировки  		= СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСДоКорректировки	= СтрокаТабличнойЧасти.СуммаНДС;			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаРеализации,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре	= БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь, Истина);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	Если Не ДанныеОбъекта.КорректироватьБУиНУ Тогда
		СтрокаТаблицы.СодержаниеДоИзменения			= СтрокаТаблицы.Содержание;
		СтрокаТаблицы.ЦенаДоИзменения				= СтрокаТаблицы.Цена;
		СтрокаТаблицы.СуммаДоИзменения  			= СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СуммаНДСДоИзменения			= СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СтавкаНДСДоИзменения 			= СтрокаТаблицы.СтавкаНДС;
		Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
			СтрокаТаблицы.ЦенаДоКорректировки		= СтрокаТаблицы.Цена;
			СтрокаТаблицы.СуммаДоКорректировки  	= СтрокаТаблицы.Сумма;
			СтрокаТаблицы.СуммаНДСДоКорректировки	= СтрокаТаблицы.СуммаНДС;			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ТабличнаяЧасть, СуффиксПоля)

	СтрокаТабличнойЧасти = Элементы[ТабличнаяЧасть].ТекущиеДанные;

	СтрокаТаблицы = Новый Структура("Количество, Цена, Сумма, СуммаНДС, Всего", 0, 0, 0, 0, 0);
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТаблицы[Поле.Ключ] = СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля];
	КонецЦикла;

	ЗначениеПустогоКоличества = ?(ТабличнаяЧасть = "Услуги" ИЛИ ТабличнаяЧасть = "АгентскиеУслуги", 1, 0);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	Если ПокупательНалоговыйАгентПоНДС = Истина
		И ВедетсяУчетНДСПоФЗ335 Тогда 
		СтрокаТаблицы.Вставить("СтавкаНДС", СтавкаНДСИсчисляетсяНалоговымАгентом);
		СтрокаТаблицы.СуммаНДС = 0;
	Иначе
		СтрокаТаблицы.Вставить("СтавкаНДС", ?(Объект.ВидОперации =
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
			И СуффиксПоля <> "", СтрокаТабличнойЧасти.СтавкаНДСДоИзменения, СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

	СтрокаТаблицы.Удалить("СтавкаНДС");
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля] = Поле.Значение;
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ТабличнаяЧасть, СуффиксПоля)

	СтрокаТабличнойЧасти = Элементы[ТабличнаяЧасть].ТекущиеДанные;

	СтрокаТаблицы = Новый Структура("Количество, Цена, Сумма, СуммаНДС, Всего", 0, 0, 0, 0, 0);
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТаблицы[Поле.Ключ] = СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля];
	КонецЦикла;
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		СтрокаТаблицы.Цена = ?(ТабличнаяЧасть = "Услуги" ИЛИ ТабличнаяЧасть = "АгентскиеУслуги", СтрокаТаблицы.Сумма, 0);
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
	Если ПокупательНалоговыйАгентПоНДС = Истина
		И ВедетсяУчетНДСПоФЗ335 Тогда
		СтрокаТаблицы.Вставить("СтавкаНДС", СтавкаНДСИсчисляетсяНалоговымАгентом);
		СтрокаТаблицы.СуммаНДС = 0;
	Иначе
		СтрокаТаблицы.Вставить("СтавкаНДС", ?(Объект.ВидОперации =
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
			И СуффиксПоля <> "", СтрокаТабличнойЧасти.СтавкаНДСДоИзменения, СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	СтрокаТаблицы.Удалить("СтавкаНДС");
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля] = Поле.Значение;
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ТабличнаяЧасть, СуффиксПоля)

	СтрокаТабличнойЧасти = Элементы[ТабличнаяЧасть].ТекущиеДанные;

	СтрокаТаблицы = Новый Структура("Сумма, СуммаНДС, Всего", 0, 0, 0);
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТаблицы[Поле.Ключ] = СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля];
	КонецЦикла;

	Если ПокупательНалоговыйАгентПоНДС = Истина
		И ВедетсяУчетНДСПоФЗ335 Тогда
		СтрокаТаблицы.Вставить("СтавкаНДС", СтавкаНДСИсчисляетсяНалоговымАгентом);
		СтрокаТаблицы.СуммаНДС = 0;
	Иначе
		СтрокаТаблицы.Вставить("СтавкаНДС", ?(Объект.ВидОперации =
			ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
			И СуффиксПоля <> "", СтрокаТабличнойЧасти.СтавкаНДСДоИзменения, СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

	СтрокаТаблицы.Удалить("СтавкаНДС");
	Для Каждого Поле Из СтрокаТаблицы Цикл
		СтрокаТабличнойЧасти[Поле.Ключ+СуффиксПоля] = Поле.Значение;
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыНДС(ТабличнаяЧасть, СуффиксПоля)

	СтрокаТабличнойЧасти = Элементы[ТабличнаяЧасть].ТекущиеДанные;
	СтрокаТабличнойЧасти["Всего"+СуффиксПоля] = СтрокаТабличнойЧасти["Сумма"+СуффиксПоля]
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти["СуммаНДС"+СуффиксПоля]);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиКонтрагентПриИзмененииСервер(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,
		СтрокаТабличнойЧасти.Контрагент, ДанныеОбъекта.Организация, МассивВидовАгентскихДоговоров);
		
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаРеализации,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"АгентскиеУслуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);

КонецПроцедуры

&НаСервере
Процедура УстановитьДокументРеализации(НовыйДокументРеализации)
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	Объект.ДокументРеализации = НовыйДокументРеализации;
	
	ДокументРеализацииПриИзмененииСервер(ПричиныИзмененияСчетовУчета);
	
	Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(Объект);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыНомерГТДЗавершение", 
		ЭтотОбъект, Новый Структура("Форма", ЭтотОбъект));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ВозможностьСозданияСчетаФактуры(ДокументРеализации)
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		Возврат Истина;	
	КонецЕсли;

	ПодчиненныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументРеализации);
	
	Если ПодчиненныйСчетФактура <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)

	ПриИзмененииДаты();

КонецПроцедуры      

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, СтруктураПредставленияДокумента)
	
	Форма.Заголовок = СтруктураПредставленияДокумента.ПредставлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнююКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументРеализации = ДополнительныеПараметры.ПоследняяКорректировка;
	Иначе
		Объект.ДокументРеализации = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	ДокументРеализацииПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуНаСервере();
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзмененииНаКлиенте()

	Если НЕ ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;	
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	ДокументРеализацииПриИзмененииСервер(ПричиныИзмененияСчетовУчета);

	Если Объект.КорректироватьБУиНУ Тогда
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.АгентскиеУслуги.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Заполнить документ по основанию?'");
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьПоДокументуНаСервере();
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриОткрытииПоследняяКорректировкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДокументРеализации(ПоследнийДокументИсправления);
		ПоследнийДокументИсправления = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуНаСервере();
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
		Корректировать = 0;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходов");
	ЭлементыСчетов.Добавить("ТоварыСубконто");
	ЭлементыСчетов.Добавить("ТоварыСчетРасходов");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("УслугиСчетДоходов");
	ЭлементыСчетов.Добавить("УслугиСубконто");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("УслугиСчетРасходов");
	ЭлементыСчетов.Добавить("АгентскиеУслугиСчетРасчетов");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"КорректировкаРеализации",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
	КонецЕсли;

	// Товары.СчетУчета
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
	КонецЕсли;

	// ДокументРеализации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДокументРеализации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.ПереданныеСчетУчета");
	КонецЕсли;

	// Товары.СчетДоходов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасходов");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
	КонецЕсли;

	// Услуги.СчетДоходов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетРасходов");
	КонецЕсли;

	// АгентскиеУслуги.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// АгентскиеУслуги.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
		КонецЕсли;


		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Товары.СчетУчета
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
		КонецЕсли;

		// ДокументРеализации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДокументРеализации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПереданныеСчетУчета");
		КонецЕсли;

		// Товары.СчетДоходов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// Услуги.СчетДоходов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДокументРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасходов");
		КонецЕсли;

		// АгентскиеУслуги.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// АгентскиеУслуги.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции
	
#КонецОбласти 

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	Объект.ЗаРуководителяНаОсновании = ПолучитьОснованиеПраваПодписиФизЛица(Объект.Руководитель,объект.Организация,Объект.дата);
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	Объект.ЗаГлавногоБухгалтераНаОсновании = ПолучитьОснованиеПраваПодписиФизЛица(Объект.ГлавныйБухгалтер,объект.Организация,Объект.дата);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОснованиеПраваПодписиФизЛица(ФизическоеЛицо,Организация,ДатаОтбор)
                                                                    
	Возврат Справочники.ОснованияПраваПодписи.ОснованиеПраваПодписиФизЛица(ФизическоеЛицо,Организация,ДатаОтбор);
	    
КонецФункции

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти