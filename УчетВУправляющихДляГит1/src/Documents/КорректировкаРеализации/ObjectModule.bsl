#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСвойстваШапки() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	ИсходныйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе	
		ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	
	Документы.КорректировкаРеализации.УстановитьСчетаУчетаРасчетов(ЭтотОбъект, ИсходныйДокументРеализации);
	
	Если ЗначениеЗаполнено(ИсходныйДокументРеализации) Тогда
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ИсходныйДокументРеализации);
		
		Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда 
			
			РасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокументРеализации, "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
			Если РасчетыВУсловныхЕдиницах Тогда 
				ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			КонецЕсли;
			
		КонецЕсли;
		// Если в качестве корректируемого документа выбран счет-фактура выданный, то 
		// в корректировку реализации реквизиты СуммаВключаетНДС, ТипЦен 
		// необходимо из основания счета-фактуры.
		Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокументРеализации, "ДокументОснование");
			Если ЗначениеЗаполнено(РеквизитыСФ.ДокументОснование) Тогда
				МетаданныеДокументаОснования = РеквизитыСФ.ДокументОснование.Метаданные();
				СписокРеквизитов = "";
				
				// ТипЦен.
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокументаОснования) Тогда
					СписокРеквизитов = СписокРеквизитов + ", ТипЦен";
				КонецЕсли;

				// СуммаВключаетНДС.
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
					СписокРеквизитов = СписокРеквизитов + ", СуммаВключаетНДС";
				КонецЕсли;

				СписокРеквизитов = Сред(СписокРеквизитов, 3);
				Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
					РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСФ.ДокументОснование, СписокРеквизитов);
					
					Для Каждого Реквизит Из РеквизитыДокументаОснования Цикл
						ЭтотОбъект[Реквизит.Ключ] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, ВидОперацииЗаполнения = Неопределено) Экспорт

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) <> Тип("Структура") Тогда
		ДокументСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
	
		Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(Основание) Тогда
			
			ЭтотОбъект.Организация = Основание.Организация;
			ТекстСообщения = 
				НСтр("ru='В отчете комиссионера указан покупатель, отличный от комиссионера. 
					|В этом случае в качестве основания следует указывать счет-фактуру покупателя!'");
			ВызватьИсключение ТекстСообщения;
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.Организация = Основание.Организация;
	ЭтотОбъект.ДокументРеализации = Основание;
	ЗаполнитьСвойстваШапки();
	Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(ЭтотОбъект);
	ЭтотОбъект.КорректироватьБУиНУ = Документы.КорректировкаРеализации.ДоступнаКорректировкаБУиНУ(ЭтотОбъект.ДокументРеализации);
	ЭтотОбъект.КорректироватьНДС = Истина;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Грузоотправитель, Грузополучатель, ОтпускПроизвел, СопроводительныеДокументы");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), ДокументРеализации, ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);
	
	Если КорректироватьБУиНУ Тогда
		ДокументРеализацииСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		
		РеквизитыДокументаРеализации = Неопределено;
		Если ЗначениеЗаполнено(ДокументРеализацииСсылка) Тогда
			РеквизитыДокументаРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализацииСсылка, "Дата");
		КонецЕсли;
		ДатаДокументаРеализации	= ?(РеквизитыДокументаРеализации <> Неопределено, РеквизитыДокументаРеализации.Дата, '00010101');
		
		Если ЗначениеЗаполнено(ДокументРеализацииСсылка) 
			И Год(ДатаДокументаРеализации) < Год(Дата) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтатьяПрочихДоходовИРасходов) Тогда
				СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.ДокументОснование, ВидОперацииЗаполнения);	
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	ПризнаватьЗачитыватьАванс = Истина;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПредставлениеНомера();
	
	ЗаполнитьСвойстваШапки();
	ОбработатьСуммыДокорректировки();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");
	
	ДоговорУказан 		= ЗначениеЗаполнено(ДоговорКонтрагента);
	ВидДоговора		 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ЭтоКомиссия 		= ДоговорУказан И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоОтгрузка 		= ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И 
						ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
						
	Если НЕ (КорректироватьБУиНУ ИЛИ КорректироватьНДС) Тогда
		ТребуетсяСчетФактура = Ложь;
	ИначеЕсли ЭтоОтгрузка Тогда
		ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Организация, Дата);
	Иначе
		ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия
			ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный");
	КонецЕсли;
		
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
		
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект);
	Если Не ТребуетсяСчетФактура Тогда 	
		ПараметрыДействия.СостояниеФлага = Истина;
	КонецЕсли;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
	Если НЕ (ДополнительныеСвойства.Свойство("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах") 
		И ДополнительныеСвойства.ПропуститьОбновлениеРеквизитовВСвязанныхДокументах = Истина) Тогда
		Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Если покупатель исполняет обязанности налогового агента, то очистим сумму НДС.
	ВедетсяУчетНДСПоФЗ335         = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
	ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	
	Если ПокупательНалоговыйАгентПоНДС = Истина
		И ВедетсяУчетНДСПоФЗ335 Тогда 
		Услуги.Очистить();
		АгентскиеУслуги.Очистить();
		Для каждого СтрокаТаблицы Из Товары Цикл
			СтрокаТаблицы.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
			СтрокаТаблицы.СуммаНДС = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
	
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);		
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	ЭтоКомиссия             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
	РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Дата);
	КонтролироватьЗаполнениеКодаТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	//Проверяем на то, что нет других исправлений к этому основанию
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
		|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаРеализации.Ссылка <> &Ссылка
		|	И КорректировкаРеализации.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.Дата УБЫВ";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='К документу %1 введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
					|Каждую последующую корректировку следует вводить на основании предыдущей.'"),
					ДокументРеализации);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , "Объект");
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем корректность заполнения реквизитов шапки:
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
	КонецЕсли;
	
	// Получаем содержимое табличных частей объекта с вспомогательными реквизитами:
	СтруктураРезультатов = Новый Структура;
	ТаблицыДокумента =  ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов);
	
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодТНВЭД");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодТНВЭДДоИзменения");
	
	// Проверяем табличную часть "Товары":
	Если Товары.Количество() > 0 Тогда

		ВыборкаТоваров = ТаблицыДокумента[СтруктураРезультатов.Товары].Выбрать();
		ИмяСписка = НСтр("ru = 'Товары'");
		Пока ВыборкаТоваров.Следующий() Цикл

			Префикс = "Товары[" + Формат(ВыборкаТоваров.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			// Проверка кода ТН ВЭД.
			Если КонтролироватьЗаполнениеКодаТНВЭД 
				И ВыборкаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
				И НЕ ЗначениеЗаполнено(ВыборкаТоваров.КодТНВЭД) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
					ВыборкаТоваров.НомерСтроки, ИмяСписка);
				Поле = Префикс + "КодТНВЭД";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;

	// Эти реквизиты проверяются в документе с помощью специального, нетипового механизма. Проверка размещена в ПроверитьЗаполнениеСубконто()
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.Субконто");
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если НЕ СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
	
		ПроверитьЗаполнениеСубконто(Отказ);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСубконто(Отказ)
	
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект, 
		"СчетДоходов", 
		"Субконто", 
		НСтр("ru = 'Субконто'"), 
		"Товары", 
		НСтр("ru = 'Товары'"), 
		Отказ);
			
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект,
		"СчетДоходов",
		"Субконто",
		НСтр("ru = 'Субконто'"),
		"Услуги",
		НСтр("ru = 'Услуги'"),
		Отказ);
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	// Принудительная очистка движений, т.к. движения документа могут быть сформированы задним числом.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	// Далее вызов ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей() не требуется,
	// т.к. был передан параметр ВыборочноОчищатьРегистры = Ложь, и все действия уже выполнены.
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.КорректировкаРеализации.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроведения = Неопределено Тогда
		// В текущем виде документ не требуется проводить по регистрам (например, он был введен только для печатной формы),
		// но, возможно, что он ранее был проведен с другими данными и отражался в последовательности.
		// Чтобы теперь он не мешал последовательности, исключим его.
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(ЭтотОбъект, Отказ, Истина);
		УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(ЭтотОбъект, Отказ);
		Возврат;
	КонецЕсли;
	
	// Таблицы взаиморасчетов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	ТаблицаВзаиморасчетыВозврат = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ВыделениеАвансаРеквизиты, Отказ);
		
	ТаблицаВзаиморасчетыДляУСНиИП = ТаблицаВзаиморасчеты.Скопировать();
		
	ТаблицаВзаиморасчеты = Документы.КорректировкаРеализации.ПодготовитьТаблицыАвансовОплат(ТаблицаВзаиморасчеты, ПараметрыПроведения.РеализацияРеквизиты);
	
	ТаблицаВзаиморасчетыВозврат = Документы.КорректировкаРеализации.ПодготовитьТаблицуВыделениеАвансов(ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.РеализацияРеквизиты, ПараметрыПроведения.СторноРеализацияТаблицаДокумента, ПараметрыПроведения.РеализацияТаблицаДокумента);
	
	ТаблицаДокументаРеализацииПоКурсуАвансов = Документы.КорректировкаРеализации.ПодготовитьТаблицуДокументаПоКурсуАвансов(ПараметрыПроведения.РеализацияРеквизиты, ПараметрыПроведения.СторноРеализацияТаблицаДокумента, ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты);	
	
	// Таблица возвращенных товаров
	ТаблицаВозвращенныеТовары = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
		ПараметрыПроведения.ВозвратТоваровТаблицаТовары,
		ПараметрыПроведения.ВозвратТоваровСчетаУчета,
		ПараметрыПроведения.ВозвратТоваровНоменклатура,
		ПараметрыПроведения.ВозвратТоваровРеквизиты, Отказ);
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТоварыСУчетомВозврата(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ТаблицаВозвращенныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	// Таблица возвращенных товаров для отражения в УСН: отберем только нужные данные, запомним в новую таблицу до вызова сторнирования
	ТаблицаВозвращенныеТоварыУСН = Документы.КорректировкаРеализации.ПодготовитьТаблицуВозвращенныеТоварыУСН(
		ТаблицаВозвращенныеТовары, ПараметрыПроведения.УСНРеквизиты);
		
	// Таблица товаров, не попавших таблицы списания или возврата
	ТаблицаТоварыКомитента = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
		ПараметрыПроведения.ПартииКомитентовТаблицаТовары,
		ПараметрыПроведения.ПартииКомитентовСчетаУчета,
		ПараметрыПроведения.ПартииКомитентовНоменклатура,
		ПараметрыПроведения.ПартииКомитентовРеквизиты, Отказ);
		
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтКорректировкиРеализации(
		ТаблицаДокументаРеализацииПоКурсуАвансов, ТаблицаСписанныеТовары, ТаблицаТоварыКомитента,
		ПараметрыПроведения.РеализацияРеквизиты, Отказ);
		
	ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;
	ТаблицаСобственныеТоварыУслуги       = ТаблицыРеализация.СобственныеТоварыУслуги;
	ТаблицаТоварыУслугиКомитентов        = ТаблицыРеализация.ТоварыУслугиКомитентов;
	
	// Таблицы сторно выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыСторноРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтКорректировкиРеализации(
		ПараметрыПроведения.СторноРеализацияТаблицаДокумента, ТаблицаВозвращенныеТовары, ТаблицаТоварыКомитента,
		ПараметрыПроведения.РеализацияРеквизиты, Отказ);
	
	ТаблицаСторноСобственныеТоварыУслуги       = ТаблицыСторноРеализация.СобственныеТоварыУслуги;
	ТаблицаСторноТоварыУслугиКомитентов        = ТаблицыСторноРеализация.ТоварыУслугиКомитентов;
	ТаблицаСторноРеализованныеТоварыКомитентов = ТаблицыСторноРеализация.РеализованныеТоварыКомитентов;
	
	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ТаблицаСобственныеТоварыУслуги);
	
	Документы.КорректировкаРеализации.ПроставитьСторноТаблиц(ТаблицаВозвращенныеТовары, ТаблицаСторноСобственныеТоварыУслуги,
		ТаблицаСторноТоварыУслугиКомитентов, ТаблицаСторноРеализованныеТоварыКомитентов, ПараметрыПроведения.ВозвратТоваровРеквизиты);
	
	ТаблицаСписанныеТоварыПоПериодам = Документы.КорректировкаРеализации.ПодготовитьТаблицуСписанныеТоварыПоПериодам(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
		
	СтруктураВыручкиУСН = Документы.КорректировкаРеализации.ПодготовитьСтруктуруВыручкиПоВидамДеятельности(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов,
		ТаблицаСторноСобственныеТоварыУслуги, ТаблицаСторноТоварыУслугиКомитентов,
		ПараметрыПроведения.УСНРеквизиты);
		
	ТаблицаРасходыУСННаВозвратПоСделке = Документы.КорректировкаРеализации.ПодготовитьТаблицуРасходыУСННаВозвратПоСделке(
		ТаблицаВозвращенныеТовары, ПараметрыПроведения.УСНРеквизиты);
		
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура;
	//"УСНРеквизиты, ТаблицаРеализации, ТаблицаВозврат, ТаблицаРасчетов", ТаблицаСписанныеТовары, ТаблицаВзаиморасчеты
	СтруктураТаблицУСН.Вставить("УСНРеквизиты", ПараметрыПроведения.УСНРеквизиты);
	СтруктураТаблицУСН.Вставить("ТаблицаРеализация", ТаблицаСписанныеТовары);
	СтруктураТаблицУСН.Вставить("ТаблицаВозврат", ТаблицаВозвращенныеТоварыУСН);
	СтруктураТаблицУСН.Вставить("ТаблицаРасходыУСНПоСделке", ТаблицаРасходыУСННаВозвратПоСделке);
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов", ТаблицаВзаиморасчеты);
	СтруктураТаблицУСН.Вставить("Выручка", СтруктураВыручкиУСН);
	
	// Учет доходов и расходов ИП
	СписанныеМПЗ = Документы.КорректировкаРеализации.ПодготовитьТаблицуСписанныеМПЗИП(
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.РеализацияРеквизитыИП);
	ВозвращенныеМПЗ = Документы.КорректировкаРеализации.ПодготовитьТаблицуСписанныеМПЗИП(
		ТаблицаВозвращенныеТовары, ПараметрыПроведения.СторноРеализацияТаблицаДокумента, ПараметрыПроведения.РеализацияРеквизитыИП, Истина);
	
	ТаблицыКорректировкиСписанияИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыКорректировкиСписанияМПЗ(
		СписанныеМПЗ, ВозвращенныеМПЗ, ПараметрыПроведения.РеализацияРеквизитыИП);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыКорректировкиСписанияИП.СписанныеМПЗ, ПараметрыПроведения.РеализацияРеквизитыИП, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТоварыПоПериодам, 
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияКорректировкаПоступлениеТоваров(ТаблицаВозвращенныеТовары, 
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРеализацияКорректировка(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ТаблицаСторноСобственныеТоварыУслуги, ТаблицаСторноТоварыУслугиКомитентов, ТаблицаСторноРеализованныеТоварыКомитентов,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	Документы.КорректировкаРеализации.СформироватьДвиженияВыделениеАванса(
		ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.ВыделениеАвансаРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	// Рублевые суммы документов в валюте
	
	ТаблицаРублевыеСуммыДокументовВВалюте = Документы.КорректировкаРеализации.ПодготовитьТаблицуДляПроведенияПоРублевымСуммам(
		ПараметрыПроведения.РеализацияРеквизиты,
		ТаблицаСобственныеТоварыУслуги,
		ТаблицаТоварыУслугиКомитентов, 
		ТаблицаСторноСобственныеТоварыУслуги, 
		ТаблицаСторноТоварыУслугиКомитентов, 
		ПараметрыПроведения.РублевыеСуммыДокументовВВалюте);
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(
		ТаблицаРублевыеСуммыДокументовВВалюте,
		ПараметрыПроведения.РеквизитыРублевыеСуммыДокументыВВалюте, 
		Движения, Отказ);
		
	// НДС
		
	СтруктураТаблицНДСПоКурсуАванса = Документы.КорректировкаРеализации.ТаблицыНДСПоКурсуАванса(
		ПараметрыПроведения.НДСНачисление,
		ПараметрыПроведения.НДСТоварыУслуги,
		ПараметрыПроведения.НДСВосстановление,
		ТаблицаРублевыеСуммыДокументовВВалюте,
		ПараметрыПроведения.РеализацияРеквизиты);
		
	УчетНДС.СформироватьДвиженияКорректировкиРеализацияТоваровУслуг(
		СтруктураТаблицНДСПоКурсуАванса,
		ПараметрыПроведения,
		Движения,
		Отказ);
		
	УчетНДСРаздельный.СформироватьДвиженияКорректировкиРеализацияТоваровУслуг(ПараметрыПроведения.НДСТоварыРеализация,
		ТаблицаСписанныеТоварыПоПериодам, ТаблицаВозвращенныеТовары, ПараметрыПроведения.НДСРеквизиты, Движения, Отказ);
		
	// УСН
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияКорректировкиСписанияМПЗ(
		ТаблицыКорректировкиСписанияИП, ТаблицаВзаиморасчетыДляУСНиИП, ПараметрыПроведения.РеализацияРеквизитыИП, Движения, Отказ);
	
	ТаблицаИПМПЗОтгруженныеТовары = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП, ПараметрыПроведения.РеализацияРеквизитыИП, Движения, Отказ);
	
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицыКорректировкиСписанияИП.ОказанныеУслуги, ПараметрыПроведения.РеализацияРеквизитыИП, Движения, Отказ);
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеТовары, ТаблицаИПМПЗОтгруженные);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчетыДляУСНиИП, ПараметрыПроведения.РеализацияРеквизитыИП, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);	
		
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценкаДвиженийДокумента,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);

	// Регистрация в последовательности
	Документы.КорректировкаРеализации.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, ПараметрыПроведения, ТаблицаСписанныеТовары, Отказ);

	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект);
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьСуммыДокорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументРеализации) И (ТипЗнч(ИсправляемыйДокументРеализации) = 
		Тип("ДокументСсылка.КорректировкаРеализации")) И (ИсправляемыйДокументРеализации.ВидОперации = 
		Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		АгентскиеУслуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		Для Каждого СтрокаТЧ из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из АгентскиеУслуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция готовит пакетный запрос для ОбработкиПроверкиЗаполнения.
//	Табличные части объекта (еще не сохраненного в информационной базе) выгружаются во временные таблицы,
//	соединяются с другими нужными талицами.
//
//Параметры:
//	СтруктураРезультатов - <Структура> - описание пакета запросов. Ключ - имя результата запроса, значение - индекс этого результата
//
//Возвращает массив результатов запроса
Функция ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов)

	Запрос = Новый Запрос;
	СчетаВыручкиЕНВД  = БухгалтерскийУчетПовтИсп.СчетаВыручкиЕНВД();
	СчетаРасходовЕНВД = БухгалтерскийУчетПовтИсп.СчетаРасходовЕНВД();
	СчетаВыручкиИРасходовЕНВД = ОбщегоНазначенияБПВызовСервера.ПолучитьКопиюКоллекции(СчетаВыручкиЕНВД);
	Для Каждого СчетРасхода Из СчетаРасходовЕНВД Цикл
		СчетаВыручкиИРасходовЕНВД.Добавить(СчетРасхода);
	КонецЦикла;
	Запрос.УстановитьПараметр("СчетаЕНВД", СчетаВыручкиИРасходовЕНВД);

	Запрос.Текст = "";

	Если Товары.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаТовары", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Товары", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Количество,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.СчетУчета,
		|	ВремТаблица.СчетДоходов,
		|	ВремТаблица.Субконто,
		|	ВремТаблица.СчетУчетаНДСПоРеализации,
		|	ВремТаблица.СчетРасходов,
		|	ВремТаблица.ЕстьВДокументеРеализации,
		|	ВремТаблица.СтранаПроисхождения,
		|	ВремТаблица.НомерГТД,
		|	ВремТаблица.КодТНВЭД
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВремТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВремТаблица.Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.СчетУчета,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
		|	ТаблицаДокумента.СчетДоходов,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетДоходов.Забалансовый, ЛОЖЬ) КАК СчетДоходовЗабалансовый,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СчетДоходов В (&СчетаЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СчетДоходовЕНВД,
		|	ТаблицаДокумента.Субконто,
		|	ТаблицаДокумента.СчетУчетаНДСПоРеализации,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетУчетаНДСПоРеализации.Забалансовый, ЛОЖЬ) КАК СчетУчетаНДСПоРеализацииЗабалансовый,
		|	ТаблицаДокумента.СчетРасходов,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетРасходов.Забалансовый, ЛОЖЬ) КАК СчетРасходовЗабалансовый,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СчетРасходов В (&СчетаЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СчетРасходовЕНВД,
		|	ТаблицаДокумента.ЕстьВДокументеРеализации,
		|	ТаблицаДокумента.СтранаПроисхождения,
		|	ТаблицаДокумента.НомерГТД,
		|	ТаблицаДокумента.КодТНВЭД
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
	КонецЕсли;

	Если Услуги.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаУслуги", Услуги.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаУслуги", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Услуги", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.ЕстьВДокументеРеализации,
		|	ВремТаблица.СчетДоходов,
		|	ВремТаблица.Субконто,
		|	ВремТаблица.СчетУчетаНДСПоРеализации,
		|	ВремТаблица.СчетРасходов
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ &ТаблицаУслуги КАК ВремТаблица
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.ЕстьВДокументеРеализации,
		|	ТаблицаДокумента.СчетДоходов,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетДоходов.Забалансовый, ЛОЖЬ) КАК СчетДоходовЗабалансовый,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СчетДоходов В (&СчетаЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СчетДоходовЕНВД,
		|	ТаблицаДокумента.Субконто,
		|	ТаблицаДокумента.СчетУчетаНДСПоРеализации,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетУчетаНДСПоРеализации.Забалансовый, ЛОЖЬ) КАК СчетУчетаНДСПоРеализацииЗабалансовый,
		|	ТаблицаДокумента.СчетРасходов,
		|	ЕСТЬNULL(ТаблицаДокумента.СчетРасходов.Забалансовый, ЛОЖЬ) КАК СчетРасходовЗабалансовый,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СчетРасходов В (&СчетаЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СчетРасходовЕНВД
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
	КонецЕсли;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура УстановитьПредставлениеНомера() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ЭтотОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	Если НЕ (ДополнительныеСвойства.Свойство("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах") 
		И ДополнительныеСвойства.ПропуститьОбновлениеРеквизитовВСвязанныхДокументах = Истина) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			ИсправлениеКорректировки = ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
			Если ИсправлениеКорректировки Тогда
				ПредставлениеНомера = НомерИсправляемогоКорректировочногоДокумента + " (испр. " + НомерИсправления + ")";
			Иначе
				ПредставлениеНомера = НомерИсходногоДокумента + " (испр. " + НомерИсправления + ")";
			КонецЕсли;
		Иначе
			ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Ложь);		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли