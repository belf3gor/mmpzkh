
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытийДокумента

// Процедура-обработчик "ПроверкаЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Заключение Тогда
		ПроверяемыеРеквизиты.Добавить("ДатаНачалаДействия");
		
		Если ДатаНачалаДействия > ПланируемаяДатаОкончанияДействия Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неверно указан период действия договора.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И Не ДоговорДПОИ = Справочники.УПЖКХ_ДоговорыДПОИ.ПустаяСсылка() Тогда
		ПроверитьСтатусТекущегоДоговора(Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура-обработчик "ОбработкаПроведения" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_РегистрацияДоговоровДПОИ.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Проверяет, корректно ли совершать текущую операцию с договором. Например, нельзя заключать договор, который уже
// заключен. Нельзя расторгать договор, который и так не действует.
Процедура ПроверитьСтатусТекущегоДоговора(Отказ)
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Заключение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахДПОИСрезПоследних.Регистратор) КАК Документ,
		|	УПЖКХ_СведенияОДоговорахДПОИСрезПоследних.Регистратор КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахДПОИ.СрезПоследних(
		|			&ДатаДокумента,
		|			ДоговорДПОИ = &ДоговорДПОИ
		|				И ДатаОперации <= &ДатаНачала
		|				И НЕ Регистратор = &ТекущийДокумент) КАК УПЖКХ_СведенияОДоговорахДПОИСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОДоговорахДПОИСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахДПОИ.Регистратор) КАК Документ,
		|	УПЖКХ_СведенияОДоговорахДПОИ.Регистратор КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахДПОИ КАК УПЖКХ_СведенияОДоговорахДПОИ
		|ГДЕ
		|	УПЖКХ_СведенияОДоговорахДПОИ.Период < &ДатаДокумента
		|	И УПЖКХ_СведенияОДоговорахДПОИ.ДоговорДПОИ = &ДоговорДПОИ
		|	И УПЖКХ_СведенияОДоговорахДПОИ.ДатаОперации МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И УПЖКХ_СведенияОДоговорахДПОИ.Регистратор <> &ТекущийДокумент";
		Запрос.УстановитьПараметр("ДатаДокумента",   Дата);
		Запрос.УстановитьПараметр("ДоговорДПОИ",      ДоговорДПОИ);
		Запрос.УстановитьПараметр("ДатаНачала",      ДатаНачалаДействия);
		Запрос.УстановитьПараметр("ДатаКонца",       ПланируемаяДатаОкончанияДействия);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		ДоговораНаНачалоПериода         = Результат.Получить(0).Выгрузить();
		ДоговораСПересекающимсяПериодом = Результат.Получить(1).Выгрузить();
		
		ТаблицаДокументов = ДоговораНаНачалоПериода.СкопироватьКолонки();
		
		// Проверяем нет ли документов, которые фиксируют то, что текущий договор ДПОИ действует на дату начала действия, указанную в текущем документе.
		// Таких документов не может быть более одного.
		// -------[-----]----------- (текущий документ)
		// -----{--------}---------- (документ, который пытаемся найти)
		// ---{------}-------------- (документ, который пытаемся найти)
		Если Не ДоговораНаНачалоПериода.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), ДоговораНаНачалоПериода.Получить(0));
		КонецЕсли;
		
		ДоговораСПересекающимсяПериодом.Свернуть("Документ, ДокументСсылка");
		
		// Проверяем нет ли документов, которые фиксируют то, что текущий договор ДПОИ действует в периоде, пересекающимся с периодом, указанном в текущем документе.
		// Таких документов может быть несколько.
		// ---[-----------------]--- (текущий документ)
		// -----{--------}---------- (документ, который пытаемся найти)
		// --{-----------}---------- (документ, который пытаемся найти)
		// ----------{------------}- (документ, который пытаемся найти)
		// ----{---}----{----}------ (документы, которые пытаемся найти)
		Для Каждого СтрокаДоговора Из ДоговораСПересекающимсяПериодом Цикл
			Если ТаблицаДокументов.Найти(СтрокаДоговора.ДокументСсылка, "ДокументСсылка") = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), СтрокаДоговора);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДокументов.Количество() = 1 Тогда
			СтрокаДокумента = ТаблицаДокументов.Получить(0);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор уже действует в указанном периоде. Проверьте документ " + СтрокаДокумента.Документ + ".",
															  СтрокаДокумента.ДокументСсылка,
															  ,
															  ,
															  Отказ);
		ИначеЕсли ТаблицаДокументов.Количество() > 1 Тогда
			
			СтрокаДокументов = "";
			Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
				СтрокаДокументов = ?(ПустаяСтрока(СтрокаДокументов), СтрокаТаблицы.Документ, СтрокаДокументов + ", " + СтрокаТаблицы.Документ);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор уже действует в указанном периоде. Проверьте документы " + СтрокаДокументов + ".",
															 СтрокаТаблицы.ДокументСсылка,
															 ,
															 ,
															 Отказ);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Расторжение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияОДоговорахДПОИСрезПоследних.Регистратор) КАК Документ
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОДоговорахДПОИ.СрезПоследних(
		|			&ДатаДокумента,
		|			ДоговорДПОИ = &ДоговорДПОИ
		|				И ДатаОперации < &ДатаРасторжения
		|				И НЕ Регистратор = &ТекущийДокумент) КАК УПЖКХ_СведенияОДоговорахДПОИСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОДоговорахДПОИСрезПоследних.Действует";
		Запрос.УстановитьПараметр("ДатаДокумента",   Дата);
		Запрос.УстановитьПараметр("ДоговорДПОИ",      ДоговорДПОИ);
		Запрос.УстановитьПараметр("ДатаРасторжения", ПланируемаяДатаОкончанияДействия);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Чтобы расторгать договор, должны выполняться следующие условия:
		// 1. Он должен начать действовать до даты расторжения.
		// 2. Срок действия договора не должен истекать на дату расторжения.
		Если Таблица.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Договор не открыт на дату расторжения.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтатусТекущегоДоговора()

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НаборДвижений 			 = Движения.УПЖКХ_СведенияОДоговорахДПОИ;
	НаборДвижений.Записывать = Истина;
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Заключение Тогда
		
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.Арендатор          = СтруктураШапкиДокумента.Арендатор;
		Движение.ДоговорДПОИ        = СтруктураШапкиДокумента.ДоговорДПОИ;
		Движение.Действует          = Истина;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Заключение;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ДатаНачалаДействия;
		Движение.Регистратор        = СтруктураШапкиДокумента.Ссылка;
		
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата + 1;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.Арендатор          = СтруктураШапкиДокумента.Арендатор;
		Движение.ДоговорДПОИ        = СтруктураШапкиДокумента.ДоговорДПОИ;
		Движение.Действует          = Ложь;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.ИстечениеСрокаДействия;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ПланируемаяДатаОкончанияДействия;
		Движение.Регистратор        = СтруктураШапкиДокумента.Ссылка;

	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Расторжение Тогда
		Движение = НаборДвижений.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Здание             = СтруктураШапкиДокумента.Здание;
		Движение.Арендатор          = СтруктураШапкиДокумента.Арендатор;
		Движение.ДоговорДПОИ        = СтруктураШапкиДокумента.ДоговорДПОИ;
		Движение.Действует          = Ложь;
		Движение.ОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровДПОИ.Расторжение;
		Движение.ДатаОперации       = СтруктураШапкиДокумента.ПланируемаяДатаОкончанияДействия;
		Движение.Регистратор        = СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецЕсли
