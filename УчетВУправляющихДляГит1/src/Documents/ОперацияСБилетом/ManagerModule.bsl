#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
	
Функция РеквизитыВлияющиеНаОтражениеВУчете() Экспорт

	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("ПометкаУдаления");
	СтруктураРеквизитов.Вставить("Проведен");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("ВидОперации");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
	СтруктураРеквизитов.Вставить("Билет");
	СтруктураРеквизитов.Вставить("Сумма");
	СтруктураРеквизитов.Вставить("СуммаНеОблагаемаяНДС");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СуммаНДС");
	СтруктураРеквизитов.Вставить("Штраф");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт

	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Билет");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Контрагент",  "Билет");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ДоговорКонтрагента", "Билет");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	РеквизитыБилета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Билет, "ПорядокПокупки, Агент, ДоговорАгента, Перевозчик");
	
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				
		Если РеквизитыБилета.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.ЧерезАгента Тогда
			ДанныеЗаполнения.Контрагент = РеквизитыБилета.Агент;
		Иначе	
			ДанныеЗаполнения.Контрагент = РеквизитыБилета.Перевозчик;
		КонецЕсли; 
				
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		
		Если РеквизитыБилета.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.ЧерезАгента Тогда
			ДанныеЗаполнения.ДоговорКонтрагента = РеквизитыБилета.ДоговорАгента;
		Иначе	
			ДанныеЗаполнения.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли; 
				
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Билет.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Реквизиты.Билет.ПорядокПокупки = ЗНАЧЕНИЕ(Перечисление.ПорядокПокупкиБилета.ЧерезАгента)
	|			ТОГДА Реквизиты.Билет.Агент
	|		ИНАЧЕ Реквизиты.Билет.Перевозчик
	|	КОНЕЦ КАК Контрагент,
	|	Реквизиты.Билет.ДоговорАгента КАК ДоговорКонтрагента,
	|	Реквизиты.Билет.ДоговорАгента.ВидДоговора КАК ВидДоговора,
	|	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВТ_Реквизиты
	|ИЗ
	|	Документ.ОперацияСБилетом КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат)
	|					ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -Реквизиты.Сумма
	|			ИНАЧЕ Реквизиты.Сумма
	|		КОНЕЦ КАК СуммаРуб,
	|		ВЫБОР
	|			КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат)
	|					ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -Реквизиты.Сумма
	|			ИНАЧЕ Реквизиты.Сумма
	|		КОНЕЦ КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Штраф,
	|		Реквизиты.Штраф
	|	ИЗ
	|		ВТ_Реквизиты КАК Реквизиты
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)) КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК СуммаНДС,
	|	Реквизиты.Штраф КАК Штраф,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	ВТ_Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Реквизиты";
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат[3]);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Реквизиты.Вставить("ИспользуетсяОтложенноеПроведение",
		ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период));
		
	Запрос.УстановитьПараметр("СчетУчетаБилетов", ПланыСчетов.Хозрасчетный.Билеты);
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
		
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Сотрудник КАК Сотрудник,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.Штраф КАК Штраф
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ЭтоВозврат Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",   Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблица",		Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетАвансов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВозвратВУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат Тогда
		ПараметрыПроведения.Вставить("ТаблицаБилетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаБилетов", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Билет КАК Билет,
	|	Реквизиты.Сумма КАК Сумма
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаВозврат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЭтоВозврат Тогда
		ПараметрыПроведения.Вставить("ВозвратРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратТаблица",	 Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВозвратРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.СчетРасчетов КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетАвансов КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.СчетРасчетов КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК РасчетыВВалюте,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	- ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	- ТаблицаСуммВзаиморасчетов.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы 
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
		 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат Тогда
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасходыПредпринимателя
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Командировки) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	Реквизиты.Билет КАК ЭлементРасхода,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоМатериал,
	|	&СчетУчетаБилетов КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	0 КАК Количество,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СуммаНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	Реквизиты КАК Реквизиты";
			
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не Реквизиты.ИспользуетсяОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Период КАК Дата
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти

#Область ОтложенноеПроведение

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблица,
		Неопределено,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

	ТаблицаВзаиморасчетовВозврат = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
	    Параметры,
		ПараметрыПроведения.ВозвратТаблица,
		Неопределено,
		ПараметрыПроведения.ВозвратРеквизиты,
		Отказ);
		
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
	    Параметры,
		ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.ВозвратРеквизиты,
		Отказ);
		
	СформироватьДвиженияВосстановлениеАванса(
		ТаблицаВзаиморасчетовВозврат,
		ПараметрыПроведения.ВозвратРеквизиты, 
		Параметры.Движения, 
		Отказ,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвижений

Функция ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОперацииСБилетом
	
	СписокОбязательныхКолонок = ""
		+ "Ссылка,"            // <ДокументСсылка.ОперацияСБилетом>
		+ "Период,"            // <Дата>
		+ "Организация,"       // <СправочникСсылка.Организации>
		+ "Подразделение,"     // <Ссылка на справочник подразделений>
		+ "ВидОперации,"  	   // <ПеречислениеСсылка.ВидыОперацийСБилетами>
		+ "ВидДоговора,"  	   // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
		+ "СчетРасчетов,"      // <ПланСчетовСсылка.Хозрасчетный>
		+ "СчетАвансов,"       // <ПланСчетовСсылка.Хозрасчетный>
		+ "Сотрудник,"  	   // <СправочникСсылка.ФизическиеЛица>
		+ "Билет,"  	   	   // <СправочникСсылка.Билеты>
		+ "Контрагент,"  	   // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"// <СправочникСсылка.ДоговорыКонтрагентов>
		+ "Сумма,"             // <Число,15,2>
		+ "Штраф";             // <Число,15,2>
	
	Параметры.Вставить("ОписаниеОперации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОписаниеОперации, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияХозрасчетный(ТаблицаОписаниеОперации, Движения, Отказ) Экспорт 
	
	Если Не ЗначениеЗаполнено(ТаблицаОписаниеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Параметры = ПодготовитьПараметрыХозрасчетный(ТаблицаОписаниеОперации);	
	ОписаниеОперации = Параметры.ОписаниеОперации[0];
	СчетУчетаБилетов = ПланыСчетов.Хозрасчетный.Билеты;
	
	СторонаУчетаБилета = "Дт";
	СторонаУчетаРасчетов = "Кт";
	
	// При возврате билета делаем обратные проводки
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
		ИЛИ ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат Тогда
		
		СторонаУчетаБилета = "Кт";
		СторонаУчетаРасчетов = "Дт";
				
	КонецЕсли; 	
		
	Проводка = Движения.Хозрасчетный.Добавить();
			
	СодержаниеПроводки = НСтр("ru='Операция с билетом: %1'");
	
	Проводка.Содержание  	= СтрШаблон(СодержаниеПроводки, ОписаниеОперации.ВидОперации);
	Проводка.СчетДт  		= ?(СторонаУчетаБилета = "Дт", СчетУчетаБилетов, ОписаниеОперации.СчетРасчетов);
	Проводка.СчетКт  		= ?(СторонаУчетаБилета = "Дт", ОписаниеОперации.СчетРасчетов, СчетУчетаБилетов);
	Проводка.Сумма 			= ОписаниеОперации.Сумма;
	
	ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
	ЗаполнитьСубконтоСчетаРасчетов(Проводка, СторонаУчетаРасчетов, ОписаниеОперации);
	ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, ОписаниеОперации);
	
	// Учтем сумму штрафа при возврате билета
	Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат И ОписаниеОперации.Штраф > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
			
		Проводка.Содержание  	= НСтр("ru='Операция с билетом: Штраф за возрат билета'");
		Проводка.СчетДт  		= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Проводка.СчетКт  		= ОписаниеОперации.СчетРасчетов;
		Проводка.Сумма 			= ОписаниеОперации.Штраф;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ШтрафыПениНеустойки"));
			
		ЗаполнитьСубконтоСчетаРасчетов(Проводка, "Кт", ОписаниеОперации);
		
		ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации);
					
	КонецЕсли;	
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженияВосстановлениеАванса(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СпособЗачетаАвансов,"
	+ "СчетУчетаРасчетовПоАвансам,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "Контрагент,"                   // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ВалютаВзаиморасчетов,"
	+ "ВидДоговора,"
	+ "Подразделение";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"             // <ДокументСсылка>  
		+ "СуммаРуб,"                     // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
		+ "СуммаВзаиморасчетов";          // <Число,15,2> - сумма в валюте взаиморасчетов
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВосстановлениеАванса(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не ЭтоОтложенноеПроведение
	   	И ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженияВосстановлениеАванса(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
    ПрименениеПБУ18 		= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводки = Движения.Хозрасчетный;

	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.ДокументРасчетов <> Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Реквизиты.СчетУчетаРасчетовПоАвансам = Реквизиты.СчетУчетаРасчетовСКонтрагентом Тогда
			Продолжить;
		КонецЕсли;	
		
		Проводка = Проводки.Добавить();

		Проводка.Период      = Реквизиты.период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru='Восстановление аванса поставщику'");
		Проводка.Сумма       = СтрокаВзаиморасчетов.СуммаРуб;

		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовПоАвансам;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;

		// В проводке устанавливаем обособленное подразделение, указанное в шапке документа.
		// Это подразделение доступно только в КОРП.
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
			
		Если ОтражатьВНалоговомУчете Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаВзаиморасчетов.СуммаРуб, СтрокаВзаиморасчетов.СуммаРуб,,,,,
				Проводка, ПрименениеПБУ18);
 		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбщиеРеквизитыПроводкиПоОперации(Проводка, ОписаниеОперации)

	Проводка.Период      = ОписаниеОперации.Период;
	Проводка.Организация = ОписаниеОперации.Организация;
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	// В проводке устанавливаем обособленное подразделение, указанное в шапке документа.
	// Это подразделение доступно только в КОРП.
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = ОписаниеОперации.Подразделение;
	КонецЕсли;
			
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = ОписаниеОперации.Подразделение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаРасчетов(Проводка, СторонаУчетаРасчетов, ОписаниеОперации)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Контрагенты", ОписаниеОперации.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"Договоры", ОписаниеОперации.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаРасчетов], Проводка["Субконто" + СторонаУчетаРасчетов],
		"ДокументыРасчетовСКонтрагентами", ОписаниеОперации.Ссылка);

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаБилетов(Проводка, СторонаУчетаБилета, ОписаниеОперации)

	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"РаботникиОрганизаций", ОписаниеОперации.Сотрудник);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СторонаУчетаБилета], Проводка["Субконто" + СторонаУчетаБилета],
		"Билеты", ОписаниеОперации.Билет);

КонецПроцедуры

#КонецОбласти

#КонецЕсли