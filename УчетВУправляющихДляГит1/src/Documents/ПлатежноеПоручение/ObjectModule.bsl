#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения = Тип("Структура")
			И НЕ ДанныеЗаполнения.Свойство("ДанныеЗаполнения") Тогда
			ЗаполнитьПоСтруктуре(ДанныеЗаполнения);
		ИначеЕсли ТипДанныхЗаполнения = Тип("Массив")
			ИЛИ (ТипДанныхЗаполнения = Тип("Структура")
				И ДанныеЗаполнения.Свойство("ДанныеЗаполнения")) Тогда
				
			Если ТипДанныхЗаполнения = Тип("Структура") Тогда
				ДанныеЗаполнения = ДанныеЗаполнения.ДанныеЗаполнения;
			КонецЕсли;
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
				ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
				ЗаполнитьДокументПоВедомости(ДанныеЗаполнения[0]);
			Иначе
				ЗаполнитьПоМассиву(ДанныеЗаполнения);
			КонецЕсли;
		ИначеЕсли Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИндивидуальныйПредприниматель");
		Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Если ПеречислениеВБюджет Тогда
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодОКАТО, Дата);
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		УчетДенежныхСредствБП.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект);
		
		// При отсутствии данных заполнения реквизиты заполняются по данным основной регистрации в налоговом органе
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный     = Пользователи.ТекущийПользователь();
	ДокументОснование = Неопределено;
	Оплачено          = Ложь;
	
	ЗаполнитьВидПеречисленияВБюджет();
	
	Если ОбъектКопирования.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Тогда
		ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ИначеЕсли ОбъектКопирования.Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа()
		И ОбъектКопирования.ПеречислениеВБюджет
		И ОбъектКопирования.ОчередностьПлатежа < УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы() Тогда
		ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектКопирования.ВидОперации) Тогда
		ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(ОбъектКопирования.Ссылка, ОбъектКопирования.ДокументОснование);
		Если ЗначениеЗаполнено(ДокументСписания) Тогда
			ВидОперации = ДокументСписания.ВидОперации;
		Иначе
			Если ОбъектКопирования.ПеречислениеВБюджет Тогда
				ВидОперации = УчетДенежныхСредствКлиентСервер.ВидОперацииДокументаПеречисленияВБюджет(ОбъектКопирования.КодБК);
			Иначе
				ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования);
	
	Если НачалоДня(Дата) <> НачалоДня(ОбъектКопирования.Дата) Тогда
		
		Документы.ПлатежноеПоручение.ИзменитьПлатежныеРеквизитыПриИзмененииДаты(ЭтотОбъект, ОбъектКопирования.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	МассивНепроверяемыхРеквизитов.Добавить("ВалютаДокумента");
	
	УплатаНалогаЗаТретьеЛицо = ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	// ИНН и КПП подставляются из элемента справочника,
	// но могут быть изменены в документе, поэтому выполняем проверку этих реквизитов на соответствие законодательству.
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		Если ПустаяСтрока(ИННПлательщика) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ИННПлательщика");
			Если УплатаНалогаЗаТретьеЛицо Тогда
				ТекстСообщения = НСтр("ru = 'Не указан ИНН плательщика.
					|Заполните ИНН налогоплательщика ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Налогоплательщик", "Объект", Отказ);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не указан ИНН плательщика.
					|Заполните ИНН организации ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
			КонецЕсли;
		Иначе
			РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННПлательщика, ОрганизацияЮрЛицо);
			Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
				РезультатПроверкиФизЛицо = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННПлательщика, НЕ ОрганизацияЮрЛицо);
				Если НЕ((ИННПлательщика = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() ИЛИ РезультатПроверкиФизЛицо.СоответствуетТребованиям)
					И ПлатежиВБюджетКлиентСервер.ЭтоПлатежПоИсполнительномуЛисту(СтатусСоставителя) ИЛИ УплатаНалогаЗаТретьеЛицо) Тогда
					МассивНепроверяемыхРеквизитов.Добавить("ИННПлательщика");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки, ЭтотОбъект, "Организация", "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПеречислениеВБюджет Тогда
			Если ПустаяСтрока(КПППлательщика) Тогда
				Если УплатаНалогаЗаТретьеЛицо Тогда
					ТекстСообщения = НСтр("ru = 'Не указан КПП плательщика.
						|Заполните КПП налогоплательщика ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Налогоплательщик", "Объект", Отказ);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не указан КПП плательщика.
						|Заполните КПП организации ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
				КонецЕсли;
			ИначеЕсли КПППлательщика = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				// Если Плательщик - ИП, то код всегда будет попадать в эту ветку, т.к. в КПП у него принудительно установлено значение "0",
				// но ошибка выдаваться не будет, из-за проверки на юр.лицо.
				// Проверяем для всех платежей, кроме платежей по исполнительному листу и при уплате налога за третье лицо.
				Если ОрганизацияЮрЛицо
					И НЕ ПлатежиВБюджетКлиентСервер.ЭтоПлатежПоИсполнительномуЛисту(СтатусСоставителя)
					И НЕ УплатаНалогаЗаТретьеЛицо Тогда
					ТекстСообщения = НСтр("ru = 'Не указан КПП плательщика.
						|Заполните КПП организации ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
				КонецЕсли;
			Иначе
				РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(
					КПППлательщика, ОрганизацияЮрЛицо, Ложь, Ложь);
				Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
					Если НЕ (УплатаНалогаЗаТретьеЛицо И НЕ ОрганизацияЮрЛицо) Тогда
						Если ПустаяСтрока(РезультатПроверки.ОписаниеОшибки) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru = 'При уплате в бюджет для индивидуального предпринимателя в КПП должен указываться ""0""'"),
								ЭтотОбъект, "Организация", "Объект", Отказ);
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки, ЭтотОбъект, "Организация", "Объект", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
			ПроверкаРеквизитовОрганизации.ОбработкаПроверкиЗаполнения(Организация, СчетОрганизации, Ложь, Отказ);
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИННПлательщика");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			КонтрагентЮрЛицо     = Ложь;
			КонтрагентНерезидент = Ложь;
		Иначе
			СвойстваКонтрагента  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ЮридическоеФизическоеЛицо, СтранаРегистрации");
			КонтрагентЮрЛицо     = СвойстваКонтрагента.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			КонтрагентНерезидент = СвойстваКонтрагента.СтранаРегистрации <> Справочники.СтраныМира.Россия;
		КонецЕсли;
		
		Если ПустаяСтрока(ИННПолучателя) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ИННПолучателя");
			ТекстСообщения = НСтр("ru = 'Не указан ИНН получателя.
				|Заполните ИНН контрагента ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
		Иначе
			Если КонтрагентНерезидент И (СтрДлина(СокрЛП(ИННПолучателя)) = 5 ИЛИ ИННПолучателя = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение()) Тогда
				// Для нерезидента может указываться КИО, который состоит из 5 знаков.
			ИначеЕсли КонтрагентЮрЛицо ИЛИ ИННПолучателя <> ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда // Для получателя - физ.лица можно указывать "0", если ИНН неизвестен или отсутствует.
				РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННПолучателя, КонтрагентЮрЛицо);
				Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
					МассивНепроверяемыхРеквизитов.Добавить("ИННПолучателя");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки, ЭтотОбъект, "Контрагент", "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПеречислениеВБюджет Тогда
			// Получатель в этом случае всегда юр.лицо, поэтому проверку на допустимость "пустого" КПП для получателей - физ.лиц не делаем.
			Если ПустаяСтрока(КПППолучателя) ИЛИ КПППолучателя = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				ТекстСообщения = НСтр("ru = 'Не указан КПП получателя.
					|Заполните КПП контрагента ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
			Иначе
				РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(
					КПППолучателя, КонтрагентЮрЛицо, Ложь, Ложь);
				Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки, ЭтотОбъект, "Контрагент", "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстПолучателя) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ТекстПолучателя");
			ТекстСообщения = НСтр("ru = 'Не указано наименование получателя.
				|Заполните наименование контрагента ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИННПолучателя");
		МассивНепроверяемыхРеквизитов.Добавить("ТекстПолучателя");
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
	КонецЕсли;
	
	Если Прав(СокрЛП(Номер), 6) = "000000" Тогда
		ТекстСообщения = НСтр("ru = 'Номер не должен быть равен нулю'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Номер", "Объект", Отказ);
	КонецЕсли;
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
			ИЛИ (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
			
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
				
				Ведомости = Новый Массив;
				Ведомости.Добавить(ПлатежнаяВедомость);
				
				ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Ложь);
				ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Истина);
				
				Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
					
					ШаблонСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1.'");
					ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
					ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					
				Иначе
					
					Если ТаблицаОплаченныхВедомостей.Количество() <> 0 Тогда
						СтрокаВедомости = ТаблицаОплаченныхВедомостей[0];
					Иначе
						СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
					КонецЕсли;
					
					СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
					
					Если СуммаПоВедомости <> СуммаДокумента Тогда
						ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
	КонецЕсли;
	
	РасчетыСФизическимиЛицами = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ВидОперации)
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	
	Если НЕ РасчетыСФизическимиЛицами
			ИЛИ (РасчетыСФизическимиЛицами И СчетКонтрагента.Владелец = Контрагент) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Банк");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Организация) Тогда
			
			ДопустимыйВидОрганизации = ?(ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация),
				НСтр("ru = 'физическими лицами'"),
				НСтр("ru = 'организациями'"));
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный налог (взнос) уплачивается %1'"), ДопустимыйВидОрганизации);
			
			ТекстОшибкиЗаполнения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Налог'"),,, ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиЗаполнения, ЭтотОбъект, "Налог", "Объект", Отказ);
			
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	Если НЕ УплатаНалогаЗаТретьеЛицо Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налогоплательщик");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = Неопределено;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	ПроверитьУдалитьПравилоРегулярногоПлатежа();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Если задано правило регулярного платежа, добавим запись в служебный регистр.
	Если ДополнительныеСвойства.Свойство("ПравилоРегулярногоПлатежа") Тогда
		ПравилоОбновлено = РегистрыСведений.РегулярныеПлатежи.ДобавитьЗаписьПравила(
			Организация,
			Ссылка,
			ДополнительныеСвойства.ПравилоРегулярногоПлатежа,
			ДополнительныеСвойства.ПериодСобытияРегулярногоПлатежа);
		
		ДополнительныеСвойства.Вставить("ПравилоРегулярногоПлатежаОбновлено", ПравилоОбновлено);
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтера.ПриЗаписиПлатежа(ЭтотОбъект);
	
	Состояние = Неопределено;
	ДополнительныеСвойства.Свойство("Состояние", Состояние);
	РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(ЭтотОбъект, Состояние);
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		РегистрыСведений.ПолучателиПлатежаЗарплатногоПроекта.УстановитьПолучателяПлатежаЗарплатногоПроекта(Организация,
			Контрагент, СчетКонтрагента, ДокументОснование);
	КонецЕсли;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОбновитьДанныеИнтеграцииИЗарегистрироватьДокументДляОтправкиВБанк(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования)
	
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодОКАТО, Дата);
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ НЕ ЗначениеЗаполнено(Налог) ИЛИ Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Дата)
		ИЛИ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ОбъектКопирования.Дата) = ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НеактуальныеНалоги = ПлатежиВБюджетКлиентСерверПереопределяемый.НеактуальныеНалоги(Дата);
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	Если НеактуальныеНалоги[ВидНалога] <> Неопределено Тогда
		Если НеактуальныеНалоги[ВидНалога].Свойство("АктуальныйНалог") Тогда
			АктуальныйНалог = НеактуальныеНалоги[ВидНалога].АктуальныйНалог;
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(АктуальныйНалог);
		Иначе
			Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Налог, Дата) Тогда
				Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
			КонецЕсли;
		КонецЕсли;
		
		РегистрацияВНалоговомОргане = Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(Организация,, КПППлательщика);
		РеквизитыВБюджетПоУмолчанию = Документы.ПлатежноеПоручение.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
			Дата,
			Организация,
			ПеречислениеВБюджет,
			Налог,
			ВидНалоговогоОбязательства,
			Документы.ПлатежноеПоручение.КонтекстПлатежногоДокумента(ЭтотОбъект),
			РегистрацияВНалоговомОргане);
		
		Если ЗначениеЗаполнено(РеквизитыВБюджетПоУмолчанию.Получатель) И Контрагент <> РеквизитыВБюджетПоУмолчанию.Получатель Тогда
			ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
				"ГосударственныйОрган, ВидГосударственногоОргана");
			Если НЕ ЗначениеЗаполнено(Контрагент)
				ИЛИ ДанныеКонтрагента.ГосударственныйОрган
				И ДанныеКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Контрагент      = РеквизитыВБюджетПоУмолчанию.Получатель;
				СчетКонтрагента = РеквизитыВБюджетПоУмолчанию.СчетПолучателя;
				АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
					Организация,
					СчетОрганизации,
					Контрагент,
					СчетКонтрагента,
					ПеречислениеВБюджет,
					Дата,
					РегистрацияВНалоговомОргане);
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов, "ИННПолучателя, КПППолучателя, ТекстПолучателя");
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусСоставителя = ПлатежиВБюджетКлиентСервер.СтатусПлательщикаИныеПлатежи() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВБюджетПоУмолчанию);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВБюджетПоУмолчанию,, "СтатусСоставителя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВидДокументаОснования = ТипЗнч(Основание);
	ДокументОснование     = Основание;
	
	Если ВидДокументаОснования    = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ВыкупПредметовЛизинга")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Контрагент                  = Основание.Контрагент;
		ИННПолучателя               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН");
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		
		РеквизитыДоговораСтрока = "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС";
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, РеквизитыДоговораСтрока);
		Иначе
			ДанныеДоговора = Новый Структура(РеквизитыДоговораСтрока, ВалютаРегламентированногоУчета, Ложь, Ложь);
		КонецЕсли;
		
		ВалютаВзаиморасчетов        = ДанныеДоговора.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВидРасчетовПоДоговору   = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
			КурсДокумента           = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьДокумента      = СтруктураКурсаВзаиморасчетов.Кратность;
			Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
				ВалютаДокумента     = ВалютаВзаиморасчетов;
			Иначе
				ВалютаДокумента     = ВалютаРегламентированногоУчета;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
			КурсДокумента           = 1;
			КратностьДокумента      = 1;
		КонецЕсли;
		
		Если ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетКонтрагента = Основание.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		ТаблицаПлатежей = Новый ТаблицаЗначений();
		ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаПлатежей.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаПлатежей.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения") + Основание.Услуги.Итог("СуммаНДСВознаграждения");
			
			СтрокаТаблицыСумм.СуммаПлатежа = ?(Основание.СуммаВключаетНДС, Основание.СуммаВознаграждения,
				Основание.СуммаВознаграждения + СтрокаТаблицыСумм.СуммаНДС);
			
		ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			СуммаДокументаОснования = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
			Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
				УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание));
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";	
		Иначе
			
			СуммаДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				СуммаДокументаОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
				Если Основание.УдержатьВознаграждение Тогда
					СуммаКоррПлатежа = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
					НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
						СуммаКоррПлатежа, СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если НоваяКолонкаСумм <> Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли;
					
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Основание.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
					СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
						СуммаКоррНДС, СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если НоваяКолонкаНДС <> Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				
				Если Основание.Сумма <> 0 И Основание.СуммаНДС <> 0  Тогда
					Если СуммаДокументаОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + Основание.СуммаНДС;
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
				
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ВалютаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВалютаДокумента");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДанныеДоговора.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
			
			Если ДанныеДоговора.РасчетыВУсловныхЕдиницах И ВалютаДокументаОснования <> ВалютаРегламентированногоУчета Тогда
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаПлатежа,
					СтруктураКурсаВзаиморасчетов.Валюта, ВалютаРегламентированногоУчета,
					СтруктураКурсаВзаиморасчетов.Курс, 1,
					СтруктураКурсаВзаиморасчетов.Кратность, 1);
				
				// Если счет в валюте, а договор в у.е., то сумму НДС вычисляем заново по ставке НДС из суммы рублевого покрытия.
				// Т.к. если пересчитывать рублевый НДС из его валютного значения получается большая погрешность.
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
				СтрокаПлатеж.СуммаНДС = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС), 2);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.Свернуть(, "СуммаПлатежа, СтавкаНДС, СуммаНДС");
		
		СуммаДокумента = ТаблицаПлатежей.Итог("СуммаПлатежа");
		СуммаНДС       = ТаблицаПлатежей.Итог("СуммаНДС");
		СтавкаНДС      = ?(ТаблицаПлатежей.Количество() = 1, ТаблицаПлатежей[0].СтавкаНДС, "");
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента);
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент,  ВалютаДокумента);
		
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов, Ложь);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		
		ЗаполнитьДокументПоВедомости(Основание);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		ЗаполнитьПоСписаниюСРасчетногоСчета(Основание);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		СуммаДокумента = Основание.ТранспортныеСредства.Итог("Сумма");
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента);
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент,  ВалютаДокумента);
		
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов, Ложь);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		ВидОперации          = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов;
		Контрагент           = Основание.Учредитель;
		ВалютаДокумента      = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		СуммаДокумента       = Основание.СуммаДохода - Основание.СуммаНалога;
		НачислениеДивидендов = Основание;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента);
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент,  ВалютаДокумента);
		
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоВедомости(Основание)
	
	ДокументОснование = Основание;
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	Организация = Основание.Организация;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПодразделениеОрганизации");
	Иначе
		ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Подразделение");
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаРегламентированногоУчета);
	
	ПлатежныеВедомости = Новый Массив;
	ПлатежныеВедомости.Добавить(Основание);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости);
	
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет сумм к выплате!'"), Основание.Ссылка);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 полностью оплачен!'"), Основание.Ссылка);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 оплачивается через кассу!'"), СтрокаВедомости.Ведомость);
					
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
	ПлатежнаяВедомость = Основание;
	ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	
	КонтрольнаяВедомость = ТаблицаВедомостей[0].Ведомость;
	РеквизитыПолучателяПлатежа = 
		РегистрыСведений.ПолучателиПлатежаЗарплатногоПроекта.РеквизитыПолучателяПлатежаЗарплатногоПроекта(Организация, КонтрольнаяВедомость);
	Контрагент      = РеквизитыПолучателяПлатежа.Контрагент;
	СчетКонтрагента = РеквизитыПолучателяПлатежа.СчетКонтрагента;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		ЭтотОбъект,
		АвтоЗначенияРеквизитов,
		Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПоСписаниюСРасчетногоСчета(Основание)
	
	Перем РегистрацияВНалоговомОргане, ЭтоПереводМеждуСчетами;
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		Или Основание.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежное поручение не вводится на основании ""Списания с расчетного счета"" с видом операции ""%1"".'"),
			Основание.ВидОперации);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Основание.Проведен Тогда
		ТекстСообщения =
			НСтр("ru = 'Платежное поручение нельзя вводить на основании исполненного банком документа ""Списания с расчетного счета"".'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДокументОснование              = Основание;
	ВидОперации                    = Основание.ВидОперации;
	Организация                    = Основание.Организация;
	СчетОрганизации                = Основание.СчетОрганизации;
	Контрагент                     = Основание.Контрагент;
	СчетКонтрагента                = Основание.СчетКонтрагента;
	ДоговорКонтрагента             = Основание.ДоговорКонтрагента;
	СтатьяДвиженияДенежныхСредств  = Основание.СтатьяДвиженияДенежныхСредств;
	ПлатежнаяВедомость             = Основание.ПлатежнаяВедомость;
	Налог                          = Основание.Налог;
	Если ЗначениеЗаполнено(Основание.ДатаВходящегоДокумента) Тогда
		Дата = Основание.ДатаВходящегоДокумента;
	Иначе
		Дата = Основание.Дата;
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	Если УплатаНалогаЗаТретьихЛиц Тогда
		Налогоплательщик = Основание.Налогоплательщик;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Документы.СписаниеСРасчетногоСчета.ПолучитьРегистрациюВНалоговомОргане(Основание);
	
	Оплачено = Истина;
	
	СуммаДокумента                 = Основание.СуммаДокумента;
	ВалютаДокумента                = Основание.ВалютаДокумента;
	
	ЗаполненоНазначениеПлатежа = НЕ ПустаяСтрока(Основание.НазначениеПлатежа);
	НазначениеПлатежаБылоИзмененоВручную = ЗаполненоНазначениеПлатежа
		И Основание.НазначениеПлатежа <> Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Основание,, Истина);
	
	Если Основание.РасшифровкаПлатежа.Количество() = 1 Тогда
		ДоговорКонтрагента = Основание.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтавкаНДС          = Основание.РасшифровкаПлатежа[0].СтавкаНДС;
		СуммаНДС           = Основание.РасшифровкаПлатежа[0].СуммаНДС;
		СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	ИначеЕсли Основание.РасшифровкаПлатежа.Количество() > 1 Тогда
		СтавкаНДС          = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаНДС           = Основание.РасшифровкаПлатежа.Итог("СуммаНДС");
		НазначениеПлатежаБылоИзмененоВручную = ЗаполненоНазначениеПлатежа;
	КонецЕсли;
	
	Если НазначениеПлатежаБылоИзмененоВручную Тогда
		НазначениеПлатежа = Основание.НазначениеПлатежа;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ВидНалоговогоОбязательства = Документы.СписаниеСРасчетногоСчета.ВидНалоговогоОбязательстваПоАналитикеПлатежа(Основание);
		ПеречислениеВБюджет        = Истина;
	ИначеЕсли УчетДенежныхСредствБП.ПлатежГосОргану(ВидОперации, Контрагент) Тогда
		НомерСчетаПолучателя       = ?(ЗначениеЗаполнено(СчетКонтрагента),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "НомерСчета"),
			"");
		ПеречислениеВБюджет        = ПустаяСтрока(НомерСчетаПолучателя)
			ИЛИ ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Дата);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ДокОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДокументОснование");
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
			НачислениеДивидендов = ДокОснование;
		КонецЕсли;
	КонецЕсли;
	
	// Реквизиты плательщика и получателя
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Налогоплательщик, Организация),
		СчетОрганизации,
		?((ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет), Организация, Контрагент),
		СчетКонтрагента,
		ПеречислениеВБюджет,
		Дата,
		РегистрацияВНалоговомОргане);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	// Реквизиты перечисления в бюджет
	Если ПеречислениеВБюджет Тогда
		
		ИсточникДанныхКонтекста = Документы.ПлатежноеПоручение.ИсточникДанныхКонтекста(
			Дата, Организация, ПеречислениеВБюджет, Налог, ВидНалоговогоОбязательства, РегистрацияВНалоговомОргане, СчетКонтрагента);
		
		Если ЗначениеЗаполнено(Основание.НалоговыйПериод) Тогда
			ИсточникДанныхКонтекста.Вставить("ПериодПлатежа", Основание.НалоговыйПериод);
		КонецЕсли;
		
		Если УплатаНалогаЗаТретьихЛиц Тогда
			ИсточникДанныхКонтекста.Вставить("Налогоплательщик", Налогоплательщик);
		КонецЕсли;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, Основание);
		
		Если НазначениеПлатежаБылоИзмененоВручную Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта,, "НазначениеПлатежа");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
			Если УплатаНалогаЗаТретьихЛиц Тогда
				Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов,
					НазначениеПлатежаБылоИзмененоВручную);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьВидПеречисленияВБюджет();
		
	Иначе
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов,
			НазначениеПлатежаБылоИзмененоВручную);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения)
	
	Перем РегистрацияВНалоговомОргане, УровеньБюджета;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "Организация");
		ИначеЕсли ДанныеЗаполнения.Свойство("ШапкаДокумента") И ДанныеЗаполнения.ШапкаДокумента.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.ШапкаДокумента.Организация;
		Иначе
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "Владелец");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
		ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент) Тогда
			СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ГосударственныйОрган, ВидГосударственногоОргана");
			Если СвойстваКонтрагента.ГосударственныйОрган
				И (СвойстваКонтрагента.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган
				ИЛИ СвойстваКонтрагента.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
				ИЛИ СвойстваКонтрагента.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС) Тогда
				ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УчетДенежныхСредствБП.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект);
	НазначениеПлатежаБылоИзмененоВручную = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ПеречислениеВБюджет = Истина;
		
		ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Налог);
		
		Если Не ЗначениеЗаполнено(Контрагент) И ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
			
			ВидИКодГосударственногоОргана = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
				Налог, Организация, Дата);
			ПолучательПлатежа = Документы.ПлатежноеПоручение.ПолучательДляПлатежаГосударственномуОргану(
				ВидИКодГосударственногоОргана.Вид, ВидИКодГосударственногоОргана.Код);
			
			Контрагент      = ПолучательПлатежа.Контрагент;
			СчетКонтрагента = ПолучательПлатежа.БанковскийСчет;
			
		КонецЕсли;
		
		ИсточникДанныхКонтекста = Документы.ПлатежноеПоручение.ИсточникДанныхКонтекста(
			Дата, Организация, ПеречислениеВБюджет, Налог, ВидНалоговогоОбязательства, РегистрацияВНалоговомОргане, СчетКонтрагента);
		
		// Если в данных заполнения передан Налоговый период, то задаем период платежа.
		НалоговыйПериод = Неопределено;
		Если ДанныеЗаполнения.Свойство("НалоговыйПериод", НалоговыйПериод) И ЗначениеЗаполнено(НалоговыйПериод) Тогда
			ИсточникДанныхКонтекста.ПериодПлатежа = НалоговыйПериод;
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(ИсточникДанныхКонтекста.Налог)
			ИЛИ ИсточникДанныхКонтекста.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы)
			И ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(КодБК) Тогда
			ИсточникДанныхКонтекста.Вставить("КодБК", КодБК);
		КонецЕсли;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, ДанныеЗаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		
		Если ПустаяСтрока(КодБК) И ЗначениеЗаполнено(Налог) Тогда
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
			Если ЗначениеЗаполнено(ВидНалога) Тогда
				Если НалоговыйПериод = Неопределено Тогда
					КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
						КодБК, ВидНалога, ВидНалоговогоОбязательства, Дата);
				Иначе
					КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
						КодБК, ВидНалога, ВидНалоговогоОбязательства, Дата, НалоговыйПериод);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьВидПеречисленияВБюджет();
		
		НазначениеПлатежаБылоИзмененоВручную = Истина;
		
	ИначеЕсли ДанныеЗаполнения.Свойство("НазначениеПлатежа") И ЗначениеЗаполнено(ДанныеЗаполнения.НазначениеПлатежа) Тогда
		
		НазначениеПлатежаБылоИзмененоВручную = Истина;
		
	КонецЕсли;
	
	// Реквизиты плательщика и получателя
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата, РегистрацияВНалоговомОргане);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов,, ?(ЗначениеЗаполнено(КПППлательщика), "КПППлательщика", ""));
	
	Если ЗначениеЗаполнено(Контрагент) ИЛИ ЗначениеЗаполнено(Налог) Тогда
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов,
			НазначениеПлатежаБылоИзмененоВручную);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ГосударственныйКонтракт");
		Если ЗначениеЗаполнено(ГосКонтракт) Тогда
			ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГосКонтракт, "Код");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУдалитьПравилоРегулярногоПлатежа()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлатежноеПоручение", Ссылка);
	Запрос.УстановитьПараметр("Организация",        Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегулярныеПлатежи.Правило
	|ИЗ
	|	РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК ПлатежиПоПравилу
	|		ПО РегулярныеПлатежи.Правило = ПлатежиПоПравилу.Правило
	|			И РегулярныеПлатежи.ПлатежноеПоручение <> ПлатежиПоПравилу.ПлатежноеПоручение
	|			И (НЕ ПлатежиПоПравилу.ПлатежноеПоручение.ПометкаУдаления)
	|ГДЕ
	|	РегулярныеПлатежи.ПлатежноеПоручение = &ПлатежноеПоручение
	|	И РегулярныеПлатежи.Организация = &Организация
	|	И ПлатежиПоПравилу.ПлатежноеПоручение ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если по правилу платежного поручения нет других непомеченных на удаление документов
	// то статус пометки на удаления правила регулируется этой платежкой
	Если Выборка.Следующий() Тогда
		
		Правило = Выборка.Правило.ПолучитьОбъект();
		Правило.ПометкаУдаления = ПометкаУдаления;
		Правило.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидПеречисленияВБюджет()
	
	Если ПеречислениеВБюджет
		И ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Дата) Тогда
		
		ПравильныйВидПеречисления = ПлатежиВБюджетКлиентСервер.ВидПеречисления(КодБК, Дата);
		
		Если ВидПеречисленияВБюджет <> ПравильныйВидПеречисления Тогда
			ВидПеречисленияВБюджет = ПравильныйВидПеречисления;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ по данным документов в массиве.
// В массиве должны содержаться ссылки на документы определенных типов:
// СчетНаОплатуПоставщику, ПоступлениеТоваровУслуг, ПоступлениеДопРасходов, ПоступлениеНМА.
// Документы должны быть по одной организации.
// Параметры:
//   ДанныеЗаполнения - <Массив> - Массив ссылок на документы основания
//
Процедура ЗаполнитьПоМассиву(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаПлатежей.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаПлатежей.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	МассивКонтрагентов = Новый Массив;
	МассивДоговоров = Новый Массив;
	МассивСчетов = Новый Массив;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютаДокумента = ВалютаРегламентированногоУчета;
	
	Для Каждого Основание Из ДанныеЗаполнения Цикл
		
		ТипДокументаОснования = ТипЗнч(Основание);
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
							"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента");
		
		Организация = ДанныеОснования.Организация;
		
		Если ЗначениеЗаполнено(ДанныеОснования.Контрагент) Тогда
			Если МассивКонтрагентов.Найти(ДанныеОснования.Контрагент) = Неопределено Тогда
				МассивКонтрагентов.Добавить(ДанныеОснования.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ДоговорКонтрагента) Тогда
			Если МассивДоговоров.Найти(ДанныеОснования.ДоговорКонтрагента) = Неопределено Тогда
				МассивДоговоров.Добавить(ДанныеОснования.ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			Если МассивСчетов.Найти(Основание) = Неопределено Тогда
				МассивСчетов.Добавить(Основание);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОснования.ДоговорКонтрагента,
			"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС");
		
		ВалютаВзаиморасчетов         = ДанныеДоговора.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		СуммаДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			Если Основание.Сумма <> 0 И Основание.СуммаНДС <> 0  Тогда
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				
				СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
				СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + Основание.СуммаНДС;
				
				Если НЕ Основание.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
			
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ВалютаДокументаОснования = ДанныеОснования.ВалютаДокумента;
		
		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДанныеДоговора.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
			
			Если ДанныеДоговора.РасчетыВУсловныхЕдиницах И ВалютаДокументаОснования <> ВалютаРегламентированногоУчета Тогда
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаПлатежа,
					СтруктураКурсаВзаиморасчетов.Валюта, ВалютаРегламентированногоУчета,
					СтруктураКурсаВзаиморасчетов.Курс, 1,
					СтруктураКурсаВзаиморасчетов.Кратность, 1);
				
				СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаНДС,
					СтруктураКурсаВзаиморасчетов.Валюта, ВалютаРегламентированногоУчета,
					СтруктураКурсаВзаиморасчетов.Курс, 1,
					СтруктураКурсаВзаиморасчетов.Кратность, 1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПлатежей.Свернуть("СтавкаНДС", "СуммаПлатежа, СуммаНДС");
	
	СуммаДокумента = ТаблицаПлатежей.Итог("СуммаПлатежа");
	СуммаНДС       = ТаблицаПлатежей.Итог("СуммаНДС");
	СтавкаНДС      = ?(ТаблицаПлатежей.Количество() = 1, ТаблицаПлатежей[0].СтавкаНДС, "");
	
	Если МассивКонтрагентов.Количество() = 1 Тогда
		Контрагент    = МассивКонтрагентов[0];
		ИННПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.Контрагент, "ИНН");
	КонецЕсли;
	
	Если МассивДоговоров.Количество() = 1 Тогда
		
		ДоговорКонтрагента = МассивДоговоров[0];
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		КурсДокумента         = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьДокумента    = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента   = ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента   = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента);
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент,  ВалютаДокумента);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ПеречислениеВБюджет = Ложь;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	// Назначение платежа содержит только сумму
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов, Ложь, Истина);
	
	ТекстОплата = "Оплата ";
	
	НастроенныйТекстНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "ТекстНазначения");
	
	Если ЗначениеЗаполнено(НастроенныйТекстНазначения) Тогда
		
		ТекстНазначение = НастроенныйТекстНазначения;
		
	ИначеЕсли ДанныеЗаполнения.Количество() = МассивСчетов.Количество() Тогда
		
		МассивТекстНазначенияСчета = Новый Массив;
		
		Для Каждого ЭлементМассива Из МассивСчетов Цикл
			
			ПараметрыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементМассива, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
			
			Если НЕ ПустаяСтрока(ПараметрыСчета.НомерВходящегоДокумента) И НЕ ПустаяСтрока(ПараметрыСчета.ДатаВходящегоДокумента) Тогда
				
				ТекстНазначениеСчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ %1 от %2'"),
					СокрЛП(ПараметрыСчета.НомерВходящегоДокумента),
					Формат(ПараметрыСчета.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")); // формат даты не локальный, чтобы не влияли настройки компьютера / сервера
				
				МассивТекстНазначенияСчета.Добавить(ТекстНазначениеСчета);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивТекстНазначенияСчета.Количество() = 0 Тогда
			ТекстНазначение = ТекстОплата + "по счетам";
		ИначеЕсли МассивТекстНазначенияСчета.Количество() = 1 Тогда
			ТекстНазначение = ТекстОплата + "по счету " + МассивТекстНазначенияСчета[0];
		Иначе
			ТекстНазначение = ТекстОплата + "по счетам: " + СтрСоединить(МассивТекстНазначенияСчета, ", ");
		КонецЕсли;
		
	Иначе
		
		// Дополнить назначение платежа информацией о договорах
		Если МассивДоговоров.Количество() = 0 Тогда
			ТекстНазначение = ТекстОплата + "по договору ";
		ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
			ТекстНазначение = ТекстОплата + "по договору " + МассивДоговоров[0];
		Иначе
			ТекстНазначение = ТекстОплата + "по договорам: " + СтрСоединить(МассивДоговоров, ", ");
		КонецЕсли;
		
	КонецЕсли;
	
	НазначениеПлатежа = ТекстНазначение + НазначениеПлатежа;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
