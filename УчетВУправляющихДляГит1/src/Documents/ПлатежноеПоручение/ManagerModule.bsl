#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Процедура СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную, ТолькоСумму = Ложь, ШаблонНазначенияПлатежаВБюджет = "") Экспорт
	
	ТекстНазначение = Объект.НазначениеПлатежа;
	
	ПозицияСумма = СтрНайти(ТекстНазначение, "Сумма");
	ТекстНДС     = "";
	Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
		ПозицияСумма = СтрНайти(ТекстНазначение, "В т.ч. НДС");
		Если ПозицияСумма = 0 Тогда
			ТекстНДСАвто = "Без налога (НДС)";
			ПозицияСумма = СтрНайти(ТекстНазначение, ТекстНДСАвто);
			Если ПозицияСумма > 0 Тогда
				ТекстНДС = ТекстНДСАвто;
			КонецЕсли;
		КонецЕсли;
		Если ПозицияСумма = 0 Тогда
			ТекстНДСАвто = "НДС не облагается";
			ПозицияСумма = СтрНайти(ТекстНазначение, ТекстНДСАвто);
			Если ПозицияСумма > 0 Тогда
				ТекстНДС = ТекстНДСАвто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// отработаем ситуацию, когда ПП введена на основании документа "Списание с расчетного счета",
	// при этом, в Списании данные введены Списком (поэтому и СтавкаНДС в ПП пустая) и заполнено Назначение платежа
	// т.к. скорее всего, Назначение платежа в Списании более правильно (учтены реквизиты, которых нет в ПП)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		И Объект.СтавкаНДС.Пустая() И НЕ ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если НазначениеПлатежаБылоИзмененоВручную Тогда
		ТолькоСумму = Истина;
	КонецЕсли;
	
	Если ТолькоСумму Тогда
		ТекстНазначение = ?(ПозицияСумма = 0, ТекстНазначение, Лев(ТекстНазначение, ПозицияСумма - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
	Иначе
		
		ПараметрыНазначенияПлатежа = НовыеПараметрыНазначенияПлатежа();
		ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
		ТекстНазначенияАвто = ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
		
		Если НЕ НазначениеПлатежаБылоИзмененоВручную ИЛИ ПустаяСтрока(ТекстНазначение) Тогда
			НазначениеПлатежаБылоИзмененоВручную = Ложь;
			Если ЗначениеЗаполнено(АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа) Тогда
				// Менять только если значение назначения платежа не было ранее введено вручную
				ТекстНазначение = АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа;
			ИначеЕсли ЗначениеЗаполнено(ТекстНазначенияАвто) Тогда
				ТекстНазначение = ТекстНазначенияАвто;
			Иначе
				НазначениеПлатежаБылоИзмененоВручную = НЕ ПустаяСтрока(ТекстНазначение);
			КонецЕсли;
		Иначе
			ТекстНазначение = ?(ПозицияСумма = 0, ТекстНазначение, Лев(ТекстНазначение, ПозицияСумма - 1));
			Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
				ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
			КонецЕсли;
			
			АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", ТекстНазначенияАвто);
			НазначениеПлатежаБылоИзмененоВручную = НазначениеПлатежаИзмененоВручную(СокрЛП(ТекстНазначение), ТекстНазначенияАвто);
		КонецЕсли;
	КонецЕсли;
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		ТекстНазначение,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ПеречислениеВБюджет);
	
	// При перечислении налога НДС не указываем, если он не был заполнен вручную
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		Объект.НазначениеПлатежа = СокрЛП(ТекстНазначение) + " " + ТекстНДС;
		Возврат;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		Если ТолькоСумму Тогда
			Возврат;
		Иначе
			ТекстСумма = "";
			ТекстНДС   = "НДС не облагается";
		КонецЕсли;
	ИначеЕсли УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ТекстНДС = "Без налога (НДС)";
	Иначе
		Если Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = "Без налога (НДС)";
		ИначеЕсли Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			ТекстНДС = "НДС (0%)";
		ИначеЕсли Объект.СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. НДС "
			+ ?(ЗначениеЗаполнено(Объект.СтавкаНДС), " (" + Объект.СтавкаНДС + ") ", "")
			+ Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		Иначе
			ТекстНДС = "";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСуммаНазначения = ТекстСумма + ?(ТекстСумма = "", "", Символы.ПС) + ТекстНДС;
	
	Объект.НазначениеПлатежа = ТекстНазначение
		+ ?(ПустаяСтрока(ТекстСуммаНазначения), "", Символы.ПС + ТекстСуммаНазначения);
	
КонецПроцедуры

// Формирует текст назначения платежа
//
// Параметры:
//   ПараметрыНазначенияПлатежа - структура описанная в НовыеПараметрыНазначенияПлатежа()
//
Функция ТекстНазначенияПлатежа(Параметры, ШаблонНазначенияПлатежаВБюджет = "") Экспорт
	
	Организация                = Параметры.Организация;
	Налогоплательщик           = Параметры.Налогоплательщик;
	Дата                       = Параметры.Дата;
	ВидОперации                = Параметры.ВидОперации;
	Контрагент                 = Параметры.Контрагент;
	ПлатежнаяВедомость         = Параметры.ПлатежнаяВедомость;
	ПеречислениеВБюджет        = Параметры.ПеречислениеВБюджет;
	СчетКонтрагента            = Параметры.СчетКонтрагента;
	ДоговорКонтрагента         = Параметры.ДоговорКонтрагента;
	КБК                        = Параметры.КодБК;
	Налог                      = Параметры.Налог;
	ВидНалоговогоОбязательства = Параметры.ВидНалоговогоОбязательства;
	ДокументОснование          = Параметры.ДокументОснование;
	ПоказательПериода          = Параметры.ПоказательПериода;
	НачислениеДивидендов       = Параметры.НачислениеДивидендов;
	
	РасчетыСРаботниками = Ложь;
	
	НастроенныйТекстНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "ТекстНазначения");
	
	Если ЗначениеЗаполнено(НастроенныйТекстНазначения) Тогда
		
		ТекстНазначение = НастроенныйТекстНазначения;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ПустаяСтрока(ШаблонНазначенияПлатежаВБюджет) Тогда
			КПППлательщика = "";
			Параметры.Свойство("КПППлательщика", КПППлательщика);
			РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(Организация, Контрагент, КПППлательщика);
			
			НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
				Налог, Организация, РегистрацияВНалоговомОргане);
			Если НастройкаЗаполнения <> Неопределено Тогда
				ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
					НастройкаЗаполнения, Дата, Организация);
				ДанныеЗаполнения.Свойство("ШаблонНазначенияПлатежаВБюджет", ШаблонНазначенияПлатежаВБюджет);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Налог) Тогда
			ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
				Налог,
				ВидНалоговогоОбязательства,
				Организация,
				Дата,
				ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(ПоказательПериода),
				ШаблонНазначенияПлатежаВБюджет);
		Иначе
			ТекстНазначение = "";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		
		СловаНазначенияУплатаЗаТретьихЛиц = Новый Массив;
		
		ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
		Если ПустаяСтрока(ИНН) ИЛИ ПустаяСтрока(СтрЗаменить(ИНН, "0", "")) Тогда
			ИНН = "0";
		КонецЕсли;
		СловаНазначенияУплатаЗаТретьихЛиц.Добавить(ИНН);
		
		КПП = Справочники.Организации.КППНаДату(Организация, Дата);
		Если НЕ (ПустаяСтрока(КПП) ИЛИ КПП = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение()
			ИЛИ ПустаяСтрока(СтрЗаменить(ИНН, "0", ""))) Тогда
			СловаНазначенияУплатаЗаТретьихЛиц.Добавить(КПП);
		КонецЕсли;
		
		ТекстНалогоплательщика = "";
		Если ЗначениеЗаполнено(Налогоплательщик) Тогда
			РеквизитыНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "НаименованиеПолное, ЮридическоеФизическоеЛицо");
			ТекстНалогоплательщика = СокрЛП(РеквизитыНалогоплательщика.НаименованиеПолное);
			Если РеквизитыНалогоплательщика.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если ВРЕГ(Лев(ТекстНалогоплательщика, 3)) = НСтр("ru = 'ИП '") Тогда
					ТекстНалогоплательщика = СтрШаблон(НСтр("ru = '%1 %2'"), Сред(ТекстНалогоплательщика, 4), НСтр("ru = '(ИП)'"));
				ИначеЕсли ВРЕГ(Лев(ТекстНалогоплательщика, 31)) = НСтр("ru = 'ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ '") Тогда
					ТекстНалогоплательщика = СтрШаблон(НСтр("ru = '%1 %2'"), Сред(ТекстНалогоплательщика, 32), НСтр("ru = '(ИП)'"));
				КонецЕсли;
			КонецЕсли;
			
			СловаНазначенияУплатаЗаТретьихЛиц.Добавить(ТекстНалогоплательщика)
		КонецЕсли;
		
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК, Ложь);
		Если ЗначениеЗаполнено(Налог) Тогда
			ШаблонаНазначения = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(Налог);
			Если НЕ ПустаяСтрока(ШаблонаНазначения) Тогда
				СловаНазначенияУплатаЗаТретьихЛиц.Добавить(ШаблонаНазначения)
			Иначе
				СловаНазначенияУплатаЗаТретьихЛиц.Добавить(""); // чтобы завершить строку разделителем.
			КонецЕсли;
		КонецЕсли;
		
		ТекстНазначение = СтрСоединить(СловаНазначенияУплатаЗаТретьихЛиц, "//");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		ТекстНазначение = НСтр("ru = 'Перевод собственных денежных средств'");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Выдача займа'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		
		ТекстНазначение = НСтр("ru = 'Оплата работ по договору подряда'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ТекстНазначение = НСтр("ru = 'Перевод средств между счетами'");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление депонированной заработной платы'");
		РасчетыСРаботниками = Истина;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		ТекстНазначение = НСтр("ru = 'Заработная плата'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление подотчетной суммы'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Наименование, ВидДоговора");
		ТекстНазначение = НСтр("ru = 'Возврат оплаты по договору'");
		Если НЕ ПустаяСтрока(ПараметрыДоговора.Наименование) Тогда
			ТекстНазначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"), 
				ТекстНазначение,
				СокрЛП(ПараметрыДоговора.Наименование));
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		РасчетныйДокумент = Неопределено;
		ТекстНазначение = НСтр("ru = 'Перечисление дивидендов'");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
				РасчетныйДокумент = ДокументОснование;
			ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				ДокОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
				Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
					РасчетныйДокумент = ДокОснование;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(НачислениеДивидендов) Тогда
			РасчетныйДокумент = НачислениеДивидендов;
		КонецЕсли;
		Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			РасчетныйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "РасчетныйПериод");
			ПериодНачисленияСтрокой = ПредставлениеПериода(НачалоГода(РасчетныйПериод),
										КонецКвартала(РасчетныйПериод),
										"ФП = Истина");
			ТекстНазначение = СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстНазначение, ПериодНачисленияСтрокой);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ТекстНазначение = НСтр("ru = 'Оплата по счету'");
		ПараметрыСчета  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
		Если НЕ ПустаяСтрока(ПараметрыСчета.НомерВходящегоДокумента) И НЕ ПустаяСтрока(ПараметрыСчета.ДатаВходящегоДокумента) Тогда
			ТекстНазначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
				ТекстНазначение,
				СокрЛП(ПараметрыСчета.НомерВходящегоДокумента),
				Формат(ПараметрыСчета.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")); // формат даты не локальный, чтобы не влияли настройки компьютера / сервера
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Наименование, ВидДоговора");
		Если ПараметрыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТекстНазначение = НСтр("ru = 'Возврат оплаты по договору'");
		Иначе
			ТекстНазначение = НСтр("ru = 'Оплата по договору'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыДоговора.Наименование) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику И ПараметрыДоговора.Наименование = "Без договора" Тогда
				// Выбран служебный элемент, который означает, что учет по договорам не ведется.
				ТекстНазначение = НСтр("ru = 'Оплата по счету'");
			Иначе
				ТекстНазначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"),
					ТекстНазначение,
					СокрЛП(ПараметрыДоговора.Наименование));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТекстНазначение = НСтр("ru = 'Оплата по счету'");
		
	КонецЕсли;
	
	Если РасчетыСРаботниками Тогда
		
		ТекстПолучатель = "";
		ТекстФИО        = "";
		ТекстПериод     = "";
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
				МесяцУплаты = Формат(ПлатежнаяВедомость.ПериодРегистрации, "ДФ=ММММ");
				ГодУплаты   = Формат(ПлатежнаяВедомость.ПериодРегистрации, "ДФ=гггг");
			Иначе
				МесяцУплаты = Формат(Дата, "ДФ=ММММ");
				ГодУплаты   = Формат(Дата, "ДФ=гггг");
			КонецЕсли;
			
			ТекстПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' за %1 %2 г.'"),
			МесяцУплаты, ГодУплаты);
			
			ТекстНазначение = ТекстНазначение + ТекстПериод;
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			Если СчетКонтрагента.Владелец <> Контрагент Тогда
				ТекстПолучатель = РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.ПолучитьНазначенияПлатежа(Организация, Контрагент, ВидОперации, СчетКонтрагента);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекстПолучатель) Тогда
				
				ТекстПолучатель = НСтр("ru = 'Для зачисления на счет %1'");
				
				Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(Контрагент) Тогда
					ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, 
					Контрагент, Дата, Ложь);
					
					Если НЕ УчетЗарплаты.Просклонять(ДанныеФизЛица.Представление, 2, ТекстФИО, ДанныеФизЛица.Пол) Тогда
						ТекстФИО = "";
					КонецЕсли;
					
				КонецЕсли;
				
				ТекстПолучатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПолучатель, ТекстФИО);
				
			КонецЕсли;
			
			ТекстПолучатель = ТекстПолучатель + Символы.ПС;
			
		КонецЕсли;
		
		ТекстНазначение = ТекстПолучатель + ТекстНазначение;
		
	КонецЕсли;
	
	Возврат ТекстНазначение;
	
КонецФункции

// Возвращает структуру параметрова для функции ТекстНазначенияПлатежа()
//
Функция НовыеПараметрыНазначенияПлатежа() Экспорт
	
	ПараметрыНазначенияПлатежа = Новый Структура;
	ПараметрыНазначенияПлатежа.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("Налогоплательщик",           Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("Дата",                       '00010101');
	ПараметрыНазначенияПлатежа.Вставить("ВидОперации",                Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ПеречислениеВБюджет",        Ложь);
	ПараметрыНазначенияПлатежа.Вставить("ПлатежнаяВедомость",         Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("Контрагент",                 Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("СчетКонтрагента",            ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ДоговорКонтрагента",         Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("КПППлательщика",             "");
	ПараметрыНазначенияПлатежа.Вставить("КодБК",                      "");
	ПараметрыНазначенияПлатежа.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ДокументОснование",          Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("ПоказательПериода",          "");
	ПараметрыНазначенияПлатежа.Вставить("НачислениеДивидендов",       Неопределено);
	
	Возврат ПараметрыНазначенияПлатежа;
	
КонецФункции

Функция НазначениеПлатежаИзмененоВручную(Знач НазначениеПлатежа, НазначениеПлатежаАвто) Экспорт
	
	Если ПустаяСтрока(НазначениеПлатежа) ИЛИ ПустаяСтрока(НазначениеПлатежаАвто) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПозицияСумма = СтрНайти(НазначениеПлатежа, "Сумма");
	
	Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
		ПозицияСумма = СтрНайти(НазначениеПлатежа, "В т.ч. НДС");
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = СтрНайти(НазначениеПлатежа, "Без налога (НДС)");
		КонецЕсли;
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = СтрНайти(НазначениеПлатежа, "НДС не облагается");
		КонецЕсли;
	КонецЕсли;
	
	ТекстНазначение = ?(ПозицияСумма = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияСумма - 1));
	Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
		ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ТекстНазначение) <> СокрЛП(НазначениеПлатежаАвто);
	
КонецФункции

Функция НайтиДокументСписания(ПлатежноеПоручение, ДокументОснование, НаименованиеДокумента = "") Экспорт
	
	ДокументСписания = Документы.СписаниеСРасчетногоСчета.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ДокументСписания = ДокументОснование;
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСписания, "Номер, Дата");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание с расчетного счета № %1 от %2'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
		Возврат ДокументСписания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", ПлатежноеПоручение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокСписания.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК ДокСписания
		|ГДЕ
		|	ДокСписания.ДокументОснование = &ДокументСсылка";
		
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			ДокументСписания = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСписания, "Номер, Дата");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание с расчетного счета № %1 от %2'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
	Иначе
		НаименованиеДокумента = НСтр("ru = 'Ввести документ списания с расчетного счета'");
	КонецЕсли;
	
	Возврат ДокументСписания;
	
КонецФункции

// Получает реквизиты платежа в бюджет "по умолчанию" (необходимые для заполнения платежного документа)
// для переданного налога и организации на указанную дату.
//
// Параметры:
//  Дата                        - Дата - дата платежного документа
//  Организация                 - СправочникСсылка.Организации - организация, уплачивающая налог
//  ПеречислениеВБюджет         - Булево - признак, что это перечисление в бюджет
//  Налог                       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - уплачиваемый налог
//  ВидНалоговогоОбязательства  - ПеречислениеСсылка.ВидыПлатежейВГосБюджет    - вид платежа (налог, взнос, пени, проценты, штрафы)
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган
//  СчетПолучателя              - СправочникСсылка.БанковскиеСчета             - банковский счет получателя (налогового органа)
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(Дата, Организация, ПеречислениеВБюджет, Налог, ВидНалоговогоОбязательства,
	Контекст = Неопределено, РегистрацияВНалоговомОргане = Неопределено, СчетПолучателя = Неопределено) Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		ЗначенияПоУмолчанию.Вставить(Реквизит.Значение);
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		
		ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Налог);
		
		Получатель = Справочники.Контрагенты.ПустаяСсылка();
		Если ЗначениеЗаполнено(СчетПолучателя) Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетПолучателя, "Владелец");
		ИначеЕсли ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			СчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
			Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетПолучателя, Получатель, ВалютаРегламентированногоУчета);
		КонецЕсли;
		
		ПорядокУплатыНалога = Неопределено;
		СвойстваКонтекста = ИсточникДанныхКонтекста(Дата, Организация, ПеречислениеВБюджет, Налог, ВидНалоговогоОбязательства, РегистрацияВНалоговомОргане, СчетПолучателя);
		Если Контекст = Неопределено Тогда
			Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(СвойстваКонтекста);
		КонецЕсли;
		
		РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
		
		Для каждого ОписаниеРеквизита Из РеквизитыПлатежаВБюджет Цикл
			ИмяРеквизита = РеквизитыДокумента[ОписаниеРеквизита.Ключ];
			ЗначенияПоУмолчанию.Вставить(ИмяРеквизита, ОписаниеРеквизита.Значение);
		КонецЦикла;
		
		ЗначенияПоУмолчанию.Вставить("Получатель",     Получатель);
		ЗначенияПоУмолчанию.Вставить("СчетПолучателя", СчетПолучателя);
		
		ПорядокУплатыНалога = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ПорядокУплатыНалога");
		ЗначенияПоУмолчанию.Вставить("ПорядокУплатыНалога", ПорядокУплатыНалога);
		
	КонецЕсли;
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

Функция ИсточникДанныхКонтекста(Дата, Организация, ПеречислениеВБюджет, Налог, ВидНалоговогоОбязательства, РегистрацияВНалоговомОргане, СчетПолучателя) Экспорт
	
	СвойстваКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	СвойстваКонтекста.Период                      = Дата;
	СвойстваКонтекста.Организация                 = Организация;
	СвойстваКонтекста.СчетПолучателя              = СчетПолучателя;
	СвойстваКонтекста.Налог                       = Налог;
	СвойстваКонтекста.ВидНалоговогоОбязательства  = ВидНалоговогоОбязательства;
	СвойстваКонтекста.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	
	Возврат СвойстваКонтекста;
	
КонецФункции

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ДанныеОбъекта, СообщатьОбОшибках = Истина, ПроверятьДублиУИН = Истина, ПроверятьУИН = Истина, Контекст = Неопределено) Экспорт
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ДанныеОбъекта.Дата) Тогда
		// До даты применения 107н не выполняем проверку, так как был переходный период,
		// в течение которого непонятно, выполнение каких правил контролировать
		Возврат Новый Массив;
	КонецЕсли;
	
	РеквизитыДокумента      = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля               = РеквизитПлатежаВБюджет.Ключ;
		ИмяРеквизитаДокумента = РеквизитыДокумента[ИмяПоля];
		РеквизитыПлатежаВБюджет[ИмяПоля] = ДанныеОбъекта[ИмяРеквизитаДокумента];
	КонецЦикла;
	
	Если Контекст = Неопределено Тогда
		Контекст = КонтекстПлатежногоДокумента(ДанныеОбъекта);
	КонецЕсли;
	
	РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, Контекст);
	
	РезультатПроверкиИННиКПП = ПроверитьИННиКППНаСоответствие148н(ДанныеОбъекта, РеквизитыДокумента);
	Для каждого ОписаниеОшибки Из РезультатПроверкиИННиКПП Цикл
		РезультатПроверки.Ошибки.Добавить(ОписаниеОшибки);
	КонецЦикла;
	
	// Проверим дубли УИН
	Если ПроверятьДублиУИН Тогда
		ИнформацияДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(РеквизитыПлатежаВБюджет.ИдентификаторПлатежа, ДанныеОбъекта.Ссылка);
		Для каждого ОписаниеОшибки Из ИнформацияДублиУИН Цикл
			РезультатПроверки.Ошибки.Добавить(ОписаниеОшибки);
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьАктуальностьНалога(ДанныеОбъекта,     РезультатПроверки);
	ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки);
	
	// Выведем результат проверки
	Если СообщатьОбОшибках Тогда
		
		ПозицияИдентификаторПлатежаВМассивеОшибок = -1;
		Для каждого Ошибка Из РезультатПроверки.Ошибки Цикл
			
			ИмяРеквизитаДокумента = РеквизитыДокумента[Ошибка.ИмяПоля];
			Если НЕ ЗначениеЗаполнено(ИмяРеквизитаДокумента) Тогда
				ИмяРеквизитаДокумента = Ошибка.ИмяПоля;
			КонецЕсли;
			
			Если НЕ ПроверятьУИН И ИмяРеквизитаДокумента = "ИдентификаторПлатежа" Тогда
				ПозицияИдентификаторПлатежаВМассивеОшибок = РезультатПроверки.Ошибки.Найти(Ошибка);
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Ошибка.Описание,
				ДанныеОбъекта.Ссылка,
				ИмяРеквизитаДокумента,
				"Объект");
			
		КонецЦикла;
		
		Если ПозицияИдентификаторПлатежаВМассивеОшибок > -1 Тогда
			РезультатПроверки.Ошибки.Удалить(ПозицияИдентификаторПлатежаВМассивеОшибок);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки.Ошибки;
	
КонецФункции

Процедура ОтметитьНезаполненныеЗначенияРеквизитовДляПеречисленияВБюджет(Объект) Экспорт
	
	РеквизитыДокумента      = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля      = РеквизитПлатежаВБюджет.Ключ;
		ИмяРеквизита = РеквизитыДокумента[ИмяПоля];
		РеквизитыПлатежаВБюджет[ИмяПоля] = Объект[ИмяРеквизита];
	КонецЦикла;
	
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	Для каждого Реквизит Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля      = Реквизит.Ключ;
		ИмяРеквизита = РеквизитыДокумента[ИмяПоля];
		Если Объект[ИмяРеквизита] <> РеквизитыПлатежаВБюджет[ИмяПоля] Тогда
			Объект[ИмяРеквизита] = РеквизитыПлатежаВБюджет[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(РеквизитыОбъекта, ИсточникДанных, ИсходныеДанныеЗаполнения = Неопределено) Экспорт
	
	ИсходныеДанныеПереданы = ИсходныеДанныеЗаполнения <> Неопределено;
	Если ИсходныеДанныеПереданы Тогда
		РеквизитыОбъекта.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Иначе
		КПППлательщика = "";
		Если ИсточникДанных.РегистрацияВНалоговомОргане = Неопределено Тогда
			ИсточникДанных.Свойство("КПППлательщика", КПППлательщика);
			ИсточникДанных.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
				ИсточникДанных.Организация, ИсточникДанных.Получатель, КПППлательщика);
		КонецЕсли;
		
		// Если настройка не выбрана явно, попробуем определить по налогу
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			ИсточникДанных.Налог, ИсточникДанных.Организация, ИсточникДанных.РегистрацияВНалоговомОргане);
		Если НастройкаЗаполнения <> Неопределено Тогда
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация, ИсточникДанных.ВидНалоговогоОбязательства);
			
			// КПП плательщика в Платежном поручении отличается от КПП из Регистрации в налоговом органе (и в настройках).
			// Необходимо сохранить КПП из документа.
			Если ИсходныеДанныеЗаполнения.Свойство("КПП")
				И НЕ ПустаяСтрока(КПППлательщика) И КПППлательщика <> ИсходныеДанныеЗаполнения.КПП Тогда
				ИсходныеДанныеЗаполнения.КПП = КПППлательщика;
			КонецЕсли;
			
			// Если изначально заполнение происходит не по Настройке (она найдена по реквизитам документа)
			// и при этом Контрагент в найденной Настройке не отличается от Получателя в документе,
			// то в этом случае необходимо сохранить Счет получателя из документа, если он заполнен.
			Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения.Контрагент) И ИсходныеДанныеЗаполнения.Контрагент = ИсточникДанных.Получатель
				И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения.СчетКонтрагента) И ЗначениеЗаполнено(ИсточникДанных.СчетПолучателя)
				И ИсточникДанных.СчетПолучателя <> ИсходныеДанныеЗаполнения.СчетКонтрагента Тогда
				ИсходныеДанныеЗаполнения.СчетКонтрагента = ИсточникДанных.СчетПолучателя;
			КонецЕсли;
			
			ИсходныеДанныеПереданы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Эмулируем работу формы документа, как если бы то, что в данных заполнения, вводил пользователь
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	
	// Перейдем на терминологию модуля ПлатежиВБюджетКлиентСервер
	ДанныеЗаполнения = Новый Структура;
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = РеквизитыОбъекта[Реквизит.Значение];
		Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
			// ДанныеЗаполнения
			Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
				// Считаем изменениями то, что в данных заполнения
				Если НЕ ИсходныеДанныеЗаполнения.Свойство(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Значение = ИсходныеДанныеЗаполнения[Реквизит.Значение];
				Если Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Считаем изменениями все, что заполнено
				Значение = РеквизитыОбъекта[Реквизит.Значение];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДанныеЗаполнения.Вставить(Реквизит.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Эмулируем работу пользователя
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(ИсточникДанных.Налог);
	
	Если ПустаяСтрока(ЗначенияПоУмолчанию.КодТерритории) Или Не ПравилаЗаполнения.ЗаполнятьКодТерриторииПоРегистрации Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию,, "КодТерритории");
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию);
	КонецЕсли;
	
	ПлатежиВБюджетКлиентСервер.ЗаполнитьДопустимымиЗначениями(РеквизитыПлатежаВБюджет, ДанныеЗаполнения, Контекст);
	
	// Перейдем на терминологию документа
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		Если Реквизит.Ключ = "НазначениеПлатежа" Тогда
			Если ПустаяСтрока(РеквизитыПлатежаВБюджет[Реквизит.Ключ]) Тогда
				Продолжить;
			Иначе
				ПредставлениеНалоговогоПериода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					Контекст, "ПредставлениеНалоговогоПериода");
				Если ЗначениеЗаполнено(ПредставлениеНалоговогоПериода) Тогда
					РеквизитыОбъекта.Вставить("ШаблонНазначенияПлатежаВБюджет",
						СтрЗаменить(СокрЛП(РеквизитыПлатежаВБюджет[Реквизит.Ключ]), ПредставлениеНалоговогоПериода, "<Период>"));
				Иначе
					РеквизитыОбъекта.Вставить("ШаблонНазначенияПлатежаВБюджет", СокрЛП(РеквизитыПлатежаВБюджет[Реквизит.Ключ]));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыОбъекта[Реквизит.Значение] = РеквизитыПлатежаВБюджет[Реквизит.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
		Если ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Контрагент",, "Получатель", ИсходныеДанныеПереданы) Тогда
			ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СчетКонтрагента",, "СчетПолучателя", ИсходныеДанныеПереданы);
		КонецЕсли;
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "КПП", "КПППлательщика",, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Налог",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СтатьяДвиженияДенежныхСредств",,, ИсходныеДанныеПереданы);
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "ПоказательПериода",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СтатусСоставителя",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "НазначениеПлатежа",,, Истина);
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "ШаблонНазначенияПлатежаВБюджет",,, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Контекст платежа используется для вызова методов модуля ПлатежиВБюджетКлиентСервер
//
Функция КонтекстПлатежногоДокумента(Объект) Экспорт
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Период                      = Объект.Дата;
	ИсточникДанных.ПериодПлатежа               = Объект.Дата;
	ИсточникДанных.Организация                 = Объект.Организация;
	ИсточникДанных.СчетПолучателя              = Объект.СчетКонтрагента;
	ИсточникДанных.Налог                       = Объект.Налог;
	ИсточникДанных.ВидНалоговогоОбязательства  = Объект.ВидНалоговогоОбязательства;
	
	Возврат ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
КонецФункции

Процедура ИзменитьПлатежныеРеквизитыПриИзмененииДаты(Объект, ДатаДоИзменения) Экспорт
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	ПеречислениеФизическомуЛицу = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	
	ПеречислениеНаЛичныйСчет = ПеречислениеФизическомуЛицу И НЕ ЗначениеЗаполнено(Объект.Банк);
	
	Получатель = ?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент));
	
	АвтоЗначенияРеквизитовДоИзменения = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		Получатель,
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		ДатаДоИзменения);
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		Получатель,
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	Если Объект.ТекстПлательщика = АвтоЗначенияРеквизитовДоИзменения.ТекстПлательщика
		И Объект.ТекстПлательщика <> АвтоЗначенияРеквизитов.ТекстПлательщика Тогда
		
		Объект.ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
		
	КонецЕсли;
	
	Если Объект.ТекстПолучателя = АвтоЗначенияРеквизитовДоИзменения.ТекстПолучателя
		И Объект.ТекстПолучателя <> АвтоЗначенияРеквизитов.ТекстПолучателя Тогда
		
		Объект.ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
		
	КонецЕсли;
	
	Если Объект.КПППлательщика = АвтоЗначенияРеквизитовДоИзменения.КПППлательщика
		И Объект.КПППлательщика <> АвтоЗначенияРеквизитов.КПППлательщика Тогда
		
		Объект.КПППлательщика = АвтоЗначенияРеквизитов.КПППлательщика;
		
	КонецЕсли;
	
	Если Объект.КПППолучателя = АвтоЗначенияРеквизитовДоИзменения.КПППолучателя
		И Объект.КПППолучателя <> АвтоЗначенияРеквизитов.КПППолучателя Тогда
		
		Объект.КПППолучателя = АвтоЗначенияРеквизитов.КПППолучателя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(Организация, Контрагент, КПППлательщика = "") Экспорт
	
	РегистрацияВНалоговомОргане = Неопределено;
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(КПППлательщика) Тогда
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Организация, КПППлательщика);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(Организация, Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

// Возвращает контрагента и расчетный счет для платежа государственному органу
//
// Параметры:
//  Вид	 - Перечисления.ВидыГосударственныхОрганов - Вид государственного органа
//  Код	 - Строка - Код государственного органа
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучательДляПлатежаГосударственномуОргану(Вид, Код) Экспорт
	
	ПолучательПлатежа = Новый Структура();
	ПолучательПлатежа.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПолучательПлатежа.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Реквизиты = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка)
		ИЛИ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		
		Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
		Иначе
			Возврат ПолучательПлатежа;
		КонецЕсли;
		
		// Контрагент создается или обновляется в следующих случаях:
		//  - в обычном режиме только если сервис вернул данные платежных реквизитов, а контрагента в базе нет.
		//  - в режиме интеграции с банком - всегда, даже если данные о контрагенте нет - нужно создать пустого, пользователь
		//    потом заполнит его вручную.
		Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
			ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучательПлатежа.Контрагент     = Реквизиты.Ссылка;
	ПолучательПлатежа.БанковскийСчет = Реквизиты.ПлатежныеРеквизиты.БанковскийСчет;
	
	Возврат ПолучательПлатежа;
	
КонецФункции

// Определяет предъявлена ли сумма НДС по документу
//
// Параметры:
// ТекущийДокумент - документ, сумму НДС которого нужно вычислить
//
// Возвращаемое значение:
// Булево - если сумма НДС в документе не нулевая
Функция НаличиеСуммыНДС(ТекущийДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПлатежноеПоручение.СуммаНДС) КАК СуммаНДС,
	|	ПлатежноеПоручение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручение.Ссылка";

	Запрос.УстановитьПараметр("СсылкаНаДокумент", ТекущийДокумент);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаНДС > 0;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки)
	
	Если ДанныеОбъекта.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСБюджетом.ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки);
	
КонецПроцедуры

Процедура ПроверитьАктуальностьНалога(ДанныеОбъекта, РезультатПроверки)
	
	Если ДанныеОбъекта.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСБюджетом.ПроверитьАктуальностьНалога(ДанныеОбъекта, РезультатПроверки);
	
КонецПроцедуры

Функция ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, ИмяИсходного, ИмяРеквизита = "", ИмяИсточника = "", ИсходныеДанныеПереданы)
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		ИмяИсточника = ИмяРеквизита;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если ИсходныеДанныеЗаполнения.Свойство(ИмяИсходного) И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения[ИмяИсходного]) Тогда
		Если ИсходныеДанныеПереданы
			ИЛИ (НЕ РеквизитыОбъекта.Свойство(ИмяРеквизита) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОбъекта[ИмяРеквизита]))
			И (НЕ ИсточникДанных.Свойство(ИмяИсточника) ИЛИ НЕ ЗначениеЗаполнено(ИсточникДанных[ИмяИсточника])) Тогда
			РеквизитыОбъекта.Вставить(ИмяРеквизита, ИсходныеДанныеЗаполнения[ИмяИсходного]);
			РеквизитОбъектЗаполненИсходнымиДанными = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

Функция ПроверитьИННиКППНаСоответствие148н(ДанныеОбъекта, РеквизитыДокумента)
	
	Результат = Новый Массив;
	
	Если ДанныеОбъекта.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Лев(ДанныеОбъекта.ИННПлательщика, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""'");
		ОписаниеОшибки = ПлатежиВБюджетКлиентСервер.НовыйОписаниеОшибки(ТекстОшибки, "ПлательщикИНН");
		Результат.Добавить(ОписаниеОшибки);
		РеквизитыДокумента.Вставить("ПлательщикИНН", "Организация");
	КонецЕсли;
	
	Если Лев(ДанныеОбъекта.ИННПолучателя, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""'");
		ОписаниеОшибки = ПлатежиВБюджетКлиентСервер.НовыйОписаниеОшибки(ТекстОшибки, "ПолучательИНН");
		Результат.Добавить(ОписаниеОшибки);
		РеквизитыДокумента.Вставить("ПолучательИНН", "Контрагент");
	КонецЕсли;
	
	Если Лев(ДанныеОбъекта.КПППлательщика, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'КПП плательщика не должен начинаться на 00'");
		ОписаниеОшибки = ПлатежиВБюджетКлиентСервер.НовыйОписаниеОшибки(ТекстОшибки, "ПлательщикКПП");
		Результат.Добавить(ОписаниеОшибки);
		РеквизитыДокумента.Вставить("ПлательщикКПП", "Организация");
	КонецЕсли;
	
	Если Лев(ДанныеОбъекта.КПППолучателя, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'КПП получателя не должен начинаться на 00'");
		ОписаниеОшибки = ПлатежиВБюджетКлиентСервер.НовыйОписаниеОшибки(ТекстОшибки, "ПолучательКПП");
		Результат.Добавить(ОписаниеОшибки);
		РеквизитыДокумента.Вставить("ПолучательКПП", "Контрагент");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьПроведен(ПараметрыОтложенногоОбновления = Неопределено) Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПроведен(Метаданные.Документы.ПлатежноеПоручение, ПараметрыОтложенногоОбновления);
	
КонецПроцедуры

Процедура УстановитьВидОперации(Параметры) Экспорт
	
	// Обработчик обновления заменен на монопольный УстановитьВидОперацииМонопольно()
	
	УстановитьВидОперацииМонопольно();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьВидОперацииМонопольно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПлатежноеПоручение КАК ПлатежноеПоручение,
	|	МАКСИМУМ(ВложенныйЗапрос.ВидОперации) КАК ВидОперации,
	|	МАКСИМУМ(ВложенныйЗапрос.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	МАКСИМУМ(ВложенныйЗапрос.ПлатежнаяВедомость) КАК ПлатежнаяВедомость,
	|	МАКСИМУМ(ВложенныйЗапрос.ДокументОснование) КАК ДокументОснование,
	|	МАКСИМУМ(ВложенныйЗапрос.СконвертированныйПолучатель) КАК СконвертированныйПолучатель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|		СписаниеСРасчетногоСчета.ВидОперации КАК ВидОперации,
	|		СписаниеСРасчетногоСчета.УдалитьФизЛицо КАК ФизическоеЛицо,
	|		СписаниеСРасчетногоСчета.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|		ПлатежноеПоручение.ДокументОснование КАК ДокументОснование,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СписаниеСРасчетногоСчета.Контрагент
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК СконвертированныйПолучатель
	|	ИЗ
	|		Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ПО ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование
	|	ГДЕ
	|		ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручение.Ссылка,
	|		СписаниеСРасчетногоСчета.ВидОперации,
	|		СписаниеСРасчетногоСчета.УдалитьФизЛицо,
	|		СписаниеСРасчетногоСчета.ПлатежнаяВедомость,
	|		ПлатежноеПоручение.ДокументОснование,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СписаниеСРасчетногоСчета.Контрагент
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ПО ПлатежноеПоручение.ДокументОснование = СписаниеСРасчетногоСчета.Ссылка
	|	ГДЕ
	|		ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПлатежноеПоручение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.ПлатежноеПоручение.ПолучитьОбъект();
		
		БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(ДокументОбъект.СчетКонтрагента);
		
		Если ЗначениеЗаполнено(Выборка.ВидОперации) Тогда
			
			ДокументОбъект.ВидОперации        = Выборка.ВидОперации;
			ДокументОбъект.ПлатежнаяВедомость = Выборка.ПлатежнаяВедомость;
			
		Иначе
			
			Если ДокументОбъект.ПеречислениеВБюджет Тогда
				ДокументОбъект.ВидОперации = УчетДенежныхСредствКлиентСервер.ВидОперацииДокументаПеречисленияВБюджет(ДокументОбъект.КодБК);
			Иначе
			
				Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
					ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
					
					Если БалансовыйСчет = "40817" Тогда
						ДокументОбъект.ВидОперации        = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
						ДокументОбъект.ПлатежнаяВедомость = ДокументОбъект.ДокументОснование;
					Иначе
						ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
					КонецЕсли;
					
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					Если ДокументОбъект.ИННПлательщика = ДокументОбъект.ИННПолучателя Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
					КонецЕсли;
					
					ДокументОбъект.ВидОперации = ВидОперацииДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ДокументОбъект.ВидОперации) Тогда
			
			Если БалансовыйСчет = "40817" Тогда
				
				Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
					
					Если СтрДлина(СокрЛП(ДокументОбъект.Контрагент.ИНН)) = 12
						И СтрДлина(СокрЛП(ДокументОбъект.ИННПолучателя)) = 12 Тогда
						
						ФизическоеЛицо = ?(ЗначениеЗаполнено(Выборка.ФизическоеЛицо),Выборка.ФизическоеЛицо,Выборка.СконвертированныйПолучатель);
						Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
							
							ДокументОбъект.Контрагент      = ФизическоеЛицо;
							Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
								
								СчетНайден = Ложь;
								ФизическоеЛицоСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", ДокументОбъект.СчетКонтрагента.НомерСчета);
								Если ЗначениеЗаполнено(ФизическоеЛицоСчет) Тогда
									Если ФизическоеЛицоСчет.Владелец = ФизическоеЛицо Тогда
										ДокументОбъект.СчетКонтрагента = ФизическоеЛицоСчет;
										СчетНайден = Истина;
									КонецЕсли;
								КонецЕсли;
								
								Если НЕ СчетНайден Тогда
									Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
										СчетОбъект = ДокументОбъект.СчетКонтрагента.ПолучитьОбъект();
										Если ТипЗнч(СчетОбъект.Владелец) <> Тип("СправочникСсылка.Организации") Тогда
											СчетОбъект.Владелец = ФизическоеЛицо;
											ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
										Иначе
											ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
						КонецЕсли;
					Иначе
						ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
					КонецЕсли;
				Иначе
					ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
				КонецЕсли;
			Иначе
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			ДокументОбъект.Контрагент      = Неопределено;
			СчетОрганизации = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", ДокументОбъект.СчетКонтрагента.НомерСчета);
			Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
					СчетОбъект = ДокументОбъект.СчетКонтрагента.ПолучитьОбъект();
					СчетОбъект.Владелец = ДокументОбъект.Организация;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ДокументОбъект.ПеречислениеВБюджет = Истина;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет новые реквизиты "Налог" и "ВидНалоговогоОбязательства"
//
Процедура ЗаполнитьРеквизитыНалогВидНалоговогоОбязательства() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
		|	И (ПлатежноеПоручение.Налог = ЗНАЧЕНИЕ(Справочник.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка)
		|			ИЛИ ПлатежноеПоручение.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка))";
	
	НалогПоКБК = Новый Соответствие;
	ВидыНалогов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
			
			Если Не ПустаяСтрока(Объект.КодБК) Тогда
				Налог = НалогПоКБК[Объект.КодБК];
				Если Налог = Неопределено Тогда
					Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Объект.КодБК);
					НалогПоКБК.Вставить(Объект.КодБК, Налог);
				КонецЕсли;
				Если Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Объект.Организация) Тогда
					Объект.Налог = Налог;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
			
			Если ЗначениеЗаполнено(Объект.Налог) Тогда
				ВидНалога = ВидыНалогов[Объект.Налог];
				Если ВидНалога = Неопределено Тогда
					ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
					ВидыНалогов.Вставить(Объект.Налог, ВидНалога);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Объект.КодБК) Тогда
				Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
					Объект.КодБК, Объект.Дата, ВидНалога);
			Иначе
				Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует значение реквизита "ВидНалоговогоОбязательства" при уплате страховых взносов
// в соответствии с Приказом Минфина №90н от 08.06.2015
//
Процедура ЗаполнитьВидНалоговогоОбязательстваСтраховыхВзносов() Экспорт
	
	НачалоДействияПриказа90н = ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н();
	
	ФиксированныеВзносыПФР = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	
	МассивВзносов = Новый Массив;
	МассивВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ФиксированныеВзносыПФР));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоДействияПриказа90н", ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н());
	Запрос.УстановитьПараметр("МассивВзносов",            МассивВзносов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка,
	|	ПлатежноеПоручение.Дата КАК Период,
	|	ПлатежноеПоручение.КодБК КАК КБК,
	|	ПлатежноеПоручение.Налог.ВидНалога КАК ВидНалога
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Дата >= &НачалоДействияПриказа90н
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И ПлатежноеПоручение.Налог В(&МассивВзносов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ВидНалоговогоОбязательства = 
			Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(Выборка.КБК, Выборка.Период, Выборка.ВидНалога);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежное поручение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлатежноеПоручение";
	КомандаПечати.Представление = НСтр("ru = 'Платежное поручение'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Платежное поручение""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатиПлатежногоПоручения(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыПлатежногоПоручения();
	
	ДанныеДляПечати = Запрос.Выполнить().Выгрузить();
	ДанныеДляПечати.Колонки.Добавить("НомерДляПечати", Новый ОписаниеТипов("Строка"));
	ДанныеДляПечати.Колонки.Добавить("ДатаДляПечати", Новый ОписаниеТипов("Строка"));
	
	Для каждого ПлатежноеПоручение Из ДанныеДляПечати Цикл
		
		ПлатежноеПоручение.НомерДляПечати = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(ПлатежноеПоручение.Номер);
		
		МесяцПрописью = ПлатежноеПоручение.СчетОрганизацииМесяцПрописью;
		ФорматДаты    = "ДФ=" + ?(ЗначениеЗаполнено(МесяцПрописью) И МесяцПрописью, "'дд ММММ гггг'", "'дд.ММ.гггг'");
		ПлатежноеПоручение.ДатаДляПечати = Формат(ПлатежноеПоручение.Дата, ФорматДаты);
		
		ПлатежноеПоручение.НаименованиеБанкаПлательщика = СокрЛП(ПлатежноеПоручение.НаименованиеБанкаПлательщика);
		ПлатежноеПоручение.НомерСчетаПлательщика        = СокрЛП(ПлатежноеПоручение.НомерСчетаПлательщика);
		ПлатежноеПоручение.БикБанкаПлательщика          = СокрЛП(ПлатежноеПоручение.БикБанкаПлательщика);
		ПлатежноеПоручение.СчетБанкаПлательщика         = СокрЛП(ПлатежноеПоручение.СчетБанкаПлательщика);
		
		ПлатежноеПоручение.НаименованиеБанкаПолучателя  = СокрЛП(ПлатежноеПоручение.НаименованиеБанкаПолучателя);
		ПлатежноеПоручение.НомерСчетаПолучателя         = СокрЛП(ПлатежноеПоручение.НомерСчетаПолучателя);
		ПлатежноеПоручение.БикБанкаПолучателя           = СокрЛП(ПлатежноеПоручение.БикБанкаПолучателя);
		ПлатежноеПоручение.СчетБанкаПолучателя          = СокрЛП(ПлатежноеПоручение.СчетБанкаПолучателя);
		
		ПлатежноеПоручение.НазначениеПлатежа = СокрЛП(ПлатежноеПоручение.НазначениеПлатежа);
		
		Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
			
			ОтметитьНезаполненныеЗначенияРеквизитовДляПеречисленияВБюджет(ПлатежноеПоручение);
			ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ПлатежноеПоручение);
			
		КонецЕсли;
		
		Если ПлатежноеПоручение.Дата < ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
			// Идентификатор можно указывать в печатной форме платежного поручения с 31.03.2014
			ПлатежноеПоручение.ИдентификаторПлатежа = "";
		ИначеЕсли ПлатежноеПоручение.ПеречислениеВБюджет ИЛИ ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			Если ПлатежноеПоручение.Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У() Тогда
				// Согласно Указанию ЦБ РФ от 06.11.2015 № 3844-У
				// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П"
				// значение реквизита 110 не указывается.
				ПлатежноеПоручение.ПоказательТипа = "";
			ИначеЕсли ПлатежноеПоручение.Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н() Тогда
				// Согласно приказу Минфина от 30.10.2014 N 126н с 01.01.2015 показатель типа (поле "110") не заполняется.
				// Но согласно Положению ЦБ РФ от 19.06.2012 N 383-П
				// "Распоряжения, в которых реквизит "101" имеет значение, подлежат контролю наличия значений реквизитов 102 - 110".
				// Поэтому всегда указываем в поле "110" - "0".
				ПлатежноеПоручение.ПоказательТипа = "0";
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ПлатежноеПоручение.КодВыплат) Тогда
			// При переводе денежных средств физическим лицам в целях осуществления выплат
			// за счет средств бюджетов бюджетной системы Российской Федерации, предусмотренных частями 5.5 и 5.6 статьи 30.5
			// Федерального закона N 161-ФЗ в поле "110" (код выплат) указывается значение "1".
			// В иных случаях значение реквизита не указывается.
			ПлатежноеПоручение.ПоказательТипа = ПлатежноеПоручение.КодВыплат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыПлатежногоПоручения()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка,
	|	ПлатежноеПоручение.ВерсияДанных,
	|	ПлатежноеПоручение.ПометкаУдаления,
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.Проведен,
	|	ПлатежноеПоручение.ДокументОснование,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.Организация,
	|	ПлатежноеПоручение.СчетОрганизации,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Банк <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.Банк
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ПлатежноеПоручение.НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	ПлатежноеПоручение.ВалютаДокумента,
	|	ПлатежноеПоручение.ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя,
	|	ПлатежноеПоручение.Комментарий,
	|	ПлатежноеПоручение.ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ПлатежноеПоручение.Ответственный,
	|	ПлатежноеПоручение.ПодразделениеОрганизации,
	|	ПлатежноеПоручение.ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ВидПеречисленияВБюджет,
	|	ПлатежноеПоручение.Налог,
	|	ПлатежноеПоручение.ВидНалоговогоОбязательства,
	|	ПлатежноеПоручение.СтавкаНДС,
	|	ПлатежноеПоручение.СуммаНДС,
	|	ПлатежноеПоручение.Представление,
	|	ПлатежноеПоручение.МоментВремени,
	|	"""" КАК СрокПлатежа,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек,
	|	ПлатежноеПоручение.СчетОрганизации.МесяцПрописью,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Код
	|	КОНЕЦ КАК БикБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Наименование
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Наименование
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПолучателя,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ПлатежноеПоручение.КодВыплат КАК КодВыплат
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует печатную форму
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиПлатежногоПоручения(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Для каждого ПлатежноеПоручение Из ДанныеДляПечати Цикл
		
		ЕстьОшибки = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПлатежноеПоручение");
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Обл.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № %1'"), ПлатежноеПоручение.НомерДляПечати);
		Обл.Параметры.ДатаДокумента = ПлатежноеПоручение.ДатаДляПечати;
		
		// Сумма платежного документа
		СуммаБезКопеек  = ЗначениеЗаполнено(ПлатежноеПоручение.СчетОрганизацииСуммаБезКопеек) И ПлатежноеПоручение.СчетОрганизацииСуммаБезКопеек;
		Обл.Параметры.СуммаЧислом   = УчетДенежныхСредствБП.ФорматироватьСуммуПлатежногоДокумента(
		                              ПлатежноеПоручение.СуммаДокумента, СуммаБезКопеек);
		Обл.Параметры.СуммаПрописью = УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
		                              ПлатежноеПоручение.СуммаДокумента, ПлатежноеПоручение.ВалютаДокумента, СуммаБезКопеек);
		
		// Реквизиты плательщика
		Обл.Параметры.ИННПлательщика   = "ИНН " + ПлатежноеПоручение.ИННПлательщика;
		Обл.Параметры.КПППлательщика   = "КПП " + ПлатежноеПоручение.КПППлательщика;
		Обл.Параметры.ТекстПлательщика = ПлатежноеПоручение.ТекстПлательщика;
		
		// Реквизиты банка плательщика
		Обл.Параметры.НаименованиеБанкаПлательщика = ПлатежноеПоручение.НаименованиеБанкаПлательщика+" "+ПлатежноеПоручение.ГородБанкаПлательщика;
		Обл.Параметры.НомерСчетаПлательщика        = ПлатежноеПоручение.НомерСчетаПлательщика;
		Обл.Параметры.БикБанкаПлательщика          = ПлатежноеПоручение.БикБанкаПлательщика;
		Обл.Параметры.СчетБанкаПлательщика         = ПлатежноеПоручение.СчетБанкаПлательщика;
		
		// Реквизиты получателя
		Обл.Параметры.ИННПолучателя   = "ИНН " + ПлатежноеПоручение.ИННПолучателя;
		Обл.Параметры.КПППолучателя   = "КПП " + ПлатежноеПоручение.КПППолучателя;
		Обл.Параметры.ТекстПолучателя = ПлатежноеПоручение.ТекстПолучателя;
		
		// Реквизиты банка получателя
		Обл.Параметры.НаименованиеБанкаПолучателя = ПлатежноеПоручение.НаименованиеБанкаПолучателя+" "+ПлатежноеПоручение.ГородБанкаПолучателя;
		Обл.Параметры.НомерСчетаПолучателя        = ПлатежноеПоручение.НомерСчетаПолучателя;
		Обл.Параметры.БикБанкаПолучателя          = ПлатежноеПоручение.БикБанкаПолучателя;
		Обл.Параметры.СчетБанкаПолучателя         = ПлатежноеПоручение.СчетБанкаПолучателя;
		
		// Прочие реквизиты
		Обл.Параметры.ВидПлатежа           = ПлатежноеПоручение.ВидПлатежа;
		Обл.Параметры.НазначениеПлатежа    = ПлатежноеПоручение.НазначениеПлатежа;
		Обл.Параметры.Очередность          = ПлатежноеПоручение.ОчередностьПлатежа;
		Обл.Параметры.СрокПлатежа          = ПлатежноеПоручение.СрокПлатежа;
		Обл.Параметры.ИдентификаторПлатежа = СокрЛП(ПлатежноеПоручение.ИдентификаторПлатежа);
		
		// Реквизиты для перечисления налогов
		
		Если ПлатежноеПоручение.ПеречислениеВБюджет
			ИЛИ ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			ПоляЗаполнения = "СтатусСоставителя, КодБК, КодОКАТО, ПоказательОснования, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода";
			
			ЗаполнитьЗначенияСвойств(Обл.Параметры, ПлатежноеПоручение, ПоляЗаполнения);
			
			// Если УИН не заполнен и в поле 22 выводится "0", то выведем его шрифтом с размером "9",
			// если же УИН заполнен, то поле 22 выводится шрифтом размером "6"
			Если НЕ ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(ПлатежноеПоручение.ИдентификаторПлатежа) Тогда
				ПолеКод = Обл.Область("ИдентификаторПлатежа");
				ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт,, 9);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ПлатежноеПоручение.КодВыплат) Тогда
			ЗаполнитьЗначенияСвойств(Обл.Параметры, ПлатежноеПоручение, "ПоказательТипа");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Обл);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ПлатежноеПоручение.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПлатежноеПоручение формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлатежноеПоручение",
			НСтр("ru = 'Платежное поручение'"),
			ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати),,
			"ОбщийМакет.ПФ_MXL_ПлатежноеПоручение");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	
	ПолеЗапросаНазначениеПлатежа =
	"ВЫБОР
	|		КОГДА Таб.НазначениеПлатежа = """"
	|			ТОГДА Таб.Контрагент
	|		КОГДА Таб.Контрагент = НЕОПРЕДЕЛЕНО
	|			ТОГДА Таб.НазначениеПлатежа
	|		КОГДА Таб.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Таб.НазначениеПлатежа
	|		ИНАЧЕ ПОДСТРОКА(Таб.Контрагент.Наименование, 1, 100) + "" / "" + ПОДСТРОКА(Таб.НазначениеПлатежа, 1, 210)
	|	КОНЕЦ";
	
	Результат.Вставить("Информация", ПолеЗапросаНазначениеПлатежа);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеФормы

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Налоги") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокументаНалоговая";
	
	ИначеЕсли ВидФормы = "ФормаОбъекта"
		И ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		
		УстановитьФормуНалоговогоДокументаПриВключеннойИнтеграцииСБанком(Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФормуНалоговогоДокументаПриВключеннойИнтеграцииСБанком(Параметры, ВыбраннаяФорма, СтандартнаяОбработка)
	
	ВидОперации = ВидОперацииДокументаИзПараметровПолученияФормы(Параметры);
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ВыбраннаяФорма = "ФормаДокументаНалоговая";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидОперацииДокументаИзПараметровПолученияФормы(Параметры)
	
	ВидОперации = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВидОперации");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И Параметры.Свойство("ЗначенияЗаполнения")
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

#КонецОбласти

#КонецЕсли