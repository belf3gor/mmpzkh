////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Параметры.Отбор.Свойство("Организация",    ОтборОрганизация);
		Параметры.Отбор.Свойство("БанковскийСчет", ОтборБанковскийСчет);
		Параметры.Отбор.Свойство("Дата",           ОтборДата);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборДата) Тогда
		ОтборДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			ОтборБанковскийСчет,
			ОтборОрганизация,
			ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ОбновитьСписокПодбора();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму"
		И (ТипЗнч(Источник) = Тип("ДокументСсылка.ПлатежноеПоручение")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")) Тогда
		
		ОбработкаОповещенияСервер(Источник);
		
		Если Параметр = ЭтаФорма Тогда
			Оповестить(, ВладелецФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьСчетОрганизации(
		ОтборБанковскийСчет,
		ОтборОрганизация,
		ВалютаРегламентированногоУчета);
	ОбновитьСписокПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетПриИзменении(Элемент)
	
	ОбновитьСписокПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВыпискиПриИзменении(Элемент)
	
	// Проверяем допустимое значение даты:
	Если ОтборДата >= '99991231' Тогда
		ОтборДата = ТекущаяДата();
	КонецЕсли;
	
	ОбновитьСписокПодбора();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СписокПлатежныхПоручений

&НаКлиенте
Процедура СписокПлатежныхПорученийПриИзменении(Элемент)
	
	Если Элементы.СписокПлатежныхПоручений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДТекущейСтроки = Элементы.СписокПлатежныхПоручений.ТекущаяСтрока;
	ТекущаяОтметка = Элементы.СписокПлатежныхПоручений.ТекущиеДанные.Отметка;
	Для каждого ИДСтроки Из Элементы.СписокПлатежныхПоручений.ВыделенныеСтроки Цикл
		Если ИДСтроки <> ИДТекущейСтроки Тогда
			ВыделеннаяСтрока = СписокПлатежныхПоручений.НайтиПоИдентификатору(ИДСтроки);
			ВыделеннаяСтрока.Отметка = ТекущаяОтметка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныхПорученийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДокумента = СписокПлатежныхПоручений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаДокумента <> Неопределено Тогда
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", Новый Структура("Ключ", СтрокаДокумента.Ссылка), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныхПорученийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Элемент.ТекущийЭлемент.Имя <> "СписокПлатежныхПорученийОтметка";
	Если Отказ Тогда
		СтрокаДокумента = Элементы.СписокПлатежныхПоручений.ТекущиеДанные;
		Если СтрокаДокумента <> Неопределено Тогда
			ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", Новый Структура("Ключ", СтрокаДокумента.Ссылка), ЭтаФорма);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СписокСписанийСРС

&НаКлиенте
Процедура СписокСписанийСРСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДокумента = СписокСписанийСРС.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаДокумента <> Неопределено Тогда
		ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта", Новый Структура("Ключ", СтрокаДокумента.Ссылка), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокПодбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиИнвертировать(Команда)
	
	УстановитьОтметки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиСнять(Команда)
	
	УстановитьОтметки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиУстановить(Команда)
	
	УстановитьОтметки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокиВыписки(Команда)
	
	ТекстПредупреждения = "";
	СформироватьСтрокиВыпискиСервер(ТекстПредупреждения);
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
	Оповестить("ОбновитьФорму",, ПредопределенноеЗначение("Документ.СписаниеСРасчетногоСчета.ПустаяСсылка"));
	Оповестить("ИзменениеВыписки");
	ОповеститьОбИзменении(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// СписокПлатежныхПорученийОрганизация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокПлатежныхПорученийОрганизация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СписокСписанийСРС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокСписанийСРС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СписокСписанийСРС.ОшибкаПриПроведении", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);


	// СписокСписанийСРСОрганизация, СписокПлатежныхПорученийСчетОрганизации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокСписанийСРСОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокПлатежныхПорученийСчетОрганизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборБанковскийСчет", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПодбора()
	
	ДатаНачало = НачалоДня(ОтборДата) - 864000;
	ДатаКонец  = КонецДня(ОтборДата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     ОтборОрганизация);
	Запрос.УстановитьПараметр("СчетОрганизации", ОтборБанковскийСчет);
	Если ЗначениеЗаполнено(ОтборДата) Тогда
		Запрос.УстановитьПараметр("ДатаНачало",  ДатаНачало);
		Запрос.УстановитьПараметр("ДатаКонец",   ДатаКонец);
	КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Отметка,
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.ПометкаУдаления,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Проведен,
	|	ПлатежноеПоручение.Организация,
	|	ПлатежноеПоручение.СчетОрганизации,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|			ТОГДА ПлатежноеПоручение.Организация
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	ПлатежноеПоручение.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА ПлатежноеПоручение.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерКартинки,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено) КАК Оплачено
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|	" + ?(ЗначениеЗаполнено(ОтборДата), "И ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаКонец", "") + "
	|	" + ?(ЗначениеЗаполнено(ОтборОрганизация) , "И ПлатежноеПоручение.Организация = &Организация", "") + "
	|	" + ?(ЗначениеЗаполнено(ОтборБанковскийСчет) , "И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	СписокПлатежныхПоручений.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если СписокПлатежныхПоручений.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
			ТекстПодсказки = НСтр("ru = 'С %1 по %2 нет неоплаченных документов по организации %3 и счету в банке ""%4""'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'С %1 по %2 нет неоплаченных документов по организации %3'");
		КонецЕсли;
		
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПодсказки,
			Формат(ДатаНачало, "ДЛФ=D"),
			Формат(ДатаКонец,  "ДЛФ=D"),
			ОтборОрганизация,
			ОтборБанковскийСчет);
		
		Элементы.СписокПлатежныхПорученийОтметкиУстановить.Доступность    = Ложь;
		Элементы.СписокПлатежныхПорученийОтметкиСнять.Доступность         = Ложь;
		Элементы.СписокПлатежныхПорученийОтметкиИнвертировать.Доступность = Ложь;
	Иначе
		ТекстПодсказки = НСтр("ru='Отметьте флажками документы, которые нужно провести по выписке банка'");
		
		Элементы.СписокПлатежныхПорученийОтметкиУстановить.Доступность    = Истина;
		Элементы.СписокПлатежныхПорученийОтметкиСнять.Доступность         = Истина;
		Элементы.СписокПлатежныхПорученийОтметкиИнвертировать.Доступность = Истина;
	КонецЕсли;
	
	Элементы.СписокПлатежныхПоручений.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметки(ТипОтметки)
	
	Для каждого СтрокаСписка Из СписокПлатежныхПоручений Цикл
		Если ТипОтметки = Неопределено Тогда
			СтрокаСписка.Отметка = НЕ СтрокаСписка.Отметка;
		Иначе
			СтрокаСписка.Отметка = ТипОтметки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиВыпискиСервер(ТекстПредупреждения)
	
	ОтмеченныеДокументы = СписокПлатежныхПоручений.НайтиСтроки(Новый Структура("Отметка", Истина));
	Если ОтмеченныеДокументы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Нет отмеченных документов'");
		Возврат;
	КонецЕсли;
	
	СписокСписанийСРС.Очистить();
	
	// Определяем существующие документы списаний с расчетного счета:
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПлатежныхПоручений", СписокПлатежныхПоручений.Выгрузить(ОтмеченныеДокументы,
		"Отметка, Ссылка, Номер, Организация, ДокументОснование"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокПлатежныхПоручений.Отметка,
	|	СписокПлатежныхПоручений.Ссылка КАК Ссылка,
	|	СписокПлатежныхПоручений.Номер КАК Номер,
	|	СписокПлатежныхПоручений.Организация КАК Организация,
	|	ВЫРАЗИТЬ(СписокПлатежныхПоручений.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета) КАК ДокументОснование
	|ПОМЕСТИТЬ СписокПП
	|ИЗ
	|	&СписокПлатежныхПоручений КАК СписокПлатежныхПоручений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокПП.Отметка КАК Отметка,
	|	СписокПП.Ссылка КАК Ссылка,
	|	СписокПП.Организация КАК Организация,
	|	СписокПП.Номер КАК Номер,
	|	МАКСИМУМ(ЕСТЬNULL(СписаниеСРасчетногоСчета.Ссылка, ВЫРАЗИТЬ(СписокПП.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета))) КАК ДокументСписания
	|ИЗ
	|	СписокПП КАК СписокПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ПО СписокПП.Организация = СписаниеСРасчетногоСчета.Организация
	|			И СписокПП.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование
	|			И (СписокПП.ДокументОснование = ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокПП.Отметка,
	|	СписокПП.Ссылка,
	|	СписокПП.Организация,
	|	СписокПП.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументовВсего     = 0;
	ДокументовПроведено = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументовВсего = ДокументовВсего + 1;
		Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
			ДокументСписания = Выборка.ДокументСписания.ПолучитьОбъект();
			ДокументСписания.ПометкаУдаления = Ложь;
		Иначе
			ДокументСписания = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
			ДокументСписания.Заполнить(Выборка.Ссылка);
			ДокументСписания.Дата = ОтборДата;
			Если НЕ ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах") Тогда
				ДокументСписания.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ДокументСписания.НеПодтвержденоВыпискойБанка = Ложь;
		
		СтрокаСписания = СписокСписанийСРС.Добавить();
		Если ДокументСписания.ЭтоНовый() Тогда
			ДокументСписания.Записать(РежимЗаписиДокумента.Запись);
			СтрокаСписания.Номер  = ДокументСписания.Номер;
			СтрокаСписания.Ссылка = ДокументСписания.Ссылка;
		Иначе
			СтрокаСписания.Номер  = Выборка.Номер;
			СтрокаСписания.Ссылка = Выборка.ДокументСписания;
		КонецЕсли;
		
		Попытка
			ДокументСписания.Записать(РежимЗаписиДокумента.Проведение);
			ДокументовПроведено = ДокументовПроведено + 1;
			СтрокаСписания.НомерКартинки = 1;
		Исключение
			СтрокаСписания.ОшибкаПриПроведении = Истина;
			СтрокаСписания.НомерКартинки = 0;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ДокументовВсего <> ДокументовПроведено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось провести %1 документов из %2'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения, ДокументовВсего - ДокументовПроведено, ДокументовВсего);
		ТекстПодсказки =
			НСтр("ru = 'Сформировано документов списания: %1, не удалось провести: %2. Непроведенные документы выделены красным цветом.'");
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, ДокументовВсего, ДокументовПроведено);
	Иначе
		ТекстПодсказки = НСтр("ru = 'Сформировано документов списания: %1, ошибок не обнаружено.'");
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, ДокументовВсего);
	КонецЕсли;
	
	Элементы.СписокСписанийСРС.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	Элементы.СформироватьСтрокиВыписки.Видимость              = Ложь;
	Элементы.СформироватьСтрокиВыписки.КнопкаПоУмолчанию      = Ложь;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию                   = Истина;
	Элементы.ПанельСписковДокументов.ТекущаяСтраница          = Элементы.СтраницаСписанияСРасчетногоСчета;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияСервер(Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		СтрокаДокумента = СписокПлатежныхПоручений.НайтиСтроки(Новый Структура("Ссылка", Источник));
		Если СтрокаДокумента.Количество() > 0 Тогда
			СтрокаДокумента = СтрокаДокумента[0];
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
				"Дата, Номер, Проведен, Ссылка, Организация, СчетОрганизации, Контрагент, СуммаДокумента, ДокументОснование");
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыДокумента);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		ДокументовСОшибкой = 0;
		Если ЗначениеЗаполнено(Источник) Тогда
			СтрокаДокументаПоИсточнику = СписокСписанийСРС.НайтиСтроки(Новый Структура("Ссылка", Источник));
			Если СтрокаДокументаПоИсточнику.Количество() > 0 Тогда
				СтрокаДокумента = СтрокаДокументаПоИсточнику[0];
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
					"Дата, Номер, Проведен, Ссылка, Организация, СчетОрганизации, Контрагент, СуммаДокумента, ВидОперации");
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыДокумента);
				
				Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
					СтрокаДокумента.Контрагент = СтрокаДокумента.Организация;
				КонецЕсли;
				
				СтрокаДокумента.ОшибкаПриПроведении = НЕ РеквизитыДокумента.Проведен;
				ДокументовСОшибкой = СписокСписанийСРС.НайтиСтроки(Новый Структура("ОшибкаПриПроведении", Истина)).Количество();
			КонецЕсли;
		Иначе
			Для каждого СтрокаДокумента Из СписокСписанийСРС Цикл
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумента.Ссылка,
					"Дата, Номер, Проведен, Ссылка, Организация, СчетОрганизации, Контрагент, СуммаДокумента, ВидОперации");
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыДокумента);
				
				Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
					СтрокаДокумента.Контрагент = СтрокаДокумента.Организация;
				КонецЕсли;
				
				СтрокаДокумента.ОшибкаПриПроведении =    НЕ РеквизитыДокумента.Проведен;
				ДокументовСОшибкой = ДокументовСОшибкой + ?(РеквизитыДокумента.Проведен, 0, 1);
			КонецЦикла;
		КонецЕсли;
		
		ДокументовВсего = СписокСписанийСРС.Количество();
		Если ДокументовВсего > 0 Тогда
			ДокументовПроведено = ДокументовВсего - ДокументовСОшибкой;
			ТекстПодсказки = НСтр("ru = 'Сформировано документов списания %1, из них проведено: %2'");
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, ДокументовВсего, ДокументовПроведено);
			Если ДокументовСОшибкой > 0 Тогда
				ШаблонПодсказки = НСтр("ru = '%1, не удалось провести: %2. Документы с ошибками выделены красным цветом'");
				ТекстПодсказки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки,
					ТекстПодсказки, ДокументовСОшибкой);
			КонецЕсли;
			
			Элементы.СписокСписанийСРС.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация, Знач ВалютаРеглУчета)
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ВалютаРеглУчета);
	
КонецПроцедуры
