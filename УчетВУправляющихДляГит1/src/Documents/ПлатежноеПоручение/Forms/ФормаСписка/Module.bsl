
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ИспользуетсяПодсистемаЗарплата = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		ИЛИ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ТипИнформации = "Контрагент";
	НастроитьВнешнийВидОтбораКонтрагент();
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;
	
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		СтруктураОтбора.Свойство("СчетОрганизации", ОтборСчетОрганизации);
		СтруктураОтбора.Свойство("Контрагент",      ОтборКонтрагент);
		СтруктураОтбора.Свойство("ДатаОтбора",      ОтборДатаОтбора);
		
		Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
			Если ТипЗнч(ОтборКонтрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если Элементы.ТипИнформации.СписокВыбора.НайтиПоЗначению("Сотрудник") <> Неопределено Тогда
					ТипИнформации = "Сотрудник";
				Иначе
					ТипИнформации = "Контрагент";
					ОтборКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ОтборКонтрагентИспользование      = ЗначениеЗаполнено(ОтборКонтрагент);
		ОтборДатаОтбораИспользование      = ЗначениеЗаполнено(ОтборДатаОтбора);
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация                  = ОсновнаяОрганизация;
		УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	
	ИнтеграцияСБанкамиПодключена = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена();
	Если ИнтеграцияСБанкамиПодключена Тогда
		ПроверкаСостоянияИнтеграцииВФонеПриОткрытии = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	КонецЕсли;
	
	ЕстьРасчетныеСчетаБезИнтеграции = НЕ ИнтеграцияСБанкамиПодключена
		ИЛИ Справочники.НастройкиИнтеграцииСБанками.ЕстьРасчетныеСчетаБезИнтеграции();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ПлатежноеПоручение);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.КнопкаОтправитьВБанк.Видимость                    = МожноРедактировать И ЕстьРасчетныеСчетаБезИнтеграции;
	Элементы.ФормаОбновитьСписокИПолучитьСтатусы.Видимость     = МожноРедактировать И ЕстьРасчетныеСчетаБезИнтеграции;
	Элементы.ГруппаЗагрузить.Видимость                         = МожноРедактировать;
	Элементы.УплатаНалоговИВзносов.Видимость                   = МожноРедактировать;
	Элементы.ОплатаПоставщикам.Видимость                       = МожноРедактировать;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ПолучитьФункциональнуюОпцию("ВестиУчетИндивидуальногоПредпринимателя") Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_УчетСтраховыхВзносовИП");
	КонецЕсли;
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеБП.НастроенОбменДиректБанк();
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПлатежноеПоручение",
		"ФормаСписка",
		НСтр("ru = 'Новости: Платежные поручения'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЗнч(Настройки["ОтборКонтрагент"]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Элементы.ТипИнформации.СписокВыбора.НайтиПоЗначению("Сотрудник") <> Неопределено Тогда
			ТипИнформации = "Сотрудник";
		Иначе
			ТипИнформации                = "Контрагент";
			ОтборКонтрагент              = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ОтборКонтрагентИспользование = Ложь;
		КонецЕсли;
	Иначе
		ТипИнформации = "Контрагент";
	КонецЕсли;
	
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		СтруктураОтбора.Свойство("Организация",     ОтборОрганизация);
		СтруктураОтбора.Свойство("СчетОрганизации", ОтборСчетОрганизации);
		СтруктураОтбора.Свойство("Контрагент",      ОтборКонтрагент);
		СтруктураОтбора.Свойство("ДатаОтбора",      ОтборДатаОтбора);
		
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ОтборКонтрагентИспользование      = ЗначениеЗаполнено(ОтборКонтрагент);
		ОтборДатаОтбораИспользование      = ЗначениеЗаполнено(ОтборДатаОтбора);
		
		Параметры.Отбор = Неопределено;
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			
			// Предварительно сбросим сохраненный банковский счет, т.к. он не принадлежит текущей организации
			// и может быть проблема при RLS.
			ОтборСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
			
			УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
			ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "СчетОрганизации");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ДатаОтбора");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Контрагент");
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
	Если ПроверкаСостоянияИнтеграцииВФонеПриОткрытии <> Неопределено Тогда
		
		ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(ПроверкаСостоянияИнтеграцииВФонеПриОткрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                  = ОсновнаяОрганизация;
			УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
			ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
			
			УстановитьВосстановленныеОтборы(Истина);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = ОтборОрганизация Тогда
		УстановитьВидимостьБанковскогоСчета();
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьОбменСБанками" Тогда
		ИспользуетсяДиректБанк = ИспользуетсяДиректБанк();
	ИначеЕсли ИмяСобытия = "ИзменилосьСостояниеДокументаИнтеграцииСБанком" Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне");
		Результат = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
		ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
	ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	
	УстановитьВосстановленныеОтборы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетОрганизацииПриИзменении(Элемент)
	
	ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтбораПриИзменении(Элемент)
	
	ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформацииПриИзменении(Элемент)
	
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	Если ТипИнформации = "Сотрудник" Тогда
		ОтборКонтрагент = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		ОтборКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	ОтборКонтрагентИспользование = Ложь;
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетОрганизацииИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	Если ОтборОрганизацияИспользование Тогда
		Если НЕ ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
			ОтборСчетОрганизацииИспользование = Истина;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
		КонецЕсли;
	ИначеЕсли ОтборСчетОрганизацииИспользование Тогда
		ОтборСчетОрганизацииИспользование = Ложь;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КлючеваяОперация = "СозданиеФормыПлатежноеПоручение";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыПлатежноеПоручение";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомндФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимПоУмолчанию", "ГруппаВыгрузка");
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураПараметров.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		СтруктураПараметров.Вставить("БанковскийСчет", ОтборСчетОрганизации);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаНалоговИВзносов(Команда)
	
	СтруктураПараметров = Новый Структура;
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураПараметров.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		СтруктураПараметров.Вставить("СчетОрганизации", ОтборСчетОрганизации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СпособОплаты", ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	ОткрытьФорму("Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикам(Команда)
	
	СтруктураПараметров = Новый Структура;
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураПараметров.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		СтруктураПараметров.Вставить("СчетОрганизации", ОтборСчетОрганизации);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОплатаПоставщикам.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСБанком(Команда)
	
	ПроизвестиОбменСБанком();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокИПолучитьСтатусы(Команда)
	
	// Получаем статусы документов, если настроен DirectBank
	Если ИспользуетсяДиректБанк Тогда
		ПроизвестиОбменСБанком();
	Иначе
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзФайла(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗагрузкаСчетаНаОплатуИзФайла");
	
	РасширениеФайла = "*.zip";
	ЗаголовокФормыВыбораФайла = НСтр("ru = 'Выберите счет на оплату'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузитьСчетНаОплатуXMLИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.СчетНаОплату"));
	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// СчетОрганизации
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетОрганизации");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборСчетОрганизацииИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборСчетОрганизации", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Список
	
	СписокВыделения = Неопределено;
	Если Параметры.Свойство("СписокВыделения", СписокВыделения) И ЗначениеЗаполнено(СписокВыделения) Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокВыделения.Ссылка);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт(),,, Истина));
		
	КонецЕсли;
	
	Если ОтображатьСтатусыДокументов Тогда
		РаботаСБанкамиБП.УстановитьЦветовоеВыделениеСостоянийПлатежек(УсловноеОформление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВосстановленныеОтборы(ТолькоОрганизацияИСчет = Ложь)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
	Если НЕ ТолькоОрганизацияИСчет Тогда
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	КонецЕсли;
	
	УстановитьВидимостьБанковскогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБанковскогоСчета()
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	Элементы.ОтборСчетОрганизации.Видимость              = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.ОтборСчетОрганизацииИспользование.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыБанковскогоСчета(БанковскийСчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация)
	
	Если Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяДиректБанк()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаОтбораИнформации(Форма)
	
	Если Форма.ТипИнформации = "Сотрудник" Тогда
		Форма.Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Форма.Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидОтбораКонтрагент()
	
	ТипыОтбора = Элементы.ТипИнформации.СписокВыбора;
	
	Если НЕ ИспользуетсяПодсистемаЗарплата Тогда
		ЭлементОтборСотрудник = ТипыОтбора.НайтиПоЗначению("Сотрудник");
		Если ЭлементОтборСотрудник <> Неопределено Тогда
			ТипыОтбора.Удалить(ЭлементОтборСотрудник);
		КонецЕсли;
	КонецЕсли;
	
	ЕдинственныйТипОтбора = ТипыОтбора.Количество() = 1;
	
	Элементы.ТипИнформации.Видимость = НЕ ЕдинственныйТипОтбора;
	Элементы.ОтборКонтрагентИспользование.ПоложениеЗаголовка = ?(ЕдинственныйТипОтбора,
		ПоложениеЗаголовкаЭлементаФормы.Лево, ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	Если ЕдинственныйТипОтбора Тогда
		// Установим название отбора из единственного доступного типа
		Элементы.ОтборКонтрагентИспользование.Заголовок = СтрЗаменить(ТипыОтбора[0].Представление, ":", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиОбменСБанком()
	
	Если ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		
		ПараметрыБанковскогоСчета = ПараметрыБанковскогоСчета(ОтборСчетОрганизации);
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(ПараметрыБанковскогоСчета.Владелец, ПараметрыБанковскогоСчета.Банк);
		
	Иначе
		
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗагруженныеФайлы(АдресФайла) Экспорт
	
	АдресаФайловXML = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресФайла);
	РеквизитыСчета = ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML);
	Если Не ЗначениеЗаполнено(РеквизитыСчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", РеквизитыСчета);
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение(РеквизитыСчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыСчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", РеквизитыСчета);
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.ПользовательОтказалсяОтЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ФайлЗагружен Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПрочитатьЗагруженныеФайлы(Результат.АдресФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML)
	
	РеквизитыСчета = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		ЕстьОшибки = Ложь;
		Обработки.ПрямойОбменЭД.ДополнитьСтруктуруРеквизитовСчета(РеквизитыСчета[0].ДанныеДокумента, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		Иначе
			Возврат РеквизитыСчета[0].ДанныеДокумента;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_УчетСтраховыхВзносовИП");
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

#Область ИнтеграцияСБанками

&НаКлиенте
Процедура Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне() Экспорт
	
	Результат = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПослеПолученияИнформацииОВнешнейКомпоненте = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПослеПолученияИнформацииОВнешнейКомпоненте, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат);
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат)
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ДанныеБаннера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера);
	Иначе
		Элементы.ГруппаБаннерСостоянияОтправки.Видимость = Ложь;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
