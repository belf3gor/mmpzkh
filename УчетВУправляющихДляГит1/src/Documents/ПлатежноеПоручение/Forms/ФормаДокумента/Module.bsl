&НаКлиенте
Перем СтрокаПоискаПоКБК;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	Если Параметры.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = Параметры.ВидОперации;
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.ЗаполнитьПравилоУплатыНалоговИзПараметровФормы(ЭтотОбъект, Параметры);
	
	ПлатежноеПоручениеФормы.ЗаполнитьСведенияОГосударственномОрганеИзПараметров(ЭтотОбъект, Параметры);
	
	Если Параметры.Ключ.Пустая() Тогда
		ВидПлатежаПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			УстановитьОчередностьПлатежа();
			ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПлатежноеПоручениеФормы.ПроверитьПлатежныеРеквизитыВФоне(ЭтотОбъект);
	
	// Уведомим об изменениях в правилах платежей в бюджет
	НомерСчетаПолучателя = Объект.СчетКонтрагента.НомерСчета;
	
	// Если платежка не соответствует правилам платежей в бюджет,
	// то предложим пользователю варианты выхода из случая
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ Объект.ПеречислениеВБюджет
			И (ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
			ИЛИ УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент))Тогда
			ИзменитьПеречислениеВБюджет();
		Иначе
			ПлатежноеПоручениеФормы.НайтиОшибкиПлатежаВБюджет(ЭтотОбъект, Параметры.ЗначениеКопирования.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПлатежноеПоручение",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Платежное поручение'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеОбОшибке", 0.5, Истина);
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПоказатьИндексыСПАРК Тогда
	
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НадежностьБанковКлиент.ПодключитьОбработчикПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
			ВидОперацииОбработатьИзменение();
			
			// СПАРК Риски
			ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
			// Конец СПАРК Риски
			
		КонецЕсли;
		
		ИзменитьПеречислениеВБюджет(ВыбранноеЗначение);
		
		УправлениеФормой(ЭтотОбъект);
		
		УведомитьПользователяПлатежиВБюджет();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		НадписьСледующийПлатеж = НадписьСледующийПлатеж(ВыбранноеЗначение, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ПравилоРегулярногоПлатежа = НовыйОбъект;
		НадписьСледующийПлатеж    = НадписьСледующийПлатеж(НовыйОбъект, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
			Оповестить("ДобавитьБлокИнформационнойПанели", "ПериодическиеПлатежи");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборРеквизитовПлательщика" И Источник = ЭтотОбъект Тогда
		ИзмененКПП = Параметр.КПППлательщика <> Объект.КПППлательщика;
		Модифицированность = ИзмененКПП ИЛИ Параметр.ИННПлательщика <> Объект.ИННПлательщика
			ИЛИ СокрЛП(Параметр.ТекстПлательщика) <> СокрЛП(Объект.ТекстПлательщика);
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		Если ИзмененКПП И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			ОбработатьИзменениеКПППлательщика();
		ИначеЕсли Модифицированность Тогда
			НадписьРеквизитыПлательщика = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыборРеквизитовПолучателя" И Источник = ЭтотОбъект Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПолучателя = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Прочитать();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекПлатежныхПорученийИТребований" Тогда
		НастройкиПечатиПриИзмененииНаСервере();
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		Если Источник = Объект.Контрагент Тогда
			УстановитьРеквизитыПолучателяНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		СостояниеБанковскогоДокумента = СостояниеБанковскогоДокумента(Объект.Ссылка);
		Состояние = СостояниеБанковскогоДокумента.Состояние;
		НадписьПодсказкаИнтеграцияСБанком = СостояниеБанковскогоДокумента.ПодсказкаИнтеграцияСБанком;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		Если Параметр.Владелец = Объект.Организация Тогда
			УстановитьРеквизитыПлательщикаНаСервере();
			Модифицированность = Истина;
		ИначеЕсли Параметр.Владелец = Объект.Контрагент Тогда
			УстановитьРеквизитыПолучателяНаСервере(Истина, Ложь);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьСписокОчередностьПлатежа();
	ЗаполнитьПравилоРегулярногоПлатежаНаСервере(Объект.Ссылка);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПлатежноеПоручение";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку")
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаРеквизитовПередЗаписьюНаСервере();
	
	СообщатьОДубляхУИН = НЕ СчетПоГосконтракту;
	
	ТекстВопроса = ПлатежноеПоручениеФормыКлиент.ТекстВопросаОбОшибкахЗаполнения(РезультатПроверки, СообщатьОДубляхУИН);
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина; // Примем решение позже, в зависимости от ответа пользователя
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросЗаписатьСОшибкамиЗавершение", ЭтотОбъект, ПараметрыЗаписи),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
			Объект.Организация,
			Объект.СчетОрганизации,
			ИспользоватьНесколькоБанковскихСчетовОрганизации,
			Отказ,
			ПараметрыЗаписи);
			
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	
	// Если задано правило уплаты налогов, зарегистрируем документ в регистре.
	Если ТекущийОбъект.ПеречислениеВБюджет И ЗначениеЗаполнено(ПравилоУплатыНалогов) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПравилоУплатыНалогов", ПравилоУплатыНалогов);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря", ПериодСобытияКалендаря);
	КонецЕсли;
	
	// Если задано правило регулярного платежа, добавим запись в служебный регистр.
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПравилоРегулярногоПлатежа", ПравилоРегулярногоПлатежа);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияРегулярногоПлатежа", ПериодСобытияРегулярногоПлатежа);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("СостояниеИнтеграцииСБанкомДо", РегистрыСведений.ДокументыИнтеграцииСБанком.СостояниеИнтеграции(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ХранилищеОбщихНастроек.Сохранить("ПлатежноеПоручение_ВидПлатежа",, Объект.ВидПлатежа);
	
	ПлатежноеПоручениеФормы.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ТекущийОбъект.ВидОперации)
		И НЕ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.УстановитьОсновнойВариантПеречисления(ТекущийОбъект.Организация,
			ТекущийОбъект.Контрагент, ТекущийОбъект.ВидОперации, ТекущийОбъект.СчетКонтрагента, ТекущийОбъект.НазначениеПлатежа);
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.ПроверитьИзменитьНастройкуПлатежаВБюджет(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	НадписьПодсказкаИнтеграцияСБанком = ТекстПодсказкиИнтеграцииСБанкомВДокументе(Объект.Ссылка);
	
	ПараметрыЗаписи.Вставить("СостояниеИнтеграцииСБанкомПосле", РегистрыСведений.ДокументыИнтеграцииСБанком.СостояниеИнтеграции(ТекущийОбъект.Ссылка));
	Если ПараметрыЗаписи.СостояниеИнтеграцииСБанкомПосле = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
		РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПравилоРегулярногоПлатежаОбновлено",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийОбъект.ДополнительныеСвойства, "ПравилоРегулярногоПлатежаОбновлено", Ложь));
		
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
			ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	ДокументОплачен = Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБанковскихДокументов.Оплачено");
	Если Объект.ПеречислениеВБюджет Тогда
		ПлатежноеПоручениеФормыКлиент.ОповеститьОЗаписиПлатежногоПорученияНаУплатуНалога(
			Объект, ДокументОплачен);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
		ПлатежноеПоручениеФормыКлиент.ОповеститьОЗаписиПлатежногоПорученияНаВыплатуЗарплатыРаботнику(
			Объект, ДокументОплачен);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		ПлатежноеПоручениеФормыКлиент.ОповеститьОЗаписиПлатежногоПорученияНаВыплатуЗарплаты(
			Объект, ДокументОплачен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	КонецЕсли;
	
	НадписьСледующийПлатеж = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ПараметрыЗаписи.Свойство("ПравилоРегулярногоПлатежаОбновлено")
		И ПараметрыЗаписи.ПравилоРегулярногоПлатежаОбновлено Тогда
		
		ОбновитьЗадачиБухгалтера();
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.СостояниеИнтеграцииСБанкомДо <> ПараметрыЗаписи.СостояниеИнтеграцииСБанкомПосле Тогда
		Оповестить("ИзменилосьСостояниеДокументаИнтеграцииСБанком", Неопределено, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ВидОперацииДоИзменения <> Объект.ВидОперации Тогда
		
		ВидОперацииПриИзмененииСервер();
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Перем ПериодПлатежа;
	
	УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ИзменитьПодсказкуОчередностьПлатежа();
	
	ИзменилсяМесяц = НачалоМесяца(Объект.Дата) <> НачалоМесяца(ПредыдущаяДата);
	РеквизитыПерезаполнены = Ложь;
	ПлатежГосОргану = ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	Если ПлатежГосОргану Тогда
		Если ПлатежиВБюджетКлиентСервер.ПрименяетсяОКТМО8Символов(Объект.Дата) Тогда
			ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(Объект.КодОКАТО, Объект.Дата);
			НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Объект.ПоказательПериода) Тогда
			ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
			ПериодПлатежа = ПоказателиПериода.Дата;
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ПредыдущаяДата)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата) Тогда
			Объект.ПеречислениеВБюджет = Истина;
			ИзменениеПериодаПримененияПравилПлатежаВБюджет();
		ИначеЕсли ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ПредыдущаяДата)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата)
			ИЛИ ЗначениеЗаполнено(ПериодПлатежа)
			И ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ПериодПлатежа)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата) Тогда
			НалогПриИзмененииНаСервере(РеквизитыПерезаполнены, "");
		Иначе
			Если ИзменилсяМесяц Тогда
				ИзменитьПеречислениеВБюджет(,, Истина);
				УправлениеФормой(ЭтотОбъект);
				РеквизитыПерезаполнены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УведомитьПользователяПлатежиВБюджет();
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) <> НачалоДня(ПредыдущаяДата) ИЛИ ИзменилсяМесяц Тогда
		ИзменитьПлатежныеРеквизитыПриИзмененииДаты(РеквизитыПерезаполнены, ИзменилсяМесяц);
	КонецЕсли;
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) И Объект.Дата >= ДатаСледующегоПлатежа Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Дата документа больше срока следующего платежа.
			|Перейти к редактированию расписания (документ будет записан)?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	ПредыдущаяДата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОрганизацияПриИзмененииНаСервере();
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	Иначе
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	
	УстановитьРеквизитыПлательщикаНаСервере(ПустаяСтрока(Объект.ИННПлательщика));
	
	Если СчетПоГосконтракту Тогда
		УстановитьСчетПолучателя();
		
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			СчетКонтрагентаПриИзмененииНаСервере();
		КонецЕсли;
		
		Объект.ИдентификаторПлатежа = ИдентификаторГосконтактаПоСчету(Объект.СчетОрганизации);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		Объект.ПоказательПериода = "";
		АктуализированыРеквизитыПлатежаВБюджет = Ложь;
		НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
		
		Если АктуализированыРеквизитыПлатежаВБюджет Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Коды бюджетной классификации успешно обновлены'"),
				"e1cib/data/Справочник.ВидыНалоговИПлатежейВБюджет.Форма.ФормаСписка",
				НСтр("ru = 'Налоги и взносы'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) И ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		
		ВидаНалоговогоОбязательстваОбработатьИзменение(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	НалогоплательщикПриИзмененииНеСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере(Истина, Истина);
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
	// Если пользователь не изменил вид операции, но выбрал государственный орган,
	// то предложим ему изменить вид операции
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику") 
		И ЭтоГосударственныйОрганУплатыНалога(Объект.Контрагент) Тогда
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Получатель ""%1"" является государственным органом.
			|
			|Изменить вид операции на ""Уплата налога""?'"), Объект.Контрагент);
			
		КнопкиОтвета = Новый СписокЗначений;
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Да, "Да, это уплата налога");
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Отмена, "Нет, это другой платеж");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЭтоУплатаНалогаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиОтвета);
		
	КонецЕсли;
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		
		СчетКонтрагентаПриИзмененииНаСервере(ПустаяСтрока(Объект.ИННПолучателя));
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	Иначе
		
		СчетПолучателяБИКБанка = "";
		СчетПолучателяВБанкеРФ = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере(Ложь);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПолучателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПлатежноеПоручениеФормыКлиент.ОткрытьФормуРедактированияРеквизитовПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	
	Если Объект.СуммаПроцентов > Объект.СуммаДокумента Тогда
		Объект.СуммаПроцентов = Объект.СуммаДокумента;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПлатежноеПоручениеФормыКлиент.ОткрытьФормуРедактированияРеквизитовНаУплатуНалога(
		ЭтотОбъект, ОповещениеОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение());
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		НазначениеПлатежаБылоИзмененоВручную = Ложь;
	Иначе
		НазначениеПлатежаБылоИзмененоВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСледующийПлатежНажатие(Элемент, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		// Организация, по которой создается регулярный платеж, задается в форме документа и не может быть пустой.
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
	
	ИначеЕсли Объект.Ссылка.Пустая()  Тогда
		// Если редактируем правило по новому документу - запишем документ
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Выполнение команды ""Расписание повторения платежа"" возможно только после записи данных.
				|Данные будут записаны.'");
					
		Оповещение = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ТекстВопроса);
		
	Иначе
		
		ОткрытьПравилоРегулярногоПлатежа();
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты());
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов",
			ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "e1cib/app/Обработка.ИнтернетПоддержкаПользователей.Форма.ОбщаяАвторизация" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПлатежныеРеквизиты", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("ПерезаполнитьКонтрагента") Тогда
		
		УстановитьКонтрагентаНаСервере(РезультатВыполнения.Контрагент, РезультатВыполнения.СчетКонтрагента);
		
	КонецЕсли;
	
	ЗапуститьПроверкуФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	ПлатежнаяВедомостьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНаЛичныйСчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	Если ПеречислениеНаЛичныйСчет Тогда
		Объект.Банк = "";
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере(Ложь);
	ЗапуститьПроверкуФоновогоЗадания();
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПроцентовПриИзменении(Элемент)
	
	Если Объект.СуммаПроцентов > Объект.СуммаДокумента Тогда
		Объект.СуммаПроцентов = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Информация1СПАРКОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеОЗаполненииРеквизитовПлатежаНПДОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	БанкИКассаФормыКлиент.ОбработатьСсылкуБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД(
		Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДУПРЕЖДЕНИЕ ОБ ИЗМЕНЕНИЯХ ПРАВИЛ ПЛАТЕЖЕЙ В БЮДЖЕТ

&НаКлиенте
Процедура УведомитьПользователяПлатежиВБюджет()
	
	ОписаниеОповещения = ОповещениеОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение();
	ПлатежноеПоручениеФормыКлиент.УведомитьПользователяПлатежиВБюджет(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("Закрыть",     Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДосьеКонтрагента(Команда)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыФормы = Новый Структура("Контрагент", Объект.Контрагент);
		ОткрытьФорму("Отчет.ДосьеКонтрагента.Форма", ПараметрыФормы);
	Иначе
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиВБюджет(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций   = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора     = Новый Структура("Организация", СписокОрганизаций);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПлатежногоПоручения(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// См. Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ПараметрыНазначенияПлатежа = Новый Структура(
		"Организация, Налогоплательщик, Дата, ВидОперации,
		|Налог, ВидНалоговогоОбязательства,
		|Контрагент, ПеречислениеВБюджет, ПлатежнаяВедомость,
		|СчетКонтрагента, ДоговорКонтрагента, КПППлательщика,
		|КодБК, ДокументОснование, ПоказательПериода,
		|НачислениеДивидендов");
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	
	АвтоТекстНазначения = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
	ПараметрыФормы = Новый Структура(
		"БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, ОткрытИзПлатежки",
		Объект.СчетОрганизации, Объект.СчетКонтрагента, АвтоТекстНазначения, Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПлатежноеПоручениеФормы.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
	УстановитьРеквизитыПлательщикаНаСервере(Истина);
	
КонецПроцедуры

// Работа с регулярными платежами
&НаСервереБезКонтекста
Функция ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия)
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоРегулярногоПлатежа, "Выполняется") Тогда
		
		Возврат Справочники.ПравилаРегулярныхПлатежей.ДатаБлижайшегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьПлатежныеРеквизитыПриИзмененииДаты(РеквизитыПерезаполнены, ИзменилсяМесяц)
	
	Если НЕ РеквизитыПерезаполнены Тогда
		Документы.ПлатежноеПоручение.ИзменитьПлатежныеРеквизитыПриИзмененииДаты(Объект, ПредыдущаяДата);
		
		НадписьРеквизитыПлательщика = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
		НадписьРеквизитыПолучателя  = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если ИзменилсяМесяц Тогда
		ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(ЭтотОбъект);
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПлатежноеПоручениеФормы.ПроверитьПлатежныеРеквизитыВФоне(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилоРегулярногоПлатежаНаСервере(ПлатежноеПоручение)
	
	ЗаписьПоПлатежномуПоручению = РегистрыСведений.РегулярныеПлатежи.ЗаписьПравилаПоПлатежномуПоручению(ПлатежноеПоручение);
	
	Если ЗаписьПоПлатежномуПоручению <> Неопределено Тогда
		ПравилоРегулярногоПлатежа       = ЗаписьПоПлатежномуПоручению.Правило;
		ПериодСобытияРегулярногоПлатежа = ЗаписьПоПлатежномуПоручению.ПериодСобытия;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗадачиБухгалтераНаСервере(Организация, УникальныйИдентификаторФормы)
	
	// Обеспечиваем актуальность в дальнейшем.
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификаторФормы, Организация, Ложь, Ложь, Истина);
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗадачиБухгалтераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ЗначениеЗаполнено(Результат) И Результат Тогда
		
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
		Оповестить("ПериодическиеПлатежи_Изменение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачиБухгалтера()
	
	ДлительнаяОперация = ОбновитьЗадачиБухгалтераНаСервере(Объект.Организация, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьЗадачиБухгалтераЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоРегулярногоПлатежа()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРегулярныхПлатежей = Новый Структура;
	ПараметрыРегулярныхПлатежей.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыРегулярныхПлатежей.Вставить("ПериодСобытия", ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		
		ПараметрыРегулярныхПлатежей.Вставить("Ключ", ПравилоРегулярногоПлатежа);
		
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("Организация",      Объект.Организация);
		ЗначенияЗаполнения.Вставить("Периодичность",    ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		ЗначенияЗаполнения.Вставить("НачалоВыполнения", ДобавитьМесяц(Объект.Дата, 1));
		ЗначенияЗаполнения.Вставить("Выполняется",      Истина);
		
		ПараметрыРегулярныхПлатежей.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхПлатежей.ФормаОбъекта", ПараметрыРегулярныхПлатежей, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПравилоПоДокументу(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	Возврат РегистрыСведений.РегулярныеПлатежи.ДобавитьЗаписьПравила(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий платеж %1'"),
			Формат(ДатаСледующегоПлатежа, "ДЛФ=D"));
	
	Иначе
		
		Возврат НСтр("ru = 'Повторять платеж?'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПлатежноеПоручениеФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	// Установка реквизитов формы
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	ВидОперацииДоИзменения                = Объект.ВидОперации;
	ЕстьПравоПросмотраДосье               = ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеКонтрагента);
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПодключенаИнтеграцияСБанком = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(Объект.СчетОрганизации);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(ЭтотОбъект);
	
	ПредыдущаяДата = Объект.Дата;
	
	ПлатежГосОргану  = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	ПеречислениеФизическомуЛицу = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	ПеречислениеНаЛичныйСчет = ПеречислениеФизическомуЛицу И НЕ ЗначениеЗаполнено(Объект.Банк);
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		ПлатежГосОргану,
		Объект.Дата);
	
	ПараметрыНазначенияПлатежа = Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	ТекстНазначенияАвто = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
	АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", ТекстНазначенияАвто);
	НазначениеПлатежаБылоИзмененоВручную = Документы.ПлатежноеПоручение.НазначениеПлатежаИзмененоВручную(
		Объект.НазначениеПлатежа, ТекстНазначенияАвто);
	
	НадписьРеквизитыПлательщика     = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	НадписьСледующийПлатеж          = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
	
	ПлатежноеПоручениеФормы.ОпределитьЮрФизЛицо(ЭтотОбъект);
	ПлатежноеПоручениеФормы.УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	ПлатежноеПоручениеФормы.УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	ПлатежноеПоручениеФормы.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект, Истина);
	
	Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	НадписьПодсказкаИнтеграцияСБанком = ТекстПодсказкиИнтеграцииСБанкомВДокументе(Объект.Ссылка);
	
	ПлатежноеПоручениеФормы.ЗаполнитьРеквизитыСчетаПолучателя(ЭтотОбъект);
	
	ПлатежноеПоручениеФормы.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		СчетПолучателяБИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЦветаСПАРК = ИнтернетПоддержкаПользователейБП.ЦветаСПАРК();
	
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	Если ПоказатьИндексыСПАРК Тогда
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ОбъектМетаданных", "Документ.ПлатежноеПоручение");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Контрагент,
			ПараметрыПроцедуры);
		
	Иначе
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПеречислениеЗарплаты        = Ложь;
	ПереводМеждуСчетами         = Ложь;
	ПеречислениеКонтрагенту     = Ложь;
	ПеречислениеКредитаЗайма    = Ложь;
	УплатаНалога                = Ложь;
	УплатаНалогаЗаТретьихЛиц    = Ложь;
	ПеречислениеДивидендов      = Ложь;
	
	ВозможноПеречислениеПособияНаКартуМир = ВозможноПеречислениеПособияНаКартуМир(Объект.ВидОперации);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		УплатаНалога = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		УплатаНалогаЗаТретьихЛиц = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя") Тогда
		ПереводМеждуСчетами = Истина;
	ИначеЕсли УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
			Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				ПеречислениеЗарплаты = Ложь;
			Иначе
				ПеречислениеЗарплаты = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
		ПеречислениеКонтрагенту     = Истина;
		ПеречислениеКредитаЗайма    = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов") Тогда
		ПеречислениеДивидендов = Истина;
	ИначеЕсли Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание") Тогда
		ПеречислениеКонтрагенту = Истина;
	КонецЕсли;
	
	Элементы.КодВыплат.Видимость = ВозможноПеречислениеПособияНаКартуМир;
	
	Элементы.ПеречислениеНаЛичныйСчет.Видимость = Форма.ПеречислениеФизическомуЛицу;
	Элементы.Банк.Видимость                     = Форма.ПеречислениеФизическомуЛицу И НЕ Форма.ПеречислениеНаЛичныйСчет;
	Если Форма.ПеречислениеФизическомуЛицу Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Сотрудник'");
	Иначе
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	Элементы.ПлатежнаяВедомость.Видимость   = ПеречислениеЗарплаты;
	Элементы.Контрагент.Доступность         = НЕ ПереводМеждуСчетами;
	Элементы.СчетКонтрагента.Доступность    = ПереводМеждуСчетами
		ИЛИ НЕ Форма.ПеречислениеФизическомуЛицу И ЗначениеЗаполнено(Объект.Контрагент)
		ИЛИ (Форма.ПеречислениеФизическомуЛицу И НЕ Форма.ПеречислениеНаЛичныйСчет И ЗначениеЗаполнено(Объект.Банк)
			ИЛИ Форма.ПеречислениеНаЛичныйСчет И ЗначениеЗаполнено(Объект.Контрагент));
	
	Элементы.ДоговорКонтрагента.Видимость   = ПеречислениеКонтрагенту;
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СуммаПроцентов.Видимость       = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита");
	Элементы.СтавкаНДС.Видимость            = ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	Элементы.СуммаНДС.Видимость             = ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	Элементы.СуммаНДС.Доступность           = Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		И Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") И ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	
	Элементы.ГруппаПеречислениеНалога.Видимость = УплатаНалога;
	Элементы.ВидНалоговогоОбязательства.Доступность = ЗначениеЗаполнено(Объект.Налог);
	
	Элементы.ГруппаПеречислениеНалогаЗаТретьихЛиц.Видимость = УплатаНалогаЗаТретьихЛиц;
	
	Элементы.ГруппаРеквизитыПлатежейВБюджет.Видимость = Форма.ПлатежГосОргану;
	
	Элементы.ТипКонтрагента.Видимость             = ПеречислениеДивидендов;
	Элементы.ГруппаНачислениеДивидендов.Видимость = ПеречислениеДивидендов;
	Если ПеречислениеДивидендов Тогда
		Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;

	Если Объект.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            = "";
	Иначе
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            =
			НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	// Отображение кнопки "Досье".
	Если Форма.ЕстьПравоПросмотраДосье И ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма Тогда
		Элементы.ДосьеКонтрагента.Видимость = Истина;
		Элементы.Контрагент.Ширина = 33;
		Элементы.Контрагент.РастягиватьПоГоризонтали = Ложь;
	Иначе
		Элементы.ДосьеКонтрагента.Видимость = Ложь;
		Элементы.Контрагент.Ширина = 0;
		Если ПеречислениеДивидендов Тогда
			Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
			Элементы.Контрагент.МаксимальнаяШирина = 24;
		Иначе
			Элементы.Контрагент.РастягиватьПоГоризонтали = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПодсказкуОчередностьПлатежа(Форма);
	
	УстановитьСвойстваПоляСостояние(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможноПеречислениеПособияНаКартуМир(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуОчередностьПлатежа(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ОчередностьПлатежа > 0 Тогда
		Если Объект.ОчередностьПлатежа > Элементы.ОчередностьПлатежа.СписокВыбора.Количество() Тогда
			// Если ОчередностьПлатежа = 6 будут выбирать после вступления в действие 345-Ф, не будем у такого значения отображать подсказку
			Форма.РасшифровкаОчередностиПлатежа = "";
		Иначе
			Форма.РасшифровкаОчередностиПлатежа = Сред(Элементы.ОчередностьПлатежа.СписокВыбора[
				Объект.ОчередностьПлатежа - 1].Представление, 5);
		КонецЕсли;
	Иначе
		Форма.РасшифровкаОчередностиПлатежа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКПППлательщика()
	
	Если НЕ ЗначениеЗаполнено(Объект.Налог) ИЛИ ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(Объект.КодБК) Тогда
		
		РеквизитыГосОргана = ПлатежноеПоручениеФормы.РеквизитыГосударственногоОрганаПоКППОрганизации(
			Объект.Организация, Объект.КПППлательщика);
		
		Если РеквизитыГосОргана <> Неопределено
			И ЗначениеЗаполнено(РеквизитыГосОргана.Ссылка)
			И Объект.Контрагент <> РеквизитыГосОргана.Ссылка Тогда
			
			// Выбран КПП организации, который относится к другому налоговому органу.
			// Поэтому нужно изменить получателя платежа.
			
			Объект.Контрагент      = РеквизитыГосОргана.Ссылка;
			Объект.СчетКонтрагента = РеквизитыГосОргана.ПлатежныеРеквизиты.БанковскийСчет;
			ПлатежноеПоручениеФормы.УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
			
			УстановитьРеквизитыПолучателяНаСервере();
			НадписьРеквизитыПолучателя = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, Истина);
	НадписьРеквизитыПлательщика = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитовПередЗаписьюНаСервере()
	
	Возврат ПлатежноеПоручениеФормы.ПроверитьРеквизитыПередЗаписью(ЭтотОбъект);
	
КонецФункции

&НаСервереБезКонтекста
Функция АвтоТекстНазначенияПлатежа(Знач ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет)
	
	Возврат Документы.ПлатежноеПоручение.ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуНДС(СуммаДокумента, СтавкаНДС)
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС   = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьНазначениеПлатежаНаСервере()
	
	ПараметрыНазначенияПлатежа = Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаНаСервере(ТолькоСумму = Ложь)
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект,
		АвтоЗначенияРеквизитов,
		НазначениеПлатежаБылоИзмененоВручную,
		ТолькоСумму);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПолучателяНаСервере(ОбработкаОповещения = Ложь, ИзменениеКонтрагента = Истина)
	
	Если ОбработкаОповещения И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.Организация) Тогда
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				Объект.ДоговорКонтрагента,
				Объект.Контрагент,
				Объект.Организация,
				УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации));
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОсновнойБанковскийСчет");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	НадписьРеквизитыПолучателя = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПлательщикаНаСервере(Знач ИзменениеОрганизации = Ложь)
	
	ПодключенаИнтеграцияСБанком = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(Объект.СчетОрганизации);
	
	СчетПоГосконтракту = ЗначениеЗаполнено(Объект.СчетОрганизации) И
		ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ГосударственныйКонтракт"));
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	ПлатежноеПоручениеФормы.ЗаполнитьРеквизитыПлательщикаПоАвтоЗначениямРеквизитов(ЭтотОбъект, АвтоЗначенияРеквизитов, ИзменениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации()
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация, СчетОрганизации", Объект.Организация, Объект.СчетОрганизации),, Истина);
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереводМеждуСвоимиСчетами()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		Объект.СчетКонтрагента = Неопределено;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			УстановитьРеквизитыПолучателяНаСервере();
			Объект.Контрагент    = Неопределено;
		Иначе
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент    = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПроверитьВидОперацииОрганизации();
	
	ПлатежноеПоручениеФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	ПереводМеждуСвоимиСчетами();
	ПлатежноеПоручениеФормы.УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ПлатежноеПоручениеФормы.ОпределитьЮрФизЛицо(ЭтотОбъект);
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации,
		Объект.Организация,
		Объект.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ИзменилсяКонтрагент = Ложь;
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент);
		Если ИзменилсяКонтрагент Тогда
			КонтрагентПриИзмененииНаСервере();
		КонецЕсли;
	Иначе
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПлатежноеПоручениеФормы.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	УстановитьРеквизитыПлательщикаНаСервере(Истина);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(ЭтотОбъект);
	
	Если СчетПоГосконтракту Тогда
		Объект.ИдентификаторПлатежа = ИдентификаторГосконтактаПоСчету(Объект.СчетОрганизации);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	НалогОбработатьИзменение(СтрокаПоискаПоКБК);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогОбработатьИзменение(СтрокаПоискаПоКБК)
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		СтрокаПоискаПоКБК, Объект.Дата, ВидНалога);
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект);
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Объект.Налог);
	
	ТекущийПолучатель = Объект.Контрагент;
	Если ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
		Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Получатель) И ТекущийПолучатель <> Получатель Тогда
			Объект.Контрагент = Получатель;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		РегистрацияВНалоговомОргане = Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
			Объект.Организация, Объект.Контрагент, Объект.КПППлательщика);
		
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			Объект.Налог, Объект.Организация, РегистрацияВНалоговомОргане);
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.ПерезаполнитьСтатьюДДС(ЭтотОбъект);
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект,, НастройкаЗаполнения);
	
	Если ТекущийПолучатель <> Объект.Контрагент Тогда
		КонтрагентПриИзмененииНаСервере(, Истина, Истина);
	КонецЕсли;
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ВидОперацииОбработатьИзменение();
	
	Если Объект.ПеречислениеВБюджет Тогда
		ИзменитьПеречислениеВБюджет(,,, Истина);
	Иначе
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		СчетПолучателяБИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогоплательщикПриИзмененииНеСервере()
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	// При изменении налогоплательщика нельзя затирать реквизиты получателя и текст плательщика.
	ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПолучателя, КПППолучателя, ТекстПлательщика, ТекстПолучателя");
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	НадписьРеквизитыПлательщика = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ОпределятьОсновнойВариантПеречисления = Ложь, Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления, ИзменениеКонтрагента, Истина);
	Иначе
		КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления, ИзменениеКонтрагента);
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере(Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если Объект.ПеречислениеВБюджет Тогда
			ПлатежГосОргану            = Ложь;
			Объект.ПеречислениеВБюджет = Ложь;
			ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли НЕ ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		ПлатежГосОргану = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
		Если ПлатежГосОргану Тогда
			ИзменитьПеречислениеВБюджет(, ИзменениеКонтрагента);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	
	НадписьРеквизитыПолучателя = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	Если ЗаполнениеПоНастройкеПлатежаВБюджет И НЕ ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		НазначениеПлатежаБылоИзмененоВручную = Истина;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаНаСервере(Ложь);
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПлатежноеПоручениеФормы.ПроверитьПлатежныеРеквизитыВФоне(ЭтотОбъект);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		СчетПолучателяБИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторГосконтактаПоСчету(ОтдельныйСчет)
	
	Возврат ПлатежноеПоручениеФормы.ИдентификаторГосконтактаПоСчету(ОтдельныйСчет);
	
КонецФункции

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(ИзменениеКонтрагента = Истина)
	
	Если ВидОперацииБезДоговора(Объект.ВидОперации) ИЛИ Объект.ПеречислениеВБюджет Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Объект.СуммаНДС  = 0;
		Возврат;
	КонецЕсли;
	
	УстановитьРеквизитыПолучателяНаСервере(, ИзменениеКонтрагента);
	Объект.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);
	Объект.СуммаНДС  = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиПриИзмененииНаСервере()
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(
		Объект,
		АвтоЗначенияРеквизитов,
		"ТекстПлательщика, КПППлательщика, ТекстПолучателя, КПППолучателя");
	
	НадписьРеквизитыПлательщика     = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидОперацииУплатаНалога()
	
	Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	
	ВидОперацииОбработатьИзменение();
	
	УправлениеФормой(ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.Налог;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ВидОперацииДоИзменения = Объект.ВидОперации;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
	ПеречислениеФизическомуЛицу = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя");
	
	ПеречислениеНаЛичныйСчет = Истина;
	Объект.Банк = "";
	
	Если НЕ УплатаНалогаЗаТретьихЛиц Тогда
		Объект.Налогоплательщик = "";
	КонецЕсли;
	
	Если ПеречислениеФизическомуЛицу Тогда
		ОсновнойВариантПеречисления = РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.ПолучитьОсновнойВариантПеречисления(
		Новый Структура("Организация, ФизическоеЛицо, ВидОперации, БанковскийСчет, НазначениеПлатежа",
			Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Объект.СчетКонтрагента, ""));
		
		Объект.СчетКонтрагента = ОсновнойВариантПеречисления.БанковскийСчет;
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец");
			Если ВладелецСчета <> Объект.Контрагент Тогда
				Объект.Банк = ВладелецСчета;
				ПеречислениеНаЛичныйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВозможноПеречислениеПособияНаКартуМир(Объект.ВидОперации) Тогда
		Объект.КодВыплат = "";
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.ПеречислениеВБюджет = Истина;
	Иначе
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		
		ПлатежГосОргану = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
		Если ПлатежГосОргану Тогда
			Объект.ПеречислениеВБюджет = ПлатежГосОргану;
		КонецЕсли;
		
		Если НЕ Объект.ПеречислениеВБюджет Тогда
			ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Объект.НачислениеДивидендов = "";
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	ПлатежноеПоручениеФормы.ОпределитьЮрФизЛицо(ЭтотОбъект);
	
	ПереводМеждуСвоимиСчетами();
	ПлатежноеПоручениеФормы.УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		УстановитьСчетПолучателя(Истина);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Объект.ДокументОснование = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОперацииБезДоговора(Объект.ВидОперации) Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПредлагатьНовыйДоговор = Ложь;
	Иначе
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		ПодобратьДоговор();
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере(Ложь);
	
	ПлатежноеПоручениеФормы.ПерезаполнитьСтатьюДДС(ЭтотОбъект);
	
	ПерезаполнитьНазначениеПлатежаНаСервере();
	
	УстановитьОчередностьПлатежа();
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСчетПолучателя(Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если СчетПоГосконтракту Тогда
		ПлатежноеПоручениеФормы.УстановитьСчетКонтагентаПоГосконтракту(ЭтотОбъект);
	Иначе
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента,
			?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент),
			Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаПриИзмененииНаСервере(ИзменениеКонтрагента, ЗаполнениеПоНастройкеПлатежаВБюджет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГосударственныйОрганУплатыНалога(Знач Контрагент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ГосударственныйОрган, ВидГосударственногоОргана");
	
	Возврат РеквизитыКонтрагента.ГосударственныйОрган
		И РеквизитыКонтрагента.ВидГосударственногоОргана <> ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.Прочий");

КонецФункции

&НаСервере
Процедура КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления = Ложь, ИзменениеКонтрагента = Ложь, ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	ПлатежГосОргану               = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	Объект.ПеречислениеВБюджет    = ПлатежГосОргану;
	Если Объект.ПеречислениеВБюджет Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПеречисленияВБюджет) Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		КонецЕсли;
	Иначе
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ПустаяСсылка();
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.ОпределитьЮрФизЛицо(ЭтотОбъект);
	
	Если ПеречислениеФизическомуЛицу Тогда
		
		Если ОпределятьОсновнойВариантПеречисления Тогда
			ПеречислениеНаЛичныйСчет = Истина;
			
			ОсновнойВариантПеречисления = РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.ПолучитьОсновнойВариантПеречисления(
				Новый Структура("Организация, ФизическоеЛицо, ВидОперации, БанковскийСчет, НазначениеПлатежа",
					Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Объект.СчетКонтрагента, ""));
			
			Объект.СчетКонтрагента = ОсновнойВариантПеречисления.БанковскийСчет;
			Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
				ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец");
				Если ВладелецСчета <> Объект.Контрагент Тогда
					Объект.Банк = ВладелецСчета;
					ПеречислениеНаЛичныйСчет = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Объект.СчетКонтрагента = "";
		КонецЕсли;
	КонецЕсли;
		
	Если ИзменениеКонтрагента ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		УстановитьСчетПолучателя(Истина, ЗаполнениеПоНастройкеПлатежаВБюджет);
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = ПлатежноеПоручениеФормы.УплатаНалогаЗаТретьихЛиц(Объект);
	
	Если ПлатежГосОргану И НЕ УплатаНалогаЗаТретьихЛиц И ИзменениеКонтрагента И НЕ ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		ПлатежноеПоручениеФормы.ПроверитьИзменитьКПППлательщика(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ВидОперацииБезДоговора(Объект.ВидОперации) Тогда
		ПодобратьДоговор();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
			Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
				Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПлатежноеПоручениеФормы.УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ДоговорПриИзмененииНаСервере();
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	// При изменении контрагента нельзя затирать реквизиты организации.
	ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПлательщика, КПППлательщика, ТекстПлательщика");
	
	НадписьРеквизитыПлательщика = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя  = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПеречислениеВБюджет(НастройкаЗаполнения = Неопределено, ИзменениеКонтрагента = Ложь, ПолучитьКонтекст = Ложь, ИзменениеВидаОперации = Ложь)
	
	БИКСчетаПолучателя   = "";
	НомерСчетаПолучателя = "";
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		РеквизитыСчетаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетКонтрагента, "Банк.Код, НомерСчета");
		БИКСчетаПолучателя   = РеквизитыСчетаПолучателя.БанкКод;
		НомерСчетаПолучателя = РеквизитыСчетаПолучателя.НомерСчета;
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = ПлатежноеПоручениеФормы.УплатаНалогаЗаТретьихЛиц(Объект);
	
	Объект.ПеречислениеВБюджет = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ УплатаНалогаЗаТретьихЛиц
		ИЛИ ПлатежГосОргану
		  И ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
		  И БанковскиеПравила.ЭтоОтделениеЦентральногоБанка(БИКСчетаПолучателя);
	
	Если Объект.ПеречислениеВБюджет Тогда
		ПлатежноеПоручениеФормы.УстановитьРеквизитыДляПлатежаВБюджет(ЭтотОбъект);
		ПлатежГосОргану  = Истина;
	Иначе
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	Если НЕ ИзменениеКонтрагента И НЕ ИзменениеВидаОперации Тогда
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПлательщика, КПППлательщика, ТекстПлательщика");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов);
	КонецЕсли;
	
	НадписьРеквизитыПлательщика     = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	ИзменилсяКонтрагент = ИзменениеКонтрагента;
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент, НастройкаЗаполнения);
	Если НЕ ИзменениеКонтрагента И ИзменилсяКонтрагент Тогда
		КонтрагентПриИзмененииНаСервере(,, Истина);
	КонецЕсли;
	
	Если КонтекстПлатежногоДокумента <> Неопределено Тогда
		Если ПолучитьКонтекст Тогда
			КонтекстПлатежногоДокумента = Документы.ПлатежноеПоручение.КонтекстПлатежногоДокумента(Объект);
		Иначе
			Если НомерСчетаПолучателя <> КонтекстПлатежногоДокумента.НомерСчетаПолучателя Тогда
				КонтекстПлатежногоДокумента.НомерСчетаПолучателя = НомерСчетаПолучателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидОперацииБезДоговора(ВидОперации)
	
	Возврат УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ВидОперации)
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПлатежноеПоручениеФормыКлиент.ОткрытьФормуРедактированияРеквизитовПлательщика(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Форма, ИзменилсяКонтрагент = Ложь, НастройкаЗаполнения = Неопределено)
	
	Объект = Форма.Объект;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	ЭтоПеречислениеНалога = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	Если ЭтоПеречислениеНалога Тогда
		Если (НЕ ЗначениеЗаполнено(Объект.Налог)
			ИЛИ Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы"))
		И НастройкаЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(Объект, Объект.ПеречислениеВБюджет);
	Если УплатаНалогаЗаТретьихЛиц Тогда
		ИсточникДанныхКонтекста = ПлатежноеПоручениеФормы.ИсточникДанныхКонтекстаПлатежногоДокумента(Форма);
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекста, Неопределено);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта, "КодОКАТО, СтатусСоставителя");
	ИначеЕсли Объект.ПеречислениеВБюджет Тогда
		ИсточникДанныхКонтекста = ПлатежноеПоручениеФормы.ИсточникДанныхКонтекстаПлатежногоДокумента(Форма);
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекста, НастройкаЗаполнения);
		
		ИсключатьСвойства = Новый Массив;
		
		// Функция вызвана из обработчика изменения контрагента
		Если ИзменилсяКонтрагент И РеквизитыОбъекта.Свойство("Контрагент") Тогда
			ИсключатьСвойства.Добавить("Контрагент");
			
			Если РеквизитыОбъекта.Свойство("СчетКонтрагента") Тогда
				ИсключатьСвойства.Добавить("СчетКонтрагента");
			КонецЕсли;
		КонецЕсли;
		
		// Назначение платежа заполняем значением "по умолчанию" только для вида операции Уплата налога
		Если ЭтоПеречислениеНалога Тогда
			Если РеквизитыОбъекта.Свойство("ШаблонНазначенияПлатежаВБюджет") Тогда
				Форма.ШаблонНазначенияПлатежаВБюджет = РеквизитыОбъекта.ШаблонНазначенияПлатежаВБюджет;
			КонецЕсли;
		Иначе
			ИсключатьСвойства.Добавить("НазначениеПлатежа");
		КонецЕсли;
		
		Если Форма.СчетПоГосконтракту Тогда
			ИсключатьСвойства.Добавить("ИдентификаторПлатежа");
		КонецЕсли;
		
		ИзменилсяКонтрагент = ИзменилсяКонтрагент ИЛИ РеквизитыОбъекта.Свойство("Контрагент") И РеквизитыОбъекта.Контрагент <> Объект.Контрагент;
		
		ИсключатьСвойстваИзЗаполнения = СтрСоединить(ИсключатьСвойства, ",");
		Если ПустаяСтрока(ИсключатьСвойстваИзЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта,, ИсключатьСвойстваИзЗаполнения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаЗаполнения) Тогда
			ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
		КонецЕсли;
	Иначе
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(Форма);
	КонецЕсли;
	
	Форма.НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, Знач ИсточникДанных, Знач НастройкаЗаполнения)
	
	Если НастройкаЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
			НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
		РеквизитыОбъекта, ИсточникДанных, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента = Истина)
	
	АвтоЗначенияРеквизитов = ПлатежноеПоручениеФормы.АвтоЗначенияРеквизитов(ЭтотОбъект);
	
	ПлатежноеПоручениеФормы.ЗаполнитьРеквизитыПолучателяПоАвтоЗначениямРеквизитов(
		ЭтотОбъект, АвтоЗначенияРеквизитов, ИзменениеКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодсказкуОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументСписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		ПоказатьЗначение(, ДокументСписания);
	ИначеЕсли НЕ ТолькоПросмотр Тогда
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить оплату на основании документа, помеченного на удаление!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание", Параметры.Ключ);
		ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта", ПараметрыСписания, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПериодаПримененияПравилПлатежаВБюджет()
	
	НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	УстановитьРеквизитыПлательщикаНаСервере();
	
	ПлатежноеПоручениеФормы.НайтиОшибкиПлатежаВБюджет(ЭтотОбъект, ПредыдущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПлатежныеРеквизиты(Ответ, ДопПараметры) Экспорт
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПлатежныеРеквизитыВФоне() Экспорт
	
	Возврат ПлатежноеПоручениеФормы.ПроверитьПлатежныеРеквизитыВФоне(ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ПлатежныеРеквизиты()
	
	Возврат ПлатежноеПоручениеФормы.ПлатежныеРеквизиты(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеКонтрагента(Результат)
	
	ПлатежноеПоручениеФормы.УстановитьСостояниеКонтрагента(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаСервере
Функция УстановитьКонтрагентаНаСервере(Контрагент, СчетКонтрагента)
	
	Модифицированность = Истина;
	
	ИзменилсяКонтрагент = Объект.Контрагент <> Контрагент;
	
	Объект.Контрагент      = Контрагент;
	Объект.СчетКонтрагента = СчетКонтрагента;
	
	ПлатежноеПоручениеФормы.ОпределитьЮрФизЛицо(ЭтотОбъект);
	
	Если ИзменилсяКонтрагент И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ПодобратьДоговор();
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя();
	НадписьРеквизитыПолучателя = ПлатежноеПоручениеФормыКлиентСервер.УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПлатежноеПоручениеФормы.ПроверитьПлатежныеРеквизитыВФоне(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПодобратьДоговор()
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", Ложь));
	ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ВидыДоговоров.Найти(ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, ВидыДоговоров, ПараметрыПлатежа);
	
	ПредлагатьНовыйДоговор = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидПлатежаПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
		СохраненныйВид = ХранилищеОбщихНастроек.Загрузить("ПлатежноеПоручение_ВидПлатежа");
		Если СохраненныйВид <> "" Тогда
			Объект.ВидПлатежа = СохраненныйВид;
		Иначе
			Объект.ВидПлатежа = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуФоновогоЗадания()
	
	Если ДлительнаяОперацияПроверкиПлатежныхРеквизитов <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПлатежныеРеквизитыВФонеЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкиПлатежныхРеквизитов, ОповещениеОЗавершении, ПараметрыОжидания);
		
		ДлительнаяОперацияПроверкиПлатежныхРеквизитов = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПлатежныеРеквизитыВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПредотвратитьСбросРедактируемогоЗначения();
	
	УстановитьСостояниеКонтрагента(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредотвратитьСбросРедактируемогоЗначения() Экспорт
	
	// Обход особенности платформы, когда затирается редактируемое значение
	// в текущем элементе при изменении формы.
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			ТекущийЭлемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'"), ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена!'"), ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
				СтрокаВедомости = ТаблицаОплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОплатаТруда(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОчередностьПлатежаПо345ФЗ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Тогда
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ИначеЕсли Объект.ПеречислениеВБюджет Тогда
		ПлатежноеПоручениеФормыКлиентСервер.УстановитьОчередностьПлатежаПо345ФЗДляПеречисленияВБюджет(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОчередностьПлатежа()
	
	Если Объект.ПеречислениеВБюджет Тогда
		УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ИначеЕсли ЭтоОплатаТруда(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	Иначе
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Ложь));
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежнаяВедомостьПриИзмененииНаСервере()
	
	Если НЕ НазначениеПлатежаБылоИзмененоВручную Тогда
		АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", "");
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(Знач РеквизитыОбъекта)
	Перем ПериодПлатежа;
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Налог, "ВидНалога");
	
	Если НЕ ЗначениеЗаполнено(ПериодПлатежа) И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
		ПоказателиПериода = ПлатежиВБюджетПереопределяемый.ПоказателиНалоговогоПериода(
			РеквизитыОбъекта.Организация,
			ВидНалога,
			РеквизитыОбъекта.Дата,
			РеквизитыОбъекта.ВидНалоговогоОбязательства);
		ПериодПлатежа = ПоказателиПериода.Период;
		РеквизитыОбъекта.ПоказательПериода = ПоказателиПериода.ПоказательПериода;
	ИначеЕсли РеквизитыОбъекта.Свойство("ПоказательПериода") Тогда
		ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыОбъекта.ПоказательПериода);
		ПериодПлатежа = ПоказателиПериода.Дата;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = Новый Структура("КодБК, НазначениеПлатежа, ПоказательПериода");
	
	Если ЗначениеЗаполнено(ПериодПлатежа) Тогда
		РеквизитыПлатежаВБюджет.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			РеквизитыОбъекта.КодБК, ВидНалога, РеквизитыОбъекта.ВидНалоговогоОбязательства, РеквизитыОбъекта.Дата, ПериодПлатежа);
	Иначе
		РеквизитыПлатежаВБюджет.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			РеквизитыОбъекта.КодБК, ВидНалога, РеквизитыОбъекта.ВидНалоговогоОбязательства, РеквизитыОбъекта.Дата);
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет.НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	РеквизитыПлатежаВБюджет.ПоказательПериода = РеквизитыОбъекта.ПоказательПериода;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

&НаСервереБезКонтекста
Функция НазначениеПлатежаПриИзмененииПоказателяПериода(Знач РеквизитыОбъекта)
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыОбъекта.Налог,
		РеквизитыОбъекта.ВидНалоговогоОбязательства,
		РеквизитыОбъекта.Организация,
		РеквизитыОбъекта.Дата,
		ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(РеквизитыОбъекта.ПоказательПериода),
		РеквизитыОбъекта.ШаблонНазначенияПлатежаВБюджет);
	
	Возврат НазначениеПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПлатежГосОргану(ВидОперации, Контрагент);
	
	Возврат УчетДенежныхСредствБП.ПлатежГосОргану(ВидОперации, Контрагент);
	
КонецФункции

#Область СПАРК

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ПредотвратитьСбросРедактируемогоЗначения();
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	Если ПоказатьИндексыСПАРК Тогда
		
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ОбъектМетаданных", "Документ.ПлатежноеПоручение");
		
		СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
			ИндексыСПАРКРиски,
			Неопределено,
			Объект.Контрагент, // Искать по ссылке
			ЭтотОбъект,
			ПараметрыОтображения,
			Истина);
		
	Иначе
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтранаРегистрации = Неопределено;
	ГосударственныйОрган = Ложь;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, 
			"СтранаРегистрации, ГосударственныйОрган");
		СтранаРегистрации = ЗначенияРеквизитов.СтранаРегистрации;
		ГосударственныйОрган = ЗначенияРеквизитов.ГосударственныйОрган;
		
	КонецЕсли;
	
	ПоказатьИнформацию = (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		И Форма.КонтрагентЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Форма.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И СтранаРегистрации = Справочники.СтраныМира.Россия
		И Не ГосударственныйОрган;
	
	Возврат ПоказатьИнформацию;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ПредупреждениеОбОшибке()
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Функция ОповещениеОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение()
	
	Возврат Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Результат.Свойство("ПеречислениеВБюджет") Тогда
		Объект.ПеречислениеВБюджет = Результат.ПеречислениеВБюджет;
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		ПлатежноеПоручениеФормыКлиент.ЗаполнитьРеквизитыПлатежаВБюджетПослеРедактированияВФорме(ЭтотОбъект, Результат);
		
		Если Результат.Модифицированность Тогда
			УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации
				= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
			Если УплатаНалогаЗаТретьихЛиц Тогда
				
				ПерезаполнитьНазначениеПлатежаНаСервере();
				
			Иначе
				
				РеквизитыОбъекта = ПлатежноеПоручениеФормыКлиентСервер.РеквизитыОбъектаДляФормированияНазначенияПлатежа(ЭтотОбъект);
				
				НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
				Если НЕ ПустаяСтрока(НазначениеПлатежа) Тогда
					Если НЕ НазначениеПлатежаБылоИзмененоВручную
						ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
						Объект.НазначениеПлатежа = НазначениеПлатежа;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
		ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
		
		// Заменим (добавим) УИН (уникальный идентификатор начисления)
		// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
		ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
			Объект.НазначениеПлатежа,
			Объект.ИдентификаторПлатежа,
			Объект.Дата,
			Истина);
		
	Иначе
		
		ПлатежноеПоручениеФормыКлиентСервер.СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		
	КонецЕсли;
	
	НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьСОшибкамиЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Если (Параметры.Ключ.Пустая() Или Модифицированность)
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			// Сначала запишем документ, а потом проведем - иначе из-за проверки заполнения документ не только не проведется,
			// но и не запишется.
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
			Записать(ПараметрыЗаписи);
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Записать(ПараметрыЗаписи);
			
			// Форму в этом случае не закрываем - т.к. с большой вероятностью
			// при попытке проведения будут выданы ошибки проверки заполнения и документ не проведется.
			// Если закрыть форму, то эти ошибки пользователь не увидит, т.к. они привязаны к родительскому окну документа.
			// В итоге документ окажется не проведен, что необъяснимо для пользователя:
			//  - он нажимал "Провести и закрыть"
			//  - согласился выполнить это без проверки
			//  - а результат не соответствует ожиданиям.
			Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
				ПараметрыЗаписи.Закрыть = Ложь;
			КонецЕсли;
		Иначе
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("Закрыть") И ПараметрыЗаписи.Закрыть Тогда
			Закрыть();
		ИначеЕсли ПараметрыЗаписи.Свойство("ОткрытьПравилоРегулярногоПлатежа") Тогда
			ОткрытьПравилоРегулярногоПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРедактированиеПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("ОткрытьПравилоРегулярногоПлатежа");
		
		Если Записать(ПараметрыЗаписи) Тогда
			
			ОткрытьПравилоРегулярногоПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЭтоУплатаНалогаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьВидОперацииУплатаНалога();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура ВидаНалоговогоОбязательстваОбработатьИзменение(Форма)
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода, ШаблонНазначенияПлатежаВБюджет");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Форма.Объект);
	
	РеквизитыПлатежаВБюджет = РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(РеквизитыОбъекта);
	ЗаполнитьЗначенияСвойств(Форма.Объект, РеквизитыПлатежаВБюджет);
	
	СтатьяДДСПоУмолчанию = СтатьяДДСПриИзмененииВидаНалоговогоОбязательства(РеквизитыОбъекта);
	Если СтатьяДДСПоУмолчанию <> Неопределено Тогда
		Форма.Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
	КонецЕсли;
	
	Форма.НадписьРеквизитыПлатежейВБюджет = ПлатежноеПоручениеФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет список выбора вида налогового обязательства
//
// Параметры:
//   ДобавитьТекущееЗначениеПриОтсутствии - Булево - Истина, если при отсутствии в списке текущего значения реквизита,
//     необходимо его добавить. Например, при создании формы или в случаях, когда пользователь явно указал
//     некорректный вид обязательства.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, ДобавитьТекущееЗначениеПриОтсутствии = Ложь)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Если ДобавитьТекущееЗначениеПриОтсутствии Тогда
			СписокВидовНалоговыхОбязательств.Добавить(Объект.ВидНалоговогоОбязательства);
		ИначеЕсли СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			Объект.ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
			ВидаНалоговогоОбязательстваОбработатьИзменение(Форма);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяДДСПриИзмененииВидаНалоговогоОбязательства(Знач РеквизитыОбъекта)
	
	ВидНалоговогоОбязательства = РеквизитыОбъекта.ВидНалоговогоОбязательства;
	Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог 
		ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт
		ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Налог, "ВидНалога");
		Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
			КонтекстОперации = "НалогНаПрибыль";
		КонецЕсли;
	Иначе
		КонтекстОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	КонецЕсли;
	
	СтатьяДДСПоУмолчанию = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(КонтекстОперации);
	
	Если НЕ ЗначениеЗаполнено(СтатьяДДСПоУмолчанию) Тогда
		Если КонтекстОперации = "НалогНаПрибыль" Тогда
			СтатьяДДСПоУмолчанию = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		Иначе
			СтатьяДДСПоУмолчанию = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатьяДДСПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	СостояниеПриИзмененииНаСервере();
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

&НаСервере
Процедура СостояниеПриИзмененииНаСервере()

	Если Состояние = Перечисления.СостоянияБанковскихДокументов.Оплачено Тогда
		
		ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(
			Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
			
	КонецЕсли;
		
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеБанковскогоДокумента(Документ)
	
	СостояниеБанковскогоДокумента = Новый Структура();
	СостояниеБанковскогоДокумента.Вставить("Состояние", ПолучитьСостояниеОбмена(Документ));
	СостояниеБанковскогоДокумента.Вставить("ПодсказкаИнтеграцияСБанком", ТекстПодсказкиИнтеграцииСБанкомВДокументе(Документ));
	Возврат СостояниеБанковскогоДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодсказкиИнтеграцииСБанкомВДокументе(Документ)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Возврат РегистрыСведений.ДокументыИнтеграцииСБанком.ТекстПодсказкиИнтеграцииСБанкомВДокументе(Документ);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляСостояние(Форма)

	Объект		 = Форма.Объект;
	Элементы	 = Форма.Элементы;
	Если Форма.ТолькоПросмотр Тогда
		
		Элементы.Состояние.ТолькоПросмотр = Истина;
		Элементы.Состояние.КнопкаОткрытия = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			
			ЕстьНастройкаДиректБанк = Ложь;
			СписокВыбора = Новый Массив;
			НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Объект.Организация, Объект.СчетОрганизации, СписокВыбора);
			Элементы.Состояние.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			Элементы.Состояние.ТолькоПросмотр = Форма.ПодключенаИнтеграцияСБанком ИЛИ ЕстьНастройкаДиректБанк;
			Элементы.Состояние.КнопкаОткрытия = ЕстьНастройкаДиректБанк;
			
		Иначе
			
			Элементы.Состояние.ТолькоПросмотр = Истина;
			Элементы.Состояние.КнопкаОткрытия = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Элементы.НадписьДокументСписания.Видимость = НЕ Форма.ПодключенаИнтеграцияСБанком;
	Элементы.НадписьПодсказкаИнтеграцияСБанком.Видимость = Форма.ПодключенаИнтеграцияСБанком;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Знач Организация, Знач БанковскийСчет, СписокВыбора)
	
	ПлатежноеПоручениеФормы.НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Организация, БанковскийСчет, СписокВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеОбмена(Ссылка)

	Возврат РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Ссылка);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьИнформациюНадежностьБанков(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.Объект.СчетКонтрагента) 
		ИЛИ НЕ ЗначениеЗаполнено(Форма.СчетПолучателяБИКБанка)
		ИЛИ НЕ Форма.СчетПолучателяВБанкеРФ
		ИЛИ Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБанковскихДокументов.Оплачено")
		ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюНадежностьБанков()
	
	НадежностьБанковКлиент.ПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтрагентаПриИзменении(Элемент)
	
	ТипКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ТипКонтрагентаПриИзмененииНаСервере()
	
	ПлатежноеПоручениеФормы.УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	КонтрагентПриИзмененииНаСервере(Ложь, Истина);
	
КонецПроцедуры
