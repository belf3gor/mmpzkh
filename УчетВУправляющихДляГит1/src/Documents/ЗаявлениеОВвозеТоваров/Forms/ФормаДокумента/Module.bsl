
#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоНоваяСтрока;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		СтруктураРеквизитовВыгрузки = Объект.Ссылка.ПолучитьОбъект().СтруктураРеквизитовВыгрузки.Получить();
	КонецЕсли;
		
	Если СтруктураРеквизитовВыгрузки = Неопределено Тогда
		СтруктураРеквизитовВыгрузки = Параметры.ЗначениеКопирования.СтруктураРеквизитовВыгрузки.Получить();
		Если СтруктураРеквизитовВыгрузки = Неопределено Тогда
			СтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтчетностьВФТС) ИЛИ (ЗначениеЗаполнено(ОтчетностьВФТС) И ОтчетностьВФТС.ПолучитьОбъект() = Неопределено) Тогда
		ОтчетностьВФТС = Неопределено;
		ОпределитьСсылкуНаСуществующийОтчетВФТС();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ЗаявлениеОВвозеТоваров", ПараметрыЗаписи, Объект.Ссылка)
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьСтатусОтправки();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаУчастникиСделки" Тогда
		ОбработкаВыбораУчастникиСделкиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаСпецификации" Тогда
		ОбработкаВыбораСпецификацииНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаПлатежныеДокументы" Тогда
		ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРедактированияАкцизов" Тогда
		ОбработкаВыбораАкцизы(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если "СозданОтчетВФТС" = ИмяСобытия И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ЗаявлениеОВвозе = Неопределено;
		Параметр.Свойство("ЗаявлениеОВвозе", ЗаявлениеОВвозе);
		Если ЗаявлениеОВвозе = Объект.Ссылка Тогда
			ОтчетностьВФТС = Параметр.ОтчетВФТС;
			Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Статформа в ФТС'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СтруктураРеквизитовВыгрузки = Новый ХранилищеЗначения(СтруктураРеквизитовВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиСделкиНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаУчастникиСделки = ПоместитьУчастникиСделкиВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаУчастникиСделки", АдресХранилищаУчастникиСделки);

	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаУчастникиСделки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацииНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаСпецификации = ПоместитьСпецификацииВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСпецификации", АдресХранилищаСпецификации);

	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаСпецификации", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаВыпискиБанка    = ПоместитьВыпискиБанкаВоВременноеХранилищеНаСервере();
	АдресХранилищаСведенияОЗачете = ПоместитьСведенияОЗачетеВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаВыпискиБанка",    АдресХранилищаВыпискиБанка);
	ПараметрыФормы.Вставить("АдресХранилищаСведенияОЗачете", АдресХранилищаСведенияОЗачете);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);

	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаПлатежныеДокументы", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура,ЕдиницаИзмерения,СтранаПроисхождения,КодТНВЭД,
		|СчетУчета,СчетУчетаНДС,СпособУчетаНДС,СуммаНДС,СтавкаНДС,
		|СтранаПроисхождения,НалоговаяБазаНДС,НадписьНомерДокумента,
		|НадписьДатаДокумента,СпособУчетаНДС,
		|Количество,КоличествоПоТНВЭД,ЕдиницыРазличаются");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация,
		|ВалютаДокумента, ДоговорКонтрагента, Реализация");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)
	
	ПриИзмененииЕдиницыИзмеренияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПриИзмененииЕдиницыИзмеренияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииЕдиницыИзмеренияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// При изменении ставки НДС перерасчитываем сумму НДС
	
	Если ТекущиеДанные.НалоговаяБазаНДС <> 0 Тогда
		ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			ТекущиеДанные.НалоговаяБазаНДС,
			Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговаяБазаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// При изменении налоговой базы перерасчитываем сумму НДС
	
	Если ТекущиеДанные.НалоговаяБазаНДС <> 0 Тогда
		ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			ТекущиеДанные.НалоговаяБазаНДС,
			Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"НалоговаяБазаНДС,ДатаПринятияНаУчет,СтатСтоимостьДолларыСША");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ДанныеСтрокиТаблицы.Вставить("ВалютаДолларыСША", ВалютаДолларыСША);
	
	НалоговаяБазаПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыФактурнаяСтоимостьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДатаПринятияНаУчет, ФактурнаяСтоимость, НалоговаяБазаНДС, СтавкаНДС, 
		|СуммаНДС, СуммаАкциза, СтатСтоимостьДолларыСША");
		
	ДанныеОбъекта = Новый Структура(
		"ВалютаРегламентированногоУчета, ВалютаДолларыСША, ВалютаДокумента",
		ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.ВалютаДокумента);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РасчитатьСуммыВТабличнойЧастиНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПринятияНаУчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДатаПринятияНаУчет, ФактурнаяСтоимость, НалоговаяБазаНДС, СтавкаНДС, 
		|СуммаНДС, СуммаАкциза, СтатСтоимостьДолларыСША");
		
	ДанныеОбъекта = Новый Структура(
		"ВалютаРегламентированногоУчета, ВалютаДолларыСША, ВалютаДокумента",
		ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.ВалютаДокумента);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РасчитатьСуммыВТабличнойЧастиНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДокументПартии, ДатаПринятияНаУчет, ФактурнаяСтоимость, НалоговаяБазаНДС, СтавкаНДС, 
		|СуммаНДС, СуммаАкциза, СтатСтоимостьДолларыСША");
	
	ДанныеОбъекта = Новый Структура(
		"ВалютаРегламентированногоУчета, ВалютаДолларыСША, ВалютаДокумента",
		ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.ВалютаДокумента);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	УстановитьДатуПринятияНаУчет(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаАкцизаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияАкцизов(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыАналитикаАкциза" Тогда
		ОткрытьФормуРедактированияАкцизов(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаАкциза" Тогда
			
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияАкцизов(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗаголовкиСтрок(Элементы.Товары.ТекущиеДанные);
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.АналитикаАкциза = НСтр("ru='Без акциза'"); ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияАкцизов_Закрыть", Неопределено, ЭтаФорма);
	КонецЕсли;
	
	ЭтоНоваяСтрока = Ложь;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТоварыДобавитьИзПоступления(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоПоступлениям(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, Новый Структура);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ВыгружаемыеДанные = ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор, Истина);
	
	Если ВыгружаемыеДанные <> Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Ошибок не обнаружено!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявлениеОВвозе(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
		
	ВыгружаемыеДанные = ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		СохранитьВыгружаемыеДанные(ВыгружаемыеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыВыгрузки(Команда)
	
	Если Объект.Дата < '20150101' Тогда
		ОткрытьФормуВыгрузки2014();
	Иначе
		ОткрытьФормуВыгрузки2015();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСписокВыбораВидовТранспорта(ЭтаФорма.Элементы.ТоварыКодВидаТранспорта.СписокВыбора);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();

	НаименованиеВалютыДокумента = Объект.ВалютаДокумента.Наименование;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду("840");
	
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ТоварыСтоимостьВал.Заголовок = СтрШаблон(
		НСтр("ru='Фактурная стоимость (%1)'"),
		Форма.НаименованиеВалютыДокумента);
	
	Форма.Спецификации       = "Спецификации";
	Форма.УчастникиСделки    = "Участники сделки";
	Форма.ПлатежныеДокументы = "Платежные документы";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	// ТоварыКоличествоПоТНВЭД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоПоТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕдиницыРазличаются", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// ТоварыСчетУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// ТоварыСпособУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсегоНДС = Окр(Объект.Товары.Итог("СуммаНДС"));

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныйПрограммныйИнтрефейс

&НаСервере
Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокВыбора)
	
	Документы.ЗаявлениеОВвозеТоваров.ЗаполнитьСписокВыбораВидовТранспорта(СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы)
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	ЗаполнитьПризнакЕдиницыРазличаются(СтрокаТаблицы);
	ЗаполнитьАналитикуАкцизов(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьНомерДокумента = НСтр("ru='Номер:'");
	СтрокаТаблицы.НадписьДатаДокумента  = НСтр("ru='Дата:'");
	СтрокаТаблицы.НадписьПоДокументу    = НСтр("ru='По документу:'");
	СтрокаТаблицы.НадписьПоТНВЭД        = НСтр("ru='По ТН ВЭД:'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьАналитикуАкцизов(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаАкциза) Тогда
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТвердаяСтавкаАкциза) Тогда
			
			Если СтрокаТабличнойЧасти.ЕдиницаИзмеренияАкциза = "112" Тогда
				ЕдиницаНалоговойБазы = НСтр("ru='литров'");
				ЕдиницаСтавки = НСтр("ru='за литр'");
			ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияАкциза = "168" Тогда
				ЕдиницаНалоговойБазы = НСтр("ru='тонн'");
				ЕдиницаСтавки = НСтр("ru='за тонну'");
			ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияАкциза = "251" Тогда
				ЕдиницаНалоговойБазы = НСтр("ru='лошадиных сил'");
				ЕдиницаСтавки = НСтр("ru='за лошадиную силу'");
			ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияАкциза = "831" Тогда
				ЕдиницаНалоговойБазы = НСтр("ru='литров 100% спирта'");
				ЕдиницаСтавки = НСтр("ru='за литр 100% спирта'");
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru='Акциз %1 руб.
				|(%2 %3 * %4 %5)'");
			
			СтрокаТабличнойЧасти.АналитикаАкциза = СтрШаблон(ТекстСообщения,
				СтрокаТабличнойЧасти.СуммаАкциза,
				СтрокаТабличнойЧасти.НалоговаяБазаАкцизы,
				ЕдиницаНалоговойБазы,
				СтрокаТабличнойЧасти.ТвердаяСтавкаАкциза,
				ЕдиницаСтавки);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Акциз %1 руб.
				|(%2 руб. * %3%%)'");
			
			СтрокаТабличнойЧасти.АналитикаАкциза = СтрШаблон(ТекстСообщения,
				СтрокаТабличнойЧасти.СуммаАкциза,
				СтрокаТабличнойЧасти.НалоговаяБазаАкцизы,
				СтрокаТабличнойЧасти.АдвалорнаяСтавкаАкциза);
			
		КонецЕсли;
		
	Иначе
		СтрокаТабличнойЧасти.АналитикаАкциза = НСтр("ru='Без акциза'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакЕдиницыРазличаются(СтрокаТаблицы)
	
	СтрокаТаблицы.ЕдиницыРазличаются = СтрокаТаблицы.ЕдиницаИзмерения <> СтрокаТаблицы.КодТНВЭД.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
	СтрокаТабличнойЧасти.КодТНВЭД            = СведенияОНоменклатуре.КодТНВЭД;
	
	ПриИзмененииЕдиницыИзмеренияНаСервере(СтрокаТабличнойЧасти);
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчета)
		И СчетаУчета.СчетУчетаЯвляетсяЗабалансовым =
		(СчетаУчета.СчетУчета = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение) Тогда
		СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза;
	
	Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
		СтрокаТабличнойЧасти.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
	КонецЕсли;
	
	// При изменении номенклатуры подставляется ставка НДС, соответственно перерасчитываем сумму НДС
	
	Если СтрокаТабличнойЧасти.НалоговаяБазаНДС <> 0 Тогда
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.НалоговаяБазаНДС,
			Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЕдиницыИзмеренияНаКлиенте()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КодТНВЭД)
	 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"КодТНВЭД,ЕдиницаИзмерения,ЕдиницыРазличаются,
		|Количество,КоличествоПоТНВЭД");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ПриИзмененииЕдиницыИзмеренияНаСервере(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииЕдиницыИзмеренияНаСервере(СтрокаТабличнойЧасти)
	
	ЕдиницаПоТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СтрокаТабличнойЧасти.КодТНВЭД, "ЕдиницаИзмерения");
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаПоТНВЭД Тогда
		СтрокаТабличнойЧасти.КоличествоПоТНВЭД = СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ЕдиницыРазличаются = Ложь;
	Иначе
		СтрокаТабличнойЧасти.ЕдиницыРазличаются = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НалоговаяБазаПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ВалютаДолларыСША <> Справочники.Валюты.ПустаяСсылка() Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаТабличнойЧасти.ВалютаДолларыСША, СтрокаТабличнойЧасти.ДатаПринятияНаУчет);
		СтрокаТабличнойЧасти.СтатСтоимостьДолларыСША = 
			СтрокаТабличнойЧасти.НалоговаяБазаНДС * (СтруктураКурса.Кратность/СтруктураКурса.Курс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	Документы.ЗаявлениеОВвозеТоваров.РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьУчастникиСделкиВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.УчастникиСделки.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораУчастникиСделкиНаСервере(ВыбранноеЗначение)

	ТаблицаУчастникиСделки = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаУчастникиСделки);
	
	Объект.УчастникиСделки.Загрузить(ТаблицаУчастникиСделки);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция ПоместитьСпецификацииВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Спецификации.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьВыпискиБанкаВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ВыпискиБанка.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьСведенияОЗачетеВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СведенияОЗачете.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораСпецификацииНаСервере(ВыбранноеЗначение)

	ТаблицаСпецификации = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСпецификации);
	Объект.Спецификации.Загрузить(ТаблицаСпецификации);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение)

	ТаблицаВыпискиБанка = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВыпискиБанка);
	Объект.ВыпискиБанка.Загрузить(ТаблицаВыпискиБанка);
	
	ТаблицаСведенияОЗачете = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСведенияОЗачете);
	Объект.СведенияОЗачете.Загрузить(ТаблицаСведенияОЗачете);
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАкцизы(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДатаПринятияНаУчет,ФактурнаяСтоимость,НалоговаяБазаНДС,СтавкаНДС,СуммаНДС,СтатСтоимостьДолларыСША,
		|НалоговаяБазаАкцизы,ЕдиницаИзмеренияАкциза,ТвердаяСтавкаАкциза,АдвалорнаяСтавкаАкциза,СуммаАкциза,АналитикаАкциза");
		
	ДанныеОбъекта = Новый Структура(
		"ВалютаРегламентированногоУчета,ВалютаДолларыСША,ВалютаДокумента",
		ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.ВалютаДокумента);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ВыбранноеЗначение);
	
	РасчитатьСуммыВТабличнойЧастиНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьАналитикуАкцизов(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если Объект.ВалютаДокумента <> ВалютаДоговора Тогда
		
		Объект.ВалютаДокумента = ВалютаДоговора;
		НаименованиеВалютыДокумента = Объект.ВалютаДокумента.Наименование;
		
		ДанныеОбъекта = Новый Структура(
			"ВалютаРегламентированногоУчета, ВалютаДолларыСША, ВалютаДокумента",
			ВалютаРегламентированногоУчета, ВалютаДолларыСША, Объект.ВалютаДокумента);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
	
			РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
			
		КонецЦикла;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	СтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		 ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьДатуПринятияНаУчет(ДанныеСтрокиТаблицы, ДанныеОбъекта)

	Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ДокументПартии) Тогда
		
		ДанныеСтрокиТаблицы.ДатаПринятияНаУчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТаблицы.ДокументПартии, "Дата");
		
		РасчитатьСуммыВТабличнойЧастиНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслугДляЗаполнения(ПоОдномуДокументу = Истина)

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьИзПоступленияЗавершение", ЭтотОбъект, Новый Структура);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",               Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",                   Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ТекущийДокумент",           Объект.Ссылка);
	СтруктураПараметров.Вставить("МассивВыбранныхДокументов", Новый Массив);
	СтруктураПараметров.Вставить("ПоОдномуДокументу",         ПоОдномуДокументу);
	
	Если Объект.Товары.Количество() > 0 Тогда 
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			СтруктураПараметров.МассивВыбранныхДокументов.Добавить(СтрокаТаблицы.ДокументПартии)
		КонецЦикла;
	КонецЕсли;

	ОткрытьФорму(
		"Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаВыбораОснования",
		СтруктураПараметров,
		ЭтаФорма, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументыПоступления = РезультатЗакрытия;
	
	Если ДокументыПоступления <> Неопределено Тогда
		ЗаполнитьПоПоступлениямНаСервере(ДокументыПоступления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлениямНаСервере(ДокументыПоступления) Экспорт
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВалютаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ДанныеОбъекта.Вставить("ВалютаДолларыСША", ВалютаДолларыСША);

	ТоварыПоДаннымПоступления = Документы.ЗаявлениеОВвозеТоваров.ТоварыПоДаннымПоступления(ДанныеОбъекта, ДокументыПоступления);
	
	Для каждого ДанныеНовойСтроки Из ТоварыПоДаннымПоступления Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНовойСтроки);
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодВидаТранспортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(ТекущиеДанные.КодВидаТранспорта);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.КодВидаТранспорта = ВыбранныйКод.Значение;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияАкцизов(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	ПараметрыФормы.Вставить("НалоговаяБазаАкцизы",    ДанныеСтроки.НалоговаяБазаАкцизы);
	ПараметрыФормы.Вставить("ТвердаяСтавкаАкциза",    ДанныеСтроки.ТвердаяСтавкаАкциза);
	ПараметрыФормы.Вставить("АдвалорнаяСтавкаАкциза", ДанныеСтроки.АдвалорнаяСтавкаАкциза);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияАкциза", ДанныеСтроки.ЕдиницаИзмеренияАкциза);
	ПараметрыФормы.Вставить("СуммаАкциза",            ДанныеСтроки.СуммаАкциза);
	ПараметрыФормы.Вставить("Номенклатура",           ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("ФактурнаяСтоимость",     ДанныеСтроки.ФактурнаяСтоимость);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения",       ДанныеСтроки.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("КодТНВЭД",               ДанныеСтроки.КодТНВЭД);
	ПараметрыФормы.Вставить("Количество",             ДанныеСтроки.Количество);
	ПараметрыФормы.Вставить("КоличествоПоТНВЭД",      ДанныеСтроки.КоличествоПоТНВЭД);
	ПараметрыФормы.Вставить("ДатаПринятияНаУчет",     ДанныеСтроки.ДатаПринятияНаУчет);
	ПараметрыФормы.Вставить("Организация",            Объект.Организация);
	ПараметрыФормы.Вставить("ВалютаДокумента",        Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВалютаРеглУчета",        ЭтотОбъект.ВалютаРегламентированногоУчета);
	
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРедактированияАкцизов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВЭлектронномВиде

&НаСервере
Функция ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор, ТолькоПроверка = Ложь)
	
	Возврат Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка);
	
КонецФункции

&НаКлиенте
Процедура СохранитьВыгружаемыеДанные(ВыгружаемыеДанные)
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		Попытка
			
			ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			
			ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
			+ """! Возможно, недостаточно места на диске или диск защищен от записи.";
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
			
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузки2015()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураРеквизитов", СтруктураРеквизитовВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыВыгрузкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаВыгрузки2015Кв1", ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузки2014()

	ФормаВыгрузки = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВыгрузки2012Кв3");
	ФормаВыгрузки.СтруктураРеквизитов = СтруктураРеквизитовВыгрузки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыВыгрузкиЗавершение", ЭтотОбъект);
	
	ФормаВыгрузки.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыгрузки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыгрузки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СтруктураРеквизитовВыгрузки = Результат;
		
		Модифицированность = Истина;
				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеРевизитовВыгрузки()
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
				
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	
	СтрокаСведений = "ИННЮЛ, ИННФЛ, КППЮЛ, НаимЮЛПол, ФИО, КодНО, ФИОРук, ФИОБух, ФИОУпПред, ИННРук, ИННБух, ИННУпПред";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации) Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
				
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикКПП", 	СведенияОбОрганизации.КППЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННФЛ", СведенияОбОрганизации.ИННФЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикНаимЮЛ",СведенияОбОрганизации.НаимЮЛПол);
	ПараметрыВыгрузки.Вставить("НалогоплательщикФИО", 	СведенияОбОрганизации.ФИО);
	
	ПараметрыВыгрузки.Вставить("КодИФНС", СведенияОбОрганизации.КодНО);
	
	ДанныеПредставителя = ПолучитьСведенияОПредставителе(СведенияОбОрганизации.КодНО);
	
	ПараметрыВыгрузки.Вставить("ПрОтпр", Число(ДанныеПредставителя.ТипПредставителя));
	
	ОтправительЯвляетсяЮЛ = Истина;
	
	Если ДанныеПредставителя.ТипПредставителя = "1" Тогда
		
		ФИОПодп1Титул = СведенияОбОрганизации.ФИОРук;
		ФИОПодп2Титул = СведенияОбОрганизации.ФИОБух;
		
	Иначе
		
		ФИОПодп1Титул = СведенияОбОрганизации.ФИОУпПред;
		
	КонецЕсли;
	
	НаимОтпр 		= "";
	ИННЮЛОтпр		= "";
	КППОтпр         = "";

	ИННФЛОтпр       = "";

	ФамилияФЛОтпр   = "";
	ИмяФЛОтпр       = "";
	ОтчествоФЛОтпр  = "";

	ПрПодп1         = 0;
	ИННФЛПодп1      = СведенияОбОрганизации.ИННРук;
	ДолжностьПодп1  = "";
	
	ФамилияПодп1    = "";
	ИмяПодп1        = "";
	ОтчествоПодп1   = "";

	НаимДовПодп1    = "";
	НомерДовПодп1   = "";
	ДатаДовПодп1    = "";
	
	ПрПодп2         = 0;
    ИННФЛПодп2      = СведенияОбОрганизации.ИННБух;;
	ДолжностьПодп2  = "";
	
	ФамилияПодп2    = "";
	ИмяПодп2        = "";
	ОтчествоПодп2   = "";
	
	НаимДовПодп2    = "";
	НомерДовПодп2   = "";
	ДатаДовПодп2    = "";

	ПрКурьер        = 0;
	ИННФЛКурьер		= ИННФЛПодп1;

	ФамилияКурьер   = "";
	ИмяКурьер       = "";
	ОтчествоКурьер  = "";
	
	НаимДовКурьер   = "";
	НомерДовКурьер  = "";
	ДатаДовКурьер   = "";

	Если ДанныеПредставителя.ТипПредставителя = "1" Тогда

		Если НЕ ЭтоПБОЮЛ Тогда
			
			ОтправительЯвляетсяЮЛ = Истина;
			
			НаимОтпр 		= СведенияОбОрганизации.НаимЮЛПол;
			ИННЮЛОтпр		= СведенияОбОрганизации.ИННЮЛ;
			КППОтпр         = СведенияОбОрганизации.КППЮЛ;
			
			ПрПодп1 = 2;
			
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			ПрПодп2 = 2;
			
			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			ПрКурьер = 2;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
			
		Иначе
			
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ИННФЛОтпр        = СведенияОбОрганизации.ИННФЛ;
			
			ФИОотправителя   = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;

			ПрПодп1 = 1;
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			ПрКурьер = 1;
			
			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеПредставителя.флПредставительЮрЛицо Тогда

			ОтправительЯвляетсяЮЛ = Истина;
			
			ПредставительСсылка = ДанныеПредставителя.ПредставительСсылка;
			НаимОтпр 		    = СокрЛП(ПредставительСсылка);
			ИННЮЛОтпр		    = ПредставительСсылка.ИНН;
			КППОтпр             = ПредставительСсылка.КПП;	
			
			ПрПодп1 = 3;
			ФИОПодп1        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;

			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;

			ПрКурьер 		= 3;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
			
		Иначе
			
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ИННФЛОтпр        = СведенияОбОрганизации.ИННУпПред;
			
			ФИОотправителя   = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;
			
			ПрПодп1 		= 3;
			ФамилияПодп1    = ФИОотправителя.Фамилия;
			ИмяПодп1        = ФИОотправителя.Имя;
			ОтчествоПодп1   = ФИОотправителя.Отчество;
			
			ФИОПодп2        = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			ПрКурьер = 3;
			
			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОтправительЯвляетсяЮЛ", ОтправительЯвляетсяЮЛ);
	
	ПараметрыВыгрузки.Вставить("НаимОтпр", 		НаимОтпр);
	ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		ИННЮЛОтпр);
	ПараметрыВыгрузки.Вставить("КППОтпр",       КППОтпр);

	ПараметрыВыгрузки.Вставить("ИННФЛОтпр",     ИННФЛОтпр);

	ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр", ФамилияФЛОтпр);
	ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",     ИмяФЛОтпр);
	ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр",ОтчествоФЛОтпр);

	ПараметрыВыгрузки.Вставить("ПрПодп1",       ПрПодп1);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",    ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1",ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", ОтчествоПодп1);

	ПараметрыВыгрузки.Вставить("НаимДовПодп1",  НаимДовПодп1);
	ПараметрыВыгрузки.Вставить("НомерДовПодп1", НомерДовПодп1);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп1",  ДатаДовПодп1);
	
	ПараметрыВыгрузки.Вставить("ПрПодп2",       ПрПодп2);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп2",    ИННФЛПодп2);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп2",ДолжностьПодп2);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп2",  ФамилияПодп2);
	ПараметрыВыгрузки.Вставить("ИмяПодп2",      ИмяПодп2);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп2", ОтчествоПодп2);

	ПараметрыВыгрузки.Вставить("НаимДовПодп2",  НаимДовПодп2);
	ПараметрыВыгрузки.Вставить("НомерДовПодп2", НомерДовПодп2);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  ДатаДовПодп2);
	
	ПараметрыВыгрузки.Вставить("ОтправленПочтой", Ложь);
	ПараметрыВыгрузки.Вставить("ПрКурьер",      ПрКурьер);
	ПараметрыВыгрузки.Вставить("ИННФЛКурьер",   ИННФЛКурьер);
	                 
	ПараметрыВыгрузки.Вставить("ФамилияКурьер", ФамилияКурьер);
	ПараметрыВыгрузки.Вставить("ИмяКурьер",     ИмяКурьер);
	ПараметрыВыгрузки.Вставить("ОтчествоКурьер",ОтчествоКурьер);
	
	ПараметрыВыгрузки.Вставить("НаимДовКурьер",  НаимДовКурьер);
	ПараметрыВыгрузки.Вставить("НомерДовКурьер", НомерДовКурьер);
	ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  ДатаДовКурьер);
		
	ПараметрыВыгрузки.Вставить("ФИОУпПред", СведенияОбОрганизации.ФИОУпПред);
	ПараметрыВыгрузки.Вставить("ИННУпПред", СведенияОбОрганизации.ИННУпПред);
	
	ПараметрыВыгрузки.Вставить("ФИОРук",    СведенияОбОрганизации.ФИОРук);
	    	
	Возврат ПараметрыВыгрузки;	
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОПредставителе(КодИФНС) Экспорт
	
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ТипПредставителя = "1";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Код,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Представитель,
	|	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Код = &Код
	|	И РегистрацииВНалоговомОргане.Владелец = &Владелец");
	
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		
		ТипПредставителя = "2";
		
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			
			флПредставительЮрЛицо = Истина;
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
			ПредставительСсылка = Выборка.Представитель;
			
		Иначе
			
			флПредставительЮрЛицо = Ложь;
			ПредставительСсылка = Выборка.Представитель;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ТипПредставителя, флПредставительЮрЛицо, ФИОПредставителя, ПредставительСсылка", 
							 ТипПредставителя, флПредставительЮрЛицо, ФИОПредставителя, ПредставительСсылка);
	
КонецФункции

#КонецОбласти

#Область ОтправкаВФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтатусОтправки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	СтруктураПараметров.Вставить("Форма", ЭтаФорма);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодачаСтатформыВФТС

&НаКлиенте
Процедура СоздатьСтатформуВФТСНажатие(Элемент)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетностьВФТС) Тогда
		Попытка
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(Объект.Дата));
			ПараметрыФормы.Вставить("мСохраненныйДок",          Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецМесяца(Объект.Дата));
			ПараметрыФормы.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
			ПараметрыФормы.Вставить("Организация",              Объект.Организация);
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          "ФормаОтчетаПоЗаявлениюОВвозеТоваров");
			ПараметрыФормы.Вставить("ЗаявлениеОВвозеТоваров",   Объект.Ссылка);
			ПараметрыФормы.Вставить("НужноОповещатьОСоздании");
			
			ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаОтчетаПоЗаявлениюОВвозеТоваров", ПараметрыФормы).Открыть();
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось открыть форму отчета ""Статистическая форма учета перемещения товаров"".'"));
			
		КонецПопытки;
	Иначе
		ПоказатьЗначение(,ОтчетностьВФТС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСсылкуНаСуществующийОтчетВФТС()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтчетностьВФТС = Неопределено;
		Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Сдать в ФТС'");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОтчетности", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка,
	               |	РегламентированныйОтчет.ДанныеОтчета
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ВидОтчетности = &ВидОтчетности
	               |	И РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС""";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из Результат Цикл
		ДанныеОтчета = Стр.ДанныеОтчета.Получить();
		
		Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") ИЛИ НЕ ДанныеОтчета.Свойство("ЗаявлениеОВвозеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОтчета.ЗаявлениеОВвозеТоваров.Ссылка = Объект.Ссылка Тогда
			ОтчетностьВФТС = Стр.Ссылка;
			Элементы.СоздатьСтатформуВФТС.Заголовок = НСтр("ru = 'Статформа в ФТС'");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрока = Ложь;

#КонецОбласти


