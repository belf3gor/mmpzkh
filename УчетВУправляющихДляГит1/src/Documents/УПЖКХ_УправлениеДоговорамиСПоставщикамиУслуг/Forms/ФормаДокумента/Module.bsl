
// Хранит текущий договор контрагента,
//  используется для восстановления старого договора в случае некорректного выбора нового.
&НаКлиенте
Перем мТекущийДоговорКонтрагента;

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА СЕРВЕРЕ)

// Возвращает параметры поставки услуг.
//  Параметры:
//   ДоговорПоставщика - Ссылка - Ссылка на договор поставщика.
//
//  Возвращаемое значение:
//   СтруктураПараметров - Структура - Структура, содержащая значения реквизитов ВариантПоставкиУслуг и ОплатаЧерезУК
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоставкиНаСервере(ДоговорПоставщика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорПоставщика", ДоговорПоставщика);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.УПЖКХ_ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	ДоговорыКонтрагентов.УПЖКХ_ОплатаЧерезУК КАК ОплатаЧерезУК
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДоговорПоставщика";
	
	СтруктураПараметров = Новый Структура("ВариантПоставкиУслуг, ОплатаЧерезУК");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Формирует сообщения об изменении не действующих, на данный момент условий поставки или договора поставки.
//  Параметры:
//   Нет.
//
//  Возвращаемое значение:
//   СтруктураПараметров - Структура - Структура, содержащая значения реквизитов ВариантПоставкиУслуг и ОплатаЧерезУК
//
&НаСервере
Функция ПолучитьСообщенияОбИзмененияхПоставкиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объекты",                Объект.Объекты.Выгрузить());
	Запрос.УстановитьПараметр("ДатаГраница",            Объект.Дата);
	Запрос.УстановитьПараметр("ДатаТекущая",            ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",            Объект.Организация);
	Запрос.УстановитьПараметр("ВидУслуги",              Объект.ВидУслуги);
	Запрос.УстановитьПараметр("Поставщик",              Объект.Поставщик);
	Запрос.УстановитьПараметр("ВариантПоставкиУслуг",   Объект.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг);
	Запрос.УстановитьПараметр("ДоговорПоставщикаУслуг", Объект.ДоговорПоставщикаУслуг);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Объект КАК Объект
	|ПОМЕСТИТЬ врОбъекты
	|ИЗ
	|	&Объекты КАК Объекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОбъекты.Объект КАК Объект
	|ПОМЕСТИТЬ врЗдания
	|ИЗ
	|	врОбъекты КАК врОбъекты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА врОбъекты.Объект ССЫЛКА Справочник.КВП_Здания
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врОбъекты.Объект КАК Объект,
	|	КВП_Подъезды.Владелец КАК Здание
	|ПОМЕСТИТЬ врПодъезды
	|ИЗ
	|	врОбъекты КАК врОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ПО врОбъекты.Объект = КВП_Подъезды.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА врОбъекты.Объект ССЫЛКА Справочник.КВП_Подъезды
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врЗдания.Объект КАК Объект,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг
	|ПОМЕСТИТЬ врТаблицаДанных
	|ИЗ
	|	врЗдания КАК врЗдания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаГраница,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик
	|					И ВидУслуги = &ВидУслуги) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО врЗдания.Объект = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врПодъезды.Объект,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг
	|ИЗ
	|	врПодъезды КАК врПодъезды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаГраница,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик
	|					И ВидУслуги = &ВидУслуги) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО врПодъезды.Объект = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врЗдания.Объект КАК Объект,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг
	|ПОМЕСТИТЬ врТаблицаДанныхНаТекущийМомент
	|ИЗ
	|	врЗдания КАК врЗдания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаТекущая,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик
	|					И ВидУслуги = &ВидУслуги) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО врЗдания.Объект = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врПодъезды.Объект,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг
	|ИЗ
	|	врПодъезды КАК врПодъезды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаТекущая,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик
	|					И ВидУслуги = &ВидУслуги) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО врПодъезды.Объект = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДанных.Объект КАК Объект,
	|	врТаблицаДанных.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	врТаблицаДанных.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врТаблицаДанныхНаТекущийМомент.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслугТекущий,
	|	врТаблицаДанныхНаТекущийМомент.ВариантПоставкиУслуг КАК ВариантПоставкиУслугТекущий
	|ПОМЕСТИТЬ врТаблицаДанныхСТекущимиДоговорами
	|ИЗ
	|	врТаблицаДанных КАК врТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаДанныхНаТекущийМомент КАК врТаблицаДанныхНаТекущийМомент
	|		ПО врТаблицаДанных.Объект = врТаблицаДанныхНаТекущийМомент.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДанныхСТекущимиДоговорами.Объект КАК Объект,
	|	врТаблицаДанныхСТекущимиДоговорами.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	врТаблицаДанныхСТекущимиДоговорами.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врТаблицаДанныхСТекущимиДоговорами.ДоговорПоставщикаУслугТекущий КАК ДоговорПоставщикаУслугТекущий,
	|	врТаблицаДанныхСТекущимиДоговорами.ВариантПоставкиУслугТекущий КАК ВариантПоставкиУслугТекущий
	|ИЗ
	|	врТаблицаДанныхСТекущимиДоговорами КАК врТаблицаДанныхСТекущимиДоговорами
	|ГДЕ
	|	врТаблицаДанныхСТекущимиДоговорами.ДоговорПоставщикаУслуг <> &ДоговорПоставщикаУслуг
	|	И врТаблицаДанныхСТекущимиДоговорами.ДоговорПоставщикаУслугТекущий <> врТаблицаДанныхСТекущимиДоговорами.ДоговорПоставщикаУслуг";
	
	ТаблицаПредупреждений = Запрос.Выполнить().Выгрузить();
	МассивПредупрждений = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПредупреждений Цикл
		СтрокаПредупреждения = "";
		СтрокаПредупреждения = СтрокаПредупреждения + "По объекту " + ТекСтрока.Объект
							 + " изменены не действующие на данный момент условия поставки услуги." + Символы.ПС
							 + "Измененные условия: вариант поставки - " + ТекСтрока.ВариантПоставкиУслуг
							 + ", договор поставщика - " + ТекСтрока.ДоговорПоставщикаУслуг + "!"+Символы.ПС
							 + "Действующие условия: вариант поставки - " + ТекСтрока.ВариантПоставкиУслугТекущий
							 + ", договор поставщика - " + ТекСтрока.ДоговорПоставщикаУслугТекущий + "!";
		МассивПредупрждений.Добавить(СтрокаПредупреждения);
	КонецЦикла;
	
	Возврат МассивПредупрждений;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА КЛИЕНТЕ)

// Заполняет параметры поставки услуг.
&НаКлиенте
Процедура ЗаполнитьПараметрыПоставкиУслуги()
	
	ПараметрыПоставки = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ДоговорПоставщикаУслуг) Тогда
		ПараметрыПоставки = 
			ПолучитьПараметрыПоставкиНаСервере(Объект.ДоговорПоставщикаУслуг);
		
		Если НЕ ПараметрыПоставки = Неопределено И ЗначениеЗаполнено(ПараметрыПоставки.ВариантПоставкиУслуг) Тогда
			ВариантПоставкиУслуг = ПараметрыПоставки.ВариантПоставкиУслуг;
		Иначе
			ВариантПоставкиУслуг = "Не заполнено";
		КонецЕсли;
		
		Если НЕ ПараметрыПоставки = Неопределено Тогда
			ОплатаЧерезУК = ПараметрыПоставки.ОплатаЧерезУК;
		Иначе
			ОплатаЧерезУК = "Не заполнено";
		КонецЕсли;
			
		Элементы.СведенияПоДоговору.Заголовок = "Используемый вариант поставки: "+ВариантПоставкиУслуг+"; Оплата осуществляется через УК: "+ОплатаЧерезУК;
	Иначе
		Элементы.СведенияПоДоговору.Заголовок = "Сведения по условиям договора не доступны, выберите договор";
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьПараметрыПоставкиУслуги();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		// Сообщим информацию об изменениях поставки на зданиях и подъездах в них.
		МассивСообщений = ПолучитьСообщенияОбИзмененияхПоставкиНаСервере();
		
		Для Каждого ТекПредупреждение Из МассивСообщений Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекПредупреждение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура-обработчик события "ПослеЗаписиНаСервере" формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Организация".
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПоставщикПриИзменении(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Поставщик".
//
&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ЗаполнитьПараметрыПоставкиУслуги();
	
КонецПроцедуры // ПоставщикПриИзменении()

&НаКлиенте
Процедура ДоговорПоставщикаУслугПриИзменении(Элемент)
	ЗаполнитьПараметрыПоставкиУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСведенияПоДоговору(Команда)
	
	Если Не Объект.ДоговорПоставщикаУслуг.Пустая() Тогда
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьФормуСОтбором(ЭтотОбъект, Элементы.ДоговорПоставщикаУслуг, Объект.ДоговорПоставщикаУслуг, "Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Истина, "ЗавершениеОткрытияФормы");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Договор не выбран.");
	КонецЕсли;

КонецПроцедуры

// Обрабатывает события завершения открытия формы.
&НаКлиенте
Процедура ЗавершениеОткрытияФормы(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьПараметрыПоставкиУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставщикаУслугОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьФормуСОтбором(ЭтотОбъект, Элемент, Объект.ДоговорПоставщикаУслуг, "Справочник.ДоговорыКонтрагентов.ФормаОбъекта");
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ВидУслуги".
//
&НаКлиенте
Процедура ВидУслугиПриИзменении(Элемент)
	
	ЗаполнитьПараметрыПоставкиУслуги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура заполнения табличной части объектов.
&НаКлиенте
Процедура Заполнить(Команда)
	
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СписокТиповЗначенийОбъектов = Новый СписокЗначений;
	СписокТиповЗначенийОбъектов.Добавить("Здания");
	СписокТиповЗначенийОбъектов.Добавить("Подъезды");
	
	СтруктураПараметровОтбора.Вставить("ТипОбъекта"       , "Здания");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта"   , СписокТиповЗначенийОбъектов);
	СтруктураПараметровОтбора.Вставить("Организация"      , Объект.Организация);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатВыбораЗаполнить", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "Заполнить()".
Процедура ОбработатьРезультатВыбораЗаполнить(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	СписокОбъектов = РезультатВыбора;
	Если ТипЗнч(СписокОбъектов) = Тип("СписокЗначений")
	   И СписокОбъектов.Количество() > 0 Тогда
		
		НеобходимаПроверкаСуществованияОбъектВТЧ = Ложь;
		
		ДопПараметры       = Новый Структура("НеобходимаПроверкаСуществованияОбъектВТЧ, СписокОбъектов", НеобходимаПроверкаСуществованияОбъектВТЧ, СписокОбъектов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнить", ЭтотОбъект, ДопПараметры);
		Если Объект.Объекты.Количество() > 0 Тогда
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьПродолжение(НеобходимаПроверкаСуществованияОбъектВТЧ, СписокОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ОбработатьРезультатВыбораЗаполнить()".
Процедура ОбработатьРезультатВопросаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НеобходимаПроверкаСуществованияОбъектВТЧ = ДополнительныеПараметры.НеобходимаПроверкаСуществованияОбъектВТЧ;
	СписокОбъектов                           = ДополнительныеПараметры.СписокОбъектов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Объекты.Очистить();
	Иначе
		НеобходимаПроверкаСуществованияОбъектВТЧ = Истина;
	КонецЕсли;
	
	ЗаполнитьПродолжение(НеобходимаПроверкаСуществованияОбъектВТЧ, СписокОбъектов);

КонецПроцедуры // ОбработатьРезультатВопросаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ОбработатьРезультатВопросаЗаполнить()".
Процедура ЗаполнитьПродолжение(НеобходимаПроверкаСуществованияОбъектВТЧ, СписокОбъектов)
	
	Для Каждого Строка ИЗ СписокОбъектов Цикл
		
		Если НеобходимаПроверкаСуществованияОбъектВТЧ
		   И Объект.Объекты.НайтиСтроки(Новый Структура("Объект", Строка.Значение)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = Объект.Объекты.Добавить();
		СтрокаТЧ.Объект = Строка.Значение;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПродолжение()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
