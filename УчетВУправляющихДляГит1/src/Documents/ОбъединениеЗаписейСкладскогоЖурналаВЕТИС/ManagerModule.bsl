
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеВЕТИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи;
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка, 
			СтатусОбработки, 
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОбъединенияЗаписейСкладскогоЖурнала Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Выполнен;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОтклоненВЕТИС;
		
		Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, 
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
		// Подготовка данных к восстановлению
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
		// Выполнена проверка корректности оформления.
		// Из ВетИС получен пустой ответ на запрос измененных записей складского журнала. 
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица   = ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций();
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОбъединенияЗаписейСкладскогоЖурнала);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОбъединенияЗаписейСкладскогоЖурнала);
	
	Возврат Таблица;
	
КонецФункции


// Опеределить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		РасчетСтатусовОформленияВЕТИС.РассчитатьСтатусОформленияДокументаВЕТИС(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
	ОбновитьДвижения = ИнтеграцияВЕТИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийРезерв(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И ОбновитьДвижения Тогда
		
		ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

Функция ОперацииДопустимыхДействий() Экспорт
	
	СоответствиеОпераций = Новый Соответствие;
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
		
	Возврат СоответствиеОпераций
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОтклоненВЕТИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСВЕТИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные Тогда
		
		Возврат ЗапросНаОбъединениеЗаписейСкладскогоЖурналаXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда
		
		Возврат ИнтеграцияВЕТИС.ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Обрабатывает результат выполнения запроса на объединение записей складского журнала, который содержит:
// 	- сведения о добавленной в складской журнал продукции записи, содержащей общий объем, даты выработки и срок годности.
//
Функция ОбработатьРезультатЗапросаНаОбъединениеЗаписейСкладскогоЖурнала(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.stockEntryList.stockEntry Цикл
				
				ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
				
				ДанныеЗаписиСкладскогоЖурнала = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
					ЭлементДанных,
					ЗаписьСкладскогоЖурнала,
					ХозяйствующийСубъект,
					Предприятие,
					ПараметрыОбмена);
				
				Если ДанныеЗаписиСкладскогоЖурнала <> Неопределено
					И ДокументОбъект.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить
					И НЕ ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурнала)
					И ДанныеЗаписиСкладскогоЖурнала.Объект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения Тогда
					ДокументОбъект.ЗаписьСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурнала.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументОбъект.Записать();
			
			ЗаполнитьСоответствиеНоменклатурыПослеОбъединения(ДокументОбъект);
			
			ОбъектИзменен = Истина;
			
		КонецЕсли;
		
		ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДанныеДокумента.Документ,
			ДанныеДокумента.ВходящаяОперация,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Истина);
	
	ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	
	Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
		
		ВозвращаемоеЗначение = Неопределено;
		ДополнительныеПараметры.ЭлементОчереди.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
		ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
		ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
		ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаписиЖурналаКоторыеНельзяОбъединить(ДобавляемыеЗаписиЖурнала, ЭталонныеЗаписиЖурнала = Неопределено) Экспорт

	Продукция = Новый Массив;
	Для каждого ЗаписьЖурнала Из ДобавляемыеЗаписиЖурнала Цикл
		Продукция.Добавить(ЗаписьЖурнала.Продукция);
	КонецЦикла;
	
	СоответствиеТипЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(Продукция);
	
	ЖиваяПродукция = Новый Массив;
	Для каждого Строка Из СоответствиеТипЖивыеЖивотные Цикл
		
		Если Строка.Значение Тогда
			ЖиваяПродукция.Добавить(Строка.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕдиницыИзмеренияПродукции.ТипПродукцииGUID       КАК ТипПродукцииGUID,
	|	ЕдиницыИзмеренияПродукции.ВидПродукцииGUID       КАК ВидПродукцииGUID,
	|	ЕдиницыИзмеренияПродукции.ПродукцияGUID          КАК ПродукцияGUID,
	|	ЕдиницыИзмеренияПродукции.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмеренияПродукции.ГруппаЕдиницИзмерения  КАК ГруппаЕдиницИзмерения
	|ПОМЕСТИТЬ ЕдиницыИзмеренияПродукции
	|ИЗ
	|	&ЕдиницыИзмеренияПродукции КАК ЕдиницыИзмеренияПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписьИсточник.Ссылка)                               КАК КоличествоСтрок,
	|	ЗаписьИсточник.ХозяйствующийСубъект                                       КАК ХозяйствующийСубъект,
	|	ЗаписьИсточник.Предприятие                                                КАК Предприятие,
	|	ЗаписьИсточник.Продукция.Продукция                                        КАК Продукция,
	|	ЗаписьИсточник.СтранаПроизводства                                         КАК СтранаПроизводства,
	|	ЗаписьИсточник.НизкокачественнаяПродукция                                 КАК НизкокачественнаяПродукция,
	|	ЗаписьИсточник.СкоропортящаясяПродукция                                   КАК СкоропортящаясяПродукция,
	|	ЕСТЬNULL(ЕдиницыИзмеренияПродукции.ГруппаЕдиницИзмерения, НЕОПРЕДЕЛЕНО)   КАК ГруппаЕдиницИзмерения,
	|	ЗаписьИсточник.СрокГодностиТочностьЗаполнения                             КАК СрокГодностиТочностьЗаполнения,
	|	ЗаписьИсточник.СрокГодностиСтрока                                         КАК СрокГодностиСтрока,
	|	ЗаписьИсточник.Продукция                                                  КАК ПродукцияЗаписи,
	|	ЗаписьИсточник.ПродукцияПроизводителя                                     КАК ПродукцияПроизводителя
	|ПОМЕСТИТЬ ЗаписьПолучатель
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписьИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕдиницыИзмеренияПродукции КАК ЕдиницыИзмеренияПродукции
	|		ПО (ЕдиницыИзмеренияПродукции.ЕдиницаИзмерения = ЗаписьИсточник.ЕдиницаИзмеренияВЕТИС)
	|			И (ЕдиницыИзмеренияПродукции.ВидПродукцииGUID = ЗаписьИсточник.Продукция.Продукция.Идентификатор)
	|ГДЕ
	|	ЗаписьИсточник.Ссылка В(&ЭталонныеЗаписиЖурнала)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписьИсточник.ХозяйствующийСубъект,
	|	ЗаписьИсточник.Предприятие,
	|	ЗаписьИсточник.Продукция.Продукция,
	|	ЗаписьИсточник.СтранаПроизводства,
	|	ЗаписьИсточник.НизкокачественнаяПродукция,
	|	ЗаписьИсточник.СкоропортящаясяПродукция,
	|	ЕСТЬNULL(ЕдиницыИзмеренияПродукции.ГруппаЕдиницИзмерения, НЕОПРЕДЕЛЕНО),
	|	ЗаписьИсточник.СрокГодностиТочностьЗаполнения,
	|	ЗаписьИсточник.СрокГодностиСтрока,
	|	ЗаписьИсточник.Продукция,
	|	ЗаписьИсточник.ПродукцияПроизводителя
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСтрок УБЫВ,
	|	Продукция,
	|	СтранаПроизводства,
	|	НизкокачественнаяПродукция,
	|	СкоропортящаясяПродукция,
	|	ГруппаЕдиницИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписьИсточник.Ссылка                                                   КАК Ссылка,
	|	ЗаписьИсточник.Представление                                            КАК СсылкаПредставление,
	|	ЗаписьИсточник.ХозяйствующийСубъект                                     КАК Источник_ХозяйствующийСубъект,
	|	ЗаписьИсточник.Предприятие                                              КАК Источник_Предприятие,
	|	ЗаписьИсточник.Продукция.Продукция                                      КАК Источник_Продукция,
	|	ЗаписьИсточник.СтранаПроизводства                                       КАК Источник_СтранаПроизводства,
	|	ЗаписьИсточник.НизкокачественнаяПродукция                               КАК Источник_НизкокачественнаяПродукция,
	|	ЗаписьИсточник.СкоропортящаясяПродукция                                 КАК Источник_СкоропортящаясяПродукция,
	|	ЕСТЬNULL(ЕдиницыИзмеренияПродукции.ГруппаЕдиницИзмерения, НЕОПРЕДЕЛЕНО) КАК Источник_ГруппаЕдиницИзмерения,
	|	ЗаписьПолучатель.ХозяйствующийСубъект                                   КАК Получатель_ХозяйствующийСубъект,
	|	ЗаписьПолучатель.ХозяйствующийСубъект.Представление                     КАК Получатель_ХозяйствующийСубъектПредставление,
	|	ЗаписьПолучатель.Предприятие                                            КАК Получатель_Предприятие,
	|	ЗаписьПолучатель.Предприятие.Представление                              КАК Получатель_ПредприятиеПредставление,
	|	ЗаписьПолучатель.Продукция                                              КАК Получатель_Продукция,
	|	ЗаписьПолучатель.Продукция.Представление                                КАК Получатель_ПродукцияПредставление,
	|	ЗаписьПолучатель.Продукция.Родитель.Представление                       КАК Получатель_ТипПродукцииПредставление,
	|	ЗаписьПолучатель.СтранаПроизводства                                     КАК Получатель_СтранаПроизводства,
	|	ЗаписьПолучатель.СтранаПроизводства.Представление                       КАК Получатель_СтранаПроизводстваПредставление,
	|	ЗаписьПолучатель.НизкокачественнаяПродукция                             КАК Получатель_НизкокачественнаяПродукция,
	|	ЗаписьПолучатель.СкоропортящаясяПродукция                               КАК Получатель_СкоропортящаясяПродукция,
	|	ЗаписьПолучатель.ГруппаЕдиницИзмерения                                  КАК Получатель_ГруппаЕдиницИзмерения,
	|	ЕСТЬNULL(ОстаткиПродукцииВЕТИС.КоличествоВЕТИС, 0) = 0                  КАК НетОстатка,
	|	ЗаписьИсточник.СрокГодностиТочностьЗаполнения                           КАК Источник_СрокГодностиТочностьЗаполнения,
	|	ЗаписьПолучатель.СрокГодностиТочностьЗаполнения                         КАК Получатель_СрокГодностиТочностьЗаполнения,
	|	ЗаписьИсточник.СрокГодностиСтрока                                       КАК Источник_СрокГодностиСтрока,
	|	ЗаписьПолучатель.СрокГодностиСтрока                                     КАК Получатель_СрокГодностиСтрока,
	|	ЗаписьИсточник.Продукция В (&ЖиваяПродукция)                            КАК Источник_Живая,
	|	ЗаписьПолучатель.ПродукцияЗаписи В (&ЖиваяПродукция)                    КАК Получатель_Живая,
	|	ЗаписьПолучатель.ПродукцияПроизводителя                                 КАК Получатель_ПродукцияПроизводителя,
	|	ЗаписьИсточник.ПродукцияПроизводителя                                   КАК Источник_ПродукцияПроизводителя
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписьИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕдиницыИзмеренияПродукции КАК ЕдиницыИзмеренияПродукции
	|		ПО (ЕдиницыИзмеренияПродукции.ЕдиницаИзмерения = ЗаписьИсточник.ЕдиницаИзмеренияВЕТИС)
	|			И (ЕдиницыИзмеренияПродукции.ВидПродукцииGUID = ЗаписьИсточник.Продукция.Продукция.Идентификатор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписьПолучатель КАК ЗаписьПолучатель
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|		ПО (ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала = ЗаписьИсточник.Ссылка)
	|ГДЕ
	|	ЗаписьИсточник.Ссылка В(&ДобавляемыеЗаписиЖурнала)
	|	И (ЗаписьИсточник.ХозяйствующийСубъект <> ЗаписьПолучатель.ХозяйствующийСубъект
	|			ИЛИ ЗаписьИсточник.Предприятие <> ЗаписьПолучатель.Предприятие
	|			ИЛИ ЕСТЬNULL(ЗаписьИсточник.Продукция.Продукция, НЕОПРЕДЕЛЕНО) <> ЗаписьПолучатель.Продукция
	|			ИЛИ ЗаписьИсточник.СтранаПроизводства <> ЗаписьПолучатель.СтранаПроизводства
	|			ИЛИ ЗаписьИсточник.НизкокачественнаяПродукция <> ЗаписьПолучатель.НизкокачественнаяПродукция
	|			ИЛИ ЗаписьИсточник.СкоропортящаясяПродукция <> ЗаписьПолучатель.СкоропортящаясяПродукция
	|			ИЛИ ЕСТЬNULL(ЕдиницыИзмеренияПродукции.ГруппаЕдиницИзмерения, НЕОПРЕДЕЛЕНО) <> ЗаписьПолучатель.ГруппаЕдиницИзмерения
	|			ИЛИ ЕСТЬNULL(ОстаткиПродукцииВЕТИС.КоличествоВЕТИС, 0) = 0
	|			ИЛИ ЗаписьИсточник.СрокГодностиТочностьЗаполнения <> ЗаписьПолучатель.СрокГодностиТочностьЗаполнения
	|				И (ЗаписьИсточник.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.Неприменимо)
	|					ИЛИ ЗаписьПолучатель.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.Неприменимо)
	|					ИЛИ ЗаписьИсточник.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ПустаяСсылка)
	|					ИЛИ ЗаписьПолучатель.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ПустаяСсылка))
	|			ИЛИ (ЗаписьИсточник.СрокГодностиСтрока = """"
	|					И ЗаписьПолучатель.СрокГодностиСтрока <> """"
	|				ИЛИ ЗаписьИсточник.СрокГодностиСтрока <> """"
	|					И ЗаписьПолучатель.СрокГодностиСтрока = """")
	|			ИЛИ (&ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня И ЗаписьИсточник.ПродукцияПроизводителя <> ЗаписьПолучатель.ПродукцияПроизводителя))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДобавляемыеЗаписиЖурнала",  ДобавляемыеЗаписиЖурнала);
	Запрос.УстановитьПараметр("ЭталонныеЗаписиЖурнала",    ?(ЭталонныеЗаписиЖурнала <> Неопределено,
	                                                         ЭталонныеЗаписиЖурнала,
	                                                         ДобавляемыеЗаписиЖурнала));
	
	Запрос.УстановитьПараметр("ЕдиницыИзмеренияПродукции", ПрочиеКлассификаторыВЕТИСВызовСервера.ЕдиницыИзмеренияПродукции());
	Запрос.УстановитьПараметр("ЖиваяПродукция",            ЖиваяПродукция);
	Запрос.УстановитьПараметр("ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня",
		ИнтеграцияВЕТИСВызовСервера.ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Возврат Выборка;
	
КонецФункции

Функция ПричиныПоКоторымНельзяОбъединитьЗаписи(Выборка, ЗаголовокПричин = Неопределено) Экспорт

	Если Выборка.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СписокСтрок = Новый Массив;
	
	Если ЗаголовокПричин <> Неопределено Тогда
		СписокСтрок.Добавить(ЗаголовокПричин);
	Иначе	
		СписокСтрок.Добавить(НСтр("ru = 'Невозможно объединить записи журнала по причинам:'"));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Источник_ХозяйствующийСубъект <> Выборка.Получатель_ХозяйствующийСубъект Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи разных хозяйствующих субъектов'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_Предприятие <> Выборка.Получатель_Предприятие Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи разных предприятий'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_Продукция <> Выборка.Получатель_Продукция Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять разную продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_СтранаПроизводства <> Выборка.Получатель_СтранаПроизводства Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять продукцию с происхождением из разных стран'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_НизкокачественнаяПродукция <> Выборка.Получатель_НизкокачественнаяПродукция Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять качественную и некачественной продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_СкоропортящаясяПродукция <> Выборка.Получатель_СкоропортящаясяПродукция Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять скоропортящуюся и нескоропортящуюся продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_ГруппаЕдиницИзмерения <> Выборка.Получатель_ГруппаЕдиницИзмерения Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять продукцию с объёмом, указанным в единицах измерения, относящихся к разным группам'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.НетОстатка Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи, для которых нет остатка'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Выборка.Источник_СрокГодностиСтрока = "" И Выборка.Получатель_СрокГодностиСтрока <> "")
			Или (Выборка.Источник_СрокГодностиСтрока <> "" И Выборка.Получатель_СрокГодностиСтрока = "") Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи с разными типами срока годности'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Выборка.Источник_СрокГодностиТочностьЗаполнения <> Выборка.Получатель_СрокГодностиТочностьЗаполнения)
			И (Выборка.Источник_СрокГодностиТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неприменимо
				Или Выборка.Получатель_СрокГодностиТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неприменимо
				Или Выборка.Источник_СрокГодностиТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ПустаяСсылка()
				Или Выборка.Получатель_СрокГодностиТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ПустаяСсылка()) Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи с пустым сроком годности и заполненным'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Источник_Живая <> Выборка.Получатель_Живая Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять живую и неживую продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИнтеграцияВЕТИСВызовСервера.ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня(ТекущаяДатаСеанса()) И
			Выборка.Источник_ПродукцияПроизводителя <> Выборка.Получатель_ПродукцияПроизводителя Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять разную продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Выборка.Сбросить();
	
	ТекстОшибки = СтрСоединить(СписокСтрок, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияВЕТИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ДанныеШапки.Предприятие КАК Предприятие,
	|	ДанныеШапки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Черновик)) КАК Статус
	|ИЗ
	|	Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ДанныеШапки.Ссылка)
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтатусыДвиженийРезерв", СтатусыДвиженийРезерв());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
	
	Если Не ИнтеграцияВЕТИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Ссылка КАК Документ,
	|	&ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	&Предприятие КАК Предприятие,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.ОбъединяемыеЗаписиСкладскогоЖурнала КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Статус В (&СтатусыДвиженийРезерв)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийРезерв()

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Черновик);
	Результат.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.Обрабатывается);
	Результат.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи);
	Результат.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОтклоненВЕТИС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Операция предназначена для объединения нескольких записей складского журнала продукции в одну,
//  для согласования особенностей партионного учёта, принятого в системе Меркурий и в учётной системе предприятия.
//  
//  На вход системы передаются следующие сведения:
//  - данные о хозяйствующем субъекте и предприятии, в журнале которого будет производиться объединение записей;
//  - позиции в складском журнале системы Меркурий, которые необходимо объединить;
//  - наименование продукции для объединенной записи журнала и другая дополнительная информация.
//  
//  Результатом выполнения данной операции является:
//  - добавление в складской журнал продукции записи, сформированной в результате объединения двух или более записей журнала,
//    содержащей общий объем, даты выработки и срок годности.
//
Функция ЗапросНаОбъединениеЗаписейСкладскогоЖурналаXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)

	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	ДанныеДокумента = ДанныеДляОбъединенияЗаписейСкладскогоЖурнала(ДокументСсылка, Операция);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, Шапка.ХозяйствующийСубъект, НастройкиОбменаВЕТИС);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат",    Новый Соответствие);
	
	ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
	
	#Область ФормированиеСообщения
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
	ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	// Площадка на которой осуществляется инвентаризация.
	Предприятие = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "enterprise");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Предприятие, "guid", Шапка.Предприятие_Идентификатор, СообщениеXML);
	
	// Сведения, необходимые для объединения нескольких записей журнала.
	ОбъединяемыеЗаписи = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "mergeOperation");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъединяемыеЗаписи, 
		"type", 
		Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.ПреобразоватьЗначение(Шапка.СпособОбъединения), 
		СообщениеXML);
		
	Если Шапка.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Присоединить Тогда
		
		ЗаписьЖурнала = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъединяемыеЗаписи, "sourceStockEntry");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЗаписьЖурнала, "uuid", Шапка.ЗаписьСкладскогоЖурнала_ИдентификаторВерсии, СообщениеXML);
		
		ОбъединяемыеЗаписи.sourceStockEntry.Добавить(ЗаписьЖурнала);
		
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из ДанныеДокумента.ОбъединяемыеЗаписи Цикл
	
		// Позиции в складском журнале системы Меркурий, не менее двух.
		ЗаписьЖурнала = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъединяемыеЗаписи, "sourceStockEntry");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЗаписьЖурнала, "uuid", ДанныеСтроки.ЗаписьСкладскогоЖурнала_ИдентификаторВерсии, СообщениеXML);
		
		ОбъединяемыеЗаписи.sourceStockEntry.Добавить(ЗаписьЖурнала);
		
		// Заполнение сведений о записи журнала.
		ОбменДаннымиВЕТИС.ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(ДанныеСтроки, СообщениеXML);
		
	КонецЦикла;
	
	// Сведения, которые будут содержаться в объединенной записи журнала.
	Если Шапка.СпособОбъединения = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить Тогда
		
		НоваяЗаписьЖурнала = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъединяемыеЗаписи, "resultStockEntry");
		ДанныеНовойЗаписи = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(НоваяЗаписьЖурнала, "batch");
			
		ВидПродукции = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДанныеНовойЗаписи, "subProduct");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВидПродукции, "guid", Шапка.ВидПродукции_Идентификатор, СообщениеXML);

		НаименованиеПродукции = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДанныеНовойЗаписи, "productItem");
		
		Если ЗначениеЗаполнено(Шапка.Продукция_Идентификатор) Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "guid", Шапка.Продукция_Идентификатор, СообщениеXML);
			
		Иначе
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "globalID", Шапка.GTIN, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "name", Шапка.НаименованиеПродукции, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "code", Шапка.Артикул, СообщениеXML);
			
			Если ЗначениеЗаполнено(Шапка.ФасовкаУпаковка_КодЕЭК) Тогда
				
				// Фасовка.
				Фасовка = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(НаименованиеПродукции, "packaging");
				
				// Тип упаковки.
				ТипУпаковки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(Фасовка, "packagingType");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТипУпаковки, "globalID", Шапка.ФасовкаУпаковка_КодЕЭК, СообщениеXML);
				
				// Количество единиц упаковки.
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Фасовка, "quantity", Шапка.ФасовкаКоличествоУпаковок, СообщениеXML);
				
				// Объём единицы упаковки товара.
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Фасовка, "volume", Шапка.ФасовкаКоличествоЕдиницВУпаковке, СообщениеXML);
				
				// Единица измерения объёма единицы упаковки товара.
				ЕдиницаИзмерения = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(Фасовка, "unit");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "guid", Шапка.ФасовкаЕдиницаИзмерения_Идентификатор, СообщениеXML);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ЕдиницаИзмерения_Идентификатор) Тогда
			ЕдиницаИзмерения = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДанныеНовойЗаписи, "unit");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "guid", Шапка.ЕдиницаИзмерения_Идентификатор, СообщениеXML);
		КонецЕсли;
		
		ОбъединяемыеЗаписи.resultStockEntry.Добавить(НоваяЗаписьЖурнала);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = Шапка.ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Шапка.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = ДокументСсылка;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	СообщениеXML.Версия               = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;

КонецФункции

Функция ДанныеДляОбъединенияЗаписейСкладскогоЖурнала(ДокументСсылка, Операция)

	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = &Операция
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	ДанныеДокумента.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ДанныеДокумента.ХозяйствующийСубъект.Идентификатор КАК ХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.Предприятие КАК Предприятие,
	|	ДанныеДокумента.Предприятие.Идентификатор КАК Предприятие_Идентификатор,
	|	ДанныеДокумента.ЗаписьСкладскогоЖурнала.ИдентификаторВерсии КАК ЗаписьСкладскогоЖурнала_ИдентификаторВерсии,
	|	ДанныеДокумента.Продукция.Идентификатор КАК Продукция_Идентификатор,
	|	ДанныеДокумента.ВидПродукции.Идентификатор КАК ВидПродукции_Идентификатор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.РучнойВводПродукции
	|			ТОГДА ДанныеДокумента.НаименованиеПродукции
	|		ИНАЧЕ ДанныеДокумента.Продукция.Наименование
	|	КОНЕЦ КАК НаименованиеПродукции,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.РучнойВводПродукции
	|			ТОГДА ДанныеДокумента.GTIN
	|		ИНАЧЕ ДанныеДокумента.Продукция.GTIN
	|	КОНЕЦ КАК GTIN,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.РучнойВводПродукции
	|			ТОГДА ДанныеДокумента.Артикул
	|		ИНАЧЕ ДанныеДокумента.Продукция.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ДанныеДокумента.ФасовкаУпаковка.КодЕЭК КАК ФасовкаУпаковка_КодЕЭК,
	|	ДанныеДокумента.ФасовкаКоличествоУпаковок КАК ФасовкаКоличествоУпаковок,
	|	ДанныеДокумента.ФасовкаЕдиницаИзмерения.Идентификатор КАК ФасовкаЕдиницаИзмерения_Идентификатор,
	|	ДанныеДокумента.ФасовкаКоличествоЕдиницВУпаковке КАК ФасовкаКоличествоЕдиницВУпаковке,
	|	ДанныеДокумента.ЕдиницаИзмерения.Идентификатор КАК ЕдиницаИзмерения_Идентификатор,
	|	ДанныеДокумента.СпособОбъединения КАК СпособОбъединения
	|ИЗ
	|	Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО (Истина)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	
	#КонецОбласти
	
	#Область ОбъединяемыеЗаписи
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.ИдентификаторВерсии КАК ЗаписьСкладскогоЖурнала_ИдентификаторВерсии,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция.Идентификатор КАК Продукция_Идентификатор,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция.Наименование КАК Продукция_Наименование,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция.ВидПродукции.Идентификатор КАК ВидПродукцииGUID,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция.ВидПродукции.Наименование КАК ВидПродукцииНаименование,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.ОбъединяемыеЗаписиСкладскогоЖурнала КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ОбъединяемыеЗаписи");
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСоответствиеНоменклатурыПослеОбъединения(ДокументОбъект)

	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументОбъект.СпособОбъединения <> Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.ЗаписьСкладскогоЖурнала) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика КАК Характеристика,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция КАК Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Серия КАК Серия,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка КАК ЗаписьСкладскогоЖурнала,
	|	1 КАК Порядок,
	|	СоответствиеНоменклатурыВЕТИС.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ЗаписиСкладскогоЖурналаВЕТИС.Ссылка = &ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала В (&ОбъединяемыеЗаписи)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаписьСкладскогоЖурнала", ДокументОбъект.ЗаписьСкладскогоЖурнала);
	Запрос.УстановитьПараметр("ОбъединяемыеЗаписи", ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.ВыгрузитьКолонку("ЗаписьСкладскогоЖурнала"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(ДокументОбъект.ЗаписьСкладскогоЖурнала);
	
	ПорядокЗаписей = Результат.Скопировать();
	ПорядокЗаписей.Свернуть("Номенклатура,Характеристика,Серия,Порядок");
	ПорядокЗаписей.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	
	Для каждого Выборка Из Результат Цикл
	
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
			НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыВЕТИС);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СписокСтрок = ПорядокЗаписей.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			НоваяЗапись.Порядок = СписокСтрок[0].Порядок;
			СписокСтрок[0].Порядок = СписокСтрок[0].Порядок + 1;
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СписокСтрок = ПорядокЗаписей.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				НоваяЗапись.Порядок = СписокСтрок[0].Порядок;
				СписокСтрок[0].Порядок = СписокСтрок[0].Порядок + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
