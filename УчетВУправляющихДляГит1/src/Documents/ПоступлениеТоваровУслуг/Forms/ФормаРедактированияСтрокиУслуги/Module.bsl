////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата, Организация, ПодразделениеЗатрат, Номенклатура,
		|СчетУчетаНДС, СуммаНДС, НДСВключенВСтоимость, УчетАгентскогоНДС,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|ОтражениеВУСН,СпособУчетаНДС,
		|Контрагент, ДоговорКонтрагента
		|");

	НаименованиеНоменклатуры = "";
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НаименованиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Наименование");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счета учета: %1'"), НаименованиеНоменклатуры);
	
	УстановитьФункциональныеОпцииФормы();
	
	Элементы.СчетУчетаНДС.Видимость   = РаздельныйУчетНДСНаСчете19 ИЛИ НЕ НДСВключенВСтоимость ИЛИ УчетАгентскогоНДС;
	Элементы.СпособУчетаНДС.Видимость = РаздельныйУчетНДСНаСчете19;
	Элементы.ГруппаСчетаНУ.Видимость  = ПлательщикНалогаНаПрибыль;
	
	СчетЗатратОбработатьИзменение(ЭтаФорма);
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаРедактированияСтрокиУслуги",
		НСтр("ru='Новости: Поступление (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;

	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ПеренестиВДокумент Тогда
		СтруктураРезультат = Новый Структура();
		СтруктураРезультат.Вставить("СчетЗатрат",          СчетЗатрат);
		СтруктураРезультат.Вставить("ПодразделениеЗатрат", ПодразделениеЗатрат);
		СтруктураРезультат.Вставить("Субконто1", Субконто1);
		СтруктураРезультат.Вставить("Субконто2", Субконто2);
		СтруктураРезультат.Вставить("Субконто3", Субконто3);
		
		СтруктураРезультат.Вставить("СчетУчетаНДС",   СчетУчетаНДС);
		СтруктураРезультат.Вставить("СпособУчетаНДС", СпособУчетаНДС);
		
		СтруктураРезультат.Вставить("СчетЗатратНУ", СчетЗатратНУ);
		СтруктураРезультат.Вставить("СубконтоНУ1",  СубконтоНУ1);
		СтруктураРезультат.Вставить("СубконтоНУ2",  СубконтоНУ2);
		СтруктураРезультат.Вставить("СубконтоНУ3",  СубконтоНУ3);
		СтруктураРезультат.Вставить("СубконтоНУ3",  СубконтоНУ3);
		
		СтруктураРезультат.Вставить("ОтражениеВУСН",ОтражениеВУСН);
		 
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФормаРедактированияСтроки_Закрыть" И Источник = ВладелецФормы Тогда
		// Сообщение от основной формы документа при нажатии там Esc.
		// Сбрасываем флаг модифицированности и закрываем форму редактирования строки без вопросов.
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратНУ = СчетЗатрат;

	СчетЗатратОбработатьИзменение(ЭтаФорма);
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(3);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Организация, Дата);
	
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
		Поле = "СчетЗатрат";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если РаздельныйУчетНДСНаСчете19 ИЛИ НЕ (НДСВключенВСтоимость И НЕ УчетАгентскогоНДС) Тогда
		Если СуммаНДС > 0 И НЕ ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета НДС'"));
			Поле = "СчетУчетаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда

		Если НЕ ЗначениеЗаполнено(ОтражениеВУСН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Расходы (НУ)'"));
			Поле = "ОтражениеВУСН";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;

	КонецЕсли;
	
	Если РаздельныйУчетНДСНаСчете19 
	   И СуммаНДС > 0 И НЕ ЗначениеЗаполнено(СпособУчетаНДС) Тогда
	
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Способ учета НДС'"));
		Поле = "СпособУчетаНДС";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"Субконто", "ПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратНУДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНУ(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоНУ", "ПодразделениеЗатрат", "СубконтоНУ", "ПодразделениеЗатрат", "СчетЗатратНУ");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратНУДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СчетЗатратОбработатьИзменение(Форма)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Форма, ПараметрыУстановкиСвойствСубконто(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетЗатратНУОбработатьИзменение(Форма)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Форма, ПараметрыУстановкиСвойствСубконтоНУ(Форма));

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, ЭтотОбъект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если ПлательщикНалогаНаПрибыль Тогда
		
		ПриИзмененииСубконтоНУ(НомерСубконто);
		
		Если ЗначениеЗаполнено(СчетЗатрат)
			И ЗначениеЗаполнено(СчетЗатратНУ) Тогда
			
			ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
			ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНУ);
			
			Для ИндексБУ = 1 По 3 Цикл
				Для ИндексНУ = 1 По 3 Цикл
					Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
						ЭтаФорма["СубконтоНУ" + ИндексНУ] = ЭтаФорма["Субконто" + ИндексБУ];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		ЭтотОбъект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоНУ(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, ЭтотОбъект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		ЭтотОбъект, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры
