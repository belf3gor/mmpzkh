
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ДлинаСуток; // Хранит длину суток в секундах.

#Область СлужебныеПроцедурыИФункции

// Проверяет на заполнение табличную часть документа.
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
	
	// Проверка реквизитов документа.
	Если ПустаяСтрока(Действие) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка данных в табличной части.
	Если Действие = "Включить счетчик" Тогда
		ПроверитьДатыПоверкиВТабличнойЧасти(Отказ);
	КонецЕсли;
	
	Если Действие = "Включить счетчик" И НЕ Отказ Тогда
		ПроверитьКорректностьУстановкиПриборовНаОбъекты();
		ПроверитьУстановкуНаЗакрытыеИНеОткрытыеЛицевыеСчета();
	КонецЕсли;
	
	ВедетсяУчетПриборовУчетаПоСтоякам = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ИспользоватьФункционалУчетаПУПоСтоякам();
	
	Если Действие = "Включить счетчик" И НЕ Отказ И ВедетсяУчетПриборовУчетаПоСтоякам Тогда
		ПроверитьУстановкуПУНаРазныеСтояки(Отказ);
		ПроверитьСоответствиеРесурсовПУИСтояков(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет значения дат поверки.
Процедура ПроверитьДатыПоверкиВТабличнойЧасти(Отказ)
	
	втГлавная = Главная.Выгрузить();
	
	// Исключаем пустые даты поверки.
	НайденныеСтроки = втГлавная.НайтиСтроки(Новый Структура("ДатаПоверки", Дата(1, 1, 1)));
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		втГлавная.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	ЕстьСтрокиСошибками = Ложь;
	Для Каждого ТекущаяСтрока Из втГлавная Цикл
		Если ТекущаяСтрока.ДатаПоверки < ТекущаяСтрока.ДатаВключения Тогда
			СтрокаСообщения = "Строка номер """+ СокрЛП(ТекущаяСтрока.НомерСтроки) + """: "
					+ "для счетчика """+ СокрЛП(ТекущаяСтрока.Счетчик) + """ дата поверки не должна быть меньше даты включения.";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьДатыПоверкиВТабличнойЧасти()

// Проверяет не устанавливаются ли приборы учета на закрытые или еще не открытые л/с.
Процедура ПроверитьУстановкуНаЗакрытыеИНеОткрытыеЛицевыеСчета()
	
	ТаблицаЛС = Главная.Выгрузить(, "Объект, НомерСтроки, ДатаВключения");
	ТаблицаЛС.Колонки.ДатаВключения.Имя = "ДатаПроверки";
	
	УПЖКХ_РаботаСЛицевымиСчетами.ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов(ТаблицаЛС);
	
КонецПроцедуры // ПроверитьУстановкуНаЗакрытыеИНеОткрытыеЛицевыеСчета()

// Проверяет не устанавливаются ли приборы учета на л/с разных помещений.
Процедура ПроверитьКорректностьУстановкиПриборовНаОбъекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Главная.НомерСтроки КАК НомерСтроки,
	|	Главная.Счетчик КАК Счетчик,
	|	Главная.Объект КАК Объект
	|ПОМЕСТИТЬ врГлавная
	|ИЗ
	|	&Главная КАК Главная
	|ГДЕ
	|	Главная.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врГлавная.Объект КАК ЛицевойСчет,
	|	врГлавная.Счетчик КАК Счетчик,
	|	врГлавная.НомерСтроки КАК НомерСтроки,
	|	КВП_ЛицевыеСчета.Адрес КАК Адрес
	|ПОМЕСТИТЬ врСведенияПоЛицевомуСчету
	|ИЗ
	|	врГлавная КАК врГлавная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО врГлавная.Объект = КВП_ЛицевыеСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ПРЕДСТАВЛЕНИЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Регистратор) КАК Документ,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Помещение
	|ПОМЕСТИТЬ врЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Период,
	|			Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				И ДатаИзменения < &Период
	|				И Счетчик В (&СписокСчетчиков)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЗакрепленныеСчетчики.Документ КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(врЗакрепленныеСчетчики.Объект) КАК ПредставлениеОбъекта,
	|	ПРЕДСТАВЛЕНИЕ(врЗакрепленныеСчетчики.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(врСведенияПоЛицевомуСчету.Счетчик) КАК ПредставлениеСчетчика,
	|	врСведенияПоЛицевомуСчету.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	врСведенияПоЛицевомуСчету КАК врСведенияПоЛицевомуСчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врЗакрепленныеСчетчики КАК врЗакрепленныеСчетчики
	|		ПО врСведенияПоЛицевомуСчету.Счетчик = врЗакрепленныеСчетчики.Счетчик
	|			И (&УсловиеНаПомещения)";
	
	Запрос.УстановитьПараметр("Главная",         Главная.Выгрузить(, "НомерСтроки, Счетчик, Объект"));
	Запрос.УстановитьПараметр("Период",          Дата);
	Запрос.УстановитьПараметр("СписокСчетчиков", Главная.ВыгрузитьКолонку("Счетчик"));
	
	СтруктураСпособаРаспределенияПоказанийСчетчика = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета();
	СпособРаспределенияПоказанийСчетчика           = СтруктураСпособаРаспределенияПоказанийСчетчика.СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета;
	
	СтрокаСообщения = "";
	
	Если СпособРаспределенияПоказанийСчетчика = 
		Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПомещения", "врСведенияПоЛицевомуСчету.Адрес <> врЗакрепленныеСчетчики.Помещение");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = "Строка номер """+ Выборка.НомерСтроки + """: "
							  + "счетчик """+ Выборка.ПредставлениеСчетчика + """ уже установлен на помещение """ + Выборка.ПредставлениеПомещения
							  + ?(НЕ Выборка.Документ = "", """ документом """ + СокрЛП(Выборка.Документ),
							  """ в строке № """) + Выборка.НомерСтроки + """!";
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПомещения", "Истина");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = "Строка номер """+ Выборка.НомерСтроки + """: "
							  + "счетчик """+ Выборка.ПредставлениеСчетчика + """ уже установлен на """ + Выборка.ПредставлениеОбъекта
							  + ?(НЕ Выборка.Документ = "", """ документом """ + СокрЛП(Выборка.Документ),
							  """ в строке № """ + Выборка.НомерСтроки) + """!";
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьУстановкиПриборовНаОбъекты()

// Проверяет не устанавливается ли на стояк несколько приборов учета.
Процедура ПроверитьУстановкуПУНаРазныеСтояки(Отказ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабЧасть",        Главная.Выгрузить(, "НомерСтроки, Счетчик, Стояк"));
	Запрос.УстановитьПараметр("Период",          Дата);
	Запрос.УстановитьПараметр("СписокСчетчиков", Главная.ВыгрузитьКолонку("Счетчик"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабЧасть.Счетчик КАК Счетчик,
	|	ТабЧасть.Стояк КАК Стояк
	|ПОМЕСТИТЬ врТабЧасть
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ПРЕДСТАВЛЕНИЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Регистратор) КАК Документ,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Стояк КАК Стояк
	|ПОМЕСТИТЬ врУстСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Период,
	|			ДатаИзменения < &Период
	|				И Счетчик В (&СписокСчетчиков)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	И НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Стояк = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Стояки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТабЧасть.НомерСтроки КАК НомерСтроки,
	|	врТабЧасть.Счетчик КАК Счетчик,
	|	врУстСчетчики.Стояк КАК Стояк,
	|	врУстСчетчики.Документ КАК Документ
	|ИЗ
	|	врТабЧасть КАК врТабЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врУстСчетчики КАК врУстСчетчики
	|		ПО врТабЧасть.Счетчик = врУстСчетчики.Счетчик
	|			И врТабЧасть.Стояк <> врУстСчетчики.Стояк";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Стояк) Тогда
			Продолжить;
		КонецЕсли;
			
		СтрокаСообщения = "Строка номер """ + СокрЛП(Выборка.НомерСтроки) + """: "
						  + "Прибор учета """ + СокрЛП(Выборка.Счетчик) + """ уже установлен на другой стояк """ + СокрЛП(Выборка.Стояк) + """ "
						  + "документом """ + СокрЛП(Выборка.Документ) + """!";
			
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУстановкуПУНаРазныеСтояки()

// Проверяет не устанавливается ли прибор учета на стояк др.коммунального ресурса.
Процедура ПроверитьСоответствиеРесурсовПУИСтояков(Отказ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Главная.Выгрузить(, "НомерСтроки, Стояк, Счетчик"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Счетчик КАК Счетчик,
	|	ТабличнаяЧасть.Стояк КАК Стояк,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВрТаблицаПУ
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Стояк = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Стояки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПУ.Счетчик КАК Счетчик,
	|	ТаблицаПУ.Счетчик.ВидУслуги КАК Услуга,
	|	ТаблицаПУ.Стояк КАК Стояк,
	|	ТаблицаПУ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВрТаблицаПУ КАК ТаблицаПУ
	|ГДЕ
	|	НЕ ТаблицаПУ.Стояк.КоммунальныйРесурс = ТаблицаПУ.Счетчик.ВидУслуги.КоммунальныйРесурс";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаСообщения = "В строке номер """ + СокрЛП(Результат.НомерСтроки) + """: "
						+ "Прибор учета """ + СокрЛП(Результат.Счетчик) + """ по услуге """ + СокрЛП(Результат.Услуга)
						+ """ устанавливается на стояк """ + СокрЛП(Результат.Стояк) + """ другого коммунального ресурса!";
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУстановкуНаРазныеСтояки()

// Процедура выполняет проведение документа по регистрам.
//
Процедура ВыполнитьПроведениеДокумента()
	
	Если Действие = "Отключить счетчик" Тогда
		ТаблицаСтояковУстановкиПУ = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьТаблицуСтояковУстановкиПриборовУчета(Дата, Главная.ВыгрузитьКолонку("Счетчик"));
	КонецЕсли;
	
	Для Каждого ТекСтрокаГлавная Из Главная Цикл
		
		// регистр КВП_ЗакрепленныеСчетчики
		Движение = Движения.КВП_ЗакрепленныеСчетчики.Добавить();
		Движение.Период        = Дата;
		Движение.Объект        = ТекСтрокаГлавная.Объект;
		Движение.Счетчик       = ТекСтрокаГлавная.Счетчик;
		Движение.ДатаИзменения = ТекСтрокаГлавная.ДатаВключения;
		
		Если Действие = "Включить счетчик" Тогда
			
			Движение.Действует   = Истина;
			Движение.НомерПломбы = СокрЛП(ТекСтрокаГлавная.НомерПломбы);
			
			// При установке ПУ стояк берем из табличной части.
			Движение.Стояк       = ТекСтрокаГлавная.Стояк;
			
			Если ЗначениеЗаполнено(ТекСтрокаГлавная.ДатаПоверки)
			   И ЗначениеЗаполнено(ТекСтрокаГлавная.ДатаВключения) Тогда
				
				Движение = Движения.КВП_ЗакрепленныеСчетчики.Добавить();
				
				Движение.Период            = Дата + 1;
				Движение.ДатаИзменения     = ТекСтрокаГлавная.ДатаПоверки;
				Движение.Объект            = ТекСтрокаГлавная.Объект;
				Движение.Стояк             = ТекСтрокаГлавная.Стояк;
				Движение.Счетчик           = ТекСтрокаГлавная.Счетчик;
				Движение.Действует         = Ложь;
				Движение.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка;
				
			КонецЕсли;
			
		ИначеЕсли Действие = "Отключить счетчик" Тогда
			
			Движение.Действует         = Ложь;
			Движение.ПричинаОтключения = ПричинаОтключения;
			
			// При отключении ПУ стояк определяем автоматически по "месту установки".
			НайденнаяСтрока = ТаблицаСтояковУстановкиПУ.Найти(ТекСтрокаГлавная.Счетчик, "Счетчик");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Движение.Стояк         = НайденнаяСтрока.Стояк;
			КонецЕсли;
			
			// <Дата отключения> считается последним днем действия прибора учета. 
			// Отключение прибора фактически производится со следующего дня с даты отключения.
			Движение.ДатаИзменения     = ТекСтрокаГлавная.ДатаВключения + ДлинаСуток;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработка события объекта "ПриКопировании"
Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ДокументыВводаПоказаний.Очистить();
	
КонецПроцедуры

// Обработка события объекта "ОбработкаПроверкиЗаполнения"
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоОтключениеСчетчика = (Действие = "Отключить счетчик");
	Если ЭтоОтключениеСчетчика Тогда
		ПроверяемыеРеквизиты.Добавить("ПричинаОтключения");
	КонецЕсли;
	
КонецПроцедуры

// Обработка события объекта "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(Главная, "Счетчик");
	
КонецПроцедуры

// Вызывается при проведении документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеТабличнойЧасти(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроведениеДокумента();
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти 

#Область РазделОсновнойПрограммы

ДлинаСуток = 24 * 60 * 60;

#КонецОбласти

#КонецЕсли