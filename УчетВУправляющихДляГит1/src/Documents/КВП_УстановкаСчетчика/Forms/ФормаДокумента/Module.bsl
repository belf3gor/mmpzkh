
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	ОбновитьПоказанияСчетчиков();
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Действие = "Включить счетчик";
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	Иначе
		ЭтоОтключениеСчетчика = (Объект.Действие = "Отключить счетчик");
	КонецЕсли;
	
	Элементы.Действие.СписокВыбора.Добавить("ВключитьСчетчик",  "Включить счетчик");
	Элементы.Действие.СписокВыбора.Добавить("ОтключитьСчетчик", "Отключить счетчик");
	
	ВедетсяУчетПриборовУчетаПоСтоякам = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ИспользоватьФункционалУчетаПУПоСтоякам();
	
	ЗаполнитьТаблицуСтояковУстановкиПриборовУчета();
	ЗаполнитьДанныеОбъектаНаСервере();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПоказанияСчетчиков();
	
	ОбновлениеПредставленияСформированныхДокументовВводаПоказаний();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		
		Если ЕстьПоказанияДляОтражения() И Объект.ВвестиНачальныеИлиКонечныеПоказания И Не ЗакрытьТекущуюФорму Тогда
			
			ТекстВопроса = "В табличной части имеются введенные показания, не отраженные в документах ввода показаний.
						   |Сохранить изменения и отразить введенные показания в документах ввода показаний счетчика?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗакрытием", ЭтотОбъект,
						   Новый Структура("Форма", ЭтаФорма)), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ЗакрытьТекущуюФорму Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПередЗакрытием()".
Процедура ОбработатьРезультатВопросаПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьТекущийДокумент();
		
		СформироватьДокументыВводаПоказаний();
		
		ОбновитьДанныеОПоказанияхНаФорме();
		
		ЗакрытьТекущуюФорму = Истина;
		Форма.Закрыть();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ЗакрытьТекущуюФорму = Истина;
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	Если ИмяСобытия = "Запись_ВводПоказанийСчетчика" Тогда
		
		Если ТипЗначенияИсточника = Тип("ДокументСсылка.УПЖКХ_ВводПоказанийСчетчика") Тогда
			ОбновлениеПредставленияСформированныхДокументовВводаПоказаний(Источник);
		КонецЕсли;
		
		ОбновитьПоказанияСчетчиков();
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "Запись_Счетчики" Тогда
		
		Если ТипЗначенияИсточника = Тип("СправочникСсылка.КВП_Счетчики") Тогда
			
			МассивСчетчиков = Объект.Главная.НайтиСтроки(Новый Структура("Счетчик", Источник));
			
			Для Каждого ДанныеСтроки Из МассивСчетчиков Цикл
				ДанныеСтроки.ТарифностьСчетчика = ПолучитьТарифностьСчетчика(ДанныеСтроки.Счетчик);
				
				// Если введены показания, не соответствующие тарифности, то очищаем "лишние" данные.
				Если НЕ ДанныеСтроки.ПоказанияПоСчетчикуВведены Тогда
					
					Если ДанныеСтроки.ТарифностьСчетчика < 3 Тогда
						ДанныеСтроки.ПиковоеПоказание       = Неопределено;
						ДанныеСтроки.ПустоеПиковоеПоказание = Истина;
					КонецЕсли;
					
					Если ДанныеСтроки.ТарифностьСчетчика < 2 Тогда
						ДанныеСтроки.НочноеПоказание       = Неопределено;
						ДанныеСтроки.ПустоеНочноеПоказание = Истина;
					КонецЕсли;
					
					Если ДанныеСтроки.ТарифностьСчетчика < 1 Тогда
						ДанныеСтроки.ДневноеПоказание       = Неопределено;
						ДанныеСтроки.ПустоеДневноеПоказание = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // МассивСчетчиков
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Для исключения потери данных при записи документа.
	ВыгрузитьТабЧастьТекущегоДокументаВоВремХранилище();
	
КонецПроцедуры

&НаСервере
// Процедура выгружает ТЧ текущего документа во временное хранилище.
Процедура ВыгрузитьТабЧастьТекущегоДокументаВоВремХранилище()
	
	АдресТабличнойЧастиВоВременномХранилище = ПоместитьВоВременноеХранилище(Объект.Главная.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	// Исключает потерю данных при записи/проведении текущего документа.
	ЗагрузитьТабЧастьТекущегоДокументаИзВремХранилища();
	
	ОбновитьПоказанияСчетчиков();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
// Процедура загружает текущее ТЧ текущего документа из временного хранилища.
Процедура ЗагрузитьТабЧастьТекущегоДокументаИзВремХранилища()
	
	Объект.Главная.Загрузить(ПолучитьИзВременногоХранилища(АдресТабличнойЧастиВоВременномХранилище));
	
	УдалитьИзВременногоХранилища(АдресТабличнойЧастиВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииУправленияВнешнимВидомФормы

&НаКлиенте
// Устанавливает видимость элементов формы.
//
Процедура УправлениеФормой()
	
	Элементы.ПричинаОтключения.Видимость = ЭтоОтключениеСчетчика;
	
	Элементы.ГлавнаяНомерПломбы.Видимость   = (НЕ ЭтоОтключениеСчетчика);
	Элементы.ГлавнаяДатаПоверки.Видимость   = (НЕ ЭтоОтключениеСчетчика);
	Элементы.ГлавнаяДатаВключения.Заголовок = ?(ЭтоОтключениеСчетчика, "Дата отключения", "Дата включения");
	
	Элементы.ГлавнаяСтояк.Видимость              = НЕ ЭтоОтключениеСчетчика;
	Элементы.ГлавнаяСтоякПриОтключении.Видимость = ЭтоОтключениеСчетчика И ВедетсяУчетПриборовУчетаПоСтоякам;
	
	КнопкаПоверки = Элементы.ФормаУстановитьДатуПоверки;
	КнопкаПоверки.Доступность = (НЕ ЭтоОтключениеСчетчика);
	
	КнопкаВключения = Элементы.ФормаУстановитьДатуВключения;
	
	ТекстКнопки = ?(ЭтоОтключениеСчетчика, "Дату отключения", "Дату включения");
	КнопкаВключения.Заголовок = ТекстКнопки;
	
	// Установим способы управления полем "Счетчик" табличного поля "Главная".
	ПолеСчетчика = Элементы.ГлавнаяСчетчик;
	
	// Для возможности использования отбора в выпадающем списке поля "Счетчик" отключим использование истории
	// и добавим кнопку выбора в поле и в список. Используется при отключении счетчика.
	// Для включения счетчика используем настройки по умолчанию.
	Если ЭтоОтключениеСчетчика Тогда
		ПолеСчетчика.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
		ПолеСчетчика.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
	Иначе
		ПолеСчетчика.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.Авто;
		ПолеСчетчика.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.Авто;
	КонецЕсли;
	
	ПолеСчетчика.КнопкаВыпадающегоСписка = (НЕ ЭтоОтключениеСчетчика);
	ПолеСчетчика.КнопкаСоздания          = (НЕ ЭтоОтключениеСчетчика);
	
	// Усправление настройками ввода показаний.
	УстановитьПодсказкиКНастройкеВводаПоказаний(ЭтоОтключениеСчетчика);
	
	Элементы.ТекущиеКонечныеПоказанияСчетчика.Видимость = Объект.ВвестиНачальныеИлиКонечныеПоказания;
	Элементы.ГруппаПоказанийСчетчика.Видимость          = Объект.ВвестиНачальныеИлиКонечныеПоказания;
	
	Элементы.СформироватьДокументыВводаПоказаний.Видимость   = Объект.ВвестиНачальныеИлиКонечныеПоказания;
	Элементы.ГруппаСуществуютПоказанияДляОтражения.Видимость = ЕстьПоказанияДляОтражения();
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
// Устанавливает заголовок и подсказку к настройке ввода начальных/конечных показаний.
Процедура УстановитьПодсказкиКНастройкеВводаПоказаний(ЭтоОтключениеСчетчика)
	
	Если ЭтоОтключениеСчетчика Тогда
		Элементы.ВвестиНачальныеИлиКонечныеПоказания.Заголовок = "Ввести конечные показания";
		Элементы.ВвестиНачальныеИлиКонечныеПоказания.Подсказка = "Установка флажка позволит ввести конечные показания счетчика.";
	Иначе
		Элементы.ВвестиНачальныеИлиКонечныеПоказания.Заголовок = "Ввести начальные показания";
		Элементы.ВвестиНачальныеИлиКонечныеПоказания.Подсказка = "Установка флажка позволит ввести начальные показания счетчика.";
	КонецЕсли;
	
КонецПроцедуры // УстановитьПодсказкиКНастройкеВводаПоказаний()

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	ЗаполнитьТаблицуСтояковУстановкиПриборовУчета();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Действие".
Процедура ДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьСозданныеДокументыВводаПоказаний = Объект.ДокументыВводаПоказаний.Количество() > 0;
	
	Если ЕстьСозданныеДокументыВводаПоказаний Тогда
		ДействиеСтр = Объект.Действие;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документы ввода показаний уже сформированы в соответствии с выбранным
															 |""Действием"", поэтому поле ""Действие"" изменению не подлежит.");
	КонецЕсли;
	
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	Если ЭлементСписка <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Объект.Действие = ?(ЕстьСозданныеДокументыВводаПоказаний, ДействиеСтр, ЭлементСписка.Представление);
		
		ЭтаФорма.Модифицированность = Истина;
		
		ЭтоОтключениеСчетчика = (Объект.Действие = "Отключить счетчик");
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события нажатия кнопки "Заполнить".
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана дата документа");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Объект.Действие) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано поле Действие");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СписокТиповЗначенийОбъектов = Новый СписокЗначений;
	СписокТиповЗначенийОбъектов.Добавить("ЛицевыеСчета");
	СписокТиповЗначенийОбъектов.Добавить("Квартиры");
	СписокТиповЗначенийОбъектов.Добавить("ПарковочныеМеста");
	СписокТиповЗначенийОбъектов.Добавить("Здания");
	СписокТиповЗначенийОбъектов.Добавить("Подъезды");
	СписокТиповЗначенийОбъектов.Добавить("Паркинги");
	
	СтруктураПараметров.Вставить("ТипОбъекта"    , "ЛицевыеСчета");
	СтруктураПараметров.Вставить("ТипЗначОбъекта", СписокТиповЗначенийОбъектов);
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", 
					СтруктураПараметров, 
					ЭтотОбъект, , , , 
					ОписаниеЗавершенияВыбора, 
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокЗаполненных, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СписокЗаполненных) = Тип("СписокЗначений") И СписокЗаполненных.Количество() > 0 Тогда
		
		Если Объект.Главная.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", 
															ЭтотОбъект, 
															Новый Структура("СписокЗаполненных", СписокЗаполненных));
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьФрагмент(СписокЗаполненных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокЗаполненных = ДополнительныеПараметры.СписокЗаполненных;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Главная.Очистить();
	КонецЕсли;
	
	ЗаполнитьФрагмент(СписокЗаполненных);
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Продожение процедуры "Заполнить()".
Процедура ЗаполнитьФрагмент(Знач СписокЗаполненных)
	
	Если ВедетсяУчетПриборовУчетаПоСтоякам Тогда
		ДополнитьТаблицуОбъектовСтояками(СписокЗаполненных);
	Иначе
		Для Каждого ТекЗнач ИЗ СписокЗаполненных Цикл
			СтрокаТабЧасти = Объект.Главная.Добавить();
			СтрокаТабЧасти.Объект = ТекЗнач.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	ОбновитьПоказанияСчетчиков();
	
КонецПроцедуры // ЗаполнитьФрагмент()

&НаКлиенте
// Процедура - обработчик события нажатия кнопки "УстановитьДатуВключения".
Процедура УстановитьДатуВключения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДатуВключенияЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, Объект.Дата, "Укажите дату включения");
	
КонецПроцедуры // УстановитьДатуВключения()

&НаКлиенте
// Обработчик результата ввода значения, вызванного в процедуре "УстановитьДатуВключения()".
Процедура УстановитьДатуВключенияЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Главная Цикл
			СтрокаТабличнойЧасти.ДатаВключения = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуВключенияЗавершение()

&НаКлиенте
// Процедура - обработчик события нажатия кнопки "УстановитьДатуПоверки".
Процедура УстановитьДатуПоверки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДатуПоверкиЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, Объект.Дата, "Укажите дату поверки");
	
КонецПроцедуры // УстановитьДатуПоверки()

&НаКлиенте
// Обработчик ввода значения, вызванного в процедуре "УстановинтьДатуПоверки()".
Процедура УстановитьДатуПоверкиЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Главная Цикл
			СтрокаТабличнойЧасти.ДатаПоверки = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуПоверкиЗавершение()

&НаКлиенте
// Обработчик ввода показаний счетчика.
Процедура СформироватьВводПоказанийСчетчикаПриУстановкеИлиОтлючении(Команда)
	
	Если Объект.Главная.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Табличная часть не заполнена!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = "Перед формированием документов “Ввод показаний счетчика” необходимо записать документ.
					   |Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаНачалоФормированияДокументов", ЭтотОбъект),
					   ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьПроцедуруФормированияДокументовВводаПоказаний();
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызваного в процедуре "СформироватьВводПоказанийСчетчикаПриУстановкеИлиОтлючении()".
Процедура ОбработатьРезультатВопросаНачалоФормированияДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПродолжитьПроцедуруФормированияДокументовВводаПоказаний();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "СформироватьВводПоказанийСчетчикаПриУстановкеИлиОтлючении".
Процедура ПродолжитьПроцедуруФормированияДокументовВводаПоказаний()
	
	Если ЗаписатьТекущийДокумент() Тогда
		
		СформироватьДокументыВводаПоказаний();
		ОбновитьДанныеОПоказанияхНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиГлавная

&НаКлиенте
// Обработчик события "ПриИзменении" табличной части "Главная".
Процедура ГлавнаяПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" табличной части "Главная".
Процедура ГлавнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ДатаВключения          = Объект.Дата;
		Элемент.ТекущиеДанные.ДневноеПоказание       = Неопределено;
		Элемент.ТекущиеДанные.НочноеПоказание        = Неопределено;
		Элемент.ТекущиеДанные.ПиковоеПоказание       = Неопределено;
		Элемент.ТекущиеДанные.ПустоеДневноеПоказание = Истина;
		Элемент.ТекущиеДанные.ПустоеНочноеПоказание  = Истина;
		Элемент.ТекущиеДанные.ПустоеПиковоеПоказание = Истина;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" табличной части "Главная".
Процедура ГлавнаяПослеУдаления(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода счетчика ТЧ "Главная".
Процедура ГлавнаяСчетчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если ЭтоОтключениеСчетчика Тогда
		
		СписокУстановленныхСчетчиков = ПолучитьСписокУстановленныхСчетчиковСервер(ТекущиеДанные.Объект, Объект.Дата);
		
		УстановитьОтборВСпискеВыбораПрибораУчета(Элемент, СтандартнаяОбработка, СписокУстановленныхСчетчиков)
		
	ИначеЕсли ВедетсяУчетПриборовУчетаПоСтоякам И ЗначениеЗаполнено(ТекущиеДанные.Стояк) Тогда
		
		КоммунальныйРесурс = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Стояк, "КоммунальныйРесурс");
		
		УстановитьОтборВСпискеВыбораПрибораУчета(Элемент, СтандартнаяОбработка, , КоммунальныйРесурс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля ввода счетчика ТЧ "Главная".
Процедура ГлавнаяСчетчикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЭтоОтключениеСчетчика Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Передадим в список выбора отобранные параметры по текущему объекту.
		ТекущийОбъект = Элементы.Главная.ТекущиеДанные.Объект;
		ДанныеВыбора  = ПолучитьСписокУстановленныхСчетчиковСервер(ТекущийОбъект, Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" счетчика в табличной части.
Процедура ГлавнаяСчетчикПриИзменении(Элемент)
	
	ЗаполнитьТаблицуСтояковУстановкиПриборовУчета();
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоОтключениеСчетчика Тогда
			ТекущиеДанные.ДатаПоверки        = ПолучитьДатуПоверкиСчетчикаСервер(ТекущиеДанные.Счетчик);
			ТекущиеДанные.СтоякПриОтключении = ПолучитьСтоякУстановкиПоПриборуУчета(ЭтаФорма, ТекущиеДанные.Счетчик);
		Иначе
			ПереопределитьНастроенУчетПоСтоякам(ТекущиеДанные, ВедетсяУчетПриборовУчетаПоСтоякам);
		КонецЕсли;
		
		ТекущиеДанные.ТарифностьСчетчика = ПолучитьТарифностьСчетчика(ТекущиеДанные.Счетчик);
		
	КонецЕсли;
	
	ОбновитьПоказанияСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" объекта в табличной части.
Процедура ГлавнаяОбъектПриИзменении(Элемент)
	
	// Определение здания в строке по объекту установки.
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.Здание = ПолучитьЗданиеПоОбъектуУстановки(ТекущиеДанные.Объект);
		ТекущиеДанные.Стояк  = Неопределено;
		
		ПереопределитьНастроенУчетПоСтоякам(ТекущиеДанные, ВедетсяУчетПриборовУчетаПоСтоякам);
		
	КонецЕсли;
	
	ОбновитьПоказанияСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" объекта в табличной части.
Процедура ГлавнаяОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	// Обрабатываем только заполненные значения ссылочного типа.
	Если НЕ ТекущиеДанные = Неопределено
	   И ЗначениеЗаполнено(ВыбранноеЗначение)
	   И Не ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		
		// Если выбран лицевой счет, то нужно проверить, не закрыт ли он.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
			ТекстСообщения = "";
			врСтандартнаяОбработка = Истина;
			УПЖКХ_РаботаСЛицевымиСчетами.ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов(ВыбранноеЗначение,
										 ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаВключения), 
										 ТекущиеДанные.ДатаВключения, Объект.Дата), врСтандартнаяОбработка,,
										 ТекстСообщения);
			
			Если НЕ врСтандартнаяОбработка Тогда
				ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
				ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопроса", ЭтаФорма, ДопПараметры),
							   ТекстСообщения,
							   РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызваного в процедуре "ОбработатьВыборЛицевогоСчета()".
Процедура ОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено
	   И Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		// Очистка объекта установки.
		ТекущиеДанные.Объект = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		
		// Очистка здания в строке.
		ТекущиеДанные.Здание = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопроса()

&НаКлиенте
// Обработчик события "ПриИзменении" реквизита "ВвестиНачальныеИлиКонечныеПоказания".
Процедура ВвестиНачальныеИлиКонечныеПоказанияПриИзменении(Элемент)
	
	ОбновитьПоказанияСчетчиков();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля номер пломбы табличной части.
Процедура ГлавнаяНомерПломбыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля дата включения табличной части.
Процедура ГлавнаяДатаВключенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля дата поверки табличной части.
Процедура ГлавнаяДатаПоверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей показаний табличной части.
Процедура ДневноеПоказаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ПустоеДневноеПоказание = ?(ТекущиеДанные.ДневноеПоказание = Неопределено, Истина, Ложь);
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей показаний табличной части.
Процедура НочноеПоказаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ПустоеНочноеПоказание = ?(ТекущиеДанные.НочноеПоказание = Неопределено, Истина, Ложь);
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей показаний табличной части.
Процедура ПиковоеПоказаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ПустоеПиковоеПоказание = ?(ТекущиеДанные.ПиковоеПоказание = Неопределено, Истина, Ложь);
		
		ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний табличной части.
Процедура ДневноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Главная.ТекущиеДанные.ДневноеПоказание       = Неопределено;
	Элементы.Главная.ТекущиеДанные.ПустоеДневноеПоказание = Истина;
	
	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний табличной части.
Процедура НочноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Главная.ТекущиеДанные.НочноеПоказание       = Неопределено;
	Элементы.Главная.ТекущиеДанные.ПустоеНочноеПоказание = Истина;
	
	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний табличной части.
Процедура ПиковоеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Главная.ТекущиеДанные.ПиковоеПоказание       = Неопределено;
	Элементы.Главная.ТекущиеДанные.ПустоеПиковоеПоказание = Истина;
	
	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" реквизита "Действие".
Процедура ДействиеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭтоОтключениеСчетчика
	   И Элемент.ТекущийЭлемент.Имя = "ГлавнаяСтояк" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВСпискеВыбораПрибораУчета(Элемент, СтандартнаяОбработка, СписокПУ = Неопределено, КоммунальныйРесурс = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбор = Новый Структура;
	Если НЕ СписокПУ = Неопределено Тогда
		ПараметрыОтбор.Вставить("Ссылка", СписокПУ);
	КонецЕсли;
	
	Если НЕ КоммунальныйРесурс = Неопределено Тогда
		ПараметрыОтбор.Вставить("КоммунальныйРесурс", КоммунальныйРесурс);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбор);
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_Счетчики.ФормаВыбора", ПараметрыФормы, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода стояка ТЧ "Главная".
Процедура ГлавнаяСтоякНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	
	СписокДоступныхСтояков = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСписокДоступныхСтояков(ТекущиеДанные.Объект, ТекущиеДанные.Счетчик);
	
	ПараметрыОтбор = Новый Структура("Ссылка", СписокДоступныхСтояков);
	ПараметрыФормы = Новый Структура("Отбор",  ПараметрыОтбор);
	
	ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Стояки.ФормаВыбора", ПараметрыФормы, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура заполняет данные объектов.
Процедура ЗаполнитьДанныеОбъектаНаСервере()
	
	Для Каждого ДанныеСтроки Из Объект.Главная Цикл
		
		ДанныеСтроки.Здание = ПолучитьЗданиеПоОбъектуУстановки(ДанныеСтроки.Объект);
		
		ДанныеСтроки.ДневноеПоказание = Неопределено;
		ДанныеСтроки.НочноеПоказание  = Неопределено;
		ДанныеСтроки.ПиковоеПоказание = Неопределено;
		ДанныеСтроки.ПустоеДневноеПоказание = Истина;
		ДанныеСтроки.ПустоеНочноеПоказание  = Истина;
		ДанныеСтроки.ПустоеПиковоеПоказание = Истина;
		
		ДанныеСтроки.ТарифностьСчетчика = ПолучитьТарифностьСчетчика(ДанныеСтроки.Счетчик);
		
		ПереопределитьНастроенУчетПоСтоякам(ДанныеСтроки, ВедетсяУчетПриборовУчетаПоСтоякам);
		
		ДанныеСтроки.СтоякПриОтключении = ПолучитьСтоякУстановкиПоПриборуУчета(ЭтаФорма, ДанныеСтроки.Счетчик);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает описание здания по объекту в строке.
Функция ПолучитьЗданиеПоОбъектуУстановки(ОбъектУстановки)
	
	ОписаниеЗдания = Неопределено;
	
	// Определяем тип объекта и в зависимости от типа заполняем данные о помещении.
	Если ТипЗнч(ОбъектУстановки) = Тип("СправочникСсылка.КВП_Здания") Тогда
		ОписаниеЗдания = ОбъектУстановки;
	ИначеЕсли ТипЗнч(ОбъектУстановки) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		ОписаниеЗдания = ОбъектУстановки.Владелец;
	ИначеЕсли ТипЗнч(ОбъектУстановки) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		ОписаниеЗдания = ОбъектУстановки.Владелец;
	ИначеЕсли ТипЗнч(ОбъектУстановки) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ОписаниеЗдания = ОбъектУстановки.Адрес.Владелец;
	КонецЕсли;
	
	Возврат ОписаниеЗдания;
	
КонецФункции

&НаСервере
// Функция возвращает список счетчиков на объекте.
Функция ПолучитьСписокУстановленныхСчетчиковСервер(Объект, Дата)
	
	Возврат ПолучитьСписокУстановленныхСчетчиков(Объект, Дата,,, Ложь);
	
КонецФункции

&НаСервере
// Функция возвращает дату поверки счетчика.
Функция ПолучитьДатуПоверкиСчетчикаСервер(Счетчик)
	
	мЗапросДляПолученияДатыПоверки = Новый Запрос;
	мЗапросДляПолученияДатыПоверки.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК ДатаПоверки
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			,
	|			Счетчик = &Счетчик
	|				И ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)
	|				И ДатаИзменения >= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних";
	
	мЗапросДляПолученияДатыПоверки.УстановитьПараметр("Дата",    Объект.Дата);
	мЗапросДляПолученияДатыПоверки.УстановитьПараметр("Счетчик", Счетчик);
	
	Выборка = мЗапросДляПолученияДатыПоверки.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоверки;
	КонецЕсли;
	
	Возврат Дата("00010101");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает тарифность счетчика.
Функция ПолучитьТарифностьСчетчика(Счетчик)
	
	// По умолчанию тарифность счетчика приравнивается к 0.
	ТарифностьСчетчика = 0;
	
	Если Не Счетчик = Неопределено Тогда
		ТарифностьСчетчика = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьТарифностьЧислом(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Счетчик, "Тарифность"));
	КонецЕсли;
	
	Возврат ТарифностьСчетчика;
	
КонецФункции

&НаСервере
// Процедура обновляет представление ссылок на созданные документы ввода показаний.
Процедура ОбновлениеПредставленияСформированныхДокументовВводаПоказаний(Источник = Неопределено)
	
	// Алгоритм:
	// 1. Если документ ввода показаний ранее уже был создан, значит на форме уже есть ссылка на него,
	// поэтому просто обновляем статус.
	// 2. Если создан новый документ ввода показаний, то добавляем новую группу для размещения ссылки
	// на документ и картинки состояния документа.
	
	Если НЕ Источник = Неопределено Тогда
		МассивДокументов = Объект.ДокументыВводаПоказаний.НайтиСтроки(Новый Структура("ВводПоказаний", Источник));
	Иначе
		МассивДокументов = Объект.ДокументыВводаПоказаний.Выгрузить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из МассивДокументов Цикл
		
		НайденнаяСтрока = ТаблицаСсылокДокументаВводПоказаний.НайтиСтроки(Новый Структура("Ссылка", ТекСтрока.ВводПоказаний));
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			
			// 1. Обновляем состояние.
			НайденнаяСтрока[0].СостояниеДокумента = ПолучитьСостояниеДокументаВводаПоказаний(ТекСтрока.ВводПоказаний);
			
			// Возможно еще потребуется обновление заголовка гиперссылки для актуализации информации дата/номер.
			
		Иначе
			
			// 2. Добавляем новую ссылку.
			Попытка
				
				// Получаем имя элемента.
				ИмяЭлемента = СтрЗаменить(ТекСтрока.ВводПоказаний," ", "");
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ":", "");
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "-", "");
				ИмяЭлемента = УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(ИмяЭлемента);
				
				// Добавляем новую строку в таблицу значений "ТаблицаСсылокДокументаВводПоказаний"
				// со сведениями о текущем документе ввода показаний.
				НоваяСтрокаСсылки                    = ТаблицаСсылокДокументаВводПоказаний.Добавить();
				НоваяСтрокаСсылки.Ссылка             = ТекСтрока.ВводПоказаний;
				НоваяСтрокаСсылки.ИмяЭлемента        = ИмяЭлемента;
				НоваяСтрокаСсылки.СостояниеДокумента = ПолучитьСостояниеДокументаВводаПоказаний(ТекСтрока.ВводПоказаний);
				
				// Создаем новую группу для размещения ссылки на документ ввода показаний и его статуса.
				ГруппаСсылок                          = Элементы.Добавить("Группа_" + ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаДляСсылокНаДокументыВводаПоказаний);
				ГруппаСсылок.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаСсылок.ОтображатьЗаголовок      = Ложь;
				ГруппаСсылок.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаСсылок.РастягиватьПоГоризонтали = Истина;
				
				// Добавляем гиперссылку на документ "Ввод показаний счетчика".
				НоваяНадпись                          = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаСсылок); 
				НоваяНадпись.Заголовок                = НСтр("ru='" + ПолучитьПредставлениеДокументаВводПоказанийСчетчика(ТекСтрока.ВводПоказаний) + "'");
				НоваяНадпись.Вид                      = ВидДекорацииФормы.Надпись;
				НоваяНадпись.Гиперссылка              = Истина;
				НоваяНадпись.РастягиватьПоГоризонтали = Истина;
				НоваяНадпись.УстановитьДействие("Нажатие", "НадписьОткрытьДокументНажатие");
				
				// Добавляем картинку для отображения статуса документа (проведен/помечен на удаление и пр.).
				НоваяКартинкаСтатуса                    = Элементы.Добавить("Статус_" + ИмяЭлемента, Тип("ПолеФормы"), ГруппаСсылок);
				НоваяКартинкаСтатуса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				НоваяКартинкаСтатуса.Вид                = ВидПоляФормы.ПолеКартинки;
				НоваяКартинкаСтатуса.КартинкаЗначений   = БиблиотекаКартинок.СостоянияДокумента;
				НоваяКартинкаСтатуса.ПутьКДанным        = "ТаблицаСсылокДокументаВводПоказаний[" + ТаблицаСсылокДокументаВводПоказаний.Индекс(НоваяСтрокаСсылки) + "].СостояниеДокумента";
				НоваяКартинкаСтатуса.Ширина             = 2;
				НоваяКартинкаСтатуса.Высота             = 1;
				НоваяКартинкаСтатуса.Рамка              = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
				НоваяКартинкаСтатуса.РастягиватьПоГоризонтали = Ложь;
				НоваяКартинкаСтатуса.РастягиватьПоВертикали   = Ложь;
				НоваяКартинкаСтатуса.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновлениеПредставленияСформированныхДокументовВводаПоказаний()

&НаСервереБезКонтекста
// Функция возвращает представление документа "Ввод показаний счетчика".
Функция ПолучитьПредставлениеДокументаВводПоказанийСчетчика(Документ)
	Возврат "" + ПолучитьУточненноеНазваниеДокументаВводаПоказаний(Документ) + " "
			   + Документ.Номер + " от " + Формат(Документ.Дата, "ДФ=dd.MM.yyyy");
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает строку с названием документа ввода показаний в зависимости от вида операции документа.
Функция ПолучитьУточненноеНазваниеДокументаВводаПоказаний(Документ)
	
	Если Документ.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет Тогда
		Возврат "Ввод показаний на л/с";
	ИначеЕсли Документ.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение Тогда
		Возврат "Ввод показаний на помещение";
	ИначеЕсли Документ.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание Тогда
		Возврат "Ввод показаний на здание";
	ИначеЕсли Документ.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд Тогда
		Возврат "Ввод показаний на подъезд";
	КонецЕсли;
	
КонецФункции // ПолучитьУточненноеНазваниеДокументаВводаПоказаний()

&НаСервереБезКонтекста
// Функция возвращает числовое состояние документа ввода показании для отображения на форме соответствующей картинки
// из БиблиотекаКартинок.СостоянияДокумента.
Функция ПолучитьСостояниеДокументаВводаПоказаний(СсылкаНаДок) 
	
	Если Не СсылкаНаДок.Пустая() Тогда
		
		Если СсылкаНаДок.ПометкаУдаления Тогда
			Возврат 2;
		ИначеЕсли СсылкаНаДок.Проведен Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСостояниеДокументаВводаПоказаний()

&НаКлиенте
// Обработчик нажатия ссылки на документ "Ввод показаний счетчика".
Процедура НадписьОткрытьДокументНажатие(Элемент)
	
	СтрокиСсылок = ТаблицаСсылокДокументаВводПоказаний.НайтиСтроки(Новый Структура("ИмяЭлемента", Элемент.Имя));
	
	Если СтрокиСсылок.Количество() > 0 Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.УПЖКХ_ВводПоказанийСчетчика.ФормаОбъекта",
										Новый Структура("Ключ", СтрокиСсылок[0].Ссылка), ЭтотОбъект);
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура анализирует приборы учета к отражению до автоматического заполнения документа ввода показаний и после.
Процедура ПроверитьОтражениеДанныхПоПриборамУчета(ТаблицаПриборовТекущая, ТаблицаПриборовИсходная, ВременнаяТаблицаИсключенныхПриборовУчета)
	
	// ОСОБЕННОСТЬ:
	// Используется заполнение документов ввода показаний с помощью процедуры ОбработкаЗаполнения,
	// которая необходима для корректного заполнения долей ПУ.
	// Но при этом механизме "отсеиваются" приборы учета, по которым позже уже введены показания.
	// По исключенным ПУ информируем пользователя.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПриборовТекущая",  ТаблицаПриборовТекущая);
	Запрос.УстановитьПараметр("ТаблицаПриборовИсходная", ТаблицаПриборовИсходная);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПриборовИсходная.Объект КАК Объект,
	|	ТаблицаПриборовИсходная.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ ВрТаблицаПриборовИсходная
	|ИЗ
	|	&ТаблицаПриборовИсходная КАК ТаблицаПриборовИсходная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПриборовТекущая.Объект КАК Объект,
	|	ТаблицаПриборовТекущая.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ ВрТаблицаПриборовТекущая
	|ИЗ
	|	&ТаблицаПриборовТекущая КАК ТаблицаПриборовТекущая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаблицаПриборовИсходная.Объект КАК Объект,
	|	ВрТаблицаПриборовИсходная.Счетчик КАК Счетчик
	|ИЗ
	|	ВрТаблицаПриборовИсходная КАК ВрТаблицаПриборовИсходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрТаблицаПриборовТекущая КАК ВрТаблицаПриборовТекущая
	|		ПО ВрТаблицаПриборовИсходная.Объект = ВрТаблицаПриборовТекущая.Объект
	|			И ВрТаблицаПриборовИсходная.Счетчик = ВрТаблицаПриборовТекущая.Счетчик
	|ГДЕ
	|	ЕСТЬNULL(ВрТаблицаПриборовТекущая.Счетчик, ИСТИНА) = ИСТИНА";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		НоваяСтрока = ВременнаяТаблицаИсключенныхПриборовУчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультат);
	КонецЦикла;
	
КонецПроцедуры // ПроверитьОтражениеДанныхПоПриборамУчета()

&НаСервере
// Процедура выводит информационные сообщения пользователю по приборам учета, по которым не были отражены показания.
Процедура ВыполнитьИнформированиеПользователя(ВременнаяТаблицаИсключенныхПриборовУчета)
	
	Если ВременнаяТаблицаИсключенныхПриборовУчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для информации:
	// По исключенным приборам учета пока только информируем пользователя,
	// но, возможно, потребуется еще очистка показаний в табличной части.
	
	ТекстСообщения = "Показания по следующим приборам учета не отражены. Возможно, по ним уже введены показания на более позднюю дату:";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Для Каждого ТекущийПрибор Из ВременнаяТаблицаИсключенныхПриборовУчета Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Прибор учета - " + ТекущийПрибор.Счетчик 
														   + "; объект - " + ТекущийПрибор.Объект + ".");
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьИнформированиеПользователя()

&НаСервере
// Функция определяет наличие некорректно введенных показаний.
//
// Возвращаемое значение:
//    "Истина" - данные корректны,
//    "Ложь"   - в противном случае.
//
Функция ПроверитьКорректностьПоказанийВСлучаеУстановкиПрибораНаНесколькоОбъектов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", Объект.Главная.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.ДатаВключения КАК ДатаВключения,
	|	ТаблицаСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаСчетчиков.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ТаблицаСчетчиков.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ТаблицаСчетчиков.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание
	|ПОМЕСТИТЬ ВрТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.ДатаВключения КАК ДатаВключения,
	|	ТаблицаСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание
	|ИЗ
	|	ВрТаблицаСчетчиков КАК ТаблицаСчетчиков
	|ГДЕ
	|	(ТаблицаСчетчиков.ПустоеДневноеПоказание = ЛОЖЬ
	|			ИЛИ ТаблицаСчетчиков.ПустоеНочноеПоказание = ЛОЖЬ
	|			ИЛИ ТаблицаСчетчиков.ПустоеПиковоеПоказание = ЛОЖЬ)";
	
	ВрТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.Главная Цикл
		Если ТекСтрока.ПоказанияПоСчетчикуВведены Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ВрТаблицаПоказаний.НайтиСтроки(Новый Структура("Счетчик", ТекСтрока.Счетчик));
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			ТекстСообщения = "В строке """ + ТекСтрока.НомерСтроки + """ по прибору учета """ + ТекСтрока.Счетчик
							+ """ введены некорректные данные! Показания прибора учета и дата " 
							+ ?(ЭтоОтключениеСчетчика, "отключения ", "включения ")
							+ "должны быть одинаковы для всех объектов данного прибора учета.";
			ПолеСообщения  = "Объект.Главная[" + Формат(ТекСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Счетчик";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеСообщения);
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверитьКорректностьПоказанийВСлучаеУстановкиПрибораНаНесколькоОбъектов()

&НаСервере
// Процедура формирует документы "Ввод показаний счетчика" по данным табличной части.
Процедура СформироватьДокументыВводаПоказаний()
	
	Если НЕ ПроверитьКорректностьПоказанийВСлучаеУстановкиПрибораНаНесколькоОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	// ОСОБЕННОСТЬ:
	// 1. Если ПУ был установлен на несколько объектов, то при отключении ПУ только по одному
	//    из объектов с вводом показаний, показания по другому объекту введены не будут,
	//    а также не будут учтены его доли.
	// 2. Если ПУ установлен на несколько объектов разного типа (например, л/с и помещение), то
	//    при вводе показаний будут созданы разные документы (с разными видами операции) и также
	//    не будут учтены их доли.
	
	// АЛГОРИТМ:
	// 1. Берем данные по показаниям ПУ из табличной части текущего документа установки счетчиков.
	// 2. Берем данные по показаниям ПУ из табличных частей ранее созданных документов ввода показаний.
	// 3. По данным 1 и 2 отбираем только те показания, которые были введены, но еще не были отражены 
	//    в документах ввода показаний.
	// 4. В зависимости от вида объекта определяем вид операции документа, в который будут отнесены показания.
	// 5. Если есть ранее созданный документ ввода показаний нужного вида операции - дополняем его;
	//    если нет - создаем и заполняем новый документ.
	//    ВАЖНО: по каждому из видов операции документа ввода в идеале должен быть только один документ.
	// 6. Выполняем проверку на правильность заполнения и корректность введенных показаний:
	// 6.1. Если показания корректны, то документ проводим.
	// 6.2. Если имеются ошибки или требуется подтверждение корректности показаний, то просто записываем.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.ДатаВключения КАК ДатаВключения,
	|	ТаблицаСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаСчетчиков.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ТаблицаСчетчиков.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ТаблицаСчетчиков.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание
	|ПОМЕСТИТЬ ВрТЧДокументаУстановкаСчетчика
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка КАК СсылкаНаДокументВводаПоказаний,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.ВидОперации КАК ВидОперации,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Счетчик КАК Счетчик,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Объект КАК Объект
	|ПОМЕСТИТЬ ВрТЧДокументаВводПоказаний
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка В(&ДокументыВводаПоказаний)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыВводаПоказаний.СсылкаНаДокументВводаПоказаний КАК СсылкаНаДокументВводаПоказаний,
	|	ДокументыВводаПоказаний.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВрСсылкаНаДокументыВводаПоказаний
	|ИЗ
	|	ВрТЧДокументаВводПоказаний КАК ДокументыВводаПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТЧДокументаУстановкаСчетчика.Счетчик КАК Счетчик,
	|	ВрТЧДокументаУстановкаСчетчика.Объект КАК Объект,
	|	ВрТЧДокументаУстановкаСчетчика.ДатаВключения КАК ДатаВключения,
	|	ВрТЧДокументаУстановкаСчетчика.ДневноеПоказание КАК ДневноеПоказание,
	|	ВрТЧДокументаУстановкаСчетчика.НочноеПоказание КАК НочноеПоказание,
	|	ВрТЧДокументаУстановкаСчетчика.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ВрТЧДокументаУстановкаСчетчика.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ВрТЧДокументаУстановкаСчетчика.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ВрТЧДокументаУстановкаСчетчика.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание,
	|	ЕСТЬNULL(ВрТЧДокументаВводПоказаний.Счетчик, ИСТИНА) КАК ПоказанияПоСчетчикуНеОтражены
	|ПОМЕСТИТЬ ВрТаблицаПоказанийСчетчиков
	|ИЗ
	|	ВрТЧДокументаУстановкаСчетчика КАК ВрТЧДокументаУстановкаСчетчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрТЧДокументаВводПоказаний КАК ВрТЧДокументаВводПоказаний
	|		ПО ВрТЧДокументаУстановкаСчетчика.Счетчик = ВрТЧДокументаВводПоказаний.Счетчик
	|			И ВрТЧДокументаУстановкаСчетчика.Объект = ВрТЧДокументаВводПоказаний.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаблицаПоказанийСчетчиков.Счетчик КАК Счетчик,
	|	ВрТаблицаПоказанийСчетчиков.Объект КАК Объект,
	|	ВрТаблицаПоказанийСчетчиков.ДатаВключения КАК ДатаВключения,
	|	ВрТаблицаПоказанийСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание,
	|	ВрТаблицаПоказанийСчетчиков.ПоказанияПоСчетчикуНеОтражены КАК ПоказанияПоСчетчикуНеОтражены,
	|	ВЫБОР
	|		КОГДА ВрТаблицаПоказанийСчетчиков.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание)
	|		КОГДА ВрТаблицаПоказанийСчетчиков.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
	|		КОГДА ВрТаблицаПоказанийСчетчиков.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
	|		КОГДА ВрТаблицаПоказанийСчетчиков.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд)
	|	КОНЕЦ КАК ВидОперацииВводаПоказаний
	|ПОМЕСТИТЬ ТаблицаПоказанийКОтражению
	|ИЗ
	|	ВрТаблицаПоказанийСчетчиков КАК ВрТаблицаПоказанийСчетчиков
	|ГДЕ
	|	ВрТаблицаПоказанийСчетчиков.ПоказанияПоСчетчикуНеОтражены = ИСТИНА
	|	И (ВрТаблицаПоказанийСчетчиков.ПустоеДневноеПоказание = ЛОЖЬ
	|			ИЛИ ВрТаблицаПоказанийСчетчиков.ПустоеНочноеПоказание = ЛОЖЬ
	|			ИЛИ ВрТаблицаПоказанийСчетчиков.ПустоеПиковоеПоказание = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказанийКОтражению.Счетчик КАК Счетчик,
	|	ТаблицаПоказанийКОтражению.Объект КАК Объект,
	|	ТаблицаПоказанийКОтражению.ДатаВключения КАК ДатаВключения,
	|	ТаблицаПоказанийКОтражению.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказанийКОтражению.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказанийКОтражению.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаПоказанийКОтражению.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ТаблицаПоказанийКОтражению.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ТаблицаПоказанийКОтражению.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание,
	|	ТаблицаПоказанийКОтражению.ПоказанияПоСчетчикуНеОтражены КАК ПоказанияПоСчетчикуНеОтражены,
	|	ТаблицаПоказанийКОтражению.ВидОперацииВводаПоказаний КАК ВидОперацииВводаПоказаний,
	|	ЕСТЬNULL(ВрСсылкаНаДокументыВводаПоказаний.СсылкаНаДокументВводаПоказаний, ЗНАЧЕНИЕ(Документ.УПЖКХ_ВводПоказанийСчетчика.ПустаяСсылка)) КАК СсылкаНаДокументВводаПоказаний
	|ИЗ
	|	ТаблицаПоказанийКОтражению КАК ТаблицаПоказанийКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрСсылкаНаДокументыВводаПоказаний КАК ВрСсылкаНаДокументыВводаПоказаний
	|		ПО ТаблицаПоказанийКОтражению.ВидОперацииВводаПоказаний = ВрСсылкаНаДокументыВводаПоказаний.ВидОперации
	|ИТОГИ
	|	МАКСИМУМ(СсылкаНаДокументВводаПоказаний)
	|ПО
	|	ВидОперацииВводаПоказаний";
	
	
	ТаблицаСчетчиков = Объект.Главная.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаСчетчиков",        ТаблицаСчетчиков);
	Запрос.УстановитьПараметр("ДокументыВводаПоказаний", Объект.ДокументыВводаПоказаний.Выгрузить( ,"ВводПоказаний"));
	
	ВыборкаПоВидуОперации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаПоВидуОперации.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не введены показания.");
		Возврат;
	КонецЕсли;
	
	// Используется для сохранения данных по исключенным счетчикам.
	ВременнаяТаблицаИсключенныхПриборовУчета = ТаблицаСчетчиков.СкопироватьКолонки("Объект, Счетчик");
	
	Пока ВыборкаПоВидуОперации.Следующий() Цикл
		
		СтруктураДокумента = ОпределитьСтруктуруДокументаВводПоказанийСчетчика();
		
		СсылкаНаДокументВводаПоказаний = ВыборкаПоВидуОперации.СсылкаНаДокументВводаПоказаний;
		
		// 5. Если есть ранее созданный документ ввода показаний нужного вида операции - дополняем его;
		//    если нет - создаем и заполняем новый документ.
		Если СсылкаНаДокументВводаПоказаний.Пустая() Тогда
			
			// Формирование нового документа ввода показаний.
			ДокументВводаПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
			
			// Заполнение структуры документа.
			
			// ПРОВЕРИТЬ, возможно, в каких-то случаях нужно еще правильно время определять, 
			// чтобы на момент ввода начальных показаний ПУ был
			// уже включен, а на момент ввода конечных показаний ПУ - еще включен?
			СтруктураДокумента.Дата = Объект.Дата;
			СтруктураДокумента.Комментарий            = "#создан автоматически при " 
														+ ?(НЕ ЭтоОтключениеСчетчика, "установке", "отключении") 
														+ " счетчика";
			СтруктураДокумента.ВидОперации            = ВыборкаПоВидуОперации.ВидОперацииВводаПоказаний;
			СтруктураДокумента.ВводНачальныхПоказаний = НЕ ЭтоОтключениеСчетчика;
			
			ДобавитьСсылкуНаДокументВТаблицуДокументовВводаПоказаний = Истина;
			
		Иначе
			
			// Дозаполнение существующего документа ввода показаний.
			
			ДокументВводаПоказаний = СсылкаНаДокументВводаПоказаний.ПолучитьОбъект();
			Если ДокументВводаПоказаний.Проведен Тогда
				КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураДокумента, ДокументВводаПоказаний);
			СтруктураДокумента.ТаблицаПоказаний = ДокументВводаПоказаний.Главная.Выгрузить();
			
			ДобавитьСсылкуНаДокументВТаблицуДокументовВводаПоказаний = Ложь;
			
		КонецЕсли;
		
		ВыборкаДляДокумента = ВыборкаПоВидуОперации.Выбрать();
		
		Пока ВыборкаДляДокумента.Следующий() Цикл
			
			НоваяСтр = СтруктураДокумента.ТаблицаПоказаний.Добавить();
			
			// Для информации:
			// Устанавливать ПУ в текущем периоде, за прошлый возможно, но вводить показания в
			// текущем периоде за прошлый - нет. 
			// Во-первых, это не имеет смысла, поскольку расчет идет всегда в текущем периоде, 
			// а корректировки за прошлый период нет.
			// Во-вторых, в документе ввода показаний есть проверка, что дата показания не может 
			// быть раньше начала месяца от даты документа ввода показаний.
			// Возможно, если дата включения/отключения - дата прошлого периода, то и вводить 
			// показания нужно на начало текущего периода. 
			// Пока руководствуемся логикой, что начальные показания в расчете не используются, 
			// поэтому дата показания не настолько важна. Сейчас эта проверка в случае начальных 
			// показаний в документе ввода отключена. При отключении указывается последний день 
			// работы ПУ, т.е. дата отключения.
			
			НоваяСтр.ДатаПоказания = ВыборкаДляДокумента.ДатаВключения;
			НоваяСтр.Услуга        = ВыборкаДляДокумента.Счетчик.ВидУслуги;
			ЗаполнитьЗначенияСвойств(НоваяСтр, ВыборкаДляДокумента);
			
		КонецЦикла;
		
		// Заполнение выполняем с помощью процедуры ОбработкаЗаполнения документа ввода показаний.
		// Необходимо для корректного заполнения долей в случае установки ПУ на несколько объектов.
		ДокументВводаПоказаний.Заполнить(СтруктураДокумента);
		
		ПроверитьОтражениеДанныхПоПриборамУчета(ДокументВводаПоказаний.Главная.Выгрузить(), 
												СтруктураДокумента.ТаблицаПоказаний,
												ВременнаяТаблицаИсключенныхПриборовУчета);
		
		Если ДокументВводаПоказаний.Главная.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ?(ДобавитьСсылкуНаДокументВТаблицуДокументовВводаПоказаний, "Создан ", "Изменен ")
						 + "документ ввода показаний " + ПолучитьПредставлениеДокументаВводПоказанийСчетчика(ДокументВводаПоказаний) + ":";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		// 6. Выполняем проверку на правильность заполнения и корректность введенных показаний:
		// 6.1. Если показания корректны, то документ проводим.
		// 6.2. Если имеются ошибки или требуется подтверждение корректности показаний, то просто записываем.
		Если ДокументВводаПоказаний.ПроверитьЗаполнение() Тогда
			Если НЕ КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Проведение) Тогда
				КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Запись);
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документ не проведен.");
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документ проведен успешно.");
			КонецЕсли;
		Иначе
			КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Запись);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документ не проведен.");
		КонецЕсли;
		
		Если НЕ ДокументВводаПоказаний.Ссылка.Пустая() 
		   И ДобавитьСсылкуНаДокументВТаблицуДокументовВводаПоказаний Тогда
			НоваяСтр = Объект.ДокументыВводаПоказаний.Добавить();
			НоваяСтр.ВводПоказаний = ДокументВводаПоказаний.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьИнформированиеПользователя(ВременнаяТаблицаИсключенныхПриборовУчета);
	
КонецПроцедуры // СформироватьДокументыВводаПоказаний()

&НаСервере
// Возвращает структуру для заполнения документа ввода показаний.
Функция ОпределитьСтруктуруДокументаВводПоказанийСчетчика()
	
	СтруктураДокумента = Новый Структура("ЗагружатьНулевыеПоказания, ВидОперации, Дата, Комментарий, ВводНачальныхПоказаний, ТаблицаПоказаний", Истина);
	
	// Подготовка таблицы показаний.
	МассивТиповОбъектов = Новый Массив;
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	
	// Таблица показаний
	СтруктураДокумента.ТаблицаПоказаний = Новый ТаблицаЗначений;
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Услуга",           Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Счетчик",          Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Объект",           Новый ОписаниеТипов(МассивТиповОбъектов));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДатаПоказания",    Новый ОписаниеТипов("Дата"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказание", Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказание",  Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказание", Новый ОписаниеТипов("Число"));
	
	Возврат СтруктураДокумента;
	
КонецФункции // ОпределитьСтруктуруДокументаВводПоказанийСчетчика()

&НаКлиенте
// Функция записывает текущий документ и возвращает "Истина" в положительном случае.
Функция ЗаписатьТекущийДокумент()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	
	Возврат Записать(ПараметрыЗаписи);
	
КонецФункции // ЗаписатьДокумент()

&НаСервере
// Процедура обновляет показания счетчиков в табличной части по данным сформированных документов ввода показаний.
Процедура ОбновитьПоказанияСчетчиков()
	
	Если НЕ Объект.ВвестиНачальныеИлиКонечныеПоказания Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.ДатаВключения КАК ДатаВключения,
	|	ТаблицаСчетчиков.ДатаПоверки КАК ДатаПоверки,
	|	ТаблицаСчетчиков.НомерПломбы КАК НомерПломбы,
	|	ТаблицаСчетчиков.Здание КАК Здание,
	|	ТаблицаСчетчиков.ТарифностьСчетчика КАК ТарифностьСчетчика,
	|	ТаблицаСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаСчетчиков.ПустоеДневноеПоказание КАК ПустоеДневноеПоказание,
	|	ТаблицаСчетчиков.ПустоеНочноеПоказание КАК ПустоеНочноеПоказание,
	|	ТаблицаСчетчиков.ПустоеПиковоеПоказание КАК ПустоеПиковоеПоказание,
	|	ЛОЖЬ КАК ПоказанияПоСчетчикуВведены
	|ПОМЕСТИТЬ ВрТЧДокументаУстановкаСчетчика
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Счетчик КАК Счетчик,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Объект КАК Объект,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказание КАК ДневноеПоказание,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказание КАК НочноеПоказание,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ЛОЖЬ КАК ПустоеДневноеПоказание,
	|	ЛОЖЬ КАК ПустоеНочноеПоказание,
	|	ЛОЖЬ КАК ПустоеПиковоеПоказание,
	|	ИСТИНА КАК ПоказанияПоСчетчикуВведены
	|ПОМЕСТИТЬ ВрТЧДокументаВводПоказаний
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка В(&ДокументыВводаПоказаний)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТЧДокументаУстановкаСчетчика.Объект КАК Объект,
	|	ВрТЧДокументаУстановкаСчетчика.Счетчик КАК Счетчик,
	|	ВрТЧДокументаУстановкаСчетчика.ДатаВключения КАК ДатаВключения,
	|	ВрТЧДокументаУстановкаСчетчика.ДатаПоверки КАК ДатаПоверки,
	|	ВрТЧДокументаУстановкаСчетчика.НомерПломбы КАК НомерПломбы,
	|	ВрТЧДокументаУстановкаСчетчика.Здание КАК Здание,
	|	ВрТЧДокументаУстановкаСчетчика.ТарифностьСчетчика КАК ТарифностьСчетчика,
	|	ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ДневноеПоказание, ВрТЧДокументаУстановкаСчетчика.ДневноеПоказание) КАК ДневноеПоказание,
	|	ЕСТЬNULL(ВрТЧДокументаВводПоказаний.НочноеПоказание, ВрТЧДокументаУстановкаСчетчика.НочноеПоказание) КАК НочноеПоказание,
	|	ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ПиковоеПоказание, ВрТЧДокументаУстановкаСчетчика.ПиковоеПоказание) КАК ПиковоеПоказание,
	|	ВЫБОР
	|		КОГДА ВрТЧДокументаУстановкаСчетчика.ТарифностьСчетчика > 0
	|			ТОГДА ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ПустоеДневноеПоказание, ВрТЧДокументаУстановкаСчетчика.ПустоеДневноеПоказание)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПустоеДневноеПоказание,
	|	ВЫБОР
	|		КОГДА ВрТЧДокументаУстановкаСчетчика.ТарифностьСчетчика > 1
	|			ТОГДА ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ПустоеНочноеПоказание, ВрТЧДокументаУстановкаСчетчика.ПустоеНочноеПоказание)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПустоеНочноеПоказание,
	|	ВЫБОР
	|		КОГДА ВрТЧДокументаУстановкаСчетчика.ТарифностьСчетчика > 2
	|			ТОГДА ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ПустоеПиковоеПоказание, ВрТЧДокументаУстановкаСчетчика.ПустоеПиковоеПоказание)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПустоеПиковоеПоказание,
	|	ЕСТЬNULL(ВрТЧДокументаВводПоказаний.ПоказанияПоСчетчикуВведены, ВрТЧДокументаУстановкаСчетчика.ПоказанияПоСчетчикуВведены) КАК ПоказанияПоСчетчикуВведены
	|ИЗ
	|	ВрТЧДокументаУстановкаСчетчика КАК ВрТЧДокументаУстановкаСчетчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрТЧДокументаВводПоказаний КАК ВрТЧДокументаВводПоказаний
	|		ПО ВрТЧДокументаУстановкаСчетчика.Счетчик = ВрТЧДокументаВводПоказаний.Счетчик
	|			И ВрТЧДокументаУстановкаСчетчика.Объект = ВрТЧДокументаВводПоказаний.Объект";
	
	Запрос.УстановитьПараметр("ТаблицаСчетчиков",        Объект.Главная.Выгрузить());
	Запрос.УстановитьПараметр("ДокументыВводаПоказаний", Объект.ДокументыВводаПоказаний.Выгрузить(, "ВводПоказаний"));
	
	Объект.Главная.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ОбновитьПоказанияСчетчиков()

&НаСервере
// Функция определяет вводились ли пользователем показания счетчиков.
//
// Возвращаемое значение:
//    "Истина" - есть неотраженные показания,
//    "Ложь"   - в противном случае.
//
Функция ЕстьПоказанияДляОтражения()
	
	Если Объект.ВвестиНачальныеИлиКонечныеПоказания Тогда
		
		Для Каждого ТекСтр Из Объект.Главная Цикл
			Если НЕ ТекСтр.ПоказанияПоСчетчикуВведены И ЗначениеЗаполнено(ТекСтр.Объект) И ЗначениеЗаполнено(ТекСтр.Счетчик)
			   И (НЕ ТекСтр.ПустоеДневноеПоказание ИЛИ НЕ ТекСтр.ПустоеНочноеПоказание ИЛИ НЕ ТекСтр.ПустоеПиковоеПоказание) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
// Процедура обновляет показания счетчиков и ссылки на сформированные документы ввода показаний.
Процедура ОбновитьДанныеОПоказанияхНаФорме()
	
	ОбновитьПоказанияСчетчиков();
	
	// Запись производится для гарантированного сохранения
	// ссылок на сформированные документы ввода показаний.
	ЗаписатьТекущийДокумент();
	
	ОбновлениеПредставленияСформированныхДокументовВводаПоказаний();
	
	УправлениеФормой();
	
КонецПроцедуры // ОбновитьДанныеОПоказанияхНаФорме()

&НаКлиенте
// Процедура обновляет показания текущего счетчика сразу для всех объектов, на которые устанавливается прибор учета.
Процедура ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.Главная.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	Счетчик            = ТекущаяСтрока.Счетчик;
	
	НайденныеСтроки = Объект.Главная.НайтиСтроки(Новый Структура("Счетчик", Счетчик));
	
	Для Каждого ТекСтр Из НайденныеСтроки Цикл
		
		Если НЕ ТекСтр.НомерСтроки = НомерТекущейСтроки 
		   И НЕ ТекСтр.ПоказанияПоСчетчикуВведены Тогда
			
			ТекСтр.ДатаВключения = ТекущаяСтрока.ДатаВключения;
			ТекСтр.ДатаПоверки   = ТекущаяСтрока.ДатаПоверки;
			ТекСтр.НомерПломбы   = ТекущаяСтрока.НомерПломбы;
			
			ТекСтр.ДневноеПоказание = ТекущаяСтрока.ДневноеПоказание;
			ТекСтр.НочноеПоказание  = ТекущаяСтрока.НочноеПоказание;
			ТекСтр.ПиковоеПоказание = ТекущаяСтрока.ПиковоеПоказание;
			
			ТекСтр.ПустоеДневноеПоказание = ТекущаяСтрока.ПустоеДневноеПоказание;
			ТекСтр.ПустоеНочноеПоказание  = ТекущаяСтрока.ПустоеНочноеПоказание;
			ТекСтр.ПустоеПиковоеПоказание = ТекущаяСтрока.ПустоеПиковоеПоказание;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПоказанияДляВсехОбъектовУстановкиТекущегоСчетчика()

&НаСервере
// Заполняет таблицу стояков установки приборов учета.
//
Процедура ЗаполнитьТаблицуСтояковУстановкиПриборовУчета()
	
	Если ВедетсяУчетПриборовУчетаПоСтоякам И ЭтаФорма.ЭтоОтключениеСчетчика Тогда
		
		СписокПУ = Объект.Главная.Выгрузить().ВыгрузитьКолонку("Счетчик");
		врТаблицаСтояковУстановкиПУ = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьТаблицуСтояковУстановкиПриборовУчета(Объект.Дата, СписокПУ);
		
		Если врТаблицаСтояковУстановкиПУ.Количество() > 0 Тогда
			ТаблицаСтояковУстановкиПУ.Загрузить(врТаблицаСтояковУстановкиПУ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуСтояковУстановкиПриборовУчета()

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает "место установки" для прибора учета.
Функция ПолучитьСтоякУстановкиПоПриборуУчета(Форма, ПриборУчета)
	
	СтоякПриОтключении = Неопределено;
	
	Если Форма.ВедетсяУчетПриборовУчетаПоСтоякам И Форма.ЭтоОтключениеСчетчика Тогда
		
		// При отключении ПУ стояк определяем автоматически по "месту установки".
		НайденнаяСтрока = Форма.ТаблицаСтояковУстановкиПУ.НайтиСтроки(Новый Структура("Счетчик", ПриборУчета));
		Если НайденнаяСтрока.Количество() > 0 Тогда
			СтоякПриОтключении = НайденнаяСтрока[0].Стояк;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтоякПриОтключении;
	
КонецФункции

&НаСервере
// Дополняет таблицу по объектам стояками по коммунальному ресурсу.
Процедура ДополнитьТаблицуОбъектовСтояками(СписокЗаполненных);
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(Новый ОписаниеТипов(ОпределитьМассивТипов())));
	
	Для Каждого Строка ИЗ СписокЗаполненных Цикл
		СтрокаТабЧасти = ТаблицаОбъектов.Добавить();
		СтрокаТабЧасти.Объект = Строка.Значение;
	КонецЦикла;
	
	// Дополняем таблицу объектов стояками по коммунальному ресурсу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов",    ТаблицаОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВрТаблица
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОбъектов.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ТаблицаОбъектов.Объект.Адрес
	|		КОГДА ТаблицаОбъектов.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ТаблицаОбъектов.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение,
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВрТаблицаОбъектов
	|ИЗ
	|	ВрТаблица КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВрТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение,
	|	УПЖКХ_Помещения.ПроектПомещения КАК ПроектПомещения
	|ПОМЕСТИТЬ ВрПроектыПомещений
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаОбъектов.Помещение
	|			ИЗ
	|				ВрТаблицаОбъектов КАК ТаблицаОбъектов)
	|	И НЕ УПЖКХ_Помещения.ПроектПомещения = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ПроектыПомещений.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Стояки.Владелец КАК ПроектПомещения,
	|	УПЖКХ_Стояки.Ссылка КАК Стояк
	|ПОМЕСТИТЬ ВрСтояки
	|ИЗ
	|	Справочник.УПЖКХ_Стояки КАК УПЖКХ_Стояки
	|ГДЕ
	|	УПЖКХ_Стояки.Владелец В
	|			(ВЫБРАТЬ
	|				ПроектыПомещений.ПроектПомещения
	|			ИЗ
	|				ВрПроектыПомещений КАК ПроектыПомещений)
	|	И НЕ УПЖКХ_Стояки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыПомещений.Помещение КАК Помещение,
	|	ПроектыПомещений.ПроектПомещения КАК ПроектПомещения,
	|	Стояки.Стояк КАК Стояк,
	|	ИСТИНА КАК НастроенУчетПоСтоякам
	|ПОМЕСТИТЬ ВрСтоякиПоПроектам
	|ИЗ
	|	ВрПроектыПомещений КАК ПроектыПомещений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрСтояки КАК Стояки
	|		ПО ПроектыПомещений.ПроектПомещения = Стояки.ПроектПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	ЕСТЬNULL(СтоякиПоПроектам.Стояк, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Стояки.ПустаяСсылка)) КАК Стояк
	|ИЗ
	|	ВрТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрСтоякиПоПроектам КАК СтоякиПоПроектам
	|		ПО ТаблицаОбъектов.Помещение = СтоякиПоПроектам.Помещение";
	
	ТабЗнач = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтр ИЗ ТабЗнач Цикл
		СтрокаТабЧасти = Объект.Главная.Добавить();
		СтрокаТабЧасти.Объект = ТекСтр.Объект;
		СтрокаТабЧасти.Стояк  = ТекСтр.Стояк;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Возвращает массив типов объектов.
Функция ОпределитьМассивТипов()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	
	Возврат МассивТипов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Переопределяет параметр "НастроенУчетПоСтоякам".
Процедура ПереопределитьНастроенУчетПоСтоякам(ТекущиеДанные, ВедетсяУчетПриборовУчетаПоСтоякам)
	
	Если ВедетсяУчетПриборовУчетаПоСтоякам 
		И УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСписокДоступныхСтояков(ТекущиеДанные.Объект, ТекущиеДанные.Счетчик).Количество() > 0 Тогда
		ТекущиеДанные.НастроенУчетПоСтоякам = Истина;
	Иначе
		ТекущиеДанные.НастроенУчетПоСтоякам = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПереопределитьНастроенУчетПоСтоякам()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
