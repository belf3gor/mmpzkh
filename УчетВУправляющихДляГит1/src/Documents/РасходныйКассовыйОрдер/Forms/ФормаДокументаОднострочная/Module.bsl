&НаКлиенте
Перем СтрокаПоискаПоКБК;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РасходныйКассовыйОрдерФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасходныйКассовыйОрдерФормыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИнтеграцияОрганизацииВключена
		И НЕ Объект.ПометкаУдаления
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НЕ Отказ Тогда
		
		Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
			РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
			Если Объект.ВыплатаЗаработнойПлаты.Количество() < 2 Тогда
				РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыВыплатаЗарплаты(ЭтотОбъект);
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов") Тогда
			Если Объект.ВыплатаДепонентов.Количество() < 2 Тогда
				РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыВыплатаДепонентов(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку")
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиент.ЗадатьВопросОПроверкеПравильностиРеквизитов(
		ЭтотОбъект, ПроверкаРеквизитовПередЗаписьюНаСервере(), ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РасходныйКассовыйОрдерФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РасходныйКассовыйОрдерФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РасходныйКассовыйОрдерФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
		ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			ОрганизацияПриИзмененииСервер();
		Иначе
			УстановитьФункциональныеОпцииФормы();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			
			ОбработатьИзмененияВОрганизацииНаСервере();
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		ЗаполнитьПоВыбраннойНастройкеПлатежаВБюджет(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаРасшифровкаПлатежа" Тогда
		
		ОбработкаВыбораРасшифровкаПлатежаНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаВыплатаЗаработнойПлаты" Тогда
		
		ОбработкаВыбораВыплатаЗаработнойПлатыНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаВыплатаДепонентов" Тогда
		
		ОбработкаВыбораВыплатаДепонентовНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РасходныйКассовыйОрдер.Форма.ФормаВводаЧека" Тогда
		
		Объект.НомерЧекаНПД = ВыбранноеЗначение.НомерЧекаНПД;
		
		Если ЗначениеЗаполнено(Объект.НомерЧекаНПД) Тогда 
			ШаблонЧека = НСтр("ru='Чек №%1'");
			Элементы.ДекорацияЧекНаВозврат.Заголовок = СтрШаблон(ШаблонЧека, Объект.НомерЧекаНПД);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПриходныйКассовыйОрдер.Форма.ФормаВыбора" Тогда
	
		ОбработкаВыбораПКО(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("СчетДт") Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ВыбранноеЗначение.СчетДт;
			Если ВыбранноеЗначение.Свойство("АдресТаблицыНалоговыйАгентНДСВХранилище") Тогда
				ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение);
			Иначе
				Объект.НалоговыйАгентНДС.Очистить();
			КонецЕсли;
			ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Если определили, что Изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВидОперацииАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		
		АктуализированыРеквизитыПлатежаВБюджет = Ложь;
		ПричиныИзменения = Новый Массив;
		ПричиныИзменения.Добавить("Налог");
		НалогПриИзмененииНаСервере(ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
		
		Если АктуализированыРеквизитыПлатежаВБюджет Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Коды бюджетной классификации успешно обновлены'"),
				"e1cib/data/Справочник.ВидыНалоговИПлатежейВБюджет.Форма.ФормаСписка",
				НСтр("ru = 'Налоги и взносы'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.НалогАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	РасходныйКассовыйОрдерФормыКлиент.НалогОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) И ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		
		ВидаНалоговогоОбязательстваОбработатьИзменение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияБУНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиент.ПорядокОтраженияБУНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыплатаЗаработнойПлатыВедомость) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(
			ВыплатаЗаработнойПлатыВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ВыплатаДепонентовВедомость) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаДепонентовВедомость(
			ВыплатаДепонентовВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.КонтрагентАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.КонтрагентОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.КонтрагентОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		СчетКассаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ВалютаДокументаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ПодразделениеОрганизацииПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыдатьНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыдатьОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			
		СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		Если ПрименениеУСН И НЕ ПрименениеУСНДоходы
			И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")) Тогда
			РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(ЭтотОбъект, СтрокаПлатеж);
			РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
		КонецЕсли;
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(ЭтотОбъект);
	Иначе
		СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(ЭтотОбъект);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
		   И Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСНалоговогоАгента") Тогда
			НДСНалоговогоАгентаПриИзмененииСервер();
		КонецЕсли;
		
		Если ПрименениеУСН Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
				Или Не ПрименениеУСНДоходы
					И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
						Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")) Тогда
				ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
				РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(ЭтотОбъект) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетУчетаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		// Требуется серверный вызов для отражения в УСН.
		// В ходе этого же серверного вызова заполним счета.
		СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН();
	Иначе
		// Серверный вызов может понадобиться только для заполнения счета.
		// А может и не понадобиться, если счета заполняются перед записью.
		СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("СтатьяДвиженияДенежныхСредств", Объект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СчетУчетаЗадержкаЗарплатыПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт1ПриИзменении(ЭтотОбъект, Элемент);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		РасходныйКассовыйОрдерФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт2ПриИзменении(ЭтотОбъект, Элемент);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		РасходныйКассовыйОрдерФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт3ПриИзменении(ЭтотОбъект, Элемент);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		РасходныйКассовыйОрдерФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт1НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт2НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДт3НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты1ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты1ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты2ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты2ПриИзменении(ЭтотОбъект, Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты3ПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты3ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты1НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты2НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.СубконтоДтЗадержкаЗарплаты3НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ВедомостьЗарплатаРаботникуПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВедомостьЗарплатаРаботникуОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВедомостьЗарплатаРаботникуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееРасходыУСНПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ПрочееРасходыУСНПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНДСУСНПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ПрочееНДСУСНПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.НадписьРеквизитыПлатежейВБюджетНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.НалоговыйПериодРегулирование(ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка);
	
	ОбработатьИзменениеНалоговогоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ОбработатьИзменениеНалоговогоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.НалоговыйПериодНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.НалоговыйПериодОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыдатьПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументуПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ПоДокументуПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ОснованиеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложениеПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ПриложениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеОЗаполненииРеквизитовПлатежаНПДОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	БанкИКассаФормыКлиент.ОбработатьСсылкуБаннераПредупреждениеОЗаполненииРеквизитовПлатежаНПД(
		Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРазбитьПлатежНажатие(Элемент)
	
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойПериодПриИзменении(Элемент)
	
	ОбработатьИзменениеНалоговогоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтрагентаПриИзменении(Элемент)
	
	ТипКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЧекаНПДПриИзменении(Элемент)
	
	ОбновитьРеквизитыПоНомеруНПД();

КонецПроцедуры

&НаКлиенте
Процедура НомерЧекаНПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыОтбора = ПараметрыОтбораДокументаПКО();

	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаВыбора",
			ПараметрыОтбора,
			ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЧекаНПДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьДанныеВыбораПоЧеку(Текст, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧекНаВозвратНажатие(Элемент)
	
	ЧекиНПДКлиент.ОткрытьФормуЧекаНПД(ЭтотОбъект, Объект.Ссылка, ПараметрыОтправкиЧека(Объект.Контрагент));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСделкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСтавкаНДСПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаРасходыУСНПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаЗаработнойПлатыВедомостьПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаЗаработнойПлатыВедомостьОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыплатаДепонентов

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(ВыплатаДепонентовВедомость) Тогда
		Объект.СуммаДокумента = РасходныйКассовыйОрдерВызовСервера.СуммаНеВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Организация, Объект.Дата, Объект.Контрагент,ВыплатаДепонентовВедомость , УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаДепонентовВедомостьНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаДепонентовВедомость(
		ВыплатаДепонентовВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РасходныйКассовыйОрдерФормыКлиент.ВыплатаДепонентовВедомостьОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочиеПлатежиВБюджет(Команда)
	
	РасходныйКассовыйОрдерФормыКлиент.ПрочиеПлатежиВБюджет(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрУплатыНДФЛ(Команда)
	
	РасходныйКассовыйОрдерФормыКлиент.РеестрУплатыНДФЛ(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	РасходныйКассовыйОрдерФормыКлиент.ПоказатьКонтекстныеНовости(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЧек(Команда)

	Если Не ПроверитьЗаполнениеДляАннулированияЧекаНПДИЗаписать() Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьАннулированиеЧека();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

&НаСервере
Функция ПараметрыОтбораДокументаПКО()
	
	ПараметрыОтбора = Новый Структура();
	
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		
	Возврат ПараметрыОтбора;
КонецФункции

&НаСервере
Процедура СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН()
	
	РасходныйКассовыйОрдерФормы.СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере()
	
	СтрокаПлатеж = РасходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
	
	РасходныйКассовыйОрдерФормы.РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(ЭтотОбъект, СтрокаПлатеж);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	РасходныйКассовыйОрдерФормы.НалогПриИзмененииНаСервере(
		ЭтотОбъект, ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	РасходныйКассовыйОрдерФормы.ОбработатьИзмененияВОрганизацииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	РасходныйКассовыйОрдерФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.ДатаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере()
	
	РасходныйКассовыйОрдерФормы.ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВыбраннойНастройкеПлатежаВБюджет(ВыбранноеЗначение)
	
	РасходныйКассовыйОрдерФормы.ЗаполнитьПоВыбраннойНастройкеПлатежаВБюджет(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ВидаНалоговогоОбязательстваОбработатьИзменение()
	
	РасходныйКассовыйОрдерФормы.ВидаНалоговогоОбязательстваОбработатьИзменение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.СчетКонтрагентаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКассаПриИзмененииСервер();
	
	РасходныйКассовыйОрдерФормы.СчетКассаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.ВалютаДокументаПриИзмененииСервер(ЭтотОбъект, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПриИзмененииСервер()
	
	РасходныйКассовыйОрдерФормы.СчетУчетаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	РасходныйКассовыйОрдерФормы.ЗаполнитьОтражениеВУСННаСервере(ЭтотОбъект, ЗаполнитьСуммы, ЗаполнитьСодержание);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНалоговогоПериода()
	
	РасходныйКассовыйОрдерФормы.ОбработатьИзменениеНалоговогоПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитовПередЗаписьюНаСервере() Экспорт
	
	Возврат РасходныйКассовыйОрдерФормы.ПроверкаРеквизитовПередЗаписьюНаСервере(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура НДСНалоговогоАгентаПриИзмененииСервер()
	
	Если Объект.НалоговыйАгентНДС.Количество() = 1 Тогда
		СтрокаРасшифровки       = Объект.НалоговыйАгентНДС[0];
		СтрокаРасшифровки.Сумма = Объект.СуммаДокумента;
	Иначе
		Объект.НалоговыйАгентНДС.Очистить();
		ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ЧекиНПД

&НаСервереБезКонтекста
Функция ПараметрыОтправкиЧека(Контрагент)
	
	Возврат ЧекиНПД.ПараметрыОтправкиЧека(Контрагент);
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеДляАннулированияЧекаНПДИЗаписать()

	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ПлательщикНПД ИЛИ Не ПроверитьЗаполнение()
		ИЛИ Не РасходныйКассовыйОрдерФормы.ПроверитьЗаполнениеДляАннулированияЧекаНПД(Объект.НомерЧекаНПД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
	
		Записать();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОЧекеНПД()
	
	Если ПлательщикНПД Тогда
		СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
	КонецЕсли;
	РасходныйКассовыйОрдерФормы.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАннулированиеЧека()

	ОтобразитьОжиданиеДанныхНаФорме();
	
	ПараметрыАннулированияЧека = ЧекиНПДКлиентСервер.НовыйПараметрыАннулированияЧека();
	ПараметрыАннулированияЧека.Ссылка = Объект.Ссылка;
	ПараметрыАннулированияЧека.Организация = Объект.Организация;
	ПараметрыАннулированияЧека.НомерЧека = Объект.НомерЧекаНПД;
	ПараметрыАннулированияЧека.ПричинаОтменыЧека = НСтр("ru = 'Возврат средств'");
	ПараметрыАннулированияЧека.ДокументОснование = Объект.ДокументОснование;
	
	ДлительнаяОперация = ЧекиНПДВызовСервера.ЗапуститьАннулированиеЧекаВФоне(ПараметрыАннулированияЧека, УникальныйИдентификатор);
	ЧекиНПДКлиент.ОжидатьАннулированиеЧекаВФоне(ДлительнаяОперация, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОжиданиеДанныхНаФорме()

	Элементы.АннулироватьЧекНПД.Видимость = Ложь;
	Элементы.ОжиданиеДанных.Видимость = Истина;
	Элементы.ДекорацияЧекНаВозврат.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьАннулированиеЧекаВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		ПоказатьОшибкуАннулированияЧека("Ошибка соединения");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОбработатьРезультатАннулированияЧекаВФоне(ДлительнаяОперация.АдресРезультата);
		
		ЗапуститьОжиданиеРезультатаАннулированияЧека();
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуАннулированияЧека(ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатАннулированияЧекаВФоне(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка аннулирования чека в фоне: пустой результат.'");
	КонецЕсли;
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();

	Если Результат.Ошибка Или Результат.СтатусЗапроса = СтатусыЗапросов.Ошибка
		ИЛИ Результат.СтатусЗапроса = СтатусыЗапросов.Отменено Тогда
	
		ПараметрыОжиданияРезультата = Неопределено;
	
		УстановитьСведенияОЧекеНПД();

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		
	ИначеЕсли Результат.СтатусЗапроса = СтатусыЗапросов.Выполняется Тогда
	
		Если ЗначениеЗаполнено(Результат.ПараметрыОжиданияРезультата) Тогда
			ПараметрыОжиданияРезультата = Результат.ПараметрыОжиданияРезультата;
		КонецЕсли;
		
	ИначеЕсли Результат.СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
	
		ПараметрыОжиданияРезультата = Неопределено;
	
		УстановитьСведенияОЧекеНПД();
		
		Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
				Объект.Комментарий = СведенияОЧекеНПД.ПричинаАннулирования;
			КонецЕсли;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОжиданиеРезультатаАннулированияЧека()
	
	Если Не ЗначениеЗаполнено(ПараметрыОжиданияРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ВремяОжидания = ПараметрыОжиданияРезультата.ВремяОжидания;
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОжиданиеРезультатаАннулированияЧека", ВремяОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОжиданиеРезультатаАннулированияЧека() Экспорт
	
	ДлительнаяОперация = ЧекиНПДВызовСервера.ЗапуститьПроверкуРезультатаАннулированияЧекаВФоне(Объект.Ссылка,
		 ПараметрыОжиданияРезультата, УникальныйИдентификатор);
	ЧекиНПДКлиент.ОжидатьАннулированиеЧекаВФоне(ДлительнаяОперация, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьОшибкуАннулированияЧека(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки = Неопределено);

	ЗаписьЖурналаРегистрации(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		?(ПодробноеПредставлениеОшибки <> Неопределено, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки));
	
	ВызватьИсключение КраткоеПредставлениеОшибки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеВыбораПоЧеку(Текст, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура("Текст, НомерЧекаНПД", Текст, Объект.НомерЧекаНПД);
	
	ТекущаяСтрокаТекст = Текст;

	Если Не ЗначениеЗаполнено(Текст) Тогда
		ТекущаяСтрокаТекст = Объект.НомерЧекаНПД;
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьДанныеВыбораИзРегистраСведенийНПД(ТекущаяСтрокаТекст, Объект.Организация);

	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораИзРегистраСведенийНПД(ТекущаяСтрокаТекст, Организация)

	Возврат Документы.РасходныйКассовыйОрдер.ПолучитьДанныеВыбораИзРегистраСведенийНПД(ТекущаяСтрокаТекст, Организация);
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыПоНомеруНПД();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекиНПД.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.НомерЧека = &НомерЧека
	|	И ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
	|	И ЧекиНПД.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НомерЧека",   Объект.НомерЧекаНПД);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументВыбора = Неопределено;
	
	Если Результат.Следующий() Тогда
		ДокументВыбора = Результат.ДокументОснование;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДокументВыбора) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаВыбораПКО(ДокументВыбора)
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораПКО(ДокументВыбора)

	Документы.РасходныйКассовыйОрдер.ЗаполнитьПоПКО(ДокументВыбора, ЭтотОбъект);
	
	РасходныйКассовыйОрдерФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);

	РасходныйКассовыйОрдерФормы.УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ФормыРазбивкиПлатежа

&НаКлиенте
Процедура ОткрытьФормуТаблицы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		
		ОткрытьФормуВыплатаЗаработнойПлаты();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов") Тогда
		
		ОткрытьФормуВыплатаДепонентов();
		
	Иначе
		
		ОткрытьФормуРасшифровкаПлатежа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкаПлатежа()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Ссылка, ВалютаДокумента, ВидОперации, Дата, Контрагент, Организация,
		|СчетКасса, СчетКонтрагента, СчетОрганизации, СуммаДокумента, Графа7_УСН, БезЗакрывающихДокументов");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	РеквизитыФормы = "СвойстваПлатежа, ВалютаРегламентированногоУчета, ПользовательУправляетСчетамиУчета,
		|ЕстьРасчетыВУсловныхЕдиницах, КратностьДокумента, КурсДокумента, ОплатаВВалюте,
		|ПлательщикЕНВД, ПрименениеУСН, ПрименениеУСНДоходы, 
		|ПрименяетсяОсобыйПорядокНалогообложения, ПорядокОтраженияДоходаСоответствиеЗначений";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.Форма.ФормаРасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыплатаЗаработнойПлаты()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.ВыплатаЗаработнойПлаты.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыВыплатаЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Ссылка, Дата, Организация, ВидОперации, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	РеквизитыФормы = "УчетЗарплатыИКадровВоВнешнейПрограмме";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаВыплатаЗаработнойПлаты = ПоместитьВыплатаЗаработнойПлатыВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаВыплатаЗаработнойПлаты", АдресХранилищаВыплатаЗаработнойПлаты);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.Форма.ФормаВыплатаЗаработнойПлаты", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыплатаДепонентов()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.ВыплатаДепонентов.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыВыплатаДепонентов(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Ссылка, Дата, Организация, Контрагент, ВидОперации, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	РеквизитыФормы = "УчетЗарплатыИКадровВоВнешнейПрограмме";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаВыплатаДепонентов = ПоместитьВыплатаДепонентовВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаВыплатаДепонентов", АдресХранилищаВыплатаДепонентов);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.Форма.ФормаВыплатаДепонентов", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьВыплатаЗаработнойПлатыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ВыплатаЗаработнойПлаты.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьВыплатаДепонентовВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ВыплатаДепонентов.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораРасшифровкаПлатежаНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект,     ВыбранноеЗначение, "СуммаДокумента");
		ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаРасшифровкаПлатежа);
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаРасшифровкаПлатежа);
		
		Модифицированность = Истина;
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
		
		ПредлагатьНовыйДоговор = Ложь;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику И НЕ ОплатаВВалюте И ВестиУчетПоДоговорам Тогда
			ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("АдресТаблицыНалоговыйАгентНДСВХранилище") Тогда
			ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение);
		КонецЕсли;
		
		РасходныйКассовыйОрдерФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
		РасходныйКассовыйОрдерФормы.УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораВыплатаЗаработнойПлатыНаСервере(ВыбранноеЗначение)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
	ЗаполнитьЗначенияСвойств(Объект,     ВыбранноеЗначение, "СуммаДокумента");
	
	ТаблицаВыплатаЗаработнойПлаты = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВыплатаЗаработнойПлаты);
	Объект.ВыплатаЗаработнойПлаты.Загрузить(ТаблицаВыплатаЗаработнойПлаты);

	РасходныйКассовыйОрдерФормы.УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораВыплатаДепонентовНаСервере(ВыбранноеЗначение)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
	ЗаполнитьЗначенияСвойств(Объект,     ВыбранноеЗначение, "СуммаДокумента");

	ТаблицаВыплатаДепонентов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаВыплатаДепонентов);
	Объект.ВыплатаДепонентов.Загрузить(ТаблицаВыплатаДепонентов);
	
	//Объект.СуммаДокумента = Объект.ВыплатаДепонентов.Итог("СуммаПлатежа");
	//Если Объект.ВыплатаДепонентов.Количество() > 0 Тогда
	//	ВыплатаДепонентовВедомость    = Объект.ВыплатаДепонентов[0].Ведомость;
	//	ВыплатаДепонентовСуммаПлатежа = Объект.СуммаДокумента;
	//КонецЕсли;
	
	РасходныйКассовыйОрдерФормы.УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	РасходныйКассовыйОрдерФормыКлиент.ДокументОснованиеНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение)
	
	ТаблицаНалоговыйАгентНДС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыНалоговыйАгентНДСВХранилище);
	Объект.НалоговыйАгентНДС.Загрузить(ТаблицаНалоговыйАгентНДС);
	Объект.СуммаДокумента = Объект.НалоговыйАгентНДС.Итог("Сумма");
	
	Объект.СубконтоДт1 = Неопределено;
	Объект.СубконтоДт2 = Неопределено;
	Объект.СубконтоДт3 = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ТипКонтрагентаПриИзмененииНаСервере()
	
	РасходныйКассовыйОрдерФормы.УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура РасчетыПриОплатеПриИзменении(Элемент)
	
	Объект.БезЗакрывающихДокументов = РасчетыПриОплате = "БезДокументов";
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеДоходаПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерФормыКлиент.РасшифровкаПлатежаПолеОтражениеДоходаПриИзменении(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры
