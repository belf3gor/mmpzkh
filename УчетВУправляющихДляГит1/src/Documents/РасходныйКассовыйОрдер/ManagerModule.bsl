#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 18, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются (кроме режима Интеграции с банком):
	// ПрочийРасход
	
	// учет наличных денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	
	// учет безналичных денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличнымиВБанк");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ИспользоватьПереводыВПути");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличнымиВБанк");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИспользоватьПереводыВПути");
	
	// учет денег в пути при инкассации
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Инкассация");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",     "СубконтоСтатьяДвиженияДенежныхСредств1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",     "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",     "СубконтоСтатьяДвиженияДенежныхСредств3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ОбособленноеПодразделение");
	
	// учет расчетов
	// - оплата задолженности 
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - только аванс
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	
	// - расчеты с покупателем
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратПокупателю");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - возврат займа
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидПлатежаПоКредитамЗаймам",  "ВидПлатежаПоКредитамЗаймам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратЗайма");
	
	// - возврат кредита
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеКредиты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидПлатежаПоКредитамЗаймам",  "ВидПлатежаПоКредитамЗаймам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратКредита");
	
	// - выдача займа контрагенту
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПредоставленныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыдачаЗаймаКонтрагенту");
	
	// расходы в виде компенсации за задержку зарплаты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыПоВедомостям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыРаботнику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты",
		"Ссылка, ВидОперации, Организация, ВыплатаЗаработнойПлаты, ПлатежнаяВедомость, Контрагент");
	
	// уплата налога
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Налоги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "УплатаНалога");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Налог", "Налог");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНалоговогоОбязательства", "ВидНалоговогоОбязательства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоНалогов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоНалогов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоНалогов3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоРегистрацияВНалоговомОргане1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоРегистрацияВНалоговомОргане2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоРегистрацияВНалоговомОргане3");
	
	// прочие расходы
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПрочиеРасходы");
		// Вызов с параметром "СубконтоЗатрат1" используется в виде исключения.
		СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоЗатрат1");
	КонецЕсли;
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтатьяДвиженияДенежныхСредств");
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты") Тогда
		
		ВыплачиватьКомпенсацию = ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(
			ДанныеЗаполнения.Ссылка,
			ДанныеЗаполнения.ВидОперации,
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВыплатаЗаработнойПлаты,
			ДанныеЗаполнения.ПлатежнаяВедомость,
			ДанныеЗаполнения.Контрагент);
		
		ДанныеЗаполнения.Вставить("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты", ВыплачиватьКомпенсацию);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета() Экспорт
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПоставщику");    // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ВозвратПокупателю");   // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ВозвратРозничномуПокупателю");
	
	ВидыОпераций.Добавить("Инкассация");          // один счет в шапке
	ВидыОпераций.Добавить("ВзносНаличнымиВБанк"); // один счет в шапке
	
	ВидыОпераций.Добавить("ВозвратЗайма");
	ВидыОпераций.Добавить("ВозвратКредита");
	ВидыОпераций.Добавить("ВыдачаЗаймаКонтрагенту");
	
	ВидыОпераций.Добавить("ВыплатаЗаработнойПлатыПоВедомостям"); // счет и аналитика затрат в шапке
	ВидыОпераций.Добавить("ВыплатаЗаработнойПлатыРаботнику");    // счет и аналитика затрат в шапке
	ВидыОпераций.Добавить("УплатаНалога");                       // счет учета и аналитика
	ВидыОпераций.Добавить("ПрочийРасход");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

Функция ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(Ссылка, ВидОперации, Организация, ВыплатаЗаработнойПлаты, ПлатежнаяВедомость, Контрагент)
	
	Ведомости      = Неопределено;
	ФизическоеЛицо = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			Ведомости  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПлатежнаяВедомость);
		КонецЕсли;
		ФизическоеЛицо = Контрагент;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Ведомости      = ОбщегоНазначения.ВыгрузитьКолонку(ВыплатаЗаработнойПлаты, "Ведомость");
	КонецЕсли;
	
	Если Ведомости = Неопределено Или Ведомости.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетЗарплаты.ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(
		Организация,
		Ссылка,
		Ведомости,
		ФизическоеЛицо);
	
КонецФункции

// Вызывается документом СчетФактураВыданный (налоговый агент) при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНалоговыйАгентРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК СуммаБезНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СтавкаНДС";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратЗайма);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратКредита);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации) Экспорт
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьПлатежнаяВедомость");
	МассивРеквизитов.Добавить("ВидОперации");
	МассивРеквизитов.Добавить("Организация");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(РеквизитыОбъекта, ИсточникДанных, ИсходныеДанныеЗаполнения = Неопределено) Экспорт
	
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() И ИсточникДанных.РегистрацияВНалоговомОргане = Неопределено Тогда
		ИсточникДанных.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(
			ИсточникДанных.Организация, ИсточникДанных.Получатель);
			
		Если НЕ ЗначениеЗаполнено(ИсточникДанных.РегистрацияВНалоговомОргане) И ИсточникДанных.Свойство("КПППлательщика") Тогда
			ИсточникДанных.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(
				ИсточникДанных.Организация, ИсточникДанных.КПППлательщика);
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанныеПереданы = ИсходныеДанныеЗаполнения <> Неопределено;
	Если ИсходныеДанныеПереданы Тогда
		РеквизитыОбъекта.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Иначе
		// Если настройка не выбрана явно, попробуем определить по налогу
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			ИсточникДанных.Налог, ИсточникДанных.Организация, ИсточникДанных.РегистрацияВНалоговомОргане);
		Если НастройкаЗаполнения <> Неопределено Тогда
			ИсходныеДанныеПереданы   = Истина;
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация, ИсточникДанных.ВидНалоговогоОбязательства);
		КонецЕсли;
	КонецЕсли;
	
	// Эмулируем работу формы документа, как если бы то, что в данных заполнения, вводил пользователь
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер();
	
	// Перейдем на терминологию модуля ПлатежиВБюджетКлиентСервер
	ДанныеЗаполнения = Новый Структура;
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = РеквизитыОбъекта[Реквизит.Значение];
		Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
			// ДанныеЗаполнения
			Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
				// Считаем изменениями то, что в данных заполнения
				Если НЕ ИсходныеДанныеЗаполнения.Свойство(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Значение = ИсходныеДанныеЗаполнения[Реквизит.Значение];
				Если Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Считаем изменениями все, что заполнено
				Значение = РеквизитыОбъекта[Реквизит.Значение];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДанныеЗаполнения.Вставить(Реквизит.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Эмулируем работу пользователя
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(ИсточникДанных.Налог);
	Если ПустаяСтрока(ЗначенияПоУмолчанию.КодТерритории) Или Не ПравилаЗаполнения.ЗаполнятьКодТерриторииПоРегистрации Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию,, "КодТерритории");
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию);
	КонецЕсли;
	ПлатежиВБюджетКлиентСервер.ЗаполнитьДопустимымиЗначениями(РеквизитыПлатежаВБюджет, ДанныеЗаполнения, Контекст);
	
	// Перейдем на терминологию документа
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыОбъекта[Реквизит.Значение] = РеквизитыПлатежаВБюджет[Реквизит.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
		Если ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Контрагент",, "Получатель",  ИсходныеДанныеПереданы) Тогда
			ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СчетКонтрагента",, "СчетПолучателя", ИсходныеДанныеПереданы);
		КонецЕсли;
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "КПП", "КПППлательщика",, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Налог",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СтатьяДвиженияДенежныхСредств",,, ИсходныеДанныеПереданы);
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "ПоказательПериода",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СтатусСоставителя",,, ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "НазначениеПлатежа",,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Контекст платежа используется для вызова методов модуля ПлатежиВБюджетКлиентСервер
//
Функция КонтекстПлатежногоДокумента(Объект) Экспорт
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Период         = Объект.Дата;
	ИсточникДанных.Организация    = Объект.Организация;
	ИсточникДанных.СчетПолучателя = Объект.СчетКонтрагента;
	ИсточникДанных.Налог          = Объект.Налог;
	ИсточникДанных.ВидНалоговогоОбязательства  = Объект.ВидНалоговогоОбязательства;
	ИсточникДанных.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОргане(Объект);
	
	Возврат ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
КонецФункции

Функция АналитикаПлатежаВБюджетПриУплатеНаличными(СчетУчета, Организация, КБК, КодНалоговогоОргана, Период, ВидНалоговогоОбязательства) Экспорт
	
	АналитикаПлатежаВБюджет = Новый Структура;
	
	АналитикаПлатежаВБюджет.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетУчета);
	НомерСубконтоУровниБюджета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчета,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет Тогда
			Если ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
				АналитикаПлатежаВБюджет.Вставить("СубконтоДт" + НомерСубконто, ВидНалоговогоОбязательства);
			Иначе
				АналитикаПлатежаВБюджет.Вставить("СубконтоДт" + НомерСубконто, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;
		ИначеЕсли НалоговыйУчет.УчетВРазрезеНалоговыхОрганов()
				И СвойстваСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"] Тогда
			Если НЕ ПустаяСтрока(КодНалоговогоОргана) Тогда
				РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКоду(КодНалоговогоОргана,,, Организация);
				АналитикаПлатежаВБюджет.Вставить("СубконтоДт" + НомерСубконто, РегистрацияВНалоговомОргане);
			КонецЕсли;
		ИначеЕсли НомерСубконто = НомерСубконтоУровниБюджета Тогда
			Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
				УровеньБюджета = Перечисления.УровниБюджетов.ПустаяСсылка();
			ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоФедеральныйБюджет(КБК) Тогда
				УровеньБюджета = Перечисления.УровниБюджетов.ФедеральныйБюджет;
			ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоРегиональныйБюджет(КБК) Тогда
				УровеньБюджета = Перечисления.УровниБюджетов.РегиональныйБюджет;
			Иначе
				УровеньБюджета = Перечисления.УровниБюджетов.МестныйБюджет;
			КонецЕсли;
			АналитикаПлатежаВБюджет.Вставить("СубконтоДт" + НомерСубконто, УровеньБюджета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АналитикаПлатежаВБюджет;
	
КонецФункции

// Определяет вид налогового обязательства по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъект.РасходныйКассовыйОрдер
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//
Функция ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(Объект.СчетУчетаРасчетовСКонтрагентом,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		Если НомерСубконто <> 0 Тогда
			ВидНалоговогоОбязательства = Объект["СубконтоДт" + НомерСубконто]
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
	Иначе
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

// Заполняет субконто вида ВидыПлатежейВГосБюджет по реквизиту ВидНалоговогоОбязательства
//
Процедура ВидНалоговогоОбязательстваПриИзменении(Объект) Экспорт
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(Объект.СчетУчетаРасчетовСКонтрагентом,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Если НомерСубконто <> 0 Тогда
		Объект["СубконтоДт" + НомерСубконто] = Объект.ВидНалоговогоОбязательства;
	КонецЕсли;
	
КонецПроцедуры

// Определяет регистрацию в налоговом органие по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъектРасходныйКассовыйОрдер
//
// Возвращаемое значение:
//   СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ПолучитьРегистрациюВНалоговомОргане(Объект) Экспорт
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) И НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			Объект.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
		
		Если НомерСубконто <> 0 Тогда
			РегистрацияВНалоговомОргане = Объект["СубконтоДт" + НомерСубконто];
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

Функция СчетаБанка() Экспорт
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);    // 52
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	
	Возврат БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
КонецФункции

Функция РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(Организация, Контрагент) Экспорт
	
	РегистрацияВНалоговомОргане = Неопределено;
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(Организация, Контрагент);
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

// Получает реквизиты платежа в бюджет "по умолчанию" (необходимые для заполнения платежного документа)
// для переданного налога и организации на указанную дату.
//
// Параметры:
//  Дата                        - Дата - дата платежного документа
//  Организация                 - СправочникСсылка.Организации - организация, уплачивающая налог
//  ПеречислениеВБюджет         - Булево - признак, что это перечисление в бюджет
//  Налог                       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - уплачиваемый налог
//  ВидНалоговогоОбязательства  - ПеречислениеСсылка.ВидыПлатежейВГосБюджет    - вид платежа (налог, взнос, пени, проценты, штрафы)
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган
//  СчетПолучателя              - СправочникСсылка.БанковскиеСчета             - банковский счет получателя (налогового органа)
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(Дата, Организация, Налог, ВидНалоговогоОбязательства, РегистрацияВНалоговомОргане = Неопределено, СчетПолучателя = Неопределено) Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		ЗначенияПоУмолчанию.Вставить(Реквизит.Значение);
	КонецЦикла;
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Налог);
	
	Получатель = Справочники.Контрагенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(СчетПолучателя) Тогда
		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетПолучателя, "Владелец");
	ИначеЕсли ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		СчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
		Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетПолучателя, Получатель, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СвойстваКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	СвойстваКонтекста.Период                      = Дата;
	СвойстваКонтекста.Организация                 = Организация;
	СвойстваКонтекста.СчетПолучателя              = СчетПолучателя;
	СвойстваКонтекста.Налог                       = Налог;
	СвойстваКонтекста.ВидНалоговогоОбязательства  = ВидНалоговогоОбязательства;
	СвойстваКонтекста.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(СвойстваКонтекста);
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
	
	Для каждого ОписаниеРеквизита Из РеквизитыПлатежаВБюджет Цикл
		ИмяРеквизита = РеквизитыДокумента[ОписаниеРеквизита.Ключ];
		Если ИмяРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияПоУмолчанию.Вставить(ИмяРеквизита, ОписаниеРеквизита.Значение);
	КонецЦикла;
	
	ЗначенияПоУмолчанию.Вставить("Получатель",     Получатель);
	ЗначенияПоУмолчанию.Вставить("СчетПолучателя", СчетПолучателя);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции


Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ДанныеОбъекта) Экспорт
	
	РезультатПроверки = Новый Структура("Ошибки", Новый Массив);
	
	ПроверитьАктуальностьНалога(ДанныеОбъекта,     РезультатПроверки);
	ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки);
	
	Возврат РезультатПроверки.Ошибки;
	
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки) Экспорт
	
	Если СтруктураШапки.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ШаблонНаименования = НСтр("ru = 'Оплата %1 по договору подряда'");
		
		ТекстФИО = "";
		Если ТипЗнч(СтруктураШапки.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(СтруктураШапки.Контрагент) Тогда
			ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(СтруктураШапки.Организация, 
			СтруктураШапки.Контрагент, СтруктураШапки.Дата, Ложь);
			
			Если НЕ УчетЗарплаты.Просклонять(ДанныеФизЛица.Представление, 3, ТекстФИО, ДанныеФизЛица.Пол) Тогда
				ТекстФИО = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, ТекстФИО);
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапки.Выдать) Тогда
		
		ШаблонНаименования = НСтр("ru = 'Выдать: %1%2Основание: %3'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Выдать, " ", СтруктураШапки.Основание);
	Иначе
		
		ШаблонНаименования = НСтр("ru = 'Основание: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Основание);
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидОперации, ДокументОснование");
	
	ТекстЗапроса = ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц);
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
		ИЛИ РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ТекстЗапроса = ТекстЗапроса 
			+ ТекстЗапросаДанныеРасшифровкаПлатежаПоступленияПоСчету(ИменаТаблиц)
			+ Документы.ПоступлениеТоваровУслуг.ТекстЗапросаПоступившаяНоменклатура(ИменаТаблиц)
			+ Документы.ПоступлениеТоваровУслуг.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	ИначеЕсли ТипЗнч(РеквизитыДокумента.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ТекстЗапроса = ТекстЗапроса 
			+ ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц) 
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчету(ИменаТаблиц)
			+ Документы.СчетНаОплатуПокупателю.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	Иначе
		ТекстЗапроса = ТекстЗапроса 
			+ ТекстЗапросаДанныеРасшифровкаПлатежаВозвратОтПокупателя(ИменаТаблиц) 
			+ Документы.ВозвратТоваровОтПокупателя.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	КонецЕсли; 
		
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки)
	
	Если ДанныеОбъекта.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСБюджетом.ПроверитьАктуальностьПолучателя(ДанныеОбъекта, РезультатПроверки);
	
КонецПроцедуры

Процедура ПроверитьАктуальностьНалога(ДанныеОбъекта, РезультатПроверки)
	
	Если ДанныеОбъекта.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСБюджетом.ПроверитьАктуальностьНалога(ДанныеОбъекта, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Если Параметры.Свойство("ПериодПомощника") Тогда // свойство передается из обработки ПомощникРасчетаНалогаУСН
			// Форма используется только для упрощенного ввода из помощника платежей на уплату страховых взносов
			ВыбраннаяФорма = "ФормаДокументаОднострочнаяИнтеграцияСБанком";
		Иначе
			ВыбраннаяФорма = "ФормаДокументаОднострочная";
		КонецЕсли;
	ИначеЕсли Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	Иначе
		ВыбраннаяФорма = "ФормаДокументаОднострочная";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, ИмяИсходного, ИмяРеквизита = "", ИмяИсточника = "", ИсходныеДанныеПереданы)
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		ИмяИсточника = ИмяРеквизита;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если ИсходныеДанныеЗаполнения.Свойство(ИмяИсходного) И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения[ИмяИсходного]) Тогда
		Если ИсходныеДанныеПереданы
			ИЛИ (НЕ РеквизитыОбъекта.Свойство(ИмяРеквизита) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОбъекта[ИмяРеквизита]))
			И (НЕ ИсточникДанных.Свойство(ИмяИсточника) ИЛИ НЕ ЗначениеЗаполнено(ИсточникДанных[ИмяИсточника])) Тогда
			РеквизитыОбъекта.Вставить(ИмяРеквизита, ИсходныеДанныеЗаполнения[ИмяИсходного]);
			РеквизитОбъектЗаполненИсходнымиДанными = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

Процедура ЗаполнитьПоПКО(ДокументВыбора, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Объект.ДокументОснование = ДокументВыбора;
	
	ДанныеОснованияКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВыбора, "Контрагент");
	
	Объект.Контрагент  = ДанныеОснованияКонтрагент;
	
	СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(ДокументВыбора);
	
	Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
		Объект.НомерЧекаНПД = СведенияОЧекеНПД.НомерЧека;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого СтрокаОснование Из ДокументВыбора.РасшифровкаПлатежа Цикл
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
		СтрокаПлатеж.КурсВзаиморасчетов      = 1;
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу".
		Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
			СтрокаПлатеж.Сделка = ДокументВыбора;
		Иначе
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
		
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
		
		СтрокаПлатеж.СуммаНДС = 0;
	
	КонецЦикла;
		
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

Функция ПолучитьДанныеВыбораИзРегистраСведенийНПД(СтрокаПоиска, Организация) Экспорт

	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	ЧекиНПД.НомерЧека КАК НомерЧека,
		|	ЧекиНПД.Состояние КАК Состояние,
		|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
		|	ЧекиНПД.ДокументОснование.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
		|ГДЕ
		|	ЧекиНПД.НомерЧека ПОДОБНО &ТекстСтроки
		|	И ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
		|	И ЧекиНПД.ДокументОснование ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|	И ЧекиНПД.Организация = &Организация
		|	И НЕ ЧекиНПД.ПроизведенВозвратПоЧеку";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЧекиНПД.НомерЧека КАК НомерЧека,
		|	ЧекиНПД.Состояние КАК Состояние,
		|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
		|	ЧекиНПД.ДокументОснование.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
		|ГДЕ
		|	ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
		|	И ЧекиНПД.ДокументОснование ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|	И ЧекиНПД.Организация = &Организация
		|	И НЕ ЧекиНПД.ПроизведенВозвратПоЧеку";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекстСтроки", СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ШрифтВыделения = Новый Шрифт(,,Истина);
	ЦветВыделения  = ЦветаСтиля.ЦветУспешногоПоиска;
	
	СписокВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ШаблонСтроки = НСтр("ru='%1 от %2 на сумму %3'");
		СтрокаПредставление = СтрШаблон(ШаблонСтроки, Выборка.НомерЧека,
			Формат(Выборка.ДатаЧека, "ДФ=dd.MM.yyyy"), Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
	
		// Для каждой строки результата формируем представление, аналогично платформенному.
		ПредставлениеСтроки = Новый Массив;
		ИсходнаяСтрока = СокрЛП(СтрокаПредставление);
		ВыделяемаяЧасть = СтрокаПоиска;
		
		// Находим и выделяем цветом часть строки, которая была введена пользователем.
		Поз = СтрНайти(ВРег(ИсходнаяСтрока), ВРег(СтрокаПоиска),, 1);
		ВыделяемаяПодстрока = Сред(ИсходнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
		ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
		
		// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
		Если Поз = 1 Тогда
			// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
		ИначеЕсли Поз = СтрДлина(ИсходнаяСтрока) Тогда
			// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, Поз-1)));
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		КонецЕсли;
	
		СписокВыбора.Добавить(Выборка.НомерЧека, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

#Область ПроверкаЗаполнения

Процедура ОбработкаПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		Объект,
		ФормаРасшифровкаПлатежа,
		Отказ,
		ПроверяемыеРеквизиты);
		
	// Вывод сообщений проверки.
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа,
		ФормаРасшифровкаПлатежа);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты, ПроверятьСчетаУчета = Истина) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперации           = Объект.ВидОперации;
	РасшифровкаПлатежа    = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаРасшифровкаПлатежа, "РасшифровкаПлатежа");
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице   = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа, ИспользоватьТабличныеФормыБанковскихДокументов);
	
	// Отключаем стандартную проверку реквизитов ТЧ РасшифровкаПлатежа,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "РасшифровкаПлатежа") = 1 Тогда

			Если НЕ ПроверятьСчетаУчета Тогда
				Если СтрНайти(Реквизит, "СчетУчетаРасчетовСКонтрагентом") > 0
					ИЛИ СтрНайти(Реквизит, "СчетУчетаРасчетовПоАвансам") > 0 Тогда
					// Счета проверять будем не в этой процедуре, поэтому их не исключаем из проверяемых реквизитов.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		ЕстьРасчетыСПоставщикамиПокупателями = (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю)
			И НЕ Объект.БезЗакрывающихДокументов;
		ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
			И НЕ Объект.БезЗакрывающихДокументов 
			И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю;
		
		СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
		
		ПредыдущийПатент = Неопределено;
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			// ДоговорКонтрагента
			Если ВестиУчетПоДоговорам И Не ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) И СтрокаПлатежа.СуммаПлатежа > 0 Тогда
				
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ДоговорКонтрагента";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				
			КонецЕсли;
			
			// СпособПогашенияЗадолженности И Сделка
			Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СпособПогашенияЗадолженности) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СпособПогашенияЗадолженности";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
					
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.Сделка";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
					
				КонецЕсли;
				
			КонецЕсли;
		
			// СуммаПлатежа
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаПлатежа) Тогда
				// Проверку суммы платежа не в таблице не осуществляем,
				// т.к. в этом случае она совпадает с реквизитом шапки СуммаДокумента,
				// и будет проверяться он.
				Если ЭтоПроверкаВТаблице Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаПлатежа";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			// КурсВзаиморасчетов
			Если Не ЗначениеЗаполнено(СтрокаПлатежа.КурсВзаиморасчетов) И ВестиУчетПоДоговорам Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.КурсВзаиморасчетов";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			КонецЕсли;

			
			// Сумма взаиморасчетов
			Если ВестиУчетПоДоговорам И Не ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента)
				И СтрокаПлатежа.СуммаПлатежа > 0
				И СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
				
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаВзаиморасчетов";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				
			КонецЕсли;
			
			// Вид платежа по кредитам и займам 
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ВидПлатежаПоКредитамЗаймам) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Счета учета в строках проверяем с помощью общего механизма для всех счетов.
		Если ПроверятьСчетаУчета 
			И НЕ Объект.БезЗакрывающихДокументов Тогда
			ПроверяемыеРеквизитыРасшифровкаПлатежа = Новый Массив;
			Если ВидОперации <> Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
				ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Общие механизмы проверки счетов учета обращаются к табличной части внутри самого объекта.
				Объект.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
			КонецЕсли;
			
			СчетаУчетаВДокументах.ПроверитьЗаполнение(Объект, Отказ, ПроверяемыеРеквизитыРасшифровкаПлатежа,, СообщенияПроверки, Ложь);
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Более табличная часть внутри Объекта не требуется.
				Объект.Удалить("РасшифровкаПлатежа");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;

КонецФункции

Процедура ОбработкаПроверкиЗаполненияВыплатаЗаработнойПлаты(Объект, ФормаВыплатаЗаработнойПлаты = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияВыплатаЗаработнойПлаты(
		Объект,
		ФормаВыплатаЗаработнойПлаты,
		Отказ,
		ПроверяемыеРеквизиты);
	
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.ВыплатаЗаработнойПлаты,
		ФормаВыплатаЗаработнойПлаты);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияВыплатаЗаработнойПлаты(Объект, ФормаВыплатаЗаработнойПлаты = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперации         = Объект.ВидОперации;
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаВыплатаЗаработнойПлаты, ИспользоватьТабличныеФормыБанковскихДокументов);
	ВыплатаЗаработнойПлаты = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаВыплатаЗаработнойПлаты, "ВыплатаЗаработнойПлаты");
	
	Если ФормаВыплатаЗаработнойПлаты <> Неопределено Тогда
		РучнаяКорректировка = Ложь;
	Иначе
		РучнаяКорректировка = Объект.РучнаяКорректировка;
	КонецЕсли;
	
	// Отключаем стандартную проверку реквизитов ТЧ ВыплатаЗаработнойПлаты, 
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "ВыплатаЗаработнойПлаты") = 1 Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате();
		
		// Табличная часть ВыплатаЗаработнойПлаты используется, если учет зарплаты
		// ведется в Бухгалтерии Предприятия или на 70-м счете задействовано субконто "Работники".
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			
			ВыплатаЗаработнойПлатыЗаполнена = Ложь;
			Для Каждого СтрокаПлатежа Из ВыплатаЗаработнойПлаты Цикл
				// Ведомость
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Ведомость) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "ВыплатаЗаработнойПлаты.Ведомость";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// СуммаПлатежа
				Если ЭтоПроверкаВТаблице
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаКВыплате) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "ВыплатаЗаработнойПлаты.СуммаКВыплате";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				ВыплатаЗаработнойПлатыЗаполнена = Истина;
			КонецЦикла;
			
			Если НЕ ВыплатаЗаработнойПлатыЗаполнена Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "ВыплатаЗаработнойПлаты.Ведомость";
				Сообщение.НомерСтроки        = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияВыплатаДепонентов(Объект, ФормаВыплатаДепонентов = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияВыплатаДепонентов(
		Объект,
		ФормаВыплатаДепонентов,
		Отказ,
		ПроверяемыеРеквизиты);
	
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.ВыплатаДепонентов,
		ФормаВыплатаДепонентов);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияВыплатаДепонентов(Объект, ФормаВыплатаДепонентов = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВыплатаДепонентов = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаВыплатаДепонентов, "ВыплатаДепонентов");
	
	// Отключаем стандартную проверку реквизитов ТЧ ВыплатаДепонентов,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "ВыплатаДепонентов") = 1 Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Процедура СообщитьРезультатПроверки(Объект, Отказ, СообщенияПроверки, МетаданныеТабличнойЧасти, ФормаСТаблицей = Неопределено) Экспорт
	
	Если СообщенияПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Для сохранения порядка сортировки пронумеруем строки.
	СообщенияПроверки.Колонки.Добавить("НомерППДляСортировки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НомерПП = 1;
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		СтрокаСообщения.НомерППДляСортировки = НомерПП;
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	СообщенияПроверки.Сортировать("НомерСтроки, НомерППДляСортировки");

	КэшСинонимовРеквизитов = Новый Соответствие;
	
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов);
	
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		ИмяРеквизитаДетально = ОбщегоНазначенияБПКлиентСервер.РазложитьПолноеИмяРеквизита(СтрокаСообщения.ПолноеИмяРеквизита);
		СинонимРеквизита     = КэшСинонимовРеквизитов[ИмяРеквизитаДетально.Реквизит];
		Если СинонимРеквизита = Неопределено Тогда
			Если ИмяРеквизитаДетально.Реквизит = "ПолеОтражениеАванса" Тогда
				СинонимРеквизита = НСтр("ru = 'Поле отражения аванса'");
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			Иначе
				СинонимРеквизита = МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяРеквизитаДетально.Реквизит).Синоним;
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПроверкаВТаблице Тогда
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					"%2",
					МетаданныеТабличнойЧасти.Синоним,
					СтрокаСообщения.Ошибка);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщенияКолонка, СинонимРеквизита, СтрокаСообщения.НомерСтроки);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Если ИспользоватьТабличныеФормыБанковскихДокументов Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			ИначеЕсли ФормаСТаблицей <> Неопределено Тогда
				// При вызове из доп. формы не указываем КлючДанных,
				// иначе при двойном щелчке по сообщению будет переход в основную форму документа.
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "", Отказ);
			Иначе
				// При проверке в таблице в момент вызова из основной формы документа
				// сообщение показываем возле гиперссылки.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НадписьСуммаДокумента",, Отказ);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					СтрокаСообщения.Ошибка);
				
				// Сообщения показываем возле полей ввода на основной форме,
				// связанных с первой строкой табличной части.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщенияПоле, СинонимРеквизита);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Поле = СтрЗаменить(СтрокаСообщения.ПолноеИмяРеквизита, ".", "");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ТабличнаяЧасть = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "ВыплатаЗаработнойПлаты");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ТабличнаяЧасть = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "ВыплатаДепонентов");
	Иначе
		ТабличнаяЧасть = РасходныйКассовыйОрдерФормыКлиентСервер.ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "РасшифровкаПлатежа");
	КонецЕсли;
	
	Если ФормаСТаблицей <> Неопределено Тогда
		Результат = Истина;
	Иначе
		// Если в табличной части 1 строка, то сообщение о проверках ее полей
		// выводятся как для полей ввода на основной форме документа.
		Результат = ИспользоватьТабличныеФормыБанковскихДокументов ИЛИ ТабличнаяЧасть.Количество() > 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Приложение КАК Приложение,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратЗайма)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратКредита)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоКредитамИЗаймам,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратЗайма)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратКредита)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратКредитаЗайма,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВыплатаЗарплаты,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРублях,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	Реквизиты.НачислениеДивидендов КАК НачислениеДивидендов,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.Основание КАК Содержание
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам,
	|	Реквизиты.ВозвратКредитаЗайма КАК ВозвратКредитаЗайма,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ЭтоВыплатаЗарплаты КАК ЭтоВыплатаЗарплаты,
	|	Реквизиты.Приложение КАК Приложение,
	|	Реквизиты.ДокументВРублях КАК ДокументВРублях,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.Содержание КАК Содержание,
	|	&ЭтоОтложенноеПроведение КАК ЭтоОтложенноеПроведение
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ДокументВРублях Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",          ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение", 			ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", 	ДоговорДляОтложенногоПроведения);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ", ПлательщикНДФЛ);
	
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                 ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",  УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(
		Реквизиты.Организация, Реквизиты.Дата));
	Если Реквизиты.БезЗакрывающихДокументов Тогда
		Запрос.УстановитьПараметр("ОсновнойСчетУчетаЗатрат", УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(
			Реквизиты.Организация, Реквизиты.Дата));
		Запрос.УстановитьПараметр("ОсновнаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ОсновнаяСтатьяЗатрат());
		Запрос.УстановитьПараметр("ОсновноеПодразделение", 
			БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации"));
		Запрос.УстановитьПараметр("ПрочиеВнереализационныеДоходыРасходы",
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("БезНомера", НСтр("ru = 'б/н'"));
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,         ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыплатаДепонентов(НомераТаблиц,        ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееСписание(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыплатаЗарплаты(НомераТаблиц,          ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц,         ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц,     ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,             ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаПоДоговорамПодряда(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыплатаДивидендов(НомераТаблиц,        ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если Реквизиты.ЭтоВыплатаЗарплаты Тогда
		
		Ведомости = Новый Массив;
		ТаблицыОплатыТруда = ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка);
		Если ТаблицыОплатыТруда <> Неопределено Тогда
			ПараметрыПроведения.Вставить("ВыплатаЗарплаты", ТаблицыОплатыТруда);
		КонецЕсли;
		
	Иначе
		Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	КонецЕсли;
	
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Реквизиты.НомерВходящегоДокумента = """"
	|			ТОГДА &БезНомера
	|		ИНАЧЕ Реквизиты.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	Реквизиты.Дата КАК ДатаВходящегоДокумента,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам,
	|	Реквизиты.ВозвратКредитаЗайма КАК ВозвратКредитаЗайма,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ЭтоВыплатаЗарплаты КАК ЭтоВыплатаЗарплаты,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	Реквизиты.СчетКасса КАК СчетУчетаДенежныхСредств,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	Реквизиты.Приложение КАК Приложение,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(Реквизиты.Содержание КАК СТРОКА(150)) КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	// в данных видах операций табличная часть Расшифровка платежа не используется
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда 
		
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	&СчетКасса КАК РеквизитыСчетКасса,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Погашение задолженности выполняется для операций:
	// - ОплатаПоставщику (в режиме БезЗакрывающихДокументов = Ложь)
	// - ВозвратПокупателю (в режиме БезЗакрывающихДокументов = Ложь)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Содержание КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Содержание КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Прочее списание выполняется для операций:
	// - ОплатаПоставщику (в режиме БезЗакрывающихДокументов = Истина)
	// - ВозвратПокупателю (в режиме БезЗакрывающихДокументов = Истина)
	// - ПрочийРасход
	// - ЛичныеСредстваПредпринимателя
	// - Инкассация
	// - УплатаНалога
	// - РасчетыПоКредитамИЗаймам
	// - ВыдачаПодотчетномуЛицу
	// - ВзносНаличнымиВБанк
	// - ВыдачаЗаймаРаботнику
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		И Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	&ОсновнойСчетУчетаЗатрат КАК СчетДт,
		|	&ОсновнаяСтатьяЗатрат КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	&ОсновноеПодразделение КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		И Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы) КАК СчетДт,
		|	&ПрочиеВнереализационныеДоходыРасходы КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	&ОсновноеПодразделение КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	ИСТИНА КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	ИСТИНА КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйАгентНДС.НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
		|	НалоговыйАгентНДС.Контрагент,
		|	НалоговыйАгентНДС.Договор,
		|	НалоговыйАгентНДС.ДокументРасчетов,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
		|	Реквизиты.ПодразделениеДт,
		|	Реквизиты.СчетКасса,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеОрганизации,
		|	НалоговыйАгентНДС.Сумма,
		|	НалоговыйАгентНДС.Сумма,
		|	Реквизиты.НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.НалоговыйАгентНДС КАК НалоговыйАгентНДС
		|		ПО Реквизиты.Ссылка = НалоговыйАгентНДС.Ссылка
		|ГДЕ
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидСубконтоДт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
		|	КОНЕЦ КАК СчетДт,
		|	Реквизиты.Контрагент КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СчетОрганизации КАК СубконтоДт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета) КАК ВидСубконтоДт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств) КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	НЕ &ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
		|	КОНЕЦ,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеОрганизации,
		|	Реквизиты.СчетКасса,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеОрганизации,
		|	Реквизиты.СуммаДокумента,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)),
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	&ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетДт,
		|	Реквизиты.Контрагент КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыплатаДепонентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ПараметрыПроведения.Вставить("ВыплатаДепонентов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") 
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ведомость,
		|	Реквизиты.Контрагент КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетКасса КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	Иначе
		
		НомераТаблиц.Вставить("ВТ_Документ", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_Ведомости", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Контрагент КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетКасса КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Документ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВыплатаДепонентов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВыплатаДепонентов.Ведомость КАК Ведомость,
		|	Реквизиты.Контрагент КАК ФизическоеЛицо,
		|	ТаблицаВыплатаДепонентов.СуммаКВыплате КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТ_Ведомости
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК ТаблицаВыплатаДепонентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаВыплатаДепонентов.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаВыплатаДепонентов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Ведомости.НомерСтроки, 1) КАК НомерСтроки,
		|	ВТ_Документ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТ_Ведомости.Ведомость, НЕОПРЕДЕЛЕНО) КАК Ведомость,
		|	ВТ_Документ.БанковскийСчет КАК БанковскийСчет,
		|	ВТ_Документ.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВТ_Документ.СчетУчета КАК СчетУчета,
		|	ВТ_Документ.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ВТ_Ведомости.СуммаКВыплате, ВТ_Документ.СуммаКВыплате) КАК СуммаКВыплате
		|ИЗ
		|	ВТ_Документ КАК ВТ_Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ведомости КАК ВТ_Ведомости
		|		ПО ВТ_Документ.ФизическоеЛицо = ВТ_Ведомости.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВыплатаДепонентов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыплатаЗарплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Не Реквизиты.ЭтоВыплатаЗарплаты Или Не УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		ПараметрыПроведения.Вставить("ВыплатаЗарплаты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК ФизическоеЛицо,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	Реквизиты.СчетКасса КАК СчетУчета,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаКомпенсации,
	|	Реквизиты.СубконтоДт1 КАК СубконтоУчетаКомпенсации1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоУчетаКомпенсации2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоУчетаКомпенсации3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеУчетаКомпенсации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ВыплатаЗарплаты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаПоДоговорамПодряда(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ПараметрыПроведения.Вставить("ОплатаПоДоговорамПодряда", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК ФизическоеЛицо,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	Реквизиты.СчетКасса КАК СчетУчета,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ОплатаПоДоговорамПодряда", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	Реквизиты.ВидОперации КАК ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Если НЕ ПараметрыПроведения.ПлательщикНДФЛ ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК НДС,
	|	0 КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ПараметрыПроведения.Вставить("ПеречислениеНалогаИПТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПеречислениеНалогаИПТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ПроверятьСоответствиеСуммыДокументаИВедомости = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ УчетЗарплатыИКадровВоВнешнейПрограмме И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		
	Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПроведения.Вставить("ВыплатаЗарплатыПроведение", ПараметрыПроведения.ВыплатаЗарплаты);
		ПараметрыПроведения.Вставить("ВыплатаЗарплаты", Неопределено);
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура("СтатьяДвиженияДенежныхСредств,
		|Подразделение, СчетУчета, СчетУчетаКомпенсации,
		|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации, ВидОперации,
		|ФизическоеЛицо, ПлатежнаяВедомость");
	
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, ПараметрыПроведения.ВыплатаЗарплатыПроведение[0]);
	Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ДанныеДокумента.ПлатежнаяВедомость);
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(
			ДокументСсылка, Ведомости, ДанныеДокумента.ФизическоеЛицо, Неопределено);
		
	Иначе
		
		Ведомости = ДокументСсылка.ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(ДокументСсылка, Ведомости,, Ложь);
		
	КонецЕсли;
	
	УчетЗарплаты.ПодготовитьТаблицуВыплатыЗарплаты(ТаблицаВедомостей);
	
	Если ТаблицаВедомостей.Количество() > 0 Тогда
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.Подразделение,                 "Подразделение");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СтатьяДвиженияДенежныхСредств, "СтатьяДвиженияДенежныхСредств");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчета,                     "СчетУчета");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчетаКомпенсации,          "СчетУчетаКомпенсации");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации1,     "СубконтоУчетаКомпенсации1");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации2,     "СубконтоУчетаКомпенсации2");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации3,     "СубконтоУчетаКомпенсации3");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.ПодразделениеУчетаКомпенсации, "ПодразделениеУчетаКомпенсации");
	КонецЕсли;
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция ТекстСодержанияПроводокДокумента(Реквизиты)
	
	Содержание = Реквизиты.Содержание + ?(ПустаяСтрока(Реквизиты.Приложение), "", ", " + Реквизиты.Приложение);
	
	Если (Реквизиты.РасчетыПоРеализации ИЛИ Реквизиты.ВозвратКредитаЗайма) И ПустаяСтрока(Содержание) Тогда
		Содержание = ?(Реквизиты.ЭтоВозврат, "Возврат денежных средств", "");
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКо.ОплатаПоставщику
		И НЕ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#Область ОтложенноеПроведение

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Дата) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	Если (Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю)
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Дата
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	Иначе
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры, 
		ПараметрыПроведения.РасшифровкаПлатежа,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов",	ТаблицаВзаиморасчетов);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(
		Параметры,
		СтруктураТаблицУСН);

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиОбновления

// Внешний интерфейс обновления ИБ

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|		РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|		""ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО РасходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|				И РасходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И РасходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		РасходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|		И РасходныйКассовыйОрдер.Дата >= &ГраницаАктуальногоПериода
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьРасходыУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
	|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.РасходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасходныйКассовыйОрдер.Ссылка,
	|		РасходныйКассовыйОрдер.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеСписания""
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО РасходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|				И РасходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И РасходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПрочийРасход)
	|		И РасходныйКассовыйОрдер.Дата >= &ГраницаАктуальногоПериода
	|		И РасходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы" Тогда
				ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьРасходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеСписания" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу);
			КонецЕсли; 
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать выдачу наличных: %1 по причине:
					|%2'"),
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйКассовыйОрдер, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО РасходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|			И РасходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И РасходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	РасходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
				|не удалось обработать некоторые документы Выдача наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РасходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
					|обработала очередную порцию документов Выдача наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.РасходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые документы Выдача наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РасходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию документов Выдача наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО РасходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|			И РасходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И РасходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПрочийРасход)
	|	И РасходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
				|не удалось обработать некоторые документы Выдача наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РасходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
					|обработала очередную порцию документов Выдача наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Служебные обработчики обновления ИБ

// Для списаний денежных средств, оформленных по организациям, применяющим УСН с объектом налогообложения "Доходы",
// в которых настройка УСН отредактирована пользователем вручную, устанавливается признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта
		ДокументОбъект.РучнаяКорректировка = Истина;
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новые реквизиты "РасходыУСН" и "НДСУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
//
Процедура ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа7_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("РасходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		
		МассивРаспределенныхРасходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа7_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхРасходов <> Неопределено Тогда
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхРасходов, "РасходыУСН");
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.РаспределятьРасходыУСН = ДокументОбъект.РасходыЕНВД_УСН;
		КонецЦикла; 
		
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			Если ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0
				ИЛИ ДокументОбъект.НДС_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих списаний, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только расходы УСН, НДС по расходами и признак распределения расходов - ручная настройка УСН сбрасывается;
//    для остальных случаев - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.РучнаяКорректировка
			И (ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН) Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			// Иначе: если заданы только расходы УСН (Графа 7, НДС, распределение расходов) - признак ручной корректировки не изменяем
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новый реквизиты "Налог"
//
Процедура ЗаполнитьРеквизитНалог() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом,
	|	РасходныйКассовыйОрдер.СубконтоДт1,
	|	РасходныйКассовыйОрдер.СубконтоДт2,
	|	РасходныйКассовыйОрдер.СубконтоДт3
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Налог = ЗНАЧЕНИЕ(Справочник.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка)";
	
	НалогПоКБК = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ПустаяСтрока(Объект.КодБК) Тогда
			Налог = НалогПоКБК[Объект.КодБК];
			Если Налог = Неопределено Тогда
				Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Объект.КодБК);
				НалогПоКБК.Вставить(Объект.КодБК, Налог);
			КонецЕсли;
			Если Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Объект.Организация) Тогда
				Объект.Налог = Налог;
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(Объект.Налог) Или Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы)
			И ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			// Попытаемся подобрать налог по счету учета и аналитике
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
				Выборка.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
			УровеньБюджета = ?(НомерСубконто <> 0, Выборка["СубконтоДт" + НомерСубконто], Неопределено);
			
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(Выборка.СчетУчетаРасчетовСКонтрагентом, Выборка.Организация, Выборка.Дата, УровеньБюджета);
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
			
			Если Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Объект.Организация) Тогда
				Объект.Налог = Налог;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКредитыИЗаймы(Параметры) Экспорт
	
	СчетаРасчетовПоВыданнымЗаймам = Новый Массив();
	СчетаРасчетовПоВыданнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	
	СчетаРасчетовПоПолученнымЗаймам = Новый Массив();
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
	
	СчетаРасчетовПоПолученнымКредитам = Новый Массив();
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыданныеЗаймы", 		СчетаРасчетовПоВыданнымЗаймам); 
	Запрос.УстановитьПараметр("ПолученныеЗаймы", 	СчетаРасчетовПоПолученнымЗаймам);
	Запрос.УстановитьПараметр("ПолученныеКредиты", 	СчетаРасчетовПоПолученнымКредитам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК РасходныйКассовыйОрдер,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперации,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперацииМинимум
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.РасходныйКассовыйОрдер) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.РасходныйКассовыйОрдер.ПолучитьОбъект();
			
			Если Выборка.КодВидаОперации <> Выборка.КодВидаОперацииМинимум 
				ИЛИ Выборка.КодВидаОперации = 0 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма;
				Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;					
				КонецЦикла;
			ИначеЕсли Выборка.КодВидаОперации = 1 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту;
			ИначеЕсли Выборка.КодВидаОперации = 2 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма;
				Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал Тогда
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					Иначе
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					КонецЕсли;		
				КонецЦикла;
			ИначеЕсли Выборка.КодВидаОперации = 3 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
				Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал Тогда
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					Иначе
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось опеределить вид расчетов по кредитам и займам в Выдача наличных ""%1"" по причине:
				|%2'"), 
				Выборка.РасходныйКассовыйОрдер,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.РасходныйКассовыйОрдер, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре РасходныйКассовыйОрдер.ОбработатьКредитыИЗаймы
				|не удалось опеределить вид расчетов по кредитам и займам в %1 документах Выдача наличных.'"), 
				ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура РасходныйКассовыйОрдер.ОбработатьКредитыИЗаймы
				|обработала очередную порцию документов Выдача наличных: %1 элементов'"), 
				ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет новый реквизит "ВидНалоговогоОбязательства"
//
Процедура ЗаполнитьРеквизитВидНалоговогоОбязательства() Экспорт
	
	НачалоДействияПриказа90н = ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н();
	
	ФиксированныеВзносыПФР = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Период,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.Налог.ВидНалога КАК ВидНалога
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Период >= НачалоДействияПриказа90н
			И Выборка.ВидНалога = ФиксированныеВзносыПФР Тогда
			// Уточняем вид обязательства по взносам в соответствии с Приказом Минфина №90н от 08.06.2015
			Объект.ВидНалоговогоОбязательства =
				Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(Выборка.КБК, Выборка.Период, Выборка.ВидНалога);
			
			Если Объект.ВидНалоговогоОбязательства <> ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект) Тогда
				ВидНалоговогоОбязательстваПриИзменении(Объект);
			КонецЕсли;
		Иначе
			Объект.ВидНалоговогоОбязательства = ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаУдаленный", ПланыСчетов.Хозрасчетный.УдалитьПФР_ОПС_ИП);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом = &СчетУчетаУдаленный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПланыСчетов.Хозрасчетный.ЗаменитьСчетПФР_ОПС_ИПвДокументе(Объект, "СчетУчетаРасчетовСКонтрагентом", "СубконтоДт");
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьПериодНалоговыхПлатежейУСН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыНалоговУСН", ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаПлатежа,
	|	РасходныйКассовыйОрдер.ПоказательПериода КАК ПоказательПериода,
	|	РасходныйКассовыйОрдер.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО РасходныйКассовыйОрдер.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалоговУСН)"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Выборка.ПоказательПериода);
		
		КорректныйНалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
			ОписаниеПериода,
			Выборка.ДатаПлатежа,
			Выборка.Организация);
		
		Если Выборка.НалоговыйПериод <> КорректныйНалоговыйПериод Тогда
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НалоговыйПериод = КорректныйНалоговыйПериод;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер (КО-2)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РКО";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер (КО-2)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 1;
	КомандаПечати.ФункциональныеОпции = "ИспользуетсяКассоваяКнига";
	
	// Квитанция на оплату ПД-4сб (налог)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор       = "ПД4сбНалог";
	КомандаПечати.Представление       = НСтр("ru = 'Квитанция на оплату ПД-4сб (налог)'");
	КомандаПечати.Обработчик          = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок             = 2;
	КомандаПечати.ФункциональныеОпции = "ВестиУчетИндивидуальногоПредпринимателя";
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Выдача наличных""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка,Обработка.ПеренумерацияДокументов.Форма.Форма,Форма";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет(Шапка)
	
	ВалютаРеглУчета   = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КодыСчетов        = Новый Структура("Дебет, Кредит");
	
	// Определяем код счета кредита
	КассаВВалюте      = Шапка.Валюта <> ВалютаРеглУчета;
	СчетКт            = Шапка.СчетКассаКод;
	КодыСчетов.Кредит = СчетКт;
	
	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда).Код;
		
		Если ЗначениеЗаполнено(Шапка.СчетУчетаРасчетовСКонтрагентомКод) Тогда
			
			ВыплачиватьКомпенсацию = ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(
				Шапка.Ссылка,
				Шапка.ВидОперации,
				Шапка.Организация,
				Шапка.ВыплатаЗаработнойПлаты.Выгрузить(),
				Шапка.ПлатежнаяВедомость,
				Шапка.Контрагент);
			
			Если ВыплачиватьКомпенсацию Тогда
				СтрокаДебет = СтрокаДебет + ", " + Шапка.СчетУчетаРасчетовСКонтрагентомКод;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам).Код;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами).Код;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		
		Если КассаВВалюте Тогда
			СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал).Код;
		Иначе
			СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами).Код;
		КонецЕсли;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		СтрокаДебет = Шапка.СчетУчетаРасчетовСКонтрагентомКод;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		СтрокаДебет = Шапка.СчетУчетаРасчетовСКонтрагентомКод;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам).Код;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению).Код;
		
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		
		СтрокаДебет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов).Код;
		
	Иначе
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(Шапка.ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Шапка.ВидОперации);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ТабСчет = Шапка.РасшифровкаПлатежа.Выгрузить();
			
			ТабСчет.Свернуть(
				"СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомКод, РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамКод",
				"СуммаПлатежа");
			
			СтрокаДебет = "";
			
			Для каждого Строка Из ТабСчет Цикл
				Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая()
					И СтрНайти(СтрокаДебет, Строка.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомКод) = 0 Тогда
					СтрокаДебет = СтрокаДебет + ", " + Строка.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомКод;
				КонецЕсли;
				
				Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая()
					И СтрНайти(СтрокаДебет, Строка.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамКод) = 0 Тогда
					СтрокаДебет = СтрокаДебет + ", " + Строка.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамКод;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаДебет = Сред(СтрокаДебет, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	КодыСчетов.Дебет = СтрокаДебет;
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет

// Функция формирует табличный документ с печатной формой РКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьРКО(МассивОбъектов, ОбъектыПечати)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаПечатьРКО();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КО2");
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(Шапка.ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Шапка.ВидОперации);
		СведенияОбОрганизации     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		Валютный                  = Шапка.Валюта <> ВалютаРеглУчета;
		
		// Выводим шапку
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Сумма = Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2") + ?(Валютный, " " + СокрЛП(Шапка.Валюта), "");
		
		СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
		СуммаПрописьюПродолжение = "";
		Если СтрДлина(СуммаПрописью) > 92 Тогда
			н = 92;
			Пока н > 0 И Сред(СуммаПрописью, н, 1) <> " " Цикл
				н = н-1;
			КонецЦикла;
			
			СуммаПрописьюПродолжение = Сред(СуммаПрописью, н + 1);
			СуммаПрописью = Лев(СуммаПрописью, н);
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаПрописью         = СуммаПрописью;
		ОбластьМакета.Параметры.СуммаПрописьюПродолжение = СуммаПрописьюПродолжение;
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента         = Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакета.Параметры.ДатаДокументаПрописью = Формат(Шапка.ДатаДокумента, "ДФ='dd MMMM yyyy ""г.""'");
		
		КодыСчетСубсчет = ОпределитьКодыСчетСубсчет(Шапка);
		
		ОбластьМакета.Параметры.ДебетСубСчет          = КодыСчетСубсчет.Дебет;
		ОбластьМакета.Параметры.КредитСубСчет         = КодыСчетСубсчет.Кредит;
		
		ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
		
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		
		ОбластьМакета.Параметры.ФИОРуководителя       = ОтветственныеЛица.РуководительПредставление;
		ОбластьМакета.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжностьПредставление;
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		ОбластьМакета.Параметры.ФИОКассира            = ОтветственныеЛица.КассирПредставление;
		
		ОбластьМакета.Параметры.Основание             = Шапка.Основание;
		ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;
		
		ОбластьМакета.Параметры.ФИОПолучателя         = Шапка.Выдать;
		ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = Шапка.ПоДокументу;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ТекстЗапросаПечатьРКО()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.СчетКасса,
	|	РасходныйКассовыйОрдер.СчетКасса.Код КАК СчетКассаКод,
	|	РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом,
	|	РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентомКод,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Контрагент.Представление КАК ФИОПолучателя,
	|	РасходныйКассовыйОрдер.ВалютаДокумента КАК Валюта,
	|	РасходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	РасходныйКассовыйОрдер.Выдать,
	|	РасходныйКассовыйОрдер.Приложение,
	|	РасходныйКассовыйОрдер.ПоДокументу,
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость,
	|	РасходныйКассовыйОрдер.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РасходныйКассовыйОрдер.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ РасходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	РасходныйКассовыйОрдер.Основание,
	|	РасходныйКассовыйОрдер.РасшифровкаПлатежа.(
	|		Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДоговорКонтрагента,
	|		КурсВзаиморасчетов,
	|		СуммаПлатежа,
	|		КратностьВзаиморасчетов,
	|		СуммаВзаиморасчетов,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		СтатьяДвиженияДенежныхСредств,
	|		СчетУчетаРасчетовСКонтрагентом,
	|		СчетУчетаРасчетовСКонтрагентом.Код КАК РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомКод,
	|		СчетУчетаРасчетовПоАвансам,
	|		СчетУчетаРасчетовПоАвансам.Код КАК РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамКод,
	|		Сделка,
	|		СпособПогашенияЗадолженности
	|	),
	|	РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты.(
	|		Ссылка,
	|		НомерСтроки,
	|		Ведомость,
	|		СуммаКВыплате
	|	)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой квитанции
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПД4(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_ПД4сбНалог";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаПечатьПД4();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПД4сбНалог");
	
	Пока Шапка.Следующий() Цикл
		
		// Проверка реквизитов обязательных для строки в УФЭБС
		
		Отказ = Ложь;
		
		Если Не ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Получатель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Шапка.Ссылка, "Контрагент", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Шапка.СчетКонтрагента) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Шапка.Ссылка, "СчетКонтрагента",, Отказ);
		КонецЕсли;
			
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОПолучателе   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, Шапка.СчетКонтрагента, Истина);
		
		НаименованияОрганизации = Справочники.Организации.НаименованияНаДату(Шапка.Организация, Шапка.ДатаДокумента);
		
		РеквизитыПлатежа = НоваяСтруктураРеквизитыПлатежаУФЭБС();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Шапка);
		
		РеквизитыПлатежа.ИННПлательщика              = СведенияОбОрганизации.ИНН;
		РеквизитыПлатежа.ТекстПолучателя             = СведенияОПолучателе.ПолноеНаименование;
		РеквизитыПлатежа.НомерСчетаПолучателя        = СведенияОПолучателе.НомерСчета;
		РеквизитыПлатежа.НаименованиеБанкаПолучателя = СведенияОПолучателе.Банк;
		РеквизитыПлатежа.БИКБанкаПолучателя          = СведенияОПолучателе.БИК;
		РеквизитыПлатежа.СчетБанкаПолучателя         = СведенияОПолучателе.КоррСчет;
		РеквизитыПлатежа.ИННПолучателя               = СведенияОПолучателе.ИНН;
		РеквизитыПлатежа.КПППолучателя               = СведенияОПолучателе.КПП;
		
		РеквизитыПлатежа.ФамилияПлательщика          = НаименованияОрганизации.ФИО.Фамилия;
		РеквизитыПлатежа.ИмяПлательщика              = НаименованияОрганизации.ФИО.Имя;
		РеквизитыПлатежа.ОтчествоПлательщика         = НаименованияОрганизации.ФИО.Отчество;
		РеквизитыПлатежа.АдресПлательщика            = СведенияОбОрганизации.ЮридическийАдрес;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Квитанция");
		ОбластьМакета.Параметры.Заполнить(РеквизитыПлатежа);
		
		// Для платежей, администрируемых налоговыми органами, требуется дополнительно указывать реквизит ИндексПлатежногоДокумента.
		// В ИндексПлатежногоДокумента указывается такое же значение, что и в УИН. Кроме случая когда УИН "не заполнен" -
		// т.к. в УИН в этом случае требуется указывать "0", а ИндексДокумента требуется оставлять не заполненным.
		Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(РеквизитыПлатежа.КодБК) Тогда
			РеквизитыПлатежа.ИндексПлатежногоДокумента = РеквизитыПлатежа.ИдентификаторНачисления;
			Если НЕ ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(РеквизитыПлатежа.ИдентификаторНачисления) Тогда
				РеквизитыПлатежа.ИндексПлатежногоДокумента = " ";
			КонецЕсли;
			РеквизитыПлатежа.Удалить("ИдентификаторНачисления");
		Иначе
			РеквизитыПлатежа.Удалить("ИндексПлатежногоДокумента");
			Если НЕ ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(РеквизитыПлатежа.ИдентификаторНачисления) Тогда
				РеквизитыПлатежа.Удалить("ИдентификаторНачисления");
			КонецЕсли;
		КонецЕсли;
		
		// Удалим необязательные реквизиты, для лучшей читаемости QR-кода.
		РеквизитыПлатежа.Удалить("ОтчествоПлательщика");
		РеквизитыПлатежа.Удалить("АдресПлательщика");
		РеквизитыПлатежа.Удалить("НазначениеПлатежа");
		
		// Параметры макета отсутствующие в УФЭБС
		СуммаРуб = Цел(РеквизитыПлатежа.СуммаЧислом);
		СуммаКоп = (РеквизитыПлатежа.СуммаЧислом - СуммаРуб) * 100;
		ОбластьМакета.Параметры.СуммаРуб = Формат(СуммаРуб, "ЧЦ=15");
		ОбластьМакета.Параметры.СуммаКоп = Формат(СуммаКоп, "ЧЦ=2; ЧН=; ЧВН=");
		
		// QR-код
		QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
		Если ПустаяСтрока(QRСтрока) Тогда
			Продолжить; // Возникли ошибки
		КонецЕсли;
		
		// Код БСП не выводит в QR-строку пустые реквизиты, но если требуется выводить ИндексПлатежногоДокумента ("docIdx"),
		// то он должен быть в QR-строке в любом случае, даже если не заполнен.
		// При этом должна соблюдаться строгая последовательность расположения этого реквизита - он должен следовать
		// после СчетБанкаПолучателя ("CorrespAcc") и до ИННПолучателя ("PayerINN").
		// CorrespAcc - обязательный реквизит, а PayerINN - нет. В списке реквизитов CorrespAcc расположен раньше.
		// Поэтому, чтобы удовлетворить условиям, вставляем docIdx сразу после CorrespAcc.
		Если РеквизитыПлатежа.Свойство("ИндексПлатежногоДокумента") Тогда
			СловаQRСтрокиИсходная  = СтрРазделить(QRСтрока, "|", Ложь);
			СловаQRСтрокиРезультат = Новый Массив;
			Для каждого СловоQRСтроки Из СловаQRСтрокиИсходная Цикл
				Если СтрНайти(СловоQRСтроки, "docIdx") = 1 Тогда
					// В автосформированной строке реквизит может располагаться на неправильной позиции.
					Продолжить;
				ИначеЕсли СтрНайти(СловоQRСтроки, "CorrespAcc") = 1 Тогда
					СловаQRСтрокиРезультат.Добавить(СловоQRСтроки);
					СловаQRСтрокиРезультат.Добавить("docIdx=" + РеквизитыПлатежа.ИндексПлатежногоДокумента);
					Продолжить;
				КонецЕсли;
				
				СловаQRСтрокиРезультат.Добавить(СловоQRСтроки);
			КонецЦикла;
			
			QRСтрока = СтрСоединить(СловаQRСтрокиРезультат, "|");
		КонецЕсли;
		
		ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190);
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			Шаблон = Нстр("ru = 'Не удалось сформировать QR-код для документа %1.
				|Технические подробности см. в журнале регистрации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Рисунки.QRКод.Картинка =  Новый Картинка(ДанныеQRКода);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция НоваяСтруктураРеквизитыПлатежаУФЭБС()
	
	// Входящие данные функци УправлениеПечатью.ФорматнаяСтрокаУФЭБС()
	
	Возврат Новый Структура(
		// Обязательные поля структуры
		"ТекстПолучателя,
		|НомерСчетаПолучателя,
		|НаименованиеБанкаПолучателя,
		|БИКБанкаПолучателя,
		|СчетБанкаПолучателя,
		|ИндексПлатежногоДокумента,
		// Дополнительные поля структуры
		|СуммаЧислом,
		|НазначениеПлатежа,
		|ИННПолучателя,
		|ИННПлательщика,
		|СтатусСоставителя,
		|КПППолучателя,
		|КодБК,
		|КодОКТМО,
		|ПоказательОснования,
		|ПоказательПериода,
		|ПоказательНомера,
		|ПоказательДаты,
		|ПоказательТипа,
		// Прочие дополнительные поля
		|ФамилияПлательщика,
		|ИмяПлательщика,
		|ОтчествоПлательщика,
		|АдресПлательщика,
		|ИдентификаторНачисления,
		|Ссылка");
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ТекстЗапросаПечатьПД4()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.СчетКонтрагента,
	|	РасходныйКассовыйОрдер.Основание КАК НазначениеПлатежа,
	|	РасходныйКассовыйОрдер.КодБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК КодОКТМО,
	|	РасходныйКассовыйОрдер.ПоказательДаты,
	|	РасходныйКассовыйОрдер.ПоказательНомера,
	|	РасходныйКассовыйОрдер.ПоказательОснования,
	|	РасходныйКассовыйОрдер.ПоказательПериода,
	|	РасходныйКассовыйОрдер.ПоказательТипа,
	|	РасходныйКассовыйОрдер.СтатусСоставителя,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдер.ИдентификаторПлатежа = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ РасходныйКассовыйОрдер.ИдентификаторПлатежа
	|	КОНЕЦ КАК ИдентификаторНачисления,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаЧислом
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета РКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РКО") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РКО", "Расходный кассовый ордер",
			ПечатьРКО(МассивОбъектов, ОбъектыПечати),, "ОбщийМакет.ПФ_MXL_КО2");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПД4сбНалог") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПД4сбНалог", "Квитанция на оплату",
			ПечатьПД4(МассивОбъектов, ОбъектыПечати),, "ОбщийМакет.ПФ_MXL_ПД4сбНалог");
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм",
			"Реестр перечисленных сумм", ПечатьРеестра(МассивОбъектов, ОбъектыПечати));
		ПараметрыВывода = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьРеестра(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.НалоговыйПериод КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(РасходныйКассовыйОрдер.СубконтоДт2, РасходныйКассовыйОрдер.Организация.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаПлатежа,
	|	РасходныйКассовыйОрдер.НомерВходящегоДокумента КАК ПлатежноеПоручениеНомер,
	|	РасходныйКассовыйОрдер.Дата КАК ПлатежноеПоручениеДата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)";
	
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(Запрос.Выполнить().Выгрузить());
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

// Обработчик обновления версии 3.0.52
// Заполняет новую табличную часть "НалоговыйАгентНДС" для документов с видом операции "Перечисление налога"
// и счетом расчетов 68.32.
Процедура ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.СубконтоДт1 КАК Контрагент,
	|	РасходныйКассовыйОрдер.СубконтоДт2 КАК Договор,
	|	РасходныйКассовыйОрдер.СубконтоДт3 КАК ДокументРасчетов,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.НалоговыйАгентНДС КАК ТаблицаНалоговыйАгентНДС
	|		ПО РасходныйКассовыйОрдер.Ссылка = ТаблицаНалоговыйАгентНДС.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И ТаблицаНалоговыйАгентНДС.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьТабличнуюЧастьНалоговыйАгентНДС(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РасходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно
				|не удалось обработать некоторые документы Выдача наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РасходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно
					|обработала очередную порцию документов Выдача наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьНалоговыйАгентНДС(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.НалоговыйАгентНДС.Количество() > 0 Тогда
			// Документ уже обработан.
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.НалоговыйАгентНДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДокументу);
		
		ДокументОбъект.СубконтоДт1 = Неопределено;
		ДокументОбъект.СубконтоДт2 = Неопределено;
		ДокументОбъект.СубконтоДт3 = Неопределено;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстЗапросаВыплатаДивидендов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		ПараметрыПроведения.Вставить("ВыплатаДивидендов", Неопределено);
		Возврат "";
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	Реквизиты.СчетКасса КАК СчетУчета,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НачислениеДивидендов КАК НачислениеДивидендов,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизическоеЛицо
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ВыплатаДивидендов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ЗаполнитьПоОтчетуОРозничныхПродажах(Объект, Основание) Экспорт
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		Возврат;
	КонецЕсли;
	
	
	Объект.ВидОперации   = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю;
	Объект.Контрагент    = Основание.Склад;
	Объект.СчетКасса     = Основание.СчетКасса;
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСтатьюДДСПоВидуОперации(Объект.ВидОперации);
	
	// Поле "Счет операционной кассы" заполняем из отчета о розничных продажах при условии, что он там был один
	СчетОперационнойКассы = Документы.ПриходныйКассовыйОрдер.СчетКассыИзОРП(Основание);
	Если ЗначениеЗаполнено(СчетОперационнойКассы) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетОперационнойКассы;
	Иначе
		РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент, Объект.Дата,
			Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаДоходовРасходов.СчетДоходовОтРеализации;
	КонецЕсли;
	
	ТаблицаПлатежей = Объект.РасшифровкаПлатежа.ВыгрузитьКолонки();
	
	ТаблицаСуммОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание, "Возвраты");
	ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
	
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		ТаблицаПлатежей.Добавить();
	КонецЕсли;
	
	// Вычитаем оплату по безналичному расчету
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК СуммаБезналичнойОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ВозвратОплаты КАК ОтчетОРозничныхПродажахОплата
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Основание
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) ЕСТЬ НЕ NULL ");
	
	Запрос.УстановитьПараметр("Основание", Основание);
	Результат = Запрос.Выполнить();
	
	СуммаБезналичнойОплаты = 0;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
	КонецЕсли;
	
	ОстатокОплаты = ТаблицаПлатежей.Итог("СуммаПлатежа");
	
	СуммаБезналичнойОплаты = Мин(СуммаБезналичнойОплаты, ОстатокОплаты);
	
	Если СуммаБезналичнойОплаты > 0 Тогда
		ОстатокБезналичнойОплаты = СуммаБезналичнойОплаты;
		Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
			БезналичнаяОплата = Окр(ОстатокБезналичнойОплаты * СтрокаПлатежа.СуммаПлатежа / ОстатокОплаты, 2);
			ОстатокБезналичнойОплаты  = ОстатокБезналичнойОплаты - БезналичнаяОплата;
			ОстатокОплаты             = ОстатокОплаты - СтрокаПлатежа.СуммаПлатежа;
			СтрокаПлатежа.СуммаПлатежа = СтрокаПлатежа.СуммаПлатежа - БезналичнаяОплата;
			ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатежа);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПлатежей.ЗаполнитьЗначения(Объект.СтатьяДвиженияДенежныхСредств, "СтатьяДвиженияДенежныхСредств");
	Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры


#Область ПечатьЧека

// Текст запроса таблиц расшировки платежа
// при возврате по документу "Возврат товаров от покупателя"
Функция ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгента");
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгентаСводно");
	ИменаТаблиц.Добавить("ВТ_РеквизитыШапки");
	ИменаТаблиц.Добавить("РеквизитыПечатиЧека");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорПлатежногоАгента,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК ПлатежныйАгент
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговораПлатежногоАгента.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент КАК ПлатежныйАгент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК КоличествоДоговоров
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгентаСводно
	|ИЗ
	|	ВТ_ДоговораПлатежногоАгента КАК ВТ_ДоговораПлатежногоАгента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДоговораПлатежногоАгента.Ссылка,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.ДокументОснование КАК ДокументОснование,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Номер КАК Номер,
	|	РасходныйКассовыйОрдер.ВидОперации КАК ВидОперации,
	|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходныйКассовыйОрдер.СтавкаНДС КАК СтавкаНДС,
	|	РасходныйКассовыйОрдер.Выдать КАК Выдать,
	|	РасходныйКассовыйОрдер.Основание КАК Основание,
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю) КАК ЭтоВозврат,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ПлатежныйАгент,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.КоличествоДоговоров, 0) > 1 КАК НесколькоДоговоровПлатежногоАгента,
	|	ВЫБОР
	|		КОГДА НЕ ПриходныйКассовыйОрдер.Патент ЕСТЬ NULL
	|			ТОГДА ПриходныйКассовыйОрдер.Патент
	|		КОГДА НЕ ВозвратТоваровОтПокупателя.Патент ЕСТЬ NULL
	|			ТОГДА ВозвратТоваровОтПокупателя.Патент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
	|	КОНЕЦ КАК Патент
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ПО РасходныйКассовыйОрдер.ДокументОснование = ПриходныйКассовыйОрдер.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО РасходныйКассовыйОрдер.ДокументОснование = ВозвратТоваровОтПокупателя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговораПлатежногоАгентаСводно КАК ВТ_ДоговораПлатежногоАгента
	|		ПО (ПриходныйКассовыйОрдер.Ссылка = ВТ_ДоговораПлатежногоАгента.Ссылка)
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеквизитыШапки.Ссылка КАК Ссылка,
	|	ВТ_РеквизитыШапки.Дата КАК Дата,
	|	ВТ_РеквизитыШапки.Номер КАК Номер,
	|	ВТ_РеквизитыШапки.Организация КАК Организация,
	|	ВТ_РеквизитыШапки.Контрагент КАК Контрагент,
	|	ИСТИНА КАК ВыводитьКонтрагентаВЧеке,
	|	ВТ_РеквизитыШапки.ВидОперации КАК ВидОперации,
	|	ВТ_РеквизитыШапки.Выдать КАК Выдать,
	|	ВТ_РеквизитыШапки.Основание КАК Основание,
	|	ВТ_РеквизитыШапки.Патент КАК Патент,
	|	ВЫБОР
	|		КОГДА ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю)
	|				ИЛИ ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
	|			ТОГДА ВТ_РеквизитыШапки.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВТ_РеквизитыШапки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные) КАК ТипОплаты,
	|	ВЫБОР ВТ_РеквизитыШапки.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчета,
	|	ВТ_РеквизитыШапки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВТ_РеквизитыШапки.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ВТ_РеквизитыШапки.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц расшифровки платежа для печати чека 
// при возврате по документу "Возврат товаров от покупателя"
Функция ТекстЗапросаДанныеРасшифровкаПлатежаВозвратОтПокупателя(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК Сделка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц расшировки платежа
// при возврате по документу "Поступление наличных" с указанным счетом покупателю
Функция ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц)
	
	ИменаТаблиц.Добавить("ВТ_СуммыВозвратаПоСтавкамНДС");
	ИменаТаблиц.Добавить("ВТ_РеализацииПоСчету");
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасходныйКассовыйОрдер.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СуммыВозвратаПоСтавкамНДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО (РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = РасходныйКассовыйОрдер.Ссылка)
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС,
	|	РасходныйКассовыйОрдер.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО РасходныйКассовыйОрдер.ДокументОснование = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату = РеализацияТоваровУслуг.СчетНаОплатуПокупателю)
	|ГДЕ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Проведен, ЛОЖЬ)
	|	И РасходныйКассовыйОрдер.Ссылка = &ДокументСсылка
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_СуммыВозвратаПоСтавкамНДС.СуммаПлатежа КАК СуммаПлатежа,
	|	ВТ_СуммыВозвратаПоСтавкамНДС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК Сделка,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	ВТ_СуммыВозвратаПоСтавкамНДС КАК ВТ_СуммыВозвратаПоСтавкамНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО ВТ_СуммыВозвратаПоСтавкамНДС.ДокументОснование = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|			И ВТ_СуммыВозвратаПоСтавкамНДС.СтавкаНДС = ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаДанныеРасшифровкаПлатежаПоступленияПоСчету(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ИменаТаблиц.Добавить("ВТ_ПоступленияПоСчету");
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваров,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)) КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_ПоступленияПоСчету
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Сделка = ПоступлениеТоваровУслуг.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

#КонецОбласти 

#КонецЕсли



