#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Производит замену строк в указанном табличном документе.
//
// Возвращаемое значение:
//  Булево – была ли произведена замена.
//
Функция НайтиИЗаменитьВДокументе(ТабДок, СтрокаПоиска, СтрокаЗамены)

	ОбластьЗамены = ТабДок.НайтиТекст(СтрокаПоиска);
	Если ОбластьЗамены = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ОбластьЗамены.Текст = СтрЗаменить(ОбластьЗамены.Текст, СтрокаПоиска, СтрокаЗамены);
	Возврат Истина;

КонецФункции // НайтиИЗаменитьВДокументе()

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация
	|ИЗ
	|	Документ.УПЖКХ_Предупреждение КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,Организация");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	// Подготовим ТЧ.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Должник,
	|	Объекты.Сумма
	|ИЗ
	|	Документ.УПЖКХ_Предупреждение.Должники КАК Объекты
	|ГДЕ
	|	Объекты.Ссылка = &Ссылка";
	
	ТаблицаДолжников = Запрос.Выполнить().Выгрузить();
	ТаблицаДолжников.Свернуть("Должник", "Сумма");
	
	ПараметрыПроведения.Вставить("ТаблицаДолжников", ТаблицаДолжников);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьПредупреждений(МассивОбъектов, ОбъектыПечати, ИмяПФ) Экспорт
	
	Попытка
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_Предупреждение.ПФ_MXL_" + ИмяПФ);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить печатную форму документа.",,,,Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПЖКХ_Предупреждение";
	
	// Подготовка данных
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекСсылка Из МассивОбъектов Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Руководители       = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ТекСсылка.Организация, ТекСсылка.Дата);
		ОтветственноеЛицо  = ПолучитьФИООтветственногоЛица(ТекСсылка);
		ТелефонОрганизации = ПолучитьТелефонОрганизации(ТекСсылка);
		
		// ПОЛУЧЕНИЕ ДАТ ВОЗНИКНОВЕНИЯ ДОЛГА
		НастройкиУчетнойПолитикиТСЖПрошлыйПериод = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ДобавитьМесяц(ТекСсылка.Дата, -1)), 
																													ТекСсылка.Организация);
		
		СтруктураДанныхДляЗапроса = Новый Структура("Организация, МинимальнаяСуммаЗадолженности, МинимальныйСрокЗадолженности, Здание");
		СтруктураДанныхДляЗапроса.Организация                   = ТекСсылка.Организация;
		СтруктураДанныхДляЗапроса.МинимальнаяСуммаЗадолженности = ТекСсылка.МинимальнаяСуммаДолга;
		СтруктураДанныхДляЗапроса.МинимальныйСрокЗадолженности  = ТекСсылка.МинимальноеКоличествоМесяцевДолга;
		СтруктураДанныхДляЗапроса.Здание                        = ТекСсылка.Здание;
		
		ТаблицаДолжников = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(ТекСсылка.Дата, ОбъектыПечати, 
																			СтруктураДанныхДляЗапроса, 
																			НастройкиУчетнойПолитикиТСЖПрошлыйПериод);
		
		Для каждого ТекСтрока ИЗ ТекСсылка.Должники Цикл
			
			ТекЗдание   = ТекСтрока.Должник.Адрес.Владелец;
			СтруктАдрес = ПолучитьАдрес(ТекЗдание, Перечисления.КВП_ВидыАдресов.Здание);
			АдресДома   = СтруктАдрес.Представление;
			Адрес       = ПолучитьАдресПомещения(АдресДома, ТекСтрока.Должник.Адрес);
			
			ОтветственныйСобственникЛицевогоСчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекСтрока.Должник, ТекСсылка.Дата);
			Если ЗначениеЗаполнено(ОтветственныйСобственникЛицевогоСчета) Тогда
				ОтветственныйСобственникЛицевогоСчета = ОтветственныйСобственникЛицевогоСчета.Наименование;
			Иначе
				ОтветственныйСобственникЛицевогоСчета = "";
			КонецЕсли;
			
			СтруктПарам = Новый Структура();
			СтруктПарам.Вставить("ФИО",   ОтветственныйСобственникЛицевогоСчета);
			СтруктПарам.Вставить("Сумма", ТекСтрока.Сумма);
			СтруктПарам.Вставить("Адрес", Адрес);
			СтруктПарам.Вставить("ДатаПросмотра", Формат(ТекСсылка.Дата, "ДФ='dd MMMM yyyy'") + " г.");
			СтруктПарам.Вставить("СуммаПрописью", НРег(УПЖКХ_ТиповыеМетодыВызовСервера.СформироватьСуммуПрописью(ТекСтрока.Сумма, Валюта)));
			СтруктПарам.Вставить("Организация",   ТекСсылка.Организация.Наименование);
			СтруктПарам.Вставить("ФИОРуководителя",       Руководители.Руководитель);
			СтруктПарам.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
			СтруктПарам.Вставить("СрокПогашения",         Формат(ТекСсылка.СрокПогашения, "ДФ='dd MMMM yyyy'") + " г.");
			СтруктПарам.Вставить("ПериодВозникновенияЗадолженности", ПолучитьСтрокуПериодаЗадолженности(ТекСсылка, ТаблицаДолжников, ТекСтрока.Должник));
			СтруктПарам.Вставить("ОтветственноеЛицо",                ОтветственноеЛицо);
			СтруктПарам.Вставить("НомерТелефона",                    ТелефонОрганизации);
			
			Область = Макет.ПолучитьОбласть();
			
			Область.Параметры.Заполнить(СтруктПарам);
			Для Каждого ТекПараметр Из СтруктПарам Цикл
				Пока НайтиИЗаменитьВДокументе(Область, "[" + ТекПараметр.Ключ + "]", ТекПараметр.Значение) Цикл
				КонецЦикла;
			КонецЦикла;
			
			СтрокаПредупреждения = Новый Массив;
			СтрокаПредупреждения.Добавить(Область);
			
			Попытка
				Если Не ТабДокумент.ПроверитьВывод(СтрокаПредупреждения) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			ТабДокумент.Вывести(Область);
			
			УПЖКХ_ТиповыеМетодыСервер.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекСсылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Зададим параметры макета
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1, 2, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПредупреждений()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую;
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать;
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы;
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "Предупреждение") Тогда
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "Предупреждение", 
																   "Предупреждение",
																   ПечатьПредупреждений(МассивОбъектов, ОбъектыПечати, "Предупреждение"));
	КонецЕсли;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "Предупреждение2") Тогда
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "Предупреждение2", 
																   "Предупреждение2",
																   ПечатьПредупреждений(МассивОбъектов, ОбъектыПечати, "Предупреждение2"));
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает параметры описания печатных форм текущего документа.
//
Функция ПолучитьОписаниеПараметровПечатныхФорм(ИмяФормыОписанияПараметров) Экспорт
	
	Коллекция = УПЖКХ_УправлениеПечатьюСервер.СоздатьКоллекциюОписанияМакетов();
	
	Если ИмяФормыОписанияПараметров = "ПФ_MXL_Предупреждение" Тогда
		
		// 1. Добавляем описание нового макета в коллекцию описаний.
		ОписаниеОбластиПараметров = УПЖКХ_УправлениеПечатьюСервер.ДобавитьМакетВОписаниеПараметров(Коллекция, ИмяФормыОписанияПараметров);
		
		// 2. Добавляем описание необходимых областей и параметров макета.
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Адрес"                , "Адрес жильца, которому направляется предупреждение.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ФИО"                  , "Ф.И.О. жильца, которому направляется предупреждение.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Организация"          , "Наименование организации, от имени которой направляется предупреждение.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ДатаПросмотра"        , "Дата, по состоянию на которую определена задолженность по коммунальным услугам.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Сумма"                , "Сумма задолженности жильца по коммунальным услугам, на основании которой направляется предупреждение.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СуммаПрописью"        , "Сумма задолженности жильца по коммунальным услугам прописью.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СрокПогашения"        , "Срок, который предоставляется жильцу на погашение имеющейся задолженности по коммунальным услугам.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ДолжностьРуководителя", "Должность руководителя организации, который подписывает предупреждение.");
		УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ФИОРуководителя"      , "Ф.И.О. руководителя организации, который подписывает предупреждение.");
		
		//// 3. Добаляем описание области
		//ОписаниеОбласти1 = УПЖКХ_УправлениеПечатьюСервер.ДобавитьОбластьВОписаниеПараметров(ОписаниеОбластиПараметров, "Область1");
		//УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбласти1, "Параметр1", "Описание 1");
		
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Возвращает фамилию и инициалы физ. лица, соответствующего указанному в документе ответственному лицу.
//
Функция ПолучитьФИООтветственногоЛица(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКон", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ФизЛицо", ДокументСсылка.Ответственный.ФизическоеЛицо);
	
	ФИООтветственногоТаблица = Запрос.Выполнить().Выгрузить();
	
	Если ФИООтветственногоТаблица.Количество() = 0 Тогда
		
		ФИООтветственного = "";
		
	Иначе
		
		ФИООтветственного = СокрЛП(ФИООтветственногоТаблица[0].Фамилия) + " " + Лев(СокрЛП(ФИООтветственногоТаблица[0].Имя), 1) + ". " + Лев(СокрЛП(ФИООтветственногоТаблица[0].Отчество), 1) + ".";
		
	КонецЕсли;
	
	Возврат ФИООтветственного;
	
КонецФункции

// Возвращает телефон организации
//
Функция ПолучитьТелефонОрганизации(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Ссылка,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
	|	И ОрганизацииКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Организация", ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("Вид",         Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	КИОрганизации = Запрос.Выполнить().Выгрузить();
	
	Если КИОрганизации.Количество() = 0 Тогда
		ТелефонОрганизации = "";
	Иначе
		ТелефонОрганизации = КИОрганизации[0].Телефон;
	КонецЕсли;
	
	Возврат ТелефонОрганизации;
	
КонецФункции

// Формирует строку с указанием периода, за который имеется задолженность. Используется во 2-м варианте ПФ.
//
Функция ПолучитьСтрокуПериодаЗадолженности(ДокументСсылка, ТаблицаДолжников, ДолжникСсылка)
	
	ДатаНачалаДолга = ТаблицаДолжников.Найти(ДолжникСсылка, "ЛицевойСчет");
	
	// Период возникновения задолженности
	Если ДатаНачалаДолга = Неопределено Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Указанные в документе сведения о задолженностях по " + ДолжникСсылка + " не актуальны.",,,,Ложь);
		
		СтрокаПериодаЗадолженности = "";
		
	Иначе
		
		СтрокаМесяцЗадолженности = ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаНачалаДолга.МесяцНачисления);
		СтрокаТекущийМесяц       = Формат(ДокументСсылка.Дата, "ДФ=ММММ") + " " + Формат(ДокументСсылка.Дата, "ДФ=гггг");
		СтрокаПериодаЗадолженности = " за период с " + СтрокаМесяцЗадолженности + " по " + СтрокаТекущийМесяц;
		
	КонецЕсли;
	
	Возврат СтрокаПериодаЗадолженности;
	
КонецФункции

// Функция возвращает представление периода по переданной дате
// как месяц и год в родительном падеже
// и вызывается из форм настройки параметров.
Функция ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаПериода) Экспорт
	
	Если ТипЗНЧ( ДатаПериода) = Тип("Строка") Тогда
		ПериодСтрокой = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаПериода, "Январь", "Января"), "Февраль", "Февраля"), "Март", "Марта"), "Апрель", "Апреля"), "Май", "Мая"), "Июнь", "Июня"), "Июль", "Июля"), "Август", "Августа"), "Сентябрь", "Сентября"), "Октябрь", "Октября"), "Ноябрь", "Ноября"), "Декабрь", "Декабря");
	ИначеЕсли ТипЗНЧ(ДатаПериода) = Тип("Дата") Тогда
		МесяцПериода = Месяц(ДатаПериода);
		Если МесяцПериода = 1 Тогда
			ПериодСтрокой = "Января ";
		ИначеЕсли МесяцПериода = 2 Тогда
			ПериодСтрокой = "Февраля ";
		ИначеЕсли МесяцПериода = 3 Тогда
			ПериодСтрокой = "Марта ";
		ИначеЕсли МесяцПериода = 4 Тогда
			ПериодСтрокой = "Апреля ";
		ИначеЕсли МесяцПериода = 5 Тогда
			ПериодСтрокой = "Мая ";
		ИначеЕсли МесяцПериода = 6 Тогда
			ПериодСтрокой = "Июня ";
		ИначеЕсли МесяцПериода = 7 Тогда
			ПериодСтрокой = "Июля ";
		ИначеЕсли МесяцПериода = 8 Тогда
			ПериодСтрокой = "Августа ";
		ИначеЕсли МесяцПериода = 9 Тогда
			ПериодСтрокой = "Сентября ";
		ИначеЕсли МесяцПериода = 10 Тогда
			ПериодСтрокой = "Октября ";
		ИначеЕсли МесяцПериода = 11 Тогда
			ПериодСтрокой = "Ноября ";
		ИначеЕсли МесяцПериода = 12 Тогда
			ПериодСтрокой = "Декабря ";	
		КонецЕсли;
		ПериодСтрокой = ПериодСтрокой + Формат(Год(ДатаПериода), "ЧГ=0");
	КонецЕсли;
	
	Возврат ПериодСтрокой;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли