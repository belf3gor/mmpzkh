#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Периодичность,
	|	Реквизиты.НачалоПериода,
	|	Реквизиты.КонецПериода
	|ИЗ
	|	Документ.КВП_СметаТСЖ КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,Организация,
			|Периодичность,
			|НачалоПериода,
			|КонецПериода");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Разделяет указанное ФИО на составляющие.
//
// Параметры
//  ФИО          – Строка – ФИО для разделения.
//
// Возвращаемое значение:
//  Структура - структура с ключами Фамилия, Имя, Отчество.
//
Функция ПолучитьФИО(Знач ФИО)

	Результат = Новый Структура("Фамилия, Имя, Отчество");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Результат;
	КонецЕсли;

	КонецСлова = Найти(ФИО, " ");
	Если Не КонецСлова = 0 Тогда
		Результат.Вставить("Фамилия", Лев(ФИО, КонецСлова - 1));
		ФИО = СокрЛП(Прав(ФИО, СтрДлина(ФИО) - СтрДлина(Результат.Фамилия)));
		КонецСлова = Найти(ФИО, " ");
		Если Не КонецСлова = 0 Тогда
			Результат.Вставить("Имя", Лев(ФИО, КонецСлова - 1));
			ФИО = СокрЛП(Прав(ФИО, СтрДлина(ФИО) - СтрДлина(Результат.Имя)));
			Если Не СтрДлина(ФИО) = 0 Тогда
				Результат.Вставить("Отчество", ФИО);
			КонецЕсли;
		ИначеЕсли Не СтрДлина(ФИО) = 0 Тогда
			ФИО = СокрЛП(Прав(ФИО, СтрДлина(ФИО) - СтрДлина(Результат.Имя)));
			Если Не СтрДлина(ФИО) = 0 Тогда
				Результат.Вставить("Имя", ФИО);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не СтрДлина(ФИО) = 0 Тогда
			Результат.Вставить("Фамилия", ФИО);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует таблицу значений с динамическими колонками.
Функция ПолучитьТаблицуСметы(Ссылка)
	
	СметаДоходовИРасходов = Новый ТаблицаЗначений;
	
	СметаДоходовИРасходов.Колонки.Добавить("НомерСтроки",   Новый ОписаниеТипов("Число"), "N", 5);
	СметаДоходовИРасходов.Колонки.Добавить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"), "Статья затрат", 35);
	СметаДоходовИРасходов.Колонки.Добавить("СуммаРасходов", Новый ОписаниеТипов("Число"), "Расход", 20);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойИсточник", Справочники.НазначениеЦелевыхСредств.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_СметаТСЖ.Источник КАК Источник,
	|	КВП_СметаТСЖ.Источник.Код КАК Код,
	|	КВП_СметаТСЖ.Источник.Наименование КАК Наименование
	|ИЗ
	|	Документ.КВП_СметаТСЖ.Источники КАК КВП_СметаТСЖ
	|ГДЕ
	|	КВП_СметаТСЖ.Ссылка = &ТекущийДокумент
	|	И НЕ КВП_СметаТСЖ.Источник = &ПустойИсточник";
	
	СписокИсточников = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекИсточник ИЗ СписокИсточников Цикл
		СметаДоходовИРасходов.Колонки.Добавить("Источник" + СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(ТекИсточник.Код, "-\/:*?""<>|")),
					   Новый ОписаниеТипов("Число"), 
					   ТекИсточник.Наименование, 20);
	КонецЦикла;

	Возврат СметаДоходовИРасходов;
	
КонецФункции //ПолучитьТаблицуСметы()

// Заполняет таблицу значений Смета доходов и расходов 
// значениями табличной части Смета расходов.
Процедура ЗаполнитьТаблицуСметы(ОбъектСмета, СметаДоходовИРасходов)
	
	Ном = 0;
	
	Для Каждого ТекСтрока ИЗ ОбъектСмета.СметаРасходов Цикл
		НайденнаяСтрока = СметаДоходовИРасходов.Найти(ТекСтрока.СтатьяЗатрат, "СтатьяЗатрат");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = СметаДоходовИРасходов.Добавить();
			Ном = Ном + 1;
			НоваяСтрока.НомерСтроки   = Ном;
			НоваяСтрока.СтатьяЗатрат  = ТекСтрока.СтатьяЗатрат;
			НоваяСтрока.СуммаРасходов = ТекСтрока.СуммаРасходов;
			Если ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				НоваяСтрока["Источник"+СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(ТекСтрока.Источник.Код, "-\/:*?""<>|"))] = ТекСтрока.СуммаДоходаОтИсточника;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				НайденнаяСтрока["Источник"+СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(ТекСтрока.Источник.Код, "-\/:*?""<>|"))] = ТекСтрока.СуммаДоходаОтИсточника;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТаблицуСметы()

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую;
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать;
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы;
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "СметаДиР") Тогда

		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
																   "СметаДиР", 
																   "Смета доходов и расходов", 
																   ПечатьСметыТСЖ(МассивОбъектов, 
																   						   ОбъектыПечати));

	КонецЕсли;
	
КонецПроцедуры

// Процедура печати документа.
//
Функция ПечатьСметыТСЖ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.КВП_СметаТСЖ.СметаДиР");
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КВП_СметаТСЖ";
	
	Для Каждого ТекСсылка Из МассивОбъектов Цикл
		
		ОбъектСмета = ТекСсылка.ПолучитьОбъект();
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ОбъектСмета.Дата, ОбъектСмета.Организация);
		СтруктураФИОПредседателя = ПолучитьФИО(мНастройкиУчетнойПолитикиТСЖ["ПредседательТСЖ"].ФИО);
		ФИОПредседателя = ?(НЕ ПустаяСтрока(СтруктураФИОПредседателя.Фамилия), 
			  СтруктураФИОПредседателя.Фамилия 
			   + ?(НЕ ПустаяСтрока(СтруктураФИОПредседателя.Имя),
				   " " + Лев(СтруктураФИОПредседателя.Имя,1) 
			  		+ "." 
					+ ?(НЕ ПустаяСтрока(СтруктураФИОПредседателя.Отчество), 
					Лев(СтруктураФИОПредседателя.Отчество,1)+".", 
					""), 
				 ""), 
			  "");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СметаРасходов.Источник КАК Источник,
		|	СметаРасходов.Источник.Код КАК ИсточникКод
		|ИЗ
		|	Документ.КВП_СметаТСЖ.Источники КАК СметаРасходов
		|ГДЕ
		|	СметаРасходов.Ссылка = &ТекущийДокумент
		|";

		Запрос.УстановитьПараметр("ТекущийДокумент", ТекСсылка);
		
		СметаДоходовИРасходов = ПолучитьТаблицуСметы(ТекСсылка);
		ЗаполнитьТаблицуСметы(ОбъектСмета, СметаДоходовИРасходов);
			
		ОблШапка = Макет.ПолучитьОбласть("Шапка|Расходы");
		ОблШапка.Параметры.Период = "период: "
								  + ПредставлениеПериода(НачалоДня(ОбъектСмета.НачалоПериода), 
								  						 КонецДня(ОбъектСмета.КонецПериода),
														 "ФП = Истина");
		ОблШапка.Параметры.Организация = ОбъектСмета.Организация;
		ОблШапка.Параметры.ФИОПредседателя = ФИОПредседателя;
		ТабДокумент.Вывести(ОблШапка);
		
		Смета = Запрос.Выполнить().Выбрать();
		ОблШапка = Макет.ПолучитьОбласть("Шапка|Расходы2");
		Смета.Следующий();
		Пока Смета.Следующий() Цикл
			ТабДокумент.Присоединить(ОблШапка);
		КонецЦикла;
		
		ОблШапка = Макет.ПолучитьОбласть("Шапка|Доходы");
		ОблШапка.Параметры.Организация = ОбъектСмета.Организация;
		ОблШапка.Параметры.ФИОПредседателя = ФИОПредседателя;
		ТабДокумент.Присоединить(ОблШапка);
		ТабДокумент.Присоединить(ОблШапка);
		
		ПослКолонка = ТабДокумент.ШиринаТаблицы;
		ТабДокумент.Область(3, ПослКолонка - 1, 3, ПослКолонка).Объединить();
		ТабДокумент.Область(4, ПослКолонка - 1, 4, ПослКолонка).Объединить();
		ТабДокумент.Область(5, ПослКолонка - 1, 5, ПослКолонка).Объединить();
		ТабДокумент.Область(6, ПослКолонка - 1, 6, ПослКолонка).Объединить();
		ТабДокумент.Область(7, ПослКолонка - 1, 7, ПослКолонка).Объединить();
		ТабДокумент.Область(8, ПослКолонка - 1, 8, ПослКолонка).Объединить();
		
		// Вывод шапки таблицы
		ОблШапкаТаб1 = Макет.ПолучитьОбласть("ШапкаТаблицы|Расходы");
		ТабДокумент.Вывести(ОблШапкаТаб1);
		ОблШапкаТаб2 = Макет.ПолучитьОбласть("ШапкаТаблицы|Расходы2");
		ТабДокумент.Присоединить(ОблШапкаТаб2);
		ОблШапкаТаб3 = Макет.ПолучитьОбласть("ШапкаТаблицы|Доходы");
		Смета = Запрос.Выполнить().Выбрать();
		Пока Смета.Следующий() Цикл
			ОблШапкаТаб3.Параметры.Источник = Смета.Источник;
			ТабДокумент.Присоединить(ОблШапкаТаб3);
		КонецЦикла;
		
		Область1 = Макет.ПолучитьОбласть("Строка|Расходы");
		Область2 = Макет.ПолучитьОбласть("Строка|Расходы2");
		Область3 = Макет.ПолучитьОбласть("Строка|Доходы");
		Для Каждого СтрокаТЧ Из СметаДоходовИРасходов Цикл

			Область1.Параметры.Заполнить(СтрокаТЧ);
			ТабДокумент.Вывести(Область1);
			Область2.Параметры.Заполнить(СтрокаТЧ);
			ТабДокумент.Присоединить(Область2);
			
			Смета = Запрос.Выполнить().Выбрать();
			Пока Смета.Следующий() Цикл
				Область3.Параметры.СуммаДоходаОтИсточника = СтрокаТЧ["Источник"+СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(Смета.ИсточникКод, "-\/:*?""<>|"))];
				ТабДокумент.Присоединить(Область3);
			КонецЦикла;
		
		КонецЦикла;

		ИтогоПоИсточникам = 0;
		
		ОбластьИт1 = Макет.ПолучитьОбласть("ИтогПоИсточникам|Расходы");
		ОбластьИт2 = Макет.ПолучитьОбласть("ИтогПоИсточникам|Расходы2");
		ОбластьИт3 = Макет.ПолучитьОбласть("ИтогПоИсточникам|Доходы");
		
		ТабДокумент.Вывести(ОбластьИт1);
		ТабДокумент.Присоединить(ОбластьИт2);
		
		Смета = Запрос.Выполнить().Выбрать();
		Пока Смета.Следующий() Цикл
			ИтогоПоИсточнику = СметаДоходовИРасходов.Итог("Источник"+СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(Смета.ИсточникКод, "-\/:*?""<>|")));
			ОбластьИт3.Параметры.ИтогоИсточник = ИтогоПоИсточнику;
			ТабДокумент.Присоединить(ОбластьИт3);
			ИтогоПоИсточникам = ИтогоПоИсточникам + ИтогоПоИсточнику;
		КонецЦикла;
		
		ОбластьИт1 = Макет.ПолучитьОбласть("Итого|Расходы");
		ОбластьИт2 = Макет.ПолучитьОбласть("Итого|Расходы2");
		ОбластьИт3 = Макет.ПолучитьОбласть("Итого|Доходы");
		
		ТабДокумент.Вывести(ОбластьИт1);
		ОбластьИт2.Параметры.ИтогоРасходы = СметаДоходовИРасходов.Итог("СуммаРасходов");
		ТабДокумент.Присоединить(ОбластьИт2);
		
		Смета = Запрос.Выполнить().Выбрать();
		Смета.Следующий();
		Пока Смета.Следующий() Цикл
			ОбластьИт3.Параметры.ИтогоДоходы = "";
			ТабДокумент.Присоединить(ОбластьИт3);
		КонецЦикла;
		ОбластьИт3.Параметры.ИтогоДоходы = ИтогоПоИсточникам;
		ТабДокумент.Присоединить(ОбластьИт3);
		
	КонецЦикла;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
