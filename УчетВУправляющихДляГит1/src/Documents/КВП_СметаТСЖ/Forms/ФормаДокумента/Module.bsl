#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция получает источник взносов.
Функция ОбновитьИсточникВзносов(Дата, Организация)
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	ИсточникВзносы = мНастройкиУчетнойПолитикиТСЖ.ИсточникВзносыТСЖ;
	
	СтруктураИсточника = Новый Структура;
	СтруктураИсточника.Вставить("ИсточникВзносы",    ИсточникВзносы);
	СтруктураИсточника.Вставить("ИсточникВзносыКод", ИсточникВзносы.Код);
	
	Возврат СтруктураИсточника;
	
КонецФункции

&НаСервере
// Процедура заполнения источника финансирования на сервере.
Процедура ЗаполнитьИФНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	| КВП_НастройкиСоответствияСтатейИсточников.Источник
	|ИЗ
	| РегистрСведений.КВП_НастройкиСоответствияСтатейИсточников КАК КВП_НастройкиСоответствияСтатейИсточников
	|ГДЕ
	| КВП_НастройкиСоответствияСтатейИсточников.Организация = &Организация";
	
	Объект.Источники.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
// Рассчитать смету расхода
Процедура РассчитатьСмету()
	
	// Очистим таблицу.
	// Запишем данные по смете в табличную часть.
	Для Каждого ТекСтрока Из СметаДоходовИРасходов Цикл
		Для Каждого ТекИсточник Из Объект.Источники Цикл
			Попытка
				ТекСтрока["Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекИсточник.Источник.Код), "\/:*?""<>|-")] = 0;
			Исключение
			КонецПопытки;
		КонецЦикла; // по источникам
	КонецЦикла; // по строкам
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	| СметаДиР.СтатьяЗатрат,
	| СметаДиР.СуммаРасходов
	|ПОМЕСТИТЬ СметаДиР
	|ИЗ
	| &СметаДиР КАК СметаДиР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	| КВП_НастройкиСоответствияСтатейИсточников.СтатьяЗатрат,
	| СУММА(Смета.СуммаРасходов) КАК СуммаРасходов
	|ИЗ
	| РегистрСведений.КВП_НастройкиСоответствияСтатейИсточников КАК КВП_НастройкиСоответствияСтатейИсточников
	| ВНУТРЕННЕЕ СОЕДИНЕНИЕ СметаДиР КАК Смета
	| ПО КВП_НастройкиСоответствияСтатейИсточников.СтатьяЗатрат = Смета.СтатьяЗатрат
	|ГДЕ
	| КВП_НастройкиСоответствияСтатейИсточников.Организация = &Организация
	| И КВП_НастройкиСоответствияСтатейИсточников.Источник = &Источник
	| И КВП_НастройкиСоответствияСтатейИсточников.Запись
	|
	|СГРУППИРОВАТЬ ПО
	| КВП_НастройкиСоответствияСтатейИсточников.СтатьяЗатрат
	|ИТОГИ ПО
	| ОБЩИЕ";
		
	
	Для Каждого ТекИсточник ИЗ Объект.Источники Цикл
		
		Если ТекИсточник.Источник = ИсточникВзносы Тогда
			Продолжить;
		КонецЕсли;
		Доход = ТекИсточник.ДоходОтИсточника;
		Запрос.УстановитьПараметр("Источник", ТекИсточник.Источник);
		Запрос.УстановитьПараметр("СметаДиР", СметаДоходовИРасходов.Выгрузить());
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		Расход = Результат.СуммаРасходов;
		
		ИмяКолонки = "Источник" + УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекИсточник.Источник.Код), "\/:*?""<>|-");
		РаспределенныйДоход = 0;
		НайденнаяСтрока = Неопределено;
		Пока Результат.Следующий() Цикл
			НайденныеСтроки = СметаДоходовИРасходов.НайтиСтроки(Новый Структура("СтатьяЗатрат", Результат.СтатьяЗатрат));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока[ИмяКолонки] = ?(Расход = 0, 0, НайденнаяСтрока.СуммаРасходов * Доход / Расход);
				РаспределенныйДоход = РаспределенныйДоход + НайденнаяСтрока[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		Если Не НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока[ИмяКолонки] = НайденнаяСтрока[ИмяКолонки] + (Доход - РаспределенныйДоход);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Пересчитывает сумму взносов по всем статьям
Процедура Пересчет()
	
	Для Каждого ТекСтрока ИЗ СметаДоходовИРасходов Цикл
		ПересчетСтроки(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Пересчитывает сумму взносов по строке
Процедура ПересчетСтроки(ТекСтрока)
	
	СуммаФинансирования = 0;
	
	Для Каждого ТекИсточник ИЗ Объект.Источники Цикл
		Если ТекИсточник.Источник = ИсточникВзносы Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			СуммаФинансирования = СуммаФинансирования + ТекСтрока["Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекИсточник.Источник, "Код")), "\/:*?""<>|-")];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		ТекСтрока["Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ИсточникВзносыКод), "\/:*?""<>|-")] = ТекСтрока.СуммаРасходов - СуммаФинансирования;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Заполняет ТЧ
Процедура ЗаполнитьТабличнуюЧасть()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	(НЕ СтатьиЗатрат.ПометкаУдаления)
	|	И (НЕ СтатьиЗатрат.ЭтоГруппа)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СметаРасходов.Загрузить(Результат);
	
КонецПроцедуры

&НаКлиенте
// Процедура обновления итогов.
Процедура ОбновитьИтогиСметыДоходовИрасходов()
	
	Для Каждого ТекКолонка Из Элементы.СметаДоходовИРасходов.ПодчиненныеЭлементы Цикл
		
		ИмяКолонки = ТекКолонка.Имя;
		
		Если Найти(ИмяКолонки, "СтатьяЗатрат") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - СтрДлина("СметаДоходовИРасходов"));
		
		Попытка
			ТекКолонка.ТекстПодвала = Формат(СметаДоходовИРасходов.Итог(ИмяРеквизита), "ЧДЦ=2");
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.Периодичность = Перечисления.Периодичность.Год;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	СтруктураИсточника = ОбновитьИсточникВзносов(Объект.Дата, Объект.Организация);
	ИсточникВзносы    = СтруктураИсточника.ИсточникВзносы;
	ИсточникВзносыКод = СтруктураИсточника.ИсточникВзносыКод;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоГода(Объект.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода  = КонецГода(Объект.Дата);
	КонецЕсли;
	
	СформироватьТаблицу();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИтогиСметыДоходовИрасходов();
	
	ПоказатьПериод();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СметаРасходов.Очистить();
	
	// Запишем данные по смете в табличную часть
	Для Каждого ТекСтрока ИЗ СметаДоходовИРасходов Цикл
		
		Для Каждого ТекИсточник ИЗ ТекущийОбъект.Источники Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("СтатьяЗатрат", ТекСтрока.СтатьяЗатрат);
			ПараметрыОтбора.Вставить("Источник",     ТекИсточник.Источник);
			НайденныеСтроки = ТекущийОбъект.СметаРасходов.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаСметыРасходов = НайденныеСтроки[0];
			Иначе
				СтрокаСметыРасходов = ТекущийОбъект.СметаРасходов.Добавить();
			КонецЕсли;
			
			СтрокаСметыРасходов.СтатьяЗатрат  = ТекСтрока.СтатьяЗатрат;
			СтрокаСметыРасходов.СуммаРасходов = ТекСтрока.СуммаРасходов;
			СтрокаСметыРасходов.Источник      = ТекИсточник.Источник;
			Попытка
				СтрокаСметыРасходов.СуммаДоходаОтИсточника = ТекСтрока["Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекИсточник.Источник.Код), "\/:*?""<>|-")];
			Исключение
			КонецПопытки;
			
		КонецЦикла; // по источникам
		
	КонецЦикла; // по строкам
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	СтруктураИсточника = ОбновитьИсточникВзносов(Объект.Дата, Объект.Организация);
	ИсточникВзносы     = СтруктураИсточника.ИсточникВзносы;
	ИсточникВзносыКод  = СтруктураИсточника.ИсточникВзносыКод;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураИсточника = ОбновитьИсточникВзносов(Объект.Дата, Объект.Организация);
	ИсточникВзносы     = СтруктураИсточника.ИсточникВзносы;
	ИсточникВзносыКод  = СтруктураИсточника.ИсточникВзносыКод;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Периодичность".
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда //На год
		Объект.НачалоПериода = НачалоГода(Объект.НачалоПериода);
		Объект.КонецПериода  = КонецГода(Объект.КонецПериода);
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда //поквартально
		Объект.НачалоПериода = НачалоКвартала(Объект.НачалоПериода);
		Объект.КонецПериода  = КонецКвартала(Объект.КонецПериода);
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда //помесячно
		Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода);
		Объект.КонецПериода  = КонецМесяца(Объект.КонецПериода);
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда //полугодие
		МесяцНачалаПериода = Месяц(Объект.НачалоПериода);
		МесяцКонецПериода  = Месяц(Объект.КонецПериода);
		Объект.НачалоПериода = НачалоМесяца(?(НЕ МесяцНачалаПериода > 6, ДобавитьМесяц(Объект.НачалоПериода, 1 - МесяцНачалаПериода), ДобавитьМесяц(Объект.НачалоПериода, 7 - МесяцНачалаПериода)));
		Объект.КонецПериода  = КонецМесяца(?(НЕ МесяцКонецПериода > 6, ДобавитьМесяц(Объект.КонецПериода, 6 - МесяцКонецПериода), ДобавитьМесяц(Объект.КонецПериода, 12 - МесяцКонецПериода)));
	КонецЕсли;
	
	ПоказатьПериод();
	
КонецПроцедуры

#Область ОбработчикиСобытийТЧИсточники

&НаКлиенте
// Обработчик "ПередУдалением"
Процедура ИсточникиПередУдалением(Элемент, Отказ)
	
	ТекИсточник     = Элементы.Источники.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Источник", ТекИсточник.Источник);
	НайденныеСтроки = Объект.СметаРасходов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстВопроса       = "Удалить данные по источнику " + "" + Строка(ТекИсточник.Источник) + "" + " в смете расходов?";
		ДопПараметры       = Новый Структура("ТекИсточник, НайденныеСтроки", ТекИсточник, НайденныеСтроки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаИсточникиПередУдалением", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИсточникиПередУдалениемПродолжение(ТекИсточник, НайденныеСтроки);

КонецПроцедуры // ИсточникиПередУдалением()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного из процедуры-обработчика команды "ИсточникиПередУдалением()".
Процедура ОбработатьРезультатВопросаИсточникиПередУдалением(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиПередУдалениемПродолжение(ДополнительныеПараметры.ТекИсточник,
									   ДополнительныеПараметры.НайденныеСтроки);
	
КонецПроцедуры // ОбработатьРезультатВопросаИсточникиПередУдалением()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ИсточникиПередУдалением()".
Процедура ИсточникиПередУдалениемПродолжение(ТекИсточник, НайденныеСтроки)
	
	Объект.Источники.Удалить(ТекИсточник);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Объект.СметаРасходов.Удалить(Стр);
	КонецЦикла;
	
	СформироватьТаблицу();
	РассчитатьСметуНаСервере();
	
	ОбновитьИтогиСметыДоходовИрасходов();
	
КонецПроцедуры // ИсточникиПередУдалением()

&НаКлиенте
// Обработчик "ПередОкончаниемРедактирования".
Процедура ИсточникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.Источники.ТекущиеДанные.Источник.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненного источника финансирования недопустимо!");
		Объект.Источники.Удалить(Элементы.Источники.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура -обработчик события "НачалоВыбора" поля "Источник" ТЧ "Истичники".
Процедура ИсточникиИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных источников затрат.
	СписокВыбранныхИсточников = Новый СписокЗначений;
	Для Каждого СтрокаВыбранногоИсточника Из Объект.Источники Цикл
		Если ЗначениеЗаполнено(СтрокаВыбранногоИсточника.Источник) Тогда
			СписокВыбранныхИсточников.Добавить(СтрокаВыбранногоИсточника.Источник);
		КонецЕсли;
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.НазначениеЦелевыхСредств.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.Источники.ТекущиеДанные.Источник), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхИсточников,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТЧСметаРасходов

&НаКлиенте
// Обработчик "ПередНачаломДобавления"
Процедура СметаДоходовИРасходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СтатьиЗатрат.ФормаВыбора",,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатВыбораСтатьиРасходов", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СметаДоходовИРасходовПередНачаломДобавления()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "СметаДоходовИРасходовПередНачаломДобавления()".
Процедура ОбработатьРезультатВыбораСтатьиРасходов(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено
	   И Объект.СметаРасходов.НайтиСтроки(Новый Структура("СтатьяЗатрат", РезультатВыбора)).Количество() = 0 Тогда
		НоваяСтрока = СметаДоходовИРасходов.Добавить();
		НоваяСтрока.СтатьяЗатрат = РезультатВыбора;
		
		Для Каждого ТекИсточник ИЗ Объект.Источники Цикл
			НоваяСтрока = Объект.СметаРасходов.Добавить();
			НоваяСтрока.СтатьяЗатрат = РезультатВыбора;
			НоваяСтрока.Источник     = ТекИсточник.Источник;
		КонецЦикла;
		СформироватьТаблицу();
		РассчитатьСметуНаСервере();
		ОбновитьИтогиСметыДоходовИрасходов();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораСтатьиРасходов()

&НаКлиенте
// Обработчик "ПередУдалением".
Процедура СметаДоходовИРасходовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СметаДоходовИРасходов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		УдалитьСтрокуСметыРасходов(ТекущиеДанные.СтатьяЗатрат);
	КонецЕсли;
	
КонецПроцедуры // СметаДоходовИРасходовПередУдалением()

&НаКлиенте
// Обработчик "ПриОкончанииРедактирования"
Процедура СметаДоходовИРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	ПересчетСтроки(ТекущаяСтрока);
	
	ОбновитьИтогиСметыДоходовИрасходов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПослеУдаления"
Процедура СметаДоходовИРасходовПослеУдаления(Элемент)
	
	ОбновитьИтогиСметыДоходовИрасходов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УменьшениеНачало".
Процедура УменьшениеНачало(Команда)
	
	ИзменитьПериод(-1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УменьшениеКонец".
Процедура УменьшениеКонец(Команда)
	
	ИзменитьПериод(-1, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УвеличениеНачало".
Процедура УвеличениеНачало(Команда)
	
	ИзменитьПериод(1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УвеличениеКонец".
Процедура УвеличениеКонец(Команда)
	
	ИзменитьПериод(1, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьИФ".
Процедура ЗаполнитьИФ(Команда)
	
	Если Объект.Источники.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьИФ", ЭтотОбъект),
					   "Табличная часть будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИФПродожение();
	
КонецПроцедуры // ЗаполнитьИФ()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванонго в процедуре "ЗаполнитьИФ()".
Процедура ОбработатьРезультатВопросаЗаполнитьИФ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИФПродожение();
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьИФ()

&НаКлиенте
// Процедура вызывает заполнение ИФ.
Процедура ЗаполнитьИФПродожение()
	
	ЗаполнитьИФНаСервере();
	
КонецПроцедуры // ЗаполнитьИФПродожение()

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если СметаДоходовИРасходов.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезальтатВопросаКомандаЗаполнить", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаЗаполнить()".
Процедура ОбработатьРезальтатВопросаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // ОбработатьРезальтатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнить()".
Процедура КомандаЗаполнитьФрагмент()
	
	ЗаполнитьТабличнуюЧастьНаСервере();
	СформироватьТаблицу();
	РассчитатьСметуНаСервере();
	
	Пересчет();
	ОбновитьИтогиСметыДоходовИрасходов();
	
КонецПроцедуры // КомандаЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "КомандаРассчитать.
Процедура КомандаРассчитать(Команда)
	
	РассчитатьСметуНаСервере();
	Пересчет();
	ОбновитьИтогиСметыДоходовИрасходов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаНастройкаСоответствия".
Процедура КомандаНастройкаСоответствия(Команда)
	
	СтруктураПараметров = Новый Структура("Организация", Объект.Организация);
	ОткрытьФорму("Обработка.КВП_НастройкаСоответствияСтатейЗатратИсточников.Форма.Форма", СтруктураПараметров);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаКлиенте
// Отображает период в реквизитах формы НадписьПериодНачало и НадписьПериодКонец
// в соответствии с периодичностью планирования.
Процедура ПоказатьПериод()
	
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда //На год
		Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='yyyy ""г.""'");
		Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='yyyy ""г.""'");
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда //поквартально
		Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='к ""квартал"" гггг ""г.""'");
		Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='к ""квартал"" гггг ""г.""'");
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда //помесячно
		Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='ММММ гггг ""г.""'");
		Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='ММММ гггг ""г.""'");
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда //полугодично
		Если Формат(Объект.НачалоПериода, "ДФ='к'") = "1" ИЛИ Формат(Объект.НачалоПериода, "ДФ='к'") = "2" Тогда
			Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='1 ""полугодие"" гггг ""г.""'");
		Иначе
			Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='2 ""полугодие"" гггг ""г.""'");
		КонецЕсли;
		Если Формат(Объект.КонецПериода, "ДФ='к'") = "1" ИЛИ Формат(Объект.КонецПериода, "ДФ='к'") = "2" Тогда
			Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='1 ""полугодие"" гггг ""г.""'");
		Иначе
			Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='2 ""полугодие"" гггг ""г.""'");
		КонецЕсли;
	Иначе
		Элементы.НадписьПериодНачало.Заголовок = Формат(Объект.НачалоПериода, "ДФ='yyyy ""г.""'");
		Элементы.НадписьПериодКонец.Заголовок  = Формат(Объект.КонецПериода,  "ДФ='yyyy ""г.""'");
	КонецЕсли;
	
КонецПроцедуры  // ПоказатьПериод()

&НаКлиенте
// Изменяет начало или конец периода в зависимости от параметров.
//
// Параметры:
//  ЗнакДвижения - число - "1" либо с плюсом, либо с минусом;
//  ИзменятьНачало - булево - изменяется начало или конец периода.
//
Процедура ИзменитьПериод(ЗнакДвижения, ИзменятьНачало)
	
	Шаг = 0;
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда //На год
		Шаг = 12;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда //На полугодие
		Шаг = 6;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда //поквартально
		Шаг = 3;
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда //помесячно
		Шаг = 1;
	КонецЕсли;
	
	Если ИзменятьНачало Тогда
		ПредварительноеНачалоПериода = НачалоМесяца(ДобавитьМесяц(Объект.НачалоПериода, Шаг * ЗнакДвижения));
		Если ПредварительноеНачалоПериода > Объект.КонецПериода Тогда
			ПоказатьПериод();
			ПоказатьПредупреждение(Неопределено, "Неверно задана продолжительность планирования!");
			Возврат;
		Иначе
			Объект.НачалоПериода = ПредварительноеНачалоПериода;
		КонецЕсли;
	Иначе
		ПредварительноеКонецПериода = КонецМесяца(ДобавитьМесяц(Объект.КонецПериода, Шаг * ЗнакДвижения));
		Если ПредварительноеКонецПериода < Объект.НачалоПериода Тогда
			ПоказатьПериод();
			ПоказатьПредупреждение(Неопределено, "Неверно задана продолжительность планирования!");
			Возврат;
		Иначе
			Объект.КонецПериода = ПредварительноеКонецПериода;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПериод();
	
КонецПроцедуры // ИзменитьПериод()

#КонецОбласти

#Область ДинамическаяТЗСметаДоходовИРасходов

&НаСервере
// Формирует таблицу значений с динамическими колонками.
Процедура СформироватьТаблицу()
	
	СметаДоходовИРасходов.Очистить();
	
	ТипЧислаСумма = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	СоздатьКолонку(МассивДобавляемыхРеквизитов,
					"СтатьяЗатрат", "Статья затрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	СоздатьКолонку(МассивДобавляемыхРеквизитов, "СуммаРасходов", "Расход", ТипЧислаСумма);
	
	Для Каждого ТекИсточник ИЗ Объект.Источники Цикл
		СоздатьКолонку(МассивДобавляемыхРеквизитов,
						"Источник" + УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекИсточник.Источник.Код), "\/:*?""<>|-"), ТекИсточник.Источник.Наименование, ТипЧислаСумма);
	КонецЦикла;
	
	ОбновитьСоставКолонок(МассивДобавляемыхРеквизитов);
	ЗаполнитьСмету();
	ОбновитьТабличноеПолеСмета();
	
КонецПроцедуры //СформироватьТаблицу()

&НаСервере
// Создает колонку в таблице значений с указанными параметрами.
Процедура СоздатьКолонку(МассивДобавляемыхРеквизитов, ИДКолонки, ИмяКолонки, ТипКолонки)
	
	РеквизитФормы = Новый РеквизитФормы(ИДКолонки, ТипКолонки, "СметаДоходовИРасходов", ИмяКолонки); 
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
	
КонецПроцедуры

&НаСервере
// Вызывает создание колонок табличного поля и заполняет свойства
// элементов управления колонок.
Процедура ОбновитьСоставКолонок(МассивДобавляемыхРеквизитов)
	
	СуществующиеРеквизиты = ЭтаФорма.ПолучитьРеквизиты("СметаДоходовИРасходов");
	МассивУдаляемыхРеквизитов = Новый Массив();
	Для Каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		 МассивУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Путь + "." + СуществующийРеквизит.Имя);
	КонецЦикла;
	// Создадим реквизиты
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
КонецПроцедуры // ОбновитьСоставКолонок()

&НаСервере
// Заполняет таблицу значений Смета доходов и расходов
// значениями табличной части Смета расходов.
Процедура ЗаполнитьСмету()
	
	ТЗСметаРасходов = Объект.СметаРасходов.Выгрузить();
	ТЗСметаДоходовИРасходов = СметаДоходовИРасходов.Выгрузить();
	
	Для Каждого ТекСтрока ИЗ ТЗСметаРасходов Цикл
		НайденнаяСтрока = ТЗСметаДоходовИРасходов.Найти(ТекСтрока.СтатьяЗатрат, "СтатьяЗатрат");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ТЗСметаДоходовИРасходов.Добавить();
			НоваяСтрока.СтатьяЗатрат  = ТекСтрока.СтатьяЗатрат;
			НоваяСтрока.СуммаРасходов = ТекСтрока.СуммаРасходов;
			Если ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				ТекКолонка = "Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекСтрока.Источник.Код), "\/:*?""<>|-");
				Если НЕ ТЗСметаДоходовИРасходов.Колонки.Найти(ТекКолонка) = Неопределено Тогда
					НоваяСтрока[ТекКолонка] = ТекСтрока.СуммаДоходаОтИсточника;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				ТекКолонка = "Источник"+УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СокрЛП(ТекСтрока.Источник.Код), "\/:*?""<>|-");
				Если НЕ ТЗСметаДоходовИРасходов.Колонки.Найти(ТекКолонка) = Неопределено Тогда
					НайденнаяСтрока[ТекКолонка] = ТекСтрока.СуммаДоходаОтИсточника;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СметаДоходовИРасходов.Загрузить(ТЗСметаДоходовИРасходов);
	
КонецПроцедуры //ЗаполнитьСмету()

&НаСервере
// Обновляет ТП Смета доходов и расходов
// значениями табличной части Смета расходов.
Процедура ОбновитьТабличноеПолеСмета()
	
	ОчиститьКолонкиСметы();
	ТЗСметаДоходовИРасходов = СметаДоходовИРасходов.Выгрузить();
	ном = 0;
	
	Для Каждого Колонка Из ТЗСметаДоходовИРасходов.Колонки Цикл
		
		Элемент = Элементы.Добавить("СметаДоходовИРасходов" + Колонка.Имя, Тип("ПолеФормы"), Элементы.СметаДоходовИРасходов);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "СметаДоходовИРасходов." + Колонка.Имя;
		
		Если ном < 1 Тогда
			Если ном = 0 Тогда
				Элемент.Ширина = 1;
			КонецЕсли;
			Элемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ном = ном + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Очищает колонки элементов СметаДоходовИРасходов
Процедура ОчиститьКолонкиСметы()
	
	МассивУдаляемыхЭлементов = Новый Массив();
	Для Каждого Элемент Из Элементы Цикл
		Если Найти(Элемент.Имя, "СметаДоходовИРасходов") > 0 Тогда
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				МассивУдаляемыхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Рассчитыват смету на сервере
Процедура РассчитатьСметуНаСервере()
	
	РассчитатьСмету();
	
КонецПроцедуры

&НаСервере
// Заполняет ТЧ
Процедура ЗаполнитьТабличнуюЧастьНаСервере()

	ЗаполнитьТабличнуюЧасть();

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

&НаКлиенте
// Процедура удаляет строку статьи расхода в таблице "СметаРасходов".
Процедура УдалитьСтрокуСметыРасходов(СтатьяЗатрат)
	
	УдаляемыеСтроки = Объект.СметаРасходов.НайтиСтроки(Новый Структура("СтатьяЗатрат", СтатьяЗатрат));
	
	Для Каждого удСтрока Из УдаляемыеСтроки Цикл
		Объект.СметаРасходов.Удалить(удСтрока);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокуСметыРасходов()

#КонецОбласти