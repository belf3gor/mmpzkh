#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

#Область УчетПособий

// Возникает при заполнении документа ЗаявлениеСотрудникаНаВыплатуПособия на основании текущего документа.
Процедура ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Отпуск, Заявление, РеквизитыДокумента, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отпуск, "Организация, Сотрудник, Дата");
	
	РеквизитыДокумента.Вставить("Организация",                       РеквизитыОтпуска.Организация);
	РеквизитыДокумента.Вставить("Сотрудник",                         РеквизитыОтпуска.Сотрудник);
	РеквизитыДокумента.Вставить("ДатаПредставленияПакетаДокументов", РеквизитыОтпуска.Дата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т6";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)'");
	КомандаПечати.Порядок = 10;		
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРасчетаСреднегоЗаработка";
	КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
	КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
	|	Отпуск.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		ВидСтажа = Перечисления.ВидыСтажаПФР2014.ДЛОТПУСК;		
						
		ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
		ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
		ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
		ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
		ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.ОтпускОсновной;
				
		РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
												 					
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажа);		
	КонецЦикла;	

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции	

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПроверитьДокументыДляПечати(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6") Тогда
		ПечатьТ6(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьТ6(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	ДанныеСсылок = Новый ДеревоЗначений;
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъект");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияНаименованиеСокращенное");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияКодПоОКПО");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("ЛичныеДанныеФИОФамилияИмяОтчествоВДательномПадеже");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудникТабельныйНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжность");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудник");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпускНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНачалаОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаНачалаОсновногоОтпускаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОкончанияОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОкончанияОсновногоОтпускаНаПечать");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаНачала");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковДатаОкончания");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектПродолжительностьОсновногоОтпуска");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектПродолжительностьДополнительныхОтпусков");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДанныеОтпусковВидОтпускаОсновнойОтпуск");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОснование");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДолжностьРуководителя");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектРуководительРасшифровкаПодписи");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОзнакомленияРаботника");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя");
	КадровыйУчетПереопределяемый.СоздатьВТОтветственныхЛиц(Запрос.МенеджерВременныхТаблиц,
															МассивОбъектов,
															ПорядокЗаполнения);
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.ДатаНачалаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,Пол,ТабельныйНомер,Организация,Подразделение,Должность");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Период КАК Период,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность
	|ПОМЕСТИТЬ ВТДанныеДляПечати
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПечати.Сотрудник КАК РаботаСотрудник,
	|	Отпуск.Организация КАК Организация,
	|	ДанныеДляПечати.Организация.НаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
	|	ДанныеДляПечати.Организация.КодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
	|	ДанныеДляПечати.ФИОПолные КАК ЛичныеДанныеФИОФамилияИмяОтчество,
	|	ДанныеДляПечати.Пол КАК ЛичныеДанныеПол,
	|	Отпуск.Номер КАК СсылкаНаОбъектНомер,
	|	Отпуск.Дата КАК СсылкаНаОбъектДата,
	|	ДанныеДляПечати.ТабельныйНомер КАК РаботаСотрудникКод,
	|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК РаботаПодразделение,
	|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК РаботаДолжность,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК СсылкаНаОбъектДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК СсылкаНаОбъектДатаОкончанияОсновногоОтпуска,
	|	Отпуск.КоличествоДнейОсновногоОтпуска КАК СсылкаНаОбъектПродолжительностьОсновногоОтпуска,
	|	ИСТИНА КАК СсылкаНаОбъектДанныеОтпусковВидОтпускаОсновнойОтпуск,
	|	Отпуск.Ссылка КАК СсылкаНаОбъект,
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.Дата КАК Дата,
	|	Отпуск.Руководитель КАК СсылкаНаОбъектРуководитель,
	|	Отпуск.ДолжностьРуководителя КАК СсылкаНаОбъектДолжностьРуководителя,
	|	Отпуск.Основание КАК СсылкаНаОбъектОснование
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	ВТДанныеДляПечати КАК ДанныеДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Сотрудник
	|			И ДанныеДляПечати.Период = Отпуск.ДатаНачалаСобытия
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("СсылкаНаОбъектРуководитель");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.РаботаСотрудник КАК РаботаСотрудник,
		|	ДанныеДокументов.СсылкаНаОбъектОрганизацияНаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
		|	ДанныеДокументов.СсылкаНаОбъектОрганизацияКодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
		|	ДанныеДокументов.ЛичныеДанныеФИОФамилияИмяОтчество КАК ЛичныеДанныеФИОПолные,
		|	ДанныеДокументов.ЛичныеДанныеПол КАК ЛичныеДанныеПол,
		|	ДанныеДокументов.СсылкаНаОбъектНомер КАК СсылкаНаОбъектНомер,
		|	ДанныеДокументов.СсылкаНаОбъектДата КАК СсылкаНаОбъектДата,
		|	ДанныеДокументов.РаботаСотрудникКод КАК РаботаСотрудникКод,
		|	ДанныеДокументов.РаботаПодразделение КАК РаботаПодразделение,
		|	ДанныеДокументов.РаботаДолжность КАК РаботаДолжность,
		|	ДанныеДокументов.СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.СсылкаНаОбъектДатаНачалаОсновногоОтпуска КАК СсылкаНаОбъектДатаНачалаОсновногоОтпуска,
		|	ДанныеДокументов.СсылкаНаОбъектДатаОкончанияОсновногоОтпуска КАК СсылкаНаОбъектДатаОкончанияОсновногоОтпуска,
		|	ДанныеДокументов.СсылкаНаОбъектПродолжительностьОсновногоОтпуска КАК СсылкаНаОбъектПродолжительностьОсновногоОтпуска,
		|	ДанныеДокументов.СсылкаНаОбъектДанныеОтпусковВидОтпускаОсновнойОтпуск КАК СсылкаНаОбъектДанныеОтпусковВидОтпускаОсновнойОтпуск,
		|	ДанныеДокументов.СсылкаНаОбъект КАК СсылкаНаОбъект,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеДокументов.СсылкаНаОбъектДолжностьРуководителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьРуководителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
		|		ИНАЧЕ ДанныеДокументов.СсылкаНаОбъектДолжностьРуководителя
		|	КОНЕЦ КАК СсылкаНаОбъектДолжностьРуководителя,
		|	ДанныеДокументов.СсылкаНаОбъектОснование КАК СсылкаНаОбъектОснование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ФИОРуководителя.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Руководитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|		ИНАЧЕ ФИОРуководителя.РасшифровкаПодписи
		|	КОНЕЦ КАК СсылкаНаОбъектРуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.СсылкаНаОбъектРуководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ВТОтветственныеЛица
		|		ПО ДанныеДокументов.Ссылка = ВТОтветственныеЛица.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СсылкаНаОбъект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СсылкаНаОбъект") Цикл
		
		СтрокаСсылки = ДанныеСсылок.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСсылки, Выборка);
		
		СтрокаСсылки.СсылкаНаОбъектДатаНаПечать = Формат(Выборка.СсылкаНаОбъектДата, "ДЛФ=D");
		СтрокаСсылки.СсылкаНаОбъектНомерНаПечать = ЗарплатаКадрыОтчеты.НомерНаПечать(Выборка.СсылкаНаОбъектНомер);
		
		СтрокаСсылки.ЛичныеДанныеФИОФамилияИмяОтчествоВДательномПадеже =
			ЗарплатаКадрыОтчеты.ПросклоненныеФИО(Выборка.ЛичныеДанныеФИОПолные, 3, Выборка.ЛичныеДанныеПол);
		
		СтрокаСсылки.РаботаСотрудникТабельныйНомерНаПечать = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Выборка.РаботаСотрудникКод);
		СтрокаСсылки.РаботаПодразделениеНаПечать = ЗарплатаКадрыОтчеты.ПодразделениеНаПечать(Выборка.РаботаПодразделение);
		
		СтрокаСсылки.СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпуск, Ложь);
		СтрокаСсылки.СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпускНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпуск, Ложь);
		
		СтрокаСсылки.СсылкаНаОбъектДатаНачалаОсновногоОтпускаНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДатаНачалаОсновногоОтпуска);
		СтрокаСсылки.СсылкаНаОбъектДатаОкончанияОсновногоОтпускаНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДатаОкончанияОсновногоОтпуска);
	
		СтрокаСсылки.СсылкаНаОбъектДатаОзнакомленияРаботника = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.СсылкаНаОбъектДата);
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаСотрудника = СтрокаСсылки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСсылки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	КадровыйУчет.ВывестиНаПечатьТ6(ДокументРезультат, ДанныеСсылок.Строки, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т6"), , ОбъектыПечати);
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т6",
		НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)'"),
		ДокументРезультат,,);
	
КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет структуру - описание документа для формирования печатной формы расчета среднего заработка.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в
//                       Обработки.ПечатьРасчетаСреднегоЗаработка.ОписаниеДокументаРассчитывающегоСреднийЗаработок.
//
Процедура ЗаполнитьОписаниеДокументаРассчитывающегоСреднийЗаработок(ОписаниеДокумента, ИмяМакета) Экспорт
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	ОписаниеДокумента.Вставить("ИмяДокумента", МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", МетаданныеДокумента.Синоним);
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Процедура ЗаполнитьДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ДанныеДокументов, ИмяМакета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Организация,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.ПериодРегистрации,
	|	Документ.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОтсутствия,
	|	Документ.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОтсутствия,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Документ.ДатаНачалаОсновногоОтпуска, МЕСЯЦ), МЕСЯЦ, -12) КАК НачалоРасчетногоПериода,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Документ.ДатаНачалаОсновногоОтпуска, МЕСЯЦ), СЕКУНДА, -1) КАК ОкончаниеРасчетногоПериода,
	|	Документ.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.КоличествоДнейОсновногоОтпуска КАК ДнейОсновногоОтпуска
	|ИЗ
	|	Документ.Отпуск КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаОсновногоОтпуска,
	|	Документ.Организация,
	|	Документ.Дата,
	|	Документ.Номер,
	|	Документ.ПериодРегистрации,
	|	Документ.ДатаОкончанияОсновногоОтпуска,
	|	Документ.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.КоличествоДнейОсновногоОтпуска,
	|	Документ.ДатаНачалаОсновногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДокумента = ДанныеДокументов.Добавить(); 
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДанныеДокумента.ДнейОтпускаВсего 	= Выборка.ДнейОсновногоОтпуска;

		ОписанияСотрудников = Новый Соответствие;
		МассивСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивСотрудников.Добавить(Выборка.Сотрудник);
			ОписанияСотрудников.Вставить(Выборка.Сотрудник, Новый Структура("ИспользоватьСреднечасовойЗаработок", Ложь));
		КонецЦикла;
		ДанныеДокумента.МассивСотрудников 	= МассивСотрудников;
		ДанныеДокумента.ОписанияСотрудников = ОписанияСотрудников;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Функция ПланируемаяДатыВыплатыОтпуска(ДатаНачалаСобытия, Организация) Экспорт
	
	ПланируемаяДатыВыплатыОтпуска = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		
		ДатаТриДняДоОтпуска = ДатаНачалаСобытия - (86400 * 4);
		Даты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаТриДняДоОтпуска);
		КалендарьРФ = РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ПроизводственныйКалендарьОрганизации(Организация);
		
		ДатыРабочихДней = КалендарныеГрафики.ДатыБлижайшихРабочихДней(КалендарьРФ, Даты, Истина, Ложь);
		
		Если ДатыРабочихДней <> Неопределено Тогда
			ПланируемаяДатыВыплатыОтпуска = ДатыРабочихДней.Получить(ДатаТриДняДоОтпуска);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПланируемаяДатыВыплатыОтпуска;
	
КонецФункции

Процедура ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента) Экспорт
	
	ЗарплатаКадры.ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента, "ДатаНачалаСобытия");
	
КонецПроцедуры

Процедура ЗаполнитьДатыЗапрета(ПараметрыОбновления) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.Дата КАК Дата
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.ДатаЗапрета = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отпуск.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
			МенеджерДокумента.ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента);
			
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

Процедура ПроверитьДокументыДляПечати(МассивОбъектов)
	
	МассивПроверенныхДокументов = Новый Массив;
	Для Каждого ПроверяемыйДокумент ИЗ МассивОбъектов Цикл
		ДокументОбъект = ПроверяемыйДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			МассивПроверенныхДокументов.Добавить(ПроверяемыйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	МассивОбъектов = МассивПроверенныхДокументов;
	
КонецПроцедуры

#Область РасчетДокумента

// Функция формирует набор параметров для передачи во вспомогательные формы,
// помещает их во временное хранилище и возвращает адрес этого хранилища.
//
// Параметры:
//	Объект                  - ДокументОбъект.Отпуск - исходый документ.
//	ДополнительныеПараметры - Структура - дополнительные параметры из формы документа.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище.
//
Функция АдресПараметровВХранилище(Объект, ДополнительныеПараметры) Экспорт
	
	ПараметрыРасчетаСреднегоЗаработка = Новый Структура;
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Объект",                            Объект);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("СреднийЗаработокОбщий",             Объект.СреднийЗаработокОбщий.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ОтработанноеВремяДляСреднегоОбщий", Объект.ОтработанноеВремяДляСреднегоОбщий.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Начисления",                        Объект.Начисления.Выгрузить());
	
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Подразделение",    ДополнительныеПараметры.Подразделение);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("НачислениеОтпуск", ДополнительныеПараметры.НачислениеОтпуск);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчетаСреднегоЗаработка, ДополнительныеПараметры.УникальныйИдентификатор);
	
КонецФункции

// Производит перерасчет начисления.
// 
// Параметры:
//  Объект                  - ДокументОбъект.Отпуск - исходый документ.
//  ДополнительныеПараметры - Структура - дополнительные параметры из формы документа.
//
Процедура РассчитатьНачисления(Объект, ДополнительныеПараметры) Экспорт
	
	НачислениеОтпуск = ДополнительныеПараметры.НачислениеОтпуск;
	Подразделение    = ДополнительныеПараметры.Подразделение;
	
	Объект.Начисления.Очистить();
	
	ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
	ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска;
	
	Пока ЗначениеЗаполнено(ДатаНачала) И ДатаНачала <= ДатаОкончания Цикл
		
		СтрокаНачислений = Объект.Начисления.Добавить();
		
		СтрокаНачислений.Начисление = НачислениеОтпуск;
		СтрокаНачислений.Сотрудник = Объект.Сотрудник;
		СтрокаНачислений.Подразделение = Подразделение;
		
		СтрокаНачислений.ДатаНачала = ДатаНачала;
		
		Если КонецМесяца(ДатаНачала) >= ДатаОкончания Тогда
			СтрокаНачислений.ДатаОкончания = ДатаОкончания;
		Иначе
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДатаНачала);
		КонецЕсли;
		
		СтрокаНачислений.ОплаченоДней = РасчетЗарплатыДляНебольшихОрганизаций.КоличествоДнейОтпуска(
			СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания, Объект.Организация);
		
		СтрокаНачислений.Результат = Объект.СреднийЗаработок * СтрокаНачислений.ОплаченоДней;
		
		РабочихДнейЧасов = РасчетЗарплатыДляНебольшихОрганизаций.РабочихДнейЧасовВПериоде(СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания, Объект.Организация);
		
		Если РабочихДнейЧасов = Неопределено Тогда
			
			СтрокаНачислений.ОтработаноДней = 0;
			СтрокаНачислений.ОтработаноЧасов = 0;
			
		Иначе
			
			СтрокаНачислений.ОтработаноДней = РабочихДнейЧасов.Дней;
			СтрокаНачислений.ОтработаноЧасов = РабочихДнейЧасов.Часов;
			
		КонецЕсли;
		
		ДатаНачала = КонецМесяца(ДатаНачала) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура инициирует перерасчет НДФЛ.
// Вызывается из основной или вспомогательной формы документа.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура.
//  ОбъектФормы - ДокументОбъект.
//
Процедура ПересчитатьНДФЛ(Объект, ОбъектФормы) Экспорт
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	ДокументОбъект = ОбъектФормы.Скопировать();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.СформироватьДоходыНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(
		Запрос.МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.ПериодРегистрации, Ложь, Объект.ПланируемаяДатаВыплаты, ДокументОбъект.Движения);
	
	ОтменитьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Объект.НДФЛ.Добавить(), ДанныеНДФЛ);
	КонецЦикла;
	
	Для каждого ДанныеВычетов Из РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПримененныеВычетыНаДетейИИмущественные.Добавить(), ДанныеВычетов);
	КонецЦикла;
	
	РасчетЗарплатыБазовый.ЗаполнитьКорректировкиВыплаты(Объект, "ПериодРегистрации");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
