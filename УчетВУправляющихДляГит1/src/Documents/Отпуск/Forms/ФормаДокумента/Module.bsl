#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Параметры.РежимОткрытияОкна) Тогда
		РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник	= Параметры.Сотрудник;
		КонецЕсли;
		Если Параметры.Свойство("Дата") И ЗначениеЗаполнено(Параметры.Дата) Тогда 
			Объект.Дата = Параметры.Дата;
		Иначе
			// Заполнение нового документа.
			ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
				"Объект.Организация",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Если НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
		УстановитьДатуНачалаСобытия();
		
	КонецЕсли;
	Элементы.МесяцНачисленияСтрокой.Видимость = НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.ПериодРегистрации);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Отпуск", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормыПоОрганизации();
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОсновногоОтпускаПриИзменении(Элемент)
	
	ПриИзмененииПериодаОтпуска();
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Элементы.МесяцНачисленияСтрокой, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодРегистрации = РезультатВыбора.НачалоПериода;
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) Экспорт
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) Экспорт
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Если НачалоМесяца(Объект.ПериодРегистрации) <> НачалоМесяца(Объект.Дата) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
			ПриИзмененииМесяцаНачисления();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛИтогНалогНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не КлючевыеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтотОбъект, Объект.ПериодРегистрации, Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленоРезультатНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не КлючевыеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеРасчетаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	
	ОткрытьФорму("Документ.Отпуск.Форма.ФормаПодробнееОРасчете", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Выплатить(Команда)
	
	Если НЕ Объект.ПометкаУдаления И НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Вставить(0, КодВозвратаДиалога.Да,     "Провести");
		Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, "Отмена");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередВыплатойСледуетПровестиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед выплатой документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
	Иначе
		СформироватьДокументыВыплаты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаОтпуска()
	
	УстановитьДатуНачалаСобытия();
	Если Объект.ДатаНачалаОсновногоОтпуска > Объект.ДатаОкончанияОсновногоОтпуска
		И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) Тогда
		
		Объект.ДатаОкончанияОсновногоОтпуска = Объект.ДатаНачалаОсновногоОтпуска;
		
	КонецЕсли;
	УстановитьПериодЗаКоторыйПредоставляетсяОтпуск();
	
	УстановитьКоличествоДнейОсновногоОтпуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	НачислениеОтпуск = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема,Подразделение", Объект.ДатаНачалаОсновногоОтпуска);
	Если КадровыеДанные.Количество() = 0 Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе
		Подразделение = КадровыеДанные[0].Подразделение;
		ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
	КонецЕсли;
			
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтотОбъект);
	
	МесяцСобытия = НачалоМесяца(Объект.ДатаНачалаСобытия);
	
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ОтобразитьПризнакКорректировкиНДФЛ();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаСобытия()
	
	Объект.ДатаНачалаСобытия = '00010101';
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачалаОсновногоОтпуска;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Объект.ДатаНачалаСобытия = Объект.ПериодРегистрации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	УстановитьДатуНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоДнейОсновногоОтпуска()
	
	КоличествоДнейОсновногоОтпуска = РасчетЗарплатыДляНебольшихОрганизаций.КоличествоДнейОтпуска(
		Объект.ДатаНачалаОсновногоОтпуска, Объект.ДатаОкончанияОсновногоОтпуска, Объект.Организация);
	
	Если Объект.КоличествоДнейОсновногоОтпуска <> КоличествоДнейОсновногоОтпуска Тогда
		Объект.КоличествоДнейОсновногоОтпуска = КоличествоДнейОсновногоОтпуска;
		РассчитатьСреднийЗаработокИНачисления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоДнейОсновногоОтпуска(Форма)
	
	КоличествоДнейОсновногоОтпуска = Форма.Объект.КоличествоДнейОсновногоОтпуска;
	Если ЗначениеЗаполнено(КоличествоДнейОсновногоОтпуска) Тогда
		НадписьДней = СтрокаСЧислом( "; день; ; дня; дней; дня",
								КоличествоДнейОсновногоОтпуска,
								ВидЧисловогоЗначения.Количественное,
								"L=ru_RU");
		Форма.НадписьДней = СтрШаблон(НСтр("ru='%1 %2'"), КоличествоДнейОсновногоОтпуска, НадписьДней);
	Иначе
		Форма.НадписьДней = "";	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	УстановитьДатуНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	ОчиститьТаблицыНДФЛ();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема,Подразделение,ФизическоеЛицо", Объект.ДатаНачалаСобытия);
		Если КадровыеДанные.Количество() > 0 Тогда
			Подразделение = КадровыеДанные[0].Подразделение;
			ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
			ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
			УстановитьПериодЗаКоторыйПредоставляетсяОтпуск();
		КонецЕсли;
	
	КонецЕсли;
	
	Объект.ФизическоеЛицо = ФизическоеЛицо;
	МесяцСобытия = '00010101';
	РассчитатьСреднийЗаработокИНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНДФЛ()
	
	ФиксРасчет = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Если ФиксРасчет.Количество() = 0 Тогда
		ОбъектФормы = РеквизитФормыВЗначение("Объект");
		Документы.Отпуск.ПересчитатьНДФЛ(Объект, ОбъектФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработокИНачисления()
	
	Если МесяцСобытия <> НачалоМесяца(Объект.ДатаНачалаСобытия) Тогда
		
		Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
		Объект.СреднийЗаработокОбщий.Очистить();
		
		НачалоПериода = ДобавитьМесяц(НачалоМесяца(Объект.ДатаНачалаСобытия), -12);
		НачалоПериода = Макс(НачалоПериода, НачалоМесяца(ДатаПриемаНаРаботу));
		
		ОкончаниеПериода = Макс(НачалоМесяца(Объект.ДатаНачалаСобытия) - 1, НачалоПериода);
		
		ДанныеДляРасчета = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(
			Объект.Сотрудник, Объект.Организация, НачалоПериода, ОкончаниеПериода);
		
		Для каждого ДанныеОВремени Из ДанныеДляРасчета.ДанныеОВремени Цикл
			СтрокаДанныхОВремени = Объект.ОтработанноеВремяДляСреднегоОбщий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхОВремени, ДанныеОВремени);
			СтрокаДанныхОВремени.Сотрудник = Объект.Сотрудник;
		КонецЦикла;
		
		Для каждого ДанныеОНачислениях Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
			СтрокаДанныеОНачислениях = Объект.СреднийЗаработокОбщий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныеОНачислениях, ДанныеОНачислениях);
			СтрокаДанныеОНачислениях.Сотрудник = Объект.Сотрудник;
		КонецЦикла;
		
		ТаблицыПоСотруднику = Новый Структура;
		ТаблицыПоСотруднику.Вставить("ДанныеОНачислениях", Объект.СреднийЗаработокОбщий);
		ТаблицыПоСотруднику.Вставить("ДанныеОВремени", Объект.ОтработанноеВремяДляСреднегоОбщий);
		
		ПараметрыПолученияДанныхСреднего = РасчетЗарплатыДляНебольшихОрганизаций.ПараметрыПолученияДанныхСреднегоОбщего();
		ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику", 	ТаблицыПоСотруднику); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода",  	НачалоПериода); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода",	ОкончаниеПериода); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", 		Объект.ДатаНачалаСобытия);
		
		ДанныеРасчетаСреднегоЗаработка = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего);
		
		Объект.СреднийЗаработок = ДанныеРасчетаСреднегоЗаработка.Итоги.СреднедневнойЗаработок;
		
		МесяцСобытия = НачалоМесяца(Объект.ДатаНачалаСобытия);
		
	КонецЕсли; 
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ(ВходящиеДанные = Неопределено, ФизическоеЛицо = Неопределено) Экспорт
	
	Если ВходящиеДанные = Неопределено Тогда
		Форма = ЭтотОбъект;
		ОбъектФормы    = Объект;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		Форма = ВходящиеДанные;
		ОбъектФормы    = ВходящиеДанные.Объект;
		ДокументОбъект = ВходящиеДанные.Объект;
	КонецЕсли;
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = ОбъектФормы.ПериодРегистрации;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = ОбъектФормы.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(ОбъектФормы, "Начисления", ДополнительныеСведения);
	АдресСведенийОбНДФЛ = УчетНДФЛФормы.СведенияОбНДФЛ(Форма);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам",   СведенияОДоходахНДФЛ.ВычетыКДоходам);
	ДанныеОбНДФЛ.Вставить("Сотрудник",        ОбъектФормы.Сотрудник);
	ДанныеОбНДФЛ.Вставить("Объект",           ДокументОбъект);
	ДанныеОбНДФЛ.Вставить("ИмяТипа",           "Отпуск");
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, Форма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	Объект.КорректировкиВыплаты.Загрузить(Параметр.КорректировкиВыплаты);
	ОтобразитьпризнакКорректировкиНДФЛ();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	ПриИзмененииПериодаОтпуска();
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Объект.ПланируемаяДатаВыплаты = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(Объект.ДатаНачалаСобытия, Объект.Организация);
		ПересчитатьНДФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЗаКоторыйПредоставляетсяОтпуск()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) Тогда
		ТекущийГод = Год(Объект.ДатаНачалаОсновногоОтпуска);
	Иначе
		ТекущийГод = Год(Объект.Дата);
	КонецЕсли;
	
	ДатаНачалаОтсчета = ДатаПриемаНаРаботу;
	Если Год(ДатаПриемаНаРаботу) < ТекущийГод Тогда
		
		ДеньПриема    = День(ДатаПриемаНаРаботу);
		МесяцПриема   = Месяц(ДатаПриемаНаРаботу);
		ПредыдущийГод = ТекущийГод-1;
		
		Если МесяцПриема = 2 И День(КонецМесяца(Дата(ПредыдущийГод, МесяцПриема, 1)))< ДеньПриема Тогда
			ДеньПриема = ДеньПриема - 1;
		КонецЕсли;
		
		ДатаНачалаОтсчета = Дата(ПредыдущийГод, МесяцПриема, ДеньПриема);
		
	КонецЕсли;
	
	Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = ДатаНачалаОтсчета;
	Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск  = ДобавитьМесяц(ДатаНачалаОтсчета, 12) - 86400;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере()
	
	Документы.Отпуск.РассчитатьНачисления(Объект, ДополнительныеПараметрыРасчета());
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыНДФЛ()
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	ОтобразитьПризнакКорректировкиНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПризнакКорректировкиНДФЛ()
	
	ФиксРасчетНДФЛ = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	ФиксРасчетКорректировки = Объект.КорректировкиВыплаты.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Элементы.ДекорацияНДФЛ.Видимость =
		ФиксРасчетНДФЛ.Количество() <> 0
		ИЛИ ФиксРасчетКорректировки.Количество() <> 0;
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	Возврат Документы.Отпуск.АдресПараметровВХранилище(Объект, ДополнительныеПараметрыРасчета());
	
КонецФункции

&НаСервере
Функция ДополнительныеПараметрыРасчета()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Подразделение",           Подразделение);
	ДополнительныеПараметры.Вставить("НачислениеОтпуск",        НачислениеОтпуск);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеРасчетаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(РезультатРедактирования) Тогда
		ЗаполнитьНачисленияПересчитатьНалог(РезультатРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПересчитатьНалог(АдресВХранилище)
	
	ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыОповещения.Объект, "СреднийЗаработок");
	
	Объект.ОтработанноеВремяДляСреднегоОбщий.Загрузить(ПараметрыОповещения.ОтработанноеВремяДляСреднегоОбщий);
	Объект.СреднийЗаработокОбщий.Загрузить(ПараметрыОповещения.СреднийЗаработокОбщий);
	Объект.Начисления.Загрузить(ПараметрыОповещения.Начисления);
	
	НачисленияПриОкончанииРедактированияНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговыеСуммыНачислений()
	
	КВыплате = Объект.Начисления.Итог("Результат") - Объект.НДФЛ.Итог("Налог");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаКлиенте
Функция КлючевыеРеквизитыЗаполнены()
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Необходимо заполнить обязательные для заполнения поля'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область ВыплатаДокумента

&НаКлиенте
Процедура ВопросПередВыплатойСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если ДокументПроведен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", Объект.Ссылка));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВыплаты();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыВыплаты()
	
	Если МожноСоздатьВедомостиПоРасчетномуДокументу(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",             Объект.Организация);
		ПараметрыФормы.Вставить("РасчетныйДокумент",       Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимВыплатыПоДокументу", Истина);
		ПараметрыФормы.Вставить("ПериодСобытия",           Объект.ПериодРегистрации);
		ПараметрыФормы.Вставить("ФизическоеЛицо",          Объект.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ДатаВыплаты",             Объект.ПланируемаяДатаВыплаты);
		
		ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.Форма", ПараметрыФормы, Объект.Ссылка); 
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент)
	
	МожноСоздатьВедомости = Истина;
	ВзаиморасчетыССотрудникамиПереопределяемый.МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент, МожноСоздатьВедомости);
	Возврат МожноСоздатьВедомости;
	
КонецФункции

#КонецОбласти

#КонецОбласти
