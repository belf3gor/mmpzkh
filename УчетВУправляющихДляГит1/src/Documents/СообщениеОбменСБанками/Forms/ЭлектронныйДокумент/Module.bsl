
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ЭлектронноеВзаимодействиеСлужебный.УстановитьУсловноеОформлениеДереваМаршрута(ЭтотОбъект, "ДеревоМаршрутаПодписания");
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НастройкаОбмена,
		"ПрограммаБанка, АутентификацияПоСертификату, Недействительна, ПометкаУдаления");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПрограммаБанка = РеквизитыНастройкиОбмена.ПрограммаБанка;
	АутентификацияПоСертификату = РеквизитыНастройкиОбмена.АутентификацияПоСертификату;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭДОтклонен = ЭДОтклонен(Объект.Статус);
		ОбновитьСтатус();
		Заголовок = Строка(Объект.Ссылка);
		ЗаполнитьТаблицуЭП();
		Если НЕ Отказ Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатков = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов(Ложь);
	Если Не ЗначениеЗаполнено(МассивОтпечатков) Тогда
		МассивОтпечатков = Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.МассивОтпечатков) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, Параметры.МассивОтпечатков);
	КонецЕсли;
	
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
	
	ТребуетсяПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(Объект.НастройкаОбмена, Объект.ВидЭД);
	
	Если Параметры.ТолькоЧтение = Истина ИЛИ РеквизитыНастройкиОбмена.Недействительна
		ИЛИ РеквизитыНастройкиОбмена.ПометкаУдаления Тогда
		Элементы.ГруппаОсновныхКоманд.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(Объект.НастройкаОбмена);
	ИспользоватьЖурналирование = ПараметрыЖурналирования.ИспользоватьЖурналирование;
	КаталогДляЖурналирования = ПараметрыЖурналирования.КаталогДляЖурналирования;
	
	Элементы.КомандаОтправитьЭД.Видимость = Ложь;

	ИзменитьВидимостьДоступность();
	
	Если НЕ ОбменСБанкамиСлужебныйВызовСервера.ПравоВыполненияОбмена() Тогда
		Элементы.КомандаОтправитьЭД.Доступность = Ложь;
		Элементы.КомандаПодтвердитьПлатеж.Доступность = Ложь;
		Элементы.КомандаПодписать.Доступность = Ложь;
		Элементы.ЗапроситьСостояниеЭД.Доступность = Ложь;
		Элементы.ОтправитьПовторно.Доступность = Ложь;
		Элементы.ОтозватьЭД.Доступность = Ложь;
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Элементы.КомандаПроверитьПодписи.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
			#Если ВебКлиент Тогда
				ПутьКФайлуПросмотра = АдресФайлаВХранилище;
			#Иначе
				ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ДДФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
				ДДФайла.Записать(ПутьКФайлуПросмотра);
			#КонецЕсли
			Оповещение = Новый ОписаниеОповещения;
			НачатьЗапускПриложения(Оповещение, ПутьКФайлуПросмотра);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ДополнительныеДанные") Тогда
		СохранитьЭДНаДиск(Неопределено);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		Для Каждого СообщениеОбмена Из Параметр Цикл
			Если СообщениеОбмена = Объект.Ссылка Тогда
				ОбновитьОтображениеДанных();
				ЗаполнитьТаблицуЭП();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ДокументУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭП

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти(Поле.Имя, "ЭПКомуВыданСертификат") > 0 Тогда
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке
				И СертификатыВФорматеX508() Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьЭДПродолжить", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ОбработатьОтклонениеЭД(Объект.Ссылка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ПрисоединенныйФайл = ПрисоединенныйФайл(Объект.Ссылка);;
		
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьВместеСЭП(ПрисоединенныйФайл, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЖурналуСобытийЭД(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сообщение", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийОбменСБанками.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ОбновитьДанныеФормыПослеПроверкиПодписей", ЭтотОбъект);

	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		МассивСообщенийОбмена = Новый Массив;
		МассивСообщенийОбмена.Добавить(Объект.Ссылка);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, Объект.НастройкаОбмена, МассивСообщенийОбмена);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		МассивПроверки = Новый Массив;
		МассивПроверки.Добавить(Объект.Ссылка);
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
		ПараметрыПроверки.Вставить("МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку", МассивПроверки);
		ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
		ПараметрыПроверки.Вставить("ОповеститьОПроверкеЭП");
		ОбменСБанкамиСлужебныйКлиент.НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(
			Неопределено, ПараметрыПроверки);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписиСообщенияОбменаЧерезВК(
			Оповещение, Объект.НастройкаОбмена, Объект.Ссылка);
	Иначе
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписиСообщенияОбмена(Оповещение, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументУчета, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОчиститьСообщения();
	ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(Объект.Ссылка);
	ОбменСБанкамиКлиент.ОтправитьПовторноЭД(ДокументУчета, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ОчиститьСообщения();
	ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(Объект.Ссылка);
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(ДокументУчета, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПлатеж(Команда)
	
	ОчиститьСообщения();
	
	РеквизитыНастройкиОбмена = Новый Структура("ПрограммаБанка, ИмяВнешнегоМодуля, ДополнительнаяОбработка");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(Объект.НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		
		Оповещение = Новый ОписаниеОповещения;
		МассивСообщенийОбмена = Новый Массив;
		МассивСообщенийОбмена.Добавить(Объект.Ссылка);
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьПодтверждениеДокументовСбербанк(Оповещение, Объект.НастройкаОбмена, МассивСообщенийОбмена);
		
	ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодтвердитьПлатежныйДокументПослеУстановкиСоединенияЧерезВК", ЭтотОбъект, РеквизитыНастройкиОбмена);
		ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеЧерезВК(Оповещение, Объект.НастройкаОбмена);
	Иначе
		ОбработчикПослеПодключения = Новый ОписаниеОповещения("ПодтвердитьПлатежЧерезДополнительнуюОбработку", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(
			ОбработчикПослеПодключения, РеквизитыНастройкиОбмена.ДополнительнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСостояниеЭД(Команда)
	
	Перем ДанныеАвторизации;
	
	ОчиститьСообщения();
	
	ВидЭДЗапросОСостоянии = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД");
	
	ТребуетсяПодпись = Ложь;
	
	ЕстьПоддержкаВидаЭД = ОбменСБанкамиСлужебныйВызовСервера.ЕстьПоддержкаВидаЭД(
		Объект.НастройкаОбмена, ВидЭДЗапросОСостоянии, ТребуетсяПодпись);
	
	Если ПрограммаБанка <> ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
		И НЕ ЕстьПоддержкаВидаЭД Тогда
		ТекстСообщения = НСтр("ru = 'Банк не поддерживает данный функционал'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПодпись Тогда
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
			Оповещение = Новый ОписаниеОповещения("СформироватьЗапросСостоянияЭДПослеПолученияОтпечатков", ЭтотОбъект);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
		ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			ЗапросСостоянияЭД = Неопределено;
			МассивСертификатов = Неопределено;
			СформироватьЗапросСостоянияЭД(
				Объект.НастройкаОбмена, Объект.Ссылка, Истина, ЗапросСостоянияЭД, Неопределено, МассивСертификатов);
			Если Не ЗначениеЗаполнено(ЗапросСостоянияЭД) Тогда
				Возврат;
			КонецЕсли;
			СоответствиеСертификатов = Новый Соответствие;
			Для Каждого СертификатСсылка Из МассивСертификатов Цикл
				СоответствиеСертификатов.Вставить(СертификатСсылка, Новый Структура("ПарольПолучен", Ложь));
			КонецЦикла;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
			
			Если ОбменСБанкамиСлужебныйКлиент.ЕстьСертификатССохраненнымПаролем(СоответствиеСертификатов) Тогда
				Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
					ДанныеАутентификации = Новый Структура;
					ДанныеАутентификации.Вставить("ВыбранныйСертификат", КлючЗначение.Ключ);
					ДанныеАутентификации.Вставить("ПарольСертификата", КлючЗначение.Значение.ПарольСертификата);
					ПодписатьЗапросСостоянияПослеВводаПароляЧерезВК(ДанныеАутентификации, ДополнительныеПараметры);
				КонецЦикла;
			Иначе
				Оповещение = Новый ОписаниеОповещения(
					"ПодписатьЗапросСостоянияПослеВводаПароляЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
				ВидОперации = НСтр("ru = 'Подписание электронного документа'");
				ОбменСБанкамиСлужебныйКлиент.ПолучитьПарольКСертификату(
					Оповещение, СоответствиеСертификатов, ВидОперации, ЗапросСостоянияЭД);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Если ИспользуетсяКриптография(Объект.НастройкаОбмена) Тогда
				Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияПослеАутентификацииНаСервереСбербанк", ЭтотОбъект);
				ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеИАутентифицироватьсяНаСервереЧерезТокенСбербанк(Оповещение, Объект.НастройкаОбмена);
			Иначе
				Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(Объект.НастройкаОбмена, Объект.Ссылка);
				ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Ложь);
				Если Результат.Статус = "Выполняется" Тогда
					ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
					Оповещение = Новый ОписаниеОповещения(
						"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
					ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
				Иначе
					ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗапросСостоянияЭД = Неопределено;
			СформироватьЗапросСостоянияЭД(Объект.НастройкаОбмена, Объект.Ссылка, Ложь, ЗапросСостоянияЭД);
			Если ЗначениеЗаполнено(ЗапросСостоянияЭД) Тогда
				Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
					ОтправитьЗапросОСостоянииЭДВБанк(ЗапросСостоянияЭД);
				Иначе // обмен через ВК
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
					ОтправитьЗапросСостоянияВБанкПослеПодписанияЧерезВК(Истина, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЭД(Команда)
	
	ОчиститьСообщения();
	
	ВидЭДЗапросНаОтзыв = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД");
	
	Если НЕ ОбменСБанкамиСлужебныйВызовСервера.ЕстьПоддержкаВидаЭД(Объект.НастройкаОбмена, ВидЭДЗапросНаОтзыв) Тогда
		ТекстСообщения = НСтр("ru = 'Банк не поддерживает данный функционал'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МожноОтозватьЭД(ПрограммаБанка, Объект.ВидЭД, Объект.Состояние) Тогда
		ОО = Новый ОписаниеОповещения("НачатьОтзывЭД", ЭтотОбъект);
		ЗаголовокОкна = НСтр("ru = 'Укажите причину отзыва электронного документа'");
		ПоказатьВводСтроки(ОО, , ЗаголовокОкна, , Истина);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЭД(Команда)
	
	ОбменСБанкамиКлиент.ОткрытьСписокЭД(ДокументУчета);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИнформациюДляТехническойПоддержки(Команда)
	
	СсылкаНаФайл = Неопределено; ИмяФайла = Неопределено;
	ПолучитьФайлДляТехническойПоддержки(Объект.Ссылка, Объект.ВидЭД, ПрограммаБанка, УникальныйИдентификатор, СсылкаНаФайл, ИмяФайла);
	
	Если СсылкаНаФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(СсылкаНаФайл, ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭтоСлужебныйДокумент(ВидЭД)
	
	ВидыСлужебныхДокументов = Новый Соответствие;
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.Квитанция, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников, Истина);
	ВидыСлужебныхДокументов.Вставить(Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту, Истина);
	
	Возврат ВидыСлужебныхДокументов.Получить(ВидЭД) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяКриптография(Знач НастройкаОбмена)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИспользуетсяКриптография");
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗапросСостоянияЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, ПараметрыОбработки) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	ИначеЕсли Не ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСертификатов = Неопределено;
	ЗапросСостоянияЭД = Неопределено;
	МассивСертификатов = Неопределено;
	СформироватьЗапросСостоянияЭД(
		Объект.НастройкаОбмена, Объект.Ссылка, Истина, ЗапросСостоянияЭД, МассивОтпечатковСертификатов, МассивСертификатов);
	
	Если ЗапросСостоянияЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(ЗапросСостоянияЭД);
	ПараметрыОбработчика = Новый Структура("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЗапросСостоянияЭДПослеПодписания", ЭтотОбъект, ПараметрыОбработчика);
	ОбменСБанкамиСлужебныйКлиент.Подписать(ОписаниеОповещения, МассивСообщенийОбмена, МассивСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияЭДПослеПодписания(Результат, ПараметрыОбработки) Экспорт

	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьЗапросОСостоянииЭДВБанк(ПараметрыОбработки.ЗапросСостоянияЭД);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросОСостоянииЭДВБанк(ЗапросСостоянияЭД)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЗапросСостоянияЭД", ЗапросСостоянияЭД);
	
	Если АутентификацияПоСертификату Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияОтпечатковЗапроситьСостояниеЭД", ЭтотОбъект, ПараметрыОбработки);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ДанныеАвторизации = Неопределено;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(Объект.НастройкаОбмена, ДанныеАвторизации) Тогда
			ОтправитьЗапросСтатусаЭДВБанк(ДанныеАвторизации, ПараметрыОбработки)
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСтатусаЭДВБанк", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, Объект.НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормыПослеПроверкиПодписей(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
	КонецЕсли;
	
	ЗаполнитьТаблицуЭП();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Функция СертификатыВФорматеX508()
	
	Если НЕ ЭП.Количество() ИЛИ (НЕ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
									И НЕ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныеПодписи.Сертификат
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОбменСБанкамиСлужебный.ПрисоединенныйФайл(Объект.Ссылка));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
	
	Попытка
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	МассивОтпечатков = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);

	ЕстьВозможностьПодписания = (ЗначениеЗаполнено(МассивОтпечатков)
									ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
									ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК
									ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
								И ДоступныДляПодписиСертификаты(МассивОтпечатков)
								И (Объект.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
									ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	
	МожноОтклонитьЭтотЭД = ОбменСБанкамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(Объект.Ссылка);
	Элементы.ОтозватьЭД.Видимость = МожноОтозватьЭД(ПрограммаБанка, Объект.ВидЭД, Объект.Состояние);
	
	Если НЕ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка
		И НЕ Элементы.Найти("Разобрать") = Неопределено Тогда
		Элементы.Разобрать.Видимость = Ложь;
	КонецЕсли;
	
	ЭДОтклонен = ЭДОтклонен(Объект.Статус);
	
	ДокументПодписывается = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(Объект.НастройкаОбмена, Объект.ВидЭД);
	
	КомандаПодписиОтправки = Элементы.КомандаОтправитьЭД;
	
	ПодготовленКОтправке = Объект.Статус = Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке
							ИЛИ (НЕ ДокументПодписывается И Объект.Статус = Перечисления.СтатусыОбменСБанками.Сформирован)
							ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.Подписан;
	
	Если ПодготовленКОтправке Тогда
		КомандаПодписиОтправки.Заголовок = НСтр("ru = 'Отправить'");
	КонецЕсли;
	
	Элементы.ГруппаМаршрутПодписания.Видимость = Ложь;
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если НЕ ЭтоСлужебныйДокумент(Объект.ВидЭД) Тогда
			КоличествоНеустановленныхПодписей =  ПолучитьКоличествоНеустановленныхПодписей();
			ЕстьОшибкаПередачи = (Объект.Статус = Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			Элементы.КомандаОтправитьЭД.Видимость = (КоличествоНеустановленныхПодписей = 1 И ЕстьВозможностьПодписания
													И НЕ ЭДОтклонен) ИЛИ ПодготовленКОтправке;
			Элементы.КомандаПодписать.Видимость = КоличествоНеустановленныхПодписей > 1 И ДокументПодписывается И ЕстьВозможностьПодписания;
			Элементы.ОтправитьПовторно.Видимость = ЕстьОшибкаПередачи;
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
			КомандаПодписиОтправки.Видимость = (ЕстьВозможностьПодписания И ТребуетсяПодпись) ИЛИ ПодготовленКОтправке;
		Иначе
			КомандаПодписиОтправки.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаМаршрутПодписания.Видимость = Объект.Состояние = Перечисления.СостоянияОбменСБанками.НаПодписи
			ИЛИ Объект.Состояние = Перечисления.СостоянияОбменСБанками.НеСформирован И ДокументПодписывается;
		
	КонецЕсли;
	
	Элементы.КомандаОтклонить.Доступность = НЕ ЭДОтклонен И МожноОтклонитьЭтотЭД;
	
	Если ЭДОтклонен Тогда
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.СтраницаОтклонение;
		Если Объект.Статус = Перечисления.СтатусыОбменСБанками.ОшибкаПередачи Тогда
			Элементы.ГруппаСтраницыПодвала.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.СтраницаСтатусов;
		Элементы.ГруппаСтраницыПодвала.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ РазрешеноОтклонитьЭД() Тогда
		Элементы.КомандаОтклонить.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
		Элементы.ЗапроситьСостояниеЭД.Видимость = Ложь;
	ИначеЕсли ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
		И Объект.Статус = Перечисления.СтатусыОбменСБанками.Отправлен Тогда // не известен внешний идентификатор для запроса статуса.
		Элементы.ЗапроситьСостояниеЭД.Видимость = Ложь;
	Иначе
		Элементы.ЗапроситьСостояниеЭД.Видимость = (Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
													ИЛИ Объект.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту)
												И (Объект.Статус = Перечисления.СтатусыОбменСБанками.Принят
													ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.Отправлен
													ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.Доставлен
													ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.Приостановлен
													ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден);
	КонецЕсли;
	
	Элементы.КомандаПодтвердитьПлатеж.Видимость = Объект.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден
		И ПрограммаБанка <> Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОткрытияЖурналаРегистрации(Элементы.ФормаПерейтиКЖурналуСобытий.Видимость);
	
	Элементы.ОткрытьСертификат.Видимость = СертификатыВФорматеX508();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭДОтклонен(Статус)
	
	ЭДОтклонен = Статус = Перечисления.СтатусыОбменСБанками.Отклонен
		ИЛИ Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком
		ИЛИ Статус = Перечисления.СтатусыОбменСБанками.ОшибкаПередачи
		ИЛИ Статус = Перечисления.СтатусыОбменСБанками.Аннулирован;
	Возврат ЭДОтклонен
	
КонецФункции

&НаСервере
Функция РазрешеноОтклонитьЭД()
	
	Если НЕ ЭтоСлужебныйДокумент(Объект.ВидЭД) Тогда
		Если Объект.Статус = Перечисления.СтатусыОбменСБанками.Подписан
			ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
			ИЛИ Объект.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатус()
	
	ДокументУчета = ОбменСБанкамиСлужебный.ОбъектПривязки(Объект.Ссылка);
	
	ТекстСтатусЭД = " " +  Объект.Статус + ", " + Формат(Объект.ДатаИзмененияСтатуса, "ДЛФ=");
	ТекстСостояния = ОбменСБанкамиКлиентСервер.ПолучитьТекстСостоянияЭД(ДокументУчета);
	ТекстДокументИБ = Строка(ДокументУчета);
	
	ТаблицаСтатусов = КартаСтатусовЭД();
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "СтатусыЭД");
	КонецЕсли;
	
	ОбновитьДеревоМаршрутаПодписания();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(Объект.Ссылка);

	ТаблицаЭП = РеквизитФормыВЗначение("ЭП");
	ТаблицаЭП.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭП.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ЭП.ПодписьВерна КАК ПодписьВерна,
	|	ЭП.ДатаПодписи КАК ДатаПодписи,
	|	ЭП.Отпечаток КАК Отпечаток,
	|	ЭП.ПорядковыйНомер КАК НомерСтроки,
	|	ЭП.УстановившийПодпись КАК УстановившийПодпись
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПрисоединенныйФайл);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаЭП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьСтатусПодписи(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЭП, "ЭП");
	ШаблонЗаголовка = НСтр("ru = 'Подписи %1и статусы'");
	
	Если ЗначениеЗаполнено(Объект.ПредставлениеПрогрессаПодписания) Тогда
		ТекстКоличестваПодписей = Объект.ПредставлениеПрогрессаПодписания + " ";
	ИначеЕсли ТаблицаЭП.Количество() > 0 Тогда
		ТекстКоличестваПодписей = "(" + ТаблицаЭП.Количество() + ") ";
	Иначе
		ТекстКоличестваПодписей = "";
	КонецЕсли;
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтрШаблон(ШаблонЗаголовка, ТекстКоличестваПодписей);
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КомандаПроверитьПодписи",
		"Видимость",
		ЭП.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.Представление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.Представление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивОтпечатков)
	
	УстановитьПривилегированныйРежим(Истина);

	ЗапросПоСертификатам = Новый Запрос;
	ТекстЗапросаПоМаршрутуПодписания = "";
	
	// Если документ в статусе "Сформирован", таблицы маршрута еще нет - поэтому надо ее просчитать заранее.
	Если Объект.Статус = Перечисления.СтатусыОбменСБанками.Сформирован Тогда
		ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(Объект.НастройкаОбмена, Объект.ВидЭД);
		Если ПараметрыОбмена.ТребуетсяПодпись И ЗначениеЗаполнено(ПараметрыОбмена.МаршрутПодписания) Тогда
			ТаблицаПодписания = ЭлектронноеВзаимодействиеСлужебный.ТаблицаМаршрутаПоПараметрам(Объект.Ссылка,
				ПараметрыОбмена.МаршрутПодписания);
		Иначе
			ТаблицаПодписания = ЭлектронноеВзаимодействиеСлужебный.ПустаяТаблицаТребованийКПодписанию();
			ТаблицаПодписания.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументСсылка.СообщениеОбменСБанками"));
		КонецЕсли;
		
		ЗапросПоСертификатам.УстановитьПараметр("ТаблицаПодписания", ТаблицаПодписания);
		ТекстЗапросаПоМаршрутуПодписания = 
		"ВЫБРАТЬ
		|	СостояниеПодписания.Объект,
		|	СостояниеПодписания.Текущий,
		|	СостояниеПодписания.Подписант,
		|	СостояниеПодписания.Сертификат
		|ПОМЕСТИТЬ СостояниеПодписания
		|ИЗ
		|	&ТаблицаПодписания КАК СостояниеПодписания
		|;";
	Иначе
		ТекстЗапросаПоМаршрутуПодписания = 
		"ВЫБРАТЬ
		|	СостояниеПодписания.Объект,
		|	СостояниеПодписания.Текущий,
		|	СостояниеПодписания.Подписант,
		|	СостояниеПодписания.Сертификат
		|ПОМЕСТИТЬ СостояниеПодписания
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписания
		|ГДЕ
		|	СостояниеПодписания.Объект = &СообщениеОбменаСБанком
		|;";
	КонецЕсли;
	
	
	ЗапросПоСертификатам.Текст = ТекстЗапросаПоМаршрутуПодписания + "
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП = ПодписываемыеВидыЭД.СертификатЭП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостояниеПодписания КАК СостояниеПодписанияЭД
	|		ПО СостояниеПодписанияЭД.Объект = &СообщениеОбменаСБанком
	|			И СостояниеПодписанияЭД.Текущий
	|				И СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|				И (СостояниеПодписанияЭД.Сертификат = НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП 
	|					ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И ПодписываемыеВидыЭД.ВидЭД = &ВидЭД
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отозван
	|	И &ПроверкаПользователя
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать";
	
	ЗапросПоСертификатам.УстановитьПараметр("ВидЭД", Объект.ВидЭД);
	ЗапросПоСертификатам.УстановитьПараметр("НастройкаОбмена", Объект.НастройкаОбмена);
	ЗапросПоСертификатам.УстановитьПараметр("СообщениеОбменаСБанком", Объект.Ссылка);
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());

	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		ЗапросПоСертификатам.Текст = СтрЗаменить(ЗапросПоСертификатам.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		ЗапросПоСертификатам.Текст = СтрЗаменить(ЗапросПоСертификатам.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
	КонецЕсли;
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И НЕ ЗапросПоСертификатам.Выполнить().Пустой() И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	ДанныеЭД = Документы.СообщениеОбменСБанками.ФайлДанныхЭД(Объект.Ссылка);
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
	Иначе
		Если ТипЗнч(ДанныеЭД) = Тип("Строка") Тогда
			АдресФайлаВХранилище = ДанныеЭД;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Прочитать();
	ВыполнитьПросмотрЭДИзБДСервер();
	ЗаполнитьТаблицуЭП();
	ОбновитьСтатус();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД)
	
	ПараметрыЭД = Новый Структура("ВидЭД, Направление, Организация, Банк, НастройкаОбмена, Статус");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭД, Объект);
	
	Настройки = Новый Структура("Направление, ВидЭД, ИспользоватьПодпись, ПрограммаБанка, Статус");
	
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");

	УстановитьПривилегированныйРежим(Истина);
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.НастройкаОбмена, "ПрограммаБанка");
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(Настройки, ПараметрыЭД);
	
	Настройки.ИспользоватьПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(Объект.НастройкаОбмена, Объект.ВидЭД);
	
	Настройки.ПрограммаБанка = ПрограммаБанка;
	
	УстановитьСтатусы(КартаСтатусовЭД, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ОбменСБанкамиСлужебный.МассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартаСтатусовЭД()
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Если Объект.Статус = Перечисления.СтатусыОбменСБанками.Отклонен Тогда
		
		Если Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыОбменСБанками.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыОбменСБанками.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыОбменСБанками.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Объект.Статус;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД);
		ПризнакПройден = Истина;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
			ТекСтрока.Пройден = ПризнакПройден;
			Если ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
				И Объект.Статус = Перечисления.СтатусыОбменСБанками.Отклонен Тогда
				ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Отклонен;
				Прервать;
			КонецЕсли;
			
			Если ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.Отправлен
				И Объект.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
				ТекСтрока.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком;
				Прервать;
			КонецЕсли;
			
			Если Объект.Статус = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(Отпечаток)
	
	СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификатаУстановленнойПодписи(
		Объект.Ссылка, Отпечаток, УникальныйИдентификатор);

	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураСертификата", СтруктураСертификата);
		ПараметрыФормы.Вставить("Отпечаток", Отпечаток);
		ПараметрыФормы.Вставить("АдресСертификата", СтруктураСертификата.АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоНеустановленныхПодписей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныеПодписи.Отпечаток
	|ПОМЕСТИТЬ УстановленныеПодписи
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|ПОМЕСТИТЬ ПодписываемыйВидЭД
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
	|	И НастройкиОбменСБанками.ИспользоватьЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыПодписейОрганизации.СертификатЭП) КАК КоличествоНеобходимыхПодписей
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	НЕ СертификатыПодписейОрганизации.СертификатЭП.Отпечаток В
	|				(ВЫБРАТЬ
	|					УстановленныеПодписи.Отпечаток
	|				ИЗ
	|					УстановленныеПодписи КАК УстановленныеПодписи)
	|	И СертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И ИСТИНА В
	|			(ВЫБРАТЬ
	|				ПодписываемыйВидЭД.ИспользоватьЭП
	|			ИЗ
	|				ПодписываемыйВидЭД КАК ПодписываемыйВидЭД)";
	Запрос.УстановитьПараметр("СообщениеОбмена", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ОбменСБанкамиСлужебный.ПрисоединенныйФайл(Объект.Ссылка));
	Запрос.УстановитьПараметр("ВидЭД", Объект.ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", Объект.НастройкаОбмена);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоНеобходимыхПодписей;
	
КонецФункции

&НаКлиенте
Процедура ПодтвердитьПлатежЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		ПарольУстановленРанее = Ложь;
		МассивСертификатов = Новый Массив;
		ДоступныеСертификаты = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(Объект.НастройкаОбмена);
		
		ДанныеСертификата = Неопределено;
		Для Каждого Элемент Из ДоступныеСертификаты Цикл
			ПарольУстановленРанее = ОбменСБанкамиСлужебныйКлиент.УстановленПарольСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, Элемент.Значение.ДанныеСертификата);
			Если ПарольУстановленРанее Тогда
				ВыбранныйСертификат = Элемент.Ключ;
				ДанныеСертификата = Элемент.Значение;
				ДанныеСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
				СертификатXML = Элемент.Значение.ДанныеСертификата;
				Прервать;
			КонецЕсли;
			МассивСертификатов.Добавить(Элемент.Ключ);
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПарольУстановленРанее", ПарольУстановленРанее);
		ДополнительныеПараметры.Вставить("СоотвСертификатовИИхСтруктур", ДоступныеСертификаты);
		ДополнительныеПараметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		
		Если ПарольУстановленРанее Тогда
			ПродолжитьПодтверждениеПлатежаПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(
				ДанныеСертификата, ДополнительныеПараметры);
		Иначе
			ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
			Если ОбменСБанкамиСлужебныйКлиент.ЕстьСертификатССохраненнымПаролем(ДоступныеСертификаты) Тогда
				ДополнительныеПараметры.Вставить("СоотвСертификатовИИхСтруктур", ДоступныеСертификаты);
			Иначе
				ДополнительныеПараметры.Вставить("СоотвСертификатовИИхСтруктур", ДоступныеСертификаты);
				Оповещение = Новый ОписаниеОповещения(
					"ПродолжитьПодтверждениеПлатежаПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку", ЭтотОбъект,
					ДополнительныеПараметры);
				ОбменСБанкамиСлужебныйКлиент.ПолучитьПарольКСертификату(Оповещение, ДоступныеСертификаты, ВидОперации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЭДПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ИзменитьВидимостьДоступность();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодтверждениеПлатежаПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ДоступныеСертификаты = ДополнительныеПараметры.СоотвСертификатовИИхСтруктур;
		ПарольУстановленРанее = ДополнительныеПараметры.ПарольУстановленРанее;
		ВнешнийПодключаемыйМодуль = ДополнительныеПараметры.ВнешнийПодключаемыйМодуль;
		
		ПарольСертификата = Неопределено;
		Результат.Свойство("ПарольСертификата", ПарольСертификата);
		Если ДоступныеСертификаты.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из ДоступныеСертификаты Цикл
				Если КлючИЗначение.Ключ = ВыбранныйСертификат Тогда
					ПараметрыСертификата = КлючИЗначение.Значение;
					СертификатXML = ПараметрыСертификата.ДанныеСертификата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДанныеСертификата = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, СертификатXML);

			Если ДанныеСертификата <> Неопределено Тогда
				ПараметрыВыполнения = Новый Структура;
				ПараметрыВыполнения.Вставить("ИмяПроцедуры", "ВыполнитьПодтверждениеПлатежаЧерезДополнительнуюОбработку");
				ПараметрыВыполнения.Вставить("Модуль", ЭтотОбъект);
				ПараметрыВыполнения.Вставить("СертификатXML", СертификатXML);
				ПараметрыВыполнения.Вставить("ПарольУстановленРанее", ПарольУстановленРанее);
				ПараметрыВыполнения.Вставить("ПарольСертификата", ПарольСертификата);
				ПараметрыВыполнения.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
				ПараметрыВыполнения.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
				ПараметрыВыполнения.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
				
				ТребуетсяУстановкаPINКода = ОбменСБанкамиСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
					ВнешнийПодключаемыйМодуль, ДанныеСертификата.ИдентификаторХранилища);
					
				Если ТребуетсяУстановкаPINКода = Ложь Тогда
					ПродолжитьПодтверждениеПлатежаЧерезДополнительнуюОбработку(ПараметрыВыполнения);
				ИначеЕсли ТребуетсяУстановкаPINКода = Истина Тогда
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьПодтверждениеПлатежаПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыполнения);
					ОбменСБанкамиСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
						Объект.НастройкаОбмена, ДанныеСертификата.ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодтверждениеПлатежаПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, ПараметрыВыполнения) Экспорт
	
	ВнешнийПодключаемыйМодуль = ПараметрыВыполнения.ВнешнийПодключаемыйМодуль;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановленPIN = ОбменСБанкамиСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ПараметрыВыполнения.ИдентификаторХранилища, PINКод);
		
	Если НЕ УстановленPIN Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПодтверждениеПлатежаЧерезДополнительнуюОбработку(ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодтверждениеПлатежаЧерезДополнительнуюОбработку(ПараметрыВыполнения)
	
	ПарольУстановленРанее = ПараметрыВыполнения.ПарольУстановленРанее;
	ВнешнийПодключаемыйМодуль = ПараметрыВыполнения.ВнешнийПодключаемыйМодуль;
	СертификатXML = ПараметрыВыполнения.СертификатXML;
	ПарольСертификата = ПараметрыВыполнения.ПарольСертификата;

	Если НЕ ПарольУстановленРанее Тогда
		ПарольУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, СертификатXML, ПарольСертификата, ПараметрыВыполнения.ВыбранныйСертификат);
		Если НЕ ПарольУстановлен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыполнитьПодтверждениеПлатежаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыполнения);
	ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеЧерезДополнительнуюОбработку(
		Оповещение, ВнешнийПодключаемыйМодуль, СертификатXML, Объект.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСтатусаЭДВБанк(ДанныеАутентификации, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ДанныеАвторизации", ДанныеАутентификации);
	ПараметрыПолучения.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
	ПараметрыПолучения.Вставить("СообщениеОбмена", ДополнительныеПараметры.ЗапросСостоянияЭД);
	РеквизитыНастройкиОбмена = Новый Структура("АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		Объект.НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения("ОтправитьЗапросСтатусаЭДВБанкПослеПолученияМаркера", ЭтотОбъект, ПараметрыПолучения);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
		Объект.НастройкаОбмена );
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСтатусаЭДВБанкПослеПолученияМаркера(Маркер, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИдентификаторСессии", Маркер);
	ДополнительныеПараметры.Вставить("ВидОперации", "ПолучениеСостоянияДокумента");

	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодтверждениеПлатежаЧерезДополнительнуюОбработку(АутентификацияВыполнена, ДополнительныеПараметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = ДополнительныеПараметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = ДополнительныеПараметры.СертификатXML;
	
	Оповещение = Новый ОписаниеОповещения;
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(Объект.Ссылка);
	
	ОбменСБанкамиСлужебныйКлиент.ПодтвердитьПлатежиЧерезДополнительнуюОбработку(Оповещение, МассивСообщенийОбмена,
		ДополнительныеПараметры.ВнешнийПодключаемыйМодуль, ДополнительныеПараметры.СертификатXML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковЗапроситьСостояниеЭД(Отпечатки, ПараметрыОбработки) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	ИначеЕсли Не ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	Соответствие = ОбменСБанкамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, Объект.НастройкаОбмена);
	
	Сертификат = Неопределено;
	МассивСертификатов = Новый Массив;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			МассивСертификатов.Очистить();
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МассивСертификатов.Количество() Тогда
			
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
		
		ПараметрыЗапросаМаркера = Новый Структура("НастройкаОбмена", Объект.НастройкаОбмена);
		ОбработчикПолученияМаркера = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ОбменСБанкамиСлужебныйКлиент, ПараметрыЗапросаМаркера);
		
		ОписаниеДанных.Вставить("Данные", ОбработчикПолученияМаркера);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеРасшифровкиМаркераБанкаОтправитьЗапросСостоянияЭД", ЭтотОбъект, ПараметрыОбработки);
					
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
			
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноОтозватьЭД(Знач ПрограммаБанка, Знач ВидЭД, Знач СостояниеЭД)
	
	Возврат (ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
			ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК)
		И (СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение
			ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение)
		И (ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			ИЛИ ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование
			ИЛИ ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты);
	
КонецФункции

&НаКлиенте
Процедура НачатьОтзывЭД(Строка, Параметры) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Отзыв = СформироватьЗапросНаОтзывЭД(Объект.НастройкаОбмена, Объект.Ссылка, Строка, ДокументУчета);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(Объект.Ссылка));
	ОбменСБанкамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ПодписатьОтправить", Отзыв);

КонецПроцедуры

&НаКлиенте
Процедура ПослеРасшифровкиМаркераБанкаОтправитьЗапросСостоянияЭД(Результат, ПараметрыОбработки) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		Результат.РасшифрованныеДанные);
	ПараметрыОбработки.Вставить("СообщениеОбмена", ПараметрыОбработки.ЗапросСостоянияЭД);
	ПараметрыОбработки.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
		
	ОтправитьЗапросСтатусаЭДВБанкПослеПолученияМаркера(ИдентификаторСессии, ПараметрыОбработки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЗапросНаОтзывЭД(Знач НастройкаОбмена, Знач СообщениеОбменаПлатежноеПоручение, Знач Причина, Знач ДокументУчета)
	
	ТекстОшибки = "";
	ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, ИдентификаторОрганизации, Банк, ВерсияФормата");
		
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	Попытка
		
		УникальныйИдЭД = Новый УникальныйИдентификатор;
			
		ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CancelationRequest", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(УникальныйИдЭД), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммы, , ТекстОшибки);
			
		Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
		Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
		ИДЭД = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбменаПлатежноеПоручение, "Идентификатор"));
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "ExtID", ИДЭД, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Reason", Причина, , ТекстОшибки);
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
		
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, "ОбменСБанками", СообщениеОбменаПлатежноеПоручение);
		Возврат Неопределено;
	КонецПопытки;

	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	Реквизиты.Вставить("Идентификатор", Строка(УникальныйИдЭД));
	Реквизиты.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	Реквизиты.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	Реквизиты.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	Реквизиты.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	Реквизиты.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	Реквизиты.Вставить("СообщениеРодитель", СообщениеОбменаПлатежноеПоручение);
	Реквизиты.Вставить("НастройкаОбмена", НастройкаОбмена);
	Реквизиты.Вставить("СсылкаНаОбъект", ДокументУчета);
	
	СообщениеЗапросНаОтзыв = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(Реквизиты, СообщениеЗапросНаОтзыв);
	
	Возврат СообщениеЗапросНаОтзыв;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьЗапросСостоянияЭД(Знач НастройкаОбмена, Знач СообщениеОбменаПлатежныйДокумент, Знач ТребуетсяПодпись, ЗапросСостоянияЭД, Знач МассивОтпечатковСертификатов = Неопределено, МассивСертификатов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТребуетсяПодпись Тогда
		// Определение сертификатов подписи
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.СертификатЭП КАК Сертификат,
		|	Сертификаты.СертификатЭП.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭД
		|		ПО (ВидыЭД.СертификатЭП = Сертификаты.СертификатЭП)
		|ГДЕ
		|	НЕ Сертификаты.СертификатЭП.ПометкаУдаления
		|	И НЕ Сертификаты.СертификатЭП.Отозван
		|	И ВидыЭД.ВидЭД = &ВидЭД
		|	И &ПроверкаПользователя
		|	И ВидыЭД.Использовать
		|	И Сертификаты.Ссылка = &НастройкаОбмена";
		
		Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
		Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.СертификатЭП.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
		КонецЕсли;
			
		ТаблицаСертификатов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи для документа Запрос состояния электронного документа.
										|Проверьте настройки обмена через сервис 1С:ДиректБанк.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
		
		МассивСертификатов = Новый Массив;
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда 
			Для Каждого Строка Из ТаблицаСертификатов Цикл
				МассивСертификатов.Добавить(Строка.Сертификат);
			КонецЦикла;
		ИначеЕсли МассивОтпечатковСертификатов <> Неопределено Тогда
			
			ОбменСБанкамиСлужебный.ДобавитьОтпечаткиСертификатовНаСервере(МассивОтпечатковСертификатов);
			
			Для Каждого Строка Из ТаблицаСертификатов Цикл
				Если МассивОтпечатковСертификатов.Найти(Строка.Отпечаток) <> Неопределено Тогда
					МассивСертификатов.Добавить(Строка.Сертификат);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'На компьютере не установлен ни один сертификат, указанный в настройке обмена.
										|Установите сертификаты или обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование электронного документа
	ТекстОшибки = "";
	ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, ИдентификаторОрганизации, Банк, Недействительна, ВерсияФормата");
	Если РеквизитыНастройкиОбмена.Недействительна Тогда
		ШаблонСообщения = НСтр("ru = 'Настройка обмена с банком %1 недействительна'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбменаПлатежныйДокумент, "Идентификатор");
	Попытка
		
		УникальныйИдЭД = Новый УникальныйИдентификатор;

		ЗапросОСостоянииЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatusRequest", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "id", Строка(УникальныйИдЭД), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "ExtID", ИдентификаторПлатежа, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "userAgent", ВерсияПрограммы, , ТекстОшибки);
		Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросОСостоянииЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстОшибки;
			Операция = НСтр("ru = 'Формирование электронного документа'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбменаПлатежныйДокумент);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЗапросОСостоянииЭД, Ложь);
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование электронного документа'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбменаПлатежныйДокумент);
		Возврат;
	КонецПопытки;
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Расширение", "xml");
	Реквизиты.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	Реквизиты.Вставить("Идентификатор", Строка(УникальныйИдЭД));
	Реквизиты.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	Реквизиты.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	Реквизиты.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	Реквизиты.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	Реквизиты.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	Реквизиты.Вставить("СообщениеРодитель", СообщениеОбменаПлатежныйДокумент);
	Реквизиты.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(Реквизиты, ЗапросСостоянияЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	КомментарийПриИзмененииНаСервере();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура КомментарийПриИзмененииНаСервере()
	
	ОбъектДокумента = Объект.Ссылка.ПолучитьОбъект();
	ОбъектДокумента.Комментарий = Объект.Комментарий;
	ОбъектДокумента.Записать();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьФайлДляТехническойПоддержки(Знач СообщениеОбмена, Знач ВидЭД, Знач ПрограммаБанка, Знач УникальныйИдентификатор, СсылкаНаФайл, ИмяФайла)
	
	ДвоичныеДанныеФайла = ОбменСБанкамиСлужебный.ДанныеФайлаДляТехническойПоддержки(СообщениеОбмена);
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружен присоединенный файл объекта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СообщениеОбмена);
		Возврат;
	КонецЕсли;
	СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ИмяФайла = Строка(СообщениеОбмена);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла) + ".zip";
	ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяФайла);
	
КонецПроцедуры

#Область ОбменЧерезВК

&НаКлиенте
Процедура ПодтвердитьПлатежныйДокументПослеУстановкиСоединенияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Или Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьДокументПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпоненту(Оповещение, ДополнительныеПараметры.ИмяВнешнегоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьДокументПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Подключено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат.ПодключаемыйМодуль;
	
	Оповещение = Новый ОписаниеОповещения;
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(Объект.Ссылка);
	
	ОбменСБанкамиСлужебныйКлиент.ПодтвердитьПлатежныеДокументыЧерезВК(
		ПодключаемыйМодуль, Оповещение, МассивСообщенийОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗапросСостоянияПослеВводаПароляЧерезВК(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьЗапросСостоянияВБанкПослеПодписанияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПодписатьЭДПоСертификатуЧерезВК(Оповещение, ДополнительныеПараметры.ЗапросСостоянияЭД,
		Объект.НастройкаОбмена, Результат.ВыбранныйСертификат, Результат.ПарольСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияВБанкПослеПодписанияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеОтправки = Новый Соответствие;
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(ДополнительныеПараметры.ЗапросСостоянияЭД);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	СтруктураДанных.Вставить("МассивСообщенийТребующихПодтверждение", Новый Массив);
	ДанныеОтправки.Вставить(Объект.НастройкаОбмена, СтруктураДанных);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСостояниеЭДПослеОтправкиЗапросаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ОтправитьДокументыЧерезВК(Оповещение, ДанныеОтправки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеЭДПослеОтправкиЗапросаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КоличествоОтправленных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СообщениеОбмена", ДополнительныеПараметры.ЗапросСостоянияЭД);
	ПараметрыФормы.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеСостоянияДокумента");
	
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Сбербанк

&НаКлиенте
Процедура ОтправитьЗапросСостоянияПослеАутентификацииНаСервереСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаСтатусаДокумента(Объект.Ссылка, Объект.НастройкаОбмена);
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСостоянияСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекстЗапроса, Объект.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСостоянияСбербанк(ТикетИзвещенияОСостоянииСбербанк, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(ТикетИзвещенияОСостоянииСбербанк) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
	ПараметрыФормы.Вставить("ИсходныйТикетСбербанк", ТикетИзвещенияОСостоянииСбербанк);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеСостоянияДокумента");
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСостоянияДокументаСбербанк", ЭтотОбъект);

	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, , , , , Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСостоянияДокументаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещенияНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаСтатусаДокумента(Знач СообщениеОбмена, Знач НастройкаОбмена)
	
	ВнешнийИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ВнешнийИдентификатор");
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ВнешнийИдентификатор);
	Попытка
		ТекстЗапроса = ОбменСБанкамиСлужебный.ТекстЗапросаСостоянияДокументовСбербанк(НастройкаОбмена, МассивИдентификаторов);
	Исключение
		ВидОперации = НСтр("ru = 'Формирование запроса статуса документа'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
	КонецПопытки;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Отправка запроса статуса платежа в Сбербанк'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, "ОбменСБанками",
			Объект.НастройкаОбмена);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				Возврат;
			Иначе
				РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
				ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
					Объект.НастройкаОбмена, РеквизитыНастройкиОбмена);
				Обработчик = Новый ОписаниеОповещения(
					"ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(
					Обработчик, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, Объект.НастройкаОбмена, Объект.НастройкаОбмена);
			КонецЕсли
		Иначе // запрос был отправлен
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидОперации", "ПолучениеСостоянияДокумента");
			ПараметрыФормы.Вставить("ИсходныйТикетСбербанк", РезультатОперации.Тикет);
			ПараметрыФормы.Вставить("СообщениеОбмена", Объект.Ссылка);
			ПараметрыФормы.Вставить("НастройкаОбмена", Объект.НастройкаОбмена);
			ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(Объект.НастройкаОбмена, Объект.Ссылка);
		Если Результат.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Истина);
			Оповещение = Новый ОписаниеОповещения(
				"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
		Иначе
			ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", Объект.НастройкаОбмена);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса платежа Сбербанка.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСтатусаПлатежногоДокумента", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбновитьДеревоМаршрутаПодписания()

	Если Объект.Состояние = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьДеревоМаршрутаНаФорме(ЭтотОбъект, Объект.Ссылка, 
			"ДеревоМаршрутаПодписания");
	Иначе
		ДеревоМаршрутаПодписания.ПолучитьЭлементы().Очистить();
		
		Если Объект.Статус = Перечисления.СтатусыОбменСБанками.Сформирован Тогда
			ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(Объект.НастройкаОбмена, Объект.ВидЭД);
			Если ПараметрыОбмена.ТребуетсяПодпись И ЗначениеЗаполнено(ПараметрыОбмена.МаршрутПодписания) Тогда
				ТаблицаМаршрута = ПараметрыОбмена.МаршрутПодписания.ТаблицаТребований.Выгрузить();
				
				ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьДеревоМаршрутаНаФорме(ЭтотОбъект, ТаблицаМаршрута, 
					"ДеревоМаршрутаПодписания");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрисоединенныйФайл(Знач СообщениеОбмена)
	
	Возврат ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);

КонецФункции

#КонецОбласти
