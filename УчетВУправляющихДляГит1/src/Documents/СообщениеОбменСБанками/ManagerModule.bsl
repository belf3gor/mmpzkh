#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает визуальное представление электронного документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - визуальное преставление электронного документа;
//  Неопределено - некорректное содержимое электронного документа.
//
Функция ФайлДанныхЭД(СообщениеОбмена) Экспорт

	ДопИнформацияПоЭД = ДанныеФайла(СообщениеОбмена);
	
	Если ДопИнформацияПоЭД <> Неопределено И ДопИнформацияПоЭД <> Неопределено
		И ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		ДанныеЭД.Записать(ИмяФайла);
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Направление, ВидЭД");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ОбменСБанкамиПереопределяемый.ЗаполнитьТабличныйДокумент(ИмяФайла, ТабличныйДокумент);
		Иначе
			ТабличныйДокумент = СформироватьПечатнуюФормуЭД(СообщениеОбмена, РеквизитыЭД.ВидЭД, ДанныеЭД);
		КонецЕсли;
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
			Возврат ТабличныйДокумент;
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечататьКарточкуЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЭД");
	Если ПечататьКарточкуЭД Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаЭД",
			НСтр("ru = 'Карточка электронного документа'"),
			ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, "КарточкаЭД"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭД");
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати);
		СинонимМакета = НСтр("ru = 'Электронный документ'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭД", СинонимМакета, ТабДок);
		Если ТипЗнч(ТабДок) = Тип("Строка") Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ТабДок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ВыгрузкаРезультата = ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос().Выгрузить();
	МассивСсылок = ВыгрузкаРезультата.ВыгрузитьКолонку("Документ");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	(СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.УдалитьУтвержден)
		|			ИЛИ СообщениеОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.УдалитьНаУтверждении))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщениеОбменСБанками.Дата УБЫВ";
	
	МассивСсылок2 = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок, МассивСсылок2, Истина);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
		Параметры.Очередь, "Документ.СообщениеОбменСБанками");
		
	ТаблицаСообщенийОбмена = Новый ТаблицаЗначений;
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.СообщениеОбменСБанками");
	ТаблицаСообщенийОбмена.Колонки.Добавить("СообщениеОбмена", ОписаниеТипов);
	
	Пока Выборка.Следующий() Цикл
		НовЗапись = ТаблицаСообщенийОбмена.Добавить();
		НовЗапись.СообщениеОбмена = Выборка.Ссылка;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСообщенийОбмена.СообщениеОбмена КАК СообщениеОбмена
	               |ПОМЕСТИТЬ СообщенияОбмена
	               |ИЗ
	               |	&ТаблицаСообщенийОбмена КАК ТаблицаСообщенийОбмена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СообщенияОбмена.СообщениеОбмена.НастройкаОбмена КАК НастройкаОбмена,
	               |	СообщенияОбмена.СообщениеОбмена КАК СообщениеОбмена
	               |ИЗ
	               |	СообщенияОбмена КАК СообщенияОбмена
	               |ИТОГИ ПО
	               |	НастройкаОбмена";
	Запрос.УстановитьПараметр("ТаблицаСообщенийОбмена", ТаблицаСообщенийОбмена);
	ВыборкаПоНастройкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНастройкам.Следующий() Цикл
		
		Если НЕ ОбновлениеИнформационнойБазы.ОбъектОбработан(ВыборкаПоНастройкам.НастройкаОбмена).Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылокДляОбработки = Новый Массив;
		ВыборкаСообщенийОбмена = ВыборкаПоНастройкам.Выбрать();
		Пока ВыборкаСообщенийОбмена.Следующий() Цикл
			МассивСсылокДляОбработки.Добавить(ВыборкаСообщенийОбмена.СообщениеОбмена);
		КонецЦикла;
		
		ЗаполнитьТаблицуМаршрутовПодписанияЭДОбработатьДанные(МассивСсылокДляОбработки);
		УдалитьСтатусУтвержден(МассивСсылокДляОбработки);
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, "Документ.СообщениеОбменСБанками");

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		Если ЗначениеЗаполнено(Данные.ПредставлениеДокумента) Тогда
			Представление = Данные.ПредставлениеДокумента;
		ИначеЕсли ЗначениеЗаполнено(Данные.ДатаНачала) Тогда
			ШаблонПредставления = НСтр("ru = '%1 с %2 по %3'");
			ДатаНачала = Формат(Данные.ДатаНачала, "ДЛФ=D");
			ДатаОкончания = Формат(Данные.ДатаОкончания, "ДЛФ=D");
			Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, ДатаНачала, ДатаОкончания);
		Иначе
			ШаблонПредставления = НСтр("ru = '%1 от %2'");
			ДатаОкончания = Формат(Данные.ДатаОкончания, "ДЛФ=D");
			Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, ДатаОкончания);
		КонецЕсли;
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.УведомлениеОЗачисленииВалюты Тогда
		ШаблонПредставления = НСтр("ru = '%1 от %2'");
		Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, Данные.Дата);
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо Тогда
		Если Данные.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			Шаблон = НСтр("ru = 'Входящее письмо из банка №%1 от %2'");
			Номер = Данные.НомерДокументаОтправителя;
		Иначе
			Шаблон = НСтр("ru = 'Исходящее письмо в банк №%1 от %2'");
			Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Данные.Номер);
		КонецЕсли;
		Представление = СтрШаблон(Шаблон, Номер, Данные.Дата);
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СправкаОПодтверждающихДокументах Тогда
		Шаблон = НСтр("ru = '%1 №%2 от %3'");
		Представление = СтрШаблон(Шаблон, Данные.ВидЭД, Данные.НомерДокументаОтправителя, Формат(Данные.Дата, "ДЛФ=D" ));
	Иначе
		Представление = Данные.ВидЭД;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Очистить();
	Поля.Добавить("ПредставлениеДокумента");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаОкончания");
	Поля.Добавить("ВидЭД");
	Поля.Добавить("Дата");
	Поля.Добавить("Направление");
	Поля.Добавить("НомерДокументаОтправителя");
	Поля.Добавить("Номер");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииОбработчиковОбновления

Функция ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос(МассивСсылокДляОбработки = Неопределено)
	
	// Выберем документы, которые сейчас находятся на подписи
	Запрос = Новый Запрос;
	
	ПодписываемыеПоМаршрутуВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
	Запрос.УстановитьПараметр("ПустойМаршрут", Справочники.МаршрутыПодписания.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодписываемыеПоМаршрутуВидыЭД", ПодписываемыеПоМаршрутуВидыЭД);
	Запрос.УстановитьПараметр("СостояниеНаПодписи", Перечисления.СостоянияОбменСБанками.НаПодписи);
	Запрос.УстановитьПараметр("СтатусЧастичноПодписан", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка КАК НастройкаОбмена,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.МаршрутПодписания
	|ПОМЕСТИТЬ НастройкиСМаршрутами
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент В(&ПодписываемыеПоМаршрутуВидыЭД)
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.ИспользоватьЭП
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Недействительна = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Документ,
	|	&ТекстПолей
	|ИЗ
	|	НастройкиСМаршрутами КАК НастройкиСМаршрутами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ПО НастройкиСМаршрутами.НастройкаОбмена = СообщениеОбменСБанками.НастройкаОбмена
	|			И НастройкиСМаршрутами.ВидЭД = СообщениеОбменСБанками.ВидЭД
	|			И (СообщениеОбменСБанками.Состояние = &СостояниеНаПодписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|			ПО СообщениеОбменСБанками.Ссылка = СостояниеПодписанияЭД.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ПО НастройкиСМаршрутами.НастройкаОбмена = НастройкиОбменСБанками.Ссылка
	|ГДЕ
	|	&УсловиеНаОбъекты
	|	И СостояниеПодписанияЭД.Объект ЕСТЬ NULL";
	Если МассивСсылокДляОбработки <> Неопределено Тогда
		Запрос.УстановитьПараметр("МассивСсылокДляОбработки", МассивСсылокДляОбработки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "СообщениеОбменСБанками.Ссылка В (&МассивСсылокДляОбработки)");
		
		// Добавим поля - это понадобится для обработки данных
		ТекстПолей = 
		"НастройкиСМаршрутами.ВидЭД,
		|	НастройкиСМаршрутами.МаршрутПодписания,
		|	НастройкиОбменСБанками.СертификатыПодписейОрганизации.(
		|		Ссылка,
		|		НомерСтроки,
		|		СертификатЭП КАК Сертификат,
		|		СертификатЭП.Отпечаток КАК Отпечаток
		|	),
		|	ВЫБОР
		|		КОГДА СообщениеОбменСБанками.Статус = &СтатусЧастичноПодписан
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЧастичноПодписан";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПолей", ТекстПолей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПолей", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьТаблицуМаршрутовПодписанияЭДОбработатьДанные(МассивСсылокДляОбработки)

	// Выберем документы, которые сейчас находятся на подписи
	РезультатЗапроса = ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос(МассивСсылокДляОбработки);
	ВыборкаСообщений = РезультатЗапроса.Выбрать();
	Пока ВыборкаСообщений.Следующий() Цикл
		ИспользуемыеСертификаты = Новый Массив;
		ОтпечаткиСертификатов = Новый Соответствие;
		ВыборкаСертификатов = ВыборкаСообщений.СертификатыПодписейОрганизации.Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			ИспользуемыеСертификаты.Добавить(ВыборкаСертификатов.Сертификат);
			ОтпечаткиСертификатов.Вставить(ВыборкаСертификатов.Отпечаток, ВыборкаСертификатов.Сертификат);
		КонецЦикла;
		
		ПредставлениеПрогрессаПодписания = "";
		ВесМаршрута = 0;
		
		НачатьТранзакцию();
		
		Попытка
			// Сформируем первичный маршрут подписания
			ЭлектронноеВзаимодействиеСлужебный.СформироватьМаршрутПодписанияЭД(ВыборкаСообщений.Документ, 
				ВыборкаСообщений.МаршрутПодписания,,, ВесМаршрута);
				
			// Если документ уже подписан одной подписью, обновим таблицу подписания	
			Если ВыборкаСообщений.ЧастичноПодписан Тогда
				ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(ВыборкаСообщений.Документ);
				ВыборкаПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
				Для Каждого СтруктураПодписи Из ВыборкаПодписей Цикл
					СертификатПодписи = ОтпечаткиСертификатов.Получить(СтруктураПодписи.Отпечаток);
					Если ЗначениеЗаполнено(СертификатПодписи) Тогда
						ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(ВыборкаСообщений.Документ, СертификатПодписи,
							ВесМаршрута);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Сформируем и запишем представление прогресса подписания
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СостоянияОбменСБанками.СсылкаНаОбъект
			               |ИЗ
			               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
			               |ГДЕ
			               |	СостоянияОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
			Запрос.УстановитьПараметр("СообщениеОбмена", ВыборкаСообщений.Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ДокументОбъект = ВыборкаСообщений.Документ.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОбновитьСостояниеОбъектовИБ");
			ДокументОбъект.ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
				ВыборкаСообщений.Документ, ВесМаршрута);
				
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.КонфигурацияИспользуетНесколькоЯзыков() Тогда	
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.СостоянияОбменСБанками.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
					НаборЗаписей.Прочитать();
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.ПредставлениеСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", 
							ДокументОбъект.Состояние, ДокументОбъект.ПредставлениеПрогрессаПодписания);
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %1 по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаСообщений.Документ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СообщениеОбменСБанками, ВыборкаСообщений.Документ, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьСтатусУтвержден(МассивСсылокДляОбработки)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылокДляОбработки, "Статус, Состояние");
	
	Для Каждого КлючЗначение Из ЗначенияРеквизитов Цикл
		
		Если КлючЗначение.Значение.Состояние = Перечисления.СостоянияОбменСБанками.УдалитьНаУтверждении
			ИЛИ КлючЗначение.Значение.Статус = Перечисления.СтатусыОбменСБанками.УдалитьУтвержден Тогда

			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.СообщениеОбменСБанками");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", КлючЗначение.Ключ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", КлючЗначение.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.СообщениеОбменСБанками, КлючЗначение.Ключ, ТекстСообщения);
				Продолжить;
			КонецПопытки;

			ОбъектОбработки = КлючЗначение.Ключ.ПолучитьОбъект();
			
			Если ОбъектОбработки.Состояние = Перечисления.СостоянияОбменСБанками.УдалитьНаУтверждении Тогда
				ОбъектОбработки.Состояние = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка;
			КонецЕсли;
			
			Если ОбъектОбработки.Статус = Перечисления.СтатусыОбменСБанками.УдалитьУтвержден Тогда
				ОбъектОбработки.Статус = Перечисления.СтатусыОбменСБанками.Сформирован;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОбработки);
			
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", КлючЗначение.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СообщениеОбменСБанками, , ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

Функция ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, СообщатьОбОшибке = Истина)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, СообщатьОбОшибке)
	
КонецФункции

Функция ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, ИмяМакета ="КарточкаЭД")
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщенияОбмена.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.Наименование КАК НаименованиеФайла,
	|	ВЫБОР
	|		КОГДА СообщенияОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|			ТОГДА СообщенияОбмена.Банк
	|		ИНАЧЕ СообщенияОбмена.Организация
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА СообщенияОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|			ТОГДА СообщенияОбмена.Организация
	|		ИНАЧЕ СообщенияОбмена.Банк
	|	КОНЕЦ КАК Получатель,
	|	СообщенияОбмена.ВидЭД КАК ВидЭДСсылка,
	|	ПРЕДСТАВЛЕНИЕ(СообщенияОбмена.ВидЭД) КАК ВидДокумента,
	|	"""" КАК ТипДокумента,
	|	СообщенияОбмена.Идентификатор КАК Идентификатор,
	|	"""" КАК НомерЭД,
	|	"""" КАК ДатаЭД,
	|	"""" КАК СопроводительнаяЗаписка,
	|	ПрисоединенныеФайлы.Расширение КАК Расширение,
	|	СообщенияОбмена.Банк КАК Банк,
	|	СообщенияОбмена.Организация КАК Организация,
	|	СообщенияОбмена.Направление КАК НаправлениеЭД,
	|	СообщенияОбмена.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ втСообщенияОбмена
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщенияОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО СообщенияОбмена.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	СообщенияОбмена.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
	|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ВЫРАЗИТЬ(ЭлектронныеПодписи.ПодписанныйОбъект КАК Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы).ВладелецФайла КАК Ссылка,
	|	ЭлектронныеПодписи.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ ВтОтпечатки
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ВЫРАЗИТЬ(ЭлектронныеПодписи.ПодписанныйОбъект КАК Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы).ВладелецФайла В
	|			(ВЫБРАТЬ
	|				втСообщенияОбмена.Ссылка
	|			ИЗ
	|				втСообщенияОбмена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИспользоватьЭП КАК ТребуетсяПодпись,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Организация КАК ПодписьОрганизации,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Банк КАК ПодписьБанка,
	|	втСообщенияОбмена.Ссылка КАК Ссылка,
	|	втСообщенияОбмена.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втСообщенияОбмена.НаправлениеЭД КАК НаправлениеЭД
	|ИЗ
	|	втСообщенияОбмена КАК втСообщенияОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|		ПО втСообщенияОбмена.НастройкаОбмена = НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка
	|			И (НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = втСообщенияОбмена.ВидЭДСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭД.НаименованиеФайла КАК НаименованиеФайла,
	|	втЭД.Отправитель КАК Отправитель,
	|	втЭД.Получатель КАК Получатель,
	|	втЭД.ВидДокумента КАК ВидДокумента,
	|	втЭД.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втЭД.ТипДокумента КАК ТипДокумента,
	|	втЭД.Идентификатор КАК Идентификатор,
	|	втЭД.НомерЭД КАК НомерЭД,
	|	втЭД.ДатаЭД КАК ДатаЭД,
	|	втЭД.СопроводительнаяЗаписка КАК СопроводительнаяЗаписка,
	|	втЭД.Расширение КАК Расширение,
	|	втЭД.Банк КАК Банк,
	|	втЭД.Организация КАК Организация,
	|	втЭД.НаправлениеЭД КАК НаправлениеЭД,
	|	втЭД.Ссылка КАК Ссылка
	|ИЗ
	|	втСообщенияОбмена КАК втЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтпечатки.ПодписьВерна КАК ПодписьВерна,
	|	ВтОтпечатки.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ВтОтпечатки.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ВтОтпечатки.Ссылка КАК Ссылка
	|ИЗ
	|	ВтОтпечатки КАК ВтОтпечатки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивДанныхПечати = Новый Массив;
	
	ЗаполнитьДанныеПечатнойФормы(МассивРезультатов, МассивДанныхПечати);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка()));

	ТабДок = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПечатнойФормы Из МассивДанныхПечати Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьШапка);
		
		Если ДанныеПечатнойФормы.Свойство("Подписи") Тогда
			
			ОбластьТребуемыеПодписи = Макет.ПолучитьОбласть("ТребуемыеПодписи");
			ОбластьТребуемыеПодписи.Параметры.Заполнить(ДанныеПечатнойФормы.Подписи);
			ТабДок.Вывести(ОбластьТребуемыеПодписи);
			
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Сертификаты") Тогда
			
			ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
			ТабДок.Вывести(ОбластьСертификаты);
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Для Каждого ТекСтрока Из ДанныеПечатнойФормы.Сертификаты Цикл
				ОбластьСертификатыСтрока.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСертификатыСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьПодпись);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатнойФормы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати)
	
	ТабДок = ФайлДанныхЭД(СсылкаНаЭД);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, СсылкаНаЭД);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеФайла(Знач СообщениеОбмена)
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, , Истина);
		Возврат ДанныеФайла;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭД(СообщениеОбмена, ВидЭД, ДанныеФайла)
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	ИдентификаторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
	
	МакетИдентификатораДокумента = ПолучитьОбщийМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ВидЭД <> Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ВидЭД, ДанныеФайла);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		МассивСообщенийОбмена = Новый Массив;
		МассивСообщенийОбмена.Добавить(СообщениеОбмена);
		ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(МассивСообщенийОбмена, ДеревоРазбора);
		ДанныеЭДДляПечати = ПолучитьДанныеВыпискиДляПечати(ДеревоРазбора);
		ЗаполнитьТабличныйДокументВыпискиБанка(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		НазваниеМакета = СтрШаблон("ЭД_ЗапросОСостоянииЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		НазваниеМакета = СтрШаблон("ЭД_ЗапросЗонд_%1", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
		НазваниеМакета = СтрШаблон("ЭД_ЗапросНаОтзыв_%1", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеПлатежногоПорученияВВалютеДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументПорученияНаПереводВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеПорученияНаПокупкуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументПорученияНаПокупкуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеПорученияНаПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументПорученияНаПродажуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты Тогда
		ДанныеЭДДляПечати = ПолучитьДанныеРаспоряженияНаОбязательнуюПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
		ЗаполнитьТабличныйДокументРаспоряженияНаОбязательнуюПродажуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	КонецЕсли;
		
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
	ОбластьЯчеек.СоздатьФорматСтрок();
	ОбщийТабДок.Вывести(ТабличныйДокумент);
	
	ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
	ОбщийТабДок.АвтоМасштаб = Истина;
	ОбщийТабДок.ОтображатьЗаголовки = Ложь;
	ОбщийТабДок.ОтображатьСетку = Ложь;
	ОбщийТабДок.ТолькоПросмотр = Истина;
	
	Возврат ОбщийТабДок;
	
КонецФункции

Функция ДанныеДляПечати(СтрокаОбъекта)
	
	ДанныеДляОбъекта = Новый Структура;
	
	Для Каждого РеквизитСтроки Из СтрокаОбъекта.Строки Цикл
		ДанныеДляОбъекта.Вставить(РеквизитСтроки.Реквизит,РеквизитСтроки.ЗначениеРеквизита);
	КонецЦикла;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеТребование_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеТребование");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	Если Реквизиты.УсловиеОплаты = "1" Тогда
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '1 - заранее данный акцепт плательщика'");
	Иначе
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '2 - требуется получение акцепта плательщика'");
	КонецЕсли;
	
	ОбластьМакета.Параметры.СуммаПрописью = ЧислоПрописью(
		Реквизиты.Сумма, "Л=ru_RU; ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ТРЕБОВАНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если Реквизиты.Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьШтамп = Ложь;
	
	ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ДополнительныеДанные");
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ЗначенияРеквизитов = ДополнительныеРеквизиты.Получить();
		Если ЗначениеЗаполнено(ЗначенияРеквизитов) И ЗначенияРеквизитов.Свойство("ДанныеШтампа") Тогда
			ОбластьШтамп = Макет.ПолучитьОбласть("ПечатьСоШтампом");
			ОбластьШтамп.Параметры.Заполнить(ЗначенияРеквизитов.ДанныеШтампа);
			ТабличныйДокумент.Вывести(ОбластьШтамп);
			ЕстьШтамп = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьШтамп Тогда
		ОбластьШтамп = Макет.ПолучитьОбласть("ПечатьБезШтампа");
		ТабличныйДокумент.Вывести(ОбластьШтамп);
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПорученияНаПереводВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПереводВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.ВидПлатежа = "Срочный" Тогда
		ОбластьШапка.Параметры.Срочный = "X";
	Иначе
		ОбластьШапка.Параметры.Стандартный = "X";
	КонецЕсли;
	
	Если ДанныеПечати.ТипКомиссии = "BEN" Тогда
		ОбластьШапка.Параметры.BEN = "X";
	ИначеЕсли ДанныеПечати.ТипКомиссии = "SHA" Тогда
		ОбластьШапка.Параметры.SHA = "X";
	ИначеЕсли ДанныеПечати.ТипКомиссии = "OUR" Тогда
		ОбластьШапка.Параметры.OUR = "X";
	КонецЕсли;

		
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	Если ДанныеПечати.КодыВидовВалютныхОпераций.Количество() Тогда
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("КодыВидовВалютнойОперацииШапка");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		Для Каждого Код Из ДанныеПечати.КодыВидовВалютныхОпераций Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Код);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеПоручение_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");
	
	ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ДополнительныеДанные");
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ЗначенияДополнительныхРеквизитов = ДополнительныеРеквизиты.Получить();
	КонецЕсли;
	
	// Для Сбербанка даты берутся из квитанции
	Квитанция = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
		СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.Квитанция, Ложь);
	Если ЗначениеЗаполнено(Квитанция) Тогда
		ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(Квитанция);
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеЭД);
		Если НЕ Результат = Неопределено Тогда
			ДеревоРазбора = Результат.ДеревоРазбора;
			СтрокаОбъекта = Результат.СтрокаОбъекта;
			ОбластьМакета.Параметры.ДатаПоступления = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
			ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов) Тогда  // данные берутся из дополнительного реквизита электронного документа
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		КодВалюты = КодВалютыБанковскогоСчета(Реквизиты.ПлательщикРасчСчет);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				Реквизиты.Сумма, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);
	
	Если Реквизиты.Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов)
		И ЗначенияДополнительныхРеквизитов.Свойство("ДанныеШтампа") Тогда
		ОбластьШтамп = Макет.ПолучитьОбласть("Штамп");
		ОбластьШтамп.Параметры.Заполнить(ЗначенияДополнительныхРеквизитов.ДанныеШтампа);
		ТабличныйДокумент.Вывести(ОбластьШтамп);
	КонецЕсли;

КонецПроцедуры


Процедура ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ЗапросВыписки_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ДанныеШапки = ДанныеПечати.Шапка;
	
	ОбластьЗаголовок.Параметры.ДатаНачалаПериода    = Формат(ДанныеШапки.ДатаНачала, "ДЛФ=D");
	ОбластьЗаголовок.Параметры.ДатаОкончанияПериода = Формат(ДанныеШапки.ДатаКонца,  "ДЛФ=D");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	РасчетныеСчета = ДанныеПечати.РасчетныеСчета;
	
	ОбластьСтрокаРасчетныйСчет = Макет.ПолучитьОбласть("СтрокаТЧ");
	
	Для Каждого СтрокаТЧ Из РасчетныеСчета Цикл
		ОбластьСтрокаРасчетныйСчет.Параметры.Заполнить(СтрокаТЧ);
		ТабличныйДокумент.Вывести(ОбластьСтрокаРасчетныйСчет);
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, Реквизиты)

	НазваниеМакета = СтрШаблон("ЭД_ИзвещениеОСостоянииЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Реквизиты.ЕстьОшибка Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Статус");
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, Реквизиты, НазваниеМакета)

	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_Квитанция_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьТикетСББОЛ = Макет.ПолучитьОбласть("ТикетСББОЛ");
	ОбластьТикетСББОЛ.Параметры.ТикетСББОЛ = ДанныеПечати.ТикетСББОЛ;
	ТабличныйДокумент.Вывести(ОбластьТикетСББОЛ);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСозданияКвитка) Тогда
		ОбластьДатаСозданияКвитка = Макет.ПолучитьОбласть("ДатаСозданияКвитка");
		ОбластьДатаСозданияКвитка.Параметры.ДатаСозданияКвитка = ДанныеПечати.ДатаСозданияКвитка;
		ТабличныйДокумент.Вывести(ОбластьДатаСозданияКвитка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.КодСостоянияДокумента) Тогда
		ОбластьКодСостоянияДокумента = Макет.ПолучитьОбласть("КодСостоянияДокумента");
		ОбластьКодСостоянияДокумента.Параметры.КодСостоянияДокумента = ДанныеПечати.КодСостоянияДокумента;
		ТабличныйДокумент.Вывести(ОбластьКодСостоянияДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторОрганизации) Тогда
		ОбластьИдентификаторОрганизации = Макет.ПолучитьОбласть("ИдентификаторОрганизации");
		ОбластьИдентификаторОрганизации.Параметры.ИдентификаторОрганизации = ДанныеПечати.ИдентификаторОрганизации;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = Макет.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ДанныеПечати.ИдентификаторДокумента;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
			ОбластьБанковскиеДаты = Макет.ПолучитьОбласть("БанковскиеДаты");
			ОбластьБанковскиеДаты.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьБанковскиеДаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) Тогда
		ОбластьДатаСписанияСоСчетаПлательщика = Макет.ПолучитьОбласть("ДатаСписанияСоСчетаПлательщика");
		ОбластьДатаСписанияСоСчетаПлательщика.Параметры.ДатаСписанияСоСчетаПлательщика = ДанныеПечати.ДатаСписанияСоСчетаПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаСписанияСоСчетаПлательщика);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) Тогда
		ОбластьДатаПостановкиВКартотеку = Макет.ПолучитьОбласть("ДатаПостановкиВКартотеку");
		ОбластьДатаПостановкиВКартотеку.Параметры.ДатаПостановкиВКартотеку = ДанныеПечати.ДатаПостановкиВКартотеку;
		ТабличныйДокумент.Вывести(ОбластьДатаПостановкиВКартотеку);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) Тогда
		ОбластьДатаОтметкиБанкомПлательщика = Макет.ПолучитьОбласть("ДатаОтметкиБанкомПлательщика");
		ОбластьДатаОтметкиБанкомПлательщика.Параметры.ДатаОтметкиБанкомПлательщика = ДанныеПечати.ДатаОтметкиБанкомПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкомПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) Тогда
		ОбластьДатаПоступленияВБанкПлательщика = Макет.ПолучитьОбласть("ДатаПоступленияВБанкПлательщика");
		ОбластьДатаПоступленияВБанкПлательщика.Параметры.ДатаПоступленияВБанкПлательщика = ДанныеПечати.ДатаПоступленияВБанкПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаПоступленияВБанкПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) Тогда
		ОбластьДатаПеречисленияПлатежа = Макет.ПолучитьОбласть("ДатаПеречисленияПлатежа");
		ОбластьДатаПеречисленияПлатежа.Параметры.ДатаПеречисленияПлатежа = ДанныеПечати.ДатаПеречисленияПлатежа;
		ТабличныйДокумент.Вывести(ОбластьДатаПеречисленияПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
		ОбластьДатаОтметкиБанкаПолучателя = Макет.ПолучитьОбласть("ДатаОтметкиБанкаПолучателя");
		ОбластьДатаОтметкиБанкаПолучателя.Параметры.ДатаОтметкиБанкаПолучателя = ДанныеПечати.ДатаОтметкиБанкаПолучателя;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкаПолучателя);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) ИЛИ ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьСообщениеИзБанка = Макет.ПолучитьОбласть("СообщениеИзБанка");
		ТабличныйДокумент.Вывести(ОбластьСообщениеИзБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) Тогда
		ОбластьАвторСообщения = Макет.ПолучитьОбласть("АвторСообщения");
		ОбластьАвторСообщения.Параметры.АвторСообщения = ДанныеПечати.АвторСообщения;
		ТабличныйДокумент.Вывести(ОбластьАвторСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьТекстСообщения = Макет.ПолучитьОбласть("ТекстСообщения");
		ОбластьТекстСообщения.Параметры.СообщениеИзБанка = ДанныеПечати.СообщениеИзБанка;
		ТабличныйДокумент.Вывести(ОбластьТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполнения = Новый Структура;

	ТикетСББОЛ = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
	ДанныеЗаполнения.Вставить("ТикетСББОЛ",ТикетСББОЛ);
	ДатаСозданияКвитка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
	ДанныеЗаполнения.Вставить("ДатаСозданияКвитка", ДатаСозданияКвитка);
	КодСостоянияДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
	ДанныеЗаполнения.Вставить("КодСостоянияДокумента", КодСостоянияДокумента);
	ИдентификаторОрганизации = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторОрганизации");
	ДанныеЗаполнения.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	ДанныеЗаполнения.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ДатаСписанияСоСчетаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
	ДанныеЗаполнения.Вставить("ДатаСписанияСоСчетаПлательщика", ДатаСписанияСоСчетаПлательщика);
	ДатаОтметкиБанкомПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкомПлательщика", ДатаОтметкиБанкомПлательщика);
	ДатаПостановкиВКартотеку = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
	ДанныеЗаполнения.Вставить("ДатаПостановкиВКартотеку", ДатаПостановкиВКартотеку);
	ДатаПоступленияВБанкПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
	ДанныеЗаполнения.Вставить("ДатаПоступленияВБанкПлательщика", ДатаПоступленияВБанкПлательщика);
	ДатаПеречисленияПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
	ДанныеЗаполнения.Вставить("ДатаПеречисленияПлатежа", ДатаПеречисленияПлатежа);
	ДатаОтметкиБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкаПолучателя");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкаПолучателя", ДатаОтметкиБанкаПолучателя);
	АвторСообщения = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
	ДанныеЗаполнения.Вставить("АвторСообщения", АвторСообщения);
	СообщениеИзБанка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
	ДанныеЗаполнения.Вставить("СообщениеИзБанка", СообщениеИзБанка);
		
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьДанныеВыпискиДляПечати(ДеревоДанных)
	
	МассивВозврата = Новый Массив;
	
	СтрокаТаблицыВыписок = ДеревоДанных.Строки.Найти("Выписки", "ПолныйПуть");
	
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		
		Если Выписка.Значение = "" Тогда
			Продолжить;
		КонецЕсли;

		ДанныеВыписки = Новый Структура;
		Организация = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Организация");
		НаименованиеОрганизации = "";
		Если Организация = Истина Тогда
			НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
				Выписка, "Выписки.НомерСтроки.Организация.НаименованиеМеждународное");
			Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
					Выписка, "Выписки.НомерСтроки.Организация.Наименование");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
			ДанныеВыписки.Вставить("Организация", НаименованиеОрганизации);
		Иначе
			ДанныеВыписки.Вставить("Организация", НСтр("ru = '<не указано>'"));
		КонецЕсли;
		
		Банк = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк");
		НаименованиеБанка = "";
		Если Банк = Истина Тогда
			НаименованиеБанкаМеждународное = ЗначениеРеквизитаВДереве(
				Выписка, "Выписки.НомерСтроки.Банк.НаименованиеМеждународное");
			НаименованиеБанкаЛокальное = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.Наименование");
			НаименованиеБанка = ?(ЗначениеЗаполнено(НаименованиеБанкаЛокальное), НаименованиеБанкаЛокальное,
				НаименованиеБанкаМеждународное);
			БИКБанка = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.БИК");
		КонецЕсли;
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			ДанныеВыписки.Вставить("Банк", НаименованиеБанка);
		ИначеЕсли ЗначениеЗаполнено(БИКБанка) Тогда
			ДанныеВыписки.Вставить("Банк", БИКБанка);
		Иначе
			ДанныеВыписки.Вставить("Банк", НСтр("ru = '<не указано>'"));
		КонецЕсли;
		
		ДанныеВыписки.Вставить("НомерСчета", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НомерСчета"));
		НачалоПериода = Формат(ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НачалоПериода"), "ДЛФ=D");
		ДанныеВыписки.Вставить("ДатаНачала", НачалоПериода);
		КонецПериода = Формат(ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.КонецПериода"), "ДЛФ=D");
		ДанныеВыписки.Вставить("ДатаОкончания", КонецПериода);
		ДанныеВыписки.Вставить("ВхОстаток", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НачальныйОстаток"));
		ДанныеВыписки.Вставить("Дебет", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотИсходящихПлатежей"));
		ДанныеВыписки.Вставить("Кредит", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотВходящихПлатежей"));
		ДанныеВыписки.Вставить("ИсхОстаток", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.КонечныйОстаток"));
	
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ДатаОперации");
		ТЗ.Колонки.Добавить("КО");
		ТЗ.Колонки.Добавить("НомерДокумента");
		ТЗ.Колонки.Добавить("Дебет");
		ТЗ.Колонки.Добавить("Кредит");
		ТЗ.Колонки.Добавить("БИК");
		ТЗ.Колонки.Добавить("Наименование");
		ТЗ.Колонки.Добавить("ОснованиеОперации");
		
		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		
		Если СтрокаОперацияВыписки.Значение <> Неопределено И СтрокаОперацияВыписки.Значение <> 0 Тогда
		
			Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.ДатаОперации = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
				НоваяСтрока.КО =ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
				НоваяСтрока.НомерДокумента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
					
				НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
					
				Если НаправлениеПлатежа = "1" Тогда // исходящий
					НоваяСтрока.Дебет = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
					Корреспондент = "Получатель";
				Иначе
					НоваяСтрока.Кредит = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
					Корреспондент = "Плательщик";
				КонецЕсли;
				
				SWIFT = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.SWIFT");
				БИК = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.БИК");
				НоваяСтрока.БИК = ?(ЗначениеЗаполнено(БИК), БИК, SWIFT);
				ИННКорреспондента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".ИНН");
				СчетКорреспондента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".РасчСчет");
				НаименованиеБанкаМеждународное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.НаименованиеМеждународное");
				НаименованиеБанка = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.Наименование");
				БанкКорреспондента = ?(ЗначениеЗаполнено(НаименованиеБанка), НаименованиеБанка, НаименованиеБанкаМеждународное);
				НаименованиеКорреспондентаМеждународное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".НаименованиеМеждународное");
				НаименованиеКорреспондентаЛокальное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Наименование");
				НаименованиеКорреспондента = ?(ЗначениеЗаполнено(НаименованиеКорреспондентаЛокальное),
					НаименованиеКорреспондентаЛокальное, НаименованиеКорреспондентаМеждународное);
				НоваяСтрока.Наименование = "" + НаименованиеКорреспондента + Символы.ПС
					+ ?(ЗначениеЗаполнено(ИННКорреспондента), "ИНН(BIC) " + ИННКорреспондента + Символы.ПС, "") + СчетКорреспондента
					+ Символы.ПС + БанкКорреспондента;
				НоваяСтрока.ОснованиеОперации = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
			КонецЦикла;
		КонецЕсли;
		ДанныеВыписки.Вставить("ОперацииПоСчету", ТЗ);
		МассивВозврата.Добавить(ДанныеВыписки);
	КонецЦикла;
	
	ДанныеШтампа = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп");
	Если ЗначениеЗаполнено(ДанныеШтампа) Тогда
		СтруктураШтампа = Новый Структура();
		СтруктураШтампа.Вставить("БИК", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.БИК"));
		СтруктураШтампа.Вставить("НаименованиеБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.НаименованиеБанка"));
		СтруктураШтампа.Вставить("ГородБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.ГородБанка"));
		СтруктураШтампа.Вставить("ОтделениеБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.ОтделениеБанка"));
		СтруктураШтампа.Вставить("Офис", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.Офис"));
		СтруктураШтампа.Вставить("ДатаСоставленияВыписки", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ДатаФормирования"));
		ДанныеВыписки.Вставить("Штамп", СтруктураШтампа);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументВыпискиБанка(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ВыпискаБанка_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	Для Каждого ДанныеВыписки Из ДанныеПечати Цикл
	
		ОбластьШапкаЗаголовок = Макет.ПолучитьОбласть("ШапкаЗаголовок");
		ОбластьШапкаЗаголовок.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаЗаголовок);
		
		ОбластьШапкаОрганизация = Макет.ПолучитьОбласть("ШапкаОрганизация");
		ОбластьШапкаОрганизация.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаОрганизация);
		
		ОбластьШапкаБанк = Макет.ПолучитьОбласть("ШапкаБанк");
		ОбластьШапкаБанк.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаБанк);
		
		ОбластьШапкаТаблица = Макет.ПолучитьОбласть("ШапкаТаблица");
		ОбластьШапкаТаблица.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблица);
		
		Для каждого Операция Из ДанныеВыписки.ОперацииПоСчету Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Операция);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьЧерта = Макет.ПолучитьОбласть("Черта");
		ТабличныйДокумент.Вывести(ОбластьЧерта);
		
		Если НЕ ДанныеВыписки.ОперацииПоСчету.Количество() Тогда
			ОбластьНетОпераций = Макет.ПолучитьОбласть("НетОпераций");
			ТабличныйДокумент.Вывести(ОбластьНетОпераций);
		КонецЕсли;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		Если ДанныеВыписки.Свойство("Штамп") Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("Штамп");
			ОбластьСтрока.Параметры.Заполнить(ДанныеВыписки.Штамп);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДатаНачала = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
	ДанныеЗаполненияШапки.Вставить("ДатаНачала", ДатаНачала);
	ДатаКонца = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
	ДанныеЗаполненияШапки.Вставить("ДатаКонца", ДатаКонца);
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСчета");
			
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСчета =ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "НомерСчета");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РасчетныеСчета", ТЗ);
		
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[2].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[3].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[4].Выгрузить();
	
	МассивСообщенийОбмена = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбмена, ДанныеЭД.ВыгрузитьКолонку("Ссылка"), Истина);
	
	Для Каждого ЭлементМассива Из МассивСообщенийОбмена Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = СтрокаДанныхЭД.Банк;
			
		Иначе
			Отправитель = СтрокаДанныхЭД.Банк;
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ТипДокумента = СтрокаДанныхЭД.ВидДокумента + " "+ СтрокаДанныхЭД.ТипДокумента;
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		ДанныеПечатнойФормы.Вставить("Идентификатор", СтрокаДанныхЭД.Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу сертификатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДанныеЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ""; 
	ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеЮрФизЛицо, ПредставлениеЮрФизЛицо, "ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = НСтр("ru = 'Верна ('") + Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = НСтр("ru = 'Неверна ('") + Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ТребуетсяПодпись Тогда
		Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
			ТребуемыеПодписи.ПредставлениеПолучателя = СтрокаМассива.ПодписьБанка;
			
		Иначе
			ТребуемыеПодписи.ПредставлениеОтправителя = СтрокаМассива.ПодписьБанка;
			ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
			
		КонецЕсли;
	Иначе
		ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
		ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПлатежногоПорученияВВалютеДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Число", Формат(Дата, "ДФ=dd"));
	ДанныеВозврата.Вставить("Месяц", Формат(Дата, "ДФ=MM"));
	ДанныеВозврата.Вставить("Год", Формат(Дата, "ДФ=yyyy"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	ДанныеВозврата.Вставить("НомерСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет"));
	ДанныеВозврата.Вставить("ВидПлатежа", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидПлатежа"));
	ДанныеВозврата.Вставить("ТипКомиссии", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии"));
	КодСтраныБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
	ДанныеВозврата.Вставить("КодСтраныБанкаПолучателя", КодСтраныБанкаПолучателя);

	КодыВалютныхОпераций = Новый ТаблицаЗначений;
	КодыВалютныхОпераций.Колонки.Добавить("Код");
	КодыВалютныхОпераций.Колонки.Добавить("Сумма");
	КодыВалютныхОпераций.Колонки.Добавить("НомерПаспортаСделки");
	
	СтрокаОперация = ДеревоДанных.Строки.Найти("КодыВидовВалютныхОпераций", "ПолныйПуть");
	Для Каждого КодОперации Из СтрокаОперация.Строки Цикл
		НоваяСтрока = КодыВалютныхОпераций.Добавить();
		НоваяСтрока.Код = ЗначениеРеквизитаВДереве(
			КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.КодВидаВалютнойОперации");
		НоваяСтрока.Сумма = ЗначениеРеквизитаВДереве(КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Сумма");
		НоваяСтрока.НомерПаспортаСделки = ЗначениеРеквизитаВДереве(
			КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.НомерПаспортаСделки");
	КонецЦикла;
	ДанныеВозврата.Вставить("КодыВидовВалютныхОпераций", КодыВалютныхОпераций);
	
	ДанныеВозврата.Вставить("ISOКодВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.ISOКодВалюты"));
	ДанныеВозврата.Вставить("Сумма", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.Сумма"));
	
	НаименованиеПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеПлательщика", НаименованиеПлательщика);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный") = Истина Тогда
		АдресПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Адрес");
		Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Город");
		Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.Наименование");
		ГородСтранаПлательщика = "";
		Если ЗначениеЗаполнено(Город) Тогда
			Если ЗначениеЗаполнено(Страна) Тогда
				ГородСтранаПлательщика = СтрШаблон("%1, %2", Город, Страна);
			Иначе
				ГородСтранаПлательщика = Город;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Страна) Тогда
			ГородСтранаПлательщика = Страна;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГородСтранаПлательщика) Тогда
			АдресПлательщика = ГородСтранаПлательщика + ", " + АдресПлательщика;
		КонецЕсли;
		ДанныеВозврата.Вставить("АдресПлательщика", АдресПлательщика);
	КонецЕсли;
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаПлательщика", НаименованиеБанкаПлательщика);
	SWIFTБанкаПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT");
	ДанныеВозврата.Вставить("SWIFTБанкаПлательщика", SWIFTБанкаПлательщика);
	АдресБанкаПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес");
	ДанныеВозврата.Вставить("АдресБанкаПлательщика", АдресБанкаПлательщика);
	
	БИКБанкКорреспондента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT");
	ДанныеВозврата.Вставить("БИКБанкаКорреспондента", БИКБанкКорреспондента);
	НаименованиеБанкаКорреспондента = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаКорреспондента", НаименованиеБанкаКорреспондента);
	
	НомерСчетаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
	ДанныеВозврата.Вставить("НомерСчетаПолучателя", НомерСчетаПолучателя);
	НаименованиеПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеПолучателя", НаименованиеПолучателя);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный") = Истина Тогда
		АдресПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Адрес");
		Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Город");
		Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.Наименование");
		ГородСтранаПолучателя = "";
		Если ЗначениеЗаполнено(Город) Тогда
			Если ЗначениеЗаполнено(Страна) Тогда
				ГородСтранаПолучателя = СтрШаблон("%1, %2", Город, Страна);
			Иначе
				ГородСтранаПолучателя = Город;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Страна) Тогда
			ГородСтранаПолучателя = Страна;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГородСтранаПолучателя) Тогда
			АдресПолучателя = ГородСтранаПолучателя + ", " + АдресПолучателя;
		КонецЕсли;
		ДанныеВозврата.Вставить("АдресПолучателя", АдресПолучателя);
	КонецЕсли;
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаПолучателя", НаименованиеБанкаПолучателя);
	SWIFTБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT");
	ДанныеВозврата.Вставить("SWIFTБанкаПолучателя", SWIFTБанкаПолучателя);
	БИКБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
	ДанныеВозврата.Вставить("БИКБанкаПолучателя", БИКБанкаПолучателя);
	АдресБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес");
	ДанныеВозврата.Вставить("АдресБанкаПолучателя", АдресБанкаПолучателя);
	Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
	Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.Наименование");
	ДанныеВозврата.Вставить("ГородСтранаБанкаПолучателя", СтрШаблон("%1, %2", Город, Страна));

	НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	ДанныеВозврата.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту);
	
КонецФункции

Функция ПолучитьДанныеПорученияНаПокупкуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	НаименованиеКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеКлиента", НаименованиеКлиента);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("СуммаВВалюте", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.Сумма"));
	ДанныеВозврата.Вставить("НаименованиеВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.ISOКодВалюты"));
	ДанныеВозврата.Вставить("УсловияСделки", ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки"));
	НомерСчетаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.НомерСчета");
	ДанныеВозврата.Вставить("НомерСчетаЗачисления", НомерСчетаЗачисления);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.Наименование");
	ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьДанныеПорученияНаПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	НаименованиеКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеКлиента", НаименованиеКлиента);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("СуммаВВалюте", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.Сумма"));
	ДанныеВозврата.Вставить("НаименованиеВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.ISOКодВалюты"));
	ДанныеВозврата.Вставить("УсловияСделки", ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки"));
	НомерСчетаСписания = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.НомерСчета");
	ДанныеВозврата.Вставить("НомерСчетаСписания", НомерСчетаСписания);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.Банк.Наименование");
	ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьДанныеРаспоряженияНаОбязательнуюПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
		
	// Шапка.
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	ДанныеВозврата.Вставить("НомерУведомления", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НомерДокумента"));
	ДатаУведомления = Формат(ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ДатаДокумента"), "ДЛФ=DD");
	ДанныеВозврата.Вставить("ДатаУведомления", ДатаУведомления);
	ДанныеВозврата.Вставить("Сумма", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.Сумма"));
	ДанныеВозврата.Вставить("Валюта", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ISOКодВалюты"));
	НаименованиеБанкаУведомления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НаименованиеБанка");
	ДанныеВозврата.Вставить("НаименованиеБанкаУведомления", НаименованиеБанкаУведомления);
	НаименованиеОрганизации = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("НомерТранзитногоСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "ТранзитныйСчет.НомерСчета"));
	
	// Зачисление.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление") = Истина Тогда
		ДанныеВозврата.Вставить("НомерВалютногоСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НомерСчета"));
		ДанныеВозврата.Вставить("НаименованиеБанка", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НаименованиеБанка"));
		ДанныеВозврата.Вставить("swift", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.SWIFT"));
		СуммаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.Сумма");
		ДанныеВозврата.Вставить("СуммаЗачисления", СуммаЗачисления);
		ISOКодВалютыЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.ISOКодВалюты");
		ДанныеВозврата.Вставить("ВалютаЗачисления", ISOКодВалютыЗачисления);
	КонецЕсли;
	
	// Продажа.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа") = Истина Тогда
		ДанныеВозврата.Вставить("СуммаПродажи", ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.Сумма"));
		ISOКодВалютыПродажи = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.ISOКодВалюты");
		ДанныеВозврата.Вставить("ВалютаПродажи", ISOКодВалютыПродажи);
		УсловиеСделки = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.УсловиеСделки");
		ДанныеВозврата.Вставить("УсловиеСделки", УсловиеСделки);
		НомерСчета = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.НомерСчета");
		ДанныеВозврата.Вставить("НомерСчета", НомерСчета);
		НаименованиеБанка = ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.Наименование");
		ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
		БИК = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.БИК");
		ДанныеВозврата.Вставить("БИК", БИК);
		КоррСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.КоррСчет");
		ДанныеВозврата.Вставить("КоррСчет", КоррСчет);
	КонецЕсли;
	
	// Комиссия.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение") = "Счет" Тогда
		ДанныеВозврата.Вставить("СчетКомиссии", ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение.Счет.НомерСчета"));
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПорученияНаПокупкуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПокупкуВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Основная");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.УсловияСделки = "2" Тогда
		ОбластьШапка.Параметры.КурсБанкаРоссии = "Х";
	Иначе
		ОбластьШапка.Параметры.КурсБанка = "Х";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПорученияНаПродажуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПродажуВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Основная");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.УсловияСделки = "2" Тогда
		ОбластьШапка.Параметры.КурсБанкаРоссии = "Х";
	Иначе
		ОбластьШапка.Параметры.КурсБанка = "Х";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументРаспоряженияНаОбязательнуюПродажуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	НазваниеМакета = СтрШаблон("ЭД_РаспоряжениеНаОбязательнуюПродажуВалюты_%1", КодОсновногоЯзыка);
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ДанныеПечати.Свойство("СуммаЗачисления") Тогда
		ОбластьЗачисление = Макет.ПолучитьОбласть("Зачисление");
		ОбластьЗачисление.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьЗачисление);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СуммаПродажи") Тогда
		ОбластьПродажа = Макет.ПолучитьОбласть("Продажа");
		ОбластьПродажа.Параметры.Заполнить(ДанныеПечати);
		Если ДанныеПечати.УсловияСделки = "2" Тогда
			ОбластьПродажа.Параметры.КурсБанкаРоссии = "Х";
		Иначе
			ОбластьПродажа.Параметры.КурсБанка = "Х";
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПродажа);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СчетКомиссии") Тогда
		ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
		ОбластьКомиссия.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьЗачисление);
	КонецЕсли;
	
КонецПроцедуры

// Форматирует сумму прописью банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта)
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "ПараметрыПрописи");
	
	Если Результат = ЦелаяЧасть Тогда
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВалютаПоКоду(КодВалюты)
	
	ВалютаСчета = Справочники["Валюты"].НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСчета) Тогда
		Возврат ВалютаСчета;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КодыВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодВалюты);
	ОбщийМодульРаботаСКурсамиВалют = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамиВалют");
	ВалютыПоКлассификатору = ОбщийМодульРаботаСКурсамиВалют.ДобавитьВалютыПоКоду(КодыВалют);
	
	Если ВалютыПоКлассификатору.Количество() > 0 Тогда
		ВалютаСчета = ВалютыПоКлассификатору[0];
	Иначе
		ВалютаСчета = Справочники["Валюты"].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаСчета;
	
КонецФункции

Функция КодВалютыБанковскогоСчета(НомерСчета)
	
	// П. 1.17 Положения
	// При осуществлении операций по счетам в иностранных, клиринговых валютах, а также в драгоценных металлах
	// в лицевом счете в разрядах (6-8), предназначенных для кода валюты, указываются соответствующие коды,
	// предусмотренные Общероссийским классификатором валют (ОКВ).
	
	Возврат Сред(НомерСчета, 6,3);
	
КонецФункции

#КонецОбласти

#КонецЕсли

