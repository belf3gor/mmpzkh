
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Получает таблицу установленных видов тарифов на объекты.
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица установленных тарифов.
//
Функция ПолучитьТаблицуУстановленныхТарифов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Объект,
	|	КВП_ТарифыСрезПоследних.ВидТарифа
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Услуга = &Услуга
	|				И (Объект В (&СпОбъектов)
	|					ИЛИ &ВсеОбъекты)) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует";
	
	МассивОбъектов = Новый Массив;
	Для Каждого ТекСтрока Из СписокОбъектов Цикл
		МассивОбъектов.Добавить(?(ТекСтрока.Помещение.Пустая(), ТекСтрока.Здание, ТекСтрока.Помещение));
	КонецЦикла;
	Запрос.УстановитьПараметр("СпОбъектов",  МассивОбъектов);
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Услуга",      Услуга);
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("ВсеОбъекты",  МассивОбъектов.Количество() = 0);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуУстановленныхТарифов()

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обрабатывает проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа Тогда
		
		Для Каждого ТекВидТарифа Из СписокУслуг Цикл
			Если Не ЗначениеЗаполнено(ТекВидТарифа.Тариф) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СписокОбъектов.Количество() > 0 Тогда
				Для Каждого ТекОбъект Из СписокОбъектов Цикл
					Движение = Движения.КВП_Тарифы.Добавить();
					Движение.Период      = Дата;
					Движение.Организация = Организация;
					Движение.Услуга      = Услуга;
					Движение.Объект      = ?(ТекОбъект.Помещение.Пустая(), ТекОбъект.Здание, ТекОбъект.Помещение);
					Движение.ВидТарифа   = ТекВидТарифа.ВидТарифа;
					Движение.Тариф       = ТекВидТарифа.Тариф;
					Движение.Действует   = Истина;
				КонецЦикла;
			Иначе
				Движение = Движения.КВП_Тарифы.Добавить();
				Движение.Период      = Дата;
				Движение.Организация = Организация;
				Движение.Услуга      = Услуга;
				Движение.ВидТарифа   = ТекВидТарифа.ВидТарифа;
				Движение.Тариф       = ТекВидТарифа.Тариф;
				Движение.Действует   = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкиТарифов.ОтменаТарифа Тогда
		
		ТаблицаУстановленныхТарифов = ПолучитьТаблицуУстановленныхТарифов();
		
		Если ТаблицаУстановленныхТарифов.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ТаблицаУстановленныхТарифов Цикл
				Движение = Движения.КВП_Тарифы.Добавить();
				Движение.Период      = Дата;
				Движение.Организация = Организация;
				Движение.Услуга      = Услуга;
				Движение.Объект      = ТекСтрока.Объект;
				Движение.ВидТарифа   = ТекСтрока.ВидТарифа;
				Движение.Действует   = Ложь;
			КонецЦикла;
		
		ИначеЕсли СписокОбъектов.Количество() > 0 Тогда
			
			Отказ = Истина;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("По услуге """ + Услуга + """ не найдены действующие тарифы по указанным объектам.", Отказ, "Внимание");
			
		Иначе
			
			Отказ = Истина;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("По услуге """ + Услуга + """ не найдены действующие тарифы.", Отказ, "Внимание");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка события объекта "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	БезУчетаПериодаНазначения = ?(Услуга.ФиксированныйРасчетБезУчетаПериода, Истина, Ложь);
	Если НачалоДня(Дата) > НачалоМесяца(Дата) 
	   И БезУчетаПериодаНазначения Тогда
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
		
		СтрокаСообщения = "Для услуги, начисляемой независимо от периода расчета, нельзя изменять тариф в середине месяца!";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	// Свертка ТЧ отключена, пока проверка уникальности выполняется средствами платформы
	// при записи данных в регистр сведений.
	
	//Если СписокОбъектов.Количество() > 0 Тогда
	//	Если (ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа И УстанавливатьНаОбъекты)
	//	 ИЛИ (ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкиТарифов.ОтменаТарифа И НЕ УстанавливатьНаОбъекты) Тогда
	//		СписокОбъектов.Свернуть("Здание, Помещение");
	//	Иначе
	//		СписокОбъектов.Очистить();
	//	КонецЕсли;
	//КонецЕсли;
	
	НайденныеСтроки = СписокОбъектов.НайтиСтроки(Новый Структура("Здание, Помещение", Справочники.КВП_Здания.ПустаяСсылка(), Справочники.УПЖКХ_Помещения.ПустаяСсылка()));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекСтрокаУдаления Из НайденныеСтроки Цикл
			СписокОбъектов.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(СписокУслуг, "ВидТарифа", "Тариф");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("Услуга");
	
	ПроверяемыеРеквизиты.Добавить("СписокУслуг.ВидТарифа");
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа Тогда
		
		// Для вида операции "Установка тарифа" проверяем заполнение поля "Тариф".
		// Если ни один из тарифов не введен, то проведение документа запрещаем.
	
		ЕстьЗаполненныеТарифы = Ложь;
		
		Для каждого ТекТариф из СписокУслуг Цикл
			
			Если ЗначениеЗаполнено(ТекТариф.Тариф) Тогда
				
				ЕстьЗаполненныеТарифы = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если ни один тариф не введен, то сообщаем об ошибке.
		Если Не ЕстьЗаполненныеТарифы Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось записать документ: не введен ни один из тарифов.", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли