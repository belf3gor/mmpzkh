
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает список видов тарифов.
Процедура УстановитьВидыТарифов(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.СписокУслугТариф.Заголовок = "Тариф";
	
	СпВидовТарифов = Новый СписокЗначений();
	
	СпособРасчетаУслуги = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРасчета");
	
	Если НЕ Объект.Услуга.Пустая() Тогда
		Если СпособРасчетаУслуги = ПредопределенноеЗначение(
									"Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
		   ИЛИ СпособРасчетаУслуги = ПредопределенноеЗначение(
		   								"Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Дневной"));
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Ночной"));
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Пиковый"));
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Общий"));
		ИначеЕсли СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка") Тогда
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.КомиссияБанка"));
			Элементы.СписокУслугТариф.Заголовок = "Процент";
		Иначе
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Общий"));
		КонецЕсли;
		
		мНастройкиУчетнойПолитикиТСЖ = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата, Объект.Организация);
		Если мНастройкиУчетнойПолитикиТСЖ.ИспользоватьЛьготныйТариф Тогда
			СпВидовТарифов.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.Льготный"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокУслугВидТарифа.СписокВыбора.Очистить();
	Для Каждого ТекЗначениеВыбора Из СпВидовТарифов Цикл
		Элементы.СписокУслугВидТарифа.СписокВыбора.Добавить(ТекЗначениеВыбора.Значение);
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидыТарифов()

&НаКлиентеНаСервереБезКонтекста
// Процедура добавляет строки с определенными видами тарифов в табличную часть.
Процедура ДобавитьСтрокиПоВидамТарифов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.СписокУслуг.Количество() = 0 ИЛИ Объект.СписокУслуг.Итог("Тариф") = 0 Тогда
		
		Объект.СписокУслуг.Очистить();
		
		Для Каждого ТекВидТарифа Из Элементы.СписокУслугВидТарифа.СписокВыбора Цикл
			
			СтрокаСпискаУслуг = Объект.СписокУслуг.Добавить();
			СтрокаСпискаУслуг.ВидТарифа = ТекВидТарифа.Значение;
			СтрокаСпискаУслуг.ИспользоватьФормулу = Ложь;
			СтрокаСпискаУслуг.Тариф = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокиПоВидамТарифов()

&НаКлиентеНаСервереБезКонтекста
// Устанавлвиает видимость элементов формы.
//
// Параметры
//  нет
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа") Тогда
		
		Элементы.СтраницаТарифы.Видимость = Истина;
		Элементы.УстанавливатьНаОбъекты.Заголовок = "Устанавливать на объекты";
		
		Элементы.СтраницаОбъекты.Видимость = Форма.УстанавливатьНаОбъекты;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.ОтменаТарифа") Тогда
		
		Элементы.СтраницаТарифы.Видимость = Ложь;
		Элементы.УстанавливатьНаОбъекты.Заголовок = "Отменить действие тарифа для всех объектов";
		Элементы.СтраницаОбъекты.Видимость = Не Форма.УстанавливатьНаОбъекты;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
// Процедура реализует заполнение табличной части документа списком объектов.
Процедура ЗаполнитьОбъекты()
	
	СписокТиповЗначенийОбъектов = Новый СписокЗначений;
	СписокТиповЗначенийОбъектов.Добавить("Квартиры");
	СписокТиповЗначенийОбъектов.Добавить("Здания");
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	СтруктураПараметров.Вставить("ТипОбъекта"       , "Квартиры");
	СтруктураПараметров.Вставить("ТипЗначОбъекта"   , СписокТиповЗначенийОбъектов);
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ЗаполнитьОбъекты()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьОбъекты()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокВозврата, ДополнительныеПараметры) Экспорт
	
	ПолучитьСведенияОЗданияхПомещений(СписокВозврата);
	
	Если ТипЗнч(СписокВозврата) = Тип("СписокЗначений")
		И СписокВозврата.Количество() > 0 Тогда
		
		Если Объект.СписокОбъектов.Количество() > 0 Тогда
			ДопПараметры       = Новый Структура("СписокВозврата", СписокВозврата);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьОбъекты", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьОбъектыФрагмент(СписокВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ЗаполнитьОбъекты()".
Процедура ОбработатьРезультатВопросаЗаполнитьОбъекты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СписокОбъектов.Очистить();
	КонецЕсли;
	
	ЗаполнитьОбъектыФрагмент(ДополнительныеПараметры.СписокВозврата);
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьОбъекты()

&НаКлиенте
// Процедура заполняет таблицу "СписокОбъектов".
Процедура ЗаполнитьОбъектыФрагмент(Знач СписокВозврата)
	
	ЕстьТолькоПомещения = ТипЗнч(СписокВозврата[0].Значение) = Тип("СправочникСсылка.УПЖКХ_Помещения");
	
	Для Каждого Строка ИЗ ТаблицаПомещений Цикл
		СтрокаТЧ = Объект.СписокОбъектов.Добавить();
		Если ЕстьТолькоПомещения Тогда
			СтрокаТЧ.Здание    = Строка.Здание;
			СтрокаТЧ.Помещение = Строка.Помещение;
		Иначе
			СтрокаТЧ.Здание = Строка.Здание;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбъекты()

&НаСервере
// Предназначена для получения сведения о зданиях для переданных помещений.
// 
Процедура ПолучитьСведенияОЗданияхПомещений(СписокВозврата)
	
	ТаблицаПомещений.Очистить();
	
	Если Не СписокВозврата = Неопределено И СписокВозврата.Количество() > 0 Тогда
		
		Если Не ТипЗнч(СписокВозврата[0].Значение) = Тип("СправочникСсылка.КВП_Здания") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_Помещения.Ссылка КАК Помещение,
			|	УПЖКХ_Помещения.Владелец КАК Здание
			|ИЗ
			|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
			|ГДЕ
			|	УПЖКХ_Помещения.Ссылка В(&МассивПомещений)";
			
			Запрос.УстановитьПараметр("МассивПомещений", СписокВозврата.ВыгрузитьЗначения());
			
			ТаблицаПомещений.Загрузить(Запрос.Выполнить().Выгрузить());
			
		Иначе
			
			Для Каждого ЭлементСписка Из СписокВозврата Цикл
				НоваяСтрока = ТаблицаПомещений.Добавить();
				НоваяСтрока.Здание = ЭлементСписка.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСведенияОЗданияхПомещений()

&НаСервере
// Очищает таблицу "СписокОбъектов".
Процедура ОчиститьСписокОбъектовНаСервере()
	
	Объект.СписокОбъектов.Очистить();
	
КонецПроцедуры // ОчиститьСписокОбъектовНаСервере()

&НаКлиенте
// Обработка результата ответа перед записью документа.
Процедура ОбработатьРезультатВопросаПередЗаписью(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСписокОбъектовНаСервере();
		ПараметрыЗаписи.Вставить("НеВыводитьСообщение"); // добавляем, чтобы не выводить вопрос при программной записи документа.
		Записать(ПараметрыЗаписи);
		УстанавливатьНаОбъекты = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа"));
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа")
			И Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаОбъекты Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбъекты;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Если Параметры.Свойство("Услуга") Тогда
			Объект.Услуга = Параметры.Услуга;
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	// Необходимо определить список выбора видов тарифов услуги,
	// так как на данный момент может быть определена услуга во вновь создаваемом документе.
	УстановитьВидыТарифов(ЭтаФорма);
	
	// Если документ новый, и он создается НЕ КОПИРОВАНИЕМ, тогда нужно заполнить
	// строки по видам тарифов. Нужно в том случае, если услуга передана в параметрах.
	Если Объект.Ссылка.Пустая() И Параметры.ЗначениеКопирования.Пустая() Тогда
		ДобавитьСтрокиПоВидамТарифов(ЭтаФорма);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа") Тогда
		УстанавливатьНаОбъекты = (Объект.СписокОбъектов.Количество() > 0);
	Иначе
		УстанавливатьНаОбъекты = НЕ (Объект.СписокОбъектов.Количество() > 0);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа") Тогда
		
		// Проверка на превышение значения 100% для тарифа комиссии банка в случае, если расчет производится в сумме начислений за месяц.
		СпособРасчетаУслуги = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРасчета");
		Если СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка") Тогда
			РасчетКомиссииСверху = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "РасчетКомиссииСверху");
			Если Не РасчетКомиссииСверху Тогда
				
				Для Каждого ТекВидТарифа Из Объект.СписокУслуг Цикл
					Если ТипЗнч(ТекВидТарифа.Тариф) = Тип("Число") И Не ТекВидТарифа.Тариф < 100 Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("При расчете комиссии банка ""В сумме от начислений за месяц"" тариф не может быть больше или равен 100%.",,,,Отказ);
					КонецЕсли;
				КонецЦикла;
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УстанавливатьНаОбъекты
		   И Объект.СписокОбъектов.Количество() > 0 Тогда
			ОчиститьСписокОбъектовНаСервере();
		КонецЕсли;
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		   И УстанавливатьНаОбъекты
		   И Объект.СписокОбъектов.Количество() = 0
		   И НЕ ПараметрыЗаписи.Свойство("НеВыводитьСообщение") Тогда
			Отказ = Истина;
			ТекстВопроса       = "Объекты не выбраны. Установить тариф на все объекты?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтаФорма, ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	Иначе
		
		Если УстанавливатьНаОбъекты
		   И Объект.СписокОбъектов.Количество() > 0 Тогда
			ОчиститьСписокОбъектовНаСервере();
		КонецЕсли;
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		   И НЕ УстанавливатьНаОбъекты
		   И Объект.СписокОбъектов.Количество() = 0
		   И НЕ ПараметрыЗаписи.Свойство("НеВыводитьСообщение") Тогда
			Отказ = Истина;
			ТекстВопроса       = "Объекты не выбраны. Отменить действие тарифа для всех объектов?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтаФорма, ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли УстанавливатьНаОбъекты И Объект.СписокОбъектов.Количество() > 0 Тогда
			ОчиститьСписокОбъектовНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УстанавливатьНаОбъекты".
Процедура УстанавливатьНаОбъектыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УстанавливатьНаОбъекты".
Процедура УслугаПриИзменении(Элемент)
	
	УстановитьВидыТарифов(ЭтаФорма);
	ДобавитьСтрокиПоВидамТарифов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.СписокУслуг.Очистить();
	Объект.СписокОбъектов.Очистить();
	УстанавливатьНаОбъекты = Ложь;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Табличная часть "Тарифы"

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "Список услуг".
//
Процедура СписокУслугПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование И НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Тариф = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "использовать формулу" строки табличного поля "Список услуг".
//
Процедура СписокУслугИспользоватьФормулуПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокУслуг.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ИспользоватьФормулу Тогда
		ТекСтрока.Тариф = ПредопределенноеЗначение("Справочник.КВП_РассчитываемыеТарифы.ПустаяСсылка");
	Иначе
		ТекСтрока.Тариф = 0;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Табличная часть "Объекты"

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "Здание" строки табличного поля "СписокОбъектов".
//
Процедура СписокОбъектовЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = Неопределено И НЕ ТекущиеДанные.Помещение.Пустая() Тогда
		Если НЕ ВыбранноеЗначение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Помещение, "Владелец") Тогда
			ТекущиеДанные.Помещение = ПредопределенноеЗначение("Справочник.УПЖКХ_Помещения.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СписокОбъектовЗданиеОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Помещение" строки табличного поля "СписокОбъектов".
//
Процедура СписокОбъектовПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные.Здание.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо выбрать здание, на помещение которого устанавливается тариф!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьОбъекты".
Процедура КомандаЗаполнитьОбъекты(Команда)
	
	ЗаполнитьОбъекты();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти 
