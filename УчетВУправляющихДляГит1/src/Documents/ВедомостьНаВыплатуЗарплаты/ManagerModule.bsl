
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает данные указанных ведомостей.
//
// Параметры:
//	Ведомости      - Массив                         - Ссылки на документы ВедомостьНаВыплатуЗарплаты.
//	ФормаРасчетов  - ПеречислениеСсылка.ФормыОплаты - Определяет, данные каких ведомостей необходимо вернуть: 
//                                                    наличных или безналичных.
//	ФизическиеЛица - Массив                         - Физические лица, чьи данные необходимо получить.
//                                                    Необязательный. 
//	Регистратор    - ДокументСсылка                 - Необязательный. 
//                                                    Если указан, то возвращаются только неоплаченные строки
//							                          Оплаты регистратора при этом игнорируются.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* Ведомость						- ДокументСсылка.ВедомостьНаВыплатуЗарплаты.
//		* ФизическоеЛицо				- СправочникСсылка.ФизическиеЛица.
//      * БанковскийСчет                - ОпределяемыйТип.БанковскиеСчетаФизическихЛиц.
//		* СуммаКВыплате					- Число.
//		* КомпенсацияЗаЗадержкуЗарплаты	- Число.
//		* ИтогоКВыплате                 - Число.
//
Функция ДанныеВедомостей(Ведомости, ФормаРасчетов, ФизическиеЛица = Неопределено, ВыплатаДепонентов = Неопределено, Регистратор = Неопределено) Экспорт
	
	ВидМестаВыплаты = Новый Массив;
	Если ФормаРасчетов = Перечисления.ФормыОплаты.Безналичная Тогда
		ВидМестаВыплаты.Добавить(Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет);
		ВидМестаВыплаты.Добавить(Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект);
		
	Иначе
		ВидМестаВыплаты.Добавить(Перечисления.ВидыМестВыплатыЗарплаты.Касса);
		ВидМестаВыплаты.Добавить(Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик);
		
		Если ВыплатаДепонентов = Неопределено Тогда
			ВыплатаДепонентов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыплатаДепонентов = Истина Тогда
		УсловиеПоДепонированию =
		"ВедомостьНаВыплатуЗарплатыЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)";
		
	ИначеЕсли ВыплатаДепонентов = Ложь Тогда
		УсловиеПоДепонированию =
		"НЕ ВедомостьНаВыплатуЗарплатыЗарплата.ВыплаченностьЗарплаты В (ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено), ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))";
		
	Иначе // Неопределено
		УсловиеПоДепонированию = "ИСТИНА";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка КАК Ведомость,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.БанковскийСчет КАК БанковскийСчет,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Сумма КАК СуммаКВыплате,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Сумма + ВедомостьНаВыплатуЗарплатыЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК ИтогоКВыплате
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты.Зарплата КАК ВедомостьНаВыплатуЗарплатыЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостейНаВыплатуЗарплаты
	|		ПО (ОплатаВедомостейНаВыплатуЗарплаты.Ведомость = ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка)
	|			И (ОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо = ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо)
	|			И (ОплатаВедомостейНаВыплатуЗарплаты.Регистратор <> &Регистратор)
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка В(&Ведомости)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|	И ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка.ВидМестаВыплаты В(&ВидМестаВыплаты)
	|	И ОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо ЕСТЬ NULL 
	|	И &УсловиеПоДепонированию";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоДепонированию", УсловиеПоДепонированию);
	
	Запрос.УстановитьПараметр("Ведомости",			Ведомости);
	Запрос.УстановитьПараметр("ПоВсемФизлицам",		ФизическиеЛица = Неопределено);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("ВидМестаВыплаты",	ВидМестаВыплаты);
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Зарплата.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ВедомостьНаВыплатуЗарплаты;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.ВедомостьНаВыплатуЗарплаты";
	НовыеСведения.ПоляРегистрации = "Зарплата.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "СуммаДокумента,Зарплата.Сумма,Зарплата.КомпенсацияЗаЗадержкуЗарплаты";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.ВедомостьНаВыплатуЗарплаты";
	НовыеСведения.ПоляРегистрации = "Зарплата.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Зарплата.БанковскийСчет";
	НовыеСведения.ОбластьДанных   = "ЛичныеДанные";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаДанныеДляОплаты(ИмяПараметраВедомости = "Ведомости", ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьЗарплата.Сумма) КАК КВыплате,
	|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты.Зарплата КАК ВедомостьЗарплата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьЗарплата.Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо";
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ИмяПараметраВедомости) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьЗарплата.Ссылка В (&%1)", ИмяПараметраВедомости));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИмяПараметраФизическиеЛица) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьЗарплата.ФизическоеЛицо В (&%1)", ИмяПараметраФизическиеЛица));
	КонецЕсли;	
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;

КонецФункции	

#КонецОбласти


#КонецЕсли