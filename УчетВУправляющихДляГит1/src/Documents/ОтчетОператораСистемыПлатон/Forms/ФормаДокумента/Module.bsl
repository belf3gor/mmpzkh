#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация) Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ОтчетОператораСистемыПлатон",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Отчет оператора системы ""Платон""'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере();
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"                , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                          , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"            , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"                    , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"                   , Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты"                , "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов"                , "Метаданные.Документы.ОтчетОператораСистемыПлатон.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыФормы.Вставить("РежимОтбораДокументов"         , ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"    , АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"           , Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам"    , Объект.СчетУчетаРасчетовПоАвансам);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТранспортныеСредства

&НаКлиенте
Процедура ТранспортныеСредстваПриИзменении(Элемент)

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваТранспортноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ТранспортныеСредства.ТекущиеДанные;
	ТранспортноеСредство = СтрокаТЧ.ТранспортноеСредство;
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		СтрокаТЧ.РегистрационныйЗнак = "";
	Иначе
		СтрокаТЧ.РегистрационныйЗнак = РегистрационныйЗнакТС(ТранспортноеСредство, Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗарегистрированнымиТС(Команда)
	
	Если Объект.ТранспортныеСредства.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена, продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Иначе

		ЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонНаКлиенте();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	УстановитьСостояниеДокумента();
	УстановитьПорядокУчетаРасчетов(ЭтотОбъект);
	ЗаполнитьРегистрационныеЗнаки();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.ТранспортныеСредства.Итог("Сумма");

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация,
		БухгалтерскийУчетПереопределяемый.ПолучитьМассивВидовДоговоров(,,,,,, Истина));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетов.ОбработкаВыбораПорядокУчетаРасчетов(ЭтотОбъект, ВыбранноеЗначение);
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПорядокУчетаРасчетов(Форма)

	ОсобенностиДокумента = Документы.ОтчетОператораСистемыПлатон.ОсобенностиУчетаРасчетов();
	
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиДокумента);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьРегистрационныеЗнаки();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьРегистрационныеЗнаки();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрационныеЗнаки()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаТС", Объект.ТранспортныеСредства.Выгрузить());
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТС.НомерСтроки,
	|	ТаблицаТС.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ТаблицаТС.Сумма
	|ПОМЕСТИТЬ ТаблицаТС
	|ИЗ
	|	&ТаблицаТС КАК ТаблицаТС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТранспортноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияТранспортныхСредствСрезПоследних.РегистрационныйЗнак
	|ПОМЕСТИТЬ РегистрационныеЗнаки
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаТС.ТранспортноеСредство
	|					ИЗ
	|						ТаблицаТС)) КАК РегистрацияТранспортныхСредствСрезПоследних
	|ГДЕ
	|	РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТС.ТранспортноеСредство,
	|	РегистрационныеЗнаки.РегистрационныйЗнак,
	|	ТаблицаТС.Сумма
	|ИЗ
	|	ТаблицаТС КАК ТаблицаТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрационныеЗнаки КАК РегистрационныеЗнаки
	|		ПО ТаблицаТС.ТранспортноеСредство = РегистрационныеЗнаки.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаРегистрационныхЗнаков = Запрос.Выполнить().Выгрузить();
	
	Объект.ТранспортныеСредства.Загрузить(ТаблицаРегистрационныхЗнаков);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РегистрационныйЗнакТС(Знач ТранспортноеСредство, Знач Организация, Знач Дата);

	РегистрационныйЗнак = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТранспортноеСредство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияТранспортныхСредствСрезПоследних.РегистрационныйЗнак
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ТранспортноеСредство) КАК РегистрацияТранспортныхСредствСрезПоследних
	|ГДЕ
	|	РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РегистрационныйЗнак = Выборка.РегистрационныйЗнак;
	КонецЕсли;
	
	Возврат РегистрационныйЗнак;

КонецФункции

&НаКлиенте
Процедура ВопросЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонНаКлиенте();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонНаКлиенте()

	ЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонНаСервере();

	Если Объект.ТранспортныеСредства.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не обнаружены транспортные средства, зарегистрированные в реестре системы ""Платон""!'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТСЗарегистрированнымиВРеестреСистемыПлатонНаСервере()

	Объект.ТранспортныеСредства.Очистить();

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ТранспортноеСредство,
	|	РегистрацияТранспортныхСредствСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&Период, Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
	|ГДЕ
	|	РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
	|	И РегистрацияТранспортныхСредствСрезПоследних.ЗарегистрированоВРеестреСистемыПлатон
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрационныйЗнак";
	
	ТаблицаТС = Запрос.Выполнить().Выгрузить();
	
	Объект.ТранспортныеСредства.Загрузить(ТаблицаТС);

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти