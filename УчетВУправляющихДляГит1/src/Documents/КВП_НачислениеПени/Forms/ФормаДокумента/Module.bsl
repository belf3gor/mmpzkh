#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Видимость ссылки на настройки учета пени по капремонту,
	// если ведется раздельный учет услуг капремонта.
	Элементы.СсылкаНастройкаРасчетаПениПоКапремонту.Видимость = ПроверитьВедениеРаздельногоУчетаУслугПоКапремонту(Объект.Организация);
	
	// Видимость группы "ГруппаОбновленияКлючевойСтавкиЦБ",
	// если регламентное задание "УПЖКХ_ОбновлениеКлючевойСтавкиЦБРФ" не используется,
	// а в настройка расчета пени по организации используется ключевая ставка ЦБ.
	Элементы.ГруппаОбновленияКлючевойСтавкиЦБ.Видимость = Форма.ИспользуетсяКлючеваяСтавкаЦБВНастройкахРасчетаПени
														И Не Форма.ИспользуетсяРегламентноеЗаданиеОбновленияКлючевойСтавкиЦБ;
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаСервереБезКонтекста
// Функция возвращает "Истина", если настройка расчета пени использует ключевую ставку в основании,
// "Ложь" - в противном случае.
Функция ПолучитьИспользованиеКлючевойСтавкиВНастройкахРасчетаПениПоОрганизации(Период, Организация)
	
	КлючеваяСтавкаИспользуется = Ложь;
	
	// Проверяем основную настройку из учетной политики ЖКХ.
	мУчетнаяПолитикаЖКХ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Период, Организация);
	Если ЗначениеЗаполнено(мУчетнаяПолитикаЖКХ.НастройкаРасчетаПени)
	   И Не мУчетнаяПолитикаЖКХ.НастройкаРасчетаПени.ИспользоватьПроцентнуюСтавку Тогда
		КлючеваяСтавкаИспользуется = Истина;
	КонецЕсли;
	
	// Проверяем настройку для услуг капремонта.
	СтруктураНастроекКапРемнота = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация);
	Если ЗначениеЗаполнено(СтруктураНастроекКапРемнота.НастройкаРасчетаПени)
	   И Не СтруктураНастроекКапРемнота.НастройкаРасчетаПени.ИспользоватьПроцентнуюСтавку Тогда
		КлючеваяСтавкаИспользуется = Истина;
	КонецЕсли;
	
	Возврат КлючеваяСтавкаИспользуется;
	
КонецФункции

&НаСервере
// Процедура заполняет данные объектов.
Процедура ЗаполнитьДанныеОбъектаНаСервере()
	
	Для Каждого ДанныеСтроки Из Объект.Начисления Цикл
		ЗаполнитьДанныеОбъектаВСтроке(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные объекта в строке.
Процедура ЗаполнитьДанныеОбъектаВСтроке(НомерСтроки)
	
	ДанныеСтроки = Объект.Начисления.НайтиПоИдентификатору(НомерСтроки);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЛицевойСчет) Тогда
		СтрокиКеша = КешВладельцевИПомещенийПоОбъекту.НайтиСтроки(Новый Структура("Объект", ДанныеСтроки.ЛицевойСчет));
		Если СтрокиКеша.Количество() > 0 Тогда
			// Получим значения из кеша
			СтрокаДанных = СтрокиКеша[0];
			ДанныеСтроки.Квартира = СтрокаДанных.Квартира;
			ДанныеСтроки.Владелец = СтрокаДанных.Владелец;
		Иначе
			// Получим значения из базы
			ДанныеСтроки.Квартира = ДанныеСтроки.ЛицевойСчет.Адрес;
			ДанныеСтроки.Владелец = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ДанныеСтроки.ЛицевойСчет,Объект.Дата);
			
			// Добавим значения в кеш
			НоваяСтрокаКеша = КешВладельцевИПомещенийПоОбъекту.Добавить();
			НоваяСтрокаКеша.Объект = ДанныеСтроки.ЛицевойСчет;
			НоваяСтрокаКеша.Квартира = ДанныеСтроки.Квартира;
			НоваяСтрокаКеша.Владелец = ДанныеСтроки.Владелец;
		КонецЕсли;
		
	Иначе
		ДанныеСтроки.Квартира = Неопределено;
		ДанныеСтроки.Владелец = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура обновляет кнопку печати по текущему лицевому счету.
Процедура ОбновитьКнопкуПечатиПоТекущемуЛС()
	
	ТекущиеДанныеТЧ = Элементы.Начисления.ТекущиеДанные;
	
	ЛицевойСчетОпределен = (Не ТекущиеДанныеТЧ = Неопределено И Не ТекущиеДанныеТЧ.ЛицевойСчет.Пустая());
	Элементы.ФормаРасшифровкаПоТекущемуЛС.Доступность = ЛицевойСчетОпределен;
	
	Если ЛицевойСчетОпределен Тогда
		ТекстКнопки = "По лиц. счет: " + ТекущиеДанныеТЧ.ЛицевойСчет;
	Иначе
		ТекстКнопки = "Лиц. счет. не определен";
	КонецЕсли;
	
	Элементы.ФормаРасшифровкаПоТекущемуЛС.Заголовок = ТекстКнопки;
	
КонецПроцедуры

&НаКлиенте
// Вызывает формирование расшифровки расчета пени.
//
// Параметры:
//  ПараметрРасшифровки - ссылка на объект, по которому необходима расшифровка:
//                        лицевой счет или документ.
//
Процедура СформироватьРасшифровкуРасчетаПени(ПараметрРасшифровки)
	
	ПроверитьМодифицированностьВФорме(Объект, ПараметрРасшифровки);
	
КонецПроцедуры // СформироватьРасшифровкуРасчетаПени()

&НаКлиенте
// Открывает форму расшифровки расчета пени.
Процедура ОткрытьФормуРасшифровкиПени(ПараметрРасшифровки)
	
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_РасшифровкаРасчетаПени.Форма.ФормаОтчета");
	ФормаОтчета.Отчет.НачалоПериода = НачалоМесяца(Объект.Дата);
	ФормаОтчета.Отчет.КонецПериода  = КонецМесяца(Объект.Дата);
	ФормаОтчета.Отчет.Организация   = Объект.Организация;
	ФормаОтчета.Отчет.Объект        = ПараметрРасшифровки;
	
	ФормаОтчета.СформироватьОтчетНаСервере();
	ФормаОтчета.Открыть();
	
КонецПроцедуры // ОткрытьФормуРасшифровкиПени()

&НаКлиенте
// Проверяет, вносились ли изменения в документ.
//
Процедура ПроверитьМодифицированностьВФорме(Объект, ПараметрРасшифровки)
	
	Если Модифицированность Тогда
		
		ДокументПроведен    = ПроверитьПроведениеДокумента(Объект.Ссылка);
		СтрПроведен = ?(ДокументПроведен, " и провести","");
		
		ДопПараметры = Новый Структура("ДокументПроведен, ПараметрРасшифровки", ДокументПроведен, ПараметрРасшифровки);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопроса", ЭтаФорма, ДопПараметры),
					   "Документ изменен. Для печати его необходимо записать "+ СтрПроведен +".
					   |Записать" + СтрПроведен + "?",
					   РежимДиалогаВопрос.ДаНет, , 
					   КодВозвратаДиалога.Нет,
					   "Документ изменен");
	Иначе
		ОткрытьФормуРасшифровкиПени(ПараметрРасшифровки);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьМодифицированностьВФорме()

&НаКлиенте
// Обоработчик результата вопроса, вызванного в процедуре "ПроверитьМодифицированностьВФорме()".
Процедура ОбработатьРезультатВопроса(Ответ, ДопПараметры) Экспорт
	
	ДокументПроведен    = ДопПараметры.ДокументПроведен;
	ПараметрРасшифровки = ДопПараметры.ПараметрРасшифровки;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДокументПроведен Тогда
			Попытка
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Исключение
				ПоказатьПредупреждение(Неопределено, "Операция не выполнена!");
				Возврат;
			КонецПопытки;
		Иначе
			Попытка
				Записать();
			Исключение
				ПоказатьПредупреждение(Неопределено, "Операция не выполнена!");
				Возврат;
			КонецПопытки;
		КонецЕсли;
		ОткрытьФормуРасшифровкиПени(ПараметрРасшифровки);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопроса()

&НаСервереБезКонтекста
// Проверяет, был ли проведен документ.
//
Функция ПроверитьПроведениеДокумента(Ссылка)
	
	Возврат Метаданные.Документы.Содержит(Ссылка.Метаданные()) И Ссылка.Проведен;
	
КонецФункции // ПроверитьПроведениеДокумента()

&НаСервереБезКонтекста
// Получает на сервере массив услуг-исключений.
//
Функция ПолучитьМассивУслугИсключенийНаСервере(Организация)
	
	Возврат ПолучитьМассивУслугИсключений(Организация);
	
КонецФункции

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

&НаСервереБезКонтекста
// Промежуточная функция на сервере без контекста, предназначенная для получения
// ссылки на элемент справочника "Настройки расчета пени" по капремонту.
//
// Параметры:
//  Организация - организация, указанная в документе.
//
// Возвращаемое значение:
//  СсылкаНаЭлемент - ссылка на элемент справочника "Настройки расчета пени".
//
Функция ПолучитьНастройкуРасчетаПениПоКапремонтуНаСервере(Организация)
	
	// По умолчанию вернем пустую ссылку.
	НастройкаРасчетаПениПоКапремонту = Справочники.УПЖКХ_НастройкиРасчетаПени.ПустаяСсылка();
	
	// Получим настройку расчета пени по настройке учета по капремонту.
	НастройкаУчетаКапремонта = Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	Если Не НастройкаУчетаКапремонта = Неопределено Тогда
		НастройкаРасчетаПениПоКапремонту = НастройкаУчетаКапремонта.НастройкаРасчетаПени;
	КонецЕсли;
	
	// Вернем результат.
	Возврат НастройкаРасчетаПениПоКапремонту;
	
КонецФункции

&НаСервереБезКонтекста
// Получает значение настройки "Вести раздельный Учет по услугам капремонта" справочника
// "Настройки учета капремонта" для организации, указанной в текущем документе.
Функция ПроверитьВедениеРаздельногоУчетаУслугПоКапремонту(Организация)
	
	// Получим настройку учета по капремонта, а из нее признак ведения раздельного учета услуг.
	Возврат УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация).ВедетсяРаздельныйУчет;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПоНачислениюПени

&НаСервере
// Заполняет таблицу начислений в соответствии с задолженностями и
// учетной политикой.
Процедура ЗаполнитьТаблицуНачисленияПени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	мОтказУчетнаяПолитика = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																										Объект.Организация, мОтказУчетнаяПолитика);
	
	Если мОтказУчетнаяПолитика = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНачисленияПени = КВП_ПолучитьТаблицуНачисленияПени(Объект.Дата, Объект.Организация, 
																мНастройкиУчетнойПолитикиТСЖ, Объект.Объект);
																
	ТаблицаНачисленияПени.Свернуть("ЛицевойСчет, Услуга, МесяцНачисления", "Сумма");
	
	КВП_СкорректироватьСуммыПени(Объект.Дата, ТаблицаНачисленияПени, Объект.Ссылка);
	
	Объект.Начисления.Загрузить(ТаблицаНачисленияПени);
	
	// удалим строки с нулевым пени
	СтрокиНулевогоПени = Объект.Начисления.НайтиСтроки(Новый Структура("Сумма", 0));
	Для Каждого СтрокаНулевогоПени Из СтрокиНулевогоПени Цикл
		Объект.Начисления.Удалить(СтрокаНулевогоПени);
	КонецЦикла;
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачисленияПениЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
КонецПроцедуры // ЗаполнитьТаблицуНачисленияПени()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьКнопкуПечатиПоТекущемуЛС();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	Иначе
		// Заполним данные об объектах
		ЗаполнитьДанныеОбъектаНаСервере();
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Определим, можно ли использовать автоматическое обновление ключевой ставки ЦБ.
	ИспользуетсяКлючеваяСтавкаЦБВНастройкахРасчетаПени = ПолучитьИспользованиеКлючевойСтавкиВНастройкахРасчетаПениПоОрганизации(Объект.Дата, Объект.Организация);
	
	// Получим признак использования регламентного задания обновления ключевой ставки ЦБ.
	ИспользуетсяРегламентноеЗаданиеОбновленияКлючевойСтавкиЦБ = УПЖКХ_ОбщегоНазначенияСервер.ПроверитьИспользованиеРегламентногоЗаданияОбновленияКлючевойСтавкиЦБ();
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	// Определим, можно ли использовать автоматическое обновление ключевой ставки ЦБ.
	ИспользуетсяКлючеваяСтавкаЦБВНастройкахРасчетаПени = ПолучитьИспользованиеКлючевойСтавкиВНастройкахРасчетаПениПоОрганизации(Объект.Дата, Объект.Организация);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Определим, можно ли использовать автоматическое обновление ключевой ставки ЦБ.
	ИспользуетсяКлючеваяСтавкаЦБВНастройкахРасчетаПени = ПолучитьИспользованиеКлючевойСтавкиВНастройкахРасчетаПениПоОрганизации(Объект.Дата, Объект.Организация);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#Область ТабличноеПолеНачисления

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Начисления".
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ОбновитьКнопкуПечатиПоТекущемуЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектыОбъект".
Процедура НачисленияЛицевойСчетПриИзменении(Элемент)
	
	ЗаполнитьДанныеОбъектаВСтроке(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Услуга".
Процедура НачисленияУслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
	
		ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
		Если ТекущиеДанные.Услуга = УслугаДобровольногоСтрахования Тогда
			ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя начислять пени.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "НачисленияКвартира".
Процедура НачисленияКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "НачисленияВладелец".
Процедура НачисленияВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте 
// Обработчик события "НачалоВыбора" поля "Услуга".
Процедура НачисленияУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мОтказУчетнаяПолитика = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																										Объект.Организация, мОтказУчетнаяПолитика);
	Если мОтказУчетнаяПолитика = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Получим актуальную настройку использования услуг-исключений.
	мИспользоватьУслугиИсключения = мНастройкиУчетнойПолитикиТСЖ.ИспользоватьУслугиИсключенияПриРасчетеПени;
	
	// Исключает для выбора услуги, по которым не нужно формировать начисления пени. Это услуги, указанные в Учетной политике (ЖКХ),
	// и услуга добровольного страхования.
	Если (ЗначениеЗаполнено(Объект.Организация) И мИспользоватьУслугиИсключения) Или ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) И мИспользоватьУслугиИсключения Тогда
			мМассивУслугИсключений = ПолучитьМассивУслугИсключенийНаСервере(Объект.Организация);
		Иначе
			мМассивУслугИсключений = Новый Массив;
		КонецЕсли;
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И мМассивУслугИсключений.Найти(УслугаДобровольногоСтрахования) = Неопределено Тогда
			мМассивУслугИсключений.Добавить(УслугаДобровольногоСтрахования);
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбораУслуги = ПолучитьФорму("Справочник.КВП_Услуги.Форма.ФормаВыбора", , ЭтаФорма);
		
		ЭлементОтбора = ФормаВыбораУслуги.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.ПравоеЗначение = мМассивУслугИсключений;
		ЭлементОтбора.Использование  = Истина;
		
		ФормаВыбораУслуги.ВладелецФормы = ЭтаФорма;
		ФормаВыбораУслуги.ОписаниеОповещенияОЗакрытии =
					Новый ОписаниеОповещения("ОбработатьРезультатВыбораУслуги", ЭтаФорма);
		ФормаВыбораУслуги.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияУслугаНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора услуги в процедуре "НачисленияУслугаНачалоВыбора()".
Процедура ОбработатьРезультатВыбораУслуги(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Элементы.Начисления.ТекущиеДанные.Услуга = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораУслуги()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана дата документа");
		Возврат;
	КонецЕсли;

	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	// Вопрос о продолжении, если есть введенные данные.
	Если Не Объект.Начисления.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
					   "Перед заполнением табличная часть будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик команды "НачисленияСортироватьПоВозрастанию".
Процедура НачисленияСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("Начисления", Элементы.Начисления.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НачисленияСортироватьПоУбыванию".
Процедура НачисленияСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("Начисления", Элементы.Начисления.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванонго в процедуре "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Продолжение процедуры "КомандаЗаполнить()".
Процедура КомандаЗаполнитьФрагмент()
	
	ЗаполнитьТаблицуНачисленияПени();
	
КонецПроцедуры // КомандаЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "РасшифровкаПоВсемСтрокам".
Процедура РасшифровкаПоВсемСтрокам(Команда)
	
	СформироватьРасшифровкуРасчетаПени(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "РасшифровкаПоТекущемуЛС".
Процедура РасшифровкаПоТекущемуЛС(Команда)
	
	// !!! Необходимо проверить формирование отчета.
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран лицевой счет в табличной части!");
		Возврат;
	КонецЕсли;
	
	СформироватьРасшифровкуРасчетаПени(ТекущиеДанные.ЛицевойСчет);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СсылкаУчетнаяПолитикаПоРасчетуПени".
//
Процедура СсылкаУчетнаяПолитикаПоРасчетуПени(Команда)
	
	КлючЗаписиУчетнойПолитикиЖКХ = УПЖКХ_ПараметрыУчетаСервер.ПолучитьКлючЗаписиУчетнойПолитикиЖКХПоОрганизацииНаДату(Объект.Дата, Объект.Организация);
	
	// Открываем форму актуальной записи учетной политики ЖКХ, если она определена.
	Если Не КлючЗаписиУчетнойПолитикиЖКХ = Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Ключ",                 КлючЗаписиУчетнойПолитикиЖКХ);
		Структура.Вставить("ИмяНачальнойСтраницы", "ГруппаПени");
		
		ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.ФормаЗаписи", Структура);
		
	Иначе
		
		// В противном случае выдаем пользователю предупреждение о ее отсутствии.
		ПоказатьПредупреждение(, "Учетная политика (ЖКХ) не определена на дату документа по указанной организации!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СсылкаНастройкаРасчетаПениПоКапремонту".
Процедура СсылкаНастройкаРасчетаПениПоКапремонту(Команда)
	
	НастройкаРасчетаПени = ПолучитьНастройкуРасчетаПениПоКапремонтуНаСервере(Объект.Организация);
	ОткрытьФорму("Справочник.УПЖКХ_НастройкиРасчетаПени.Форма.ФормаЭлемента", Новый Структура("Ключ", НастройкаРасчетаПени));
	
КонецПроцедуры

&НаКлиенте
// Обработчик навигационной ссылки "СсылкаОбновлениеКлючевойСтавкиЦБ".
Процедура СсылкаОбновлениеКлючевойСтавкиЦБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СсылкаНаРегистрСведенийКлючевойСтавки" Тогда
		
		ОткрытьФорму("РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ.ФормаСписка");
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область СтандартныеПодсистемы_ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
