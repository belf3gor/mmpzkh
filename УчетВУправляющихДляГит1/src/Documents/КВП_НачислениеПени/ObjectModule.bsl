#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак новый ли это документ.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.

#Область ОбработчикиСобытийФормы

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Начисления", "Сумма");
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	ТаблицаНачислений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		Движение = ТаблицаНачислений.Добавить();
		Движение.Период                      = Дата;
		Движение.Организация                 = Организация;
		Движение.ЛицевойСчет                 = ТекСтрокаНачисления.ЛицевойСчет;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаНачисления.МесяцНачисления) Тогда
			Движение.МесяцНачисления             = КонецМесяца(Дата);
		Иначе
			Движение.МесяцНачисления             = КонецМесяца(ТекСтрокаНачисления.МесяцНачисления);
		КонецЕсли;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор                 = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
														ТекСтрокаНачисления.ЛицевойСчет, Организация, Дата, "Договор");
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаНачисления.Услуга;
		Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Пени;
		Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
		Движение.СуммаНачисления             = ТекСтрокаНачисления.Сумма;
	КонецЦикла;
	
	УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
	                                                                        Новый Структура("Приход", ТаблицаНачислений));
	
	// Движения для отражения начислений в регл. учете.
	СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаНачисленияПениЖкх", ВремяНачала);
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим, нет ли льгот по добровольному страхованию.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтрокиСтрахования = Начисления.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			Отказ = Истина;
			
			Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + СтрокаСтрахования.НомерСтроки + " указана услуга добровольного страхования, пени по которой нельзя начислять.");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременныхМодуля

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли