
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" элемента формы "МесяцНачисления".
// 
Процедура МесяцНачисленияПриИзменении(Элемент)
	
	ЗаполнитьТаблицуРаботУслуг();
	
КонецПроцедуры // МесяцНачисленияПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "Работы/услуги".
// 
Процедура РаботыУслугиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // РаботыУслугиПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "Работы/услуги".
// 
Процедура РаботыУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // РаботыУслугиПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" элемента формы "ПереченьРаботУслуг".
// 
Процедура ПереченьРаботУслугПриИзменении(Элемент)
	
	Объект.РаботыУслуги.Очистить();
	Объект.МесяцНачисления = Дата(1,1,1);
	Объект.Организация     = ПолучитьОрганизациюПоПеречню();
	ОбновитьСписокМесяцевНачислений();
	
КонецПроцедуры // ПереченьРаботУслугПриИзменении()

&НаКлиенте
//Процедура - обработчик события "ПриИзменении" поля "Цена" таблицы "Работы/Услуги".
//
Процедура РаботыУслугиЦенаПриИзменении(Элемент)
	УстановитьОтображениеФактическихПоказателей(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
// 
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ПереченьРаботУслуг) Тогда
		ОбновитьСписокМесяцевНачислений(Истина);
	КонецЕсли;
	
	ОбновитьОтображениеДанных(Элементы.МесяцНачисления);
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура-обработчик события "ПередЗаписьюНаСервере" формы.
// 
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КлючДанных = ТекущийОбъект.Ссылка;
	ПутьКДанным = "Объект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_УчетФактовРаботУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УПЖКХ_УчетФактовРаботУслуг КАК УПЖКХ_УчетФактовРаботУслуг
		|ГДЕ
		|	УПЖКХ_УчетФактовРаботУслуг.ПометкаУдаления = ЛОЖЬ
		|	И УПЖКХ_УчетФактовРаботУслуг.МесяцНачисления = &МесяцНачисления
		|	И УПЖКХ_УчетФактовРаботУслуг.ПереченьРаботУслуг = &ПереченьРаботУслуг
		|	И НЕ УПЖКХ_УчетФактовРаботУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МесяцНачисления", ТекущийОбъект.МесяцНачисления);
	Запрос.УстановитьПараметр("ПереченьРаботУслуг", ТекущийОбъект.ПереченьРаботУслуг);
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные о фиксации работ/услуг не могут быть записаны. Уже есть документ о фиксации работ/услуг по указанному перечню и периоду.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.РаботыУслуги Цикл
		
		Поле = "РаботыУслуги[" + Строка(СтрокаТабличнойЧасти.НомерСтроки-1) + "]";
		
		Если (СтрокаТабличнойЧасти.Цена > 0 ИЛИ СтрокаТабличнойЧасти.Объем > 0)
		     И (СтрокаТабличнойЧасти.Цена = 0 ИЛИ СтрокаТабличнойЧасти.Объем = 0 ИЛИ СтрокаТабличнойЧасти.ФактическоеКоличество = 0) Тогда
			
			Если СтрокаТабличнойЧасти.Цена = 0 Тогда
				ТекстСообщения = "В строке " + Строка(СтрокаТабличнойЧасти.НомерСтроки) + " не указана цена (должны быть указаны: цена, объем, количество).";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле+".Цена",ПутьКДанным,Отказ);
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.Объем = 0 Тогда
				ТекстСообщения = "В строке " + Строка(СтрокаТабличнойЧасти.НомерСтроки) + " не указан объем (должны быть указаны: цена, объем, количество).";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле+".Объем",ПутьКДанным,Отказ);
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.ФактическоеКоличество = 0 Тогда
				ТекстСообщения = "В строке " + Строка(СтрокаТабличнойЧасти.НомерСтроки) + " не указано количество (должны быть указаны: цена, объем, количество).";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле+".ФактическоеКоличество",ПутьКДанным,Отказ);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Цена = 0 И СтрокаТабличнойЧасти.Объем = 0 И СтрокаТабличнойЧасти.Стоимость = 0 Тогда
			
			ТекстСообщения = "В строке " + Строка(СтрокаТабличнойЧасти.НомерСтроки) + " не указаны данные для выгрузки (должны быть указаны: или цена, объем, количество, или стоимость и, возможно, количество).";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле+".Цена",ПутьКДанным,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Функция получает список периодов из перечня работ/услуг.
// Возвращает список значений, содержащий месяцы.
// 
Функция ПолучитьСписокПериодовПеречняРаботУслуг()
	
	СписокПериодовПеречняРаботУслуг = Новый СписокЗначений;
	
	ТекущийМесяц   = Объект.ПереченьРаботУслуг.НачалоПериода;
	ПоследнийМесяц = Объект.ПереченьРаботУслуг.ОкончаниеПериода;
	
	Пока ТекущийМесяц <= ПоследнийМесяц Цикл
		СписокПериодовПеречняРаботУслуг.Добавить(ТекущийМесяц, Формат(ТекущийМесяц, "ДФ=""ММММ гггг"""));
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	Возврат СписокПериодовПеречняРаботУслуг;
	
КонецФункции // ПолучитьСписокПериодовПеречняРаботУслуг()

&НаКлиенте
// Процедура обновляет список месяцев начислений, полученный из перечня работ/услуг.
// 
Процедура ОбновитьСписокМесяцевНачислений(ЭтоОткрытиеДокумента = Ложь)
	
	Элементы.МесяцНачисления.СписокВыбора.Очистить();
	
	СписокПериодовПеречняРаботУслуг = ПолучитьСписокПериодовПеречняРаботУслуг();
	
	Для Каждого ПериодПеречня Из СписокПериодовПеречняРаботУслуг Цикл
		Элементы.МесяцНачисления.СписокВыбора.Добавить(ПериодПеречня.Значение, ПериодПеречня.Представление);
	КонецЦикла;
	
	// Если происходит открытие документа, то обновлять список месяцев начисления не нужно.
	Если НЕ ЭтоОткрытиеДокумента Тогда
		МесяцНачисленияПриИзменении(Элементы.МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСписокМесяцевНачислений()

&НаСервере
// Процедура заполняет таблицу работ/услуг на основании данных документа планирования работ.
// 
Процедура ЗаполнитьТаблицуРаботУслуг()
	
	Объект.РаботыУслуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ПланыРаботУслуг.РаботаУслуга,
	|	УПЖКХ_ПланыРаботУслуг.ПлановоеКоличество,
	|	УПЖКХ_ПеречниРаботИУслугРаботыУслуги.Цена,
	|	УПЖКХ_ПеречниРаботИУслугРаботыУслуги.Объем
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПланыРаботУслуг КАК УПЖКХ_ПланыРаботУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_ПеречниРаботИУслуг.РаботыУслуги КАК УПЖКХ_ПеречниРаботИУслугРаботыУслуги
	|		ПО (УПЖКХ_ПеречниРаботИУслугРаботыУслуги.Ссылка = УПЖКХ_ПланыРаботУслуг.ПереченьРаботУслуг)
	|			И (УПЖКХ_ПеречниРаботИУслугРаботыУслуги.ВидРаботы = УПЖКХ_ПланыРаботУслуг.РаботаУслуга)
	|ГДЕ
	|	УПЖКХ_ПланыРаботУслуг.Здание = &Здание
	|	И УПЖКХ_ПланыРаботУслуг.Организация = &Организация
	|	И УПЖКХ_ПланыРаботУслуг.МесяцНачисления = &МесяцНачисления";
	
	Запрос.УстановитьПараметр("Организация",     Объект.ПереченьРаботУслуг.Организация);
	Запрос.УстановитьПараметр("Здание",          Объект.ПереченьРаботУслуг.Здание);
	Запрос.УстановитьПараметр("МесяцНачисления", НачалоМесяца(Объект.МесяцНачисления));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРаботУслуг = Объект.РаботыУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаботУслуг, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРаботУслуг()

&НаСервере
// Функция получает значение управляющей организации по выбранному перечню работ/услуг.
// 
Функция ПолучитьОрганизациюПоПеречню()
	
	Возврат Объект.ПереченьРаботУслуг.Организация;
	
КонецФункции // ПолучитьОрганизациюПоПеречню()

&НаКлиенте
// Устанавливает отображение столбцов с фактическими показателями.
//
Процедура УстановитьОтображениеФактическихПоказателей(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.Родитель.ТекущиеДанные;
	
	Если Элемент.Имя = "РаботыУслугиЦена" ИЛИ Элемент.Имя = "РаботыУслугиОбъем" Тогда
		
		ТекущиеДанные.Стоимость = 0;
		
	ИначеЕсли Элемент.Имя = "РаботыУслугиСтоимость" Тогда
		
		ТекущиеДанные.Цена = 0;
		ТекущиеДанные.Объем = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
