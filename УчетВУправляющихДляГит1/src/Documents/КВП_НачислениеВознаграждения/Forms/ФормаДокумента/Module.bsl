#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.СтраницаСчетаУчета.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Объект.ОтражатьВБухгалтерскомУчете;
	
	Если Форма.ПоказыватьВДокументахСчетаУчета Тогда
		
		Элементы.ГруппаСчетаУчетаВознаграждения.Видимость        = Объект.ОтражатьВБухгалтерскомУчете;
		Элементы.ГруппаСчетаУчетаРасчетовСПоставщиками.Видимость = Объект.ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;
	
	Если Форма.ПоказыватьВДокументахСчетаУчета Тогда
		УстановитьДоступностьСубконтоПоЗначениюСчета(Форма, "СчетВознаграждения");
		УстановитьДоступностьСубконтоПоЗначениюСчета(Форма, "СчетУчетаНДС");
		УстановитьДоступностьСубконтоПоЗначениюСчета(Форма, "СчетРасчетовСПоставщиками");
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Устанавливает счета учета по умолчанию.
Процедура ЗаполнитьСчетаУчетаПоУмолчанию()
	
	Объект.СчетВознаграждения = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	Объект.СчетРасчетовСПоставщиками = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
КонецПроцедуры

&НаКлиенте
// Процедура автоматического расчета полей табличной части Начисления.
//
Процедура РассчитатьПоляСтрокиТЧ(СтрокаТабличнойЧасти)
	
	Если Не СтрокаТабличнойЧасти.СуммаНачисления = 0 
		 И СтрокаТабличнойЧасти.СпособРасчета = ПредопределенноеЗначение(
		 											"Перечисление.КВП_СпособРасчетаВознагражденияСоСборов.Сложный")
		 И СтрокаТабличнойЧасти.СуммаСбора / СтрокаТабличнойЧасти.СуммаНачисления < 0.95 Тогда
		 
		Если СтрокаТабличнойЧасти.НДСВТомЧисле Тогда
			 
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения 
													 - (СтрокаТабличнойЧасти.СуммаНачисления - СтрокаТабличнойЧасти.СуммаСбора)
													 * СтрокаТабличнойЧасти.ПроцентШтрафа;
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаВсего / 1.18;
			СтрокаТабличнойЧасти.СуммаНДС            = СтрокаТабличнойЧасти.СуммаВсего
													 - СтрокаТабличнойЧасти.СуммаВознаграждения;
		Иначе
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения 
													 - (СтрокаТабличнойЧасти.СуммаНачисления - СтрокаТабличнойЧасти.СуммаСбора) 
													 * СтрокаТабличнойЧасти.ПроцентШтрафа;
			СтрокаТабличнойЧасти.СуммаНДС            = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(
														СтрокаТабличнойЧасти.СуммаВознаграждения, СтрокаТабличнойЧасти.НДСВТомЧисле,
														УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаВознаграждения + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаТабличнойЧасти.НДСВТомЧисле Тогда
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения;
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаВсего / 1.18;
			СтрокаТабличнойЧасти.СуммаНДС            = СтрокаТабличнойЧасти.СуммаВсего
													 - СтрокаТабличнойЧасти.СуммаВознаграждения;
		Иначе
			
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения;
			СтрокаТабличнойЧасти.СуммаНДС            = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(
														СтрокаТабличнойЧасти.СуммаВознаграждения, СтрокаТабличнойЧасти.НДСВТомЧисле,
														УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаВознаграждения + СтрокаТабличнойЧасти.СуммаНДС;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура заполняет табличную часть на сервере.
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_НачислениеВознаграждения"));
	ДокументОбъект.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, 
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		ЗаполнитьСчетаУчетаПоУмолчанию();
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрока");
	
	ПоказыватьВДокументахСчетаУчета = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПоказыватьВДокументахСчетаУчета");
	Элементы.ФормаПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПоказыватьВДокументахСчетаУчета", ,
																		ПоказыватьВДокументахСчетаУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

#Область РаботаСПериодомМесяц

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцНачисленияСтрока".
Процедура МесяцНачисленияСтрокаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрока",
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцНачисленияСтрока".
Процедура МесяцНачисленияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма,
														"Объект.МесяцНачисления", "МесяцНачисленияСтрока");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцНачисленияСтрока".
Процедура МесяцНачисленияСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрока",
														Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцНачисленияСтрока".
Процедура МесяцНачисленияСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцНачисленияСтрока".
Процедура МесяцНачисленияСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьВознаграждения

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "Вознаграждения".
Процедура ВознагражденияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Не СтрокаТабличнойЧасти = Неопределено Тогда
		РассчитатьПоляСтрокиТЧ(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСоСчетамиУчета

&НаКлиентеНаСервереБезКонтекста
// Процедура установки доступности субконто.
Процедура УстановитьДоступностьСубконтоПоЗначениюСчета(Форма, ИмяСчета)

	Если ИмяСчета = "СчетВознаграждения" Тогда
		// Обновляем заголовки и доступность полей субконто:
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
									"СубконтоСчетаВознаграждения1",
									"СубконтоСчетаВознаграждения2",
									"СубконтоСчетаВознаграждения3");
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
										 "ЗаголовокСубконтоСчетаВознаграждения1", "ЗаголовокСубконтоСчетаВознаграждения2",
										 "ЗаголовокСубконтоСчетаВознаграждения3");
	ИначеЕсли  ИмяСчета = "СчетУчетаНДС" Тогда
		// Обновляем заголовки и доступность полей субконто:
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
									"СубконтоСчетаУчетаНДС1",
									"СубконтоСчетаУчетаНДС2",
									"СубконтоСчетаУчетаНДС3");
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
										 "ЗаголовокСубконтоСчетаУчетаНДС1", "ЗаголовокСубконтоСчетаУчетаНДС2",
										 "ЗаголовокСубконтоСчетаУчетаНДС3");
	ИначеЕсли  ИмяСчета = "СчетРасчетовСПоставщиками" Тогда
		// Обновляем заголовки и доступность полей субконто:
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
									"СубконтоСчетаРасчетовСПоставщиками1",
									"СубконтоСчетаРасчетовСПоставщиками2",
									"СубконтоСчетаРасчетовСПоставщиками3");
		ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
										 "ЗаголовокСубконтоСчетаУчетаРасчетовСПоставщиками1", "ЗаголовокСубконтоСчетаУчетаРасчетовСПоставщиками2",
										 "ЗаголовокСубконтоСчетаУчетаРасчетовСПоставщиками3");
		
	КонецЕсли;

	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриВыбореСчета(Форма.Объект[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура изменения параметров выбора субконто
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

#Область СчетаУчетаВознаграждения

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СчетВознаграждения".
Процедура СчетВознагражденияПриИзменении(Элемент)

	УстановитьДоступностьСубконтоПоЗначениюСчета(ЭтаФорма, "СчетВознаграждения");

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаВознаграждения1", "СубконтоСчетаВознаграждения2", "СубконтоСчетаВознаграждения3");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриИзмененииСчета(Объект.СчетВознаграждения, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаВознаграждения", "СчетВознаграждения");

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СубконтоСчетВознаграждения".
Процедура СубконтоСчетВознагражденияПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаВознаграждения", "СчетВознаграждения");

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СубконтоСчетВознаграждения".
Процедура СубконтоСчетВознагражденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект,
														"СубконтоСчетаВознаграждения%Индекс%", "СчетВознаграждения");
	УПЖКХ_ТиповыеМетодыКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

#КонецОбласти

#Область СчетаУчетаНДС

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СчетУчетаНДС".
Процедура СчетУчетаНДСПриИзменении(Элемент)

	УстановитьДоступностьСубконтоПоЗначениюСчета(ЭтаФорма, "СчетУчетаНДС");

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаУчетаНДС1", "СубконтоСчетаУчетаНДС2", "СубконтоСчетаУчетаНДС3");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаНДС, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаУчетаНДС", "СчетУчетаНДС");

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СубконтоСчетУчетаНДС".
Процедура СубконтоСчетУчетаНДСПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаУчетаНДС", "СчетУчетаНДС");

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СубконтоСчетУчетаНДС".
Процедура СубконтоСчетУчетаНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоСчетаУчетаНДС%Индекс%", "СчетУчетаНДС");
	УПЖКХ_ТиповыеМетодыКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

#КонецОбласти

#Область СчетаУчетаРасчетовСПоставщиками

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СчетУчетаНДС".
Процедура СчетРасчетовСПоставщикамиПриИзменении(Элемент)

	УстановитьДоступностьСубконтоПоЗначениюСчета(ЭтаФорма, "СчетРасчетовСПоставщиками");

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаРасчетовСПоставщиками1", "СубконтоСчетаРасчетовСПоставщиками2", "СубконтоСчетаРасчетовСПоставщиками3");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриИзмененииСчета(Объект.СчетРасчетовСПоставщиками, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаРасчетовСПоставщиками", "СчетРасчетовСПоставщиками");

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СубконтоСчетУчетаНДС".
Процедура СубконтоСчетРасчетовСПоставщикамиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СчетаРасчетовСПоставщиками", "СчетРасчетовСПоставщиками");

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СубконтоСчетУчетаНДС".
Процедура СубконтоСчетРасчетовСПоставщикамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект,
						"СубконтоСчетаРасчетовСПоставщиками%Индекс%", "СчетРасчетовСПоставщиками");
	УПЖКХ_ТиповыеМетодыКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Вознаграждения.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект),
					   "Вы хотите заполнить таблицу автоматически? Таблица будет очищена!",
					   РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьНаСервере();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.Вознаграждения.Очистить();
		ЗаполнитьТабличнуюЧастьНаСервере();
	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Обработчик команды "ПоказатьСкрытьСчетаУчета".
Процедура ПоказатьСкрытьСчетаУчета(Команда)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ФормаПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область СтандартныеПодсистемы_ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти