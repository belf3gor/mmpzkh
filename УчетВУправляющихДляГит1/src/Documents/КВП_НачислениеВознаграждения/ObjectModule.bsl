#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ЗапросПоУслуге, ОсновнаяСтавкаНДС;

#Область ПроцедурыИФункцииПечати

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Структура = Новый Структура;

	Возврат Структура	
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Функция возвращает сведения о процентах вознаграждения по услуге.
//
Функция ПолучитьСведенияОВознаграждениях(Услуга, ПоставщикУслуг)
	
	СтруктураСведений = Новый Структура;
	
	МассивУслуг = Новый Массив;
	МассивУслуг.Добавить(Справочники.КВП_Услуги.ПустаяСсылка());
	
	МассивВидовУслуг = Новый Массив;
	МассивВидовУслуг.Добавить(Справочники.КВП_ВидыУслуг.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Услуга) Тогда
			МассивУслуг.Добавить(Услуга);
			МассивВидовУслуг.Добавить(Услуга.ВидУслуги);
	КонецЕсли;
	
	ЗапросПоУслуге.УстановитьПараметр("МассивУслуг", МассивУслуг);
	ЗапросПоУслуге.УстановитьПараметр("ВидУслуги", МассивВидовУслуг);
	ЗапросПоУслуге.УстановитьПараметр("ПоставщикУслуг", ПоставщикУслуг);
	
	РезультатЗапроса = ЗапросПоУслуге.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("Глубина");
	
	Для Каждого ТекСтрока Из РезультатЗапроса Цикл
		
		Если ТекСтрока.Услуга = Справочники.КВП_Услуги.ПустаяСсылка() 
		 И ТекСтрока.ВидУслуги = Справочники.КВП_ВидыУслуг.ПустаяСсылка() Тогда
			ТекСтрока.Глубина = 0;
		ИначеЕсли НЕ ТекСтрока.Услуга = Справочники.КВП_Услуги.ПустаяСсылка() Тогда
			ТекСтрока.Глубина = ТекСтрока.Услуга.ПолныйКод();
		Иначе
			ТекСтрока.Глубина = ТекСтрока.ВидУслуги.ПолныйКод();
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса.Сортировать("Глубина Убыв");
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		 Сведения = РезультатЗапроса[0];
		 СтруктураСведений.Вставить("ПроцентВознаграждения", Сведения.ПроцентВознаграждения);
		 СтруктураСведений.Вставить("ПроцентШтрафа", Сведения.ПроцентШтрафа);
		 СтруктураСведений.Вставить("НДСВТомЧисле", Сведения.НДСВТомЧисле); 
		 СтруктураСведений.Вставить("СпособРасчета", Сведения.СпособРасчета);
		
	КонецЕсли;
	
	Возврат СтруктураСведений; 
	
КонецФункции

// Функция формирует текст запроса.
//
Функция СформироватьТекстЗапросаПоНЛС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Услуга,
	|	СУММА(КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияРасход) КАК СуммаНачисленияРасход,
	|	СУММА(ВложенныйЗапрос.СуммаНачисленияПриход) КАК СуммаНачисленияПриход,
	|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет
	|ПОМЕСТИТЬ врНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&ОплатаНач, &ОплатаКон, , , 
	|																		Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияПриход КАК СуммаНачисленияПриход,
	|			КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|			КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга КАК Услуга
	|		ИЗ
	|			РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&НачалоМесяца, &КонецМесяца, , , 
	|																				Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты) КАК ВложенныйЗапрос
	|		ПО КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга = ВложенныйЗапрос.Услуга
	|			И КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Услуга,
	|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врНачисления.Услуга,
	|	врНачисления.ЛицевойСчет,
	|	1 КАК Приоритет,
	|	КВП_ПоставщикиУслугСрезПоследних.Поставщик
	|ПОМЕСТИТЬ врПриоритеты
	|ИЗ
	|	врНачисления КАК врНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(&ОплатаКон, ) 
	|			КАК КВП_ПоставщикиУслугСрезПоследних
	|		ПО врНачисления.ЛицевойСчет.Адрес.Владелец = КВП_ПоставщикиУслугСрезПоследних.Объект
	|			И врНачисления.Услуга.ВидУслуги = КВП_ПоставщикиУслугСрезПоследних.ВидУслуги
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врНачисления.Услуга,
	|	врНачисления.ЛицевойСчет,
	|	2,
	|	КВП_ПоставщикиУслугСрезПоследних.Поставщик
	|ИЗ
	|	врНачисления КАК врНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(&ОплатаКон, ) 
	|			КАК КВП_ПоставщикиУслугСрезПоследних
	|		ПО врНачисления.ЛицевойСчет.Адрес.Подъезд = КВП_ПоставщикиУслугСрезПоследних.Объект
	|			И врНачисления.Услуга.ВидУслуги = КВП_ПоставщикиУслугСрезПоследних.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПриоритеты.Услуга,
	|	врПриоритеты.ЛицевойСчет,
	|	МАКСИМУМ(врПриоритеты.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ врЛучшиеПриоритеты
	|ИЗ
	|	врПриоритеты КАК врПриоритеты
	|
	|СГРУППИРОВАТЬ ПО
	|	врПриоритеты.Услуга,
	|	врПриоритеты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПриоритеты.Услуга,
	|	врПриоритеты.ЛицевойСчет,
	|	врПриоритеты.Поставщик
	|ПОМЕСТИТЬ врПоставщикСПриоритетом
	|ИЗ
	|	врПриоритеты КАК врПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врЛучшиеПриоритеты КАК врЛучшиеПриоритеты
	|		ПО врПриоритеты.Услуга = врЛучшиеПриоритеты.Услуга
	|			И врПриоритеты.ЛицевойСчет = врЛучшиеПриоритеты.ЛицевойСчет
	|			И врПриоритеты.Приоритет = врЛучшиеПриоритеты.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисления.Услуга,
	|	врПоставщикСПриоритетом.Поставщик КАК ПоставщикУслуг,
	|	СУММА(врНачисления.СуммаНачисленияРасход) КАК СуммаНачисленияРасход,
	|	СУММА(врНачисления.СуммаНачисленияПриход) КАК СуммаНачисленияПриход
	|ИЗ
	|	врНачисления КАК врНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщикСПриоритетом КАК врПоставщикСПриоритетом
	|		ПО врНачисления.Услуга = врПоставщикСПриоритетом.Услуга
	|			И врНачисления.ЛицевойСчет = врПоставщикСПриоритетом.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	врНачисления.Услуга,
	|	врПоставщикСПриоритетом.Поставщик";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует текст запроса выборки сведений по услуге
// из регистра сведений СтавкиВознагражденияСоСборовПоУслугам.
Функция СформироватьТекстЗапросаПоПроцентамУслуг()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.ПроцентВознаграждения,
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.ПроцентШтрафа,
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.НДСВТомЧисле,
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.Услуга,
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.ВидУслуги,
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.СпособРасчета
	               |ИЗ
	               |	РегистрСведений.КВП_СтавкиВознагражденияСоСборовЗаУслуги.СрезПоследних(
	               |			&ДатаКон,
	               |			Организация = &Организация
	               |				И УправляющаяКомпания = &УправляющаяКомпания
	               |				И ПоставщикУслуг = &ПоставщикУслуг) КАК КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних
	               |ГДЕ
	               |	КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.Услуга В(&МассивУслуг)
	               |	И КВП_СтавкиВознагражденияСоСборовЗаУслугиСрезПоследних.ВидУслуги В(&ВидУслуги)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура автоматического заполнения табличной части Начисления.
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	Запрос = Новый Запрос();
	ТекстЗапроса = СформироватьТекстЗапросаПоНЛС();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("УправляющаяКомпания", УправляющаяКомпания);
	Запрос.УстановитьПараметр("Организация"  , Организация);
	Запрос.УстановитьПараметр("НачалоМесяца" , НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецМесяца"  , КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("Действует"    , Истина);
	
	ЗапросПоДатеПоследнегоНачисления = Новый Запрос;
	ЗапросПоДатеПоследнегоНачисления.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеВознаграждения.Дата КАК Дата
	|ИЗ
	|	Документ.КВП_НачислениеВознаграждения КАК КВП_НачислениеВознаграждения
	|ГДЕ
	|	КВП_НачислениеВознаграждения.Дата < &ТекДатаДок
	|	И КВП_НачислениеВознаграждения.Дата >= &НачалоМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	ЗапросПоДатеПоследнегоНачисления.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	ЗапросПоДатеПоследнегоНачисления.УстановитьПараметр("ТекДатаДок",   Дата);
	ВыборкаДата = ЗапросПоДатеПоследнегоНачисления.Выполнить().Выбрать();
	
	Если ВыборкаДата.Следующий() Тогда
		ОплатаНач = ВыборкаДата.Дата;
	Иначе
		ОплатаНач = НачалоМесяца(Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОплатаНач"    , ОплатаНач);
	Запрос.УстановитьПараметр("ОплатаКон"    , Дата);
	
	ИтоговаяТаблица = Запрос.Выполнить().Выгрузить();
	ИтоговаяТаблица.Колонки.Добавить("ПроцентВознаграждения");
	ИтоговаяТаблица.Колонки.Добавить("ПроцентШтрафа");
	ИтоговаяТаблица.Колонки.Добавить("НДСВТомЧисле");
	ИтоговаяТаблица.Колонки.Добавить("СпособРасчета");
	
	ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	
	ЗапросПоУслуге = Новый Запрос;
	
	ЗапросПоУслуге.УстановитьПараметр("УправляющаяКомпания", УправляющаяКомпания);
	ЗапросПоУслуге.УстановитьПараметр("Организация", Организация);
	ЗапросПоУслуге.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	
	ЗапросПоУслуге.Текст = СформироватьТекстЗапросаПоПроцентамУслуг();
	
	Для Каждого ТекСтрока Из ИтоговаяТаблица Цикл
		
		СтруктураПолей = ПолучитьСведенияОВознаграждениях(ТекСтрока.Услуга, ТекСтрока.ПоставщикУслуг);	
		
		Если СтруктураПолей.Количество() > 0 Тогда
			ТекСтрока.ПроцентВознаграждения = СтруктураПолей["ПроцентВознаграждения"];
			ТекСтрока.ПроцентШтрафа         = СтруктураПолей["ПроцентШтрафа"];
			ТекСтрока.НДСВТомЧисле          = СтруктураПолей["НДСВТомЧисле"];
			ТекСтрока.СпособРасчета        = СтруктураПолей["СпособРасчета"];
		Иначе 
			ТекСтрока.ПроцентВознаграждения = 0;
			ТекСтрока.ПроцентШтрафа         = 0;
			ТекСтрока.НДСВТомЧисле          = Истина;
			ТекСтрока.СпособРасчета        = Перечисления.КВП_СпособРасчетаВознагражденияСоСборов;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ИтоговаяТаблица Цикл
		
		НоваяСтрока = Вознаграждения.Добавить();
		
		НоваяСтрока.Услуга          = ТекСтрока.Услуга;
		НоваяСтрока.ПоставщикУслуг  = ТекСтрока.ПоставщикУслуг;
		НоваяСтрока.СуммаНачисления = ТекСтрока.СуммаНачисленияРасход;
				
		НоваяСтрока.СуммаНачисления = ТекСтрока.СуммаНачисленияПриход;
		НоваяСтрока.СуммаСбора      = ТекСтрока.СуммаНачисленияРасход;

		НоваяСтрока.ПроцентВознаграждения = ТекСтрока.ПроцентВознаграждения;
		
		НоваяСтрока.ПроцентШтрафа = ТекСтрока.ПроцентШтрафа; 
		
		НоваяСтрока.СпособРасчета = ТекСтрока.СпособРасчета;
		
		НоваяСтрока.НДСВТомЧисле = ТекСтрока.НДСВТомЧисле;
		
		НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
		
		РассчитатьПоляСтрокиТЧ(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура автоматического расчета полей табличной части Начисления.
//
Процедура РассчитатьПоляСтрокиТЧ(СтрокаТабличнойЧасти) Экспорт
	
	Если Не СтрокаТабличнойЧасти.СуммаНачисления = 0 
		 И СтрокаТабличнойЧасти.СпособРасчета = Перечисления.КВП_СпособРасчетаВознагражденияСоСборов.Сложный
		 И СтрокаТабличнойЧасти.СуммаСбора / СтрокаТабличнойЧасти.СуммаНачисления < 0.95 Тогда
		 
		Если СтрокаТабличнойЧасти.НДСВТомЧисле Тогда
			 
			СтрокаТабличнойЧасти.СуммаВсего          = 
				СтрокаТабличнойЧасти.СуммаСбора * СтрокаТабличнойЧасти.ПроцентВознаграждения
				 - (СтрокаТабличнойЧасти.СуммаНачисления - СтрокаТабличнойЧасти.СуммаСбора) * СтрокаТабличнойЧасти.ПроцентШтрафа;
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаВсего / 1.18;
			СтрокаТабличнойЧасти.СуммаНДС            = 
				СтрокаТабличнойЧасти.СуммаВсего - СтрокаТабличнойЧасти.СуммаВознаграждения;
		Иначе
			СтрокаТабличнойЧасти.СуммаВознаграждения = 
				СтрокаТабличнойЧасти.СуммаСбора * СтрокаТабличнойЧасти.ПроцентВознаграждения
				 - (СтрокаТабличнойЧасти.СуммаНачисления - СтрокаТабличнойЧасти.СуммаСбора) * СтрокаТабличнойЧасти.ПроцентШтрафа;
			СтрокаТабличнойЧасти.СуммаНДС            = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																				  Истина, СтрокаТабличнойЧасти.НДСВТомЧисле,
																				  УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаВознаграждения + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаТабличнойЧасти.НДСВТомЧисле Тогда
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения;
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаВсего / 1.18;
			СтрокаТабличнойЧасти.СуммаНДС            = СтрокаТабличнойЧасти.СуммаВсего
														 - СтрокаТабличнойЧасти.СуммаВознаграждения;
		Иначе
			
			СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаСбора 
													 * СтрокаТабличнойЧасти.ПроцентВознаграждения;
			СтрокаТабличнойЧасти.СуммаНДС            = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																				  Истина, СтрокаТабличнойЧасти.НДСВТомЧисле, 
																				  УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			СтрокаТабличнойЧасти.СуммаВсего          = СтрокаТабличнойЧасти.СуммаВознаграждения + СтрокаТабличнойЧасти.СуммаНДС;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроведенияДокумента

// Процедура формирует движения документа по регистрам.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоВознаграждениям, Отказ, Заголовок)
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Для Каждого ТекСтрока Из ТаблицаПоВознаграждениям Цикл
		
		НоваяПроводка = ПроводкиБУ.Добавить();
		НоваяПроводка.Организация           = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Период                = СтруктураШапкиДокумента.Дата;
		
		НоваяПроводка.СчетДт                = СтруктураШапкиДокумента.СчетРасчетовСПоставщиками;
		
		Если ТекСтрока.НДСВТомЧисле Тогда
			НоваяПроводка.Сумма = ТекСтрока.СуммаВознаграждения - ТекСтрока.СуммаНДС;
		Иначе
			НоваяПроводка.Сумма = ТекСтрока.СуммаВознаграждения;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, ТекСтрока.ПоставщикУслуг);
		
		Если НоваяПроводка.СубконтоДт.Контрагенты = Неопределено Тогда
			 БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, 
			 									  НоваяПроводка.СубконтоДт, 
												  1, 
												  СтруктураШапкиДокумента.СубконтоСчетаРасчетовСПоставщиками1); 
		КонецЕсли;
		
		ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ОсновнойДоговорКонтрагента, ТекСтрока.ПоставщикУслуг, СтруктураШапкиДокумента.Организация);
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, ОсновнойДоговорКонтрагента);
		
		Если НоваяПроводка.СубконтоДт.Договоры = Неопределено Тогда
			 БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2,
			                                           СтруктураШапкиДокумента.СубконтоСчетаРасчетовСПоставщиками2);
		КонецЕсли;
		
		Если НоваяПроводка.СчетДт.ВидыСубконто.Количество() > 2 Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3,
			                                            СтруктураШапкиДокумента.СубконтоСчетаВознаграждения3);
		КонецЕсли;
		
		
		НоваяПроводка.СчетКт                = СтруктураШапкиДокумента.СчетВознаграждения;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1,
		                                                СтруктураШапкиДокумента.СубконтоСчетаВознаграждения1);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2,
		                                                                         ТекСтрока.СтавкаНДС);
		
		Если НоваяПроводка.СубконтоКт.СтавкиНДС = Неопределено Тогда
			 БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2,
			                                          СтруктураШапкиДокумента.СубконтоСчетаВознаграждения2); 
		КонецЕсли;
		
		Если НоваяПроводка.СчетКт.ВидыСубконто.Количество() > 2 Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3,
			                                        СтруктураШапкиДокумента.СубконтоСчетаВознаграждения3); 
		КонецЕсли;
		
		// Движения по регистру КВП_НачисленныеВознаграждения
		
		ДвиженияНачисленныеВознаграждения = Движения.КВП_НачисленныеВознаграждения;
		
		НовоеДвижение = ДвиженияНачисленныеВознаграждения.Добавить();
		НовоеДвижение.Период      = СтруктураШапкиДокумента.Дата;
		НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
		
		НовоеДвижение.Сумма = НоваяПроводка.Сумма;

		Если ТекСтрока.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проводка по НДС
		НоваяПроводка = ПроводкиБУ.Добавить();
		НоваяПроводка.Организация           = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Период                = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Сумма                 = ТекСтрока.СуммаНДС;
		
		НоваяПроводка.СчетДт                = СтруктураШапкиДокумента.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1,
		                                                           СтруктураШапкиДокумента.СубконтоСчетаУчетаНДС1);
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт,
		                                                            "СтавкиНДС", ТекСтрока.СтавкаНДС);
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3,
		                                                            СтруктураШапкиДокумента.СубконтоСчетаУчетаНДС3);

		НоваяПроводка.СчетКт                = ПланыСчетов.Хозрасчетный.НДС;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт,
		                                       "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
											   
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Вознаграждения", "СуммаВсего");
	
КонецПроцедуры // ПередЗаписью()

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, ТаблицаПоВознаграждениям;
	
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_НачислениеВознаграждения.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента  = ПараметрыПроведения.Реквизиты;
	ТаблицаПоВознаграждениям = ПараметрыПроведения.ТаблицаПоВознаграждениям;
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(Режим, СтруктураШапкиДокумента, ТаблицаПоВознаграждениям, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	ПроверяемыеРеквизиты.Добавить("Вознаграждения.ПоставщикУслуг");
	ПроверяемыеРеквизиты.Добавить("Вознаграждения.СуммаВознаграждения");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
