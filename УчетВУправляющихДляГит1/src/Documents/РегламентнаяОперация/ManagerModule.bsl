#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ВЫПОЛНЕНИЯ ОПЕРАЦИЙ ДОКУМЕНТА

Функция ТекстЗапросаРеквизиты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	&Периодичность КАК Периодичность
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаРеквизиты()

// АМОРТИЗАЦИЯ И ИЗНОС ОС

Функция ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Начисление амортизации";
	СодержаниеИзнос       = "Начисление износа";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	Запрос.УстановитьПараметр("СодержаниеИзнос",       СодержаниеИзнос);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
				 + ТекстЗапросаРеквизитыИзносОС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыНачислениеАмортизацииИзносаОС() 

Функция ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияОС()

Функция ТекстЗапросаРеквизитыИзносОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеИзносаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеИзнос КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыИзносОС()

// АМОРТИЗАЦИЯ НМА И НИОКР

Функция ПодготовитьПараметрыНачислениеАмортизацииНМА_НИОКР(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Амортизация НМА";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияНМА()

// ПОГАШЕНИЕ СТОИМОСТИ СПЕЦОДЕЖДЫ И СПЕЦОСНАСТКИ

Функция ПодготовитьПараметрыСпецодеждаИСпецоснастка(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос     = Новый Запрос;
	Содержание = "Погашение стоимости спецодежды (спецоснастки)";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСпецодеждаИСпецоснастка()

Функция ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("РеквизитыСпецодеждаИСпецоснастка", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка()


// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ПодготовитьПараметрыПроведенияВалюнаяПереоценка(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Переоценка валютных остатков";
	Запрос.УстановитьПараметр("Ссылка",                  СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("ВалютаДокументаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Содержание",              Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВалюнаяПереоценка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроведенияВалюнаяПереоценка() 

Функция ТекстЗапросаВалюнаяПереоценка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВалютаДокументаРегУчета КАК ВалютаДокумента,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаВалюнаяПереоценка()


// РАСЧЕТ СПИСАНИЯ РБП

Функция ПодготовитьПараметрыРасчетСписанияРБП(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	
	СодержаниеШаблон = "Списание РБП за %1";
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СодержаниеШаблон, ПредставлениеПериода(СтруктураШапки.НачДата, СтруктураШапки.КонДата));
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетСписанияРБП(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ТекстЗапросаРасчетСписанияРБП(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРБП",      НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетСписанияРБП()

// РАСЧЕТ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Если СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		
		НачалоПериода = НачалоГода(СтруктураШапки.НачДата);
		ИмяРегистраРасчетНалогов = "РасчетНалогаНаИмущество";
		
	Иначе
		НачалоПериода = ?(КонецГода(СтруктураШапки.КонДата) = КонецКвартала(СтруктураШапки.КонДата),
						НачалоГода(СтруктураШапки.НачДата),
						НачалоКвартала(СтруктураШапки.НачДата));
						
		Если СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
			ИмяРегистраРасчетНалогов = "РасчетТранспортногоНалога";	
		ИначеЕсли СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
			ИмяРегистраРасчетНалогов = "РасчетЗемельногоНалога";	
		КонецЕсли;
			
	КонецЕсли;
	
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начислен %1 за %2'"),
		Строка(СтруктураШапки.ВидНалога),
		ПредставлениеПериода(НачалоПериода, СтруктураШапки.КонДата, "ФП = Истина"));
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	Запрос.УстановитьПараметр("ВидНалога", СтруктураШапки.ВидНалога);
	Запрос.УстановитьПараметр("ИмяРегистраРасчетНалогов", ИмяРегистраРасчетНалогов);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетИмущественныхНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВидНалога КАК ВидНалога,
	|	&Содержание КАК Содержание,
	|	&ИмяРегистраРасчетНалогов КАК ИмяРегистраРасчетНалогов
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ ТОРГОВОГО СБОРА

Функция ПодготовитьПараметрыРасчетТорговогоСбора(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НачалоПериода = НачалоКвартала(СтруктураШапки.НачДата);
	КонецПериода  = КонецКвартала(СтруктураШапки.КонДата);
	
	Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начислен торговый сбор за %1'"),
		ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП = Истина"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетТорговогСбора(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетТорговогСбора(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетТорговогоСбора", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ ТОРГОВОЙ НАЦЕНКИ ПО ПРОДАННЫМ ТОВАРАМ

Функция ПодготовитьПараметрыРасчетТорговойНаценки(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СпособОценкиТоваровВРознице =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапки.Организация, СтруктураШапки.КонДата);
	
	Содержание = "Торговая наценка";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетТорговойНаценки()

Функция ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетНаценки", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетТорговойНаценки()

// СПИСАНИЕ УБЫТКОВ ПРОШЛЫХ ЛЕТ

Функция ПодготовитьПараметрыСписаниеУбытков(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Убытки прошлых лет";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСписаниеУбытковПрошлыхЛет() 

Функция ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаРеквизитыСписаниеУбытков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаСписаниеУбытковПрошлыхЛет()


// РАСЧЕТ ДОЛЕЙ СПИСАНИЯ КОСВЕННЫХ РАСХОДОВ

Функция ПодготовитьПараметрыРасчетДолей(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаРеквизитыРасчетДолей();
	Результат    = Запрос.Выполнить();
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетДолей", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетДолей()

Функция ТекстЗапросаРеквизитыРасчетДолей()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Определение финансовых результатов";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентЕНВД", НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

Функция ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыЗакрытие90_91", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&КоэффициентЕНВД КАК КоэффициентЕНВД,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаЗакрытиеСчетов90_91()

Функция ТекстЗапросаОкруглениеНДС(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыОкруглениеНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаОкруглениеНДС()

Функция ПодготовитьПараметрыОкругленияНДС(СтруктураШапки) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Отклонение при округлении до рублей";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаОкруглениеНДС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыОкругленияНДС()

// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН

Функция ПодготовитьПараметрыРасчетаРасходовУменьшающихНалоги(СтруктураШапки, Отказ) Экспорт
	
	Перем ДатаИзменения;
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	ПериодичностьОперации = ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации);
	НачалоПериодаОперации = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(СтруктураШапки.КонДата, ПериодичностьОперации);
	КонецПериодаОперации = ОбщегоНазначенияБПКлиентСервер.КонецПериода(СтруктураШапки.КонДата, ПериодичностьОперации);
	
	ПрименяетсяУСНДоходы =
		УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходы И ДатаИзменения > НачалоПериодаОперации Тогда
		ПрименяетсяУСНДоходыВПрошлом = УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыВПрошлом = ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы =
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения > НачалоПериодаОперации Тогда
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом =
			УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = ПрименяетсяУСНДоходыМинусРасходы;
	КонецЕсли;
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапки.Организация, КонецПериодаОперации, ДатаИзменения);
	Если Не ПлательщикЕНВД И ДатаИзменения > НачалоПериодаОперации Тогда
		ПлательщикЕНВДвПрошлом = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапки.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПлательщикЕНВДвПрошлом = ПлательщикЕНВД;
	КонецЕсли;
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапки.Организация, СтруктураШапки.КонДата);
	НачалоПериодаПроверки = ?(ПрименяетсяУСНДоходы, СтруктураШапки.НачГода, НачалоКвартала(СтруктураШапки.НачДата));
	
	// Для ИП передаем пустую дату, поскольку ИП на ОСНО признают расходы кассовым методом.
	// Для ЕНВД передаем пустую дату, поскольку дату перехода смотрим по дате учетной политики.
	// Для УСН без совмещения с ЕНВД передаем дату перехода на УСН - для исключения платежей по расходам, начисленным и учтенным в НУ ОСНО по методу начисления.
	Если ПрименяетсяУСНДоходы И Не ПлательщикЕНВД  Тогда
		Запрос.УстановитьПараметр("ДатаНачалаАнализаПериодаНачислений", ДатаПереходаНаУСН);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаАнализаПериодаНачислений", '00010101');
	КонецЕсли;
	
	// Если в течение периода, за который выполняется регламентная операция, изменился режим налогообложения,
	// то нужно ограничить период, за который будут определяться понесенные расходы.
	НачалоПериодаАнализаРасходов = НачалоПериодаОперации;
	КонецПериодаАнализаРасходов = КонецПериодаОперации;
	Если Не (ПрименяетсяУСНДоходыВПрошлом Или ПлательщикЕНВДвПрошлом) Тогда
		// До даты перехода не применялся УСН или ЕНВД.
		// Учитываем только те расходы, которые возникли после перехода на УСН или ЕНВД.
		НачалоПериодаАнализаРасходов = НачалоДня(ДатаИзменения);
	КонецЕсли;
	Если Не (ПрименяетсяУСНДоходы Или ПлательщикЕНВД) Тогда
		// После даты перехода не применяется УСН или ЕНВД.
		// Учитываем только расходы, понесенные до даты перехода на УСН или ЕНВД.
		КонецПериодаАнализаРасходов = НачалоДня(ДатаИзменения) - 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериодаАнализаРасходов", НачалоПериодаАнализаРасходов);
	Запрос.УстановитьПараметр("КонецПериодаАнализаРасходов", КонецПериодаАнализаРасходов);
	
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы", ПрименяетсяУСНДоходы Или ПрименяетсяУСНДоходыВПрошлом);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы",
		(ПрименяетсяУСНДоходыМинусРасходы Или ПрименяетсяУСНДоходыМинусРасходыВПрошлом) И Не ПрименяетсяУСНДоходы);
	Запрос.УстановитьПараметр("ПлательщикЕНВД", ПлательщикЕНВД Или ПлательщикЕНВДвПрошлом);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", ДатаПереходаНаУСН);
	
	Запрос.УстановитьПараметр("УчетПоПодразделениям", БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям());
	
	Запрос.УстановитьПараметр("ИПИспользуетТрудНаемныхРаботников",
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(СтруктураШапки.Организация, НачалоПериодаПроверки, СтруктураШапки.КонДата));
		
	Запрос.УстановитьПараметр("РегистрацияОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапки.Организация, "РегистрацияВНалоговомОргане"));
	
	Если ПлательщикЕНВД Тогда
		ВсеРегистрации = Справочники.ВидыДеятельностиЕНВД.СписокВыбораНалоговыхИнспекций(СтруктураШапки.Организация, СтруктураШапки.КонДата);
		РегистрацияЕНВДОрганизации = ?(ВсеРегистрации.Количество()>0, ВсеРегистрации[0].Значение, Неопределено);
		Запрос.УстановитьПараметр("РегистрацияЕНВДОрганизации", РегистрацияЕНВДОрганизации);
	Иначе
		Запрос.УстановитьПараметр("РегистрацияЕНВДОрганизации", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	КонецЕсли;
		
	// Настройки учета зарплаты
	ВедетсяУчетБольничных = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		И ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
		
	Запрос.УстановитьПараметр("ВедетсяУчетБольничных", ВедетсяУчетБольничных);
	Запрос.УстановитьПараметр("ВедетсяУчетПоРаботникам",
		ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасходыУменьшающиеОтдельныеНалоги(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРасходыУменьшающиеОтдельныеНалоги(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИндивидуальныйПредприниматель,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы,
	|	&ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	&ИПИспользуетТрудНаемныхРаботников КАК ИПИспользуетТрудНаемныхРаботников,
	|	&ВедетсяУчетБольничных КАК ВедетсяУчетБольничных,
	|	&ВедетсяУчетПоРаботникам КАК ВедетсяУчетПоРаботникам,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачалоГода,
	|	&ДатаНачалаАнализаПериодаНачислений,
	|	&ДатаПереходаНаУСН,
	|	&УчетПоПодразделениям,
	|	&РегистрацияОрганизации,
	|	&РегистрацияЕНВДОрганизации,
	|	&НачалоПериодаАнализаРасходов,
	|	&КонецПериодаАнализаРасходов
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихНалогУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется, созданные рег. операции во всех узлах должны иметь одинаковые ссылки
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН с объектом "доходы"
		Возврат;
	КонецЕсли;
	
	// При УСН-доходы доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет расходов, уменьшающих налог УСН""
                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено
//
Процедура ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихЕНВД() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПоддержкиЕНВД", УчетЕНВД.ДатаНачалаПоддержкиЕНВД());
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПлательщикЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияЕНВД
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериоды
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияЕНВД КАК ВТ_ПериодыПримененияЕНВД
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияЕНВД.Организация
	|			И (РегламентнаяОперация.Дата МЕЖДУ ВТ_ПериодыПримененияЕНВД.ПериодНач И ВТ_ПериодыПримененияЕНВД.ПериодКон)
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачалаПоддержкиЕНВД
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериоды.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериоды.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериоды КАК ВТ_ЗакрытыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериоды.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериоды.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
		НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГА УСН

Функция ПодготовитьПараметрыНачисленияНалогаУСН(СтруктураШапки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПроведения = Новый Структура;
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыНалогУСН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетНалогаУСН() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН
		Возврат;
	КонецЕсли;
	
	ВидОперацииРасчетНалогаУСН	= Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
	ГруппаРасчетНалогаУСН		= ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперацииРасчетНалогаУСН);
	
	// При УСН доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаУСН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			НоваяОперация.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет налога УСН""
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// НАЧИСЛЕНИЕ ЕНВД

Функция ПодготовитьПараметрыНачисленияЕНВД(СтруктураШапки) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеЕНВД(НомераТаблиц);
	Результат = Запрос.Выполнить();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеЕНВД(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК Период
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ добавляет в закрытые периоды новую регламентную операцию со статусом Пропущено
//
Процедура ДобавитьРегламентнуюОперациюРасчетЕНВД() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
	
	ОперацииГруппы = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) >= НомерГруппы Тогда
			ОперацииГруппы.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы",      ОперацииГруппы);
	Запрос.УстановитьПараметр("ДатаНачала",          УчетЕНВД.ДатаНачалаПоддержкиЕНВД());
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПлательщикЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияЕНВД
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетЕНВД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериоды
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияЕНВД КАК ВТ_ПериодыПримененияЕНВД
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияЕНВД.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияЕНВД.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияЕНВД.ПериодКон
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериоды.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериоды.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериоды КАК ВТ_ЗакрытыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериоды.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериоды.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
		НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД;
		НоваяОперация.Состояние   = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина, Истина);
		
	КонецЦикла;

КонецПроцедуры

// ВКЛЮЧЕНИЕ АВАНСОВ В ПРОЧИЕ ДОХОДЫ ИП

Функция ПодготовитьПараметрыВключениеАвансовВПрочиеДоходыИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_ВключениеАвансовВПрочиеДоходыДляИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ НастройкиСистемыНалогообложения.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаВключениеАвансовВПрочиеДоходыДляИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаВключениеАвансовВПрочиеДоходыДляИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Включение авансов в прочие доходы для ИП""
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ ИП

Функция ПодготовитьПараметрыРаспределениеРасходовЕНВДИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// НАЧИСЛЕНИЕ СТРАХОВЫХ ВЗНОСОВ ИП ЗА СЕБЯ

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносовИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Периодичность", ЗакрытиеМесяца.ПериодичностьРегламентнойОперации(СтруктураШапки.ВидОперации));
	
	Запрос.Текст = ТекстЗапросаРеквизиты();
	Результат = Запрос.Выполнить();
	
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_НачислениеСтраховыхВзносовИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаНачислениеСтраховыхВзносовИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаНачислениеСтраховыхВзносовИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Дата(2014, 1, 1));
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &ДатаНачала
	|	И МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) И Месяц(Выборка.Дата) <> 12 Тогда
			Продолжить;
		ИначеЕсли (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяОперация);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не создана регламентная операция ""Начисление страховых взносов ИП""
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РегламентнаяОперация,, 
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОНОВОГО ВЫПОЛНЕНИЯ

// Находит регламентную операцию по виду операции.
// Возвращает ссылку на регламентную операцию.
Функция НайтиДокумент(Период, Организация, ВидОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РегламентнаяОперация.Ссылка,
	|	РегламентнаяОперация.Состояние";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.РегламентнаяОперация.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// Находит "активные" регламентные операции, которые совпадают по составу ключевых реквизитов с переданной.
// Возвращает результат запроса, содержащий ссылки на "дубли".
Функция НайтиДубли(Период, Организация, ВидОперации, Ссылка) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		// Списание доп. расходов в учете УСН допустимо проводить не более одного раза за квартал
		НачалоПериода 	= НачалоКвартала(Период);
		КонецПериода	= КонецКвартала(Период);
	Иначе
		НачалоПериода 	= НачалоМесяца(Период);
		КонецПериода	= КонецМесяца(Период);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Ссылка <> &Ссылка
	|	И РегламентнаяОперация.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Упорядочивает перечень регламентных операций в соотвествии с логикой обработки "Закрытие месяца".
//
// Параметры:
//  Операции - Массив - список документов ДокументСсылка.РегламентнаяОперация
//
// Возвращаемое значение:
//  Массив - упорядоченный список документов ДокументСсылка.РегламентнаяОперация
//
Функция УпорядочитьСписокРегОпераций(Операции)
	
	ОперацииУпорядоченный = Новый Массив;
	
	Если ТипЗнч(Операции) <> Тип("Массив") Тогда
		Возврат ОперацииУпорядоченный;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Месяц,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	РегламентнаяОперация.ВидОперации.Порядок КАК ПорядокВидаОперации,
	|	РегламентнаяОперация.Ссылка.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка В(&Операции)";
	
	Сортировщик = Новый ТаблицаЗначений;
	Сортировщик.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.РегламентнаяОперация"));
	Сортировщик.Колонки.Добавить("Месяц",               Новый ОписаниеТипов("Дата"));
	Сортировщик.Колонки.Добавить("Группа",              Новый ОписаниеТипов("Число"));
	Сортировщик.Колонки.Добавить("ПорядокВидаОперации", Новый ОписаниеТипов("Число"));
	Сортировщик.Колонки.Добавить("МоментВремени",       Новый ОписаниеТипов("МоментВремени"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Сортировщик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Группа = ЗакрытиеМесяца.ГруппаПоВидуОперации(Выборка.ВидОперации);
	КонецЦикла;
	
	Сортировщик.Сортировать("Месяц, Группа, ПорядокВидаОперации, МоментВремени", Новый СравнениеЗначений);
	
	Возврат Сортировщик.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает структуру с параметров для процедуры ОтменитьОперацию().
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* УдалитьДвижения - Булево - Истина, если старые движения операции требуется удалить.
//		* СдвигатьМоментНарушенияПоследовательности - Булево - Истина, 
//			если необходимо сдвигать момент нарушения последовательности из-за изменения регламентной операции.
//		* ОбновитьГраницуАктуальности - Булево - Истина, если необходимо сдвигать границу актуальности закрытия месяца.
//		* СброситьСостояниеОперации - Булево - Истина, если необходимо изменить состояние операции на НеВыполнено.
//
Функция НовыеПараметрыОтменыОперации() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("УдалитьДвижения",                           Истина);
	Результат.Вставить("СдвигатьМоментНарушенияПоследовательности", Истина);
	Результат.Вставить("ОбновитьГраницуАктуальности",               Истина);
	Результат.Вставить("СброситьСостояниеОперации",                 Истина);
	
	Возврат Результат;

КонецФункции

Процедура ЗапуститьВыполнениеИзФормы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно, РегламентнаяОперация", Истина, СтруктураПараметров.РегламентнаяОперация);
	
	РегламентнаяОперацияОбъект = СтруктураПараметров.РегламентнаяОперация.ПолучитьОбъект();
	ДанныеДляЗаполнения.ВыполненоУспешно = РегламентнаяОперацияОбъект.ВыполнитьОперацию(Истина);
	ДанныеДляЗаполнения.Вставить("Состояние", РегламентнаяОперацияОбъект.Состояние);
	ДанныеДляЗаполнения.Вставить("ВидОперации", РегламентнаяОперацияОбъект.ВидОперации);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьУпорядоченныйСписокРегОпераций(СтруктураПараметров, АдресХранилища, МассивРегОпераций = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("МассивРегОпераций") Тогда
		МассивРегОпераций = СтруктураПараметров.МассивРегОпераций;
	КонецЕсли;
	
	Если МассивРегОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщений            = Новый Массив();
	МассивОшибочныхРегОпераций = Новый Массив();
	ДанныеДляЗаполнения        = Новый Структура();
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	Если КоличествоРегОпераций = 0 Тогда
		Возврат;
	Иначе
		// Если рег.операций больше одной, то упорядочим их для правильного выполнению
		Если КоличествоРегОпераций > 1 Тогда
			МассивРегОпераций = УпорядочитьСписокРегОпераций(МассивРегОпераций);
		КонецЕсли;
		
		УспешноВыполнена = ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("МассивРегОпераций",          МассивРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивОшибочныхРегОпераций", МассивОшибочныхРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивСообщений",            МассивСообщений);
	ДанныеДляЗаполнения.Вставить("УспешноВыполнена",           УспешноВыполнена);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,         АдресХранилища);

КонецПроцедуры

Функция ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций)
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	УспешноВыполненСписокОпераций = Истина;
	Для инд = 0 По КоличествоРегОпераций - 1 Цикл
		РегОперация    = МассивРегОпераций[инд];
		ДокументОбъект = РегОперация.ПолучитьОбъект();
		ВидРегОперации = ДокументОбъект.ВидОперации;
		ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		
		УспешноВыполнена = ДокументОбъект.ВыполнитьОперацию();
		
		Если ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			МассивОшибочныхРегОпераций.Добавить();
			МассивОшибочныхРегОпераций[МассивОшибочныхРегОпераций.Количество() - 1] = 
				Новый Структура("Организация, Дата, РегламентнаяОперация, ВидОперации",
				ДокументОбъект.Организация, ДокументОбъект.Дата, РегОперация, ВидРегОперации);
		КонецЕсли;
		
		УспешноВыполненСписокОпераций = УспешноВыполненСписокОпераций И УспешноВыполнена;
	КонецЦикла;
	
	Возврат УспешноВыполненСписокОпераций;
	
Конецфункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖЕБНЫМИ СООБЩЕНИЯМИ

Процедура ЗаполнитьОписаниеОшибок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.НомерСтроки КАК НомерСтроки,
	|	Ошибки.Описание,
	|	Ошибки.СсылкаНаОшибочныйОбъект
	|ИЗ
	|	Документ.РегламентнаяОперация.УдалитьОшибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Объект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Ошибки = ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках();
		
		Выборка = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки,
				Выборка.Описание, 
				Выборка.СсылкаНаОшибочныйОбъект);
			
		КонецЦикла;
		
		Объект.ОписаниеОшибок = ЗакрытиеМесяцаСообщенияОбОшибках.ОписаниеОшибок(
			Ошибки,
			Объект.Дата,
			Объект.Организация,
			Объект.ВидОперации);
			
		Объект.УдалитьОшибки.Очистить();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// ПРИЗНАНИЕ РАСХОДОВ НА ПРИОБРЕТЕНИЕ ОС ПО ДОГОВОРУ ЛИЗИНГА

Функция ПодготовитьПараметрыПризнаниеВНУЛизинговыхПлатежей(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Содержание = "Лизинговые платежи";
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАрендныеПлатежи(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПризнаниеВНУЛизинговыхПлатежей()

Функция ТекстЗапросаРеквизитыАрендныеПлатежи(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("АрендныеПлатежи", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАрендныеПлатежи()

Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Регламентная операция'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции // ИмяСобытияЖурналаРегистрации()
 

#КонецЕсли
