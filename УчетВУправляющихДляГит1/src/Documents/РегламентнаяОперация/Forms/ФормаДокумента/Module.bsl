&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СуществуетСправка = ЗакрытиеМесяца.СуществуетСправкаРасчет(Объект.ВидОперации);
	Если СуществуетСправка Тогда
		СписокСправок = ЗакрытиеМесяца.ПолучитьСписокСправокРасчетовПоВидуОперации(Объект.ВидОперации,Объект.Организация,Объект.Дата);
		Для Каждого Справка Из СписокСправок Цикл 
			КнопкаСправки = Элементы.ПодменюСправкаРасчет.ПодчиненныеЭлементы.Найти("Кнопка" + Справка.Значение);
			Если КнопкаСправки <> Неопределено Тогда
				КнопкаСправки.Видимость = Истина;
				КнопкаСправки.Заголовок = Справка.Представление;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Элементы.ПодменюСправкаРасчет.Видимость = СуществуетСправка;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата));
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОбновитьРегламентныеОперации" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ОбрабатываемыеОперации") Тогда
		
		Если ТипЗнч(Параметр.ОбрабатываемыеОперации) = Тип("Массив")
			И Параметр.ОбрабатываемыеОперации.Найти(Объект.Ссылка) <> Неопределено Тогда
			ЭтотОбъект.Прочитать();
			УправлениеФормой(ЭтотОбъект);
		ИначеЕсли Параметр.ОбрабатываемыеОперации = Объект.Ссылка Тогда
			ЭтотОбъект.Прочитать();
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПроверкаДляОбособленныхПодразделений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.Дата = НачалоМесяца(Объект.Дата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(
		ЭтотОбъект, 
		Элемент, 
		СтандартнаяОбработка, 
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"), 
		Объект.Дата, 
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаОшибкиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Ссылка);
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьЗакрытиеМесяца(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.Дата);
	ПараметрыФормы.Вставить("Организация",       Объект.Организация);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // ОткрытьЗакрытиеМесяца()

&НаКлиенте
Процедура ОтменитьОперацию(Команда)
	
	ОтменитьНаСервере();
	ОповеститьФормыОбИзменении();
	ОповеститьФормуОтчетаОбОшибках();
	
	СформироватьИсториюИПоказатьОповещениюПользователю(Объект.Ссылка, НСтр("ru = 'Операция отменена'"));
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры // ОтменитьОперацию()

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	ВыполнитьОперациюНаКлиенте();
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьНеЗакрывать(Команда)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено") Тогда
		Возврат;
	КонецЕсли;
	
	ПропуститьНаСервере();
	ОповеститьФормыОбИзменении();
	ОповеститьФормуОтчетаОбОшибках();
	
	СформироватьИсториюИПоказатьОповещениюПользователю(Объект.Ссылка, НСтр("ru = 'Операция отменена'"));
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры // ПропуститьНеЗакрывать()

&НаКлиенте
Процедура ОткрытьОтчетСправкаРасчетРасходовУменьшающихЕНВД(Команда)
	
		ПараметрыФормирования = Новый Структура();
		
		ПараметрыФормирования.Вставить("Организация", Объект.Организация);
		ПараметрыФормирования.Вставить("НачалоПериода", НачалоМесяца(Объект.Дата));
		ПараметрыФормирования.Вставить("КонецПериода", КонецМесяца(Объект.Дата));
		ПараметрыФормирования.Вставить("Период", ПредставлениеПериодаРегистрации);
		ПараметрыФормирования.Вставить("ВыводитьЗаголовок", Истина);
		ПараметрыФормирования.Вставить("ВыводитьПодвал", Истина);
		ПараметрыФормирования.Вставить("СНачалаГода", Ложь);
		ПараметрыФормирования.Вставить("Налог", "ЕНВД");
		
		ФормаОтчета = ПолучитьФорму("Отчет.СправкаРасчетРасходовУменьшающихОтдельныеНалоги.Форма.ФормаОтчета");
		ФормаОтчета.ОткрытьИСформировать(ПараметрыФормирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСправкаРасчетРасходовУменьшающихНалогУСН(Команда)
	
		ПараметрыФормирования = Новый Структура();
		
		ПараметрыФормирования.Вставить("Организация", Объект.Организация);
		ПараметрыФормирования.Вставить("НачалоПериода", НачалоМесяца(Объект.Дата));
		ПараметрыФормирования.Вставить("КонецПериода", КонецМесяца(Объект.Дата));
		ПараметрыФормирования.Вставить("Период", ПредставлениеПериодаРегистрации);
		ПараметрыФормирования.Вставить("ВыводитьЗаголовок", Истина);
		ПараметрыФормирования.Вставить("ВыводитьПодвал", Истина);
		ПараметрыФормирования.Вставить("СНачалаГода", Ложь);
		ПараметрыФормирования.Вставить("Налог", "УСН");
		
		ФормаОтчета = ПолучитьФорму("Отчет.СправкаРасчетРасходовУменьшающихОтдельныеНалоги.Форма.ФормаОтчета");
		ФормаОтчета.ОткрытьИСформировать(ПараметрыФормирования);
	
КонецПроцедуры

&НаКлиенте
Процедура СправкаРасчет(Команда)
	
	Справка = СтрЗаменить(Команда.Имя,"ОткрытьОтчет","");
		
	Если СправкиРасчетыКлиентСервер.ОтчетПодключен(Справка) Тогда
		СправкиРасчетыКлиент.СформироватьОтчетПоРезультатамМесяца(
			Справка,
			Объект.Дата,
			Объект.Организация,
			Объект.ВидОперации,
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
		
	ФормаОтчета = ПолучитьФорму("Отчет." + Справка + ".Форма.ФормаОтчета");
	ФормаОтчета.ОткрытьИСформировать(
		Новый Структура("Организация, НачалоПериода, КонецПериода, Период, НаборПоказателейОтчета, ВыводитьЗаголовок, ВыводитьПодвал, СНачалаГода",
		Объект.Организация,
		НачалоМесяца(Объект.Дата),
		КонецМесяца(Объект.Дата),
		ПредставлениеПериодаРегистрации,
		1,
		Истина,
		Истина,
		Ложь));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПроверкаДляОбособленныхПодразделений();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьФормуНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Ошибка.Видимость = (Объект.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками"));
	
	Элементы.Организация.Доступность =
		Объект.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
	Элементы.ПредставлениеПериодаРегистрации.Доступность =
		Объект.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
	
	Если Элементы.Найти("ФормаКомандаОтменить") <> Неопределено Тогда
		Элементы.ФормаКомандаОтменить.Доступность = НЕ Форма.Параметры.Ключ.Пустая();
	КонецЕсли;
	
	Элементы.ПодменюСправкаРасчет.Доступность =
		Объект.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// Организация, ПредставлениеПериодаРегистрации
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредставлениеПериодаРегистрации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Состояние", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	
	// ГиперСсылкаОшибки, КартинкаОшибка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГиперСсылкаОшибки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КартинкаОшибка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьОшибки", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормыОбИзменении()
	
	// если открыта обработка Закрытие месяца, обновим Статус рег.операции в форме 
	ПараметрыОповещения = Новый Структура("ОбрабатываемыеОперации", Объект.Ссылка);
	Оповестить("ОбновитьЗакрытиеМесяца",       ПараметрыОповещения);
	ОповеститьОбИзменении(Тип("ДокументСсылка.РегламентнаяОперация"));
	
КонецПроцедуры

&НаКлиенте
// Т.к. рег.операция не проводится, управляется программно, то
// также программно необходимо показать Оповещение пользователю и заполненить Историю
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(РегОперация, ТекстОповещения)
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения, ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация));
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеОперацииНаКлиенте(СтруктураДанных, СсылкаНаЗаписанныйОбъект = Неопределено)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Состояние") И СтруктураДанных.Свойство("ВидОперации") Тогда
		Если Объект.Ссылка.Пустая()
			И СтруктураДанных.Свойство("РегламентнаяОперация")
			И СтруктураДанных.Свойство("ВыполненоУспешно") И СтруктураДанных.ВыполненоУспешно Тогда
			
			Источник = Новый Структура();
			Источник.Вставить("ЭтоНовый",    Истина);
			Источник.Вставить("ВидОперации", СтруктураДанных.ВидОперации);
			Источник.Вставить("РегОперация", СтруктураДанных.РегламентнаяОперация);
		Иначе
			Источник = СтруктураДанных.ВидОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("РегламентнаяОперация") Тогда
		СформироватьИсториюИПоказатьОповещениюПользователю(СтруктураДанных.РегламентнаяОперация, НСтр("ru = 'Операция изменена'"));
	КонецЕсли;
	
	Если СтруктураДанных.ВыполненоУспешно Тогда
		Если ЭтотОбъект.Открыта() И СтруктураДанных.ВыполненоУспешно Тогда
			Модифицированность = Ложь;
			Закрыть();
			ПолучитьИзДлительнойОперацииСообщенияПользователю();
		КонецЕсли;
		
		ОповеститьФормуОтчетаОбОшибках(); // Если операция не выполнена успешно, то форма открывается ниже
		
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ?(ЗначениеЗаполнено(СсылкаНаЗаписанныйОбъект), СсылкаНаЗаписанныйОбъект, Объект.Ссылка));
		ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	ОповеститьФормыОбИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(ОбработатьВыполнениеОперации());
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОперациюНаКлиенте()
	Перем СсылкаНаЗаписанныйОбъект;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ИБФайловая = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ВыполнитьОперациюНаСервере(ИБФайловая, СсылкаНаЗаписанныйОбъект);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ПодключатьОбработчикОжидания = НЕ ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
		Если ПодключатьОбработчикОжидания Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		КонецЕсли;
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента, СсылкаНаЗаписанныйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДляОбособленныхПодразделений()
	
	Если ЗначениеЗаполнено(Объект.Организация) 
		И ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Объект.Организация) Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
			ТекстСообщения = НСтр("ru = 'Для обособленного подразделения используется расчет долей косвенных расходов головной организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
			Объект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет		
			ИЛИ Объект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
			
			ШаблонСообщения = НСтр("ru = 'Регламентная операция ""%1"" проводится только для головной организации'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.ВидОперации);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
			Объект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаДляОбособленныхПодразделений()

&НаСервере
Функция ОбработатьВыполнениеОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыполненоУспешно") Тогда
		Если НЕ СтруктураДанных.ВыполненоУспешно Тогда
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат(СтруктураДанных);
	
КонецФункции

&НаСервере
Процедура ПолучитьИзДлительнойОперацииСообщенияПользователю()
	ЗакрытиеМесяцаСообщенияОбОшибках.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания);
КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюНаСервере(ИБФайловая, СсылкаНаЗаписанныйОбъект)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокОбъект.НайтиДубли() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Ложь);
	КонецЕсли;
	
	
	Если ДокОбъект.ЭтоНовый() ИЛИ ДокОбъект.Модифицированность() ИЛИ ДокОбъект.ПометкаУдаления Тогда
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.Записать();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	СсылкаНаЗаписанныйОбъект = ДокОбъект.Ссылка;
	
	СтруктураПараметров = Новый Структура("РегламентнаяОперация", ДокОбъект.Ссылка);
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.РегламентнаяОперация.ЗапуститьВыполнениеИзФормы(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Результат = Новый Структура;
			Результат.Вставить("АдресХранилища",       АдресХранилища);
			Результат.Вставить("ЗаданиеВыполнено",     Ложь);
			Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
			
		Иначе
			
			// Запускаем выполнение в фоне
		
			
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнение регламентной операции ""%1""'"), Объект.ВидОперации);
			
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"Документы.РегламентнаяОперация.ЗапуститьВыполнениеИзФормы", 
				СтруктураПараметров, 
				НаименованиеЗадания);
			АдресХранилища       = Результат.АдресХранилища;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтменитьНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.РегламентнаяОперация"));
	ДокОбъект.ОтменитьОперацию(Истина);
	Прочитать();
	УправлениеФормой(ЭтотОбъект);
   
КонецПроцедуры // ОтменитьНаСервере()

&НаСервере
Процедура ПропуститьНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.РегламентнаяОперация"));
	ДокОбъект.ПропуститьОперацию(Истина);
	Прочитать();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ПропуститьНаСервере()

&НаКлиенте
Процедура ОповеститьФормуОтчетаОбОшибках()
	ПараметрыОповещения = Новый Структура("ОбрабатываемыеОперации", Объект.Ссылка);
	Оповестить("ОбновитьРегламентныеОперации", ПараметрыОповещения); 
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ПредставлениеПериодаРегистрации = СтруктураПериода.Период;
		Объект.Дата = КонецМесяца(СтруктураПериода.КонецПериода);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПроверкаДляОбособленныхПодразделений();
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти
