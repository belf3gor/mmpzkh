&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ ФОРМЫ

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОпераций()
	
	ВидыОпераций = Новый СписокЗначений;
	Для Каждого ВидОперации Из Перечисления.ВидыРегламентныхОпераций Цикл
		
		Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(ВидОперации) Тогда
			ВидыОпераций.Добавить(ВидОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			СтруктураДанныхНаКлиенте = ЗагрузитьПодготовленныеДанные();
			ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанныхНаКлиенте);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормыОбИзменении(ОбрабатываемыеОперации = Неопределено)
	
	// если открыта обработка Закрытие месяца, обновим Статус рег.операции в форме 
	Если ОбрабатываемыеОперации = Неопределено Тогда
		Оповестить("ОбновитьЗакрытиеМесяца");
		Оповестить("ОбновитьРегламентныеОперации");
	Иначе
		ПараметрыОповещения = Новый Структура("ОбрабатываемыеОперации", ОбрабатываемыеОперации);
		Оповестить("ОбновитьЗакрытиеМесяца",       ПараметрыОповещения);
		Оповестить("ОбновитьРегламентныеОперации", ПараметрыОповещения);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.РегламентнаяОперация"));
	
КонецПроцедуры

&НаКлиенте
// Т.к. рег.операция не проводится, управляется программно,
// также программно необходимо показать Оповещение пользователю и заполнить Историю
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(МассивРегОпераций, ТекстОповещенияОднаОперация, ШаблонОповещенияНесколькоОпераций)
	
	КоличествоОбработанных = МассивРегОпераций.Количество();
	
	Если КоличествоОбработанных = 1 Тогда
		РегОперация = МассивРегОпераций[0];
		
		ПоказатьОповещениеПользователя(
			ТекстОповещенияОднаОперация,
			ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация));
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	Иначе // Несколько операций
		
		Для каждого РегОперация Из МассивРегОпераций Цикл
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОповещенияНесколькоОпераций,
				КоличествоОбработанных);
			
			ПоказатьОповещениеПользователя(ТекстОповещения,, НСтр("ru = 'Регламентные операции'"));
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивОшибочныхРегОпераций") Тогда
		Для каждого ПараметрыФормы Из СтруктураДанных.МассивОшибочныхРегОпераций Цикл
			ШаблонСообщения = НСтр("ru = 'Ошибка при выполнении %1'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ПараметрыФормы.РегламентнаяОперация);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст      = СтрокаСообщения;
			Сообщение.КлючДанных = ПараметрыФормы.РегламентнаяОперация;
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
		
		Если СтруктураДанных.МассивОшибочныхРегОпераций.Количество() > 0 Тогда
			Если СтруктураДанных.МассивРегОпераций.Количество() = 1 Тогда
				ПоказатьПредупреждение( , НСтр("ru = 'Операция не выполнена'"));
			ИначеЕсли СтруктураДанных.МассивОшибочныхРегОпераций.Количество() = СтруктураДанных.МассивРегОпераций.Количество() Тогда
				ПоказатьПредупреждение( , НСтр("ru = 'Операции не выполнены'"));
			Иначе
				ПоказатьПредупреждение( , НСтр("ru = 'Не все операции выполнены'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивСообщений") Тогда
		Для каждого Сообщение Из СтруктураДанных.МассивСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.ТекстСообщенияПользователю, 
				Сообщение.КлючДанных, Сообщение.Поле, Сообщение.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивРегОпераций")
		И СтруктураДанных.МассивРегОпераций.Количество() > 0 Тогда
		
		СформироватьИсториюИПоказатьОповещениюПользователю(
			СтруктураДанных.МассивРегОпераций, 
			НСтр("ru = 'Операция изменена'"),
			НСтр("ru = 'Операции изменены (%1)'")); // Параметр - количество операций
		
		ОповеститьФормыОбИзменении(СтруктураДанных.МассивРегОпераций);
		
	Иначе
		ОповеститьФормыОбИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()
	
	ЗакрытиеМесяцаСообщенияОбОшибках.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("УспешноВыполнена") Тогда
		СтруктураДанныхНаКлиенте.Вставить("МассивРегОпераций", СтруктураДанных.МассивРегОпераций);
		
		Если СтруктураДанных.Свойство("МассивСообщений")
			И СтруктураДанных.МассивСообщений.Количество() > 0 Тогда
			СтруктураДанныхНаКлиенте.Вставить("МассивСообщений", СтруктураДанных.МассивСообщений);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивОшибочныхРегОпераций")
		И СтруктураДанных.МассивОшибочныхРегОпераций.Количество() > 0 Тогда
		СтруктураДанныхНаКлиенте.Вставить("МассивОшибочныхРегОпераций", СтруктураДанных.МассивОшибочныхРегОпераций);
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервере
Функция ВыполнитьНаСервере(МассивВыделенных, ИБФайловая)
	
	СтруктураПараметров = Новый Структура();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.РегламентнаяОперация.ВыполнитьУпорядоченныйСписокРегОпераций(СтруктураПараметров, АдресХранилища, МассивВыделенных);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Результат = Новый Структура;
			Результат.Вставить("АдресХранилища",       АдресХранилища);
			Результат.Вставить("ЗаданиеВыполнено",     Ложь);
			Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
			
		Иначе
			
			// Запускаем выполнение в фоне
		
			СтруктураПараметров.Вставить("МассивРегОпераций", МассивВыделенных);
			НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение регламентных операций'");
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор, 
				"Документы.РегламентнаяОперация.ВыполнитьУпорядоченныйСписокРегОпераций", 
				СтруктураПараметров, 
				НаименованиеФоновогоЗадания);
			
			АдресХранилища       = Результат.АдресХранилища;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтменитьНаСервере(МассивВыделенных)
	
	Для каждого Ссылка Из МассивВыделенных Цикл
		Ссылка.ПолучитьОбъект().ОтменитьОперацию();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПропуститьНаСервере(МассивВыделенных)
	
	Для каждого Ссылка Из МассивВыделенных Цикл
		Ссылка.ПолучитьОбъект().ПропуститьОперацию();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидОперацииЗавершение(ВыбранныйВидОперации, ЗначенияЗаполнения) Экспорт
	
	Если ВыбранныйВидОперации = Неопределено Тогда
		Возврат;
	Иначе
		ЗначенияЗаполнения.Вставить("ВидОперации", ВыбранныйВидОперации.Значение);
	КонецЕсли;
	
	ОткрытьФормуРегламентнойОперации(ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегламентнойОперации(ЗначенияЗаполнения)

	КлючеваяОперация = "СозданиеФормыРегламентнаяОперация";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоНовый",    Истина);
	СтруктураПараметров.Вставить("Копирование", Ложь);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РегламентнаяОперация.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаВыполнить(Команда)

	МассивВыделенных = Элементы.Список.ВыделенныеСтроки;
	КоличествоВыделенных = МассивВыделенных.Количество();
	Если КоличествоВыделенных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИБФайловая = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ВыполнитьНаСервере(МассивВыделенных, ИБФайловая);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		// Обработчик будет подключаться до тех пор, пока фоновое задание не будет выполнено
		ПодключатьОбработчикОжидания = НЕ ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
		Если ПодключатьОбработчикОжидания Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
	Иначе
		ЗагрузитьПодготовленныеДанныеНаКлиенте(Результат.СтруктураДанныхКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменить(Команда)
	
	МассивВыделенных = Элементы.Список.ВыделенныеСтроки;
	КоличествоВыделенных = МассивВыделенных.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьНаСервере(МассивВыделенных);
	
	СформироватьИсториюИПоказатьОповещениюПользователю(
		МассивВыделенных, 
		НСтр("ru = 'Операция отменена'"),
		НСтр("ru = 'Операции отменены (%1)'")); // Параметр - количество операций
		
	ОповеститьФормыОбИзменении(МассивВыделенных);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПропустить(Команда)
	
	МассивВыделенных = Элементы.Список.ВыделенныеСтроки;
	КоличествоВыделенных = МассивВыделенных.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПропуститьНаСервере(МассивВыделенных);
	
	СформироватьИсториюИПоказатьОповещениюПользователю(
		МассивВыделенных, 
		НСтр("ru = 'Операция пропущена'"),
		НСтр("ru = 'Операции пропущены (%1)'")); // Параметр - количество операций
		
	ОповеститьФормыОбИзменении(МассивВыделенных);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗакрытиеМесяца(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ПараметрыФормы.Вставить("ПериодРегистрации", ТекущаяДата());
		ОтборОрганизация = ОтборыСписковКлиентСервер.ЭлементОтбораСпискаПоИмени(Список, "Организация");
		Если ОтборОрганизация <> Неопределено Тогда
			ПараметрыФормы.Вставить("Организация", ОтборОрганизация.ПравоеЗначение);
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы.Вставить("РегламентнаяОперация", ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	Если Параметры.Отбор.Свойство("ВидОперации") Тогда
		ОтборВидОперации = ОтборыСписковКлиентСервер.ЭлементОтбораСпискаПоИмени(Список, "ВидОперации");
		ОтборВидОперации.ПравоеЗначение = Параметры.Отбор.ВидОперации;
		ОтборВидОперации.Использование  = Истина;
		ПереданВидОперации = Истина;
		Параметры.Отбор.Удалить("ВидОперации");
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.РегламентнаяОперация);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, , Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Список>

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если НЕ ЗначенияЗаполнения.Свойство("ВидОперации")
		ИЛИ НЕ ЗначениеЗаполнено(ЗначенияЗаполнения.ВидОперации) Тогда
		ВидыОпераций = ПолучитьСписокОпераций();
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьВидОперацииЗавершение", ЭтотОбъект, ЗначенияЗаполнения);
		ВидыОпераций.ПоказатьВыборЭлемента(Оповещение, "Выберите вид регламентной операции");
	Иначе
		ОткрытьФормуРегламентнойОперации(ЗначенияЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыРегламентнаяОперация";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	Если ПереданВидОперации Тогда
		ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "ВидОперации");
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
