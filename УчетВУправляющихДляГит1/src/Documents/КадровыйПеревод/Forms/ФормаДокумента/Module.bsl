&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Основание) И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Начисления.Очистить();
		КонецЕсли; 
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ЗаполнитьСоставДействующихНачисленийСотрудника();
			УстановитьТекущиеКадровыеДанные();
			УстановитьДанныеРабочегоМеста(ЭтаФорма);
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);	
		
	КонецЕсли;
	
	ЭтотОбъект.РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	ПрочитатьРазмерАвансаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	УстановитьТекущиеКадровыеДанные();
	
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтаФорма, Объект.Организация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	ПредупреждениеПоказано = Ложь;
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
			ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
				ЭтаФорма, Объект.ОбособленноеПодразделение);
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
	Оповестить("Запись_КадровыйПеревод", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеИДолжностьПриИзменении(Элемент)
	
	УстановитьДанныеРабочегоМеста(ЭтаФорма);
		
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	УстановитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	ОбособленноеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменилисьНачисленияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	УстановитьКомментарии();
	
	Если НЕ Объект.ИзменитьНачисления Тогда
		ЗаполнитьСоставДействующихНачисленийСотрудника();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАвансПриИзменении(Элемент)
	
	ИзменитьАвансПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьИзменениеРасчетаАванса(Форма)
	
	Если Форма.Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Форма.Объект.Аванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		Форма.Объект.Аванс = 0;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() 
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПараметрыФО = Новый Структура("Организация", ГоловнаяОрганизация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	КадровыйУчетФормы.ЗаполнитьОтветственныхЛицПоОрганизации(ЭтаФорма);
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "ЕстьОбособленныеПодразделения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОбособленноеПодразделение",
		"Видимость",
		ЕстьОбособленныеПодразделения = Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииНаСервере()
	
	ПрочитатьРазмерАвансаПоУмолчанию();
	ПрименитьИзменениеРасчетаАванса(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ЗаполнитьСоставДействующихНачисленийСотрудника();
	УстановитьТекущиеКадровыеДанные();
	
	УстановитьДанныеРабочегоМеста(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	ЗаполнитьСоставДействующихНачисленийСотрудника();
	
	УстановитьТекущиеКадровыеДанные();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазмерАвансаПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.ОбособленноеПодразделение) Тогда
		РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.ОбособленноеПодразделение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДанныеРабочегоМеста(Форма)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Форма.ТекущееОбособленноеПодразделение) Тогда
		Объект.ОбособленноеПодразделение 	= Форма.ТекущееОбособленноеПодразделение;
	Иначе
		Объект.ОбособленноеПодразделение 	= Объект.Организация;
	КонецЕсли;
	
	Объект.Подразделение 				= Форма.ТекущееПодразделение;
	Объект.Должность 					= Форма.ТекущаяДолжность;
	Объект.ВидЗанятости 				= Форма.ТекущийВидЗанятости;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеКадровыеДанные()
	
	Отбор = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "Регистратор", "<>", Объект.Ссылка);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
	Поля = "Подразделение,Должность,Организация,ВидЗанятости";
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, Объект.ДатаНачала, ПоляОтбораПериодическихДанных);
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		
		ТекущееОбособленноеПодразделение 	= ТекущиеКадровыеДанныеСотрудника.Организация;
		ТекущееПодразделение 				= ТекущиеКадровыеДанныеСотрудника.Подразделение;
		ТекущаяДолжность 					= ТекущиеКадровыеДанныеСотрудника.Должность;
		ТекущийВидЗанятости					= ТекущиеКадровыеДанныеСотрудника.ВидЗанятости;
		
	КонецЕсли;	
	
	ПрочитатьТекущийАванс();
	
	УстановитьКомментарии();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущийАванс()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаСотрудников.Добавить();
	СтрокаТаблицы.Сотрудник = Объект.Сотрудник;
	СтрокаТаблицы.Период = Объект.ДатаНачала;
	
	ДанныеОбАвансе = РасчетЗарплаты.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	
	Если ДанныеОбАвансе.Количество() > 0 Тогда
		ТекущийАванс				= ДанныеОбАвансе[0].Аванс;
		ТекущийСпособРасчетаАванса	= ДанныеОбАвансе[0].СпособРасчетаАванса
	КонецЕсли;	
	
	УстановитьТекущиеЗначенияРасчетаАванса(ЭтаФорма);

	УстановитьКомментарийКАвансу(ЭтаФорма)

КонецПроцедуры	

&НаСервере
Процедура УстановитьКомментарии()
	
	Если Объект.ИзменитьПодразделениеИДолжность Тогда
		
		Если ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			
			ПозицияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ранее сотрудник занимал должность ""%1"" в подразделении ""%2""'"),
				ТекущаяДолжность, ТекущееПодразделение); 
						
		Иначе
				
			ПозицияКомментарий = НСтр("ru = 'Сотрудник еще не принят на работу'");
			
		КонецЕсли;
		
	Иначе
		
		ПозицияКомментарий = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставДействующихНачисленийСотрудника()
	
	ПредыдущиеНачисления = Объект.Начисления.Выгрузить();
	
	Объект.Начисления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = ?(ЗначениеЗаполнено(Объект.ДатаНачала), НачалоДня(Объект.ДатаНачала) - 1, ТекущаяДатаСеанса());
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
	
	Объект.Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Объект.ИзменитьНачисления Тогда
		
		Если Объект.Начисления.Количество() > 0 Тогда
			
			Если ПредыдущиеНачисления.Количество() > 0 Тогда
				
				Для каждого СтрокаНачисления Из Объект.Начисления Цикл
					
					ПредыдущиеСтроки = ПредыдущиеНачисления.НайтиСтроки(Новый Структура("Начисление", СтрокаНачисления.Начисление));
					Если ПредыдущиеСтроки.Количество() > 0 Тогда
						СтрокаНачисления.Размер = ПредыдущиеСтроки[0].Размер;;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Объект.Начисления.Загрузить(ПредыдущиеНачисления);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Форма)
	
	ИзменитьПозициюДолжность	= Форма.Объект.ИзменитьПодразделениеИДолжность;
	ИзменитьНачисления			= Форма.Объект.ИзменитьНачисления;
	ИзменитьАванс				= Форма.Объект.ИзменитьАванс;
	
	Форма.Элементы.Подразделение.Доступность = ИзменитьПозициюДолжность;
	Форма.Элементы.Должность.Доступность = ИзменитьПозициюДолжность;
	Форма.Элементы.ВидЗанятости.Доступность = ИзменитьПозициюДолжность;
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеПодразделения") Тогда
		Форма.Элементы.ОбособленноеПодразделение.Доступность = ИзменитьПозициюДолжность;
	Иначе
		Форма.Элементы.ОбособленноеПодразделение.Доступность = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Начисления.Доступность = ИзменитьНачисления;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"АвансКомментарийГруппа",
		"Доступность",
		ИзменитьАванс);
			
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКомментарийКАвансу(Форма)
	
	Если Форма.Объект.ИзменитьАванс Тогда
		ТекстПодсказки = 
			РасчетЗарплатыКлиентСервер.КомментарийИзмененияАванса(
			Форма.ТекущийСпособРасчетаАванса, 
			Форма.ТекущийАванс)
	Иначе
		ТекстПодсказки = "";
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"АвансКомментарийГруппа",
		ТекстПодсказки);
			
КонецПроцедуры	

&НаСервере
Процедура ИзменитьАвансПриИзмененииНаСервере()
	
	УстановитьТекущиеЗначенияРасчетаАванса(ЭтаФорма);
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	УстановитьКомментарийКАвансу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущиеЗначенияРасчетаАванса(Форма)
	
	Если НЕ Форма.Объект.ИзменитьАванс Тогда
		
		Форма.Объект.СпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса;
		Форма.Объект.Аванс = Форма.ТекущийАванс;
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

ЗакрытьПослеЗаписи = Ложь;
