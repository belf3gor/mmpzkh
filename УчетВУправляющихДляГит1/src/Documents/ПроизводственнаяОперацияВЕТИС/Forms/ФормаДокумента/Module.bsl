
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыВЕТИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, "ТоварыНоменклатура");
	ИнтеграцияВЕТИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, "СырьеНоменклатура");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"СырьеХарактеристика",
		"Элементы.Сырье.ТекущиеДанные.Номенклатура");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"СырьеСерия",
		"Элементы.Сырье.ТекущиеДанные.Номенклатура");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.СырьеПродукция.СписокВыбора.Добавить(Справочники.ПродукцияВЕТИС.ПустаяСсылка(), НСтр("ru='<Произвольная>'"));
	Элементы.ТоварыПродукция.СписокВыбора.Добавить(Справочники.ПродукцияВЕТИС.ПустаяСсылка(), НСтр("ru='<Произвольная>'"));
	
	ОбновитьПредупреждениеРедактированияШапки();
	
	ДанныеЭкспертизыПоСтатистике = ЗаполнениеОбъектовПоСтатистикеВЕТИС.ЭкспертизаПоПользователю();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ОбновитьПредупреждениеРедактированияШапки();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусВЕТИС();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ИнтеграцияВЕТИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВЕТИСВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ХозяйствующиеСубъектыВЕТИС" Тогда
		
		СписокРеквизитовОбновления = "ХозяйствующийСубъект, Предприятие";
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитовОбновления);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСКлиент.ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
		ПриИзмененииДокументаОснования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		ОписаниеОповещения,
		НовыйОбъект,
		Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС") Тогда
		
		НайденныеСтроки = Объект.Сырье.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сырье.Добавить();
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение;
			
			ПриИзмененииЗаписиСкладскогоЖурнала(НоваяСтрока);
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		ОписаниеОповещения,
		ВыбранноеЗначение,
		ИсточникВыбора);
		
	Если ПараметрыУказанияСерий <> Неопределено
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ИмяТЧ") Тогда
		
		ПараметрыЗаполнения = Новый Структура;
		
		Если ВыбранноеЗначение.ИмяТЧ = Элементы.Товары.Имя Тогда
			
			ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки",
													ВыбранноеЗначение.ИдентификаторТекущейСтроки);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореТоварыСерия", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыЗаполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		КонецЕсли;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
																	ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ],
																	ВыбранноеЗначение,
																	ИсточникВыбора,
																	ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозяйствующийСубъектПриИзменении(Элемент)
	
	ХозяйствующийСубъектПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ХозяйствующийСубъектПриИзмененииНаСервере()
	
	ОформленоЧерезWEB = СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb");
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, ОтборПродукция(Объект), НЕ ОформленоЧерезWEB);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ХозяйствующийСубъект");
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ПроизводительИзОснованияДляОтбораХС)
		И Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ПроизводительИзОснованияДляОтбораХС);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("НастроеноПодключение", Истина);
		
	КонецЕсли;
	ОткрытьФорму("Справочник.ХозяйствующиеСубъектыВЕТИС.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ПредприятиеПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере(ЭлементИмя)
	
	ОформленоЧерезWEB = СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb");
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, ОтборПродукция(Объект), НЕ ОформленоЧерезWEB);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ЭлементИмя);
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ПриИзмененииДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроизводственнойТранзакцииПриИзменении(Элемент)
	
	УстановитьДоступностьФлагаЗавершениеПроизводственнойТранзакции(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыНадписьДатаПроизводстваОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВводПериода(НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьСрокГодностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВводПериода(НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьУпаковкиШтрихкодыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НадписьУпаковкиШтрихкодыНажатиеЗавершение",ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(ЭтаФорма,
		Объект,
		ТекущиеДанные,
		ОписаниеОповещения,
		ТолькоПросмотр Или РедактированиеФормыНедоступно);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПродукцияПриИзмененииНаСервере("Товары", Элементы.Товары.ТекущаяСтрока);
	
	НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(
		СформироватьСписокВыбораЕдиницИзмерения("Товары"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если Копирование Тогда
			ИдентификторСтрокиИсточника = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если Копирование Тогда
			
			ИнтеграцияВЕТИСКлиентСервер.СкопироватьДанныеУпаковокШтрихкодовПоСтроке(
				Объект,
				ТекущиеДанные.ИдентификаторСтроки,
				ИдентификторСтрокиИсточника);
			
			Если Не(ДанныеЭкспертизыПоСтатистике = Неопределено) Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЭкспертизыПоСтатистике);
			КонецЕсли;
			
		Иначе
			УстановитьЗначенияПоУмолчаниюПоСтроке(ТекущиеДанные, ТекстЗапрещеннойЯчейкиЦвет, ДанныеЭкспертизыПоСтатистике);
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, ТекущиеДанные);
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, ТекущиеДанные.ИдентификаторСтроки);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий.Товары,
			Истина);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено,
																		ПараметрыУказанияСерий.Товары,
																		КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Товары);
	КонецЕсли;
	
	ОбновитьПредупреждениеРедактированияШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий.Товары);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор,
																		ПараметрыУказанияСерий.Товары,
																		КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Товары);
	КонецЕсли;
	
	ОбновитьПредупреждениеРедактированияШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НоменклатураПриИзменении("Товары", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоменклатураНачалоВыбора(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоменклатураСоздание(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ХарактеристикаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормВЕТИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущиеДанные, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормВЕТИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
																ПараметрыУказанияСерий.Товары,
																ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Серия)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПартии) Тогда
			
			ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
			
			ТоварыСерияПриИзмененииНаСервере(ИдентификаторСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, Элементы.Товары.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоВЕТИСПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЕдиницаИзмеренияВЕТИСПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПродукция Тогда
		
		ЗаполнитьСписокВыбораПродукции(ТекущиеДанные, "ТоварыПродукция");
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные, "ТоварыНоменклатура");
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные, "ТоварыХарактеристика");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.СкоропортящаясяПродукция Тогда
		ТочностьЗаполнение = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ");
	Иначе
		ТочностьЗаполнение = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
		ТекущиеДанные.ДатаПроизводстваНачалоПериода = НачалоДня(ТекущиеДанные.ДатаПроизводстваНачалоПериода);
		ТекущиеДанные.ДатаПроизводстваКонецПериода  = НачалоДня(ТекущиеДанные.ДатаПроизводстваКонецПериода);
		ТекущиеДанные.СрокГодностиНачалоПериода     = НачалоДня(ТекущиеДанные.СрокГодностиНачалоПериода);
		ТекущиеДанные.СрокГодностиКонецПериода      = НачалоДня(ТекущиеДанные.СрокГодностиКонецПериода);
	КонецЕсли;
	
	ТекущиеДанные.ДатаПроизводстваТочностьЗаполнения = ТочностьЗаполнение;
	ТекущиеДанные.СрокГодностиТочностьЗаполнения     = ТочностьЗаполнение;
	
	ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормВЕТИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиСырье

&НаКлиенте
Процедура СырьеПродукцияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПродукцияПриИзмененииНаСервере("Сырье", Элементы.Сырье.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродукцияОбработкаВыбора("Сырье", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеЕдиницаИзмеренияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.СырьеЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(
		СформироватьСписокВыбораЕдиницИзмерения("Сырье"));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	НоменклатураПриИзменении("Сырье", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоменклатураНачалоВыбора(Элементы.Сырье.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоменклатураСоздание(Элементы.Сырье.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	ХарактеристикаПриИзменении(ТекущиеДанные, Элементы.Сырье.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	СобытияФормВЕТИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущиеДанные, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормВЕТИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Сырье.ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
																ПараметрыУказанияСерий.Сырье,
																Элементы.Сырье.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, Элементы.Сырье.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	КоличествоПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКоличествоВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	КоличествоВЕТИСПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеЕдиницаИзмеренияВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ЕдиницаИзмеренияВЕТИСПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СырьеПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, ТекущиеДанные.ИдентификаторСтроки);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий.Сырье,
			Истина);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено,
																		ПараметрыУказанияСерий.Сырье,
																		КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
		
		Если Копирование Тогда
			ИдентификторСтрокиИсточника = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если Копирование Тогда
			ИнтеграцияВЕТИСКлиентСервер.СкопироватьДанныеУпаковокШтрихкодовПоСтроке(
				Объект,
				ТекущиеДанные.ИдентификаторСтроки,
				ИдентификторСтрокиИсточника);
		КонецЕсли;
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор,
																		ПараметрыУказанияСерий.Сырье,
																		КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																											КэшированныеЗначения,
																											ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СырьеНадписьУпаковкиШтрихкоды" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Объект.Сырье.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НадписьУпаковкиШтрихкодыНажатиеЗавершение",ЭтотОбъект, ДополнительныеПараметры);
		
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(ЭтаФорма, Объект, ТекущиеДанные, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СырьеПродукция Тогда
		
		ЗаполнитьСписокВыбораПродукции(ТекущиеДанные, "СырьеПродукция");
		
		Элементы.СырьеПродукция.СписокВыбора.Вставить(
			0,
			ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка"),
			НСтр("ru='<Произвольный>'"));
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СырьеНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные, "СырьеНоменклатура", "НоменклатураДляВыбораСырье");
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СырьеХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные, "СырьеХарактеристика", "НоменклатураДляВыбораСырье");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеЗаписьСкладскогоЖурналаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ПриИзмененииЗаписиСкладскогоЖурнала(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеЗаписьСкладскогоЖурналаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
		ПараметрыФормы.Вставить("Продукция", ТекущиеДанные.Продукция);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.Предприятие);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеЗаписьСкладскогоЖурналаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ДанныеВыбора = ЗаписьСкладскогоЖурналаДанныеВыбора(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПанель(Команда)
	ПанельТоварыСвернута = Истина;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СкрытьРаскрытьПанельТовары");
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанель(Команда)
	ПанельТоварыСвернута = Ложь;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СкрытьРаскрытьПанельТовары");
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность = Истина;
		ПриИзмененииДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(Команда)
	
	ОткрытьФормуПодбораТоваров("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСырья(Команда)
	
	ОткрытьФормуПодбораТоваров("Сырье");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаписиСкладскогоЖурнала(Команда)
	
	ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Хозяйствующий субъект""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ХозяйствующийСубъект",, 
			Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Предприятие) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Предприятие""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.Предприятие",,
			Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СообщениеПользователю = ЗаполнитьЗаписиСкладскогоЖурналаНаСервере();
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаписиСкладскогоЖурналаНаСервере()
	
	РезультатЗаполнения = Документы.ПроизводственнаяОперацияВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(Объект);
	
	Возврат РезультатЗаполнения.СообщениеПользователю;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборЗаписейЖурнала(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.Предприятие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.Сырье.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличные части документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьФлагаЗавершениеПроизводственнойТранзакции(Форма)
	
	Форма.Элементы.ЗавершениеПроизводственнойТранзакции.Доступность = ЗначениеЗаполнено(Форма.Объект.ИдентификаторПроизводственнойТранзакции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	
	ОбработкаПодбораНоменклатурыЗавершениеНаСервере(Результат, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНоменклатурыЗавершениеНаСервере(ВыбранноеЗначение, ИмяТЧ)
	
	ПараметрыСерий = ?(ЗначениеЗаполнено(ПараметрыУказанияСерий), ПараметрыУказанияСерий[ИмяТЧ], ПараметрыУказанияСерий);
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС          = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	ПараметрыЗаполнения.ИмяТабличнойЧасти                = ИмяТЧ;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус   = ПараметрыУказанияСерий <> Неопределено;
	
	ПараметрыЗаполнения.Вставить("ДобавленныеСтроки", Новый Массив);
	
	СобытияФормВЕТИСПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыЗаполнения,
		ПараметрыСерий);
	
	ИмяТЧ = ПараметрыЗаполнения.ИмяТабличнойЧасти;
	
	Для каждого Строка Из ПараметрыЗаполнения.ДобавленныеСтроки Цикл
		
		Строка.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если ИмяТЧ = "Товары" Тогда
			ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, Строка);
			УстановитьЗначенияПоУмолчаниюПоСтроке(Строка, ТекстЗапрещеннойЯчейкиЦвет, ДанныеЭкспертизыПоСтатистике);
		КонецЕсли;
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, Строка);

	КонецЦикла;
	
	ЗаполнитьПризнакТипЖивыеЖивотные(ИмяТЧ, ПараметрыЗаполнения.ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ВСД
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВетеринарноСопроводительныйДокумент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВетеринарноСопроводительныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<будет загружено из ВетИС>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ИдентификаторПартии
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИспользоватьИдентификаторПартии");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Товары
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляПродукция(
		ЭтаФорма,
		Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтаФорма);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтаФорма);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма);
	
	//
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляПродукция(
		ЭтаФорма,
		Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb,
		"СырьеПродукция",
		"Сырье");
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтаФорма, "СырьеНоменклатура", "Сырье");
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтаФорма, "СырьеХарактеристика", "Сырье");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"СырьеХарактеристика",
		"Объект.Сырье.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма,
		"СырьеСерия",
		"Объект.Сырье.СтатусУказанияСерий",
		"Объект.Сырье.ТипНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСписокВыбораЕдиницИзмерения(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Возврат ДоступныеЕдиницыИзменения(ТекущиеДанные.Продукция);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВводПериода(ВидПериода)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВводПериодаЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, ВидПериода);
	
	Если ВидПериода = "СрокГодности" Тогда
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияСрокаГодности(ЭтаФорма, СтрокаТабличнойЧасти, ОбработчикОповещения, РедактированиеФормыНеДоступно, СписокДоступнойТочности);
	Иначе
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияДатыПроизводства(ЭтаФорма, СтрокаТабличнойЧасти, ОбработчикОповещения, РедактированиеФормыНеДоступно, СписокДоступнойТочности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		
		Если (ДополнительныеПараметры.ВидПериода = "ДатаПроизводства"
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода)
			И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодностиНачалоПериода))
		Или (ДополнительныеПараметры.ВидПериода = "СрокГодности"
			И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода)
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодностиНачалоПериода)) Тогда
				
				РеквизитыСтрокиТовары = Новый Структура("Продукция, ДатаПроизводстваНачалоПериода, СрокГодностиНачалоПериода, СрокГодностиТочностьЗаполнения, ДатаПроизводстваТочностьЗаполнения");
				ЗаполнитьЗначенияСвойств(РеквизитыСтрокиТовары, СтрокаТабличнойЧасти);
				ЗаполнитьДатыПоСтатистикеНаСервереБезКонтекста(РеквизитыСтрокиТовары);
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, РеквизитыСтрокиТовары);
				
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатыПоСтатистикеНаСервереБезКонтекста(РеквизитыСтрокиТовары)
	
	ДанныеПоСрокамГодности = ЗаполнениеОбъектовПоСтатистикеВЕТИС.СрокГодностиПоПродукции(РеквизитыСтрокиТовары.Продукция);
	
	ЗаполнениеДокументовВЕТИС.ЗаполнитьДатыПоСтатистике(РеквизитыСтрокиТовары, ДанныеПоСрокамГодности);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ИнтеграцияВЕТИС.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ОбновитьСтатусВЕТИС();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьОтборыПоОснованию(ОбновитьКомандыОснования);
	
	УстановитьПараметрыВыбораХозяйствующегоСубъекта();
	
	НастроитьЭлементыФормы();
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары.Выгрузить(, "Продукция"), ТочностьДатПродукции);
	
	УстановитьДоступностьФлагаЗавершениеПроизводственнойТранзакции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораХозяйствующегоСубъекта()

	ИспользуетсяКомиссияИлиПереработка = ИнтеграцияВЕТИС.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья();
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("НастроеноПодключение", Истина));
	
	Если Не ИспользуетсяКомиссияИлиПереработка Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Соответствует", "Организации"));
	КонецЕсли;
	
	Элементы.ХозяйствующийСубъект.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ЦветГиперссылкиОбычный     = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветГиперссылкиОсобыйТекст = ЦветаСтиля.ЦветОсобогоТекста;
	ТекстЗапрещеннойЯчейкиЦвет = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	ЗаполнитьСлужебныеРеквизитыТовары();
	
	ЗаполнитьСлужебныеРеквизитыСырье();
	
	СобственнаяОрганизацияЗначениеПоУмолчанию            = Неопределено;
	СобственныйТорговыйОбъектЗначениеПоУмолчанию         = Неопределено;
	СторонняяОрганизацияЗначениеПоУмолчанию              = Неопределено;
	СтороннийТорговыйОбъектЗначениеПоУмолчанию           = Неопределено;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизацияЗначениеПоУмолчанию,
		СобственныйТорговыйОбъектЗначениеПоУмолчанию,
		СобственныйПроизводственныйОбъектЗначениеПоУмолчанию,
		СторонняяОрганизацияЗначениеПоУмолчанию,
		СтороннийТорговыйОбъектЗначениеПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТовары()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьИспользованиеИдентификаторовПартий(Объект.Товары);
	
	Для каждого Строка Из Объект.Товары Цикл
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, Строка);
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, Строка);
		
		Если ЗначениеЗаполнено(Строка.ЗаписьСкладскогоЖурнала) Тогда
			Строка.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
				Строка(Строка.ЗаписьСкладскогоЖурнала),,,, ПолучитьНавигационнуюСсылку(Строка.ЗаписьСкладскогоЖурнала));
		Иначе
			Строка.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
				НСтр("ru = '<будет создана автоматически>'"),, ТекстЗапрещеннойЯчейкиЦвет);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПризнакТипЖивыеЖивотные("Товары");
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, ОтборПродукция(Объект));
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыСырье()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Сырье);
	
	Для каждого Строка Из Объект.Сырье Цикл
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, Строка);
		
	КонецЦикла;
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Сырье);
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Сырье, НоменклатураДляВыбораСырье,,,Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПериодовПоСтроке(Форма, Строка)
	
	Для каждого ВидПериода Из СтрРазделить("ДатаПроизводства,СрокГодности",",") Цикл
		
		ПредставлениеПериода = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПериодаВЕТИС(
			Строка[ВидПериода+"ТочностьЗаполнения"],
			Строка[ВидПериода+"НачалоПериода"],
			Строка[ВидПериода+"КонецПериода"],
			Строка[ВидПериода+"Строка"]);
			
		Если ПустаяСтрока(ПредставлениеПериода) Тогда
			Строка["Надпись"+ВидПериода] = 
				Новый ФорматированнаяСтрока(НСтр("ru = 'указать'"),,Форма.ЦветГиперссылкиОсобыйТекст,,ВидПериода);
		Иначе
			Строка["Надпись"+ВидПериода] = 
				Новый ФорматированнаяСтрока(ПредставлениеПериода,,Форма.ЦветГиперссылкиОбычный,,ВидПериода);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковокПоСтроке(Форма, Строка)
	
	Объект = Форма.Объект;
	
	ИмяТЧ = "УпаковкиВЕТИС";
	
	ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", Строка.ИдентификаторСтроки)),
		ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок());
		
	Строка.НадписьУпаковкиШтрихкоды = Новый ФорматированнаяСтрока(ТекстНадписи,,,,ИмяТЧ);
			
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеПроизводственнаяОперацияВЕТИС.Тип;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ХозяйствующийСубъект")
		ИЛИ СтруктураРеквизитов.Свойство("Предприятие")
		ИЛИ Инициализация Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Форма.ХозяйствующийСубъектСоответствие = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		Форма.НадписьХозяйствующийСубъект = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Представление;
		
		Если Форма.ХозяйствующийСубъектСоответствие.Количество() = 0
			И Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ПроизводительИзОснованияДляОтбораХС) Тогда
			Форма.НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				Строка(Форма.ПроизводительИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ПроизводительИзОснованияДляОтбораХС));
		ИначеЕсли Форма.ХозяйствующийСубъектСоответствие.Количество() = 0
			И ЗначениеЗаполнено(Объект.ХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ПроизводительИзОснованияДляОтбораХС) Тогда
			НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				Строка(Форма.ПроизводительИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ПроизводительИзОснованияДляОтбораХС));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				НадписьХозяйствующийСубъект, " ", ТекстНеСопоставлено);
		КонецЕсли;
		
		Если Форма.СобственныйПроизводственныйОбъектЗначениеПоУмолчанию = Неопределено Тогда
			Форма.ПредприятиеСоответствие = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
			Форма.НадписьПредприятие = ПредставленияСопоставлений.ТорговыйОбъект.Представление;
		Иначе
			Форма.ПредприятиеСоответствие = ПредставленияСопоставлений.ПроизводственныйОбъект.Ссылка;
			Форма.НадписьПредприятие = ПредставленияСопоставлений.ПроизводственныйОбъект.Представление;
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(Объект.Предприятие)
			И ЗначениеЗаполнено(Форма.ПроизводительИзОснованияДляОтбораПредприятий))
			Или Форма.ПредприятиеСоответствие.НайтиПоЗначению(Форма.ПроизводительИзОснованияДляОтбораПредприятий) <> Неопределено Тогда
			Форма.НадписьПредприятие = Новый ФорматированнаяСтрока(
				Строка(Форма.ПроизводительИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ПроизводительИзОснованияДляОтбораПредприятий));
		ИначеЕсли ЗначениеЗаполнено(Объект.Предприятие)
			И ЗначениеЗаполнено(Форма.ПроизводительИзОснованияДляОтбораПредприятий)
			И Форма.ПредприятиеСоответствие.НайтиПоЗначению(Форма.ПроизводительИзОснованияДляОтбораПредприятий) = Неопределено Тогда
			
			НадписьПредприятие = Новый ФорматированнаяСтрока(
				Строка(Форма.ПроизводительИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ПроизводительИзОснованияДляОтбораПредприятий));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.НадписьПредприятие = Новый ФорматированнаяСтрока(
				НадписьПредприятие, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		ЗаполнитьТорговыйОбъект(Форма, Объект, ПредставленияСопоставлений);
		
		Элементы.Предприятие.Доступность = ЗначениеЗаполнено(Объект.ХозяйствующийСубъект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма, Объект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или Инициализация Тогда
		
		СвойстваЭлементов = Новый Структура;
		СвойстваЭлементов.Вставить("Видимость",       Ложь);
		СвойстваЭлементов.Вставить("ОграничениеТипа", Неопределено);
		СвойстваЭлементов.Вставить("ТолькоПросмотр",  Истина);
		ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСвойстваЭлементовПроизводственнойТранзакцииПоДокументуОснованию(
			СвойстваЭлементов, Объект.ДокументОснование);
		
		Элементы.ЗавершениеПроизводственнойТранзакции.Видимость          = СвойстваЭлементов.Видимость;
		Элементы.ИдентификаторПроизводственнойТранзакции.Видимость       = СвойстваЭлементов.Видимость;
		Элементы.ИдентификаторПроизводственнойТранзакции.ТолькоПросмотр  = СвойстваЭлементов.ТолькоПросмотр;
		Если СвойстваЭлементов.ОграничениеТипа <> Неопределено Тогда
			Элементы.ИдентификаторПроизводственнойТранзакции.ОграничениеТипа = СвойстваЭлементов.ОграничениеТипа;
		КонецЕсли;
		ЗаполнитьТорговыйОбъект(Форма, Объект);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СкрытьРаскрытьПанельТовары") 
		ИЛИ Инициализация Тогда
		
		Элементы.СвернутьПанель.Видимость = НЕ Форма.ПанельТоварыСвернута;
		Элементы.РазвернутьПанель.Видимость = Форма.ПанельТоварыСвернута;
		
		Элементы.ГруппаТоварыПанель.Видимость = НЕ Форма.ПанельТоварыСвернута;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПриИзмененииНаСервере(ИмяТЧ, ТекущаяСтрока, Пересчет = Истина)
	
	СтрокаТабличнойЧасти = ЭтотОбъект.Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ИмяТЧ = "Товары" Тогда
		
		СтрокаТабличнойЧасти.СкоропортящаясяПродукция = 
			ЗаполнениеОбъектовПоСтатистикеВЕТИС.СкоропортящаясяПродукцияПоПродукции(СтрокаТабличнойЧасти.Продукция).Количество();
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьИспользованиеИдентификаторовПартий(Объект.Товары);
		
		ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
			СтрокаТабличнойЧасти,
			ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(СтрокаТабличнойЧасти.Продукция));
		
		ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары, ТочностьДатПродукции);
		
		ДатаПроизводстваДоступнаяТочностьЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(
			СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, "ДатаПроизводства");
		
		ТекущаяТочностьДоступна = ДатаПроизводстваДоступнаяТочностьЗаполнения.НайтиПоЗначению(
			СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения);
		
		Если ТекущаяТочностьДоступна = Неопределено Тогда
			СтрокаТабличнойЧасти.ДатаПроизводстваСтрока             = "";
			СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения = "";
			СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода      = Неопределено;
			СтрокаТабличнойЧасти.ДатаПроизводстваКонецПериода       = Неопределено;
		КонецЕсли;
		
		СрокГодностиДоступнаяТочностьЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(
			СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, "СрокГодности");
		
		ТекущаяТочностьДоступна = СрокГодностиДоступнаяТочностьЗаполнения.НайтиПоЗначению(
			СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения);
		
		Если ТекущаяТочностьДоступна = Неопределено Тогда
			СтрокаТабличнойЧасти.СрокГодностиСтрока             = "";
			СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения = "";
			СтрокаТабличнойЧасти.СрокГодностиНачалоПериода      = Неопределено;
			СтрокаТабличнойЧасти.СрокГодностиКонецПериода       = Неопределено;
		КонецЕсли;
		
		Если ДатаПроизводстваДоступнаяТочностьЗаполнения.Количество() = 1
			И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(ДатаПроизводстваДоступнаяТочностьЗаполнения[0].Значение) Тогда
			
			СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения = ДатаПроизводстваДоступнаяТочностьЗаполнения[0].Значение;
		КонецЕсли;
		
		Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения) Тогда
			СтрокаТабличнойЧасти.ДатаПроизводстваСтрока             = "";
			СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода      = Неопределено;
			СтрокаТабличнойЧасти.ДатаПроизводстваКонецПериода       = Неопределено;
		КонецЕсли;
		
		Если (СрокГодностиДоступнаяТочностьЗаполнения.Количество() = 1
			И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СрокГодностиДоступнаяТочностьЗаполнения[0].Значение))
			Или ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения) Тогда
			
			СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения = СрокГодностиДоступнаяТочностьЗаполнения[0].Значение;
		КонецЕсли;
		
		Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения) Тогда
			СтрокаТабличнойЧасти.СрокГодностиСтрока             = "";
			СтрокаТабличнойЧасти.СрокГодностиНачалоПериода      = Неопределено;
			СтрокаТабличнойЧасти.СрокГодностиКонецПериода       = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода)
			<> ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодностиНачалоПериода) Тогда
			ЗаполнитьДатыПоСтатистикеНаСервереБезКонтекста(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
	ИначеЕсли ИмяТЧ = "Сырье" Тогда
		СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала = Неопределено;
	КонецЕсли;
	
	Если Пересчет Тогда
	
		ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(СтрокаТабличнойЧасти);
		
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСПереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект,
			СтрокаТабличнойЧасти,
			Неопределено,
			ПараметрыЗаполнения);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ВыбранноеЗначение.Пустая() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
					"ОткрытьФормуПроизвольнаяПродукцияЗавершение",
					ЭтотОбъект,
					ДополнительныеПараметры);
					
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Продукция);
		
		ОткрытьФорму("Справочник.ПродукцияВЕТИС.Форма.ПроизвольнаяПродукция",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПроизвольнаяПродукцияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
		
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		
		СтрокаТабличнойЧасти.Продукция = РезультатЗакрытия;
		
		ПродукцияПриИзмененииНаСервере(ИмяТЧ, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		
		Если ИмяТЧ = "Товары" Тогда
		
			НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(ТекущиеДанные)
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(ТекущиеДанные.Продукция,
								ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыСерий = ?(ЗначениеЗаполнено(ПараметрыУказанияСерий), ПараметрыУказанияСерий[ИмяТЧ], ПараметрыУказанияСерий);
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ИмяТабличнойЧасти     = ИмяТЧ;
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	Если РедактированиеФормыНедоступно или ЗначениеЗаполнено(ТекущиеДанные.ЗаписьСкладскогоЖурнала) Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Истина;
		Если ИмяТЧ = "Товары" Тогда
			ПараметрыЗаполнения.Вставить("ОтборПродукция", ОтборПродукция(Объект));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = ПараметрыУказанияСерий <> Неопределено;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения,
		ПараметрыЗаполнения, ПараметрыСерий);
		
	Если ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС Тогда
		ПродукцияПриИзмененииНаСервере(ИмяТЧ, ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Если ИмяТЧ = "Товары" Тогда
		НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(ТекущиеДанные, ИмяТЧ = "Товары")
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ИмяТабличнойЧасти       = ИмяТЧ;
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Не РедактированиеФормыНедоступно И Не ЗначениеЗаполнено(ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	Если ИмяТЧ = "Товары" И ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС Тогда
		ПараметрыЗаполнения.Вставить("ОтборПродукция", ОтборПродукция(Объект));
	КонецЕсли;
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения,
		ПараметрыЗаполнения);
		
	Если ИмяТЧ = "Товары" И ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС Тогда
		ПродукцияПриИзмененииНаСервере(ИмяТЧ, ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
		НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		ИмяТЧ = "Товары";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСырье Тогда
		ИмяТЧ = "Сырье";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	НоменклатураПриИзменении(ИмяТЧ, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСоздание(ТекущиеДанные)
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(ТекущиеДанные.Продукция,
								ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореТоварыСерия(Серия, ДополнительныеПараметры) Экспорт
	
	Если Серия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = ДополнительныеПараметры.ИдентификаторТекущейСтроки;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПартии) Тогда
		ТоварыСерияПриИзмененииНаСервере(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСерияПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьИдентификаторПартии(ТекущиеДанные, ТекущиеДанные.Серия);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	
	Если РедактированиеФормыНедоступно Тогда
		ВведенноеЗначение = ТекущиеДанные.Количество;
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		Если НЕ ВведенноеЗначение = ТекущиеДанные.Количество Тогда
			ТекстСообщения = НСтр("ru='Документ был передан в информационную систему ВетИС.
				|Количество номенклатуры должно соответствовать количеству ВетИС с учетом коэффициентов пересчета.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВЕТИСПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(
		ЭтотОбъект,
		ТекущиеДанные,
		КэшированныеЗначения,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияВЕТИСПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииЕдиницыИзмеренияВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеЕдиницыИзменения(Продукция)
	
	ДоступныеЕдиницыИзменения = Новый Массив;
	Если ЗначениеЗаполнено(Продукция) Тогда
		ДоступныеЕдиницыИзменения = Новый Массив(ИнтеграцияВЕТИСПовтИсп.ДоступныеЕдиницыИзменения(Продукция));
	КонецЕсли;
	
	Возврат ДоступныеЕдиницыИзменения;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДокументаОснования()
	
	Объект.ИдентификаторПроизводственнойТранзакции = Неопределено;
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииДокументаОснованияПроизводственнойОперации(Объект);
	УстановитьДоступностьФлагаЗавершениеПроизводственнойТранзакции(ЭтотОбъект);
	
	ЗаполнитьОтборыПоОснованию();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДокументОснование");
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУпаковкиШтрихкодыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ИнтеграцияВЕТИСКлиентСервер.ЗаполнитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ТекущиеДанные.ИдентификаторСтроки, РезультатЗакрытия);
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, ТекущиеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти = Неопределено)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала) Тогда
		
		ПриИзмененииЗаписиСкладскогоЖурналаНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		
		КоличествоВЕТИСПриИзменении(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗаписиСкладскогоЖурналаНаСервере(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.Сырье.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, СтрокаТабличнойЧасти.ИдентификаторСтроки);
	
	ЗаполнитьСтрокуПоДаннымЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти);
	
	ЗаполнитьПредставлениеУпаковокПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоДаннымЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала);
	Запрос.Текст = Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ТекстЗапросаДанныеЗаписейСкладскогоЖурнала();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СписокРеквизитов = "Продукция";
		Если СтрокаТабличнойЧасти.Количество = 0 И СтрокаТабличнойЧасти.КоличествоВЕТИС = 0 Тогда
			СписокРеквизитов = СписокРеквизитов + ",КоличествоВЕТИС,ЕдиницаИзмеренияВЕТИС";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, СписокРеквизитов);
		
		Для каждого СтрокаУпаковки Из Выборка.УпаковкиВЕТИС.Выгрузить() Цикл
			НоваяСтрокаУпаковки = Объект.УпаковкиВЕТИС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковки, СтрокаУпаковки);
			НоваяСтрокаУпаковки.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
			Для каждого СтрокаШтрихкода Из Выборка.ШтрихкодыУпаковок.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(Объект.ШтрихкодыУпаковок.Добавить(), СтрокаШтрихкода);
			КонецЦикла;
		КонецЦикла;
		
		ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Сырье,
													НоменклатураДляВыбораСырье,
													СтрокаТабличнойЧасти.Продукция,
													СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала,
													Истина);
		
	КонецЕсли;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Сырье);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект,
																							ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьСкладскогоЖурналаДанныеВыбора(Знач Текст, Знач ПараметрыПолученияДанных)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Ссылка КАК Ссылка,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|ГДЕ
	|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС > 0
	|	И ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И ОстаткиПродукцииВЕТИС.Предприятие = &Предприятие
	|	И ОстаткиПродукцииВЕТИС.Продукция = &Продукция
	|	И ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.НомерЗаписи ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Представление";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ПараметрыПолученияДанных.Отбор.ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", ПараметрыПолученияДанных.Отбор.Предприятие);
	Запрос.УстановитьПараметр("Продукция", ПараметрыПолученияДанных.Отбор.Продукция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
	
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
	
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакТипЖивыеЖивотные(ИмяТЧ, МассивСтрок = Неопределено)
	
	Если ИмяТЧ <> "Товары" Тогда
		Возврат;
	КонецЕсли;
	
	МассивПродукции = Объект[ИмяТЧ].Выгрузить(,"Продукция").ВыгрузитьКолонку("Продукция");
	
	СоответствиеТипЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(МассивПродукции);
	
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Объект[ИмяТЧ]
	КонецЕсли;
	
	Для каждого Строка Из МассивСтрок Цикл
		ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
			Строка,
			СоответствиеТипЖивыеЖивотные[Строка.Продукция],
			Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияПоУмолчаниюПоСтроке(СтрокаТабличнойЧасти, ТекстЗапрещеннойЯчейкиЦвет, ДанныеЭкспертизы)
	
	Если ДанныеЭкспертизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЭкспертизы);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения =
		ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
	СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения =
		ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
	СтрокаТабличнойЧасти.ПредставлениеЗаписьСкладскогоЖурнала = Новый ФорматированнаяСтрока(
		НСтр("ru = '<будет создана автоматически>'"),, ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступностьЭлементовПоСтрокеТовары(СтрокаТабличнойЧасти)
	
	ТипЖивыеЖивотные = СтрокаТабличнойЧасти.ТипЖивыеЖивотные;
	
	Элементы.ТоварыПанельСкоропортящаясяПродукция.Доступность      = Не ТипЖивыеЖивотные;
	Элементы.ТоварыСкоропортящаясяПродукция.Доступность            = Не ТипЖивыеЖивотные;
	
	Элементы.ТоварыПанельНизкокачественнаяПродукция.Доступность    = Не ТипЖивыеЖивотные;
	Элементы.ТоварыПанельНизкокачественнаяПродукция.ТолькоПросмотр = Истина;
	Элементы.ТоварыНизкокачественнаяПродукция.Доступность          = Не ТипЖивыеЖивотные;
	Элементы.ТоварыНизкокачественнаяПродукция.ТолькоПросмотр       = Истина;
	
	ОтображатьСрокГодностиПоТочностиДаты = Истина;
	СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, "СрокГодности");
	Если СписокДоступнойТочности.Количество() = 1 
		И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СписокДоступнойТочности[0].Значение) Тогда
		
		ОтображатьСрокГодностиПоТочностиДаты = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыПанельНадписьСрокГодности.Видимость     = Не ТипЖивыеЖивотные И ОтображатьСрокГодностиПоТочностиДаты;
	Элементы.ТоварыПанельНадписьДатаПроизводства.Заголовок = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные);
	
	Элементы.ТоварыГруппаОшибка.Видимость = СтрокаТабличнойЧасти.ЕстьОшибки;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьСтатусВЕТИС()
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусВЕТИС                = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие         = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	ОперацииДопустимыхДействий = МенеджерОбъекта.ОперацииДопустимыхДействий();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияВЕТИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусВЕТИС = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	НедоступныеДействия = ПользователиВЕТИС.НедоступныеДальнейшиеДействия(Объект.Ссылка, ДопустимыеДействия, ОперацииДопустимыхДействий, Объект.ХозяйствующийСубъект);
	
	СтатусВЕТИСПредставление = ИнтеграцияВЕТИС.ПредставлениеСтатусаВЕТИС(
		СтатусВЕТИС,
		ДальнейшееДействие,
		ДопустимыеДействия,
		НедоступныеДействия);
	
	#Область БлокировкаРеквизитовВЗависимостиОтСтатуса
	
	РедактированиеФормыНеДоступно = СтатусВЕТИС <> Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Черновик
	                              И СтатусВЕТИС <> Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи
	                              И СтатусВЕТИС <> Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС;
	
	Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	Элементы.ГруппаПроизводственнаяТранзакция.ТолькоПросмотр                    = РедактированиеФормыНеДоступно;
	Элементы.Ответственный.ТолькоПросмотр                                       = РедактированиеФормыНеДоступно;
	
	Элементы.СтраницаТехнологическийПроцесс.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	
	// Товары.
	Исключения = "ТоварыНайти, ТоварыОтменитьПоиск, ТоварыСгенерироватьСерии, ТоварыКонтекстноеМенюКопированиеИВыделение, "
		+ "ГруппаСвернутьРазвернуть, ТоварыГруппаНоменклатура, ТоварыКоличество";
	
	ИнтеграцияВЕТИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТовары,
		НЕ РедактированиеФормыНеДоступно, Исключения);
	
	// Сырье.
	Исключения = "СырьеНайти, СырьеОтменитьПоиск, СырьеКонтекстноеМенюКопированиеИВыделение, "
		+ "СырьеГруппаНоменклатура, СырьеКоличество";
	
	ИнтеграцияВЕТИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаСырье,
		НЕ РедактированиеФормыНеДоступно, Исключения);
	
	#КонецОбласти
	
	#Область ОшибкиВетИС
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС Тогда
		ТаблицаОшибок = ИнтеграцияВЕТИСВызовСервера.ПолучитьТаблицуОшибок(Объект.Ссылка);
		Если ТаблицаОшибок <> Неопределено Тогда
			Для Каждого Ошибка Из ТаблицаОшибок Цикл
				СтрокиТоваровПоНомеру = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Ошибка.НомерСтрокиСОшибкой));
				Для Каждого СтрокаТоваров Из СтрокиТоваровПоНомеру Цикл
					СтрокаТоваров.ЕстьОшибки = 1;
					СтрокаТоваров.Ошибка     = Ошибка.КодОшибки+": "+Ошибка.ОписаниеОшибки;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТоваров Из Объект.Товары Цикл
				СтрокаТоваров.ЕстьОшибки = 0;
				СтрокаТоваров.Ошибка     = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьКорректностьДанных" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		ОткрытьФорму("Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb" Тогда
		
		ИнтеграцияВЕТИСКлиент.ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(Объект.Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НетДоступа") Тогда
		
		УточнениеГиперссылки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"НетДоступа","");
		ИнтеграцияВЕТИСКлиент.ПредупредитьОбОтсутствииДоступа(УточнениеГиперссылки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеИЗаписатьДокумент();
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Результат = СгенерироватьСерииНаСервере();
	
	ИнтеграцияВЕТИСКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат.ЗаполнениеЗавершено,
		Результат.СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ИмяТЧ, СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма, ПараметрыУказанияСерий[ИмяТЧ], Текст, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
								Объект, Документы.ПроизводственнаяОперацияВЕТИС);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект,
																						ПараметрыУказанияСерий.Товары);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект,
																						ПараметрыУказанияСерий.Сырье);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИспользоватьСерииНоменклатуры = ПараметрыУказанияСерий.Товары.ИспользоватьСерииНоменклатуры;
	Иначе
		ИспользоватьСерииНоменклатуры = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСгенерироватьСерии.Видимость = ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыСерия.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.СырьеСерия.Видимость  = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияВЕТИС.СгенерироватьСерии(Объект,
													Объект.Товары,
													Элементы.Товары.ВыделенныеСтроки,
													ПараметрыУказанияСерий.Товары);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор,
																		ПараметрыУказанияСерий,
																		КэшированныеЗначения)
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		ЭтотОбъект,,
		ТекущаяСтрокаИдентификатор,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПродукции(ТекущаяСтрока, ИмяЭлемента)
	
	СписокВыбораНоменклатура = Элементы[ИмяЭлемента].СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока, ИмяЭлемента, ИмяЭлементаВыбора = "НоменклатураДляВыбора")
	
	СписокВыбораНоменклатура = Элементы[ИмяЭлемента].СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СтруктураПоиска = Новый Структура("Продукция", ТекущаяСтрока.Продукция);
	Если ИмяЭлементаВыбора = "НоменклатураДляВыбораСырье" Тогда
		СтруктураПоиска.Вставить("ЗаписьСкладскогоЖурнала", ТекущаяСтрока.ЗаписьСкладскогоЖурнала);
	КонецЕсли;
	
	НайденныеСтроки = ЭтаФорма[ИмяЭлементаВыбора].НайтиСтроки(СтруктураПоиска);
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока, ИмяЭлемента, ИмяЭлементаВыбора = "НоменклатураДляВыбора")
	
	СписокВыбораХарактеристика = Элементы[ИмяЭлемента].СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	СтруктураПоиска = Новый Структура("Продукция, Номенклатура",
		ТекущаяСтрока.Продукция,
		ТекущаяСтрока.Номенклатура);
	Если ИмяЭлементаВыбора = "НоменклатураДляВыбораСырье" Тогда
		СтруктураПоиска.Вставить("ЗаписьСкладскогоЖурнала", ТекущаяСтрока.ЗаписьСкладскогоЖурнала);
	КонецЕсли;
	
	НайденныеСтроки = ЭтаФорма[ИмяЭлементаВыбора].НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусВЕТИС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеИЗаписатьДокумент()
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтборПродукция(Объект)
	ОтборСтруктура = Новый Структура("ХозяйствующийСубъект, Предприятие", Объект.ХозяйствующийСубъект, Объект.Предприятие);
	Возврат ОтборСтруктура
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТорговыйОбъект(Форма, Объект, ПредставленияСопоставлений = Неопределено)
	
	Если ПредставленияСопоставлений = Неопределено Тогда
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект,
			Объект.Предприятие);
	КонецЕсли;
	
	СопоставленныйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
	Если ЗначениеЗаполнено(Форма.ПроизводительИзОснованияДляОтбораПредприятий) Тогда
		Объект.ТорговыйОбъект = Форма.ПроизводительИзОснованияДляОтбораПредприятий;
	ИначеЕсли СопоставленныйОбъект <> Неопределено И СопоставленныйОбъект.Количество() > 0 Тогда
		Объект.ТорговыйОбъект = СопоставленныйОбъект.Получить(0).Значение;
	Иначе
		Объект.ТорговыйОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораТоваров(ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения      = Новый ОписаниеОповещения("ОбработкаПодбораНоменклатурыЗавершение",
														ЭтотОбъект,
														ДополнительныеПараметры);
	
	ПараметрыСерий = Неопределено;
	
	Если ПараметрыУказанияСерий <> Неопределено
		И Объект.ТорговыйОбъект <> Неопределено Тогда
		
		ПараметрыСерий = ПараметрыУказанияСерий[ИмяТЧ];
		
	КонецЕсли;
	
	ПараметрыПодбора = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыПодбораТоваров(ЭтаФорма, ПараметрыСерий);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект,
																		ОписаниеОповещения,
																		ПараметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыПоОснованию(ОбновитьКомандыОснования = Истина)
	
	ОтборыПоОснованию = ИнтеграцияВЕТИСВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС"), 
	                                                                                        Объект.ДокументОснование);
	
	Если НЕ(ОтборыПоОснованию = Неопределено)Тогда
		ПроизводительИзОснованияДляОтбораХС          = ОтборыПоОснованию.ХозяйствующийСубъект;
		ПроизводительИзОснованияДляОтбораПредприятий = ОтборыПоОснованию.Предприятие;
	Иначе 
		ПроизводительИзОснованияДляОтбораХС          = Неопределено;
		ПроизводительИзОснованияДляОтбораПредприятий = Неопределено;
	КонецЕсли;
	
	Если ОбновитьКомандыОснования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредупреждениеРедактированияШапки()
	
	Авто       = ОтображениеПредупрежденияПриРедактировании.Авто;
	Отображать = ОтображениеПредупрежденияПриРедактировании.Отображать;
	
	Если Объект.Товары.Количество() И ЗначениеЗаполнено(Объект.ХозяйствующийСубъект) Тогда
		Элементы.ХозяйствующийСубъект.ОтображениеПредупрежденияПриРедактировании = Отображать;
	Иначе
		Элементы.ХозяйствующийСубъект.ОтображениеПредупрежденияПриРедактировании = Авто;
	КонецЕсли;
	
	Если Объект.Товары.Количество() И ЗначениеЗаполнено(Объект.Предприятие) Тогда
		Элементы.Предприятие.ОтображениеПредупрежденияПриРедактировании = Отображать;
	Иначе
		Элементы.Предприятие.ОтображениеПредупрежденияПриРедактировании = Авто;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти