
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
			ОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимРасшифровки") Тогда
		Если ЗначениеЗаполнено(Параметры.РежимРасшифровки) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУменьшениеНалога;
		КонецЕсли;
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Строки", "Строки");
	СписокТабличныхЧастей.Добавить("ОС", "ОС");
	СписокТабличныхЧастей.Добавить("НМА", "НМА");
	СписокТабличныхЧастей.Добавить("УменьшениеНалога", "УменьшениеНалога");
	СписокТабличныхЧастей.Добавить("УплаченныйТорговыйСбор", "УплаченныйТорговыйСбор");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ЗаписьКУДиР",
		"ФормаДокумента",
		НСтр("ru='Новости: Запись книги доходов и расходов УСН, по патенту'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	Оповестить("ИзменениеЗаписиКУДиР");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента);
		
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) И НЕ Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетПСНКлиент.ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		Объект.Организация,
		Объект.Дата,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтроки

&НаКлиенте
Процедура СтрокиГрафа5ПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.Графа5 = 0 Тогда
		ДанныеТекущейСтроки.ДоходыЕНВД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиДоходыЕНВДПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.ДоходыЕНВД Тогда
		ДанныеТекущейСтроки.ДоходТорговыйСбор = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиГрафа7ПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.Графа7 = 0 Тогда 
		ДанныеТекущейСтроки.РасходыЕНВД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыУменьшениеналога

&НаКлиенте
Процедура УменьшениеНалогаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
		Если НЕ Копирование Тогда
			СтрокаТаблицы.ПериодНачисления = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущееЗначение = Элементы.УменьшениеНалога.ТекущиеДанные.ПериодНачисления;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода",
		НачалоМесяца(ТекущееЗначение), КонецМесяца(ТекущееЗначение));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("УменьшениеНалогаПериодСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	ИзменитьПериодНачисления(СтрокаТаблицы, Направление, 1);
	Модифицированность = Истина;
	
	ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыПФРПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ПФР";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФССПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФСС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФОМСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФОМС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФСС_НСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФСС_НС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыБольничныеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "Больничные";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыДобровольноеСтрахованиеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ДобровольноеСтрахование";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыУплаченныйторговыйсбор

&НаКлиенте
Процедура УплаченныйТорговыйСборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТаблицы = Элементы.УплаченныйТорговыйСбор.ТекущиеДанные;
		СтрокаТаблицы.ПериодНачисления = НачалоКвартала(Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСборПериодНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущееЗначение = Элементы.УплаченныйТорговыйСбор.ТекущиеДанные.ПериодНачисления;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода",
		НачалоКвартала(ТекущееЗначение), КонецКвартала(ТекущееЗначение));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("УплаченныйТорговыйСборПериодНачисленияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбораПериода, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСборПериодНачисленияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.УплаченныйТорговыйСбор.ТекущиеДанные;
	ИзменитьПериодНачисления(СтрокаТаблицы, Направление, 3);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;
	
	ТекстНеобходимоЗаполнитьПатент = УчетПСН.ТекстНеобходимоЗаполнитьПатент();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	НадписьПатент = НСтр("ru = 'Патент:'");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// СтрокиГрафа5, СтрокиГрафа6, СтрокиГрафа7, СтрокиНДС, СтрокиДоходыЕНВД, СтрокиРасходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа5");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа6");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа7");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыЕНВД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиРасходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДеятельностьНаПатенте", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Видимость полей для раздельного учета при уплате торгового сбора
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаНадписьРасходы");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаНадписьРасходыТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаПФРТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФССТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФОМСТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФСС_НСТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаБольничныеТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаДобровольноеСтрахованиеТорговыйСбор");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РаздельныйУчетУСНТорговыйСбор", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДеятельностьНаПатенте", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СтрокиДоходыТорговыйСбор
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыТорговыйСбор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.ДоходыЕНВД", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// СтрокиРасходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиРасходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.Графа7", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	// СтрокиДоходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.Графа5", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименяетсяУСНПатент       = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата)
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Объект.Организация, НачалоГода(Объект.Дата), КонецГода(Объект.Дата));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	Если Форма.ПрименяетсяТолькоУСНПатент Тогда
		Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	Иначе
		Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовПатента.Видимость =
		УчетПСНКлиентСервер.ПоказатьПредупреждениеНеобходимоЗаполнитьПатент(
			Объект.Организация,
			Объект.Патент,
			Форма.ПрименяетсяТолькоУСНПатент,
			Форма.ПрименяетсяНесколькоПатентов);
	
	Элементы.ГруппаОС.Видимость               = НЕ Объект.ДеятельностьНаПатенте;
	Элементы.ГруппаНМА.Видимость              = НЕ Объект.ДеятельностьНаПатенте;
	Элементы.ГруппаУменьшениеНалога.Видимость = НЕ Объект.ДеятельностьНаПатенте
		И Объект.Дата >= УчетУСНКлиентСервер.ДатаНачалаФормирования4РазделаКУДиР();
	
	Элементы.ГруппаУплаченныйТорговыйСбор.Видимость = НЕ Объект.ДеятельностьНаПатенте
		И Объект.Дата >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР();
	
	Элементы.УменьшениеНалогаГруппаРеквизитыЗаписи.Группировка = ?(Форма.РаздельныйУчетУСНТорговыйСбор,
		ГруппировкаКолонок.Вертикальная, ГруппировкаКолонок.Горизонтальная);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		ТекстЗаголовка = НСтр("ru = 'Запись книги доходов по патенту'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Запись книги доходов и расходов УСН'");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Форма.Заголовок = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	Иначе
		Форма.Заголовок = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаРеквизитовШапки

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	УчетПСН.ДатаПриИзменении(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
	Иначе
		Объект.Патент = Неопределено;
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентЗаполнениеРеквизитовЗавершение(ВыбранныйПатент, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если НЕ УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		Объект.Патент                = ВыбранныйПатент;
		
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТабличныхЧастей

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.УменьшениеНалога Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы)
	
	СтрокаТаблицы.ПериодСтрокой = Формат(СтрокаТаблицы.ПериодНачисления, "ДФ='MMMM yyyy'");
	
	СтрокаТаблицы.НадписьРасходы = НСтр("ru = 'Расходы:'");
	СтрокаТаблицы.НадписьРасходыТорговыйСбор = НСтр("ru = 'в т.ч. на торговом сборе:'");
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	// Установим полученный период
	Если СтрокаТаблицы.ПериодНачисления <> РезультатЗакрытия.НачалоПериода Тогда
		СтрокаТаблицы.ПериодНачисления = РезультатЗакрытия.НачалоПериода;
		Модифицированность = Истина;
		ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныйТорговыйСборПериодНачисленияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.УплаченныйТорговыйСбор.ТекущиеДанные;
	
	Если СтрокаТаблицы.ПериодНачисления <> РезультатЗакрытия.НачалоПериода Тогда
		СтрокаТаблицы.ПериодНачисления = РезультатЗакрытия.НачалоПериода;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы)

	// Ограничения для сумм "в том числе":
	// 1. Модуль суммы "в том числе" не может быть больше, чем у основной суммы.
	// 2. Знак суммы "в том числе" не может отличаться от знака основной суммы.
	
	// Правила обработки (применяются последовательно):
	// Если зависимая сумма отличается знаком от основной - она обнуляется.
	// Если зависимая сумма по модулю больше основной - она приравнивается к основной.
	
	ИмяЗависимойСуммы = ИмяСуммы + "ТорговыйСбор";
	
	ОсновнаяСумма  = СтрокаТаблицы[ИмяСуммы];
	ЗависимаяСумма = СтрокаТаблицы[ИмяЗависимойСуммы];
	
	ЗнакСуммы      = ?(ОсновнаяСумма < 0, -1, 1);
	ЗнакЗависимой  = ?(ЗависимаяСумма < 0, -1, 1);
	
	Если ЗнакСуммы <> ЗнакЗависимой Тогда
		ЗависимаяСумма = 0;
	ИначеЕсли ОсновнаяСумма*ЗнакСуммы < ЗависимаяСумма*ЗнакСуммы Тогда
		ЗависимаяСумма = ОсновнаяСумма;
	КонецЕсли;
	
	СтрокаТаблицы[ИмяЗависимойСуммы] = ЗависимаяСумма;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодНачисления(СтрокаТаблицы, Направление, КоличествоМесяцев)
	
	СтрокаТаблицы.ПериодНачисления = ДобавитьМесяц(СтрокаТаблицы.ПериодНачисления, КоличествоМесяцев * Направление);
	
КонецПроцедуры

#КонецОбласти

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
