
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета Экспорт;        // Хранит значение константы "Валюта регламентированного учета".
Перем мСписокТиповДокументов Экспорт;                 // Хранит список возможных типов документов для отражения документов.
Перем мЭтоАкт Экспорт;                                // Флаг типа Акт для упрощения анализа.
Перем мЭтоРеализация Экспорт;                         // Флаг типа Реализация для упрощения анализа.
Перем мСчетаУчетаНоменклатуры;                        // Кэш для хранения счетов учета номенклатуры.
Перем мСчетаУчетаКомпенсатораЛьгот;                   // Хранит счета учета расчетов с контрагентом - компенсатором льгот.
Перем мНоменклатурныеГруппыЗданий;                    // Кэш для хранения номенклатурных групп зданий.
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;           // Хранит настройки учетной политики по ТСЖ.
Перем мСтруктураНастроекКапРемонта Экспорт;           // Хранит структуру настроек капитального ремонта организации,  //++Петрова
Перем мТаблицаСчетовУчетаРасчетовПени Экспорт;        // Хранит настройки учета счетов расчета пени.                 //--Петрова

Перем ТаблицаДокументов;

#Область СлужебныеПроцедурыиФункции

// Заполняет табличную часть.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьТабличнуюЧастьОтражениеНачислений(ОбновитьСодержаниеТабличнойЧасти = Ложь,
													 ОтборГруппаУслуг = Неопределено,
													 ОтборОбъектОтражения = Неопределено) Экспорт
	
	Если ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		// Если используется новый механизм отражения начислений, то заполняем документ
		// в разрезе месяцев отражения по данным нового регистра отражения в регл.учете.
		ЗаполнитьТабличнуюЧастьОтражениеНачисленийНовыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти, ОтборГруппаУслуг, ОтборОбъектОтражения);
	Иначе
		// Если используется старый механизм отражения,
		// то заполнение начислений для отражения производим по-старому.
		ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает создание документов для каждой строки табличной части.
Процедура СформироватьДокументыТабличнойЧасти(ПравитьСуществующие = Ложь) Экспорт
	
	Если ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		СформироватьДокументыНовыйМеханизмОтражения(ПравитьСуществующие);
	Иначе
		СформироватьДокументыТабличнойЧастиСтарыйМеханизмОтражения(ПравитьСуществующие);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет значение переменных, определяющих тип документа.
Процедура ИзменитьТипДокумента(ЭтоРеализация = Ложь)
	
	мЭтоРеализация = ЭтоРеализация;
	мЭтоАкт        = НЕ ЭтоРеализация;

КонецПроцедуры // ИзменитьТипДокумента()

// Заполняем счета учета в строках ТЧ "Контрагенты".
//
Процедура ЗаполнитьСчетаУчетаТабличнойЧасти() Экспорт
	
	Если НЕ ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
		Возврат;
	КонецЕсли;
	
	//Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл                 //++Петрова
	//	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
	//КонецЦикла;
	СчетаУчета     = Неопределено;
	ПредКонтрагент = Неопределено;
	Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл
		Если ПредКонтрагент = СтрокаТабличнойЧасти.Контрагент Тогда
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, СчетаУчета);
		Иначе
			СчетаУчета = Неопределено;
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, СчетаУчета);
			ПредКонтрагент = СтрокаТабличнойЧасти.Контрагент;
		КонецЕсли;
	КонецЦикла;                                   //--петрова

	
КонецПроцедуры // ЗаполнитьСчетаУчетаТабличнойЧасти()

// Заполняет счета в строке табличной части.
//
// Параметры:
//  СтрокаТЧ     - строка табличной части документа;
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ,СчетаУчета = Неопределено) Экспорт    //счета учета=Неопределено  из базы до обновления //петрова) Экспорт
	
	ТекКонтрагент         = СтрокаТЧ.Контрагент;
	ТекДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	ВидВзаиморасчетов     = ТекДоговорКонтрагента.ВидВзаиморасчетов;
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	//СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация,     //++петрова
	//																		  ТекКонтрагент, ТекДоговорКонтрагента);
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, 
		                                                                        ТекКонтрагент, ТекДоговорКонтрагента);
	КонецЕсли;
	
	// Если капремонт отражается на отдельном счете взаиморасчетов с контрагентами, то
	// в структуру со счетами учета подставим счет, указанный в УП.
	Если СтрокаТЧ.ПризнакКапРем
		 И мНастройкиУчетнойПолитикиТСЖ.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета Тогда
		
		СчетаУчета.СчетРасчетовПокупателя = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		СчетаУчета.СчетАвансовПокупателя  = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		
	КонецЕсли;
	
	// Признак "ЭтоПени" может быть установлен, даже когда пени отражаются на тех же счетах,
	// что и начисления. Так происходит когда в УП установлена настройка отражения пени всегда
	// по ставке НДС "Без НДС" для того, чтобы для пеней создавался отдельный документ отражения.
	// В случае ведения раздельного учета по капремонту в УП для пеней по капремонту
	// есть своя настройка отражения на счетах бух. учета.
	Если СтрокаТЧ.ЭтоПени Тогда
		
		Если (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Не СтрокаТЧ.ПризнакКапРем)
			 Или (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И СтрокаТЧ.ПризнакКапРем) Тогда
			
			СчетаУчетаПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ВидВзаиморасчетов, ?(СтрокаТЧ.ПризнакКапРем, Истина, Ложь));
			
			// Выполним подмену счетов расчетов с контрагентом из РС "Счета учета расчетов по пени".
			// Подмену будем выполнять только если счета заполнены.
			Если Не СчетаУчетаПени.СчетУчетаРасчетов.Пустая() Тогда
				СчетаУчета.СчетРасчетовПокупателя = СчетаУчетаПени.СчетУчетаРасчетов;
			КонецЕсли;
			
			Если Не СчетаУчетаПени.СчетУчетаАвансов.Пустая() Тогда
				СчетаУчета.СчетАвансовПокупателя  = СчетаУчетаПени.СчетУчетаАвансов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняем счета учета услуг в строках ТЧ "Расшифровка начислений".
//
Процедура ЗаполнитьСчетаУчетаУслугТабличнойЧасти() Экспорт
	
	// Важно! Процедура предназначена для заполнения счетов учета в таблице расшифровки
	// при программном заполнении документа. Пока процедура не используется, но может потребоваться.
	
	// Для заполнения счетов учета таблицы расшифровки используется процедура в модуле менеджера документа.
	// Указанная процедура также используется в форме документа при ручном изменении расшифровки начислений.
	 Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда                        //++Петрова до обновления
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	//Используем стандартную процедуру и справочник настроек ++Позолотина
	Если мСтруктураНастроекКапРемонта = Неопределено Тогда
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	КонецЕсли;
    //--Позолотина
	ОтражатьПени = мНастройкиУчетнойПолитикиТСЖ.ОтражатьПениОтдельноОтНачислений;
	
	ВидСчетаУчета = (мНастройкиУчетнойПолитикиТСЖ.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете = 
					Перечисления.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчета);
	мСчетаУчетаНоменклатуры.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из РасшифровкаНачислений Цикл
		СчетаУчета = мСчетаУчетаНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		Если СчетаУчета = Неопределено Тогда
			СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаУчетаНоменклатуры(Организация,
																					СтрокаТабличнойЧасти.Номенклатура);
			мСчетаУчетаНоменклатуры[СтрокаТабличнойЧасти.Номенклатура] = СчетаУчета;
		КонецЕсли;
		
		Если ОтражатьПени И СтрокаТабличнойЧасти.ЭтоПени Тогда
			
			// Если в настройках учетной политики ЖКХ установлено отражение пени отдельно от начислений,
			// то для пени устанавливается счет учета из регистра счетов учета расчетов по пени. 
			
			ТекДоговорКонтрагента          = СтрокаТабличнойЧасти.ДоговорКонтрагента;
			ВидВзаиморасчетов              = ТекДоговорКонтрагента.ВидВзаиморасчетов;
			СтруктураСчетовВзаиморасчета   = ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(ВидВзаиморасчетов);
			СтрокаТабличнойЧасти.СчетУслуг           = СтруктураСчетовВзаиморасчета.СчетУчетаДоходов;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг1 = СтруктураСчетовВзаиморасчета.Субконто1;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг2 = СтруктураСчетовВзаиморасчета.Субконто2;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг3 = СтруктураСчетовВзаиморасчета.Субконто3;
			
		Иначе
			
			Если ВидСчетаУчета Тогда
				СтрокаТабличнойЧасти.СчетУслуг           = СчетаУчета.СчетУчета;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг1 = СчетаУчета.Субконто1;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг2 = СчетаУчета.Субконто2;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг3 = СчетаУчета.Субконто3;
			Иначе
				СтрокаТабличнойЧасти.СчетУслуг   = СчетаУчета.СчетДоходов;
			КонецЕсли;
			//++Позолотина
			Если не мСтруктураНастроекКапРемонта.СписокНоменклатур.НайтиПоЗначению(СтрокаТабличнойЧасти.Номенклатура)= неопределено тогда
				//СтрокаТабличнойЧасти.Номенклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") Тогда
					СтрокаТабличнойЧасти.СчетУслуг   = СчетаУчета.СчетДоходов;
					СтрокаТабличнойЧасти.СубконтоСчетаУслуг1 = СчетаУчета.Субконто1;
					СтрокаТабличнойЧасти.СубконтоСчетаУслуг2 = СтрокаТабличнойЧасти.ЗданиеКапРем;
					СтрокаТабличнойЧасти.СубконтоСчетаУслуг3 = СчетаУчета.Субконто3;

				конецесли;
			//--Позолотина

		КонецЕсли;
		
		ПривестиТипыИЗаполнитьЗначенияСубконто(СтрокаТабличнойЧасти);
		КонецЦикла;                                           //--Петрова до обновления 	
	
	
	//Документы.КВП_ОтражениеНачисленийВРеглУчете.ЗаполнитьСчетаУчетаУслугТабличнойЧасти(Дата, Организация, РасшифровкаНачислений, мНастройкиУчетнойПолитикиТСЖ, мСчетаУчетаНоменклатуры); //++ Позолотина закомментировала
	
КонецПроцедуры // ЗаполнитьСчетаУчетаУслугТабличнойЧасти()

// Помечает на удаление документы отражения начислений.
Процедура ПометитьНаУдалениеДокументОтраженияНачислений(СтрокаТабличнойЧасти, МассивСтрокУдалДокументов) Экспорт
	
	// если не стоит флаг отражения - ничего не делаем
	Если Не СтрокаТабличнойЧасти.Отражать Тогда
		Возврат;
	КонецЕсли;
	
	ТекДокумент = СтрокаТабличнойЧасти.Документ;
	
	// если документ в строке указан и проведен - помечаем на удаление
	Если ЗначениеЗаполнено(ТекДокумент)
		И ТекДокумент.Проведен Тогда
		Попытка
			ДокОбъект = ТекДокумент.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");
			
			// Ищем ТекДокумент во всех строках табличной части Контрагенты.
			// В массив МассивСтрокУдалДокументов добавляем все найденные строки с этим документом.
			СтруктОтбор = Новый Структура();
			СтруктОтбор.Вставить("Документ", ТекДокумент);
			СтрокиКонтрагентов = Контрагенты.НайтиСтроки(СтруктОтбор);
			Если СтрокиКонтрагентов.Количество() > 0 Тогда
				Для Каждого СтрокаТЧ Из СтрокиКонтрагентов Цикл
					МассивСтрокУдалДокументов.Добавить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + СтрокаТабличнойЧасти.НомерСтроки 
															+ " не удалось пометить на удаление документ по причине:"
															+ Символы.ПС + "    " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ПометитьНаУдалениеДокументОтраженияНачислений()

// Добавляет новую строку в табличную часть документа "Реализация товаров и услуг" и заполняет ее необходимыми данными.
//
Процедура ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки)
	
	ДокументОбъект               = СтруктураПараметровСтроки.ДокументОбъект;
	СтрокаРасшифровки            = СтруктураПараметровСтроки.СтрокаРасшифровки;
	текНоменклатура              = СтрокаРасшифровки.Номенклатура;
	СтавкаНДС                    = СтруктураПараметровСтроки.СтавкаНДС;
	СуммаДляОтражения            = СтруктураПараметровСтроки.СуммаДляОтражения;
	ОтражениеПени                = СтруктураПараметровСтроки.ОтражениеПени;
	ТекДоговорКонтрагента	 	 = СтрокаРасшифровки.ДоговорКонтрагента;   //Позолотина
	Если ОтражениеПени Тогда
		СчетаУчета                   = СтруктураПараметровСтроки.СчетаУчета;
		СтруктураСчетовВзаиморасчета = СтруктураПараметровСтроки.СтруктураСчетовВзаиморасчета;
	КонецЕсли;
	
	Если СтрокаРасшифровки.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема Тогда
		НоваяСтрока = ДокументОбъект.АгентскиеУслуги.Добавить();
		АгентскаяСхема = Истина;
	Иначе
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		АгентскаяСхема = Ложь;
	КонецЕсли;
	
	НоваяСтрока.Номенклатура = текНоменклатура;

	//Позолотина++
	Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") 
		 и СтрокаРасшифровки.Этопени = Истина Тогда
		 НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001001");
	 конецЕсли;
	//Позолотина--
	 //   Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00003954") 
	 //    Тогда
	 //    НоваяСтрока.ЗданиеКапРем = СтрокаРасшифровки.Лицевойсчет.Адрес.Владелец;
	 //конецЕсли;

		//++Петрова   дополнительный платеж если пени, то номенклатура 2471
		Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00002160") 
		 и СтрокаРасшифровки.ЭтоПени = Истина Тогда
		 НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00002471");
	 конецЕсли;
	//Петрова--

	НоваяСтрока.СтавкаНДС    = СтавкаНДС;
	//+Позолотина вытаскиваем цену из установки цен номенклатуры и банковский счет для спец счетов на капремонт
	//формируем строку адреса для наименования номенклатуры
	//Используем стандартную процедуру и справочник настроек Позолотина
	Если мСтруктураНастроекКапРемонта = Неопределено Тогда
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	КонецЕсли;
	Если не мСтруктураНастроекКапРемонта.СписокНоменклатур.НайтиПоЗначению(текНоменклатура) = неопределено  тогда
		//текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") или
		//		 текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00001780") Тогда
		//ДокументОбъект.БанковскийСчетОрганизации = Справочники.БанковскиеСчета.НайтиПоНаименованию("40602810325070100016, ОТДЕЛЕНИЕ N8628 СБЕРБАНКА РОССИИ"); //Петрова чтобы выбирался основной счет
		АдресЗдания = " ";
			Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),5)))	тогда
				АдресЗдания = " (" + сокрлп(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),5)) + " д." 
				+ СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),6),"№",""));
				Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),7)))	тогда
					АдресЗдания = АдресЗдания + " " 
					+ СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),7),"корпус","к."));
				КонецЕсли;
			иначе 
				если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),4)))	 тогда
				 	АдресЗдания = "(" + СокрЛП(ЭлементАдреса(Строка(СтрокаРасшифровки.ЗданиеКапРем),4));	
				конецесли;
			конецесли;
			Если не ПустаяСтрока(СокрЛП(АдресЗдания)) тогда
				АдресЗдания = АдресЗдания + ")";
			КонецЕсли;	
		ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + "кап/р по " + АдресЗдания
	   Конецесли;  	
		ТекТипЦенДоговора = ТекДоговорКонтрагента.ТипЦен;
			 Если ТекТипЦенДоговора = Неопределено Тогда
			  		ТекТипЦенДоговора = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000004");
				КонецЕсли;
				Если не мСтруктураНастроекКапРемонта.СписокНоменклатур.НайтиПоЗначению(текНоменклатура) = неопределено тогда
					//текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") Тогда
				ТекТипЦенДоговора = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
				ДокументОбъект.СуммаВключаетНДС    = Истина;
			конецесли;
			
		НоваяСтрока.Количество = СтрокаРасшифровки.Количество;
		Запрос = Новый Запрос;
			Запрос.Текст = 	"ВЫБРАТЬ
			|ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			|ИЗ
			|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
			|где  ТипЦен = &ТекТипЦенДоговора
			|СГРУППИРОВАТЬ ПО
			|ЦеныНоменклатурыСрезПоследних.Цена";
	
			Запрос.УстановитьПараметр("Период", КонецМесяца(Дата));
			Запрос.УстановитьПараметр("Номенклатура", НоваяСтрока.Номенклатура);
	        Запрос.УстановитьПараметр("ТекТипЦенДоговора", ТекТипЦенДоговора);

			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			НоваяСтрока.Цена = ?(Выборка.Цена = Неопределено,СтрокаРасшифровки.Тариф, Выборка.Цена);
			
			НоваяСтрока.Сумма      = СтрокаРасшифровки.СуммаОтражения;
			
			НоваяСтрока.Сумма      = СтрокаРасшифровки.СуммаОтражения;
		НоваяСтрока.СуммаНДС   =  УчетНДСКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
																		СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
	    Если  ДокументОбъект.СуммаВключаетНДС    = Ложь Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма -  НоваяСтрока.СуммаНДС
		КонецЕсли; 
		//--Позолотина 	

	//НоваяСтрока.Количество = 1;         //++петрова 

	//НоваяСтрока.Цена       = СуммаДляОтражения;
	//НоваяСтрока.Сумма      = НоваяСтрока.Цена;
	//НоваяСтрока.СуммаНДС   =  УчетНДСКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
	//																	СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));    //--Петрова
	
	// по акту
	Если мЭтоАкт Тогда
		НоваяСтрока.Спецификация      = текНоменклатура.ОсновнаяСпецификацияНоменклатуры;
		НоваяСтрока.ПлановаяСтоимость = НоваяСтрока.Цена;
		НоваяСтрока.СуммаПлановая     = НоваяСтрока.Сумма;
		НоваяСтрока.СчетЗатрат        = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	
	// по реализации
	Если мЭтоРеализация Тогда
		//Позолотина++
		   НоваяСтрока.ЗданиеКапРем = СтрокаРасшифровки.ЗданиеКапРем;
		   НаименованиеПолное = НоваяСтрока.Номенклатура.НаименованиеПолное;
		   АдресНоменклатуры = СтрокаРасшифровки.ЛицевойСчет.Адрес.Владелец;
		   АдресПомещения = " ";
			Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),5)))	тогда
				Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),4)))	тогда
				    АдресПомещения = " (" + сокрлп(ЭлементАдреса(Строка(АдресНоменклатуры),4)) + ", "
				    +сокрлп(ЭлементАдреса(Строка(АдресНоменклатуры),5)) + " д." 
				    + СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(АдресНоменклатуры),6),"№",""));
				        Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),7)))	тогда
					        АдресПомещения = АдресПомещения + " " 
					        + СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(АдресНоменклатуры),7),"корпус","к."));
						КонецЕсли;
					иначе
					   АдресПомещения = " ("	+сокрлп(ЭлементАдреса(Строка(АдресНоменклатуры),5)) + " д." 
				       + СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(АдресНоменклатуры),6),"№",""));
				           Если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),7)))	тогда
					            АдресПомещения = АдресПомещения + " " 
					            + СокрЛП(СтрЗаменить(ЭлементАдреса(Строка(АдресНоменклатуры),7),"корпус","к."));
						   КонецЕсли;
               КонецЕсли;
			иначе 
				если не ПустаяСтрока(СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),4)))	 тогда
				 	АдресПомещения = "(" + СокрЛП(ЭлементАдреса(Строка(АдресНоменклатуры),4));	
				конецесли;
			конецесли;
			Если не ПустаяСтрока(СокрЛП(АдресПомещения)) тогда
				АдресПомещения = АдресПомещения + ")";
			КонецЕсли;	
		
	Если ПустаяСтрока(НаименованиеПолное) Тогда
				НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование + АдресПомещения;
			Иначе
				НоваяСтрока.Содержание = НаименованиеПолное + АдресПомещения;
			КонецЕсли;
		КонецЕсли;

//Позолотина--	

	//	НаименованиеПолное = текНоменклатура.НаименованиеПолное;        //++Петрова
	//	Если ПустаяСтрока(НаименованиеПолное) Тогда
	//		НоваяСтрока.Содержание = текНоменклатура.Наименование;
	//	Иначе
	//		НоваяСтрока.Содержание = НаименованиеПолное;
	//	КонецЕсли;
	//КонецЕсли;                                               //--Петрова
	
	текДоговорПоставщикаУслуг = СтрокаРасшифровки.ДоговорПоставщикаУслуг;
	текКонтрагентПоДоговору   = текДоговорПоставщикаУслуг.Владелец;
	
	// счета учета номенклатуры
	СчетаУчетаНоменклатуры = мСчетаУчетаНоменклатуры[НоваяСтрока.Номенклатура];
	Если СчетаУчетаНоменклатуры = Неопределено Тогда
			//СчетаУчетаНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, текНоменклатура);  //петрова
            СчетаУчетаНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрока.Номенклатура); //++Позолотина
			
			мСчетаУчетаНоменклатуры[НоваяСтрока.Номенклатура] = СчетаУчетаНоменклатуры;
	КонецЕсли;
	
	Если АгентскаяСхема Тогда
		
		НоваяСтрока.Контрагент         = СтрокаРасшифровки.ДоговорПоставщикаУслуг.Владелец;
		НоваяСтрока.ДоговорКонтрагента = СтрокаРасшифровки.ДоговорПоставщикаУслуг;
		
		СчетаУчетаРасчетов = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация,
																						  текКонтрагентПоДоговору,
																						  текДоговорПоставщикаУслуг);
		НоваяСтрока.СчетРасчетов = СчетаУчетаРасчетов.СчетРасчетовСКомитентом;
		
	Иначе
		
		Если ОтражениеПени Тогда
			НоваяСтрока.СчетДоходов = СтруктураСчетовВзаиморасчета.СчетУчетаДоходов;
			НоваяСтрока.Субконто    = СтруктураСчетовВзаиморасчета.Субконто1;
		Иначе
			НоваяСтрока.СчетДоходов = СчетаУчетаНоменклатуры.СчетДоходов;
		КонецЕсли;
		
		НоваяСтрока.СчетРасходов             = СчетаУчетаНоменклатуры.СчетРасходов;
		//Позолотина +
		//Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") 
		//		Тогда
		//		   Если СтрокаРасшифровки.ВидНачисления = Перечисления.КВП_ВидыНачисления.Пени тогда
		//		    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
		//			иначе 
		//				НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000002");
		//			конецЕсли;
		Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000778") 
				Тогда
				   Если СтрокаРасшифровки.ЭтоПени = Истина тогда
				    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
					иначе 
						НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000002");
					конецЕсли;
			
					ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
					ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
			конецесли;
		 Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00002156")  //Спецсчета проценты 
				Тогда
				   	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000007");
					ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
					ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
		конецесли;

	  //          Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00002160")  //газификация  //++ Петрова
	  //  		Тогда
	  //  		  Если СтрокаРасшифровки.ВидНачисления = Перечисления.КВП_ВидыНачисления.Пени тогда
	  //  		    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
	  //  			иначе 
	  //  				НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000006");
	  //  			конецЕсли;
	  Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00002160")  //газификация  //++ Петрова
				Тогда
				  Если СтрокаРасшифровки.ЭтоПени = Истина тогда
				    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
					иначе 
						НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000006");
					конецЕсли;

				   //	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000006");
					ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
					ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам;
		конецесли;                                                                                                         //-- Петрова

			//Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00001780") 
			//	Тогда
			//	   Если СтрокаРасшифровки.ВидНачисления = Перечисления.КВП_ВидыНачисления.Пени тогда
			//	    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
			//		иначе 
			//			НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000005");
			//	   КонецЕсли; 
			//   конецЕсли;
			   	Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00001780") 
				Тогда
				   Если СтрокаРасшифровки.ЭтоПени = Истина тогда
				    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
					иначе 
						НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000005");
				   КонецЕсли; 
			   конецЕсли;
               	Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00004374") 
				Тогда
				   Если СтрокаРасшифровки.ЭтоПени = Истина тогда
				    	НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000004");
					иначе 
						НоваяСтрока.Субконто = Справочники.НазначениеЦелевыхСредств.НайтиПоКоду("00-000009");
				   КонецЕсли; 
			   конецЕсли;

			 //Позолотина--

		НоваяСтрока.СчетУчетаНДСПоРеализации = СчетаУчетаНоменклатуры.СчетУчетаНДСпродажи;
		Если НЕ НоваяСтрока.СчетДоходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
			И НоваяСтрока.Субконто = Неопределено
			И НоваяСтрока.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			НоваяСтрока.Субконто = Новый(НоваяСтрока.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		///++Позолотина
		//Если Не НоваяСтрока.СчетДоходов.Пустая()
		//	И ТипЗнч(НоваяСтрока.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		//	НоваяСтрока.Субконто = НоменклатурнаяГруппа;
		//КонецЕсли;
		// для 96 определяем вид резерва капремонт
		Если ТипЗнч(НоваяСтрока.Субконто) = Тип("СправочникСсылка.Резервы") Тогда
			Если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000020")
				Тогда
				 НоваяСтрока.Субконто = Справочники.Резервы.НайтиПоКоду("00-000001");
			иначе 	если текНоменклатура =  Справочники.Номенклатура.НайтиПоКоду("00-00000989") Тогда
					 	НоваяСтрока.Субконто = Справочники.Резервы.НайтиПоКоду("00-000005");
					конецЕсли;
		    КонецЕсли;
		КонецЕсли;
		//--Позолотина

		//Если Не НоваяСтрока.СчетДоходов.Пустая()                                 //++Петрова
		//	И ТипЗнч(НоваяСтрока.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		//	НоваяСтрока.Субконто = СтрокаРасшифровки.НоменклатурнаяГруппа;
		//КонецЕсли;                                                                //--Петрова
		
	КонецЕсли;         
	
КонецПроцедуры

// Формирует строку, содержащую номера строк табличной части документа "Отражение начислений в регл. учете",
// для которых не удалось сформировать документы отражения.
//
// Параметры:
// НомераСтрокДетальныхЗаписей - Массив - Список номеров строк для вывода сообщений об ошибках.
//
Функция СформироватьПредставлениеСтрок(НомераСтрокДетальныхЗаписей)
	
	ПредставлениеСтрок = "";
	Для Каждого ТекНомерСтрокиДетальныхЗаписей Из НомераСтрокДетальныхЗаписей Цикл
		ПредставлениеСтрок = ПредставлениеСтрок + ТекНомерСтрокиДетальныхЗаписей + ", ";
	КонецЦикла;
	ПредставлениеСтрок = Лев(ПредставлениеСтрок, СтрДлина(ПредставлениеСтрок) - 2);
	
	Возврат ПредставлениеСтрок;
	
КонецФункции

// Возвращает массив услуг, для которых не задана номенклатура.
//
Функция ПолучитьМассивУслугБезНоменклатуры()
	
	МассивУслугБезНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Услуга
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.НачисленияКОтражению КАК КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению
	|ГДЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Ссылка = &Ссылка
	|	И КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Отражать
	|	И КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Услуга.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		МассивУслугБезНоменклатуры.Добавить(ВыборкаЗапроса.Услуга);
	КонецЦикла;
	
	Возврат МассивУслугБезНоменклатуры;
	
КонецФункции

// Возвращает массив найденных строк в табличной части "Контрагенты" по заданной структуре отбора.
//
Функция НайтиСтрокиВТаблицеКонтрагенты(СтрокаТабличнойЧасти, ОтражениеПени)
	
	Если ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
		СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ПризнакКапРем," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени, ВариантПоставкиУслуг");
		СтруктураОтбора.ВариантПоставкиУслуг = СтрокаТабличнойЧасти.ВариантПоставкиУслуг;
	Иначе
		СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ПризнакКапРем," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени");
	КонецЕсли;
	
	СтруктураОтбора.Отражать = Истина;
	
	Если ОтражениеПени Тогда
		СтруктураОтбора.ЭтоПени = Истина;
	Иначе
		СтруктураОтбора.ЭтоЛьгота = Ложь;
		СтруктураОтбора.ЭтоПени   = Ложь;
	КонецЕсли;
	
	СтруктураОтбора.Контрагент           = СтрокаТабличнойЧасти.Контрагент;
	СтруктураОтбора.ДоговорКонтрагента   = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	СтруктураОтбора.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
	СтруктураОтбора.ПризнакКапРем         = СтрокаТабличнойЧасти.ПризнакКапРем;
	
	Возврат Контрагенты.НайтиСтроки(СтруктураОтбора);
	
КонецФункции

#КонецОбласти


#Область СтарыйМеханизмОтражения

// Заполняет флаги типов документов согласно выбранному типу.
Процедура ОпределитьФлагиТипаДокументов(СтрокаТабличнойЧасти = Неопределено) Экспорт
	
	мЭтоАкт        = Ложь;
	мЭтоРеализация = Ложь;
	
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		Документ = СтрокаТабличнойЧасти.Документ;
	КонецЕсли;
	
	Если Документ = Неопределено Тогда
		Если ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
			мЭтоАкт        = Истина;
		КонецЕсли;
		Если ТипДокументаОтражения = "Реализация товаров и услуг" Тогда
			мЭтоРеализация = Истина;
		КонецЕсли;
		
	Иначе
		тмТипДокумента = ТипЗнч(Документ);
		Если тмТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			мЭтоАкт        = Истина;
		КонецЕсли;
		Если тмТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			мЭтоРеализация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьФлагиТипаДокументов()

// Проверяет, нужно ли изменять тип докуиента отражения.
Процедура ПроверитьНеобходимостьИзмененияТипаФормируемогоДокумента(СтрокаТабличнойЧасти, СтрокиРасшифровки)
	
	// При отражении начислений по агентской схеме всегда создаются документы реализации товаров и услуг.
	Если ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И СтрокаТабличнойЧасти.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема Тогда
			ИзменитьТипДокумента(Истина);
	КонецЕсли;
		
	// При отражении отрицательных начислений начислений всегда создаются документы реализации товаров и услуг.
	Если ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
		Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			Если СтрокаРасшифровки.СуммаОтражения < 0 Тогда
				ИзменитьТипДокумента(Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНеобходимостьИзмененияТипаФормируемогоДокумента()

// Формирует массив строк расшифровки начислений по указанной строке контрагента.
//
// Параметры:
//  СтрокаТабличнойЧасти - обрабатываемая строка.
//
// Возвращаемое значение:
//  Массив – массив искомых строк.
//
Функция ПолучитьСтрокиРасшифровкиНачислений(СтрокаТабличнойЧасти, ОтборБезВариантаПоставкиУслуг = Ложь)
	
	СтруктОтбор = Новый Структура();
	
	Если НЕ ОтборБезВариантаПоставкиУслуг Тогда
		СтруктОтбор.Вставить("ВариантПоставкиУслуг", СтрокаТабличнойЧасти.ВариантПоставкиУслуг);
	КонецЕсли;
	
	СтруктОтбор.Вставить("ДоговорКонтрагента",   СтрокаТабличнойЧасти.ДоговорКонтрагента);
	//СтруктОтбор.Вставить("НоменклатурнаяГруппа", СтрокаТабличнойЧасти.НоменклатурнаяГруппа);      //Петрова
	СтруктОтбор.Вставить("ЭтоЛьгота",            СтрокаТабличнойЧасти.ЭтоЛьгота); 
	//СтруктОтбор.Вставить("ЭтоПени",              СтрокаТабличнойЧасти.ЭтоПени);
     //+Позолотина
	//СтруктОтбор.Вставить("ЭтоПени",              СтрокаТабличнойЧасти.ЭтоПени);  //егор
	//СтруктОтбор.Вставить("НоменклатурнаяГруппа", СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
	если  значениезаполнено(СтрокаТабличнойЧасти.ПризнакКапРем) тогда
		  СтруктОтбор.Вставить("ПризнакКапРем",            СтрокаТабличнойЧасти.ПризнакКапРем);
	  конецесли;
	если  значениезаполнено(СтрокаТабличнойЧасти.ПризнакБлаг) тогда
		  СтруктОтбор.Вставить("ПризнакБлаг",            СтрокаТабличнойЧасти.ПризнакБлаг);
	  конецесли;  
	//Позолотина --
	
	Возврат РасшифровкаНачислений.НайтиСтроки(СтруктОтбор);

	
КонецФункции // ПолучитьСтрокиРасшифровкиНачислений()

// Подсчитывает сумму отражения для указанной строки контрагента.
//
// Параметры:
//  СтрокаТабличнойЧасти - обрабатываемая строка.
//
// Возвращаемое значение:
//  Число – сумма отражения для указанной строки.
//
Функция ПолучитьСуммуОтраженияСтрокиКонтрагента(СтрокаТабличнойЧасти) Экспорт
	
	ТекСумма = 0;
	
	СтрокиРасшифровки = ПолучитьСтрокиРасшифровкиНачислений(СтрокаТабличнойЧасти);
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		ТекСумма = ТекСумма + СтрокаРасшифровки.СуммаОтражения;
	КонецЦикла;
	
	Возврат ТекСумма;
	
КонецФункции // ПолучитьСуммуОтраженияСтрокиКонтрагента()

// Определяет, есть ли документ отражения для указанной строки расшифровки.
//
// Параметры:
//  СтрокаРасшифровки – строка таблицы расшифровки начислений.
//
// Возвращаемое значение:
//  Булево – есть ли документ.
//
Функция ЕстьДокументДляСтрокиРасшифровки(СтрокаРасшифровки)
	
	СтруктОтбор = Новый Структура();
	
	СтруктОтбор.Вставить("ВариантПоставкиУслуг", СтрокаРасшифровки.ВариантПоставкиУслуг);
	СтруктОтбор.Вставить("ДоговорКонтрагента",   СтрокаРасшифровки.ДоговорКонтрагента);
	//СтруктОтбор.Вставить("НоменклатурнаяГруппа", СтрокаРасшифровки.НоменклатурнаяГруппа);   //Позолотина
	СтруктОтбор.Вставить("ЭтоЛьгота",            СтрокаРасшифровки.ЭтоЛьгота);
	СтруктОтбор.Вставить("ЭтоПени",              СтрокаРасшифровки.ЭтоПени);
	//+Позолотина
	если  значениезаполнено(СтрокаРасшифровки.ПризнакКапРем) тогда
		  СтруктОтбор.Вставить("ПризнакКапРем",   СтрокаРасшифровки.ПризнакКапРем);
	  конецесли;
	  если  значениезаполнено(СтрокаРасшифровки.ПризнакБлаг) тогда
		  СтруктОтбор.Вставить("ПризнакБлаг",  СтрокаРасшифровки.ПризнакБлаг);
		конецесли;

	//Позолотина --

	СтрокиКонтрагентов = Контрагенты.НайтиСтроки(СтруктОтбор);
	
	Если СтрокиКонтрагентов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаКонтрагентов = СтрокиКонтрагентов.Получить(0);
	
	Возврат ЗначениеЗаполнено(СтрокаКонтрагентов.Документ) И СтрокаКонтрагентов.Документ.Проведен;

	
КонецФункции // ЕстьДокументДляСтрокиРасшифровки()

// Заполняет табличную часть.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьТабличнуюЧастьОтражениеНачисленийСтарыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	//// Получим актуальную таблицу отражения начислений для обновления данных            //++Петрова обновление 51.2
	//// в табличных частях Контрагенты и Расшифровка начислений.
	//ТаблицаНачислений = ПолучитьТаблицуОтражениеНачислений();
	//
	//КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();
	//
	//// В случае, если для какой-то услуги не выбрана связанная номенклатура, сообщим об этом пользователю
	//// и удалим строку с начислениями по данной услуги из таблицы начислений.
	//Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
	//	ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
	//	Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрагент: " 
	//														 + Строка(ТекСтрока.Контрагент) 
	//														 + ". Сумма для отражения: " 
	//														 + Строка(ТекСтрока.СуммаОтражения) 
	//														 + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
	//		ТаблицаНачислений.Удалить(ТекСтрока);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// Сформируем данные из актуальной таблицы начислений для загрузки в табличные части документа.
	//ТаблицаНачислений.Сортировать("Контрагент");
	//РасшифровкаНачислений.Загрузить(ТаблицаНачислений);
	//
	//ТаблицаНачислений.Свернуть("Контрагент,ДоговорКонтрагента,ВариантПоставкиУслуг,НоменклатурнаяГруппа,ЭтоЛьгота,ЭтоПени", "");
	//ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
	//ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");
	//
	//// Обновим содержимое табличной части Контрагенты без удаления актуальных текущих данных (с сохранением ссылок
	//// на сформированные типовые документы отражения начислений), либо полностью перезаполним ее, в зависимости от
	//// параметра "ОбновитьСодержаниеТабличнойЧасти".
	//Если ОбновитьСодержаниеТабличнойЧасти Тогда
	//	
	//	// Обновим содержимое табличной части.
	//	МассивСтрокНаУдаление = Новый Массив;
	//	
	//	Для каждого ТекущаяСтрокаКонтрагенты Из Контрагенты Цикл
	//		
	//		СтруктураПроверки = Новый Структура;
	//		
	//		СтруктураПроверки.Вставить("Контрагент",           ТекущаяСтрокаКонтрагенты.Контрагент);
	//		СтруктураПроверки.Вставить("ДоговорКонтрагента",   ТекущаяСтрокаКонтрагенты.ДоговорКонтрагента);
	//		СтруктураПроверки.Вставить("ВариантПоставкиУслуг", ТекущаяСтрокаКонтрагенты.ВариантПоставкиУслуг);
	//		СтруктураПроверки.Вставить("НоменклатурнаяГруппа", ТекущаяСтрокаКонтрагенты.НоменклатурнаяГруппа);
	//		СтруктураПроверки.Вставить("ЭтоЛьгота",            ТекущаяСтрокаКонтрагенты.ЭтоЛьгота);
	//		СтруктураПроверки.Вставить("ЭтоПени",              ТекущаяСтрокаКонтрагенты.ЭтоПени);
	//		
	//		// Проверим, есть ли данные текущей строки табличной части Контрагенты в новом варианте таблицы начислений.
	//		МассивСовпадающихСтрок = ТаблицаНачислений.НайтиСтроки(СтруктураПроверки);
	//		
	//		// Если в таблице начислений не обнаружено совпадающих строк, значит данного начисления больше нет,
	//		// в таком случае, необходимо удалить текущую строку. В противном случае, оставляем содержимое строки табличной части
	//		// Контрагенты без изменения (в ней обновится лишь сумма начисления), и удаляем строку из массива совпадающих документов.
	//		Если МассивСовпадающихСтрок.Количество() = 0 Тогда
	//			
	//			// Пометим типовой документ на удаление и удалим текущую строку.
	//			ТекДокумент = ТекущаяСтрокаКонтрагенты.Документ;
	//			
	//			// Если документ в строке указан и не помечен на удаление - помечаем его на удаление.
	//			Если ЗначениеЗаполнено(ТекДокумент)
	//				И Не ТекДокумент.ПометкаУдаления Тогда
	//				
	//				Попытка
	//					
	//					ДокОбъект = ТекДокумент.ПолучитьОбъект();
	//					ДокОбъект.УстановитьПометкуУдаления(Истина);
	//					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");
	//					
	//				Исключение
	//					
	//					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекущаяСтрокаКонтрагенты.НомерСтроки 
	//					+ " не удалось пометить на удаление документ по причине:"
	//					+ Символы.ПС + "    " + ОписаниеОшибки());
	//					
	//					Продолжить;
	//					
	//				КонецПопытки;
	//				
	//			КонецЕсли;
	//			
	//			МассивСтрокНаУдаление.Добавить(ТекущаяСтрокаКонтрагенты);
	//			
	//		Иначе
	//			
	//			// Если полученная строка находится и в табличной части и в актуальной таблице начислений,
	//			// в таком случае удаляем ее из таблицы начислений и оставляем содержание табличной части.
	//			// Суммы начислений актуализируются в дальнейшем из таблицы Расшифровка начислений.
	//			Для каждого СовпадающаяСтрока Из МассивСовпадающихСтрок Цикл
	//				ТаблицаНачислений.Удалить(СовпадающаяСтрока);
	//			КонецЦикла; 
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	// Очистим строки, которых нет в актуальной таблице начислений.
	//	Для каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
	//		Контрагенты.Удалить(СтрокаНаУдаление);
	//	КонецЦикла;
	//	
	//	// Если остались строки в таблице начислений, значит они новые и их не было в ТЧ "Контрагенты",
	//	// добавим их в табличную часть.
	//	Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
	//		ЗаполнитьЗначенияСвойств(Контрагенты.Добавить(), СтрокаТаблицыНачислений);
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	// Перезаполним табличную часть.
	//	Контрагенты.Загрузить(ТаблицаНачислений);
	//	
	//КонецЕсли;                                        //--Петрова обновление 51.2
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстДопУсловия = "ИСТИНА";
	
	//Если ЗначениеЗаполнено(Контрагент) Тогда                                           //++Петрова
	//	Если Контрагент.ЭтоГруппа Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ (&Контрагент)";
	//	Иначе
	//		ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец = &Контрагент";
	//	КонецЕсли;
	//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Номенклатура) Тогда
	//	Если Номенклатура.ЭтоГруппа Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура В ИЕРАРХИИ (&Номенклатура)";
	//	Иначе
	//		ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура = &Номенклатура";
	//	КонецЕсли;
	//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
	//	Если НоменклатурнаяГруппа.ЭтоГруппа Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)";
	//	Иначе
	//		ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	//	КонецЕсли;
	//	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Взаиморасчеты) Тогда
	//	Если Взаиморасчеты = 1 Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И НЕ ЭтоЛьгота И НЕ ЭтоПени";
	//	ИначеЕсли Взаиморасчеты = 2 Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И ЭтоЛьгота";
	//	ИначеЕсли Взаиморасчеты = 3 Тогда
	//		ТекстДопУсловия = ТекстДопУсловия + " И ЭтоПени";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
	//|ПОМЕСТИТЬ ТаблицаОстатков
	//|ИЗ
	//|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
	//|			&ДатаСреза,
	//|			Организация = &Организация
	//|				И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ДвиженияДокумента.ДоговорКонтрагента.Владелец КАК Контрагент,
	//|	ДвиженияДокумента.ДоговорКонтрагента,
	//|	ДвиженияДокумента.Номенклатура,
	//|	ДвиженияДокумента.НоменклатурнаяГруппа,
	//|	ДвиженияДокумента.ЭтоЛьгота,
	//|	ДвиженияДокумента.ЭтоПени,
	//|	ДвиженияДокумента.ВариантПоставкиУслуг,
	//|	ДвиженияДокумента.ДоговорПоставщикаУслуг,
	//|	СУММА(ДвиженияДокумента.Сумма) КАК СуммаОтражения
	//|ПОМЕСТИТЬ ТаблицаДвиженийДокумента
	//|ИЗ
	//|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете КАК ДвиженияДокумента
	//|ГДЕ
	//|	ДвиженияДокумента.Регистратор = &ДокСсылка
	//|	И &ТекстДопУсловия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДвиженияДокумента.ДоговорКонтрагента.Владелец,
	//|	ДвиженияДокумента.ДоговорКонтрагента,
	//|	ДвиженияДокумента.Номенклатура,
	//|	ДвиженияДокумента.НоменклатурнаяГруппа,
	//|	ДвиженияДокумента.ЭтоЛьгота,
	//|	ДвиженияДокумента.ЭтоПени,
	//|	ДвиженияДокумента.ВариантПоставкиУслуг,
	//|	ДвиженияДокумента.ДоговорПоставщикаУслуг
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ТаблицаОстатков.Контрагент, ТаблицаДвиженийДокумента.Контрагент) КАК Контрагент,
	//|	ЕСТЬNULL(ТаблицаОстатков.ДоговорКонтрагента, ТаблицаДвиженийДокумента.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	//|	ЕСТЬNULL(ТаблицаОстатков.Номенклатура, ТаблицаДвиженийДокумента.Номенклатура) КАК Номенклатура,
	//|	ЕСТЬNULL(ТаблицаОстатков.НоменклатурнаяГруппа, ТаблицаДвиженийДокумента.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	//|	ЕСТЬNULL(ТаблицаОстатков.ЭтоЛьгота, ТаблицаДвиженийДокумента.ЭтоЛьгота) КАК ЭтоЛьгота,
	//|	ЕСТЬNULL(ТаблицаОстатков.ЭтоПени, ТаблицаДвиженийДокумента.ЭтоПени) КАК ЭтоПени,
	//|	ЕСТЬNULL(ТаблицаОстатков.ВариантПоставкиУслуг, ТаблицаДвиженийДокумента.ВариантПоставкиУслуг) КАК ВариантПоставкиУслуг,
	//|	ЕСТЬNULL(ТаблицаОстатков.ДоговорПоставщикаУслуг, ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг) КАК ДоговорПоставщикаУслуг,
	//|	ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) КАК СуммаОтражения
	//|ИЗ
	//|	ТаблицаОстатков КАК ТаблицаОстатков
	//|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаДвиженийДокумента КАК ТаблицаДвиженийДокумента
	//|		ПО (ТаблицаДвиженийДокумента.Контрагент = ТаблицаОстатков.Контрагент)
	//|			И (ТаблицаДвиженийДокумента.ДоговорКонтрагента = ТаблицаОстатков.ДоговорКонтрагента)
	//|			И (ТаблицаДвиженийДокумента.Номенклатура = ТаблицаОстатков.Номенклатура)
	//|			И (ТаблицаДвиженийДокумента.НоменклатурнаяГруппа = ТаблицаОстатков.НоменклатурнаяГруппа)
	//|			И (ТаблицаДвиженийДокумента.ЭтоЛьгота = ТаблицаОстатков.ЭтоЛьгота)
	//|			И (ТаблицаДвиженийДокумента.ЭтоПени = ТаблицаОстатков.ЭтоПени)
	//|			И (ТаблицаДвиженийДокумента.ВариантПоставкиУслуг = ТаблицаОстатков.ВариантПоставкиУслуг)
	//|			И (ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг = ТаблицаОстатков.ДоговорПоставщикаУслуг)
	//|ГДЕ
	//|	&УсловиеОтрицательныхСумм";
	//
	//УсловиеОтрицательныхСумм = "ИСТИНА";
	//
	//Если НЕ ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
	//	// Отражать начисления по договорам с видом "Прочее" типовыми документами нельзя - 
	//	// это ограничение типовых документов.
	//	ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	//	
	//	Если НЕ мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
	//		
	//		УсловиеОтрицательныхСумм = УсловиеОтрицательныхСумм + "
	//		|	И ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) > 0";
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстДопУсловия", ТекстДопУсловия);
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтрицательныхСумм", УсловиеОтрицательныхСумм);
	//
	//ДатаСреза = Новый Граница(КонецДня(ЭтотОбъект.Дата), ВидГраницы.Включая);
	//Запрос.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("ДокСсылка",   Ссылка);
	//
	//ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	//
	//КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();
	//Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
	//	ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
	//	Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрагент: " 
	//														 + Строка(ТекСтрока.Контрагент) 
	//														 + ". Сумма для отражения: " 
	//														 + Строка(ТекСтрока.СуммаОтражения) 
	//														 + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
	//		ТаблицаНачислений.Удалить(ТекСтрока);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// Сортировка для правильного отображения на форме.
	//ТаблицаНачислений.Сортировать("Контрагент");
	//РасшифровкаНачислений.Загрузить(ТаблицаНачислений);
	//
	//ТаблицаНачислений.Свернуть("Контрагент,ДоговорКонтрагента,ВариантПоставкиУслуг,НоменклатурнаяГруппа,ЭтоЛьгота,ЭтоПени", "");
	//ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
	//ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");
	//Контрагенты.Загрузить(ТаблицаНачислений);               //--Петрова
		//++Позолотина

	ДопУсловия2 = "";
	ДопУсловия3 = "";
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если Контрагент.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ (&Контрагент)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец = &Контрагент";
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если Номенклатура.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура В ИЕРАРХИИ (&Номенклатура)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура = &Номенклатура";
		КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Если НоменклатурнаяГруппа.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
		КонецЕсли;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Взаиморасчеты) Тогда
		Если Взаиморасчеты = 1 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И НЕ ЭтоЛьгота И НЕ ЭтоПени";
		ИначеЕсли Взаиморасчеты = 2 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ЭтоЛьгота";
		ИначеЕсли Взаиморасчеты = 3 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ЭтоПени";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Договор) Тогда
		Если Договор.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента В ИЕРАРХИИ (&Договор)";
		Иначе
			ТекстДопУсловия= ТекстДопУсловия + " И ДоговорКонтрагента =&Договор";
		КонецЕсли;
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;

	Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
		Если ЛицевойСчет.ЭтоГруппа Тогда
			ДопУсловия2 = ДопУсловия2 + " И УПЖКХ_Начисления.ЛицевойСчет В ИЕРАРХИИ (&ЛицевойСчет)";
		Иначе
			ДопУсловия2= ДопУсловия2 + " И УПЖКХ_Начисления.ЛицевойСчет =&ЛицевойСчет";
		КонецЕсли;
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	КонецЕсли;
		
	Запрос.Текст =
//	////"ВЫБРАТЬ                                                     //Позолотина
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг,
//	//|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
//	//|ИЗ
//	//|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
//	//|			&ДатаСреза,
//	//|			Организация = &Организация
//	//|				И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки";
//	"ВЫБРАТЬ
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура КАК Номенклатура,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени КАК ЭтоПени,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота КАК ЭтоЛьгота, 
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
//	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
//	|	НачисленияНаЛицСчета.Тариф КАК Тариф,
//	|	НачисленияНаЛицСчета.ЛицевойСчет КАК ЛицевойСчет,
//	|	НачисленияНаЛицСчета.Здание КАК ЗданиеКапРем,
//	|	НачисленияНаЛицСчета.ПризнакКапРем КАК ПризнакКапРем,
//	|   НачисленияНаЛицСчета.ВидНачисления как ВидНачисления,
//	|СУММА(НачисленияНаЛицСчета.Количество) КАК Количество,
//	|СУММА(НачисленияНаЛицСчета.СуммаНачисления) КАК СуммаОтражения
//|ИЗ
//|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Обороты(&ДатаСрезаНач, &ДатаСрезаКон, Регистратор, Организация = &Организация
//|          И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОбороты
//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//|			КОНЕЦПЕРИОДА(КВП_НачисленияПоЛицевымСчетам.Период, МЕСЯЦ) КАК Период,
//|			КВП_НачисленияПоЛицевымСчетам.Организация КАК Организация,
//|			КВП_НачисленияПоЛицевымСчетам.Договор КАК Договор,
//|			КВП_НачисленияПоЛицевымСчетам.Услуга.Услуга КАК Услуга,
//|			КВП_НачисленияПоЛицевымСчетам.Регистратор КАК Регистратор,
//|			КВП_НачисленияПоЛицевымСчетам.ВидНачисления КАК ВидНачисления,
//|			КВП_НачисленияПоЛицевымСчетам.Тариф КАК Тариф,
//|			КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
//|			ВЫБОР
//|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
//|					ТОГДА КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец
//|				ИНАЧЕ &ЗданиеЮрЛица
//|			КОНЕЦ КАК Здание,
//|			ВЫБОР
//|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
//|					ТОГДА Истина
//|				ИНАЧЕ Ложь
//|			КОНЕЦ КАК ПризнакКапРем,
//|			СУММА(КВП_НачисленияПоЛицевымСчетам.Количество) КАК Количество,
//|			СУММА(КВП_НачисленияПоЛицевымСчетам.СуммаНачисления) КАК СуммаНачисления
//|		ИЗ
//|			РегистрНакопления.КВП_НачисленияПоЛицевымСчетам КАК КВП_НачисленияПоЛицевымСчетам
//|		ГДЕ
//|			КВП_НачисленияПоЛицевымСчетам.Период >= &ДатаСрезаНач
//|			И КВП_НачисленияПоЛицевымСчетам.Период <= &ДатаСрезаКон
//|			И не КВП_НачисленияПоЛицевымСчетам.ВидНачисления = значение(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
//|			И не КВП_НачисленияПоЛицевымСчетам.ВидНачисления = значение(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
//|			И КВП_НачисленияПоЛицевымСчетам.Организация = &Организация
//|           &ДопУсловия2
//|		
//|		СГРУППИРОВАТЬ ПО
//|			КОНЕЦПЕРИОДА(КВП_НачисленияПоЛицевымСчетам.Период, МЕСЯЦ),
//|			КВП_НачисленияПоЛицевымСчетам.Организация,
//|			КВП_НачисленияПоЛицевымСчетам.Договор,
//|			КВП_НачисленияПоЛицевымСчетам.Услуга.Услуга,
//|			КВП_НачисленияПоЛицевымСчетам.Регистратор,
//|			КВП_НачисленияПоЛицевымСчетам.ВидНачисления,
//|			КВП_НачисленияПоЛицевымСчетам.Тариф,
//|			КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет,
//|			ВЫБОР
//|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
//|					ТОГДА КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец
//|				ИНАЧЕ &ЗданиеЮрЛица
//|			КОНЕЦ,
//|			ВЫБОР
//|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
//|					ТОГДА Истина
//|				ИНАЧЕ Ложь
//|			КОНЕЦ) КАК НачисленияНаЛицСчета
//|		ПО (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Организация = НачисленияНаЛицСчета.Организация)
//|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента = НачисленияНаЛицСчета.Договор)
//|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура = НачисленияНаЛицСчета.Услуга)
//|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Регистратор = НачисленияНаЛицСчета.Регистратор)";
////Позолотина
//                                                                                              //петрова
////"ВЫБРАТЬ                                                                                                    
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура КАК Номенклатура,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени КАК ЭтоПени,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота КАК ЭтоЛьгота, 
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
////	|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
////	|	НачисленияНаЛицСчета.Тариф КАК Тариф,
////	|	НачисленияНаЛицСчета.ЛицевойСчет КАК ЛицевойСчет,
////	|	НачисленияНаЛицСчета.Здание КАК ЗданиеКапРем,
////	|	НачисленияНаЛицСчета.ПризнакКапРем КАК ПризнакКапРем,
////	|   НачисленияНаЛицСчета.ВидНачисления как ВидНачисления,
////	|СУММА(НачисленияНаЛицСчета.Количество) КАК Количество,
////	|СУММА(НачисленияНаЛицСчета.СуммаНачисления) КАК СуммаОтражения
////|ИЗ
////|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Обороты(&ДатаСрезаНач, &ДатаСрезаКон, Регистратор, Организация = &Организация
////|          И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОбороты
////|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
////|			КОНЕЦПЕРИОДА(КВП_НачисленияПоЛицевымСчетам.Период, МЕСЯЦ) КАК Период,
////|			КВП_НачисленияПоЛицевымСчетам.Организация КАК Организация,
////|			КВП_НачисленияПоЛицевымСчетам.Договор КАК Договор,
////|			КВП_НачисленияПоЛицевымСчетам.Услуга.Услуга КАК Услуга,
////|			КВП_НачисленияПоЛицевымСчетам.Регистратор КАК Регистратор,
////|				ВЫБОР
////|		    КОГДА КВП_НачисленияПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
////|			    ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.НачислениеУслуг)
////|		        ИНАЧЕ КВП_НачисленияПоЛицевымСчетам.ВидНачисления
////|	        КОНЕЦ КАК ВидНачисления,
////|			КВП_НачисленияПоЛицевымСчетам.Тариф КАК Тариф,
////|			КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
////|			ВЫБОР
////|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
////|					ТОГДА КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец
////|				ИНАЧЕ &ЗданиеЮрЛица
////|			КОНЕЦ КАК Здание,
////|			ВЫБОР
////|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
////|					ТОГДА Истина
////|				ИНАЧЕ Ложь
////|			КОНЕЦ КАК ПризнакКапРем,
////|			СУММА(ВЫБОР
////|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
////|					И КВП_НачисленияПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
////|				ТОГДА -КВП_НачисленияПоЛицевымСчетам.Количество
////|			ИНАЧЕ КВП_НачисленияПоЛицевымСчетам.Количество
////|		КОНЕЦ) КАК Количество,
////|			СУММА(КВП_НачисленияПоЛицевымСчетам.СуммаНачисления) КАК СуммаНачисления
////|		ИЗ
////|			РегистрНакопления.КВП_НачисленияПоЛицевымСчетам КАК КВП_НачисленияПоЛицевымСчетам
////|          ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
////|		ПО (КВП_НачисленияПоЛицевымСчетам.Организация = УПЖКХ_Начисления.Организация)
////|			И (КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет = УПЖКХ_Начисления.ЛицевойСчет)
////|			И (КВП_НачисленияПоЛицевымСчетам.Договор = УПЖКХ_Начисления.Договор)
////|			И (КВП_НачисленияПоЛицевымСчетам.Услуга = УПЖКХ_Начисления.Услуга)
////|			И (КВП_НачисленияПоЛицевымСчетам.МесяцНачисления = УПЖКХ_Начисления.МесяцНачисления)
////|			И (КВП_НачисленияПоЛицевымСчетам.Период = УПЖКХ_Начисления.Период)
////|			И (УПЖКХ_Начисления.Регистратор = КВП_НачисленияПоЛицевымСчетам.Регистратор)
////|
////|		ГДЕ
////|			КВП_НачисленияПоЛицевымСчетам.Период >= &ДатаСрезаНач
////|			И КВП_НачисленияПоЛицевымСчетам.Период <= &ДатаСрезаКон
////|			И (КВП_НачисленияПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
////|				И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
////|			ИЛИ НЕ КВП_НачисленияПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений))
////|			И не КВП_НачисленияПоЛицевымСчетам.ВидНачисления = значение(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
////|			И КВП_НачисленияПоЛицевымСчетам.Организация = &Организация
////|           И УПЖКХ_Начисления.Период МЕЖДУ &ДатаСрезаНач И &ДатаСрезаКон
////|           &ДопУсловия2
////|		
////|		СГРУППИРОВАТЬ ПО
////|			КОНЕЦПЕРИОДА(КВП_НачисленияПоЛицевымСчетам.Период, МЕСЯЦ),
////|			КВП_НачисленияПоЛицевымСчетам.Организация,
////|			КВП_НачисленияПоЛицевымСчетам.Договор,
////|			КВП_НачисленияПоЛицевымСчетам.Услуга.Услуга,
////|			КВП_НачисленияПоЛицевымСчетам.Регистратор,
////|			КВП_НачисленияПоЛицевымСчетам.ВидНачисления,
////|			КВП_НачисленияПоЛицевымСчетам.Тариф,
////|			КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет,
////|			ВЫБОР
////|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
////|					ТОГДА КВП_НачисленияПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец
////|				ИНАЧЕ &ЗданиеЮрЛица
////|			КОНЕЦ,
////|			ВЫБОР
////|				КОГДА КВП_НачисленияПоЛицевымСчетам.Услуга в (&Капремонт) 
////|					ТОГДА Истина
////|				ИНАЧЕ Ложь
////|			КОНЕЦ) КАК НачисленияНаЛицСчета
////|		ПО (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Организация = НачисленияНаЛицСчета.Организация)
////|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента = НачисленияНаЛицСчета.Договор)
////|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура = НачисленияНаЛицСчета.Услуга)
////|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Регистратор = НачисленияНаЛицСчета.Регистратор)";
////Петрова   для благ
//"ВЫБРАТЬ
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура КАК Номенклатура,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени КАК ЭтоПени,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота КАК ЭтоЛьгота,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
//|	НачисленияНаЛицСчета.Тариф КАК Тариф,
//|	НачисленияНаЛицСчета.ЛицевойСчет КАК ЛицевойСчет,
//|	НачисленияНаЛицСчета.Здание КАК ЗданиеКапРем,
//|	НачисленияНаЛицСчета.ПризнакКапРем КАК ПризнакКапРем,
//|	НачисленияНаЛицСчета.ВидНачисления КАК ВидНачисления,
//|	СУММА(НачисленияНаЛицСчета.Количество) КАК Количество,
//|	СУММА(НачисленияНаЛицСчета.СуммаНачисления) КАК СуммаОтражения
//|ИЗ
//|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Обороты(&ДатаСрезаНач, &ДатаСрезаКон, Регистратор, Организация = &Организация 	И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОбороты
//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//|			КОНЕЦПЕРИОДА(УПЖКХ_Начисления.Период, МЕСЯЦ) КАК Период,
//|			УПЖКХ_Начисления.Организация КАК Организация,
//|			УПЖКХ_Начисления.Договор КАК Договор,
//|			УПЖКХ_Начисления.Услуга.Услуга КАК Услуга,
//|			УПЖКХ_Начисления.Регистратор КАК Регистратор,
//|			УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
//|			УПЖКХ_Начисления.Тариф КАК Тариф,
//|			УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
//|			ВЫБОР
//|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
//|					ТОГДА УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец
//|				ИНАЧЕ &ЗданиеЮрЛица
//|			КОНЕЦ КАК Здание,
//|			ВЫБОР
//|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
//|					ТОГДА ИСТИНА
//|				ИНАЧЕ ЛОЖЬ
//|			КОНЕЦ КАК ПризнакКапРем,
//|			СУММА(УПЖКХ_Начисления.Количество) КАК Количество,
//|			СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК СуммаНачисления
//|		ИЗ
//|			РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
//|		ГДЕ
//|			УПЖКХ_Начисления.Период >= &ДатаСрезаНач
//|			И УПЖКХ_Начисления.Период <= &ДатаСрезаКон
//|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
//|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
//|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
//|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
//|			И УПЖКХ_Начисления.Организация = &Организация
//|		    &ДопУсловия2

//|		СГРУППИРОВАТЬ ПО
//|			КОНЕЦПЕРИОДА(УПЖКХ_Начисления.Период, МЕСЯЦ),
//|			УПЖКХ_Начисления.Организация,
//|			УПЖКХ_Начисления.Договор,
//|			УПЖКХ_Начисления.Услуга.Услуга,
//|			УПЖКХ_Начисления.Регистратор,
//|			УПЖКХ_Начисления.ВидНачисления,
//|			УПЖКХ_Начисления.Тариф,
//|			УПЖКХ_Начисления.ЛицевойСчет,
//|			ВЫБОР
//|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
//|					ТОГДА УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец
//|				ИНАЧЕ &ЗданиеЮрЛица
//|			КОНЕЦ,
//|			ВЫБОР
//|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
//|					ТОГДА ИСТИНА
//|				ИНАЧЕ ЛОЖЬ
//|			КОНЕЦ) КАК НачисленияНаЛицСчета
//|		ПО (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Организация = НачисленияНаЛицСчета.Организация)
//|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента = НачисленияНаЛицСчета.Договор)
//|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура = НачисленияНаЛицСчета.Услуга)
//|			И (НачисленияНаЛицСчета.Регистратор = КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Регистратор)
//|
//|СГРУППИРОВАТЬ ПО
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг,
//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг,
//|	НачисленияНаЛицСчета.Тариф,
//|	НачисленияНаЛицСчета.ЛицевойСчет,
//|	НачисленияНаЛицСчета.Здание,
//|	НачисленияНаЛицСчета.ПризнакКапРем,
//|	НачисленияНаЛицСчета.ВидНачисления";

//для благ
"ВЫБРАТЬ
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура КАК Номенклатура,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени КАК ЭтоПени,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота КАК ЭтоЛьгота,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
|	НачисленияНаЛицСчета.Тариф КАК Тариф,
|	НачисленияНаЛицСчета.ЛицевойСчет КАК ЛицевойСчет,
|	НачисленияНаЛицСчета.Здание КАК ЗданиеКапРем,
|	НачисленияНаЛицСчета.ПризнакКапРем КАК ПризнакКапРем,
|	НачисленияНаЛицСчета.ПризнакБлаг КАК ПризнакБлаг,
|	НачисленияНаЛицСчета.ВидНачисления КАК ВидНачисления,
|	СУММА(НачисленияНаЛицСчета.Количество) КАК Количество,
|	СУММА(НачисленияНаЛицСчета.СуммаНачисления) КАК СуммаОтражения
|ИЗ
|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Обороты(
|			&ДатаСрезаНач,
|			&ДатаСрезаКон,
|			Регистратор,
|			Организация = &Организация
|				И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОбороты
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|			КОНЕЦПЕРИОДА(УПЖКХ_Начисления.Период, МЕСЯЦ) КАК Период,
|			УПЖКХ_Начисления.Организация КАК Организация,
|			УПЖКХ_Начисления.Договор КАК Договор,
|			УПЖКХ_Начисления.Услуга.Услуга КАК Услуга,
|			УПЖКХ_Начисления.Регистратор КАК Регистратор,
|			УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
|			УПЖКХ_Начисления.Тариф КАК Тариф,
|			УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт) или  УПЖКХ_Начисления.Услуга.Код = ""00-005""
|					ТОГДА УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец                                       
|				ИНАЧЕ  &ЗданиеЮрЛица
|			КОНЕЦ КАК Здание,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
|					ТОГДА ИСТИНА
|				ИНАЧЕ ЛОЖЬ
|			КОНЕЦ КАК ПризнакКапРем,
|			СУММА(УПЖКХ_Начисления.Количество) КАК Количество,
|			СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК СуммаНачисления,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга.Код = ""00-005""
|					ТОГДА ИСТИНА
|				ИНАЧЕ ЛОЖЬ
|			КОНЕЦ КАК ПризнакБлаг
|		ИЗ
|			РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
|		ГДЕ
|			УПЖКХ_Начисления.Период >= &ДатаСрезаНач
|			И УПЖКХ_Начисления.Период <= &ДатаСрезаКон
|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
|			И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
|			И УПЖКХ_Начисления.Организация = &Организация
|		    &ДопУсловия2
|		
|		СГРУППИРОВАТЬ ПО
|			КОНЕЦПЕРИОДА(УПЖКХ_Начисления.Период, МЕСЯЦ),
|			УПЖКХ_Начисления.Организация,
|			УПЖКХ_Начисления.Договор,
|			УПЖКХ_Начисления.Услуга.Услуга,
|			УПЖКХ_Начисления.Регистратор,
|			УПЖКХ_Начисления.ВидНачисления,
|			УПЖКХ_Начисления.Тариф,
|			УПЖКХ_Начисления.ЛицевойСчет,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)  или УПЖКХ_Начисления.Услуга.Код = ""00-005""
|					ТОГДА УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец
|				ИНАЧЕ &ЗданиеЮрЛица
|			КОНЕЦ,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга В (&Капремонт)
|					ТОГДА ИСТИНА
|				ИНАЧЕ ЛОЖЬ
|			КОНЕЦ,
|			ВЫБОР
|				КОГДА УПЖКХ_Начисления.Услуга.Код = ""00-005""
|					ТОГДА ИСТИНА
|				ИНАЧЕ ЛОЖЬ
|			КОНЕЦ) КАК НачисленияНаЛицСчета
|		ПО (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Организация = НачисленияНаЛицСчета.Организация)
|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента = НачисленияНаЛицСчета.Договор)
|			И (КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура = НачисленияНаЛицСчета.Услуга)
|			И (НачисленияНаЛицСчета.Регистратор = КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Регистратор)
|
|СГРУППИРОВАТЬ ПО
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг,
|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг,
|	НачисленияНаЛицСчета.Тариф,
|	НачисленияНаЛицСчета.ЛицевойСчет,
|	НачисленияНаЛицСчета.Здание,
|	НачисленияНаЛицСчета.ПризнакКапРем,
|	НачисленияНаЛицСчета.ВидНачисления,
|	НачисленияНаЛицСчета.ПризнакБлаг";
	//Запрос.Текст = Запрос.Текст + "	
	//|СГРУППИРОВАТЬ ПО
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента.Владелец,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорКонтрагента,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.Номенклатура,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.НоменклатурнаяГруппа,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоЛьгота,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ЭтоПени,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ВариантПоставкиУслуг,
	//|	КВП_НачислениеДляОтраженияВРеглУчетеОбороты.ДоговорПоставщикаУслуг,
	//|	НачисленияНаЛицСчета.Тариф,
	//|	НачисленияНаЛицСчета.ЛицевойСчет,
	//|	НачисленияНаЛицСчета.Здание,
	//|	НачисленияНаЛицСчета.ПризнакКапРем,
	//|	НачисленияНаЛицСчета.ВидНачисления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстДопУсловия", ТекстДопУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия2", ДопУсловия2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия3", ДопУсловия3);

	
	ДатаСреза = Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
		
	ДатаСрезаНач = НачалоМесяца(ДатаСреза.Значение.Дата);
	ДатаСрезаКон = КонецМесяца(ДатаСреза.Значение.Дата);
	Запрос.УстановитьПараметр("ДатаСрезаНач",   ДатаСрезаНач);
	Запрос.УстановитьПараметр("ДатаСрезаКон",   ДатаСрезаКон);
	//Используем стандартную процедуру и справочник натсроек Позолотина
	Если мСтруктураНастроекКапРемонта = Неопределено Тогда
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("Капремонт", мСтруктураНастроекКапРемонта.СписокУслуг);
	//Запрос.УстановитьПараметр("Благоустройство", мСтруктураНастроекКапРемонта.СписокУслуг);
	
	//Запрос.УстановитьПараметр("Капремонт",   Справочники.Номенклатура.НайтиПоКоду("00-00000778"));
	Запрос.УстановитьПараметр("Капремонттек",   Справочники.Номенклатура.НайтиПоКоду("00-00001780"));
	Запрос.УстановитьПараметр("ЗданиеЮрЛица",   Справочники.КВП_Здания.НайтиПоКоду("000001648"));
	//	СписокВидовНачислений = новый СписокЗначений();
	//	СписокВидовНачислений.Добавить("Перечисление.КВП_ВидыНачисления.КорректировкаНачислений");
	//	СписокВидовНачислений.Добавить("Перечисление.КВП_ВидыНачисления.РегистрацияОплаты");
	//Запрос.УстановитьПараметр("СписокВидовНачислений",   СписокВидовНачислений);
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	КолСтрокТаблицыНачислений = ТаблицаНачислений.Количество();
	Для Индекс = 1 По КолСтрокТаблицыНачислений Цикл
		ТекСтрока = ТаблицаНачислений[КолСтрокТаблицыНачислений - Индекс];
		Если ПустаяСтрока(ТекСтрока.Номенклатура) Тогда
			Сообщить("Контрагент: " 
					 + Строка(ТекСтрока.Контрагент) 
					 + ". Сумма для отражения: " 
					 + Строка(ТекСтрока.СуммаОтражения) 
					 + ". В справочнике ""Услуги"" для услуги не выбрана номенклатура. Сумма не будет учтена.");
			ТаблицаНачислений.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Сортировка для правильного отображения на форме.
	ТаблицаНачислений.Сортировать("Контрагент, ДоговорКонтрагента");
	РасшифровкаНачислений.Загрузить(ТаблицаНачислений);
	РасшифровкаНачислений.Сортировать("ЛицевойСчет, Номенклатура");
		//ТаблицаНачислений.Свернуть("Контрагент,ДоговорКонтрагента,ВариантПоставкиУслуг,НоменклатурнаяГруппа,ЭтоЛьгота,ЭтоПени", "");
			
	ТаблицаНачислений.Свернуть("Контрагент,ДоговорКонтрагента,ВариантПоставкиУслуг,ЭтоЛьгота, ПризнакКапРем,ПризнакБлаг", "СуммаОтражения");
	//ТаблицаНачислений.Свернуть("ПризнакБлаг", "СуммаОтражения");
	//ТаблицаНачислений.Свернуть("Контрагент,ДоговорКонтрагента,ВариантПоставкиУслуг, ПризнакКапРем, ПризнакБлаг", "СуммаОтражения");

	ТаблицаНачислений.Колонки.Добавить("Отражать", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.ЗаполнитьЗначения(Истина, "Отражать");
	Контрагенты.Загрузить(ТаблицаНачислений);
 //--Позолотина

КонецПроцедуры   // ЗаполнитьТабличнуюЧастьОтражениеНачислений()


// Функция получает таблицу начислений для отражения в регламентном учете.
// 
// Возвращаемое значение:
//  ТаблицаНачислений - 
//
Функция ПолучитьТаблицуОтражениеНачислений() Экспорт
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
	Запрос = Новый Запрос();
	
	ТекстДопУсловия = "ИСТИНА";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если Контрагент.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ (&Контрагент)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.Владелец = &Контрагент";
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если Номенклатура.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура В ИЕРАРХИИ (&Номенклатура)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И Номенклатура = &Номенклатура";
		КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Если НоменклатурнаяГруппа.ЭтоГруппа Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)";
		Иначе
			ТекстДопУсловия = ТекстДопУсловия + " И НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
		КонецЕсли;
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Взаиморасчеты) Тогда
		Если Взаиморасчеты = 1 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И НЕ ЭтоЛьгота И НЕ ЭтоПени";
		ИначеЕсли Взаиморасчеты = 2 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ЭтоЛьгота";
		ИначеЕсли Взаиморасчеты = 3 Тогда
			ТекстДопУсловия = ТекстДопУсловия + " И ЭтоПени";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Номенклатура КАК Номенклатура,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота КАК ЭтоЛьгота,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоПени КАК ЭтоПени,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(
	|			&ДатаСреза,
	|			Организация = &Организация
	|				И &ТекстДопУсловия) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДокумента.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ДвиженияДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДвиженияДокумента.Номенклатура КАК Номенклатура,
	|	ДвиженияДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДвиженияДокумента.ЭтоЛьгота КАК ЭтоЛьгота,
	|	ДвиженияДокумента.ЭтоПени КАК ЭтоПени,
	|	ДвиженияДокумента.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	ДвиженияДокумента.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	СУММА(ДвиженияДокумента.Сумма) КАК СуммаОтражения
	|ПОМЕСТИТЬ ТаблицаДвиженийДокумента
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете КАК ДвиженияДокумента
	|ГДЕ
	|	ДвиженияДокумента.Регистратор = &ДокСсылка
	|	И &ТекстДопУсловия
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДокумента.ДоговорКонтрагента.Владелец,
	|	ДвиженияДокумента.ДоговорКонтрагента,
	|	ДвиженияДокумента.Номенклатура,
	|	ДвиженияДокумента.НоменклатурнаяГруппа,
	|	ДвиженияДокумента.ЭтоЛьгота,
	|	ДвиженияДокумента.ЭтоПени,
	|	ДвиженияДокумента.ВариантПоставкиУслуг,
	|	ДвиженияДокумента.ДоговорПоставщикаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОстатков.Контрагент, ТаблицаДвиженийДокумента.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаОстатков.ДоговорКонтрагента, ТаблицаДвиженийДокумента.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ТаблицаОстатков.Номенклатура, ТаблицаДвиженийДокумента.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТаблицаОстатков.НоменклатурнаяГруппа, ТаблицаДвиженийДокумента.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ТаблицаОстатков.ЭтоЛьгота, ТаблицаДвиженийДокумента.ЭтоЛьгота) КАК ЭтоЛьгота,
	|	ЕСТЬNULL(ТаблицаОстатков.ЭтоПени, ТаблицаДвиженийДокумента.ЭтоПени) КАК ЭтоПени,
	|	ЕСТЬNULL(ТаблицаОстатков.ВариантПоставкиУслуг, ТаблицаДвиженийДокумента.ВариантПоставкиУслуг) КАК ВариантПоставкиУслуг,
	|	ЕСТЬNULL(ТаблицаОстатков.ДоговорПоставщикаУслуг, ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг) КАК ДоговорПоставщикаУслуг,
	|	ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) КАК СуммаОтражения,
	|	ВЫБОР
	|		КОГДА &ВедетсяРаздельныйУчетКапРемонта
	|				И ЕСТЬNULL(ТаблицаОстатков.Номенклатура, ТаблицаДвиженийДокумента.Номенклатура) В (&СписокНоменклатурыУслугКапРемонта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакКапРем
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаДвиженийДокумента КАК ТаблицаДвиженийДокумента
	|		ПО (ТаблицаДвиженийДокумента.Контрагент = ТаблицаОстатков.Контрагент)
	|			И (ТаблицаДвиженийДокумента.ДоговорКонтрагента = ТаблицаОстатков.ДоговорКонтрагента)
	|			И (ТаблицаДвиженийДокумента.Номенклатура = ТаблицаОстатков.Номенклатура)
	|			И (ТаблицаДвиженийДокумента.НоменклатурнаяГруппа = ТаблицаОстатков.НоменклатурнаяГруппа)
	|			И (ТаблицаДвиженийДокумента.ЭтоЛьгота = ТаблицаОстатков.ЭтоЛьгота)
	|			И (ТаблицаДвиженийДокумента.ЭтоПени = ТаблицаОстатков.ЭтоПени)
	|			И (ТаблицаДвиженийДокумента.ВариантПоставкиУслуг = ТаблицаОстатков.ВариантПоставкиУслуг)
	|			И (ТаблицаДвиженийДокумента.ДоговорПоставщикаУслуг = ТаблицаОстатков.ДоговорПоставщикаУслуг)
	|ГДЕ
	|	&УсловиеОтрицательныхСумм";
	
	УсловиеОтрицательныхСумм = "ИСТИНА";
	
	Если НЕ ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
		
		// Отражать начисления по договорам с видом "Прочее" типовыми документами нельзя - 
		// это ограничение типовых документов.
		ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
		
		Если НЕ мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
			
			УсловиеОтрицательныхСумм = УсловиеОтрицательныхСумм + "
			|	И ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) > 0";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстДопУсловия", ТекстДопУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтрицательныхСумм", УсловиеОтрицательныхСумм);
	
	ДатаСреза = Новый Граница(КонецДня(ЭтотОбъект.Дата), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДокСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ВедетсяРаздельныйУчетКапРемонта",   СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	Запрос.УстановитьПараметр("СписокНоменклатурыУслугКапРемонта", СтруктураНастроекКапРемонта.СписокНоменклатурыУслуг);
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНачислений;
	
КонецФункции // ЗаполнитьТабличнуюЧастьОтражениеНачислений()

// Регистрирует счет-фактуру для указанной строки табличной части.
Процедура ЗарегистрироватьСчетФактуруДляСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ЕстьДокумент, ДокументПроведен,
																							КомментарийНачисления)
	
	// Счет-фактура не должен формироваться при УСН, если иное не указано в учетной политике ЖКХ на закладке УСН
	// или при агентской схеме в случае выставления счетов-фактур от имени заказчика.
	Если (УчетнаяПолитика.СистемаНалогообложения(Организация, Дата) = Перечисления.СистемыНалогообложения.Упрощенная
	   И мНастройкиУчетнойПолитикиТСЖ.ФормироватьСФУСН = Ложь)
	 ИЛИ (СтрокаТабличнойЧасти.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема
	   И мНастройкиУчетнойПолитикиТСЖ.ВариантРеализацииТоваров = 
	   		Перечисления.УПЖКХ_ВариантыРеализацииТоваров.ОтИмениЗаказчика) Тогда
	Иначе
		Если Не ЕстьДокумент И ДокументПроведен Тогда
			ОбъектСчетаФактуры                 = Документы.СчетФактураВыданный.СоздатьДокумент();
			ОбъектСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			ОбъектСчетаФактуры.Заполнить(СтрокаТабличнойЧасти.Документ);
			ОбъектСчетаФактуры.Ответственный = Ответственный;
			ОбъектСчетаФактуры.Комментарий   = КомментарийНачисления;
			Попытка
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТабличнойЧасти.СчетФактура = ОбъектСчетаФактуры.Ссылка;
			Исключение
				ТекстСообщения = "Документ <" + СтрокаТабличнойЧасти.Документ + ">: произошла ошибка при регистрации счета-фактуры!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗарегистрироватьСчетФактуруДляСтрокиТабличнойЧасти()

// Cоздаёт документ отражения льготы для указанной строки табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - обрабатываемая строка.
//
Процедура СформироватьДокументОтраженияЛьготы(СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки)
	
	Если ЕстьДокумент Тогда
		ДокументОбъект = СтрокаТабличнойЧасти.Документ.ПолучитьОбъект();
		ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
		
	Иначе
		ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	
		ДокументОбъект.Дата                   = Дата;
		ДокументОбъект.Организация            = Организация;
		ДокументОбъект.ВидОперации            = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
		ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		
		ДокументОбъект.ВалютаДокумента    = мВалютаРегламентированногоУчета;
		ДокументОбъект.КурсДокумента      = 1;
		ДокументОбъект.КратностьДокумента = 1;
		
		ДокументОбъект.КонтрагентДебитор = СтрокаТабличнойЧасти.Контрагент;
		
		ДокументОбъект.КонтрагентКредитор = КонтрагентКомпенсацииЛьгот;
		
		 //ЖКХ 3.0 +
		//ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагентаКомпенсацииЛьгот;
		Если мСчетаУчетаКомпенсатораЛьгот = Неопределено Тогда
			мСчетаУчетаКомпенсатораЛьгот 
				 = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация,
													ДокументОбъект.КонтрагентКредитор, ДоговорКонтрагентаКомпенсацииЛьгот);
		КонецЕсли;
		//Если СтрокаТабличнойЧасти.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		//	ДокументОбъект.СчетДт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетов;
		//	ДокументОбъект.СчетКт = мСчетаУчетаКомпенсатораЛьгот.СчетАвансов;
		//ИначеЕсли СтрокаТабличнойЧасти.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		//	  Или СтрокаТабличнойЧасти.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		//	ДокументОбъект.СчетДт = мСчетаУчетаКомпенсатораЛьгот.СчетАвансовПокупателя;
		//	ДокументОбъект.СчетКт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетовПокупателя;
		//ИначеЕсли СтрокаТабличнойЧасти.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		//	ДокументОбъект.СчетДт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетовСКомитентом;
		//	ДокументОбъект.СчетКт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетовСКомитентом;
		//КонецЕсли;
		// ЖКХ 3.0 -
		
		ДокументОбъект.СчетДт = мСчетаУчетаКомпенсатораЛьгот.СчетАвансовПокупателя;
		ДокументОбъект.СчетКт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетовПокупателя;
		
	КонецЕсли;
	
	// Табличная часть.
	НоваяСтрока                    = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
	НоваяСтрока.ДоговорКонтрагента    = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	НоваяСтрока.КорДоговорКонтрагента = ДоговорКонтрагентаКомпенсацииЛьгот;
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация,
	                                            ДокументОбъект.КонтрагентДебитор, НоваяСтрока.ДоговорКонтрагента);
	Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		НоваяСтрока.КорСчетУчетаРасчетов = ДокументОбъект.СчетДт;
	ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		НоваяСтрока.КорСчетУчетаРасчетов = ДокументОбъект.СчетДт;
	КонецЕсли;
	
	ТекСумма = 0;
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		ТекСумма = ТекСумма + СтрокаРасшифровки.СуммаОтражения;
	КонецЦикла;
	НоваяСтрока.Сумма               = ТекСумма;
	НоваяСтрока.СуммаВзаиморасчетов = ТекСумма;
	
	НоваяСтрока.КурсВзаиморасчетов      = 1;
	НоваяСтрока.КратностьВзаиморасчетов = 1;
		
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий   = "Документ сгенерирован автоматически для отражения льгот.";
	
	Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
		// Ищем строки, для которых не удалось создать документ.
		СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ЭтоЛьгота, ВариантПоставкиУслуг");
		СтруктураОтбора.Отражать             = Истина;
		СтруктураОтбора.ЭтоЛьгота            = Истина;
		СтруктураОтбора.Контрагент           = СтрокаТабличнойЧасти.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента   = СтрокаТабличнойЧасти.ДоговорКонтрагента;
		СтруктураОтбора.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		СтруктураОтбора.ВариантПоставкиУслуг = СтрокаТабличнойЧасти.ВариантПоставкиУслуг;
			
		НайденныеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
			
		Для каждого ТекНайденнаяСтрока из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(ТекНайденнаяСтрока.Документ) И ТекНайденнаяСтрока.Документ.Проведен Тогда
				Продолжить;
			Иначе
				ТекстСообщения = "Строка " + ТекНайденнаяСтрока.НомерСтроки + ":" + Символы.ПС + "Не удалось сформировать документ ""Корректировка долга""!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТабличнойЧасти.Документ = ДокументОбъект.Ссылка;
		Исключение
			// Ищем строки, для которых не удалось создать документ.
			СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ЭтоЛьгота, ВариантПоставкиУслуг");
			СтруктураОтбора.Отражать             = Истина;
			СтруктураОтбора.ЭтоЛьгота            = Истина;
			СтруктураОтбора.Контрагент           = СтрокаТабличнойЧасти.Контрагент;
			СтруктураОтбора.ДоговорКонтрагента   = СтрокаТабличнойЧасти.ДоговорКонтрагента;
			СтруктураОтбора.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
			СтруктураОтбора.ВариантПоставкиУслуг = СтрокаТабличнойЧасти.ВариантПоставкиУслуг;
			
			НайденныеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
			
			Для каждого ТекНайденнаяСтрока из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(ТекНайденнаяСтрока.Документ) И ТекНайденнаяСтрока.Документ.Проведен Тогда
					Продолжить;
				Иначе
					ТекстСообщения = "Строка " + ТекНайденнаяСтрока.НомерСтроки + ":" + Символы.ПС + ОписаниеОшибки();
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументОтраженияЛьготы()

// Cоздаёт документ отражения начислений для указанной строки табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - обрабатываемая строка.
//  ОтражениеПени - Тип "Булево" - определяет объект отражения.
//               Истина - отражения пени;
//               Ложь   - отражания начислений.
//
Процедура СформироватьДокументОтраженияНачислений(СтрокаТабличнойЧасти,
												  ЕстьДокумент,
												  СтрокиРасшифровки,
												  СоответствиеРазмеровСтавокНДС,
												  ОтражениеПени = Ложь)
	
	КомментарийНачисления = СтрокаТабличнойЧасти.ДоговорКонтрагента.Наименование;
	//КомментарийНачисления = "Документ сгенерирован автоматически для отражения ";       //петрова
	                                                                                     
	Если ОтражениеПени Тогда
		КомментарийНачисления = КомментарийНачисления + " пени.";
	//Иначе                                                                    //++петрова
	//	КомментарийНачисления = КомментарийНачисления + " начислений.";        //--петрова
	КонецЕсли;
	
	ТекКонтрагент         = СтрокаТабличнойЧасти.Контрагент;
	ТекДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	// Заполнение счетов учета.
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация,
																							ТекКонтрагент,
																							ТекДоговорКонтрагента);
	
	Если ОтражениеПени Тогда
		СтруктураСчетовВзаиморасчета = ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(ТекДоговорКонтрагента.ВидВзаиморасчетов);   //петрова
		//СтруктураСчетовВзаиморасчета = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ТекДоговорКонтрагента.ВидВзаиморасчетов);   //петрова
		СчетаУчета.СчетРасчетовПокупателя = СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов;
		СчетаУчета.СчетАвансовПокупателя  = СтруктураСчетовВзаиморасчета.СчетУчетаАвансов;
	КонецЕсли;
	
	СоздатьДокумент = Истина;
	
	// Шапка документа.
	Если ЕстьДокумент Тогда
		
		ОпределитьФлагиТипаДокументов(СтрокаТабличнойЧасти);
		
		ДокументОбъект = СтрокаТабличнойЧасти.Документ.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		ДокументОбъект.Услуги.Очистить();
		
		Если мЭтоРеализация Тогда
			ДокументОбъект.АгентскиеУслуги.Очистить();
		КонецЕсли;
		
	Иначе
		
		ОпределитьФлагиТипаДокументов(СтрокаТабличнойЧасти);
		
		ПроверитьНеобходимостьИзмененияТипаФормируемогоДокумента(СтрокаТабличнойЧасти, СтрокиРасшифровки);
		
		Если мЭтоАкт Тогда
			ТипДокумента = "АктОбОказанииПроизводственныхУслуг";
		Иначе
			ТипДокумента = "РеализацияТоваровУслуг";
		КонецЕсли;
		
		Если СоздатьДокумент Тогда
			
			ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент();
			
			ДокументОбъект.Дата        = Дата;
			ДокументОбъект.Организация = Организация;
			
			ДокументОбъект.ВалютаДокумента         = мВалютаРегламентированногоУчета;
			ДокументОбъект.КурсВзаиморасчетов      = 1;
			ДокументОбъект.КратностьВзаиморасчетов = 1;
			//++Позолотина
			 ТекТипЦенДоговора = ТекДоговорКонтрагента.ТипЦен;
			 Если ТекТипЦенДоговора = Неопределено Тогда
			  		ТекТипЦенДоговора = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000004");
			  КонецЕсли; 
			 ДокументОбъект.СуммаВключаетНДС    = Ложь;
				 Если ТекТипЦенДоговора.Код = "00-000001" Тогда
			  		ДокументОбъект.СуммаВключаетНДС    = Истина;
			 	КонецЕсли; 
			//--Позолотина	

			//ДокументОбъект.СуммаВключаетНДС    = СуммаВключаетНДС; //петрова
			
			ДокументОбъект.Контрагент         = ТекКонтрагент;
			ДокументОбъект.ДоговорКонтрагента = ТекДоговорКонтрагента;
			
			Если мЭтоРеализация Тогда
				// Здесь задаем вид операции для документа реализации по умолчанию, в дальнейшем, когда
				// в документ будут переданы все необходимые данные - определим рекомендуемый вид операции.
				// Данная строка нужна для корректной работы функции "ПолучитьРекомендуемыйВидОперацииДокументаРеализацияТоваров".
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				
				УПЖКХ_ТиповыеМетодыСервер.УстановитьБанковскийСчет(ДокументОбъект.БанковскийСчетОрганизации, 
																	   ДокументОбъект.Организация, 
																	   ДокументОбъект.ВалютаДокумента);
			КонецЕсли;
			Если мЭтоАкт Тогда
				ДокументОбъект.ПодразделениеЗатрат  = ПодразделениеОрганизации;
				ДокументОбъект.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
			КонецЕсли;
			
			ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАвансов;
			
			Если мЭтоАкт Тогда
				Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект, ?(ОтражениеПени, СчетаУчета, Неопределено));
				ДокументОбъект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
			Иначе
				Если Не ОтражениеПени Тогда
					ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
				Иначе
					ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					ДокументОбъект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.Ответственный = Ответственный;
			ДокументОбъект.Комментарий   = КомментарийНачисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СоздатьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровСтроки = Новый Структура;
	СтруктураПараметровСтроки.Вставить("ДокументОбъект", ДокументОбъект);
	СтруктураПараметровСтроки.Вставить("ОтражениеПени",  ОтражениеПени);
	Если ОтражениеПени Тогда
		СтруктураПараметровСтроки.Вставить("СчетаУчета",                   СчетаУчета);
		СтруктураПараметровСтроки.Вставить("СтруктураСчетовВзаиморасчета", СтруктураСчетовВзаиморасчета);
	КонецЕсли;
	
	// Табличная часть документа.
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		
		РазмерыСтавокНДС = Неопределено;
		Если НЕ СоответствиеРазмеровСтавокНДС = Неопределено Тогда
			РазмерыСтавокНДС = СоответствиеРазмеровСтавокНДС.Получить(СтрокаРасшифровки.Номенклатура);
			Если НЕ РазмерыСтавокНДС = Неопределено Тогда
				ТаблицаРазмеровСтавокНДС = РазмерыСтавокНДС.Скопировать();
				ТаблицаРазмеровСтавокНДС.Колонки.Добавить("СуммаДляОтражения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
				Для Каждого СтрокаРазмера ИЗ ТаблицаРазмеровСтавокНДС Цикл
					СтрокаРазмера.СуммаДляОтражения = СтрокаРазмера.ДоляНачисления * СтрокаРасшифровки.СуммаОтражения / 100;
				КонецЦикла;
				
				ИтоговаяСуммаОтражения = ТаблицаРазмеровСтавокНДС.Итог("СуммаДляОтражения");
				
				Если НЕ ИтоговаяСуммаОтражения = СтрокаРасшифровки.СуммаОтражения Тогда
					Если ТаблицаРазмеровСтавокНДС.Количество() > 0 Тогда
						ТаблицаРазмеровСтавокНДС[0].СуммаДляОтражения = ТаблицаРазмеровСтавокНДС[0].СуммаДляОтражения + (СтрокаРасшифровки.СуммаОтражения - ИтоговаяСуммаОтражения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметровСтроки.Вставить("СтрокаРасшифровки", СтрокаРасшифровки);
		
		Если НЕ РазмерыСтавокНДС = Неопределено Тогда
			
			Для Каждого СтрокаРазмера ИЗ ТаблицаРазмеровСтавокНДС Цикл
				
				СтруктураПараметровСтроки.Вставить("СтавкаНДС",         СтрокаРазмера.СтавкаНДС);
				СтруктураПараметровСтроки.Вставить("СуммаДляОтражения", СтрокаРазмера.СуммаДляОтражения);
				
				ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки);
				
			КонецЦикла;
			
		Иначе
			
			СтруктураПараметровСтроки.Вставить("СтавкаНДС",         СтрокаРасшифровки.Номенклатура.УдалитьСтавкаНДС); //фмб
			СтруктураПараметровСтроки.Вставить("СуммаДляОтражения", СтрокаРасшифровки.СуммаОтражения);
			
			ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Предварительно, для создаваемого документа реализации был установлен общий вид операции -
	// реализация товаров и услуг, однако, в случае, когда заполнены данные только по реализации услуг,
	// нет необходимости в отражении полей по реализации товаров. Чтобы этого избежать, определим рекомендуемый
	// вид операции документа "Реализация товаров и услуг", в зависимости от содержания документа, а не от того,
	// какой вид операции мы ему назначили. В случае если типовая функция не определит рекомендуемый вид операции,
	// он останется определенным по умолчанию ранее.
	Если мЭтоРеализация Тогда
		
		РекомендуемыйВидОперации= УПЖКХ_ТиповыеМетодыСервер.ПолучитьРекомендуемыйВидОперацииДокументаРеализацияТоваров(ДокументОбъект);
		
		Если ЗначениеЗаполнено(РекомендуемыйВидОперации) Тогда
			ДокументОбъект.ВидОперации = РекомендуемыйВидОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтрокаТабличнойЧасти.Документ = ДокументОбъект.Ссылка;
		ДокументПроведен = Истина;
	Исключение
		// Ищем строки, для которых не удалось создать документ.
		Если ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
			//СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени, ВариантПоставкиУслуг");    /++петрова
			СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени, ВариантПоставкиУслуг");               //--петрова
			СтруктураОтбора.ВариантПоставкиУслуг = СтрокаТабличнойЧасти.ВариантПоставкиУслуг;
		Иначе
			//СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени");  //++петрова
			СтруктураОтбора = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента," + ?(Не ОтражениеПени, " ЭтоЛьгота,", "") + " ЭтоПени");                           //--петрова
		КонецЕсли;
		
		СтруктураОтбора.Отражать             = Истина;
		Если ОтражениеПени Тогда
			СтруктураОтбора.ЭтоПени = Истина;
		Иначе
			СтруктураОтбора.ЭтоЛьгота = Ложь;
			СтруктураОтбора.ЭтоПени   = Ложь;
		КонецЕсли;
		СтруктураОтбора.Контрагент           = ТекКонтрагент;
		СтруктураОтбора.ДоговорКонтрагента   = ТекДоговорКонтрагента;
		//СтруктураОтбора.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа; //Петрова
		//+Позолотина
		если  значениезаполнено(СтрокаТабличнойЧасти.ПризнакКапРем) тогда
		  СтруктураОтбора.Вставить("ПризнакКапРем",  СтрокаТабличнойЧасти.ПризнакКапРем);
	  конецесли;
	    если  значениезаполнено(СтрокаТабличнойЧасти.ПризнакБлаг) тогда
		  СтруктураОтбора.Вставить("ПризнакБлаг",  СтрокаТабличнойЧасти.ПризнакБлаг);
	  конецесли;

		//Позолотина --

		
		НайденныеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекНайденнаяСтрока из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(ТекНайденнаяСтрока.Документ) И ТекНайденнаяСтрока.Документ.Проведен Тогда
				Продолжить;
			Иначе
				// Выведем сообщение об ошибке с указанием строки и типа документа, который не удолось записать.
				ТекстСообщения = "В строке №"
								+ ТекНайденнаяСтрока.НомерСтроки
								+ " не удалось записать документ " + ?(мЭтоРеализация, "'Реализация товаров и услуг':", "'Акт об оказании производственных услуг':")
								+ Символы.ПС + ОписаниеОшибки();
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
				
			КонецЕсли;
		КонецЦикла;
	КонецПопытки;
	
	ЗарегистрироватьСчетФактуруДляСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ЕстьДокумент,
													   ДокументПроведен, КомментарийНачисления);
	
КонецПроцедуры

// Cоздаёт документ для указанной строки табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - обрабатываемая строка
//  ПравитьСуществующие - Булево - нужно ли исправлять существующие
//                 документы (их табличные части).
//
Процедура СформироватьДокументыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,
													ПравитьСуществующие = Ложь,
													ВключатьВариантПоставкиУслуг = Ложь,
													СоответствиеРазмеровСтавокНДС = Неопределено) Экспорт
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	Если ПустаяСтрока(ТипДокументаОтражения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан тип документов для отображения!", , , , Ложь);
		Возврат;
	КонецЕсли;
	Если мСписокТиповДокументов.НайтиПоЗначению(ТипДокументаОтражения) = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Указан недопустимый тип документов для отображения!", , , , Ложь);
		Возврат;
	КонецЕсли;
	
	ЕстьДокумент = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ);
	Если ЕстьДокумент И СтрокаТабличнойЧасти.Документ.Проведен И НЕ ПравитьСуществующие Тогда
		Возврат;
	КонецЕсли;
	
	// Если тип документа отражения - "Реализация товаров и услуг",
	// то будем получать строки расшифровки без отбора по варианту поставки услуг.
	ОтборБезВариантаПоставкиУслуг = Ложь;
	Если НЕ ВключатьВариантПоставкиУслуг И Не СтрокаТабличнойЧасти.ЭтоЛьгота Тогда
		ОтборБезВариантаПоставкиУслуг = Истина;
	КонецЕсли;
	
	СтрокиРасшифровки = ПолучитьСтрокиРасшифровкиНачислений(СтрокаТабличнойЧасти, ОтборБезВариантаПоставкиУслуг);
	Если СтрокиРасшифровки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УчитыватьНДС И СоответствиеРазмеровСтавокНДС = Неопределено Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		Для Каждого СтрокаМассиваРасшифровки ИЗ СтрокиРасшифровки Цикл
			СписокНоменклатуры.Добавить(СтрокаМассиваРасшифровки.Номенклатура);
		КонецЦикла;
		СоответствиеРазмеровСтавокНДС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьРазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете(СписокНоменклатуры, Дата);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ЭтоЛьгота Тогда
		// отражаем льготы
		СформироватьДокументОтраженияЛьготы(СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки);
	ИначеЕсли СтрокаТабличнойЧасти.ЭтоПени Тогда
		// отражаем пени
		СформироватьДокументОтраженияНачислений(СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки, СоответствиеРазмеровСтавокНДС, Истина);
	Иначе
		СформироватьДокументОтраженияНачислений(СтрокаТабличнойЧасти, ЕстьДокумент, СтрокиРасшифровки, СоответствиеРазмеровСтавокНДС);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументыСтрокиТабличнойЧасти()

// Вызывает создание документов для каждой строки табличной части.
Процедура СформироватьДокументыТабличнойЧастиСтарыйМеханизмОтражения(ПравитьСуществующие = Ложь)
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	мСчетаУчетаКомпенсатораЛьгот = Неопределено;
	КоличествоСтрок              = Контрагенты.Количество();
	
	// Таблицу документов получим без строк по льготам, т.к. разрез варианта поставки услуг зависит от типа документа отражения.
	ТаблицаДокументов = Контрагенты.Выгрузить(Контрагенты.НайтиСтроки(Новый Структура("Отражать, ЭтоЛьгота", Истина, Ложь)));
	ТаблицаДокументов.Сортировать("ЭтоПени Возр");
	
	ВключатьВариантПоставкиУслуг = (ТипДокументаОтражения = "Акт об оказании производственных услуг");
	Если Не ВключатьВариантПоставкиУслуг Тогда
		//ТаблицаДокументов.Свернуть("Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ПризнакКапРем, ЭтоЛьгота, ЭтоПени, Документ, СчетФактура, СчетУчетаРасчетов, СчетУчетаАвансов");
		ТаблицаДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ЭтоЛьгота, ЭтоПени, Документ, СчетФактура, СчетУчетаРасчетов, СчетУчетаАвансов, ПризнакКапРем, ПризнакБлаг");  //петрова
		ТаблицаДокументов.Колонки.Добавить("ВариантПоставкиУслуг", Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг"));
	КонецЕсли;
	
	// Дополним таблицу документов строками льгот - для льгот разрез варианта поставки учитывается безусловно.
	МассивСтрокПоЛьготам = Контрагенты.НайтиСтроки(Новый Структура("Отражать, ЭтоЛьгота", Истина, Истина));
	Для Каждого СтрокаЛьгот Из МассивСтрокПоЛьготам Цикл
		НоваяСтрока = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛьгот);
	КонецЦикла;
	//ТаблицаДокументов.Сортировать("Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ВариантПоставкиУслуг");
	ТаблицаДокументов.Сортировать("Контрагент, ДоговорКонтрагента, ВариантПоставкиУслуг, ПризнакКапРем, ПризнакБлаг");  //петрова

	СоответствиеРазмеровСтавокНДС = Неопределено;
	Если УчитыватьНДС Тогда
		СоответствиеРазмеровСтавокНДС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьРазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете(РасшифровкаНачислений.ВыгрузитьКолонку("Номенклатура"), Дата);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДокументов Цикл
		
		// Формирование документов.
		СформироватьДокументыСтрокиТабличнойЧасти(ТекСтрока, ПравитьСуществующие, ВключатьВариантПоставкиУслуг, СоответствиеРазмеровСтавокНДС);
		
		// Структура для отбора строк ТЧ
		//СтруктураОтбора                      = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, НоменклатурнаяГруппа, ПризнакКапРем, ЭтоЛьгота, ЭтоПени");
		СтруктураОтбора                      = Новый Структура("Отражать, Контрагент, ДоговорКонтрагента, ЭтоЛьгота, ЭтоПени"); //Позолотина
		СтруктураОтбора.Отражать             = Истина;
		СтруктураОтбора.Контрагент           = ТекСтрока.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента   = ТекСтрока.ДоговорКонтрагента;
		//СтруктураОтбора.НоменклатурнаяГруппа = ТекСтрока.НоменклатурнаяГруппа;
		СтруктураОтбора.ЭтоЛьгота            = ТекСтрока.ЭтоЛьгота;
		СтруктураОтбора.ЭтоПени              = ТекСтрока.ЭтоПени;
		Если ВключатьВариантПоставкиУслуг ИЛИ ТекСтрока.ЭтоЛьгота Тогда
			СтруктураОтбора.Вставить("ВариантПоставкиУслуг", ТекСтрока.ВариантПоставкиУслуг);
		КонецЕсли;
		//+Позолотина
		если  значениезаполнено(ТекСтрока.ПризнакКапРем) тогда
			СтруктураОтбора.Вставить("ПризнакКапРем",  ТекСтрока.ПризнакКапРем);
		конецесли;
		если  значениезаполнено(ТекСтрока.ПризнакБлаг) тогда
			СтруктураОтбора.Вставить("ПризнакБлаг",  ТекСтрока.ПризнакБлаг);
		конецесли; 		
		//Позолотина --    		
		
		НайденныеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекНайденнаяСтрока из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(ТекНайденнаяСтрока.Документ) И ТекНайденнаяСтрока.Документ.Проведен Тогда
				Продолжить;
			Иначе
				ТекНайденнаяСтрока.Документ = ТекСтрока.Документ;
				Если ЗначениеЗаполнено(ТекСтрока.СчетФактура) Тогда
					ТекНайденнаяСтрока.СчетФактура = ТекСтрока.СчетФактура;
				КонецЕсли;
#Если Клиент Тогда
				Состояние("Обработана строка № " + ТекНайденнаяСтрока.НомерСтроки + " / " + КоличествоСтрок);
#КонецЕсли
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДокументыТабличнойЧастиСтарыйМеханизмОтражения()

#КонецОбласти


#Область НовыйМеханизмОтражения

// Заполняет табличную часть.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//  ОтборЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - Лицевой счет для отбора данных к отражению.
//  ОтборУслуга      - СправочникСсылка.КВП_Услуги       - Услуга для отбора данных к отражению.
//
Процедура ЗаполнитьТабличнуюЧастьОтражениеНачисленийНовыйМеханизмОтражения(ОбновитьСодержаниеТабличнойЧасти = Ложь,
																		   ОтборГруппаУслуг = Неопределено,
																		   ОтборОбъектОтражения = Неопределено)
	
	// Получим актуальную таблицу отражения начислений для заполнения данных в табличной части НачисленияКОтражению.
	ТаблицаНачислений = ПолучитьТаблицуДанныхКОтражению(ОтборГруппаУслуг, ОтборОбъектОтражения);
	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДетализации = ПроверитьВозможностьДетализацииИПолучитьДетали(ТаблицаНачислений);
	
	// Обновим содержимое табличной части НачисленияКОтражению без удаления актуальных текущих данных (с сохранением ссылок
	// на сформированные типовые документы отражения начислений), либо полностью перезаполним ее, в зависимости от
	// параметра "ОбновитьСодержаниеТабличнойЧасти".
	Если ОбновитьСодержаниеТабличнойЧасти Тогда
		
		Для каждого ТекущаяСтрокаНачисленийКОтражению Из НачисленияКОтражению Цикл
			
			СтруктураПроверки = Новый Структура;
			
			СтруктураПроверки.Вставить("ЛицевойСчет",         ТекущаяСтрокаНачисленийКОтражению.ЛицевойСчет);
			СтруктураПроверки.Вставить("Услуга",              ТекущаяСтрокаНачисленийКОтражению.Услуга);
			СтруктураПроверки.Вставить("РазделУчета",         ТекущаяСтрокаНачисленийКОтражению.РазделУчета);
			СтруктураПроверки.Вставить("ЭтоКорректировка",    ТекущаяСтрокаНачисленийКОтражению.ЭтоКорректировка);
			СтруктураПроверки.Вставить("ВидКорректировки",    ТекущаяСтрокаНачисленийКОтражению.ВидКорректировки);
			СтруктураПроверки.Вставить("ПериодКорректировки", ТекущаяСтрокаНачисленийКОтражению.ПериодКорректировки);
			
			// Проверим, есть ли данные текущей строки табличной части в данных таблицы начислений.
			МассивСовпадающихСтрок = ТаблицаНачислений.НайтиСтроки(СтруктураПроверки);
			
			Если МассивСовпадающихСтрок.Количество() > 0 Тогда
				
				// Если уже есть строка, то актуализируем сумму к отражению.
				
				// УЧЕСТЬ:
				// Ссылка на сформированный документ отражения может отличаться от полученного из регистра
				// (в случае если документ отражения проведен, потом руками перед повторным заполнением указали что-то другое).
				// Оставляем тот, что в ТЧ.
				
				ТекущийИдентификаторСтроки = ТекущаяСтрокаНачисленийКОтражению.ИдентификаторСтроки;
				НовыйИдентификаторСтроки   = МассивСовпадающихСтрок[0].ИдентификаторСтроки;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаНачисленийКОтражению, МассивСовпадающихСтрок[0], 
										"Отражать, СуммаОтражения, ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода, ИдентификаторСтроки");
				
				// Строку из таблицы начислений удаляем.
				Для каждого СовпадающаяСтрока Из МассивСовпадающихСтрок Цикл
					ТаблицаНачислений.Удалить(СовпадающаяСтрока);
				КонецЦикла;
				
				ОбновитьДанныеДетализации(ТаблицаДетализации, ТекущийИдентификаторСтроки, НовыйИдентификаторСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если остались строки в таблице начислений, значит они новые и их нет в табличной части НачисленияКОтражению.
		// Добавим их в табличную часть.
		Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
			ЗаполнитьЗначенияСвойств(НачисленияКОтражению.Добавить(), СтрокаТаблицыНачислений);
		КонецЦикла;
		
	Иначе
		
		// Перезаполним табличную часть.
		НачисленияКОтражению.Загрузить(ТаблицаНачислений);
		ДетализацияНачислений.Загрузить(ТаблицаДетализации);
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТабличнуюЧастьОтражениеНачисленийНовыйМеханизмОтражения()

// Функция получает таблицу начислений для отражения в регламентном учете.
// 
// Возвращаемое значение:
//  ТаблицаНачислений - таблица значений - данные для заполнения табличной части НачисленияКОтражению.
//
Функция ПолучитьТаблицуДанныхКОтражению(ОтборГруппаУслуг, ОтборОбъектОтражения)
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Дополнение запроса временной таблице списком объектов и услуг для заполнения.
	Запрос = ДополнитьЗапросСпискомУслугИЛицевыхСчетовДляЗаполнения(ОтборГруппаУслуг, ОтборОбъектОтражения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Отражать,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.ЛицевойСчет,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.Услуга,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.РазделУчета,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.ЭтоКорректировка,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.ВидКорректировки,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.ПериодКорректировки,
	|	УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки.СуммаОстаток КАК СуммаОтражения
	|ПОМЕСТИТЬ ДанныеДляОтражения
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете.Остатки(
	|			&ДатаСреза,
	|			Организация = &Организация
	|				И МесяцОтражения = &МесяцОтражения
	|				И (Услуга, ЛицевойСчет) В
	|					(ВЫБРАТЬ
	|						врСписокУслугИЛицевыхСчетовДляЗаполнения.Услуга,
	|						врСписокУслугИЛицевыхСчетовДляЗаполнения.ЛицевойСчет
	|					ИЗ
	|						врСписокУслугИЛицевыхСчетовДляЗаполнения КАК врСписокУслугИЛицевыхСчетовДляЗаполнения)) КАК УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчетеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.РазделУчета,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.МесяцОтражения,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ДокументОтражения
	|ПОМЕСТИТЬ ДокументыОтражения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете КАК УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете
	|ГДЕ
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Организация = &Организация
	|	И (УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет, УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга, УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.РазделУчета, УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.МесяцОтражения) В
	|			(ВЫБРАТЬ
	|				ДанныеДляОтражения.ЛицевойСчет,
	|				ДанныеДляОтражения.Услуга,
	|				ДанныеДляОтражения.РазделУчета,
	|				ДанныеДляОтражения.ПериодКорректировки
	|			ИЗ
	|				ДанныеДляОтражения КАК ДанныеДляОтражения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОтражения.Отражать,
	|	ДанныеДляОтражения.ЛицевойСчет КАК ЛицевойСчет,
	|	ДанныеДляОтражения.Услуга КАК Услуга,
	|	ДанныеДляОтражения.РазделУчета,
	|	ДанныеДляОтражения.ЭтоКорректировка,
	|	ДанныеДляОтражения.ВидКорректировки,
	|	ДанныеДляОтражения.ПериодКорректировки,
	|	ДанныеДляОтражения.СуммаОтражения КАК СуммаОтражения,
	|	ЕСТЬNULL(ДокументыОтраженияКорректировок.ДокументОтражения, ЗНАЧЕНИЕ(Документ.КВП_ОтражениеНачисленийВРеглУчете.ПустаяСсылка)) КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода
	|ИЗ
	|	ДанныеДляОтражения КАК ДанныеДляОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОтражения КАК ДокументыОтраженияКорректировок
	|		ПО ДанныеДляОтражения.ЛицевойСчет = ДокументыОтраженияКорректировок.ЛицевойСчет
	|			И ДанныеДляОтражения.Услуга = ДокументыОтраженияКорректировок.Услуга
	|			И ДанныеДляОтражения.РазделУчета = ДокументыОтраженияКорректировок.РазделУчета
	|			И ДанныеДляОтражения.ПериодКорректировки = ДокументыОтраженияКорректировок.МесяцОтражения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	// Для информации:
	// При получении документа отражения корректируемого начисления прошлого периода возможно стоит учесть,
	// что при корректировке не прошлого, а тек. периода, он не нужен.
	// Аналогично при отражении корректировок совместно с начислениями, а не корректировкой реализации.
	// Но можно и получать всегда, просто при формировании документов их не учитывать (как сейчас).
	
	ДатаСреза = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСреза",      ДатаСреза);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МесяцОтражения", НачалоМесяца(Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуДанныхКОтражению()

// Функция получает таблицу детализации по объемам и тарифам.
// 
// Возвращаемое значение:
//  ТаблицаДетализации - таблица значений - данные для заполнения табличной части ДетализацияНачислений.
//
Функция ПолучитьТаблицуДетализацииНачисленийКОтражению(ТаблицаНачислений)
	
	//ВНИМАНИЕ:
	//Механизм временно не используется. 
	//Подробнее см. в комментариях к процедуре УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.
	
	// ОСОБЕННОСТЬ:
	// Из таблицы деталей нужно исключить следующие начисления:
	// - начисления по рассрочке, оплаты, зачет долгов, ввод нач.сальдо. 
	// - "сторнировки" основных начислений при рассрочке (Важно: в данный момент они не исключены. Их никак не отличить 
	//   от начисления разовых услуг кроме как по регистратору, поэтому таблицу оборотов использовать не правильно, но 
	//   использование таблицы записей не оптимально).
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОтражения.ЛицевойСчет,
	|	ДанныеДляОтражения.Услуга,
	|	ДанныеДляОтражения.РазделУчета,
	|	ДанныеДляОтражения.ЭтоКорректировка,
	|	НАЧАЛОПЕРИОДА(ДанныеДляОтражения.ПериодКорректировки, МЕСЯЦ) КАК ПериодКорректировки,
	|	ДанныеДляОтражения.СуммаОтражения,
	|	ДанныеДляОтражения.ИдентификаторСтроки
	|ПОМЕСТИТЬ ДанныеДляОтражения
	|ИЗ
	|	&ТаблицаНачислений КАК ДанныеДляОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДляОтражения.ЛицевойСчет,
	|	ДанныеДляОтражения.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|		ИНАЧЕ УПЖКХ_Начисления.РазделУчета
	|	КОНЕЦ КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКорректировка,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
	|			ТОГДА НАЧАЛОПЕРИОДА(УПЖКХ_Начисления.МесяцНачисления, МЕСЯЦ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ПериодКорректировки,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Количество,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * УПЖКХ_Начисления.СуммаНачисленияОборот КАК Сумма,
	|	УПЖКХ_Начисления.ДнейНачисленоОборот
	|ПОМЕСТИТЬ ДетализацииНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачМесяцаОтражения,
	|			&КонМесяцаОтражения,
	|			Месяц,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						ДанныеДляОтражения.ЛицевойСчет,
	|						ДанныеДляОтражения.Услуга
	|					ИЗ
	|						ДанныеДляОтражения КАК ДанныеДляОтражения)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо),ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат),ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))) КАК УПЖКХ_Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОтражения.ЛицевойСчет,
	|	ДанныеДляОтражения.Услуга,
	|	ДанныеДляОтражения.РазделУчета,
	|	ДанныеДляОтражения.ЭтоКорректировка,
	|	ДанныеДляОтражения.ПериодКорректировки,
	|	ДетализацииНачислений.Тариф,
	|	ДетализацииНачислений.Количество,
	|	ДетализацииНачислений.Сумма КАК СуммаОтражения,
	|	ДанныеДляОтражения.ИдентификаторСтроки
	|ИЗ
	|	ДанныеДляОтражения КАК ДанныеДляОтражения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДетализацииНачислений КАК ДетализацииНачислений
	|		ПО ДанныеДляОтражения.ЛицевойСчет = ДетализацииНачислений.ЛицевойСчет
	|			И ДанныеДляОтражения.Услуга = ДетализацииНачислений.Услуга
	|			И ДанныеДляОтражения.РазделУчета = ДетализацииНачислений.РазделУчета
	|			И ДанныеДляОтражения.ЭтоКорректировка = ДетализацииНачислений.ЭтоКорректировка
	|			И ДанныеДляОтражения.ПериодКорректировки = ДетализацииНачислений.ПериодКорректировки";
	
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("НачМесяцаОтражения", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонМесяцаОтражения", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ТаблицаНачислений",  ТаблицаНачислений);
	Запрос.УстановитьПараметр("ПустаяДата",         Дата(1, 1, 1));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуДетализацииНачисленийКОтражению()

// Функция возвращает детальную таблицу данных к отражению.
//
// Параметры:
//  ТаблицаНачислений - таблица значений - начисления к отражению.
//
Функция ПроверитьВозможностьДетализацииИПолучитьДетали(ТаблицаНачислений)
	
	//ВНИМАНИЕ:
	//Механизм временно не используется. 
	//Подробнее см. в комментариях к процедуре УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.
	
	ТаблицаНачислений.Колонки.Добавить("ИдентификаторСтроки", ЭтотОбъект.Метаданные().ТабличныеЧасти.НачисленияКОтражению.Реквизиты.ИдентификаторСтроки.Тип);
	ТаблицаНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	ТаблицаДетализации = ДетализацияНачислений.ВыгрузитьКолонки();
	
	Если НЕ УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями(Дата) Тогда
		Возврат ТаблицаДетализации;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТаблицы Из ТаблицаНачислений Цикл
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		ТекСтрокаТаблицы.ИдентификаторСтроки = ИдентификаторСтроки;
		
	КонецЦикла;
	
	// Получим актуальную таблицу с объемами и тарифами для заполнения данных в табличной части ДетализацияНачислений.
	ТаблицаДетализации = ПолучитьТаблицуДетализацииНачисленийКОтражению(ТаблицаНачислений);
	ТаблицаДетализации.Индексы.Добавить("ИдентификаторСтроки");
	
	Возврат ТаблицаДетализации;
	
КонецФункции

// Перезаполняет данные в табличной части Детализация начислений
//
// Параметры:
//  ИсходныйИдентификаторСтроки  - строка - уникальный идентификатор строки до перезаполнения данных
//  НовыйИдентификаторСтроки     - строка - уникальный идентификатор строки после перезаполнения данных
//
Процедура ОбновитьДанныеДетализации(ТаблицаДетализации, ИсходныйИдентификаторСтроки, НовыйИдентификаторСтроки)
	
	//ВНИМАНИЕ:
	//Механизм временно не используется. 
	//Подробнее см. в комментариях к процедуре УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.
	
	Если ДетализацияНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для обновления данных не анализируем изменения, а удаляем из табличной части 
	// предыдущие данные с отбором по старому идентификатору и добавляем новые из 
	// Таблицы детализации с отбором по новому идентификатору.
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИдентификаторСтроки", ИсходныйИдентификаторСтроки);
	
	МассивСтрокДетализации = ДетализацияНачислений.НайтиСтроки(СтруктураОтбора);
	
	// Очистим предыдущие данные детализации.
	Для каждого СтрокаНаУдаление Из МассивСтрокДетализации Цикл
		ДетализацияНачислений.Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
	СтруктураОтбора.Вставить("ИдентификаторСтроки", НовыйИдентификаторСтроки);
	МассивСтрокДетализации = ТаблицаДетализации.НайтиСтроки(СтруктураОтбора);
	
	// Заполним обновленные данные детализации.
	Для каждого СтрокаНаДобавление Из МассивСтрокДетализации Цикл
		НоваяСтрока = ДетализацияНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаДобавление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет флаги типов документов согласно выбранному типу.
Процедура ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения(ДокументОтражения)
	
	мЭтоАкт        = Ложь;
	мЭтоРеализация = Ложь;
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		
		тмТипДокумента = ТипЗнч(ДокументОтражения);
		
		Если тмТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			мЭтоАкт        = Истина;
		КонецЕсли;
		Если тмТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			мЭтоРеализация = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
			мЭтоАкт        = Истина;
		КонецЕсли;
		Если ТипДокументаОтражения = "Реализация товаров и услуг" Тогда
			мЭтоРеализация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения()

// Проверяет, нужно ли изменять тип докуиента отражения.
Процедура ПроверитьНеобходимостьИзмененияТипаФормируемогоДокументаНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры)
	
	// При отражении начислений по агентской схеме всегда создаются документы реализации товаров и услуг.
	Если ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И Параметры.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема Тогда
			ИзменитьТипДокумента(Истина);
	КонецЕсли;
		
	// При отражении отрицательных начислений начислений всегда создаются документы реализации товаров и услуг.
	Если ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
		Для Каждого ТекСтрокаДетальныхЗаписей Из ТаблицаСгруппированныхДетальныхЗаписей Цикл
			Если ТекСтрокаДетальныхЗаписей.СуммаОтражения < 0 Тогда
				ИзменитьТипДокумента(Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНеобходимостьИзмененияТипаФормируемогоДокументаНовыйМеханизмОтражения()

// Запускает формирование документа к отражению в зависимости от настроек.
Процедура СформироватьДокументОтраженияПоГруппеДанныхКОтражению(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС)
	
	//ОСОБЕННОСТЬ:
	// При группировке строк для последующего формирования документов отражения в БУ
	// учитываются настройки отдельного/совместного учета льгот и пени от начислений.
	// При этом корректировка льгот при раздельном учете льгот от начислений не выполняется:
	// - если льготы вместе с начислениями, тогда они учитываются при корректировке начислений 
	//   (отражаются документами корректировки реализации);
	// - если отдельно, тогда при начислении льгот (отражаются документами корректировки долга).
	
	Если Параметры.ЭтоКорректировкаГруппировка Тогда
		Если Параметры.РазделУчетаГруппировка = Перечисления.УПЖКХ_РазделыУчета.Пени Тогда
			
			// отражаем корректировку пени
			СформироватьДокументКорректировкиРеализации(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, Истина);
			
		ИначеЕсли Параметры.РазделУчетаГруппировка = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
			
			// отражаем корректировку начислений
			СформироватьДокументКорректировкиРеализации(ТаблицаСгруппированныхДетальныхЗаписей, Параметры);
			
		КонецЕсли;
	Иначе
		// При отражении начислений с отрицательными суммами решили создавать документ "Корректировка долга" с видом операции
		// "Списание задолженности". Это сделано потому, что при создании "Акта об оказании производственных услуг" в поля
		// "Цена" и "Сумма" нельзя записывать отрицательные значения.
		Если Параметры.НачислениеСОтрицательнойСуммой Тогда
			
			СформироватьДокументОтраженияНачисленийСОтрицательнымиСуммамиНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры);
			
		ИначеЕсли Параметры.РазделУчетаГруппировка = Перечисления.УПЖКХ_РазделыУчета.Льготы Тогда
			
			// отражаем начисление и корректировку льгот
			СформироватьДокументОтраженияЛьготыНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры);
			
		ИначеЕсли Параметры.РазделУчетаГруппировка = Перечисления.УПЖКХ_РазделыУчета.Пени Тогда
			
			// отражаем начисление пени
			СформироватьДокументОтраженияНачисленийНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС, Истина);
			
		ИначеЕсли Параметры.РазделУчетаГруппировка = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
			
			// отражаем начисления
			СформироватьДокументОтраженияНачисленийНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументОтраженияПоГруппеДанныхКОтражению()

// Сохраняет ссылки на документы отражения и счет-фактуру в табличной части.
Процедура СохранитьРезультатОтраженияВТабличнойЧасти(РезультатОтражения, НомераСтрокДетальныхЗаписей)
	
	Если ЗначениеЗаполнено(РезультатОтражения.ДокументОтражения) Тогда
		
		Для Каждого ТекНомерСтрокиДетальныхЗаписей Из НомераСтрокДетальныхЗаписей Цикл
			
			НачисленияКОтражению[ТекНомерСтрокиДетальныхЗаписей - 1].ДокументОтражения = РезультатОтражения.ДокументОтражения;
			Если ЗначениеЗаполнено(РезультатОтражения.СчетФактура) Тогда
				НачисленияКОтражению[ТекНомерСтрокиДетальныхЗаписей - 1].СчетФактура   = РезультатОтражения.СчетФактура;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультатОтраженияВТабличнойЧасти()

// Возвращает тест запроса для формирования документов отражения в регл.учете
// по новому механизму отражения.
Функция ПолучитьТекстЗапросаГруппировкиДанныхКОтражениюНовыйАлгоритм()
	
	// При отражении могут возникнуть начисления с отрицательной суммой отражения. Например, когда льготы отражаются
	// совместно с начислениями, но месяц документа расчета льготы больше месяца, за который льгота рассчитывается.
	// Также, когда отражается корректировка, при этом документ отражения корректируемого начисления прошлого периода
	// не найден, а сумма корректировки превышает сумму соответствующего начисления (тот же контрагент,
	// договор контрагента, номенклатура и т.д.).
	// В данном случае не получится создать документ "Акт об оказании производственных услуг", так как в поля "Цена"
	// и "Сумма" нельзя записывать отрицательные суммы. Поэтому было решено в таких случаях формировать документ
	// "Корректировка долга" с видом операции "Списание задолженности".
	
	// В запросе детальные записи группируются, затем к исходным детальным записям левым соединением присоединяются
	// сгруппированные записи и в поле "НачислениеСОтрицательнойСуммой" выставляется признак, показывающий
	// наличие отрицательной суммы в соответствующей сгруппированной записи. В последнем пакете запроса последний
	// уровень итогов берется по полю "НачислениеСОтрицательнойСуммой", что позволит далее сформировать для начислений
	// с отрицательными суммами отражения документы "Корректировка долга".
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеКОтражению.НомерСтроки КАК НомерСтроки,
	|	ДанныеКОтражению.РазделУчета КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ЛьготыОтдельно
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|		КОГДА (НЕ &ПениОтдельно
	|					И НЕ ДанныеКОтражению.ПризнакКапРем
	|				ИЛИ НЕ &ПениКапремонтОтдельно
	|					И ДанныеКОтражению.ПризнакКапРем)
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|		ИНАЧЕ ДанныеКОтражению.РазделУчета
	|	КОНЕЦ КАК РазделУчетаГруппировка,
	|	ДанныеКОтражению.ЭтоКорректировка КАК ЭтоКорректировка,
	|	ВЫБОР
	|		КОГДА &ЛьготыОтдельно
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ &ИспользоватьКорректировкиРеализации
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДанныеКОтражению.ЭтоКорректировка
	|				И ДанныеКОтражению.ПериодКорректировки = &МесяцОтражения
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода ССЫЛКА Документ.КВП_ОтражениеНачисленийВРеглУчете
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеКОтражению.ЭтоКорректировка
	|	КОНЕЦ КАК ЭтоКорректировкаГруппировка,
	|	ДанныеКОтражению.ВидКорректировки КАК ВидКорректировки,
	|	ДанныеКОтражению.ПериодКорректировки КАК ПериодКорректировки,
	|	ВЫБОР
	|		КОГДА НЕ &ЛьготыОтдельно
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ДанныеКОтражению.СуммаОтражения КАК СуммаОтражения,
	|	ДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	ДанныеКОтражению.ДокументОтражения КАК ДокументОтражения,
	|	ДанныеКОтражению.Контрагент КАК Контрагент,
	|	ДанныеКОтражению.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеКОтражению.Здание КАК Здание,
	|	ДанныеКОтражению.Номенклатура КАК Номенклатура,
	|	ДанныеКОтражению.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &ЛьготыОтдельно
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.ПустаяСсылка)
	|		ИНАЧЕ ДанныеКОтражению.ВариантПоставкиУслуг
	|	КОНЕЦ КАК ВариантПоставкиУслуг,
	|	ВЫБОР
	|		КОГДА &ЛьготыОтдельно
	|				И ДанныеКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОГДА ДанныеКОтражению.ВариантПоставкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.КупляПродажаУслуг)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеКОтражению.ДоговорПоставщикаУслуг
	|	КОНЕЦ КАК ДоговорПоставщикаУслуг,
	|	ДанныеКОтражению.ПризнакКапРем КАК ПризнакКапРем
	|ПОМЕСТИТЬ врДанныеКОтражениюСДополнительнымиПолями
	|ИЗ
	|	врДополненныеДанныеКОтражению КАК ДанныеКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеКОтражениюСДополнительнымиПолями.НомерСтроки КАК НомерСтроки,
	|	врДанныеКОтражениюСДополнительнымиПолями.РазделУчета КАК РазделУчета,
	|	врДанныеКОтражениюСДополнительнымиПолями.РазделУчетаГруппировка КАК РазделУчетаГруппировка,
	|	врДанныеКОтражениюСДополнительнымиПолями.ЭтоКорректировка КАК ЭтоКорректировка,
	|	врДанныеКОтражениюСДополнительнымиПолями.ЭтоКорректировкаГруппировка КАК ЭтоКорректировкаГруппировка,
	|	ВЫБОР
	|		КОГДА врДанныеКОтражениюСДополнительнымиПолями.ЭтоКорректировкаГруппировка
	|			ТОГДА врДанныеКОтражениюСДополнительнымиПолями.ВидКорректировки
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.ПустаяСсылка)
	|	КОНЕЦ КАК ВидКорректировки,
	|	врДанныеКОтражениюСДополнительнымиПолями.ПериодКорректировки КАК ПериодКорректировки,
	|	врДанныеКОтражениюСДополнительнымиПолями.СуммаОтражения КАК СуммаОтражения,
	|	врДанныеКОтражениюСДополнительнымиПолями.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДанныеКОтражениюСДополнительнымиПолями.ДокументОтражения КАК ДокументОтражения,
	|	врДанныеКОтражениюСДополнительнымиПолями.Контрагент КАК Контрагент,
	|	врДанныеКОтражениюСДополнительнымиПолями.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	врДанныеКОтражениюСДополнительнымиПолями.Здание КАК Здание,
	|	врДанныеКОтражениюСДополнительнымиПолями.Номенклатура КАК Номенклатура,
	|	врДанныеКОтражениюСДополнительнымиПолями.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	врДанныеКОтражениюСДополнительнымиПолями.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врДанныеКОтражениюСДополнительнымиПолями.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	врДанныеКОтражениюСДополнительнымиПолями.ПризнакКапРем КАК ПризнакКапРем
	|ПОМЕСТИТЬ врДанныеКОтражениюПереопределениеВидаКорректировки
	|ИЗ
	|	врДанныеКОтражениюСДополнительнымиПолями КАК врДанныеКОтражениюСДополнительнымиПолями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.РазделУчетаГруппировка КАК РазделУчетаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировкаГруппировка КАК ЭтоКорректировкаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВидКорректировки КАК ВидКорректировки,
	|	СУММА(врДанныеКОтражениюПереопределениеВидаКорректировки.СуммаОтражения) КАК СуммаОтражения,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтражения КАК ДокументОтражения,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Контрагент КАК Контрагент,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Номенклатура КАК Номенклатура,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ПризнакКапРем КАК ПризнакКапРем
	|ПОМЕСТИТЬ врДанныеКОтражениюСГруппировкой
	|ИЗ
	|	врДанныеКОтражениюПереопределениеВидаКорректировки КАК врДанныеКОтражениюПереопределениеВидаКорректировки
	|
	|СГРУППИРОВАТЬ ПО
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Контрагент,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорКонтрагента,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВариантПоставкиУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорПоставщикаУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.РазделУчетаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировкаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтражения,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Номенклатура,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.НоменклатурнаяГруппа,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ПризнакКапРем,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВидКорректировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.НомерСтроки КАК НомерСтроки,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.РазделУчета КАК РазделУчета,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.РазделУчетаГруппировка КАК РазделУчетаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировка КАК ЭтоКорректировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировкаГруппировка КАК ЭтоКорректировкаГруппировка,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВидКорректировки КАК ВидКорректировки,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ПериодКорректировки КАК ПериодКорректировки,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.СуммаОтражения КАК СуммаОтражения,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтражения КАК ДокументОтражения,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Контрагент КАК Контрагент,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Здание КАК Здание,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.Номенклатура КАК Номенклатура,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	врДанныеКОтражениюПереопределениеВидаКорректировки.ПризнакКапРем КАК ПризнакКапРем,
	|	ВЫБОР
	|		КОГДА врДанныеКОтражениюСГруппировкой.СуммаОтражения < 0
	|				И НЕ врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировкаГруппировка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислениеСОтрицательнойСуммой
	|ПОМЕСТИТЬ врДанныеКОтражениюСПризнакомНачисленийСОтрицательнымиСуммами
	|ИЗ
	|	врДанныеКОтражениюПереопределениеВидаКорректировки КАК врДанныеКОтражениюПереопределениеВидаКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ врДанныеКОтражениюСГруппировкой КАК врДанныеКОтражениюСГруппировкой
	|		ПО врДанныеКОтражениюПереопределениеВидаКорректировки.Контрагент = врДанныеКОтражениюСГруппировкой.Контрагент
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорКонтрагента = врДанныеКОтражениюСГруппировкой.ДоговорКонтрагента
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ВариантПоставкиУслуг = врДанныеКОтражениюСГруппировкой.ВариантПоставкиУслуг
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ДоговорПоставщикаУслуг = врДанныеКОтражениюСГруппировкой.ДоговорПоставщикаУслуг
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.РазделУчетаГруппировка = врДанныеКОтражениюСГруппировкой.РазделУчетаГруппировка
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ЭтоКорректировкаГруппировка = врДанныеКОтражениюСГруппировкой.ЭтоКорректировкаГруппировка
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода = врДанныеКОтражениюСГруппировкой.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ДокументОтражения = врДанныеКОтражениюСГруппировкой.ДокументОтражения
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.Номенклатура = врДанныеКОтражениюСГруппировкой.Номенклатура
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.НоменклатурнаяГруппа = врДанныеКОтражениюСГруппировкой.НоменклатурнаяГруппа
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ВидКорректировки = врДанныеКОтражениюСГруппировкой.ВидКорректировки
	|			И врДанныеКОтражениюПереопределениеВидаКорректировки.ПризнакКапРем = врДанныеКОтражениюСГруппировкой.ПризнакКапРем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКОтражению.НомерСтроки КАК НомерСтроки,
	|	ДанныеКОтражению.РазделУчетаГруппировка КАК РазделУчетаГруппировка,
	|	ДанныеКОтражению.ЭтоКорректировкаГруппировка КАК ЭтоКорректировкаГруппировка,
	|	ДанныеКОтражению.ВидКорректировки КАК ВидКорректировки,
	|	ДанныеКОтражению.ПериодКорректировки КАК ПериодКорректировки,
	|	ДанныеКОтражению.СуммаОтражения КАК СуммаОтражения,
	|	ДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	ДанныеКОтражению.ДокументОтражения КАК ДокументОтражения,
	|	ДанныеКОтражению.Контрагент КАК Контрагент,
	|	ДанныеКОтражению.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеКОтражению.Здание КАК Здание,
	|	ДанныеКОтражению.Номенклатура КАК Номенклатура,
	|	ДанныеКОтражению.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДанныеКОтражению.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	ДанныеКОтражению.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	ДанныеКОтражению.ПризнакКапРем КАК ПризнакКапРем,
	|	ДанныеКОтражению.НачислениеСОтрицательнойСуммой КАК НачислениеСОтрицательнойСуммой
	|ИЗ
	|	врДанныеКОтражениюСПризнакомНачисленийСОтрицательнымиСуммами КАК ДанныеКОтражению
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаОтражения)
	|ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ВариантПоставкиУслуг,
	|	ДоговорПоставщикаУслуг,
	|	РазделУчетаГруппировка,
	|	ЭтоКорректировкаГруппировка,
	|	ВидКорректировки,
	|	ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	ДокументОтражения,
	|	ПризнакКапРем,
	|	НачислениеСОтрицательнойСуммой";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Вызывает создание документов для каждой строки табличной части.
Процедура СформироватьДокументыНовыйМеханизмОтражения(ПравитьСуществующие = Ложь)
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Определение служебных параметров:
	
	// Получим параметры отражения льгот и пени.
	ЛьготыОтдельно = мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот = Перечисления.УПЖКХ_СпособыОтраженияЛьгот.ОтдельноОтНачислений;
	
	ПениОтдельно = (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
					Или мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС);
	
	ПениКапремонтОтдельно = (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
							Или мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС);
	
	// Структура параметров, содержащая параметры группировки, по которым формируется документ.
	Параметры = Новый Структура("Контрагент,
								|ДоговорКонтрагента,
								|ВариантПоставкиУслуг,
								|ДоговорПоставщикаУслуг,
								|РазделУчетаГруппировка,
								|ЭтоКорректировкаГруппировка,
								|ВидКорректировки,
								|ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
								|ДокументОтражения,
								|СуммаОтражения,
								|НомераСтрокДетальныхЗаписей,
								|ПризнакКапРем,
								|НачислениеСОтрицательнойСуммой");
	
	// Временная таблица, в которую помещаем детальные записи к отражению,
	// а затем группируем их по всем полям с суммированием поля "СуммаОтражения".
	ТаблицаСгруппированныхДетальныхЗаписей = Новый ТаблицаЗначений;
	
	// Колонка, содержащая суммируемое поле с суммой отражения.
	ТаблицаСгруппированныхДетальныхЗаписей.Колонки.Добавить("СуммаОтражения");
	
	// Определим строку полей группировки детальных записей.
	СтрокаПолейГруппировкиДетальныхЗаписей  = "";
	СтрокаПолейСуммированияДетальныхЗаписей = "СуммаОтражения";
	
	// Массив полей группировки определяется единожды и используется для таблицы и строки группировки.
	МассивПолейГруппировкиДетальныхЗаписей = Новый Массив;
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("Контрагент");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ДоговорКонтрагента");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ВариантПоставкиУслуг");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ДоговорПоставщикаУслуг");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("РазделУчетаГруппировка");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ЭтоКорректировкаГруппировка");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ВидКорректировки");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ДокументОтражения");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("Номенклатура");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("НоменклатурнаяГруппа");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("ПризнакКапРем");
	МассивПолейГруппировкиДетальныхЗаписей.Добавить("НачислениеСОтрицательнойСуммой");
	
	Для Каждого ТекПолеГруппировкиДетальныхЗаписей Из МассивПолейГруппировкиДетальныхЗаписей Цикл
		
		// Заполнение таблицы и строки группировки.
		ТаблицаСгруппированныхДетальныхЗаписей.Колонки.Добавить(ТекПолеГруппировкиДетальныхЗаписей);
		СтрокаПолейГруппировкиДетальныхЗаписей = СтрокаПолейГруппировкиДетальныхЗаписей + ТекПолеГруппировкиДетальныхЗаписей + ",";
		
	КонецЦикла;
	
	// Исключим последний символ "," в конце строки полей группировки.
	СтрокаПолейГруппировкиДетальныхЗаписей = Лев(СтрокаПолейГруппировкиДетальныхЗаписей, СтрДлина(СтрокаПолейГруппировкиДетальныхЗаписей) - 1);
	
	// Определим кэш номенклатурных групп здания в соответствии.
	мНоменклатурныеГруппыЗданий = Новый Соответствие;
	
	мСчетаУчетаКомпенсатораЛьгот = Неопределено;
	
	// Получим услуги, для которых не задана номенклатура.
	// Суммы по данным услугам не попадут в документы отражения.
	МассивУслугБезНоменклатуры = ПолучитьМассивУслугБезНоменклатуры();
	
	Если МассивУслугБезНоменклатуры.Количество() > 0 Тогда
		
		СтрокаДляСообщения = "";
		
		Для Каждого Услуга Из МассивУслугБезНоменклатуры Цикл
			СтрокаДляСообщения = СтрокаДляСообщения + Услуга + ", ";
		КонецЦикла;
		
		СтрокаДляСообщения = Лев(СтрокаДляСообщения, СтрДлина(СтрокаДляСообщения) - 2);
		
		ТекстСообщения = "Для следующих услуг не задана номенклатура, суммы по этим услугам не отражены: " + СтрокаДляСообщения + ".";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
		
	КонецЕсли;
	
	// Алгоритм формирования:
	// 1. По данным табличной части документа получаем таблицу начислений.
	// 2. Отбираем среди данных те, что отмечены к отражению.
	// 3. Дополняем данными для отражения: Номенклатура, НоменклатурнаяГруппа, ДоговорКонтрагента, ВариантПоставкиУслуг, ДоговорПоставщикаУслуг.
	// 4. Сворачиваем с учетом настроек уч.политики по отражению льгот и пени, настройки использования корректировок реализации, группируем по параметрам.
	// 5. Для каждой группы строк формируем один документ отражения в регл.учете и регистрируем счет-фактуру (СФ).
	// 6. Ищем связанные строки в ТЧ НачисленияКОтражению: для группы строк указываем одну и ту же ссылку на сформированные документы.
	
	// Выполняем исходный запрос к таблице начислений к отражению,
	// которая дополняется сведениями для отражения в регл. учете.
	Запрос = Документы.КВП_ОтражениеНачисленийВРеглУчете.ВыполнитьЗапросПоНачислениямКОтражениюСДополнительнымиСведениями(Ссылка, Организация, Дата, , мНастройкиУчетнойПолитикиТСЖ, МассивУслугБезНоменклатуры);
	
	Запрос.УстановитьПараметр("ЛьготыОтдельно",                      ЛьготыОтдельно);
	Запрос.УстановитьПараметр("ПениОтдельно",                        ПениОтдельно);
	Запрос.УстановитьПараметр("ПениКапремонтОтдельно",               ПениКапремонтОтдельно);
	Запрос.УстановитьПараметр("МесяцОтражения",                      НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",                         Организация);
	Запрос.УстановитьПараметр("ИспользоватьКорректировкиРеализации", УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете(Дата));
	
	ВключатьВариантПоставкиУслуг = (ТипДокументаОтражения = "Акт об оказании производственных услуг");
	Запрос.УстановитьПараметр("ВключатьВариантПоставкиУслуг", ВключатьВариантПоставкиУслуг);
	
	// Текст запроса группировки данных к отражению.
	Запрос.Текст = ПолучитьТекстЗапросаГруппировкиДанныхКОтражениюНовыйАлгоритм();
	
	Результат = Запрос.Выполнить();
	
	// При необходимости заполним соответствие размеров ставок НДС.
	СоответствиеРазмеровСтавокНДС = Неопределено;
	Если УчитыватьНДС Тогда
		СоответствиеРазмеровСтавокНДС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьРазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете(Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура"), Дата);
	КонецЕсли;
	
	// Контрагент.
	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		// Договор контрагента.
		ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
			
			// Вариант поставки услуг.
			ВыборкаВариантПоставкиУслуг = ВыборкаДоговорКонтрагента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВариантПоставкиУслуг.Следующий() Цикл
				
				// Договор поставщика услуг.
				ВыборкаДоговорПоставщикаУслуг = ВыборкаВариантПоставкиУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДоговорПоставщикаУслуг.Следующий() Цикл
					
					// Раздел учета.
					ВыборкаРазделУчетаГруппировка = ВыборкаДоговорПоставщикаУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаРазделУчетаГруппировка.Следующий() Цикл
						
						// Признак корректировки.
						ВыборкаЭтоКорректировкаГруппировка = ВыборкаРазделУчетаГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаЭтоКорректировкаГруппировка.Следующий() Цикл
							
							// Вид корректировки.
							ВыборкаВидКорректировки = ВыборкаЭтоКорректировкаГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаВидКорректировки.Следующий() Цикл
								
								// Документ отражения корректируемого начисления.
								ВыборкаДокументОтраженияКорректируемогоНачисленияПрошлогоПериода = ВыборкаВидКорректировки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаДокументОтраженияКорректируемогоНачисленияПрошлогоПериода.Следующий() Цикл
									
									// Документ отражения.
									ВыборкаДокументОтражения = ВыборкаДокументОтраженияКорректируемогоНачисленияПрошлогоПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ВыборкаДокументОтражения.Следующий() Цикл
										
										ЕстьДокумент = ЗначениеЗаполнено(ВыборкаДокументОтражения.ДокументОтражения);
										Если ЕстьДокумент И ВыборкаДокументОтражения.ДокументОтражения.Проведен И НЕ ПравитьСуществующие Тогда
											Продолжить;
										КонецЕсли;
										
										// Капитальный ремонт.
										ВыборкаПризнакКапРем = ВыборкаДокументОтражения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
										Пока ВыборкаПризнакКапРем.Следующий() Цикл
											
											// Начисления с отрицательной суммой.
											ВыборкаНачисленияСОтрицательнойСуммой = ВыборкаПризнакКапРем.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока ВыборкаНачисленияСОтрицательнойСуммой.Следующий() Цикл
												
												// Параметры отражения заполним по данным последней группировки,
												// так как общая сумма группировки не содержится в детальных записях.
												ЗаполнитьЗначенияСвойств(Параметры, ВыборкаНачисленияСОтрицательнойСуммой);
												
												// Свертку данных к отражению производим здесь, так как полноценная свертка данных в запросе
												// не выполняется из-за наличия поля "Номер строки" в детальных записях.
												ТаблицаСгруппированныхДетальныхЗаписей.Очистить();
												
												// Служебная колонка, которая используется только формирования списка номеров строк,
												// соответствующих группировке. Очищается при окончательной группировке таблицы до формирования документов.
												Если ТаблицаСгруппированныхДетальныхЗаписей.Колонки.Найти("НомерСтроки") = Неопределено Тогда
													ТаблицаСгруппированныхДетальныхЗаписей.Колонки.Добавить("НомерСтроки");
												КонецЕсли;
												
												// Массив хранит различные номенклатурные группы, которые нужны
												// для отражения начислений актами об оказании услуг.
												МассивРазличныхНоменклатурныхГрупп = Новый Массив;
												
												// Список номеров строк для вывода сообщений об ошибках.
												врНомераСтрокДетальныхЗаписей = Новый Массив;
												
												// Детальная выборка.
												ДанныеКОтражению = ВыборкаНачисленияСОтрицательнойСуммой.Выбрать();
												Пока ДанныеКОтражению.Следующий() Цикл
													
													// Добавляем строку в таблицу и заполняем ее.
													СтрокаДетальныхЗаписей = ТаблицаСгруппированныхДетальныхЗаписей.Добавить();
													ЗаполнитьЗначенияСвойств(СтрокаДетальныхЗаписей, ДанныеКОтражению);
													
													// Определение номенклатурной группы здания для строки детальных записей.
													НоменклатурнаяГруппаЗдания = мНоменклатурныеГруппыЗданий[ДанныеКОтражению.Здание];
													Если НоменклатурнаяГруппаЗдания = Неопределено Тогда
														НоменклатурнаяГруппаЗдания = ПолучитьНоменклатурнуюГруппуДляОбъектаУчета(ДанныеКОтражению.Здание);
														мНоменклатурныеГруппыЗданий.Вставить(ДанныеКОтражению.Здание, НоменклатурнаяГруппаЗдания);
													КонецЕсли;
													
													Если ЗначениеЗаполнено(НоменклатурнаяГруппаЗдания) Тогда
														// Если номенклатурная группа определена для здания, берем ее.
														СтрокаДетальныхЗаписей.НоменклатурнаяГруппа = НоменклатурнаяГруппаЗдания;
													Иначе
														// В противном случае берем ту номенклатурную группу, которая указана в номенклатуре.
														СтрокаДетальныхЗаписей.НоменклатурнаяГруппа = ДанныеКОтражению.НоменклатурнаяГруппа;
													КонецЕсли;
													
													// Добавляем номенклатурную группу в массив, если ее еще не было.
													Если МассивРазличныхНоменклатурныхГрупп.Найти(СтрокаДетальныхЗаписей.НоменклатурнаяГруппа) = Неопределено Тогда
														МассивРазличныхНоменклатурныхГрупп.Добавить(СтрокаДетальныхЗаписей.НоменклатурнаяГруппа);
													КонецЕсли;
													
													врНомераСтрокДетальныхЗаписей.Добавить(ДанныеКОтражению.НомерСтроки);
													
												КонецЦикла;
												
												// ПРОВЕРКА ЗАПОЛНЕНИЯ
												// Проверка заполнения основных параметров отражения, без которых формирование типовых документов считаем недопустимым.
												Отказ = Ложь;
												Если Не ЗначениеЗаполнено(ВыборкаНачисленияСОтрицательнойСуммой.Контрагент)
												 Или Не ЗначениеЗаполнено(ВыборкаНачисленияСОтрицательнойСуммой.ДоговорКонтрагента) Тогда
													
													Отказ = Истина;
													
													ПредставлениеСтрок = СформироватьПредставлениеСтрок(врНомераСтрокДетальныхЗаписей);
													
													ТекстСообщения = "В строке №" + ПредставлениеСтрок + " не сформирован документ отражения: не получены сведения о контрагенте и договоре взаиморасчетов.";
													УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
													
												КонецЕсли;
												
												// Формирование документа отражения по текущей группировке и набору детальных записей.
												Если Не Отказ И ТаблицаСгруппированныхДетальныхЗаписей.Количество() > 0 Тогда
													
													// Если формируем акт об оказании услуг, то разобъем начисления по номенклатурным группам
													// и будем формировать документы отражения с группировкой по ним.
													ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения(Параметры.ДокументОтражения);
													
													Если ВыборкаНачисленияСОтрицательнойСуммой.НачислениеСОтрицательнойСуммой Тогда
														
														// Скопируем таблицу детальных записей и свернем полученную таблицу для получения
														// итоговых сумм для отражения в документах (например, при отражении льгот 
														// совместно с начислениями, сумма льготы вычтется из суммы начисления).
														врТаблицаСгруппированныхДетальныхЗаписей = ТаблицаСгруппированныхДетальныхЗаписей.Скопировать();
														врТаблицаСгруппированныхДетальныхЗаписей.Свернуть(СтрокаПолейГруппировкиДетальныхЗаписей, СтрокаПолейСуммированияДетальныхЗаписей);
														
														// Создадим структуру для отбора строк из исходной таблицы детальных записей.
														СтруктураОтбора = Новый Структура;
														Для Каждого ПолеГруппировки Из МассивПолейГруппировкиДетальныхЗаписей Цикл
															СтруктураОтбора.Вставить(ПолеГруппировки);
														КонецЦикла;
														
														// При отражении начислений с отрицательными суммами будем формировать отдельный документ
														// "Корректировка долга" с видом операции "Списание задолженности" для каждой номенклатуры,
														// так как в документе необходимо указывать счет списания дебиторской задолженности (счет
														// учета номенклатуры).
														Для Каждого СтрокаДетальныхЗаписей Из врТаблицаСгруппированныхДетальныхЗаписей Цикл
															
															ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДетальныхЗаписей);
															
															// Найдем в таблице детальных записей все строки, соответствующие строке из сгруппированной
															// таблицы, для которой будем создавать документ отражения.
															МассивСтрокДетальныхЗаписей = ТаблицаСгруппированныхДетальныхЗаписей.НайтиСтроки(СтруктураОтбора);
															
															// Определим номера строк детальных записей для их последующего использования
															// в сообщениях и заполнении ссылок на сформированные документы.
															НомераСтрокДетальныхЗаписей = Новый Массив;
															Для Каждого Строка Из МассивСтрокДетальныхЗаписей Цикл
																НомераСтрокДетальныхЗаписей.Добавить(Строка.НомерСтроки);
															КонецЦикла;
															
															Параметры.Вставить("НомераСтрокДетальныхЗаписей", НомераСтрокДетальныхЗаписей);
															
															// Так как для каждой строки детальных записей будем создавать отдельный документ,
															// а в процедуру формирования документов отражения должна передаваться таблица значений,
															// то создадим временную таблицу значений и добавим в нее одну строку, соответствующую
															// строке детальных записей, для которой создаем документ отражения.
															врТаблицаСоСтрокойДетальныхЗаписей = врТаблицаСгруппированныхДетальныхЗаписей.СкопироватьКолонки();
															
															НоваяСтрока = врТаблицаСоСтрокойДетальныхЗаписей.Добавить();
															ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДетальныхЗаписей);
															
															СформироватьДокументОтраженияПоГруппеДанныхКОтражению(врТаблицаСоСтрокойДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС);
															
														КонецЦикла;
														
													ИначеЕсли мЭтоАкт Тогда
														
														// Если формируем акты об оказании услуг, то формирование документов отражения
														// производим с группировкой по номенклатурным группам, так как они указываются в шапке акта.
														Для Каждого ТекНоменклатурнаяГруппа Из МассивРазличныхНоменклатурныхГрупп Цикл
															
															// Из таблицы сгруппированных записей отбираем данные по текущей номенклатурной группе.
															СтрокиПоНоменклатурнойГруппе = ТаблицаСгруппированныхДетальныхЗаписей.НайтиСтроки(Новый Структура("НоменклатурнаяГруппа", ТекНоменклатурнаяГруппа));
															врТаблицаСгруппированныхДетальныхЗаписей = ТаблицаСгруппированныхДетальныхЗаписей.Скопировать(СтрокиПоНоменклатурнойГруппе);
															
															// Определим номера строк детальных записей для их последующего использования
															// в сообщениях и заполнении ссылок на сформированные документы.
															НомераСтрокДетальныхЗаписей = врТаблицаСгруппированныхДетальныхЗаписей.ВыгрузитьКолонку("НомерСтроки");
															Параметры.Вставить("НомераСтрокДетальныхЗаписей", НомераСтрокДетальныхЗаписей);
															
															// Сворачиваем таблицу детальных записей для последующей ее передичи процедурам формирования документов.
															врТаблицаСгруппированныхДетальныхЗаписей.Свернуть(СтрокаПолейГруппировкиДетальныхЗаписей, СтрокаПолейСуммированияДетальныхЗаписей);
															
															// Если номенклатурная группа пустая, то документ отражения (акт) не формируем.
															Если Не ЗначениеЗаполнено(ТекНоменклатурнаяГруппа) Тогда
																
																ПредставлениеСтрок = СформироватьПредставлениеСтрок(НомераСтрокДетальныхЗаписей);
																
																ТекстСообщения = "В строке №" + ПредставлениеСтрок + " не сформирован документ отражения: не получены сведения о номенклатурной группе.";
																УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
																
																Продолжить;
																
															КонецЕсли;
															
															СформироватьДокументОтраженияПоГруппеДанныхКОтражению(врТаблицаСгруппированныхДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС);
															
														КонецЦикла;
														
													Иначе
														
														// Определим номера строк детальных записей для их последующего использования
														// в сообщениях и заполнении ссылок на сформированные документы.
														НомераСтрокДетальныхЗаписей = ТаблицаСгруппированныхДетальныхЗаписей.ВыгрузитьКолонку("НомерСтроки");
														Параметры.Вставить("НомераСтрокДетальныхЗаписей", НомераСтрокДетальныхЗаписей);
													
														// Сворачиваем таблицу детальных записей для последующей ее передичи процедурам формирования документов.
														ТаблицаСгруппированныхДетальныхЗаписей.Свернуть(СтрокаПолейГруппировкиДетальныхЗаписей, СтрокаПолейСуммированияДетальныхЗаписей);
														
														СформироватьДокументОтраженияПоГруппеДанныхКОтражению(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, СоответствиеРазмеровСтавокНДС);
														
													КонецЕсли;
													
												КонецЕсли;
												
											КонецЦикла;
										КонецЦикла;
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// УЧЕСТЬ в АЛГОРИТМЕ:
	
	//УсловиеОтрицательныхСумм = "ИСТИНА";
	//
	//// Отражать начисления по договорам с видом "Прочее" типовыми документами нельзя - 
	//// это ограничение типовых документов.
	//ТекстДопУсловия = ТекстДопУсловия + " И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	//
	//Если НЕ мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
	//	
	//	УсловиеОтрицательныхСумм = УсловиеОтрицательныхСумм + "
	//	|	И ЕСТЬNULL(ТаблицаОстатков.СуммаОтражения, 0) + ЕСТЬNULL(ТаблицаДвиженийДокумента.СуммаОтражения, 0) > 0";
	//	
	//КонецЕсли;
	
	
	// УЧЕСТЬ, что ранее отображалось состояние выполнения.
	// Может быть стоит тоже реализовать.
	
	//#Если Клиент Тогда
	//		Состояние("Обработана строка № " + ТекНайденнаяСтрока.НомерСтроки + " / " + КоличествоСтрок);
	//#КонецЕсли
	
КонецПроцедуры // СформироватьДокументыНовыйМеханизмОтражения()

// Cоздаёт документ отражения льготы для группы строк табличной части.
//
Процедура СформироватьДокументОтраженияЛьготыНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры)
	
	РезультатОтражения = Новый Структура("Отражено,
										 |ДокументОтражения,
										 |СчетФактура", Ложь);
	
	ЕстьДокумент = ЗначениеЗаполнено(Параметры.ДокументОтражения);
	Если ЕстьДокумент И ТипЗнч(Параметры.ДокументОтражения) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		ДокументОбъект = Параметры.ДокументОтражения.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
		
	Иначе
		
		ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	
		ДокументОбъект.Дата                   = КонецМесяца(Дата);
		ДокументОбъект.Организация            = Организация;
		ДокументОбъект.ВидОперации            = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
		ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		
		ДокументОбъект.ВалютаДокумента    = мВалютаРегламентированногоУчета;
		ДокументОбъект.КурсДокумента      = 1;
		ДокументОбъект.КратностьДокумента = 1;
		
		ДокументОбъект.КонтрагентДебитор  = Параметры.Контрагент;
		ДокументОбъект.КонтрагентКредитор = КонтрагентКомпенсацииЛьгот;
		
		Если мСчетаУчетаКомпенсатораЛьгот = Неопределено Тогда
			мСчетаУчетаКомпенсатораЛьгот 
				 = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация,
													ДокументОбъект.КонтрагентКредитор, ДоговорКонтрагентаКомпенсацииЛьгот);
		КонецЕсли;
		
		ДокументОбъект.СчетДт = мСчетаУчетаКомпенсатораЛьгот.СчетАвансовПокупателя;
		ДокументОбъект.СчетКт = мСчетаУчетаКомпенсатораЛьгот.СчетРасчетовПокупателя;
		
	КонецЕсли;
	
	// Получение настроек учетной политики для организации.
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	
	// Табличная часть.
	НоваяСтрока                       = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
	НоваяСтрока.ДоговорКонтрагента    = Параметры.ДоговорКонтрагента;
	НоваяСтрока.КорДоговорКонтрагента = ДоговорКонтрагентаКомпенсацииЛьгот;
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация,
	                                            ДокументОбъект.КонтрагентДебитор, НоваяСтрока.ДоговорКонтрагента);
	Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		НоваяСтрока.КорСчетУчетаРасчетов = ДокументОбъект.СчетДт;
	ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		НоваяСтрока.КорСчетУчетаРасчетов = ДокументОбъект.СчетДт;
	КонецЕсли;
	
	// Если отражаются услуги, являющиеся услугами кап. ремонта, а кап. ремонт отражается по заданному счету учета,
	// то в качестве счета расчета с контрагентом установим данный счет.
	Если Параметры.ПризнакКапРем Тогда
		НоваяСтрока.СчетУчетаРасчетов = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
	КонецЕсли;
	
	НоваяСтрока.Сумма               = Параметры.СуммаОтражения;
	НоваяСтрока.СуммаВзаиморасчетов = Параметры.СуммаОтражения;
	
	НоваяСтрока.КурсВзаиморасчетов      = 1;
	НоваяСтрока.КратностьВзаиморасчетов = 1;
	
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий   = "Документ сгенерирован автоматически для отражения льгот.";
	
	// Непосредственная запись и проведение документа.
	ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ДокументОбъект, Параметры, РезультатОтражения, "Корректировка долга");
	
	// Запишем результат отражения (ссылки на документы отражения) в табличную часть.
	СохранитьРезультатОтраженияВТабличнойЧасти(РезультатОтражения, Параметры.НомераСтрокДетальныхЗаписей);
	
КонецПроцедуры // СформироватьДокументОтраженияЛьготыНовыйМеханизмОтражения()

//Возвращает вид операции для документа корректировка реализации.
Функция ОпределитьВидОперацииКорректировкиРеализации(ВидКорректировки)
	
	ВидОперацииКорректировкиРеализации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ПустаяСсылка();
	
	Если ВидКорректировки = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.Перерасчет Тогда
		
		ВидОперацииКорректировкиРеализации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		
	ИначеЕсли ВидКорректировки = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.ИсправлениеОшибки Тогда
		
		ВидОперацииКорректировкиРеализации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
		
	КонецЕсли;
	
	Возврат ВидОперацииКорректировкиРеализации;
	
КонецФункции // ОпределитьВидОперацииКорректировкиРеализации()

// Cоздаёт документ корректировки реализации для группы строк табличной части.
//
Процедура СформироватьДокументКорректировкиРеализации(ТаблицаСгруппированныхДетальныхЗаписей, Параметры, ОтражениеПени = Ложь)
	
	РезультатОтражения = Новый Структура("Отражено,
										 |ДокументОтражения,
										 |СчетФактура", Ложь);
	
	КомментарийНачисления = "Документ сгенерирован автоматически для корректировки ";
	
	Если ОтражениеПени Тогда
		КомментарийНачисления = КомментарийНачисления + "пени.";
	Иначе
		КомментарийНачисления = КомментарийНачисления + "начислений.";
	КонецЕсли;
	
	// Шапка документа.
	ЕстьДокумент = ЗначениеЗаполнено(Параметры.ДокументОтражения);
	Если ЕстьДокумент И ТипЗнч(Параметры.ДокументОтражения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ДокументОбъект = Параметры.ДокументОтражения.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения(Параметры.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода);
		ДокументОбъект.Услуги.Очистить();
		Если мЭтоРеализация Тогда
			ДокументОбъект.АгентскиеУслуги.Очистить();
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
		
	КонецЕсли;
	
	ДокументОбъект.Дата        = КонецМесяца(Дата);
	ДокументОбъект.Организация = Организация;
	
	ДокументОбъект.ВидОперации        = ОпределитьВидОперацииКорректировкиРеализации(Параметры.ВидКорректировки);
	
	ДокументОбъект.ДокументРеализации = Параметры.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода;
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(ДокументОбъект);
	
	ДокументОбъект.КорректироватьБУиНУ       = Документы.КорректировкаРеализации.ДоступнаКорректировкаБУиНУ(ДокументОбъект.ДокументРеализации);
	ДокументОбъект.КорректироватьНДС         = Истина;
	ДокументОбъект.ПризнаватьЗачитыватьАванс = Истина;
	
	Если ТипЗнч(Параметры.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 ИЛИ ТипЗнч(Параметры.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода, "Грузоотправитель, Грузополучатель");
		ДокументОбъект.Грузоотправитель   = ЗначенияРеквизитов.Грузоотправитель;
		ДокументОбъект.Грузополучатель    = ЗначенияРеквизитов.Грузополучатель;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		ДокументОбъект.ВидОперации,ДокументОбъект.ДокументРеализации, ДокументОбъект.ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыИсправления);
	
	Если ДокументОбъект.КорректироватьБУиНУ Тогда
		ДокументРеализацииСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументОбъект.ДокументРеализации, Истина);
		
		РеквизитыДокументаРеализации = Неопределено;
		Если ЗначениеЗаполнено(ДокументРеализацииСсылка) Тогда
			РеквизитыДокументаРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализацииСсылка, "Дата");
		КонецЕсли;
		ДатаДокументаРеализации = ?(РеквизитыДокументаРеализации <> Неопределено, РеквизитыДокументаРеализации.Дата, '00010101');
		
		Если ЗначениеЗаполнено(ДокументРеализацииСсылка) 
			И Год(ДатаДокументаРеализации) < Год(Дата) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяПрочихДоходовИРасходов) Тогда
				ДокументОбъект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
			КонецЕсли;
			
			ДокументОбъект.ОтчетностьПодписана = ОтчетностьПодписана;
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий   = КомментарийНачисления;
	
	Если Параметры.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема Тогда
		ИмяТЧ = "АгентскиеУслуги";
	Иначе
		ИмяТЧ = "Услуги";
	КонецЕсли;
	
	// Табличная часть документа.
	Для Каждого ТекСтрокаДетальныхЗаписей Из ТаблицаСгруппированныхДетальныхЗаписей Цикл
		
		// Реализован учет корректировок по сумме, без учета изменений счетов и параметров типа НДС и пр.
		
		НайденныеСтроки = ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("Номенклатура", ТекСтрокаДетальныхЗаписей.Номенклатура));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			ТекСтрока.Цена     = ТекСтрока.Цена + ТекСтрокаДетальныхЗаписей.СуммаОтражения;
			ТекСтрока.Сумма    = ТекСтрока.Цена;
			
			ТекСтрока.СуммаНДС =  УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма,
										СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
			
			Если ТекСтрока.Сумма < 0 Тогда
				
				ПредставлениеСтрок = СформироватьПредставлениеСтрок(Параметры.НомераСтрокДетальныхЗаписей);
				
				ТекстСообщения = "В строке № " + ПредставлениеСтрок +  " не сформирован документ отражения ""Корректировка реализации"": для номенклатуры """ + ТекСтрока.Номенклатура + """ сумма корректировки больше суммы начисления.";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Непосредственная запись и проведение документа.
	ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ДокументОбъект, Параметры, РезультатОтражения, "Корректировка реализации");
	
	// Если отражаются пени, а в УП установлено, что пени должны отражаться по ставке "Без НДС",
	// или отражаются суммы по услугам кап. ремонта, то СФ формировать не будем.
	Если РезультатОтражения.Отражено
		 И Не (ОтражениеПени И мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС)
		 И Не Параметры.ПризнакКапРем Тогда
		ЗарегистрироватьСчетФактуру(Параметры, ДокументОбъект.Ссылка, РезультатОтражения, КомментарийНачисления);
	КонецЕсли;
	
	// Запишем результат отражения (ссылки на документы отражения и счет-фактуру) в табличную часть.
	СохранитьРезультатОтраженияВТабличнойЧасти(РезультатОтражения, Параметры.НомераСтрокДетальныхЗаписей);
	
КонецПроцедуры // СформироватьДокументКорректировкиРеализации()

// Cоздаёт документ отражения начислений для указанной строки табличной части.
//
Процедура СформироватьДокументОтраженияНачисленийНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей,
																		Параметры,
																		СоответствиеРазмеровСтавокНДС,
																		ОтражениеПени = Ложь)
	
	РезультатОтражения = Новый Структура("Отражено,
										 |ДокументОтражения,
										 |СчетФактура", Ложь);
	
	КомментарийНачисления = "Документ сгенерирован автоматически для отражения ";
	
	Если ОтражениеПени Тогда
		КомментарийНачисления = КомментарийНачисления + "пени.";
	Иначе
		КомментарийНачисления = КомментарийНачисления + "начислений.";
	КонецЕсли;
	
	ТекКонтрагент         = Параметры.Контрагент;
	ТекДоговорКонтрагента = Параметры.ДоговорКонтрагента;
	
	// Получение настроек учетной политики для организации.
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	УстановитьСчетаУчетаДляПени   = Ложь;
	УстановитьСтавкуБезНДСДляПени = Ложь;
	
	Если ОтражениеПени Тогда
		
		Если (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Не Параметры.ПризнакКапРем)
			 Или (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Параметры.ПризнакКапРем) Тогда
			УстановитьСчетаУчетаДляПени = Истина;
		КонецЕсли;
		
		Если мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС Тогда
			УстановитьСтавкуБезНДСДляПени = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// При отражении пени или услуг капремонта, если капремонт отражается на отдельных счетах расчетов с контрагентами,
	// счета расчетов в типовых документах будем заполнять сами, иначе счета учета будут заполняться процедурами
	// типовых документов.
	ЗаполнитьСчетаУчетаПередЗаписью = Истина;
	
	// Заполнение счетов учета.
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ТекКонтрагент, ТекДоговорКонтрагента);
	
	// При отражении капремонта на отдельных счетах расчетов с контрагентами
	// подменим счета расчетов на те, что указаны в УП.
	Если Параметры.ПризнакКапРем
		 И мНастройкиУчетнойПолитикиТСЖ.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета Тогда
		
		ЗаполнитьСчетаУчетаПередЗаписью = Ложь;
		
		СчетаУчета.СчетРасчетовПокупателя = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		СчетаУчета.СчетАвансовПокупателя  = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		
	КонецЕсли;
	
	// При отражении пени отдельно от начислений получим счета расчетов из РС "Счета расчетов по пени".
	Если УстановитьСчетаУчетаДляПени Тогда
		
		ЗаполнитьСчетаУчетаПередЗаписью = Ложь;
		
		СчетаУчетаПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация,
							ТекДоговорКонтрагента.ВидВзаиморасчетов, ?(Параметры.ПризнакКапРем, Истина, Ложь));
		
		// Выполним подмену счетов расчетов с контрагентом на счета, указанные в РС "Счета учета расчетов по пени".
		// Если какой-то из счетов не заполнен, то выполнять подмену не будем.
		Если Не СчетаУчетаПени.СчетУчетаРасчетов.Пустая() Тогда
			СчетаУчета.СчетРасчетовПокупателя = СчетаУчетаПени.СчетУчетаРасчетов;
		КонецЕсли;
		
		Если Не СчетаУчетаПени.СчетУчетаРасчетов.Пустая() Тогда
			СчетаУчета.СчетАвансовПокупателя  = СчетаУчетаПени.СчетУчетаАвансов;
		КонецЕсли;
		
	КонецЕсли;
	
	// Шапка документа.
	ЕстьДокумент = ЗначениеЗаполнено(Параметры.ДокументОтражения);
	Если ЕстьДокумент Тогда
		
		ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения(Параметры.ДокументОтражения);
		
		ДокументОбъект = Параметры.ДокументОтражения.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокументОбъект.Услуги.Очистить();
		
		Если мЭтоРеализация Тогда
			ДокументОбъект.АгентскиеУслуги.Очистить();
		КонецЕсли;
		
	Иначе
		
		ОпределитьФлагиТипаДокументовНовыйМеханизмОтражения(Параметры.ДокументОтражения);
		
		ПроверитьНеобходимостьИзмененияТипаФормируемогоДокументаНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры);
		
		Если мЭтоАкт Тогда
			ТипДокумента = "АктОбОказанииПроизводственныхУслуг";
		Иначе
			ТипДокумента = "РеализацияТоваровУслуг";
		КонецЕсли;
		
		ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент();
		
	КонецЕсли;
		
	ДокументОбъект.Дата        = КонецМесяца(Дата);
	ДокументОбъект.Организация = Организация;
	
	ДокументОбъект.ВалютаДокумента         = мВалютаРегламентированногоУчета;
	ДокументОбъект.КурсВзаиморасчетов      = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	
	ДокументОбъект.СуммаВключаетНДС   = СуммаВключаетНДС;
	
	ДокументОбъект.Контрагент         = ТекКонтрагент;
	ДокументОбъект.ДоговорКонтрагента = ТекДоговорКонтрагента;
	
	Если мЭтоРеализация Тогда
		// Здесь задаем вид операции для документа реализации по умолчанию, в дальнейшем, когда
		// в документ будут переданы все необходимые данные - определим рекомендуемый вид операции.
		// Данная строка нужна для корректной работы функции "ПолучитьРекомендуемыйВидОперацииДокументаРеализацияТоваров".
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьБанковскийСчет(ДокументОбъект.БанковскийСчетОрганизации, 
		ДокументОбъект.Организация, 
		ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	Если мЭтоАкт Тогда
		
		ДокументОбъект.ПодразделениеЗатрат = ПодразделениеОрганизации;
		
		// В противном случае, берем ту группу, которая определена в строке данных.
		Если ТаблицаСгруппированныхДетальныхЗаписей.Количество() > 0 Тогда
			ДокументОбъект.НоменклатурнаяГруппа = ТаблицаСгруппированныхДетальныхЗаписей[0].НоменклатурнаяГруппа;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАвансов;
	
	Если мЭтоАкт Тогда
		
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект, ?(ЗаполнитьСчетаУчетаПередЗаписью, Неопределено, СчетаУчета));
		ДокументОбъект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		
	Иначе
		
		Если ЗаполнитьСчетаУчетаПередЗаписью Тогда
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
			
		Иначе
			
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			ДокументОбъект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий   = КомментарийНачисления;
	
	СтруктураПараметровСтроки = Новый Структура;
	СтруктураПараметровСтроки.Вставить("ДокументОбъект",              ДокументОбъект);
	СтруктураПараметровСтроки.Вставить("УстановитьСчетаУчетаДляПени", УстановитьСчетаУчетаДляПени);
	
	Если УстановитьСчетаУчетаДляПени Тогда
		СтруктураПараметровСтроки.Вставить("СчетаУчетаПени", СчетаУчетаПени);
	КонецЕсли;
	
	Для Каждого ТекСтрокаДетальныхЗаписей Из ТаблицаСгруппированныхДетальныхЗаписей Цикл
		
		РазмерыСтавокНДС = Неопределено;
		Если НЕ СоответствиеРазмеровСтавокНДС = Неопределено
			 И Не УстановитьСтавкуБезНДСДляПени Тогда
			
			РазмерыСтавокНДС = СоответствиеРазмеровСтавокНДС.Получить(ТекСтрокаДетальныхЗаписей.Номенклатура);
			Если НЕ РазмерыСтавокНДС = Неопределено Тогда
				ТаблицаРазмеровСтавокНДС = РазмерыСтавокНДС.Скопировать();
				ТаблицаРазмеровСтавокНДС.Колонки.Добавить("СуммаДляОтражения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
				Для Каждого СтрокаРазмера ИЗ ТаблицаРазмеровСтавокНДС Цикл
					СтрокаРазмера.СуммаДляОтражения = СтрокаРазмера.ДоляНачисления * ТекСтрокаДетальныхЗаписей.СуммаОтражения / 100;
				КонецЦикла;
				
				ИтоговаяСуммаОтражения = ТаблицаРазмеровСтавокНДС.Итог("СуммаДляОтражения");
				
				Если НЕ ИтоговаяСуммаОтражения = ТекСтрокаДетальныхЗаписей.СуммаОтражения Тогда
					Если ТаблицаРазмеровСтавокНДС.Количество() > 0 Тогда
						ТаблицаРазмеровСтавокНДС[0].СуммаДляОтражения = ТаблицаРазмеровСтавокНДС[0].СуммаДляОтражения + (ТекСтрокаДетальныхЗаписей.СуммаОтражения - ИтоговаяСуммаОтражения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметровСтроки.Вставить("СтрокаРасшифровки", ТекСтрокаДетальныхЗаписей);
		
		Если НЕ РазмерыСтавокНДС = Неопределено Тогда
			
			Для Каждого СтрокаРазмера ИЗ ТаблицаРазмеровСтавокНДС Цикл
				
				СтруктураПараметровСтроки.Вставить("СтавкаНДС",         СтрокаРазмера.СтавкаНДС);
				СтруктураПараметровСтроки.Вставить("СуммаДляОтражения", СтрокаРазмера.СуммаДляОтражения);
				
				ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки);
				
			КонецЦикла;
			
		Иначе
			
			СтруктураПараметровСтроки.Вставить("СтавкаНДС",         ?(УстановитьСтавкуБезНДСДляПени, Перечисления.СтавкиНДС.БезНДС, ТекСтрокаДетальныхЗаписей.Номенклатура.СтавкаНДС));
			СтруктураПараметровСтроки.Вставить("СуммаДляОтражения", ТекСтрокаДетальныхЗаписей.СуммаОтражения);
			
			ДобавитьСтрокуВТабличнуюЧастьДокументаРеализации(СтруктураПараметровСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Предварительно, для создаваемого документа реализации был установлен общий вид операции -
	// реализация товаров и услуг, однако, в случае, когда заполнены данные только по реализации услуг,
	// нет необходимости в отражении полей по реализации товаров. Чтобы этого избежать, определим рекомендуемый
	// вид операции документа "Реализация товаров и услуг", в зависимости от содержания документа, а не от того,
	// какой вид операции мы ему назначили. В случае если типовая функция не определит рекомендуемый вид операции,
	// он останется определенным по умолчанию ранее.
	Если мЭтоРеализация Тогда
		
		РекомендуемыйВидОперации = УПЖКХ_ТиповыеМетодыСервер.ПолучитьРекомендуемыйВидОперацииДокументаРеализацияТоваров(ДокументОбъект);
		
		Если ЗначениеЗаполнено(РекомендуемыйВидОперации) Тогда
			ДокументОбъект.ВидОперации = РекомендуемыйВидОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если мЭтоРеализация Тогда
		ПредставлениеТипаДокументаОтражения = "Реализация товаров и услуг";
	Иначе
		ПредставлениеТипаДокументаОтражения = "Акт об оказании услуг";
	КонецЕсли;
	
	// Непосредственная запись и проведение документа.
	ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ДокументОбъект, Параметры, РезультатОтражения, ПредставлениеТипаДокументаОтражения);
	
	// Если отражаются пени, а в УП установлено, что пени должны отражаться по ставке "Без НДС",
	// или отражаются суммы по услугам кап. ремонта, то СФ формировать не будем.
	Если РезультатОтражения.Отражено
		 И Не УстановитьСтавкуБезНДСДляПени
		 И Не Параметры.ПризнакКапРем Тогда
		ЗарегистрироватьСчетФактуру(Параметры, ДокументОбъект.Ссылка, РезультатОтражения, КомментарийНачисления);
	КонецЕсли;
	
	// Запишем результат отражения (ссылки на документы отражения и счет-фактуру) в табличную часть.
	СохранитьРезультатОтраженияВТабличнойЧасти(РезультатОтражения, Параметры.НомераСтрокДетальныхЗаписей);
	
КонецПроцедуры // СформироватьДокументОтраженияНачисленийНовыйМеханизмОтражения()

// Регистрирует счет-фактуру.
Процедура ЗарегистрироватьСчетФактуру(Параметры, ДокументОтражения, РезультатОтражения, КомментарийНачисления)
	
	// Счет-фактура не должен формироваться при УСН, если иное не указано в учетной политике ЖКХ на закладке УСН
	// или при агентской схеме в случае выставления счетов-фактур от имени заказчика.
	Если (УчетнаяПолитика.СистемаНалогообложения(Организация, Дата) = Перечисления.СистемыНалогообложения.Упрощенная
	   И мНастройкиУчетнойПолитикиТСЖ.ФормироватьСФУСН = Ложь)
	 ИЛИ (Параметры.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема
	   И мНастройкиУчетнойПолитикиТСЖ.ВариантРеализацииТоваров = Перечисления.УПЖКХ_ВариантыРеализацииТоваров.ОтИмениЗаказчика) Тогда
		
		// Счет-фактура не формируется.
		
	Иначе
		
		// Пытаемся найти существуюущую счет-фактуру,которая уже введена по реализации.
		НайденныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОтражения);
		
		// Получаем объект счета-фактуры.
		Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
			
			ОбъектСчетаФактуры = НайденныйСчетФактура.ПолучитьОбъект();
			
			// ОСОБЕННОСТЬ:
			// Для того, чтобы с-ф можно было перезаполнить, надо очистить в ней документ основание и записать.
			ОбъектСчетаФактуры.ДокументыОснования.Очистить();
			КВП_ЗаписатьОбъект(ОбъектСчетаФактуры, РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
			ОбъектСчетаФактуры = Документы.СчетФактураВыданный.СоздатьДокумент();
		КонецЕсли;
		
		ОбъектСчетаФактуры.ВидСчетаФактуры = ?(Параметры.ЭтоКорректировкаГруппировка,
											   Перечисления.ВидСчетаФактурыВыставленного.Корректировочный,
											   Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		
		ОбъектСчетаФактуры.Заполнить(ДокументОтражения);
		
		ОбъектСчетаФактуры.Ответственный = Ответственный;
		ОбъектСчетаФактуры.Комментарий   = КомментарийНачисления;
		
		// Проводим или записываем документ.
		ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ОбъектСчетаФактуры, Параметры, РезультатОтражения, "Счет-фактура выданный", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ЗарегистрироватьСчетФактуру()

// Процедура производит непосредственную запись и проведение документа отражения для нового механизма.
//
Процедура ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ДокументОбъект,
																			 Параметры,
																			 РезультатОтражения,
																			 ПредставлениеТипаДокументаОтражения = "Реализация товаров и услуг",
																			 ЭтоФормированиеСчетаФактуры = Ложь)
	
	// Определим, в какое поле нужно помещать сформированный документ в структуру результата отражения.
	ПолеДокументаВРезультатеОтражения = "ДокументОтражения";
	Если ЭтоФормированиеСчетаФактуры Тогда
		ПолеДокументаВРезультатеОтражения = "СчетФактура";
	КонецЕсли;
	
	// Если проверка заполнения не прошла, то просто записываем документ без проведения.
	ЗаписатьБезПроведения = Не ДокументОбъект.ПроверитьЗаполнение();
	
	// Если проверка выполнена, пытаемся провести документ.
	Если Не ЗаписатьБезПроведения Тогда
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			РезультатОтражения.Отражено          = Истина;
			РезультатОтражения[ПолеДокументаВРезультатеОтражения] = ДокументОбъект.Ссылка;
			
		Исключение
			
			// Если не провели, будем пробовать просто записать.
			ЗаписатьБезПроведения = Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Если не прошли проверку или не провели, то пробуем просто записать документ.
	Если ЗаписатьБезПроведения Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			РезультатОтражения[ПолеДокументаВРезультатеОтражения] = ДокументОбъект.Ссылка;
		Исключение
		КонецПопытки;
		
		// Выведем сообщение об ошибке в документе, который не удалось провести.
		ПредставлениеСтрок = СформироватьПредставлениеСтрок(Параметры.НомераСтрокДетальныхЗаписей);
		
		ТекстСообщения = "В строке №" + ПредставлениеСтрок +  " не проведен документ отражения """ + ПредставлениеТипаДокументаОтражения + """: при проверке документа могли возникнуть ошибки.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Cоздаёт документ отражения начислений с отрицательными суммами для группы строк табличной части.
//
Процедура СформироватьДокументОтраженияНачисленийСОтрицательнымиСуммамиНовыйМеханизмОтражения(ТаблицаСгруппированныхДетальныхЗаписей, Параметры)
	
	РезультатОтражения = Новый Структура("Отражено,
										 |ДокументОтражения,
										 |СчетФактура", Ложь);
	
	// Документ "Корректировка долга" с видом операции "Списание задолженности" создается для каждой строки
	// детальных записей, поэтому в таблице переданной в параметрах процедуры будет всегда одна запись и
	// и можно обратиться к ней по индексу.
	НоменклатураДетальнойЗаписи = ТаблицаСгруппированныхДетальныхЗаписей[0].Номенклатура;
	
	ЕстьДокумент = ЗначениеЗаполнено(Параметры.ДокументОтражения);
	Если ЕстьДокумент И ТипЗнч(Параметры.ДокументОтражения) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		ДокументОбъект = Параметры.ДокументОтражения.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
		
	Иначе
		
		ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	
		ДокументОбъект.Дата                   = КонецМесяца(Дата);
		ДокументОбъект.Организация            = Организация;
		ДокументОбъект.ВидОперации            = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		
		ДокументОбъект.ВалютаДокумента    = мВалютаРегламентированногоУчета;
		ДокументОбъект.КурсДокумента      = 1;
		ДокументОбъект.КратностьДокумента = 1;
		
		ДокументОбъект.КонтрагентДебитор  = Параметры.Контрагент;
		
		// Счета учета номенклатуры.
		СчетаУчетаНоменклатуры = мСчетаУчетаНоменклатуры[НоменклатураДетальнойЗаписи];
		Если СчетаУчетаНоменклатуры = Неопределено Тогда
			СчетаУчетаНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, НоменклатураДетальнойЗаписи);
			мСчетаУчетаНоменклатуры[НоменклатураДетальнойЗаписи] = СчетаУчетаНоменклатуры;
		КонецЕсли;
		
		ДокументОбъект.СчетДт = СчетаУчетаНоменклатуры.СчетДоходов;
		
		Если Не ДокументОбъект.СчетДт.Пустая()
			 И ДокументОбъект.СубконтоДт1 = Неопределено
			 И ДокументОбъект.СчетДт.ВидыСубконто.Количество() > 0 Тогда
			
			ДокументОбъект.СубконтоДт1 = Новый(ДокументОбъект.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			
		КонецЕсли;
		
		Если Не ДокументОбъект.СчетДт.Пустая()
			 И ТипЗнч(ДокументОбъект.СубконтоДт1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			
			// В таблице детальных записей будет всегда одна строка, так как для каждой номенклатуры с отрицательной суммой
			// отражения создается отдельный документ, поэтому номенклатурную группу получаем из первой строки таблицы.
			ДокументОбъект.СубконтоДт1 = ТаблицаСгруппированныхДетальныхЗаписей[0].НоменклатурнаяГруппа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение настроек учетной политики для организации.
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	
	// Табличная часть.
	НоваяСтрока                       = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
	НоваяСтрока.ДоговорКонтрагента    = Параметры.ДоговорКонтрагента;
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОбъект.Организация,
	                                            ДокументОбъект.КонтрагентДебитор, НоваяСтрока.ДоговорКонтрагента);
	Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
	ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	// Если отражаются услуги, являющиеся услугами кап. ремонта, а кап. ремонт отражается по заданному счету учета,
	// то в качестве счета расчета с контрагентом установим данный счет.
	Если Параметры.ПризнакКапРем Тогда
		НоваяСтрока.СчетУчетаРасчетов = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
	КонецЕсли;
	
	НоваяСтрока.Сумма               = - ТаблицаСгруппированныхДетальныхЗаписей[0].СуммаОтражения;
	НоваяСтрока.СуммаВзаиморасчетов = - ТаблицаСгруппированныхДетальныхЗаписей[0].СуммаОтражения;
	
	НоваяСтрока.КурсВзаиморасчетов      = 1;
	НоваяСтрока.КратностьВзаиморасчетов = 1;
	
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий   = "Документ сгенерирован автоматически для отражения начислений с отрицательными суммами.";
	
	// Непосредственная запись и проведение документа.
	ЗаписатьИПровестиДокументОтраженияНачисленийНовыйМеханизмОтражения(ДокументОбъект, Параметры, РезультатОтражения, "Корректировка долга");
	
	// Запишем результат отражения (ссылки на документы отражения) в табличную часть.
	СохранитьРезультатОтраженияВТабличнойЧасти(РезультатОтражения, Параметры.НомераСтрокДетальныхЗаписей);
	
КонецПроцедуры

// Дополняет запрос временной таблицей услуг соответствующей группы услуг.
// Используется для нового алгоритма отражения.
//
// Параметры:
//  ГруппаУслуг  - группа услуг;
//  ОбъектОтражения  - объект отражения.
//
Функция ДополнитьЗапросСпискомУслугИЛицевыхСчетовДляЗаполнения(ОтборГруппаУслуг, ОбъектОтражения) Экспорт
	
	// Алгоритм:
	// 0. Получаем все л/с, относящихся к объекту отражения.
	// 1. Получаем все услуги, входящие во все группы для отражения начислений.
	// 2. Получаем все услуги, не входящие ни в одну из групп п.1. Относим их на "пустую" группу.
	// 3. Объединяем услуги из п.1 и 3 и отбираем среди них те, что относятся к выбранной группе услуг.
	// 4. Анализируем выполнено ли отражение по услугам и л/с из п.3 другими документами.
	// 5. Список услуг и л/с, которые участвуют в отражении др.документами, используем для информирования пользователей.
	// 6. Услуги и л/с из п.3, за исключением услуг и л/с из п.5 используем для отбора при заполнении данными к отражению текущего документа.
	
	// ОСОБЕННОСТЬ:
	// Если объект отражения не указан, то просто берем из справочника л/с все лицевые счета.
	// В итоге на выходе данной функции получаем соответствие услуг и л/с, по которым можем производить отражение.
	// Любые комбинации услуг и л/с, отраженные другими документами, мы отсекаем, таким образом,
	// комбинация услуга + л/с может быть отражена только одним документом за месяц и по организации.
	
	// Получение списка лицевых счетов, которые относятся к объекту отражения.
	ОтборЛицевыеСчета = Новый СписокЗначений();
	
	// Определяем, нужен ли отбор по объекту отражения.
	ЕстьОтборПоОбъектуОтражения = ЗначениеЗаполнено(ОбъектОтражения);
	Если ЕстьОтборПоОбъектуОтражения Тогда
		
		// Если указан объект отражения, то получим список лицевых счетов по нему для отбора.
		ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(НачалоМесяца(Дата), ОбъектОтражения, КонецМесяца(Дата), Ложь);
		Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
			Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
				ОтборЛицевыеСчета = ТекОбъект.СписокОбъектов.Скопировать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("МесяцОтражения",    НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ОтборГруппаУслуг",  ОтборГруппаУслуг);
	Запрос.УстановитьПараметр("ТекущийДокумент",   Ссылка);
	
	// Параметры объекта отражения.
	Запрос.УстановитьПараметр("ОтборЛицевыеСчета",           ОтборЛицевыеСчета);
	Запрос.УстановитьПараметр("ЕстьОтборПоОбъектуОтражения", ЕстьОтборПоОбъектуОтражения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ врЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	(НЕ &ЕстьОтборПоОбъектуОтражения
	|			ИЛИ КВП_ЛицевыеСчета.Ссылка В (&ОтборЛицевыеСчета))
	|	И НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ГруппировкиУслуг.Услуга,
	|	УПЖКХ_ГруппировкиУслуг.ГруппаУслуг
	|ПОМЕСТИТЬ врУслугиПоГруппам
	|ИЗ
	|	РегистрСведений.УПЖКХ_ГруппировкиУслуг КАК УПЖКХ_ГруппировкиУслуг
	|ГДЕ
	|	УПЖКХ_ГруппировкиУслуг.ВидГруппУслуг = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	ЗНАЧЕНИЕ(Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка) КАК ГруппаУслуг
	|ПОМЕСТИТЬ врУслугиДляОтраженияНачислений
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.Ссылка В
	|				(ВЫБРАТЬ
	|					врУслугиПоГруппам.Услуга
	|				ИЗ
	|					врУслугиПоГруппам КАК врУслугиПоГруппам)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врУслугиПоГруппам.Услуга,
	|	врУслугиПоГруппам.ГруппаУслуг
	|ИЗ
	|	врУслугиПоГруппам КАК врУслугиПоГруппам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врУслугиДляОтраженияНачислений.Услуга
	|ПОМЕСТИТЬ врУслугиДляОтраженияНачисленийСОтбором
	|ИЗ
	|	врУслугиДляОтраженияНачислений КАК врУслугиДляОтраженияНачислений
	|ГДЕ
	|	врУслугиДляОтраженияНачислений.ГруппаУслуг = &ОтборГруппаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врУслугиДляОтраженияНачисленийСОтбором.Услуга КАК Услуга,
	|	врЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ УслугиИЛицевыеСчетаСОтбором
	|ИЗ
	|	врУслугиДляОтраженияНачисленийСОтбором КАК врУслугиДляОтраженияНачисленийСОтбором
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врЛицевыеСчета КАК врЛицевыеСчета
	|		ПО (ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	врУслугиДляОтраженияНачисленийСОтбором.Услуга,
	|	ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Регистратор
	|ПОМЕСТИТЬ врСписокУслугИЛицевыхСчетовДляИсключения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете КАК УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете
	|ГДЕ
	|	НЕ УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Регистратор = &ТекущийДокумент
	|	И УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Организация = &Организация
	|	И УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.МесяцОтражения = &МесяцОтражения
	|	И (УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга, УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				УслугиИЛицевыеСчетаСОтбором.Услуга,
	|				УслугиИЛицевыеСчетаСОтбором.ЛицевойСчет
	|			ИЗ
	|				УслугиИЛицевыеСчетаСОтбором КАК УслугиИЛицевыеСчетаСОтбором)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиИЛицевыеСчетаСОтбором.Услуга КАК Услуга,
	|	УслугиИЛицевыеСчетаСОтбором.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врСписокУслугИЛицевыхСчетовДляЗаполнения
	|ИЗ
	|	УслугиИЛицевыеСчетаСОтбором КАК УслугиИЛицевыеСчетаСОтбором
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокУслугИЛицевыхСчетовДляИсключения КАК врСписокУслугИЛицевыхСчетовДляИсключения
	|		ПО УслугиИЛицевыеСчетаСОтбором.Услуга = врСписокУслугИЛицевыхСчетовДляИсключения.Услуга
	|			И УслугиИЛицевыеСчетаСОтбором.ЛицевойСчет = врСписокУслугИЛицевыхСчетовДляИсключения.ЛицевойСчет
	|ГДЕ
	|	ЕСТЬNULL(врСписокУслугИЛицевыхСчетовДляИсключения.Услуга, ИСТИНА) = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Услуга,
	|	ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УслугиИЛицевыеСчетаСОтбором
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(врСписокУслугИЛицевыхСчетовДляИсключения.ЛицевойСчет) КАК ПредставлениеЛицевогоСчета,
	|	ПРЕДСТАВЛЕНИЕ(врСписокУслугИЛицевыхСчетовДляИсключения.Услуга) КАК ПредставлениеУслуги,
	|	ПРЕДСТАВЛЕНИЕ(врСписокУслугИЛицевыхСчетовДляИсключения.Регистратор) КАК ПредставлениеРегистратора,
	|	врСписокУслугИЛицевыхСчетовДляИсключения.Регистратор КАК Регистратор
	|ИЗ
	|	врСписокУслугИЛицевыхСчетовДляИсключения КАК врСписокУслугИЛицевыхСчетовДляИсключения
	|
	|УПОРЯДОЧИТЬ ПО
	|	врСписокУслугИЛицевыхСчетовДляИсключения.ЛицевойСчет,
	|	врСписокУслугИЛицевыхСчетовДляИсключения.Услуга";
	
	// При выполнении запроса определяется таблица исключений,
	// которая используется далее в запросе по заполнению документа,
	// а также возвращаются данные исключения, которые выводятся пользователю.
	ВыборкаИсключений = Запрос.Выполнить().Выбрать();
	
	// Вывод данных об исключениях пользователю.
	ПроинформироватьПользователяОбОтраженныхВМесяцеУслугахИЛицевыхСчетах(ВыборкаИсключений);
	
	Возврат Запрос;
	
КонецФункции // ДополнитьЗапросСпискомУслугИЛицевыхСчетовДляЗаполнения()

// Процедура выводит пользователю сообщения о том, что начисления уже отражены в регл. учете.
//
Процедура ПроинформироватьПользователяОбОтраженныхВМесяцеУслугахИЛицевыхСчетах(ВыборкаУслугИЛицевыхСчетовДляИсключения)
	
	Пока ВыборкаУслугИЛицевыхСчетовДляИсключения.Следующий() Цикл
		
		ТекстСообщения = "По лицевому счету " + ВыборкаУслугИЛицевыхСчетовДляИсключения.ПредставлениеЛицевогоСчета
					   + " и услуге " + ВыборкаУслугИЛицевыхСчетовДляИсключения.ПредставлениеУслуги
					   + " уже выполнено отражение начислений документом <" + ВыборкаУслугИЛицевыхСчетовДляИсключения.ПредставлениеРегистратора + ">";
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаУслугИЛицевыхСчетовДляИсключения.Регистратор);
		
	КонецЦикла;
	
КонецПроцедуры //ПроинформироватьПользователяОбОтраженныхВМесяцеУслугахИЛицевыхСчетах()

// Функция проверяет, не отражены ли начисления из текущего документа другими документами.
//
Функция ПроверитьОтражениеНачисленийДругимиДокументами()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("МесяцОтражения",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Услуга КАК Услуга,
	|	КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врУслугиИЛицевыеСчетаДокумента
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.НачисленияКОтражению КАК КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению
	|ГДЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеНачисленияКОтражению.Ссылка = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Услуга,
	|	ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга) КАК ПредставлениеУслуги,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет) КАК ПредставлениеЛицевогоСчета,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Регистратор) КАК ПредставлениеРегистратора,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга КАК Услуга,
	|	УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете КАК УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете
	|ГДЕ
	|	НЕ УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Регистратор = &ТекущийДокумент
	|	И УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Организация = &Организация
	|	И УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.МесяцОтражения = &МесяцОтражения
	|	И (УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.Услуга, УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				врУслугиИЛицевыеСчетаДокумента.Услуга,
	|				врУслугиИЛицевыеСчетаДокумента.ЛицевойСчет
	|			ИЗ
	|				врУслугиИЛицевыеСчетаДокумента КАК врУслугиИЛицевыеСчетаДокумента)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Результат = Запрос.Выполнить();
	ПроинформироватьПользователяОбОтраженныхВМесяцеУслугахИЛицевыхСчетах(Результат.Выбрать());
	
	Возврат Результат.Пустой();
	
КонецФункции // ПроверитьОтражениеНачисленийДругимиДокументами()

#КонецОбласти


#Область ПроцедурыФормированияДвиженийДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ТаблицаРеквизиты          - выборка из результата запроса по шапке документа,
//  ТаблицаНачислений         - таблица значений, содержащая данные для проведения
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ТаблицаРеквизиты, ТаблицаНачислений, ТаблицаРеквизитовЗачетаАвансов, Отказ, Заголовок)
	
	Если ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		// Если используется новый механизм отражения начислений.
		
		// В массив услуг для исключения добавляются услуги, которые попадают в отбор для отражения текущим документом,
		// но по каким-либо причинам отражены другими документами отражения.
		// Например, после заполнение др. документов был изменен состав групп услуг для отражения.
		//
		// Перед добавлением движений информируем о наличии ошибок по всем таким услугам 
		// и движений по ним не формируем.
		Если НЕ ПроверитьОтражениеНачисленийДругимиДокументами() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поведение не выполнено, так как в документее имеются л/с и услуги, начисления по которым отражены другими документами!", Отказ);
			Возврат;
		КонецЕсли;
		
		ДвиженияПоРегиструУПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений);
		ДвиженияПоРегиструУПЖКХ_ДокументыОтраженияНачисленийВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений);
		
	Иначе
		// Если используется старый механизм отражения.
		
		ДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений);
		
		// Формирование проводок БУ/НУ.
		ДвиженияПоРегистрамРегл(ТаблицаНачислений, ТаблицаРеквизиты, ТаблицаРеквизитовЗачетаАвансов, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Осуществляет движение по регистру "Данные для отражения начислений в регл. учете".
Процедура ДвиженияПоРегиструУПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений)
	
	НаборДвижений    = Движения.УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете;
	СтрокаРеквизитов = ТаблицаРеквизиты[0];
	МесяцОтражения   = НачалоМесяца(СтрокаРеквизитов.Период);
	
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		
		// Считаем, что отражение выполнено, если регламентированный документ создан и он проведен.
		Если НЕ (ЗначениеЗаполнено(СтрокаНачисления.ДокументОтражения) И СтрокаНачисления.ДокументОтраженияПроведен) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = НаборДвижений.Добавить();
		Движение.ВидДвижения         = ВидДвиженияНакопления.Расход;
		Движение.Период              = СтрокаРеквизитов.Период;
		Движение.Организация         = СтрокаРеквизитов.Организация;
		Движение.МесяцОтражения      = МесяцОтражения;
		
		Движение.Услуга              = СтрокаНачисления.Услуга;
		Движение.ЛицевойСчет         = СтрокаНачисления.ЛицевойСчет;
		Движение.РазделУчета         = СтрокаНачисления.РазделУчета;
		Движение.ЭтоКорректировка    = СтрокаНачисления.ЭтоКорректировка;
		Движение.ВидКорректировки    = СтрокаНачисления.ВидКорректировки;
		Движение.ПериодКорректировки = СтрокаНачисления.ПериодКорректировки;
		
		Движение.Сумма               = СтрокаНачисления.СуммаОтражения;
		
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры // ДвиженияПоРегиструУПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете()

// Осуществляет движение по регистру "Документы отражения начислений в регл. учете".
Процедура ДвиженияПоРегиструУПЖКХ_ДокументыОтраженияНачисленийВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений)
	
	НаборДвижений    = Движения.УПЖКХ_ДокументыОтраженияНачисленийВРеглУчете;
	СтрокаРеквизитов = ТаблицаРеквизиты[0];
	МесяцОтражения   = НачалоМесяца(СтрокаРеквизитов.Период);
	
	// Для информации:
	// Если корректировки отражаются отдельно от начислений (при этом создаются разные документы: например,
	// при отражении начислений за месяц отражения формируется документ реализации, а при отражения перерасчета - 
	// документ корректировки реализации), то отдельно информацию по ним в регистр документов не записываем. 
	// Ввод корректировки корректировок текущим алгоритмом не предусмотрен.
	// Если корректировки отражаются в составе начислений, то строки в ТЧ будут разные, но по таким строкам будет 
	// сформирован один документ и ссылка на него размещена во всех строках, поэтому просто отсекаем все корректировки.
	
	// Считаем, что отражение выполнено, если регламентированный документ создан и он проведен.
	ТаблицаОтраженныхДокументов = ТаблицаНачислений.Скопировать(ТаблицаНачислений.НайтиСтроки(Новый Структура("ЭтоКорректировка", Ложь)));
	ТаблицаОтраженныхДокументов.Свернуть("Услуга,ЛицевойСчет,РазделУчета,ДокументОтражения,ДокументОтраженияПроведен");
	
	Для Каждого СтрокаНачисления Из ТаблицаОтраженныхДокументов Цикл
		
		// Считаем, что отражение выполнено, если регламентированный документ создан и он проведен.
		Если НЕ (ЗначениеЗаполнено(СтрокаНачисления.ДокументОтражения) И СтрокаНачисления.ДокументОтраженияПроведен) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = НаборДвижений.Добавить();
		Движение.Период            = СтрокаРеквизитов.Период;
		Движение.Организация       = СтрокаРеквизитов.Организация;
		Движение.МесяцОтражения    = МесяцОтражения;
		
		Движение.Услуга            = СтрокаНачисления.Услуга;
		Движение.ЛицевойСчет       = СтрокаНачисления.ЛицевойСчет;
		Движение.РазделУчета       = СтрокаНачисления.РазделУчета;
		
		Движение.ДокументОтражения = СтрокаНачисления.ДокументОтражения;
		
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры // ДвиженияПоРегиструУПЖКХ_ДокументыОтраженияНачисленийВРеглУчете()

// Процедура формирует проводки в БУ и НУ.
//
// Параметры
//  ТабличнаяЧасть – ТаблицаЗначений – таблица с данными для проводок
//  СтруктураПараметров - Структура - дополнительные параметры
//  ВидУчета     - Строка - вид учета: "БУ" или "НУ".
//
Процедура ДвиженияПоРегистрамРегл(ТабличнаяЧасть, ТаблицаРеквизиты, ТаблицаРеквизитовЗачетаАвансов, Отказ, Заголовок)
	
	// Проводки формируются в следующем порядке:
	// 1. Зачет авансов (при наличии).
	// 2. Отражение начислений.
	
	Если НЕ ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
		Возврат;
	КонецЕсли;
	
	Проводки = Движения.Хозрасчетный;
	ТабличнаяЧасть.Колонки.СуммаОтражения.Имя = "Сумма";
	
	СтрокаРеквизитыЗачетаАвансов = ТаблицаРеквизитовЗачетаАвансов[0];
	СтрокаРеквизиты              = ТаблицаРеквизиты[0];
	
	//// 1. Зачет авансов.
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
	
		// Т.к. в одном док-те могут отражаться начисления по одному и тому же контрагенту и договору 
		// (например, начисление и пени отдельными строками), то сначала суммируются данные по контрагенту.
		Отбор = Новый Структура("Отражать", Истина);
		МассивСтрокДляКопирования = ТабличнаяЧасть.НайтиСтроки(Отбор);
		ТаблицаКонтрагентовДляЗачетаАвансов = ТабличнаяЧасть.Скопировать(МассивСтрокДляКопирования);
		Для Каждого СтрокаТЧ Из ТаблицаКонтрагентовДляЗачетаАвансов Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ["Сумма"] * ?(СтрокаТЧ["ЭтоЛьгота"], -1, 1);
		КонецЦикла;
		ТаблицаКонтрагентовДляЗачетаАвансов.Свернуть("Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов, СчетУчетаАвансов",
													 "Сумма");
		
		// Дополняем таблицу контрагентов недостающими колонками.
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("ВалютаВзаиморасчетов");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("ВидДоговора");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("УчетАгентскогоНДС");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("РасчетыВВалюте");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("ДокументРасчетов");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СчетРасчетов");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СчетАвансов");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("Подразделение");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетов");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаРуб");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетовКомитента");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетовПатент");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетовЕНВД");
		ТаблицаКонтрагентовДляЗачетаАвансов.Колонки.Добавить("СпособЗачетаАвансов");
		
		ТаблицаКонтрагентовДляЗачетаАвансов.ЗаполнитьЗначения(мВалютаРегламентированногоУчета, "ВалютаВзаиморасчетов");
		ТаблицаКонтрагентовДляЗачетаАвансов.ЗаполнитьЗначения(СтрокаРеквизиты.Подразделение,   "Подразделение");
		ТаблицаКонтрагентовДляЗачетаАвансов.ЗаполнитьЗначения(СпособЗачетаАвансов,             "СпособЗачетаАвансов");
		
		// Таблица используется только при зачете авансов "По документу". При автоматическом зачете может быть передана пустой.
		ТаблицаЗачетаАвансов = Неопределено;
		
		Для Каждого СтрокаТЧ Из ТаблицаКонтрагентовДляЗачетаАвансов Цикл
			ТекДоговор = СтрокаТЧ["ДоговорКонтрагента"];
			СтрокаТЧ.ВидДоговора                     = ТекДоговор.ВидДоговора;
			СтрокаТЧ.РасчетыВУсловныхЕдиницах        = ТекДоговор.РасчетыВУсловныхЕдиницах;
			СтрокаТЧ.УчетАгентскогоНДС               = ТекДоговор.УчетАгентскогоНДС;
			СтрокаТЧ.РасчетыВВалюте                  = ?(ТекДоговор.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета, Истина, Ложь);
			СтрокаТЧ.СуммаРуб                        = СтрокаТЧ.Сумма;
			СтрокаТЧ.СуммаВзаиморасчетов             = СтрокаТЧ.Сумма;
			СтрокаТЧ.СуммаВзаиморасчетовКомитента    = 0;
			СтрокаТЧ.СуммаВзаиморасчетовПатент       = 0;
			СтрокаТЧ.СуммаВзаиморасчетовТорговыйСбор = 0;
			СтрокаТЧ.СуммаВзаиморасчетовЕНВД         = 0;
			СтрокаТЧ.СчетРасчетов                    = СтрокаТЧ.СчетУчетаРасчетов;
			СтрокаТЧ.СчетАвансов                     = СтрокаТЧ.СчетУчетаАвансов;
			
			врТаблицаКонтрагентов = Новый ТаблицаЗначений;
			врТаблицаКонтрагентов = ТаблицаКонтрагентовДляЗачетаАвансов.СкопироватьКолонки();
			НоваяСтрока = врТаблицаКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(врТаблицаКонтрагентов, ТаблицаЗачетаАвансов, ТаблицаРеквизитовЗачетаАвансов, Отказ);
			
			УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, ЭтотОбъект.Движения, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// 2. Отражение начислений.
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		Если НЕ СтрокаТЧ.Отражать Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДоговор = СтрокаТЧ["ДоговорКонтрагента"];
		
		Проводка             = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаРеквизиты.Период;
		Проводка.Организация = СтрокаРеквизиты.Организация;
		Проводка.Содержание  = "Отражение начислений в регл.учете";
		
		Проводка.СчетДт      = СтрокаТЧ["СчетУчетаРасчетов"];
		Проводка.Сумма       = СтрокаТЧ["Сумма"] * ?(СтрокаТЧ["ЭтоЛьгота"], -1, 1);
		
		Если ЗначениеЗаполнено(ТекДоговор) Тогда
			УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
																							   "Контрагенты", ТекДоговор.Владелец);
			УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    ТекДоговор);
		КонецЕсли;
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаРеквизиты.Регистратор);
		
		Проводка.СчетКт = СтрокаТЧ["СчетУслуг"];
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетКт,
														Проводка.СубконтоКт, 1, СтрокаТЧ["СубконтоСчетаУслуг1"]);
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетКт,
														Проводка.СубконтоКт, 2, СтрокаТЧ["СубконтоСчетаУслуг2"]);
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСубконто(Проводка.СчетКт,
														Проводка.СубконтоКт, 3, СтрокаТЧ["СубконтоСчетаУслуг3"]);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Осуществляет движение по регистру "Начисление для отражения в регл учете".
Процедура ДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете(ТаблицаРеквизиты, ТаблицаНачислений)
	
	НаборДвижений = Движения.КВП_НачислениеДляОтраженияВРеглУчете;
	СтрокаРеквизитов = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		
		Если НЕ СтрокаНачисления.Отражать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации 
			И Не ЕстьДокументДляСтрокиРасшифровки(СтрокаНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = НаборДвижений.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период      = СтрокаРеквизитов.Период;
		Движение.Организация = СтрокаРеквизитов.Организация;
		
		Движение.Номенклатура           = СтрокаНачисления.Номенклатура;
		Движение.НоменклатурнаяГруппа   = СтрокаНачисления.НоменклатурнаяГруппа;
		Движение.ДоговорКонтрагента     = СтрокаНачисления.ДоговорКонтрагента;
		Движение.ВариантПоставкиУслуг   = СтрокаНачисления.ВариантПоставкиУслуг;
		Движение.ДоговорПоставщикаУслуг = СтрокаНачисления.ДоговорПоставщикаУслуг;
		
		Движение.ЭтоЛьгота              = СтрокаНачисления.ЭтоЛьгота;
		Движение.ЭтоПени                = СтрокаНачисления.ЭтоПени;
		Движение.Сумма                  = СтрокаНачисления.СуммаОтражения;
		
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры // ДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете()

#КонецОбласти


#Область ОбработчикиСобытийДокумента

// Проведение документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УПЖКХ_ТиповыеМетодыСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Определим настройки учетной политики ЖКХ.
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении.
	ПараметрыПроведения = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПодготовитьПараметрыПроведения(Ссылка, Отказ, мВалютаРегламентированногоУчета, мНастройкиУчетнойПолитикиТСЖ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизиты  = ПараметрыПроведения.Реквизиты;
	ТаблицаНачислений = ПараметрыПроведения.ТаблицаНачислений;
	
	ТаблицаРеквизитовЗачетаАвансов = ?(ИспользуетсяНовыйМеханизмОтраженияНачислений,
										Новый ТаблицаЗначений,
										ПараметрыПроведения.РеквизитыЗачетаАвансов);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, ТаблицаРеквизиты, ТаблицаНачислений, ТаблицаРеквизитовЗачетаАвансов, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		
		// Установим принудительно дату документа на конец дня (для случая, когда документ создается программно).
		Дата = КонецДня(Дата);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	
	Если ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		
		// ОСОБЕННОСТЬ:
		// Решили, что для нового механизма пока вводится ограничение на один документ отражения по одной 
		// организации и группе услуг за месяц отражения. Необходимо, чтобы начисления, корректировки и пр. 
		// по одному л/с и одной услуге отражались в БУ одним документом.
		// Кроме этого, проще будет реализовать мастер закрытия подобно типовому закрытию месяца.
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация",       Организация);
		СтруктураПараметров.Вставить("ДокументОтражения", Ссылка);
		СтруктураПараметров.Вставить("ГруппаУслуг",       ГруппаУслуг);
		СтруктураПараметров.Вставить("ОбъектОтражения",   ОбъектОтражения);
		СтруктураПараметров.Вставить("МесяцОтражения",    НачалоМесяца(Дата));
		
		Если Документы.КВП_ОтражениеНачисленийВРеглУчете.ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения(СтруктураПараметров) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиСПустымиДоговорами = Контрагенты.НайтиСтроки(Новый Структура("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
	Если НЕ СтрокиСПустымиДоговорами.Количество() = 0 Тогда
		Для Каждого ТекСтрока Из СтрокиСПустымиДоговорами Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке № " + ТекСтрока.НомерСтроки + " не заполнен договор взаиморасчетов для отражения начислений. " 
															+ "Проверьте данные управленческого учета.");
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие сформированных и проведенных типовых бухгалтерских документов отражения начислений.     //++Петрова после обновления 51.2

	// В случае, когда документ в строке не сформирован или не проведен - выведем сообщение пользователю.
	//Если ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации Тогда
	//	
	//	Для каждого СтрокаТаблицыКонтрагенты Из Контрагенты Цикл
	//		
	//		Если Не СтрокаТаблицыКонтрагенты.Отражать Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(СтрокаТаблицыКонтрагенты.Документ) ИЛИ Не СтрокаТаблицыКонтрагенты.Документ.Проведен Тогда
	//			
	//			НомерСтроки = СтрокаТаблицыКонтрагенты.НомерСтроки;
	//			
	//			Сообщение = Новый СообщениеПользователю;
	//			Сообщение.Текст = "Строка №" + НомерСтроки + ": отражение начислений в регл. учете не выполнено, так как бухгалтерский документ отражения не сформирован или не проведен!";
	//			Сообщение.Поле = "Контрагенты[" + (НомерСтроки-1) + "].Документ";
	//			Сообщение.КлючДанных = ЭтотОбъект.Ссылка;
	//			Сообщение.ПутьКДанным = "Объект";
	//			Сообщение.Сообщить();
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;             //--Петрова после обновления 51.2

	
КонецПроцедуры

// Обработчик события "ОбработкаУдаленияПроведения" документа.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

#КонецОбласти
// Заполняет таблицу счетов из регистра сведений "Счета учета расчетов по пени".        // петрова До обновления 
Процедура ЗаполнитьТаблицуСчетовУчетаРасчетовПени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаРасчетов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаАвансов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаДоходов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто1,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто2,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто3
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	мТаблицаСчетовУчетаРасчетовПени = ТаблицаРезультат.Скопировать();
	
КонецПроцедуры // ЗаполнитьТаблицуСчетовУчетаРасчетовПени()

Функция ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(ВидВзаиморасчетов)
	
	СтруктураСчетовВзаиморасчета = Новый Структура("СчетУчетаРасчетов,СчетУчетаАвансов,СчетУчетаДоходов,
												    |Субконто1, Субконто2, Субконто3");
	
	ПланыСчетовПустаяСсылка                        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов = ПланыСчетовПустаяСсылка;
	СтруктураСчетовВзаиморасчета.СчетУчетаАвансов  = ПланыСчетовПустаяСсылка;
	СтруктураСчетовВзаиморасчета.СчетУчетаДоходов  = ПланыСчетовПустаяСсылка;
	
	ПланыВидовХарактеристикПустаяСсылка    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	СтруктураСчетовВзаиморасчета.Субконто1 = ПланыВидовХарактеристикПустаяСсылка;
	СтруктураСчетовВзаиморасчета.Субконто2 = ПланыВидовХарактеристикПустаяСсылка;
	СтруктураСчетовВзаиморасчета.Субконто3 = ПланыВидовХарактеристикПустаяСсылка;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",       Организация);
	СтруктураОтбора.Вставить("ВидВзаиморасчетов", ВидВзаиморасчетов);
	
	ЗаполнитьТаблицуСчетовУчетаРасчетовПени();
	
	Если Не мТаблицаСчетовУчетаРасчетовПени.Количество() = 0 Тогда
		МассивСтрокСчетаУчета = мТаблицаСчетовУчетаРасчетовПени.НайтиСтроки(СтруктураОтбора);
		Если Не МассивСтрокСчетаУчета.Количество() = 0 Тогда
			СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов = МассивСтрокСчетаУчета[0].СчетУчетаРасчетов;
			СтруктураСчетовВзаиморасчета.СчетУчетаАвансов  = МассивСтрокСчетаУчета[0].СчетУчетаАвансов;
			СтруктураСчетовВзаиморасчета.СчетУчетаДоходов  = МассивСтрокСчетаУчета[0].СчетУчетаДоходов;
			СтруктураСчетовВзаиморасчета.Субконто1 = МассивСтрокСчетаУчета[0].Субконто1;
			СтруктураСчетовВзаиморасчета.Субконто2 = МассивСтрокСчетаУчета[0].Субконто2;
			СтруктураСчетовВзаиморасчета.Субконто3 = МассивСтрокСчетаУчета[0].Субконто3;
		Иначе
			СтруктураОтбора.Вставить("ВидВзаиморасчетов", Справочники.ВидыВзаиморасчетов.ПустаяСсылка());
			МассивСтрокСчетаУчета = мТаблицаСчетовУчетаРасчетовПени.НайтиСтроки(СтруктураОтбора);
			Если Не МассивСтрокСчетаУчета.Количество() = 0 Тогда
				СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов = МассивСтрокСчетаУчета[0].СчетУчетаРасчетов;
				СтруктураСчетовВзаиморасчета.СчетУчетаАвансов  = МассивСтрокСчетаУчета[0].СчетУчетаАвансов;
				СтруктураСчетовВзаиморасчета.СчетУчетаДоходов  = МассивСтрокСчетаУчета[0].СчетУчетаДоходов;
				СтруктураСчетовВзаиморасчета.Субконто1 = МассивСтрокСчетаУчета[0].Субконто1;
				СтруктураСчетовВзаиморасчета.Субконто2 = МассивСтрокСчетаУчета[0].Субконто2;
				СтруктураСчетовВзаиморасчета.Субконто3 = МассивСтрокСчетаУчета[0].Субконто3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСчетовВзаиморасчета;
	
КонецФункции // ПолучитьСтруктуруСчетаУчетаРасчетаПоПени()

Процедура ПривестиТипыИЗаполнитьЗначенияСубконто(СтрокаТабличнойЧасти)
	
	Счет = СтрокаТабличнойЧасти["СчетУслуг"];
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТекВидСубконто    = Счет.ВидыСубконто[Сч - 1].ВидСубконто;
		ТипСубк           = ТекВидСубконто.ТипЗначения;
		ТекСтрокаСубконто = СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч];
		
		// 1. Проводим тип
		Если НЕ ТипСубк.ПривестиЗначение(ТекСтрокаСубконто) = ТекСтрокаСубконто Тогда
			СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = ТипСубк.ПривестиЗначение(ТекСтрокаСубконто);
		КонецЕсли;
		
		// 2. Заполняем значением по умолчанию
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч]) Тогда
			Если ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы 
			 ИЛИ ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.Номенклатура;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.ДоговорКонтрагента;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // ПривестиТипыИЗаполнитьЗначенияСубконто()

//Позолотина++
Функция ЭлементАдреса(Строка,НомерЭлемента,Разделитель=",") Экспорт
Возврат СтрПолучитьСтроку(СтрЗаменить(Строка,Разделитель,Символы.ПС),НомерЭлемента);
КонецФункции

#Область РазделОсновнойПрограммы

мСписокТиповДокументов = Новый СписокЗначений();
мСписокТиповДокументов.Добавить("Акт об оказании производственных услуг", "Акт об оказании производственных услуг");
мСписокТиповДокументов.Добавить("Реализация товаров и услуг",             "Реализация товаров и услуг");

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСчетаУчетаНоменклатуры = Новый Соответствие();

#КонецОбласти

#КонецЕсли