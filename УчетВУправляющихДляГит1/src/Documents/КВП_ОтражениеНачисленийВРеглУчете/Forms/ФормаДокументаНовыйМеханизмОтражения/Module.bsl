
#Область СлужебныеПроцедурыиФункции

&НаСервере
Процедура ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете()
	
	ИспользуютсяГруппыУслугДляОтражения = Документы.КВП_ОтражениеНачисленийВРеглУчете.ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете();
	Если ИспользуютсяГруппыУслугДляОтражения Тогда
		Элементы.ГруппаУслуг.ПодсказкаВвода = "<Все услуги, не входящие в группы для отражения>";
	Иначе
		Элементы.ГруппаУслуг.ПодсказкаВвода = "<Все услуги>";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выводит пояснение на закладке при виде операции "Без отражения в регл.учете".
Процедура ВывестиИнфСтрокуОперацииБезОтраженияВДокументе()
	
	Если НЕ ОтражатьНачисленияВРеглУчете Тогда
		
		ИнфСтрока = "";
		
		Если Объект.Организация.Пустая() Тогда
			ИнфСтрока = "Выберите организацию.";
		Иначе
			ИнфСтрока =   "Текущие настройки учетной политики ЖКХ не поддерживают использование данного документа." + Символы.ПС
						+ "Для использования документа в настройках учетной политики ЖКХ должен быть установлен флажок" + Символы.ПС
						+ """Отражать начисления в регламентированном учете""";
		КонецЕсли;
		
		НадписьИнфСтрока = ИнфСтрока;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиИнфСтрокуОперацииБезОтраженияВДокументе()

&НаСервере
// Процедура выводит строку итогов начисления, льгот и пени.
Процедура ВывестиСтрокуИтогоДокумента()
	
	ВсегоЛьгот      = 0;
	ВсегоПени       = 0;
	ВсегоНачислений = 0;
	
	//УЧЕСТЬ:
	// Текущий механизм определения факт.отраженных сумм не подходит, т.к. данные по разделам учета в ТЧ
	// и фактически используемые при формировании док-тов в регл.учете могут не совпадать.
	// Например, когда пени отражаются в составе начислений,
	// при этом формируется один документ на общую сумму начислений + пени, а ссылка на него в обеих строках.
	// Аналогично когда льготы отражаются вместе с начислениями.
	СуммаНачисленийФакт = 0;
	СуммаЛьготФакт      = 0;
	СуммаПениФакт       = 0;
	
	Для Каждого СтрокаНачисления Из Объект.НачисленияКОтражению Цикл
		
		Если СтрокаНачисления.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Льготы") Тогда
			ВсегоЛьгот = ВсегоЛьгот + СтрокаНачисления.СуммаОтражения;
		ИначеЕсли СтрокаНачисления.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Пени") Тогда
			ВсегоПени = ВсегоПени + СтрокаНачисления.СуммаОтражения;
		Иначе
			ВсегоНачислений = ВсегоНачислений + СтрокаНачисления.СуммаОтражения;
		КонецЕсли;
		
		Если Не СтрокаНачисления.ДокументОтражения = Неопределено Тогда
			
			Если СтрокаНачисления.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Льготы") Тогда
				СуммаЛьготФакт = СуммаЛьготФакт + СтрокаНачисления.СуммаДокумента;
			ИначеЕсли СтрокаНачисления.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Пени") Тогда
				СуммаПениФакт = СуммаПениФакт + СтрокаНачисления.СуммаДокумента;
			Иначе
				СуммаНачисленийФакт = СуммаНачисленийФакт + СтрокаНачисления.СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоНачислений = Формат(ВсегоНачислений, "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	ИтогоЛьгот      = Формат(ВсегоЛьгот,      "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	ИтогоПени       = Формат(ВсегоПени,       "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	
	ИтогоНачисленийФакт = Формат(СуммаНачисленийФакт, "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	ИтогоЛьготФакт      = Формат(СуммаЛьготФакт,      "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	ИтогоПениФакт       = Формат(СуммаПениФакт,       "ЧДЦ=2; ЧН=0,00; ЧГ=0") + " руб.";
	
КонецПроцедуры

&НаСервере
// Процедура заполняет отражение на сервере.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьОтражениеНаСервере(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ЗаполнитьТабличнуюЧастьОтражениеНачисленийНаСервере(ОбновитьСодержаниеТабличнойЧасти);
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		Элементы.НачисленияКОтражению.ТекущаяСтрока = Объект.НачисленияКОтражению[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
КонецПроцедуры

&НаСервере
// Помечает на удаление документы отражения начислений.
Процедура ПометитьНаУдалениеДокументОтраженияНачислений(ТекущаяСтрока, МассивСсылокУдаляемыхДокументов)
	
	СтрокаТабличнойЧасти = Объект.НачисленияКОтражению.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// Если не стоит флаг отражения - ничего не делаем.
	Если Не СтрокаТабличнойЧасти.Отражать Тогда
		Возврат;
	КонецЕсли;
	
	ТекДокумент = СтрокаТабличнойЧасти.ДокументОтражения;
	
	// Если документ в строке указан, помечаем его на удаление.
	Если ЗначениеЗаполнено(ТекДокумент) Тогда
		
		Попытка
			
			ДокОбъект = ТекДокумент.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");
			
			МассивСсылокУдаляемыхДокументов.Добавить(ДокОбъект.Ссылка);
			
			СтрокаТабличнойЧасти.СуммаДокумента = 0;
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + СтрокаТабличнойЧасти.НомерСтроки 
															+ " не удалось пометить на удаление документ по причине:"
															+ Символы.ПС + "    " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ПометитьНаУдалениеДокументОтраженияНачислений()

&НаСервере
// Удаляет ссылки на документы отражения начислений в ТЧ "НачисленияКОтражению".
Процедура ОчиститьСсылкиНаДокументыОтраженияНачислений(ТекущаяСтрока)
	
	ТекДанные = Объект.НачисленияКОтражению.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекДанные.ДокументОтражения = Неопределено;
	ТекДанные.СчетФактура       = Документы.СчетФактураВыданный.ПустаяСсылка();
	
КонецПроцедуры // ОчиститьСсылкиНаДокументыОтраженияНачислений()

&НаКлиенте
// Процедура проверяет есть ли данные к отражению по агентской схеме или отрицательные начисления.
Процедура ПроверитьДанныеКОтражению()
	
	Если Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации")
	   И Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Проверим есть ли данные к отражению по агентской схеме или отрицательные начисления.
		// Если есть, то передупреждаем пользователей, что для таких ситуаций
		// будут сформированы документы "Реализация товаров и услуг".
		
		ЕстьНачисленияПоАгентскойСхеме = Ложь;
		ЕстьОтрицательныеНачисления    = Ложь;
		
		СтруктураОтбора = Новый Структура("ВариантПоставкиУслуг", 
										   ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема"));
		НайденныеСтроки = Объект.НачисленияКОтражению.НайтиСтроки(СтруктураОтбора);
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			ЕстьНачисленияПоАгентскойСхеме = Истина;
		КонецЕсли;
		
		Если мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
			Для Каждого СтрокаРасшифровки Из Объект.НачисленияКОтражению Цикл
				Если СтрокаРасшифровки.СуммаОтражения < 0 Тогда
					ЕстьОтрицательныеНачисления = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьНачисленияПоАгентскойСхеме ИЛИ ЕстьОтрицательныеНачисления Тогда
			ТекстПредупреждения = "";
			ТекстПредупреждения = ТекстПредупреждения + ?(ЕстьНачисленияПоАгентскойСхеме, 
								  "Имеются начисления к отражению в регл. учете по агентской схеме.", "");
			ТекстПредупреждения = ТекстПредупреждения + ?(ЕстьОтрицательныеНачисления, 
								  "Имеются отрицательные начисления к отражению в регл. учете.", "");
			ТекстПредупреждения = ТекстПредупреждения + "
								  |По ним будут сформированы документы ""Реализация товаров и услуг"".";
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеКОтражению()

&НаКлиенте
// Проверяет заполненность некоторых реквизитов документа перед формирование документов отражения.
//
Функция ПроверитьЗаполненностьРеквизитов()
	
	Отказ = Ложь;
	
	// Если есть отражение льгот и льготы отражаются отдельно от начислений,
	// то проверим заполнение заполнение данных о контрагенте компенсации льгот.
	ОтражениеЛьготОтдельноОтНачислений = (СпособОтраженияЛьгот = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыОтраженияЛьгот.ОтдельноОтНачислений"));
	ЕстьОтражениеЛьгот = (Объект.НачисленияКОтражению.НайтиСтроки(Новый Структура("РазделУчета", ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Льготы"))).Количество() > 0);
	
	Если ОтражениеЛьготОтдельноОтНачислений И ЕстьОтражениеЛьгот Тогда
		
		Если Объект.КонтрагентКомпенсацииЛьгот.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан контрагент для отражения льгот!",, "Объект.КонтрагентКомпенсацииЛьгот",, Отказ);
		КонецЕсли;
		
		Если Объект.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан договор контрагента для отражения льгот!",, "Объект.ДоговорКонтрагентаКомпенсацииЛьгот",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если отражение производится актами об оказании услуг, а учет затрат
	// ведется по подразделениям, то проверим заполнение подразделения организации.
	Если Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг"
	   И ВестиУчетЗатратПоПодразделениям
	   И Объект.ПодразделениеОрганизации.Пустая() Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указано подразделение затрат!",, "Объект.ПодразделениеОрганизации",, Отказ);
		
	КонецЕсли;
	
	// Проверка типа документа отражения.
	Если ПустаяСтрока(Объект.ТипДокументаОтражения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан тип документов для отражения начислений!",, "Объект.ТипДокументаОтражения",, Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
// Функция проверяет, есть ли в табличной части НачисленияКОтражению ссылки на сформированные типовые документы
// отражения начислений.
// 
// Возвращаемое значение:
//  НаличиеСформированныхДокументов - Булево - возвращается Истина, если в ТЧ есть ссылка на хотя бы один
//                                   сформированный документ.
//
Функция ПроверитьНаличиеСформированныхДокументовОтраженияНачислений()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НачисленияКОтражению Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОтражения) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьНаличиеСформированныхДокументовОтраженияНачислений()

&НаСервереБезКонтекста
// Процедура сохраняет настройку отображения сведений для отражения по текущей строке документа.
//
Процедура СохранитьНастройкуОтображенияСведенийДляОтраженияПоТекущейСтроке(ОтображатьСведенияДляОтраженияТекущегоНачисления)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ОтражениеНачисленийВРеглУчете", "ОтображатьСведенияДляОтраженияТекущегоНачисления", ОтображатьСведенияДляОтраженияТекущегоНачисления);
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет сведения для отражения по текущей строке.
//
Процедура ОбновитьСведенияДляОтраженияПоТекущейСтроке()
	
	// Формируем табличный документ с информацией для отражения.
	ДанныеТекущейСтроки = Элементы.НачисленияКОтражению.ТекущиеДанные;
	Если Не ДанныеТекущейСтроки = Неопределено Тогда
		
		СтруктураОтбораПоТекущейСтроке = Новый Структура;
		СтруктураОтбораПоТекущейСтроке.Вставить("Отражать",            ДанныеТекущейСтроки.Отражать);
		СтруктураОтбораПоТекущейСтроке.Вставить("НомерСтроки",         ДанныеТекущейСтроки.НомерСтроки);
		СтруктураОтбораПоТекущейСтроке.Вставить("ЛицевойСчет",         ДанныеТекущейСтроки.ЛицевойСчет);
		СтруктураОтбораПоТекущейСтроке.Вставить("Услуга",              ДанныеТекущейСтроки.Услуга);
		СтруктураОтбораПоТекущейСтроке.Вставить("РазделУчета",         ДанныеТекущейСтроки.РазделУчета);
		СтруктураОтбораПоТекущейСтроке.Вставить("ЭтоКорректировка",    ДанныеТекущейСтроки.ЭтоКорректировка);
		СтруктураОтбораПоТекущейСтроке.Вставить("ВидКорректировки",    ДанныеТекущейСтроки.ВидКорректировки);
		СтруктураОтбораПоТекущейСтроке.Вставить("ПериодКорректировки", ДанныеТекущейСтроки.ПериодКорректировки);
		СтруктураОтбораПоТекущейСтроке.Вставить("СуммаОтражения",      ДанныеТекущейСтроки.СуммаОтражения);
		СтруктураОтбораПоТекущейСтроке.Вставить("ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода", ДанныеТекущейСтроки.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода);
		СтруктураОтбораПоТекущейСтроке.Вставить("ДокументОтражения",   ДанныеТекущейСтроки.ДокументОтражения);
		СтруктураОтбораПоТекущейСтроке.Вставить("ИдентификаторСтроки", ДанныеТекущейСтроки.ИдентификаторСтроки);
		
		АдресХранилищаТабличногоДокумента = СформироватьТабличныйДокументСИнформациейДляОтраженияПоТекущейСтроке( 
												СтруктураОтбораПоТекущейСтроке, 
												мНастройкиУчетнойПолитикиТСЖ);
		ДокументСоСведениямиДляОтраженияПоТекущейСтроке = ПолучитьИзВременногоХранилища(АдресХранилищаТабличногоДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция формирует табличный документ с информацией для отражения по текущей строке.
//
Функция СформироватьТабличныйДокументСИнформациейДляОтраженияПоТекущейСтроке(СтруктураОтбораПоТекущейСтроке, 
																			 мНастройкиУчетнойПолитикиТСЖ)
	
	// Получим макет табличного документа.
	Макет = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьМакет("МакетИнформацииДляОтраженияНачислений");
	
	// Получение параметров расшифровки текущего начисления.
	СтруктураПараметров = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьПараметрыСтрокиНачисленияДляОтражения(Объект.Ссылка, 
							Объект.Организация, 
							Объект.Дата, 
							Объект.ТипДокументаОтражения, 
							СтруктураОтбораПоТекущейСтроке, 
							мНастройкиУчетнойПолитикиТСЖ);
	
	// Формирование и заполнение табличного документа.
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьЛицевойСчет");
	ОсновнаяОбласть.Параметры.Заполнить(СтруктураПараметров);
	ДокументРезультат.Вывести(ОсновнаяОбласть);
	
	ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьУслуга");
	ОсновнаяОбласть.Параметры.Заполнить(СтруктураПараметров);
	ДокументРезультат.Вывести(ОсновнаяОбласть);
	
	// Выводим данные по агентской схеме, если необходимо.
	Если СтруктураПараметров.Свойство("СчетРасчетовСПоставщиком") Тогда
		ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьАгентскаяСхема");
		ОсновнаяОбласть.Параметры.Заполнить(СтруктураПараметров);
		ДокументРезультат.Вывести(ОсновнаяОбласть);
	КонецЕсли;
	
	ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьСчетУчетаУслуги");
	ОсновнаяОбласть.Параметры.Заполнить(СтруктураПараметров);
	ДокументРезультат.Вывести(ОсновнаяОбласть);
	
	//ВНИМАНИЕ:
	//Механизм временно не используется. 
	//Подробнее см. в комментариях к процедуре УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.
	//
	// Выводим таблицу данных с детализацией по объемам и тарифам.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями(Объект.Дата) 
	   И ТипЗнч(СтруктураОтбораПоТекущейСтроке) = Тип("Структура") 
	   И СтруктураОтбораПоТекущейСтроке.Свойство("ИдентификаторСтроки") Тогда
		
		ОтборПоИдентификаторуСтроки = Новый Структура("ИдентификаторСтроки", СтруктураОтбораПоТекущейСтроке.ИдентификаторСтроки);
		ДетализацияНачисленийПоТекущейСтроке = Объект.ДетализацияНачислений.НайтиСтроки(ОтборПоИдентификаторуСтроки);
		
		Если ДетализацияНачисленийПоТекущейСтроке.Количество() > 0 Тогда
			
			ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьШапкаТаблицыДеталей");
			ДокументРезультат.Вывести(ОсновнаяОбласть);
			
			ОсновнаяОбласть = Макет.ПолучитьОбласть("ОбластьСтрокаТаблицыДеталей");
			
			Для Каждого СтрокаДеталей Из ДетализацияНачисленийПоТекущейСтроке Цикл
				ОсновнаяОбласть.Параметры.Заполнить(СтрокаДеталей);
				ДокументРезультат.Вывести(ОсновнаяОбласть);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Помещаем документ во временное хранилище и возвращаем на клиент.
	Возврат ПоместитьВоВременноеХранилище(ДокументРезультат);
	
КонецФункции

&НаСервере
// Процедура проверяет совпадение сумм к отражению и сумм в документах отражения.
//
Процедура ЗаполнитьСуммыДокументовОтражения()
	
	// Выгрузим необходимые колонки из табличной части "НачисленияКОтражению" для передачи в запрос.
	врНачисленияКОтражению = Объект.НачисленияКОтражению.Выгрузить( , "НомерСтроки, Услуга, РазделУчета, СуммаОтражения, ДокументОтражения");
	
	// Запрос:
	// 1. Получаем все строки из табличной части "НачисленияКОтражению".
	// 2. Для полученных строк определяем номенклатуру, соответствующую услуге. Если раздел учета в строке - льготы, то сумма
	//    отражения берется отрицательной, так как льготы могут отражаться уменьшением начисления и в документе отражения они
	//    будут отрицательными. Если льготы отражаются отдельно от начислений, то в пункте 9 сумма из документа отражения будет
	//    браться со знаком минус, что позволит корректно определить сумму документа для строки.
	// 3. В документах отражения строки сгруппированы по номенклатуре. Одной номенклатуре может соответствовать несколько услуг.
	//    Поэтому группируем строки из пункта 2.
	// 4. Из проведенных документов "АктОбОказанииПроизводственныхУслуг", "РеализацияТоваровИУслуг", "КорректировкаРеализации" и
	//    "КорректировкаДолга", указанных в качестве документов отражения в табличной части "НачисленияКОтражению",
	//    получаем номенклатуру и ее сумму отражения.
	// 5. Группируем строки из пункта 4.
	// 6. Для строк из табличной части "НачисленияКОтражению" определяем совпадает ли сумма отражения с суммой
	//    из документа отражения.
	// 7. Получаем из пункта 6 все строки, кроме строк, где документом отражения является "Корректировка долга".
	// 8. Получаем из пункта 6 только строки, где документом отражения является "Корректировка долга", затем группируем
	//    по документу отражения. Группировка нужна для того, чтобы в результате левого соединения в пункте 9 не происходило
	//    увеличение строк с документами отражения "Корректировка долга".
	// 9. Добавляем к строкам из табличной части "НачисленияКОтражению" сведения о совпадении сумм, суммы из соответствующих
	//    документов отражения, а так же общую сумму к отражению, полученную в результате группировки по номенклатуре.
	//
	// Примечание: В документе "Корректировка долга" данные группируются по лицевому счету,
	//             поэтому сумму по каждой номенклатуре определить не можем. Пока считаем,
	//             что для данных документов суммы всегда совпадают.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияКОтражению.НомерСтроки,
	|	НачисленияКОтражению.Услуга,
	|	НачисленияКОтражению.РазделУчета,
	|	НачисленияКОтражению.СуммаОтражения,
	|	НачисленияКОтражению.ДокументОтражения
	|ПОМЕСТИТЬ врНачисленияКОтражению
	|ИЗ
	|	&НачисленияКОтражению КАК НачисленияКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияКОтражению.НомерСтроки,
	|	ЕСТЬNULL(КВП_Услуги.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Номенклатура,
	|	врНачисленияКОтражению.РазделУчета,
	|	ВЫБОР
	|		КОГДА врНачисленияКОтражению.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|			ТОГДА -врНачисленияКОтражению.СуммаОтражения
	|		ИНАЧЕ врНачисленияКОтражению.СуммаОтражения
	|	КОНЕЦ КАК СуммаОтражения,
	|	врНачисленияКОтражению.ДокументОтражения
	|ПОМЕСТИТЬ врНачисленияКОтражениюСНоменклатурой
	|ИЗ
	|	врНачисленияКОтражению КАК врНачисленияКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО врНачисленияКОтражению.Услуга = КВП_Услуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияКОтражениюСНоменклатурой.Номенклатура,
	|	врНачисленияКОтражениюСНоменклатурой.ДокументОтражения,
	|	СУММА(врНачисленияКОтражениюСНоменклатурой.СуммаОтражения) КАК СуммаОтражения
	|ПОМЕСТИТЬ врИтогиНачисленияКОтражениюСНоменклатурой
	|ИЗ
	|	врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой
	|
	|СГРУППИРОВАТЬ ПО
	|	врНачисленияКОтражениюСНоменклатурой.Номенклатура,
	|	врНачисленияКОтражениюСНоменклатурой.ДокументОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
	|	АктОбОказанииПроизводственныхУслугУслуги.Сумма КАК СуммаДокумента
	|ПОМЕСТИТЬ врДокументыОтражения
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражениюСНоменклатурой.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой)
	|	И АктОбОказанииПроизводственныхУслугУслуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражениюСНоменклатурой.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой)
	|	И РеализацияТоваровУслугУслуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка,
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	РеализацияТоваровУслугАгентскиеУслуги.Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражению.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражению КАК врНачисленияКОтражению)
	|	И РеализацияТоваровУслугАгентскиеУслуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражениюСНоменклатурой.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой)
	|	И КорректировкаРеализацииУслуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииАгентскиеУслуги.Ссылка,
	|	КорректировкаРеализацииАгентскиеУслуги.Номенклатура,
	|	КорректировкаРеализацииАгентскиеУслуги.Сумма - КорректировкаРеализацииАгентскиеУслуги.СуммаДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.АгентскиеУслуги КАК КорректировкаРеализацииАгентскиеУслуги
	|ГДЕ
	|	КорректировкаРеализацииАгентскиеУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражениюСНоменклатурой.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой)
	|	И КорректировкаРеализацииАгентскиеУслуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаДолга.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	0
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				врНачисленияКОтражениюСНоменклатурой.ДокументОтражения КАК ДокументОтражения
	|			ИЗ
	|				врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДокументыОтражения.Ссылка КАК ДокументОтражения,
	|	врДокументыОтражения.Номенклатура,
	|	СУММА(врДокументыОтражения.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ врИтогиДокументовОтраженияСНоменклатурой
	|ИЗ
	|	врДокументыОтражения КАК врДокументыОтражения
	|
	|СГРУППИРОВАТЬ ПО
	|	врДокументыОтражения.Ссылка,
	|	врДокументыОтражения.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врИтогиНачисленияКОтражениюСНоменклатурой.Номенклатура,
	|	врИтогиНачисленияКОтражениюСНоменклатурой.ДокументОтражения,
	|	ВЫБОР
	|		КОГДА врИтогиДокументовОтраженияСНоменклатурой.СуммаДокумента = врИтогиНачисленияКОтражениюСНоменклатурой.СуммаОтражения
	|				ИЛИ врИтогиНачисленияКОтражениюСНоменклатурой.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммыСовпадают,
	|	врИтогиДокументовОтраженияСНоменклатурой.СуммаДокумента
	|ПОМЕСТИТЬ врРезультатыСравненияСуммОтражения
	|ИЗ
	|	врИтогиНачисленияКОтражениюСНоменклатурой КАК врИтогиНачисленияКОтражениюСНоменклатурой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врИтогиДокументовОтраженияСНоменклатурой КАК врИтогиДокументовОтраженияСНоменклатурой
	|		ПО врИтогиНачисленияКОтражениюСНоменклатурой.ДокументОтражения = врИтогиДокументовОтраженияСНоменклатурой.ДокументОтражения
	|			И (врИтогиНачисленияКОтражениюСНоменклатурой.Номенклатура = врИтогиДокументовОтраженияСНоменклатурой.Номенклатура
	|				ИЛИ врИтогиДокументовОтраженияСНоменклатурой.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врРезультатыСравненияСуммОтражения.Номенклатура,
	|	врРезультатыСравненияСуммОтражения.ДокументОтражения,
	|	врРезультатыСравненияСуммОтражения.СуммыСовпадают,
	|	врРезультатыСравненияСуммОтражения.СуммаДокумента
	|ПОМЕСТИТЬ врРезультатыСравненияБезКорректировокДолга
	|ИЗ
	|	врРезультатыСравненияСуммОтражения КАК врРезультатыСравненияСуммОтражения
	|ГДЕ
	|	НЕ врРезультатыСравненияСуммОтражения.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врРезультатыСравненияСуммОтражения.ДокументОтражения,
	|	МАКСИМУМ(врРезультатыСравненияСуммОтражения.СуммыСовпадают) КАК СуммыСовпадают,
	|	МАКСИМУМ(врРезультатыСравненияСуммОтражения.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ врРезультатыСравненияКорректировкиДолга
	|ИЗ
	|	врРезультатыСравненияСуммОтражения КАК врРезультатыСравненияСуммОтражения
	|ГДЕ
	|	врРезультатыСравненияСуммОтражения.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга
	|
	|СГРУППИРОВАТЬ ПО
	|	врРезультатыСравненияСуммОтражения.ДокументОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияКОтражениюСНоменклатурой.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА врНачисленияКОтражениюСНоменклатурой.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга
	|				ТОГДА врРезультатыСравненияКорректировкиДолга.СуммыСовпадают
	|			ИНАЧЕ врРезультатыСравненияБезКорректировокДолга.СуммыСовпадают
	|		КОНЕЦ, ЛОЖЬ) КАК СуммыСовпадают,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА врНачисленияКОтражениюСНоменклатурой.ДокументОтражения ССЫЛКА Документ.КорректировкаДолга
	|				ТОГДА -врРезультатыСравненияКорректировкиДолга.СуммаДокумента
	|			ИНАЧЕ врРезультатыСравненияБезКорректировокДолга.СуммаДокумента
	|		КОНЕЦ, 0) КАК СуммаДокументаОтражения,
	|	врИтогиНачисленияКОтражениюСНоменклатурой.СуммаОтражения КАК СуммаНачисленияКОтражению
	|ИЗ
	|	врНачисленияКОтражениюСНоменклатурой КАК врНачисленияКОтражениюСНоменклатурой
	|		ЛЕВОЕ СОЕДИНЕНИЕ врИтогиНачисленияКОтражениюСНоменклатурой КАК врИтогиНачисленияКОтражениюСНоменклатурой
	|		ПО врНачисленияКОтражениюСНоменклатурой.ДокументОтражения = врИтогиНачисленияКОтражениюСНоменклатурой.ДокументОтражения
	|			И врНачисленияКОтражениюСНоменклатурой.Номенклатура = врИтогиНачисленияКОтражениюСНоменклатурой.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ врРезультатыСравненияБезКорректировокДолга КАК врРезультатыСравненияБезКорректировокДолга
	|		ПО врНачисленияКОтражениюСНоменклатурой.ДокументОтражения = врРезультатыСравненияБезКорректировокДолга.ДокументОтражения
	|			И врНачисленияКОтражениюСНоменклатурой.Номенклатура = врРезультатыСравненияБезКорректировокДолга.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ врРезультатыСравненияКорректировкиДолга КАК врРезультатыСравненияКорректировкиДолга
	|		ПО врНачисленияКОтражениюСНоменклатурой.ДокументОтражения = врРезультатыСравненияКорректировкиДолга.ДокументОтражения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("НачисленияКОтражению", врНачисленияКОтражению);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	// Пройдемся по каждой строке из табличной части и установим сумму документа отражения
	// и признак совпадения сумм. Параллельно будем двигать выборку из запроса. Порядок строк
	// в запросе совпадает с порядком строк из табличной части.
	Для Каждого Строка Из Объект.НачисленияКОтражению Цикл
		
		Если РезультатЗапроса.Следующий() Тогда
			
			Строка.СуммыСовпадают = РезультатЗапроса.СуммыСовпадают;
			
			// Заполним сумму отражения из документа.
			Если РезультатЗапроса.СуммыСовпадают Тогда
				
				// Если в целом по номенклатуре суммы совпадают, то берем просто сумму начисления.
				Строка.СуммаДокумента = Строка.СуммаОтражения;
				
			Иначе
				
				// Если суммы в целом не совпадают, то определяем пропорционально текущей сумме
				// исходя из общей суммы начисления к отражению по текущей номенклатуре.
				Строка.СуммаДокумента = ?(РезультатЗапроса.СуммаДокументаОтражения = 0, 0, Строка.СуммаОтражения / РезультатЗапроса.СуммаНачисленияКОтражению * РезультатЗапроса.СуммаДокументаОтражения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОтражениеВРеглУчетеДоступно              = Форма.ОтражатьНачисленияВРеглУчете;
	Элементы.Общая.Видимость                 = Не ОтражениеВРеглУчетеДоступно;
	Элементы.ОтражениеВРеглУчете.Видимость   = ОтражениеВРеглУчетеДоступно;
	Элементы.ТипДокументаОтражения.Видимость = ОтражениеВРеглУчетеДоступно;
	
	Элементы.СуммаВключаетНДС.Доступность = Объект.УчитыватьНДС;
	
	Элементы.ПодразделениеОрганизации.Видимость = (Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" И Форма.ВестиУчетЗатратПоПодразделениям);
	
	// Управление сведениями для отражения начислений по текущей строке.
	Элементы.ДеревоПоказанийКомандаОтображатьСведенияДляОтраженияТекущегоНачисления.Пометка = Форма.ОтображатьСведенияДляОтраженияТекущегоНачисления;
	Элементы.ИнформацияПоТекущейСтроке.Видимость = Форма.ОтображатьСведенияДляОтраженияТекущегоНачисления;
	
	Элементы.ОтчетностьПодписана.Видимость = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете(Объект.Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЦЕДУРАМИ И ФУНКЦИЯМИ МОДУЛЯ ОБЪЕКТА

&НаСервере
// Процедура заполнения табличной части.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьТабличнуюЧастьОтражениеНачисленийНаСервере(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_ОтражениеНачисленийВРеглУчете"));
	ДокументОбъект.ЗаполнитьТабличнуюЧастьОтражениеНачислений(ОбновитьСодержаниеТабличнойЧасти, Объект.ГруппаУслуг, Объект.ОбъектОтражения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура формирования документов.
Процедура СформироватьДокументыНаСервере(ПравитьСуществующие = Ложь)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.СформироватьДокументыТабличнойЧасти(ПравитьСуществующие);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // СформироватьДокументыНаСервере()

&НаСервереБезКонтекста
// Процедура проверки наличия документов отражения в месяце отражения.
//
Функция ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтраженияНаСервере(СтруктураПараметров)
	
	Возврат Документы.КВП_ОтражениеНачисленийВРеглУчете.ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения(СтруктураПараметров);
	
КонецФункции

&НаКлиенте
// Процедура проверки наличия документов отражения в месяце отражения.
//
Функция ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",       Объект.Организация);
	СтруктураПараметров.Вставить("ДокументОтражения", Объект.Ссылка);
	СтруктураПараметров.Вставить("ГруппаУслуг",       Объект.ГруппаУслуг);
	СтруктураПараметров.Вставить("ОбъектОтражения",   Объект.ОбъектОтражения);
	СтруктураПараметров.Вставить("МесяцОтражения",    Объект.Дата);
	
	Возврат ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтраженияНаСервере(СтруктураПараметров);
	
КонецФункции

&НаСервере
// Процедура пометки на удаление документов отражения.
Процедура ПометитьНаУдалениеДокументыОтражения(МассивСсылокУдаляемыхДокументов, ОставлятьДокументыПриИспользованииАгентскойСхемы = Ложь)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НачисленияКОтражению Цикл
		
		// Не трогаем документы с вариантом поставки услуг "Агентская схема" или с отрицательным значением суммы начисления, так как
		// по ним в любом случае формируется докмент "Реализация товаров и услуг".
		//Если (ОставлятьДокументыПриИспользованииАгентскойСхемы 
		//	И СтрокаТабличнойЧасти.ВариантПоставкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема")) Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		
		ПометитьНаУдалениеДокументОтраженияНачислений(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), МассивСсылокУдаляемыхДокументов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// очищает ссылки документов на сервере.
Процедура ОчиститьСсылкиДокументовОтражения(МассивСсылокУдаляемыхДокументов)
	
	Для Каждого ТекСсылка Из МассивСсылокУдаляемыхДокументов Цикл
		Отбор = Новый Структура("ДокументОтражения", ТекСсылка);
		СтрокиДокумента = Объект.НачисленияКОтражению.НайтиСтроки(Отбор);
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			ОчиститьСсылкиНаДокументыОтраженияНачислений(СтрокаДокумента.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Заполним признак учета  затрат по подразделениям для контроля заполнения подразделения затрат.
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	
	// Заполним реквизиты нового документа.
	Если Объект.Ссылка.Пустая() Тогда
		
		// Установим признак использования нового механизма отражения начислений.
		Объект.ИспользуетсяНовыйМеханизмОтраженияНачислений = Истина;
		
		// Заполнение параметров нового документа.
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Объект.ТипДокументаОтражения              = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "ТипДокументаОтражения");
		Объект.КонтрагентКомпенсацииЛьгот         = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "КонтрагентКомпенсацииЛьгот");
		Объект.ДоговорКонтрагентаКомпенсацииЛьгот = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "ДоговорКонтрагентаКомпенсацииЛьгот");
		// Для информации:
		// Месяц отражения в регистре данных к отражению - это начало месяца,
		// для однообразия дату документа тоже устанавливаем в начало месяца.
		// При этом данные для заполнения ТЧ получаем на конец месяца.
		Объект.Дата                = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		
		// Заполним подразделение затрат значением по умолчанию.
		Если Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" И ВестиУчетЗатратПоПодразделениям Тогда
			Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Объект.Организация);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	мДатаУчетнойПолитики = ?(Объект.Ссылка.Пустая(), УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), Объект.Дата);
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(мДатаУчетнойПолитики,
																									Объект.Организация);
	СпособОтраженияЛьгот         = мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот;
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	СписокТиповДокументов = Новый СписокЗначений();
	СписокТиповДокументов.Добавить("Акт об оказании производственных услуг", "Акт об оказании производственных услуг");
	СписокТиповДокументов.Добавить("Реализация товаров и услуг",             "Реализация товаров и услуг");
	
	Для Каждого ТекТипДокумента Из СписокТиповДокументов Цикл
		Элементы.ТипДокументаОтражения.СписокВыбора.Добавить(ТекТипДокумента.Значение, ТекТипДокумента.Представление);
	КонецЦикла;
	
	Элементы.НадписьСуммаНеОтражена.ЦветТекста  = ЦветаСтиля.ЦветТекстаПоля;
	Элементы.НадписьСуммыСовпадают.ЦветТекста   = WebЦвета.Серый;
	Элементы.НадписьСуммыНеСовпадают.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	ВывестиИнфСтрокуОперацииБезОтраженияВДокументе();
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ПредыдущаяОрганизация           = Объект.Организация;
	ПредыдущийМесяцОтражения        = Объект.Дата;
	ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения;
	ПредыдущаяГруппаУслуг           = Объект.ГруппаУслуг;
	ПредыдущийОбъектОтражения       = Объект.ОбъектОтражения;
	ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете();
	
	// Заполнение представления месяца отражения.
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "МесяцОтраженияСтрокой");
	
	// Восстановление пользовательской настройки отображения сведений по текущей строке.
	ОтображатьСведенияДляОтраженияТекущегоНачисления = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ОтражениеНачисленийВРеглУчете", "ОтображатьСведенияДляОтраженияТекущегоНачисления", Ложь);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Управление формой.
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВыбораЗачетАвансов();
	СпособЗачетаАвансов = Элементы.ЗачетАвансов.СписокВыбора.НайтиПоЗначению(Объект.СпособЗачетаАвансов).Значение;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если подразделение организации заполнено, а при этом вид операции и документ отражения не соответствуют
	// отражению документом "Акт об оказании производственных услуг", то реквизит нужно очистить.
	Если Не Объект.ПодразделениеОрганизации.Пустая()
	   И Не Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
		Объект.ПодразделениеОрганизации = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСуммыДокументовОтражения();
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "ТипДокументаОтражения",             Объект.ТипДокументаОтражения);
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "КонтрагентКомпенсацииЛьгот",        Объект.КонтрагентКомпенсацииЛьгот);
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "ДоговорКонтрагентаКомпенсацииЛьгот",Объект.ДоговорКонтрагентаКомпенсацииЛьгот);
		
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	// Сохранение пользовательской настройки отображения сведений по текущей строке.
	СохранитьНастройкуОтображенияСведенийДляОтраженияПоТекущейСтроке(ОтображатьСведенияДляОтраженияТекущегоНачисления);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияНачислений" Тогда
		ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ПредыдущаяОрганизация = Объект.Организация Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
		
		ТекстВопроса = "При изменении организации табличная часть будет очищена. Продолжить?";
		
		// В случае, если в табличной части есть ссылки на сформированные типовые документы отражения начислений
		// и документ проведен, сообщим о необходимости выполнить отмену проведения документа.
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Табличная часть будет очищена, а сформированные документы помечены на удаление. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОрганизацияПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ОрганизацияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ОрганизацияПриИзменении()".
Процедура ОбработатьРезультатВопросаОрганизацияПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.Организация = ПредыдущаяОрганизация;
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов, Истина);
		Состояние("Обработка документов отражения завершена...");
		
		ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли;
	
	Объект.НачисленияКОтражению.Очистить();
	Объект.ДетализацияНачислений.Очистить();
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ОрганизацияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ОрганизацияПриИзменении()".
Процедура ОрганизацияПриИзмененииПродолжение()
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																									Объект.Организация);
	СпособОтраженияЛьгот         = мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот;
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	УправлениеФормой(ЭтаФорма);
	
	ПредыдущаяОрганизация = Объект.Организация;
	
	// Проверим, нет ли уже документа отражения по организации в периоде отражения.
	ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцОтраженияСтрокой".
Процедура МесяцОтраженияСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Дата", "МесяцОтраженияСтрокой");
	
	ПриИзмененииПериодаОтражения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцОтраженияСтрокой".
Процедура МесяцОтраженияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборМесяцаОтражения", ЭтаФорма);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Дата", "МесяцОтраженияСтрокой", Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата выбора периода для взаиморасчетов.
Процедура ОбработатьВыборМесяцаОтражения(Результат, ДопПараметры) Экспорт
	
	ПриИзмененииПериодаОтражения();
	
КонецПроцедуры // Графики_ОбработатьВыборПериодаВзаиморасчетов()

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцОтраженияСтрокой".
Процедура МесяцОтраженияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Дата", "МесяцОтраженияСтрокой", Направление);
	
	ПриИзмененииПериодаОтражения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцОтраженияСтрокой".
Процедура МесяцОтраженияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцОтраженияСтрокой".
Процедура МесяцОтраженияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ПриИзмененииПериодаОтражения()
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
		
		ТекстВопроса = "При изменении периода отражения табличная часть будет очищена. Продолжить?";
		
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Табличная часть будет очищена, а сформированные документы помечены на удаление. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаМесяцОтраженияПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ПериодОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ПериодОтраженияПриИзменении()".
Процедура ОбработатьРезультатВопросаМесяцОтраженияПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.Дата = ПредыдущийМесяцОтражения;
		УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Дата", "МесяцОтраженияСтрокой");
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов);
		Состояние("Обработка документов отражения завершена...");
		
		// ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли;
	
	Объект.НачисленияКОтражению.Очистить();
	Объект.ДетализацияНачислений.Очистить();
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ПериодОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаВидОперацииПриИзменении()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ПериодОтраженияПриИзменении()".
Процедура ПериодОтраженияПриИзмененииПродолжение()
	
	ПредыдущийМесяцОтражения = Объект.Дата;
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																									Объект.Организация);
	СпособОтраженияЛьгот         = мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот;
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	УправлениеФормой(ЭтаФорма);
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	// Проверим, нет ли уже документа отражения в измененном периоде отражения.
	ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения();
	
КонецПроцедуры // ПериодОтраженияПриИзмененииПродолжение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СпособЗачетаАвансов".
Процедура ЗачетАвансовПриИзменении(Элемент)
	
	Объект.СпособЗачетаАвансов = СпособЗачетаАвансов;
	
КонецПроцедуры

&НаКлиенте
// Обработчик начала выбора значения в недоступном поле таблицы "НачисленияКОтражению".
//
Процедура НачисленияКОтражениюНачалоВыбораВНедоступномПоле(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ГруппаУслуг".
Процедура ГруппаУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений")));
	
	ОткрытьФорму("Справочник.УПЖКХ_ГруппыУслуг.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГруппаУслуг".
Процедура ГруппаУслугПриИзменении(Элемент)
	
	Если ПредыдущаяГруппаУслуг = Объект.ГруппаУслуг Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
		
		ТекстВопроса = "При изменении группы услуг табличная часть будет очищена. Продолжить?";
		
		// В случае, если в табличной части есть ссылки на сформированные типовые документы отражения начислений
		// и документ проведен, сообщим о необходимости выполнить отмену проведения документа.
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Табличная часть будет очищена, а сформированные документы помечены на удаление. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаГруппаУслугПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ГруппаУслугПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ГруппаУслугПриИзменении()".
Процедура ОбработатьРезультатВопросаГруппаУслугПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ГруппаУслуг = ПредыдущаяГруппаУслуг;
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов, Истина);
		Состояние("Обработка документов отражения завершена...");
		
		ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли;
	
	Объект.НачисленияКОтражению.Очистить();
	Объект.ДетализацияНачислений.Очистить();
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ГруппаУслугПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ГруппаУслугПриИзменении()".
Процедура ГруппаУслугПриИзмененииПродолжение()
	
	УправлениеФормой(ЭтаФорма);
	
	ПредыдущаяГруппаУслуг = Объект.ГруппаУслуг;
	
	// Проверим, нет ли уже документа отражения по группе в периоде отражения.
	ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектОтражения".
Процедура ОбъектОтраженияПриИзменении(Элемент)
	
	Если ПредыдущийОбъектОтражения = Объект.ОбъектОтражения Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
		
		ТекстВопроса = "При изменении объекта отражения табличная часть будет очищена. Продолжить?";
		
		// В случае, если в табличной части есть ссылки на сформированные типовые документы отражения начислений
		// и документ проведен, сообщим о необходимости выполнить отмену проведения документа.
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Табличная часть будет очищена, а сформированные документы помечены на удаление. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбъектОтраженияПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ОбъектОтраженияПриИзменении()".
Процедура ОбработатьРезультатВопросаОбъектОтраженияПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ОбъектОтражения = ПредыдущийОбъектОтражения;
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов, Истина);
		Состояние("Обработка документов отражения завершена...");
		
		ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли;
	
	Объект.НачисленияКОтражению.Очистить();
	Объект.ДетализацияНачислений.Очистить();
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ОбъектОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ОбъектОтраженияПриИзменении()".
Процедура ОбъектОтраженияПриИзмененииПродолжение()
	
	УправлениеФормой(ЭтаФорма);
	
	ПредыдущийОбъектОтражения = Объект.ОбъектОтражения;
	
	// Проверим, нет ли уже документа отражения по группе в периоде отражения.
	ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипДокументаОтражения".
Процедура ТипДокументаОтраженияПриИзменении(Элемент)
	
	Если ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения Тогда
		Возврат;
	КонецЕсли;
	
	// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
	ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
	Если Объект.НачисленияКОтражению.Количество() > 0 И ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
					   "Сформированные документы будут помечены на удаление, ссылки на них очищены. Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаТипДокументаОтраженияПриИзменении", ЭтотОбъект),
					  ТекстВопроса,
					  РежимДиалогаВопрос.ДаНет, ,
					  КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ТипДокументаОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ТипДокументаОтраженияПриИзменении()".
Процедура ОбработатьРезультатВопросаТипДокументаОтраженияПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ТипДокументаОтражения = ПредыдущийТипДокументаОтражения;
		Возврат;
	КонецЕсли;
	
	// Пометим на удалений документы отражения начислений, в случае наличия ссылок на них в табличной части.
	МассивСтрокУдалДокументов = Новый Массив;
	
	Состояние("Выполняется обработка документов отражения...");
	ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов, Истина);
	Состояние("Обработка документов отражения завершена...");
	
	ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	ТипДокументаОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ТипДокументаОтраженияПриИзменении()".
Процедура ТипДокументаОтраженияПриИзмененииПродолжение()
	
	ПроверитьДанныеКОтражению();
	УправлениеФормой(ЭтаФорма);
	ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УчитыватьНДС".
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЗачетАвансов".
Процедура ЗаполнитьСписокВыбораЗачетАвансов()
	
	Элементы.ЗачетАвансов.СписокВыбора.Очистить();
	
	МассивСпособовЗачетаАвансов = Новый Массив;
	МассивСпособовЗачетаАвансов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически"));
	МассивСпособовЗачетаАвансов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать"));
	
	Для Каждого ЭлементСписка Из МассивСпособовЗачетаАвансов Цикл
		Элементы.ЗачетАвансов.СписокВыбора.Добавить(ЭлементСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "НачисленияКОтражению".
//
Процедура НачисленияКОтражениюПриАктивизацииСтроки(Элемент)
	
	Если ОтображатьСведенияДляОтраженияТекущегоНачисления Тогда
		ПодключитьОбработчикОжидания("ОбновитьСведенияДляОтраженияПоТекущейСтроке", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтрагентКомпенсацииЛьгот".
Процедура КонтрагентКомпенсацииЛьготПриИзменении(Элемент)
	
	УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагентаКомпенсацииЛьгот,
																Объект.КонтрагентКомпенсацииЛьгот, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДоговорКонтрагентаКомпенсацииЛьгот".
Процедура ДоговорКонтрагентаКомпенсацииЛьготПриИзменении(Элемент)
	
	Если Не Объект.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
		Объект.КонтрагентКомпенсацииЛьгот = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагентаКомпенсацииЛьгот, "Владелец");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДоговорКонтрагентаКомпенсацииЛьгот".
Процедура ДоговорКонтрагентаКомпенсацииЛьготНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Если Не Объект.Организация.Пустая() Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если Не Объект.КонтрагентКомпенсацииЛьгот.Пустая() Тогда
		Отбор.Вставить("Владелец", Объект.КонтрагентКомпенсацииЛьгот);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ОткрытьПараметрыОтраженияНачислений".
Процедура ОткрытьПараметрыОтраженияНачислений(Команда)
	
	// При открытии формы записи УП передадим в нее ключ записи и имя начальной страницы.
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_НастройкаПараметровУчета", Новый Структура("ИмяНачальнойСтраницы", "РегламентированныйУчет"));
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьУчетнуюПолитикуПоОтражениюНачислений".
Процедура ОткрытьУчетнуюПолитикуПоОтражениюНачислений(Команда)
	
	КлючЗаписиУчетнойПолитикиЖКХ = УПЖКХ_ПараметрыУчетаСервер.ПолучитьКлючЗаписиУчетнойПолитикиЖКХПоОрганизацииНаДату(Объект.Дата, Объект.Организация);
	
	// Открываем форму актуальной записи учетной политики ЖКХ, если она определена.
	Если Не КлючЗаписиУчетнойПолитикиЖКХ = Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Ключ",                 КлючЗаписиУчетнойПолитикиЖКХ);
		Структура.Вставить("ИмяНачальнойСтраницы", "ГруппаРеглУчет");
		
		ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.ФормаЗаписи", Структура);
		
	Иначе
		
		// В противном случае выдаем пользователю предупреждение о ее отсутствии.
		ПоказатьПредупреждение(, "Учетная политика (ЖКХ) не определена на период отражения по указанной организации!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажки".
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.НачисленияКОтражению Цикл
		СтрокаТЧ.Отражать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьФлажки".
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.НачисленияКОтражению Цикл
		СтрокаТЧ.Отражать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	// Если в текущем месяце отражения уже есть документ отражения по организации и выбранной группе, то заполнение недоступно.
	Если ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстВопроса = "Перед заполнением необходимо выполнить отмену проведения документа.
						|Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОтменитьПроведениеДокументаПродолжение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "Заполнить".
//
Процедура ОбработатьРезультатВопросаОтменитьПроведениеДокументаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "Заполнить()".
Процедура ЗаполнитьПродолжение()
	
	Если Объект.НачисленияКОтражению.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачислений();
		
		// В случае, если в табличной части есть ссылки на сформированные типовые документы отражения начислений
		// и документ проведен, сообщим о необходимости выполнить отмену проведения документа.
		// Если документ не проведен, то откроем форму для выбора варианта заполнения с последующей обработкой выбора пользователя.
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ОткрытьФормуВыбораВариантаЗаполнения();
			
		Иначе
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьОкончание();
	
КонецПроцедуры // ЗаполнитьПродолжение()

&НаКлиенте
// Процедура открывает форму выбора варианта заполнения.
//
Процедура ОткрытьФормуВыбораВариантаЗаполнения()
	
	// Откроем форму для выбора варианта заполнения с последующей обработкой выбора пользователя.
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыбораВариантаЗаполнения", ЭтотОбъект);
	ОткрытьФорму("Документ.КВП_ОтражениеНачисленийВРеглУчете.Форма.ФормаВыбораВариантаЗаполненияДиалог",,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачисленияКОтражению.Очистить();
	Объект.ДетализацияНачислений.Очистить();
	
	ЗаполнитьОкончание();
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Процедура-обработчик результата выбора в форме "ФормаВыбораВариантаЗаполненияДиалог".
//
Процедура ОбработатьРезультатВыбораВариантаЗаполнения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = "Обновить" Тогда
		
		ЗаполнитьОкончание(Истина);
		
	ИначеЕсли РезультатВыбора = "ОчиститьИОбновить" Тогда
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(Новый Массив);
		Состояние("Обработка документов отражения завершена...");
		
		Объект.НачисленияКОтражению.Очистить();
		Объект.ДетализацияНачислений.Очистить();
		
		ВывестиСтрокуИтогоДокумента();
		
		ЗаполнитьОкончание();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораВариантаЗаполнения()

&НаКлиенте
// Процедура вызывает процедуру заполнения отражения.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьОкончание(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ЗаполнитьОтражениеНаСервере(ОбновитьСодержаниеТабличнойЧасти);
	
	// При перезаполнении проведенного документа выполняется отмена проведения.
	// При отмене проведения документ записывается. Поэтому данный флаг устанавливается
	// программно после перезаполнения табличной части, а не с помощью свойства команды "Изменяет сохраненные данные".
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьОкончание()

&НаКлиенте
// Обработчик команды "СформироватьДокументы".
Процедура СформироватьДокументы(Команда)
	
	// Если в текущем месяце отражения уже есть документ отражения по организации и выбранной группе, то отражение недоступно.
	Если ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование документов позволяем только если документ записан и не модифицирован.
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ТекстВопроса   = "Перед формированием документов отражения в регл. учете документ будет записан. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументы", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыФрагмент();
	
КонецПроцедуры // СформироватьДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "СформироватьДокументы()".
Процедура ОбработатьРезультатВопросаСформироватьДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись)) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыФрагмент();
	
КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументы()

&НаКлиенте
// Процедура формирует документы и записывает текущий документ.
Процедура СформироватьДокументыФрагмент()
	
	Если НЕ Объект.НачисленияКОтражению.Количество() = 0 И ПроверитьЗаполненностьРеквизитов() Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа,
		// в случае обнаружения таковых - спросим пользователя о необходимости перезаполнения типовых документов отражения.
		Если ПроверитьНаличиеСформированныхДокументовОтраженияНачислений() Тогда
			
			ТекстВопроса = "Перезаполнить ранее сформированные документы отражения начислений в БУ?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументыФрагмент",ЭтотОбъект),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНетОтмена, ,
						   КодВозвратаДиалога.Да);
			Возврат;
			
		КонецЕсли;
		
		СформироватьДокументыФрагментПродолжение();
		
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
КонецПроцедуры // СформироватьДокументыФрагмент().

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "СформироватьДокументыФрагмент".
Процедура ОбработатьРезультатВопросаСформироватьДокументыФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПравитьСуществующие = Истина;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПравитьСуществующие = Ложь;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьДокументыФрагментПродолжение(ПравитьСуществующие);
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументыФрагмент().

&НаКлиенте
// Процедура-продолжение процедуры "СформироватьДокументыФрагмент()".
Процедура СформироватьДокументыФрагментПродолжение(ПравитьСуществующие = Ложь)
	
	Состояние("Выполняется формирование документов отражения...");
	
	СформироватьДокументыНаСервере(ПравитьСуществующие);
	
	Состояние("Формирование документов отражения завершено...");
	
КонецПроцедуры // СформироватьДокументыФрагмент()

&НаКлиенте
// Обработчик команды "УдалитьДокументыВВыбранныхСтроках".
Процедура УдалитьДокументыВВыбранныхСтроках(Команда)
	
	ТекущаяСтрока = Элементы.НачисленияКОтражению.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса       = "Будут помечены на удаление документы в текущей строке.
						 |Продолжить?";
	ДопПараметры       = Новый Структура("ТекстВопроса, ТекущаяСтрока", ТекстВопроса, ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке", ЭтотОбъект, ДопПараметры);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры // УдалитьДокументыВТекущейСтроке()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре "УдалитьДокументыВТекущейСтроке()".
Процедура ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокУдаляемыхДокументов = Новый Массив;
	ПометитьНаУдалениеДокументОтраженияНачислений(ТекущаяСтрока, МассивСсылокУдаляемыхДокументов);
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
	Если МассивСсылокУдаляемыхДокументов.Количество() > 0 Тогда
		ТекстВопроса = "Очистить ссылки на документы в текущей строке табличной части?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение",
													  ЭтотОбъект,
													  Новый Структура("МассивСсылокУдаляемыхДокументов", МассивСсылокУдаляемыхДокументов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре "ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке()".
Процедура ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСсылка Из ДополнительныеПараметры.МассивСсылокУдаляемыхДокументов Цикл
		Отбор = Новый Структура("ДокументОтражения", ТекСсылка);
		СтрокиДокумента = Объект.НачисленияКОтражению.НайтиСтроки(Отбор);
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			ОчиститьСсылкиНаДокументыОтраженияНачислений(СтрокаДокумента.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение()

&НаКлиенте
// Обработчик команды "УдалитьВсеДокументы".
Процедура УдалитьВсеДокументы(Команда)
	
	ТекстВопроса = "Будут помечены на удаление все документы.
					|Продолжить?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьВсеДокументы", ЭтотОбъект, Новый Структура("ТекстВопроса", ТекстВопроса));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры // УдалитьВсеДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процеддуре-обработчике команды "УдалитьВсеДокументы()".
Процедура ОбработатьРезультатВопросаУдалитьВсеДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокУдалДокументов = Новый Массив;
	
	Состояние("Выполняется обработка документов отражения...");
	ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов);
	Состояние("Обработка документов отражения завершена...");
	
	Если МассивСтрокУдалДокументов.Количество() > 0 Тогда
		
		ТекстВопроса       = "Очистить ссылки на документы в табличной части?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение", ЭтотОбъект, Новый Структура("МассивСтрокУдалДокументов", МассивСтрокУдалДокументов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ОкончаниеУдаленияДокументовОтражения();
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьВсеДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процеддуре-обработчике команды "ОбработатьРезультатВопросаУдалитьВсеДокументы()".
Процедура ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОчиститьСсылкиДокументовОтражения(ДополнительныеПараметры.МассивСтрокУдалДокументов);
	КонецЕсли;
	
	ОкончаниеУдаленияДокументовОтражения();
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение()

&НаКлиенте
// Процедура обновляет данные в строках отражения и в подвале документа
// после удаления документов отражения.
Процедура ОкончаниеУдаленияДокументовОтражения()
	
	ЗаполнитьСуммыДокументовОтражения();
	ВывестиСтрокуИтогоДокумента();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтображатьСведенияДляОтраженияТекущегоНачисления".
Процедура ОтображатьСведенияДляОтраженияТекущегоНачисления(Команда)
	
	// Изменим признак отображения сведений для отражения.
	ОтображатьСведенияДляОтраженияТекущегоНачисления = Не ОтображатьСведенияДляОтраженияТекущегоНачисления;
	
	// Управление видимостью панелью сведений.
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
