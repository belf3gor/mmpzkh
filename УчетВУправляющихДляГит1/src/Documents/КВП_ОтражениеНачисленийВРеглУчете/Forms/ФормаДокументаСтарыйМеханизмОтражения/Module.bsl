
// ЖКХ 3.0: Для поля ввода "Контрагент" свойство "ВыборГруппИЭлементов" должно быть установлено в значение "Групп и элементов"
// для возможности выбора групп контрагентов.

#Область СлужебныеПроцедурыиФункции

&НаСервере
// Выводит пояснение на закладке при виде операции "Без отражения в регл.учете".
Процедура ВывестиИнфСтрокуОперацииБезОтраженияВДокументе()

	ИнфСтрока = "";
	
	Если Объект.Организация.Пустая() Тогда
		ИнфСтрока = "Выберите организацию.";
	Иначе
		ИнфСтрока =   "Текущие настройки учетной политики ЖКХ не поддерживают использование данного документа." + Символы.ПС
					+ "Для использования документа в настройках учетной политики ЖКХ должен быть установлен флажок" + Символы.ПС
					+ """Отражать начисления в регламентированном учете""";
	КонецЕсли;

	НадписьИнфСтрока = ИнфСтрока;
	
КонецПроцедуры // ВывестиИнфСтрокуОперацииБезОтраженияВДокументе()

&НаСервере
// Устанавливает вид операции документа.
Процедура УстановитьВидОперацииДокумента()
	
	Если НЕ ОтражатьНачисленияВРеглУчете Тогда
		ВывестиИнфСтрокуОперацииБезОтраженияВДокументе();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УстановитьВидОперацииДокумента()

&НаСервере
// Процедура выводит строку итогов начисления, льгот и пени.
Процедура ВывестиСтрокуИтогоНачислений()
	
	ВсегоЛьгот      = 0;
	ВсегоПени       = 0;
	ВсегоНачислений = 0;
	
	Для Каждого Строка Из Объект.РасшифровкаНачислений Цикл
		
		Если Строка.ЭтоЛьгота Тогда
			ВсегоЛьгот = ВсегоЛьгот + Строка.СуммаОтражения;
		ИначеЕсли Строка.ЭтоПени Тогда
			ВсегоПени = ВсегоПени + Строка.СуммаОтражения;
		Иначе
			ВсегоНачислений = ВсегоНачислений + Строка.СуммаОтражения;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоНачислений = ?(ВсегоНачислений = 0, "0", Формат(ВсегоНачислений, "ЧГ=0; ЧДЦ=2")) + " руб.";
	
	ИтогоЛьгот = ?(ВсегоЛьгот = 0, "0", Формат(ВсегоЛьгот, "ЧГ=0; ЧДЦ=2")) + " руб.";
	
	ИтогоПени = ?(ВсегоПени = 0, "0", Формат(ВсегоПени, "ЧГ=0; ЧДЦ=2")) + " руб.";
	
КонецПроцедуры

&НаСервере
// Процедура выводит строку фактических итогов по документам.
Процедура ВывестиСтрокуИтогоНачисленийФактически()
	
	СуммаНачислений = 0;
	СуммаЛьгот      = 0;
	СуммаПени       = 0;
	
	ОтражениеУпрощенное = (Объект.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное);
	
	Если ОтражениеУпрощенное Тогда
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаНачислений Цикл
			Если СтрокаРасшифровки.ЭтоЛьгота Тогда
				СуммаЛьгот = СуммаЛьгот + СтрокаРасшифровки.СуммаОтражения;
			ИначеЕсли СтрокаРасшифровки.ЭтоПени Тогда
				СуммаПени = СуммаПени + СтрокаРасшифровки.СуммаОтражения;
			Иначе
				СуммаНачислений = СуммаНачислений + СтрокаРасшифровки.СуммаОтражения;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаКонтрагента Из Объект.Контрагенты Цикл
			Если Не СтрокаКонтрагента.Документ = Неопределено Тогда
				Если ТипЗнч(СтрокаКонтрагента.Документ) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
					СуммаЛьгот      = СуммаЛьгот + СтрокаКонтрагента.Документ.СуммаКтЗадолженности + СтрокаКонтрагента.Документ.СуммаДтЗадолженности;
				Иначе
					Если СтрокаКонтрагента.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.КупляПродажаУслуг Тогда
						ИмяТЧ = "Услуги";
					Иначе
						ИмяТЧ = "АгентскиеУслуги";
					КонецЕсли;
					
					Если СтрокаКонтрагента.ЭтоПени Тогда
						СуммаПени = СуммаПени + СтрокаКонтрагента.Документ[ИмяТЧ].Итог("Сумма");
					Иначе
						СуммаНачислений = СуммаНачислений + СтрокаКонтрагента.Документ[ИмяТЧ].Итог("Сумма");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИтогоНачисленийФакт = ?(СуммаНачислений = 0, "0", Формат(СуммаНачислений, "ЧГ=0; ЧДЦ=2")) + " руб.";
	ИтогоЛьготФакт      = ?(СуммаЛьгот      = 0, "0", Формат(СуммаЛьгот,      "ЧГ=0; ЧДЦ=2")) + " руб.";
	ИтогоПениФакт       = ?(СуммаПени       = 0, "0", Формат(СуммаПени,       "ЧГ=0; ЧДЦ=2")) + " руб.";
	
КонецПроцедуры

&НаСервере
// Процедура заполняет отражение на сервере.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьОтражениеНаСервере(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ЗаполнитьТабличнуюЧастьОтражениеНачисленийНаСервере(ОбновитьСодержаниеТабличнойЧасти);
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации Тогда
			
			Элементы.Контрагенты.ТекущаяСтрока = Объект.Контрагенты[0].ПолучитьИдентификатор();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
			
			Элементы.КонтрагентыУпр.ТекущаяСтрока = Объект.Контрагенты[0].ПолучитьИдентификатор();
			
			ЗаполнитьСчетаУчетаТабличнойЧастиНаСервере();
			ЗаполнитьСчетаУчетаУслугТабличнойЧастиНаСервере();
			
		КонецЕсли;
		
		// Для информативности проверим наличие настроек расчета пени и сообщим пользователю, если они не заданы.
		СтруктураНаличиеСчетовПоПени = ПроверитьНаличиеСчетовУчетаРасчетовПоПени();
		
		ТекстСообщения = "Внимание! Счета учета расчетов по пеням %Капремонт%для организации """ + Объект.Организация + """ не установлены.
						|Счета учета по пеням %Капремонт%можно задать в Учетной политике ЖКХ на закладке ""Регламентированный учет"".";
		
		// Проверку выполняем тогда, когда имеются начисления пени по услугам не КР к отражению,
		// а пени по услугам не КР отражаются отдельно от начислений.
		Если мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Объект.Контрагенты.НайтиСтроки(Новый Структура("ЭтоКапРемонт, ЭтоПени", Ложь, Истина)).Количество() > 0
			 И Не СтруктураНаличиеСчетовПоПени.СчетаПоПениЗаданы Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Капремонт%", "");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		// Проверку выполняем тогда, когда имеются начисления пени по услугам КР к отражению,
		// а пени по услугам КР отражаются отдельно от начислений.
		Если мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Объект.Контрагенты.НайтиСтроки(Новый Структура("ЭтоКапРемонт, ЭтоПени", Истина, Истина)).Количество() > 0
			 И Не СтруктураНаличиеСчетовПоПени.СчетаПоПениКапремонтЗаданы Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Капремонт%", "за услуги капитального ремонта ");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиСтрокуИтогоНачислений();
	ВывестиСтрокуИтогоНачисленийФактически();
	ЗаполнитьДопДанныеВТаблицах();
	
КонецПроцедуры

&НаКлиенте
// Обновляет отбор расшифровки Управленческих начислений .
Процедура ОбновитьОтборРасшифровкиНачислений()
	
	Упрощенный = (Объект.ВидОперации = 
					ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное"));
	
	Если Упрощенный Тогда
		ТекСтрока = Элементы.КонтрагентыУпр.ТекущиеДанные;
	Иначе
		ТекСтрока = Элементы.Контрагенты.ТекущиеДанные;
	КонецЕсли;
	
	Если Не ТекСтрока = Неопределено Тогда
		
		// Установим отбор в таблице расшифровки.
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ДоговорКонтрагента, НоменклатурнаяГруппа, ЭтоКапРемонт, ЭтоЛьгота, ЭтоПени, ВариантПоставкиУслуг",
														ТекСтрока.ДоговорКонтрагента,
														ТекСтрока.НоменклатурнаяГруппа,
														ТекСтрока.ЭтоКапРемонт,
														ТекСтрока.ЭтоЛьгота,
														ТекСтрока.ЭтоПени,
														ТекСтрока.ВариантПоставкиУслуг);
		Если Упрощенный Тогда
			Элементы.РасшифровкаНачисленийУпр.ОтборСтрок = СтруктураОтбора;
		Иначе
			Элементы.РасшифровкаНачислений.ОтборСтрок = СтруктураОтбора;
		КонецЕсли;
		
		// Обновим итоги в подвале таблицы
		СуммаРасшифровки = 0;
		
		СтруктураОтбора = Новый Структура("ДоговорКонтрагента, НоменклатурнаяГруппа, ЭтоКапРемонт, ЭтоЛьгота, ЭтоПени, ВариантПоставкиУслуг",
										   ТекСтрока.ДоговорКонтрагента,
										   ТекСтрока.НоменклатурнаяГруппа,
										   ТекСтрока.ЭтоКапРемонт,
										   ТекСтрока.ЭтоЛьгота,
										   ТекСтрока.ЭтоПени,
										   ТекСтрока.ВариантПоставкиУслуг);
		
		СтрокиРасшифровки = Объект.РасшифровкаНачислений.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекСтрокаРасшифровки Из СтрокиРасшифровки Цикл
			СуммаРасшифровки = СуммаРасшифровки + ТекСтрокаРасшифровки.СуммаОтражения;
		КонецЦикла;
		
		СуммаИтогоСуммаОтраженияРасшифровки = СуммаРасшифровки;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьОтборРасшифровкиНачислений()

&НаКлиенте
// Процедура возникает при активизации строки контрагентов.
Процедура ПриАктивизацииСтрокиКонтрагенты()
	
	Упрощенный = (Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное"));
	
	ОбновитьОтборРасшифровкиНачислений();
	
	Если Упрощенный Тогда
		Кнопка = Элементы.ПодменюРасшифровкаНачисленийУпр;
	Иначе
		Кнопка = Элементы.ПодменюРасшифровкаНачислений;
	КонецЕсли;
	
	Если Объект.Контрагенты.Количество() = 0 ИЛИ Элементы.КонтрагентыУпр.ТекущиеДанные = Неопределено Тогда
		Кнопка.Заголовок = "Расшифровка начислений";
	Иначе
		Если Упрощенный Тогда
			ТекНомерСтроки = Элементы.КонтрагентыУпр.ТекущиеДанные.НомерСтроки;
		Иначе
			ТекНомерСтроки = Элементы.Контрагенты.ТекущиеДанные.НомерСтроки;
		КонецЕсли;
		Кнопка.Заголовок = "Расшифровка начислений строки №" + ТекНомерСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет сумму отражения в строке.
Процедура ЗаполнитьСуммуОтраженияВСтроке(ТекущаяСтрока)
	
	ДанныеСтроки = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВариантПоставкиУслуг", ДанныеСтроки.ВариантПоставкиУслуг);
	СтруктураПоиска.Вставить("ДоговорКонтрагента",   ДанныеСтроки.ДоговорКонтрагента);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппа", ДанныеСтроки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("ЭтоЛьгота",            ДанныеСтроки.ЭтоЛьгота);
	СтруктураПоиска.Вставить("ЭтоПени",              ДанныеСтроки.ЭтоПени);
	СтруктураПоиска.Вставить("ЭтоКапРемонт",         ДанныеСтроки.ЭтоКапРемонт);
	
	СтрокиРасшифровки = Объект.РасшифровкаНачислений.НайтиСтроки(СтруктураПоиска);
	
	СуммаОтражения = 0;
	
	Для Каждого ТекСтрокаРасшифровки Из СтрокиРасшифровки Цикл
		СуммаОтражения = СуммаОтражения + ТекСтрокаРасшифровки.СуммаОтражения;
	КонецЦикла;
	
	ДанныеСтроки.СуммаОтражения = СуммаОтражения;
	
КонецПроцедуры

&НаСервере
// Заполняет сумму документа в строке контрагента.
Процедура ЗаполнитьСуммуДокументаВСтроке(ТекущаяСтрока)
	
	ДанныеСтроки = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СуммаДокумента = 0;
	Если Не ДанныеСтроки.Документ = Неопределено Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			СуммаДокумента = ДанныеСтроки.Документ.ДебиторскаяЗадолженность.Итог("Сумма");
		ИначеЕсли ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			СуммаДокумента = ДанныеСтроки.Документ.СуммаДокумента;
		ИначеЕсли ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если ДанныеСтроки.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема Тогда
				ИмяТЧ = "АгентскиеУслуги";
			Иначе
				ИмяТЧ = "Услуги";
			КонецЕсли;
			
			СуммаДокумента = ДанныеСтроки.Документ[ИмяТЧ].Итог("Сумма");
			
		КонецЕсли;
	КонецЕсли;
	ДанныеСтроки.СуммаДокумента = СуммаДокумента;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных данных в таблицах.
Процедура ЗаполнитьДопДанныеВТаблицах()
	
	Для Каждого ТекСтрокаКонтрагента Из Объект.Контрагенты Цикл
		
		ЗаполнитьСуммуОтраженияВСтроке(ТекСтрокаКонтрагента.ПолучитьИдентификатор());
		ЗаполнитьСуммуДокументаВСтроке(ТекСтрокаКонтрагента.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Помечает на удаление документы отражения начислений.
Процедура ПометитьНаУдалениеДокументОтраженияНачислений(ТекущаяСтрока, МассивСсылокУдаляемыхДокументов)
	
	СтрокаТабличнойЧасти = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	// если не стоит флаг отражения - ничего не делаем
	Если Не СтрокаТабличнойЧасти.Отражать Тогда
		Возврат;
	КонецЕсли;
	
	ТекДокумент = СтрокаТабличнойЧасти.Документ;
	
	// если документ в строке указан и проведен - помечаем на удаление
	Если ЗначениеЗаполнено(ТекДокумент)
		И ТекДокумент.Проведен Тогда
		Попытка
			ДокОбъект = ТекДокумент.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ <" + ТекДокумент + "> помечен на удаление.");
			МассивСсылокУдаляемыхДокументов.Добавить(ДокОбъект.Ссылка);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + СтрокаТабличнойЧасти.НомерСтроки 
															+ " не удалось пометить на удаление документ по причине:"
															+ Символы.ПС + "    " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
КонецПроцедуры // ПометитьНаУдалениеДокументОтраженияНачислений()

&НаСервере
// Удаляет ссылки на документы отражения начислений в ТЧ "Контрагенты".
Процедура ОчиститьСсылкиНаДокументыОтраженияНачислений(ТекущаяСтрока)
	
	ТекДанные = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекДанные.Документ = Неопределено;
	ТекДанные.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	ЗаполнитьСуммуДокументаВСтроке(ТекДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОчиститьСсылкиНаДокументыОтраженияНачислений()

&НаСервере
// Настраивает список выбора поля "Взаиморасчеты" на основе настроек "Учетной политики ТСЖ".
//
Процедура НастроитьСоставСпискаВидовВзаиморасчетов()
	
	Если мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот = Перечисления.УПЖКХ_СпособыОтраженияЛьгот.УменьшениемНачисления Тогда
		
		УдаляемыйЭлементТолькоЛьготы = Элементы.Взаиморасчеты.СписокВыбора.НайтиПоЗначению(2);
		Если Не УдаляемыйЭлементТолькоЛьготы = Неопределено Тогда
			Элементы.Взаиморасчеты.СписокВыбора.Удалить(УдаляемыйЭлементТолькоЛьготы);
		КонецЕсли;
		
	КонецЕсли;
	
	ПениЗаКапремонтОтдельно = ?(мНастройкиКапремонта.ВедетсяРаздельныйУчет, мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета, Ложь);
	
	Если мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений
		 И мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.ИзНоменклатуры
		 И Не ПениЗаКапремонтОтдельно Тогда
		
		УдаляемыйЭлементТолькоПени = Элементы.Взаиморасчеты.СписокВыбора.НайтиПоЗначению(3);
		Если Не УдаляемыйЭлементТолькоПени = Неопределено Тогда
			Элементы.Взаиморасчеты.СписокВыбора.Удалить(УдаляемыйЭлементТолькоПени);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьСоставСпискаВидовВзаиморасчетов()

&НаКлиенте
// Процедура проверяет есть ли данные к отражению по агентской схеме или отрицательные начисления.
Процедура ПроверитьДанныеКОтражению()
	
	Если Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" 
	   И Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации")
	   И Объект.РасшифровкаНачислений.Количество() > 0 Тогда
		// Проверим есть ли данные к отражению по агентской схеме или отрицательные начисления.
		// Если есть, то передупреждаем пользователей, что для таких ситуаций 
		// будут сформированы документы "Реализация товаров и услуг".
		
		ЕстьНачисленияПоАгентскойСхеме = Ложь;
		ЕстьОтрицательныеНачисления    = Ложь;
		
		СтруктураОтбора = Новый Структура("ВариантПоставкиУслуг", 
										   ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема"));
		НайденныеСтроки = Объект.РасшифровкаНачислений.НайтиСтроки(СтруктураОтбора);
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			ЕстьНачисленияПоАгентскойСхеме = Истина;
		КонецЕсли;
		
		Если мНастройкиУчетнойПолитикиТСЖ.ФормироватьТиповыеДокументыСОтрицательнымиСуммами Тогда
			Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаНачислений Цикл
				Если СтрокаРасшифровки.СуммаОтражения < 0 Тогда
					ЕстьОтрицательныеНачисления = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьНачисленияПоАгентскойСхеме ИЛИ ЕстьОтрицательныеНачисления Тогда
			ТекстПредупреждения = "";
			ТекстПредупреждения = ТекстПредупреждения + ?(ЕстьНачисленияПоАгентскойСхеме, 
								  "Имеются начисления к отражению в регл. учете по агентской схеме.", "");
			ТекстПредупреждения = ТекстПредупреждения + ?(ЕстьОтрицательныеНачисления, 
								  "Имеются отрицательные начисления к отражению в регл. учете.", "");
			ТекстПредупреждения = ТекстПредупреждения + "
								  |По ним будут сформированы документы ""Реализация товаров и услуг"".";
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеКОтражению()

&НаКлиенте
// Проверяет заполненность некоторых реквизитов документа перед формирование документов отражения.
//
Функция ПроверитьЗаполненностьРеквизитов()
	
	Если (Объект.КонтрагентКомпенсацииЛьгот.Пустая() ИЛИ Объект.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая())
	 И Объект.Контрагенты.НайтиСтроки(Новый Структура("ЭтоЛьгота", Истина)).Количество() > 0 Тогда
		ТекстОшибки = "";
		Если Объект.КонтрагентКомпенсацииЛьгот.Пустая() Тогда
			ТекстОшибки = ТекстОшибки + "Не заполнено значение контрагента в параметрах отражения льгот!" + Символы.ПС;
		КонецЕсли;
		Если Объект.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
			ТекстОшибки = ТекстОшибки + "Не заполнено значение договора контрагента в параметрах отражения льгот!" + Символы.ПС;
		КонецЕсли;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	ИначеЕсли Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" И ВестиУчетЗатратПоПодразделениям
			И Объект.ПодразделениеОрганизации.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено подразделение затрат в параметрах документов отражения!");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция проверяет, есть ли в табличной части Контрагенты ссылки на сформированные типовые документы
// отражения начислений.
// 
// Возвращаемое значение:
//  НаличиеСформированныхДокументов - Булево - возвращается Истина, если в ТЧ есть ссылка на хотя бы один
//                                   сформированный документ.
//
&НаКлиенте
Функция ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Контрагенты Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй()

// Определяет заданы ли счета учета расчетов по пени за услуги капитального ремонта и некапитального ремонта.
&НаСервере
Функция ПроверитьНаличиеСчетовУчетаРасчетовПоПени()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация КАК Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов КАК ВидВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация
	|	И НЕ УПЖКХ_СчетаУчетаРасчетовПоПени.ЭтоСчетаДляКапРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация КАК Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов КАК ВидВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация
	|	И УПЖКХ_СчетаУчетаРасчетовПоПени.ЭтоСчетаДляКапРемонта";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СчетаПоПениЗаданы          = РезультатЗапроса[0].Выбрать().Следующий();
	СчетаПоПениКапремонтЗаданы = РезультатЗапроса[1].Выбрать().Следующий();
	
	Возврат Новый Структура("СчетаПоПениЗаданы, СчетаПоПениКапремонтЗаданы", СчетаПоПениЗаданы, СчетаПоПениКапремонтЗаданы);
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ УЧЕТА

&НаКлиенте
// Процедура обработки изменения счета.
Процедура ОбработатьИзменениеСчета()
	
	ТекущиеДанные = Элементы.РасшифровкаНачисленийУпр.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"РасшифровкаНачисленийУпрСубконтоСчетаУслуг1", "РасшифровкаНачисленийУпрСубконтоСчетаУслуг2",
								"РасшифровкаНачисленийУпрСубконтоСчетаУслуг3");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриВыбореСчета(ТекущиеДанные["СчетУслуг"], ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаУслуг1", "СубконтоСчетаУслуг2", "СубконтоСчетаУслуг3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["СчетУслуг"], ТекущиеДанные, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Возвращает список параметров для выбора субконто
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта)

	ОписаниеТипаДоговора = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ОписаниеТипаДоговора.СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация"   , Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
// Обработка начала выбора субконто
Процедура ОбработатьНачалоВыбораСубконто(НомерСубконто, Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.РасшифровкаНачисленийУпр.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "СубконтоСчетаУслуг" + "%Индекс%");

	// Выбор партии или документа расчетов

	ПараметрыДокумента.Вставить("СчетУчета", ТекущиеДанные["СчетУслуг"]);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = ТекущиеДанные["СубконтоСчетаУслуг" + НомерСубконто];
	ТипСубконто      = ТипЗнч(ЗначениеСубконто);

	ОписаниеТипаДоговора = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	
	Если ТипСубконто = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);

	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		ИмяРеквизитаОрганизации = "Владелец";
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Отбор.Вставить(ИмяРеквизитаОрганизации, ПараметрыДокумента.Организация);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	ИначеЕсли ОписаниеТипаДоговора.СодержитТип(ТипСубконто) Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", УПЖКХ_ТиповыеМетодыВызовСервера.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
		Если ПараметрыДокумента.Свойство("Контрагент") Тогда
			Отбор.Вставить("Владелец", ПараметрыДокумента.Контрагент);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);

	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", УПЖКХ_ТиповыеМетодыВызовСервера.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, Элемент);

	КонецЕсли;

КонецПроцедуры

&НаСервере
// Установка доступности субконто.
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из Объект.РасшифровкаНачислений Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаУслуг1", "СубконтоСчетаУслуг2", "СубконтоСчетаУслуг3");
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетУслуг, Проводка, ПоляОбъекта);
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное") Тогда
		Элементы.ОтражениеУпрощенное.Видимость = Истина;
		Элементы.ДокРеализации.Видимость       = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации") Тогда
		Элементы.ОтражениеУпрощенное.Видимость = Ложь;
		Элементы.ДокРеализации.Видимость       = Истина;
	КонецЕсли;
	
	ПениОтдельно = (Форма.мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета")
					Или Форма.мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = ПредопределенноеЗначение("Перечисление.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС")
					Или (Форма.мНастройкиКапремонта.ВедетсяРаздельныйУчет И Форма.мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета")));
	ЛьготыОтдельно = (Форма.мНастройкиУчетнойПолитикиТСЖ.СпособОтраженияЛьгот = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыОтраженияЛьгот.ОтдельноОтНачислений"));
	
	// Отбор по типам начислений доступен только тогда, когда пени или льготы отражаются отдельно от начислений.
	Элементы.Взаиморасчеты.Видимость = (ПениОтдельно Или ЛьготыОтдельно);
	
	// Параметры отражения льгот доступны только тогда, когда льготы отражаются отдельно и отбор по типам начислений
	// установлен в значение "Все" или "Только льготы".
	Элементы.ГруппаОтраженияЛьгот.Видимость = (ЛьготыОтдельно И Не (Объект.Взаиморасчеты = 1 Или Объект.Взаиморасчеты = 3));
	
	// Группа с суммами по льготам видна только при отражении льгот отдельно от начислений.
	Элементы.ГруппаИтогоЛьгот.Видимость = ЛьготыОтдельно;
	// Группа с суммами по пеням видна только при отражении пени отдельно от начислений.
	Элементы.ГруппаИтогоПени.Видимость  = ПениОтдельно;
	
	ОтражениеВРеглУчетеДоступно            = Форма.ОтражатьНачисленияВРеглУчете;
	Элементы.Общая.Видимость               = Не ОтражениеВРеглУчетеДоступно;
	Элементы.ОтражениеВРеглУчете.Видимость = ОтражениеВРеглУчетеДоступно;
	
	Элементы.СуммаВключаетНДС.Доступность = Объект.УчитыватьНДС;
	
	Элементы.ПодразделениеОрганизации.Видимость = (Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" И Форма.ВестиУчетЗатратПоПодразделениям);
	
	ВидимостьСчетовУчета = (Объект.ВидОперации 
							= ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное"));
	
	Элементы.РасшифровкаНачисленийУпрСчетУслуг.Видимость             = ВидимостьСчетовУчета;
	Элементы.РасшифровкаНачисленийУпрСубконтоСчетаУслуг1.Видимость   = ВидимостьСчетовУчета;
	Элементы.РасшифровкаНачисленийУпрСубконтоСчетаУслуг2.Видимость   = ВидимостьСчетовУчета;
	Элементы.РасшифровкаНачисленийУпрСубконтоСчетаУслуг3.Видимость   = ВидимостьСчетовУчета;
	
	Элементы.КонтрагентыЭтоКапРемонт.Видимость    = Форма.мНастройкиКапремонта.ВедетсяРаздельныйУчет;
	Элементы.КонтрагентыУпрЭтоКапРемонт.Видимость = Форма.мНастройкиКапремонта.ВедетсяРаздельныйУчет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЦЕДУРАМИ И ФУНКЦИЯМИ МОДУЛЯ ОБЪЕКТА

&НаСервере
// Процедура заполнения табличной части.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
Процедура ЗаполнитьТабличнуюЧастьОтражениеНачисленийНаСервере(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_ОтражениеНачисленийВРеглУчете"));
	ДокументОбъект.ЗаполнитьТабличнуюЧастьОтражениеНачислений(ОбновитьСодержаниеТабличнойЧасти);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполнения табличной части.
Процедура ЗаполнитьСчетаУчетаТабличнойЧастиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_ОтражениеНачисленийВРеглУчете"));
	ДокументОбъект.ЗаполнитьСчетаУчетаТабличнойЧасти();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполнения табличной части.
Процедура ЗаполнитьСчетаУчетаУслугТабличнойЧастиНаСервере()
	
	Документы.КВП_ОтражениеНачисленийВРеглУчете.ЗаполнитьСчетаУчетаУслугТабличнойЧасти(Объект.Дата, Объект.Организация, Объект.РасшифровкаНачислений, мНастройкиУчетнойПолитикиТСЖ);
	
КонецПроцедуры

&НаСервере
// Процедура формирования документа строки табличной части.
Процедура СформироватьДокументыСтрокиТабличнойЧастиНаСервере(СтрокаТаблицыКонтрагентов, ПравитьСуществующие)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_ОтражениеНачисленийВРеглУчете"));
	ДокументОбъект.СформироватьДокументыСтрокиТабличнойЧасти(СтрокаТаблицыКонтрагентов, ПравитьСуществующие);
	
КонецПроцедуры

&НаСервере
// Процедура формирования документов.
Процедура СформироватьДокументыНаСервере(ПравитьСуществующие = Ложь)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.СформироватьДокументыТабличнойЧасти(ПравитьСуществующие);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // СформироватьДокументыНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Заполним признак учета  затрат по подразделениям для контроля заполнения подразделения затрат.
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	
	// Заполним реквизиты нового документа.
	Если Объект.Ссылка.Пустая() Тогда
		
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Объект.ТипДокументаОтражения              = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "ТипДокументаОтражения");
		Объект.КонтрагентКомпенсацииЛьгот         = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "КонтрагентКомпенсацииЛьгот");
		Объект.ДоговорКонтрагентаКомпенсацииЛьгот = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
														"КВП_ОтражениеНачисленийВРеглУчете", "ДоговорКонтрагентаКомпенсацииЛьгот");
		
		// Устанавливаем в качестве даты документа конец дня от текущей даты пользователя.
		Объект.Дата                = КонецДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		
		// Заполним подразделение затрат значением по умолчанию.
		Если Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг" И ВестиУчетЗатратПоПодразделениям Тогда
			Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Объект.Организация);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	мДатаУчетнойПолитики = ?(Объект.Ссылка.Пустая(), УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), Объект.Дата);
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(мДатаУчетнойПолитики,
																									Объект.Организация);
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	мНастройкиКапремонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	
	СписокТиповДокументов = Новый СписокЗначений();
	СписокТиповДокументов.Добавить("Акт об оказании производственных услуг", "Акт об оказании производственных услуг");
	СписокТиповДокументов.Добавить("Реализация товаров и услуг",             "Реализация товаров и услуг");
	
	Для Каждого ТекТипДокумента Из СписокТиповДокументов Цикл
		Элементы.ТипДокументаОтражения.СписокВыбора.Добавить(ТекТипДокумента.Значение, ТекТипДокумента.Представление);
	КонецЦикла;
	
	Элементы.НадписьСуммаНеОтражена.ЦветТекста  = ЦветаСтиля.ЦветТекстаПоля;
	Элементы.НадписьСуммыСовпадают.ЦветТекста   = WebЦвета.Серый;
	Элементы.НадписьСуммыНеСовпадают.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	УстановитьВидОперацииДокумента();
	НастроитьСоставСпискаВидовВзаиморасчетов();
	
	ВывестиСтрокуИтогоНачислений();
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
	ПредыдущийВидОперации           = Объект.ВидОперации;
	ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения;
	
	ТекущийЭлемент = Элементы.Контрагенты;
	
	ЗаполнитьДопДанныеВТаблицах();
	
	УстановитьДоступностьСубконто();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВыбораЗачетАвансов();
	СпособЗачетаАвансов = Элементы.ЗачетАвансов.СписокВыбора.НайтиПоЗначению(Объект.СпособЗачетаАвансов).Значение;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если подразделение организации заполнено, а при этом вид операции и документ отражения не соответствуют
	// отражению документом "Акт об оказании производственных услуг", то реквизит нужно очистить.
	Если Не Объект.ПодразделениеОрганизации.Пустая()
		 И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное")
			Или Не Объект.ТипДокументаОтражения = "Акт об оказании производственных услуг") Тогда
		Объект.ПодразделениеОрганизации = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДопДанныеВТаблицах();
	УстановитьДоступностьСубконто();
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "ТипДокументаОтражения",             Объект.ТипДокументаОтражения);
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "КонтрагентКомпенсацииЛьгот",        Объект.КонтрагентКомпенсацииЛьгот);
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(
		"КВП_ОтражениеНачисленийВРеглУчете", "ДоговорКонтрагентаКомпенсацииЛьгот",Объект.ДоговорКонтрагентаКомпенсацииЛьгот);
		
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УПЖКХ_ТиповыеМетодыКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ОбновитьИнформациюВПомощникеПереходаНаНовыйМеханизм");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																									Объект.Организация);
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	мНастройкиКапремонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	
	НастроитьСоставСпискаВидовВзаиморасчетов();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = КонецДня(Объект.Дата);
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата,
																									Объект.Организация);
	ОтражатьНачисленияВРеглУчете = мНастройкиУчетнойПолитикиТСЖ.ОтражатьНачисленияВРеглУчете;
	
	НастроитьСоставСпискаВидовВзаиморасчетов();
	
	УправлениеФормой(ЭтаФорма);
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	// Если операция не поменялась то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй();
		
		ТекстВопроса = "При изменении вида операции табличная часть будет очищена. Продолжить?";
		
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Табличная часть будет очищена, а сформированные документы помечены на удаление. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВидОперацииПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ВидОперацииПриИзмененииПродолжение();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ВидОперацииПриИзменении()".
Процедура ОбработатьРезультатВопросаВидОперацииПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ВидОперации = ПредыдущийВидОперации;
		Возврат;
	КонецЕсли;
	
	// Пометим на удалений документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов);
		Состояние("Обработка документов отражения завершена...");
		
		// ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли; 
	
	Объект.РасшифровкаНачислений.Очистить();
	Объект.Контрагенты.Очистить();
	
	ВывестиСтрокуИтогоНачисленийФактически();
	ВывестиСтрокуИтогоНачислений();
	
	ВидОперацииПриИзмененииПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаВидОперацииПриИзменении()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ВидОперацииПриИзменении()".
Процедура ВидОперацииПриИзмененииПродолжение()
	
	УстановитьВидОперацииДокумента();
	
	ПредыдущийВидОперации = Объект.ВидОперации;

КонецПроцедуры // ВидОперацииПриИзмененииПродолжение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Взаиморасчеты".
Процедура ВзаиморасчетыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СпособЗачетаАвансов".
Процедура ЗачетАвансовПриИзменении(Элемент)
	
	Объект.СпособЗачетаАвансов = СпособЗачетаАвансов;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// УПРОЩЕННОЕ ОТРАЖЕНИЕ

//////////////////////////////
// Вспомогательные процедуры

&НаСервере
// Помещает таблицу расшифровки на сервере.
Функция ПоместитьВХранилищеРасшифровкуКонтрагента(СтрокаТаблицыКонтрагентов)
	
	ДанныеСтроки = Объект.Контрагенты.НайтиПоИдентификатору(СтрокаТаблицыКонтрагентов);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВариантПоставкиУслуг", ДанныеСтроки.ВариантПоставкиУслуг);
	СтруктураПоиска.Вставить("ДоговорКонтрагента",   ДанныеСтроки.ДоговорКонтрагента);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппа", ДанныеСтроки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("ЭтоКапРемонт",         ДанныеСтроки.ЭтоКапРемонт);
	СтруктураПоиска.Вставить("ЭтоЛьгота",            ДанныеСтроки.ЭтоЛьгота);
	СтруктураПоиска.Вставить("ЭтоПени",              ДанныеСтроки.ЭтоПени);
	
	СтрокиРасшифровки = Объект.РасшифровкаНачислений.НайтиСтроки(СтруктураПоиска);
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Номенклатура");
	ТаблицаРасшифровки.Колонки.Добавить("СуммаСтарая");
	ТаблицаРасшифровки.Колонки.Добавить("СуммаОтражения");
	
	Для Каждого ТекСтрокаРасшифровки Из СтрокиРасшифровки Цикл
		
		НоваяСтрока = ТаблицаРасшифровки.Добавить();
		НоваяСтрока.Номенклатура   = ТекСтрокаРасшифровки.Номенклатура;
		НоваяСтрока.СуммаСтарая    = ТекСтрокаРасшифровки.СуммаОтражения;
		НоваяСтрока.СуммаОтражения = ТекСтрокаРасшифровки.СуммаОтражения;
		
	КонецЦикла;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, Новый УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
// Процедура обновления расшифровки контрагента из хранилища.
Процедура ОбновитьРасшифровкуКонтрагентаИзХранилища(СтрокаТаблицыКонтрагентов, АдресВХранилище)

	ТаблицаНачислений = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
		
		// При изменении сумм расшифровки удаляются исходные строки, а вместо них
		// добавляются новые строки расшифровки, в которых счета учета заполняются заново.
		ДанныеСтроки = Объект.Контрагенты.НайтиПоИдентификатору(СтрокаТаблицыКонтрагентов);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВариантПоставкиУслуг", ДанныеСтроки.ВариантПоставкиУслуг);
		СтруктураПоиска.Вставить("ДоговорКонтрагента",   ДанныеСтроки.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("НоменклатурнаяГруппа", ДанныеСтроки.НоменклатурнаяГруппа);
		СтруктураПоиска.Вставить("ЭтоКапРемонт",         ДанныеСтроки.ЭтоКапРемонт);
		СтруктураПоиска.Вставить("ЭтоЛьгота",            ДанныеСтроки.ЭтоЛьгота);
		СтруктураПоиска.Вставить("ЭтоПени",              ДанныеСтроки.ЭтоПени);
		
		СтрокиРасшифровки = Объект.РасшифровкаНачислений.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			Объект.РасшифровкаНачислений.Удалить(Объект.РасшифровкаНачислений.Индекс(СтрокаРасшифровки));
		КонецЦикла;
		
		СтрокиРасшифровкиНачислений = Новый Массив;
		Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
			
			НоваяСтрока = Объект.РасшифровкаНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			
			СтрокиРасшифровкиНачислений.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		// Счета учета и анализитику счетов для новых строк расшифровки начислений необходимо заполнить заново.
		Документы.КВП_ОтражениеНачисленийВРеглУчете.ЗаполнитьСчетаУчетаУслугТабличнойЧасти(Объект.Дата, Объект.Организация, СтрокиРасшифровкиНачислений, мНастройкиУчетнойПолитикиТСЖ);
		
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации
		   И (ЗначениеЗаполнено(ДанныеСтроки.Документ) Или ЗначениеЗаполнено(ДанныеСтроки.СчетФактура)) Тогда
			СформироватьДокументыСтрокиТабличнойЧастиНаСервере(ДанныеСтроки, Истина);
		КонецЕсли;
		
		ЗаполнитьСуммуОтраженияВСтроке(ДанныеСтроки.ПолучитьИдентификатор());
		
		ЗаполнитьСуммуДокументаВСтроке(ДанныеСтроки.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////
// Обработчики элементов

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыУпрНоменклатурнаяГруппа".
Процедура КонтрагентыУпрНоменклатурнаяГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыУпрНоменклатурнаяГруппа".
Процедура КонтрагентыУпрНоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыУпрКонтрагент".
Процедура КонтрагентыУпрКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыУпрКонтрагент".
Процедура КонтрагентыУпрКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыУпрДоговорКонтрагента".
Процедура КонтрагентыУпрДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыУпрДоговорКонтрагента".
Процедура КонтрагентыУпрДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыУпрВариантПоставкиУслуг".
Процедура КонтрагентыУпрВариантПоставкиУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыУпрВариантПоставкиУслуг".
Процедура КонтрагентыУпрВариантПоставкиУслугОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "КонтрагентыУпр".
Процедура КонтрагентыУпрПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиКонтрагенты", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийУпрСуммаОтражения".
Процедура РасшифровкаНачисленийУпрПолеРасшифровкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РасшифровкаНачисленийУпрСуммаОтражения".
Процедура РасшифровкаНачисленийУпрНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РасшифровкаНачисленийУпрСчетУслуг".
Процедура РасшифровкаНачисленийУпрСчетУслугПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийУпрСубконтоСчетаУслуг1".
Процедура РасшифровкаНачисленийУпрСубконтоСчетаУслуг1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(1, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийУпрСубконтоСчетаУслуг2".
Процедура РасшифровкаНачисленийУпрСубконтоСчетаУслуг2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(2, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийУпрСубконтоСчетаУслуг3".
Процедура РасшифровкаНачисленийУпрСубконтоСчетаУслуг3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто(3, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "РасшифровкаНачисленийУпр".
Процедура РасшифровкаНачисленийУпрПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасшифровкаНачисленийУпр.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"РасшифровкаНачисленийУпрСубконтоСчетаУслуг1", "РасшифровкаНачисленийУпрСубконтоСчетаУслуг2",
								"РасшифровкаНачисленийУпрСубконтоСчетаУслуг3");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетУслуг, ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
КонецПроцедуры

//////////////////////////////
// Обработчики команд

&НаКлиенте
// Обработчик команды "СнятьФлажки".
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Контрагенты Цикл
		СтрокаТЧ.Отражать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьФлажки".
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Контрагенты Цикл
		СтрокаТЧ.Отражать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если Объект.РасшифровкаНачислений.Количество() > 0 ИЛИ Объект.Контрагенты.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй();
		
		// В случае, если в табличной части есть ссылки на сформированные типовые документы отражения начислений,
		// тогда вызываем форму для выбора варианта заполнения с последующей обработкой выбора пользователя.
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыбораВариантаЗаполнения", ЭтотОбъект);
			ОткрытьФорму("Документ.КВП_ОтражениеНачисленийВРеглУчете.Форма.ФормаВыбораВариантаЗаполненияДиалог",,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНачислений.Очистить();
	Объект.Контрагенты.Очистить();
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Процедура-обработчик результата выбора в форме "ФормаВыбораВариантаЗаполненияДиалог".
//
Процедура ОбработатьРезультатВыбораВариантаЗаполнения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = "Обновить" Тогда
		
		Объект.РасшифровкаНачислений.Очистить();
		ЗаполнитьПродолжение(Истина);
		ОбновитьОтборРасшифровкиНачислений();
		
	ИначеЕсли РезультатВыбора = "ОчиститьИОбновить" Тогда
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(Новый Массив);
		Состояние("Обработка документов отражения завершена...");
		
		Объект.РасшифровкаНачислений.Очистить();
		Объект.Контрагенты.Очистить();
		
		ЗаполнитьПродолжение();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораВариантаЗаполнения()

// Процедура вызывает процедуру заполнения отражения.
//
// Параметры:
//  ОбновитьСодержаниеТабличнойЧасти - Булево - Если Истина - обновляется содержание табличной части без
//                                              пометки на удаление сформированных типовых документов.
//
&НаКлиенте
// Процедура вызывает процедуру заполнения отражения.
Процедура ЗаполнитьПродолжение(ОбновитьСодержаниеТабличнойЧасти = Ложь)
	
	ЗаполнитьОтражениеНаСервере(ОбновитьСодержаниеТабличнойЧасти);
	
КонецПроцедуры // ЗаполнитьПродолжение()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура ИзменитьРасшифровку(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации") Тогда
		СтрокаТаблицыКонтрагентов = Элементы.Контрагенты.ТекущаяСтрока;
	Иначе
		СтрокаТаблицыКонтрагентов = Элементы.КонтрагентыУпр.ТекущаяСтрока;
	КонецЕсли;
		
	Если СтрокаТаблицыКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВХранилищеРасшифровкуКонтрагента(СтрокаТаблицыКонтрагентов);
	
	ПараметрыФормы = Новый Структура("АдресВХранилище", АдресВХранилище);
	ДопПараметры   = Новый Структура("СтрокаТаблицыКонтрагентов", СтрокаТаблицыКонтрагентов);
	
	ОткрытьФорму("Документ.КВП_ОтражениеНачисленийВРеглУчете.Форма.ФормаРедактированияРасшифровки",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыбранноеЗначение", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ИзменитьРасшифровку()

&НаКлиенте
// Процедура-обработчик результата выбора, вызванного в процедуре-обработчике команды "ИзменитьРасшифровку()".
Процедура ОбработатьВыбранноеЗначение(РезультатВыбор, ДополнительныеПараметры) Экспорт
	
	АдресВХранилище           = РезультатВыбор;
	СтрокаТаблицыКонтрагентов = ДополнительныеПараметры.СтрокаТаблицыКонтрагентов;
	
	Если Не АдресВХранилище = Неопределено Тогда
		ОбновитьРасшифровкуКонтрагентаИзХранилища(СтрокаТаблицыКонтрагентов, АдресВХранилище);
	КонецЕсли;
	
	ВывестиСтрокуИтогоНачислений();
	ВывестиСтрокуИтогоНачисленийФактически();
	
	ОбновитьОтборРасшифровкиНачислений();
	
КонецПроцедуры // ОбработатьВыбранноеЗначение()

//////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ С ПОМОЩЬЮ РЕАЛИЗАЦИЙ

//////////////////////////////
// Вспомогательные процедуры

&НаСервере
// Процедура пометки на удаление документов отражения.
Процедура ПометитьНаУдалениеДокументыОтражения(МассивСсылокУдаляемыхДокументов, ОставлятьДокументыПриИспользованииАгентскойСхемы = Ложь)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Контрагенты Цикл
		
		// Не трогаем документы с вариантом поставки услуг "Агентская схема" или с отрицательным значением суммы начисления, так как
		// по ним в любом случае формируется докмент "Реализация товаров и услуг".
		Если (ОставлятьДокументыПриИспользованииАгентскойСхемы 
			И СтрокаТабличнойЧасти.ВариантПоставкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема")) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ПометитьНаУдалениеДокументОтраженияНачислений(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), МассивСсылокУдаляемыхДокументов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// очищает ссылки документов на сервере.
Процедура ОчиститьСсылкиДокументовОтражения(МассивСсылокУдаляемыхДокументов)
	
	Для Каждого ТекСсылка Из МассивСсылокУдаляемыхДокументов Цикл
		Отбор = Новый Структура("Документ", ТекСсылка);
		СтрокиДокумента = Объект.Контрагенты.НайтиСтроки(Отбор);
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			ОчиститьСсылкиНаДокументыОтраженияНачислений(СтрокаДокумента.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////
// Обработчики событий

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипДокументаОтражения".
Процедура ТипДокументаОтраженияПриИзменении(Элемент)
	
	Если ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа.
		ЕстьСформированыеДокументыОтраженияНачислений = ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй();
		
		ТекстВопроса = "При изменени типа документа отражения табличная часть будет очищена. Продолжить?";
		
		Если ЕстьСформированыеДокументыОтраженияНачислений Тогда
			
			ТекстВопроса = "В табличной части обнаружены ссылки на сформированные документы отражения начислений в БУ." + Символы.ПС + 
						   "Сформированные документы помечены на удаление, ссылки на них очищены. Продолжить?";
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаТипДокументаОтраженияПриИзменении", 
												ЭтотОбъект, 
												Новый Структура("ЕстьСформированыеДокументыОтраженияНачислений", ЕстьСформированыеДокументыОтраженияНачислений)
												),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ТипДокументаОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ТипДокументаОтраженияПриИзменении()".
Процедура ОбработатьРезультатВопросаТипДокументаОтраженияПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ТипДокументаОтражения = ПредыдущийТипДокументаОтражения;
		Возврат;
	КонецЕсли;
	
	// Пометим на удалений документы отражения начислений, в случае наличия ссылок на них в табличной части.
	Если ДополнительныеПараметры.ЕстьСформированыеДокументыОтраженияНачислений Тогда
		
		МассивСтрокУдалДокументов = Новый Массив;
		
		Состояние("Выполняется обработка документов отражения...");
		ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов, Истина);
		Состояние("Обработка документов отражения завершена...");
		
		ОчиститьСсылкиДокументовОтражения(МассивСтрокУдалДокументов);
		
	КонецЕсли;
	
	ВывестиСтрокуИтогоНачисленийФактически();
	ВывестиСтрокуИтогоНачислений();
	
	ТипДокументаОтраженияПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ТипДокументаОтраженияПриИзменении()".
Процедура ТипДокументаОтраженияПриИзмененииПродолжение()
	
	ПроверитьДанныеКОтражению();
	УправлениеФормой(ЭтаФорма);
	ПредыдущийТипДокументаОтражения = Объект.ТипДокументаОтражения;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УчитыватьНДС".
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЗачетАвансов".
Процедура ЗаполнитьСписокВыбораЗачетАвансов()
	
	Элементы.ЗачетАвансов.СписокВыбора.Очистить();
	
	МассивСпособовЗачетаАвансов = Новый Массив;
	МассивСпособовЗачетаАвансов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически"));
	МассивСпособовЗачетаАвансов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать"));
	
	Для Каждого ЭлементСписка Из МассивСпособовЗачетаАвансов Цикл
		Элементы.ЗачетАвансов.СписокВыбора.Добавить(ЭлементСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтрагентКомпенсацииЛьгот".
Процедура КонтрагентКомпенсацииЛьготПриИзменении(Элемент)
	
	УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагентаКомпенсацииЛьгот,
																Объект.КонтрагентКомпенсацииЛьгот, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДоговорКонтрагентаКомпенсацииЛьгот".
Процедура ДоговорКонтрагентаКомпенсацииЛьготПриИзменении(Элемент)
	
	Если Не Объект.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
		Объект.КонтрагентКомпенсацииЛьгот = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагентаКомпенсацииЛьгот, "Владелец");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДоговорКонтрагентаКомпенсацииЛьгот".
Процедура ДоговорКонтрагентаКомпенсацииЛьготНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Если Не Объект.Организация.Пустая() Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если Не Объект.КонтрагентКомпенсацииЛьгот.Пустая() Тогда
		Отбор.Вставить("Владелец", Объект.КонтрагентКомпенсацииЛьгот);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыКонтрагент".
Процедура КонтрагентыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыКонтрагент".
Процедура КонтрагентыКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыДоговорКонтрагента".
Процедура КонтрагентыДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыДоговорКонтрагента".
Процедура КонтрагентыДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыДокумент".
Процедура КонтрагентыДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыДокумент".
Процедура КонтрагентыДокументОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыНоменклатурнаяГруппа".
Процедура КонтрагентыНоменклатурнаяГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыНоменклатурнаяГруппа".
Процедура КонтрагентыНоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыВариантПоставкиУслуг".
Процедура КонтрагентыВариантПоставкиУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыВариантПоставкиУслуг".
Процедура КонтрагентыВариантПоставкиУслугОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтрагентыСчетФактура".
Процедура КонтрагентыСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "КонтрагентыСчетФактура".
Процедура КонтрагентыСчетФактураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Контрагенты".
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиКонтрагенты", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" таблицы "Контрагенты".
Процедура КонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийНоменклатура".
Процедура РасшифровкаНачисленийНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РасшифровкаНачисленийНоменклатура".
Процедура РасшифровкаНачисленийНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасшифровкаНачисленийСуммаОтражения".
Процедура РасшифровкаНачисленийСуммаОтраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//////////////////////////////
// Обработчики команд

&НаКлиенте
// Обработчик команды "СформироватьДокументы".
Процедура СформироватьДокументы(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса   = "Сформировать отражение в регл. учете можно только после записи документа. Записать документ?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументы", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыПродолжение();
	
КонецПроцедуры // СформироватьДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "СформироватьДокументы()".
Процедура ОбработатьРезультатВопросаСформироватьДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись)) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументы()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СформироватьДокументы()".
Процедура СформироватьДокументыПродолжение()
	
	Если Объект.Проведен Тогда
		ТекстВопроса = "Автоматически сформировать документы отражения в регл. учете можно только 
						| после отмены проведения документа. Выполнить отмену проведения документа?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументыПродолжение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыФрагмент();

КонецПроцедуры // СформироватьДокументыПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "СформироватьДокументыПродолжение()".
Процедура ОбработатьРезультатВопросаСформироватьДокументыПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыФрагмент();

КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументыПродолжение()

&НаКлиенте
// Процедура формирует документы и записывает текущий документ.
Процедура СформироватьДокументыФрагмент()
	
	Если НЕ Объект.Контрагенты.Количество() = 0 И ПроверитьЗаполненностьРеквизитов() Тогда
		
		// Определим наличие ссылок на сформированные типовые документы отражения начислений в табличной части документа,
		// в случае обнаружения таковых - спросим пользователя о необходимости перезаполнения типовых документов отражения.
		Если ПроверитьНаличиеСформированныхДокументовОтраженияНачисленй() Тогда
			
			ТекстВопроса = "Перезаполнить сформированные документы отражения начислений в БУ?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументыФрагмент",ЭтотОбъект),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНетОтмена, ,
						   КодВозвратаДиалога.Да);
			Возврат;
			
		КонецЕсли;
		
		СформироватьДокументыФрагментПродолжение();
		
	КонецЕсли;
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
КонецПроцедуры // СформироватьДокументыФрагмент().

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "СформироватьДокументыПродолжение()".
Процедура ОбработатьРезультатВопросаСформироватьДокументыФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПравитьСуществующие = Истина;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПравитьСуществующие = Ложь;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьДокументыФрагментПродолжение(ПравитьСуществующие);
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументыФрагмент().

&НаКлиенте
// Процедура-продолжение процедуры "СформироватьДокументыФрагмент()".
Процедура СформироватьДокументыФрагментПродолжение(ПравитьСуществующие = Ложь)
	
	Состояние("Выполняется формирование документов отражения...");
	
	СформироватьДокументыНаСервере(ПравитьСуществующие);
	
	Состояние("Формирование документов отражения завершено...");
	
КонецПроцедуры // СформироватьДокументыФрагмент()

&НаКлиенте
// Обработчик команды "СформироватьДокументы".
Процедура УдалитьДокументыВТекущейСтроке(Команда)
	
	ТекущаяСтрока = Элементы.Контрагенты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса       = "Будут помечены на удаление документы в текущей строке.
						 |Продолжить?";
	ДопПараметры       = Новый Структура("ТекстВопроса, ТекущаяСтрока", ТекстВопроса, ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке", ЭтотОбъект, ДопПараметры);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры // УдалитьДокументыВТекущейСтроке()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре "УдалитьДокументыВТекущейСтроке()".
Процедура ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокУдаляемыхДокументов = Новый Массив;
	ПометитьНаУдалениеДокументОтраженияНачислений(ТекущаяСтрока, МассивСсылокУдаляемыхДокументов);
	
	Если МассивСсылокУдаляемыхДокументов.Количество() > 0 Тогда
		ТекстВопроса = "Очистить ссылки на документы в текущей строке табличной части?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение",
													  ЭтотОбъект,
													  Новый Структура("МассивСсылокУдаляемыхДокументов", МассивСсылокУдаляемыхДокументов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	УдалитьДокументыВТекущейСтрокеПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре "ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтроке()".
Процедура ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСсылка Из ДополнительныеПараметры.МассивСсылокУдаляемыхДокументов Цикл
		Отбор = Новый Структура("Документ", ТекСсылка);
		СтрокиДокумента = Объект.Контрагенты.НайтиСтроки(Отбор);
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			ОчиститьСсылкиНаДокументыОтраженияНачислений(СтрокаДокумента.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
	УдалитьДокументыВТекущейСтрокеПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьДокументыВТекущейСтрокеПродолжение()

&НаКлиенте
// Процедура вызывает процедуру вывода итоговой строки для поля "НачислениеФактически".
Процедура УдалитьДокументыВТекущейСтрокеПродолжение()
	
	ВывестиСтрокуИтогоНачисленийФактически();
	
КонецПроцедуры // УдалитьДокументыВТекущейСтрокеПродолжение()

&НаКлиенте
// Обработчик команды "УдалитьВсеДокументы".
Процедура УдалитьВсеДокументы(Команда)
	
	ТекстВопроса = "Будут помечены на удаление все документы.
					|Продолжить?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьВсеДокументы", ЭтотОбъект, Новый Структура("ТекстВопроса", ТекстВопроса));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры // УдалитьВсеДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процеддуре-обработчике команды "УдалитьВсеДокументы()".
Процедура ОбработатьРезультатВопросаУдалитьВсеДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокУдалДокументов = Новый Массив;
	
	Состояние("Выполняется обработка документов отражения...");
	ПометитьНаУдалениеДокументыОтражения(МассивСтрокУдалДокументов);
	Состояние("Обработка документов отражения завершена...");
	
	Если МассивСтрокУдалДокументов.Количество() > 0 Тогда
		ТекстВопроса       = "Очистить ссылки на документы в табличной части?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение", ЭтотОбъект, Новый Структура("МассивСтрокУдалДокументов", МассивСтрокУдалДокументов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьВсеДокументы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процеддуре-обработчике команды "ОбработатьРезультатВопросаУдалитьВсеДокументы()".
Процедура ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСсылкиДокументовОтражения(ДополнительныеПараметры.МассивСтрокУдалДокументов);

КонецПроцедуры // ОбработатьРезультатВопросаУдалитьВсеДокументыПродолжение()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
