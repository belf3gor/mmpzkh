#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, мВалютаРегламентированногоУчета, мНастройкиУчетнойПолитикиТСЖ) Экспорт
	
	Если ДокументСсылка.ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		ПараметрыПроведения = ПодготовитьПараметрыПроведенияНовыйМеханизмОтражения(ДокументСсылка, Отказ);
	Иначе
		ПараметрыПроведения = ПодготовитьПараметрыПроведенияСтарыйМеханизмОтражения(ДокументСсылка, Отказ, мВалютаРегламентированногоУчета, мНастройкиУчетнойПолитикиТСЖ);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции


#Область СтарыйМеханизмОтражения

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведенияСтарыйМеханизмОтражения(ДокументСсылка, Отказ, мВалютаРегламентированногоУчета, мНастройкиУчетнойПолитикиТСЖ) 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВерсияДанных,
	|	Реквизиты.ПометкаУдаления,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Проведен,
	|	Реквизиты.Организация,
	|	Реквизиты.Взаиморасчеты,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ТипДокументаОтражения,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Номенклатура,
	|	Реквизиты.НоменклатурнаяГруппа,
	|	Реквизиты.Ответственный,
	|	Реквизиты.Комментарий,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.КонтрагентКомпенсацииЛьгот,
	|	Реквизиты.ДоговорКонтрагентаКомпенсацииЛьгот,
	|	Реквизиты.Подразделение,
	|	Реквизиты.СпособЗачетаАвансов,
	|	Реквизиты.ЛицевойСчет,              //++Позолотина
	|	Реквизиты.Договор,                  //--Позолотина
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	
	Реквизиты.Вставить("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент", 
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	
	РезультатЗапроса.Колонки.Добавить("УчитыватьЗадолженностьУСН");
	РезультатЗапроса.Колонки.Добавить("УчитыватьЗадолженностьУСНПатент");
	СтрокаРезультата = РезультатЗапроса[0];
	СтрокаРезультата.УчитыватьЗадолженностьУСН = Реквизиты.ПрименяетсяУСН;
	СтрокаРезультата.УчитыватьЗадолженностьУСНПатент = Реквизиты.ПрименяетсяУСНПатент;
	
	ПараметрыПроведения.Вставить("Реквизиты", РезультатЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.СпособЗачетаАвансов
	|ПОМЕСТИТЬ втРеквизиты
	|ИЗ
	|	&Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРеквизиты.Регистратор,
	|	втРеквизиты.Период,
	|	втРеквизиты.ВидОперации,
	|	втРеквизиты.Организация,
	|	втРеквизиты.СпособЗачетаАвансов,
	|	&ВалютаРеглУчета КАК ВалютаДокумента,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	втРеквизиты КАК втРеквизиты";
	
	Запрос.УстановитьПараметр("ВалютаРеглУчета",   	  Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ПрименяетсяУСН",   	  Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент", Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("Реквизиты",            РезультатЗапроса);

	ТаблицаРеквизитовЗачетАванса = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроведения.Вставить("РеквизитыЗачетаАвансов", ТаблицаРеквизитовЗачетАванса);
	
	// Получим таблицу начислений.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасшифровкаНачислений.ДоговорКонтрагента,
	|	РасшифровкаНачислений.НоменклатурнаяГруппа,
	|	РасшифровкаНачислений.ПризнакКапРем КАК ПризнакКапРем,
	|	РасшифровкаНачислений.ЭтоЛьгота,
	|	РасшифровкаНачислений.ЭтоПени,
	|	РасшифровкаНачислений.ВариантПоставкиУслуг,
	|	РасшифровкаНачислений.ДоговорПоставщикаУслуг,
	|	РасшифровкаНачислений.Номенклатура,
	|	РасшифровкаНачислений.СуммаОтражения,
	|	РасшифровкаНачислений.СчетУслуг,
	|	РасшифровкаНачислений.СубконтоСчетаУслуг1,
	|	РасшифровкаНачислений.СубконтоСчетаУслуг2,
	|	РасшифровкаНачислений.СубконтоСчетаУслуг3,
	|	РасшифровкаНачислений.ЛицевойСчет,
	|	РасшифровкаНачислений.Количество,   //+Позолотина
	|	РасшифровкаНачислений.Тариф,
	|	РасшифровкаНачислений.ЗданиеКапРем,
	|	РасшифровкаНачислений.ПризнакКапРем,	  //--Позолотина
	|	РасшифровкаНачислений.ПризнакБлаг	  //Петрова
	|ПОМЕСТИТЬ врРасшифровка
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.РасшифровкаНачислений КАК РасшифровкаНачислений
	|ГДЕ
	|	РасшифровкаНачислений.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.Контрагент,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ДоговорКонтрагента,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ПризнакКапРем,                    //++Позолотина
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ПризнакБлаг,                    //++Петрова
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ЭтоЛьгота,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ЭтоПени,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.ВариантПоставкиУслуг,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.СчетУчетаРасчетов,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.СчетУчетаАвансов,
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.Отражать
	|ПОМЕСТИТЬ врКонтрагенты
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.Контрагенты КАК КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты
	|ГДЕ
	|	КВП_ОтражениеНачисленийВРеглУчетеКонтрагенты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_Услуги.Услуга КАК Номенклатура
	|ПОМЕСТИТЬ врТаблицаНоменклатурыКапРемонта
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.Ссылка В(&СписокУслугКапремонта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врКонтрагенты.Контрагент,
	|	врРасшифровка.ДоговорКонтрагента,
	|	врРасшифровка.НоменклатурнаяГруппа,
	|	врРасшифровка.ЭтоЛьгота,
	|	врРасшифровка.ЭтоПени,
	|	врРасшифровка.ВариантПоставкиУслуг,
	|	врРасшифровка.ДоговорПоставщикаУслуг,
	|	врРасшифровка.Номенклатура,
	|	врРасшифровка.СуммаОтражения,
	|	врРасшифровка.СчетУслуг,
	|	врРасшифровка.СубконтоСчетаУслуг1,
	|	врРасшифровка.СубконтоСчетаУслуг2,
	|	врРасшифровка.СубконтоСчетаУслуг3,
	|	врРасшифровка.ЛицевойСчет,     //++Позолотина
	|	врРасшифровка.Количество,
	|	врРасшифровка.Тариф,
	|	врРасшифровка.ЗданиеКапРем,
	|	врРасшифровка.ПризнакКапРем,  //--Позолотина
    |	врРасшифровка.ПризнакБлаг,  //Петрова
	|	ВЫБОР
	|		КОГДА &ОтражатьКапремонтПоЗаданномуСчетуУчета
	|				И НЕ врРасшифровка.ЭтоПени
	|				И НЕ врТаблицаНоменклатурыКапРемонта.Номенклатура ЕСТЬ NULL 
	|			ТОГДА &СчетУчетаВзаиморасчетовПоКапремонту
	|		ИНАЧЕ врКонтрагенты.СчетУчетаРасчетов
	|	КОНЕЦ КАК СчетУчетаРасчетов,
	|	ВЫБОР
	|		КОГДА &ОтражатьКапремонтПоЗаданномуСчетуУчета
	|				И НЕ врРасшифровка.ЭтоПени
	|				И НЕ врТаблицаНоменклатурыКапРемонта.Номенклатура ЕСТЬ NULL 
	|			ТОГДА &СчетУчетаВзаиморасчетовПоКапремонту
	|		ИНАЧЕ врКонтрагенты.СчетУчетаАвансов
	|	КОНЕЦ КАК СчетУчетаАвансов,
	|	врКонтрагенты.Отражать
	|ИЗ
	|	врРасшифровка КАК врРасшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ врКонтрагенты КАК врКонтрагенты
	|		ПО врРасшифровка.ДоговорКонтрагента = врКонтрагенты.ДоговорКонтрагента
	|			И врРасшифровка.ПризнакКапРем = врКонтрагенты.ПризнакКапРем
	|			И врРасшифровка.ПризнакБлаг = врКонтрагенты.ПризнакБлаг
	|			И врРасшифровка.ЭтоЛьгота = врКонтрагенты.ЭтоЛьгота
	|			И врРасшифровка.ЭтоПени = врКонтрагенты.ЭтоПени
	|			И врРасшифровка.ВариантПоставкиУслуг = врКонтрагенты.ВариантПоставкиУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНоменклатурыКапРемонта КАК врТаблицаНоменклатурыКапРемонта
	|		ПО врРасшифровка.Номенклатура = врТаблицаНоменклатурыКапРемонта.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	// При упрощенном отражении начисления по капремонту нужно отражатьпо настройкам отражения
	// в учетной политике ЖКХ. Получим настройки отражения начислений по капремонту.
	
	// Определим список услуг капремонта.
	СписокУслугКапремонта = Новый Массив;
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Реквизиты.Организация, Истина);
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		СписокУслугКапремонта = мСтруктураНастроекКапРемонта.СписокУслуг;
	КонецЕсли;
	
	// Установим параметры запроса по отражению капремонта.
	Запрос.УстановитьПараметр("ОтражатьКапремонтПоЗаданномуСчетуУчета", мНастройкиУчетнойПолитикиТСЖ.ОтражатьВзаиморасчетыПоКапремонтуПоЗаданномуСчетуУчета);
	Запрос.УстановитьПараметр("СчетУчетаВзаиморасчетовПоКапремонту",    мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту);
	Запрос.УстановитьПараметр("СписокУслугКапремонта",                  СписокУслугКапремонта);
	
	// Получим таблицу начислений и поместим ее в структуру параметров.
	ПараметрыПроведения.Вставить("ТаблицаНачислений", Запрос.Выполнить().Выгрузить());
	
	Возврат ПараметрыПроведения;

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ СЧЕТОВ УЧЕТА В ТАБЛИЦЕ РАСШИФРОВКИ НАЧИСЛЕНИЙ

// Заполняем счета учета услуг в строках ТЧ "Расшифровка начислений" документа.
//
Процедура ЗаполнитьСчетаУчетаУслугТабличнойЧасти(Дата, Организация, СтрокиРасшифровкиНачислений, мНастройкиУчетнойПолитикиТСЖ = Неопределено, мСчетаУчетаНоменклатуры = Неопределено) Экспорт
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	мСчетаУчетаНоменклатуры = Новый Соответствие;
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокиРасшифровкиНачислений Цикл
		
		СчетаУчета = мСчетаУчетаНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		Если СчетаУчета = Неопределено Тогда
			СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаУчетаНоменклатуры(Организация,
																					СтрокаТабличнойЧасти.Номенклатура);
			мСчетаУчетаНоменклатуры[СтрокаТабличнойЧасти.Номенклатура] = СчетаУчета;
		КонецЕсли;
		
		// Для пени счета учета берутся из РС "Счета учета расчетов по пени".
		Если мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И СтрокаТабличнойЧасти.ЭтоПени Тогда
			
			ВидВзаиморасчетов = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВидВзаиморасчетов;
			
			// Получим счет доходов из РС "Счета учета расчетов по пени".
			// При получении счета учтем это пени по капремонту или нет.
			СчетаУчетаПени = ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ВидВзаиморасчетов, ?(СтрокаТабличнойЧасти.ПризнакКапРем, Истина, Ложь));
			
			// Счет из РС будем подставлять только если он заполнен.
			Если Не СчетаУчетаПени.СчетУчетаДоходов.Пустая() Тогда
				СтрокаТабличнойЧасти.СчетУслуг           = СчетаУчетаПени.СчетУчетаДоходов;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг1 = СчетаУчетаПени.Субконто1;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг2 = СчетаУчетаПени.Субконто2;
				СтрокаТабличнойЧасти.СубконтоСчетаУслуг3 = СчетаУчетаПени.Субконто3;
				
				ПривестиТипыИЗаполнитьЗначенияСубконто(СтрокаТабличнойЧасти, мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// В зависимости от настройки в УП определим какой счет использовать в качестве счета услуг:
		// счет учета номенлатуры или счет доходов от реализации.
		Если мНастройкиУчетнойПолитикиТСЖ.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете = Перечисления.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчета Тогда
			СтрокаТабличнойЧасти.СчетУслуг           = СчетаУчета.СчетУчета;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг1 = СчетаУчета.Субконто1;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг2 = СчетаУчета.Субконто2;
			СтрокаТабличнойЧасти.СубконтоСчетаУслуг3 = СчетаУчета.Субконто3;
		Иначе
			СтрокаТабличнойЧасти.СчетУслуг = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		ПривестиТипыИЗаполнитьЗначенияСубконто(СтрокаТабличнойЧасти, мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаУслугТабличнойЧасти()

// Приводит соответствие типов субконто и заполняет незаполненные значения субконто значениями по умолчанию.
Процедура ПривестиТипыИЗаполнитьЗначенияСубконто(СтрокаТабличнойЧасти, СтавкаНДСДляОтраженияПени)
	
	Счет = СтрокаТабличнойЧасти["СчетУслуг"];
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТекВидСубконто    = Счет.ВидыСубконто[Сч - 1].ВидСубконто;
		ТипСубк           = ТекВидСубконто.ТипЗначения;
		ТекСтрокаСубконто = СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч];
		
		// 1. Проводим тип
		Если НЕ ТипСубк.ПривестиЗначение(ТекСтрокаСубконто) = ТекСтрокаСубконто Тогда
			СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = ТипСубк.ПривестиЗначение(ТекСтрокаСубконто);
		КонецЕсли;
		
		// 2. Если для пени в настройке учетной политики на закладке "Регламентированный учет" установлено
		// отражать по ставке "Без НДС", а текущее субконто это "Ставки НДС", то установим его в
		// значение "Без НДС".
		Если ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
			 И СтрокаТабличнойЧасти.ЭтоПени
			 И СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС Тогда
			
			СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = Перечисления.СтавкиНДС.БезНДС;
			
		КонецЕсли;
		
		// 2. Заполняем значением по умолчанию
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч]) Тогда
			Если ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы 
			 ИЛИ ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.Номенклатура;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.ДоговорКонтрагента;
				
			ИначеЕсли ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
				СтрокаТабличнойЧасти["СубконтоСчетаУслуг" + Сч] = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПривестиТипыИЗаполнитьЗначенияСубконто()

#КонецОбласти


#Область НовыйМеханизмОтражения

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ И СЧЕТАМИ УЧЕТА ДЛЯ НОВОГО МЕХАНИЗМА ОТРАЖЕНИЯ

// Функция выполняет запрос к табличной части "НачисленияКОтражению" документа
// и дополняет его доп. сведениями по лицевым счетам и услугам, которые требуются
// для формирования документов отражения.
//
Функция ВыполнитьЗапросПоНачислениямКОтражениюСДополнительнымиСведениями(Ссылка, Организация, Дата, СтруктураОтбораПоТекущейСтроке = Неопределено, мНастройкиУчетнойПолитикиТСЖ, МассивУслугБезНоменклатуры = Неопределено) Экспорт
	
	// Данная функция используется для получения строк к отражению из ТЧ документа
	// с дополнительными сведениями по лицевым счетам, услугам. При этом функция
	// используется в двух случаях:
	// 1. При формировании типовых документов отражения начислений.
	// 2. При отображении сведений к отражению по текущей строке документа в форме документа.
	
	//////////////////////////////////////////////////////////////////////////////
	// ОПРЕДЕЛЕНИЕ ПАРАМЕТРОВ ОТБОРА ПРИ ПОЛУЧЕНИИ ДАННЫХ ПО ТЕКУЩЕЙ СТРОКЕ
	
	ЕстьОтборПоТекущейСтрокеНачисленияКОтражению = Ложь;
	
	// Значения параметров отбора по умолчанию.
	ОтборОтражать            = Ложь;
	ОтборНомерСтроки         = 0;
	ОтборЛицевойСчет         = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	ОтборУслуга              = Справочники.КВП_Услуги.ПустаяСсылка();
	ОтборРазделУчета         = Перечисления.УПЖКХ_РазделыУчета.ПустаяСсылка();
	ОтборЭтоКорректировка    = Ложь;
	ОтборВидКорректировки    = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.ПустаяСсылка();
	ОтборПериодКорректировки = Дата(1,1,1);
	ОтборСуммаОтражения      = 0;
	ОтборДокументОтраженияКорректируемогоНачисленияПрошлогоПериода = Неопределено;
	ОтборДокументОтражения                                         = Неопределено;
	
	// Если передана структура параметров, то значит, что данные получаем по текущей строке в диалоге.
	Если ТипЗнч(СтруктураОтбораПоТекущейСтроке) = Тип("Структура") Тогда
		
		// Устанавливаем признак отбора по текущей строке.
		ЕстьОтборПоТекущейСтрокеНачисленияКОтражению = Истина;
		
		// Получаем параметры их структуры отбора, если они переданы.
		СтруктураОтбораПоТекущейСтроке.Свойство("Отражать",            ОтборОтражать);
		СтруктураОтбораПоТекущейСтроке.Свойство("НомерСтроки",         ОтборНомерСтроки);
		СтруктураОтбораПоТекущейСтроке.Свойство("ЛицевойСчет",         ОтборЛицевойСчет);
		СтруктураОтбораПоТекущейСтроке.Свойство("Услуга",              ОтборУслуга);
		СтруктураОтбораПоТекущейСтроке.Свойство("РазделУчета",         ОтборРазделУчета);
		СтруктураОтбораПоТекущейСтроке.Свойство("ЭтоКорректировка",    ОтборЭтоКорректировка);
		СтруктураОтбораПоТекущейСтроке.Свойство("ВидКорректировки",    ОтборВидКорректировки);
		СтруктураОтбораПоТекущейСтроке.Свойство("ПериодКорректировки", ОтборПериодКорректировки);
		СтруктураОтбораПоТекущейСтроке.Свойство("СуммаОтражения",      ОтборСуммаОтражения);
		СтруктураОтбораПоТекущейСтроке.Свойство("ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода", ОтборДокументОтраженияКорректируемогоНачисленияПрошлогоПериода);
		СтруктураОтбораПоТекущейСтроке.Свойство("ДокументОтражения",   ОтборДокументОтражения);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// НЕПОСРЕДСТВЕННОЕ ПОЛУЧЕНИЕ ДАННЫХ В ЗАПРОСЕ
	
	// Алгоритм:
	// 1. По данным табличной части документа или переданных данных текущей строки получаем таблицу начислений.
	// 2. Дополняем данными для отражения: Номенклатура, НоменклатурнаяГруппа, ДоговорКонтрагента, ВариантПоставкиУслуг, ДоговорПоставщикаУслуг.
	// 3. Сворачиваем с учетом настроек уч.политики по отражению льгот и пени, настройки использования корректировок реализации, группируем по параметрам.
	// 4. Для каждой группы строк формируем один документ отражения в регл.учете и регистрируем счет-фактуру (СФ).
	// 5. Ищем связанные строки в ТЧ НачисленияКОтражению: для группы строк указываем одну и ту же ссылку на сформированные документы.
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                   Ссылка);
	//Данные для отражения из п.2 получаем по состоянию на конец месяца.
	Запрос.УстановитьПараметр("Дата",                     КонецМесяца(Дата)); 
	Запрос.УстановитьПараметр("Организация",              Организация);
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	// Определим список услуг капремонта.
	СписокУслугКапремонта = Новый Массив;
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		СписокУслугКапремонта = мСтруктураНастроекКапРемонта.СписокУслуг;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокУслугКапремонта", СписокУслугКапремонта);
	
	Если Не МассивУслугБезНоменклатуры = Неопределено Тогда
		Запрос.УстановитьПараметр("МассивУслугБезНоменклатуры", МассивУслугБезНоменклатуры);
	КонецЕсли;
	
	// Установка параметров отбора по текущей строке к отражению.
	Запрос.УстановитьПараметр("ЕстьОтборПоТекущейСтрокеНачисленияКОтражению", ЕстьОтборПоТекущейСтрокеНачисленияКОтражению);
	Запрос.УстановитьПараметр("ОтборОтражать",            ОтборОтражать);
	Запрос.УстановитьПараметр("ОтборНомерСтроки",         ОтборНомерСтроки);
	Запрос.УстановитьПараметр("ОтборЛицевойСчет",         ОтборЛицевойСчет);
	Запрос.УстановитьПараметр("ОтборУслуга",              ОтборУслуга);
	Запрос.УстановитьПараметр("ОтборРазделУчета",         ОтборРазделУчета);
	Запрос.УстановитьПараметр("ОтборЭтоКорректировка",    ОтборЭтоКорректировка);
	Запрос.УстановитьПараметр("ОтборВидКорректировки",    ОтборВидКорректировки);
	Запрос.УстановитьПараметр("ОтборПериодКорректировки", ОтборПериодКорректировки);
	Запрос.УстановитьПараметр("ОтборСуммаОтражения",      ОтборСуммаОтражения);
	Запрос.УстановитьПараметр("ОтборДокументОтраженияКорректируемогоНачисленияПрошлогоПериода", ОтборДокументОтраженияКорректируемогоНачисленияПрошлогоПериода);
	Запрос.УстановитьПараметр("ОтборДокументОтражения",   ОтборДокументОтражения);
	
	// При получении данных из таблицы к отражению в некоторых случаях используем
	// отбор по номеру строки. В итоге берем строки по двум критериям:
	// 1. В строке должен быть установлен признак "Отражать", или его не смотрим, если отбираем по номеру строки.
	// 2. Номер строки должен совпадать с номером из отбора, или его не смотрим, если Не отбираем по номеру строки.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияКОтражению.Отражать КАК Отражать,
	|	НачисленияКОтражению.НомерСтроки КАК НомерСтроки,
	|	НачисленияКОтражению.ЛицевойСчет КАК ЛицевойСчет,
	|	НачисленияКОтражению.Услуга КАК Услуга,
	|	НачисленияКОтражению.РазделУчета КАК РазделУчета,
	|	НачисленияКОтражению.ЭтоКорректировка КАК ЭтоКорректировка,
	|	НачисленияКОтражению.ВидКорректировки КАК ВидКорректировки,
	|	НачисленияКОтражению.ПериодКорректировки КАК ПериодКорректировки,
	|	НачисленияКОтражению.СуммаОтражения КАК СуммаОтражения,
	|	НачисленияКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	НачисленияКОтражению.ДокументОтражения КАК ДокументОтражения
	|ПОМЕСТИТЬ врИсходныеДанныеКОтражению
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.НачисленияКОтражению КАК НачисленияКОтражению
	|ГДЕ
	|	НачисленияКОтражению.Ссылка = &Ссылка
	|	И НЕ &ЕстьОтборПоТекущейСтрокеНачисленияКОтражению
	|	И НачисленияКОтражению.Отражать";
	
	Если Не МассивУслугБезНоменклатуры = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ НачисленияКОтражению.Услуга В(&МассивУслугБезНоменклатуры)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ОтборОтражать,
	|	&ОтборНомерСтроки,
	|	&ОтборЛицевойСчет,
	|	&ОтборУслуга,
	|	&ОтборРазделУчета,
	|	&ОтборЭтоКорректировка,
	|	&ОтборВидКорректировки,
	|	&ОтборПериодКорректировки,
	|	&ОтборСуммаОтражения,
	|	&ОтборДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	&ОтборДокументОтражения
	|ГДЕ
	|	&ЕстьОтборПоТекущейСтрокеНачисленияКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врИсходныеДанныеКОтражению.Отражать КАК Отражать,
	|	врИсходныеДанныеКОтражению.НомерСтроки КАК НомерСтроки,
	|	врИсходныеДанныеКОтражению.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	врИсходныеДанныеКОтражению.Услуга КАК Услуга,
	|	КВП_Услуги.ВидУслуги КАК ВидУслуги,
	|	КВП_Услуги.Услуга КАК Номенклатура,
	|	врИсходныеДанныеКОтражению.РазделУчета КАК РазделУчета,
	|	врИсходныеДанныеКОтражению.ЭтоКорректировка КАК ЭтоКорректировка,
	|	врИсходныеДанныеКОтражению.ВидКорректировки КАК ВидКорректировки,
	|	врИсходныеДанныеКОтражению.ПериодКорректировки КАК ПериодКорректировки,
	|	врИсходныеДанныеКОтражению.СуммаОтражения КАК СуммаОтражения,
	|	врИсходныеДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врИсходныеДанныеКОтражению.ДокументОтражения КАК ДокументОтражения
	|ПОМЕСТИТЬ врДанныеКОтражению
	|ИЗ
	|	врИсходныеДанныеКОтражению КАК врИсходныеДанныеКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО врИсходныеДанныеКОтражению.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО врИсходныеДанныеКОтражению.Услуга = КВП_Услуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	врДанныеКОтражению.ЛицевойСчет КАК ЛицевойСчет,
	|	врДанныеКОтражению.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА 10
	|		ИНАЧЕ 20
	|	КОНЕЦ КАК Приоритет,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПоставщикаУслуг,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.ПустаяСсылка)) КАК ВариантПоставкиУслуг
	|ПОМЕСТИТЬ врТаблицаПоставщиков
	|ИЗ
	|	врДанныеКОтражению КАК врДанныеКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ВидУслуги В
	|						(ВЫБРАТЬ
	|							ДанныеКОтражению.ВидУслуги
	|						ИЗ
	|							врДанныеКОтражению КАК ДанныеКОтражению)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО врДанныеКОтражению.ВидУслуги = УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги
	|			И (ВЫБОР
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|					ТОГДА врДанныеКОтражению.Здание = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА врДанныеКОтражению.Подъезд = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщиков.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаПоставщиков.ВидУслуги КАК ВидУслуги,
	|	МИНИМУМ(ТаблицаПоставщиков.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ врТаблицаПоставщиковМинимальныеПриоритеты
	|ИЗ
	|	врТаблицаПоставщиков КАК ТаблицаПоставщиков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоставщиков.ЛицевойСчет,
	|	ТаблицаПоставщиков.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщиков.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаПоставщиков.ВидУслуги КАК ВидУслуги,
	|	ТаблицаПоставщиков.Поставщик КАК Поставщик,
	|	ТаблицаПоставщиков.ДоговорПоставщикаУслуг КАК ДоговорПоставщикаУслуг,
	|	ТаблицаПоставщиков.ВариантПоставкиУслуг КАК ВариантПоставкиУслуг
	|ПОМЕСТИТЬ врПоставщики
	|ИЗ
	|	врТаблицаПоставщиков КАК ТаблицаПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаПоставщиковМинимальныеПриоритеты КАК МинимальныеПриоритеты
	|		ПО ТаблицаПоставщиков.ЛицевойСчет = МинимальныеПриоритеты.ЛицевойСчет
	|			И ТаблицаПоставщиков.ВидУслуги = МинимальныеПриоритеты.ВидУслуги
	|			И ТаблицаПоставщиков.Приоритет = МинимальныеПриоритеты.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент КАК Контрагент,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор КАК Договор,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор.ВидВзаиморасчетов КАК ВидВзаиморасчетовДоговора
	|ПОМЕСТИТЬ врТаблицаДоговоров
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ДанныеКОтражению.ЛицевойСчет
	|					ИЗ
	|						врДанныеКОтражению КАК ДанныеКОтражению)) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеКОтражению.НомерСтроки КАК НомерСтроки,
	|	врДанныеКОтражению.ЛицевойСчет КАК ЛицевойСчет,
	|	врДанныеКОтражению.Здание КАК Здание,
	|	врДанныеКОтражению.Услуга КАК Услуга,
	|	врДанныеКОтражению.РазделУчета КАК РазделУчета,
	|	врДанныеКОтражению.ЭтоКорректировка КАК ЭтоКорректировка,
	|	врДанныеКОтражению.ВидКорректировки КАК ВидКорректировки,
	|	врДанныеКОтражению.ПериодКорректировки КАК ПериодКорректировки,
	|	врДанныеКОтражению.СуммаОтражения КАК СуммаОтражения,
	|	врДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода КАК ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДанныеКОтражению.ДокументОтражения КАК ДокументОтражения,
	|	ЕСТЬNULL(ТаблицаДоговоров.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаДоговоров.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	врДанныеКОтражению.Номенклатура КАК Номенклатура,
	|	врДанныеКОтражению.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(Поставщики.ВариантПоставкиУслуг, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.ПустаяСсылка)) КАК ВариантПоставкиУслуг,
	|	ЕСТЬNULL(Поставщики.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ПоставщикУслуг,
	|	ЕСТЬNULL(Поставщики.ДоговорПоставщикаУслуг, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПоставщикаУслуг,
	|	ВЫБОР
	|		КОГДА врДанныеКОтражению.Услуга В (&СписокУслугКапремонта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакКапРем
	|ПОМЕСТИТЬ врДополненныеДанныеКОтражению
	|ИЗ
	|	врДанныеКОтражению КАК врДанныеКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаДоговоров КАК ТаблицаДоговоров
	|		ПО врДанныеКОтражению.ЛицевойСчет = ТаблицаДоговоров.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщики КАК Поставщики
	|		ПО врДанныеКОтражению.ЛицевойСчет = Поставщики.ЛицевойСчет
	|			И врДанныеКОтражению.ВидУслуги = Поставщики.ВидУслуги";
	
	//Запрос.Выполнить();
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Возврат Запрос;
	
КонецФункции

// Функция выполняет запрос к табличной части "НачисленияКОтражению" документа
// и дополняет его доп. сведениями по лицевым счетам и услугам, которые требуются
// для формирования документов отражения.
//
Функция ПолучитьПараметрыСтрокиНачисленияДляОтражения(Ссылка, Организация, Дата, ТипДокументаОтражения, СтруктураОтбораПоТекущейСтроке, мНастройкиУчетнойПолитикиТСЖ) Экспорт
	
	// Получим настройки учетной политики ЖКХ, они требуются
	// для получения параметров отражения льгот и пени.
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("НомерСтроки, ЛицевойСчет, Контрагент, ДоговорКонтрагента,
										  |СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансамСКонтрагентом,
										  |Услуга, НоменклатурнаяГруппа, Номенклатура,
										  |ВариантПоставкиУслуг, ПоставщикУслуг, ДоговорПоставщикаУслуг,
										  |СчетУчетаДоходов");
	
	Запрос = ВыполнитьЗапросПоНачислениямКОтражениюСДополнительнымиСведениями(Ссылка, Организация, Дата, СтруктураОтбораПоТекущейСтроке, мНастройкиУчетнойПолитикиТСЖ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	врДополненныеДанныеКОтражению.НомерСтроки,
	|	врДополненныеДанныеКОтражению.ЛицевойСчет,
	|	врДополненныеДанныеКОтражению.Здание,
	|	врДополненныеДанныеКОтражению.Услуга,
	|	врДополненныеДанныеКОтражению.РазделУчета,
	|	врДополненныеДанныеКОтражению.ЭтоКорректировка,
	|	врДополненныеДанныеКОтражению.ВидКорректировки,
	|	врДополненныеДанныеКОтражению.ПериодКорректировки,
	|	врДополненныеДанныеКОтражению.СуммаОтражения,
	|	врДополненныеДанныеКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	врДополненныеДанныеКОтражению.ДокументОтражения,
	|	врДополненныеДанныеКОтражению.Контрагент,
	|	врДополненныеДанныеКОтражению.ДоговорКонтрагента,
	|	врДополненныеДанныеКОтражению.Номенклатура,
	|	врДополненныеДанныеКОтражению.НоменклатурнаяГруппа,
	|	врДополненныеДанныеКОтражению.ВариантПоставкиУслуг,
	|	врДополненныеДанныеКОтражению.ПоставщикУслуг,
	|	врДополненныеДанныеКОтражению.ДоговорПоставщикаУслуг,
	|	врДополненныеДанныеКОтражению.ПризнакКапРем
	|ИЗ
	|	врДополненныеДанныеКОтражению КАК врДополненныеДанныеКОтражению";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Если данные получены, то вернем просто выборку,
		// которая содержит в себе поля, вместо структуры с ключами.
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
		// Получаем номенклатурную группу по зданию, если она определена.
		// Если номенклатурная группа не определена для здания, то берем ее из номенклатуры по умолчанию.
		НоменклатурнаяГруппаПоЗданию = ПолучитьНоменклатурнуюГруппуДляОбъектаУчета(Выборка.Здание);
		Если ЗначениеЗаполнено(НоменклатурнаяГруппаПоЗданию) Тогда
			СтруктураПараметров.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппаПоЗданию);
		КонецЕсли;
		
		// Счета учета расчетов с контрагентом лицевого счета.
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация,
																				  Выборка.Контрагент,
																				  Выборка.ДоговорКонтрагента);
		
		// Счета учета доходов.
		СчетаУчетаНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Выборка.Номенклатура);
		
		// Если номенклатура является номенклатурой кап. ремонта и кап. ремонт отражается по заданному счету учета,
		// то в качестве счета расчета установим данный счет.
		Если Выборка.ПризнакКапРем Тогда
			
			СчетаУчета.СчетРасчетовПокупателя  = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
			СчетаУчета.СчетАвансовПокупателя   = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
			
		КонецЕсли;
		
		// Если пени отражаются отдельно, то в качестве счетов расчетов с контрагентом
		// получим счета учета расчетов по пени из настроек учетной политики.
		Если мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета
			 И Выборка.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени Тогда
			
			СтруктураСчетовВзаиморасчета = ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, Выборка.ДоговорКонтрагента.ВидВзаиморасчетов, ?(Выборка.ПризнакКапРем, Истина, Ложь));
			СчетаУчета.СчетРасчетовПокупателя  = СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов;
			СчетаУчета.СчетАвансовПокупателя   = СтруктураСчетовВзаиморасчета.СчетУчетаАвансов;
			СчетаУчетаНоменклатуры.СчетДоходов = СтруктураСчетовВзаиморасчета.СчетУчетаДоходов;
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СчетРасчетовПокупателя", СчетаУчета.СчетРасчетовПокупателя);
		СтруктураПараметров.Вставить("СчетАвансовПокупателя",  СчетаУчета.СчетАвансовПокупателя);
		СтруктураПараметров.Вставить("СчетУчетаДоходов",       СчетаУчетаНоменклатуры.СчетДоходов);
		
		// Счета учета расчетов с поставщиком услуг.
		АгентскаяСхема = (Выборка.ВариантПоставкиУслуг = Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема);
		Если АгентскаяСхема И ТипДокументаОтражения = "Реализация товаров и услуг" Тогда
			
			СчетаУчетаРасчетов = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация,
																							  Выборка.ПоставщикУслуг,
																							  Выборка.ДоговорПоставщикаУслуг);
			
			СтруктураПараметров.Вставить("СчетРасчетовСПоставщиком", СчетаУчетаРасчетов.СчетРасчетовСКомитентом);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ФУНКЦИИ

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведенияНовыйМеханизмОтражения(ДокументСсылка, Отказ)
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВерсияДанных,
	|	Реквизиты.ПометкаУдаления,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Проведен,
	|	Реквизиты.Организация,
	|	Реквизиты.ТипДокументаОтражения,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Ответственный,
	|	Реквизиты.Комментарий,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.КонтрагентКомпенсацииЛьгот,
	|	Реквизиты.ДоговорКонтрагентаКомпенсацииЛьгот,
	|	Реквизиты.СпособЗачетаАвансов
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	ПараметрыПроведения.Вставить("Реквизиты", Запрос.Выполнить().Выгрузить());
	
	// Получим таблицу начислений к отражению.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияКОтражению.Отражать,
	|	НачисленияКОтражению.ЛицевойСчет,
	|	НачисленияКОтражению.Услуга,
	|	НачисленияКОтражению.РазделУчета,
	|	НачисленияКОтражению.ЭтоКорректировка,
	|	НачисленияКОтражению.ВидКорректировки,
	|	НачисленияКОтражению.ПериодКорректировки,
	|	НачисленияКОтражению.ДокументОтраженияКорректируемогоНачисленияПрошлогоПериода,
	|	НачисленияКОтражению.ДокументОтражения,
	|	НачисленияКОтражению.ДокументОтражения.Проведен КАК ДокументОтраженияПроведен,
	|	НачисленияКОтражению.СчетФактура,
	|	НачисленияКОтражению.СуммаОтражения
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете.НачисленияКОтражению КАК НачисленияКОтражению
	|ГДЕ
	|	НачисленияКОтражению.Ссылка = &Ссылка";
	
	ПараметрыПроведения.Вставить("ТаблицаНачислений", Запрос.Выполнить().Выгрузить());
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроведенияНовыйМеханизмОтражения()

// Функция проверяет, есть ли ссылки на созданные документы отражения в месяце отражения.
// Имеет смысл только для нового механизма отражения.
// 
// Возвращаемое значение:
//  НаличиеДокументов - Булево - возвращается Истина, если имеется хотя бы один документ.
//
Функция ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения(Параметры) Экспорт
	
	// Значения параметров отбора по умолчанию.
	Организация       = Справочники.Организации.ПустаяСсылка();
	ДокументОтражения = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПустаяСсылка();
	ГруппаУслуг       = Справочники.УПЖКХ_ГруппыУслуг.ПустаяСсылка();
	ОбъектОтражения   = Неопределено;
	МесяцОтражения    = Дата(1,1,1);
	
	// Если передана структура параметров, то значит, что данные получаем по текущей строке в диалоге.
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		Параметры.Свойство("Организация",       Организация);
		Параметры.Свойство("ДокументОтражения", ДокументОтражения);
		Параметры.Свойство("ГруппаУслуг",       ГруппаУслуг);
		Параметры.Свойство("ОбъектОтражения",   ОбъектОтражения);
		Параметры.Свойство("МесяцОтражения",    МесяцОтражения);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ОтражениеНачисленийВРеглУчете.Ссылка,
	|	КВП_ОтражениеНачисленийВРеглУчете.Номер
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК КВП_ОтражениеНачисленийВРеглУчете
	|ГДЕ
	|	КВП_ОтражениеНачисленийВРеглУчете.Организация = &Организация
	|	И КВП_ОтражениеНачисленийВРеглУчете.ГруппаУслуг = &ГруппаУслуг
	|	И КВП_ОтражениеНачисленийВРеглУчете.ОбъектОтражения = &ОбъектОтражения
	|	И НЕ КВП_ОтражениеНачисленийВРеглУчете.Ссылка = &ТекущийДокументОтражения
	|	И КВП_ОтражениеНачисленийВРеглУчете.Дата МЕЖДУ &НачДата И &КонДата
	|	И КВП_ОтражениеНачисленийВРеглУчете.ИспользуетсяНовыйМеханизмОтраженияНачислений
	|	И КВП_ОтражениеНачисленийВРеглУчете.Проведен";
	
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГруппаУслуг",              ГруппаУслуг);
	Запрос.УстановитьПараметр("ОбъектОтражения",          ОбъектОтражения);
	Запрос.УстановитьПараметр("ТекущийДокументОтражения", ДокументОтражения);
	Запрос.УстановитьПараметр("НачДата",                  НачалоМесяца(МесяцОтражения));
	Запрос.УстановитьПараметр("КонДата",                  КонецМесяца(МесяцОтражения));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПредставлениеГруппы = "<Все услуги>";
		Если Не ГруппаУслуг.Пустая() Тогда
			ПредставлениеГруппы = Строка(ГруппаУслуг);
		КонецЕсли;
		
		ПредставлениеОбъекта = "<Все объекты>";
		Если ЗначениеЗаполнено(ОбъектОтражения) Тогда
			ПредставлениеОбъекта = Строка(ОбъектОтражения);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("По организации """ + Организация + """ уже есть проведенное отражение начислений в регл. учете по группе услуг """ + ПредставлениеГруппы + """" + " и объекту " + ПредставлениеОбъекта +  """ с номером """ + Выборка.Номер + """ за " + Формат(МесяцОтражения, "ДФ='MMMM yyyy'") + ".
														 |В месяце отражения по организации, выбранной группе и объекту можно ввести только один документ ""Отражение начислений в регламентированном учете"".");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьНаличиеДокументаОтраженияПоГруппеВМесяцеОтражения()

// Функция проверяет наличие созданных групп услуг для отражения в регл.учете.
//
Функция ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете() Экспорт
	
	// Проверяем не по наличию созданных элементов групп в справочнике,
	// а по привязке к ним услуг - по данным регистра сведений.
	
	Возврат РегистрыСведений.УПЖКХ_ГруппировкиУслуг.Выбрать(Новый Структура("ВидГруппУслуг", 
																Справочники.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений)).Следующий();
	
КонецФункции // ОбновитьИнформациюОбИспользованииГруппУслугДляОтраженияВРеглУчете()

#КонецОбласти

// Возвращает в структуре значения найденной строки таблицы "мТаблицаСчетовУчетаРасчетовПени"
// по виду взаиморасчетов.
//
// Параметры:
//  ВидВзаиморасчетов - ссылка на элемент справочника "Виды взаиморачетов" - вид взаимороасчетов,
//                      указанный в договоре контрагента.
// Возвращаемые значения:
//  СтруктураСчетовВзаиморасчета - структура.
//
Функция ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ВидВзаиморасчетов, СчетаДляКапРемонта) Экспорт
	
	СтруктураСчетовВзаиморасчета = Новый Структура("СчетУчетаРасчетов,СчетУчетаАвансов,СчетУчетаДоходов, СчетУчетаРасходов,
												    |Субконто1, Субконто2, Субконто3");
	
	ПланыСчетовПустаяСсылка                         = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов  = ПланыСчетовПустаяСсылка;
	СтруктураСчетовВзаиморасчета.СчетУчетаАвансов   = ПланыСчетовПустаяСсылка;
	СтруктураСчетовВзаиморасчета.СчетУчетаДоходов   = ПланыСчетовПустаяСсылка;
	СтруктураСчетовВзаиморасчета.СчетУчетаРасходов  = ПланыСчетовПустаяСсылка;
	
	ПланыВидовХарактеристикПустаяСсылка    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	СтруктураСчетовВзаиморасчета.Субконто1 = ПланыВидовХарактеристикПустаяСсылка;
	СтруктураСчетовВзаиморасчета.Субконто2 = ПланыВидовХарактеристикПустаяСсылка;
	СтруктураСчетовВзаиморасчета.Субконто3 = ПланыВидовХарактеристикПустаяСсылка;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",       Организация);
	СтруктураОтбора.Вставить("ВидВзаиморасчетов", ВидВзаиморасчетов);
	
	мТаблицаСчетовУчетаРасчетовПени = ЗаполнитьТаблицуСчетовУчетаРасчетовПени(Организация, СчетаДляКапРемонта);
	
	Если Не мТаблицаСчетовУчетаРасчетовПени.Количество() = 0 Тогда
		МассивСтрокСчетаУчета = мТаблицаСчетовУчетаРасчетовПени.НайтиСтроки(СтруктураОтбора);
		Если Не МассивСтрокСчетаУчета.Количество() = 0 Тогда
			СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов  = МассивСтрокСчетаУчета[0].СчетУчетаРасчетов;
			СтруктураСчетовВзаиморасчета.СчетУчетаАвансов   = МассивСтрокСчетаУчета[0].СчетУчетаАвансов;
			СтруктураСчетовВзаиморасчета.СчетУчетаДоходов   = МассивСтрокСчетаУчета[0].СчетУчетаДоходов;
			СтруктураСчетовВзаиморасчета.СчетУчетаРасходов  = МассивСтрокСчетаУчета[0].СчетУчетаРасходов;
			СтруктураСчетовВзаиморасчета.Субконто1 = МассивСтрокСчетаУчета[0].Субконто1;
			СтруктураСчетовВзаиморасчета.Субконто2 = МассивСтрокСчетаУчета[0].Субконто2;
			СтруктураСчетовВзаиморасчета.Субконто3 = МассивСтрокСчетаУчета[0].Субконто3;
		Иначе
			СтруктураОтбора.Вставить("ВидВзаиморасчетов", Справочники.ВидыВзаиморасчетов.ПустаяСсылка());
			МассивСтрокСчетаУчета = мТаблицаСчетовУчетаРасчетовПени.НайтиСтроки(СтруктураОтбора);
			Если Не МассивСтрокСчетаУчета.Количество() = 0 Тогда
				СтруктураСчетовВзаиморасчета.СчетУчетаРасчетов  = МассивСтрокСчетаУчета[0].СчетУчетаРасчетов;
				СтруктураСчетовВзаиморасчета.СчетУчетаАвансов   = МассивСтрокСчетаУчета[0].СчетУчетаАвансов;
				СтруктураСчетовВзаиморасчета.СчетУчетаДоходов   = МассивСтрокСчетаУчета[0].СчетУчетаДоходов;
				СтруктураСчетовВзаиморасчета.СчетУчетаРасходов  = МассивСтрокСчетаУчета[0].СчетУчетаРасходов;
				СтруктураСчетовВзаиморасчета.Субконто1 = МассивСтрокСчетаУчета[0].Субконто1;
				СтруктураСчетовВзаиморасчета.Субконто2 = МассивСтрокСчетаУчета[0].Субконто2;
				СтруктураСчетовВзаиморасчета.Субконто3 = МассивСтрокСчетаУчета[0].Субконто3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСчетовВзаиморасчета;
	
КонецФункции // ПолучитьСтруктуруСчетаУчетаРасчетаПоПени()

// Заполняет таблицу счетов из регистра сведений "Счета учета расчетов по пени".
Функция ЗаполнитьТаблицуСчетовУчетаРасчетовПени(Организация, СчетаДляКапРемонта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация КАК Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов КАК ВидВзаиморасчетов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаАвансов КАК СчетУчетаАвансов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.СчетУчетаРасходов КАК СчетУчетаРасходов,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто1 КАК Субконто1,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто2 КАК Субконто2,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация
	|	И УПЖКХ_СчетаУчетаРасчетовПоПени.ЭтоСчетаДляКапРемонта = &СчетДляКапРемонта";
	
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("СчетДляКапРемонта", СчетаДляКапРемонта);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьТаблицуСчетовУчетаРасчетовПени()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Область ПроцедурыИФункцииПечати

// Функция возвращает массив документов в зависимости от механизма отражения.
Функция ПолучитьМассивДокументов(ДокументОтражение, СФ = Ложь) 
	
	Если ДокументОтражение.ИспользуетсяНовыйМеханизмОтраженияНачислений Тогда
		МассивДокументов = ДокументОтражение.НачисленияКОтражению.ВыгрузитьКолонку(?(СФ, "СчетФактура", "ДокументОтражения"));
	Иначе
		МассивДокументов = ДокументОтражение.Контрагенты.ВыгрузитьКолонку(?(СФ, "СчетФактура", "Документ"));
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

// Функция возвращает массив документов.
Функция ПолучитьМассивДокументовРеализацияТоваровИУслуг(ДокументОтражение) Экспорт
	
	МассивДокументов = ПолучитьМассивДокументов(ДокументОтражение);
	
	МассивДляВозврата = Новый Массив;
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Не ТекДокумент.Пустая() Тогда
			МассивДляВозврата.Добавить(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДляВозврата;
	
КонецФункции

// Функция возвращает массив документов.
Функция ПолучитьМассивДокументовАктОбОказанииПроизводственныхУслуг(ДокументОтражение) Экспорт
	
	МассивДокументов = ПолучитьМассивДокументов(ДокументОтражение);
	
	МассивДляВозврата = Новый Массив;
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") И Не ТекДокумент.Пустая() Тогда
			МассивДляВозврата.Добавить(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДляВозврата;
	
КонецФункции

// Функция возвращает массив документов.
Функция ПолучитьМассивДокументовКорректировкаДолга(ДокументОтражение) Экспорт
	
	МассивДокументов = ПолучитьМассивДокументов(ДокументОтражение);
	
	МассивДляВозврата = Новый Массив;
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.КорректировкаДолга") И Не ТекДокумент.Пустая() Тогда
			МассивДляВозврата.Добавить(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДляВозврата;
	
КонецФункции

// Функция возвращает массив документов.
Функция ПолучитьМассивДокументовСчетФактураВыданный(ДокументОтражение) Экспорт
	
	МассивДокументов = ПолучитьМассивДокументов(ДокументОтражение, Истина);
	
	МассивДляВозврата = Новый Массив;
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		Если Не ТекДокумент.Пустая() Тогда
			МассивДляВозврата.Добавить(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДляВозврата;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли