#Область ПроцедурыИФункцииУправленияВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Услуга.Видимость = Не Форма.НеУказыватьУслугу;
	
КонецПроцедуры // УстановитьВидимость()

#КонецОбласти 

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура заполняет поле "Цена" в строке таблицы по значению поля "ТипЦен".
//
// Параметры
//  ТекСтрока - строка табличной части.
//
Процедура ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен(ИДСтроки)
	
	ТекСтрока = Объект.ТаблицаЗатрат.НайтиПоИдентификатору(ИДСтроки);
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокНоменклатуры.Добавить(ТекСтрока.Номенклатура);
	
	ПолучитьЦеныНоменклатуры(СписокНоменклатуры);
	
	Если ТаблицаЦенНоменклатуры.Количество() > 0 Тогда
		ТекСтрока.Цена  = ТаблицаЦенНоменклатуры[0].ЦенаНоменклатуры;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен()

&НаКлиенте
// Процедура обнуляет поле цены и вызывает процедуру пересчета суммы.
Процедура ОбнулитьЦеныНоменклатур(МассивСтрок)
	
	Для Каждого ТекСтрока Из Объект.ТаблицаЗатрат Цикл
		
		// Для строк, которых нет в массиве, обнуляем цену.
		// Если массив пустой, то обнуляем цены для всех строк.
		Если МассивСтрок.Найти(ТекСтрока) = Неопределено Тогда
			ТекСтрока.Цена = 0;
			ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбнулитьЦеныНоменклатур()

&НаКлиенте
// Процедура расчитывает сумму в строке таблицы "Таблица затрат".
Процедура ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока)
	
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	
КонецПроцедуры // ПересчитатьСуммыВТаблицеЗатрат()

&НаСервере
// Процедура заполняет таблицу цен номенклатур.
//
// Параметры
//  СписокНоменклатуры - Список значений - список номенклатур.
//
// Возвращаемое значение:
//   Результат запроса
//
Процедура ПолучитьЦеныНоменклатуры(СписокНоменклатуры)
	
	ТаблицаЦенНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура В (&Номенклатура)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",         Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен",       Объект.ТипЦен);
	
	ТЗЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	Если ТЗЦенНоменклатуры.Количество() > 0 Тогда
		ТаблицаЦенНоменклатуры.Загрузить(ТЗЦенНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЦеныНоменклатуры()

&НаКлиенте
// Процедура перезаполняет типы цен.
//
Процедура ПерезаполнитьТипЦеныЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МассивСтрокСИзмененнымиЦенами = Новый Массив;
		
		Для Каждого Строка Из ТаблицаЦенНоменклатуры Цикл
			
			СтрокиНоменклатуры = Объект.ТаблицаЗатрат.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			Если СтрокиНоменклатуры.Количество() > 0 Тогда
				
				Для Каждого ТекСтрока Из СтрокиНоменклатуры Цикл
					ТекСтрока.Цена = Строка.ЦенаНоменклатуры;
					ПересчитатьСуммыВТаблицеЗатрат(ТекСтрока);
					МассивСтрокСИзмененнымиЦенами.Добавить(ТекСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбнулитьЦеныНоменклатур(МассивСтрокСИзмененнымиЦенами);
		
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьТипЦеныЗавершение()

&НаКлиенте
// Процедура завершает работу обработчика "ПриИзменении" поля "ТипЦен".
//
Процедура ОбнулитьЦеныНоменклатурЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбнулитьЦеныНоменклатур(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры // ОбнулитьЦеныНоменклатурЗавершение()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.НачалоПериода    = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		Объект.ОкончаниеПериода = КонецМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	НеУказыватьУслугу = Объект.Услуга.Пустая();
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеУказыватьУслугу Тогда
		Объект.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	ИначеЕсли Объект.Услуга.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана услуга планирования материалов.", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УказыватьУслугу".
Процедура НеУказыватьУслугуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Объект.НачалоПериода > Объект.ОкончаниеПериода Тогда
		Объект.НачалоПериода = НачалоМесяца(Объект.ОкончаниеПериода);
	Иначе
		Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОкончаниеПериода".
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Если Объект.ОкончаниеПериода < Объект.НачалоПериода Тогда
		Объект.ОкончаниеПериода = КонецМесяца(Объект.НачалоПериода);
	Иначе
		Объект.ОкончаниеПериода = КонецМесяца(Объект.ОкончаниеПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаЗатратНоменклатура".
Процедура ТаблицаЗатратНоменклатураПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаЗатрат.ТекущиеДанные;
	ТекСтрока.ЕдиницаИзмерения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура,
																						"ЕдиницаИзмерения");
	
	Если НЕ Объект.ТипЦен.Пустая() Тогда
		ЗаполнитьСтрокуДаннымиНаОсновеТипаЦен(Элементы.ТаблицаЗатрат.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Количество".
Процедура ТаблицаЗатратКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗатрат.ТекущиеДанные;
	
	ПересчитатьСуммыВТаблицеЗатрат(ТекущиеДанные);
	
КонецПроцедуры // ТаблицаЗатратКоличествоПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Цена".
Процедура ТаблицаЗатратЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗатрат.ТекущиеДанные;
	
	ПересчитатьСуммыВТаблицеЗатрат(ТекущиеДанные);
	
КонецПроцедуры // ТаблицаЗатратЦенаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипЦен".
Процедура ТипЦенПриИзменении(Элемент)
	
	Если НЕ Объект.ТипЦен.Пустая() И Объект.ТаблицаЗатрат.Количество() > 0 Тогда
		
		СписокНоменклатуры = Новый СписокЗначений;
		Для Каждого СтрокаЗатрат Из Объект.ТаблицаЗатрат Цикл
			СписокНоменклатуры.Добавить(СтрокаЗатрат.Номенклатура);
		КонецЦикла;
		
		ПолучитьЦеныНоменклатуры(СписокНоменклатуры);
		
		Если ТаблицаЦенНоменклатуры.Количество() > 0 Тогда
			
			ТекстВопроса = "Перезаполнить цены номенклатур для типа цен """ + Объект.ТипЦен + """?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьТипЦеныЗавершение", ЭтотОбъект), 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Да);
			
		Иначе
			
			ТекстВопроса = "Для выбранных номенклатур не найдены цены для типа цен """ + Объект.ТипЦен + """. Обнулить цены номенклатур?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбнулитьЦеныНоменклатурЗавершение", ЭтотОбъект), 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет, 
					,
					КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипЦен.Пустая() И Объект.ТаблицаЗатрат.Количество() > 0 Тогда
		
		ТекстВопроса = "Тип цен не указан. Обнулить цены номенклатур?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбнулитьЦеныНоменклатурЗавершение", ЭтотОбъект), 
				ТекстВопроса, 
				РежимДиалогаВопрос.ДаНет, 
				,
				КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры // ТипЦенПриИзменении()

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти 
