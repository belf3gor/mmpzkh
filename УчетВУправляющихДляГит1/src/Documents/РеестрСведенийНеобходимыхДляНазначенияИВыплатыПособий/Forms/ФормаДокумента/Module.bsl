#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Объект.РеестрСоставил = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "ФизическоеЛицо");
		
		ПриПолученииДанныхНаСервере("Объект");
		
		Объект.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе;
	КонецЕсли;
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодПричиныНетрудоспособности(Элементы.КодПричиныНетрудоспособности);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодПричиныНетрудоспособности(Элементы.ВторойКодПричиныНетрудоспособности);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораДополнительныйКодПричиныНетрудоспособности(Элементы.ДополнительныйКодПричиныНетрудоспособности);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодНарушенияРежима(Элементы.КодНарушенияРежима);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораГруппаИнвалидности(Элементы.ГруппаИнвалидности);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораИное(Элементы.НовыйСтатусНетрудоспособного);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи(Элементы.ПоУходуРодственнаяСвязь1);
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи(Элементы.ПоУходуРодственнаяСвязь2);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РегламентированнаяОтчетность
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	// Конец РегламентированнаяОтчетность
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// РегламентированнаяОтчетность
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Ссылка);
	// Конец РегламентированнаяОтчетность
	
	СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Неопределено);
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияУстановитьОбъектЗафиксирован();
	ФиксацияОбновитьФиксациюВФорме();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(ДокументОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументБольничныйЛистПослеЗаписи" Тогда
		ОбновитьВторичныеДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	ОбновитьВидимостьСтраницНаОснованииВидаДокумента();
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МедицинскаяОрганизацияПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	МедицинскаяОрганизацияПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеОПрекращенииОтпускаПоУходуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущиеДанные.ПервичныйДокумент));
КонецПроцедуры

&НаКлиенте
Процедура ИзвещениеИзФССИспользованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущиеДанные;
	ОбновитьСтраницуИзвещениеИзФСС(ЭтотОбъект, ТекущаяСтрока);
	
	// ЗарплатаКадрыПодсистемы.ФиксацияИзменений
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ИзвещениеИзФССИспользование", ИдентификаторСтроки);
	// Конец ЗарплатаКадрыПодсистемы.ФиксацияИзменений
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияНеобходимыеДляНазначенияПособий

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтроки(Элемент)
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийЗаявлениеПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Заявление", ИдентификаторСтроки);
	ОбновитьВторичныеДанныеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийПослеУдаления(Элемент)
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда // В этом случае не срабатывает событие "ПриАктивизацииСтроки".
		СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	СведенияНеобходимыеДляНазначенияПособийПриОкончанииРедактированияНаСервере(ИдентификаторСтроки);
	СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийПервичныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаСведений = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущиеДанные;
	Если СтрокаСведений <> Неопределено И СтрокаСведений.КэшФормы <> Неопределено Тогда
		ДанныеВыбора = СтрокаСведений.КэшФормы.СписокВыбораПервичногоДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресМедицинскойОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("АдресМедицинскойОрганизацииЗавершениеВыбора", ЭтотОбъект, ТекущаяСтрока.ПолучитьИдентификатор());
	Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		Вид,
		КонтактнаяИнформацияПоПредставлению(Элемент.ТекстРедактирования, Вид));
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Обработчик = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Обработчик = Новый ОписаниеОповещения("ПроверитьВИнтернетеПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Не ЗначениеЗаполнено(Объект.ВидРеестра) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан вид реестра.'"), , "ВидРеестра", "Объект");
		Возврат;
	КонецЕсли;
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайл(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлДокументаПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда)
	ОтменитьВсеИсправленияНаСервере();
	СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтроки(Элементы.СведенияНеобходимыеДляНазначенияПособий);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеДокумента();
	СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтроки(Элементы.СведенияНеобходимыеДляНазначенияПособий);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайл(Команда)
	Обработчик = Новый ОписаниеОповещения("ПоказатьФайлПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РегламентированнаяОтчетность

// РегламентированнаяОтчетность
&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что реестр уже сдан?'"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
КонецПроцедуры
// Конец РегламентированнаяОтчетность

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// РегламентированнаяОтчетность
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// РегламентированнаяОтчетность
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

#КонецОбласти

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	Если Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("Руководитель") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Руководитель");
	ИначеЕсли Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("ГлавныйБухгалтер") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ГлавныйБухгалтер");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.СведенияНеобходимыеДляНазначенияПособий");
	Возврат Массив
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ВидПособия",	НСтр("ru = 'вида реестра'")));
	Возврат Массив
КонецФункции

#КонецОбласти

#Область МеханизмФиксацииИзменений

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксацииВторичныхДанных) Экспорт
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	ОписаниеЭлементаФормы.ПрефиксПутиТекущиеДанные = "Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущиеДанные";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
	КонецЦикла;
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	Возврат ОписаниеФормы;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		Если ИмяРеквизита = "МедицинскаяОрганизация" Тогда
			Продолжить;
		КонецЕсли;
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		ИначеЕсли Элементы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Ключ, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияОбновитьФиксациюВФорме()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	ОписанияТЧ = Форма["ПараметрыФиксацииВторичныхДанных"]["ОписанияТЧ"];
	Для каждого ОписаниеТЧ Из ОписанияТЧ Цикл
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыФиксТЧ(Форма.Объект[ОписаниеТЧ.Ключ]);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ФиксацияУстановитьОбъектЗафиксирован()
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеДокумента()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
	Документ = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, Документ);
	
	Если Документ.ОбновитьВторичныеДанныеДокумента() Тогда
		Если Не Документ.ЭтоНовый() Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
		КонецЕсли;
		ЗначениеВРеквизитФормы(Документ, "Объект");
		СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Неопределено);
	КонецЕсли;
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	
	СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	ИдентификаторСтроки = Элементы.СведенияНеобходимыеДляНазначенияПособий.ТекущаяСтрока;
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов, ИдентификаторСтроки);
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой

&НаСервере
Процедура МедицинскаяОрганизацияПриИзмененииНаСервере(ИдентификаторСтроки)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "МедицинскаяОрганизация", ИдентификаторСтроки);
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Организация");
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	// РегламентированнаяОтчетность
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

&НаКлиенте
Процедура СведенияНеобходимыеДляНазначенияПособийПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки)
	СтрокаСведений = ?(ИдентификаторСтроки = Неопределено, Неопределено, Объект.СведенияНеобходимыеДляНазначенияПособий.НайтиПоИдентификатору(ИдентификаторСтроки));
	ОбновитьУведомленияОПрекращенииОтпускаПоУходу(ЭтотОбъект, СтрокаСведений);
	ОбновитьПостановкуНаУчетВРанниеСрокиБеременности(СтрокаСведений);
	ОбновитьСтраницуИзвещениеИзФСС(ЭтотОбъект, СтрокаСведений);
	ОтключитьПредупреждения = СтрокаСведений = Неопределено Или Не ЗначениеЗаполнено(СтрокаСведений.Заявление);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьОтображениеПредупрежденийТЧ(
		ЭтотОбъект,
		"СведенияНеобходимыеДляНазначенияПособий",
		ИдентификаторСтроки,
		ОтключитьПредупреждения);
КонецПроцедуры

&НаСервере
Процедура СведенияНеобходимыеДляНазначенияПособийПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	СтрокаСведений = Объект.СведенияНеобходимыеДляНазначенияПособий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаСведений <> Неопределено Тогда
		СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Новый Структура("НомерСтроки", СтрокаСведений.НомерСтроки));
		Если Не ЗначениеЗаполнено(СтрокаСведений.ПервичныйДокумент) И ЗначениеЗаполнено(СтрокаСведений.Заявление) Тогда
			Количество = СтрокаСведений.КэшФормы.СписокВыбораПервичногоДокумента.Количество();
			Если Количество = 1 Тогда
				СтрокаСведений.ПервичныйДокумент = СтрокаСведений.КэшФормы.СписокВыбораПервичногоДокумента[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
		ЭтотОбъект,
		"ПервичныйДокумент",
		ИдентификаторСтроки);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
		ЭтотОбъект,
		"МедицинскаяОрганизация",
		ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьСтраницНаОснованииВидаДокумента()
	
	ЭтоПособияПоНетрудоспособности       = (Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПособияПоНетрудоспособности);
	ЭтоПособияПоУходуЗаРебенком          = (Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЕжемесячныеПособияПоУходуЗаРебенком);
	ЭтоПособияПриРожденииРебенка         = (Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЕдиновременныеПособияПриРожденииРебенка);
	ЭтоПособияВставшимНаУчетВРанниеСроки = (Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПособияВставшимНаУчетВРанниеСроки);
	
	Элементы.СтраницаНетрудоспособностьОсновное.Видимость                       = ЭтоПособияПоНетрудоспособности;
	Элементы.СтраницаНетрудоспособностьОсвобождениеОтРаботы.Видимость           = ЭтоПособияПоНетрудоспособности;
	Элементы.СтраницаНетрудоспособностьОсобыеПричины.Видимость                  = ЭтоПособияПоНетрудоспособности;
	Элементы.СтраницаНетрудоспособностьОплата.Видимость                         = ЭтоПособияПоНетрудоспособности;
	Элементы.СтраницаЕжемесячноеПоУходуЗаРебенком.Видимость                     = ЭтоПособияПоУходуЗаРебенком;
	Элементы.СтраницаЕдиновременноеПриРождении.Видимость                        = ЭтоПособияПриРожденииРебенка;
	Элементы.СтраницаПособияВставшимНаУчетВРанниеСроки.Видимость                = ЭтоПособияВставшимНаУчетВРанниеСроки;
	Элементы.СведенияНеобходимыеДляНазначенияПособийПервичныйДокумент.Видимость = ЭтоПособияПоНетрудоспособности Или ЭтоПособияПоУходуЗаРебенком;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения = Неопределено)
	Если Сообщения = Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю(Ложь);
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация к специфике редактирования данных в форме.
		НачалоСкобки = СтрНайти(Сообщение.Поле, "[");
		Если НачалоСкобки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОкончаниеСкобки = СтрНайти(Сообщение.Поле, "].");
		Если НачалоСкобки > ОкончаниеСкобки Тогда
			Продолжить;
		КонецЕсли;
		ИмяТаблицы   = Лев(Сообщение.Поле, НачалоСкобки - 1);
		ИндексСтроки = Сред(Сообщение.Поле, НачалоСкобки + 1, ОкончаниеСкобки - НачалоСкобки - 1);
		ИмяРеквизита = Сред(Сообщение.Поле, ОкончаниеСкобки + 2);
		Если ИмяТаблицы = "СведенияНеобходимыеДляНазначенияПособий"
			И ИмяРеквизита <> "НомерСтроки"
			И ИмяРеквизита <> "Сотрудник"
			И ИмяРеквизита <> "ПервичныйДокумент"
			И ИмяРеквизита <> "Заявление" Тогда
			СтрокаТаблицы = ДокументОбъект.СведенияНеобходимыеДляНазначенияПособий[Число(ИндексСтроки)];
			Если (ИмяРеквизита = "ПорядокРасчетаСреднегоЗаработка"
				Или ИмяРеквизита = "ДатаНачалаТрудовогоДоговораПолучателя")
				И ЗначениеЗаполнено(СтрокаТаблицы.Заявление) Тогда
				Сообщение.Поле = ИмяРеквизита;
				Сообщение.КлючДанных = СтрокаТаблицы.Заявление;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент)
				И ИмяРеквизита <> "ИзвещениеИзФССИспользование"
				И ИмяРеквизита <> "ИзвещениеИзФССНомер"
				И ИмяРеквизита <> "ИзвещениеИзФССДата" Тогда
				Сообщение.Поле = ИмяРеквизита;
				Сообщение.КлючДанных = СтрокаТаблицы.ПервичныйДокумент;
			Иначе
				Сообщение.Поле = ИмяТаблицы + "[" + ИндексСтроки + "].НомерСтроки";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУведомленияОПрекращенииОтпускаПоУходу(Форма, СтрокаСведений)
	Если СтрокаСведений <> Неопределено
		И ЗначениеЗаполнено(СтрокаСведений.ПервичныйДокумент)
		И ТипЗнч(СтрокаСведений.ПервичныйДокумент) = Тип("ДокументСсылка.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком") Тогда
		Форма.Элементы.УведомлениеОПрекращенииОтпускаПоУходуГруппа.Видимость = Истина;
		Форма.ПредставлениеУведомленияОПрекращенииОтпускаПоУходу = СтрокаСведений.КэшФормы.ПредставлениеУведомления;
		Форма.ПодробностиУведомленияОПрекращенииОтпускаПоУходу   = СтрокаСведений.КэшФормы.ПодробностиУведомления;
	Иначе
		Форма.Элементы.УведомлениеОПрекращенииОтпускаПоУходуГруппа.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтраницуИзвещениеИзФСС(Форма, СтрокаСведений)
	Обязательность = (СтрокаСведений <> Неопределено И СтрокаСведений.ИзвещениеИзФССИспользование);
	Если Обязательность Тогда
		Форма.Элементы.ГруппаСтраницИзвещениеИзФСС.ТекущаяСтраница = Форма.Элементы.СтраницаИзвещениеИзФСС_НомерДата;
	Иначе
		Форма.Элементы.ГруппаСтраницИзвещениеИзФСС.ТекущаяСтраница = Форма.Элементы.СтраницаИзвещениеИзФСС_Пустая;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостановкуНаУчетВРанниеСрокиБеременности(СтрокаСведений)
	Если ЭтоПособияПоНетрудоспособности Тогда
		Элементы.ПоставленаНаУчетВРанниеСрокиБеременности.Видимость =
			СтрокаСведений = Неопределено
			Или СтрокаСведений.ВидПособия = ПредопределенноеЗначение("Перечисление.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(ОтборСтрок)
	ТаблицаЗаявлений = Объект.СведенияНеобходимыеДляНазначенияПособий.Выгрузить(ОтборСтрок, "НомерСтроки, Заявление, ПервичныйДокумент, КэшированноеЗаявление, КэшированныйПервичныйДокумент");
	
	// Удаление записей, которые не требуют обновления кэша.
	ОбратныйИндекс = ТаблицаЗаявлений.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаТаблицы = ТаблицаЗаявлений[ОбратныйИндекс];
		Если СтрокаТаблицы.Заявление = СтрокаТаблицы.КэшированноеЗаявление
			И СтрокаТаблицы.ПервичныйДокумент = СтрокаТаблицы.КэшированныйПервичныйДокумент Тогда
			ТаблицаЗаявлений.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	// Выход из процедуры, если кэш обновлять не требуется.
	Если ТаблицаЗаявлений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение первичных данных, использующихся при кэшировании.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаявлений", ТаблицаЗаявлений);
	Запрос.УстановитьПараметр("СсылкаРеестра", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаРеестра", Объект.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗаявлений.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗаявлений.Заявление КАК Заявление,
	|	ТаблицаЗаявлений.ПервичныйДокумент КАК ПервичныйДокумент
	|ПОМЕСТИТЬ ВТЗаявления
	|ИЗ
	|	&ТаблицаЗаявлений КАК ТаблицаЗаявлений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЗаявленияРеестров.Ссылка) КАК Ссылка,
	|	ВТЗаявления.Заявление КАК Заявление
	|ПОМЕСТИТЬ ВТРанееПринятыеРеестры
	|ИЗ
	|	ВТЗаявления КАК ВТЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ЗаявленияРеестров
	|		ПО ВТЗаявления.Заявление = ЗаявленияРеестров.Заявление
	|			И (ЗаявленияРеестров.Ссылка <> &СсылкаРеестра)
	|			И (ЗаявленияРеестров.Ссылка.Дата <= &ДатаРеестра)
	|			И (ЗаявленияРеестров.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС))
	|			И (ЗаявленияРеестров.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаявления.Заявление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТЗаявления.НомерСтроки КАК НомерСтроки,
	|	ШапкаЗаявления.ВидПособия КАК ВидПособия,
	|	ШапкаЗаявления.ДокументОснование КАК ДокументОснование,
	|	ШапкаЗаявления.Номер КАК Номер,
	|	ШапкаЗаявления.Дата КАК Дата,
	|	ШапкаЗаявления.Перерасчет КАК Перерасчет,
	|	ВЫБОР
	|		КОГДА ВТРанееПринятыеРеестры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПовторнаяОтправка
	|ИЗ
	|	ВТЗаявления КАК ВТЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ШапкаЗаявления
	|		ПО ВТЗаявления.Заявление = ШапкаЗаявления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееПринятыеРеестры КАК ВТРанееПринятыеРеестры
	|		ПО ВТЗаявления.Заявление = ВТРанееПринятыеРеестры.Заявление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаявлений.НомерСтроки КАК НомерСтроки,
	|	ПрекращаемыеЗаявления.Ссылка КАК Уведомление
	|ИЗ
	|	ВТЗаявления КАК ТаблицаЗаявлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ПрекращаемыеЗаявления
	|		ПО ТаблицаЗаявлений.Заявление = ПрекращаемыеЗаявления.Заявление
	|			И (ПрекращаемыеЗаявления.Ссылка.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаявлений.НомерСтроки КАК НомерСтроки,
	|	ШапкаУведомления.Представление КАК Представление,
	|	ШапкаУведомления.Номер КАК Номер,
	|	ШапкаУведомления.Дата КАК Дата,
	|	ШапкаУведомления.ТипПриказа КАК ТипПриказа,
	|	ШапкаУведомления.НомерПриказа КАК НомерПриказа,
	|	ШапкаУведомления.ДатаПриказа КАК ДатаПриказа,
	|	ШапкаУведомления.ДатаПрекращенияОплаты КАК ДатаПрекращенияОплаты
	|ИЗ
	|	ВТЗаявления КАК ТаблицаЗаявлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК ШапкаУведомления
	|		ПО ТаблицаЗаявлений.ПервичныйДокумент = ШапкаУведомления.Ссылка";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВГраница = Результаты.ВГраница();
	ДоступныеЗаявления   = Результаты[ВГраница - 2].Выгрузить();
	ДоступныеУведомления = Результаты[ВГраница - 1].Выгрузить();
	ВыбранныеУведомления = Результаты[ВГраница].Выгрузить();
	
	// Обновление кэша.
	Фильтр = Новый Структура("НомерСтроки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗаявлений Цикл
		Фильтр.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		
		КэшСтроки = Новый Структура("СписокВыбораПервичногоДокумента, ПредставлениеУведомления, ПодробностиУведомления, ПерерасчетИлиПовторнаяОтправка");
		КэшСтроки.СписокВыбораПервичногоДокумента = Новый СписокЗначений;
		КэшСтроки.ПерерасчетИлиПовторнаяОтправка = Ложь;
		ПараметрыШаблона = Новый Структура("Номер, Дата, ПредставлениеТипаПриказа, НомерПриказа, ДатаПриказа, ДатаПрекращенияОплаты, НомерЗаявления, ДатаЗаявления");
		
		СтрокаСведений = Объект.СведенияНеобходимыеДляНазначенияПособий.НайтиСтроки(Фильтр)[0];
		СтрокаСведений.КэшФормы                      = КэшСтроки;
		СтрокаСведений.КэшированноеЗаявление         = СтрокаСведений.Заявление;
		СтрокаСведений.КэшированныйПервичныйДокумент = СтрокаСведений.ПервичныйДокумент;
		
		Найденные = ДоступныеЗаявления.НайтиСтроки(Фильтр);
		Для Каждого ШапкаЗаявления Из Найденные Цикл
			
			КэшСтроки.СписокВыбораПервичногоДокумента.Добавить(ШапкаЗаявления.ДокументОснование);
			КэшСтроки.ПерерасчетИлиПовторнаяОтправка = ШапкаЗаявления.Перерасчет Или ШапкаЗаявления.ПовторнаяОтправка;
			
			ПараметрыШаблона.НомерЗаявления = ШапкаЗаявления.Номер;
			ПараметрыШаблона.ДатаЗаявления  = ШапкаЗаявления.Дата;
			
			СтрокаСведений.ВидПособия       = ШапкаЗаявления.ВидПособия;
			
		КонецЦикла;
		
		Найденные = ДоступныеУведомления.НайтиСтроки(Фильтр);
		Для Каждого ПрекращаемоеЗаявление Из Найденные Цикл
			
			КэшСтроки.СписокВыбораПервичногоДокумента.Добавить(ПрекращаемоеЗаявление.Уведомление);
			
		КонецЦикла;
		
		Найденные = ВыбранныеУведомления.НайтиСтроки(Фильтр);
		Для Каждого ШапкаУведомления Из Найденные Цикл
			
			КэшСтроки.ПредставлениеУведомления = ШапкаУведомления.Представление;
			
			ЗаполнитьЗначенияСвойств(ПараметрыШаблона, ШапкаУведомления, "Номер, Дата, НомерПриказа, ДатаПриказа, ДатаПрекращенияОплаты");
			Если ШапкаУведомления.ТипПриказа = Перечисления.СостоянияСотрудника.Работа Тогда
				ПараметрыШаблона.ПредставлениеТипаПриказа = НСтр("ru = 'приказом о выходе на работу'");
			ИначеЕсли ШапкаУведомления.ТипПриказа = Перечисления.СостоянияСотрудника.Увольнение Тогда
				ПараметрыШаблона.ПредставлениеТипаПриказа = НСтр("ru = 'приказом об увольнении'");
			КонецЕсли;
			
			ШаблонУведомления = НСтр("ru = 'В связи с [ПредставлениеТипаПриказа] [НомерПриказа] от [ДатаПриказа],
				|с [ДатаПрекращенияОплаты] прекратить выплату ежемесячного пособия по уходу за ребенком,
				|производимую ФСС по заявлению сотрудника [НомерЗаявления] от [ДатаЗаявления].'");
			КэшСтроки.ПодробностиУведомления = ПодставитьПараметрыВШаблонСтроки(ШаблонУведомления, ПараметрыШаблона);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВШаблонСтроки(ШаблонСтроки, КлючиИЗначенияПараметров)
	ШаблонПараметра = "[%1]";
	Результат = ШаблонСтроки;
	Для Каждого КлючИЗначение Из КлючиИЗначенияПараметров Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") Тогда
			Значение = Формат(КлючИЗначение.Значение, "ДЛФ=D");
		Иначе
			Значение = КлючИЗначение.Значение;
		КонецЕсли;
		Результат = СтрЗаменить(Результат, СтрШаблон(ШаблонПараметра, КлючИЗначение.Ключ), Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура АдресМедицинскойОрганизацииЗавершениеВыбора(СтруктураАдреса, ИдентификаторСтроки) Экспорт
	Если ТипЗнч(СтруктураАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Объект.СведенияНеобходимыеДляНазначенияПособий.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.АдресМедицинскойОрганизации = СтруктураАдреса.Представление;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СведенияНеобходимыеДляНазначенияПособийАдресМедицинскойОрганизации");
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач Представление, Знач ОжидаемыйВид)
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ОжидаемыйВид);
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокумента

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтотОбъект, ТекущийОбъект);
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ОписаниеЭлементов);
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	ОбновитьВидимостьСтраницНаОснованииВидаДокумента();
	
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	
	СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Неопределено);
	ОбновитьУведомленияОПрекращенииОтпускаПоУходу(ЭтотОбъект, Неопределено);
	ОбновитьСтраницуИзвещениеИзФСС(ЭтотОбъект, Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	Запрос = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗапросРеестраПрямыхВыплатПоПервичнымДокументам(Объект, Неопределено, Неопределено);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Объект.СведенияНеобходимыеДляНазначенияПособий.Загрузить(ТаблицаЗначений);
	СведенияНеобходимыеДляНазначенияПособийОбновитьКэшФормы(Неопределено);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполненияПоРегламентуФСС

&НаКлиенте
Процедура ЗаписатьИПроверитьПоРегламентуФСС(ОбработчикЗавершения, РежимЗаписи)
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеПоРегламентуФСС();
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПроверитьПослеОтветаНаВопрос", ЭтотОбъект, ОбработчикЗавершения);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В документе обнаружены ошибки (%1).
				|Продолжить (не рекомендуется)?'"),
			РезультатПроверки.КоличествоОшибок);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru = 'Предупреждение'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПоРегламентуФСС()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Успех = ДокументОбъект.ПроверитьЗаполнениеПоРегламентуФСС();
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения);
	Возврат Новый Структура("Успех, КоличествоОшибок", Успех, Сообщения.Количество());
КонецФункции

&НаКлиенте
Процедура ПроверитьПослеОтветаНаВопрос(Ответ, ОбработчикЗавершения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСXML

&НаКлиенте
Процедура ПоказатьФайлПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ФайлРеестра = УчетПособийСоциальногоСтрахованияВызовСервера.ФайлРеестраПрямыхВыплат(Объект.Ссылка, УникальныйИдентификатор);
	Если ФайлРеестра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ФайлРеестра.ТекстXML);
	ТекстовыйДокумент.Показать(ФайлРеестра.ИмяФайлаБезРасширения, ФайлРеестра.ИмяФайлаСРасширением);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлДокументаПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ВыгрузитьРеестр(Объект.Ссылка, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
