
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак: новый ли это документ.
Перем мПризнакРассрочкиПоСчетчикам Экспорт;          // Хранит признак: данный вид рассрочки по услуге установки счетчика.
Перем мЛицевыеСчета Экспорт;                         // Хранит список лицевых счетов для отбора в запросах.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.


#Область ПроцедурыИФункцииПроведенияДокумента

// Формирует таблицу со сведениями о предоставленной рассрочке.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о предоставленной рассрочке.
//
Функция СформироватьТаблицуРассрочки()
	
	// Получаем таблицу данных о предоставлении рассрочки в зависимости от вида рассрочки.
	Если мПризнакРассрочкиПоСчетчикам Тогда
		СтрокиРассрочки = НачислениеРассрочкиЗаУстановкуСчетчика.НайтиСтроки(Новый Структура("Рассрочка", Истина));
		Таблица         = НачислениеРассрочкиЗаУстановкуСчетчика.Выгрузить().Скопировать(СтрокиРассрочки);
	Иначе
		СтрокиРассрочки = НачислениеРассрочки.НайтиСтроки(Новый Структура("Рассрочка", Истина));
		Таблица         = НачислениеРассрочки.Выгрузить().Скопировать(СтрокиРассрочки);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции // СформироватьТаблицуРассрочки()

// В регистрах начисления сторнирует начисления, вошедшие в размер платы по услугам,
// по которым предоставлена рассрочка.
//
// Параметры:
//  ТаблицаРассрочки - таблица с услугами, по которым предоставлена рассрочка.
//
Процедура СторнироватьНачисленияВРегистрахНакопления(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ЗаполнятьДоговор)
	
	СписокУслуг = Новый СписокЗначений;
	Если мПризнакРассрочкиПоСчетчикам Тогда
		СписокУслуг.Добавить(Услуга);
	Иначе
		СписокУслуг.ЗагрузитьЗначения(ТаблицаРассрочки.ВыгрузитьКолонку("Услуга"));
	КонецЕсли;
	
	// Движения в регистре "УПЖКХ_Начисления".
	ТаблицаДвиженийНачисления = ПолучитьТаблицуДвиженийНачисления(СписокУслуг);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНачисления Цикл
		Движение = Движения.УПЖКХ_Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения,,"Количество");
		
		Если ЗаполнятьДоговор Тогда
			Движение.Договор = ОсновнойДоговорКонтрагента.Найти(СтрокаДвижения.ЛицевойСчет, "ЛицевойСчет").Договор;
		КонецЕсли;
		
		Движение.СуммаНачисления = - СтрокаДвижения.СуммаНачисленияОборот;
	КонецЦикла;
	
	// Движения в регистре "КВП_ВзаиморасчетыПоЛицевымСчетам".
	ТаблицаДвиженийВзаиморасчеты = ПолучитьТаблицуДвиженийВзаиморасчеты(СписокУслуг);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийВзаиморасчеты Цикл
		Движение = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
		Если ЗаполнятьДоговор Тогда
			Движение.Договор = ОсновнойДоговорКонтрагента.Найти(СтрокаДвижения.ЛицевойСчет, "ЛицевойСчет").Договор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДвижения.СуммаНачисленияПриход) Тогда
			Движение.ВидДвижения     = ВидДвиженияНакопления.Приход;
			Движение.СуммаНачисления = - СтрокаДвижения.СуммаНачисленияПриход;
		Иначе
			Движение.ВидДвижения     = ВидДвиженияНакопления.Расход;
			Движение.СуммаНачисления = - СтрокаДвижения.СуммаНачисленияРасход;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СторнироватьНачисленияВРегистрахНакопления()

// Формирует движения в регистре "Начисления по рассрочке".
//
// Параметры:
//  ТаблицаРассрочки - таблица с услугами, по которым предоставлена рассрочка.
//
Процедура ДвиженияВРегистреНачисленийПоРассрочке(ТаблицаРассрочки, ДатаОперацииПредоставления)
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		Движение = Движения.УПЖКХ_НачисленияПоРассрочке.Добавить();
		Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
		Движение.ВидОперации          = Перечисления.УПЖКХ_Рассрочка.Предоставление;
		Движение.Период               = ДатаОперацииПредоставления;
		Движение.Организация          = Организация;
		Движение.МесяцРассрочки       = КонецМесяца(МесяцНачисления);
		Движение.СуммаНачисления      = СтрокаРассрочки.ТекущийРазмерПлаты;
		Движение.ЗаявлениеНаРассрочку = Ссылка;

		Если мПризнакРассрочкиПоСчетчикам Тогда
			Движение.ЛицевойСчет      = СтрокаРассрочки.ЛицевойСчет;
			Движение.Услуга           = Услуга;
		Иначе
			Движение.ЛицевойСчет      = Объект;
			Движение.Услуга           = СтрокаРассрочки.Услуга;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреНачисленийПоРассрочке()

// Формирует движения в регистре "СведенияОРассрочке".
//
// Параметры:
//  ТаблицаРассрочки - таблица с услугами, по которым предоставлена рассрочка.
//
Процедура ДвиженияВРегистреСведенияОРассрочке(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ДатаОперацииПредоставления, ЗаполнятьДоговор)
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		Движение = Движения.УПЖКХ_СведенияОРассрочке.Добавить();
		Движение.Период                  = ДатаОперацииПредоставления;
		Движение.ГодоваяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка / 100;
		Движение.ВидПлатежей             = ВидПлатежей;
		Движение.ВидРассрочки            = ВидРассрочки;
		Движение.СуммаРассрочки          = СтрокаРассрочки.ТекущийРазмерПлаты;
		Движение.ЗаявлениеНаРассрочку    = Ссылка;
		Движение.СрокРассрочки    = СрокРассрочки;
		
		Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Дифференцированные") Тогда
			Движение.НачислениеВМесяц = СтрокаРассрочки.ТекущийРазмерПлаты / СрокРассрочки;
		Иначе
			Движение.НачислениеВМесяц = 0;
		КонецЕсли;

		Если мПризнакРассрочкиПоСчетчикам Тогда
			Движение.ЛицевойСчет      = СтрокаРассрочки.ЛицевойСчет;
			Движение.Услуга           = Услуга;
			
			Если ЗаполнятьДоговор Тогда
				Движение.Договор = ОсновнойДоговорКонтрагента.Найти(СтрокаРассрочки.ЛицевойСчет, "ЛицевойСчет").Договор;
			КонецЕсли;
			
		Иначе
			Движение.ЛицевойСчет      = Объект;
			Движение.Услуга           = СтрокаРассрочки.Услуга;
			
			Если ЗаполнятьДоговор Тогда
				Движение.Договор = ОсновнойДоговорКонтрагента.Найти(Объект, "ЛицевойСчет").Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреСведенияОРассрочке()

// Формирует таблицу движений для сторнирования из регистра "УПЖКХ_Начисления".
//
// Параметры:
//  СписокУслуг - список услуг, движения по которым необходимо отсторнировать.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица движений.
//
Функция ПолучитьТаблицуДвиженийНачисления(СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Договор,
	|	УПЖКХ_НачисленияОбороты.УслугаОснование,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Количество,
	|	УПЖКХ_НачисленияОбороты.УровеньРаспределения,
	|	УПЖКХ_НачисленияОбороты.ОснованиеКорректировки,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот,
	|	УПЖКХ_НачисленияОбороты.ДнейНачисленоОборот
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И Услуга В (&СписокУслуг)
	|				И (НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка))
	|				И (НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ЛицевыеСчета",  мЛицевыеСчета);
	Запрос.УстановитьПараметр("СписокУслуг",   СписокУслуг);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции //ПолучитьТаблицуДвиженийНачисления()

// Формирует таблицу движений для сторнирования из регистра "КВП_ВзаиморасчетыПоЛицевымСчетам".
//
// Параметры:
//  СписокУслуг - список услуг, движения по которым необходимо отсторнировать.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица движений.
//
Функция ПолучитьТаблицуДвиженийВзаиморасчеты(СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Организация,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Договор,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияРасход
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И Услуга В (&СписокУслуг)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Регистратор ССЫЛКА Документ.КВП_ВводНачальногоСальдо
	|	И НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ЛицевыеСчета",  мЛицевыеСчета);
	Запрос.УстановитьПараметр("СписокУслуг",   СписокУслуг);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПолучитьТаблицуДвиженийВзаиморасчеты()

// В регистрах начисления формирует движения, соответствующие начислению рассрочки за первый
// месяц пользования.
//
// Параметры:
//  ТаблицаРассрочки - таблица с услугами, по которым предоставлена рассрочка.
//
Процедура НачислитьРассрочкуЗаПервыйМесяцПользования(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ДатаОперацииПредоставления, ДатаОперацииНачисления, ЗаполнятьДоговор)
	
	МесячнаяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка / 12 / 100;
	
	Для Каждого СтрокаРассрочки Из ТаблицаРассрочки Цикл
		
		Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Аннуитетные") Тогда
			
			ЗнаменательДроби = Pow(1 + МесячнаяПроцентнаяСтавка, СрокРассрочки) - 1;
			
			ЗнаменательДроби = ?(ЗнаменательДроби = 0, 1, ЗнаменательДроби);
			
			ИтоговыйРазмерПлаты = СтрокаРассрочки.ТекущийРазмерПлаты * (МесячнаяПроцентнаяСтавка + МесячнаяПроцентнаяСтавка / ЗнаменательДроби);
			КомиссияЗаРассрочку = СтрокаРассрочки.ТекущийРазмерПлаты * МесячнаяПроцентнаяСтавка;
			НачисленоРассрочка  = ИтоговыйРазмерПлаты - КомиссияЗаРассрочку;
			
		Иначе
			НачисленоРассрочка  = СтрокаРассрочки.ТекущийРазмерПлаты / СрокРассрочки;
			КомиссияЗаРассрочку = СтрокаРассрочки.ТекущийРазмерПлаты * (ГодоваяПроцентнаяСтавка / 100) / 12;
		КонецЕсли;
		
		Если мПризнакРассрочкиПоСчетчикам Тогда
			ТекущийОсновнойДоговорКонтрагента = ОсновнойДоговорКонтрагента.Найти(СтрокаРассрочки.ЛицевойСчет, "ЛицевойСчет").Договор;
		Иначе
			ТекущийОсновнойДоговорКонтрагента = ОсновнойДоговорКонтрагента.Найти(Объект, "ЛицевойСчет").Договор;
		КонецЕсли;
		
		// В регистре "УПЖКХ_НачисленияПоРассрочке".
		Движение = Движения.УПЖКХ_НачисленияПоРассрочке.Добавить();
		Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
		Движение.ВидОперации          = Перечисления.УПЖКХ_Рассрочка.Начисление;
		// В качестве периода устанавливаем именно месяц начисления, а не дату текущего документа.
		// Если будем устанавливать дату документа, то может возникнуть путаница в остатках.
		Движение.Период               = ДатаОперацииНачисления;
		Движение.Организация          = Организация;
		Движение.МесяцРассрочки       = КонецМесяца(МесяцНачисления);
		Движение.ЗаявлениеНаРассрочку = Ссылка;
		Движение.СуммаНачисления      = НачисленоРассрочка;
		
		Если мПризнакРассрочкиПоСчетчикам Тогда
			Движение.ЛицевойСчет = СтрокаРассрочки.ЛицевойСчет;
			Движение.Услуга      = Услуга;
		Иначе
			Движение.ЛицевойСчет = Объект;
			Движение.Услуга      = СтрокаРассрочки.Услуга;
		КонецЕсли;
		
		// В регистре "УПЖКХ_Начисления".
		ДвижениеРассрочка = Движения.УПЖКХ_Начисления.Добавить();
		ДвижениеРассрочка.Период          = ДатаОперацииПредоставления;
		ДвижениеРассрочка.Организация     = Организация;
		ДвижениеРассрочка.РазделУчета     = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
		ДвижениеРассрочка.ВидНачисления   = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
		ДвижениеРассрочка.МесяцНачисления = КонецМесяца(МесяцНачисления);
		ДвижениеРассрочка.МесяцРассрочки  = КонецМесяца(МесяцНачисления);
		ДвижениеРассрочка.СуммаНачисления = НачисленоРассрочка;
		
		Если ЗаполнятьДоговор Тогда
			ДвижениеРассрочка.Договор     = ТекущийОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		Если мПризнакРассрочкиПоСчетчикам Тогда
			ДвижениеРассрочка.ЛицевойСчет = СтрокаРассрочки.ЛицевойСчет;
			ДвижениеРассрочка.Услуга      = Услуга;
		Иначе
			ДвижениеРассрочка.ЛицевойСчет = Объект;
			ДвижениеРассрочка.Услуга      = СтрокаРассрочки.Услуга;
		КонецЕсли;
		
		Если Не КомиссияЗаРассрочку = 0 Тогда
			ДвижениеКомиссия = Движения.УПЖКХ_Начисления.Добавить();
			ДвижениеКомиссия.Период          = ДатаОперацииПредоставления;
			ДвижениеКомиссия.Организация     = Организация;
			ДвижениеКомиссия.РазделУчета     = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
			ДвижениеКомиссия.ВидНачисления   = Перечисления.УПЖКХ_ВидыНачислений.Комиссия;
			ДвижениеКомиссия.МесяцНачисления = КонецМесяца(МесяцНачисления);
			ДвижениеКомиссия.МесяцРассрочки  = КонецМесяца(МесяцНачисления);
			ДвижениеКомиссия.СуммаНачисления = КомиссияЗаРассрочку;
			
			Если ЗаполнятьДоговор Тогда
				ДвижениеКомиссия.Договор     = ТекущийОсновнойДоговорКонтрагента;
			КонецЕсли;
			
			Если мПризнакРассрочкиПоСчетчикам Тогда
				ДвижениеКомиссия.ЛицевойСчет = СтрокаРассрочки.ЛицевойСчет;
				ДвижениеКомиссия.Услуга      = Услуга;
			Иначе
				ДвижениеКомиссия.ЛицевойСчет = Объект;
				ДвижениеКомиссия.Услуга      = СтрокаРассрочки.Услуга;
			КонецЕсли;
		КонецЕсли;
		
		// В регистре "КВП_ВзаиморасчетыПоЛицевымСчетам".
		ДвижениеРассрочка = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
		ДвижениеРассрочка.ВидДвижения     = ВидДвиженияНакопления.Приход;
		ДвижениеРассрочка.Период          = ДатаОперацииПредоставления;
		ДвижениеРассрочка.Организация     = Организация;
		ДвижениеРассрочка.ВидНачисления   = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
		ДвижениеРассрочка.МесяцНачисления = КонецМесяца(МесяцНачисления);
		ДвижениеРассрочка.МесяцРассрочки  = КонецМесяца(МесяцНачисления);
		ДвижениеРассрочка.СуммаНачисления = НачисленоРассрочка;
		
		Если ЗаполнятьДоговор Тогда
			ДвижениеРассрочка.Договор     = ТекущийОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		Если мПризнакРассрочкиПоСчетчикам Тогда
			ДвижениеРассрочка.ЛицевойСчет = СтрокаРассрочки.ЛицевойСчет;
			ДвижениеРассрочка.Услуга      = Услуга;
		Иначе
			ДвижениеРассрочка.ЛицевойСчет = Объект;
			ДвижениеРассрочка.Услуга      = СтрокаРассрочки.Услуга;
		КонецЕсли;
		
		Если Не КомиссияЗаРассрочку = 0 Тогда
			ДвижениеКомиссия = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
			ДвижениеКомиссия.ВидДвижения     = ВидДвиженияНакопления.Приход;
			ДвижениеКомиссия.Период          = ДатаОперацииПредоставления;
			ДвижениеКомиссия.Организация     = Организация;
			ДвижениеКомиссия.ВидНачисления   = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
			ДвижениеКомиссия.МесяцНачисления = КонецМесяца(МесяцНачисления);
			ДвижениеКомиссия.МесяцРассрочки  = КонецМесяца(МесяцНачисления);
			ДвижениеКомиссия.СуммаНачисления = КомиссияЗаРассрочку;
			
			Если ЗаполнятьДоговор Тогда
				ДвижениеКомиссия.Договор     = ТекущийОсновнойДоговорКонтрагента;
			КонецЕсли;
			
			Если мПризнакРассрочкиПоСчетчикам Тогда
				ДвижениеКомиссия.ЛицевойСчет = СтрокаРассрочки.ЛицевойСчет;
				ДвижениеКомиссия.Услуга      = Услуга;
			Иначе
				ДвижениеКомиссия.ЛицевойСчет = Объект;
				ДвижениеКомиссия.Услуга      = СтрокаРассрочки.Услуга;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // НачислитьРассрочкуЗаПервыйМесяцПользования()

// Получает сведения о договорах контрагентов для указанных лицевых счетов.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений - таблица лицвых счетов и договоров соответствующих контрагентов.
//
Функция ПолучитьСведенияОбОсновномДоговореКонтрагентаЛицевыхСчетов()
	
	ТаблицаЛицевыхСчетов = Новый ТаблицаЗначений;
	ТаблицаЛицевыхСчетов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Для Каждого ТекЛС Из мЛицевыеСчета Цикл
		НоваяСтрока = ТаблицаЛицевыхСчетов.Добавить();
		НоваяСтрока.ЛицевойСчет = ТекЛС.Значение;
	КонецЦикла;
	
	ЗапросОсновнойДоговор = Новый Запрос();
	ЗапросОсновнойДоговор.Текст =
	"ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&втЛицевыеСчета КАК втЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор
	|ПОМЕСТИТЬ втДоговорыЛицевыхСчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	ЕСТЬNULL(втДоговорыЛицевыхСчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоговорыЛицевыхСчетов КАК втДоговорыЛицевыхСчетов
	|		ПО втЛицевыеСчета.ЛицевойСчет = втДоговорыЛицевыхСчетов.ЛицевойСчет";
	
	ЗапросОсновнойДоговор.УстановитьПараметр("Дата",           Дата);
	ЗапросОсновнойДоговор.УстановитьПараметр("втЛицевыеСчета", ТаблицаЛицевыхСчетов);
	ЗапросОсновнойДоговор.УстановитьПараметр("Организация",    Организация);
	
	Результат = ЗапросОсновнойДоговор.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьСведенияОбОсновномДоговореКонтрагентаЛицевыхСчетов()

// Проверяет наличие уже сформированного аналогичного заявления на рассрочку.
//
// Параметры:
//  Отказ        - Булево - флаг отказа в проведении.
//  ТаблицаРассрочки - Таблица значений - данные о предоставляемой рассрочке.
//
Процедура ПроверитьДублированиеЗаявленияНаРассрочку(Отказ, ТаблицаРассрочки)
	
	КоличествоРассрочек = ТаблицаРассрочки.Количество();
	Если НЕ КоличествоРассрочек = 0 Тогда
		
		Если ВидРассрочки = Перечисления.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУслуги Тогда
			МассивЛС = Новый Массив;
			МассивЛС.Добавить(Объект);
			МассивУслуг = ТаблицаРассрочки.ВыгрузитьКолонку("Услуга");
		Иначе
			МассивЛС = ТаблицаРассрочки.ВыгрузитьКолонку("ЛицевойСчет");
			МассивУслуг = Новый Массив;
			МассивУслуг.Добавить(Услуга);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокЛС",        МассивЛС);
		Запрос.УстановитьПараметр("СписокУслуг",     МассивУслуг);
		Запрос.УстановитьПараметр("ВидРассрочки",    ВидРассрочки);
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
		|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОРассрочке.СрезПоследних(
		|			,
		|			ЛицевойСчет В (&СписокЛС)
		|				И Услуга В (&СписокУслуг)
		|				И ВидРассрочки = &ВидРассрочки
		|				И Период = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)) КАК УПЖКХ_СведенияОРассрочкеСрезПоследних";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если НЕ Результат.Количество() = 0 Тогда
			Для Каждого СтрокаРассрочки ИЗ Результат Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("За " + МесяцНачисленияСтрока + " г. по услуге " + СтрокаРассрочки.Услуга + " для " + СтрокаРассрочки.ЛицевойСчет + " уже предоставлялась рассрочка!", Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность перепроведения или отмены проведения документа.
//
Процедура ПроверитьВозможностьУдаленияПроведенияДокумента(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Период КАК Период
	|ПОМЕСТИТЬ втЗаписиЗаявленияНаРассрочку
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|	И УПЖКХ_Начисления.Регистратор = &ЗаявлениеНаРассрочку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга
	|ИЗ
	|	втЗаписиЗаявленияНаРассрочку КАК втЗаписиЗаявленияНаРассрочку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|		ПО втЗаписиЗаявленияНаРассрочку.Организация = УПЖКХ_Начисления.Организация
	|			И втЗаписиЗаявленияНаРассрочку.ЛицевойСчет = УПЖКХ_Начисления.ЛицевойСчет
	|			И втЗаписиЗаявленияНаРассрочку.Услуга = УПЖКХ_Начисления.Услуга
	|ГДЕ
	|	УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|	И УПЖКХ_Начисления.Период > втЗаписиЗаявленияНаРассрочку.Период";
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ЗаявлениеНаРассрочку", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Отказ = РезультатЗапроса.Количество() = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНеНовыйДокумент = НЕ ЭтоНовый();
	
	Если ЭтоНеНовыйДокумент Тогда
		
		ПроверитьВозможностьУдаленияПроведенияДокумента(Отказ);
		
		Если Отказ Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Невозможно изменить документ """ + Строка(ЭтотОбъект) + """, так как по рассрочке уже имеются начисления.", Отказ,,СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	мУдалятьДвижения = ЭтоНеНовыйДокумент;
	
КонецПроцедуры // ПередЗаписью()

// Процедура проведения документа.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	ТаблицаРассрочки = СформироватьТаблицуРассрочки();
	
	// Определяем список лицевых счетов для отбора в запросах.
	мЛицевыеСчета = Новый СписокЗначений;
	мЛицевыеСчета.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета");
	Если мПризнакРассрочкиПоСчетчикам  Тогда
		мЛицевыеСчета.ЗагрузитьЗначения(ТаблицаРассрочки.ВыгрузитьКолонку("ЛицевойСчет"));
	Иначе
		мЛицевыеСчета.Добавить(Объект);
	КонецЕсли;
	
	// Проверим не создавалось ли уже подобных заявлений на рассрочку.
	ПроверитьДублированиеЗаявленияНаРассрочку(Отказ, ТаблицаРассрочки);
	
	Если Отказ Или ТаблицаРассрочки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойДоговорКонтрагента = ПолучитьСведенияОбОсновномДоговореКонтрагентаЛицевыхСчетов();
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// В качестве даты пока берем начало месяца начисления, так как у Донстроя переход на новый механизм уже выполнен и
	// выполнен с начала месяца, а остальные клиенты пока перейти на новый механизм не смогут.
	ЗаполнятьДоговор = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(НачалоМесяца(МесяцНачисления));
	
	СторнироватьНачисленияВРегистрахНакопления(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ЗаполнятьДоговор);
	
	// В текущей реализации при предоставлении рассрочки за предшествующий месяц (месяц начисления) в качестве периода для записей регистров,
	// которые будут сформированы при проведении текущего документа, используется дата именно месяца начисления, а не дата текущего документа.
	// Сделано так, поскольку на данный момент не все механизмы программы ориентированы на значение измерения "МесяцНачисления" регистров,
	// хранящих начисления.
	// В связи с этим, было решено в качестве периода для записей регистров с начислениями (и наши регистры начисления - "Начисления", "Взаиморасчеты 
	// по л/с" - и остаточный регистр с расрочкой) использовать следующие даты:
	// а) Если дата документа принадлежит месяцу начислений, то используется дата документа.
	// б) Если дата документа не принадлежит месяцу начисления (предоставляем рассрочку за прошедший месяц), то:
	//    - в качестве даты предоставления рассрочки используется дата начала месяца начисления
	//    - в качестве даты начисления рассрочки за первый месяц пользования:
	//       в остаточном регистре по рассрочке используется дата конца месяца начисления
	//       в регистрах начисления используется дата начала месяца начисления
	
	ДатаОперацииПредоставления = ?(КонецМесяца(Дата) = КонецМесяца(МесяцНачисления), Дата, НачалоМесяца(МесяцНачисления));
	ДатаОперацииНачисления     = ?(КонецМесяца(Дата) = КонецМесяца(МесяцНачисления), Дата, КонецМесяца(МесяцНачисления));
	
	ДвиженияВРегистреНачисленийПоРассрочке(ТаблицаРассрочки, ДатаОперацииПредоставления);
	ДвиженияВРегистреСведенияОРассрочке(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ДатаОперацииПредоставления, ЗаполнятьДоговор);
	
	НачислитьРассрочкуЗаПервыйМесяцПользования(ТаблицаРассрочки, ОсновнойДоговорКонтрагента, ДатаОперацииПредоставления, ДатаОперацииНачисления, ЗаполнятьДоговор);
	
КонецПроцедуры //ОбработкаПроведения()

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Определение глобальной переменной мПризнакРассрочкиПоСчетчикам.
	Если ВидРассрочки = Перечисления.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУслуги Тогда
		мПризнакРассрочкиПоСчетчикам = Ложь;
	Иначе
		мПризнакРассрочкиПоСчетчикам = Истина;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("Объект");
	ПроверяемыеРеквизиты.Добавить("МесяцНачисления");
	
	Если ЭтоНовый() Тогда
		ПроверяемыеРеквизиты.Добавить("Период");
	КонецЕсли;
	
	Если мПризнакРассрочкиПоСчетчикам Тогда
		ПроверяемыеРеквизиты.Добавить("Услуга");
	КонецЕсли;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтрокиРассрочки = Новый Массив;
		
		Если мПризнакРассрочкиПоСчетчикам Тогда
			Если Услуга = УслугаДобровольногоСтрахования Тогда
				СтрокиРассрочки = НачислениеРассрочкиЗаУстановкуСчетчика.НайтиСтроки(Новый Структура("Рассрочка", Истина));
			КонецЕсли;
			
		Иначе
			СтрокиРассрочки = НачислениеРассрочки.НайтиСтроки(Новый Структура("Услуга, Рассрочка", УслугаДобровольногоСтрахования, Истина));
		КонецЕсли;
		
		Если Не СтрокиРассрочки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга " + УслугаДобровольногоСтрахования + " является услугой добровольного страхования. По ней нельзя предоставлять рассрочку.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли