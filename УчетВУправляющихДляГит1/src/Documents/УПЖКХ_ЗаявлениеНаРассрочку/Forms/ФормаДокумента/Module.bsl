
&НаКлиенте
Перем ПредыдущееЗначениеВидаРассрочки;

&НаКлиенте
Перем НадписьПояснение;

&НаКлиенте
Перем НадписьПояснениеЗаУстановкуСчетчика;

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		НастройкиУчетнойПолитикиТСЖОтказ = Ложь;
		НастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(),
																											Объект.Организация,
																											НастройкиУчетнойПолитикиТСЖОтказ);
		
		Если НастройкиУчетнойПолитикиТСЖОтказ = Ложь Тогда
			Объект.ГодоваяПроцентнаяСтавка = НастройкиУчетнойПолитикиТСЖ.ГодоваяПроцентнаяСтавкаРассрочка;
		Иначе
			Объект.ГодоваяПроцентнаяСтавка = 10;
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	УстановитьОформлениеСтрокТабличнойЧасти();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Объект.МесяцНачисления = НачалоМесяца(Объект.Дата);
		
		Объект.МесяцНачисленияСтрока = Формат(Объект.МесяцНачисления, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
	// Устанавливаем видимость элементов в соответствии с видом рассрочки.
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "ГодоваяПроцентнаяСтавка".
Процедура ГодоваяПроцентнаяСтавкаПриИзменении(Элемент)
	
	ОбновитьТаблицуРасшифровкаРассрочки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "МесяцНачисленияСтрока".
//
Процедура МесяцНачисленияСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.МесяцНачисления = ДобавитьМесяц(Объект.МесяцНачисления, Направление);
	Объект.МесяцНачисленияСтрока = Формат(Объект.МесяцНачисления, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // МесяцНачисленияСтрокаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "МесяцНачисленияСтрока".
//
Процедура МесяцНачисленияСтрокаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПодобратьДатуПоТексту(Объект.МесяцНачисленияСтрока,
																		 Объект.МесяцНачисления);
	МесяцНачисленияСтрока = Формат(Объект.МесяцНачисления, "ДФ='MMMM yyyy'");

КонецПроцедуры // МесяцНачисленияСтрокаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "МесяцНачисленияСтрока".
//
Процедура МесяцНачисленияСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "МесяцНачисленияСтрока".
//
Процедура МесяцНачисленияСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "МесяцНачисленияСтрока".
//
Процедура МесяцНачисленияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииНачалоВыбора(ЭтаФорма, "Объект.МесяцНачисления", "Объект.МесяцНачисленияСтрока", 
													   Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцНачисленияСтрокаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля формы "НачислениеРассрочкиРассрочка".
//
Процедура НачислениеРассрочкиРассрочкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НачислениеРассрочки.ТекущиеДанные;
	
	ПредыдущийМесяцСтрока = Формат(ДобавитьМесяц(Объект.МесяцНачисления, -12), "ДФ='MMMM yyyy'");
	
	Если ТекущаяСтрока.Рассрочка Тогда
		Если ТекущаяСтрока.ТекущийРазмерПлаты = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нельзя предоставлять рассрочку на нулевой размер платы!");
			ТекущаяСтрока.Рассрочка = Ложь;
			Возврат;
		КонецЕсли;
		ДопПараметры = Новый Структура("ТекущаяСтрока", ТекущаяСтрока);
		Если Не ТекущаяСтрока.ЕстьИнформацияОПредыдущихНачислениях Тогда
			ТекстВопроса = "Сведений о размере платы за " + ПредыдущийМесяцСтрока + " г. нет.
							|Тем не менее, предоставить рассрочку?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаНачислениеРассрочкиРассрочкаПриИзменении", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		ИначеЕсли Не ТекущаяСтрока.МожноПредоставитьРассрочку Тогда
			
			ТекстВопроса = "Размер платы увеличился менее, чем на 25%.
							|Тем не менее, предоставить рассрочку?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаНачислениеРассрочкиРассрочкаПриИзменении", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НачислениеРассрочкиРассрочкаПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "НачислениеРассрочкиРассрочкаПриИзменении()".
Процедура ОбработатьРезультатВопросаНачислениеРассрочкиРассрочкаПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока.Рассрочка = Ложь;
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаНачислениеРассрочкиРассрочкаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля формы "НачислениеРассрочкиУслуга".
//
Процедура НачислениеРассрочкиУслугаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НачислениеРассрочки.ТекущиеДанные;
	
	СтрокиТекущейУслуги = Объект.НачислениеРассрочки.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Услуга));
	Если СтрокиТекущейУслуги.Количество() > 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Информация по данной услуге уже имеется в таблице!");
		ТекущаяСтрока.Услуга = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтрокуТаблицыНачислениеРассрочки(ТекущаяСтрока.НомерСтроки - 1);
	
КонецПроцедуры // НачислениеРассрочкиУслугаПриИзменении()

&НаКлиенте
// Заполняет таблицу "РасшифровкаРассрочки" данными по услуге, выбранной в таблице "НачислениеРассрочки".
//
Процедура НачислениеРассрочкиПриАктивизацииСтроки(Элемент)
	
	ОбновитьТаблицуРасшифровкаРассрочки();
	
КонецПроцедуры // НачислениеРассрочкиПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "ВидПлатежей".
//
Процедура ВидПлатежейПриИзменении(Элемент)
	
	ОбновитьТаблицуРасшифровкаРассрочки();
	
КонецПроцедуры // ВидПлатежейПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "Услуга".
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбораУслуги = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.Услуга), Элемент);
		
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбораУслуги.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина, 
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ФормаВыбораУслуги.ВладелецФормы = ЭтаФорма;
		ФормаВыбораУслуги.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма);
		ФормаВыбораУслуги.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "Услуга".
Процедура УслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Объект.Услуга = УслугаДобровольногоСтрахования Тогда
		Объект.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя предоставлять рассрочку.");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ "ВИД РАССРОЧКИ"

&НаКлиенте
// Процедура обработчик событя "НачалоВыбора" поля формы "ВидРассрочки".
//
Процедура ВидРассрочкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Запоминаем предыдущее значение вида рассрочки.
	ПредыдущееЗначениеВидаРассрочки = Объект.ВидРассрочки;
	
КонецПроцедуры // ВидРассрочкиНачалоВыбора()

&НаКлиенте
// Процедура обработчик событя "ОбработкаВыбора" поля формы "ВидРассрочки".
//
Процедура ВидРассрочкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если изменился вид рассрочки, то выполняем следующие манипуляции.
	Если Не ВыбранноеЗначение = ПредыдущееЗначениеВидаРассрочки Тогда
		
		// Проверяем заполненность формы.
		Если ЗначениеЗаполнено(Объект.Объект) 
			Или Объект.НачислениеРассрочки.Количество() > 0
			Или Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Количество() > 0 Тогда
			
			ТекстВопроса       = "При изменении вида рассрочки текущий объект и таблицы рассрочки будут очищены. Продолжить?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ВидРассрочкиОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		Иначе 
			
			ВидРассрочкиОбработкаВыбораПродолжение(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВидРассрочкиОбработкаВыбора()

&НаКлиенте
// Завершение вопроса процедуры обработчик событя "ОбработкаВыбора" поля формы "ВидРассрочки".
//
Процедура ВидРассрочкиОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВидРассрочкиОбработкаВыбораПродолжение(ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВидРассрочкиОбработкаВыбора()

&НаКлиенте
// Продолжение общей ветки процедуры обработчик событя "ОбработкаВыбора" поля формы "ВидРассрочки".
//
Процедура ВидРассрочкиОбработкаВыбораПродолжение(ВыбранноеЗначение)
	
	// Очищаем таблицу расшифровки.
	Объект.РасшифровкаРассрочки.Очистить();
	
	Объект.ВидРассрочки = ВыбранноеЗначение;
	
	// Изменяем видимость объектов.
	УправлениеФормой();
	
	// Очищаем табличные части и поле "Объект".
	// Процедура УправлениеФормой() срабатывает так же при открытии формы, 
	// поэтому очистку несоответствующих виду рассрочки таблиц проводим только здесь.
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУстановкуСчетчика") Тогда
		Объект.НачислениеРассрочки.Очистить();
		Объект.Объект = Неопределено;
	Иначе 
		Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Очистить();
		Объект.Объект = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // ВидРассрочкиОбработкаВыбораПродолжение()

///////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НАЧИСЛЕНИЕ РАССРОЧКИ ЗА УСТАНОВКУ СЧЕТЧИКА"

&НаКлиенте
// Заполняет таблицу "РасшифровкаРассрочки" данными по услуге, выбранной в таблице "НачислениеРассрочки".
//
Процедура НачислениеРассрочкиЗаУстановкуСчетчикаПриАктивизацииСтроки(Элемент)
	
	ОбновитьТаблицуРасшифровкаРассрочки();
	
КонецПроцедуры // НачислениеРассрочкиПриАктивизацииСтроки()

&НаКлиенте
// Процедура обработчик событя "ПриИзменении" поля формы "НачислениеРассрочкиЗаУстановкуСчетчика".
//
Процедура НачислениеРассрочкиЗаУстановкуСчетчикаРассрочкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НачислениеРассрочкиЗаУстановкуСчетчика.ТекущиеДанные;
	
	Если ТекущаяСтрока.Рассрочка Тогда
		Если ТекущаяСтрока.ТекущийРазмерПлаты = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нельзя предоставлять рассрочку на нулевой размер платы!");
			ТекущаяСтрока.Рассрочка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НачислениеРассрочкиЗаУстановкуСчетчикаРассрочкаПриИзменении()

&НаКлиенте
Процедура НачислениеРассрочкиПредыдущийРазмерПлатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НачислениеРассрочки.ТекущиеДанные;
	
	Если ТекущаяСтрока.ПредыдущийРазмерПлаты <> 0 Тогда
		ТекущаяСтрока.ПроцентПревышения = ТекущаяСтрока.ТекущийРазмерПлаты / ТекущаяСтрока.ПредыдущийРазмерПлаты * 100;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура вызывается по нажатию на кнопку "Заполнить" таблицы формы "НачислениеРассрочки".
//
Процедура ЗаполнитьТаблицуРассрочки(Команда)
	
	Если Объект.НачислениеРассрочки.Количество() > 0 Тогда
		ТекстВопроса       = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьТаблицуРассрочкиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	ЗаполнитьТаблицуРассрочкиПродолжение();
	
КонецПроцедуры // ЗаполнитьТаблицуРассрочки()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ЗаполнитьТаблицуРассрочки()".
Процедура ЗаполнитьТаблицуРассрочкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.НачислениеРассрочки.Очистить();
	
	ЗаполнитьТаблицуРассрочкиПродолжение();

КонецПроцедуры // ЗаполнитьТаблицуРассрочкиЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ЗаполнитьТаблицуРассрочки()".
Процедура ЗаполнитьТаблицуРассрочкиПродолжение()
	
	Если Объект.Дата = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("За заполнена дата документа!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран объект начисления!");
		Возврат;
	КонецЕсли;
	
	Если Объект.МесяцНачисления = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан месяц начисления!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуНачислениеРассрочки();
	
	Если Объект.НачислениеРассрочки.Количество() > 0 Тогда
		Элементы.НачислениеРассрочки.ТекущаяСтрока = Объект.НачислениеРассрочки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьТаблицуРасшифровкаРассрочки();

КонецПроцедуры // ЗаполнитьТаблицуРассрочкиПродолжение()

&НаСервере
// Заполняет таблицу "НачислениеРассрочки" сведениями о начислениях.
//
Процедура ЗаполнитьТаблицуНачислениеРассрочки()
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Объект.Услуга) Тогда
		ДопУсловие =
		"
		|					И Услуга = &Услуга";
		Запрос.УстановитьПараметр("Услуга", Объект.Услуга);
		
	ИначеЕсли ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ДопУсловие =
		"
		|					И НЕ Услуга = &УслугаДобровольногоСтрахования";
		Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования", УслугаДобровольногоСтрахования);
		
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса(ДопУсловие);
	
	УстановитьПараметрыДляЗапроса(Запрос);
	
	ТаблицаСведенийОРассрочке = Запрос.Выполнить().Выгрузить();
	
	НеобходимоПроверитьИзменениеБазРасчета = УстановитьНеобходимостьПроверкиИзмененияБазРасчета(ТаблицаСведенийОРассрочке);
	
	Если НеобходимоПроверитьИзменениеБазРасчета Тогда
		Помещение = Объект.Объект.Адрес;
		ТаблицаСведенийПоЛС = ПолучитьТаблицуСведенийПоЛС(Объект.Объект, Помещение, КонецМесяца(Объект.МесяцНачисления));
	КонецЕсли;
	
	Для Каждого СтрокаСведенийОРассрочке Из ТаблицаСведенийОРассрочке Цикл
		
		Если НеобходимоПроверитьИзменениеБазРасчета Тогда
			ПроверитьИзменениеБазРасчета(СтрокаСведенийОРассрочке, ТаблицаСведенийПоЛС);
		КонецЕсли;
		
		НоваяСтрокаРассрочки = Объект.НачислениеРассрочки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРассрочки, СтрокаСведенийОРассрочке);
		
		Если НоваяСтрокаРассрочки.МожноПредоставитьРассрочку Тогда
			НоваяСтрокаРассрочки.Рассрочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуНачислениеРассрочки()

&НаСервереБезКонтекста
// Формирует текст запроса поиска сведений о начислениях.
//
// Параметры:
//  ДопУсловие - дополнительное условие на измерение "Услуга".
//
// Возвращаемое значение:
//  Текст - текст запроса.
//
Функция ПолучитьТекстЗапроса(ДопУсловие)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК РазмерПлаты,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК СпособРасчета,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидПлощади КАК ВидПлощади,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидыЖильцов КАК ВидЖильцов
	|ПОМЕСТИТЬ втТекущиеНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоТекПериода,
	|			&КонецТекПериода,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И (НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|				И (НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))" + ДопУсловие + ")
	|		КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК РазмерПлаты
	|ПОМЕСТИТЬ втПредыдущиеНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПредПериода,
	|			&КонецПредПериода,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И (НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|				И (НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))" + ДопУсловие + ") 
	|		КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущиеНачисления.Услуга,
	|	втТекущиеНачисления.СпособРасчета,
	|	втТекущиеНачисления.ВидПлощади,
	|	втТекущиеНачисления.ВидЖильцов,
	|	втТекущиеНачисления.РазмерПлаты КАК ТекущийРазмерПлаты,
	|	ЕСТЬNULL(втПредыдущиеНачисления.РазмерПлаты, 0) КАК ПредыдущийРазмерПлаты,
	|	ВЫБОР
	|		КОГДА НЕ втПредыдущиеНачисления.РазмерПлаты = 0
	|				И втТекущиеНачисления.РазмерПлаты / втПредыдущиеНачисления.РазмерПлаты > 1.25
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МожноПредоставитьРассрочку,
	|	ВЫБОР
	|		КОГДА втПредыдущиеНачисления.РазмерПлаты ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИнформацияОПредыдущихНачислениях,
	|	ВЫБОР
	|		КОГДА втПредыдущиеНачисления.РазмерПлаты > 0
	|			ТОГДА (втТекущиеНачисления.РазмерПлаты / втПредыдущиеНачисления.РазмерПлаты - 1) * 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентПревышения
	|	
	|ИЗ
	|	втТекущиеНачисления КАК втТекущиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредыдущиеНачисления КАК втПредыдущиеНачисления
	|		ПО втТекущиеНачисления.Услуга = втПредыдущиеНачисления.Услуга";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

&НаСервере
// Устанавливает параметры для запроса поиска сведений о начислениях.
//
// Параметры:
//  Запрос - запрос поиска сведений о начислениях.
//
Процедура УстановитьПараметрыДляЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("НачалоТекПериода",  НачалоМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("КонецТекПериода",   КонецМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("НачалоПредПериода", ДобавитьМесяц(НачалоМесяца(Объект.МесяцНачисления), -12));
	Запрос.УстановитьПараметр("КонецПредПериода",  ДобавитьМесяц(КонецМесяца(Объект.МесяцНачисления), -12));
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",       Объект.Объект);
	
КонецПроцедуры // УстановитьПараметрыДляЗапроса()

&НаСервере
// Заполняет строку таблицы "НачислениеРассрочки" данными о начислениях по выбранной услуге.
//
// Параметры:
//  СтрокаТаблицы - строка таблицы "НачислениеРассрочки".
//
Процедура ЗаполнитьСтрокуТаблицыНачислениеРассрочки(ИндексСтроки)
		
	СтрокаТаблицы = Объект.НачислениеРассрочки.Получить(ИндексСтроки);
	
	СтрокаТаблицы.ТекущийРазмерПлаты            = 0;
	СтрокаТаблицы.ПредыдущийРазмерПлаты         = 0;
	СтрокаТаблицы.ЕстьИнформацияОПредыдущихНачислениях = Ложь;
	СтрокаТаблицы.МожноПредоставитьРассрочку    = Ложь;
	СтрокаТаблицы.Рассрочка                     = Ложь;
	
	
	Запрос = Новый Запрос;
	ДопУсловие =
	"
	|					И Услуга = &Услуга";
	Запрос.УстановитьПараметр("Услуга", СтрокаТаблицы.Услуга);
	
	Запрос.Текст = ПолучитьТекстЗапроса(ДопУсловие);
	
	УстановитьПараметрыДляЗапроса(Запрос);
	
	ТаблицаСведенийОРассрочкеПоУслуге = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаСведенийОРассрочкеПоУслуге.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТаблицаСведенийОРассрочкеПоУслуге.Получить(0));
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтрокуТаблицыНачислениеРассрочки()

&НаКлиенте
// Заполняет таблицу "РасшифровкаРассрочки" данными текущей строки таблицы "НачислениеРассрочки".
//
Процедура ОбновитьТаблицуРасшифровкаРассрочки()
	
	Объект.РасшифровкаРассрочки.Очистить();
	
	Если Объект.ВидРассрочки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУслуги") Тогда
		
		Если Объект.НачислениеРассрочки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.НачислениеРассрочки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			Если Объект.НачислениеРассрочки.Количество() > 0 Тогда
				ТекущаяСтрока = Объект.НачислениеРассрочки[0];
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоМесяцевРассрочки = 12;
		
		ПризнакРасскрочкаЗаУстановкуСчетчика = Ложь;
		
	Иначе
		
		Если Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока  = Элементы.НачислениеРассрочкиЗаУстановкуСчетчика.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Получить(0);
			
			Если ТекущаяСтрока = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоМесяцевРассрочки = 60;
		
		ПризнакРасскрочкаЗаУстановкуСчетчика = Истина;
		
	КонецЕсли;
	
	ТекущийРазмерПлаты = ТекущаяСтрока.ТекущийРазмерПлаты;
	
	МесячнаяПроцентнаяСтавка = Объект.ГодоваяПроцентнаяСтавка / 12 / 100;
	ОстатокСуммы             = ТекущийРазмерПлаты;
	
	Если Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Дифференцированные") Тогда
	
		СуммаРассрочки = ТекущийРазмерПлаты / КоличествоМесяцевРассрочки;

		Для Счетчик = 0 По КоличествоМесяцевРассрочки - 1 Цикл
			
			НоваяСтрокаРасшифровки                 = Объект.РасшифровкаРассрочки.Добавить();
			НоваяСтрокаРасшифровки.Услуга          = ?(ПризнакРасскрочкаЗаУстановкуСчетчика, Объект.Услуга, ТекущаяСтрока.Услуга);
			НоваяСтрокаРасшифровки.МесяцНачисления = Формат(ДобавитьМесяц(Объект.МесяцНачисления, Счетчик), "ДФ='MMMM yyyy'");
			
			Если Счетчик = КоличествоМесяцевРассрочки - 1 Тогда
				ОстатокСуммы = ТекущийРазмерПлаты - Объект.РасшифровкаРассрочки.Итог("СуммаРассрочки");
				НоваяСтрокаРасшифровки.СуммаРассрочки = ОстатокСуммы;
			Иначе
				НоваяСтрокаРасшифровки.СуммаРассрочки = СуммаРассрочки;
			КонецЕсли;
			
			НоваяСтрокаРасшифровки.КомиссияЗаРассрочку = ОстатокСуммы * МесячнаяПроцентнаяСтавка;
			НоваяСтрокаРасшифровки.ИтоговыйРазмерПлаты = НоваяСтрокаРасшифровки.СуммаРассрочки + НоваяСтрокаРасшифровки.КомиссияЗаРассрочку;
			
			ОстатокСуммы = ОстатокСуммы - СуммаРассрочки;
			
		КонецЦикла;
		
	Иначе
		
		Для Счетчик = 0 По КоличествоМесяцевРассрочки - 1 Цикл
			
			ЗнаменательДроби = Pow(1 + МесячнаяПроцентнаяСтавка, КоличествоМесяцевРассрочки) - 1;
			ЗнаменательДроби = ?(ЗнаменательДроби = 0, 1, ЗнаменательДроби);
			
			ИтоговыйРазмерПлаты = ТекущийРазмерПлаты * (МесячнаяПроцентнаяСтавка + МесячнаяПроцентнаяСтавка / ЗнаменательДроби);
			КомиссияЗаРассрочку = ОстатокСуммы * МесячнаяПроцентнаяСтавка;
			СуммаРассрочки      = ИтоговыйРазмерПлаты - КомиссияЗаРассрочку;
			
			НоваяСтрокаРасшифровки                 = Объект.РасшифровкаРассрочки.Добавить();
			НоваяСтрокаРасшифровки.Услуга          = ?(ПризнакРасскрочкаЗаУстановкуСчетчика, Объект.Услуга, ТекущаяСтрока.Услуга);
			НоваяСтрокаРасшифровки.МесяцНачисления = Формат(ДобавитьМесяц(Объект.МесяцНачисления, Счетчик), "ДФ='MMMM yyyy'");
			
			Если Счетчик = КоличествоМесяцевРассрочки - 1 Тогда
				ОстатокСуммы = ТекущийРазмерПлаты - Объект.РасшифровкаРассрочки.Итог("СуммаРассрочки");
				НоваяСтрокаРасшифровки.СуммаРассрочки = ОстатокСуммы;
			Иначе
				НоваяСтрокаРасшифровки.СуммаРассрочки = СуммаРассрочки;
			КонецЕсли;
			
			НоваяСтрокаРасшифровки.КомиссияЗаРассрочку = КомиссияЗаРассрочку;
			НоваяСтрокаРасшифровки.ИтоговыйРазмерПлаты = НоваяСтрокаРасшифровки.СуммаРассрочки + КомиссияЗаРассрочку;
			
			ОстатокСуммы = ОстатокСуммы - СуммаРассрочки;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Элементы.РасшифровкаРассрочкиМесяцНачисления.ТекстПодвала     = "ИТОГО:";
	Элементы.РасшифровкаРассрочкиСуммаРассрочки.ТекстПодвала      = Объект.РасшифровкаРассрочки.Итог("СуммаРассрочки");
	Элементы.РасшифровкаРассрочкиКомиссияЗаРассрочку.ТекстПодвала = Объект.РасшифровкаРассрочки.Итог("КомиссияЗаРассрочку");
	Элементы.РасшифровкаРассрочкиИтоговыйРазмерПлаты.ТекстПодвала = Объект.РасшифровкаРассрочки.Итог("ИтоговыйРазмерПлаты");
	
КонецПроцедуры // ОбновитьТаблицуРасшифровкаРассрочки()

&НаСервере
// Устанавливает оформление строк таблицы "НачислениеРассрочки".
//
Процедура УстановитьОформлениеСтрокТабличнойЧасти()
	
	Если УсловноеОформление.Элементы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НейтральноЗеленый);
	
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НачислениеРассрочки.МожноПредоставитьРассрочку");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиУслуга");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиНомерСтроки");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиТекущийРазмерПлаты");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиПредыдущийРазмерПлаты");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиРассрочка");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачислениеРассрочкиПроцентПревышения");
	
КонецПроцедуры // УстановитьОформлениеСтрокТабличнойЧасти()

&НаСервереБезКонтекста
// Анализирует таблицу со сведениями о рассрочке на наличие услуг со способами расчета "По количеству жильцов"
// и "По площади".
//
// Параметры:
//  ТаблицаСведенийОРассрочке - таблица со сведениями о рассрочке.
//
// Возвращаемое значение:
//  Булево - признак наличия услуг.
//
Функция УстановитьНеобходимостьПроверкиИзмененияБазРасчета(ТаблицаСведенийОРассрочке)
	
	Для Каждого СтрокаРассрочки Из ТаблицаСведенийОРассрочке Цикл
		Если СтрокаРассрочки.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов
		 Или СтрокаРассрочки.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // УстановитьНеобходимостьПроверкиИзмененияБазРасчета()

&НаСервереБезКонтекста
// Анализирует измение базы расчета (площади или количества жильцов) по текущей услуге.
// В случае, если имело место изменение, пересчитывает итоговые показатели.
//
// Параметры:
//  СтрокаСведенийОРассрочке - строка со сведениями о рассрочке по текущей услуге.
//  ТаблицаСведенийПоЛС - таблица с базами для расчета по текущему л/с.
//
Процедура ПроверитьИзменениеБазРасчета(СтрокаРассрочки, ТаблицаСведенийПоЛС)
	
	Если ТаблицаСведенийПоЛС.Количество() = 0 Или СтрокаРассрочки.ПредыдущийРазмерПлаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСведенийПоЛС = ТаблицаСведенийПоЛС.Получить(0);
	
	Если СтрокаРассрочки.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
		
		Если СтрокаРассрочки.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь Тогда
			
			Если Не СтрокаСведенийПоЛС.ОбщаяПлощадь = СтрокаСведенийПоЛС.ОбщаяПлощадьПред Тогда
				ТекущийРазмерПлаты = (СтрокаРассрочки.ТекущийРазмерПлаты / СтрокаСведенийПоЛС.ОбщаяПлощадь) * СтрокаСведенийПоЛС.ОбщаяПлощадьПред;
				
				СтрокаРассрочки.ПроцентПревышения          = (ТекущийРазмерПлаты / СтрокаРассрочки.ПредыдущийРазмерПлаты - 1) * 100;
				СтрокаРассрочки.МожноПредоставитьРассрочку = ?(СтрокаРассрочки.ПроцентПревышения > 25, Истина, Ложь);
			КонецЕсли;
			
		ИначеЕсли СтрокаРассрочки.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь Тогда
			
			Если Не СтрокаСведенийПоЛС.ЖилаяПлощадь = СтрокаСведенийПоЛС.ЖилаяПлощадьПред Тогда
				ТекущийРазмерПлаты = (СтрокаРассрочки.ТекущийРазмерПлаты / СтрокаСведенийПоЛС.ЖилаяПлощадь) * СтрокаСведенийПоЛС.ЖилаяПлощадьПред;
				
				СтрокаРассрочки.ПроцентПревышения          = (ТекущийРазмерПлаты / СтрокаРассрочки.ПредыдущийРазмерПлаты - 1) * 100;
				СтрокаРассрочки.МожноПредоставитьРассрочку = ?(СтрокаРассрочки.ПроцентПревышения > 25, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРассрочки.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
		
		Если СтрокаРассрочки.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Проживающие Тогда
			
			Если Не СтрокаСведенийПоЛС.КолвоПроживающих = СтрокаСведенийПоЛС.КолвоПроживающихПред Тогда
				ТекущийРазмерПлаты = (СтрокаРассрочки.ТекущийРазмерПлаты / СтрокаСведенийПоЛС.КолвоПроживающих) * СтрокаСведенийПоЛС.КолвоПроживающихПред;
				
				СтрокаРассрочки.ПроцентПревышения          = (ТекущийРазмерПлаты / СтрокаРассрочки.ПредыдущийРазмерПлаты - 1) * 100;
				СтрокаРассрочки.МожноПредоставитьРассрочку = ?(СтрокаРассрочки.ПроцентПревышения > 25, Истина, Ложь);
			КонецЕсли;
			
		ИначеЕсли СтрокаРассрочки.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Зарегистрированные Тогда
			
			Если Не СтрокаСведенийПоЛС.КолвоЗарегистрированных = СтрокаСведенийПоЛС.КолвоЗарегистрированныхПред Тогда
				ТекущийРазмерПлаты = (СтрокаРассрочки.ТекущийРазмерПлаты / СтрокаСведенийПоЛС.КолвоЗарегистрированных) * СтрокаСведенийПоЛС.КолвоЗарегистрированныхПред;
				
				СтрокаРассрочки.ПроцентПревышения          = (ТекущийРазмерПлаты / СтрокаРассрочки.ПредыдущийРазмерПлаты - 1) * 100;
				СтрокаРассрочки.МожноПредоставитьРассрочку = ?(СтрокаРассрочки.ПроцентПревышения > 25, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИзменениеБазРасчета()

&НаСервереБезКонтекста
// Формирует таблицу со сведениями о количество жильцов и размерах площадей по текущему л/с
// за текущий и предыдущий расчетные периоды.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями по текщему л/с.
//
Функция ПолучитьТаблицуСведенийПоЛС(ЛицевойСчет, Помещение, ТекущийПериод)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ТекущийПериод, ЛицевойСчет = &ЛицевойСчет) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоЗарегИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ТекущийПериод,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ТекущийПериод) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоПроживИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ТекущийПериод,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ТекущийПериод) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоЗарегИзСведений.Количество, 0)
	|	КОНЕЦ КАК КолвоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоПроживИзСведений.Количество, 0)
	|	КОНЕЦ КАК КолвоПроживающих
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов,
	|	КоличествоЗарегИзСведений КАК КоличествоЗарегИзСведений,
	|	КоличествоПроживИзСведений КАК КоличествоПроживИзСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ТекущийПериод,
	|			Объект = &Помещение
	|				И (ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(втЖильцы.КолвоЗарегистрированных, 0)) КАК КолвоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(втЖильцы.КолвоПроживающих, 0)) КАК КолвоПроживающих,
	|	СУММА(ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0)) КАК ОбщаяПлощадь,
	|	СУММА(ЕСТЬNULL(втПлощади.ЖилаяПлощадь, 0)) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ ТекущийПериод
	|ИЗ
	|	втЖильцы КАК втЖильцы,
	|	втПлощади КАК втПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцовПред
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ПредыдущийПериод, ЛицевойСчет = &ЛицевойСчет) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоЗарегИзСведенийПред
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ПредыдущийПериод,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ПредыдущийПериод) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоПроживИзСведенийПред
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ПредыдущийПериод,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ПредыдущийПериод) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцовПред.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоЗарегИзСведенийПред.Количество, 0)
	|	КОНЕЦ КАК КолвоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцовПред.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоПроживИзСведенийПред.Количество, 0)
	|	КОНЕЦ КАК КолвоПроживающих
	|ПОМЕСТИТЬ втЖильцыПред
	|ИЗ
	|	втУчетКоличестваЖильцовПред КАК втУчетКоличестваЖильцовПред,
	|	КоличествоЗарегИзСведенийПред КАК КоличествоЗарегИзСведенийПред,
	|	КоличествоПроживИзСведенийПред КАК КоличествоПроживИзСведенийПред
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПред
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ПредыдущийПериод,
	|			Объект = &Помещение
	|				И (ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(втЖильцыПред.КолвоЗарегистрированных, 0)) КАК КолвоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(втЖильцыПред.КолвоПроживающих, 0)) КАК КолвоПроживающих,
	|	СУММА(ЕСТЬNULL(втПлощадиПред.ОбщаяПлощадь, 0)) КАК ОбщаяПлощадь,
	|	СУММА(ЕСТЬNULL(втПлощадиПред.ЖилаяПлощадь, 0)) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ ПредыдущийПериод
	|ИЗ
	|	втЖильцыПред КАК втЖильцыПред,
	|	втПлощадиПред КАК втПлощадиПред
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредыдущийПериод.КолвоЗарегистрированных КАК КолвоЗарегистрированныхПред,
	|	ПредыдущийПериод.КолвоПроживающих КАК КолвоПроживающихПред,
	|	ПредыдущийПериод.ОбщаяПлощадь КАК ОбщаяПлощадьПред,
	|	ПредыдущийПериод.ЖилаяПлощадь КАК ЖилаяПлощадьПред,
	|	ТекущийПериод.КолвоЗарегистрированных КАК КолвоЗарегистрированных,
	|	ТекущийПериод.КолвоПроживающих КАК КолвоПроживающих,
	|	ТекущийПериод.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ТекущийПериод.ЖилаяПлощадь КАК ЖилаяПлощадь
	|ИЗ
	|	ТекущийПериод КАК ТекущийПериод,
	|	ПредыдущийПериод КАК ПредыдущийПериод";
	
	Запрос.УстановитьПараметр("ТекущийПериод",    ТекущийПериод);
	Запрос.УстановитьПараметр("ПредыдущийПериод", ДобавитьМесяц(ТекущийПериод, -12));
	Запрос.УстановитьПараметр("ЛицевойСчет",      ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",        Помещение);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСведенийПоЛС()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

////////////////////////////////////////////////////////////////////////////////
// РАССРОЧКА НА УСТАНОВКУ СЧЕТЧИКОВ

/////////////////////
// Установить флажки

&НаКлиенте
// Процедура обработчик команды "КомандаУстановитьФлажки" таблицы формы "НачислениеРассрочкиЗаУстановкуСчетчика".
//
Процедура КомандаУстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.НачислениеРассрочкиЗаУстановкуСчетчика Цикл
		Строка.Рассрочка = Истина;
	КонецЦикла;
	
КонецПроцедуры // КомандаУстановитьФлажки()

/////////////////////
// Снять флажки

&НаКлиенте
// Процедура обработчик команды "КомандаСнятьФлажки" таблицы формы "НачислениеРассрочкиЗаУстановкуСчетчика".
//
Процедура КомандаСнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.НачислениеРассрочкиЗаУстановкуСчетчика Цикл
		Строка.Рассрочка = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КомандаСнятьФлажки()

/////////////////////
// Заполнить 

&НаКлиенте
// Процедура обработчик кнопки "Заполнить" таблицы формы "НачислениеРассрочкиЗаУстановкуСчетчика".
//
Процедура ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчика(Команда)
	
	Если Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Количество() > 0 Тогда
		
		ТекстВопроса       = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчика()".
Процедура ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Очистить();
		
		ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаПродолжение();
		
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчика()".
Процедура ЗаполнитьТаблицуРассрочкиЗаУстановкуСчетчикаПродолжение()
	
	Если Объект.Дата = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("За заполнена дата документа!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран объект начисления!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана услуга!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуНачислениеРассрочкиЗаУстановкуСчетчика();
	
	Если Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Количество() > 0 Тогда
		Элементы.НачислениеРассрочкиЗаУстановкуСчетчика.ТекущаяСтрока = Объект.НачислениеРассрочкиЗаУстановкуСчетчика[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьТаблицуРасшифровкаРассрочки();
	
КонецПроцедуры // ЗаполнитьТаблицуРассрочкиПродолжение()

&НаСервере
// Заполняет таблицу "НачислениеРассрочки" сведениями о начислениях.
//
Процедура ЗаполнитьТаблицуНачислениеРассрочкиЗаУстановкуСчетчика()
	
	// Определяем условие отбора в запросе, в зависимости от типа объекта.
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания")  Тогда
		УсловиеНаОбъект = "ЛицевойСчет.Адрес.Владелец";
	Иначе
		УсловиеНаОбъект = "ЛицевойСчет";
	КонецЕсли;
	
	ТаблицаСведенийОРассрочке = ПолучитьТаблицуСведенийОРассрочкеЗаУстановкуСчетчика(УсловиеНаОбъект);
	
	Для Каждого СтрокаСведенийОРассрочке Из ТаблицаСведенийОРассрочке Цикл
		
		НоваяСтрокаРассрочки = Объект.НачислениеРассрочкиЗаУстановкуСчетчика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРассрочки, СтрокаСведенийОРассрочке);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуНачислениеРассрочкиЗаУстановкуСчетчика()

&НаСервере
// Формирует текст запроса поиска сведений о начислениях.
//
// Параметры:
//  УсловиеНаОбъект - Строка - строка условия отбора, в зависимости от типа объекта.
//
// Возвращаемое значение:
//  ТаблицаЗначений - результат запроса.
//
Функция ПолучитьТаблицуСведенийОРассрочкеЗаУстановкуСчетчика(УсловиеНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидПлощади,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидыЖильцов,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК ТекущийРазмерПлаты,
	|	ИСТИНА КАК Рассрочка
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоТекПериода,
	|			&КонецТекПериода,
	|			,
	|			Организация = &Организация
	|				И " + УсловиеНаОбъект + " = &Объект
	|				И Услуга = &Услуга
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидПлощади,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидыЖильцов
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("НачалоТекПериода", НачалоМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("КонецТекПериода",  КонецМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("Объект",           Объект.Объект);
	Запрос.УстановитьПараметр("Услуга",           Объект.Услуга);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТекстЗапроса()	

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Переключает режимы видимости таблиц рассрочки в зависимости от значения вида рассрочки.
//
Процедура УправлениеФормой()
	
	Если Объект.ВидРассрочки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУстановкуСчетчика") Тогда
		
		// Таблицы рассрочки
		Элементы.НачислениеРассрочки.Видимость                    = Ложь;
		Элементы.НачислениеРассрочкиЗаУстановкуСчетчика.Видимость = Истина;
		
		// Поле "Услуга"
		Элементы.Услуга.КнопкаОчистки             = Ложь;
		Элементы.Услуга.АвтоОтметкаНезаполненного = Истина;
		
		// Поле "Объект"
		МассивТипов = Новый Массив;
		МассивТипов.Добавить("СправочникСсылка.КВП_ЛицевыеСчета");
		МассивТипов.Добавить("СправочникСсылка.КВП_Здания");
		
		Элементы.Объект.КнопкаОчистки   = Истина;
		Элементы.Объект.ВыбиратьТип     = Истина;
		Элементы.Объект.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		// Поле "Надпись"
		Элементы.НадписьПояснение.Заголовок = НадписьПояснениеЗаУстановкуСчетчика;
		
		// Группа "ГруппаОписаниеФорматированияТЧ".
		Элементы.ГруппаОписаниеФорматированияТЧ.Видимость = Ложь;
		
		Элементы.ДекорацияПустая.Видимость = Истина;
		
		Элементы.НадписьСрокРассрочки.Заголовок = "(предоставляется на 5 лет)";
		
	Иначе 
		// Таблицы рассрочки
		Элементы.НачислениеРассрочки.Видимость                    = Истина;
		Элементы.НачислениеРассрочкиЗаУстановкуСчетчика.Видимость = Ложь;
		
		// Поле "Услуга"
		Элементы.Услуга.КнопкаОчистки             = Истина;
		Элементы.Услуга.АвтоОтметкаНезаполненного = Ложь;
		
		// Поле "Объект"
		Элементы.Объект.КнопкаОчистки   = Ложь;
		Элементы.Объект.ВыбиратьТип     = Ложь;
		Элементы.Объект.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета");
		
		// Поле "Надпись"
		Элементы.НадписьПояснение.Заголовок = НадписьПояснение;
		
		// Группа "ГруппаОписаниеФорматированияТЧ".
		Элементы.ГруппаОписаниеФорматированияТЧ.Видимость = Истина;
		
		Элементы.ДекорацияПустая.Видимость = Ложь;
		
		Элементы.НадписьСрокРассрочки.Заголовок = "(предоставляется на 1 год)";
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
// Обработчик выбора услуги.
Процедура ОбработатьВыборУслуг(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Объект.Услуга = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборУслуг()

#КонецОбласти

#Область ИнициализацияПеременных

НадписьПояснение = 
"В данной таблице представлен
|график начисления рассрочки
|и комиссии за рассрочку по 
|текущей услуге на ближайшие
|12 месяцев.";

НадписьПояснениеЗаУстановкуСчетчика = 
"В данной таблице представлен
|график начисления рассрочки
|и комиссии за рассрочку по 
|услуге установки счетчика 
|для текущего лицевого счета
|на ближайшие 5 лет.";

#КонецОбласти