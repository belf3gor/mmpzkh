
#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
//
// Параметры
//  нет
//
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоКвартира = ПомещениеЯвляетсяЖилым(Форма.Квартира);
	
	Если Форма.мУказыватьКоличествоПрожИЗарегЧислами И ЭтоКвартира Тогда
		Элементы.ГруппаДопПараметров.Видимость = Истина;
	Иначе
		Элементы.ГруппаДопПараметров.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВладелецКонтрагент Тогда
		
		Элементы.Контрагент.ТолькоПросмотр                   = Ложь;
		Элементы.ГлавнаяУстановитьОтветственного.Доступность = Ложь;
		Элементы.ПанельСтраницаПустая.Видимость              = Ложь;
	Иначе
		Элементы.ПанельСтраницаПустая.Видимость = Истина;
		Элементы.Контрагент.ТолькоПросмотр      = Истина;
	КонецЕсли;
	
	Элементы.ГлавнаяСтепеньРодства.Видимость       = НЕ Объект.ВладелецКонтрагент;
	Элементы.ГлавнаяСобственник.Доступность        = Форма.мУпрощенныйВариантУчетаСобственников;
	Элементы.ГлавнаяДоляСобственностиСтр.Видимость = Форма.мУпрощенныйВариантУчетаСобственников;
	
	Элементы.ГлавнаяГруппаПроживает.Видимость       = ЭтоКвартира;
	Элементы.ГлавнаяГруппаЗарегистрирован.Видимость = ЭтоКвартира;
	
	Элементы.ГлавнаяСведенияОСобственности.Видимость = Форма.мУпрощенныйВариантУчетаСобственников;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
// Выполняет действия, которые связаны с изменением типа ответственного.
//
Процедура ВыполнитьДействияПриИзмененииТипаВладельца()
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.ВладелецКонтрагент Тогда
		
		Если Не ПомещениеЯвляетсяЖилым(Квартира) И Объект.Главная.Количество() > 0 Тогда
			ТекстВопроса = "Для нежилого помещения не может быть задан список жильцов, если ответственным собственником лицевого счета указан контрагент.
			|Таблица жильцов будет очищена. Продолжить?";
			ОповещениеОбОтветеПользователя = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов", ЭтотОбъект);
			
			ПоказатьВопрос(ОповещениеОбОтветеПользователя, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьДействияПоУстановкеКонтрагентаОтветственным();
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПредыдущееЗначениеОтветственного = Неопределено
		   И (ТипЗнч(ПредыдущееЗначениеОтветственного) = Тип("СправочникСсылка.УПЖКХ_Жильцы")) Тогда
			Объект.ОтветственныйСобственник = ПредыдущееЗначениеОтветственного;
		Иначе
			Если Объект.Главная.Количество() > 0 Тогда
				Объект.ОтветственныйСобственник = Объект.Главная.Получить(0).Проживающий;
			Иначе
				Объект.ОтветственныйСобственник = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииТипаВладельца()

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке таблицы жильцов.
//
Процедура ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Главная.Очистить();
		ВыполнитьДействияПоУстановкеКонтрагентаОтветственным();
	Иначе
		// Если пользователь не желает очищать ТЧ жильцов, устанавливаем тип владельца обратно.
		ТипВладельца = Элементы.ТипВладельца.СписокВыбора.НайтиПоЗначению(0).Значение;
		Объект.ВладелецКонтрагент = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов()

&НаКлиенте
// Процедура управляет видимостью и оформлением полей, если ответственным устанавливается контрагент.
//
Процедура ВыполнитьДействияПоУстановкеКонтрагентаОтветственным()
	
	ПредыдущееЗначениеОтветственного                     = Объект.ОтветственныйСобственник;
	Элементы.ГлавнаяУстановитьОтветственного.Доступность = Ложь;
	Объект.ОтветственныйСобственник                      = Объект.Контрагент;
	Элементы.ГлавнаяСтепеньРодства.Видимость             = Ложь;
	
КонецПроцедуры // ВыполнитьДействияПоУстановкеКонтрагентаОтветственным()

&НаСервере
// Процедура обновляет родственные связи в табличной части.
//
Процедура ОбновитьИнформациюОРодственныхСвязях()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК Проживающий,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ФизическоеЛицоОсновное = &ФизическоеЛицоОсновное) 
	|		КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних";
	Запрос.УстановитьПараметр("Дата",        Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ФизическоеЛицоОсновное", Объект.ОтветственныйСобственник.ФизЛицо);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЖильца Из Объект.Главная Цикл
		
		Если Результат.Количество() > 0 Тогда
			
			НайденныйЖилец = Результат.НайтиСтроки(Новый Структура("Проживающий", СтрокаЖильца.Проживающий.ФизЛицо));
			Если НайденныйЖилец.Количество() > 0 Тогда
				
				СтрокаЖильца.СтепеньРодства = НайденныйЖилец.Получить(0).СтепеньРодства;
				
			Иначе
				
				СтрокаЖильца.СтепеньРодства = Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
				
			КонецЕсли;
			
		Иначе
			
			СтрокаЖильца.СтепеньРодства = Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет доступность кнопки установки ответственного собственника.
//
Процедура ПроверитьПометкуКнопкиУстановкиОтветственного()

	Если Элементы.Главная.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ГлавнаяУстановитьОтветственного.Доступность = Ложь;
		Элементы.ГлавнаяУстановитьОтветственного.Пометка     = Ложь;
		
	Иначе
		
		Если НЕ Объект.ВладелецКонтрагент Тогда
			Элементы.ГлавнаяУстановитьОтветственного.Доступность = Истина;
			Элементы.ГлавнаяУстановитьОтветственного.Пометка     = Элементы.Главная.ТекущиеДанные.Проживающий = Объект.ОтветственныйСобственник;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Заполняет количество проживающих и зарегистрированных исходя из данных в ТЧ документа.
//
// Параметры
//  нет
//
Процедура ЗаполнитьКоличествоПроживающихИЗарегистрированных()
	
	Если НЕ мУказыватьКоличествоПрожИЗарегЧислами Тогда
		тмКоличествоПроживающих        = 0;
		тмКоличествоЗарегистрированных = 0;
		Для Каждого СтрокаТЧ Из Объект.Главная Цикл
			тмКоличествоПроживающих        = ?(СтрокаТЧ.Проживает, 
											   тмКоличествоПроживающих + 1, 
											   тмКоличествоПроживающих);
			тмКоличествоЗарегистрированных = ?(СтрокаТЧ.Зарегистрирован, 
											   тмКоличествоЗарегистрированных + 1, 
											   тмКоличествоЗарегистрированных);
		КонеЦцикла;
		Объект.КоличествоПроживающих        = тмКоличествоПроживающих;
		Объект.КоличествоЗарегистрированных = тмКоличествоЗарегистрированных;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоличествоПроживающихИЗарегистрированных()

&НаСервере
// Процедура проверяет необходимость установки долей лицевого счета.
//
Функция ПроверитьНеобходимостьУстановкиДолей()
	
	// Проверим необходимость установки долей лицевого счета
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Объект",      Квартира);
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ЛицевойСчет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&Период,
	|			Объект = &Объект
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Не Выборка.Следующий();
	
КонецФункции

&НаСервере
// Обновляет паспортные данные жильцов.
//
// Параметры
//  нет
//
Процедура ОбновитьПаспортныеДанныеЖильцов(Проживающий = Неопределено)
	
	Если Проживающий = Неопределено Тогда
		СпПроживающих = Объект.Главная.Выгрузить().ВыгрузитьКолонку("Проживающий");
	Иначе
		СпПроживающих = Проживающий;
	КонецЕсли;
	
	ТаблицаПаспортныхДанныхПроживающих = 
		Документы.КВП_ОткрытиеЛицевогоСчета.ПолучитьТаблицуПаспортныхДанных(Объект.Дата, СпПроживающих);
	
	Для Каждого ТекСтрокаПаспортныхДанных Из ТаблицаПаспортныхДанныхПроживающих Цикл
		СтрокиЖильца = Объект.Главная.НайтиСтроки(Новый Структура("Проживающий", ТекСтрокаПаспортныхДанных.Проживающий));
		Если СтрокиЖильца.Количество() > 0 Тогда
			Для Каждого ТекСтрокаЖильца Из СтрокиЖильца Цикл
				ЗаполнитьЗначенияСвойств(ТекСтрокаЖильца, ТекСтрокаПаспортныхДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапросПаспортныхДанныхПроживающих()

&НаСервереБезКонтекста
// Получает на сервере структуру данных при упрощенном учете собственников.
//
Функция ПолучитьСтруктуруДанныхНаСервере(Объект, ЛицевойСчет, Дата)
	
	Возврат Документы.КВП_ИзменениеЛицевогоСчета.ПолучитьДанныеИзРегистра(Объект, ЛицевойСчет, Дата);
	
КонецФункции // ПолучитьСтруктуруДанныхНаСервере()

&НаСервере
// Заполняет таблицу сведений о собственниках при полном учете.
//
Процедура ЗаполнитьСведенияОСобственникахПриПолномУчете()
	
	Если НЕ мУпрощенныйВариантУчетаСобственников Тогда
		ТаблицаСведенийОЖильцах = Документы.КВП_ИзменениеЛицевогоСчета.ПолучитьДанныеИзРегистра(, Объект.ЛицевойСчет, Объект.Дата);
		Если ТаблицаСведенийОЖильцах.Количество() > 0 Тогда
			СведенияОСобственности.Загрузить(ТаблицаСведенийОЖильцах);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОСобственникахПриПолномУчете()

&НаСервереБезКонтекста
// Получает на сервере значение константы варианта учета собственников()
//
Функция ПолучитьВариантУчетаСобственниковНаСервере()
	
	Возврат ИспользуетсяУпрощенныйВариантУчетаСобственников();
	
КонецФункции // ПолучитьВариантУчетаСобственниковНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Определяет, принадлежит ли помещение к жилому фонду.
//
Функция ПомещениеЯвляетсяЖилым(Помещение)
	
	Если Помещение.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПомещениеЯвляетсяЖилым = Ложь;
	
	ВидПомещения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "ВидПомещения");
	ПомещениеЯвляетсяЖилым = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВидПомещения, "ЭтоЖилойФонд");
	
	Возврат ПомещениеЯвляетсяЖилым;
	
КонецФункции // ПомещениеЯвляетсяЖилым()

&НаСервереБезКонтекста
// Формирует строковое представление документа собственности.
Функция ПолучитьПредставлениеСведенийОСобственности(ЯвляетсяСобственником, ВидДокументаСобственности, НомерДокументаСобственности, ДатаДокументаСобственности)
	
	Если ЯвляетсяСобственником Тогда
		Если ВидДокументаСобственности = ПредопределенноеЗначение("Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка")
		 И ПустаяСтрока(НомерДокументаСобственности)
		 И ДатаДокументаСобственности = Дата(1, 1, 1) Тогда
			Возврат "Указать сведения";
		Иначе
			Возврат ПолучитьПредставлениеДокументаСобственности(НомерДокументаСобственности, ДатаДокументаСобственности, ВидДокументаСобственности);
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Записывает сведения о собственности в реквизиты документа.
Процедура ЗаписатьСведенияОСобственности(СтруктураСведений)
	
	Если Не СтруктураСведений.Свойство("Собственник") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСобственника = Объект.Главная.НайтиСтроки(Новый Структура("Проживающий", СтруктураСведений.Жилец));
		
	Если Не СтрокиСобственника.Количество() = 0 Тогда
		СтрокаСобственника = СтрокиСобственника.Получить(0);
		СтрокаСобственника.ОснованиеПолученияВСобственность = СтруктураСведений.ОснованиеПолученияВСобственность;
		СтрокаСобственника.ВидДокументаСобственности        = СтруктураСведений.ВидДокумента;
		СтрокаСобственника.НомерДокументаСобственности      = СтруктураСведений.НомерДокумента;
		СтрокаСобственника.ДатаДокументаСобственности       = СтруктураСведений.ДатаДокумента;
		СтрокаСобственника.СведенияОСобственности           = ПолучитьПредставлениеСведенийОСобственности(СтрокаСобственника.Собственник,
																										  СтрокаСобственника.ВидДокументаСобственности,
																										  СтрокаСобственника.НомерДокументаСобственности,
																										  СтрокаСобственника.ДатаДокументаСобственности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Заполняет сведения о собственности в табличной части документа при упрощенном варианте учета собственности.
Процедура ЗаполнитьСведенияОСобственностиВТаблицеПриУпрощенномУчете(ТабличнаяЧасть)
	
	СтрокиССобственниками = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Собственник", Истина));
	
	Для Каждого СтрокаСобственника Из СтрокиССобственниками Цикл
		СтрокаСобственника.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(СтрокаСобственника.Собственник,
																								СтрокаСобственника.ВидДокументаСобственности,
																								СтрокаСобственника.НомерДокументаСобственности,
																								СтрокаСобственника.ДатаДокументаСобственности);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Открывает форму ввода сведений о собственности на помещение.
Процедура ИзменитьСведенияОСобственности()
	
	ТекущаяСтрока = Элементы.Главная.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Жилец",                            ТекущаяСтрока.Проживающий);
	ПараметрыОткрытия.Вставить("ОснованиеПолученияВСобственность", ТекущаяСтрока.ОснованиеПолученияВСобственность);
	ПараметрыОткрытия.Вставить("ВидДокумента",                     ТекущаяСтрока.ВидДокументаСобственности);
	ПараметрыОткрытия.Вставить("НомерДокумента",                   ТекущаяСтрока.НомерДокументаСобственности);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                    ТекущаяСтрока.ДатаДокументаСобственности);
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ФормаСведенийОСобственности", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Параметры.Свойство("Основание", Основание);
	
	Если НЕ Основание.Пустая() Тогда
		Если Основание.ЭтоГруппа Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			
			// Получаем статус лицевого счета:
			// 1 - Лицевой счет открыт или изменен.
			// 2 - Лицевой счет закрыт.
			// 3 - Лицевой счет не открыт.
			СтатусДокумента = УПЖКХ_РаботаСЛицевымиСчетами.СтатусЛицевогоСчета(Основание);
			
			Если СтатусДокумента = 1 ИЛИ СтатусДокумента = 2 Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мУпрощенныйВариантУчетаСобственников = ИспользуетсяУпрощенныйВариантУчетаСобственников();
	мУказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	
	// Тут нужно добавить вызов процедуры получения сведения о собственности жильца,
	// при неупрощенном варианте учета собственников.
	ЗаполнитьСведенияОСобственникахПриПолномУчете();
	
	Если Не Объект.Ссылка.Пустая() И мУпрощенныйВариантУчетаСобственников Тогда
		ЗаполнитьСведенияОСобственностиВТаблицеПриУпрощенномУчете(Объект.Главная);
	КонецЕсли;
	
	Квартира = Объект.ЛицевойСчет.Адрес;
	
	ТипВладельца = ?(Объект.ВладелецКонтрагент, 1, 0);
	
	Для Каждого ТекСтрока Из Объект.Главная Цикл
		ТекСтрока.ДоляСобственностиСтр = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель,
																			ТекСтрока.ДоляСобственностиЗнаменатель);
	КонецЦикла;
	
	ОбновитьПаспортныеДанныеЖильцов();
	
	// Вывести в заголовке формы вид операции.
	УПЖКХ_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() И Основание.Пустая() Тогда
		
		Отказ = Истина;
		
		ТекЗдание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(
						УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес"),
						"Владелец");
		СтруктураДанных = ?(НЕ Объект.ЛицевойСчет = Неопределено, 
								Новый Структура("ШаблонЛС, Здание", Объект.ЛицевойСчет, ТекЗдание), Неопределено);
		УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ЛицевойСчет.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан корректный лицевой счет.");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗаполнитьКоличествоПроживающихИЗарегистрированных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ПроверитьНеобходимостьУстановкиДолей() Тогда
		ТекстВопроса = "Не задана доля собственности текущего лицевого счета!
					   |Доли собственности влияют на корректность начислений!
					   |Открыть форму установки долей?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПослеЗаписи", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПослеЗаписиПродолжение();
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПослеЗаписи()".
Процедура ОбработатьРезультатВопросаПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата",        Объект.Дата);
		СтруктураПараметров.Вставить("Помещение",   Квартира);
		СтруктураПараметров.Вставить("ЛицевойСчет", Объект.ЛицевойСчет);
		
		ОбработкаДолей = ПолучитьФорму("Обработка.КВП_УстановкаДолей.Форма", СтруктураПараметров);
		ОбработкаДолей.Открыть();
		
	КонецЕсли;
	
	ПослеЗаписиПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаПослеЗаписи()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "ПослеЗаписи()".
Процедура ПослеЗаписиПродолжение()
	
	Для Каждого ТекСтрока Из Объект.Главная Цикл
		ТекСтрока.ДоляСобственностиСтр = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель,
																			ТекСтрока.ДоляСобственностиЗнаменатель);
	КонецЦикла;
	
	Если мУпрощенныйВариантУчетаСобственников Тогда
		ЗаполнитьСведенияОСобственностиВТаблицеПриУпрощенномУчете(Объект.Главная);
	КонецЕсли;
	
	ОбновитьПаспортныеДанныеЖильцов();
	
КонецПроцедуры // ПослеЗаписиПродолжение()

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОСобственности" Тогда
		Если ТипЗнч(Параметр) = Тип("Строка")
		 И Параметр = "ФормаНастроек" Тогда
			мУпрощенныйВариантУчетаСобственников = ПолучитьВариантУчетаСобственниковНаСервере();
		КонецЕсли;
		ЗаполнитьСведенияОСобственникахПриПолномУчете();
		
	ИначеЕсли ИмяСобытия = "ПередачаСведенийОСобственностиПриУпрощенномУчете" Тогда
		Если ТипЗнч(Параметр) = Тип("Строка") Тогда
			СтруктураСведений = ПолучитьИзВременногоХранилища(Параметр);
			Если ТипЗнч(Параметр) = Тип("Строка") Тогда
				ЗаписатьСведенияОСобственности(СтруктураСведений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	ЗаполнитьСведенияОСобственникахПриПолномУчете();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипВладельца".
Процедура ТипВладельцаПриИзменении(Элемент)
	
	Объект.ВладелецКонтрагент = (ТипВладельца = 1);
	
	ВыполнитьДействияПриИзмененииТипаВладельца();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Контрагент".
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.ВладелецКонтрагент И Не ПредыдущееЗначениеОтветственного = Объект.Контрагент Тогда
		ВыполнитьДействияПоУстановкеКонтрагентаОтветственным();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "Главная".
Процедура ГлавнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекКолонка = Элемент.ТекущийЭлемент;
	
	Если ТекКолонка.Имя = "ГлавнаяДоляСобственностиСтр" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элемент.ТекущиеДанные;
		
		Если мУпрощенныйВариантУчетаСобственников И ТекСтрока.Собственник Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
			СтруктураПараметров.Вставить("Объект",          ТекСтрока.Проживающий);
			СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственностиЧислитель);
			СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственностиЗнаменатель);
			
			ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ГлавнаяВыборЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	ИначеЕсли ТекКолонка.Имя = "ГлавнаяСведенияОСобственности" Тогда
		
		ИзменитьСведенияОСобственности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки выбора ТЧ "Главная".
//
Процедура ГлавнаяВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ТекСтрока.ДоляСобственностиЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ТекСтрока.ДоляСобственностиЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		ТекСтрока.ДоляСобственностиСтр = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель,
																			ТекСтрока.ДоляСобственностиЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры // ГлавнаяВыборЗавершение()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Главная".
Процедура ГлавнаяПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОтветственного();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Главная".
Процедура ГлавнаяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ЭтоКвартира = ПомещениеЯвляетсяЖилым(Квартира);
	
	// Не можем добавить строки в ТЧ жильцов, если:
	// Помещение нежилое, при этом:
	// 1. Если ответственный собственник - жилец, не можем добавить более 1 жильца.
	// 2. Если ответственный собственник - контрагент, жильцов добавить нельзя.
	Если Не ЭтоКвартира Тогда
		Если Не Объект.ВладелецКонтрагент И Объект.Главная.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для нежилых помещений можно указать только ответственного собственника!");
			Отказ = Истина;
		ИначеЕсли Объект.ВладелецКонтрагент Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "Главная".
Процедура ГлавнаяПередНачаломИзменения(Элемент, Отказ)
	
	ТекКолонка = Элемент.ТекущийЭлемент;
	ТекЖилец = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Элементы.Главная.ТекущиеДанные.Проживающий, "ФизЛицо");
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекКолонка.Имя = "ГлавнаяСобственник" Тогда
		
		Если НЕ мУпрощенныйВариантУчетаСобственников Тогда
			Отказ = Истина;
		Иначе
			
			Если ТекущиеДанные.ВладелецЕдинственногоЖилья Тогда
				ТекущиеДанные.ВладелецЕдинственногоЖилья = Ложь;
			КонецЕсли;
			СтруктураПараметров = УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(ТекЖилец, Объект.Дата,
																							Ложь, Объект.ЛицевойСчет);
			ТекСообщение        = СтруктураПараметров.СтрокаОписания;
			Если НЕ ТекущиеДанные.Собственник И ЗначениеЗаполнено(ТекСообщение) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекКолонка.Имя = "ГлавнаяСтепеньРодства" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ОтветственныйСобственник) Тогда
			ПоказатьПредупреждение(Неопределено, "Для установки степени родства необходимо предварительно установить ответственного собственника!");
			Отказ = Истина;
		ИначеЕсли ТекущиеДанные.Проживающий = Объект.ОтветственныйСобственник Тогда
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекКолонка.Имя = "ГлавнаяВладелецЕдинственногоЖилья" И НЕ ТекущиеДанные.ВладелецЕдинственногоЖилья Тогда
		
		СтруктураПараметров = УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(ТекЖилец, Объект.Дата, ,
																						Объект.ЛицевойСчет);
		ТекСообщение   = СтруктураПараметров.СтрокаОписания;
		Если НЕ ТекущиеДанные.Собственник И НЕ ТекущиеДанные.Проживающий = Объект.ОтветственныйСобственник Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Жилец должен быть либо собственником, либо ответственным нанимателем!", Отказ);
		ИначеЕсли ЗначениеЗаполнено(ТекСообщение) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "Главная".
Процедура ГлавнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДатаРегистрации = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Главная.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ОбновитьПаспортныеДанныеЖильцов(Элементы.Главная.ТекущиеДанные.Проживающий);
	КонецЕсли;
	
	ПроживающийОбъект = ТекущаяСтрока.Проживающий;
	СброситьДанные = Истина;
	Если Не ПроживающийОбъект.Пустая() Тогда
		СтруктураДанных = ПолучитьСтруктуруДанныхНаСервере(ПроживающийОбъект, Объект.ЛицевойСчет, Объект.Дата);
		Если Не СтруктураДанных = Неопределено Тогда
			ТекущаяСтрока.Собственник                  = СтруктураДанных.Собственник;
			ТекущаяСтрока.ВладелецЕдинственногоЖилья   = СтруктураДанных.ВладелецЕдинственногоЖилья;
			ТекущаяСтрока.ДополнительнаяПлощадь        = СтруктураДанных.ДополнительнаяПлощадь;
			ТекущаяСтрока.ДоляСобственностиЧислитель   = СтруктураДанных.ДоляСобственностиЧислитель;
			ТекущаяСтрока.ДоляСобственностиЗнаменатель = СтруктураДанных.ДоляСобственностиЗнаменатель;
			СброситьДанные = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если СброситьДанные Тогда
		ТекущаяСтрока.ВладелецЕдинственногоЖилья      = Ложь;
		ТекущаяСтрока.ДополнительнаяПлощадь           = 0;
		ТекущаяСтрока.ДоляСобственностиЧислитель      = 0;
		ТекущаяСтрока.ДоляСобственностиЗнаменатель    = 0;
		ТекущаяСтрока.Собственник = Ложь;
	КонецЕсли;
	
	Если мУпрощенныйВариантУчетаСобственников Тогда
		ДоляСобственностиЧислитель   = ТекущаяСтрока.ДоляСобственностиЧислитель;
		ДоляСобственностиЗнаменатель = ТекущаяСтрока.ДоляСобственностиЗнаменатель;
	Иначе
		ДоляСобственностиЧислитель   = 0;
		ДоляСобственностиЗнаменатель = 0;
		ДанныеОСобственнике = СведенияОСобственности.НайтиСтроки(Новый Структура("Жилец", ТекущаяСтрока.Проживающий));
		Если ДанныеОСобственнике.Количество() > 0 Тогда
			ДоляСобственностиЧислитель   = ДанныеОСобственнике[0].ДоляСобственностиЧислитель;
			ДоляСобственностиЗнаменатель = ДанныеОСобственнике[0].ДоляСобственностиЗнаменатель;
			ТекущаяСтрока.Собственник    = ДанныеОСобственнике[0].Собственник;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.ДоляСобственностиСтр = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
												ДоляСобственностиЧислитель, ДоляСобственностиЗнаменатель);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Устанавливаем параметры открытия формы выбора с отбором по л/с.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", Объект.ЛицевойСчет));
	
	// При создании жильца из документов открытия и изменения л/с в помощнике
	// необходимо пропускать страницу с вводом сведений для изменения л/с.
	СтруктураПараметров.Вставить("НеВводитьИзменениеЛСПриСозданииЖильца", Истина);
	
	// Открываем форму выбора жильца.
	ОткрытьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеСтроки = Объект.Главная.НайтиСтроки(Новый Структура("Проживающий", ВыбранноеЗначение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		Если ВыбранноеЗначение = НайденнаяСтрока.Проживающий Тогда
			НомерСтроки = НайденнаяСтрока.НомерСтроки;
			
			// Если нашли строку с данным проживаем при этом это не текущая строка с текущим проживающим,
			// тогда сообщаем об ошибке повторного выбора проживающего.
			Если НомерСтроки > 0
			  И (Не Элементы.Главная.ТекущиеДанные = Неопределено 
					И Не НомерСтроки = Элементы.Главная.ТекущиеДанные.НомерСтроки) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Такой проживающий уже есть в таблице. Строка №" + НомерСтроки);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГлавнаяСобственник".
Процедура ГлавнаяСобственникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Главная.ТекущиеДанные;
	
	ТекущаяСтрока.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекущаяСтрока.Собственник,
																					   ТекущаяСтрока.ВидДокументаСобственности,
																					   ТекущаяСтрока.НомерДокументаСобственности,
																					   ТекущаяСтрока.ДатаДокументаСобственности);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановитьОтветственного".
Процедура УстановитьОтветственного(Команда)
	
	Если Элементы.Главная.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийПроживающий = Элементы.Главная.ТекущиеДанные.Проживающий;
	Если НЕ ЗначениеЗаполнено(ТекущийПроживающий) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОтветственныйСобственник <> ТекущийПроживающий Тогда
		Объект.ОтветственныйСобственник = ТекущийПроживающий;
		ОбновитьИнформациюОРодственныхСвязях();
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОтветственного();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти