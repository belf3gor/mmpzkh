
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем УказыватьКоличествоПрожИЗарегЧислами Экспорт;  // Хранит настройку УказыватьКоличествоПрожИЗарегЧислами.

Перем мДатаДокумента Экспорт;                        // Хранит дату документа - для проверки изменения даты документа

Перем мТаблицаПаспортныхДанныхПроживающих Экспорт;   // Хранит таблицу паспортных данных проживающих.

Перем мУпрощенныйВариантУчетаСобственников Экспорт;  // Хранит значение константы
                                                     // "Упрощенный вариант учета собственников".

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Формирует движения по регистру "ОтветственныйСобственникНанимательЛицевогоСчета".
//
Процедура ДвиженияПоРегиструОтветственныйСобственникНанимательЛицевогоСчета(СтруктураШапкиДокумента)
	
	Движение = Движения.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.Добавить();
	Движение.Период                = СтруктураШапкиДокумента.Дата;
	Движение.ЛицевойСчет           = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.ОтветственныйВладелец = СтруктураШапкиДокумента.ОтветственныйСобственник;
	
КонецПроцедуры // ДвиженияПоРегиструОтветственныйСобственникНанимательЛицевогоСчета()

// Формирует движения по регистру "ЛицевыеСчета".
//
Процедура ДвиженияПоРегиструЛицевыеСчета(СтруктураШапкиДокумента)
	
	Движение = Движения.КВП_ЛицевыеСчета.Добавить();
	Движение.Период      = СтруктураШапкиДокумента.Дата;
	Движение.Объект      = СтруктураШапкиДокумента.Помещение;
	Движение.ЛицевойСчет = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.Действует   = Истина;
	
КонецПроцедуры // ДвиженияПоРегиструЛицевыеСчета()

// Формирует движения по регистру "Учет количества жильцов по лицевым счетам".
//
Процедура ДвиженияПоРегиструКВП_УчетКоличестваЖильцовПоЛицевымСчетам(СтруктураШапкиДокумента)
	
	Движение = Движения.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Добавить();
	
	Движение.Период                       = СтруктураШапкиДокумента.Дата;
	Движение.ЛицевойСчет                  = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.КоличествоПроживающих        = СтруктураШапкиДокумента.КоличествоПроживающих;
	Движение.КоличествоЗарегистрированных = СтруктураШапкиДокумента.КоличествоЗарегистрированных;
	
КонецПроцедуры // ДвиженияПоРегиструКВП_УчетКоличестваЖильцовПоЛицевымСчетам()

// Формирует движения по регистрам "СтепеньРодстваФизЛиц", "СведенияОЖильцах",
// "СведенияОПроживающих", "СведенияОЗарегистрированных" из содержимого таблицы "Главная".
//
Процедура ДвиженияПоРегистрамИзГлавнойТаблицы(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	Для Каждого ТекСтрокаГлавная Из ТаблицаЛицевыхСчетов Цикл
			
		Если (Не ТипЗнч(СтруктураШапкиДокумента.ОтветственныйСобственник) = Тип("СправочникСсылка.Контрагенты"))
		   И ТекСтрокаГлавная.ФизЛицо <> СтруктураШапкиДокумента.ФизЛицоОтветственногоСобственника Тогда
			// регистр УПЖКХ_СтепеньРодстваФизЛиц
			Если ЗначениеЗаполнено(ТекСтрокаГлавная.СтепеньРодства)
			   И ТекСтрокаГлавная.Проживающий <> СтруктураШапкиДокумента.ОтветственныйСобственник Тогда
				Движение = Движения.УПЖКХ_СтепеньРодстваФизЛиц.Добавить();
				Движение.Период                   = СтруктураШапкиДокумента.Дата;
				Движение.ФизическоеЛицоСвязанное  = ТекСтрокаГлавная.ФизЛицо;
				Движение.ФизическоеЛицоОсновное   = СтруктураШапкиДокумента.ФизЛицоОтветственногоСобственника;
				Движение.СтепеньРодства           = ТекСтрокаГлавная.СтепеньРодства;
			КонецЕсли;
		КонецЕсли;
		
		// регистр КВП_СведенияОЖильцах
		Движение = Движения.КВП_СведенияОЖильцах.Добавить();
		Движение.Период                                 = СтруктураШапкиДокумента.Дата;
		Движение.Объект                                 = ТекСтрокаГлавная.Проживающий;
		Движение.ЛицевойСчет                            = СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.ВладелецЕдинственногоЖилья             = ТекСтрокаГлавная.ВладелецЕдинственногоЖилья;
		Движение.ДополнительнаяПлощадь                  = ТекСтрокаГлавная.ДополнительнаяПлощадь;
		
		Если ТекСтрокаГлавная.Проживает Тогда
			// регистр УПЖКХ_СведенияОПроживающих
			Движение = Движения.УПЖКХ_СведенияОПроживающих.Добавить();
			Движение.Период                          = СтруктураШапкиДокумента.Дата;
			Движение.Жилец                           = ТекСтрокаГлавная.Проживающий;
			Движение.ЛицевойСчет                     = СтруктураШапкиДокумента.ЛицевойСчет;
			Движение.Проживает                       = ТекСтрокаГлавная.Проживает;
			Если ТекСтрокаГлавная.ДатаЗаселения = '00010101' Тогда
				Движение.ДатаИзменения               = СтруктураШапкиДокумента.Дата;
			Иначе
				Движение.ДатаИзменения               = ТекСтрокаГлавная.ДатаЗаселения;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрокаГлавная.Зарегистрирован Тогда
			// регистр УПЖКХ_СведенияОЗарегистрированных
			Движение = Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
			Движение.Период                          = СтруктураШапкиДокумента.Дата;
			Движение.Жилец                           = ТекСтрокаГлавная.Проживающий;
			Движение.ЛицевойСчет                     = СтруктураШапкиДокумента.ЛицевойСчет;
			Движение.Зарегистрирован                 = ТекСтрокаГлавная.Зарегистрирован;
			Движение.ВременнаяРегистрация            = Ложь;
			Если ТекСтрокаГлавная.ДатаРегистрации = '00010101' Тогда
				Движение.ДатаИзменения               = СтруктураШапкиДокумента.Дата;
			Иначе
				Движение.ДатаИзменения               = ТекСтрокаГлавная.ДатаРегистрации;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамИзГлавнойТаблицы()

// Формирует движения по регистрам собственности.
//
Процедура ДвиженияПоРегистрамСобственности(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	ИтоговыйЗнаменательДолиСобственности = ТаблицаЛицевыхСчетов.Итог("ДоляСобственностиЗнаменатель");
	
	// регистр УПЖКХ_СобственностьНаПомещения
	Движение = Движения.УПЖКХ_СобственностьНаПомещения.Добавить();
	Движение.Период                     = СтруктураШапкиДокумента.Дата;
	Движение.Помещение                  = СтруктураШапкиДокумента.Помещение;
	Движение.ВидСобственности           = Перечисления.УПЖКХ_ВидыСобственности.Частная;
	
	Если СтруктураШапкиДокумента.КоличествоСобственников <= 1 Тогда
		Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная;
	ИначеЕсли СтруктураШапкиДокумента.КоличествоСобственников > 1 И ИтоговыйЗнаменательДолиСобственности = 0 Тогда

		Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная;
	Иначе
		Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая;
	КонецЕсли;
	Движение.Действует                  = Истина;
	
	// регистр УПЖКХ_СобственникиПомещений
	Для Каждого ТекСтрокаГлавная Из ТаблицаЛицевыхСчетов Цикл
		
		Если ТекСтрокаГлавная.Собственник Тогда
			
			Движение = Движения.УПЖКХ_СобственникиПомещений.Добавить();
			Движение.Период                           = СтруктураШапкиДокумента.Дата;
			Движение.Собственник                      = ТекСтрокаГлавная.ФизЛицо;
			Движение.Помещение                        = СтруктураШапкиДокумента.Помещение;
			Движение.ДоляСобственникаЧислитель        = ТекСтрокаГлавная.ДоляСобственностиЧислитель;
			Движение.ДоляСобственникаЗнаменатель      = ТекСтрокаГлавная.ДоляСобственностиЗнаменатель;
			Движение.ОснованиеПолученияВСобственность = ТекСтрокаГлавная.ОснованиеПолученияВСобственность;
			Движение.ВидДокумента                     = ТекСтрокаГлавная.ВидДокументаСобственности;
			Движение.НомерДокумента                   = ТекСтрокаГлавная.НомерДокументаСобственности;
			Движение.ДатаДокумента                    = ТекСтрокаГлавная.ДатаДокументаСобственности;
			Движение.Действует                        = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистру "Размеры долей лицевых счетов".
//
Процедура ДвиженияПоРегиструРазмерыДолейЛС(Отказ)
	
	НаборЗаписей = РегистрыСведений.КВП_РазмерыДолейЛицевыхСчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Дата);
	НаборЗаписей.Отбор.Объект.Установить(ЛицевойСчет.Адрес);
	НаборЗаписей.Отбор.ЛицевойСчет.Установить(ЛицевойСчет);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		СтрокаДвижения = НаборЗаписей.Добавить();
		СтрокаДвижения.Период              = Дата;
		СтрокаДвижения.Объект              = ЛицевойСчет.Адрес;
		СтрокаДвижения.ЛицевойСчет         = ЛицевойСчет;
		СтрокаДвижения.ДоляЧислитель       = ДоляЧислитель;
		СтрокаДвижения.ДоляЗнаменатель     = ДоляЗнаменатель;
		СтрокаДвижения.ДокументРегистратор = Ссылка;
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструРазмерыДолейЛС()

// Процедура удаляет записи в РС "Размеры долей лицевых счетов" по регистратору.
//
Процедура ОчиститьДвиженияВРегистреРазмерыДолейЛС(Отказ)
	
	НаборЗаписей = РегистрыСведений.КВП_РазмерыДолейЛицевыхСчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЛицевойСчет.Адрес);
	НаборЗаписей.Отбор.ЛицевойСчет.Установить(ЛицевойСчет);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		
		// В старой версии регистра "КВП_РазмерыДолейЛицевыхСчетов" не было реквизита "ДокументРегистратор", поэтому на данный момент
		// нельзя однозначно определить какая запись регистра соответствует текущему документу, движения которого пытаемся очистить.
		// Также при поиске записи в регистре нельзя устанавливать отбор по периоду записи, равному дате текущего документа, т.к. записи
		// регистра можно было формировать/редактировать вручную или автоматически без привязки к конкретному регистратору.
		// Кроме очистки движений необходимо заполнить реквизиты документа "ДоляЧислитель" и "ДоляЗнаменатель", чтобы при проведении
		// записать в регистр "КВП_РазмерыДолейЛицевыхСчетов" корректные сведения о долях. Для этого используем следующий алгоритм:
		// 1. Пытаемся найти запись, в которой в качестве регистратора указан текущий документ (в случае, если документ создан недавно).
		// 2. Если такую запись найти удалось, запоминаем размеры долей и удаляем запись.
		// 3. Если запись с нужным нам регистратором найти не удалось, то используем самую раннюю запись.
		
		// 1.
		ЕстьЗаписьСТекущимРегистратором = Ложь;
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписей Цикл
			Если СтрокаЗаписи.ДокументРегистратор = Ссылка Тогда
				ЕстьЗаписьСТекущимРегистратором = Истина;
				
				//2. 
				ДоляЧислитель   = СтрокаЗаписи.ДоляЧислитель;
				ДоляЗнаменатель = СтрокаЗаписи.ДоляЗнаменатель;
				
				НаборЗаписей.Удалить(СтрокаЗаписи);
				Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// 3.
		Если Не ЕстьЗаписьСТекущимРегистратором Тогда
			СамаяРаняяЗапись = НаборЗаписей.Получить(0);
			
			ДоляЧислитель   = СамаяРаняяЗапись.ДоляЧислитель;
			ДоляЗнаменатель = СамаяРаняяЗапись.ДоляЗнаменатель;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДвиженияВРегистреРазмерыДолейЛС()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Выполняется при вводе на основании. 
// Заполняем реквизиты документа исходя из ДокументаОснования.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ЛицевойСчет     = ДанныеЗаполнения;
		ОбъектОснование = ДанныеЗаполнения;
	КонецЕсли;

КонецПроцедуры  //ОбработкаЗаполнения()

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПараметрыПроведения = Документы.КВП_ОткрытиеЛицевогоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	ТаблицаЛицевыхСчетов    = ПараметрыПроведения.ТаблицаЛицевыхСчетов;
	
	// Добавим в структуру шапки документа количество собственников.
	КоличествоСобственников = ТаблицаЛицевыхСчетов.НайтиСтроки(Новый Структура("Собственник", Истина)).Количество();
	СтруктураШапкиДокумента.Вставить("КоличествоСобственников", КоличествоСобственников);
	
	Если (ТипЗнч(СтруктураШапкиДокумента.ОтветственныйСобственник) = Тип("СправочникСсылка.УПЖКХ_Жильцы")) Тогда
		СтруктураШапкиДокумента.Вставить("ФизЛицоОтветственногоСобственника",
		                                 СтруктураШапкиДокумента.ОтветственныйСобственник.ФизЛицо);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// регистр УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета
		ДвиженияПоРегиструОтветственныйСобственникНанимательЛицевогоСчета(СтруктураШапкиДокумента);
		
		// регистр КВП_ЛицевыеСчета
		ДвиженияПоРегиструЛицевыеСчета(СтруктураШапкиДокумента);
		
		// регистр КВП_УчетКоличестваЖильцовПоЛицевымСчетам
		ДвиженияПоРегиструКВП_УчетКоличестваЖильцовПоЛицевымСчетам(СтруктураШапкиДокумента);
		
		// движения, формируемые из содержимого таблицы "Главная"
		ДвиженияПоРегистрамИзГлавнойТаблицы(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
		
		Если мУпрощенныйВариантУчетаСобственников И КоличествоСобственников > 0 Тогда
			
			// движения по регистрам собственности
			ДвиженияПоРегистрамСобственности(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			
		КонецЕсли;
		
		// Сформируем движения по долям лицевых счетов.
		ДвиженияПоРегиструРазмерыДолейЛС(Отказ);
		
	КонецЕсли;
	
	// Проверка корректности долей должна быть выполнена в последнюю очередь, так как
	// для проверки нужны движения по регистру лицевых счетов и размеров долей.
	// Сбросим наборы записей в регистры и проверим размеры долей.
	Если Не Отказ Тогда
		Движения.Записать();
		ПроверитьКорректностьУстановкиДолейЛС(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Установим знаменатель доли значением по умолчанию, если он нулевой.
	Если ДоляЗнаменатель = 0 Тогда
		ДоляЗнаменатель = 1;
	КонецЕсли;
	
	// При проведении нужно очистить размеры долей л/с и поместить значения доли в реквизиты документа.
	// Это нужно сделать именно перед записью документа в рамках транзации проведения.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОчиститьДвиженияВРегистреРазмерыДолейЛС(Отказ);
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(Главная,"Проживающий");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйСобственник");
	ПроверяемыеРеквизиты.Добавить("Главная.Проживающий");
	
	// В случае, если ответственным собственником указан контрагент,
	// производить проверку заполнения реквизита "Контрагент".
	Если ВладелецКонтрагент Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	ТаблицаЛицевыхСчетов = Главная.Выгрузить();
	
	КоличествоСобственников = ТаблицаЛицевыхСчетов.НайтиСтроки(Новый Структура("Собственник", Истина)).Количество();
	
	// Выполняем проверку на заполнение табличной части
	Если ТаблицаЛицевыхСчетов.Количество() = 0 
	   И НЕ УказыватьКоличествоПрожИЗарегЧислами
	   И ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд
	   И НЕ ВладелецКонтрагент Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Не заполнена табличная часть документа. Проведение документа невозможно.", Отказ);
	КонецЕсли;
	
	// Проверяем наличие физического лица у жильца лицевого счета.
	Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Проживающий) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Проживающий.ФизЛицо) Тогда
			
			ТекстОшибки = "Не заполнено физическое лицо для жильца """ + Строка(ТекСтрока.Проживающий) 
			              + """ (Справочник ""Жильцы"", поле ""Имя"")";
			КВП_ПрочиеПроцедурыИФункции.ОшибкаПриПроведении("В строке номер """ + ТекСтрока.НомерСтроки 
			                                                + """: " + ТекстОшибки + "!", Отказ);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка долей собственности на помещение при упрощенном варианте учета собственников.
	Если мУпрощенныйВариантУчетаСобственников Тогда
		УПЖКХ_УчетСобственностиСервер.ПроверитьЗаполнениеДолейСобственностиНаПомещение(ТаблицаЛицевыхСчетов, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверыет корректность установки размера доли лицевого счета.
//
Процедура ПроверитьКорректностьУстановкиДолейЛС(Отказ)
	
	ТаблицаДолейЛСНаПомещении = ПолучитьТаблицуДолей();
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ДоляЗнаменатель", ДоляЗнаменатель);
	ПараметрыПроверки.Вставить("Доли",            ТаблицаДолейЛСНаПомещении);
	ПараметрыПроверки.Вставить("Здание",          ЛицевойСчет.Адрес.Владелец);
	ПараметрыПроверки.Вставить("Комнаты",         ПолучитьСписокПривязанныхКомнат(КонецДня(Дата), ЛицевойСчет));
	
	Отказ = НЕ Документы.КВП_ОткрытиеЛицевогоСчета.ПроверкаДолей(ПараметрыПроверки);
	
КонецПроцедуры // ПроверитьКорректностьУстановкиДолейЛС()

// Возвращает таблицу долей л/с на помешении.
Функция ПолучитьТаблицуДолей()
	
	ТекстОтбора = "";
	ТекстОтбора = "Объект = &Помещение";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Помещение", ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("Дата",      Новый Граница(МоментВремени(), ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес КАК Помещение,
	|	ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетов.ДоляЧислитель, 0) КАК ДоляЧислитель,
	|	ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетов.ДоляЗнаменатель, 0) КАК ДоляЗнаменатель
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, &ТекстФильтра) КАК КВП_ЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&Дата, &ТекстФильтра) КАК КВП_РазмерыДолейЛицевыхСчетов
	|		ПО КВП_ЛицевыеСчета.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетов.ЛицевойСчет
	|ГДЕ
	|	КВП_ЛицевыеСчета.Действует";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстФильтра", ТекстОтбора);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуДолей()

// Обработчик события "ОбработкаУдаленияПроведения" документа.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОчиститьДвиженияВРегистреРазмерыДолейЛС(Отказ);
	
	Если Не Отказ Тогда
		// Добавим дополнительное свойство "ЭтоОтменаПроведенияДокумента". Данное свойство необходимо при работе обработчика
		// подписки на событие "УПЖКХ_ОбновитьПредставленияОтветственныхСобственниковЛС".
		Движения.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ДополнительныеСвойства.Вставить("ЭтоОтменаПроведенияДокумента", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОсновнойПрограммы

мУпрощенныйВариантУчетаСобственников = ИспользуетсяУпрощенныйВариантУчетаСобственников();
УказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();

#КонецОбласти

#КонецЕсли