
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция возвращает таблицу паспортных данных жильцов.
Функция ПолучитьТаблицуПаспортныхДанных(Период, СпПроживающих) Экспорт
	
	ЗапросПаспортныхДанныхПроживающих = Новый Запрос;
	ЗапросПаспортныхДанныхПроживающих.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокумента,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокумента,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокумент,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, ) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО УПЖКХ_Жильцы.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|			И (ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность)
	|ГДЕ
	|	УПЖКХ_Жильцы.Ссылка В(&СпПроживающих)";
	
	ЗапросПаспортныхДанныхПроживающих.УстановитьПараметр("Дата",          Период);
	ЗапросПаспортныхДанныхПроживающих.УстановитьПараметр("СпПроживающих", СпПроживающих);
	
	ТаблицаПаспортныхДанныхПроживающих = ЗапросПаспортныхДанныхПроживающих.Выполнить().Выгрузить();
	
	Возврат ТаблицаПаспортныхДанныхПроживающих;
	
КонецФункции

// Выполняет проверку введенных размеров долей
Функция ПроверкаДолей(ПараметрыПроверки) Экспорт
	
	РезультатПроверки = Истина;
	 //++ Позолотина  закомментировала
	//Если ПараметрыПроверки.ДоляЗнаменатель = 0 Тогда
	//	ТекстСообщения = "Доля лицевого счета указана неверно: знаменатель доли не может быть равен 0";
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
	//	РезультатПроверки = Ложь;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = ПолучитьТекстЗапросаДолейЛС();
	//Запрос.УстановитьПараметр("ТаблицаДолей", ПараметрыПроверки.Доли);
	//ВыборкаПоПомещению = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//Пока ВыборкаПоПомещению.Следующий() Цикл
	//	Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Здание) Тогда
	//		ТекстСообщения = "Здание """ + ВыборкаПоПомещению.Здание + """, ";
	//	Иначе
	//		ТекстСообщения = "";
	//	КонецЕсли;
	//	ТекстСообщения = ТекстСообщения + "Помещение """ + ВыборкаПоПомещению.Помещение + """:" + Символы.ПС;
	//	
	//	Если ВыборкаПоПомещению.ДоляЗнаменатель = 0 Тогда
	//		ТекстСообщения = ТекстСообщения
	//					   + "Доля лицевого счета указана неверно: знаменатель доли не может быть равен 0.
	//						 |Необходимо проверить размеры долей в регистре сведений ""Размеры долей лицевых счетов""";
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
	//		РезультатПроверки = Ложь;
	//	ИначеЕсли ВыборкаПоПомещению.ДоляЧислитель > ВыборкаПоПомещению.ДоляЗнаменатель Тогда
	//		//ТекстСообщения = ТекстСообщения + "Сумма долей лицевых счетов превышает значение делителя: " + ПараметрыПроверки.ДоляЗнаменатель;
	//		//УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
	//		//РезультатПроверки = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Запрос = Новый Запрос();
	//Запрос.Текст = ПолучитьТекстЗапросаКомнатЛС();
	//Запрос.УстановитьПараметр("СписокКомнат", ПараметрыПроверки.Комнаты);
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Пока Результат.Следующий() Цикл
	//	
	//	Если Результат.КолвоЛС > 1 Тогда
	//		
	//		Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Здание) Тогда
	//			ТекстСообщения = "Здание """ + Результат.Здание + """, ";
	//		Иначе
	//			ТекстСообщения = "";
	//		КонецЕсли;
	//		
	//		ТекстСообщения = ТекстСообщения + 
	//						"Помещение """ + Результат.Помещение + """:" + Символы.ПС + 
	//						"Комната " + Результат.Комната + " указана для нескольких л/с";
	//		
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
	//		РезультатПроверки = Ложь;
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	//-- Позолотина	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает текст запроса суммы долей л/с.
Функция ПолучитьТекстЗапросаДолейЛС()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДолей
	|ИЗ
	|	&ТаблицаДолей КАК ТаблицаДолей
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмерыДолей.ЛицевойСчет,
	|	РазмерыДолей.ЛицевойСчет.Адрес КАК Помещение,
	|	РазмерыДолей.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	СУММА(ЕСТЬNULL(РазмерыДолей.ДоляЧислитель, 0)) КАК ДоляЧислитель,
	|	СРЕДНЕЕ(ЕСТЬNULL(РазмерыДолей.ДоляЗнаменатель, 0)) КАК ДоляЗнаменатель
	|ИЗ
	|	ТаблицаДолей КАК РазмерыДолей
	|СГРУППИРОВАТЬ ПО
	|	РазмерыДолей.ЛицевойСчет.Адрес.Владелец,
	|	РазмерыДолей.ЛицевойСчет.Адрес,
	|	РазмерыДолей.ЛицевойСчет
	|ИТОГИ 
	|	СУММА(ДоляЧислитель), СРЕДНЕЕ(ДоляЗнаменатель)
	|ПО
	|	Помещение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса кол-ва комнат л/с.
Функция ПолучитьТекстЗапросаКомнатЛС()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаКомнат
	|ИЗ
	|	&СписокКомнат КАК ТаблицаКомнат
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаКомнат.ЛицевойСчет) КАК КолвоЛС,
	|	ТаблицаКомнат.ЛицевойСчет.Адрес КАК Помещение,
	|	ТаблицаКомнат.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	ТаблицаКомнат.Комната
	|ИЗ
	|	ТаблицаКомнат КАК ТаблицаКомнат
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКомнат.ЛицевойСчет.Адрес.Владелец,
	|	ТаблицаКомнат.ЛицевойСчет.Адрес,
	|	ТаблицаКомнат.Комната";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать

// Формирует строковое представление указанной даты для формы ЗП.
//
// Параметры
//  ЗначениеДаты – дата для представления.
//
// Возвращаемое значение:
//  Строка – описание даты.
//
Функция ФорматДатыФормаЗП(ЗначениеДаты)
	
	ФорматДаты = Формат(ЗначениеДаты, "ДФ=dd.MMMM.yyyy");
	ДлинаДаты = СтрДлина(ФорматДаты);
	
	ФорматДаты = Лев(ФорматДаты, 2) + Символы.ПС
	           + Сред(ФорматДаты, 4, ДлинаДаты - 3 - 5) + Символы.ПС
	           + Прав(ФорматДаты, 4);
	
	Возврат ФорматДаты;
	
КонецФункции // ФорматДатыФормаЗП()

// Формирует печатную форму 
Функция ПечатьФормаЗП(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_КВП_ОткрытиеЛицевогоСчета_ФормаЗП";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = ПолучитьОбщийМакет("КВП_ФормаЗП");
		
		СпПроживающих = ТекОбъект.Главная.ВыгрузитьКолонку("Проживающий");
		ТаблицаПаспортныхДанныхПроживающих = Документы.КВП_ОткрытиеЛицевогоСчета.ПолучитьТаблицуПаспортныхДанных(ТекОбъект.Дата, СпПроживающих);
		
		// Вывод шапки документа.
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1_1");
		ДокументКемВыдан = "";
		Для Каждого СтрокаТабличнойЧасти Из ТекОбъект.Главная Цикл
			ТекПроживающий = ТаблицаПаспортныхДанныхПроживающих.Найти(СтрокаТабличнойЧасти.Проживающий, "Проживающий");
			Если НЕ ТекПроживающий = Неопределено Тогда
				ДокументКемВыдан = ТекПроживающий.КемВыданДокумент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ДокументКемВыдан_1 = "";
		ДокументКемВыдан_2 = "";
		РазделитьТекстНаДвеСтроки(ДокументКемВыдан, 50, ДокументКемВыдан_1, ДокументКемВыдан_2);
		ОбластьМакета.Параметры.ДокументКемВыдан_1 = ДокументКемВыдан_1;
		ОбластьМакета.Параметры.ДокументКемВыдан_2 = ДокументКемВыдан_2;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Для Каждого СтрокаТабличнойЧасти Из ТекОбъект.Главная Цикл
			
			ФизЛицо = СтрокаТабличнойЧасти.Проживающий;
			
			ДокументСерия = "";
			ДокументНомер = "";
			ДокументДатаВыдачи = "";
			ТекПроживающий = ТаблицаПаспортныхДанныхПроживающих.Найти(ФизЛицо, "Проживающий");
			Если НЕ ТекПроживающий = Неопределено Тогда
				ДокументСерия = ТекПроживающий.СерияДокумента;
				ДокументНомер = ТекПроживающий.НомерДокумента;
				ДокументДатаВыдачи = ФорматДатыФормаЗП(ТекПроживающий.ДатаВыдачиДокумента);
			КонецЕсли;
			
			// Подготовка данных по проживающему.
			ДанныеПроживающего = ПолучитьОбщиеДанныеПоПроживающему(ФизЛицо, ТекОбъект.Дата);
			ПроживающийФИО = "";
			ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Фамилия;
			ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Имя;
			ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Отчество;
			СерияНомерНовые  = "" + ДокументСерия + Символы.ПС + ДокументНомер;
			СерияНомерСтарые = "";
			ПолПроживающего  = "";
			Если      ДанныеПроживающего.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ПолПроживающего = "М";
			ИначеЕсли ДанныеПроживающего.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ПолПроживающего = "Ж";
			КонецЕсли;
			СтруктПоляОписания = Новый Структура("СтранаРожд,ОбластьРожд,НаселенныйПунктРожд");
			МестоРождения = СформироватьСтрокуОписания(ДанныеПроживающего, СтруктПоляОписания);
			СтруктОтбор = Новый Структура("Объект, ЛицевойСчет", ФизЛицо, ТекОбъект.ЛицевойСчет);
			
			ПроживающийЗарегистрирован = СтрокаТабличнойЧасти.Зарегистрирован;
			СтруктПоляОписания = Новый Структура("РегионРег,НаселенныйПунктРег,УлицаРег,НомерДомаРег,КвартираРег");
			СведенияОРегистрации = ?(ПроживающийЗарегистрирован, "1", "2") + Символы.ПС
								 + СформироватьСтрокуОписания(ДанныеПроживающего, СтруктПоляОписания);
			
			// Вывод строки таблицы.
			ОбластьМакета = Макет.ПолучитьОбласть("Страница1_Строка");
			ОбластьМакета.Параметры.НомерСтроки       = СтрокаТабличнойЧасти.НомерСтроки;
			ОбластьМакета.Параметры.ФИО               = ПроживающийФИО;
			ОбластьМакета.Параметры.СерияНомерНовые   = СерияНомерНовые;
			ОбластьМакета.Параметры.ДатаВыдачиНовая   = ДокументДатаВыдачи;
			ОбластьМакета.Параметры.СерияНомерСтарые  = "";
			ОбластьМакета.Параметры.ДатаВыдачиСтарая  = "";
			ОбластьМакета.Параметры.ПолПроживающего   = ПолПроживающего;
			ОбластьМакета.Параметры.ДатаРождения      = ФорматДатыФормаЗП(ДанныеПроживающего.ДатаРожденияДатой);
			ОбластьМакета.Параметры.МестоРождения     = МестоРождения;
			ОбластьМакета.Параметры.СведенияОРегистрации = СведенияОРегистрации;
			ОбластьМакета.Параметры.КодПричиныЗамены  = "";
			ОбластьМакета.Параметры.ДатаВыдачиФакт    = "";
			ОбластьМакета.Параметры.ПрежниеПерсДанные = "";
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1_2");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод второй страницы.
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета = Макет.ПолучитьОбласть("Страница2");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УПЖКХ_ТиповыеМетодыСервер.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, ТекОбъект);
	
	КонецЦикла;
	
	// Зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура печати документа.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФормаЗП") Тогда
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФормаЗП", "Сведения о документах, удостоверяющих личность",  ПечатьФормаЗП(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ЛицевойСчет,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ОбъектОснование,
	|	Реквизиты.Ответственный,
	|	Реквизиты.КоличествоПроживающих,
	|	Реквизиты.КоличествоЗарегистрированных,
	|	Реквизиты.ОтветственныйСобственник,
	|	Реквизиты.ВладелецКонтрагент,
	|	Реквизиты.ЛицевойСчет.Адрес КАК Помещение,
	|	Реквизиты.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения
	|ИЗ
	|	Документ.КВП_ОткрытиеЛицевогоСчета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,ЛицевойСчет,Контрагент,
								|ОбъектОснование,Ответственный,КоличествоПроживающих,КоличествоЗарегистрированных,
								|ОтветственныйСобственник,ВладелецКонтрагент,Помещение,ТипПомещения");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	// Подготовим таблицу лицевых счетов.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Проживающий,
	|	Реквизиты.Проживающий.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.Собственник,
	|	Реквизиты.Проживает,
	|	Реквизиты.Зарегистрирован,
	|	Реквизиты.ВладелецЕдинственногоЖилья,
	|	Реквизиты.ДополнительнаяПлощадь,
	|	Реквизиты.ДоляСобственностиЧислитель,
	|	Реквизиты.ДоляСобственностиЗнаменатель,
	|	Реквизиты.ДатаРегистрации,
	|	Реквизиты.ДатаЗаселения,
	|	Реквизиты.СтепеньРодства,
	|	Реквизиты.НомерСтроки,
	|	Реквизиты.ОснованиеПолученияВСобственность,
	|	Реквизиты.ВидДокументаСобственности,
	|	Реквизиты.НомерДокументаСобственности,
	|	Реквизиты.ДатаДокументаСобственности
	|ИЗ
	|	Документ.КВП_ОткрытиеЛицевогоСчета.Главная КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	ТаблицаЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроведения.Вставить("ТаблицаЛицевыхСчетов", ТаблицаЛицевыхСчетов);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли