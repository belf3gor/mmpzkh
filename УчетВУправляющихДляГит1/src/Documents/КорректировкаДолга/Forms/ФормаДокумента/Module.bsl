&НаКлиенте
Перем СтарыйВидОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеКорректировкаДолга";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьПараметрыВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ВидОперацииПриИзмененииСервер();
	
	Если НЕ Объект.ВидОперации = СтарыйВидОперации Тогда
	
		Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
			
			Объект.ДебиторскаяЗадолженность.Очистить();
			Объект.КредиторскаяЗадолженность.Очистить();
			
			Объект.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
			Объект.СчетКт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
			
			Объект.СубконтоДт1 = Неопределено;
			Объект.СубконтоДт2 = Неопределено;
			Объект.СубконтоДт3 = Неопределено;
			Объект.СубконтоКт1 = Неопределено;
			Объект.СубконтоКт2 = Неопределено;
			Объект.СубконтоКт3 = Неопределено;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов") 
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
			ПриИзмененииТипаАванса();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтарыйвидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ПриИзмененииДатыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)

	ВалютаДокументаПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)

	КурсДокументаПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	Если Элемент = Элементы.Дебитор Тогда

		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов")
			или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
			
			Если Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.АвансыПоставщику")
				или Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.ЗадолженностьПокупателя")
				и Объект.ТипАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.СамогоКонтрагента") Тогда
				Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
			КонецЕсли;
			
			Объект.ДебиторскаяЗадолженность.Очистить();
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности")
			или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
			
			Объект.КредиторскаяЗадолженность.Очистить();
			Объект.ДебиторскаяЗадолженность.Очистить();
			
		Иначе
			Объект.ДебиторскаяЗадолженность.Очистить();
		КонецЕсли;
		
	Иначе
		Объект.ДебиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов")
		или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
		
		Если Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.АвансыПокупателя")
			или Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.ЗадолженностьПоставщику")
			и Объект.ТипАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.СамогоКонтрагента") Тогда
			Объект.КонтрагентДебитор = Объект.КонтрагентКредитор;
		КонецЕсли;
		
		Объект.КредиторскаяЗадолженность.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности")
		или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			КонтрагентКредиторПриИзмененииСервер();
		КонецЕсли;
		
	Иначе
		Объект.КредиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАвансаПриИзменении(Элемент)
	
	УправлениеФормой();
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
	
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАвансаПриИзменении(Элемент)
	
	УправлениеФормой();
	
	ПриИзмененииТипаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадолженностиДляПереносаПриИзменении(Элемент)
		
	УправлениеФормой();
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();
	
КонецПроцедуры

// Закладка "СчетаУчета"

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект,
		Объект,
		ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект,
		Объект,
		ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоДт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоДт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоДт(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоДт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоКт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоКт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоКт(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоКт(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
	Иначе
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагентаПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииКорДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность");
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьКурсВзаиморасчетовПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СделкаНачалоВыбора(Элемент, Объект, ТекущиеДанные, "Дт")
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьВспомогательнаяСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательная.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СделкаНачалоВыбора(Элемент, Объект, ТекущиеДанные, "Дт")
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета, Ложь);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСчетУчетаРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПриИзмененииСчетаРасчетовВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "ДебиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПослеУдаления(Элемент)
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
		
		УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьКурсВзаиморасчетовПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СделкаНачалоВыбора(Элемент, Объект, ТекущиеДанные, "Кт")
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагентаПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, КонтрагентДебитор, КонтрагентКредитор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	
	ПриИзмененииКорДоговораВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность");
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета, Ложь);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСчетУчетаРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элемент.Родитель.Родитель.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка,  
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;

	ПриИзмененииСчетаРасчетовВСтроке(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "КредиторскаяЗадолженность", ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(Элемент.Родитель.Родитель.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
		
		УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПослеУдаления(Элемент)
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьВзаиморасчеты(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДебиторку(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторку(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСчетДт", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСчетКт", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Только для валютной дебиторской задолженности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьКратностьВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьВспомогательнаяКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьВспомогательнаяКратностьВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДебиторскаяЗадолженность.КурсВзаиморасчетовДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРамки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Только для валютной кредиторской задолженности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаКредиторскаяЗадолженностьКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаКредиторскаяЗадолженностьКратностьВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КредиторскаяЗадолженность.КурсВзаиморасчетовДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРамки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Не используются при списании задолженности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаКредиторскаяЗадолженностьСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДебиторскаяЗадолженностьВспомогательнаяСуммаНУ");

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийКорректировкаДолга.Прочее);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Разница

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Разница");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Разница", ВидСравненияКомпоновкиДанных.Заполнено);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатПроблемаЦвет);


	// Дебитор, ДебиторВспомогательный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Дебитор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДебиторВспомогательный");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоДебитор", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Кредитор

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Кредитор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоКредитор", ВидСравненияКомпоновкиДанных.НеРавно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
	// Инициализируем реквизиты формы:
	ПоказыватьВДокументахСчетаУчета = Истина;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбновитьФлагиУсловногоОформления(ЭтотОбъект);
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	//Управление доступностью курсом и кратностью расчетов
	Элементы.КурсДокумента.Видимость = ЭтотОбъект.КурсВалютыВШапке;
	
	ФормаОбщаяКомандаПечатьЧека = Элементы.Найти("ФормаОбщаяКомандаПечатьЧека");
	Если ФормаОбщаяКомандаПечатьЧека <> Неопределено Тогда
		ФормаОбщаяКомандаПечатьЧека.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности);
	КонецЕсли; 
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорДоговорКонтрагента.Видимость = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорСчетУчетаРасчетов.Видимость = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.СчетаУчета.Видимость = Ложь;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
			Элементы.ВидАванса.Заголовок = "Зачесть аванс";
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			Элементы.ВидАванса.Заголовок = "Зачесть задолженность";
		КонецЕсли;
		
		Элементы.ВидАванса.Видимость = Истина;
		
		Элементы.ТипАванса.Видимость = Истина;
		
		Элементы.ВидЗадолженностиДляПереноса.Видимость = Ложь;
		
		//Пропишем виды значений списка выбора переключателя "Зачет аванса"/"Зачет задолженности"
		//Получаем список выбора
		СписокЗначенийПереключателяВидАванса = Элементы.ВидАванса.СписокВыбора;
		
		//Проверяем, если текущее значение на в списке, соответствующем виду операции, то
		Если (СписокЗначенийПереключателяВидАванса.НайтиПоЗначению(Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя) = Неопределено 
			И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов)
			ИЛИ (СписокЗначенийПереключателяВидАванса.НайтиПоЗначению(Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя) = Неопределено 
			И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности)
			ИЛИ СписокЗначенийПереключателяВидАванса.Количество() > 2 Тогда
			
			//очищаем список
			СписокЗначенийПереключателяВидАванса.Очистить();
			
		КонецЕсли;
		
		//Если список пустой, то заполняем его значениями соответствующими виду операции
		Если СписокЗначенийПереключателяВидАванса.Количество() = 0 Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
				
				СписокЗначенийПереключателяВидАванса.Добавить(Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя, "Покупателя");
				СписокЗначенийПереключателяВидАванса.Добавить(Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику, "Поставщику");
				
				Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ПустаяСсылка()
					ИЛИ (НЕ Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
					И НЕ Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику) Тогда
					Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
				КонецЕсли;
				
			Иначе
				
				СписокЗначенийПереключателяВидАванса.Добавить(Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя, "Покупателя");
				СписокЗначенийПереключателяВидАванса.Добавить(Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, "Поставщику");
				
				Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ПустаяСсылка()
					ИЛИ (НЕ Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя
					И НЕ Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику) Тогда
					Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.ПустаяСсылка() Тогда
			Объект.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.СамогоКонтрагента;
		КонецЕсли;
		
		//Зададим представление элементов списка выбора переключателя "В счет задолженности" в зависимости от выбранных значений
		//переключателя "Зачет авансов"/"Зачет задолженности" и вида операции
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
			
			Если НЕ Элементы.ТипАванса.СписокВыбора[0].Представление = "Покупателя перед нашей организацией"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
				Элементы.ТипАванса.СписокВыбора[0].Представление = "Покупателя перед нашей организацией";
			ИначеЕсли НЕ Элементы.ТипАванса.СписокВыбора[0].Представление = "Нашей организации перед покупателем"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
				Элементы.ТипАванса.СписокВыбора[0].Представление = "Нашей организации перед покупателем";
			КонецЕсли;
			
			Если НЕ Элементы.ТипАванса.СписокВыбора[1].Представление = "Третьего лица перед нашей организацией"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
				Элементы.ТипАванса.СписокВыбора[1].Представление = "Третьего лица перед нашей организацией";
			ИначеЕсли НЕ Элементы.ТипАванса.СписокВыбора[1].Представление = "Нашей организации перед третьим лицом"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
				Элементы.ТипАванса.СписокВыбора[1].Представление = "Нашей организации перед третьим лицом";
			КонецЕсли;
			
		ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
			
			Если НЕ Элементы.ТипАванса.СписокВыбора[0].Представление = "Нашей организации перед поставщиком"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
				Элементы.ТипАванса.СписокВыбора[0].Представление = "Нашей организации перед поставщиком";
			ИначеЕсли НЕ Элементы.ТипАванса.СписокВыбора[0].Представление = "Поставщика перед нашей организацией"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
				Элементы.ТипАванса.СписокВыбора[0].Представление = "Поставщика перед нашей организацией";
			КонецЕсли;
			
			Если НЕ Элементы.ТипАванса.СписокВыбора[1].Представление = "Нашей организации перед третьим лицом"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
				Элементы.ТипАванса.СписокВыбора[1].Представление = "Нашей организации перед третьим лицом";
			ИначеЕсли НЕ Элементы.ТипАванса.СписокВыбора[1].Представление = "Третьего лица перед нашей организацией"
				и Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
				Элементы.ТипАванса.СписокВыбора[1].Представление = "Третьего лица перед нашей организацией";
			КонецЕсли;
			
		КонецЕсли;
		
		//Зададим видимость и заголовки зависимым элементам формы.
		Если Объект.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.СамогоКонтрагента Тогда
		
			Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
				или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок = "Авансы покупателя (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок = "Авансы покупателя (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность покупателя (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность покупателя (дебиторская задолженность)";
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок = "Покупатель (кредитор)" Тогда
						Элементы.Кредитор.Заголовок = "Покупатель (кредитор)";
					КонецЕсли;
					
					Если Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				Иначе
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Заголовок = "Задолженность покупателя (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженность.Заголовок = "Задолженность покупателя (дебиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность перед покупателем (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность перед покупателем (кредиторская задолженность)";
					КонецЕСли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Заголовок   = "Покупатель (дебитор)" Тогда
						Элементы.Дебитор.Заголовок = "Покупатель (дебитор)";
					КонецЕсли;
					
					
					Если НЕ Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Ложь;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику
				или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Авансы поставщику (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Авансы поставщику (дебиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность поставщику (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность поставщику (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Заголовок = "Поставщик (дебитор)" Тогда
						Элементы.Дебитор.Заголовок = "Поставщик (дебитор)";
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Ложь;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				Иначе
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность поставщику (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность поставщику (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность поставщика (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность поставщика (дебиторская задолженность)";
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок   = "Поставщик (кредитор)" Тогда
						Элементы.Кредитор.Заголовок   = "Поставщик (кредитор)";
					КонецЕсли;
					
					Если Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
				или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок = "Авансы покупателя (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок = "Авансы покупателя (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность третьего лица (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность третьего лица (дебиторская задолженность)";
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок = "Покупатель (кредитор)" Тогда
						Элементы.Кредитор.Заголовок               = "Покупатель (кредитор)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторВспомогательный.Заголовок = "Третье лицо (дебитор)" Тогда
						Элементы.ДебиторВспомогательный.Заголовок = "Третье лицо (дебитор)";
					КонецЕсли;
					
					Если Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Истина;
					КонецЕсли;
					
				Иначе
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Задолженность покупателя (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Задолженность покупателя (дебиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность перед третьим лицом (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность перед третьим лицом (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Заголовок  = "Покупатель (дебитор)" Тогда
						Элементы.Дебитор.Заголовок  = "Покупатель (дебитор)";
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок = "Третье лицо (кредитор)" Тогда
						Элементы.Кредитор.Заголовок = "Третье лицо (кредитор)";
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику
				или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Авансы поставщику (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженность.Заголовок  =  "Авансы поставщику (дебиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность перед третьим лицом (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок =  "Задолженность перед третьим лицом (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Заголовок  = "Поставщик (дебитор)" Тогда
						Элементы.Дебитор.Заголовок  = "Поставщик (дебитор)";
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок = "Третье лицо (кредитор)" Тогда
						Элементы.Кредитор.Заголовок = "Третье лицо (кредитор)";
					КонецЕсли;
					
					Если НЕ Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Ложь;
					КонецЕсли;
					
				Иначе
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность поставщику (кредиторская задолженность)" Тогда
						Элементы.КредиторскаяЗадолженность.Заголовок = "Задолженность поставщику (кредиторская задолженность)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность третьего лица (дебиторская задолженность)" Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Заголовок = "Задолженность третьего лица (дебиторская задолженность)";
					КонецЕсли;
					
					Если Элементы.ДебиторскаяЗадолженность.Видимость Тогда
						Элементы.ДебиторскаяЗадолженность.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.КредиторскаяЗадолженность.Видимость Тогда
						Элементы.КредиторскаяЗадолженность.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость Тогда
						Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Заголовок   = "Поставщик (кредитор)" Тогда
						Элементы.Кредитор.Заголовок   = "Поставщик (кредитор)";
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторВспомогательный.Заголовок = "Третье лицо (дебитор)" Тогда
						Элементы.ДебиторВспомогательный.Заголовок = "Третье лицо (дебитор)";
					КонецЕсли;
					
					Если Элементы.Дебитор.Видимость Тогда
						Элементы.Дебитор.Видимость = Ложь;
					КонецЕсли;
					
					Если НЕ Элементы.Кредитор.Видимость Тогда
						Элементы.Кредитор.Видимость = Истина;
					КонецЕсли;
					
					Если НЕ Элементы.ДебиторВспомогательный.Видимость Тогда
						Элементы.ДебиторВспомогательный.Видимость = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ПустаяСсылка() Тогда
			Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		КонецЕсли;
		
		Элементы.ВидАванса.Видимость = Ложь;
		Элементы.ТипАванса.Видимость = Ложь;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Элементы.СчетаУчета.Видимость = Ложь;
		Иначе
			
			Элементы.СчетаУчета.Заголовок = "Счет списания";
			Элементы.СчетаУчета.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.ВидЗадолженностиДляПереноса.Заголовок = ?(Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности, "Перенести", "Списать");
		
		Элементы.ВидЗадолженностиДляПереноса.Видимость = Истина;
		
		СписокВыбораПереключателя = Элементы.ВидЗадолженностиДляПереноса.СписокВыбора;
		
		Если СписокВыбораПереключателя.Количество() < 4 Тогда
			
			СписокВыбораПереключателя.Очистить();
			
			СписокВыбораПереключателя.Добавить(Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя, "Задолженность покупателя");
			СписокВыбораПереключателя.Добавить(Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя,        "Авансы покупателя");
			СписокВыбораПереключателя.Добавить(Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, "Задолженность поставщику");
			СписокВыбораПереключателя.Добавить(Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику,        "Авансы поставщику");
			
			Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ПустаяСсылка() Тогда
				Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
		
		Элементы.ДебиторВспомогательный.Видимость = Ложь;
		
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя 
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику Тогда
			
			Элементы.Дебитор.Заголовок  = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику, "Поставщик (дебитор)", "Покупатель (дебитор)");
			Элементы.Кредитор.Заголовок = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику, "Новый поставщик",     "Новый покупатель");
			
			Элементы.ДебиторскаяЗадолженность.Заголовок  = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику, "Авансы поставщику (дебиторская задолженность)", "Задолженность покупателя (дебиторская задолженность)");
			
			Элементы.ДебиторскаяЗадолженность.Видимость  = Истина;
			Элементы.КредиторскаяЗадолженность.Видимость = Ложь;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				
				Элементы.ГруппаСчетДт.Видимость = Истина;
				Элементы.ГруппаСчетКт.Видимость = Ложь;
				
				Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Ложь;
				Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость  = Ложь;
				
				Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
				Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного  = Ложь;
				
			Иначе
				
				Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Истина;
				Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость  = Истина;
				
				Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
				Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного  = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя 
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
			
			Элементы.Дебитор.Заголовок  = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, "Поставщик (кредитор)", "Покупатель (кредитор)");
			Элементы.Кредитор.Заголовок = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, "Новый поставщик",     "Новый покупатель");
			
			Элементы.КредиторскаяЗадолженность.Заголовок = ?(Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, "Задолженность поставщику (кредиторская задолженность)", "Авансы покупателя (кредиторская задолженность)");
			
			Элементы.ДебиторскаяЗадолженность.Видимость  = Ложь;
			Элементы.КредиторскаяЗадолженность.Видимость = Истина;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				
				Элементы.ГруппаСчетДт.Видимость = Ложь;
				Элементы.ГруппаСчетКт.Видимость = Истина;
				
				Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Ложь;
				Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость  = Ложь;
				
				Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
				Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного  = Ложь;
				
			Иначе
				
				Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость = Истина;
				Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость  = Истина;
				
				Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
				Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного  = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.Дебитор.Видимость                = Истина;
		Элементы.Кредитор.Видимость               = ?(Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности, Истина, Ложь);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее или НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Видимость               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Видимость                = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорДоговорКонтрагента.Видимость = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.Видимость                = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорСчетУчетаРасчетов.Видимость = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.АвтоОтметкаНезаполненного                = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ТаблицаКредиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного               = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного                = Ложь;
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорСчетУчетаРасчетов.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ВидАванса.Видимость = Ложь;
		Элементы.ТипАванса.Видимость = Ложь;
		Элементы.ВидЗадолженностиДляПереноса.Видимость = Ложь;
		
		Элементы.Дебитор.Заголовок  = "Дебитор";
		Элементы.Кредитор.Заголовок = "Кредитор";
		
		Элементы.Дебитор.Видимость                = Истина;
		Элементы.Кредитор.Видимость               = Истина;
		Элементы.ДебиторВспомогательный.Видимость = Ложь;
		
		Элементы.ДебиторскаяЗадолженность.Заголовок  = "Дебиторская задолженность";
		Элементы.КредиторскаяЗадолженность.Заголовок = "Кредиторская задолженность";
		
		Элементы.ДебиторскаяЗадолженность.Видимость  = Истина;
		Элементы.КредиторскаяЗадолженность.Видимость = Истина;
		Элементы.ДебиторскаяЗадолженностьВспомогательная.Видимость = Ложь;
		
		Элементы.СчетаУчета.Заголовок = "Счета учета";
		Элементы.СчетаУчета.Видимость = Истина;
		
		Элементы.ГруппаСчетДт.Видимость = Истина;
		Элементы.ГруппаСчетКт.Видимость = Истина;
		
	КонецЕсли;
	
	УстановитьФлагОтметкиНезаполненногоСчетов(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоДебитора(ЭтотОбъект);
	УстановитьФлагОтметкиНезаполненногоКредитора(ЭтотОбъект);
	
	УстановитьПараметрыВыбора();
	УстановитьДоступностьДоговоров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакАвансаВСтроке(Знач ИмяТабЧасти, ДанныеСтроки, Знач РеквизитыДоговора)

	Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
		ДанныеСтроки.ЭтоАванс = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			ИЛИ (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
				И (БухгалтерскийУчетПовтИсп.СчетВИерархии(ДанныеСтроки.СчетУчетаРасчетов, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
					ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(ДанныеСтроки.СчетУчетаРасчетов, ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал));
	ИначеЕсли ИмяТабЧасти = "КредиторскаяЗадолженность" Тогда
		ДанныеСтроки.ЭтоАванс = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
					ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
				И (БухгалтерскийУчетПовтИсп.СчетВИерархии(ДанныеСтроки.СчетУчетаРасчетов, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)
					ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(ДанныеСтроки.СчетУчетаРасчетов, ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал));
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ТаблицаДоговоров = Объект.ДебиторскаяЗадолженность.Выгрузить(, "ДоговорКонтрагента");
	Для Каждого СтрокаКредиторки Из Объект.КредиторскаяЗадолженность Цикл
		СтрокаДоговора = ТаблицаДоговоров.Добавить();
		СтрокаДоговора.ДоговорКонтрагента = СтрокаКредиторки.ДоговорКонтрагента;
	КонецЦикла; 
	ТаблицаДоговоров.Свернуть("ДоговорКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоров.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагента";
	РеквизитыДоговоров = Запрос.Выполнить().Выгрузить();
	РеквизитыДоговоров.Индексы.Добавить("ДоговорКонтрагента");
	
	Для Каждого ДанныеСтроки Из Объект.ДебиторскаяЗадолженность Цикл
		СтрокаДоговора = РеквизитыДоговоров.Найти(ДанныеСтроки.ДоговорКонтрагента, "ДоговорКонтрагента");
		Если СтрокаДоговора <> Неопределено Тогда
			УстановитьПризнакАвансаВСтроке("ДебиторскаяЗадолженность", ДанныеСтроки, СтрокаДоговора);
			Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				
				Если НЕ ДанныеСтроки.ЭтоАванс Тогда
					ДанныеСтроки.КурсВзаиморасчетовДоступность = СтрокаДоговора.ВалютаВзаиморасчетов <> Объект.ВалютаДокумента;
				Иначе
					ДанныеСтроки.КурсВзаиморасчетовДоступность = Ложь;
				КонецЕсли;
				
			Иначе
				ДанныеСтроки.КурсВзаиморасчетовДоступность = НЕ ДанныеСтроки.ЭтоАванс;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого ДанныеСтроки Из Объект.КредиторскаяЗадолженность Цикл
		СтрокаДоговора = РеквизитыДоговоров.Найти(ДанныеСтроки.ДоговорКонтрагента, "ДоговорКонтрагента");
		Если СтрокаДоговора <> Неопределено Тогда
			УстановитьПризнакАвансаВСтроке("КредиторскаяЗадолженность", ДанныеСтроки, СтрокаДоговора);
			Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				
				Если НЕ ДанныеСтроки.ЭтоАванс Тогда
					ДанныеСтроки.КурсВзаиморасчетовДоступность = СтрокаДоговора.ВалютаВзаиморасчетов <> Объект.ВалютаДокумента;
				Иначе
					ДанныеСтроки.КурсВзаиморасчетовДоступность = Ложь;
				КонецЕсли;
				
			Иначе
				ДанныеСтроки.КурсВзаиморасчетовДоступность = НЕ ДанныеСтроки.ЭтоАванс;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьФлагиУсловногоОформления(Форма)

	Форма.КурсВалютыВШапке = Форма.Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(Форма.Объект.ВалютаДокумента);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()
	
	МассивПараметровДебиторскойЗадолженности  = Новый Массив;
	МассивПараметровКредиторскойЗадолженности = Новый Массив;
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	Иначе
		МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Ложь));
		МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Ложь));
	КонецЕсли;
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		
		МассивВидовДоговоровДебиторскойЗадолженности  = Новый Массив;
		МассивВидовДоговоровКредиторскойЗадолженности = Новый Массив;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
			
			Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя Тогда
				
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
			Иначе
				
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
			КонецЕсли;
			
			МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровДебиторскойЗадолженности)));
			МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровКредиторскойЗадолженности)));
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			
			МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			
			МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			
			МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровДебиторскойЗадолженности)));
			МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровКредиторскойЗадолженности)));
			
		Иначе
			
			Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя Тогда
				
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровКредиторскойЗадолженности)));
				
			ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
				
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровДебиторскойЗадолженности)));
				
			ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику Тогда
				
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивПараметровДебиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровДебиторскойЗадолженности)));
				
			ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
				
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
				МассивВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
				
				МассивПараметровКредиторскойЗадолженности.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоровКредиторскойЗадолженности)));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметрыВыбораДебиторскойЗадолженности  = Новый ФиксированныйМассив(МассивПараметровДебиторскойЗадолженности);
	НовыеПараметрыВыбораКредиторскойЗадолженности = Новый ФиксированныйМассив(МассивПараметровКредиторскойЗадолженности);
	
	Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.ПараметрыВыбора                = НовыеПараметрыВыбораДебиторскойЗадолженности;
	Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.ПараметрыВыбора               = НовыеПараметрыВыбораКредиторскойЗадолженности;
	Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбораДебиторскойЗадолженности;
	
	Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.ПараметрыВыбора                = НовыеПараметрыВыбораДебиторскойЗадолженности;
	Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.ПараметрыВыбора               = НовыеПараметрыВыбораКредиторскойЗадолженности;
	Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяКорДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбораКредиторскойЗадолженности;
	
	СвязиДоговораКредиторки = Новый Массив;
	СвязиДоговораКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	СвязиДоговораДебиторки = Новый Массив;
	СвязиДоговораДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));

	СвязиДокументаКредиторки = Новый Массив;
	СвязиДокументаКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	СвязиДокументаДебиторки = Новый Массив;
	СвязиДокументаДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда

		СвязиДоговораКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентКредитор"));
		СвязиДокументаКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентКредитор"));
		
		СвязиДоговораДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор"));
		СвязиДокументаДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДебитор"));
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораКредиторки);
		Элементы.ТаблицаКредиторскаяЗадолженностьСделка.СвязиПараметровВыбора             = Новый ФиксированныйМассив(СвязиДокументаКредиторки);
		
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораДебиторки);
		Элементы.ТаблицаДебиторскаяЗадолженностьСделка.СвязиПараметровВыбора             = Новый ФиксированныйМассив(СвязиДокументаДебиторки);
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораДебиторки);
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяСделка.СвязиПараметровВыбора             = Новый ФиксированныйМассив(СвязиДокументаДебиторки);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		СвязиДоговораКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентКредитор"));
		
		СвязиДоговораДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор"));
		СвязиДокументаДебиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДебитор"));
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора    = Новый ФиксированныйМассив(СвязиДоговораДебиторки);
		Элементы.ТаблицаКредиторскаяЗадолженностьСделка.СвязиПараметровВыбора                = Новый ФиксированныйМассив(СвязиДокументаДебиторки);
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораКредиторки);
		
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора    = Новый ФиксированныйМассив(СвязиДоговораДебиторки);
		Элементы.ТаблицаДебиторскаяЗадолженностьСделка.СвязиПараметровВыбора                = Новый ФиксированныйМассив(СвязиДокументаДебиторки);
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораКредиторки);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда

		СвязиДоговораКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДебитор"));
		СвязиДокументаКредиторки.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДебитор"));
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораКредиторки);
		Элементы.ТаблицаКредиторскаяЗадолженностьСделка.СвязиПараметровВыбора             = Новый ФиксированныйМассив(СвязиДоговораКредиторки);
		
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиДоговораКредиторки);
		Элементы.ТаблицаДебиторскаяЗадолженностьСделка.СвязиПараметровВыбора             = Новый ФиксированныйМассив(СвязиДоговораКредиторки);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДоговоров(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность по умолчанию
	Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность               = Истина;
	Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Доступность            = Истина;
	Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность                = Истина;
	Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Доступность             = Истина;
	Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяДоговорКонтрагента.Доступность = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов")
		или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
		
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность               = ЗначениеЗаполнено(Объект.КонтрагентКредитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность                = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьВспомогательнаяДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда

		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность    = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаКредиторскаяЗадолженностьКорДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентКредитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность     = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьКорДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.КонтрагентКредитор);

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда

		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда

		Элементы.ТаблицаДебиторскаяЗадолженностьДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.КонтрагентДебитор);
		Элементы.ТаблицаКредиторскаяЗадолженностьДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.КонтрагентКредитор);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоСчетов(Форма)
	
	// Проверяем реквизиты шапки:
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		
		Если Форма.Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.АвансыПокупателя")
			или Форма.Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.ЗадолженностьПоставщику") Тогда
			Форма.ОтметкаНезаполненногоСчетДт = Ложь;
			Форма.ОтметкаНезаполненногоСчетКт = Истина;
		Иначе
			Форма.ОтметкаНезаполненногоСчетДт = Истина;
			Форма.ОтметкаНезаполненногоСчетКт = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		
		Если (Форма.Объект.ДебиторскаяЗадолженность.Количество() > 0) и (Форма.Объект.КредиторскаяЗадолженность.Количество() = 0) Тогда
			
			Форма.ОтметкаНезаполненногоСчетДт = Ложь;
			Форма.ОтметкаНезаполненногоСчетКт = Истина;
			
		ИначеЕсли (Форма.Объект.ДебиторскаяЗадолженность.Количество() = 0) и (Форма.Объект.КредиторскаяЗадолженность.Количество() > 0) Тогда
			
			Форма.ОтметкаНезаполненногоСчетДт = Истина;
			Форма.ОтметкаНезаполненногоСчетКт = Ложь;
			
		ИначеЕсли (Форма.Объект.ДебиторскаяЗадолженность.Количество() > 0) 
			и (Форма.Объект.КредиторскаяЗадолженность.Количество() > 0)	
			И (Форма.Объект.СуммаДтЗадолженности <> Форма.СуммаКтЗадолженности) Тогда
			
			Форма.ОтметкаНезаполненногоСчетДт = Истина;
			Форма.ОтметкаНезаполненногоСчетКт = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Форма.ОтметкаНезаполненногоСчетДт = Ложь;
		Форма.ОтметкаНезаполненногоСчетКт = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоДебитора(Форма)
	
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		
		Если Форма.Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
			Форма.ОтметкаНезаполненногоДебитор = Ложь;
		КонецЕсли;
		
	Иначе
		Форма.ОтметкаНезаполненногоДебитор = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагОтметкиНезаполненногоКредитора(Форма)
	
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		
		Если Форма.Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
			Форма.ОтметкаНезаполненногоКредитор = Ложь;
		КонецЕсли;
		
	Иначе
		Форма.ОтметкаНезаполненногоКредитор = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение табличных частей

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнения(ИмяКнопки)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"));
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	СтрокаСообщения = НСтр("ru = 'Заполнение невозможно!'") ;
	Продолжать = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов") 
		или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Дебитор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентДебитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Кредитор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентКредитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности")
		или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
			НСтр("ru = 'Контрагент'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
			"КонтрагентДебитор", "Объект");
			Продолжать = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Дебитор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентДебитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Кредитор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентКредитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;

	КонецЕсли;

	Если НЕ Продолжать Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = "";

	Если ИмяКнопки = "ЗаполнитьВзаиморасчеты" И (Объект.ДебиторскаяЗадолженность.Количество() > 0 ИЛИ Объект.КредиторскаяЗадолженность.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
	ИначеЕсли ИмяКнопки = "ЗаполнитьДебиторку" И Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением дебиторская задолженность будет очищена. Заполнить?'");
	ИначеЕсли ИмяКнопки = "ЗаполнитьКредиторку" И Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением кредиторская задолженность будет очищена. Заполнить?'");
	КонецЕсли;

	Если ТекстВопроса <> "" Тогда
		ДополнительныеПараметры = Новый Структура("ИмяКнопки", ИмяКнопки);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да );
	Иначе
		ЗаполнитьТаблицыРасчетовНаКлиенте(ИмяКнопки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицыРасчетовНаКлиенте(ДополнительныеПараметры.ИмяКнопки)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыРасчетовНаКлиенте(ИмяКомандыЗаполнения)
	
	Результат = ЗаполнитьТаблицыРасчетовНаСервере(ИмяКомандыЗаполнения);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	Иначе
		
		ПоказатьРезультатВыполненияЗадания(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицыРасчетовНаСервере(ИмяКомандыЗаполнения)

	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
		
	ПараметрыЗаполнения = СформироватьПараметрыЗаполнения(ИмяКомандыЗаполнения);
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗаполнения.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	Для каждого ЗаполняемаяТаблица Из ПараметрыЗаполнения.ЗаполняемыеТаблицы Цикл
		Если ЗаполняемаяТаблица.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			Объект.ДебиторскаяЗадолженность.Очистить();
			Объект.СуммаДтЗадолженности = 0;
		Иначе
			Объект.КредиторскаяЗадолженность.Очистить();
			Объект.СуммаКтЗадолженности = 0;
		КонецЕсли;
	КонецЦикла;
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
		
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.КорректировкаДолга.ЗаполнитьОстаткамиВзаиморасчетов", 
		ПараметрыЗаполнения, 
		НСтр("ru = 'Заполнить корректировку долга остатками по взаиморасчетам'"));
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат = ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция СформироватьПараметрыЗаполнения(ИмяКомандыЗаполнения)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",               Объект.Дата);
	ПараметрыЗаполнения.Вставить("Ссылка",             Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ЭтоНовый",           НЕ ЗначениеЗаполнено(Объект.Ссылка));
	ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
	ПараметрыЗаполнения.Вставить("ВалютаДокумента",    Объект.ВалютаДокумента);
	ПараметрыЗаполнения.Вставить("КурсДокумента",      Объект.КурсДокумента);
	ПараметрыЗаполнения.Вставить("КратностьДокумента", Объект.КратностьДокумента);
	ПараметрыЗаполнения.Вставить("ВидОперации",        Объект.ВидОперации);
	
	СписокВидовДоговоровДебиторскойЗадолженности = Новый Массив;
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя 
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя 
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
			
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику Тогда
			
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		КонецЕсли;
		
	Иначе
		
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		СписокВидовДоговоровДебиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
	КонецЕсли;
	
	СписокВидовДоговоровКредиторскойЗадолженности = Новый Массив;
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда 
		
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя Тогда
			
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		ИначеЕсли Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику 
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику
			или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя Тогда
			
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		КонецЕсли;
		
	Иначе
		
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
		СписокВидовДоговоровКредиторскойЗадолженности.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
	КонецЕсли;
	
	ЗаполняемыеТаблицы = Новый ТаблицаЗначений;
	ЗаполняемыеТаблицы.Колонки.Добавить("ПоКонтрагенту",        Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗаполняемыеТаблицы.Колонки.Добавить("ВидЗадолженности",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
	ЗаполняемыеТаблицы.Колонки.Добавить("МассивВидовДоговоров", Новый ОписаниеТипов("Массив"));

	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
	 Или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности 
	 Или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		
		Если ИмяКомандыЗаполнения = "ЗаполнитьВзаиморасчеты"
		 Или ИмяКомандыЗаполнения = "ЗаполнитьДебиторку" Тогда
			
			ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
			ЗаполняемаяТаблица.ПоКонтрагенту        = Объект.КонтрагентДебитор;
			ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
			ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровДебиторскойЗадолженности;

		КонецЕсли; 
		
		Если ИмяКомандыЗаполнения = "ЗаполнитьВзаиморасчеты"
		 Или ИмяКомандыЗаполнения = "ЗаполнитьКредиторку" Тогда
			
			ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
			ЗаполняемаяТаблица.ПоКонтрагенту        = Объект.КонтрагентКредитор;
			ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Кредиторская;
			ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровКредиторскойЗадолженности;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
		 Или Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику Тогда
		 
			Если ИмяКомандыЗаполнения = "ЗаполнитьВзаиморасчеты"
			 Или ИмяКомандыЗаполнения = "ЗаполнитьКредиторку" Тогда
			 
				ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
				Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
					ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
					ЗаполняемаяТаблица.ПоКонтрагенту = Объект.КонтрагентДебитор;
				Иначе
					ЗаполняемаяТаблица.ПоКонтрагенту = Объект.КонтрагентКредитор;
				КонецЕсли;
				ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Кредиторская;
				ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровКредиторскойЗадолженности;
				
			КонецЕсли;
			
		Иначе
			
			Если ИмяКомандыЗаполнения = "ЗаполнитьВзаиморасчеты"
			 Или ИмяКомандыЗаполнения = "ЗаполнитьДебиторку" Тогда
			 
				ЗаполняемаяТаблица = ЗаполняемыеТаблицы.Добавить();
				ЗаполняемаяТаблица.ПоКонтрагенту        = Объект.КонтрагентДебитор;
				ЗаполняемаяТаблица.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
				ЗаполняемаяТаблица.МассивВидовДоговоров = СписокВидовДоговоровДебиторскойЗадолженности;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ЗаполняемыеТаблицы", ЗаполняемыеТаблицы);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено",   Истина);
	РезультатВыполнения.Вставить("Успешно",            Ложь);
	РезультатВыполнения.Вставить("ЗаполненныеТаблицы", Новый Массив);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура")
		Или Не СтруктураДанных.Успешно Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Успешно = Истина;
	
	Для каждого ЗаполняемаяТаблица Из СтруктураДанных.ЗаполненныеТаблицы Цикл
		
		Если ЗаполняемаяТаблица.Ключ = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			Объект.ДебиторскаяЗадолженность.Загрузить(ЗаполняемаяТаблица.Значение);
		Иначе
			Объект.КредиторскаяЗадолженность.Загрузить(ЗаполняемаяТаблица.Значение);
		КонецЕсли;
		РезультатВыполнения.ЗаполненныеТаблицы.Добавить(ЗаполняемаяТаблица.Ключ);
		
	КонецЦикла;
		
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
		
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатВыполненияЗадания(РезультатВыполнения)

	Если НЕ РезультатВыполнения.Успешно Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			РезультатВыполнения = ЗагрузитьПодготовленныеДанные();
			ПоказатьРезультатВыполненияЗадания(РезультатВыполнения);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруРеквизитовСтроки()

	Возврат Новый Структура("ДоговорКонтрагента, КорДоговорКонтрагента, Сделка, Сумма, СуммаВзаиморасчетов, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов, КорСчетУчетаРасчетов, СуммаНУ,
		|ЭтоАванс, КурсВзаиморасчетовДоступность"); 

КонецФункции

// Изменение связанных реквизитов

&НаСервере 
Функция ПолучитьНовыеКурсыВалют()

	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	ТаблицаДоговоров = Объект.ДебиторскаяЗадолженность.Выгрузить(, "ДоговорКонтрагента");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Объект.КредиторскаяЗадолженность.Выгрузить(, "ДоговорКонтрагента"), ТаблицаДоговоров);
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоров.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК ДоговорКонтрагента,
	|	Договоры.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ДоговорыИВалюты
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ
	|	Договоры.ВалютаВзаиморасчетов <> &ВалютаРеглУчета
	|	И Договоры.Ссылка В (&СписокДоговоров)
	|	И Договоры.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договоры.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ НовыйКурсы
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Дата,
	|			Валюта В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ДоговорыИВалюты.ВалютаВзаиморасчетов
	|				ИЗ
	|					ДоговорыИВалюты КАК ДоговорыИВалюты)) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыИВалюты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорыИВалюты.ВалютаВзаиморасчетов,
	|	НовыйКурсы.Курс,
	|	НовыйКурсы.Кратность
	|ИЗ
	|	ДоговорыИВалюты КАК ДоговорыИВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыйКурсы КАК НовыйКурсы
	|		ПО ДоговорыИВалюты.ВалютаВзаиморасчетов = НовыйКурсы.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагента";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ИзменитьКурсВТабличнойЧасти(ТабличнаяЧасть, НовыеКурсы)
	
	Если НовыеКурсы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоТаблица = (ТипЗнч(НовыеКурсы) = Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
			ИЛИ СтрокаТаблицы.ЭтоАванс Тогда
			Продолжить
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			НовыйКурс = НовыеКурсы.Найти(СтрокаТаблицы.ДоговорКонтрагента, "ДоговорКонтрагента");
		Иначе
			НовыйКурс = НовыеКурсы;
		КонецЕсли;
		
		Если НовыйКурс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.КурсВзаиморасчетов      = НовыйКурс.Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = НовыйКурс.Кратность;
		
		ПересчитатьСуммуПоСтрокеНаСервере(СтрокаТаблицы, Объект, ВалютаРегламентированногоУчета, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ПересчитатьСуммуПоСтрокеНаСервере(СтрокаДанных, ДанныеОбъекта, ВалютаРегламентированногоУчета, ПересчетВалютнойСуммы = Истина)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВУЕ = СтрокаДанных.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	Если РасчетыВУЕ Тогда
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					ВалютаРегламентированногоУчета, ВалютаДоговора,
					1, СтрокаДанных.КурсВзаиморасчетов,
					1,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора, ВалютаРегламентированногоУчета,
					СтрокаДанных.КурсВзаиморасчетов, 1,
					СтрокаДанных.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	Иначе
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					ДанныеОбъекта.ВалютаДокумента, ВалютаДоговора,
					ДанныеОбъекта.КурсДокумента, СтрокаДанных.КурсВзаиморасчетов,
					ДанныеОбъекта.КратностьДокумента,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора, ДанныеОбъекта.ВалютаДокумента,
					СтрокаДанных.КурсВзаиморасчетов, ДанныеОбъекта.КурсДокумента,
					СтрокаДанных.КратностьВзаиморасчетов, ДанныеОбъекта.КратностьДокумента);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.СуммаНУ = СтрокаДанных.Сумма;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, Объект, ТекущиеДанные, СторонаСчета)
	
	Если СторонаСчета = "Дт" Тогда
		Контрагент = Объект.КонтрагентДебитор;
		ИмяТабличнойЧасти = "ДебиторскаяЗадолженность";
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			Контрагент = Объект.КонтрагентДебитор;
		Иначе
			Контрагент = Объект.КонтрагентКредитор;
		КонецЕсли;
		ИмяТабличнойЧасти = "КредиторскаяЗадолженность";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("Контрагент",         Контрагент);
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("СчетУчета",          ТекущиеДанные.СчетУчетаРасчетов);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",     СторонаСчета);
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",
		ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыОбъекта.Вставить("ТипыДокументов",
		СтрШаблон("Метаданные.Документы.КорректировкаДолга.ТабличныеЧасти.%1.Реквизиты.Сделка.Тип", ИмяТабличнойЧасти));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент, Истина);
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииДатыНаСервере()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	// Изменим курс в шапке документа
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	// Изменим курс в табличных частях
	Если Объект.ДебиторскаяЗадолженность.Количество() > 0 ИЛИ Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
		
		НовыеКурсы = ПолучитьНовыеКурсыВалют();
		ИзменитьКурсВТабличнойЧасти(Объект.ДебиторскаяЗадолженность, НовыеКурсы);
		ИзменитьКурсВТабличнойЧасти(Объект.КредиторскаяЗадолженность, НовыеКурсы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаАванса()

	Если Объект.ТипАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.СамогоКонтрагента") Тогда
		
		Если Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.АвансыПокупателя")
			или Объект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.ЗадолженностьПоставщику") Тогда
			
			Объект.КонтрагентДебитор = Объект.КонтрагентКредитор;
			
			Объект.КредиторскаяЗадолженность.Очистить();
			
		Иначе
			
			Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
			
			Объект.ДебиторскаяЗадолженность.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентКредиторПриИзмененииСервер()
	
	КоличествоСтрокКоллекции = Объект.ДебиторскаяЗадолженность.Количество();
	
	Для Сч = 0 по (КоличествоСтрокКоллекции - 1) Цикл
		Объект.ДебиторскаяЗадолженность.Получить(Сч).КорДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЦикла;
	
	КоличествоСтрокКоллекции = Объект.КредиторскаяЗадолженность.Количество();
	
	Для Сч = 0 по (КоличествоСтрокКоллекции - 1) Цикл
		Объект.КредиторскаяЗадолженность.Получить(Сч).КорДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер(ПараметрыОбработки = Неопределено)

	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ВалютаРасчетовПередИзменением", Неопределено);
		ПараметрыОбработки.Вставить("КурсДоИзменения", Объект.КурсДокумента);
	КонецЕсли; 
	
	Если ПараметрыОбработки.ВалютаРасчетовПередИзменением <> Объект.ВалютаДокумента Тогда
		
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	КонецЕсли; 
	
	ЕстьСтроки = Объект.ДебиторскаяЗадолженность.Количество() + Объект.КредиторскаяЗадолженность.Количество() > 0;
	Если ПараметрыОбработки.КурсДоИзменения <> Объект.КурсДокумента И ЕстьСтроки Тогда
		КурсДокументаПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьФлагиУсловногоОформления(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура КурсДокументаПриИзмененииСервер()

	КурсИКратность = Новый Структура("Курс, Кратность", Объект.КурсДокумента, Объект.КратностьДокумента);
	ИзменитьКурсВТабличнойЧасти(Объект.ДебиторскаяЗадолженность,  КурсИКратность);
	ИзменитьКурсВТабличнойЧасти(Объект.КредиторскаяЗадолженность, КурсИКратность);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииДоговораВСтроке(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти, ВалютаРегламентированногоУчета)

	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			Контрагент = ДанныеОбъекта.КонтрагентДебитор;
		Иначе
			Контрагент = ДанныеОбъекта.КонтрагентКредитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, Контрагент, ДанныеСтроки.ДоговорКонтрагента);

		Если ДанныеСтроки.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетАвансов;
			Иначе
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			КонецЕсли;
					
		ИначеЕсли ДанныеСтроки.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			Иначе
				ДанныеСтроки.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;

		СчетУчетаРасчетов = ДанныеСтроки.СчетУчетаРасчетов;
	
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			УстановитьПризнакАвансаВСтроке("ДебиторскаяЗадолженность", ДанныеСтроки, РеквизитыДоговора);
		Иначе
			УстановитьПризнакАвансаВСтроке("КредиторскаяЗадолженность", ДанныеСтроки, РеквизитыДоговора);
		КонецЕсли;
		
		Если ДанныеОбъекта.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ДанныеСтроки.КурсВзаиморасчетовДоступность = РеквизитыДоговора.ВалютаВзаиморасчетов <> ДанныеОбъекта.ВалютаДокумента;
		Иначе
			ДанныеСтроки.КурсВзаиморасчетовДоступность = ДанныеСтроки.ЭтоАванс;
		КонецЕсли; 
			
		Если ДанныеСтроки.ЭтоАванс Тогда
			
			ДанныеСтроки.КурсВзаиморасчетов = Документы.КорректировкаДолга.ПолучитьКурсВалютыАванса(ДанныеСтроки.ДоговорКонтрагента, ДанныеОбъекта.Организация, ДанныеОбъекта.Дата, ДанныеОбъекта.КурсДокумента);
			ДанныеСтроки.КратностьВзаиморасчетов = ДанныеОбъекта.КратностьДокумента;
			
			ДанныеСтроки.КурсВзаиморасчетовДоступность = НЕ ДанныеСтроки.ЭтоАванс;
			
		Иначе
			Если ДанныеСтроки.КурсВзаиморасчетовДоступность Тогда
				
				КурсДоговора = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов,ДанныеОбъекта.Дата);
				
				ДанныеСтроки.КурсВзаиморасчетов      = КурсДоговора.Курс;
				ДанныеСтроки.КратностьВзаиморасчетов = КурсДоговора.Кратность;
				
			Иначе
				
				ДанныеСтроки.КурсВзаиморасчетов = ДанныеОбъекта.КурсДокумента;
				ДанныеСтроки.КратностьВзаиморасчетов = ДанныеОбъекта.КратностьДокумента;
				
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииКорДоговораВСтроке(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			Контрагент = ДанныеОбъекта.КонтрагентДебитор;
		Иначе
			Контрагент = ДанныеОбъекта.КонтрагентКредитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, Контрагент, ДанныеСтроки.КорДоговорКонтрагента);

		Если ДанныеСтроки.КорДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансов;
			Иначе
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			КонецЕсли;
					
		ИначеЕсли ДанныеСтроки.КорДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			Иначе
				ДанныеСтроки.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;

		КорСчетУчетаРасчетов = ДанныеСтроки.КорСчетУчетаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПриИзмененииСчетаРасчетовВСтроке(ДанныеСтроки, ДанныеОбъекта, ИмяТабЧасти, ВалютаРегламентированногоУчета)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
		Если ИмяТабЧасти = "ДебиторскаяЗадолженность" Тогда
			УстановитьПризнакАвансаВСтроке("ДебиторскаяЗадолженность", ДанныеСтроки, РеквизитыДоговора);
		Иначе
			УстановитьПризнакАвансаВСтроке("КредиторскаяЗадолженность", ДанныеСтроки, РеквизитыДоговора);
		КонецЕсли;
		
		Если ДанныеСтроки.ЭтоАванс Тогда
			
			ДанныеСтроки.КурсВзаиморасчетов = Документы.КорректировкаДолга.ПолучитьКурсВалютыАванса(ДанныеСтроки.ДоговорКонтрагента, ДанныеОбъекта.Организация, ДанныеОбъекта.Дата, ДанныеОбъекта.КурсДокумента);
			ДанныеСтроки.КратностьВзаиморасчетов = ДанныеОбъекта.КратностьДокумента;
			
			ДанныеСтроки.КурсВзаиморасчетовДоступность = НЕ ДанныеСтроки.ЭтоАванс;
			
		Иначе
			ДанныеСтроки.КурсВзаиморасчетов = ДанныеОбъекта.КурсДокумента;
			ДанныеСтроки.КратностьВзаиморасчетов = ДанныеОбъекта.КратностьДокумента;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Обслуживание реквизитов счетов и их субконто

&НаКлиенте
Процедура ПриИзмененииСубконтоДт(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект,
		Объект,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоКт(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект,
		Объект,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоДт(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект,
		ПараметрыУстановкиСвойствСубконтоДт(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоКт(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект,
		ПараметрыУстановкиСвойствСубконтоКт(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоДт(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоДт", "", "СубконтоДт", "", "СчетДт");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоКт(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоКт", "", "СубконтоКт", "", "СчетКт");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
