
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеМодуля

Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Формирует движения по регистру "Скидки".
Процедура ДвиженияПоРегиструСкидок()
	
	Для Каждого СтрокаУслуги Из Услуги Цикл
		
		Движение = Движения.КВП_Скидки.Добавить();
		Движение.Период            = Дата;
		Движение.ЛьготнаяКатегория = ЛьготнаяКатегория;
		Движение.Услуга            = СтрокаУслуги.Услуга;
		Движение.РазмерСкидки      = СтрокаУслуги.РазмерСкидки;
		Движение.ЛицаПользующиесяЛьготами        = СтрокаУслуги.ЛицаПользующиесяЛьготами;
		Движение.ОграничениеПоОбъемуУслуги       = СтрокаУслуги.ОграничениеПоОбъемуУслуги;
		Движение.ПлощадьДляРасчетаОграничения    = СтрокаУслуги.ПлощадьДляРасчетаОграничения;
		Движение.ЛьготнаяКатегорияДляСверхобъема = СтрокаУслуги.ЛьготнаяКатегорияДляСверхобъема;
		Движение.ОграничениеПоСуммеЛьготы        = СтрокаУслуги.ОграничениеПоСуммеЛьготы;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обрабатывает проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегиструСкидок();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ЛьготнаяКатегория");
	
	ПроверяемыеРеквизиты.Добавить("Услуги.Услуга");
	ПроверяемыеРеквизиты.Добавить("Услуги.РазмерСкидки");
	ПроверяемыеРеквизиты.Добавить("Услуги.ЛицаПользующиесяЛьготами");
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтрокиСтрахования = Услуги.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга " + УслугаДобровольногоСтрахования + " является услугой добровольного страхования. По ней нельзя предоставлять льготы.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли