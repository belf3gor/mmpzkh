
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает видимость элементов управления.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.УслугиПлощадьДляРасчетаОграничения.Видимость    = Форма.ОтображатьКолонкуПлощади;
	Элементы.УслугиЛьготнаяКатегорияДляСверхобъема.Видимость = Форма.ОтображатьКолонкуЛьготнойКатегорииСверхобъема;
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет, заполнено ли хотя бы одно ограничение по объему в табличной части.
Процедура ПроверитьОграничениеПоОбъему()
	
	ОтображатьКолонкуЛьготнойКатегорииСверхобъема = Ложь;
	
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		Если Не ТекСтрока.ОграничениеПоОбъемуУслуги.Пустая() Тогда
			
			ОтображатьКолонкуЛьготнойКатегорииСверхобъема = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет единицы измерения услуг и норм потребления табличной части.
Процедура ПроверитьЕдиницыИзмерения()
	
	ОтображатьКолонкуПлощади = Ложь;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Услуга) Тогда
			
			Если ЗначениеЗаполнено(ТекСтрока.ОграничениеПоОбъемуУслуги) Тогда
			
				Если НЕ УПЖКХ_ОбщегоНазначенияСервер.ЕдиницаИзмеренияЯвляетсяЕдиницейПлощади(ТекСтрока.Услуга, Истина)
				   И УПЖКХ_ОбщегоНазначенияСервер.ЕдиницаИзмеренияЯвляетсяЕдиницейПлощади(ТекСтрока.ОграничениеПоОбъемуУслуги, Истина) Тогда
					ОтображатьКолонкуПлощади = Истина;
				ИначеЕсли Не ТекСтрока.ПлощадьДляРасчетаОграничения.Пустая() Тогда
					ТекСтрока.ПлощадьДляРасчетаОграничения = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
				КонецЕсли;
				
			Иначе
				ТекСтрока.ПлощадьДляРасчетаОграничения = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Функция проверяет единицы измерения услуг и норм потребления строки табличной части.
Функция ПроверитьЕдиницыИзмеренияСтроки(ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.Услуга) И ЗначениеЗаполнено(ТекСтрока.ОграничениеПоОбъемуУслуги) Тогда
		
		Если НЕ УПЖКХ_ОбщегоНазначенияСервер.ЕдиницаИзмеренияЯвляетсяЕдиницейПлощади(ТекСтрока.Услуга, Истина)
		   И УПЖКХ_ОбщегоНазначенияСервер.ЕдиницаИзмеренияЯвляетсяЕдиницейПлощади(ТекСтрока.ОграничениеПоОбъемуУслуги, Истина) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
// Функция проверяет, не является ли льготная категория
// сверхобъемной для другой льготной категории.
Функция ПроверитьЛьготнуюКатегориюНаИспользованиеВСверхобъеме(ЛьготнаяКатегория, Услуга, ДатаСреза,
																ЭтоСверхобъемнаяУслуга = Ложь)
	
	ПарнаяЛьготнаяКатегория = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЛьготнаяКатегория)
	 Или Не ЗначениеЗаполнено(Услуга) Или Не ЗначениеЗаполнено(ДатаСреза) Тогда
		Возврат ПарнаяЛьготнаяКатегория;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",         Новый Граница(ДатаСреза, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Услуга",            Услуга);
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаСреза, Услуга = &Услуга) КАК КВП_СкидкиСрезПоследних
	|ГДЕ &УсловиеНаЛьготнуюКатегорию";
	
	Если ЭтоСверхобъемнаяУслуга Тогда
		ТекстПоляЛьготнойКатегории = "КВП_СкидкиСрезПоследних.ЛьготнаяКатегорияДляСверхобъема";
		УсловиеНаЛьготнуюКатегорию = "КВП_СкидкиСрезПоследних.ЛьготнаяКатегория = &ЛьготнаяКатегория";
	Иначе
		ТекстПоляЛьготнойКатегории = "КВП_СкидкиСрезПоследних.ЛьготнаяКатегория";
		УсловиеНаЛьготнуюКатегорию = "КВП_СкидкиСрезПоследних.ЛьготнаяКатегорияДляСверхобъема = &ЛьготнаяКатегория";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЛьготнаяКатегория", ТекстПоляЛьготнойКатегории);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛьготнуюКатегорию", УсловиеНаЛьготнуюКатегорию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПарнаяЛьготнаяКатегория = Выборка.ЛьготнаяКатегория;
	КонецЕсли;
	
	Возврат ПарнаяЛьготнаяКатегория;
	
КонецФункции

&НаСервереБезКонтекста
// Функция проверяет, имеет ли скидку на услугу льготная категория.
Функция ЛьготнаяКатегорияИмеетСкидкуНаУслугу(ЛьготнаяКатегория, Услуга, ДатаСреза)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",         Новый Граница(ДатаСреза, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Услуга",            Услуга);
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаСреза, Услуга = &Услуга) КАК КВП_СкидкиСрезПоследних
	|ГДЕ
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория = &ЛьготнаяКатегория";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик выбора услуги.
Процедура ОбработатьВыборУслуг(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ТекущиеДанные") Тогда
			ДопПараметры.ТекущиеДанные.Услуга = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборУслуг()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																 УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПроверитьЕдиницыИзмерения();
	ПроверитьОграничениеПоОбъему();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "УслугиНачалоВыбора" поля ввода "Услуга".
Процедура УслугиУслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		Если ТекущиеДанные.Услуга = УслугаДобровольногоСтрахования Тогда
			ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя устанавливать скидки.");
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЕдиницыИзмерения();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода
// "УслугиОграничениеПоОбъемуУслуги" табличной части "Услуги".
//
Процедура УслугиОграничениеПоОбъемуУслугиПриИзменении(Элемент)
	
	ПроверитьЕдиницыИзмерения();
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		Элементы.УслугиПлощадьДляРасчетаОграничения.ТолькоПросмотр    = ПроверитьЕдиницыИзмеренияСтроки(ТекСтрока);
		Элементы.УслугиЛьготнаяКатегорияДляСверхобъема.ТолькоПросмотр = ТекСтрока.ОграничениеПоОбъемуУслуги.Пустая();
		
		Если ТекСтрока.ОграничениеПоОбъемуУслуги.Пустая() Тогда
			ТекСтрока.ЛьготнаяКатегорияДляСверхобъема = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьОграничениеПоОбъему();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода
// "ЛьготнаяКатегорияДляСверхобъема" табличной части "Услуги".
Процедура УслугиЛьготнаяКатегорияДляСверхобъемаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		ПарнаяЛьготнаяКатегория = ПроверитьЛьготнуюКатегориюНаИспользованиеВСверхобъеме(Объект.ЛьготнаяКатегория,
																						ТекСтрока.Услуга, 
																						Объект.Дата);
		Если ЗначениеЗаполнено(ПарнаяЛьготнаяКатегория) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"" + ТекСтрока.Услуга + ": льготная категория """ + Объект.ЛьготнаяКатегория + """"
				+ Символы.ПС + "назначена как сверхобъемная для льготной категории """ + ПарнаяЛьготнаяКатегория + """");
		КонецЕсли;
		
		ПарнаяЛьготнаяКатегория = ПроверитьЛьготнуюКатегориюНаИспользованиеВСверхобъеме(ТекСтрока.ЛьготнаяКатегорияДляСверхобъема,
																						ТекСтрока.Услуга, 
																						Объект.Дата, 
																						Истина);
		Если ЗначениеЗаполнено(ПарнаяЛьготнаяКатегория) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"" + ТекСтрока.Услуга + ": для льготной категории """ + ТекСтрока.ЛьготнаяКатегорияДляСверхобъема + """"
				+ Символы.ПС + "назначена сверхобъемная льготная категория """ + ПарнаяЛьготнаяКатегория + """");
		КонецЕсли;
		
		Если Не ЛьготнаяКатегорияИмеетСкидкуНаУслугу(ТекСтрока.ЛьготнаяКатегорияДляСверхобъема,
													 ТекСтрока.Услуга, 
													 Объект.Дата) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Для сверхобъемной льготной категории """ + ТекСтрока.ЛьготнаяКатегорияДляСверхобъема + """"
				 + Символы.ПС + "должна действовать скидка на услугу """ + ТекСтрока.Услуга + """");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Услуги".
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		Элементы.УслугиПлощадьДляРасчетаОграничения.ТолькоПросмотр    = ПроверитьЕдиницыИзмеренияСтроки(ТекСтрока);
		Элементы.УслугиЛьготнаяКатегорияДляСверхобъема.ТолькоПросмотр = ТекСтрока.ОграничениеПоОбъемуУслуги.Пустая();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" колонки "ОграничениеПоОбъемуУслуги".
Процедура УслугиОграничениеПоОбъемуУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УслугаВладелец = Элементы.Услуги.ТекущиеДанные.Услуга;
	КВП_РаботаСДиалогамиКлиент.ВыбратьНормуПотребления(Элемент, СтандартнаяОбработка, УслугаВладелец, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "УслугаНачалоВыбора" поля ввода "Услуга".
Процедура УслугиУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		ФормаВыбораУслуги = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущиеДанные.Услуга), Элемент);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбораУслуги.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина, 
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
																
		ФормаВыбораУслуги.ВладелецФормы = ЭтаФорма;
		ФормаВыбораУслуги.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма, ДополнительныеПараметры);
		ФормаВыбораУслуги.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти
