
//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет команду печати списка помещений, для которых не введены данные о собственности.
&НаКлиенте
Процедура ВывестиСписокПомещенийСНезаполненнойСобственностью(ПолныйСписокПомещений, СписокПомещенийССобствениками)

	Если ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("СписокПомещений",           ПолныйСписокПомещений);
	ПараметрыПечати.Вставить("СпПомещенийССобствениками", СписокПомещенийССобствениками);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Документ.КВП_РеестрУчастниковГолосования", 
														 "СписокПомещенийБезСобственников", 
														 МассивОбъектов,
														 ЭтаФорма,
														 ПараметрыПечати);

КонецПроцедуры // ВывестиСписокПомещенийСНезаполненнойСобственностью()

// Процедура получает данные о собственности помещения. 
// Если в помещении один собственник, то определяется вес его голоса.
&НаСервере
Функция ПолучитьДанныеОСобственностиПомещенияСервер(Помещение)

	СписокПараметров = Новый Структура;
	
	СписокСобственниковПомещения = ПолучитьДанныеОСобственностиПомещения(Помещение, Объект.Дата);
	
	Если СписокСобственниковПомещения.Количество() > 0 Тогда
		
		СписокПараметров.Вставить("Собственник", СписокСобственниковПомещения[0].Собственник);
		СписокПараметров.Вставить("ВесГолоса",
									Документы.КВП_РеестрУчастниковГолосования.ОпределитьВесГолосаСУчетомВидаСобственности(
										СписокСобственниковПомещения[0], СписокСобственниковПомещения.Количество(),
										УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Помещение, Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь,,
																								Объект.Дата, Ложь)));
	Иначе
		СписокПараметров.Вставить("Собственник", Справочники.ФизическиеЛица.ПустаяСсылка());
		СписокПараметров.Вставить("ВесГолоса",   0);
	КонецЕсли;
	
	Возврат СписокПараметров;
	
КонецФункции // ПолучитьДанныеОСобственностиПомещенияСервер()

// Процедура получает данные о весе голоса собственника помещения. 
&НаСервере
Функция ПолучитьДанныеОСобственникеПомещенияСервер(Помещение, СобственникПомещения)

	СписокПараметров = Новый Структура;
	
	ДанныеОСобственности = ПолучитьДанныеПоСобственникуПомещения(СобственникПомещения, Помещение, Объект.Дата);
	
	Если ДанныеОСобственности.Количество() > 0 Тогда
		
		СписокПараметров.Вставить("ВесГолоса",
									Документы.КВП_РеестрУчастниковГолосования.ОпределитьВесГолосаСУчетомВидаСобственности(
										ДанныеОСобственности[0], ПолучитьДанныеОСобственностиПомещения(Помещение, Объект.Дата).Количество(),
										УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Помещение, Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь,,
																								Объект.Дата, Ложь)));
		
	Иначе
		СписокПараметров.Вставить("ВесГолоса", 0);
	КонецЕсли;
	
	Возврат СписокПараметров;
	
КонецФункции // ПолучитьДанныеОСобственникеПомещенияСервер()

// Процедура получает данные о собственниках помещения.
&НаСервере
Функция ПолучитьДанныеОСобственникахПомещенияСервер(Помещение)

	Возврат ПолучитьДанныеОСобственностиПомещения(Помещение, Объект.Дата).ВыгрузитьКолонку("Собственник");

КонецФункции // ПолучитьДанныеОСобственникахПомещенияСервер()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "УЧАСТНИКИ"

#Область ОбработчикиСобытийТабличнойЧастиУчастники

&НаКлиенте
// Обработчик нажатия кнопки "Заполнить" командной панели на клиенте.
Процедура КоманднаяПанельУчастникиЗаполнитьПоОбъекту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектПроведения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран объект проведения";
		Сообщение.Поле = "ОбъектПроведения";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Объект.Участники.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКоманднаяПанельУчастникиЗаполнитьПоОбъекту", ЭтотОбъект),
					   "Перед заполнением табличная часть будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КоманднаяПанельУчастникиЗаполнитьПоОбъектуПродожение();
	
КонецПроцедуры // КоманднаяПанельУчастникиЗаполнитьПоОбъекту()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КоманднаяПанельУчастникиЗаполнитьПоОбъекту()".
Процедура ОбработатьРезультатВопросаКоманднаяПанельУчастникиЗаполнитьПоОбъекту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Участники.Очистить();
	
	КоманднаяПанельУчастникиЗаполнитьПоОбъектуПродожение();
	
КонецПроцедуры // ОбработатьРезультатВопросаКоманднаяПанельУчастникиЗаполнитьПоОбъекту()

&НаКлиенте
// Процедура-продолжение процедуры "КоманднаяПанельУчастникиЗаполнитьПоОбъекту()".
Процедура КоманднаяПанельУчастникиЗаполнитьПоОбъектуПродожение()
	
	СписокПомещений           = Новый СписокЗначений;
	СпПомещенийССобствениками = Новый СписокЗначений;
	
	КоманднаяПанельУчастникиЗаполнитьПоОбъектуСервер(СписокПомещений, СпПомещенийССобствениками);
	
	Если НЕ СписокПомещений.Количество() = СпПомещенийССобствениками.Количество() Тогда 
		ВывестиСписокПомещенийСНезаполненнойСобственностью(СписокПомещений, СпПомещенийССобствениками);
	КонецЕсли;
	
КонецПроцедуры //КоманднаяПанельУчастникиЗаполнитьПоОбъектуПродожение()

// Обработчик нажатия кнопки "Заполнить" командной панели на сервере.
&НаСервере
Процедура КоманднаяПанельУчастникиЗаполнитьПоОбъектуСервер(СписокПомещений, СпПомещенийССобствениками)
	
	ИмяОбъектаПроведения = Объект.ОбъектПроведения.Метаданные().ПолноеИмя();
	
	// если указанный объект - группа, то собираются все элементы по иерархии
	ОбъектСписок = ПолучитьЭлементыСправочникаПоГруппе(Объект.ОбъектПроведения);
	
	// формирование списка помещений в зависимости от их типа
	Если      ИмяОбъектаПроведения = "Справочник.КВП_Здания" Тогда
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(ОбъектСписок);
	ИначеЕсли ИмяОбъектаПроведения = "Справочник.КВП_Подъезды" Тогда
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоПодъездам(ОбъектСписок);
	ИначеЕсли ИмяОбъектаПроведения = "Справочник.КВП_ЛицевыеСчета" Тогда
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоЛицевымСчетам(ОбъектСписок);
	ИначеЕсли ИмяОбъектаПроведения = "Справочник.УПЖКХ_Помещения" Тогда
		СписокПомещений = ОбъектСписок.Скопировать();
	КонецЕсли;
	
	ОбъектДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_РеестрУчастниковГолосования"));
	ОбъектДокумента.ЗаполнитьСписокУчастников(СписокПомещений, СпПомещенийССобствениками);
	ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
	
КонецПроцедуры //КоманднаяПанельУчастникиЗаполнитьПоОбъектуСервер()

// Процедура - обработчик события "ПриИзменении" поля "Помещение" ТЧ "Участники".
&НаКлиенте
Процедура УчастникиПомещениеПриИзменении(Элемент)
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Помещение) Тогда
		// если один собственник, то заполняем данные по нему.
		ДанныеСобственника = ПолучитьДанныеОСобственностиПомещенияСервер(ТекДанные.Помещение);
		ТекДанные.СобственникПомещения = ДанныеСобственника.Собственник;
		ТекДанные.ВесГолоса            = ДанныеСобственника.ВесГолоса;
	Иначе
		ТекДанные.СобственникПомещения = Неопределено;
		ТекДанные.ВесГолоса = 0;
	КонецЕсли;
	
КонецПроцедуры //УчастникиПомещениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "Собственник" ТЧ "Участники".
&НаКлиенте
Процедура УчастникиСобственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Помещение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокСобственниковПомещения = ПолучитьДанныеОСобственникахПомещенияСервер(ТекДанные.Помещение);
		
		СтруктураОтбора = Новый Структура("Ссылка", СписокСобственниковПомещения);
		ПараметрыФормы  = Новый Структура("ТекущаяСтрока, Отбор", ТекДанные.СобственникПомещения, СтруктураОтбора);
		ОткрытьФорму(?(ТипЗнч(ТекДанные.СобственникПомещения) = Тип("СправочникСсылка.ФизическиеЛица"),
							"Справочник.ФизическиеЛица.ФормаВыбора", 
							"Справочник.Контрагенты.ФормаВыбора"), ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры //УчастникиСобственникНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Собственник" ТЧ "Участники".
&НаКлиенте
Процедура УчастникиСобственникПриИзменении(Элемент)
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.СобственникПомещения) Тогда
		ДанныеСобственника = ПолучитьДанныеОСобственникеПомещенияСервер(ТекДанные.Помещение, ТекДанные.СобственникПомещения);
		ТекДанные.ВесГолоса = ДанныеСобственника.ВесГолоса;
	Иначе
		ТекДанные.ВесГолоса = 0;
	КонецЕсли;
	
КонецПроцедуры //УчастникиСобственникПриИзменении()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти