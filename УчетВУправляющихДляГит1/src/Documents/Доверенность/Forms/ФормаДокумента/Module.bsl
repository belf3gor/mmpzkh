////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеДоверенность";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизЛицо Тогда
		
		ЭтаФорма.ПаспортныеДанные = ПолучитьПаспортныеДанныеСтрокой(Объект.Организация, Объект.ФизЛицо);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	// Если дата действия отличалась на 10 дней, т.е. не была исправлена, надо ее поправить
	Если НачалоДня(Объект.ДатаДействия) - НачалоДня(ТекущаяДатаДокумента) = 10 * (24 * 60 * 60) Тогда
		Объект.ДатаДействия = Объект.Дата + 10 * (24 * 60 * 60);
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата; 

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, БанковскийСчетОрганизации, Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ОрганизацияПриИзмененииНаСервере(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	ДоговорКонтрагентаОбработатьИзменение();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НаПолучениеОт");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	КонтрагентПриИзмененииНаСервере(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)

	ПаспортныеДанные = ПолучитьПаспортныеДанныеСтрокой(Объект.Организация, Объект.ФизЛицо);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	СделкаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов",     "Метаданные.Документы.Доверенность.Реквизиты.Сделка.Тип");
		
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыНаименованиеТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("НаименованиеПолное", СокрЛП(Элемент.ТекстРедактирования));
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеТовараОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		РеквизитыСтрока = "НаименованиеПолное, ЕдиницаИзмерения";
		ЗначенияРеквизитов = ПолучитьСвойстваТовара(ВыбранноеЗначение, РеквизитыСтрока); 
		ТекДанные.НаименованиеТовара = ЗначенияРеквизитов.НаименованиеПолное;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ЕдиницаПоКлассификатору) ИЛИ
			ТекДанные.ЕдиницаПоКлассификатору <> ЗначенияРеквизитов.ЕдиницаИзмерения Тогда
			ТекДанные.ЕдиницаПоКлассификатору = ЗначенияРеквизитов.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, 
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПаспортныеДанные = ОбщегоНазначенияБПВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.Организация, Объект.ФизЛицо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		
	КонецЕсли;

	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.БанковскийСчетОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.НаПолучениеОт.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПоДокументу.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ДекорацияПаспортныеДанныеОтсутствуют.Видимость = ЗначениеЗаполнено(Объект.ФизЛицо)
		И Форма.ПаспортныеДанные = "Отсутствуют данные об удостоверении личности.";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)
	
	Элементы = Форма.Элементы;
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОрганизацияПриИзмененииНаСервере(ДанныеОбъекта)
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(ДанныеОбъекта.БанковскийСчетОрганизации, ДанныеОбъекта.Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДанныеОбъекта.ДоговорКонтрагента, ДанныеОбъекта.Контрагент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоров());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеОбъекта)
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДанныеОбъекта.ДоговорКонтрагента, ДанныеОбъекта.Контрагент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоров());
	
	ДанныеОбъекта.НаПолучениеОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Контрагент, "НаименованиеПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	Объект.Сделка      = Неопределено;
	СделкаОбработатьИзменение();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПредлагатьНовыйДоговор = Ложь;
	Иначе
		ПредлагатьНовыйДоговор = ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаОбработатьИзменение()
	
	Объект.ПоДокументу = ПолучитьПредставлениеДокумента(Объект.Сделка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()
	
	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Возврат СписокВидовДоговоров;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)
	
	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере
Функция ПолучитьСвойстваТовара(Товар, РеквизитыСтрока)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Товар, РеквизитыСтрока);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.НаименованиеТовара      = СведенияОНоменклатуре.НаименованиеПолное;
		СтрокаТаблицы.ЕдиницаПоКлассификатору = СведенияОНоменклатуре.ЕдиницаИзмерения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо) Экспорт

	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо);

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСчетНаОплату(Сделка)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Сделка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Документ = &Документ";
	
	ДанныеОснования = Запрос.Выполнить().Выбрать();
	
	Если ДанныеОснования.Следующий() Тогда
		Если ЗначениеЗаполнено(ДанныеОснования.Номер) 
			И ЗначениеЗаполнено(ДанныеОснования.Дата) Тогда
			НомерОснования = СокрЛП(ДанныеОснования.Номер);
			ДатаОснования = Формат(ДанныеОснования.Дата, "ДФ='дд ММММ гггг'");
		Иначе
			НомерОснования = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", 15);
			ДатаОснования  = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", 20);
		КонецЕсли;
		
		ПредставлениеДокумента = СтрШаблон(
			"%1 №%2 от %3", 
			СокрЛП(Сделка.Метаданные().Представление()), 
			НомерОснования, 
			ДатаОснования);
	Иначе
		ПредставлениеДокумента = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
			Сделка, СокрЛП(Сделка.Метаданные().Представление()))
	КонецЕсли;
		
	Возврат ПредставлениеДокумента;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДокумента(Сделка)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ПредставлениеДокумента = ПредставлениеСчетНаОплату(Сделка);
		Иначе
			ПредставлениеДокумента = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
				Сделка, СокрЛП(Сделка.Метаданные().Представление()))
		КонецЕсли; 
	Иначе
		ПредставлениеДокумента = "";
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредлагатьНовыйДоговор(Организация, Контрагент)
	
	Возврат РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Организация, Контрагент);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
