&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетНаОплатуПокупателю",
		"ФормаДокумента",
		НСтр("ru='Новости: Счет покупателю'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НачислениеПеней", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Задолженность.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(НачатьЗаполнениеСчетовУчета("ПодразделениеОрганизации", Объект));
КонецПроцедуры

#Область Контрагент

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.Задолженность.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

#Область ДоговорКонтрагента

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Объект.Задолженность.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтавкаПениПриИзменении(Элемент)
	Если Объект.Задолженность.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПеней();
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	Если Объект.Задолженность.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПеней();
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженность

&НаКлиенте
Процедура ЗадолженностьПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьСделкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Задолженность.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура("Дата, ДоговорКонтрагента, ПериодРасчета, СтавкаПени");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтроки = Новый Структура("Сделка, Просрочка, Задолженность, Сумма"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	РассчитатьПросрочку(ДанныеСтроки, ДанныеОБъекта);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СчетУчета = СчетРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.НачислениеПеней.ТабличныеЧасти.Задолженность.Реквизиты.Сделка.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПросрочкаПриИзменении(Элемент)
	ПриИзмененииПараметровЗадолженности();
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьЗадолженностьПриИзменении(Элемент)
	ПриИзмененииПараметровЗадолженности();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоВзаиморасчетам(Команда)
	Если Объект.Задолженность.Количество() > 0  Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьОстаткамиПоВзаиморасчетамЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Заполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, СписокКнопок, 0, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьОстаткамиВзаиморасчетовНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "Валютный");
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьСчетовУчета();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#Область ЗаполнениеТабличнойЧастиЗадолженность

&НаКлиенте
Процедура ВопросЗаполнитьОстаткамиПоВзаиморасчетамЗавершение(Ответ, Параметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Задолженность.Очистить();
		ЗаполнитьОстаткамиВзаиморасчетовНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиВзаиморасчетовНаКлиенте()
	
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета();
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		ПоказатьРезультатВыполненияЗадания(Результат);
		
	Иначе
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;

КонецПроцедуры

// Заполнение таблицы "Задолженость" по информации из бухгалтерского учета
&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено", Истина);
	Результат.Вставить("Успешно",          Ложь);
	
	// Проверим заполненность обязательных реквизитов.
	Если Не ЗначениеЗаполнено(Объект.Организация) 
	 Или Не ЗначениеЗаполнено(Объект.Контрагент)
	 Или Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",             Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ВалютаДокумента",
		?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Или Не ЗначениеЗаполнено(Объект.ВалютаДокумента), Неопределено, Объект.ВалютаДокумента));
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	НаименованиеЗадания = "ЗаполнитьПениПоДаннымБухУчета";
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.НачислениеПеней.ПодготовитьДанныеДляЗаполнения", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(Результат)

	Результат.Вставить("Успешно", Ложь);
	
	СтруктураДанныхЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанныхЗаполнения) <> Тип("Структура")
	 Или Не СтруктураДанныхЗаполнения.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Успешно = Истина;
	Объект.Задолженность.Загрузить(СтруктураДанныхЗаполнения.ТаблицаРезультата);
	
	РассчитатьСуммуПеней();
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			Результат = Новый Структура("ЗаданиеВыполнено", Истина);
			ЗагрузитьПодготовленныеДанные(Результат);
			ПоказатьРезультатВыполненияЗадания(Результат);
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатВыполненияЗадания(РезультатВыполнения)

	Если Не РезультатВыполнения.Успешно Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РасчетПени

&НаСервере
Процедура РассчитатьСуммуПеней()
	
	ДанныеСтроки = Новый Структура("Сделка, Просрочка, Задолженность, Сумма");
	
	ДанныеОбъекта = Новый Структура("Дата, СтавкаПени, ПериодРасчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для каждого СтрокаТаблицы Из Объект.Задолженность Цикл
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
		
		РассчитатьСуммуПениПоСтроке(ДанныеСтроки, ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

// Расчет суммы пени по строке без расчета просрочки
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПениПоСтроке(ДанныеСтроки, Знач ДанныеОбъекта)
	
	Если ДанныеОбъекта.ПериодРасчета = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Коэффициент = 100;
	ИначеЕсли ДанныеОбъекта.ПериодРасчета = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Коэффициент = 3000;
	Иначе
		Коэффициент = 36000;
	КонецЕсли;

	ДанныеСтроки.Сумма = ДанныеСтроки.Задолженность*ДанныеСтроки.Просрочка*ДанныеОбъекта.СтавкаПени/Коэффициент;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокОплатыПоДоговору(Знач ДоговорКонтрагента)
	СрокОплаты = 0;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СрокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СрокОплаты");
	КонецЕсли; 

	Если СрокОплаты = 0 Тогда
		СрокОплаты = Константы.СрокОплатыПокупателей.Получить();
	КонецЕсли;
	
	Возврат СрокОплаты;
КонецФункции

&НаСервереБезКонтекста
Процедура РассчитатьПросрочку(ДанныеСтроки, Знач ДанныеОбъекта)

	Перем СрокОплатыПоДоговору;
	
	Если НЕ ДанныеОбъекта.Свойство("СрокОплатыПоДоговору", СрокОплатыПоДоговору) Тогда
		СрокОплатыПоДоговору = СрокОплатыПоДоговору(ДанныеОбъекта.ДоговорКонтрагента);
	КонецЕсли; 

	ДатаСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Сделка, "Дата");
	
	ДанныеСтроки.Просрочка = (НачалоДня(ДанныеОбъекта.Дата) - НачалоДня(ДатаСделки))/86400 - СрокОплатыПоДоговору;
	
	РассчитатьСуммуПениПоСтроке(ДанныеСтроки, ДанныеОбъекта);
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Объект.СуммаДокумента   = Объект.Задолженность.Итог("Сумма");
	Форма.СуммаЗадолжености = Объект.Задолженность.Итог("Задолженность");

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#Область ЦеныИВалюта
	
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета И НЕ ДоговорВВалюте) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ВалютаДокумента 			= СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов 		= СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов 	= СтруктураЦеныИВалюта.Кратность;
		
		Модифицированность = Истина;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
		ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
			ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения ИЛИ Объект.КратностьВзаиморасчетов <> КратностьДоИзменения;
		
		Если Объект.Задолженность.Количество() > 0 И ПересчитатьЦены Тогда
			ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитаем задолженность и пени в другую валюту
&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения)
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурсаДоИзменения = Новый Структура("Валюта, Курс, Кратность", ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурсаДоИзменения = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;
	
	СтруктураНовогоКурса = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

	Для каждого Строка Из Объект.Задолженность Цикл
		Строка.Задолженность = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Строка.Задолженность, СтруктураКурсаДоИзменения, СтруктураНовогоКурса);
		Строка.Сумма         = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Строка.Сумма, СтруктураКурсаДоИзменения, СтруктураНовогоКурса);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ДоговорКонтрагента");
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, Валютный");
	
	ДоговорВВалюте = РеквизитыДоговора.Валютный;
	
	Если Объект.ВалютаДокумента <> РеквизитыДоговора.ВалютаВзаиморасчетов Тогда
		Объект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
		
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	ЗаполнитьСчетаУчета("ДоговорКонтрагента", ПричиныИзменения);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЗадолженности()
	ДанныеОбъекта = Новый Структура("Дата, ДоговорКонтрагента, ПериодРасчета, СтавкаПени");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтроки = Новый Структура("Сделка, Просрочка, Задолженность, Сумма"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элементы.Задолженность.ТекущиеДанные);
	
	РассчитатьСуммуПениПоСтроке(ДанныеСтроки, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Задолженность.ТекущиеДанные, ДанныеСтроки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	Возврат СчетаУчета.СчетРасчетовПокупателя;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения)

	ПричиныИзменения.Добавить("Контрагент");
	
	ВидыДоговоров = Метаданные.Документы.НачислениеПеней.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, 
		Объект.Организация, ВидыДоговоров);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;

	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив;
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыПереданныеСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходов");
	ЭлементыСчетов.Добавить("ТоварыСчетРасходов");
	ЭлементыСчетов.Добавить("ТоварыСубконто");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоТаре");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетУчетаНДС");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(Знач ПричиныИзменения, Знач Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"НачислениеПеней",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


