#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация.ИНН
	|		ИНАЧЕ Реквизиты.Организация.ИНН
	|	КОНЕЦ КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	Реквизиты.Исполнитель КАК Исполнитель,
	|	Реквизиты.ИсполнительНаОсновании КАК ИсполнительНаОсновании,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЧерезКого,
	|	НЕОПРЕДЕЛЕНО КАК ЗаЗаказчикаНаОсновании,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Содержание КАК ТоварНаименование,
	|	NULL КАК СтранаПроисхождения,
	|	NULL КАК ПредставлениеСтраны,
	|	NULL КАК НомерГТД,
	|	NULL КАК ПредставлениеГТД,
	|	NULL КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	НЕОПРЕДЕЛЕНО КАК ПериодичностьУслуги,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(ИспользуетсяПостановлениеНДС981 = Истина) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	РеализацияУслугПоПереработке.Дата КАК Дата,
	|	РеализацияУслугПоПереработке.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК Руководитель,
	|	НЕОПРЕДЕЛЕНО КАК ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	РеализацияУслугПоПереработке.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	РеализацияУслугПоПереработке.Контрагент,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	"""" КАК КППСчетаФактуры,
	|	"""" КАК КПППродавца,
	|	РеализацияУслугПоПереработке.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)
	|	И &УсловиеПоДате";
	
	Если ИспользуетсяПостановлениеНДС981 Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"РеализацияУслугПоПереработке.Дата >= ДАТАВРЕМЯ(2017,10,1)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"РеализацияУслугПоПереработке.Дата < ДАТАВРЕМЯ(2017,10,1)");
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка = &Ссылка";
	
	Если Не ЗначениеЗаполнено(Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить()) Тогда
		ТекстЗапроса = ТекстЗапроса 
		+ "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияУслугПоПереработкеУслуги.ПлановаяСтоимость КАК Цена,
		|	&Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПлановымЦенам),
		|   &ЦенаВключаетНДС
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
		|ГДЕ
		|	РеализацияУслугПоПереработкеУслуги.Ссылка = &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса
	+"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, 
		Объект.Контрагент, 
		Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивДокументов)
	|	И РеализацияУслугПоПереработке.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = РеализацияУслугПоПереработке.Ссылка)
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ЕстьНДС
			И (НЕ УчетнаяПолитика.ПлательщикНДС(Выборка.Организация, Выборка.Дата) 
			ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Выборка.Дата) >= 3 
			И НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Выборка.Организация, Выборка.Дата)) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ЗАПОЛНЕНИЕ ДОКУМЕНТА

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходов) Тогда
			СтрокаТабличнойЧасти.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если СведенияОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Субконто) Тогда
			
			СтрокаТабличнойЧасти.Субконто = СведенияОНоменклатуре.Субконто;
			
		ИначеЕсли СведенияОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТабличнойЧасти.Субконто =
				СведенияОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.Субконто);
			
		Иначе
			СтрокаТабличнойЧасти.Субконто = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
			СтрокаТабличнойЧасти.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПродажи) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "МатериалыЗаказчика" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиЗаб) Тогда
			СтрокаТабличнойЧасти.СчетУчета = БухгалтерскийУчет.СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(СчетаУчета.СчетПередачиЗаб);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет табличную часть МатериалыЗаказчика на основании данных табличной части Услуги.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
// Счета учета не заполняются. При необходимости, об этом должен позаботиться вызывающий код.
//
// Параметры:
//  МатериалыЗаказчика - ДокументТабличнаяЧасть.РеализацияУслугПоПереработке.МатериалыЗаказчика - заполняемая табличная часть.
//              Допускается передавать соответствующие данные формы 
//              или таблицу значений со совпадающей структурой.
//  Услуги - ТаблицаЗначений - структура таблицы совпадает со структурой одноименной табличной части
// 
Процедура ЗаполнитьМатериалыПоПродукции(МатериалыЗаказчика, Услуги) Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	ЭлементыТекстаЗапроса = Новый Массив;
	// Исходные данные
	ЭлементыТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Услуги.Спецификация КАК Спецификация,
		|	Услуги.Количество КАК КоличествоПродукции
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	&Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Спецификация <> ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Услуги.Спецификация");
	
	// Данные о расходе сырья
	ЭлементыТекстаЗапроса.Добавить(УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья());
	
	// Преобразуем в формат получателя
	ЭлементыТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗатратыСырья.НомерСтрокиСпецификации) КАК НомерСтрокиСпецификации,
		|	ЗатратыСырья.Номенклатура КАК Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	СУММА(ЗатратыСырья.Количество) КАК Количество
		|ИЗ
		|	ЗатратыСырья КАК ЗатратыСырья
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиСпецификации,
		|	НоменклатураПредставление");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Услуги", Услуги);
	Запрос.Текст = СтрСоединить(ЭлементыТекстаЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(МатериалыЗаказчика.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция УслугиПоДаннымОВыпускеПродукции(ДокументРеализацииУслуг, ДокументыВыпуска) Экспорт
	
	Услуги = Новый ТаблицаЗначений;
	Для Каждого ОписаниеКолонки Из Метаданные.Документы.РеализацияУслугПоПереработке.ТабличныеЧасти.Услуги.Реквизиты Цикл
		Услуги.Колонки.Добавить(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыВыпуска", ДокументыВыпуска);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Выпуск.Номенклатура КАК Номенклатура,
	|	Выпуск.Спецификация КАК Спецификация,
	|	Выпуск.Номенклатура.НаименованиеПолное КАК Содержание,
	|	Выпуск.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Выпуск.Количество КАК Количество,
	|	Выпуск.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	Выпуск.ПлановаяСтоимость КАК ПлановаяСтоимость,
	|	Выпуск.СуммаПлановая КАК СуммаПлановая,
	|	Выпуск.Счет КАК СчетУчета,
	|	Выпуск.НоменклатурнаяГруппа КАК Субконто,
	|	Выпуск.НомерСтроки КАК НомерСтроки,
	|	Выпуск.Ссылка.Дата КАК Дата,
	|	Выпуск.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Выпуск
	|ГДЕ
	|	Выпуск.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья)
	|	И Выпуск.Ссылка В(&ДокументыВыпуска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	НомерСтроки";
	
	НовыеСтрокиТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Дата");
	ДанныеОбъекта.Вставить("Организация");
	ДанныеОбъекта.Вставить("СуммаВключаетНДС");
	ДанныеОбъекта.Вставить("ТипЦен");
	ДанныеОбъекта.Вставить("ВалютаДокумента");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов");
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов");
	ДанныеОбъекта.Вставить("ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументРеализацииУслуг);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	
	ПереченьНоменклатуры        = ОбщегоНазначения.ВыгрузитьКолонку(НовыеСтрокиТабличнойЧасти, "Номенклатура", Истина);
	СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(ПереченьНоменклатуры, ДанныеОбъекта);
		
	Для Каждого СтрокаОснование Из НовыеСтрокиТабличнойЧасти Цикл
		
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснование);
		
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[НоваяСтрока.Номенклатура];
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(СтрокаОснование.ВидСтавкиНДС, ДанныеОбъекта.Дата);
		НоваяСтрока.Цена = СведенияОНоменклатуре.Цена;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументРеализацииУслуг.СуммаВключаетНДС);
		
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта,
			НоваяСтрока,
			"Услуги",
			СведенияОНоменклатуре);
		
	КонецЦикла;
	
	Возврат Услуги;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ДоговорКонтрагента.КодРаздел7ДекларацииНДС КАК КодОперацииПоСделке,
	|	ЛОЖЬ КАК НДСИсчисляетсяНалоговымАгентом
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.Ссылка,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("ВалютаРеглУчета,ВалютаДокумента,ВалютаВзаиморасчетов,ДоговорКонтрагента,ВидДоговора,Ссылка,
		|СуммаВключаетНДС,Организация,Период,КурсВзаиморасчетов,КратностьВзаиморасчетов,КурсДокумента,КратностьДокумента,
		|РасчетыВУсловныхЕдиницах,ОрганизацияПрименяетУСН,НачислятьНДСПоОтгрузке,ЭтоОтложенноеПроведение");
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
	Если НЕ УчетнаяПолитика.Существует(Выборка.Организация, Выборка.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	// Коэффициенты пересчета сумм
	// - из валюты документа в валюту взаиморасчетов
	// - из валюты взаиморасчетов в рубли
	Реквизиты.ОрганизацияПрименяетУСН = УчетнаяПолитика.СистемаНалогообложения(Выборка.Организация, Выборка.Период) = Перечисления.СистемыНалогообложения.Упрощенная;
	Реквизиты.НачислятьНДСПоОтгрузке  = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Выборка.Организация, Выборка.Период);
	Реквизиты.ВалютаРеглУчета         = Константы.ВалютаРегламентированногоУчета.Получить();
	Реквизиты.ЭтоОтложенноеПроведение = ЭтоОтложенноеПроведение;
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаРеглУчета Тогда
		Реквизиты.КурсДокумента = 1;
		Реквизиты.КратностьДокумента = 1;
		КоэффициентРуб = 1;
	Иначе
		Реквизиты.КурсДокумента = Реквизиты.КурсВзаиморасчетов;
		Реквизиты.КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
		КоэффициентРуб = Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаДокумента Тогда
		Реквизиты.КурсВзаиморасчетов = 1;
		Реквизиты.КратностьВзаиморасчетов = 1;
		КоэффициентВзаиморасчетов = 1;
	Иначе
		Реквизиты.КурсВзаиморасчетов = Реквизиты.КурсВзаиморасчетов; 
		Реквизиты.КратностьВзаиморасчетов = Реквизиты.КратностьВзаиморасчетов;
		КоэффициентВзаиморасчетов = (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов) / КоэффициентРуб;
	КонецЕсли;

	Запрос.УстановитьПараметр("КоэффициентВзаиморасчетов",     КоэффициентВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентРуб",                КоэффициентРуб);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",               Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",       УчетнаяПолитика.ПрименяетсяУСН(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент", УчетнаяПолитика.ПрименяетсяУСНПатент(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("НачислятьНДСПриОтгрузке",       УчетнаяПолитика.НачислятьНДСПоОтгрузке(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("СодержаниеСписаниеМатериалов",  НСтр("ru = 'Отчет давальцу о списанных в производство материалах'") );
	Запрос.УстановитьПараметр("СинонимМатериалы",              НСтр("ru = 'Материалы заказчика'"));
	Запрос.УстановитьПараметр("СчетВыручка",                   ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("ИспользуетсяОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("МассивКодовРеализацийЗаРубеж",
		Справочники.КодыОперацийРаздела7ДекларацииПоНДС.КодыРеализацииУслугЗаРубежом());
		
	ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты);

	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПлановаяСебестоимость(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Процедура ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ПОМЕСТИТЬ СчетаЕНВД
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|ГДЕ
	|	СчетаДоходовИРасходовЕНВД.Счет В ИЕРАРХИИ(&СчетВыручка)
	|	И НЕ СчетаДоходовИРасходовЕНВД.Счет.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Ссылка,
	|	Услуги.НомерСтроки,
	|	Услуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Услуги.Номенклатура,
	|	Услуги.Спецификация,
	|	Услуги.Содержание,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.ПлановаяСтоимость,
	|	Услуги.СуммаПлановая,
	|	Услуги.Сумма,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС КАК НДС,
	|	Услуги.СчетУчета,
	|	Услуги.СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоходЕНВД,
	|	Услуги.СчетРасходов,
	|	Услуги.Субконто,
	|	Услуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Услуги.СчетУчетаНДСПоРеализации,
	|	СправочникНоменклатура.КодРаздел7ДекларацииНДС,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодСоответствуетСт149НКРФ,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов, ЛОЖЬ) КАК КодВключаетсяВРеестр
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЕНВД КАК СчетаЕНВД
	|		ПО Услуги.СчетДоходов = СчетаЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ПО СправочникНоменклатура.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ПО Услуги.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Услуги = РезультатЗапроса[1].Выгрузить();
	УчетВзаиморасчетов.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(Услуги, Реквизиты);
	Запрос.УстановитьПараметр("Услуги", Услуги);

КонецПроцедуры

Функция ТекстЗапросаТаблицыДокумента(Номератаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаУслуги",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаМатериалы", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.НоменклатурнаяГруппа,
	|	ТаблицаУслуги.Содержание КАК Содержание,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Сумма КАК СуммаРуб,
	|	ТаблицаУслуги.НДС КАК СуммаНДСРуб,
	|	ТаблицаУслуги.СуммаВал КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.НДСВал КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СчетУчетаНДСПоРеализации,
	|	ТаблицаУслуги.СчетУчета КАК СчетУчета,
	|	ТаблицаУслуги.СчетДоходов,
	|	ТаблицаУслуги.ДоходЕНВД,
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.СуммаПлановая КАК СуммаПлановая,
	|	ТаблицаУслуги.Субконто,
	|	ТаблицаУслуги.КодРаздел7ДекларацииНДС,
	|	ТаблицаУслуги.КодСоответствуетСт149НКРФ,
	|	ТаблицаУслуги.КодВключаетсяВРеестр
	|ПОМЕСТИТЬ
	|	ТаблицаУслуги
	|ИЗ
	|	&Услуги КАК ТаблицаУслуги
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалы.Ссылка,
	|	ТаблицаМатериалы.Ссылка.Дата КАК Период,
	|	ТаблицаМатериалы.НомерСтроки,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Количество,
	|	ТаблицаМатериалы.СчетУчета
	|ПОМЕСТИТЬ
	|	ТаблицаМатериалы
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК ТаблицаМатериалы
	|ГДЕ
	|	ТаблицаМатериалы.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаМатериалы.Ссылка
	|";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("РеализацияРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеализацияРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	""РеализацияУслугПоПереработке"" КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.КодОперацииПоСделке КАК КодОперацииПоСделке,
	|	Реквизиты.НДСИсчисляетсяНалоговымАгентом КАК НДСИсчисляетсяНалоговымАгентом
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	ТаблицыДокументаРеализации.НомерСтроки КАК НомерСтроки,
	|	ТаблицыДокументаРеализации.Номенклатура КАК Номенклатура,
	|	ТаблицыДокументаРеализации.Содержание КАК Содержание,
	|	ТаблицыДокументаРеализации.Количество КАК Количество,
	|	ТаблицыДокументаРеализации.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицыДокументаРеализации.СуммаРуб КАК СуммаРуб,
	|	ТаблицыДокументаРеализации.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицыДокументаРеализации.СуммаРуб КАК СуммаБУ,
	|	ТаблицыДокументаРеализации.СуммаРуб КАК СуммаНУ,
	|	ТаблицыДокументаРеализации.СчетРасходов КАК СчетУчета,
	|	ТаблицыДокументаРеализации.СчетДоходов КАК СчетДоходов,
	|	ТаблицыДокументаРеализации.Субконто КАК Субконто,
	|	ТаблицыДокументаРеализации.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицыДокументаРеализации.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	ИСТИНА КАК ЭтоУслуга,
	|	ЛОЖЬ КАК ЭтоНесырьевойТовар,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента,
	|	ВЫБОР
	|		КОГДА ТаблицыДокументаРеализации.ДоходЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка)
	|		ИНАЧЕ ТаблицыДокументаРеализации.КодРаздел7ДекларацииНДС
	|	КОНЕЦ КАК КодРаздел7ДекларацииНДС,
	|	ВЫБОР
	|		КОГДА ТаблицыДокументаРеализации.ДоходЕНВД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ТаблицыДокументаРеализации.КодСоответствуетСт149НКРФ
	|	КОНЕЦ КАК КодСоответствуетСт149НКРФ,
	|	ВЫБОР
	|		КОГДА ТаблицыДокументаРеализации.ДоходЕНВД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ТаблицыДокументаРеализации.КодВключаетсяВРеестр
	|	КОНЕЦ КАК КодВключаетсяВРеестр,
	|	ВЫБОР
	|		КОГДА ТаблицыДокументаРеализации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				И Реквизиты.Период >= ДАТАВРЕМЯ(2019, 7, 1)
	|			ТОГДА Реквизиты.КодОперацииПоСделке В (&МассивКодовРеализацийЗаРубеж)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугиЗаРубежом
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицыДокументаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПлановаяСебестоимость(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("ПлановаяСебестоимостьРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ПлановаяСебестоимостьТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПлановаяСебестоимостьРеквизиты"  , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСебестоимостьТаблица"    , НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.СчетУчета КАК СчетЗатрат,
	|	ТаблицаУслуги.Номенклатура КАК НоменклатураЗатрат,
	|	ТаблицаУслуги.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК ВидДеятельности,
	|	ТаблицаУслуги.Субконто КАК ВидРасходов,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаПлановая КАК Сумма,
	|	ТаблицаУслуги.Содержание КАК Содержание
	|ИЗ
	|	ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("СписаниеМатериаловРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("СписаниеМатериаловТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеМатериаловРеквизиты"  , НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеМатериаловТаблица"    , НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	&СодержаниеСписаниеМатериалов КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""МатериалыЗаказчика"" КАК ИмяСписка,
	|	&СинонимМатериалы КАК СинонимСписка,
	|	ТаблицаТовары.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	Реквизиты.Контрагент КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДСПоРеализации
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(Номератаблиц)

	НомераТаблиц.Вставить("ВТ_ТаблицыДокументаЗачетАванса", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаУслуги.Ссылка КАК Документ.РеализацияУслугПоПереработке) КАК Ссылка,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ДоходЕНВД
	|			ТОГДА ТаблицаУслуги.СуммаВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетовЕНВД
	|ПОМЕСТИТЬ ВТ_ТаблицыДокументаЗачетАванса
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаВзаиморасчетовПатент) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ТаблицыДокументаЗачетАванса.СуммаВзаиморасчетовТорговыйСбор) КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	ВТ_ТаблицыДокументаЗачетАванса КАК ТаблицыДокументаЗачетАванса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС,
	|	Реквизиты.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗачетАвансов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗачетАвансов.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаЗачетАвансов.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаЗачетАвансов.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ТаблицаЗачетАвансов.СуммаЗачета КАК СуммаЗачета
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.ЗачетАвансов КАК ТаблицаЗачетАвансов
	|ГДЕ
	|	ТаблицаЗачетАвансов.Ссылка = &Ссылка
	|	И ТаблицаЗачетАвансов.Ссылка.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗачетАвансов.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("ПереоценкаВалютныхОстатковРеквизиты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатковРеквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт

	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;

	ТаблицаЗначений.ЗаполнитьЗначения("Реализация услуг по переработке", "Содержание");

КонецПроцедуры

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Период КАК Дата
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслуги КАК ТаблицаУслуги
	|		ПО Реквизиты.Ссылка = ТаблицаУслуги.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов",	ТаблицаВзаиморасчеты);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(
		Параметры,
		СтруктураТаблицУСН);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеализацияУслугПоПереработке";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	// Отчет о продукции
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОПродукции";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о продукции'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Отчет о материалах
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОМатериалах";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о материалах'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактур";
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Реализация услуг по переработке""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПлатежноеПоручение формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеализацияУслугПоПереработке") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеализацияУслугПоПереработке", "Реализация услуг по переработке",
			ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОПродукции") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОПродукции", "Отчет о продукции", 
			ПечатьОтчета("Услуги", МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОМатериалах") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОМатериалах", "Отчет о материалах",
			ПечатьОтчета("МатериалыЗаказчика", МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");

	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

// Функция формирует табличный документ с печатной формой акта об
// оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_РеализацияУслугПоПереработке";

	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
 	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработке.ВерсияДанных КАК ВерсияДанных,
	|	РеализацияУслугПоПереработке.ПометкаУдаления КАК ПометкаУдаления,
	|	РеализацияУслугПоПереработке.Номер КАК Номер,
	|	РеализацияУслугПоПереработке.Дата КАК Дата,
	|	РеализацияУслугПоПереработке.Проведен КАК Проведен,
	|	РеализацияУслугПоПереработке.Исполнитель КАК Исполнитель,
	|	РеализацияУслугПоПереработке.ИсполнительНаОсновании КАК ИсполнительНаОсновании,
	|	РеализацияУслугПоПереработке.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РеализацияУслугПоПереработке.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ГосударственныйКонтракт.Код КАК ГосударственныйКонтракт,
	|	РеализацияУслугПоПереработке.Комментарий КАК Комментарий,
	|	РеализацияУслугПоПереработке.Контрагент КАК Контрагент,
	|	РеализацияУслугПоПереработке.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	РеализацияУслугПоПереработке.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РеализацияУслугПоПереработке.Организация КАК Организация,
	|	РеализацияУслугПоПереработке.Ответственный КАК Ответственный,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	РеализацияУслугПоПереработке.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияУслугПоПереработке.ТипЦен КАК ТипЦен,
	|	РеализацияУслугПоПереработке.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияУслугПоПереработке.РучнаяКорректировка КАК РучнаяКорректировка,
	|	РеализацияУслугПоПереработке.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Содержание КАК Содержание,
	|	РеализацияУслугПоПереработкеУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеУслуги.Количество КАК Количество,
	|	РеализацияУслугПоПереработкеУслуги.Цена КАК Цена,
	|	РеализацияУслугПоПереработкеУслуги.Сумма КАК Сумма,
	|	РеализацияУслугПоПереработкеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияУслугПоПереработкеУслуги.СуммаНДС КАК СуммаНДС,
	|	РеализацияУслугПоПереработкеУслуги.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РеализацияУслугПоПереработкеУслуги
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработке.Ссылка.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияУслугПоПереработке.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияУслугПоПереработке.Содержание
	|		КОГДА НЕ РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияУслугПоПереработке.Номенклатура.Наименование
	|	КОНЕЦ КАК Товар,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализацияУслугПоПереработке.Количество) КАК Количество,
	|	РеализацияУслугПоПереработке.Цена КАК Цена,
	|	СУММА(РеализацияУслугПоПереработке.Сумма) КАК Сумма,
	|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияУслугПоПереработке.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(РеализацияУслугПоПереработке.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК КодАртикул
	|ИЗ
	|	ВТ_РеализацияУслугПоПереработкеУслуги КАК РеализацияУслугПоПереработке
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработке.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияУслугПоПереработке.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияУслугПоПереработке.Содержание
	|		КОГДА НЕ РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ РеализацияУслугПоПереработке.Номенклатура.Наименование
	|	КОНЕЦ,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	РеализацияУслугПоПереработке.ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработке.Цена,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияУслугПоПереработке.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка,
	|	НомерСтроки";
	Результат = Запрос.ВыполнитьПакет();

	Выборка = Результат[0].Выбрать();
	ВсеСтроки = Результат[2].Выгрузить();
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	ПервыйДокумент = Истина;

	Пока Выборка.Следующий() Цикл

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ТаблицаУслуги = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Выборка.Организация, Выборка.Дата, Выборка.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Если Выборка.Исполнитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
				ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
				ДолжностьИНазваниеОрганизации = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
				Если ЗначениеЗаполнено(ПредставлениеПоставщика) И ЗначениеЗаполнено(ДолжностьИНазваниеОрганизации) Тогда
					ДолжностьИНазваниеОрганизации = ДолжностьИНазваниеОрганизации + " " + ПредставлениеПоставщика;
				ИначеЕсли ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда
					ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
				КонецЕсли;
			Иначе
				ДанныеОтветственногоЛица = ОтветственныеЛицаБП.РеквизитыПодписиУполномоченногоЛица(Выборка.Организация, Выборка.Исполнитель,Выборка.ИсполнительНаОсновании, Выборка.Дата);
				ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.ФИО.Представление;
				Если ЗначениеЗаполнено(Выборка.ИсполнительНаОсновании) И ЗначениеЗаполнено(ЗаместительПоПриказу) Тогда 
					ЗаместительПоПриказу = ЗаместительПоПриказу + ", " + ДанныеОтветственногоЛица.ОснованиеПраваПодписиПредставление;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) И ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда
					ДолжностьИНазваниеОрганизации = "" + ДанныеОтветственногоЛица.ДолжностьПредставление + " " + ПредставлениеПоставщика;
				ИначеЕсли ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда 
					ДолжностьИНазваниеОрганизации = "" + ДанныеОтветственногоЛица.ДолжностьПредставление;
				Иначе
					ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
			ДолжностьИНазваниеОрганизации = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
			Если ЗначениеЗаполнено(ПредставлениеПоставщика) И ЗначениеЗаполнено(ДолжностьИНазваниеОрганизации) Тогда
				ДолжностьИНазваниеОрганизации = ДолжностьИНазваниеОрганизации + " " + ПредставлениеПоставщика;
			ИначеЕсли ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда
				ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
			КонецЕсли;
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");
		
		ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
		НазваниеДокумента                      = НСтр("ru='Акт оказания услуг по переработке '");
		ТекстЗаголовка                         = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Выборка, "Акт", Истина);
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ДанныеПечатиПоставщик = Новый Структура;
		ДанныеПечатиПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечатиПоставщик.Вставить("Поставщик", Выборка.Организация);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ДанныеПечатиПокупатель = Новый Структура;
		ДанныеПечатиПокупатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		ДанныеПечатиПокупатель.Вставить("Получатель", Выборка.Контрагент);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		Если Макет.Области.Найти("Основание") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Основание");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Основание", СокрЛП(Строка(Выборка.ДоговорКонтрагента))));
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		// Вывести табличную часть
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаТаблицыСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ДанныеПечатиКодАртикул = Новый Структура;
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ДанныеПечатиКодАртикул.Вставить("ИмяКодАртикул", "Артикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ДанныеПечатиКодАртикул.Вставить("ИмяКодАртикул", "Код");
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиКодАртикул);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		НомерСтроки = 0;

		Сумма    = 0;
		СуммаНДС = 0;

		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ДанныеПечатиСтрока = Новый Структура;
			ДанныеПечатиСтрока.Вставить("НомерСтроки", НомерСтроки);
			ДанныеПечатиСтрока.Вставить("Товар", СокрЛП(СтрокаТабличнойЧасти.Товар));
			ОбластьСтроки.Параметры.Заполнить(ДанныеПечатиСтрока);
			
			Сумма    = Сумма    + СтрокаТабличнойЧасти.Сумма;
			СуммаНДС = СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;

			ТабличныйДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", Всего));
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ДанныеПечатиИтогоНДС = Новый Структура;
		ДанныеПечатиИтогоНДС.Вставить("ВсегоНДС", ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС));
		ДанныеПечатиИтогоНДС.Вставить("НДС",      ?(Выборка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС"));
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СуммаКПрописи = Сумма + ?(Выборка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ИтоговаяСтрока = НСтр("ru='Всего оказано услуг '") + НомерСтроки
			+ НСтр("ru=', на сумму '") + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Выборка.ВалютаДокумента);
		СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.ВалютаДокумента);
		ДанныеПечатиСуммаПрописью = Новый Структура;
		ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ДанныеПечатиПодписи = Новый Структура;
		ДанныеПечатиПодписи.Вставить("ДолжностьИНазваниеОрганизации", ДолжностьИНазваниеОрганизации);
		ДанныеПечатиПодписи.Вставить("ЗаместительПоПриказу", ЗаместительПоПриказу);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодписи);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалПечать"));
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Выборка, ОбъектыПечати, ПараметрыПечати);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой отчета о
// продукции, произведенной из давальческого сырья и переданной давальцу
//
// Возвращаемое значение:
//  Табличный документ - печатная форма отчета
//
Функция ПечатьОтчета(ТабЧасть, МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
 	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Отчет_о_" + ТабЧасть;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = "
		|//Шапка
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияУслугПоПереработке.Ссылка,
		|	РеализацияУслугПоПереработке.ВерсияДанных,
		|	РеализацияУслугПоПереработке.ПометкаУдаления,
		|	РеализацияУслугПоПереработке.Номер,
		|	РеализацияУслугПоПереработке.Дата,
		|	РеализацияУслугПоПереработке.Проведен,
		|	РеализацияУслугПоПереработке.ВалютаДокумента,
		|	РеализацияУслугПоПереработке.ДоговорКонтрагента,
		|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ГосударственныйКонтракт.Код КАК ГосударственныйКонтракт,
		|	РеализацияУслугПоПереработке.Комментарий,
		|	РеализацияУслугПоПереработке.Исполнитель,
		|	РеализацияУслугПоПереработке.ИсполнительНаОсновании,
		|	РеализацияУслугПоПереработке.Контрагент,
		|	РеализацияУслугПоПереработке.КратностьВзаиморасчетов,
		|	РеализацияУслугПоПереработке.КурсВзаиморасчетов,
		|	РеализацияУслугПоПереработке.Организация,
		|	РеализацияУслугПоПереработке.Ответственный,
		|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
		|	РеализацияУслугПоПереработке.СчетУчетаРасчетовПоАвансам,
		|	РеализацияУслугПоПереработке.СчетУчетаРасчетовСКонтрагентом,
		|	РеализацияУслугПоПереработке.ТипЦен,
		|	РеализацияУслугПоПереработке.СуммаДокумента,
		|	РеализацияУслугПоПереработке.РучнаяКорректировка,
		|	РеализацияУслугПоПереработке.ПодразделениеОрганизации,
		|	РеализацияУслугПоПереработке.СпособЗачетаАвансов
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияУслугПоПереработке.Дата,
		|	РеализацияУслугПоПереработке.Ссылка
		|;
		|
		|// Табличная часть (услуги или материалы заказчика)
		|ВЫБРАТЬ
		|	РеализацияУслугПоПереработке.Ссылка       КАК Ссылка,
		|	РеализацияУслугПоПереработке.НомерСтроки  КАК НомерСтроки,
		|	РеализацияУслугПоПереработке.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное = """"
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияУслугПоПереработке.Номенклатура)
		|		ИНАЧЕ РеализацияУслугПоПереработке.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Товар,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Артикул
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Код
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
		|			ТОГДА """"
		|	КОНЕЦ КАК КодАртикул,
		|	РеализацияУслугПоПереработке.Количество КАК Количество,
		|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения" +

		?(ТабЧасть = "Услуги", ",
			|	РеализацияУслугПоПереработке.Цена,
			|	РеализацияУслугПоПереработке.Сумма","") + "

		|ИЗ
		|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
		|
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияУслугПоПереработке.Ссылка.Дата,
		|	РеализацияУслугПоПереработке.Ссылка,
		|	РеализацияУслугПоПереработке.НомерСтроки
		|";

	Результат = Запрос.ВыполнитьПакет();
	Выборка   = Результат[0].Выбрать();
	ВсеСтроки = Результат[1].Выгрузить();
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	ПервыйДокумент = Истина;

	Пока Выборка.Следующий() Цикл

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ТаблицаПродукция = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияУслугПоПереработке.ПФ_MXL_Акт");

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		НазваниеДокумента = НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
							НСтр("ru='продукции, произведенной из сырья заказчика'"),
							НСтр("ru='переработанном сырье '"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Выборка,
												 НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
												 НСтр("ru='продукции, произведенной из сырья заказчика'"),
												 НСтр("ru='переработанном сырье '")),
												 Истина);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = Выборка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель              = Выборка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("Основание") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Основание");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Основание", СокрЛП(Строка(Выборка.ДоговорКонтрагента))));
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести табличную часть
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаТаблицы" + ТабЧасть + "СКодом", "ШапкаТаблицы" + ТабЧасть);
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = "Артикул";
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = "Код";
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "Строка" + ТабЧасть + "СКодом", "Строка" + ТабЧасть);
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		НомерСтроки = 0;

		Сумма = 0;

		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродукция Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

			Если ТабЧасть = "Услуги" Тогда
				Сумма = Сумма + СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;

		Если ТабЧасть = "Услуги" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			СуммаКПрописи = Сумма;
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего продукции '") + НомерСтроки +
				НСтр("ru=', на сумму '") + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Выборка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.ВалютаДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		Если ТабЧасть = "МатериалыЗаказчика" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Выборка.Организация, Выборка.Дата, Выборка.ПодразделениеОрганизации);
		НаименованиеДолжности = ?(ЗначениеЗаполнено(ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление), ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление + " ", "");
		ДолжностьИНазваниеОрганизации = НаименованиеДолжности + ПредставлениеПоставщика;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Выборка.Организация, Выборка.Исполнитель, Выборка.Дата);
			Если Выборка.Исполнитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
				ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
			Иначе
				ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.Представление;
			КонецЕсли;
		Иначе
			ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
		КонецЕсли;
		
		Отпустил = Новый Структура("Отпустил", ЗаместительПоПриказу);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Отпустил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалПечать"));
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Выборка, ОбъектыПечати, ПараметрыПечати);
			
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	Хозрасчетный.Сумма КАК СуммаПредоплатыРуб,
	|	Хозрасчетный.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Хозрасчетный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРуб КАК СуммаПредоплатыРуб,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Организация = ДанныеПервичныхДокументов.Организация
	|			И ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка КАК Ссылка,
	|	РеализацияУслугПоПереработкеУслуги.НомерСтроки КАК НомерСтроки,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура КАК Товар,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Наименование КАК ТоварНаименование,
	|	РеализацияУслугПоПереработкеУслуги.Сумма КАК ВсегоВал,
	|	РеализацияУслугПоПереработкеУслуги.СуммаНДС КАК НДСВал,
	|	РеализацияУслугПоПереработкеУслуги.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО РеализацияУслугПоПереработкеУслуги.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И РеализацияУслугПоПереработкеУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли