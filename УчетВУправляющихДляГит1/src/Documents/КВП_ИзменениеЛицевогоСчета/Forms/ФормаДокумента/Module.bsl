
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Установливает видимость элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах") Тогда
		
		Элементы.ВидИзменения.Видимость = Истина;
		
		Элементы.ДанныеОЖильцах.Видимость        = Ложь;
		Элементы.СтраницаОтветственный.Видимость = Ложь;
		Элементы.Продажа.Видимость               = Ложь;
		
		Элементы.ГруппаЛегенды.Видимость = Форма.УказатьПроживающих Или Не Форма.мУказыватьКоличествоПрожИЗарегЧислами;
		
		Элементы.ГлавнаяСтепеньРодства.Видимость = Ложь;
		
		Если Объект.ВидИзменения = 
				ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация")
		 Или Объект.ВидИзменения = 
		 		ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации") Тогда
			
			Элементы.ГлавнаяПроживает.Видимость                  = Ложь;
			Элементы.ГлавнаяВладелецЕдинственногоЖилья.Видимость = Истина;
			Элементы.ГлавнаяЗарегистрирован.Видимость            = Истина;
			Элементы.ГлавнаяДатаРегистрации.Видимость            = Истина;
			Элементы.ГлавнаяДоляСобственностиСтр.Видимость       = Истина;
			Элементы.ГлавнаяСобственник.Видимость                = Истина;
			
			Если Объект.ВидИзменения = 
					ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация") Тогда
				Элементы.ГлавнаяДатаОтменыИзменения.Видимость = Истина;
				Элементы.ГлавнаяСтепеньРодства.Видимость      = Истина;
				Элементы.ГлавнаяДатаРегистрации.Заголовок     = "Дата регистрации";
				Элементы.ГлавнаяДатаРегистрации.Подсказка     = "Дата регистрации";
				Элементы.ГлавнаяДатаОтменыИзменения.Заголовок = "Дата окончания регистрации";
				Элементы.ГлавнаяДатаОтменыИзменения.Подсказка = "Дата окончания регистрации";
				Элементы.ГлавнаяЗарегистрирован.Заголовок     = "Зарегистрирован";
				Элементы.ДатаРегистрации.Ширина               = 20;
				Форма.НадписьРасшифровки                      = "Жильцы, зарегистрированные на данный момент или собственники.";
			Иначе
				Элементы.ГлавнаяДатаОтменыИзменения.Видимость = Ложь;
				Элементы.ГлавнаяЗарегистрирован.Заголовок     = "Снять с регистрации";
				Элементы.ГлавнаяДатаРегистрации.Заголовок     = "Дата снятия с регистрации";
				Элементы.ГлавнаяДатаРегистрации.Подсказка     = "Дата снятия с регистрации";
				Элементы.ГруппаЛегенды.Видимость              = Ложь;
				Элементы.ДатаРегистрации.Ширина               = 15;
			КонецЕсли;
			
		ИначеЕсли Объект.ВидИзменения = 
					ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие")
			  Или Объект.ВидИзменения = 
			  		ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие") Тогда
			
			Элементы.ГлавнаяПроживает.Видимость                  = Истина;
			Элементы.ГлавнаяВладелецЕдинственногоЖилья.Видимость = Истина;
			Элементы.ГлавнаяЗарегистрирован.Видимость            = Ложь;
			Элементы.ГлавнаяДатаРегистрации.Видимость            = Истина;
			Элементы.ГлавнаяДоляСобственностиСтр.Видимость       = Истина;
			Элементы.ГлавнаяСобственник.Видимость                = Истина;
			Элементы.ГлавнаяДатаОтменыИзменения.Видимость        = Истина;
			Элементы.ГлавнаяДатаРегистрации.Заголовок            = "Дата начала";
			Элементы.ГлавнаяДатаОтменыИзменения.Заголовок        = "Дата окончания";
			Элементы.ДатаРегистрации.Ширина                      = 20;
			
			Если Объект.ВидИзменения = 
					ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие") Тогда
				Элементы.ГлавнаяПроживает.Заголовок           = "Отсутствует";
				Элементы.ГруппаЛегенды.Видимость              = Ложь;
				Элементы.ГлавнаяДатаРегистрации.Подсказка     = "Дата начала отсутствия";
				Элементы.ГлавнаяДатаОтменыИзменения.Подсказка = "Дата окончания отсутствия";
			Иначе
				Элементы.ГлавнаяПроживает.Заголовок           = "Проживает";
				Элементы.ГлавнаяСтепеньРодства.Видимость      = Истина;
				Форма.НадписьРасшифровки                      = "Жильцы, проживающие на данный момент.";
				Элементы.ГлавнаяДатаРегистрации.Подсказка     = "Дата начала проживания по адресу";
				Элементы.ГлавнаяДатаОтменыИзменения.Подсказка = "Дата окончания проживания по адресу";
			КонецЕсли;
			
		КонецЕсли;
		
		ЖилоеПомещение = ПолучитьТипФондаПомещенияЛицевогоСчета(Объект.ЛицевойСчет);
		Элементы.ДанныеОЖильцах.Видимость = ?(Форма.мУказыватьКоличествоПрожИЗарегЧислами, Ложь, Истина);
		
		Если Форма.мУказыватьКоличествоПрожИЗарегЧислами И ЖилоеПомещение Тогда
			Элементы.НадписьЗаполнениеСпискаЖильцов.Видимость = Истина;
			Элементы.ГруппаДопПараметров.Видимость            = Истина;
			Элементы.УказатьПроживающих.Видимость             = Истина;
			Если Форма.УказатьПроживающих Тогда
				Элементы.ДанныеОЖильцах.Видимость        = Истина;
			Иначе
				Элементы.ДанныеОЖильцах.Видимость        = Ложь;
			КонецЕсли;
		Иначе
			Элементы.НадписьЗаполнениеСпискаЖильцов.Видимость = Ложь;
			Элементы.ГруппаДопПараметров.Видимость            = Ложь;
			Элементы.УказатьПроживающих.Видимость             = Ложь;
		КонецЕсли;
		
		Элементы.ГлавнаяСведенияОСобственности.Видимость = Форма.мУпрощенныйВариантУчетаСобственников;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника") Тогда
		
		Элементы.ГруппаЛегенды.Видимость = Ложь;
		Элементы.ВидИзменения.Видимость  = Ложь;
		
		Элементы.ДанныеОЖильцах.Видимость        = Ложь;
		Элементы.СтраницаОтветственный.Видимость = Истина;
		Элементы.Продажа.Видимость               = Ложь;
		
		Элементы.НадписьЗаполнениеСпискаЖильцов.Видимость = Ложь;
		Элементы.ГруппаДопПараметров.Видимость            = Ложь;
		
		Элементы.УказатьПроживающих.Видимость = Ложь;
		
		Если ТипЗнч(Объект.ОтветственныйСобственник) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			Элементы.РодственныеСвязи.Видимость = Истина;
			Элементы.РодственныеСвязиСтепеньРодстваНовый.Заголовок = "Степень родства к " 
		                                                                          + Объект.ОтветственныйСобственник;
		Иначе
			Элементы.РодственныеСвязи.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		Форма.НадписьРасшифровки             = "Жильцы, зарегистрированные и проживающие на данный момент, а также собственники.";
		Элементы.ВидИзменения.Видимость      = Ложь;
		
		Элементы.ДанныеОЖильцах.Видимость        = Ложь;
		Элементы.СтраницаОтветственный.Видимость = Ложь;
		Элементы.Продажа.Видимость               = Истина;
		
		Элементы.ГруппаЛегенды.Видимость = Форма.УказатьПроживающих ИЛИ Не Форма.мУказыватьКоличествоПрожИЗарегЧислами;
		
		Элементы.КонтрагентОтветственный.Видимость             = Объект.ВладелецКонтрагент;
		
		Если Объект.ВладелецКонтрагент Тогда
			Элементы.ГлавнаяПродажаСтепеньРодства.Видимость    = Ложь;
			Элементы.КонтрагентОтветственный.ШрифтЗаголовка    = Новый Шрифт(,, Истина);
			Элементы.КонтрагентОтветственный.Шрифт             = Новый Шрифт(,, Истина);
		Иначе
			
			Элементы.ГлавнаяПродажаСтепеньРодства.Видимость    = Истина;
			Форма.УказатьПроживающих = Истина;
		КонецЕсли;
		
		Если Форма.мУказыватьКоличествоПрожИЗарегЧислами Тогда
			Элементы.ГруппаДопПараметров.Видимость = Истина;
			Элементы.УказатьПроживающих.Видимость  = Истина;
			Если Форма.УказатьПроживающих Тогда
				Элементы.ГлавнаяПродажа.Видимость = Истина;
			Иначе
				Элементы.ГлавнаяПродажа.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаДопПараметров.Видимость = Ложь;
			Элементы.УказатьПроживающих.Видимость  = Ложь;
		КонецЕсли;
		
		Элементы.ГлавнаяПродажаСведенияОСобственности.Видимость = Форма.мУпрощенныйВариантУчетаСобственников;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость гиперссылки, по нажатию на которую открывается 
Процедура УстановитьВидимостьСсылкиНаСписокДокументовТСЖ(Элемент, СписокДокументовТСЖ, СведенияОСобственностиБылиОтредактированы)
	
	Элемент.Видимость = (Не СписокДокументовТСЖ.Количество() = 0) И СведенияОСобственностиБылиОтредактированы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Устанавливает доступность элементов формы.
//
Процедура УстановитьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Главная.ИзменятьСоставСтрок = Истина;
	
	Если Объект.ВидИзменения = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация") Тогда
		Элементы.КоличествоЗарегистрированных.Доступность      = Истина;
	ИначеЕсли Объект.ВидИзменения = ПредопределенноеЗначение(
										"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации") Тогда
		Элементы.Главная.ИзменятьСоставСтрок                   = Ложь;
		Элементы.ГлавнаяЗарегистрирован.Доступность            = Истина;
		Элементы.КоличествоЗарегистрированных.Доступность      = Истина;
	ИначеЕсли Объект.ВидИзменения = ПредопределенноеЗначение(
										"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие") Тогда
		Элементы.Главная.ИзменятьСоставСтрок                   = Ложь;
		Элементы.ГлавнаяПроживает.Доступность                  = Истина;
		Элементы.КоличествоЗарегистрированных.Доступность      = Ложь;
	ИначеЕсли Объект.ВидИзменения = ПредопределенноеЗначение(
										"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие") Тогда
		Элементы.КоличествоЗарегистрированных.Доступность      = Ложь;
	КонецЕсли;
	
	Элементы.УказатьПроживающих.Доступность = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		Элементы.КоличествоПроживающих.Доступность             = Истина;
		Элементы.КоличествоЗарегистрированных.Доступность      = Истина;
		
		Если Объект.ВладелецКонтрагент Тогда
			Элементы.ГлавнаяПродажаУстановитьОтветственного.Доступность = Ложь;
			Элементы.УказатьПроживающих.Доступность                     = Истина;
		Иначе
			Элементы.ГлавнаяПродажаУстановитьОтветственного.Доступность = Истина;
			Элементы.УказатьПроживающих.Доступность                     = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьДоступность()

&НаСервереБезКонтекста
// Возвращает тип помещения лицевого счета.
Функция ПолучитьТипФондаПомещенияЛицевогоСчета(ЛицевойСчет)
	
	Возврат ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд;
	
КонецФункции

&НаСервере
// Обновляет отображение ранее введенных данных по документам.
Процедура ОбновитьПредыдущиеДанные()
	
	Если Объект.ВидОперации = 
				Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника
	      ИЛИ Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
		// Получаем договор на конец предыдущего дня.
		ПредОтветственный = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
								Объект.ЛицевойСчет, КонецДня(НачалоДня(Объект.Дата)-1));
		
		// Физ. лицо ответственного нужно для условного оформления.
		Если ТипЗнч(ПредОтветственный) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			ПредОтветственныйФизЛицо = ПредОтветственный.ФизЛицо;
		КонецЕсли;
		
		Элементы.РодственныеСвязиСтепеньРодстваТекущий.Заголовок = "Степень родства к " + ПредОтветственный;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПредыдущиеДанные()

&НаКлиенте
// Процедура изменяет доступность кнопки установки ответственного собственника.
//
Процедура ПроверитьПометкуКнопкиУстановкиОтветственного()

	Если Элементы.ГлавнаяПродажа.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ГлавнаяПродажаУстановитьОтветственного.Доступность = Ложь;
		Элементы.ГлавнаяПродажаУстановитьОтветственного.Пометка     = Ложь;
		
	Иначе
		
		Если НЕ Объект.ВладелецКонтрагент Тогда
			Элементы.ГлавнаяПродажаУстановитьОтветственного.Доступность = Истина;
			Элементы.ГлавнаяПродажаУстановитьОтветственного.Пометка     = (Элементы.ГлавнаяПродажа.ТекущиеДанные.Проживающий = 
																			Объект.ОтветственныйСобственник);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Получает жильцов с родственными связями.
Процедура ПолучитьРодственныхЖильцов(ВыбранноеЗначение)
	
	Объект.РодственныеСвязи.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодстваТекущий,
	|	УПЖКХ_Жильцы.ФизЛицо
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ФизическоеЛицоОсновное = &ФизЛицо)
	|			КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО УПЖКХ_Жильцы.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|	И (НЕ УПЖКХ_Жильцы.ПометкаУдаления)";
	
	Если ТипЗнч(ПредОтветственный) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		ТекОтветственный = ПредОтветственный.ФизЛицо;
	Иначе
		ТекОтветственный = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(НачалоДня(Объект.Дата)-1));
	Запрос.УстановитьПараметр("ФизЛицо",     ТекОтветственный);
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ЛицевойСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ФизЛицо = ВыбранноеЗначение.ФизЛицо Тогда
			
			НоваяСтрока = Объект.РодственныеСвязи.Добавить();
			НоваяСтрока.Жилец = Выборка.ФизЛицо;
			
			Если ТекОтветственный <> Выборка.ФизЛицо Тогда
				
				НоваяСтрока.СтепеньРодстваТекущий = Выборка.СтепеньРодстваТекущий;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
// Выполняет действия, которые связаны с изменением типа ответственного.
Процедура ВыполнитьДействияПриИзмененииТипаВладельца()
	
	Если Объект.ВладелецКонтрагент Тогда
		
		Объект.ОтветственныйСобственник = Объект.Контрагент;
		
	Иначе
		
		УказатьПроживающих = Истина;
		Если Объект.Главная.Количество() > 0 Тогда
			Объект.ОтветственныйСобственник = Объект.Главная.Получить(0).Проживающий;
		Иначе
			Объект.ОтветственныйСобственник = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет родственные связи в табличной части.
//
Процедура ОбновитьИнформациюОРодственныхСвязях()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК Проживающий,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ФизическоеЛицоОсновное = &ФизическоеЛицоОсновное)
	|		КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ФизическоеЛицоОсновное", Объект.ОтветственныйСобственник.ФизЛицо);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЖильца Из Объект.Главная Цикл
		
		Если Результат.Количество() > 0 Тогда
			
			НайденныйЖилец = Результат.НайтиСтроки(Новый Структура("Проживающий", СтрокаЖильца.Проживающий.ФизЛицо));
			Если НайденныйЖилец.Количество() > 0 Тогда
				СтрокаЖильца.СтепеньРодства = НайденныйЖилец.Получить(0).СтепеньРодства;
			Иначе
				СтрокаЖильца.СтепеньРодства = Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			
			СтрокаЖильца.СтепеньРодства = Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обновляет сведения о собственниках помещения при изменении варианта учета собственников в настройках программы ЖКХ.
//
Процедура ЗаполнитьСведенияОСобственникахПриПолномУчете()
	
	Если НЕ мУпрощенныйВариантУчетаСобственников Тогда
		ТаблицаСведенийОЖильцах = Документы.КВП_ИзменениеЛицевогоСчета.ПолучитьДанныеИзРегистра(, Объект.ЛицевойСчет, Объект.Дата);
		Если ТаблицаСведенийОЖильцах.Количество() > 0 Тогда
			СведенияОСобственности.Загрузить(ТаблицаСведенийОЖильцах);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОСобственникахПриПолномУчете()

&НаСервереБезКонтекста
// Формирует строковое представление документа собственности.
Функция ПолучитьПредставлениеСведенийОСобственности(ЯвляетсяСобственником, ВидДокументаСобственности, НомерДокументаСобственности, ДатаДокументаСобственности)
	
	Если ЯвляетсяСобственником Тогда
		Если ВидДокументаСобственности = ПредопределенноеЗначение("Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка")
		 И ПустаяСтрока(НомерДокументаСобственности)
		 И ДатаДокументаСобственности = Дата(1, 1, 1) Тогда
			Возврат "Указать сведения";
		Иначе
			Возврат ПолучитьПредставлениеДокументаСобственности(НомерДокументаСобственности, ДатаДокументаСобственности, ВидДокументаСобственности);
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСметодамиМодуляОбъекта

&НаСервере
// Заполняет табличную часть документа в соответствии с введенными ранее данными
// по указанному лицевому счету.
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_ИзменениеЛицевогоСчета"));
	ДокументОбъект.ЗаполнитьТабличнуюЧасть();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

&НаСервере
// Функция проверяет, действует ли лицевой счет.
// 
Функция ПроверитьДействиеЛицевогоСчета(ЛицевойСчет)

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_ИзменениеЛицевогоСчета"));
	Возврат ДокументОбъект.ПроверитьДействиеЛицевогоСчета(ЛицевойСчет);

КонецФункции // ПроверитьЗакрытиеЛицевогоСчета()

&НаСервере
// Заполняет количество проживающих и зарегистрированных.
//
// Параметры
//  нет.
//
Процедура ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_ИзменениеЛицевогоСчета"));
	ДокументОбъект.ЗаполнитьКоличествоПроживающихИЗарегистрированных();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры // ЗаполнитьКоличествоПроживающихИЗарегистрированных()

&НаСервереБезКонтекста
// Получает на сервере вариант учета собственников.
//
Функция ПолучитьВариантУчетаСобственниковНаСервере()
	
	Возврат ИспользуетсяУпрощенныйВариантУчетаСобственников();
	
КонецФункции // ПолучитьВариантУчетаСобственниковНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Основание = Параметры.Основание;
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
	 И НЕ Основание = Неопределено Тогда
		Если Основание.ЭтоГруппа Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			// Получаем статус лицевого счета:
			// 1 - Лицевой счет открыт или изменен.
			// 2 - Лицевой счет закрыт.
			// 3 - Лицевой счет не открыт.
			СтатусДокумента = УПЖКХ_РаботаСЛицевымиСчетами.СтатусЛицевогоСчета(Основание);
			
			Если СтатусДокумента = 2 ИЛИ СтатусДокумента = 3 Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мУпрощенныйВариантУчетаСобственников  = ИспользуетсяУпрощенныйВариантУчетаСобственников();
	мУказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	ИспользуетсяФункционалТСЖ             = Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Получить();
	
	Если Объект.ВидИзменения.Пустая() Тогда
		Объект.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация;
	КонецЕсли;
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, 
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если Параметры.Свойство("ЛицевойСчет") Тогда
			// Заполним реквизиты, переданные в параметрах формы.
			Объект.ЛицевойСчет = Параметры.ЛицевойСчет;
		КонецЕсли;
		
		Если НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		КонецЕсли;
		
		// Установим время документа
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КВП_ИзменениеЛицевогоСчета"));
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		
		Если Не Объект.ЛицевойСчет.Пустая() И Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЗаполнитьТабличнуюЧастьНаСервере();
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОСобственникахПриПолномУчете();
	
	ЗаполнитьСведенияОСобственностиПриУпрощенномУчете();
	
	ЗаполнитьСписокДокументовТСЖ();
	
	ТипВладельца = ?(Объект.ВладелецКонтрагент, 1, 0);
	
	Если Не Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника Тогда
		Если Объект.Главная.Количество() > 0 
		   ИЛИ (Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения
		   И НЕ Объект.ВладелецКонтрагент) Тогда
			УказатьПроживающих = Истина;
		Иначе
			УказатьПроживающих = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника
	 ИЛИ Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения)
	   И Не Объект.ЛицевойСчет.Пустая() Тогда
		ОбновитьПредыдущиеДанные();
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	// Установим доступность элементов формы именно при открытии, а не при создании формы,
	// так как при полном учете жильцов возникает следующая ошибка: если открыть документ
	// с видом "Снятие с регистрции", а потом изменить на "Регистрация", то в командной панели
	// таблицы нет команды "Добавить".
	УстановитьДоступность(ЭтаФорма);
	
	// Обновление вспомогательных данных при открытии формы.
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
// Обновляет данные ТЧ "Главная" при изменении реквизитов формы.
//
Процедура ОбновитьДанныеФормы()
	
	Для Каждого ТекСтрока Из Объект.Главная Цикл
		
		Если мУпрощенныйВариантУчетаСобственников Тогда
			ДоляСобственностиЧислитель   = ТекСтрока.ДоляСобственностиЧислитель;
			ДоляСобственностиЗнаменатель = ТекСтрока.ДоляСобственностиЗнаменатель;
		Иначе
			ДоляСобственностиЧислитель   = 0;
			ДоляСобственностиЗнаменатель = 0;
			ДанныеОСобственнике = СведенияОСобственности.НайтиСтроки(Новый Структура("Жилец", ТекСтрока.Проживающий));
			Если НЕ ДанныеОСобственнике.Количество() = 0 Тогда
				ДоляСобственностиЧислитель   = ДанныеОСобственнике[0].ДоляСобственностиЧислитель;
				ДоляСобственностиЗнаменатель = ДанныеОСобственнике[0].ДоляСобственностиЗнаменатель;
				ТекСтрока.Собственник = ?(ДанныеОСобственнике[0].Собственник, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ТекСтрока.ДоляСобственностиСтр = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
											ДоляСобственностиЧислитель, ДоляСобственностиЗнаменатель);
		
		ТекСтрока.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекСтрока.Собственник,
																					   ТекСтрока.ВидДокументаСобственности,
																					   ТекСтрока.НомерДокументаСобственности,
																					   ТекСтрока.ДатаДокументаСобственности);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьДанныеФормы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
	 							"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника")
	   И Не Объект.ЛицевойСчет.Пустая() Тогда
		ОбновитьПредыдущиеДанные();
	КонецЕсли;
	
	ЗаполнитьСведенияОСобственникахПриПолномУчете();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если НЕ ПроверитьДействиеЛицевогоСчета(Объект.ЛицевойСчет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет """+Объект.ЛицевойСчет+""" закрыт на " + Объект.Дата);
		Объект.ЛицевойСчет = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника")
		И НЕ Объект.ЛицевойСчет.Пустая() Тогда
		ОбновитьПредыдущиеДанные();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		ЖилоеПомещение = ПолучитьТипФондаПомещенияЛицевогоСчета(Объект.ЛицевойСчет);
		
		Если НЕ ЖилоеПомещение Тогда
			Объект.КоличествоПроживающих        = 0;
			Объект.КоличествоЗарегистрированных = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьНаСервере();
	
	ТипВладельца = ?(Объект.ВладелецКонтрагент, 1, 0);
	
	ПроверитьПометкуКнопкиУстановкиОтветственного();
	ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
	ЗаполнитьСведенияОСобственникахПриПолномУчете();
	
	ЗаполнитьСписокДокументовТСЖ();
	СведенияОСобственностиБылиОтредактированы = Ложь;
	УстановитьВидимостьСсылкиНаСписокДокументовТСЖ(Элементы.СсылкаПроверкаЧленовТСЖ, СписокДокументовТСЖ, СведенияОСобственностиБылиОтредактированы);
	
	ОбновитьДанныеФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УказатьПроживающих".
Процедура УказатьПроживающихПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
	   							"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника")
	   И НЕ Объект.ЛицевойСчет.Пустая() Тогда
		ОбновитьПредыдущиеДанные();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
	      ИЛИ Объект.ВидОперации = ПредопределенноеЗначение(
		  							"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		ПроверитьПометкуКнопкиУстановкиОтветственного();
		ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
		ОбновитьДанныеФормы();
	КонецЕсли;
	
	ЗаполнитьСписокДокументовТСЖ();
	
	УстановитьДоступность(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимостьСсылкиНаСписокДокументовТСЖ(Элементы.СсылкаПроверкаЧленовТСЖ, СписокДокументовТСЖ, СведенияОСобственностиБылиОтредактированы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидИзменения".
Процедура ВидИзмененияПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧастьНаСервере();
	ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
	
	ОбновитьДанныеФормы();
	УстановитьДоступность(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ВидИзменения".
Процедура ВидИзмененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПредыдущийВидИзмененияДанныхОЖильцах = Объект.ВидИзменения;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ВидИзменения".
Процедура ВидИзмененияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если вид изменения не поменялся, то выходим.
	Если мПредыдущийВидИзмененияДанныхОЖильцах = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ЛицевойСчет.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ДопПараметры = Новый Структура("ВыбранноеЗначение, Элемент", ВыбранноеЗначение, Элемент);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВидИзмененияОбработкаВыбора", ЭтаФорма, ДопПараметры),
					   "Табличная часть документа будет перезаполнена." +Символы.ПС+ "Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ВидИзмененияОбработкаВыбора()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ВидИзмененияОбработкаВыбора()".
Процедура ОбработатьРезультатВопросаВидИзмененияОбработкаВыбора(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ВидИзменения = ДопПараметры.ВыбранноеЗначение;
		ВидИзмененияПриИзменении(ДопПараметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВидИзмененияОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "Обработка оповещения" формы.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОСобственности" Тогда
		Если ТипЗнч(Параметр) = Тип("Строка")
		 И Параметр = "ФормаНастроек" Тогда
			мУпрощенныйВариантУчетаСобственников = ПолучитьВариантУчетаСобственниковНаСервере();
		КонецЕсли;
		ЗаполнитьСведенияОСобственникахПриПолномУчете();
	ИначеЕсли ИмяСобытия = "ПередачаСведенийОСобственностиПриУпрощенномУчете" Тогда
		Если ТипЗнч(Параметр) = Тип("Строка") Тогда
			СтруктураСведений = ПолучитьИзВременногоХранилища(Параметр);
			Если ТипЗнч(Параметр) = Тип("Строка") Тогда
				ЗаписатьСведенияОСобственности(СтруктураСведений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Обработчик события "Выбор" поля "Главная".
Процедура ГлавнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекКолонка = Элемент.ТекущийЭлемент;
	
	Если ТекКолонка.Имя = "ГлавнаяДоляСобственностиСтр" Или ТекКолонка.Имя = "ГлавнаяПродажаДоляСобственностиСтр" Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если мУпрощенныйВариантУчетаСобственников И ТекСтрока.Собственник
		   И (Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения")
		 ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		   И (Объект.ВидИзменения = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация"))))Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
			СтруктураПараметров.Вставить("Объект",          ТекСтрока.Проживающий);
			СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственностиЧислитель);
			СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственностиЗнаменатель);
		
			ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ГлавнаяВыборЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТекКолонка.Имя = "ГлавнаяСведенияОСобственности" Или ТекКолонка.Имя = "ГлавнаяПродажаСведенияОСобственности" Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если мУпрощенныйВариантУчетаСобственников 
		   И ТекСтрока.Собственник
		   И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения")
		 	ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		   	И (Объект.ВидИзменения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация")))) 
		   И Не (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		   	И (Объект.ВидИзменения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация")
		   	И ТекСтрока.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее)) Тогда
		   
		    СтандартнаяОбработка = Ложь;
		   
			ИзменитьСведенияОСобственности(ТекСтрока);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки события "Выбор" ТЧ "Главная".
//
Процедура ГлавнаяВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ТекСтрока.ДоляСобственностиЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ТекСтрока.ДоляСобственностиЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		ТекСтрока.ДоляСобственностиСтр = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
				ТекСтрока.ДоляСобственностиЧислитель, ТекСтрока.ДоляСобственностиЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры // ГлавнаяВыборЗавершение()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Главная".
Процедура ГлавнаяПриАктивизацииСтроки(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		ПроверитьПометкуКнопкиУстановкиОтветственного();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Главная".
Процедура ГлавнаяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	НоваяСтрока = Объект.Главная.Добавить();
	
	Если Копирование Тогда
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		НоваяСтрока.Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
		НоваяСтрока.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее = Ложь;
		
	Иначе
		
		Если НЕ Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
			НоваяСтрока.ДатаРегистрации = Объект.Дата;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		   И Объект.ВидИзменения = ПредопределенноеЗначение(
		   							"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация") Тогда
			НоваяСтрока.Зарегистрирован = Истина;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах")
		   И Объект.ВидИзменения = ПредопределенноеЗначение(
		   								"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие") Тогда
			НоваяСтрока.Проживает = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "Главная".
Процедура ГлавнаяПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекКолонка = Элемент.ТекущийЭлемент;
	
	ТекЖилец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Проживающий, "ФизЛицо");
	
	Если ТекКолонка.Имя = "ГлавнаяСобственник" Или ТекКолонка.Имя = "ГлавнаяПродажаСобственник" Тогда
		
		Если НЕ мУпрощенныйВариантУчетаСобственников Тогда
			Отказ = Истина;
		Иначе
			
			Если Элемент.ТекущиеДанные.ВладелецЕдинственногоЖилья Тогда
				Элемент.ТекущиеДанные.ВладелецЕдинственногоЖилья = Ложь;
			КонецЕсли;
			СтруктураПараметров = 
				УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(ТекЖилец, Объект.Дата, Ложь, Объект.ЛицевойСчет);
			ТекСообщение        = СтруктураПараметров.СтрокаОписания;
			Если НЕ Элемент.ТекущиеДанные.Собственник И ЗначениеЗаполнено(ТекСообщение) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ТекКолонка.Имя = "ГлавнаяСтепеньРодства" Или ТекКолонка.Имя = "ГлавнаяПродажаСтепеньРодства")
	        И Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ОтветственныйСобственник) Тогда
			ПоказатьПредупреждение(Неопределено, "Для установки степени родства необходимо предварительно установить ответственного собственника!");
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.Проживающий = Объект.ОтветственныйСобственник Тогда
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли (ТекКолонка.Имя = "ГлавнаяВладелецЕдинственногоЖилья" 
				Или ТекКолонка.Имя = "ГлавнаяПродажаВладелецЕдинственногоЖилья")
			И НЕ Элемент.ТекущиеДанные.ВладелецЕдинственногоЖилья Тогда
		
		СтруктураПараметров = 
			УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(ТекЖилец, Объект.Дата, , Объект.ЛицевойСчет);
		ТекСообщение   = СтруктураПараметров.СтрокаОписания;
		
		Если НЕ ТекущиеДанные.Собственник И НЕ ТекущиеДанные.Проживающий = Объект.ОтветственныйСобственник Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Жилец должен быть либо собственником, либо ответственным нанимателем!", Отказ);
		ИначеЕсли ЗначениеЗаполнено(ТекСообщение) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "Главная".
Процедура ГлавнаяПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах") Тогда
		
		Если Объект.ВидИзменения = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация")
		 ИЛИ Объект.ВидИзменения = ПредопределенноеЗначение(
		 							"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации") Тогда
			
			Если ТекущиеДанные.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"Удаление строк с ранее зарегистрированными жильцами не доступно", Отказ);
			КонецЕсли;
			
		ИначеЕсли Объект.ВидИзменения = ПредопределенноеЗначение(
											"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие") Тогда
			
			Если ТекущиеДанные.Проживает Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Удаление строк для вида операции
				|""Присутствие (временное присутствие)"" 
				|не доступно", 
				Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения") Тогда
		
		Если ТекущиеДанные.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Удаление данной строки запрещено! Возможно удаление только вручную добавленных строк.", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" поля "Главная".
Процедура ГлавнаяПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах") Тогда
		
		Если Объект.ВидИзменения = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации") Тогда
			Если ТекущиеДанные.Зарегистрирован Тогда
				Если ТекущиеДанные.ДатаРегистрации = Дата("00010101") Тогда
					ТекущиеДанные.ДатаРегистрации = Объект.Дата;
				КонецЕсли;
			Иначе
				ТекущиеДанные.ДатаРегистрации = Дата("00010101");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидИзменения = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие") Тогда
			Если ТекущиеДанные.Проживает Тогда
				Если ТекущиеДанные.ДатаРегистрации = Дата("00010101") Тогда
					ТекущиеДанные.ДатаРегистрации = Объект.Дата;
				КонецЕсли;
			Иначе
				ТекущиеДанные.ДатаРегистрации = Дата("00010101");
				ТекущиеДанные.ДатаОтменыИзменения = Дата("00010101");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийПриИзменении(Элемент)
	
	// Заполним строку последними данными из регистра.
	ТекущиеДанные = Элементы.Главная.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ГлавнаяПродажа.ТекущиеДанные;
	КонецЕсли;
	
	ТекПроживающий = ТекущиеДанные.Проживающий;
	СброситьДанные = Истина;
	
	Если Не ТекПроживающий.Пустая() Тогда
		СписокДанных  = ПолучитьСписокДанныхНаСервере(ТекПроживающий, Объект.ЛицевойСчет, Объект.Дата);
		Если Не СписокДанных = Неопределено Тогда
			
			ТекущиеДанные.Собственник                      = СписокДанных.Собственник;
			ТекущиеДанные.ВладелецЕдинственногоЖилья       = СписокДанных.ВладелецЕдинственногоЖилья;
			ТекущиеДанные.ДополнительнаяПлощадь            = СписокДанных.ДополнительнаяПлощадь;
			ТекущиеДанные.ДоляСобственностиЧислитель       = СписокДанных.ДоляСобственностиЧислитель;
			ТекущиеДанные.ДоляСобственностиЗнаменатель     = СписокДанных.ДоляСобственностиЗнаменатель;
			ТекущиеДанные.ОснованиеПолученияВСобственность = СписокДанных.ОснованиеПолученияВСобственность;
			ТекущиеДанные.ВидДокументаСобственности        = СписокДанных.ВидДокументаСобственности;
			ТекущиеДанные.НомерДокументаСобственности      = СписокДанных.НомерДокументаСобственности;
			ТекущиеДанные.ДатаДокументаСобственности       = СписокДанных.ДатаДокументаСобственности;
			СброситьДанные = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СброситьДанные Тогда
		ТекущиеДанные.ВладелецЕдинственногоЖилья      = Ложь;
		ТекущиеДанные.ДополнительнаяПлощадь           = 0;
		ТекущиеДанные.ДоляСобственностиЧислитель      = 0;
		ТекущиеДанные.ДоляСобственностиЗнаменатель    = 0;
		ТекущиеДанные.Собственник = Ложь;
		ТекущиеДанные.ОснованиеПолученияВСобственность = ПредопределенноеЗначение("Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка");
		ТекущиеДанные.ВидДокументаСобственности        = ПредопределенноеЗначение("Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСобственности      = "";
		ТекущиеДанные.ДатаДокументаСобственности       = Дата(1, 1, 1);
	КонецЕсли;
	
	Если мУпрощенныйВариантУчетаСобственников Тогда
		ТекущиеДанные.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекущиеДанные.Собственник,
																						   ТекущиеДанные.ВидДокументаСобственности,
																						   ТекущиеДанные.НомерДокументаСобственности,
																						   ТекущиеДанные.ДатаДокументаСобственности);
	КонецЕсли;
	
КонецПроцедуры // ГлавнаяПроживающийПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГлавнаяСобственник".
Процедура ГлавнаяСобственникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Главная.ТекущиеДанные;
	ТекущаяСтрока.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекущаяСтрока.Собственник, ТекущаяСтрока.ВидДокументаСобственности,
																					   ТекущаяСтрока.НомерДокументаСобственности, ТекущаяСтрока.ДатаДокументаСобственности);
	
КонецПроцедуры
																				   
&НаКлиенте
// Записывает сведения о собственности в реквизиты документа.
Процедура ЗаписатьСведенияОСобственности(СтруктураСведений)
	
	Если Не СтруктураСведений.Свойство("Собственник") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСобственника = Объект.Главная.НайтиСтроки(Новый Структура("Проживающий", СтруктураСведений.Жилец));
		
	Если Не СтрокиСобственника.Количество() = 0 Тогда
		СтрокаСобственника = СтрокиСобственника.Получить(0);
		СтрокаСобственника.ОснованиеПолученияВСобственность = СтруктураСведений.ОснованиеПолученияВСобственность;
		СтрокаСобственника.ВидДокументаСобственности        = СтруктураСведений.ВидДокумента;
		СтрокаСобственника.НомерДокументаСобственности      = СтруктураСведений.НомерДокумента;
		СтрокаСобственника.ДатаДокументаСобственности       = СтруктураСведений.ДатаДокумента;
		СтрокаСобственника.СведенияОСобственности           = ПолучитьПредставлениеСведенийОСобственности(СтрокаСобственника.Собственник,
																										  СтрокаСобственника.ВидДокументаСобственности,
																										  СтрокаСобственника.НомерДокументаСобственности,
																										  СтрокаСобственника.ДатаДокументаСобственности);
	КонецЕсли;
	
КонецПроцедуры																				   

&НаСервере
// Записывает в таблицу сведения о собственности при упрощенном варианте учета собственников.
Процедура ЗаполнитьСведенияОСобственностиПриУпрощенномУчете()
	
	Если мУпрощенныйВариантУчетаСобственников Тогда
		СтрокиССобственниками = Объект.Главная.НайтиСтроки(Новый Структура("Собственник", Истина));
		
		Для Каждого СтрокаСобственника Из СтрокиССобственниками Цикл
			СтрокаСобственника.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(СтрокаСобственника.Собственник,
																									СтрокаСобственника.ВидДокументаСобственности,
																									СтрокаСобственника.НомерДокументаСобственности,
																									СтрокаСобственника.ДатаДокументаСобственности);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует список документов "Вступление в ТСЖ" и "Выход из ТСЖ", в которых есть жильцы из текущего документа.
Процедура ЗаполнитьСписокДокументовТСЖ()
	
	СписокДокументовТСЖ.Очистить();
	
	СписокСтрокСобственников = Объект.Главная.НайтиСтроки(Новый Структура("Собственник", Истина));
	
	Если Не мУпрощенныйВариантУчетаСобственников
	 ИЛИ Не ИспользуетсяФункционалТСЖ
	 Или Не Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения
	 Или СписокСтрокСобственников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСобственников = Новый СписокЗначений;
	Для Каждого СтрокаСобственника Из СписокСтрокСобственников Цикл
		СписокСобственников.Добавить(СтрокаСобственника.Проживающий);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.ФизЛицо
	|ПОМЕСТИТЬ Собственники
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Ссылка В(&СписокСобственников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЧленыТСЖСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.КВП_ЧленыТСЖ.СрезПоследних КАК КВП_ЧленыТСЖСрезПоследних
	|ГДЕ
	|	КВП_ЧленыТСЖСрезПоследних.ЧленТСЖ В
	|			(ВЫБРАТЬ
	|				Собственники.ФизЛицо
	|			ИЗ
	|				Собственники КАК Собственники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЧленыТСЖСрезПоследних.Регистратор";
	Запрос.УстановитьПараметр("СписокСобственников", СписокСобственников);
	
	СписокДокументовТСЖ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
	
КонецПроцедуры

&НаКлиенте
// Открывает форму ввода сведений о собственности на помещение.
Процедура ИзменитьСведенияОСобственности(СтрокаТаблицы)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Жилец",                            СтрокаТаблицы.Проживающий);
	ПараметрыОткрытия.Вставить("ОснованиеПолученияВСобственность", СтрокаТаблицы.ОснованиеПолученияВСобственность);
	ПараметрыОткрытия.Вставить("ВидДокумента",                     СтрокаТаблицы.ВидДокументаСобственности);
	ПараметрыОткрытия.Вставить("НомерДокумента",                   СтрокаТаблицы.НомерДокументаСобственности);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                    СтрокаТаблицы.ДатаДокументаСобственности);
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ФормаСведенийОСобственности", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Устанавливаем параметры открытия формы выбора с отбором по л/с.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", Объект.ЛицевойСчет));
	
	// При создании жильца из документов открытия и изменения л/с в помощнике
	// необходимо пропускать страницу с вводом сведений для изменения л/с.
	СтруктураПараметров.Вставить("НеВводитьИзменениеЛСПриСозданииЖильца", Истина);
	
	// Открываем форму выбора жильца.
	ОткрытьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает данные о жильцах.
//
Функция ПолучитьСписокДанныхНаСервере(Проживающий, ЛицевойСчет, Дата)
	
	Возврат Документы.КВП_ИзменениеЛицевогоСчета.ПолучитьДанныеИзРегистра(Проживающий, ЛицевойСчет, Дата);
	
КонецФункции

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ГлавнаяПроживающий".
Процедура ГлавнаяПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеСтроки = Объект.Главная.НайтиСтроки(Новый Структура("Проживающий", ВыбранноеЗначение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		Если ВыбранноеЗначение = НайденнаяСтрока.Проживающий Тогда
			НомерСтроки = НайденнаяСтрока.НомерСтроки;
			
			// Если нашли строку с данным проживаем при этом это не текущая строка с текущим проживающим,
			// тогда сообщаем об ошибке повторного выбора проживающего.
			Если НомерСтроки > 0
			 И (Не Элементы.Главная.ТекущиеДанные=Неопределено И Не НомерСтроки=Элементы.Главная.ТекущиеДанные.НомерСтроки)Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Такой проживающий уже есть в таблице. Строка №" + НомерСтроки);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей ввода периода проживания или регистрации.
//
Процедура ПриИзмененииПериодаПроживанияРегистрации(Элемент)
	
	Если Объект.ВидИзменения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация")
	 Или Объект.ВидИзменения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие")
	 Или Объект.ВидИзменения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие") Тогда
		
		ПроверитьПериодПроживанияРегистрации(Элементы.Главная.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей ввода периода проживания или регистрации.
//
Процедура ПродажаПриИзмененииПериодаПроживанияРегистрации(Элемент)
	
	ПроверитьПериодПроживанияРегистрации(Элементы.ГлавнаяПродажа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет период проживания или регистрации и исправляет его при необходимости.
//
Процедура ПроверитьПериодПроживанияРегистрации(ТекущиеДанные)
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ЕстьИсправления = Ложь;
		
		// Дата окончания проживания или регистрации не должна превышать дату начала периода.
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаРегистрации)
		   И ЗначениеЗаполнено(ТекущиеДанные.ДатаОтменыИзменения)
		   И ТекущиеДанные.ДатаРегистрации > ТекущиеДанные.ДатаОтменыИзменения Тогда
			
			// Дату окончания приводим к дате начала периода.
			ТекущиеДанные.ДатаОтменыИзменения = ТекущиеДанные.ДатаРегистрации;
			ЕстьИсправления = Истина;
			
		КонецЕсли;
		
		// Дата окончания проживания или регистрации не должна превышать дату начала периода.
		// Используется только для вижа операции продажи и прочих изменений.
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаЗаселения)
		   И ЗначениеЗаполнено(ТекущиеДанные.ДатаВыбытия)
		   И ТекущиеДанные.ДатаЗаселения > ТекущиеДанные.ДатаВыбытия Тогда
			
			// Дату окончания приводим к дате начала периода.
			ТекущиеДанные.ДатаВыбытия = ТекущиеДанные.ДатаЗаселения;
			ЕстьИсправления = Истина;
			
		КонецЕсли;
		
		Если ЕстьИсправления Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период проживания или регистрации был введен некорректно и исправлен автоматически!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтветственныйСобственник".
Процедура ОтветственныйСобственникПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОтветственныйСобственник".
Процедура ОтветственныйСобственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ОтветственныйСобственник = Неопределено Тогда
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка"), "Жильцы");
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"),  "Контрагенты");
		
		ВыбранныйТип       = Неопределено;
		ДопПараметры       = Новый Структура("Элемент", Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветственныйСобственникНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
		Возврат;
		
	КонецЕсли;
	
	ОтветственныйСобственникНачалоВыбораФрагмент(Элемент);
	
КонецПроцедуры // ОтветственныйСобственникНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ОтветственныйСобственникНачалоВыбора()".
Процедура ОтветственныйСобственникНачалоВыбораЗавершение(ВыбранныйТип, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Если Не ВыбранныйТип = Неопределено Тогда
		Объект.ОтветственныйСобственник = ВыбранныйТип.Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСобственникНачалоВыбораФрагмент(Элемент);
	
КонецПроцедуры // ОтветственныйСобственникНачалоВыбораЗавершение()

&НаКлиенте
// Продолжение процедуры "ОтветственныйСобственникНачалоВыбора()".
Процедура ОтветственныйСобственникНачалоВыбораФрагмент(Знач Элемент)
	
	Если ТипЗнч(Объект.ОтветственныйСобственник) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		
		ОповещениеЗакрытияСправочникаЖильцов = Новый ОписаниеОповещения("ОтветственныйСобственникНачалоВыбораФрагментЗавершение", ЭтотОбъект, Новый Структура("Жилец", Истина));
		
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", Новый Структура("ТекущаяСтрока, ЛицевойСчет", ПредОтветственный, Объект.ЛицевойСчет), Элемент,,,, ОповещениеЗакрытияСправочникаЖильцов);
		
	ИначеЕсли ТипЗнч(Объект.ОтветственныйСобственник) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ОповещениеЗакрытияСправочникаКонтрагентов = Новый ОписаниеОповещения("ОтветственныйСобственникНачалоВыбораФрагментЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", Новый Структура("ТекущаяСтрока", ПредОтветственный), Элемент,,,, ОповещениеЗакрытияСправочникаКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры // ОтветственныйСобственникНачалоВыбораФрагмент()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ОтветственныйСобственникНачалоВыбораФрагмент()".
Процедура ОтветственныйСобственникНачалоВыбораФрагментЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Объект.ОтветственныйСобственник = ВыбранноеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("Жилец") Тогда
		ПолучитьРодственныхЖильцов(Объект.ОтветственныйСобственник);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОтветственныйСобственникНачалоВыбораФрагментЗавершение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипВладельца".
Процедура ТипВладельцаПриИзменении(Элемент)
	
	Объект.ВладелецКонтрагент = (ТипВладельца = 1);
	
	ВыполнитьДействияПриИзмененииТипаВладельца();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьОтветственного".
Процедура УстановитьОтветственного(Команда)
	
	ТекущиеДанные = Элементы.ГлавнаяПродажа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Проживающий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтветственныйСобственник <> ТекущиеДанные.Проживающий Тогда
		Объект.ОтветственныйСобственник = ТекущиеДанные.Проживающий;
		ОбновитьИнформациюОРодственныхСвязях();
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОтветственного();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтрагентОтветственный".
Процедура КонтрагентОтветственныйПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииТипаВладельца();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ГлавнаяПродажаСобственник".
Процедура ГлавнаяПродажаСобственникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ГлавнаяПродажа.ТекущиеДанные;
	ТекущаяСтрока.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекущаяСтрока.Собственник, ТекущаяСтрока.ВидДокументаСобственности,
																					   ТекущаяСтрока.НомерДокументаСобственности, ТекущаяСтрока.ДатаДокументаСобственности);
																					   
	СведенияОСобственностиБылиОтредактированы = Истина;
	УстановитьВидимостьСсылкиНаСписокДокументовТСЖ(Элементы.СсылкаПроверкаЧленовТСЖ, СписокДокументовТСЖ, СведенияОСобственностиБылиОтредактированы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" надписи "СсылкаПроверкаЧленовТСЖ".
Процедура СсылкаПроверкаЧленовТСЖНажатие(Элемент)
	
	ФормаСписка = ПолучитьФорму("ЖурналДокументов.УПЖКХ_ВступлениеИВыходИзТСЖ.ФормаСписка", , ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаСписка.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокДокументовТСЖ,
															ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
