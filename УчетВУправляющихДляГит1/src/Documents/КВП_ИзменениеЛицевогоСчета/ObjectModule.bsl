
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем УказыватьКоличествоПрожИЗарегЧислами Экспорт;  // Хранит настройку УказыватьКоличествоПрожИЗарегЧислами.
Перем мТаблицаСведенийОЖильцах Экспорт;              // Хранит сведения о жильцах.
Перем мТаблицаИзмененийСведенийОЖильцах Экспорт;     // Хранит информацию об изменении сведений о жильцах.
Перем мУпрощенныйВариантУчетаСобственников Экспорт;  // Хранит значение константы "Упрощенный вариант учета собственников".

#Область ЭкспортныеПроцедурыИФункции

// Функция проверяет, действует ли лицевой счет.
//
Функция ПроверитьДействиеЛицевогоСчета(ЛицевойСчет) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛицевойСчет",	ЛицевойСчет);
	Запрос.УстановитьПараметр("Дата",			КонецДня(Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Действует;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПроверитьДействиеЛицевогоСчета()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Получает таблицу изменений сведений о жильцах.
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   Таблица значений   - таблица изменений сведений о жильцах.
//
Функция ПолучитьТаблицуИзмененияСведенийОЖильцах() Экспорт

	Если мТаблицаСведенийОЖильцах = Неопределено Тогда
		мТаблицаСведенийОЖильцах = ПолучитьТаблицуСведенийОЖильцах();
	КонецЕсли;
	
	мТаблицаИзмененийСведенийОЖильцах = мТаблицаСведенийОЖильцах.Скопировать();
	
	мТаблицаИзмененийСведенийОЖильцах.Колонки.Добавить("ФлагИзменения");
	мТаблицаИзмененийСведенийОЖильцах.Колонки.Добавить("ДатаОтменыИзменения");
	
	Для Каждого СтрокаТЧ Из Главная Цикл
		
		СтрокаВТаблицеИзменений = мТаблицаИзмененийСведенийОЖильцах.Найти(СтрокаТЧ.Проживающий, "Проживающий");
		
		Если СтрокаВТаблицеИзменений = Неопределено Тогда
			// Строка со сведениями о новом жильце.
			СтрокаВТаблицеИзменений = мТаблицаИзмененийСведенийОЖильцах.Добавить();
			СтрокаВТаблицеИзменений.Проживающий = СтрокаТЧ.Проживающий;
		Иначе
			// Сначала проверим соответствие данных регистра с данными из ТЧ.
			Если
				(СтрокаВТаблицеИзменений.Собственник = СтрокаТЧ.Собственник)
				И (СтрокаВТаблицеИзменений.Проживает                        = СтрокаТЧ.Проживает)
				И (СтрокаВТаблицеИзменений.Зарегистрирован                  = СтрокаТЧ.Зарегистрирован)
				И (СтрокаВТаблицеИзменений.ДатаРегистрации                  = СтрокаТЧ.ДатаРегистрации)
				И (СтрокаВТаблицеИзменений.ВладелецЕдинственногоЖилья       = СтрокаТЧ.ВладелецЕдинственногоЖилья)
				И (СтрокаВТаблицеИзменений.ДополнительнаяПлощадь            = СтрокаТЧ.ДополнительнаяПлощадь)
				И (СтрокаВТаблицеИзменений.ДоляСобственностиЧислитель       = СтрокаТЧ.ДоляСобственностиЧислитель)
				И (СтрокаВТаблицеИзменений.ДоляСобственностиЗнаменатель     = СтрокаТЧ.ДоляСобственностиЗнаменатель)
				И (СтрокаВТаблицеИзменений.ОснованиеПолученияВСобственность = СтрокаТЧ.ОснованиеПолученияВСобственность)
				И (СтрокаВТаблицеИзменений.ВидДокументаСобственности        = СтрокаТЧ.ВидДокументаСобственности)
				И (СтрокаВТаблицеИзменений.НомерДокументаСобственности      = СтрокаТЧ.НомерДокументаСобственности)
				И (СтрокаВТаблицеИзменений.ДатаДокументаСобственности       = СтрокаТЧ.ДатаДокументаСобственности)
				Тогда
				// Такая запись в регистре уже есть.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаВТаблицеИзменений.ФлагИзменения = Истина;
		СтрокаВТаблицеИзменений.Собственник = СтрокаТЧ.Собственник;
		СтрокаВТаблицеИзменений.Проживает                    = СтрокаТЧ.Проживает;
		СтрокаВТаблицеИзменений.Зарегистрирован              = СтрокаТЧ.Зарегистрирован;
		СтрокаВТаблицеИзменений.ДатаРегистрации              = СтрокаТЧ.ДатаРегистрации;
		СтрокаВТаблицеИзменений.ВладелецЕдинственногоЖилья   = СтрокаТЧ.ВладелецЕдинственногоЖилья;
		СтрокаВТаблицеИзменений.ДополнительнаяПлощадь        = СтрокаТЧ.ДополнительнаяПлощадь;
		СтрокаВТаблицеИзменений.ДоляСобственностиЧислитель   = СтрокаТЧ.ДоляСобственностиЧислитель;
		СтрокаВТаблицеИзменений.ДоляСобственностиЗнаменатель = СтрокаТЧ.ДоляСобственностиЗнаменатель;
		СтрокаВТаблицеИзменений.ДатаОтменыИзменения          = СтрокаТЧ.ДатаОтменыИзменения;
		СтрокаВТаблицеИзменений.ВидДокументаСобственности    = СтрокаТЧ.ВидДокументаСобственности;
		СтрокаВТаблицеИзменений.НомерДокументаСобственности  = СтрокаТЧ.НомерДокументаСобственности;
		СтрокаВТаблицеИзменений.ДатаДокументаСобственности   = СтрокаТЧ.ДатаДокументаСобственности;
		СтрокаВТаблицеИзменений.ДатаОтменыИзменения          = СтрокаТЧ.ДатаОтменыИзменения;
		
	КонецЦикла;
	
	Возврат мТаблицаИзмененийСведенийОЖильцах;
	
КонецФункции // ПолучитьТаблицуИзмененияСведенийОЖильцах()

// Заполняет табличную часть документа в соответствии с введенными ранее данными
// по указанному лицевому счету.
Процедура ЗаполнитьТабличнуюЧасть() Экспорт
	
	Главная.Очистить();
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах Тогда
		
		ТекОтветственный = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет,
																		   Новый Граница(Дата, ВидГраницы.Исключая));
		
		Если ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации
		 Или ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация Тогда
			Результат = ПолучитьТаблицуСведенийОЗарегистрированных();
			
		ИначеЕсли ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие
		 Или ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
			Результат = ПолучитьТаблицуСведенийОПроживающих();
			
			Если ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
				Для Каждого СтрокаРезультата Из Результат Цикл
					СтрокаРезультата.ДатаРегистрации     = СтрокаРезультата.ДатаЗаселения;
					СтрокаРезультата.ДатаОтменыИзменения = СтрокаРезультата.ДатаВыбытия;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйОтветственный = Результат.НайтиСтроки(Новый Структура("Проживающий", ТекОтветственный));
		Если НайденныйОтветственный.Количество() > 0 Тогда
			НайденныйОтветственный.Получить(0).СтепеньРодства = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника();
			ОтветственныйСобственник = НайденныйОтветственный.Получить(0).Проживающий;
		КонецЕсли;
		
		// Установим пустые даты регистрации и заселения, поскольку,
		// эти данные пользователю предстоит указать самостоятельно.
		Если ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации
			Или ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие Тогда
			Результат.ЗаполнитьЗначения(Дата("00010101"), "ДатаРегистрации");
			Результат.ЗаполнитьЗначения(Дата("00010101"), "ДатаЗаселения");
		КонецЕсли;
		
		// Для документа с видом "Снятие с регистрации" установим пустую дату отмены изменений,
		// так как информацию о последующей регистрации в момент снятия регистрации указать невозможно.
		// А при проведении документа, в регистре сведений о зарегистрированных может появиться запись
		// с текущей датой отмены изменения, что может привести к ошибкам.
		Если ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации Тогда
			Результат.ЗаполнитьЗначения(Дата("00010101"), "ДатаОтменыИзменения");
		КонецЕсли;
		
		// Заполнение статусов жильцов.
		Если ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации Тогда
			Результат.ЗаполнитьЗначения(Ложь, "Зарегистрирован")
		ИначеЕсли ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие Тогда
			Результат.ЗаполнитьЗначения(Ложь, "Проживает")
		КонецЕсли;
		
	Иначе
		
		Результат = ПолучитьТаблицуСведенийОЖильцах(" ГДЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ) 
													 |ИЛИ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Проживает, ЛОЖЬ) 
													 |ИЛИ ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ)");
		
		ТекОтветственный = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет,
																		   Новый Граница(Дата, ВидГраницы.Исключая));
		ОтветственныйСобственник = ТекОтветственный;
		Если ТипЗнч(ТекОтветственный) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВладелецКонтрагент = Истина;
			Контрагент = ТекОтветственный;
		Иначе
			ВладелецКонтрагент = Ложь;
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		НайденныйОтветственный = Результат.НайтиСтроки(Новый Структура("Проживающий", ТекОтветственный));
		Если НайденныйОтветственный.Количество() > 0 Тогда
			НайденныйОтветственный.Получить(0).СтепеньРодства = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника();
			ОтветственныйСобственник = НайденныйОтветственный.Получить(0).Проживающий;
		КонецЕсли;
		Результат.ЗаполнитьЗначения(Дата("00010101"), "ДатаРегистрации");
		Результат.ЗаполнитьЗначения(Дата("00010101"), "ДатаЗаселения");
		
	КонецЕсли;

	Главная.Загрузить(Результат);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Заполняет количество проживающих и зарегистрированных.
//
// Параметры
//  нет.
//
Процедура ЗаполнитьКоличествоПроживающихИЗарегистрированных() Экспорт
	
	Если НЕ УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		КоличествоПроживающих        = ПолучитьТаблицуСведенийОПроживающих().Количество();
		КоличествоЗарегистрированных = ПолучитьТаблицуСведенийОЗарегистрированных().Количество();
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст  =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних";
		Запрос.УстановитьПараметр("Дата",        Новый Граница(Дата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоПроживающих        = Выборка.КоличествоПроживающих;
			КоличествоЗарегистрированных = Выборка.КоличествоЗарегистрированных;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоличествоПроживающихИЗарегистрированных()

// Проверяет и устанавливает владельца для текущего проживающего.
Процедура УстановитьВладельцаПроживающего(Зарегистрирован, Объект)

	Если Зарегистрирован И Не Объект.Владелец = ЛицевойСчет И ЗначениеЗаполнено(Объект) Тогда
		ОбъектПроживающий = Объект.ПолучитьОбъект();
		ОбъектПроживающий.Владелец = ЛицевойСчет;
		Попытка
			ОбъектПроживающий.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // УстановитьВладельцаПроживающего()

// Получает текст запроса из регистров сведений о проживающих и зарегистрированных
// и о собственниках.
//
Функция ПолучитьТекстЗапросаПолный()
	
	// В запросе получаются данные о составе и статусе жильцов, относящихся к лицевому счету.
	// 1. Получаем данные по всем жильцам, относящимся к лицевому счету;
	// 2. Получаем информацию, кто из данных жильцов является собственником;
	// 3. Получаем информацию о статусе жильцов в качестве зарегистрированных, либо проживающих;
	// 4. Получаем дату окончания регистрации;
	// 5. Получаем данных о степени родства жильцов по данному лицевому счету;
	// 6. Соединяем информацию, полученную в п.3 и п.4, тем самым на выходе получаем полную информацию о
	//    зарегистрированных и проживающих, относящихся к данному лицевому счету;
	// 7. Получаем данные из регистра сведений о жильцах, по лицевому счету;
	// 8. Соединяем все таблицы в итоговую таблицу запроса, получая информацию по каждому жильцу.
	//    В данной таблице также добавляются новые поля:
	//    ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее - истина, если по жильцу есть
	//      какие либо данные о собственности или проживании, в противном случае - Ложь - данный жилец 
	//      является новым, и по нему нет записей в регистрах.
	//    СтатусЖильцаКакСобственника - в числовой форме определяется статус жильца:
	//      0 - если жилец является собственником, но не проживает и не зарегистрирован,
	//      1 - если является собственником, но не зарегистрирован,
	//      2 - если является собственником, но не проживает,
	//      9 - во всех остальных случаях.
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ ЖильцыЛС
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|	И НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК ФизЛицо,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	ИСТИНА КАК ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента
	|ПОМЕСТИТЬ СобственникиПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение = &Помещение
	|				И Собственник В
	|					(ВЫБРАТЬ
	|						ЖильцыЛС.Жилец.ФизЛицо
	|					ИЗ
	|						ЖильцыЛС КАК ЖильцыЛС)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СведенияОЗарегистрированных.ЛицевойСчет, СведенияОПроживающих.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(СведенияОЗарегистрированных.Жилец, СведенияОПроживающих.Жилец) КАК Проживающий,
	|	ЕСТЬNULL(СведенияОЗарегистрированных.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(СведенияОЗарегистрированных.ВременнаяРегистрация, ЛОЖЬ) КАК ВременнаяРегистрация,
	|	СведенияОЗарегистрированных.ДатаИзменения КАК ДатаРегистрации,
	|	ЕСТЬNULL(СведенияОПроживающих.Проживает, ЛОЖЬ) КАК Проживает,
	|	СведенияОПроживающих.ДатаИзменения КАК ДатаЗаселения,
	|	ИСТИНА КАК ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее
	|ПОМЕСТИТЬ ПроживающиеЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &ДатаДокумента) КАК СведенияОПроживающих
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&Дата,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ДатаИзменения <= &ДатаДокумента) КАК СведенияОЗарегистрированных
	|		ПО СведенияОПроживающих.Жилец = СведенияОЗарегистрированных.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаОкончанияРегистрации,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ДатаИзменения КАК ДатаОкончанияПроживания
	|ПОМЕСТИТЬ ОкончаниеРегистрации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения > &ДатаДокумента
	|				И НЕ Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				&Дата,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ДатаИзменения > &ДатаДокумента
	|					И НЕ Проживает) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
	|ПОМЕСТИТЬ СтепениРодстваФизЛиц
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицоОсновное В
	|				(ВЫБРАТЬ
	|					УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо
	|				ИЗ
	|					РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроживающиеЛС.Проживающий,
	|	ПроживающиеЛС.ЛицевойСчет,
	|	ПроживающиеЛС.Зарегистрирован,
	|	ПроживающиеЛС.ВременнаяРегистрация,
	|	ПроживающиеЛС.ДатаРегистрации,
	|	ПроживающиеЛС.Проживает,
	|	ПроживающиеЛС.ДатаЗаселения,
	|	ПроживающиеЛС.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее,
	|	ЕСТЬNULL(ОкончаниеРегистрации.ДатаОкончанияРегистрации, &ПустаяДата) КАК ДатаОкончанияРегистрации,
	|	ЕСТЬNULL(ОкончаниеРегистрации.ДатаОкончанияПроживания, &ПустаяДата) КАК ДатаОкончанияПроживания
	|ПОМЕСТИТЬ врСведенияОЗарегистрированныхИПроживающих
	|ИЗ
	|	ПроживающиеЛС КАК ПроживающиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеРегистрации КАК ОкончаниеРегистрации
	|		ПО ПроживающиеЛС.Проживающий = ОкончаниеРегистрации.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СведенияОЖильцахСрезПоследних.Объект,
	|	КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет,
	|	КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья
	|ПОМЕСТИТЬ врСведенияОЖильцах
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_СведенияОЖильцахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖильцыЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЖильцыЛС.Жилец КАК Проживающий,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ВременнаяРегистрация, ЛОЖЬ) КАК ВременнаяРегистрация,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ДатаРегистрации, &ПустаяДата) КАК ДатаРегистрации,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ДатаОкончанияРегистрации, &ПустаяДата) КАК ДатаОтменыИзменения,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ДатаЗаселения, &ПустаяДата) КАК ДатаЗаселения,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ДатаОкончанияПроживания, &ПустаяДата) КАК ДатаВыбытия,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ) КАК Собственник,
	|	ЕСТЬNULL(СтепениРодстваФизЛиц.СтепеньРодства, ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.ПустаяСсылка)) КАК СтепеньРодства,
	|	ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее, ЕСТЬNULL(СобственникиПомещения.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее, ЛОЖЬ)) КАК ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ)
	|				И НЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ)
	|				И НЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Проживает, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ)
	|						И НЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ)
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ)
	|								И НЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Проживает, ЛОЖЬ)
	|							ТОГДА 2
	|						ИНАЧЕ 9
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЖильцаКакСобственника,
	|	ЕСТЬNULL(СобственникиПомещения.ДоляСобственникаЧислитель, 0) КАК ДоляСобственностиЧислитель,
	|	ЕСТЬNULL(СобственникиПомещения.ДоляСобственникаЗнаменатель, 0) КАК ДоляСобственностиЗнаменатель,
	|	ЕСТЬNULL(врСведенияОЖильцах.ВладелецЕдинственногоЖилья, ЛОЖЬ) КАК ВладелецЕдинственногоЖилья,
	|	ЕСТЬNULL(СобственникиПомещения.ОснованиеПолученияВСобственность, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)) КАК ОснованиеПолученияВСобственность,
	|	ЕСТЬNULL(СобственникиПомещения.ВидДокумента, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)) КАК ВидДокументаСобственности,
	|	ЕСТЬNULL(СобственникиПомещения.НомерДокумента, """") КАК НомерДокументаСобственности,
	|	ЕСТЬNULL(СобственникиПомещения.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаСобственности
	|ИЗ
	|	ЖильцыЛС КАК ЖильцыЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СобственникиПомещения КАК СобственникиПомещения
	|		ПО ЖильцыЛС.Жилец.ФизЛицо = СобственникиПомещения.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСведенияОЗарегистрированныхИПроживающих КАК врСведенияОЗарегистрированныхИПроживающих
	|		ПО ЖильцыЛС.Жилец = врСведенияОЗарегистрированныхИПроживающих.Проживающий
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтепениРодстваФизЛиц КАК СтепениРодстваФизЛиц
	|		ПО ЖильцыЛС.Жилец.ФизЛицо = СтепениРодстваФизЛиц.ФизическоеЛицоСвязанное
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСведенияОЖильцах КАК врСведенияОЖильцах
	|		ПО ЖильцыЛС.Жилец = врСведенияОЖильцах.Объект
	|			И ЖильцыЛС.ЛицевойСчет = врСведенияОЖильцах.ЛицевойСчет";
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстЗапроса()

// Получает таблицу сведений о проживающих.
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   Таблица значений   - таблица сведений о проживающих.
//
Функция ПолучитьТаблицуСведенийОПроживающих() Экспорт
	
	ЗапросДанных  = Новый Запрос;
	ЗапросДанных.Текст = ПолучитьТекстЗапросаПолный() + " ГДЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Проживает, ЛОЖЬ)";
	
	ЗапросДанных.УстановитьПараметр("Дата",          Новый Граница(Дата, ВидГраницы.Исключая));
	ЗапросДанных.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросДанных.УстановитьПараметр("ПустаяДата",    Дата("00010101"));
	ЗапросДанных.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	ЗапросДанных.УстановитьПараметр("Помещение",     ЛицевойСчет.Адрес);
	
	Возврат ЗапросДанных.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСведенийОПроживающих()

// Получает таблицу сведений о зарегистрированных.
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   Таблица значений   - таблица сведений о зарегистрированных.
//
Функция ПолучитьТаблицуСведенийОЗарегистрированных() Экспорт
	
	ЗапросДанных  = Новый Запрос;
	ЗапросДанных.Текст = ПолучитьТекстЗапросаПолный() + ?(мУпрощенныйВариантУчетаСобственников
														  И ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация,
														  " ГДЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ) 
													       |ИЛИ ЕСТЬNULL(СобственникиПомещения.Собственник, ЛОЖЬ)",
														  " ГДЕ ЕСТЬNULL(врСведенияОЗарегистрированныхИПроживающих.Зарегистрирован, ЛОЖЬ)");
	
	ЗапросДанных.УстановитьПараметр("Дата",          Новый Граница(Дата, ВидГраницы.Исключая));
	ЗапросДанных.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросДанных.УстановитьПараметр("ПустаяДата",    Дата("00010101"));
	ЗапросДанных.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	ЗапросДанных.УстановитьПараметр("Помещение",     ЛицевойСчет.Адрес);
	
	Возврат ЗапросДанных.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСведенийОЗарегистрированных()

// Получает таблицу сведений о жильцах.
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   Таблица значений   - таблица сведений о жильцах.
//
Функция ПолучитьТаблицуСведенийОЖильцах(Условие = Неопределено) Экспорт
	
	ЗапросДанных  = Новый Запрос;
	ЗапросДанных.Текст = ПолучитьТекстЗапросаПолный() + Условие;
	
	ЗапросДанных.УстановитьПараметр("Дата",          Новый Граница(Дата, ВидГраницы.Исключая));
	ЗапросДанных.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросДанных.УстановитьПараметр("ПустаяДата",    Дата("00010101"));
	ЗапросДанных.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	ЗапросДанных.УстановитьПараметр("Помещение",     ЛицевойСчет.Адрес);
	
	Возврат ЗапросДанных.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуСведенийОЖильцах()

#КонецОбласти

#Область ПроцедурыИФункцииПроведенияДокумента

// Формирует движения по регистру "СтепеньРодстваФизЛиц".
//
Процедура ДвиженияПоРегиструСтепенейРодстваФизЛицИОтветственныйСобственник(СтруктураШапкиДокумента,
																			ТаблицаЛицевыхСчетов)
	
	Если НЕ СтруктураШапкиДокумента.ВидОперации =
	        Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах Тогда
		
		ПредСобственник = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
							СтруктураШапкиДокумента.ЛицевойСчет, НачалоДня(СтруктураШапкиДокумента.Дата) - 1);
		
		Если НЕ ПредСобственник = СтруктураШапкиДокумента.ОтветственныйСобственник Тогда
			// Регистр УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.
			Движение = Движения.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.Добавить();
			Движение.Период                = СтруктураШапкиДокумента.Дата;
			Движение.ЛицевойСчет           = СтруктураШапкиДокумента.ЛицевойСчет;
			Движение.ОтветственныйВладелец = СтруктураШапкиДокумента.ОтветственныйСобственник;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветственныйДляПроверки = ОтветственныйСобственник;
	
	Если ОтветственныйДляПроверки = Неопределено Тогда
		ОтветственныйДляПроверки = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
									СтруктураШапкиДокумента.ЛицевойСчет, НачалоДня(СтруктураШапкиДокумента.Дата) - 1);
	КонецЕсли;
	
	Если ТипЗнч(ОтветственныйДляПроверки) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации =
		     Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
			
			Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетов Цикл
				
				// Регистр УПЖКХ_СтепеньРодстваФизЛиц.
				Если ЗначениеЗаполнено(ТекСтрока.СтепеньРодства)
				   И ТекСтрока.Проживающий <> ОтветственныйДляПроверки Тогда
					Движение = Движения.УПЖКХ_СтепеньРодстваФизЛиц.Добавить();
					Движение.Период                  = СтруктураШапкиДокумента.Дата;
					Движение.ФизическоеЛицоСвязанное = ТекСтрока.ФизЛицо;
					Движение.ФизическоеЛицоОсновное  = ОтветственныйДляПроверки.ФизЛицо;
					Движение.СтепеньРодства          = ТекСтрока.СтепеньРодства;
				КонецЕсли;
				
			КонецЦикла;
		
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации =
			      Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах Тогда
			
			Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетов Цикл
				
				// Регистр УПЖКХ_СтепеньРодстваФизЛиц.
				// Параметр ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее показывает, были ли ранее созданы записи в регистрах по
				// данному жильцу. Параметр СтатусЖильцаКакСобственника в данном условии производит отбор по действующим записям, в которых жилец
				// является собственником и проживает или зарегистрирован в помещении.
				Если ЗначениеЗаполнено(ТекСтрока.СтепеньРодства) И (НЕ ТекСтрока.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее
				 ИЛИ (ТекСтрока.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И ТекСтрока.СтатусЖильцаКакСобственника <> 9))
				   И ТекСтрока.Проживающий <> ОтветственныйДляПроверки
				   И ((СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация
				   И (ТекСтрока.Зарегистрирован ИЛИ ТекСтрока.Собственник)) ИЛИ (ТекСтрока.Проживает
				   И СтруктураШапкиДокумента.ВидИзменения =
				     Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие)) Тогда
					Движение = Движения.УПЖКХ_СтепеньРодстваФизЛиц.Добавить();
					Движение.Период                  = СтруктураШапкиДокумента.Дата;
					Движение.ФизическоеЛицоСвязанное = ТекСтрока.ФизЛицо;
					Движение.ФизическоеЛицоОсновное  = ОтветственныйДляПроверки.ФизЛицо;
					Движение.СтепеньРодства          = ТекСтрока.СтепеньРодства;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ТекСтрока Из РодственныеСвязи Цикл
				// Регистр УПЖКХ_СтепеньРодстваФизЛиц.
				Движение = Движения.УПЖКХ_СтепеньРодстваФизЛиц.Добавить();
				Движение.Период                  = СтруктураШапкиДокумента.Дата;
				Движение.ФизическоеЛицоСвязанное = ТекСтрока.Жилец;
				Движение.ФизическоеЛицоОсновное  = ОтветственныйДляПроверки.ФизЛицо;
				Движение.СтепеньРодства          = ТекСтрока.СтепеньРодстваНовый;
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСтепенейРодстваФизЛицИОтветственныйСобственник()

// Формирует движения для вида операции "Прочие изменения".
//
Процедура ДвиженияДляВидаОперацииПрочиеИзменения(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	ДвиженияПоРегиструЛицевыеСчета(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
	
	Если мТаблицаСведенийОЖильцах = Неопределено Тогда
		мТаблицаСведенийОЖильцах = ПолучитьТаблицуСведенийОЖильцах();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетов Цикл
		
		СтрокаЖильца = мТаблицаСведенийОЖильцах.Найти(ТекСтрока.Проживающий, "Проживающий");
		
		Если Не СтрокаЖильца = Неопределено Тогда
			
			Если СтрокаЖильца.Зарегистрирован <> ТекСтрока.Зарегистрирован Тогда
				
				// Движения по РС УПЖКХ_СведенияОЗарегистрированных.
				ДвижениеЗарегистрированных = Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
				ДвижениеЗарегистрированных.Период				= СтруктураШапкиДокумента.Дата;
				ДвижениеЗарегистрированных.Жилец				= ТекСтрока.Проживающий;
				ДвижениеЗарегистрированных.ЛицевойСчет			= СтруктураШапкиДокумента.ЛицевойСчет;
				ДвижениеЗарегистрированных.Зарегистрирован		= ТекСтрока.Зарегистрирован;
				ДвижениеЗарегистрированных.ВременнаяРегистрация	= ?(ЗначениеЗаполнено(ТекСтрока.ДатаОтменыИзменения)
				                                                    И Не СтрокаЖильца.Зарегистрирован, Истина, Ложь);
				ДвижениеЗарегистрированных.ДатаИзменения		= ?(ЗначениеЗаполнено(ТекСтрока.ДатаРегистрации),
				                                                    ТекСтрока.ДатаРегистрации, СтруктураШапкиДокумента.Дата);
				
			КонецЕсли;
			
			Если СтрокаЖильца.Проживает <> ТекСтрока.Проживает Тогда
				
				// Движения по РС УПЖКХ_СведенияОПроживающих.
				ДвижениеПроживающих = Движения.УПЖКХ_СведенияОПроживающих.Добавить();
				ДвижениеПроживающих.Период				= СтруктураШапкиДокумента.Дата;
				ДвижениеПроживающих.Жилец				= ТекСтрока.Проживающий;
				ДвижениеПроживающих.ЛицевойСчет			= СтруктураШапкиДокумента.ЛицевойСчет;
				ДвижениеПроживающих.Проживает			= ТекСтрока.Проживает;
				ДвижениеПроживающих.ДатаИзменения		= ?(ЗначениеЗаполнено(ТекСтрока.ДатаЗаселения),
				                                            ТекСтрока.ДатаЗаселения, СтруктураШапкиДокумента.Дата);
				
			КонецЕсли;
			
			// Если указана дата окончания, сделаем запись.
			Если ЗначениеЗаполнено(ТекСтрока.ДатаОтменыИзменения) Тогда
				
				Если СтрокаЖильца.Зарегистрирован <> ТекСтрока.Зарегистрирован Тогда
					
					// Движения по РС УПЖКХ_СведенияОЗарегистрированных.
					ДвижениеЗарегистрированных						= Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
					ДвижениеЗарегистрированных.Период				= СтруктураШапкиДокумента.Дата + 1;
					ДвижениеЗарегистрированных.Жилец				= ТекСтрока.Проживающий;
					ДвижениеЗарегистрированных.ЛицевойСчет			= СтруктураШапкиДокумента.ЛицевойСчет;
					ДвижениеЗарегистрированных.Зарегистрирован		= Не ТекСтрока.Зарегистрирован;
					ДвижениеЗарегистрированных.ДатаИзменения		= КонецДня(ТекСтрока.ДатаОтменыИзменения) + 1;
					
				КонецЕсли;
					
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ТекСтрока.ДатаВыбытия) Тогда
				
				Если СтрокаЖильца.Проживает <> ТекСтрока.Проживает Тогда
					
					// Движения по РС УПЖКХ_СведенияОПроживающих.
					ДвижениеПроживающих								= Движения.УПЖКХ_СведенияОПроживающих.Добавить();
					ДвижениеПроживающих.Период						= СтруктураШапкиДокумента.Дата + 1;
					ДвижениеПроживающих.Жилец						= ТекСтрока.Проживающий;
					ДвижениеПроживающих.ЛицевойСчет					= СтруктураШапкиДокумента.ЛицевойСчет;
					ДвижениеПроживающих.Проживает					= ?(СтрокаЖильца.Проживает, Истина, Ложь);
					ДвижениеПроживающих.ДатаИзменения				= КонецДня(ТекСтрока.ДатаВыбытия) + 1;
					
				КонецЕсли;
			
			КонецЕсли;
			
			УстановитьВладельцаПроживающего(ТекСтрока.Зарегистрирован, ТекСтрока.Проживающий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияДляВидаОперацииПрочиеИзменения

// Формирует движения по регистру "СведенияОПроживающих" для видов операции "Отсутствие" и "Присутствие".
//
Процедура ДвиженияПоРегистрамОтсутствиеПрисутствие(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)

	Для Каждого СтрокаТЧ Из ТаблицаЛицевыхСчетов Цикл
		// Если это ввод данных о присутсвии жильцов, а текущий жилец не проживал здесь ранее
		// и не будет проживать после изменения данных, то изменять сведения о регистрации по нему не нужно.
		Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие
		   И (НЕ СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И НЕ СтрокаТЧ.Проживает) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(Строка(СтрокаТЧ.Проживающий)
			                 + " не был(а) заселен(а), т.к. для него(нее) не установлен флаг проживания.");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие
		   И Не СтрокаТЧ.Проживает Тогда
			Продолжить;
		КонецЕсли;
		
		// Параметр ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее показывает, были ли ранее
		// созданы записи в регистрах по данному жильцу. Значения параметра СтатусЖильцаКакСобственника отражены
		//  в комментарии к запросу в процедуре "ПолучитьТекстЗапросаПолный()".
		Если (СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие
		   И ((СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И СтрокаТЧ.СтатусЖильцаКакСобственника = 9 И СтрокаТЧ.Проживает) 
		 ИЛИ (НЕ СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И НЕ СтрокаТЧ.Проживает))
		 ИЛИ (СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И СтрокаТЧ.СтатусЖильцаКакСобственника <> 9 И НЕ СтрокаТЧ.Проживает)) Тогда
			Продолжить;
		КонецЕсли;

		// Движения по РС УПЖКХ_СведенияОПроживающих.
		Движение									= Движения.УПЖКХ_СведенияОПроживающих.Добавить();
		Движение.Период								= СтруктураШапкиДокумента.Дата;
		Движение.Жилец								= СтрокаТЧ.Проживающий;
		Движение.ЛицевойСчет						= СтруктураШапкиДокумента.ЛицевойСчет;
		Движение.ДатаИзменения						= ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаРегистрации),
		                                                СтрокаТЧ.ДатаРегистрации, СтруктураШапкиДокумента.Дата);
			
		Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
			Движение.Проживает = Истина;
		Иначе
			Движение.Проживает = Ложь;
		КонецЕсли;
		
		// Если указана дата окончания, сделаем запись.
		Если ЗначениеЗаполнено(СтрокаТЧ.ДатаОтменыИзменения) Тогда
			
			// Движения по РС УПЖКХ_СведенияОПроживающих.
			Движение								= Движения.УПЖКХ_СведенияОПроживающих.Добавить();
			Движение.Период							= СтруктураШапкиДокумента.Дата + 1;
			Движение.Жилец							= СтрокаТЧ.Проживающий;
			Движение.ЛицевойСчет					= СтруктураШапкиДокумента.ЛицевойСчет;
			Движение.ДатаИзменения					= КонецДня(СтрокаТЧ.ДатаОтменыИзменения) + 1;
			
			Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
				Движение.Проживает		= Ложь;
			Иначе
				Движение.Проживает		= Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВладельцаПроживающего(СтрокаТЧ.Зарегистрирован, СтрокаТЧ.Проживающий);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамОтсутствие()

// Формирует движения по регистру "СведенияОПроживающих" для видов операции "Регистрация" и "СнятиеСРегистрации".
//
Процедура ДвиженияПоРегистрамРегистрацияСнятие(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)

	Для Каждого СтрокаТЧ Из ТаблицаЛицевыхСчетов Цикл
		// Если это регистрация жильцов, а текущий жилец не зарегистрирован и не будет зарегистрирован
		// и не будет зарегистрирован сейчас, то изменять сведения о регистрации по нему не нужно.
		Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация
		   И (НЕ СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И НЕ СтрокаТЧ.Зарегистрирован) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(Строка(СтрокаТЧ.Проживающий)
			                + " не был(а) зарегистрирован(а), т.к. для него(нее) не установлен флаг регистрации.");
		КонецЕсли;
		
		// Не регистрируем движения документов в одном из следующих случаев:
		// 1. Если вид изменения, указанный в документе - регистрация(временная регистрация) 
		//    и при этом обязателно выполняется одно из следующих условий:
		//  1.1. Данные по жильцу были введены ранее, жилец не является собственником и зарегистрирован,
		//       причем, в данном случае признак проживания может быть любым, или же жилец является одновременно
		//       собсвенником, зарегистрирован и проживает;
		//  1.2. Данные по жильцу были введены ранее, жилец является собственником, не проживает, но зарегистрирован;
		//  1.3. Данные по жильцу не были введены ранее и жилец не зарегистрирован;
		//  1.4. Данные по жильцу были введены ранее, жилец является собственником и не зарегистрирован, при этом,
		//       признак проживания может быть любым.
		// 2. Если вид изменения, указанный в документе - снятие с регистрации и жилец не зарегистрирован.
		Если (СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация
			И ((СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И СтрокаТЧ.СтатусЖильцаКакСобственника = 9 И СтрокаТЧ.Зарегистрирован)
			ИЛИ (СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И СтрокаТЧ.СтатусЖильцаКакСобственника = 2)
			ИЛИ (НЕ СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И НЕ СтрокаТЧ.Зарегистрирован)
			ИЛИ (СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее И СтрокаТЧ.СтатусЖильцаКакСобственника <> 9 И НЕ СтрокаТЧ.Зарегистрирован)))
			ИЛИ (СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации
			И НЕ СтрокаТЧ.Зарегистрирован) Тогда// И НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаОтменыИзменения)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по РС УПЖКХ_СведенияОЗарегистрированных.
		ДвижениеЗарегистрированных = Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
		ДвижениеЗарегистрированных.Период               = СтруктураШапкиДокумента.Дата;
		ДвижениеЗарегистрированных.Жилец                = СтрокаТЧ.Проживающий;
		ДвижениеЗарегистрированных.ЛицевойСчет          = СтруктураШапкиДокумента.ЛицевойСчет;
		
		// Движения по РС УПЖКХ_СведенияОПроживающих.
		ДвижениеПроживающих = Движения.УПЖКХ_СведенияОПроживающих.Добавить();
		ДвижениеПроживающих.Период              = СтруктураШапкиДокумента.Дата;
		ДвижениеПроживающих.Жилец               = СтрокаТЧ.Проживающий;
		ДвижениеПроживающих.ЛицевойСчет         = СтруктураШапкиДокумента.ЛицевойСчет;
		
		Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация Тогда
			Если Не СтрокаТЧ.Зарегистрирован Тогда
				ДвижениеЗарегистрированных.Зарегистрирован      = Истина;
				ДвижениеЗарегистрированных.ВременнаяРегистрация = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаОтменыИзменения), Истина, Ложь);
				ДвижениеПроживающих.Проживает                   = Истина;
				
			Иначе
				ДвижениеЗарегистрированных.Зарегистрирован      = СтрокаТЧ.Зарегистрирован;
				ДвижениеЗарегистрированных.ВременнаяРегистрация = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаОтменыИзменения), Истина, Ложь);
				ДвижениеПроживающих.Проживает                   = СтрокаТЧ.Зарегистрирован;
				
			КонецЕсли;
		Иначе
			ДвижениеЗарегистрированных.Зарегистрирован      = НЕ СтрокаТЧ.Зарегистрирован;
			ДвижениеЗарегистрированных.ВременнаяРегистрация = НЕ СтрокаТЧ.Зарегистрирован;
			ДвижениеПроживающих.Проживает                   = НЕ СтрокаТЧ.Зарегистрирован;
		КонецЕсли;
		
		ДвижениеЗарегистрированных.ДатаИзменения = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаРегистрации),
													 СтрокаТЧ.ДатаРегистрации, СтруктураШапкиДокумента.Дата);
		ДвижениеПроживающих.ДатаИзменения        = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаРегистрации),
													 СтрокаТЧ.ДатаРегистрации, СтруктураШапкиДокумента.Дата);
		
		// Если указана дата окончания изменений, сделаем запись.
		Если Не СтрокаТЧ.ДатаОтменыИзменения = Дата("00010101") Тогда
			
			// Движения по РС УПЖКХ_СведенияОЗарегистрированных.
			ДвижениеЗарегистрированных						= Движения.УПЖКХ_СведенияОЗарегистрированных.Добавить();
			ДвижениеЗарегистрированных.Период				= СтруктураШапкиДокумента.Дата + 1;
			ДвижениеЗарегистрированных.Жилец				= СтрокаТЧ.Проживающий;
			ДвижениеЗарегистрированных.ЛицевойСчет			= СтруктураШапкиДокумента.ЛицевойСчет;
			ДвижениеЗарегистрированных.Зарегистрирован		= НЕ СтрокаТЧ.Зарегистрирован;
			ДвижениеЗарегистрированных.ДатаИзменения		= КонецДня(СтрокаТЧ.ДатаОтменыИзменения) + 1;
			
			// Движения по РС УПЖКХ_СведенияОПроживающих.
			ДвижениеПроживающих								= Движения.УПЖКХ_СведенияОПроживающих.Добавить();
			ДвижениеПроживающих.Период						= СтруктураШапкиДокумента.Дата + 1;
			ДвижениеПроживающих.Жилец						= СтрокаТЧ.Проживающий;
			ДвижениеПроживающих.ЛицевойСчет					= СтруктураШапкиДокумента.ЛицевойСчет;
			ДвижениеПроживающих.Проживает					= НЕ СтрокаТЧ.Зарегистрирован;
			ДвижениеПроживающих.ДатаИзменения				= КонецДня(СтрокаТЧ.ДатаОтменыИзменения) + 1;
			
		КонецЕсли;
		
		УстановитьВладельцаПроживающего(СтрокаТЧ.Зарегистрирован, СтрокаТЧ.Проживающий);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамРегистрацияСнятие()

// Процедура производит формирование записи для регистра сведений "Учет количества жильцов по лицевым счетам".
//
Процедура ПроизвестиДвижениеПоРСЛС(Период, тмКоличествоПроживающих, тмКоличествоЗарегистрированных)
	
	Движение = Движения.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Добавить();
	
	Движение.Период                       = Период;
	Движение.ЛицевойСчет                  = ЛицевойСчет;
	Движение.КоличествоПроживающих        = тмКоличествоПроживающих;
	Движение.КоличествоЗарегистрированных = тмКоличествоЗарегистрированных;
	
КонецПроцедуры // ПроизвестиДвижениеПоРСЛС()

// Процедура добавляет запись в таблицу значений "Таблица с датами".
//
Процедура ДобавитьЗаписьВТаблицуДат(ТаблицаСДатами ,КоличествоЗарегистрированных, КоличествоПроживающих, Дата, 
																								   ДатаОтмены)
	
	// Период изменения.
	НоваяСтрока = ТаблицаСДатами.Добавить();
	НоваяСтрока.Период = Дата;
	НоваяСтрока.КоличествоЗарегистрированных = КоличествоЗарегистрированных;
	НоваяСтрока.КоличествоПроживающих        = КоличествоПроживающих;
	
	// Период отмены изменения.
	Если ЗначениеЗаполнено(ДатаОтмены) Тогда
		НоваяСтрока = ТаблицаСДатами.Добавить();
		НоваяСтрока.Период = КонецДня(ДатаОтмены) + 1;
		НоваяСтрока.КоличествоЗарегистрированных = - КоличествоЗарегистрированных;
		НоваяСтрока.КоличествоПроживающих        = - КоличествоПроживающих;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "ЛицевыеСчета".
//
Процедура ДвиженияПоРегиструЛицевыеСчета(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	ТаблицаДанныхОТекущемСостоянииПоЛС = ПолучитьТаблицуСведенийОЖильцах();
	
	ОписаниеТиповДата  = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 0));
	
	ТаблицаСДатамиРегистрацииПроживания = Новый ТаблицаЗначений;
	ТаблицаСДатамиРегистрацииПроживания.Колонки.Добавить("Период", ОписаниеТиповДата);
	ТаблицаСДатамиРегистрацииПроживания.Колонки.Добавить("КоличествоЗарегистрированных", ОписаниеТиповЧисло);
	ТаблицаСДатамиРегистрацииПроживания.Колонки.Добавить("КоличествоПроживающих",        ОписаниеТиповЧисло);
	
	ДатыОткрытияЗакрытияЛС = ПолучитьДатуОткрытияЗакрытияЛС(СтруктураШапкиДокумента.ЛицевойСчет);
	
	Если НЕ УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		СтрокиПроживающих              = ПолучитьТаблицуСведенийОПроживающих();
		СтрокиЗарегистрированных       = ПолучитьТаблицуСведенийОЗарегистрированных();
		тмКоличествоПроживающих        = СтрокиПроживающих.Количество();
		тмКоличествоЗарегистрированных = СтрокиЗарегистрированных.Количество();
		
		Для Каждого СтрокаСДаннымиИзТабличнойЧасти Из ТаблицаЛицевыхСчетов Цикл
			
			ТекущиеДанныеПоЖильцуВБазе = ТаблицаДанныхОТекущемСостоянииПоЛС.Найти(СтрокаСДаннымиИзТабличнойЧасти.Проживающий, "Проживающий");
			
			Если СтруктураШапкиДокумента.ВидОперации =
				 Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах
				 И Не ТекущиеДанныеПоЖильцуВБазе = Неопределено Тогда
				
				ДатаДляЗаписи = ?(СтрокаСДаннымиИзТабличнойЧасти.ДатаРегистрации = '00010101', СтруктураШапкиДокумента.Дата, СтрокаСДаннымиИзТабличнойЧасти.ДатаРегистрации);
				
				Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие Тогда
					
					// Для вида изменения "Отсутствие (временное отсутствие)":
					// Проводим расход по проживающим, если жилец ранее по лицевому счету был отмечен как проживающий
					// и в табличной части стоит отметка в поле "Отсутствие" (для вида изменения "Отсутствие" поле "Проживает"
					// устанавливается равным полю "Отсутствие").
					Если ТекущиеДанныеПоЖильцуВБазе.Проживает И СтрокаСДаннымиИзТабличнойЧасти.Проживает Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 0, -1, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
				ИначеЕсли СтруктураШапкиДокумента.ВидИзменения = 
					      Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
					
					// Для вида изменения "Присутствие":
					// Проводим приход по проживающим, если жилец ранее по лицевому счету не был отмечен как проживающий
					// и в табличной части стоит отметка в поле "Проживает".
					Если Не ТекущиеДанныеПоЖильцуВБазе.Проживает И СтрокаСДаннымиИзТабличнойЧасти.Проживает Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 0, 1, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
				ИначеЕсли СтруктураШапкиДокумента.ВидИзменения = 
					      Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации Тогда
					
					// Для вида изменения "Снятие с регистрации":
					//
					// 1. Проводим расход по зарегистрированным, если жилец ранее по лицевому счету был отмечен как зарегистрированный
					//    и в табличной части стоит отметка в поле "Снять с регистрации" (для вида изменения "Снятие с регистрации"
					//    поле "Зарегистрирован" устанавливается равным полю "Снять с регистрации".
					Если ТекущиеДанныеПоЖильцуВБазе.Зарегистрирован И СтрокаСДаннымиИзТабличнойЧасти.Зарегистрирован Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, -1, 0, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
					// 2. Убираем жильца как проживающего по адресу лицевого счета.
					//    Проводим расход по проживающим, если жилец ранее по лицевому счету был отмечен как проживающий
					//    и в табличной части стоит отметка в поле "Снять с регистрации" (для вида изменения "Снятие с регистрации"
					//    поле "Зарегистрирован" устанавливается равным полю "Снять с регистрации".
					Если ТекущиеДанныеПоЖильцуВБазе.Проживает И СтрокаСДаннымиИзТабличнойЧасти.Зарегистрирован Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 0, -1, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
				ИначеЕсли СтруктураШапкиДокумента.ВидИзменения = 
					      Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация Тогда
					
					// Для вида изменения "Регистрация (временная регистрация)":
					//
					// 1. Проводим приход по зарегистрированным, если жилец ранее по лицевому счету не был отмечен как зарегистрированный
					//    и в табличной части стоит отметка в поле "Зарегистрирован".
					Если Не ТекущиеДанныеПоЖильцуВБазе.Зарегистрирован И СтрокаСДаннымиИзТабличнойЧасти.Зарегистрирован Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 1, 0, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
					// 2. Проводим приход по проживающим, если жилец ранее по лицевому счету не был отмечен как зарегистрированный,
					//    не был отмечен как проживающий и в табличной части стоит отметка в поле "Зарегистрирован".
					Если Не ТекущиеДанныеПоЖильцуВБазе.Проживает И Не ТекущиеДанныеПоЖильцуВБазе.Зарегистрирован И СтрокаСДаннымиИзТабличнойЧасти.Зарегистрирован Тогда
						ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 0, 1, ДатаДляЗаписи, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
			Если СтруктураШапкиДокумента.ВидОперации = 
				 Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения
			   И НЕ ТекущиеДанныеПоЖильцуВБазе = Неопределено Тогда
				
				ДатаДляЗаписиЗарегистрированного = ?(СтрокаСДаннымиИзТабличнойЧасти.ДатаРегистрации = '00010101', СтруктураШапкиДокумента.Дата,
				                              СтрокаСДаннымиИзТабличнойЧасти.ДатаРегистрации);
				ДатаДляЗаписиПроживающего = ?(СтрокаСДаннымиИзТабличнойЧасти.ДатаЗаселения = '00010101', СтруктураШапкиДокумента.Дата,
				                              СтрокаСДаннымиИзТабличнойЧасти.ДатаЗаселения);
				
				// Заполним таблицу с датами периодами, признаком того, что это зарегистрированные и знаком
				Если ТекущиеДанныеПоЖильцуВБазе.Зарегистрирован <> СтрокаСДаннымиИзТабличнойЧасти.Зарегистрирован Тогда
					
					ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, ?(ТекущиеДанныеПоЖильцуВБазе.Зарегистрирован, -1, 1), 0,
					                          ДатаДляЗаписиЗарегистрированного, СтрокаСДаннымиИзТабличнойЧасти.ДатаОтменыИзменения);
				КонецЕсли;
					
				Если ТекущиеДанныеПоЖильцуВБазе.Проживает <> СтрокаСДаннымиИзТабличнойЧасти.Проживает Тогда
					
					ДобавитьЗаписьВТаблицуДат(ТаблицаСДатамиРегистрацииПроживания, 0, ?(ТекущиеДанныеПоЖильцуВБазе.Проживает, -1, 1),
					                          ДатаДляЗаписиПроживающего, СтрокаСДаннымиИзТабличнойЧасти.ДатаВыбытия);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// произведем сортировку таблицы по датам
		ТаблицаСДатамиРегистрацииПроживания.Сортировать("Период Возр");
		ТаблицаСДатамиРегистрацииПроживания.Свернуть("Период", "КоличествоЗарегистрированных, КоличествоПроживающих");
		
		Сч = 0;
		
		ФлагМеньшейДаты                         = Ложь;
		
		КоличествоЗарегистрированныхПоДокументу = 0;
		КоличествоПроживающихПоДокументу        = 0;
		
		Для Каждого Строка Из ТаблицаСДатамиРегистрацииПроживания Цикл
			
			// сравним с предыдущими значениями дат, если равны, то прибавим секунду
			Если Сч > 0 Тогда
				
				Для Счетчик = 0 По Сч - 1 Цикл
					
					Если Строка.Период = ТаблицаСДатамиРегистрацииПроживания[Счетчик].Период Тогда
						Строка.Период = Строка.Период + 1;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Строка.Период < ДатыОткрытияЗакрытияЛС.ДатаОткрытия Тогда
				ФлагМеньшейДаты = Истина;
			КонецЕсли;
			
			КоличествоЗарегистрированныхПоДокументу = КоличествоЗарегистрированныхПоДокументу 
													  + Строка.КоличествоЗарегистрированных;
			КоличествоПроживающихПоДокументу        = КоличествоПроживающихПоДокументу 
													  + Строка.КоличествоПроживающих;
			
			тмКоличествоЗарегистрированных = ПолучитьКоличествоЗарегистрированных(ЛицевойСчет, КонецДня(Строка.Период), КонецДня(Строка.Период))
										   + КоличествоЗарегистрированныхПоДокументу;
			тмКоличествоПроживающих        = ПолучитьКоличествоПроживающих(ЛицевойСчет, КонецДня(Строка.Период), КонецДня(Строка.Период))
										   + КоличествоПроживающихПоДокументу;
			
			ПроизвестиДвижениеПоРСЛС(Строка.Период, тмКоличествоПроживающих, тмКоличествоЗарегистрированных);
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
		Если ФлагМеньшейДаты Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Имеются даты изменения, которые меньше даты открытия лицевого счета.");

		КонецЕсли;
		
	Иначе
		ПроизвестиДвижениеПоРСЛС(СтруктураШапкиДокумента.Дата, КоличествоПроживающих, КоличествоЗарегистрированных);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструЛицевыеСчета()

// Формирует движения по регистрам собственности.
//
Процедура ДвиженияПоРегистрамСобственности(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	БылиИзменения = Ложь;
	// Проверка осуществленных изменений.
	Для Каждого ТекСтрокаГлавная Из ТаблицаЛицевыхСчетов Цикл
		ТекСтрокаНачТаблицы = мТаблицаСведенийОЖильцах.Найти(ТекСтрокаГлавная.Проживающий, "Проживающий");
		Если (ТекСтрокаНачТаблицы.Собственник <> ТекСтрокаГлавная.Собственник)
		 ИЛИ (ТекСтрокаНачТаблицы.ДоляСобственностиЧислитель <> ТекСтрокаГлавная.ДоляСобственностиЧислитель)
		 ИЛИ (ТекСтрокаНачТаблицы.ДоляСобственностиЗнаменатель <> ТекСтрокаГлавная.ДоляСобственностиЗнаменатель)
		 ИЛИ (ТекСтрокаНачТаблицы.ОснованиеПолученияВСобственность <> ТекСтрокаГлавная.ОснованиеПолученияВСобственность)
		 ИЛИ (ТекСтрокаНачТаблицы.ВидДокументаСобственности <> ТекСтрокаГлавная.ВидДокументаСобственности)
		 ИЛИ (ТекСтрокаНачТаблицы.НомерДокументаСобственности <> ТекСтрокаГлавная.НомерДокументаСобственности)
		 ИЛИ (ТекСтрокаНачТаблицы.ДатаДокументаСобственности <> ТекСтрокаГлавная.ДатаДокументаСобственности) Тогда
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Если изменения были, добавим движения.
	Если БылиИзменения Тогда
		
		// Регистр УПЖКХ_СобственникиПомещений.
		Для Каждого ТекСтрокаГлавная Из ТаблицаЛицевыхСчетов Цикл
			
			ТекСтрокаНачТаблицы = мТаблицаСведенийОЖильцах.Найти(ТекСтрокаГлавная.Проживающий, "Проживающий");
			Если НЕ (НЕ ТекСтрокаНачТаблицы.Собственник И НЕ ТекСтрокаГлавная.Собственник) Тогда
				
				Движение = Движения.УПЖКХ_СобственникиПомещений.Добавить();
				Движение.Период                           = СтруктураШапкиДокумента.Дата;
				Движение.Собственник                      = ТекСтрокаГлавная.ФизЛицо;
				Движение.Помещение                        = СтруктураШапкиДокумента.Помещение;
				Движение.ДоляСобственникаЧислитель        = ТекСтрокаГлавная.ДоляСобственностиЧислитель;
				Движение.ДоляСобственникаЗнаменатель      = ТекСтрокаГлавная.ДоляСобственностиЗнаменатель;
				Движение.ОснованиеПолученияВСобственность = ТекСтрокаГлавная.ОснованиеПолученияВСобственность;
				Движение.ВидДокумента                     = ТекСтрокаГлавная.ВидДокументаСобственности;
				Движение.НомерДокумента                   = ТекСтрокаГлавная.НомерДокументаСобственности;
				Движение.ДатаДокумента                    = ТекСтрокаГлавная.ДатаДокументаСобственности;
				Если ТекСтрокаНачТаблицы.Собственник И НЕ ТекСтрокаГлавная.Собственник Тогда
					Движение.Действует                   = Ложь;
				Иначе
					Движение.Действует                   = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Регистр УПЖКХ_СобственностьНаПомещения.
		Движение = Движения.УПЖКХ_СобственностьНаПомещения.Добавить();
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Движение.Помещение                  = СтруктураШапкиДокумента.Помещение;
		Движение.ВидСобственности           = Перечисления.УПЖКХ_ВидыСобственности.Частная;
		Если СтруктураШапкиДокумента.КоличествоСобственников <= 1 Тогда
			Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная;
		ИначеЕсли СтруктураШапкиДокумента.КоличествоСобственников > 1 И Главная.Итог("ДоляСобственностиЗнаменатель") = 0 Тогда
			Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная;
		Иначе
			Движение.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая;
		КонецЕсли;
		Если СтруктураШапкиДокумента.КоличествоСобственников = 0 Тогда
			Движение.Действует                  = Ложь;
		Иначе
			Движение.Действует                  = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "КВП_СведенияОЖильцах".
//
Процедура ДвижениеПоРегиструСведенияОЖильцах(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов)
	
	Если ((СтруктураШапкиДокумента.ВидОперации =
		   Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах
	   И СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация)
	 ИЛИ СтруктураШапкиДокумента.ВидОперации =
	     Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения) Тогда
	
		Для Каждого СтрокаТЧ Из ТаблицаЛицевыхСчетов Цикл
			// Если это изменение данных о жильцах, и данные по текущему жильцу
			// не изменялись, то изменять сведения по нему не нужно.
			Если СтруктураШапкиДокумента.ВидОперации =
			     Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах
			   И СтрокаТЧ.ДанныеПоЖильцуОПроживанииИлиСобственностиУжеБылиВведеныРанее Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныйЖилец = мТаблицаСведенийОЖильцах.Найти(СтрокаТЧ.Проживающий, "Проживающий");
			
			Если НЕ НайденныйЖилец = Неопределено 
			   И НайденныйЖилец.ВладелецЕдинственногоЖилья = СтрокаТЧ.ВладелецЕдинственногоЖилья Тогда
				Продолжить;
			КонецЕсли;
			
			// Движения по РС КВП_СведенияОЖильцах.
			ДвижениеПроживающих = Движения.КВП_СведенияОЖильцах.Добавить();
			ДвижениеПроживающих.Период				= СтруктураШапкиДокумента.Дата;
			ДвижениеПроживающих.Объект				= СтрокаТЧ.Проживающий;
			ДвижениеПроживающих.ЛицевойСчет			= СтруктураШапкиДокумента.ЛицевойСчет;
			ДвижениеПроживающих.ВладелецЕдинственногоЖилья = СтрокаТЧ.ВладелецЕдинственногоЖилья;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ДвижениеПоРегиструСведенияОЖильцах()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Выполняется при вводе на основании.
// Заполняем реквизиты документа исходя из ДокументаОснования.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ЛицевойСчет = ДанныеЗаполнения;
		// ЗаполнитьТабличнуюЧасть();
		ЗаполнитьКоличествоПроживающихИЗарегистрированных();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = 
		Тип("ДокументСсылка.КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		Дата = ДанныеЗаполнения.Дата;
		ЛицевойСчет = ДанныеЗаполнения.ЛицевойСчет;
		ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация Тогда
			ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация;
		Иначе
			ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации;
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧасть();
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация Тогда
			// Проверим и добавим проживающего из шапки документа-основания.
			Если Главная.Найти(ДанныеЗаполнения.Проживающий, "Проживающий") = Неопределено Тогда
				НоваяСтрока = Главная.Добавить();
				НоваяСтрока.Проживающий     = ДанныеЗаполнения.Проживающий;
				НоваяСтрока.ДатаРегистрации = ДанныеЗаполнения.Дата;
			КонецЕсли;
		Иначе
			// Проверим и добавим проживающего из шапки документа-основания.
			НайденнаяСтрока = Главная.Найти(ДанныеЗаполнения.Проживающий, "Проживающий");
			Если Не НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока.Зарегистрирован = Истина;
				НайденнаяСтрока.ДатаРегистрации = Дата;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьКоличествоПроживающихИЗарегистрированных();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КВП_СвидетельствоОРегистрацииПоМестуЖительства") Тогда
		ДокументОснование = ДанныеЗаполнения;
		Дата         = ДанныеЗаполнения.Дата;
		ЛицевойСчет  = ДанныеЗаполнения.ЛицевойСчет;
		ВидОперации  = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах;
		ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация;
		
		ЗаполнитьТабличнуюЧасть();
		
		// Проверим и добавим проживающего из шапки документа-основания.
		Если Главная.Найти(ДанныеЗаполнения.Проживающий, "Проживающий") = Неопределено Тогда
			НоваяСтрока = Главная.Добавить();
			НоваяСтрока.Проживающий = ДанныеЗаполнения.Проживающий;
			НоваяСтрока.ДатаРегистрации = Дата;
		КонецЕсли;
		
		ЗаполнитьКоличествоПроживающихИЗарегистрированных();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КВП_ЗаявлениеОРегистрацииПоМестуПребывания") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		Дата         = ДанныеЗаполнения.ДатаНачалаРегистрации;
		ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация;
		ЛицевойСчет  = ДанныеЗаполнения.ЛицевойСчет;
		ВидОперации  = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах;
		
		ЗаполнитьТабличнуюЧасть();
		
		// Проверим и добавим проживающего из шапки документа-основания.
		НайденнаяСтрока = Главная.Найти(ДанныеЗаполнения.Проживающий, "Проживающий");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = Главная.Добавить();
			НоваяСтрока.Проживающий         = ДанныеЗаполнения.Проживающий;
			НоваяСтрока.ДатаРегистрации     = ДанныеЗаполнения.ДатаНачалаРегистрации;
			НоваяСтрока.ДатаОтменыИзменения = ДанныеЗаполнения.ДатаОкончанияРегистрации;
		Иначе
			НайденнаяСтрока.ДатаРегистрации     = ДанныеЗаполнения.ДатаНачалаРегистрации;
			НайденнаяСтрока.ДатаОтменыИзменения = ДанныеЗаполнения.ДатаОкончанияРегистрации;
		КонецЕсли;
			
		ЗаполнитьКоличествоПроживающихИЗарегистрированных();
		
	КонецЕсли;

КонецПроцедуры //ОбработкаЗаполнения()

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПараметрыПроведения = Документы.КВП_ИзменениеЛицевогоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	ТаблицаЛицевыхСчетов    = ПараметрыПроведения.ТаблицаЛицевыхСчетов;
	
	// Добавим в структуру шапки документа количество собственников.
	КоличествоСобственников = ТаблицаЛицевыхСчетов.НайтиСтроки(Новый Структура("Собственник", Истина)).Количество();
	СтруктураШапкиДокумента.Вставить("КоличествоСобственников", КоличествоСобственников);
	
	Если НЕ Отказ Тогда
		
		мТаблицаСведенийОЖильцах = ПолучитьТаблицуСведенийОЖильцах();
		
		Если СтруктураШапкиДокумента.ВидОперации =
		     Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах Тогда
			
			Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие
			 ИЛИ СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие Тогда
				ДвиженияПоРегистрамОтсутствиеПрисутствие(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация
			 ИЛИ СтруктураШапкиДокумента.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.СнятиеСРегистрации Тогда
			
				ДвиженияПоРегистрамРегистрацияСнятие(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
				ДвижениеПоРегиструСведенияОЖильцах(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
				
				Если мУпрощенныйВариантУчетаСобственников
				   И СтруктураШапкиДокумента.ВидИзменения =
				     Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация Тогда
					ДвиженияПоРегистрамСобственности(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
				КонецЕсли;
				
			КонецЕсли;
			ДвиженияПоРегиструЛицевыеСчета(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			ДвиженияПоРегиструСтепенейРодстваФизЛицИОтветственныйСобственник(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации =
			      Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника Тогда
			
			ДвиженияПоРегиструСтепенейРодстваФизЛицИОтветственныйСобственник(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации =
			      Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
			
			ДвиженияДляВидаОперацииПрочиеИзменения(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			ДвиженияПоРегиструСтепенейРодстваФизЛицИОтветственныйСобственник(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			ДвижениеПоРегиструСведенияОЖильцах(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			
			Если мУпрощенныйВариантУчетаСобственников Тогда
				ДвиженияПоРегистрамСобственности(СтруктураШапкиДокумента, ТаблицаЛицевыхСчетов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(Главная,"Проживающий");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	
	// Выполняем поверку на действие лицевого счета.
	Если Не ЛицевойСчет.Пустая() И Не ПроверитьДействиеЛицевогоСчета(ЛицевойСчет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет """ + ЛицевойСчет
		                                  + """ закрыт на " + Дата, Отказ);
	КонецЕсли;
	
	ТаблицаЛицевыхСчетов = Главная.Выгрузить();
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах
	 ИЛИ ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
	 
		Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
			ПроверяемыеРеквизиты.Добавить("ОтветственныйСобственник");
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Добавить("Главная.Проживающий");
		
		ОбщийЗнаменатель = 1;
		// Выполняем проверку на заполнение табличной части.
		Если ТаблицаЛицевыхСчетов.Количество() <> 0 Тогда
			ИтогЗнаменателяСобственности = ТаблицаЛицевыхСчетов.Итог("ДоляСобственностиЗнаменатель");
			Для Каждого СтрокаТЧ Из ТаблицаЛицевыхСчетов Цикл
				
				Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения Тогда
					
					ДатаДляСравнения = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаЗаселения),
					                     СтрокаТЧ.ДатаЗаселения, Дата);
					
					Если ЗначениеЗаполнено(СтрокаТЧ.ДатаВыбытия) И СтрокаТЧ.ДатаВыбытия < ДатаДляСравнения Тогда
						
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата отмены изменения в строке " 
							+ СтрокаТЧ.НомерСтроки 
							+ " меньше даты заселения. Проведение документа невозможно.", Отказ);
						
					КонецЕсли;
					
					ДатаДляСравнения = ?(ЗначениеЗаполнено(СтрокаТЧ.ДатаРегистрации),
					                     СтрокаТЧ.ДатаРегистрации, Дата);
					
					Если ЗначениеЗаполнено(СтрокаТЧ.ДатаОтменыИзменения) И СтрокаТЧ.ДатаОтменыИзменения < ДатаДляСравнения Тогда
						
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата отмены изменения в строке " 
							+ СтрокаТЧ.НомерСтроки 
							+ " меньше даты регистрации. Проведение документа невозможно.", Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли НЕ УказыватьКоличествоПрожИЗарегЧислами И ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Не заполнена табличная часть документа. Проведение документа невозможно.", Отказ);
			
		КонецЕсли;
		
		// Проверка долей собственности на помещение при упрощенном учете собственников.
		Если (ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ПродажаИПрочиеИзменения
		 ИЛИ (ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах
		   И ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация))
		   И мУпрощенныйВариантУчетаСобственников Тогда
			УПЖКХ_УчетСобственностиСервер.ПроверитьЗаполнениеДолейСобственностиНаПомещение(ТаблицаЛицевыхСчетов, Отказ);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника Тогда
		
		ПроверяемыеРеквизиты.Добавить("ОтветственныйСобственник");
		
		Для Каждого СтрокаТЧ Из РодственныеСвязи Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтепеньРодстваНовый) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнена новая степень родства в строке " 
						+ СтрокаТЧ.НомерСтроки 
						+ ". Проведение документа невозможно.", Отказ);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаУдаленияПроведения" документа.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеОтветственногоСобственника Тогда
		// Добавим дополнительное свойство "ЭтоОтменаПроведенияДокумента". Данное свойство необходимо при работе обработчика
		// подписки на событие "УПЖКХ_ОбновитьПредставленияОтветственныхСобственниковЛС".
		Движения.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.ДополнительныеСвойства.Вставить("ЭтоОтменаПроведенияДокумента", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриКопировании" документа.
Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

мУпрощенныйВариантУчетаСобственников = ИспользуетсяУпрощенныйВариантУчетаСобственников();
УказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();

#КонецОбласти

#КонецЕсли