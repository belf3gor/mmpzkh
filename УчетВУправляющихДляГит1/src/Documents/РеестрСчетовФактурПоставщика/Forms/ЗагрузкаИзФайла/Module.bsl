&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	Элементы.ГруппаЗагрузкаФайла.Видимость = Не ЭтоВебКлиент;
	Элементы.ГруппаЗагрузкаФайлаВебКлиент.Видимость = ЭтоВебКлиент;
	
	ЕстьПравоВывод = ПравоДоступа("Вывод", Метаданные);
	Если НЕ ЕстьПравоВывод Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФормаЗагрузитьРеестр.Доступность = Ложь;
		Элементы.ВыбратьФайлДляСверкиВебКлиент.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайлами", 0.1, Истина);
	Иначе
		ЕстьРасширениеРаботыСФайлами = Истина;
		Элементы.ГруппаЗагрузкаФайла.Видимость = Истина;
		Элементы.ГруппаЗагрузкаФайлаВебКлиент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЕстьРасширениеРаботыСФайлами Тогда
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("ПутьКФайлу");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагруженныйРеестр) Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("РежимСверки", Параметры.РежимСверки);
		Если Параметры.РежимСверки Тогда
			ПараметрыОповещения.Вставить("ИдентификаторВладельца", Параметры.ИдентификаторВладельца);
			ПараметрыОповещения.Вставить("Организация",            Организация);
			ПараметрыОповещения.Вставить("Контрагент",             Контрагент);
			ПараметрыОповещения.Вставить("НалоговыйПериод",        НалоговыйПериод);
		КонецЕсли;
		Оповестить("Запись_РеестрСчетовФактурПоставщика", ПараметрыОповещения, ЗагруженныйРеестр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РасширениеФайла = "*.xml";
	ЗаголовокФормыВыбораФайла = НСтр("ru='Выберите файл, полученный от поставщика'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПриИзменении(Элемент)
	
	РасширениеФайла = "*.xml";
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла, ,
		ПутьКФайлу);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФайлДляЗагрузкиВебКлиент(Команда)
	
	ФайлПрочитан = Ложь;
	
	РасширениеФайла = ".xml";
	ЗаголовокФормыВыбораФайла = НСтр("ru='Выберите файл, полученный от поставщика'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузкаФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестр(Команда)
	
	Если НЕ ФайлПрочитан Тогда
		ТекстСообщения = НСтр("ru='Необходимо выбрать файл для загрузки.'");
		Если ЕстьРасширениеРаботыСФайлами Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлу");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = ЗагрузитьРеестрНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ИначеЕсли ЗначениеЗаполнено(ЗагруженныйРеестр) Тогда
		ОповеститьОбИзменении(ЗагруженныйРеестр);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузкаФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.ПользовательОтказалсяОтЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ФайлЗагружен Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	АдресХранилищаДанныхКонтрагента = Результат.АдресФайла;
	ПутьКФайлу                      = Результат.ПутьКФайлу;
	РазобратьШапкуРеестра();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайлами() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(РасширениеПодключено, ДопПараметры) Экспорт
	
	ЕстьРасширениеРаботыСФайлами = РасширениеПодключено;
	Элементы.ГруппаЗагрузкаФайла.Видимость = ЕстьРасширениеРаботыСФайлами;
	Элементы.ГруппаЗагрузкаФайлаВебКлиент.Видимость = Не ЕстьРасширениеРаботыСФайлами;
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьШапкуРеестра()

	РеквизитыРеестра = РеквизитыШапкиРеестра(АдресХранилищаДанныхКонтрагента);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыРеестра);
	
	Если РеквизитыРеестра.Свойство("ОписаниеОшибки") Тогда
		Элементы.ГруппаРеквизиты.Видимость = Ложь;
		Элементы.ГруппаОшибка.Видимость = Истина;
		ПоказатьПредупреждение(, РеквизитыРеестра.ОписаниеОшибки);
	Иначе
		
		ФайлПрочитан = Истина;
		
		Если ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(Организация) Тогда
			Элементы.ГруппаРеквизиты.Видимость = Истина;
			Элементы.ГруппаОшибка.Видимость = Ложь;
		Иначе
			Элементы.ГруппаРеквизиты.Видимость = Ложь;
			Элементы.ГруппаОшибка.Видимость = Истина;
			Элементы.Контрагент.ТолькоПросмотр = ЗначениеЗаполнено(Контрагент);
			МассивПараметров = Новый Массив;
			ПараметрИНН = Новый ПараметрВыбора("Отбор.ИНН", ИННПоставщика);
			МассивПараметров.Добавить(ПараметрИНН);
			Если ЗначениеЗаполнено(КПППоставщика) Тогда
				ПараметрКПП = Новый ПараметрВыбора("Отбор.КПП", КПППоставщика);
				МассивПараметров.Добавить(ПараметрКПП);
			КонецЕсли;
			Элементы.КонтрагентОшибка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

			Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Организация);
			МассивПараметров = Новый Массив;
			ПараметрИНН = Новый ПараметрВыбора("Отбор.ИНН", ИННПокупателя);
			МассивПараметров.Добавить(ПараметрИНН);
			Если ЗначениеЗаполнено(КПППокупателя) Тогда
				ПараметрКПП = Новый ПараметрВыбора("Отбор.КПП", КПППокупателя);
				МассивПараметров.Добавить(ПараметрКПП);
			КонецЕсли;
			Элементы.ОрганизацияОшибка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция РеквизитыШапкиРеестра(АдресРеестра)
	
	ДвоичныеДанныеКонтрагента = ПолучитьИзВременногоХранилища(АдресРеестра);
	РеквизитыРеестра = СверкаДанныхУчетаНДС.РеквизитыРеестраСчетовФактур(ДвоичныеДанныеКонтрагента);
	
	РеквизитыРеестра.Вставить("Организация");
	РеквизитыРеестра.Вставить("НадписьОрганизация");
	РеквизитыРеестра.Вставить("Контрагент");
	РеквизитыРеестра.Вставить("НадписьКонтрагент");
	РеквизитыРеестра.Вставить("ПредставлениеНалоговогоПериода");
	
	Если РеквизитыРеестра.Свойство("ОписаниеОшибки") Тогда
		Возврат РеквизитыРеестра;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыРеестра.НалоговыйПериод) Тогда
		РеквизитыРеестра.ПредставлениеНалоговогоПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(РеквизитыРеестра.НалоговыйПериод), 
			КонецКвартала(РеквизитыРеестра.НалоговыйПериод),
			Истина);
	Иначе
		РеквизитыРеестра.ПредставлениеНалоговогоПериода = НСтр("ru='Не указан'");
	КонецЕсли;
	
	// Определяем контрагента
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИННПоставщика";
	Запрос.УстановитьПараметр("ИННПоставщика", РеквизитыРеестра.ИННПоставщика);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаИНН = Результат.Выгрузить();
		// Поиск по ИНН и КПП
		Если СтрДлина(РеквизитыРеестра.ИННПоставщика) = 10 
			И ЗначениеЗаполнено(РеквизитыРеестра.КПППоставщика) Тогда
		    ТаблицаКПП = ТаблицаИНН.Скопировать(Новый Структура("КПП", РеквизитыРеестра.КПППоставщика));
			Если ТаблицаКПП.Количество() > 1 Тогда
				РеквизитыРеестра.НадписьКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено несколько контрагентов с ИНН %1 и КПП %2'"),
					РеквизитыРеестра.ИННПоставщика,
					РеквизитыРеестра.КПППоставщика);
			ИначеЕсли ТаблицаКПП.Количество() = 1 Тогда
				РеквизитыРеестра.Контрагент = ТаблицаКПП[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		// Поиск по ИНН
		Если НЕ ЗначениеЗаполнено(РеквизитыРеестра.Контрагент) Тогда
			Если ТаблицаИНН.Количество() > 1 Тогда
				РеквизитыРеестра.НадписьКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено несколько контрагентов с ИНН %1'"),
					РеквизитыРеестра.ИННПоставщика);
			ИначеЕсли ТаблицаИНН.Количество() = 1 Тогда
				РеквизитыРеестра.Контрагент = ТаблицаИНН[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РеквизитыРеестра.Контрагент) Тогда
		Если ЗначениеЗаполнено(РеквизитыРеестра.КПППоставщика) Тогда
			РеквизитыРеестра.НадписьКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден контрагент с ИНН %1 и КПП %2'"),
				РеквизитыРеестра.ИННПоставщика,
				РеквизитыРеестра.КПППоставщика);
		Иначе
			РеквизитыРеестра.НадписьКонтрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден контрагент с ИНН %1'"),
				РеквизитыРеестра.ИННПоставщика);
		КонецЕсли;
	КонецЕсли;

	// Определяем организацию
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИННПокупателя";
	Запрос.УстановитьПараметр("ИННПокупателя", РеквизитыРеестра.ИННПокупателя);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаИНН = Результат.Выгрузить();
		// Поиск по ИНН и КПП
		Если СтрДлина(РеквизитыРеестра.ИННПокупателя) = 10 
			И ЗначениеЗаполнено(РеквизитыРеестра.КПППокупателя) Тогда
		    ТаблицаКПП = ТаблицаИНН.Скопировать(Новый Структура("КПП", РеквизитыРеестра.КПППокупателя));
			Если ТаблицаКПП.Количество() > 1 Тогда
				РеквизитыРеестра.НадписьОрганизация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено несколько организаций с ИНН %1 и КПП %2'"),
					РеквизитыРеестра.ИННПокупателя,
					РеквизитыРеестра.КПППокупателя);
			ИначеЕсли ТаблицаКПП.Количество() = 1 Тогда
				РеквизитыРеестра.Организация = ТаблицаКПП[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		// Поиск по ИНН
		Если НЕ ЗначениеЗаполнено(РеквизитыРеестра.Организация) Тогда
			Если ТаблицаИНН.Количество() > 1 Тогда
				РеквизитыРеестра.НадписьОрганизация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Найдено несколько организаций с ИНН %1'"),
					РеквизитыРеестра.ИННПокупателя);
			ИначеЕсли ТаблицаИНН.Количество() = 1 Тогда
				РеквизитыРеестра.Организация = ТаблицаИНН[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РеквизитыРеестра.Организация) Тогда
		Если ЗначениеЗаполнено(РеквизитыРеестра.КПППокупателя) Тогда
			РеквизитыРеестра.НадписьОрганизация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена организация с ИНН %1 и КПП %2'"),
				РеквизитыРеестра.ИННПокупателя,
				РеквизитыРеестра.КПППокупателя);
		Иначе
			РеквизитыРеестра.НадписьОрганизация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена организация с ИНН %1'"),
				РеквизитыРеестра.ИННПокупателя);
		КонецЕсли;
	КонецЕсли;
			
	Возврат РеквизитыРеестра;

КонецФункции

&НаСервере
Функция ЗагрузитьРеестрНаСервере()

	Если НЕ ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыРеестра = ПодготовитьПараметрыРеестра();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"СверкаДанныхУчетаНДС.ЗагрузитьРеестрСчетовФактурПоставщика", 
		ПараметрыРеестра,
		Заголовок);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатЗагрузки();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции 

&НаСервере
Функция ПодготовитьПараметрыРеестра()
	
	ПараметрыРеестра = Новый Структура;
	ПараметрыРеестра.Вставить("Организация", Организация);
	ПараметрыРеестра.Вставить("Контрагент",  Контрагент);
	ДвоичныеДанныеКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхКонтрагента);
	ПараметрыРеестра.Вставить("ДвоичныеДанныеКонтрагента", ДвоичныеДанныеКонтрагента);
	Возврат ПараметрыРеестра;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗагрузки();
			Если ЗначениеЗаполнено(ЗагруженныйРеестр) Тогда
				ОповеститьОбИзменении(ЗагруженныйРеестр);
				Закрыть();
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗагрузки()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если РезультатВыполнения.Свойство("ОписанияОшибок") Тогда
		Для каждого ТекстОшибки Из РезультатВыполнения.ОписанияОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	Иначе
		ЗагруженныйРеестр = РезультатВыполнения.ЗагруженныйРеестр;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
