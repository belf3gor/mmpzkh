// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем СуммаПоСтрокеДоИзменения;    // Используется для обновления общих итогов
&НаКлиенте
Перем СуммаНДСПоСтрокеДоИзменения; // Используется для обновления общих итогов
&НаКлиенте
Перем ЭтоУдалениеСтроки; // Используется для обновления общих итогов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ОтчетКомитентуОПродажах",
		"ФормаДокументаОЗакупках",
		НСтр("ru='Новости: Отчет комитенту'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		Партия = ?(Элементы.Поставщики.ТекущиеДанные <> Неопределено, Элементы.Поставщики.ТекущиеДанные.Партия, Неопределено);
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы, Партия);
		
		ДанныеПоставщикиУстановитьОтборСтрок();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетКомитентуОЗакупках";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		СтруктураОтбора = Новый Структура("Продавец", Справочники.Контрагенты.ПустаяСсылка());
		РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ТекущийОбъект.Ссылка, СтруктураОтбора);
		
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, РеквизитыСФ);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;	

	Документы.ОтчетКомитентуОПродажах.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтчетКомитентуОПродажах", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	Если Объект.Дата < '20150101' Тогда
		СчетаФактурыСводно = Ложь;
	ИначеЕсли ТекущаяДатаДокумента < '20150101'Тогда
		СчетаФактурыСводно = Истина;
	Иначе
		СчетаФактурыСводно = Объект.ВыписыватьСчетаФактурыСводно;
	КонецЕсли;
	Если Объект.ВыписыватьСчетаФактурыСводно <> СчетаФактурыСводно Тогда
		Объект.ВыписыватьСчетаФактурыСводно = СчетаФактурыСводно;
		Если НЕ ТребуетсяВызовСервера Тогда
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	СтавкаНДСВознагражденияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УслугаПоВознаграждениюПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		УслугаПоВознаграждениюПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)

	СчетДоходовОбработатьИзменение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВыписыватьСчетаФактурыСводноПриИзменении(Элемент)
	
	ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Поставщики

&НаКлиенте
Процедура ПоставщикиПриАктивизацииСтроки(Элемент)
	
	ДанныеПоставщикиУстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Поставщики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Поставщики.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхКлючей.Добавить();
			НоваяСтрока.КлючСтроки = ТекДанные.КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ТекДанныеТовары = Элементы.Поставщики.ТекущиеДанные;
		ТекДанныеТовары.КлючСтроки = ПолучитьНовыйКлючСтроки(МаксимальныйКлючСтроки, Объект.Поставщики.Количество());
		
		Если Копирование Тогда
			ТекДанныеТовары.ПолученСФ 	= Ложь;
			ТекДанныеТовары.СчетФактура = Неопределено;
		КонецЕсли;
		
		ДанныеПоставщикиУстановитьОтборСтрок();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПоставщикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Партия) 
		И ПостащикНеУказанВПартииИОтЕгоИмениНеСоставленСчетФактура(ТекущиеДанные.Поставщик, ТекущиеДанные.Партия) Тогда
		ТекущиеДанные.Партия = Неопределено;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Поставщики);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПартияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.Партия) Тогда
		ДанныеПартии = ЗаполнитьДатуНомерСФДляСтрокиПартии(ТекущиеДанные.Партия, ТекущиеДанные.Поставщик);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПартии);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Поставщики);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПолученСФПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Поставщики.ТекущиеДанные;
	ДанныеСтроки.ВсегоПоСФ = ?(ДанныеСтроки.ПолученСФ, ДанныеСтроки.Всего, 0);
	ДанныеСтроки.НДСПоСФ   = ?(ДанныеСтроки.ПолученСФ, ДанныеСтроки.НДС, 0);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСтрокиТоваровУслуг(ТекДанныеТовары, Отказ)
	
	Если ТекДанныеТовары = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в списке Поставщики!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Поставщики", "Объект", Отказ);
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанныеТовары.Поставщик) Тогда
		Отказ = Истина;
		ТекстСообщения
			= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Поставщик", ТекДанныеТовары.НомерСтроки, "Поставщики");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Поставщики", ТекДанныеТовары.НомерСтроки, "Поставщик");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным, "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиДатаСФПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Поставщики);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если ЭтоУдалениеСтроки = Истина Тогда
		ЭтоУдалениеСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СуммаПоСтрокеДоИзменения = Неопределено Тогда
 		СуммаПоСтрокеДоИзменения = 0;
	КонецЕсли;
	
	Если СуммаНДСПоСтрокеДоИзменения = Неопределено Тогда
		СуммаНДСПоСтрокеДоИзменения = 0;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		
		ОбновитьСуммыПоСтрокеПоставщика(
			Элементы.Поставщики.ТекущиеДанные, Элементы.Товары.ТекущиеДанные.Сумма, Элементы.Товары.ТекущиеДанные.СуммаНДС);
			
	Иначе
			
		ОбновитьСуммыПоСтрокеПоставщика(
			Элементы.Поставщики.ТекущиеДанные, 0, 0);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(Элементы.Поставщики.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ЭтоУдалениеСтроки = Истина;

	СуммаПоСтрокеДоИзменения    = Элементы.Товары.ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзменения = Элементы.Товары.ТекущиеДанные.СуммаНДС;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если ЭтоУдалениеСтроки = Истина 
		ИЛИ Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаПоСтрокеДоИзменения    = Элементы.Товары.ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзменения = Элементы.Товары.ТекущиеДанные.СуммаНДС;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;

	Если Элементы.Поставщики.ТекущиеДанные <> Неопределено И НоваяСтрока Тогда
		ДанныеСтроки.КлючСтроки = Элементы.Поставщики.ТекущиеДанные.КлючСтроки;	
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		СуммаПоСтрокеДоИзменения    = 0;
		СуммаНДСПоСтрокеДоИзменения = 0;
		
		Если Не Копирование Тогда
			ДанныеСтроки.ЭтоУслуга = Истина;
		КонецЕсли;
	Иначе
		СуммаПоСтрокеДоИзменения    = ДанныеСтроки.Сумма;
		СуммаНДСПоСтрокеДоИзменения = ДанныеСтроки.СуммаНДС;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьСуммыПоСтрокеПоставщика(
			Элементы.Поставщики.ТекущиеДанные, -Элементы.Товары.ТекущиеДанные.Сумма, -Элементы.Товары.ТекущиеДанные.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьСуммыПоСтрокеПоставщика(Элементы.Поставщики.ТекущиеДанные, 0, 0);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СуммаПоСтрокеДоИзменения    = ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзменения = ТекущиеДанные.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтруктураСтроки = ПолучитьСтруктуруДанныхСтроки(Элементы.Товары.ТекущиеДанные, "Товары");
	Если СтруктураСтроки = Неопределено
	 Или НЕ ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	СтруктураСтроки.Вставить("Партия", Элементы.Поставщики.ТекущиеДанные.Партия);

	ПриИзмененииТоварыНоменклатураНаСервере(СтруктураСтроки, "Товары", Объект, ВалютаРегламентированногоУчета);

	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, СтруктураСтроки, , "НомерСтроки" );
	
	ПересчитатьСуммуСтроки(Элементы.Товары.ТекущиеДанные, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;

	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ДанныеСтроки.СуммаВознаграждения,
											  Объект.СуммаВключаетНДС,
											  УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

	ДанныеСтроки.ВсегоВознаграждение = ДанныеСтроки.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСВознаграждения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьПоПоступлениюНаКлиенте("ЗаполнитьПоПоступлению");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)
	
	ЗаполнитьПоПоступлениюНаКлиенте("ДобавитьИзПоступления");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗакупленнымиПоДоговору(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор. Заполнение невозможно.'") ;
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗакупленнымиПоДоговоруЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьЗакупленнымиНаСервере("ЗаполнитьЗакупленнымиПоДоговору");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	Отказ = Ложь;
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(ТекущиеДанные, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ТекущийКлючСтроки = ТекущиеДанные.КлючСтроки;

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	СтруктураОтбора = Новый Структура("Продавец", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма, СтруктураОтбора);
	Если РеквизитыСФ <> Неопределено Тогда 
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обслуживание счета-фактуры:

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетФактуру(Форма)
	
	Объект   = Форма.Объект;
	
	// Надпись про счета-фактуры
	ВыписаноСчетовФактурСумма = Форма.ИтогВсегоПоСФВыставленным;
	ВыписаноСчетовФактурНДС   = Форма.ИтогВсегоНДСПоСФВыставленным;
	
	МассивДат = Новый Массив;
	Для каждого ДанныеСтроки Из Объект.Поставщики Цикл
		ДатаСФ = ?(Форма.СчетаФактурыОтИмениОрганизации, Объект.Дата, ДанныеСтроки.ДатаСФ);
		Если ДанныеСтроки.ПолученСФ
			И (НЕ Объект.ВыписыватьСчетаФактурыСводно ИЛИ МассивДат.Найти(ДатаСФ) = Неопределено) Тогда
			МассивДат.Добавить(ДатаСФ);
		КонецЕсли;
	КонецЦикла;
	
	КолСФ = МассивДат.Количество();
	
	Форма.НадписьСчетФактураНаТовары = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выписано счетов-фактур - %1, на сумму %2 %3, в том числе НДС %4 %5'"),
		КолСФ,
		Формат(ВыписаноСчетовФактурСумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Объект.ВалютаДокумента),
		Формат(ВыписаноСчетовФактурНДС,   "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Объект.ВалютаДокумента));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(Форма, РеквизитыСФ = Неопределено)

	// Для комиссии по закупкам счет-фактура на комиссионное вознаграждение оформляется с пустым полем Продавец.
	СтруктураОтбора = Новый Структура("Продавец", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
		Форма,
		РеквизитыСФ,
		Истина,
		СтруктураОтбора,
		"СчетФактура");
	
КонецПроцедуры

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(СтруктураПараметров = Неопределено)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		  ТолькоПросмотр);
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
		
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда 

		ВалютаДоИзменения       = Объект.ВалютаДокумента;
		КурсДоИзменения 		= Объект.КурсВзаиморасчетов;
		КратностьДоИзменения 	= Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗначениеПустогоКоличества = ?(Строка.ЭтоУслуга, 1, 0);
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, ЗначениеПустогоКоличества);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, 
				НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, 
				НайденнаяСтрока.Курс, Объект.КурсВзаиморасчетов,
				НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;

	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, 
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			Строка.СуммаВознаграждения  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.СуммаВознаграждения, 
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Строка.Сумма, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
			
		Если Строка.СуммаВознаграждения <> 0 Тогда
			РассчитатьВознаграждениеВСтроке(
				Строка.СуммаВознаграждения,
				Строка.СуммаНДСВознаграждения,
				Строка.ВсегоВознаграждение,
				Строка.Сумма,
				Строка.СуммаНДС,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС);
		КонецЕсли;
	Иначе
		Строка.Цена             = Цена;
		Строка.Сумма            = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Товары, Объект.Дата, ТекущаяДатаДокумента);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, Список);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 	= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ВалютаВзаиморасчетов,ТипЦен,ВидДоговора,
		|СпособРасчетаКомиссионногоВознаграждения,ПроцентКомиссионногоВознаграждения,
		|РасчетыВУсловныхЕдиницах,СчетаФактурыОтИмениОрганизации");
		
	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	Если РеквизитыДоговора.СчетаФактурыОтИмениОрганизации = Истина Тогда 
		Объект.ВыписыватьСчетаФактурыСводно = Истина;
	КонецЕсли;
	РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;

	Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;

	Если Объект.Товары.Количество() > 0 И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	Объект.СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
	Объект.ПроцентКомиссионногоВознаграждения       = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
	Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
	КонецЕсли;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;
	
	Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере()

	СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПроцентКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияПриИзмененииНаСервере()
	
	СтавкаНДСВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УслугаПоВознаграждениюПриИзмененииНаСервере()

	ДанныеОбъекта	= Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
		Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
		Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
		
		НоменклатурнаяГруппаВознаграждения = СведенияОНоменклатуре.НоменклатурнаяГруппа;
		
		СчетДоходовОбработатьИзменение(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетДоходовОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.Субконто = Неопределено;
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, ПараметрыУстановкиСвойствСубконто(Форма));
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Форма.СчетДоходовКоличествоСубконто = 0;
	Иначе
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
		Форма.СчетДоходовКоличествоСубконто = СвойстваСчета.КоличествоСубконто;
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииТоварыНоменклатураНаСервере(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти, Знач Объект, Знач ВалютаРегламентированногоУчета)

	ПараметрыКонтекста = Новый Структура();
	ПараметрыКонтекста.Вставить("Дата",                    Объект.Дата);
	ПараметрыКонтекста.Вставить("Организация",             Объект.Организация);
	ПараметрыКонтекста.Вставить("Склад",                   Неопределено);
	ПараметрыКонтекста.Вставить("ТипЦен",                  Объект.ТипЦен);
	ПараметрыКонтекста.Вставить("ВалютаДокумента",         Объект.ВалютаДокумента);
	ПараметрыКонтекста.Вставить("КурсВзаиморасчетов",      Объект.КурсВзаиморасчетов);
	ПараметрыКонтекста.Вставить("КратностьВзаиморасчетов", Объект.КратностьВзаиморасчетов);
	ПараметрыКонтекста.Вставить("СуммаВключаетНДС",        Объект.СуммаВключаетНДС);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партия) Тогда
		ПараметрыКонтекста.Вставить("ДоговорКонтрагента",  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Партия, "ДоговорКонтрагента"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыКонтекста.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;	

	ПараметрыНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыКонтекста);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Вставить("Содержание", "");
		СтрокаТабличнойЧасти.ЭтоУслуга = Истина;
	Иначе
		Если НЕ ПараметрыНоменклатуры.Услуга Тогда
			СтрокаТабличнойЧасти.Вставить("Содержание", "");	
		ИначеЕсли ПустаяСтрока(ПараметрыНоменклатуры.НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Вставить("Содержание", ПараметрыНоменклатуры.Наименование);
		Иначе
			СтрокаТабличнойЧасти.Вставить("Содержание", ПараметрыНоменклатуры.НаименованиеПолное);
		КонецЕсли;
		СтрокаТабличнойЧасти.ЭтоУслуга = ПараметрыНоменклатуры.Услуга;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыНоменклатуры.Цена) Тогда
		СтрокаТабличнойЧасти.Цена  = ПараметрыНоменклатуры.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	НеОблагаетсяНДС = ПараметрыНоменклатуры.ДоходЕНВД И НЕ ПараметрыНоменклатуры.Комиссионный;

	СтрокаТабличнойЧасти.СтавкаНДС = ?(НеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, ПараметрыНоменклатуры.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ПараметрыНоменклатуры.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		СтрокаТабличнойЧасти.Всего =  СтрокаТабличнойЧасти.Сумма + ?(ПараметрыКонтекста.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
	РассчитатьВознаграждениеВСтроке(
		СтрокаТабличнойЧасти.СуммаВознаграждения,
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
		СтрокаТабличнойЧасти.ВсегоВознаграждение,
		СтрокаТабличнойЧасти.Сумма,
		СтрокаТабличнойЧасти.СуммаНДС,
		Объект.ПроцентКомиссионногоВознаграждения,
		Объект.СпособРасчетаКомиссионногоВознаграждения,
		Объект.СтавкаНДСВознаграждения,
		Объект.СуммаВключаетНДС);

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервере
Процедура ПересчитатьВознаграждениеВТабличнойЧасти(ИмяТабличнойЧасти = "")

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			РассчитатьВознаграждениеВСтроке(
				СтрокаДокумента.СуммаВознаграждения,
				СтрокаДокумента.СуммаНДСВознаграждения,
				СтрокаДокумента.ВсегоВознаграждение,
				СтрокаДокумента.Сумма,
				СтрокаДокумента.СуммаНДС,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВознаграждениеВСтроке(
			Вознаграждение,
			НДСВознаграждения,
			ВсегоВознаграждение,
			Знач СуммаСтроки,
			Знач НДССтроки,
			Знач ПроцентВознаграждения,
			Знач СпособРасчета,
			Знач СтавкаНДСВознаграждения,
			Знач СуммаВключаетНДС)

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Вознаграждение = Вознаграждение + ?(СуммаВключаетНДС, 0, НДСВознаграждения);
	ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки + ?(СуммаВключаетНДС, 0, НДССтроки));
	Иначе
		Вознаграждение = 0;
	КонецЕсли;

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	// Теперь в зависимости от галочки СуммаВключаетНДС либо вычтем НДС, либо оставим
	Вознаграждение = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Вознаграждение,          // Цена,
		Истина,                  // ЦенаВключаетНДС, (на момент расчета всегда включает НДС)
		СуммаВключаетНДС,        // СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения)); // СтавкаНДС

	НДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Вознаграждение,
		СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

	ВсегоВознаграждение = Вознаграждение + ?(СуммаВключаетНДС, 0, НДСВознаграждения);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ЗначениеПустогоКоличества = ?(ИмяТабличнойЧасти = "Товары" И ДанныеСтроки.ЭтоУслуга, 1, 0);
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ДанныеСтроки, Объект.СуммаВключаетНДС, ЗначениеПустогоКоличества);
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	Если ИмяТабличнойЧасти = "Товары" Тогда
		ДанныеСтроки.СуммаПоступления = ДанныеСтроки.ЦенаПоступления * ?(ДанныеСтроки.Количество = 0 И ДанныеСтроки.ЭтоУслуга, 1, ДанныеСтроки.Количество);
	КонецЕсли;

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);

	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыПоСтрокеПоставщика(ДанныеСтрокиПоставщика, НоваяСуммаПоСтроке, НоваяСуммаНДСПоСтроке)

	Если ДанныеСтрокиПоставщика = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РазницаСумм = НоваяСуммаПоСтроке - СуммаПоСтрокеДоИзменения;
	РазницаНДС  = НоваяСуммаНДСПоСтроке - СуммаНДСПоСтрокеДоИзменения;
	ДанныеСтрокиПоставщика.Всего = ДанныеСтрокиПоставщика.Всего + РазницаСумм + ?(Объект.СуммаВключаетНДС, 0, РазницаНДС);
	ДанныеСтрокиПоставщика.НДС   = ДанныеСтрокиПоставщика.НДС + РазницаНДС;
	ДанныеСтрокиПоставщика.ВсегоПоСФ = ?(ДанныеСтрокиПоставщика.ПолученСФ, ДанныеСтрокиПоставщика.Всего, 0);
	ДанныеСтрокиПоставщика.НДСПоСФ   = ?(ДанныеСтрокиПоставщика.ПолученСФ, ДанныеСтрокиПоставщика.НДС, 0);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры 

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГлавная Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СуммаВключаетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВсегоВознаграждение

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоВознаграждение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СуммаВключаетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// СчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДСПоРеализации");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// СчетДоходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетДоходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиВознаграждение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПроцентКомиссионногоВознаграждения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроцентКомиссионногоВознаграждения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособРасчетаКомиссионногоВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);
	
	// ТоварыНоменклатура

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Содержание", ВидСравненияКомпоновкиДанных.НеЗаполнено);	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// ТоварыСодержание

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСодержание");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	
	// ТоварыСуммаНДСВознаграждения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСВознаграждения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
		СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаВознаграждения", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Реквизиты счета-фактуры в таблице Поставщики
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоставщикиДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоставщикиНомерСчетаФактуры");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоставщикиКПППоставщика");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоставщикиСчетФактура");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Поставщики.ПолученСФ", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Поставщики.ДатаСФ", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.BorderColor);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоставщикиПолученСФ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Поставщики.ПолученСФ", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Поставщики.ДатаСФ", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если НЕ (Форма.ИспользоватьОднуНоменклатурнуюГруппу И ЗначениеЗаполнено(Объект.Субконто)) Тогда
		Элементы.Субконто.Доступность = Форма.СчетДоходовКоличествоСубконто > 0;
	КонецЕсли;

	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Доступность            = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения)
		И Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
		
	// Для договоров с признаком "СчетаФактурыОтИмениОрганизации" счета-фактуры выписываются сводно по всем позициям отчета,
	// флажок "ВыписыватьСчетаФактурыСводно" не отображаем.
	Элементы.ВыписыватьСчетаФактурыСводно.Видимость = НЕ Форма.СчетаФактурыОтИмениОрганизации;
	Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Объект.Дата >= '20150101';
		
	СуммаНДСВознаграждения	= Объект.Товары.Итог("СуммаНДСВознаграждения");
	Элементы.СчетУчетаНДСПоРеализации.АвтоОтметкаНезаполненного	= СуммаНДСВознаграждения <> 0;
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного		= СуммаНДСВознаграждения <> 0;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		Ложь,
		Истина,
		Форма.СчетФактура);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего			= Объект.Товары.Итог("Всего");
	Форма.ИтогиВознаграждение 	= Объект.Товары.Итог("ВсегоВознаграждение");
	Форма.ИтогиНДСПоТоварам 	= Объект.Товары.Итог("СуммаНДС");

	Форма.ИтогВсегоПоСФВыставленным    = Объект.Поставщики.Итог("ВсегоПоСФ");
	Форма.ИтогВсегоНДСПоСФВыставленным = Объект.Поставщики.Итог("НДСПоСФ");
	
	ЗаполнитьТекстПроСчетФактуру(Форма);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокВознаграждение = ?(Объект.СуммаВключаетНДС, НСтр("ru='Вознаграждение с НДС'"), НСтр("ru='Вознаграждение без НДС'"));
	
	Элементы.ТоварыСуммаВознаграждения.Заголовок = ЗаголовокВознаграждение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

// Заполнение табличных частей Поставщики и Товары:

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюНаКлиенте(СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор. Заполнение невозможно.'") ;
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполнения = "ЗаполнитьПоПоступлению" Тогда
		Если Объект.Товары.Количество() + Объект.Поставщики.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениеПоПоступлениюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, Заголовок);
		Иначе
			ОткрытьФормуВыбораПоступления(СпособЗаполнения);
		КонецЕсли;
	Иначе
		ОткрытьФормуВыбораПоступления(СпособЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюНаКлиентеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения; 
	
	Поступление = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗакупленнымиНаСервере(СпособЗаполнения, Поступление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНовыйКлючСтроки(МаксимальныйКлючСтроки, КоличествоСтрокПостащиков)
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.
	Если КоличествоСтрокПостащиков > 0 Тогда
		МаксимальныйКлючСтроки = МаксимальныйКлючСтроки + 1;
	КонецЕсли;

	Возврат МаксимальныйКлючСтроки;
	
КонецФункции

&НаКлиенте
Процедура ДанныеПоставщикиУстановитьОтборСтрок()
	
	ТекДанныеПоставщики = Элементы.Поставщики.ТекущиеДанные;
	Если ТекДанныеПоставщики <> Неопределено Тогда
		КлючСтрокиТовары = Объект.Поставщики.Индекс(ТекДанныеПоставщики) + 1;
		Элементы.Поставщики.ТекущаяСтрока = ТекДанныеПоставщики.ПолучитьИдентификатор();
		КлючСтроки = ТекДанныеПоставщики.КлючСтроки;
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
		Элементы.Товары.ОтборСтрок = ФиксированныйОтбор;
	Иначе
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("КлючСтроки", 0);
		Элементы.Товары.ОтборСтрок = ФиксированныйОтбор;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора 	= БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);
		РасчетыВУЕ 			= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		РасчетыВУЕ 			= Ложь;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	Если Объект.СчетДоходов.Пустая() Тогда
		СчетДоходовКоличествоСубконто = 0;
	Иначе
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
		СчетДоходовКоличествоСубконто = СвойстваСчета.КоличествоСубконто;
	КонецЕсли;

	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		НоменклатурнаяГруппаВознаграждения = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	ИначеЕсли ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		НоменклатурнаяГруппаВознаграждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.УслугаПоВознаграждению, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	МаксимальныйКлючСтроки = Документы.ОтчетКомитентуОПродажах.ПолучитьМаксимальныйКлючСтроки(Объект.Поставщики);
	
	СписокСпособовРасчета = ОбщегоНазначенияБПКлиентСервер.СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения(Истина);
	СписокВыбора = Элементы.СпособРасчетаКомиссионногоВознаграждения.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокСпособовРасчета Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Элементы.СтавкаНДСВознаграждения.СписокВыбора.Очистить();
	Для Каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		Элементы.СтавкаНДСВознаграждения.СписокВыбора.Добавить(СтавкаНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

	УстановитьЗаголовкиКолонок();
	
	Документы.ОтчетКомитентуОПродажах.УстановитьЗаголовокФормы(ЭтаФорма);
	
	ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма);
	
	// Устанавливаем видимость, доступность и заголовоки прочих элементов:
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТабличнойЧасти(СтруктураДанных, Элементы, ИмяТабличнойЧасти)

	Для каждого Колонка Из Элементы Цикл
		
		Если ТипЗнч(Колонка) = Тип("ГруппаФормы") Тогда
		
			КолонкиТабличнойЧасти(СтруктураДанных, Колонка.ПодчиненныеЭлементы, ИмяТабличнойЧасти);
			
		Иначе
			
			ИмяКолонки = СтрЗаменить(Колонка.Имя, ИмяТабличнойЧасти, "");
			
			Если ИмяКолонки = "НоменклатураКод" ИЛИ ИмяКолонки = "НоменклатураАртикул" Тогда
				Продолжить;
			КонецЕсли;
			
			
			СтруктураДанных.Вставить(ИмяКолонки);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры 


&НаКлиенте
Функция ПолучитьСтруктуруДанныхСтроки(ДанныеСтроки, ИмяТабличнойЧасти = "Товары")

	Если ДанныеСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	
	КолонкиТабличнойЧасти(СтруктураДанных, Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы, ИмяТабличнойЧасти);
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураДанных.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
	
	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗакупленнымиНаСервере(СпособЗаполнения = "ЗаполнитьЗакупленнымиПоДоговору", Поступление = Неопределено)
	
	Если СпособЗаполнения = "ЗаполнитьЗакупленнымиПоДоговору"
		ИЛИ СпособЗаполнения = "ЗаполнитьПоПоступлению" Тогда
		Объект.Товары.Очистить();
		Объект.Поставщики.Очистить();
		МаксимальныйКлючСтроки = 0;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СпособЗаполнения",    СпособЗаполнения);
	СтруктураПараметров.Вставить("Организация",         Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",          Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ДокументПоступления", Поступление);
	СтруктураПараметров.Вставить("Период",
		?(ЗначениеЗаполнено(Объект.Ссылка),
			Новый МоментВремени(Объект.Дата, Объект.Ссылка),
			Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая)));
	
	РезультатЗапроса = Документы.ОтчетКомитентуОПродажах.ПолучитьЗакупленные(СтруктураПараметров);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ЗначениеЗаполнено(Поступление) Тогда
			ТекстСообщения = НСтр("ru = 'В документе %1 нет ни одной строки товаров или услуг, закупленных для комитента %2 по договору %3.'");
		    ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Поступление, Объект.Контрагент, Объект.ДоговорКонтрагента);
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПоПоставщикам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
		ВыборкаПоПартиям = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПартиям.Следующий() Цикл
			
			КлючСтроки = ПолучитьНовыйКлючСтроки(МаксимальныйКлючСтроки, Объект.Поставщики.Количество());
			
			СтрокаПоставщика = Объект.Поставщики.Добавить();
			СтрокаПоставщика.КлючСтроки        = КлючСтроки;
			СтрокаПоставщика.Поставщик         = ВыборкаПоПартиям.Поставщик;
			СтрокаПоставщика.КПППоставщика     = ВыборкаПоПартиям.КПППоставщика;
			СтрокаПоставщика.Партия            = ВыборкаПоПартиям.Партия;
			СтрокаПоставщика.ДатаСФ            = ВыборкаПоПартиям.ДатаСФ;
			СтрокаПоставщика.НомерСчетаФактуры = ВыборкаПоПартиям.НомерСчетаФактуры;
			СтрокаПоставщика.ПолученСФ         = ВыборкаПоПартиям.ПолученСФ;
			
			ВыборкаПоНоменклатуре = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				
				ВыборкаПоСтрокам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				МассивКРаспределениюКоличество = Новый Массив;
				МассивКРаспределениюСумма = Новый Массив;
				МассивКРаспределениюСуммаНДС = Новый Массив;
				
				Пока ВыборкаПоСтрокам.Следующий() Цикл
					МассивКРаспределениюКоличество.Добавить(ВыборкаПоСтрокам.Количество);
					МассивКРаспределениюСумма.Добавить(ВыборкаПоСтрокам.Сумма);
					МассивКРаспределениюСуммаНДС.Добавить(ВыборкаПоСтрокам.СуммаНДС);
				КонецЦикла;

				МассивКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.КоличествоОстаток, МассивКРаспределениюКоличество, 3);
				
				МассивСуммаНДС   = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.СуммаНДСОстаток, МассивКРаспределениюСуммаНДС);
				
				МассивСумма      = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.СуммаОстаток, МассивКРаспределениюСумма);
				
				ВыборкаПоСтрокам.Сбросить();
				Индекс = 0;
				Пока ВыборкаПоСтрокам.Следующий() Цикл
					Количество = 0;
					Сумма = 0;
					СуммаНДС = 0;
					Если МассивКоличество <> Неопределено Тогда
						Количество = МассивКоличество[Индекс];
					КонецЕсли;
					Если МассивСумма <> Неопределено Тогда
						Сумма = МассивСумма[Индекс];
					КонецЕсли;
					Если МассивСуммаНДС <> Неопределено Тогда
						СуммаНДС = МассивСуммаНДС[Индекс];
					КонецЕсли;
						
					СтрокаТабличнойЧасти = Объект.Товары.Добавить();
					СтрокаТабличнойЧасти.КлючСтроки = КлючСтроки;
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоСтрокам);
					СтрокаТабличнойЧасти.Содержание     = СодержаниеУслуги(ВыборкаПоСтрокам);
					СтрокаТабличнойЧасти.Количество     = Количество;
					СтрокаТабличнойЧасти.КоличествоМест = Количество;
					СтрокаТабличнойЧасти.Коэффициент    = 1;
					СтрокаТабличнойЧасти.Сумма          = Сумма;
					
					Если СуммаНДС = 0 
						И ВыборкаПоСтрокам.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
						И ВыборкаПоСтрокам.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
					
						СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						Сумма,
						Истина, // в регистре хранится с НДС
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					Иначе
						СтрокаТабличнойЧасти.СуммаНДС       = СуммаНДС;
					КонецЕсли;
					
					// СуммаПоступления и ЦенаПоступления всегда с НДС
					СтрокаТабличнойЧасти.Сумма = Сумма - ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
					СтрокаТабличнойЧасти.Цена  = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
					
					РассчитатьВознаграждениеВСтроке(
						СтрокаТабличнойЧасти.СуммаВознаграждения,
						СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
						СтрокаТабличнойЧасти.ВсегоВознаграждение,
						СтрокаТабличнойЧасти.Сумма,
						СтрокаТабличнойЧасти.СуммаНДС,
						Объект.ПроцентКомиссионногоВознаграждения,
						Объект.СпособРасчетаКомиссионногоВознаграждения,
						Объект.СтавкаНДСВознаграждения,
						Объект.СуммаВключаетНДС);
						
						Индекс = Индекс + 1;
				КонецЦикла;
				
			КонецЦикла;

		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДатуНомерСФДляСтрокиПартии(Знач Партия, Знач Поставщик)

	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("ДатаСФ", '0001-01-01');
	СтруктураРезультата.Вставить("НомерСчетаФактуры", "");
	СтруктураРезультата.Вставить("ПолученСФ", Ложь);
	СтруктураРезультата.Вставить("Поставщик", Поставщик);
	СтруктураРезультата.Вставить("КПППоставщика", ОбщегоНазначения.ОписаниеТипаСтрока(9));

	РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партия, 
		"Дата, ДатаВходящегоДокумента, Контрагент");
	
	Если ПостащикНеУказанВПартииИОтЕгоИмениНеСоставленСчетФактура(Поставщик, Партия) Тогда
		СтруктураРезультата.Поставщик = РеквизитыПартии.Контрагент;
	КонецЕсли;

	СчетФактураПартии = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Партия);
	
	Если ЗначениеЗаполнено(СчетФактураПартии) Тогда
		РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураПартии, 
			"ДатаВходящегоДокумента, НомерВходящегоДокумента,КППКонтрагента");
		СтруктураРезультата.ДатаСФ            = РеквизитыСФ.ДатаВходящегоДокумента;
		СтруктураРезультата.НомерСчетаФактуры = РеквизитыСФ.НомерВходящегоДокумента;
		СтруктураРезультата.КПППоставщика     = РеквизитыСФ.КППКонтрагента;
		СтруктураРезультата.ПолученСФ         = Истина;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПартии.ДатаВходящегоДокумента) Тогда
		СтруктураРезультата.ДатаСФ = РеквизитыПартии.ДатаВходящегоДокумента;
	Иначе
		СтруктураРезультата.ДатаСФ = РеквизитыПартии.Дата;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры	= Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.Услуга";

	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Результат = Запрос.Выполнить();
	
	МассивУслуг	= Новый Массив;
	Если НЕ Результат.Пустой() Тогда
		МассивУслуг	= Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.ВсегоВознаграждение = СтрокаТаблицы.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСВознаграждения);
		СтрокаТаблицы.ЭтоУслуга	= НЕ МассивУслуг.Найти(СтрокаТаблицы.Номенклатура) = Неопределено 
			ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.Содержание) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура));
	КонецЦикла;

	СуммыПоКлючам = Объект.Товары.Выгрузить(,"КлючСтроки,Сумма,СуммаНДС");
	СуммыПоКлючам.Свернуть("КлючСтроки", "Сумма,СуммаНДС");
	Если НЕ Объект.СуммаВключаетНДС Тогда
		Для каждого СтрокаТаблицы Из СуммыПоКлючам Цикл
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	СуммыПоКлючам.Колонки.Сумма.Имя = "Всего";
	СуммыПоКлючам.Колонки.СуммаНДС.Имя = "НДС";
	СуммыПоКлючам.Индексы.Добавить("КлючСтроки");
	Для каждого СтрокаТаблицы Из Объект.Поставщики Цикл
	    СуммыПоКлючу = СуммыПоКлючам.Найти(СтрокаТаблицы.КлючСтроки, "КлючСтроки");
		Если СуммыПоКлючу <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СуммыПоКлючу);
		КонецЕсли;
		СтрокаТаблицы.ВсегоПоСФ = ?(СтрокаТаблицы.ПолученСФ, СтрокаТаблицы.Всего, 0);
		СтрокаТаблицы.НДСПоСФ   = ?(СтрокаТаблицы.ПолученСФ, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПокупке", Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Объект.СуммаВключаетНДС);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "Комиссионер";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы, Партия = Неопределено)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	Если ЗначениеЗаполнено(Партия) Тогда
		ДанныеОбъекта.Вставить("ДоговорКонтрагента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партия, "ДоговорКонтрагента"));
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена, КлючСтроки", СтрокаТовара.Номенклатура, СтрокаТовара.Цена, ТекущийКлючСтроки);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ЗначениеПустогоКоличества = ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			СтрокаТабличнойЧасти.КлючСтроки = ТекущийКлючСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СведенияОНоменклатуре.Услуга Тогда
				СтрокаТабличнойЧасти.Содержание = "";	
			ИначеЕсли ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное) Тогда
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.Наименование;
			Иначе
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			КонецЕсли;
			СтрокаТабличнойЧасти.ЭтоУслуга = СведенияОНоменклатуре.Услуга;
			
			ЗначениеПустогоКоличества = ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0);
			
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС			= СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ (ЗначениеПустогоКоличества = 1 И СтрокаТабличнойЧасти.Сумма = 0) Тогда
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
			КонецЕсли; 
			
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьТипыЦенНоменклатуры	     = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет 				     = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СчетаФактурыОтИмениОрганизации = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СчетаФактурыОтИмениОрганизации") = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПостащикНеУказанВПартииИОтЕгоИмениНеСоставленСчетФактура(Поставщик, Партия)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поставщик", 				Поставщик);
	Запрос.УстановитьПараметр("ДокументПоступления",	Партия);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Контрагент = &Поставщик
	|	И ПоступлениеТоваровУслуг.Ссылка = &ДокументПоступления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|	И СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументПоступления
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Продавец = &Поставщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &ДокументПоступления
	|	И СчетФактураВыданный.Контрагент = &Поставщик";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для каждого СтрокаКлюча Из ТаблицаУдаленныхКлючей Цикл
		КлючПоиска = Новый Структура("КлючСтроки", СтрокаКлюча.КлючСтроки);
		МассивСтрокТовары = Объект.Товары.НайтиСтроки(КлючПоиска);
		
		Для каждого СтрокаТЧ Из МассивСтрокТовары Цикл
			Объект.Товары.Удалить(СтрокаТЧ);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаУдаленныхКлючей.Очистить();
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗакупленнымиПоДоговоруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗакупленнымиНаСервере("ЗаполнитьЗакупленнымиПоДоговору");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступления(СпособЗаполнения)
	
	ПараметрыОтбора = Новый Структура("Организация, ВидОперации",
		Объект.Организация, ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениеПоПоступлениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораПоступления("ЗаполнитьПоПоступлению");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ППОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.НовыеПараметрыУстановкиСвойствСубконто();
	
	Результат.ПоляФормы.Субконто1   = "Субконто";
	Результат.ПоляОбъекта.Субконто1 = "Субконто";
	Результат.ПоляОбъекта.СчетУчета = "СчетДоходов";
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаСервере
Функция СодержаниеУслуги(ВыборкаПоСтрокам)
	
	Содержание = ВыборкаПоСтрокам.Содержание;
	
	Если ТипЗнч(ВыборкаПоСтрокам.Партия) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'НДС, уплаченный при исполнении обязанностей налогового агента по документу № %1 от %2'"), 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоСтрокам.НомерДляСодержания, Истина, Ложь),
			Формат(ВыборкаПоСтрокам.ДатаДляСодержания, "ДЛФ=Д"));
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти
