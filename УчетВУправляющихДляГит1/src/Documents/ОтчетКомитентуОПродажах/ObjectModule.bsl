#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Таблица выданных счетов-фактур, основанием которых является этот документ.
Перем ПодчиненныеСчетаФактурыВыданные;
// Таблица полученных счетов-фактур, основанием которых является этот документ.
Перем ПодчиненныеСчетаФактурыПолученные;
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		ЗаполнитьПоДокументуПоступление(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение реквизитов, специфичных для документа:
	Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено ИЛИ ТипДанныхЗаполнения = Тип("Структура") Тогда
		СуммаВключаетНДС = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
			УдержатьВознаграждение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
	ВыписыватьСчетаФактурыСводно = Дата >= '20150101';
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	Для каждого СтрокаТЧ Из Поставщики Цикл
		СтрокаТЧ.ПолученСФ 	 = Ложь;
		СтрокаТЧ.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Товары, Дата);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Договор контрагента
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
		УчетАгентскогоНДС = ДоговорКонтрагента.УчетАгентскогоНДС;
	Иначе
		УчетАгентскогоНДС = Ложь;
	КонецЕсли;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПроцентКомиссионногоВознаграждения");
	КонецЕсли;

	// Реквизиты НДС
	Если Товары.Итог("СуммаНДСВознаграждения") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Реквизиты в табличной части "Поставщики"
	МассивНепроверяемыхРеквизитов.Добавить("ДатаСФ");

	Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда

		МассивПартий = Поставщики.ВыгрузитьКолонку("Партия");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ВТ_Партии
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка В(&МассивПартий)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.Контрагент
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка В(&МассивПартий)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка.Продавец) КАК Продавец,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК СоставленОтИмени
		|ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактураПолученныйДокументыОснования.ДокументОснование В(&МассивПартий)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.Контрагент,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка В(&МассивПартий)
		|	И НЕ СчетФактураВыданный.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Партии.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ДанныеСчетовФактур.СоставленОтИмени, ЛОЖЬ)
		|			ТОГДА ВТ_ДанныеСчетовФактур.Продавец
		|		ИНАЧЕ ВТ_Партии.Контрагент
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	ВТ_Партии КАК ВТ_Партии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСчетовФактур КАК ВТ_ДанныеСчетовФактур
		|		ПО ВТ_Партии.Ссылка = ВТ_ДанныеСчетовФактур.ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Партии.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ДанныеСчетовФактур.СоставленОтИмени, ЛОЖЬ)
		|			ТОГДА ВТ_ДанныеСчетовФактур.Продавец
		|		ИНАЧЕ ВТ_Партии.Контрагент
		|	КОНЕЦ";
		
		СоответствиеПоставщикиИзПартий = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеПоставщикиИзПартий.Вставить(Выборка.Ссылка, Выборка.Контрагент);
		КонецЦикла;

		Для каждого СтрокаТаблицы Из Поставщики Цикл
			Префикс = "Поставщики[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'Поставщики'");

			// Несоответствие поставщика в документе поступления и в строке табличной части Поставщики
			Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) И ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ПоставщикИзПартии = СоответствиеПоставщикиИзПартий[СтрокаТаблицы.Партия];
				Если ПоставщикИзПартии <> СтрокаТаблицы.Поставщик Тогда
					ТекстСообщения = НСтр("ru = 'Не совпадает значение реквизита ""Поставщик"" и контрагент из документа партии 
																				|или от имени которого составлен счет-фактура партии!'");
						Поле = Префикс + "Партия";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;

			// Заполненность даты СФ
			Если СтрокаТаблицы.ПолученСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
					НСтр("ru = 'Дата СФ'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

	Если НЕ УчетАгентскогоНДС И ВидОперации <> Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	
	СуммаВознагражденияПоДокументу = 
		Товары.Итог("СуммаВознаграждения") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения"));
	Если СуммаВознагражденияПоДокументу = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетДоходов");
	КонецЕсли; 

	// Реквизит "Сумма НДС" в табличной части "Товары"
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаНДСВознаграждения");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Содержание");

	МассивУслуг	= Новый Массив;
	Если Товары.Количество() > 0 Тогда
		
		МассивНоменклатуры	= Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивНоменклатуры)
			|	И Номенклатура.Услуга";

		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Результат = Запрос.Выполнить();
		
		МассивУслуг	= Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");
		
		ЭтоУслуга = (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Или МассивУслуг.Найти(СтрокаТаблицы.Номенклатура) <> Неопределено);

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ПустаяСтрока(СтрокаТаблицы.Содержание) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Содержание'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Содержание";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
			
		Если НЕ ЭтоУслуга И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Количество'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		// Ненулевая ставка НДС, ненулевая сумма, есть учет агентского НДС, но нулевая сумма НДС
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС) <> 0)
				И (СтрокаТаблицы.СуммаНДС = 0)
				И (УчетАгентскогоНДС ИЛИ ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Сумма НДС'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		// Ненулевая ставка НДС, ненулевая сумма, но нулевая сумма НДС
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения) <> 0)
				И (СтрокаТаблицы.СуммаВознаграждения <> 0)
				И (СтрокаТаблицы.СуммаНДСВознаграждения = 0) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Сумма НДС вознаграждения'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "СуммаНДСВознаграждения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;

	// Реквизит "Сумма НДС" в табличной части "ДенежныеСредства"
	МассивНепроверяемыхРеквизитов.Добавить("ДенежныеСредства.СуммаНДС");

	Для каждого СтрокаТаблицы Из ДенежныеСредства Цикл
		Префикс = "ДенежныеСредства[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Денежные средства'");
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС) <> 0)
				И (СтрокаТаблицы.СуммаНДС = 0) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
			НСтр("ru = 'Сумма НДС'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения"));
	
	// Процедура подготавливает таблицу ссылок на используемые в документе счета-фактуры,
	// ее необходимо выполнять в любом режиме записи документа (интерактивно или групповым перепроведением).
	СформироватьСчетаФактурыВыданные(Отказ);
	
	ПодчиненныеСчетаФактурыПолученные = ПолучитьТаблицуПодчиненныхСчетовФактурПолученных(Ссылка);
	
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ РучнаяКорректировка Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОтчетКомитентуОПродажах.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица взаиморасчетов по комиссионному вознаграждению с учетом зачета авансов
	// В таблице ВознаграждениеТаблица должна быть максимум 1 строка (на всю сумму вознаграждения)
	// к ней могут добавиться зачеты авансов
	ТаблицаВзаиморасчетовВознаграждение = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ВознаграждениеТаблица, // ТаблицаДокумента,
		Неопределено, // ТаблицаДокументыАвансов - явно заданных документов авансов нет,
		              // Если выключена УдержатьВознаграждение и задан счет учета авансов, то авансы зачитываются "Автоматически"
		              // Иначе авансы не зачитываются
		ПараметрыПроведения.ВознаграждениеШапка, // ТаблицаРеквизиты
		Отказ);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблица,
		ТаблицаВзаиморасчетовВознаграждение,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	Документы.ОтчетКомитентуОПродажах.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетовВознаграждение);
	
	// Учет доходов и расходов ИП
	ТаблицаОтчетаКомитентуОПродажахИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОтчетаКомитентуОПродажах(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	Документы.ОтчетКомитентуОПродажах.СформироватьДвиженияСписаниеРеализованныхТоваровКомитента(
		ПараметрыПроведения.РеализованныеТоварыКомитентаТаблица,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	Документы.ОтчетКомитентуОПродажах.СформироватьДвиженияСписаниеЗакупленныхТоваровКомитента(
		ПараметрыПроведения.ЗакупленныеТоварыКомитентаТаблица,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетовВознаграждение,
		ПараметрыПроведения.ВознаграждениеШапка,
		Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияПоКомиссионномуВознаграждению(
		ТаблицаВзаиморасчетовВознаграждение,
		ПараметрыПроведения.ВознаграждениеШапка,
		Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги,
		Неопределено,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги,
		Неопределено,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);
		
	//Рублевые суммы документов в валюте
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументовВВалюте,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаВознагражденияДляРублевыхСумм = Документы.ОтчетКомитентуОПродажах.ПодготовитьТаблицуВознагражденияДляОтраженияПоРегиструРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.СобственныеТоварыУслуги);	
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаВознагражденияДляРублевыхСумм,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные =	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОтчетКомитентуОПродажах(
		ТаблицаОтчетаКомитентуОПродажахИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчетовВознаграждение, 
		ПараметрыПроведения.ВознаграждениеШапка, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();        
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
				
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуПоступление(ДанныеЗаполнения)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СпособЗаполнения",    "ЗаполнитьПоПоступлению");
	СтруктураПараметров.Вставить("Организация",         Организация);
	СтруктураПараметров.Вставить("Контрагент",          ДанныеЗаполнения.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  ДанныеЗаполнения.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ДокументПоступления", ДанныеЗаполнения.Основание);
	СтруктураПараметров.Вставить("Период",
		?(НЕ ЭтоНовый(),
			Новый МоментВремени(Дата, Ссылка),
			Новый Граница(КонецДня(Дата), ВидГраницы.Включая)));
	
	РезультатЗапроса = Документы.ОтчетКомитентуОПродажах.ПолучитьЗакупленные(СтруктураПараметров);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Основание) Тогда
			ТекстСообщения = НСтр("ru = 'В документе %1 нет ни одной строки товаров или услуг, закупленных для комитента %2 по договору %3.'");
		    ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ДанныеЗаполнения.Основание, ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.ДоговорКонтрагента);
		    ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СуммаВключаетНДС = Истина;
	ВидОперации      = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДоговорКонтрагента,
			"СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
		СпособРасчетаКомиссионногоВознаграждения = ДанныеДоговора.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДанныеДоговора.ПроцентКомиссионногоВознаграждения;
	КонецЕсли;
	
	ТаблицаТовары = Товары.Выгрузить();
	
	ВыборкаПоПоставщикам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
		ВыборкаПоПартиям = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПартиям.Следующий() Цикл
			
			КлючСтроки = Документы.ОтчетКомитентуОПродажах.ПолучитьМаксимальныйКлючСтроки(Поставщики);
			
			СтрокаПоставщика = Поставщики.Добавить();
			СтрокаПоставщика.КлючСтроки        = КлючСтроки;
			СтрокаПоставщика.Поставщик         = ВыборкаПоПартиям.Поставщик;
			СтрокаПоставщика.КПППоставщика     = ВыборкаПоПартиям.КПППоставщика;
			СтрокаПоставщика.Партия            = ВыборкаПоПартиям.Партия;
			СтрокаПоставщика.ДатаСФ            = ВыборкаПоПартиям.ДатаСФ;
			СтрокаПоставщика.НомерСчетаФактуры = ВыборкаПоПартиям.НомерСчетаФактуры;
			СтрокаПоставщика.ПолученСФ         = ВыборкаПоПартиям.ПолученСФ;
			
			ТаблицаТовары.Очистить();
			
			ВыборкаПоНоменклатуре = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				
				ВыборкаПоСтрокам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				МассивКРаспределениюКоличество = Новый Массив;
				МассивКРаспределениюСумма = Новый Массив;
				МассивКРаспределениюСуммаНДС = Новый Массив;
				
				Пока ВыборкаПоСтрокам.Следующий() Цикл
					МассивКРаспределениюКоличество.Добавить(ВыборкаПоСтрокам.Количество);
					МассивКРаспределениюСумма.Добавить(ВыборкаПоСтрокам.Сумма);
					МассивКРаспределениюСуммаНДС.Добавить(ВыборкаПоСтрокам.СуммаНДС);
				КонецЦикла;

				МассивКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.КоличествоОстаток, МассивКРаспределениюКоличество, 3);
				
				МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.СуммаНДСОстаток, МассивКРаспределениюСуммаНДС);
				
				МассивСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВыборкаПоНоменклатуре.СуммаОстаток, МассивКРаспределениюСумма);
				
				ВыборкаПоСтрокам.Сбросить();
				Индекс = 0;
				Пока ВыборкаПоСтрокам.Следующий() Цикл
					Количество = 0;
					Сумма = 0;
					СуммаНДС = 0;
					Если МассивКоличество <> Неопределено Тогда
						Количество = МассивКоличество[Индекс];
					КонецЕсли;
					Если МассивСумма <> Неопределено Тогда
						Сумма = МассивСумма[Индекс];
					КонецЕсли;
					Если МассивСуммаНДС <> Неопределено Тогда
						СуммаНДС = МассивСуммаНДС[Индекс];
					КонецЕсли;
						
					СтрокаТабличнойЧасти = ТаблицаТовары.Добавить();
					СтрокаТабличнойЧасти.КлючСтроки = КлючСтроки;
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоСтрокам);
					СтрокаТабличнойЧасти.Количество     = Количество;
					СтрокаТабличнойЧасти.КоличествоМест = Количество;
					СтрокаТабличнойЧасти.Коэффициент    = 1;
					СтрокаТабличнойЧасти.Сумма          = Сумма;
					
					Если СуммаНДС = 0 
						И ВыборкаПоСтрокам.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
						И ВыборкаПоСтрокам.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
					
						СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						Сумма,
						Истина, // в регистре хранится с НДС
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					Иначе
						СтрокаТабличнойЧасти.СуммаНДС       = СуммаНДС;
					КонецЕсли;
					
					// СуммаПоступления и ЦенаПоступления всегда с НДС
					СтрокаТабличнойЧасти.Сумма = Сумма - ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
					СтрокаТабличнойЧасти.Цена  = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
					
					Документы.ОтчетКомитентуОПродажах.РассчитатьВознаграждениеВСтроке(
						СтрокаТабличнойЧасти.СуммаВознаграждения,
						СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
						СтрокаТабличнойЧасти.Сумма,
						СтрокаТабличнойЧасти.СуммаНДС,
						ПроцентКомиссионногоВознаграждения,
						СпособРасчетаКомиссионногоВознаграждения,
						УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Дата),
						СуммаВключаетНДС);
						
						Индекс = Индекс + 1;
				КонецЦикла;
				
			КонецЦикла;
			
			ТаблицаТовары.Сортировать("НомерСтроки");
			Для каждого СтрокаТовары Из ТаблицаТовары Цикл
				ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаТовары);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
			И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
			ВызватьИсключение НСтр("ru = 'Отчет комитенту вводится на основании документа ""Поступление (акт, накладная)"",
				|только если в настройке параметров учета установлен флажок ""Осуществляется реализация товаров или услуг комитентов""
				|или ""Осуществляется закупка товаров или услуг комитентов"".'");
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
			"ВидДоговора, СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
			
			УдержатьВознаграждение = Истина;
			
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
			
			ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
			
			// Контрагент и договор будут другие в этом случае, очистим их
			Контрагент         = Справочники.Контрагенты.ПустаяСсылка();
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			МассивДоговоров = Документы.ОтчетКомитентуОПродажах.ПолучитьМассивДоговоровОснования(Основание);
			
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ВызватьИсключение НСтр("ru = 'Отчет комитенту не может быть введен на основании документа ""Поступление (акт, накладная)"",
					|в котором не указаны товары / агентские услуги, приобретенные для комитента.'");
				
			ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
				
				ДоговорКонтрагента = МассивДоговоров[0];
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "Владелец");
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Контрагент",         Контрагент);
				ДанныеЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
				ДанныеЗаполнения.Вставить("Основание",          Основание);
				
				ЗаполнитьПоДокументуПоступление(ДанныеЗаполнения);
				
			КонецЕсли;
			
		Иначе
				
			ВызватьИсключение НСтр("ru = 'Отчет комитенту не может быть введен на основании документа ""Поступление (акт, накладная)"",
				|в котором указан договор ""С покупателем"".'");
				
		КонецЕсли;
		
		СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактурВыданных(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК КлючСтроки,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Продавец КАК Поставщик,
	|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ДатаСФ,
	|	СчетФактураВыданный.НомерСчетаФактурыПродавца КАК НомерСчетаФактуры,
	|	СчетФактураВыданный.Проведен КАК Проведен,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураВыданный.СводныйКомиссионный КАК СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И НЕ СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использован
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование)
	|			И СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаСФ;

КонецФункции

Функция ПолучитьТаблицуПодчиненныхСчетовФактурПолученных(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК КлючСтроки,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСФ,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|	СчетФактураПолученный.Проведен КАК Проведен,
	|	СчетФактураПолученный.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК Использован
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование)
	|			И СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаСФ;

КонецФункции 

Процедура ОбновитьСчетаФактуры(РежимЗаписи)
	
	ОбновитьСостояниеСчетовФактур(ПодчиненныеСчетаФактурыВыданные, РежимЗаписи, "СчетФактураВыданный");
	ОбновитьСостояниеСчетовФактур(ПодчиненныеСчетаФактурыПолученные, РежимЗаписи, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбновитьСостояниеСчетовФактур(ПодчиненныеСчетаФактуры, РежимЗаписи, ТипСчетовФактур)
	
	Перем РегистрыТребующиеОчисткиПоДокументам;
	
	Если Не УчетНДСБП.УстановитьУправляемуюБлокировку(ТипСчетовФактур, ПодчиненныеСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект);
	ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам", РегистрыТребующиеОчисткиПоДокументам);
	
	ОтборПоДокументуОснованию = Новый Структура("ДокументОснование", Ссылка);
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
		
		СФНеНужен = (ПометкаУдаления Или Не СтрокаСФ.Использован);
		
		Если СФНеНужен И СтрокаСФ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ГрупповоеПерепроведение);
		Если РегистрыТребующиеОчисткиПоДокументам <> Неопределено Тогда
			ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
				РегистрыТребующиеОчисткиПоДокументам);
		КонецЕсли;
		
		Если СФНеНужен И ДокументСФ.ДокументыОснования.Количество() <= 1 Тогда
			ДокументСФ.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
		Если СФНеНужен Тогда
			
			СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(ОтборПоДокументуОснованию);
			Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
				ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
			КонецЦикла;
			РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
		Иначе
			
			// Если в счете-фактуре несколько оснований, счет-фактура проводится, только если все основания проведены.
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ДокументСФ.ДокументыОснования.Количество() > 1 
				И УчетНДСБП.ЕстьНепроведеныеОснованияСчетаФактуры(ДокументСФ.ДокументыОснования, Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
		КонецЕсли;
		ДокументСФ.Записать(РежимЗаписиСФ);
	
	КонецЦикла;

КонецПроцедуры

Функция ДанныеСчетовФактурВыданныхПоДокументу()
	
	// Для договора с признаком "СчетаФактурыОтИмениОрганизации" перевыставляется один счет-фактура
	// от имени организации по нескольким полученным счетам-фактурам (в т.ч. за разные даты).
	СчетаФактурыОтИмениОрганизации = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СчетаФактурыОтИмениОрганизации") = Истина;
	//Если счета-фактуры генерируются сводно, то получим из таблицы счета-фактуры которые будут сводными
	ТаблицаДатСФ = Новый ТаблицаЗначений;
	Если ВыписыватьСчетаФактурыСводно 
		И Дата >= '20150101' Тогда
		ТаблицаДатСФ = ЭтотОбъект.Поставщики.Выгрузить().Скопировать(Новый Структура("ПолученСФ", Истина),"ДатаСФ");
		ТаблицаДатСФ.Колонки.Добавить("КоличествоСФ", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
		ТаблицаДатСФ.ЗаполнитьЗначения(1, "КоличествоСФ");
		Если СчетаФактурыОтИмениОрганизации Тогда 
			ТаблицаДатСФ.ЗаполнитьЗначения(НачалоДня(Дата), "ДатаСФ");
		КонецЕсли;
		ТаблицаДатСФ.Свернуть("ДатаСФ", "КоличествоСФ");
	КонецЕсли;
	
	ДанныеСчетовФактур = ЭтотОбъект.Поставщики.ВыгрузитьКолонки(
		"КлючСтроки,Поставщик,КПППоставщика,ДатаСФ,НомерСчетаФактуры,СчетФактура");
	ДанныеСчетовФактур.Колонки.Добавить("СводныйСФ", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Поставщики Цикл
		Если СтрокаТабличнойЧасти.ПолученСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			ДатаДляПоиска = СтрокаТабличнойЧасти.ДатаСФ;
			Если СчетаФактурыОтИмениОрганизации = Истина Тогда
				ДатаДляПоиска = НачалоДня(Дата);
				НоваяСтрока.ДатаСФ = ДатаДляПоиска;
			КонецЕсли;
			СчетФактураПоДате = ТаблицаДатСФ.Найти(ДатаДляПоиска);
			Если СчетФактураПоДате <> Неопределено
				И (СчетФактураПоДате.КоличествоСФ > 1
				ИЛИ СчетаФактурыОтИмениОрганизации) Тогда 
				// Переопределим покупателя, установим признак СводныйСФ
				НоваяСтрока.Поставщик     = ЭтотОбъект.Контрагент;
				НоваяСтрока.КПППоставщика = "";
				Если СчетФактураПоДате.КоличествоСФ > 1 Тогда
					НоваяСтрока.СводныйСФ     = Истина;
				КонецЕсли;
			Иначе
				НоваяСтрока.СводныйСФ = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеСчетовФактур;

КонецФункции

Процедура СформироватьСчетаФактурыВыданные(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурВыданныхПоДокументу();
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ОтчетКомитентуОПродажах.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактурыВыданные = НайтиСоздатьПодчиненныеСчетаФактурыВыданные(ДокументСсылка, ДанныеСчетовФактур);
	
КонецПроцедуры

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("ДатаСФ, Ссылка", СтрокаДокумента.ДатаСФ, СтрокаДокумента.СчетФактура);
	
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ДатаСФ", СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			
			Если СтрокаДокумента.СводныйСФ Тогда
				// найден подходящий счет-фактура
				Возврат НайденнаяСтрока;
			ИначеЕсли НайденнаяСтрока.КлючСтроки <> Неопределено Тогда
				Если НайденнаяСтрока.КлючСтроки = СтрокаДокумента.КлючСтроки Тогда
					// найден подходящий счет-фактура
					Возврат НайденнаяСтрока;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.НомерСчетаФактуры)
				И НайденнаяСтрока.НомерСчетаФактуры <> СтрокаДокумента.НомерСчетаФактуры Тогда
				Продолжить;
			Иначе
				// найден подходящий счет-фактура
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактурыВыданные(ДокументСсылка, ДанныеСчетовФактур)
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактурВыданных(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(СтрокаТаблицы.ДатаСФ);
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			Если НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(ЭтотОбъект.Контрагент, "Выданный", Ложь) Тогда 
				Продолжить;
			КонецЕсли;
			
			ДокументСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			
			ДокументСФ.Дата                      = СтрокаТаблицы.ДатаСФ;
			ДокументСФ.Организация               = ЭтотОбъект.Организация;
			ДокументСФ.Ответственный             = Пользователи.ТекущийПользователь();
			ДокументСФ.Контрагент                = ЭтотОбъект.Контрагент;
			ДокументСФ.ДоговорКонтрагента        = ЭтотОбъект.ДоговорКонтрагента;
			ДокументСФ.Продавец                  = СтрокаТаблицы.Поставщик; 
			ДокументСФ.КПППродавца               = СтрокаТаблицы.КПППоставщика;
			ДокументСФ.СводныйКомиссионный       = СтрокаТаблицы.СводныйСФ;
			ДокументСФ.НомерСчетаФактурыПродавца = СтрокаТаблицы.НомерСчетаФактуры;
			ДокументСФ.ВидСчетаФактуры           = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			ДокументСФ.Комментарий               = НСтр("ru = 'Создан автоматически на основании документа отчет комитенту о закупках'");
			
			Если ДокументСФ.СводныйКомиссионный Тогда
				ДокументСФ.КодВидаОперации = "27";
			Иначе
				ДокументСФ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "04", "01");
			КонецЕсли;
			
			ДокументСФ.КодСпособаВыставления = 1;
			ДокументСФ.Выставлен = Истина;
			ДокументСФ.ДатаВыставления = Дата;
			
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументСФ);
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			ДокументСФ.ДокументОснование = ДокументСсылка;
			
			// Счет-фактура только что сформирован, заполним данные платежно-расчетных документов
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МассивОснований = Новый Массив;
				МассивОснований.Добавить(ДокументСсылка);

				ДокументСФ.ПлатежноРасчетныеДокументы.Очистить();
				ДокументСФ.ПлатежноРасчетныеДокументы.Загрузить(
					Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований));
			КонецЕсли;
			
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
				ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
					ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
			КонецЕсли;
			ДокументСФ.Записать();
			
			// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		ИначеЕсли СтрокаТаблицы.СводныйСФ <> СтрокаСФ.СводныйКомиссионный
			ИЛИ (НЕ СтрокаСФ.СводныйКомиссионный И СтрокаСФ.НомерСчетаФактуры <> СтрокаТаблицы.НомерСчетаФактуры) Тогда 
			
			//необходимо перезаполнить номер счета-фактуры продавца
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			ДокументСФ.НомерСчетаФактурыПродавца = СтрокаТаблицы.НомерСчетаФактуры;
			ДокументСФ.СводныйКомиссионный = СтрокаТаблицы.СводныйСФ;
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
				ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
					ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
			КонецЕсли;
			ДокументСФ.Записать();
			
			// Обновить значение строки таблицы с счетами-фактурами
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		КонецЕсли;
		
		СтрокаТЧ = ЭтотОбъект.Поставщики.Найти(СтрокаТаблицы.КлючСтроки, "КлючСтроки");
		Если СтрокаТЧ <> Неопределено Тогда 
			СтрокаТЧ.СчетФактура = СтрокаСФ.Ссылка;
			СтрокаСФ.Использован = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

#КонецЕсли