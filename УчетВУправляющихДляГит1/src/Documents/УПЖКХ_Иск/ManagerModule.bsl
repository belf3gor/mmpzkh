
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Производит замену строк в указанном табличном документе.
//
// Возвращаемое значение:
//  Булево – была ли произведена замена.
//
Функция НайтиИЗаменитьВДокументе(ТабДок, СтрокаПоиска, СтрокаЗамены)

	ОбластьЗамены = ТабДок.НайтиТекст(СтрокаПоиска);
	Если ОбластьЗамены = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ОбластьЗамены.Текст = СтрЗаменить(ОбластьЗамены.Текст, СтрокаПоиска, СтрокаЗамены);
	Возврат Истина;

КонецФункции // НайтиИЗаменитьВДокументе()

// Готовит общие параметры для заполнения печатной формы искового заявления 
// или заявления на судебный приказ
//
Функция ПодготовитьОбщиеПараметрыДляПечатнойФормы(ТекСсылка)
	
		// Подготовка данных.
		Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ТекСсылка.Организация, ТекСсылка.Дата);
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ТекСсылка.Дата, ТекСсылка.Организация);
		СтруктПарам = Новый Структура();
		СтруктАдрес = ПолучитьАдрес(ТекСсылка.ЛицевойСчет.Адрес.Владелец, Перечисления.КВП_ВидыАдресов.Здание);
		АдресДома = СтруктАдрес.Представление;
		Адрес = ПолучитьАдресПомещения(АдресДома, ТекСсылка.ЛицевойСчет.Адрес);
	
		// Информация о судебном органе.
		СтруктПарам.Вставить("СудебныйОрган",                 ТекСсылка.НаименованиеСудебногоОргана);
		СтруктПарам.Вставить("МестоположениеСудебногоОргана", ТекСсылка.МестоположениеСудебногоОргана);
	
		// Информация об истце.
		СтруктПарам.Вставить("Истец",                         ТекСсылка.Организация.Наименование);
		СтруктПарам.Вставить("ПолноеНаименованиеИстца",       ТекСсылка.Организация.НаименованиеПолное);
		СтруктПарам.Вставить("ИННИстца",                      ТекСсылка.Организация.ИНН);
		СтруктПарам.Вставить("КППИстца",                      ТекСсылка.Организация.КПП);
		СтруктПарам.Вставить("ОГРНИстца",                     ТекСсылка.Организация.ОГРН);
		СтруктПарам.Вставить("ДатаРегистрацииИстца",          Формат(ТекСсылка.Организация.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
	
		СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ТекСсылка.Организация, ТекСсылка.Дата);
		СтруктПарам.Вставить("АдресИстца",                    УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
		СтруктПарам.Вставить("ТелефонИстца",                  УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны"));
	
		// Информация об ответчике.
		СтруктПарам.Вставить("АдресОтветчика",       Адрес);
		СтруктПарам.Вставить("ЛицевойСчетОтветчика", ТекСсылка.ЛицевойСчет.Наименование);
	
		// Сведения о договоре с лицевым счетом.
		ДоговорСЛицевымСчетом = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСсылка.ЛицевойСчет, ТекСсылка.Организация, ТекСсылка.Дата, "Договор");
		СтруктПарам.Вставить("НомерДоговораОтветчика", ДоговорСЛицевымСчетом.Номер);
		СтруктПарам.Вставить("ДатаДоговораОтветчика",  Формат(ДоговорСЛицевымСчетом.Дата, "ДФ=dd.MM.yyyy"));
	
		ОтветственныйСобственникЛицевогоСчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ТекСсылка.ЛицевойСчет, ТекСсылка.Дата);
		Если ОтветственныйСобственникЛицевогоСчета <> Неопределено Тогда
	
			// Пол ответчика по умолчанию для склонения.
			ПолОтветчика = Неопределено;
	
			// Определим тип ответчика.
			ЭтоФизЛицо = ?(ТипЗнч(ОтветственныйСобственникЛицевогоСчета) = Тип("СправочникСсылка.УПЖКХ_Жильцы"), Истина, Ложь);
	
			// Если это физ. лицо, то ответчиком будет являтся физическое лицо,
			// у которого можно определить пол.
			Если ЭтоФизЛицо Тогда
	
				// В качестве ответчика берем физ. лицо.
				Ответчик = ОтветственныйСобственникЛицевогоСчета.ФизЛицо;
	
				// Представление ответчика.
				ПредставлениеОтветчика = Ответчик.ФИО;
	
				// Получим пол физ. лица.
				Если Ответчик.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
					ПолОтветчика = 1;
				ИначеЕсли Ответчик.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
					ПолОтветчика = 2;
				КонецЕсли;
				
			Иначе
				
				// В качестве ответчика берем самого собственника-контрагента.
				Ответчик = ОтветственныйСобственникЛицевогоСчета;
				
				// Представление ответчика.
				ПредставлениеОтветчика = Ответчик.НаименованиеПолное;
				
			КонецЕсли;
			
			СтруктПарам.Вставить("Ответчик",                    ПредставлениеОтветчика);
			СтруктПарам.Вставить("ОтветчикВТворительномПадеже", УПЖКХ_ТиповыеМетодыСервер.ПросклонятьФИО(ПредставлениеОтветчика, 5, Ответчик, ПолОтветчика));
			СтруктПарам.Вставить("ДатаРожденияОтветчика",       ?(ЭтоФизЛицо, Формат(Ответчик.ДатаРождения, "ДФ=dd.MM.yyyy"), ""));
			СтруктПарам.Вставить("МестоРожденияОтветчика",      ?(ЭтоФизЛицо, УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеМестаРождения(Ответчик.МестоРождения), ""));
			
			ТелефонОтветчика = "";
			
			Если ЭтоФизЛицо Тогда
				ТаблицаТелефоновСобственника = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ОтветственныйСобственникЛицевогоСчета);
				Если Не ТаблицаТелефоновСобственника.Количество() = 0 Тогда
					ТелефонОтветчика = ТаблицаТелефоновСобственника[0].СписокТелефонов;
				КонецЕсли;
			Иначе
				ТелефонОтветчика = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(Ответчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			КонецЕсли;
			
			СтруктПарам.Вставить("ТелефонОтветчика", ТелефонОтветчика);
			
		Иначе
			СтруктПарам.Вставить("Ответчик",               "");
			СтруктПарам.Вставить("ДатаРожденияОтветчика",  "");
			СтруктПарам.Вставить("МестоРожденияОтветчика", "");
			СтруктПарам.Вставить("ТелефонОтветчика",       "");
		КонецЕсли;
	
		СтруктПарам.Вставить("СуммаДолга",            ТекСсылка.СуммаЗадолженности + ТекСсылка.Пени);
		СтруктПарам.Вставить("СуммаДолгаБезПени",     ТекСсылка.СуммаЗадолженности);
		СтруктПарам.Вставить("СуммаПени",             ТекСсылка.Пени);
	
		СтруктПарам.Вставить("Госпошлина",     ТекСсылка.Госпошлина);
		ДатаПоследнегоПлатежа = ТекСсылка.ДатаПоследнегоПлатежа;
		СтруктПарам.Вставить("ДатаПоследнегоПлатежа", "");
		СтруктПарам.Вставить("ТекстДатыПоследнегоПлатежа",        
							 ?(ДатаПоследнегоПлатежа = Дата(1,1,1,0,0,0), "Платежей, произведенных Ответчиком, не было.", "Последний платеж произведен Ответчиком " + Формат(ДатаПоследнегоПлатежа, "ДФ='dd MMMM yyyy'") + " г."));
		СтруктПарам.Вставить("НачалоПериодаЗадолженности"   , Формат(ТекСсылка.ПериодВзысканияС, "ДФ='dd MMMM yyyy'") + " г.");
		СтруктПарам.Вставить("ОкончаниеПериодаЗадолженности", Формат(КонецМесяца(ТекСсылка.ПериодВзысканияПо), "ДФ='dd MMMM yyyy'") + " г.");
		ДатыОтправкиПредупреждений  = "";
	
		СрокиОтправкиПредупреждений = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Должник", ТекСсылка.ЛицевойСчет);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Предупреждение.Дата КАК Дата,
		|	УПЖКХ_Предупреждение.СрокПогашения
		|ИЗ
		|	Документ.УПЖКХ_Предупреждение КАК УПЖКХ_Предупреждение
		|ГДЕ
		|	УПЖКХ_Предупреждение.Должники.Должник = &Должник
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Предупреждение.СрокПогашения,
		|	УПЖКХ_Предупреждение.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл
			ДатыОтправкиПредупреждений = ДатыОтправкиПредупреждений + Формат(Выборка.Дата, "ДЛФ = Д") + ", ";
			СрокиОтправкиПредупреждений = СрокиОтправкиПредупреждений + Формат(Выборка.СрокПогашения, "ДЛФ = Д") + ", ";
		КонецЦикла;
	
		Если СтрДлина(ДатыОтправкиПредупреждений) > 0 Тогда
			ДатыОтправкиПредупреждений = Лев(ДатыОтправкиПредупреждений, СтрДлина(ДатыОтправкиПредупреждений) - 2);
		КонецЕсли;
		Если СтрДлина(СрокиОтправкиПредупреждений) > 0 Тогда
			СрокиОтправкиПредупреждений = Лев(СрокиОтправкиПредупреждений, СтрДлина(СрокиОтправкиПредупреждений) - 2);
		КонецЕсли;
	
		СтруктПарам.Вставить("ДатыОтправкиПредупреждений", ДатыОтправкиПредупреждений);
		СтруктПарам.Вставить("СрокиОтправкиПредупреждений", СрокиОтправкиПредупреждений);
	
	Возврат СтруктПарам;
	
КонецФункции

// Формирует табличный документ по макету заявления
//
Функция ПечатьЗаявления(Объект, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент();
	
	Макет = Неопределено;
	
	Если Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.Иск Тогда
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_Иск.ПФ_MXL_Иск");
	ИначеЕсли Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.СудебныйПриказ Тогда
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_Иск.ПФ_MXL_ЗаявлениеНаСудПриказ");
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Область = Макет.ПолучитьОбласть("Область1");
	
	СтруктПарам = ПодготовитьОбщиеПараметрыДляПечатнойФормы(Объект);
	
	Область.Параметры.Заполнить(СтруктПарам);
	Для Каждого ТекПараметр Из СтруктПарам Цикл
		Пока НайтиИЗаменитьВДокументе(Область, "[" + ТекПараметр.Ключ + "]", ТекПараметр.Значение) Цикл
		КонецЦикла;
	КонецЦикла;
	
	ТабДокумент.Вывести(Область);
	
	УПЖКХ_ТиповыеМетодыСервер.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Объект);
	
	Возврат ТабДокумент;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявление") Тогда
	
		ОбщийТабличныйДокумент = Новый ТабличныйДокумент;
	
		Для Каждого Объект Из МассивОбъектов Цикл
			
			Таб = ПечатьЗаявления(Объект, ОбъектыПечати);
			
			Если НЕ Объект = МассивОбъектов.Получить(0) Тогда
				ОбщийТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбщийТабличныйДокумент.Вывести(Таб);
			
		КонецЦикла;
	
		// Параметры табличного документа
		ОбщийТабличныйДокумент.ОбластьПечати       = ОбщийТабличныйДокумент.Область(1, 2, ОбщийТабличныйДокумент.ВысотаТаблицы, ОбщийТабличныйДокумент.ШиринаТаблицы);
		ОбщийТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ОбщийТабличныйДокумент.ПолеСверху          = 0;
		ОбщийТабличныйДокумент.ПолеСлева           = 0;
		ОбщийТабличныйДокумент.ПолеСнизу           = 0;
		ОбщийТабличныйДокумент.ПолеСправа          = 0;
	
		ОбщийТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПЖКХ_Иск";
		
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
																	   "Заявление", 
																	   "Заявление", 
																	   ОбщийТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.ЛицевойСчет,
	|	Реквизиты.ДатаПередачиПриставам,
	|	Реквизиты.ДатаСуда,
	|	Реквизиты.РешениеСуда,
	|	Реквизиты.Окончание,
	|	Реквизиты.СуммаЗадолженности,
	|	Реквизиты.Пени,
	|	Реквизиты.Госпошлина,
	|	Реквизиты.ПогашеноДоСуда,
	|	Реквизиты.СуммаИскаПоРешениюСуда,
	|	Реквизиты.ВзысканнаяПриставамиСумма
	|ИЗ
	|	Документ.УПЖКХ_Иск КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,Организация,ЛицевойСчет,
								|ДатаПередачиПриставам,ДатаСуда,РешениеСуда,Окончание,
								|СуммаЗадолженности,Пени,
								|Госпошлина,
								|ПогашеноДоСуда,
								|СуммаИскаПоРешениюСуда,
								|ВзысканнаяПриставамиСумма");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявление";
	КомандаПечати.Представление = НСтр("ru = 'Заявление'");
	КомандаПечати.Обработчик    = "УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечатиБП";
	//КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Формирует описание параметров
//
Процедура ДобавитьОбщиеЭлементыВОписаниеПараметров(ОписаниеОбластиПараметров)
	
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СудебныйОрган",                 "Наименование судебного органа.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "МестоположениеСудебногоОргана", "Адрес судебного органа.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Истец",                         "Наименование текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ПолноеНаименованиеИстца",       "Полное наименование текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ИННИстца",                      "ИНН текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "КППИстца",                      "КПП текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ОГРНИстца",                     "ОГРН текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ДатаРегистрацииИстца",          "Дата регистрации текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "АдресИстца",                    "Адрес текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ТелефонИстца",                  "Телефон текущей организации - истца.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Ответчик",                      "Наименование ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ОтветчикВТворительномПадеже",   "Наименование ответчика в творительном падеже.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "АдресОтветчика",                "Адрес ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ДатаРожденияОтветчика",         "Дата рождения ответчика, если ответчик является физ.лицом).");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "МестоРожденияОтветчика",        "Место рождения ответчика, если ответчик является физ.лицом).");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ТелефонОтветчика",              "Телефон ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ЛицевойСчетОтветчика",          "Наименование лицевого счета ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "НомерДоговораОтветчика",        "Номер договора взаиморасчетов с лицевым счетом ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ДатаДоговораОтветчика",         "Дата договора взаиморасчетов с лицевым счетом ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ТекстДатыПоследнегоПлатежа",    "Информация о дате последнего платежа, полученного от ответчика.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "НачалоПериодаЗадолженности",    "Дата начала периода взыскания задолженности.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "ОкончаниеПериодаЗадолженности", "Дата окончания периода взыскания задолженности.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СуммаДолга",                    "Сумма задолженности ответчика, включая пени.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СуммаДолгаБезПени",             "Сумма задолженности ответчика, не включая пени.");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "СуммаПени",                     "Сумма пени");
	УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбластиПараметров, "Госпошлина",                    "Сумма госпошлины (судебные издержки).");
	
КонецПроцедуры

// Возвращает параметры описания печатных форм текущего документа.
//
Функция ПолучитьОписаниеПараметровПечатныхФорм(ИмяФормыОписанияПараметров) Экспорт
	
	Коллекция = УПЖКХ_УправлениеПечатьюСервер.СоздатьКоллекциюОписанияМакетов();
	
	// 1. Добавляем описание нового макета в коллекцию описаний.
	ОписаниеОбластиПараметров = УПЖКХ_УправлениеПечатьюСервер.ДобавитьМакетВОписаниеПараметров(Коллекция, ИмяФормыОписанияПараметров);
	
	// 2. Добавляем описание необходимых областей и параметров макета.
	ДобавитьОбщиеЭлементыВОписаниеПараметров(ОписаниеОбластиПараметров);
	
	//// 3. Добавляем описание области
	//ОписаниеОбласти1 = УПЖКХ_УправлениеПечатьюСервер.ДобавитьОбластьВОписаниеПараметров(ОписаниеОбластиПараметров, "Область1");
	//УПЖКХ_УправлениеПечатьюСервер.ДобавитьЭлементВОписаниеПараметров(ОписаниеОбласти1, "Параметр1", "Описание 1");
	
	Возврат Коллекция;
	
КонецФункции

#КонецОбласти

#КонецЕсли