
#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
// Возвращает дату последнего платежа поступившего от текущего л/с по текущей организации.
//
Функция ПолучитьДатуПоследнегоПлатежа(ЛицевойСчет, Организация, ДатаДок)
	
	ДатаПоследнегоПлатежа = Дата(1,1,1);
	
	Если НЕ (ЛицевойСчет.Пустая() ИЛИ Организация.Пустая()) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаДок",     ДатаДок);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Период) КАК ДатаПоследнегоПлатежа
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			,
		|			&ДатаДок,
		|			Регистратор,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И Организация = &Организация
		|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаПоследнегоПлатежа = Выборка.ДатаПоследнегоПлатежа;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаПоследнегоПлатежа;
	
КонецФункции

&НаСервере
// Процедура выполняет расчет госпошлины.
//
Процедура ВыполнитьРассчетГоспошлины()
	 
	ОбъектДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_Иск"));
	Объект.Госпошлина = ОбъектДокумента.РассчитатьСуммуГоспошлины();
	
КонецПроцедуры

&НаСервере
// Функция возвращает вид операции в виде числа.
//
Функция ВидОперацииЧислом(ВидОперации)
	
	Если Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.Иск Тогда
		Возврат 1;
	ИначеЕсли Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.СудебныйПриказ Тогда
		Возврат 2;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция возвращает владельца лицевого счета.
//
Функция ПолучитьВладельцаЛС(ЛицевойСчет)
	
	Возврат УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, Объект.Дата);
	
КонецФункции

&НаСервере
// Процедура вычисляет сумму задолженности по л/с и сумму пени на дату документа.
Процедура ОбновитьЗадолженность()
	
	// Начало периода взыскания.
	ДатаНачалаПериодаВзыскания = НачалоМесяца(Объект.ПериодВзысканияС);
	
	// Окончание периода взыскания может быть неопределено, и тогда
	// в качестве окончания периода берем месяц даты документа.
	Если ЗначениеЗаполнено(Объект.ПериодВзысканияПо) Тогда
		ДатаОкончанияПериодаВзыскания = КонецМесяца(Объект.ПериодВзысканияПо);
	Иначе
		ДатаОкончанияПериодаВзыскания = КонецМесяца(Объект.Дата);
	КонецЕсли;
	
	// Проверка параметров получения задолженности.
	Если ДатаНачалаПериодаВзыскания > ДатаОкончанияПериодаВзыскания Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период взыскания задолженности указан неверно!");
		Возврат;
	КонецЕсли;
	
	// Значения параметров задолженности по умолчанию.
	СуммаЗадолженностиРезультат = 0;
	СуммаПениРезультат          = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",   Объект.ЛицевойСчет);
	Запрос.УстановитьПараметр("Период",        КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачалаПериодаВзыскания);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияПериодаВзыскания);
	
	МассивВидовНачислений = Новый Массив;
	МассивВидовНачислений.Добавить(Перечисления.КВП_ВидыНачисленияОстатки.Начисление);
	МассивВидовНачислений.Добавить(Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	Запрос.УстановитьПараметр("МассивВидовНачислений", МассивВидовНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ врОстатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И ВидНачисления В (&МассивВидовНачислений)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОстатки.ВидНачисления,
	|	СУММА(врОстатки.СуммаНачисленияОстаток) КАК СуммаОстаток
	|ИЗ
	|	врОстатки КАК врОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	врОстатки.ВидНачисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Начисление Тогда
			СуммаЗадолженностиРезультат = Выборка.СуммаОстаток;
		ИначеЕсли Выборка.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
			СуммаПениРезультат = Выборка.СуммаОстаток;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаЗадолженности = СуммаЗадолженностиРезультат;
	Объект.Пени               = СуммаПениРезультат;
	
КонецПроцедуры

&НаКлиенте
// Управляет видимостью и доступностью элементов формы.
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()
	
	ВидОперацииЧислом = ВидОперацииЧислом(Объект.ВидОперации);
	
	Если ВидОперацииЧислом = 1 Тогда
		Элементы.СтраницаПогашеноДоСуда.Видимость = Истина;
	ИначеЕсли ВидОперацииЧислом = 2 Тогда
		Элементы.СтраницаПогашеноДоСуда.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВладелецЛС.Заголовок = Строка(ПолучитьВладельцаЛС(Объект.ЛицевойСчет)) + " ";
	
КонецПроцедуры

&НаКлиенте
// Заполняет текст про СудебноеСоглашение в форме документа.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСудебноеСоглашение()
	
	Элементы.ГиперссылкаСудебноеСоглашение.Заголовок = ПолучитьТекстСудебногоСоглашения();
	Элементы.ГиперссылкаСудебноеСоглашение.ГиперСсылка = Истина;

КонецПроцедуры // ЗаполнитьТекстПроРеализациюТоваровУслуг()

&НаСервере
// Формирует текст про СудебноеСоглашение для показа в форме документа.
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка про СудебноеСоглашение.
//
Функция ПолучитьТекстСудебногоСоглашения()

	Если ЗначениеЗаполнено(Объект.СудебноеСоглашение) Тогда
		Возврат Строка(Объект.СудебноеСоглашение)+ ?(Объект.СудебноеСоглашение.ПометкаУдаления, "; помечен на удаление", "");
	Иначе
		Возврат "Ввести судебное соглашение";
	КонецЕсли;

КонецФункции // ПолучитьТекстРеализацииТоваровУслуг()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбъектДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_Иск"));
		
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ОбъектДокумента,
																 УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
		// Примечание:
		// При создании нового документа период взыскания не заполняется,
		// так как по умолчанию иск может оформляться без отбора по периоду взыскания.
		
	Иначе
		
		// Проверка доступности редактирования документа.
		СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
		
	КонецЕсли;
	
	// Представление периода взыскания.
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодВзысканияС",  "НачалоПериодаВзысканияСтрокой");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодВзысканияПо", "КонецПериодаВзысканияСтрокой");
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() И Объект.ВидОперации.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийИсковыхЗаявлений.Иск");
	КонецЕсли;
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ЗаполнитьТекстПроСудебноеСоглашение();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.РешениеСуда) И НЕ ЗначениеЗаполнено(Объект.ДатаСуда) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Решение суда не может быть записано без указания даты суда!",
															,
															"ДатаСуда",
															"Объект",
															Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СуммаИскаПоРешениюСуда) И НЕ ЗначениеЗаполнено(Объект.РешениеСуда) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указано решение суда!",
															,
															"РешениеСуда",
															"Объект",
															Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Окончание) И НЕ ЗначениеЗаполнено(Объект.ДатаПередачиПриставам) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Решение по исполнительному производству не может быть записано без указания даты передачи приставам!",
															,
															"ДатаПередачиПриставам",
															"Объект",
															Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВзысканнаяПриставамиСумма) И НЕ ЗначениеЗаполнено(Объект.Окончание) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указано решение по исполнительному производству!",
															,
															"Окончание",
															"Объект",
															Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды "РассчитатьГоспошлину".
//
Процедура РассчитатьГоспошлину(Команда)
	
	ВыполнитьРассчетГоспошлины();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "КомандаОбновитьЗадолженность".
//
Процедура КомандаОбновитьЗадолженность(Команда)
	
	ОбновитьЗадолженность();
	Объект.ДатаПоследнегоПлатежа = ПолучитьДатуПоследнегоПлатежа(Объект.ЛицевойСчет, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
//
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииПараметраРасчетаЗадолженности();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииПараметраРасчетаЗадолженности();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Лицевой счет".
//
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Лицевой счет".
//
Процедура ЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Объект.ЛицевойСчет Тогда
		
		// Принудительно установим новый лицевой счет в реквизит,
		// чтобы пересчитать задолженность по выбранному лицевому счету.
		Объект.ЛицевойСчет = ВыбранноеЗначение;
		
		ПриИзмененииПараметраРасчетаЗадолженности();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ НАЧАЛА ПЕРИОДА ВЗЫСКАНИЯ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериодаВзысканияСтрокой".
Процедура НачалоПериодаВзысканияСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодВзысканияС", "НачалоПериодаВзысканияСтрокой");
	
	ПриИзмененииПараметраРасчетаЗадолженности();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "НачалоПериодаВзысканияСтрокой".
Процедура НачалоПериодаВзысканияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПериодаВзыскания", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодВзысканияС", "НачалоПериодаВзысканияСтрокой", Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "НачалоПериодаВзысканияСтрокой".
Процедура НачалоПериодаВзысканияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "НачалоПериодаВзысканияСтрокой".
Процедура НачалоПериодаВзысканияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения изменения периода взыскания.
//
Процедура ЗавершениеИзмененияПериодаВзыскания(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Ложь Тогда
		ПриИзмененииПараметраРасчетаЗадолженности();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОКОНЧАНИЯ ПЕРИОДА ВЗЫСКАНИЯ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонецПериодаВзысканияСтрокой".
Процедура КонецПериодаВзысканияСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодВзысканияПо", "КонецПериодаВзысканияСтрокой");
	
	ПриИзмененииПараметраРасчетаЗадолженности();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонецПериодаВзысканияСтрокой".
Процедура КонецПериодаВзысканияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПериодаВзыскания", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодВзысканияПо", "КонецПериодаВзысканияСтрокой", Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "КонецПериодаВзысканияСтрокой".
Процедура КонецПериодаВзысканияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "КонецПериодаВзысканияСтрокой".
Процедура КонецПериодаВзысканияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ОБРАБОТЧИКИ

&НаКлиенте
// Процедура обрабатывает изменение параметра расчета задолженности.
//
Процедура ПриИзмененииПараметраРасчетаЗадолженности()
	
	// При изменении параметра расчета задолженности необходимо
	// обновить суммы долга. Если текущие суммы не заполнены,
	// то обновляем их, если заполнены - запрашиваем подтверждение пользователя.
	
	Если Объект.СуммаЗадолженности = 0 И Объект.Пени = 0 И Объект.ДатаПоследнегоПлатежа = Дата(1, 1, 1) Тогда
		ОбновитьЗадолженность();
		Объект.ДатаПоследнегоПлатежа = ПолучитьДатуПоследнегоПлатежа(Объект.ЛицевойСчет, Объект.Организация, Объект.Дата);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбОбновленииЗадолженности", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Обновить суммы задолженности и дату последнего платежа по лицевому счету?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения вопроса об обновлении задолженности.
//
Процедура ОбработатьРезультатВопросаОбОбновленииЗадолженности(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьЗадолженность();
		Объект.ДатаПоследнегоПлатежа = ПолучитьДатуПоследнегоПлатежа(Объект.ЛицевойСчет, Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" гиперссылки "ГиперссылкаСудебноеСоглашение".
//
Процедура ГиперссылкаСудебноеСоглашениеНажатие(Элемент)
	
	Если (Объект.ПометкаУдаления) И Не ЗначениеЗаполнено(Объект.СудебноеСоглашение) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
							"Судебное соглашение нельзя вводить на основании документа, помеченного на удаление!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СудебноеСоглашение) Тогда
		// Вводим новый документ на основании нашего.
		Если Модифицированность Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ был изменен. Сначала следует записать документ.");
			Возврат;
		Иначе
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ДатаНачалаПлатежей",  Объект.Дата);
			ПараметрыЗаполнения.Вставить("Организация",         Объект.Организация);
			ПараметрыЗаполнения.Вставить("ЛицевойСчет",         Объект.ЛицевойСчет);
			ПараметрыЗаполнения.Вставить("СуммаПоСоглашению",   Объект.СуммаИскаПоРешениюСуда);
			ПараметрыЗаполнения.Вставить("МесяцевПоСоглашению", 1);
			ПараметрыЗаполнения.Вставить("Комментарий",         "Введен на основании документа " + Строка(Объект.Ссылка));
			
			ФормаСС = ПолучитьФорму("Документ.УПЖКХ_СудебноеСоглашение.Форма.ФормаДокумента", 
									Новый Структура("ДокументВводитсяНаОснованииПараметров, ПараметрыЗаполнения", Истина, ПараметрыЗаполнения),
									ЭтаФорма);
			ФормаСС.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьСозданныйДокументСудебноеСоглашение", ЭтаФорма, ФормаСС.Объект);
			ФормаСС.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаСС.Открыть();
		КонецЕсли;
	Иначе
		// Откроем форму для редактирования СудебноеСоглашение.
		ПолучитьФорму("Документ.УПЖКХ_СудебноеСоглашение.Форма.ФормаДокумента", 
					  Новый Структура("Ключ", Объект.СудебноеСоглашение), 
					  ЭтаФорма, 
					  Строка(Объект)).Открыть();
	КонецЕсли;	
		
КонецПроцедуры // ГиперссылкаСудебноеСоглашениеНажатие()

&НаКлиенте
// Обработка закрытия формы документа "Судебное соглашение", открятое в процедуре "ГиперссылкаСудебноеСоглашениеНажатие()".
Процедура ОбработатьСозданныйДокументСудебноеСоглашение(ПараметрыФормы, ДокументСудебноеСоглашение) Экспорт
	
	Если НЕ ДокументСудебноеСоглашение.Ссылка = Неопределено
	   И НЕ ДокументСудебноеСоглашение.Ссылка.Пустая() Тогда
		Объект.СудебноеСоглашение = ДокументСудебноеСоглашение.Ссылка;
		Записать();
		
		ЗаполнитьТекстПроСудебноеСоглашение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСозданныйДокументСудебноеСоглашение()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Вид операции".
//
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на гиперссылку в подсказке к сумме госпошлины.
Процедура ГоспошлинаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.УПЖКХ_СведенияОРазмерахГоспошлины.ФормаСписка", Новый Структура("ДатаСведенийОРазмерахГоспошлины", Объект.Дата));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Решение суда".
Процедура РешениеСудаПриИзменении(Элемент)
	
	Если НЕ Объект.СуммаИскаПоРешениюСуда = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РешениеСуда = "ВзыскатьПолностью" Тогда
		Объект.СуммаИскаПоРешениюСуда = Макс(Объект.СуммаЗадолженности + Объект.Пени + Объект.Госпошлина, 0);
	ИначеЕсли Объект.РешениеСуда = "ВзыскатьЧастично" Тогда
		Объект.СуммаИскаПоРешениюСуда = Макс(Объект.СуммаЗадолженности, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма иска по решению суда".
Процедура СуммаИскаПоРешениюСудаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РешениеСуда) ИЛИ Объект.СуммаИскаПоРешениюСуда <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСумма = Объект.СуммаЗадолженности + Объект.Пени + Объект.Госпошлина;
	
	Если Объект.СуммаИскаПоРешениюСуда >= ОбщаяСумма Тогда
		Объект.РешениеСуда = "ВзыскатьПолностью";
	ИначеЕсли Объект.СуммаИскаПоРешениюСуда < ОбщаяСумма Тогда
		Объект.РешениеСуда = "ВзыскатьЧастично";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Взысканная приставами сумма".
Процедура ВзысканнаяПриставамиСуммаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Окончание) ИЛИ Объект.ВзысканнаяПриставамиСумма <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РешениеСуда) Тогда
		ОбщаяСумма = Объект.СуммаИскаПоРешениюСуда;
	Иначе
		ОбщаяСумма = Объект.СуммаЗадолженности + Объект.Пени + Объект.Госпошлина;
	КонецЕсли;
	
	Если Объект.ВзысканнаяПриставамиСумма >= ОбщаяСумма Тогда
		Объект.Окончание = "ВзысканоПолностью";
	ИначеЕсли Объект.ВзысканнаяПриставамиСумма < ОбщаяСумма Тогда
		Объект.Окончание = "ВзысканоЧастично";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Окончание".
Процедура ОкончаниеПриИзменении(Элемент)
	
	Если НЕ Объект.ВзысканнаяПриставамиСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Окончание = "ВзысканоПолностью" Тогда
		Объект.ВзысканнаяПриставамиСумма = Макс(Объект.СуммаЗадолженности + Объект.Пени + Объект.Госпошлина, 0);
	ИначеЕсли Объект.Окончание = "ВзысканоЧастично" Тогда
		Объект.ВзысканнаяПриставамиСумма = Макс(Объект.СуммаЗадолженности, 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
