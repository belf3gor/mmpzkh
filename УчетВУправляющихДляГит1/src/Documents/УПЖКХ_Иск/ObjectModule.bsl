
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЭкспортныеПроцедурыИФункции

// Процедура вычисляет сумму госпошлины.
Функция РассчитатьСуммуГоспошлины() Экспорт
		
	ОбщаяСуммаДолга = СуммаЗадолженности + Пени;
	Госпошлина = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.СуммаДолгаС,
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.СуммаДолгаПо,
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.ПроцентПошлины,
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.ФиксированнаяЧастьПошлины,
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.МинимальныйРазмерПошлины,
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.МаксимальныйРазмерПошлины
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРазмерахГоспошлины.СрезПоследних(
	|						 &Дата, ) КАК УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.СуммаДолгаС <= &СуммаДолга
	|	И ВЫБОР
	|			КОГДА (НЕ УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.СуммаДолгаПо = 0)
	|				ТОГДА УПЖКХ_СведенияОРазмерахГоспошлиныСрезПоследних.СуммаДолгаПо >= &СуммаДолга
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СуммаДолга", ОбщаяСуммаДолга);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		// Границей, с которой берется процент от задолженности, является
		// конец предыдущего интервала долга, установленного в размерах госпошлины.
		// Например, если интервал задолженности от 20 001 до 100 000, то
		// процент госпошлины берется на разницу [Сумма задолженности] - 20 000, а не 20 001.
		// Для этого из начала полученного интервала госпошлины вычитаем 1,
		// чтобы получить конец предыдущего интервала.
		ГраницаПревышения = Макс(0, Результат.СуммаДолгаС - 1);
		
		Госпошлина = Результат.ФиксированнаяЧастьПошлины 
				   + (ОбщаяСуммаДолга - ГраницаПревышения)
				   * Результат.ПроцентПошлины 
				   / 100;
		
		Госпошлина = ?(Результат.МинимальныйРазмерПошлины > 0, 
					   Макс(Госпошлина, Результат.МинимальныйРазмерПошлины),
					   Госпошлина);
		
		Госпошлина = ?(Результат.МаксимальныйРазмерПошлины > 0,
					   Мин(Госпошлина, Результат.МаксимальныйРазмерПошлины),
					   Госпошлина);
	
	КонецЕсли;
	
	// В соответствии с подпунктом 2 пункта 1 статьи 333.19 НК при подаче заявления о вынесении
	// судебного приказа госпошлина берется в размере 50 процентов государственной пошлины.
	// http://www.consultant.ru/document/cons_doc_LAW_28165/1cfcdcc5936cbfc3ea52f964201a1bb6002be313/
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.СудебныйПриказ Тогда
		Госпошлина = Госпошлина * 0.5;
	КонецЕсли;
	
	Возврат Госпошлина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроведенияДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	ДвижениеПоРегиструВзаиморасчетыСДолжниками(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвижениеПоРегиструИсторияРаботыСДолжниками(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Формирует движения по регистру "Взаиморасчеты с должниками".
Процедура ДвижениеПоРегиструВзаиморасчетыСДолжниками(СтруктураШапкиДокумента, Отказ, Заголовок)

	НаборДвижений = Движения.УПЖКХ_ВзаиморасчетыСДолжниками;
	
	Движение = НаборДвижений.Добавить();
	Движение.ВидДвижения            = ВидДвиженияНакопления.Приход;
	Движение.Период                 = СтруктураШапкиДокумента.Дата;
	Движение.Организация            = СтруктураШапкиДокумента.Организация;
	Движение.ЛицевойСчет            = СтруктураШапкиДокумента.ЛицевойСчет;
	Движение.Договор                = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
																	СтруктураШапкиДокумента.ЛицевойСчет, СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Дата, "Договор");
	Движение.ДатаПередачиПриставам  = СтруктураШапкиДокумента.ДатаПередачиПриставам;
	Движение.ДатаСуда               = СтруктураШапкиДокумента.ДатаСуда;
	Движение.РешениеСуда            = СтруктураШапкиДокумента.РешениеСуда;
	Движение.Окончание              = СтруктураШапкиДокумента.Окончание;
	Движение.СуммаЗадолженности     = СтруктураШапкиДокумента.СуммаЗадолженности;
	Движение.СуммаПени              = СтруктураШапкиДокумента.Пени;
	Движение.Госпошлина             = СтруктураШапкиДокумента.Госпошлина;
	Движение.ПогашеноДоСуда         = СтруктураШапкиДокумента.ПогашеноДоСуда;
	Движение.СуммаИскаПоРешениюСуда = СтруктураШапкиДокумента.СуммаИскаПоРешениюСуда;
	Движение.ВзысканнаяСумма        = СтруктураШапкиДокумента.ВзысканнаяПриставамиСумма;

КонецПроцедуры // ДвижениеПоРегиструВзаиморасчетыСДолжниками()

// Формирует движения по регистру "История работы с должниками".
Процедура ДвижениеПоРегиструИсторияРаботыСДолжниками(СтруктураШапкиДокумента, Отказ, Заголовок)

	НаборДвижений = Движения.УПЖКХ_ИсторияРаботыСДолжниками;
	
	Движение = НаборДвижений.Добавить();
	Движение.Период          = СтруктураШапкиДокумента.Дата;
	Движение.Организация     = СтруктураШапкиДокумента.Организация;
	Движение.Должник         = СтруктураШапкиДокумента.ЛицевойСчет;

КонецПроцедуры // ДвижениеПоРегиструИсторияРаботыСДолжниками()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_Иск.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ПараметрыПроведения.Реквизиты;
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли