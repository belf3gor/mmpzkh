
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак новый ли это документ.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак учета начислений по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "ЛицевыеСчета", "Сумма");
	
КонецПроцедуры

// Реализует движение документа по регистрам.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого ТекСтрокаЛицевыеСчета Из ЛицевыеСчета Цикл
		
		Движение = ТаблицаДвижений.Добавить();
		Движение.Период                      = Дата;
		Движение.Организация                 = Организация;
		Движение.ЛицевойСчет                 = ТекСтрокаЛицевыеСчета.Объект;
		
		// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
		// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
		// по-прежнему заполняется в проводках.
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрокаЛицевыеСчета.Объект,
																											Организация, Дата, "Договор");
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаЛицевыеСчета.Услуга;
		Движение.МесяцНачисления             = КонецМесяца(ТекСтрокаЛицевыеСчета.МесяцНачисления);
		Движение.РазделУчета                 = ТекСтрокаЛицевыеСчета.РазделУчета;
		Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо;
		Движение.СуммаНачисления             = ТекСтрокаЛицевыеСчета.Сумма;
		
	КонецЦикла;
	
	УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
	                                                                        Новый Структура("Приход", ТаблицаДвижений));
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	ПроверяемыеРеквизиты.Добавить("ЛицевыеСчета.Объект");
	ПроверяемыеРеквизиты.Добавить("ЛицевыеСчета.Услуга");
	ПроверяемыеРеквизиты.Добавить("ЛицевыеСчета.РазделУчета");
	ПроверяемыеРеквизиты.Добавить("ЛицевыеСчета.МесяцНачисления");
	
	Для Каждого ТекСтрокаЛицевыеСчета Из ЛицевыеСчета Цикл
		
		Если ЗначениеЗаполнено(ТекСтрокаЛицевыеСчета.РазделУчета)
			И (НЕ ТекСтрокаЛицевыеСчета.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг
			И НЕ ТекСтрокаЛицевыеСчета.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени
			И НЕ ТекСтрокаЛицевыеСчета.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Льготы) Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке №" + ТекСтрокаЛицевыеСчета.НомерСтроки
			+ " указан некорректный раздел учета!", Отказ);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выберите раздел учета вручную либо воспользуйтесь автозаполнением "
			+ """Установить - Раздел учета - <Раздел учета>""");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проводим дополнительную проверку на наличие услуги добровольного страхования в рамках защиты от незапланированных действий пользователя.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ЕстьУслугаДобровольногоСтрахования = Ложь;
		
		Для Каждого ТекСтрокаЛицевыеСчета Из ЛицевыеСчета Цикл
			Если ТекСтрокаЛицевыеСчета.Услуга = УслугаДобровольногоСтрахования Тогда
				ЕстьУслугаДобровольногоСтрахования = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьУслугаДобровольногоСтрахования Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("" + УслугаДобровольногоСтрахования + " является услугой добровольного страхования. По ней нельзя вводить начальное сальдо.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ИнициализацияПеременныхМодуля

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли