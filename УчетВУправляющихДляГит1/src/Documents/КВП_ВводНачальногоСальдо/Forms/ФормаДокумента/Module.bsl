
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедуры определяет период выбора.
Функция ВыборПериода()
	
	СтрокаТЧ = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Период = ?(ЗначениеЗаполнено(СтрокаТЧ.МесяцНачисленияСтрока), 
									КонецМесяца(СтрокаТЧ.МесяцНачисления), КонецМесяца(Объект.ПериодСальдо));
	
	Возврат Период;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, 
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.ПериодСальдо = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Заполним список видов операций.
	ВидыОпераций = Новый СписокЗначений;
	ВидыОпераций.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг, "НачислениеУслуг");
	ВидыОпераций.Добавить(Перечисления.УПЖКХ_РазделыУчета.Льготы,          "Льготы");
	ВидыОпераций.Добавить(Перечисления.УПЖКХ_РазделыУчета.Пени,            "Пени");
	
	Для Каждого ТекВид Из ВидыОпераций Цикл
		Элементы.ЛицевыеСчетаРазделУчета.СписокВыбора.Добавить(ТекВид.Значение);
	КонецЦикла;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" колонки "Услуга" табличной части.
Процедура ЛицевыеСчетаУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "Услуга" табличной части.
Процедура ЛицевыеСчетаУслугаПриИзменении(Элемент)
	
	ВыбраннаяУслуга = Элементы.ЛицевыеСчета.ТекущиеДанные.Услуга;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ВыбраннаяУслуга = УслугаДобровольногоСтрахования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя вводить начальное сальдо.");
		
		Элементы.ЛицевыеСчета.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиПоляПериода

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаМесяцНачисленияСтрока".
Процедура ЛицевыеСчетаМесяцНачисленияСтрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.МесяцНачисления) Тогда
		ТекущиеДанные.МесяцНачисления = КонецМесяца(ТекущиеДанные.МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаМесяцНачисленияСтрока".
Процедура ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодСальдо) Тогда
		Объект.ПериодСальдо = НачалоМесяца(ТекущиеДанные.МесяцНачисления);
	КонецЕсли;
	
	Значение           = ТекущиеДанные.МесяцНачисления;
	ДопПараметры       = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	ПараметрыФормы     = Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь);
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбора()

&НаКлиенте
// Процедура-обработчик выбора значений, вызванного в процедуре-обработчике "ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбора()".
Процедура ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущиеДанные.МесяцНачисления = ВыбранноеЗначение;
		ТекущиеДанные.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЛицевыеСчетаМесяцНачисленияСтрокаНачалоВыбораЗавершение()

&НаКлиенте
// Обработчик события "Регулирование" поля "ЛицевыеСчетаМесяцНачисленияСтрока".
Процедура ЛицевыеСчетаМесяцНачисленияСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ДобавитьМесяц(ВыборПериода(), Направление);
	
	ТекущиеДанные.МесяцНачисления = Значение;
	ТекущиеДанные.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.МесяцНачисления) Тогда
		ТекСтрока.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(Объект.ПериодСальдо);
		ТекСтрока.МесяцНачисления       = КонецМесяца(Объект.ПериодСальдо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.РазделУчета) Тогда
		ТекСтрока.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнить", ЭтотОбъект),
					   "Очистить табличную часть?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьСОтбором".
Процедура КомандаЗаполнитьСОтбором(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнитьСОтбором", ЭтотОбъект),
					   "Очистить табличную часть?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаЗаполнить()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ЛицевыеСчета.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаЗаполнитьСОтбором()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнитьСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ЛицевыеСчета.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьСОтборомПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнить()".
Процедура КомандаЗаполнитьПродолжение()
	
	МассивОтобранныхЛС = ПолучитьЛицевыеСчетаПоВыбранномуОбъекту();
	
	Для Каждого ЭлементМассива ИЗ МассивОтобранныхЛС Цикл
		СтрокаТЧ = Объект.ЛицевыеСчета.Добавить();
		СтрокаТЧ.Объект                = ЭлементМассива;
		СтрокаТЧ.РазделУчета           = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг");
		СтрокаТЧ.МесяцНачисления       = КонецМесяца(Объект.ПериодСальдо);
		СтрокаТЧ.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(КонецМесяца(Объект.ПериодСальдо));
	КонецЦикла;
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьСОтбором()".
Процедура КомандаЗаполнитьСОтборомПродолжение()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

&НаКлиенте
// Возвращает структуру параметров для заполнения начислений с отбором.
//
Функция ПолучитьСтруктуруПараметровДляЗаполненияСОтбором()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	СтруктураПараметров.Вставить("НачПериодЛС",    НачалоМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("КонПериодЛС",    Объект.Дата);
	СтруктураПараметров.Вставить("Организация",    Объект.Организация);
	СтруктураПараметров.Вставить("ТипОбъекта",     "ЛицевыеСчета");
	СтруктураПараметров.Вставить("ТипЗначОбъекта", "ЛицевыеСчета");
	СтруктураПараметров.Вставить("ОбъектЛС",       Объект.Объект);
	СтруктураПараметров.Вставить("ЗданияКвартиры", Объект.Объект);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПродолжение()".
Процедура ОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СписокДляВозврата) = Тип("СписокЗначений") И СписокДляВозврата.Количество() > 0 Тогда
		
		Для Каждого Строка ИЗ СписокДляВозврата Цикл
			СтрокаТЧ = Объект.ЛицевыеСчета.Добавить();
			СтрокаТЧ.Объект                = Строка.Значение;
			СтрокаТЧ.РазделУчета           = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг");
			СтрокаТЧ.МесяцНачисления       = КонецМесяца(Объект.ПериодСальдо);
			СтрокаТЧ.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(КонецМесяца(Объект.ПериодСальдо));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция формирует массив лицевых счетов по выбранному объекту.
Функция ПолучитьЛицевыеСчетаПоВыбранномуОбъекту()
	
	ЗначениеОбъекта = Объект.Объект;
	
	ИспользоватьОтборПоОбъекту = НЕ (ЗначениеОбъекта = Неопределено ИЛИ Объект.Объект.Пустая());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			НЕ &ИспользоватьОтборПоОбъекту
	|				ИЛИ &ИспользоватьОтборПоОбъекту
	|					И (ЛицевойСчет = &Объект
	|						ИЛИ ЛицевойСчет.Адрес = &Объект
	|						ИЛИ ЛицевойСчет.Адрес.Владелец = &Объект
	|						ИЛИ ЛицевойСчет.Адрес.Подъезд = &Объект)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",   Объект.Дата);
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоОбъекту", ИспользоватьОтборПоОбъекту);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
	
КонецФункции

&НаКлиенте
// Обработчик команды "УстановитьУслугу".
Процедура УстановитьУслугу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВводаУстановитьУслугу", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"), "Укажите услугу для установки");
	
КонецПроцедуры // УстановитьУслугу()

&НаКлиенте
// Процедура-обработчик результата воода. вызванного в процедуре-обработчике команды "УстановитьУслугу()".
Процедура ОбработатьРезультатВводаУстановитьУслугу(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
			СтрокаТабличнойЧасти.Услуга = Значение;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВводаУстановитьУслугу()

&НаКлиенте
// Обработчик команды "УстановитьМесяцНачисления".
Процедура УстановитьМесяцНачисления(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВводДаты", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет поля: "МесяцНачисленияСтрока", "МесяцНачисления"
// таблицы "ЛицевыеСчета".
Процедура ОбработатьВводДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Дата") Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
			СтрокаТабличнойЧасти.МесяцНачисленияСтрока = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(Результат);
			СтрокаТабличнойЧасти.МесяцНачисления       = КонецМесяца(Результат);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВводДаты()

&НаКлиенте
// Обработчик команды "УстановитьНачислениеУслуг".
Процедура УстановитьНачислениеУслуг(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
		СтрокаТабличнойЧасти.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьНачислениеУслуг".
Процедура УстановитьЛьготы(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
		СтрокаТабличнойЧасти.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Льготы");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьПени".
Процедура УстановитьПени(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
		СтрокаТабличнойЧасти.РазделУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_РазделыУчета.Пени");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаВвестиОстаткиБУ".
Процедура КомандаВвестиОстаткиБУ(Команда)
	
	Если Не Объект.Ссылка.Пустая() И Объект.Проведен И Не Модифицированность Тогда
		
		ОткрытьФормуВводаНачальныхОстатков();
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаВвестиОстаткиБУ", ЭтотОбъект),
						"Перед выполнением операции документ необходимо провести. Провести документ?",
						РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ОтражениеНачОстатковВБухУчете

&НаКлиенте
// Процедура открывает форму обработки "УПЖКХ_ВводНачальныхОстатковЖКХ".
Процедура ОткрытьФормуВводаНачальныхОстатков()
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВходящиеДокументы", МассивДокументов);
	
	ФормаВвестиОстатки = ПолучитьФорму("Обработка.УПЖКХ_ВводНачальныхОстатковЖКХ.Форма.Форма", ПараметрыФормы);
	ФормаВвестиОстатки.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаВвестиОстаткиБУ".
Процедура ОбработатьРезультатВопросаКомандаВвестиОстаткиБУ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ПровестиДокумент() Тогда
			
			ОткрытьФормуВводаНачальныхОстатков();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция пытается провести переданный документ.
Функция ПровестиДокумент()
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	ПроведеноУспешно = КВП_ЗаписатьОбъект(Документ, РежимЗаписиДокумента.Проведение);
	
	Если ПроведеноУспешно Тогда
		
		ЭтотОбъект.Модифицированность = Ложь;
		
	КонецЕсли;
	
	Возврат ПроведеноУспешно;
	
КонецФункции

#КонецОбласти