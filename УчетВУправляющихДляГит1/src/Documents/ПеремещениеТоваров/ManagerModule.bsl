#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 11, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "",     "СчетСписанияНДС",     "ЗатратыНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СписатьНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС3", "СубконтоЗатрат3");
	
	// Табличная часть Товары
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила,      "Склад",        "СкладОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НовыйСчетУчета", "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила,      "Склад",        "СкладПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила,      "Склад",        "СкладПолучатель");
	
	// Табличная часть ВозвратнаяТара
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета",      "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Склад", "СкладОтправитель");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "НовыйСчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Склад", "СкладПолучатель");
	
	// Табличная часть ТоварыНаКомиссии
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ТоварыНаКомиссии", "СчетУчета",      "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Склад", "СкладОтправитель");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ТоварыНаКомиссии", "НовыйСчетУчета", "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Склад", "СкладПолучатель");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СкладОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СкладПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "СписатьНДС", "НДСвСтоимостиТоваров");
	
	Возврат Правила;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт

	Если ДанныеЗаполнения.Свойство("СписатьНДС") Тогда
		ДанныеЗаполнения.СписатьНДС = (ДанныеЗаполнения.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	КонецЕсли;

КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//  НовыеСведенияОНоменклатуре 
//                        - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено, НовыеСведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Объект) Экспорт
	
	ИменаРеквизитов = Новый Соответствие;
	ИменаРеквизитов.Вставить("СчетСписанияНДС",      Истина);
	ИменаРеквизитов.Вставить("СубконтоСписанияНДС1", Истина);
	ИменаРеквизитов.Вставить("СубконтоСписанияНДС2", Истина);
	ИменаРеквизитов.Вставить("СубконтоСписанияНДС3", Истина);
	
	СчетаУчетаВДокументах.ЗаполнитьРеквизиты(Объект, ИменаРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьСтрокиТабличнойЧастиТовары(Объект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделятьПоСтавкамНДС) Экспорт

	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта, Ложь);
	
	ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
	СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта, Ложь);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		СведенияОНоменклатуре		= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		НовыеСведенияОНоменклатуре	= СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
		КонецЕсли;
		
		Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			Если РазделятьПоСтавкамНДС И СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			Если ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице	= СведенияОНоменклатуре.ЦенаВРознице;
				СтрокаТабличнойЧасти.СуммаВРознице	= СведенияОНоменклатуре.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			Если РазделятьПоСтавкамНДС И НовыеСведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице	= НовыеСведенияОНоменклатуре.ЦенаВРознице;
				СтрокаТабличнойЧасти.СуммаВРознице	= НовыеСведенияОНоменклатуре.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(СчетУчета, Знач ТипСклада) Экспорт
	Перем СчетУчетаРозницаВПродажныхЦенах;
	
	Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		СчетУчетаРозницаВПродажныхЦенах = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	ИначеЕсли ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СчетУчетаРозницаВПродажныхЦенах = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	Иначе
		СчетУчетаРозницаВПродажныхЦенах = СчетУчета;
	КонецЕсли;
	
	Если СчетУчета <> СчетУчетаРозницаВПродажныхЦенах Тогда
		СчетУчета = СчетУчетаРозницаВПродажныхЦенах;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Реквизиты.ВалютаРеглУчета);
	
	Реквизиты.Вставить("ПлательщикНДС",  УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПлательщикНДФЛ", УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	
	УчетПоПродажнойСтоимости = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период) 
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
	Реквизиты.Вставить("ОтправительНТТВЦенахПродажи", УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	Реквизиты.Вставить("ОтправительАТТВЦенахПродажи", УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин);
	Реквизиты.Вставить("ПолучательНТТВЦенахПродажи", УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	Реквизиты.Вставить("ПолучательАТТВЦенахПродажи", УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин);
	Запрос.УстановитьПараметр("ОтправительАТТВЦенахПродажи", Реквизиты.ОтправительАТТВЦенахПродажи);
	
	Запрос.УстановитьПараметр("СинонимТовары",           НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТоварыНаКомиссии", НСтр("ru = 'Товары на комиссии'"));
	Запрос.УстановитьПараметр("СинонимТара",             НСтр("ru = 'Возвратная тара'"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
		+ ТекстЗапросаПеремещениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеремещениеТоваровНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеремещениеКомиссионныхТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеремещениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНачислениеТорговойНаценки(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТорговойНаценкиАТТ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТоваровНТТ(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Результат = Запрос.ВыполнитьПакет();
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ИПРеквизиты", ПараметрыПроведения.ПеремещениеРеквизиты);
	Иначе
		ПараметрыПроведения.Вставить("ИПРеквизиты", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьТоварыНаКомиссии) КАК ЕстьТоварыНаКомиссии,
	|	МАКСИМУМ(СоставДокумента.ЕстьТара) КАК ЕстьТара
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТоварыНаКомиссии,
	|		ЛОЖЬ КАК ЕстьТара
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	""ПеремещениеТоваров"" КАК ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.СкладОтправитель,
	|	Реквизиты.СкладОтправитель.ТипСклада КАК ТипСкладаОтправителя,
	|	Реквизиты.СкладОтправитель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиОтправителя,
	|	Реквизиты.ПодразделениеОтправитель,
	|	Реквизиты.СкладПолучатель,
	|	Реквизиты.СкладПолучатель.ТипСклада КАК ТипСкладаПолучателя,
	|	Реквизиты.СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиПолучателя,
	|	Реквизиты.ПодразделениеПолучатель,
	|	Реквизиты.НДСвСтоимостиТоваров,
	|	Реквизиты.СчетСписанияНДС,
	|	Реквизиты.СубконтоСписанияНДС1,
	|	Реквизиты.СубконтоСписанияНДС2,
	|	Реквизиты.СубконтоСписанияНДС3,
	|	ВЫБОР
	|		КОГДА Реквизиты.СкладПолучатель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ)
	|		КОГДА Реквизиты.СкладПолучатель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СчетТорговойНаценкиСкладаПолучателя
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.СкладОтправитель,
	|	Реквизиты.ТипСкладаОтправителя,
	|	Реквизиты.ТипЦенРозничнойТорговлиОтправителя,
	|	Реквизиты.ПодразделениеОтправитель,
	|	Реквизиты.СкладПолучатель,
	|	Реквизиты.ТипСкладаПолучателя,
	|	Реквизиты.ТипЦенРозничнойТорговлиПолучателя,
	|	Реквизиты.ПодразделениеПолучатель,
	|	Реквизиты.НДСвСтоимостиТоваров,
	|	Реквизиты.СчетСписанияНДС,
	|	Реквизиты.СубконтоСписанияНДС1,
	|	Реквизиты.СубконтоСписанияНДС2,
	|	Реквизиты.СубконтоСписанияНДС3,
	|	Реквизиты.СчетТорговойНаценкиСкладаПолучателя,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыНаКомиссии, ЛОЖЬ) КАК ЕстьТоварыНаКомиссии,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции 

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчета.Забалансовый КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.НовыйСчетУчета,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.ЦенаВРознице,
		|	ТаблицаТовары.СуммаВРознице,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ТаблицаТовары.ДокументОприходования,
		|	ТаблицаТовары.Себестоимость
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьТоварыНаКомиссии Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТоварыНаКомиссии", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТоварыНаКомиссии.Ссылка,
		|	ТоварыНаКомиссии.НомерСтроки,
		|	ТоварыНаКомиссии.Номенклатура,
		|	ТоварыНаКомиссии.Количество,
		|	ТоварыНаКомиссии.Цена,
		|	ТоварыНаКомиссии.СчетУчета,
		|	ТоварыНаКомиссии.НовыйСчетУчета
		|ПОМЕСТИТЬ ТоварыНаКомиссии
		|ИЗ
		|	Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ТоварыНаКомиссии
		|ГДЕ
		|	ТоварыНаКомиссии.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратнаяТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВозвратнаяТара.Ссылка,
		|	ВозвратнаяТара.НомерСтроки,
		|	ВозвратнаяТара.Номенклатура,
		|	ВозвратнаяТара.Количество,
		|	ВозвратнаяТара.СчетУчета,
		|	ВозвратнаяТара.НовыйСчетУчета
		|ПОМЕСТИТЬ ВозвратнаяТара
		|ИЗ
		|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ВозвратнаяТара
		|ГДЕ
		|	ВозвратнаяТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеремещениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПеремещениеРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Реквизиты.ПодразделениеОтправитель КАК Подразделение,
	|	Реквизиты.ПодразделениеПолучатель КАК КорПодразделение,
	|	""Перемещение"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СкладПолучатель КАК СкладПолучатель,
	|	Реквизиты.ТипСкладаОтправителя КАК ТипОтправителя,
	|	Реквизиты.ТипСкладаПолучателя КАК ТипСклада,
	|	Реквизиты.НДСвСтоимостиТоваров КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	""Перемещение товаров"" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ЕстьТовары 
		ИЛИ Реквизиты.ОтправительНТТВЦенахПродажи Тогда
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ОтправительАТТВЦенахПродажи
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
	|		ИНАЧЕ ТаблицаТовары.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеПолучатель КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ТаблицаТовары.НовыйСчетУчета КАК КорСчетСписания,
	|	ТаблицаТовары.Номенклатура КАК КорСубконто1,
	|	Реквизиты.СкладПолучатель КАК КорСубконто2,
	|	ТаблицаТовары.СтавкаНДСВРознице КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС) КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаПеремещениеТоваровНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары 
		ИЛИ НЕ Реквизиты.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("НДСРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("НДСТовары",    Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НДСРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("НДСТовары",    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОтправитель КАК Подразделение,
	|	Реквизиты.ПодразделениеПолучатель,
	|	Реквизиты.НДСвСтоимостиТоваров,
	|	Реквизиты.СчетСписанияНДС,
	|	Реквизиты.СубконтоСписанияНДС1,
	|	Реквизиты.СубконтоСписанияНДС2,
	|	Реквизиты.СубконтоСписанияНДС3,
	|	Реквизиты.ТипСкладаОтправителя,
	|	Реквизиты.СкладПолучатель,
	|	Реквизиты.ТипСкладаПолучателя,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	Реквизиты.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаТовары.НовыйСчетУчета КАК СчетУчетаПолучатель,
	|	ТаблицаТовары.СпособУчетаНДС КАК НовыйСпособУчетаНДС
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.СчетУчетаЗабалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеремещениеКомиссионныхТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТоварыНаКомиссии Тогда
		ПараметрыПроведения.Вставить("ТаблицаТоварыНаКомиссии", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаТоварыНаКомиссии", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары на комиссии"" КАК ИмяСписка,
	|	&СинонимТоварыНаКомиссии КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТоварыНаКомиссии.НомерСтроки КАК НомерСтроки,
	|	ТоварыНаКомиссии.СчетУчета,
	|	ТоварыНаКомиссии.Номенклатура,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТоварыНаКомиссии.Количество,
	|	Реквизиты.ПодразделениеПолучатель КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ТоварыНаКомиссии.НовыйСчетУчета КАК КорСчетСписания,
	|	ТоварыНаКомиссии.Номенклатура КАК КорСубконто1,
	|	Реквизиты.СкладПолучатель КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТоварыНаКомиссии КАК ТоварыНаКомиссии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаПеремещениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ТаблицаТара", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаТара", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ВозвратнаяТара.НомерСтроки КАК НомерСтроки,
	|	ВозвратнаяТара.СчетУчета,
	|	ВозвратнаяТара.Номенклатура,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ВозвратнаяТара.Количество,
	|	Реквизиты.ПодразделениеПолучатель КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент, 
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии, 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом, 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом, 
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом, 
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ВозвратнаяТара.НовыйСчетУчета КАК КорСчетСписания,
	|	ВозвратнаяТара.Номенклатура КАК КорСубконто1,
	|	Реквизиты.СкладПолучатель КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНачислениеТорговойНаценки(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ (НЕ Реквизиты.ПолучательАТТВЦенахПродажи 
		И НЕ Реквизиты.ПолучательНТТВЦенахПродажи) Тогда
		ПараметрыПроведения.Вставить("НачислениеТорговойНаценкиРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("НачислениеТорговойНаценкиТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НачислениеТорговойНаценкиРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("НачислениеТорговойНаценкиТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеПолучатель КАК Подразделение,
	|	Реквизиты.СкладПолучатель,
	|	Реквизиты.ТипСкладаПолучателя КАК ТипСкладаПолучателя,
	|	Реквизиты.ТипЦенРозничнойТорговлиПолучателя КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ТипСкладаОтправителя КАК ТипСкладаОтправителя,
	|	ВЫБОР
	|		КОГДА Реквизиты.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключитьНДСвСтоимостьТоваров
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СуммаВРознице КАК СуммаВРознице,
	|	ТаблицаТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ТаблицаТовары.НовыйСчетУчета КАК НовыйСчетУчета
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТорговойНаценкиАТТ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.ОтправительАТТВЦенахПродажи Тогда
		ПараметрыПроведения.Вставить("СписаниеТорговойНаценкиАТТРеквизиты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТорговойНаценкиАТТРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОтправитель КАК Подразделение,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	Реквизиты.ТипСкладаОтправителя КАК ТипСклада,
	|	Реквизиты.ТипЦенРозничнойТорговлиОтправителя КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ТипСкладаПолучателя КАК СкладПолучательТипСклада,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) КАК КорСчетСписания
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТоваровНТТ(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.ОтправительНТТВЦенахПродажи Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровНТТРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровНТТТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровНТТРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровНТТТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОтправитель КАК Подразделение,
	|	Реквизиты.ПодразделениеПолучатель КАК КорПодразделение,
	|	Реквизиты.СкладОтправитель КАК Склад,
	|	Реквизиты.ТипСкладаОтправителя КАК ТипСклада,
	|	Реквизиты.ТипЦенРозничнойТорговлиОтправителя КАК ТипЦенРозничнойТорговли
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары на комиссии"" КАК ИмяСписка,
	|	&СинонимТоварыНаКомиссии КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВРознице КАК Сумма,
	|	ТаблицаТовары.СуммаВРознице КАК ВалютнаяСумма,
	|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
	|	&ВалютаРеглУчета КАК Валюта,
	|	ТаблицаТовары.СтавкаНДСВРознице,
	|	ТаблицаТовары.СчетУчета,
	|	ЕСТЬNULL(Реквизиты.СчетТорговойНаценкиСкладаПолучателя, ТаблицаТовары.НовыйСчетУчета) КАК КорСчетНаценка,
	|	ТаблицаТовары.НовыйСчетУчета КАК КорСчетСписания,
	|	ТаблицаТовары.Номенклатура КАК КорСубконто1,
	|	Реквизиты.СкладПолучатель КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;
	
	СодержанияПроводок = Новый Соответствие;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СодержаниеПроводки = СодержанияПроводок[СтрокаТаблицы.СчетУчета];
		Если СодержаниеПроводки = Неопределено Тогда
			СодержаниеПроводки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Перемещение %1", 
				БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета));
			СодержанияПроводок.Вставить(СтрокаТаблицы.СчетУчета, СодержаниеПроводки);
		КонецЕсли;
		СтрокаТаблицы.Содержание = СодержаниеПроводки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуСписанныеМПЗИП(ТаблицаСписанныеМПЗ, ТаблицаРеквизиты) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0
		ИЛИ ТаблицаСписанныеМПЗ = Неопределено
		ИЛИ ТаблицаСписанныеМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости
		ИЛИ Реквизиты.ТипОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
		ИЛИ Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаМПЗ = УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуНоменклатурнымиГруппами(ТаблицаСписанныеМПЗ, ТаблицаРеквизиты);
	
	ТаблицаМПЗ.Колонки.Добавить("Продукция",                Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМПЗ.Колонки.Добавить("СчетЗатрат",               Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("СчетДоходов",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету", Новый ОписаниеТипов("Булево"));
	ТаблицаМПЗ.Колонки.Добавить("СтатьяЗатрат",             Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("ВидРасходовНУ",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ТаблицаМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("Выручка",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМПЗ.Колонки.Добавить("НДСНачисленный",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	
	УчетнаяПолитикаНУ = Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД);
	СчетаУчетаВНТТ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Реквизиты.Организация, Реквизиты.СкладПолучатель, Реквизиты.Период, УчетнаяПолитикаНУ);
	
	ТаблицаМПЗ.ЗаполнитьЗначения(СчетаУчетаВНТТ.СчетРасходовОтРеализации, "СчетЗатрат");
	ТаблицаМПЗ.ЗаполнитьЗначения(СчетаУчетаВНТТ.СчетДоходовОтРеализации,  "СчетДоходов");
	
	Возврат ТаблицаМПЗ;

КонецФункции

Функция ПодготовитьТаблицуПоступившиеМПЗИП(ТаблицаПоступившиеМПЗ, ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0
		ИЛИ ТаблицаПоступившиеМПЗ = Неопределено
		ИЛИ ТаблицаПоступившиеМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты	= ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости
		ИЛИ НЕ Реквизиты.ТипОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
		ИЛИ (НЕ Реквизиты.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад
			И НЕ Реквизиты.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
			
		// МПЗ списываются, только при перемещении НТТ -> Опт, Розница
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаМПЗ	= УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуНоменклатурнымиГруппами(ТаблицаПоступившиеМПЗ, ТаблицаРеквизиты);
	
	ТаблицаМПЗ.Колонки.Добавить("Продукция",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМПЗ.Колонки.Добавить("НДС",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаМПЗ.Колонки.Добавить("СчетЗатрат",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("СчетДоходов",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету",	Новый ОписаниеТипов("Булево"));
	ТаблицаМПЗ.Колонки.Добавить("СтатьяЗатрат",				Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("ВидРасходовНУ",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ТаблицаМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	
	ТаблицаМПЗ.Колонки.Удалить("Сумма");
	ТаблицаМПЗ.Колонки.СуммаСписания.Имя	= "Сумма";
	
	ТаблицаМПЗ.Колонки.Удалить("СчетУчета");
	ТаблицаМПЗ.Колонки.КорСчетСписания.Имя	= "СчетУчета";
	
	ТаблицаМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	ТаблицаМПЗ.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
	
	Возврат ТаблицаМПЗ;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Перемещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Перемещение товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Накладная на внутреннее перемещение (ТОРГ-13)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ13";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на внутреннее перемещение (ТОРГ-13)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Перемещение товаров""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена КАК Цена,
	|	СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваров.КоличествоМест) КАК КоличествоМест,
	|	МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена,
	|	ПеремещениеТоваров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена КАК Цена,
	|	СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваров.КоличествоМест) КАК КоличествоМест,
	|	МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТоварыНаКомиссии
	|ИЗ
	|	Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена,
	|	ПеремещениеТоваров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименованиеПолное,
	|	Товары.Номенклатура.Наименование КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА Товары.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА Товары.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоМест КАК КоличествоМест,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Товары.Цена КАК Цена,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID,
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаКомиссии.Номенклатура,
	|	ТоварыНаКомиссии.Номенклатура.НаименованиеПолное,
	|	ТоварыНаКомиссии.Номенклатура.Наименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТоварыНаКомиссии.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ТоварыНаКомиссии.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ТоварыНаКомиссии.Количество,
	|	ТоварыНаКомиссии.КоличествоМест,
	|	ТоварыНаКомиссии.ЕдиницаИзмерения,
	|	ТоварыНаКомиссии.Номенклатура.ЕдиницаИзмерения,
	|	ТоварыНаКомиссии.Цена,
	|	ТоварыНаКомиссии.НомерСтроки,
	|	2,
	|	ТоварыНаКомиссии.Ссылка
	|ИЗ
	|	ТоварыНаКомиссии КАК ТоварыНаКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.Номенклатура.НаименованиеПолное,
	|	ПеремещениеТоваров.Номенклатура.Наименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПеремещениеТоваров.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ПеремещениеТоваров.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ПеремещениеТоваров.Количество,
	|	NULL,
	|	NULL,
	|	ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения,
	|	0,
	|	ПеремещениеТоваров.НомерСтроки,
	|	3,
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат	= Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	
	ВыборкаПоТоварам = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
		
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		ВыборкаПоТоварам.Сбросить();
		Если НЕ ВыборкаПоТоварам.НайтиСледующий(Шапка.Ссылка, "Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаСтрокТовары = ВыборкаПоТоварам.Выбрать();
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_Накладная");
		
		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

		НС = 1;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьНомера.Параметры.НомерСтроки = НС;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименованиеПолное), СокрЛП(ВыборкаСтрокТовары.ТоварНаименованиеПолное), СокрЛП(ВыборкаСтрокТовары.ТоварНаименование));
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			НС = НС + 1;
		КонецЦикла;

		// Вывести подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер КАК НомерДокумента,
	|	ПеремещениеТоваров.Дата КАК ДатаДокумента,
	|	ПеремещениеТоваров.Дата КАК ДатаНач,
	|	ПеремещениеТоваров.Дата КАК ДатаКон,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель КАК ОтправительПодразделение,
	|	ПеремещениеТоваров.СкладПолучатель КАК ПолучательПодразделение,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.СкладОтправитель.ТипСклада КАК ТипСкладаОтправителя,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваров.СкладПолучатель.ТипСклада КАК ТипСкладаПолучателя,
	|	ПеремещениеТоваров.СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиСкладаПолучателя
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.ЦенаВРознице КАК Цена,
	|	ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|	СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваров.КоличествоМест) КАК КоличествоМест,
	|	МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения,
	|	ПеремещениеТоваров.ЦенаВРознице,
	|	ПеремещениеТоваров.Коэффициент,
	|	ПеремещениеТоваров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена КАК Цена,
	|	ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|	СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваров.КоличествоМест) КАК КоличествоМест,
	|	МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТоварыНаКомиссии
	|ИЗ
	|	Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.ЕдиницаИзмерения,
	|	ПеремещениеТоваров.Цена,
	|	ПеремещениеТоваров.Коэффициент,
	|	ПеремещениеТоваров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА Товары.Номенклатура.Артикул
	|		ИНАЧЕ Товары.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоМест КАК КоличествоМест,
	|	Товары.Коэффициент КАК КоличествоВОдномМесте,
	|	Товары.Цена КАК Цена,
	|	Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияМестНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID,
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаКомиссии.Номенклатура,
	|	ТоварыНаКомиссии.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТоварыНаКомиссии.Номенклатура.Артикул
	|		ИНАЧЕ ТоварыНаКомиссии.Номенклатура.Код
	|	КОНЕЦ,
	|	ТоварыНаКомиссии.Количество,
	|	ТоварыНаКомиссии.КоличествоМест,
	|	ТоварыНаКомиссии.Коэффициент,
	|	ТоварыНаКомиссии.Цена,
	|	ТоварыНаКомиссии.ЕдиницаИзмерения,
	|	ТоварыНаКомиссии.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ТоварыНаКомиссии.Номенклатура.ЕдиницаИзмерения.Код,
	|	ТоварыНаКомиссии.НомерСтроки,
	|	2,
	|	ТоварыНаКомиссии.Ссылка
	|ИЗ
	|	ТоварыНаКомиссии КАК ТоварыНаКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПеремещениеТоваров.Номенклатура.Артикул
	|		ИНАЧЕ ПеремещениеТоваров.Номенклатура.Код
	|	КОНЕЦ,
	|	ПеремещениеТоваров.Количество,
	|	ПеремещениеТоваров.Количество,
	|	0,
	|	0,
	|	NULL,
	|	ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПеремещениеТоваров.НомерСтроки,
	|	3,
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат	= Запрос.ВыполнитьПакет();
	
	ШапкаИтоги = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаПоТоварам = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ13");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ПолеСверху			= 10;
	ТабличныйДокумент.ПолеСнизу				= 10;
	ТабличныйДокумент.ПолеСправа			= 0;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабличныйДокумент.ПолеСлева	= 0;
	Иначе
		ТабличныйДокумент.ПолеСлева	= 10;
	КонецЕсли;
	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
		
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		СтруктураПоиска = Новый Структура("Регистратор, Номенклатура");
		
		Шапка = ШапкаИтоги.Выбрать();
		ПервыйДокумент = Истина;
		Пока Шапка.Следующий() Цикл
			
			ВыборкаПоТоварам.Сбросить();
			ВыборкаПоТоварам.НайтиСледующий(Шапка.Ссылка, "Ссылка");
			
			ВыборкаСтрокТовары = ВыборкаПоТоварам.Выбрать();
			
			УчетПоПродажнойСтоимости = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, Шапка.ДатаДокумента) =
				Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
			ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);
			ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
			ТабличныйДокумент.Вывести(ОбластьМакета);

			НомерСтраницы = 1;
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

			КоличествоСтрок = ВыборкаСтрокТовары.Количество();

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассыНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			// инициализация итогов по документу
			ИтогоКоличество  = 0;
			ИтогоМассаБрутто = 0;
			ИтогоМассаНетто  = 0;
			ИтогоСумма       = 0;

			Ном = 0;

			// Выводим многострочную часть документа
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			ОбластьМакетаВсего = Макет.ПолучитьОбласть("Всего");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");

			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Ном = Ном + 1;
						
				КоличествоМест = ?(ВыборкаСтрокТовары.КоличествоМест = 0, ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.КоличествоМест);

				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				//Определим цену - в случае розницы в продажных ценах - продажную
				Если ВыборкаСтрокТовары.ID = 1 И УчетПоПродажнойСтоимости 
					И (Шапка.ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин 
					ИЛИ Шапка.ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
					
					ЦенаПеремещения = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, 
						Шапка.ТипЦенРозничнойТорговлиСкладаПолучателя, Шапка.ДатаДокумента, ВалютаРегламентированногоУчета, 1, 1);
					Сумма = Окр(ЦенаПеремещения * КоличествоМест, 2, 1);
				ИначеЕсли ВыборкаСтрокТовары.ID = 1 И УчетПоПродажнойСтоимости 
					И (Шапка.ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка 
					ИЛИ Шапка.ТипСкладаОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
					
					ЦенаПеремещения = ВыборкаСтрокТовары.Цена;
					Сумма = Окр(ЦенаПеремещения * КоличествоМест, 2, 1);
					
				Иначе
					СтруктураПоиска.Вставить("Регистратор",		Шапка.Ссылка);
					СтруктураПоиска.Вставить("Номенклатура",	ВыборкаСтрокТовары.Номенклатура);
					НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
				
					Если НайденныеСтроки.Количество() = 0 Тогда
						ЦенаПеремещения = 0;
						Сумма = 0;
					Иначе
						СтрокаСуммСписания = НайденныеСтроки[0];
						ЦенаПеремещения = ?(КоличествоМест = 0, 0, СтрокаСуммСписания.Сумма / КоличествоМест);
						Сумма = Окр(ЦенаПеремещения * КоличествоМест, 2, 1);
					КонецЕсли;
				КонецЕсли;
				ОбластьМакета.Параметры.Цена  = ЦенаПеремещения;
				ОбластьМакета.Параметры.Сумма = Сумма;
				ОбластьМакета.Параметры.КоличествоМест = КоличествоМест;
				ОбластьМакета.Параметры.ТоварНаименование = ?(ВыборкаСтрокТовары.ID = 3, СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) 
					+ " (возвратная тара)", ВыборкаСтрокТовары.ТоварНаименование);
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьМакета);
				СтрокаСПодвалом.Добавить(ОбластьИтоговПоСтранице);
				Если Ном = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;

				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
					
					Если КоличествоСтрок > 1 Тогда
						
						ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
						ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
						ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
						ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
						
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						// инициализация итогов по странице
						ИтогКоличествоМестПоСтранице = 0;
						ИтогМассаБруттоПоСтранице    = 0;
						ИтогМассаНеттоПоСтранице     = 0;
						ИтогСуммыПоСтранице          = 0;
						
						НомерСтраницы = НомерСтраницы + 1;
						
						ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

				// Обновим итоги по странице
				ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
				ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
				ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
				ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

				// Обновим итогов по документу
				ИтогоКоличество  = ИтогоКоличество  + КоличествоМест;
				ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
				ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
				ИтогоСумма       = ИтогоСумма       + Сумма;

			КонецЦикла;

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);

			// Выводим итоги по документу в целом
			
			ОбластьМакетаВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
			ОбластьМакетаВсего.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
			ОбластьМакетаВсего.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
			ОбластьМакетаВсего.Параметры.ИтогоСумма          = ИтогоСумма;

			ТабличныйДокумент.Вывести(ОбластьМакетаВсего);

			// Выводим подвал документа
			ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
			ОбластьМакетаПодвал.Параметры.ИтогоСуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСумма, ВалютаРегламентированногоУчета);
			
			Если Шапка.СкладОтправитель <> Справочники.Склады.ПустаяСсылка() Тогда 
				МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.СкладОтправитель,Шапка.ДатаДокумента);
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,МОЛ,Шапка.ДатаДокумента);
				ОбластьМакетаПодвал.Параметры.ДолжностьОтправителя = ДанныеФизЛица.Должность;
				ОбластьМакетаПодвал.Параметры.ФИООтправителя = ДанныеФизЛица.Представление;
			КонецЕсли;
			
			Если Шапка.СкладПолучатель <> Справочники.Склады.ПустаяСсылка() Тогда 
				МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.СкладПолучатель,Шапка.ДатаДокумента);
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,МОЛ,Шапка.ДатаДокумента);
				ОбластьМакетаПодвал.Параметры.ДолжностьПолучателя = ДанныеФизЛица.Должность;
				ОбластьМакетаПодвал.Параметры.ФИОПолучателя = ДанныеФизЛица.Представление;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
			
			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
				НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета Накладная формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Перемещение товаров", 
			ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати), , "Документ.ПеремещениеТоваров.ПФ_MXL_Накладная");
	КонецЕсли;
	
	// Проверяем, нужно ли для макета ТОРГ13 формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ13", "ТОРГ-13 (Накладная на внутреннее перемещение)", 
			ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_ТОРГ13");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
		
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "СкладОтправитель");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли