////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",			"Товары");
	СписокТабличныхЧастей.Добавить("ТоварыНаКомиссии",	"ТоварыНаКомиссии");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара",	"ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПеремещениеТоваров";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары"
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		СкладОтправительПриИзмененииНаСервере();
	Иначе
		ТипЦенСкладОтправитель = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСкладаОтправитель   = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		СкладПолучательПриИзмененииНаСервере();
	Иначе
		ТипЦенСкладПолучатель = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСкладаПолучатель   = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)

	Если Объект.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость") Тогда
		
		Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(НачатьЗаполнениеСчетовУчета("НДСвСтоимостиТоваров", Объект));
		
		Если Изменения.Свойство("СчетСписанияНДС") Тогда
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
				ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)

	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(НачатьЗаполнениеСчетовУчета("СчетСписанияНДС", Объект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Себестоимость = 0;
		Элемент.ТекущиеДанные.ДокументОприходования = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	Контекст = Новый Структура("Дата, Организация, СкладОтправитель, СкладПолучатель, 
		|ТипСкладаОтправитель, ТипСкладаПолучатель, РазделятьПоСтавкамНДС");
	ЗаполнитьЗначенияСвойств(Контекст, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(Контекст, Объект);

	КонтейнерСтрока = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		Контекст,
		КонтейнерСтрока);
		
	// Получим данные с сервера
	Изменения = ПолучитьДанныеТоварыНоменклатураПриИзменении(Контекст, КонтейнерСтрока, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	// Обработаем данные с сервера
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);
	Если Изменения.Свойство("ЦенаВРознице") Тогда
		ТекущиеДанные.СуммаВРознице = ТекущиеДанные.ЦенаВРознице * ТекущиеДанные.Количество;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	Элементы.Товары.ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если Элементы.ТоварыЦенаВРознице.Видимость И СтрокаТабличнойЧасти.ЦенаВРознице <> 0 Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.СуммаВРознице / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОприходования) Тогда
		СтрокаТаблицы.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"  , Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация"   , Объект.Организация);
	ПараметрыОбъекта.Вставить("Склад"         , Объект.СкладОтправитель);
	ПараметрыОбъекта.Вставить("Номенклатура"  , ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета"     , ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ПеремещениеТоваров.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ТоварыНаКомиссии>

&НаКлиенте
Процедура ТоварыНаКомиссииНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыНаКомиссии.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, СкладОтправитель");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ТоварыНаКомиссии.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТабличнойЧасти);
		
	Изменения = ПолучитьДанныеТоварыНаКомиссииНоменклатураПриИзменении(
		ДанныеОбъекта,
		ДанныеСтрокиТабличнойЧасти,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииЕдиницаИзмеренияПриИзменении(Элемент)

	Элементы.ТоварыНаКомиссии.ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ВозвратнаяТара>

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ПараметрыЗаполненияСчетов = НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		Элементы.ВозвратнаяТара.ТекущиеДанные);
		
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыНаКомиссии(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТоварыНаКомиссии");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВВЕТИС(Команда)
	
	ДополнительныеПараметры = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ФормаОбъекта", ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыНоменклатура, ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыСкладов.ОптовыйСклад);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыНовыйСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНовыйСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыСкладов.ОптовыйСклад);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделятьПоСтавкамНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ГруппаОтбора3 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора2.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

				ГруппаОтбора4 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора3.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.ОптовыйСклад);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора3,
					"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыЦенаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ГруппаОтбора3 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора2.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

				ГруппаОтбора4 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора3.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.ОптовыйСклад);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

				ГруппаОтбора4 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора3.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора4,
						"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.РозничныйМагазин);

			ГруппаОтбора3 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора2.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора3,
					"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора3,
					"ТипСкладаПолучатель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ТипСкладаОтправитель", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	РазделятьПоСтавкамНДС =
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") <> Неопределено;
	
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		СвойстваСкладаОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.СкладОтправитель, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСкладОтправитель = СвойстваСкладаОтправителя.ТипЦенРозничнойТорговли;
		ТипСкладаОтправитель   = СвойстваСкладаОтправителя.ТипСклада;
	Иначе
		ТипЦенСкладОтправитель    = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСкладаОтправитель      = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		СвойстваСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.СкладПолучатель, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСкладПолучатель = СвойстваСкладаПолучателя.ТипЦенРозничнойТорговли;
		ТипСкладаПолучатель   = СвойстваСкладаПолучателя.ТипСклада;
	Иначе
		ТипЦенСкладПолучатель = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСкладаПолучатель   = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	Если Объект.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость") Тогда
		Элементы.ГруппаСчетИАналитикаСписанияНДС.Доступность = Истина;
	Иначе
		Элементы.ГруппаСчетИАналитикаСписанияНДС.Доступность = Ложь;
	КонецЕсли; 
	
	Элементы.ПодразделениеОтправитель.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ПодразделениеПолучатель.Доступность  = ЗначениеЗаполнено(Объект.Организация);

	Если НужноУбратьЗакладкиСтраниц(Объект) Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НужноУбратьЗакладкиСтраниц(Объект)

	Возврат НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("ИспользоватьВозвратнуюТару", Объект) 
		И НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("ОсуществляетсяРеализацияТоваровУслугКомитентов", Объект) 
		И НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("РаздельныйУчетНДСДо2014Года", Объект)

КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УчетВПродажныхЦенах =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	СпособОценкиМПЗПоСредней =
		УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценки.ПоСредней;
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата)
		И УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
		
КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьНДСВСтоимостиТоваров();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Объект.ПодразделениеОтправитель	= ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
		Объект.Организация, Объект.СкладОтправитель);
		
	Объект.ПодразделениеПолучатель	= ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
		Объект.Организация, Объект.СкладПолучатель);
	
	УстановитьНДСВСтоимостиТоваров();
	
	Изменения = Новый Массив;
	Изменения.Добавить("Организация");
	Изменения.Добавить("НДСвСтоимостиТоваров");
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета(Изменения, Объект));
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СкладОтправительПриИзмененииНаСервере()
	
	СвойстваСкладаОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.СкладОтправитель, "ТипСклада, ТипЦенРозничнойТорговли");
	ТипЦенСкладОтправитель = СвойстваСкладаОтправителя.ТипЦенРозничнойТорговли;
	ТипСкладаОтправитель   = СвойстваСкладаОтправителя.ТипСклада;
	
	Объект.ПодразделениеОтправитель = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
		Объект.Организация, Объект.СкладОтправитель);
	
	УстановитьНДСВСтоимостиТоваров();
	
	ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере();
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("СкладОтправитель", Объект));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура СкладПолучательПриИзмененииНаСервере()
	
	СвойстваСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.СкладПолучатель, "ТипСклада, ТипЦенРозничнойТорговли");
	ТипЦенСкладПолучатель = СвойстваСкладаПолучателя.ТипЦенРозничнойТорговли;
	ТипСкладаПолучатель   = СвойстваСкладаПолучателя.ТипСклада;
	
	Объект.ПодразделениеПолучатель = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
		Объект.Организация, Объект.СкладПолучатель);
	
	УстановитьНДСВСтоимостиТоваров();
	
	ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере();
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("СкладПолучатель", Объект));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере()
	
	Документы.ПеремещениеТоваров.ЗаполнитьСтрокиТабличнойЧастиТовары(Объект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделятьПоСтавкамНДС);

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервереБезКонтекста
Функция ПолучитьДанныеТоварыНоменклатураПриИзменении(Знач Контекст, Знач ДанныеСтроки, Знач СчетаУчетаКЗаполнению)
	
	Результат = Новый Структура;
	
	ПараметрыДанныхОНоменклатуре = Новый Структура("Дата, Организация, Склад", Контекст.Дата, Контекст.Организация, );
	
	// СкладОтправитель
	ПараметрыДанныхОНоменклатуре.Склад	= Контекст.СкладОтправитель;
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		ДанныеСтроки.Номенклатура, ПараметрыДанныхОНоменклатуре, Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		Результат.Вставить("ЕдиницаИзмерения", СведенияОНоменклатуре.ЕдиницаИзмерения);
		Результат.Вставить("Коэффициент",      СведенияОНоменклатуре.Коэффициент);
	КонецЕсли;
	
	// СкладПолучатель
	ПараметрыДанныхОНоменклатуре.Склад	= Контекст.СкладПолучатель;
	НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		ДанныеСтроки.Номенклатура, ПараметрыДанныхОНоменклатуре, Ложь);
		
	ОпределенаЦена = Ложь;
	Если Контекст.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		Если Контекст.РазделятьПоСтавкамНДС И СведенияОНоменклатуре <> Неопределено Тогда
			Результат.Вставить("СтавкаНДСВРознице", СведенияОНоменклатуре.СтавкаНДСВРознице);
		КонецЕсли;
		
		Если Контекст.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад И СведенияОНоменклатуре <> Неопределено Тогда
			Результат.Вставить("ЦенаВРознице", СведенияОНоменклатуре.ЦенаВРознице);
		КонецЕсли;
		
	ИначеЕсли Контекст.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		Если Контекст.РазделятьПоСтавкамНДС И НовыеСведенияОНоменклатуре <> Неопределено Тогда
			Результат.Вставить("СтавкаНДСВРознице", НовыеСведенияОНоменклатуре.СтавкаНДСВРознице);
		КонецЕсли;
		
		Если Контекст.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад И НовыеСведенияОНоменклатуре <> Неопределено Тогда
			Результат.Вставить("ЦенаВРознице", НовыеСведенияОНоменклатуре.ЦенаВРознице);
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПеремещениеТоваров,
		СчетаУчетаКЗаполнению,
		Контекст,
		"Товары",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, СчетаУчета, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеТоварыНаКомиссииНоменклатураПриИзменении(Знач ДанныеОбъекта, Знач ДанныеСтроки, Знач СчетаУчетаКЗаполнению)

	Результат = Новый Структура;
	
	ПараметрыСведенийОНоменклатуре = Новый Структура;
	ПараметрыСведенийОНоменклатуре.Вставить("Дата",        ДанныеОбъекта.Дата);
	ПараметрыСведенийОНоменклатуре.Вставить("Организация", ДанныеОбъекта.Организация);
	ПараметрыСведенийОНоменклатуре.Вставить("Склад",       ДанныеОбъекта.СкладОтправитель);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		ДанныеСтроки.Номенклатура, 
		ПараметрыСведенийОНоменклатуре, 
		Ложь, 
		Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		Результат.Вставить("ЕдиницаИзмерения", СведенияОНоменклатуре.ЕдиницаИзмерения);
		Результат.Вставить("Коэффициент",      СведенияОНоменклатуре.Коэффициент);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПеремещениеТоваров,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ТоварыНаКомиссии",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = ВалютаРегламентированногоУчета;
	
	ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ИначеЕсли ИмяТаблицы = "ТоварыНаКомиссии" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары на комиссии'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	Если ИмяТаблицы = "Товары" Тогда
		
		Если ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка")
			И ТипСкладаПолучатель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад") Тогда
			
			ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
			ПараметрыФормы.Вставить("ПоказыватьЦены", ЗначениеЗаполнено(ТипЦенСкладОтправитель));
			ПараметрыФормы.Вставить("ДатаЦены",       Объект.Дата);
			ПараметрыФормы.Вставить("ТипЦен",         ТипЦенСкладОтправитель);
			
		ИначеЕсли ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад")
			И ТипСкладаПолучатель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка") Тогда
			
			ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
			ПараметрыФормы.Вставить("ПоказыватьЦены", ЗначениеЗаполнено(ТипЦенСкладПолучатель));
			ПараметрыФормы.Вставить("ДатаЦены",       Объект.Дата);
			ПараметрыФормы.Вставить("ТипЦен",         ТипЦенСкладПолучатель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПоказыватьЗабалансовыеОстатки", (ИмяТаблицы = "ТоварыНаКомиссии"));
	ПараметрыФормы.Вставить("ЕстьКоличество",      Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",        ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта",              Валюта);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",       Объект.ПодразделениеОтправитель);
	ПараметрыФормы.Вставить("Склад",               Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок",           ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора",          ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",          ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",              Ложь);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ИмяТаблицы = "ТоварыНаКомиссии" Тогда
		 ВидПодбора = "КОМИТЕНТ";
	ИначеЕсли ЗначениеЗаполнено(Объект.СкладОтправитель)
		И ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка") Тогда
		ВидПодбора = "НТТ";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура УстановитьНДСВСтоимостиТоваров()

	Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	Если РаздельныйУчетНДС И РозничнаяТорговляОблагаетсяЕНВД Тогда
		
		Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад
			И (ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин
			ИЛИ ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
		ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад 
			И (ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин
			ИЛИ ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары",		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке",	Ложь);
	ПараметрыОбработки.Вставить("ДокументСсылка",			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата",				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация",		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад",			Объект.СкладПолучатель);
	ПараметрыОбработки.Вставить("ИсключатьРеквизиты",		"Цена");
	
	Возврат ПараметрыОбработки;

КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	ДобавленныеСтроки = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
	
	ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
	СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если ЭтоВставкаИзБуфера 
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		СтрокаТабличнойЧасти	= Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		ДобавленныеСтроки.Добавить(СтрокаТабличнойЧасти);
		
		НовыеСведенияОНоменклатуре = СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Если ИмяТаблицы <> "ВозвратнаяТара" И СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
		КонецЕсли;
		
		Если ИмяТаблицы = "Товары" Тогда
			
			Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				
				Если РазделятьПоСтавкамНДС И СведенияОНоменклатуре <> Неопределено Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
				КонецЕсли;
				
				Если ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице	= СтрокаТовара.Цена;
					СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
				КонецЕсли;
				
			ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				
				Если РазделятьПоСтавкамНДС И НовыеСведенияОНоменклатуре <> Неопределено Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
				КонецЕсли;
				
				Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице	= СтрокаТовара.Цена;
					СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(ДобавленныеСтроки, ИмяТаблицы, Объект, Документы.ПеремещениеТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = ДобавленныеСтроки.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ПеремещениеТоваров, Истина);

	Если РазделятьПоСтавкамНДС 
		И (ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка 
		Или ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
	
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(СтрокиДляДополнительнойОбработки, "Номенклатура", Истина);
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		// Для склада-отправителя
		ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
			
		// Для склада-получателя
		ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
		СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
	
		Для Каждого СтрокаТабличнойЧасти ИЗ СтрокиДляДополнительнойОбработки Цикл
				
			Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				СведенияОНоменклатуре	= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
				Если СведенияОНоменклатуре <> Неопределено Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
				КонецЕсли;
			ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				НовыеСведенияОНоменклатуре	= СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
				Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "", "СубконтоСписанияНДС", "", "СчетСписанияНДС");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыНовыйСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыНаКомиссииСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыНаКомиссииНовыйСчетУчета");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	ЭлементыСчетов.Добавить("ВозвратнаяТараНовыйСчетУчета");
	
	ЭлементыСчетов.Добавить("ГруппаСчетИАналитикаСписанияНДС"); // Содержит имена счета и субконто
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПеремещениеТоваров",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// НДСвСтоимостиТоваров
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.НовыйСчетУчета");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.НовыйСчетУчета");
	КонецЕсли;

	// СчетСписанияНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// СкладОтправитель
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СкладОтправитель") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.СчетУчета");
	КонецЕсли;

	// СкладПолучатель
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СкладПолучатель") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.НовыйСчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.НовыйСчетУчета");
	КонецЕсли;

	// ВозвратнаяТара.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.НовыйСчетУчета");
	КонецЕсли;

	// ТоварыНаКомиссии.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ТоварыНаКомиссии.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ТоварыНаКомиссии.НовыйСчетУчета");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// НДСвСтоимостиТоваров
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
		КонецЕсли;

		// СчетСписанияНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// СкладОтправитель
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СкладОтправитель") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// СкладПолучатель
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СкладПолучатель") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// ВозвратнаяТара.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
		КонецЕсли;

		// ТоварыНаКомиссии.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ТоварыНаКомиссии.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладОтправитель");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НовыйСчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СкладПолучатель");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("ЦенаВРознице");
	СписокСвойств.Добавить("СтавкаНДСВРознице");
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("НовыйСчетУчета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
