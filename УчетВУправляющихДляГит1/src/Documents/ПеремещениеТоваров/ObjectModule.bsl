#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	ТипСкладаОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "ТипСклада");
	ТипСкладаПолучателя  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ТипСклада");
	
	Если УчетВПродажныхЦенах
		И (ТипСкладаОтправителя <> Перечисления.ТипыСкладов.ОптовыйСклад
		ИЛИ ТипСкладаПолучателя <> Перечисления.ТипыСкладов.ОптовыйСклад) Тогда
		
		Для каждого Строка Из Товары Цикл
			
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				Строка.СчетУчета, ТипСкладаОтправителя);
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				Строка.НовыйСчетУчета, ТипСкладаПолучателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ФИФО 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		И Товары.Количество() > 0 Тогда
		
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "ДокументОприходования");
		
	КонецЕсли; 
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПодразделениеПолучатель) Тогда
		ПодразделениеПолучатель = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Организация, СкладПолучатель);
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);

	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		СкладОтправитель = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПодразделениеОтправитель) Тогда
		ПодразделениеОтправитель = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Организация, СкладОтправитель);
	КонецЕсли;
 
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПеремещениеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.ПеремещениеРеквизиты, Отказ);

	ТаблицаСписанияТорговойНаценкиАТТ = УчетТоваров.ПодготовитьТаблицуСписанияТорговойНаценкиАТТ(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТорговойНаценкиАТТРеквизиты);
	
	// Таблица списанных товаров НТТ
	ТаблицаСписанныеТоварыНТТ = УчетТоваров.ПодготовитьТаблицуСписанныеТоварыНТТ(
		ПараметрыПроведения.СписаниеТоваровНТТТаблицаТовары, ПараметрыПроведения.СписаниеТоваровНТТРеквизиты, Отказ);

	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.ТаблицаТара, ПараметрыПроведения.ПеремещениеРеквизиты, Отказ);

	// Таблица списанных комиссионных товаров
	ТаблицаСписанныеТоварыНаКомиссии = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.ТаблицаТоварыНаКомиссии, ПараметрыПроведения.ПеремещениеРеквизиты, Отказ);

	// Дополнение таблицы содержанием проводки
	Документы.ПеремещениеТоваров.ДобавитьКолонкуСодержание(ТаблицаСписанныеТовары);
	Документы.ПеремещениеТоваров.ДобавитьКолонкуСодержание(ТаблицаСписанныеТоварыНТТ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
	
	// Учет доходов и расходов ИП
	СписанныеМПЗ = Документы.ПеремещениеТоваров.ПодготовитьТаблицуСписанныеМПЗИП(
		ТаблицаСписанныеТовары, ПараметрыПроведения.ИПРеквизиты);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.ИПРеквизиты, Отказ);
	
	ПоступившиеМПЗ = Документы.ПеремещениеТоваров.ПодготовитьТаблицуПоступившиеМПЗИП(ТаблицаСписанныеТоварыНТТ, ПараметрыПроведения.ИПРеквизиты);
	
	ТаблицаТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПоступившиеМПЗ, ПараметрыПроведения.ИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаТоваров", ТаблицаТоваровИП);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетТоваров.СформироватьДвиженияПеремещениеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.ПеремещениеРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияПеремещениеТоваров(ТаблицаСписаннаяТара,
		ПараметрыПроведения.ПеремещениеРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияПеремещениеТоваров(ТаблицаСписанныеТоварыНаКомиссии,
		ПараметрыПроведения.ПеремещениеРеквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияСписаниеТорговойНаценкиАТТ(ТаблицаСписанияТорговойНаценкиАТТ,
		ПараметрыПроведения.СписаниеТорговойНаценкиАТТРеквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияСписаниеТоваровНТТ(ТаблицаСписанныеТоварыНТТ,
		ПараметрыПроведения.СписаниеТоваровНТТРеквизиты, Движения, Отказ);

	СписанныеПартииНДС = Новый ТаблицаЗначений;
	УчетНДСБП.СформироватьДвиженияПеремещениеТоваров(ПараметрыПроведения.НДСТовары,
		ТаблицаСписанныеТовары, ПараметрыПроведения.НДСРеквизиты, СписанныеПартииНДС, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияНачислениеТорговойНаценкиПеремещениеТоваров(
		ПараметрыПроведения.НачислениеТорговойНаценкиТаблицаТовары, ТаблицаСписанныеТовары, 
		ПараметрыПроведения.НачислениеТорговойНаценкиРеквизиты, СписанныеПартииНДС, Движения, Отказ);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП, ПараметрыПроведения.ИПРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		, , ПараметрыПроведения.ИПРеквизиты, Движения, Отказ);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара));
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	УчетВПродажныхЦенах	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) =
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);	
	
	// Проверка заполнения шапки документа
	
	РаздельныйУчетНДСДо2014Года = УчетнаяПолитика.РаздельныйУчетНДСДо2014Года(Организация, Дата);
	
	Если НЕ РаздельныйУчетНДСДо2014Года Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	// Проверка табличной части "Товары"
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	Если УчетВПродажныхЦенах Тогда
		
		РеквизитыСкладаОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладОтправитель,
			"ТипСклада, ТипЦенРозничнойТорговли");
		ТипСкладаОтправителя		= РеквизитыСкладаОтправителя.ТипСклада;
		ТипЦенСкладаОтправителя	= РеквизитыСкладаОтправителя.ТипЦенРозничнойТорговли;
		
		РеквизитыСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладПолучатель,
			"ТипСклада, ТипЦенРозничнойТорговли");
		ТипСкладаПолучателя		= РеквизитыСкладаПолучателя.ТипСклада;
		ТипЦенСкладаПолучателя	= РеквизитыСкладаПолучателя.ТипЦенРозничнойТорговли;
		
		Если ТипСкладаОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
			И ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		КонецЕсли;
		
		Если ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин
			ИЛИ ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			
			ПорядокСубконто = Новый Массив();
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
			ПодразделениеОстатков	= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
				ПодразделениеОтправитель, ПодразделениеПолучатель);
			
			Склад			= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
				СкладОтправитель, СкладПолучатель);
			ТипЦенСклада	= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
				ТипЦенСкладаОтправителя, ТипЦенСкладаПолучателя);
			
			МассивНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КонецПериода",		Дата);
			Запрос.УстановитьПараметр("Организация",		Организация);
			Запрос.УстановитьПараметр("Подразделение",		ПодразделениеОстатков);
			Запрос.УстановитьПараметр("Склад",				Склад);
			Запрос.УстановитьПараметр("Счет",				ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
			Запрос.УстановитьПараметр("ПорядокСубконто",	ПорядокСубконто);
			Запрос.УстановитьПараметр("Номенклатура",		МассивНоменклатуры);

			Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.Субконто1 КАК Номенклатура,
			|	Остатки.СуммаОстатокДт КАК СуммаОстаток,
			|	Остатки.КоличествоОстатокДт КАК КоличествоОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = &Счет,
			|			&ПорядокСубконто,
			|			Организация = &Организация
			|				И (Подразделение = &Подразделение
			|					ИЛИ Подразделение ЕСТЬ NULL )
			|				И Субконто1 В (&Номенклатура)
			|				И Субконто2 = &Склад) КАК Остатки
			|ГДЕ
			|	Остатки.КоличествоОстаток > 0";
			
			ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
			ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");
			
			ТаблицаРозничныхЦен	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				МассивНоменклатуры, ТипЦенСклада, Дата);
			
			Для каждого СтрокаТаблицы Из Товары Цикл
				
				Префикс		= "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ИмяСписка	= НСтр("ru = 'Товары'");
				
				РозничнаяЦена	= 0;
				УчетнаяЦена	= 0;
				
				СтрокаТаблицыРозничныхЦен = ТаблицаРозничныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
				Если СтрокаТаблицыРозничныхЦен <> Неопределено Тогда
					РозничнаяЦена	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаТаблицыРозничныхЦен.Цена, СтрокаТаблицыРозничныхЦен.Валюта, ВалютаРегламентированногоУчета, СтрокаТаблицыРозничныхЦен.Курс,
						1, СтрокаТаблицыРозничныхЦен.Кратность, 1);
				Иначе
					РозничнаяЦена	= 0;
				КонецЕсли;
				
				Если РозничнаяЦена = 0 Тогда
					ТекстСообщения	= НСтр("ru = 'Не установлена розничная цена.'");
					ТекстСообщения	= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
						НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Номенклатура";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыУчетныхЦен = ТаблицаУчетныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
				Если СтрокаТаблицыУчетныхЦен <> Неопределено Тогда
					Если СтрокаТаблицыУчетныхЦен.КоличествоОстаток <> 0 Тогда
						УчетнаяЦена = Окр(СтрокаТаблицыУчетныхЦен.СуммаОстаток / СтрокаТаблицыУчетныхЦен.КоличествоОстаток, 2, 1);
					КонецЕсли;
				Иначе
					УчетнаяЦена	= 0;
				КонецЕсли;
				
				//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
				ДопустимоеОтклонение = УчетнаяЦена * 0.001;
				
				Если УчетнаяЦена <> 0 
					И (РозничнаяЦена - УчетнаяЦена > ДопустимоеОтклонение
						ИЛИ РозничнаяЦена - УчетнаяЦена < - ДопустимоеОтклонение) Тогда
					ТекстСообщения	= НСтр("ru = 'Розничная цена (%1) не равна учетной цене (%2).
						|Измените розничную цену или проведите переоценку.'");
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РозничнаяЦена, УчетнаяЦена);
					ТекстСообщения	= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
						НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Номенклатура";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НовыйСчетУчета");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Товары.Количество() > 0 Тогда
		МассивТовары = Новый Массив(Товары.Количество());
		
		Товары.ЗагрузитьКолонку(МассивТовары, "Себестоимость");
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		ЗаполнитьПоПоступлению(ДанныеЗаполнения);
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(ДанныеЗаполнения)

	Запрос	= Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВидОперации_Оборудование",	Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
	Запрос.УстановитьПараметр("ВидДоговора_СКомитентом",	Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.Текст	= 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Склад КАК СкладОтправитель,
	|	ПоступлениеТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОтправитель
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Ссылка.ВидОперации <> &ВидОперации_Оборудование
	|	И ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВидДоговора <> &ВидДоговора_СКомитентом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура.ЕдиницаИзмерения,
	|	1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугОборудование.Ссылка.ВидОперации = &ВидОперации_Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерениям,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Ссылка.ВидОперации <> &ВидОперации_Оборудование
	|	И ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВидДоговора = &ВидДоговора_СКомитентом
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтрокиОснования,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиОснования";
	
	Результат	= Запрос.ВыполнитьПакет();
	
	ВыборкаШапка	= Результат[0].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	КонецЕсли;
	
	Товары.Очистить();
	ТоварыНаКомиссии.Очистить();
	ВозвратнаяТара.Очистить();
	
	ВыборкаТовары = Результат[1].Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		НоваяСтрока	= Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
	КонецЦикла;
	
	ВыборкаТоварыНаКомиссии = Результат[2].Выбрать();
	Пока ВыборкаТоварыНаКомиссии.Следующий() Цикл
		НоваяСтрока	= ТоварыНаКомиссии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыНаКомиссии);
	КонецЦикла;
	
	ВыборкаВозвратнаяТара = Результат[3].Выбрать();
	Пока ВыборкаВозвратнаяТара.Следующий() Цикл
		НоваяСтрока	= ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВозвратнаяТара);
	КонецЦикла;
	
	СвойстваСкладаОтправителя 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.СкладОтправитель, "ТипСклада");
	ТипСкладаОтправитель   		= СвойстваСкладаОтправителя.ТипСклада;
	СвойстваСкладаПолучателя 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.СкладПолучатель, "ТипСклада");
	ТипСкладаПолучатель   		= СвойстваСкладаПолучателя.ТипСклада;
	РазделятьПоСтавкамНДС 		= ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(
									ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") <> Неопределено;
			
	Документы.ПеремещениеТоваров.ЗаполнитьСтрокиТабличнойЧастиТовары(ЭтотОбъект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделятьПоСтавкамНДС);

КонецПроцедуры

#КонецЕсли