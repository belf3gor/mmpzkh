
#Область ОписаниеПеременных

&НаКлиенте
Перем ДействиеВыбрано;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация               = Параметры.Организация;
	ФизЛицо                   = Параметры.ФизЛицо;
	ДатаНачалаКомандировки    = Параметры.ДатаНачалаКомандировки; 
	ДатаОкончанияКомандировки = Параметры.ДатаОкончанияКомандировки; 
	ВалютаДокумента           = Параметры.ВалютаДокумента;
	ДатаДокумента             = Параметры.ДатаДокумента;
	ТекущийДокумент	          = Параметры.ТекущийДокумент;
	
	Билеты.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыБилеты));
	
	ОбновитьИтоги(ЭтотОбъект);
	
	// Значения для подстановки по умолчанию
	СчетЗатрат = УчетКомандировок.СчетЗатратКомандировочныеРасходы(Организация, ДатаДокумента);
	СтатьяЗатрат = УчетКомандировок.СтатьяЗатратКомандировочныеРасходы();
	
	ВидимостьНДС = НЕ Параметры.НДСНеВыделять;
	
	Элементы.БилетыСуммаНДС.Видимость      = ВидимостьНДС;
	Элементы.БилетыПеревозчик.Видимость    = ВидимостьНДС;
	Элементы.БилетыСуммаНДСВсего.Видимость = ВидимостьНДС;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Билеты,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьСчетовУчета();
	
	Элементы.ГруппаБилетыСчетЗатратПодразделениеЗатрат.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"),
		НСтр("ru = 'Счет затрат / Подразделение'"), НСтр("ru = 'Счет затрат'"));
	
	// Организация и дата не меняются на форме, поэтому установим ФО один раз при создании формы
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если ДействиеВыбрано <> Истина Тогда
		ОповеститьОВыборе(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБилеты

&НаКлиенте
Процедура БилетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;	
		
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	ТекущиеДанные.СчетЗатрат = СчетЗатрат;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
	ТекущиеДанные.СпособУчетаНДС  = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету");
		
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыБилетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Билет) Тогда
		ЗаполнитьБилетыНаСервере(Элементы.Билеты.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.СуммаНДС = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	ЗначенияСубконтоПоУмолчанию = Новый Соответствие;
	ЗначенияСубконтоПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		СтатьяЗатрат);
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьБилеты(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗаполнитьБилетыЗавершение", ЭтотОбъект); 
	
	Если Билеты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением таблица билетов будет очищена. Продолжить?'");
		ПоказатьВопрос(ОбработкаЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(ПоместитьТаблицуБилетовВоВременноеХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьБилетыЗавершение(Ответ, Параметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБилетыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБилетыНаСервере(ИдентификаторСтроки = Неопределено)
	
	ЗначенияСубконтоПоУмолчанию = Новый Соответствие;
	ЗначенияСубконтоПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		СтатьяЗатрат);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
			Организация, 
			ДатаНачалаКомандировки, 
			ДатаОкончанияКомандировки, 
			, 
			ФизЛицо, 
			ТекущийДокумент));
			
		Для Каждого СтрокаБилеты Из Билеты Цикл
			ЗаполнитьАналитикуЗатратВСтрокеБилета(ЭтотОбъект, СтрокаБилеты, ЗначенияСубконтоПоУмолчанию); 			
		КонецЦикла;
		
	Иначе
		СтрокаБилета = Билеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаБилетов = Справочники.Билеты.СуммыБилетов(
			Организация, 
			ДатаНачалаКомандировки, 
			ДатаОкончанияКомандировки,
			СтрокаБилета.Билет,
			ФизЛицо, 
			ТекущийДокумент);
		
		Если ТаблицаБилетов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБилета, ТаблицаБилетов[0], "Сумма, СуммаНДС");
		Иначе
			СтрокаБилета.Сумма = 0;
			СтрокаБилета.СуммаНДС = 0;
		КонецЕсли;
		
		ЗаполнитьАналитикуЗатратВСтрокеБилета(ЭтотОбъект, СтрокаБилета, ЗначенияСубконтоПоУмолчанию); 			
		
	КонецЕсли;
		
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.БилетыСуммаВсего    = Форма.Билеты.Итог("Сумма");
	Форма.БилетыСуммаНДСВсего = Форма.Билеты.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуБилетовВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Билеты.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Билеты.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Билеты.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("БилетыСчетЗатрат");
	ЭлементыСчетов.Добавить("БилетыПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("БилетыСубконто1");
	ЭлементыСчетов.Добавить("БилетыСубконто2");
	ЭлементыСчетов.Добавить("БилетыСубконто3");
	ЭлементыСчетов.Добавить("БилетыСпособУчетаНДС");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Билет
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыБилет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.Билет",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Счет затрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСчетЗатрат");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.СчетЗатрат",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Субконто БУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	// Субконто БУ скроем если не используется
	
	Для Сч = 2 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// Подразделение затрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыПодразделениеЗатрат");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.ПодразделениеЗатратДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
			
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Способ учета НДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСпособУчетаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Билеты.СпособУчетаНДС",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуЗатратВСтрокеБилета(Форма, СтрокаБилета, ЗначенияПоУмолчанию)
	
	Если ЗначениеЗаполнено(СтрокаБилета.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;	
		
	СтрокаБилета.СчетЗатрат = Форма.СчетЗатрат;
		
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		Форма,
		СтрокаБилета,
		ПараметрыУстановкиСвойствСубконтоТаблицы(Форма));
		
	Если НЕ ЗначениеЗаполнено(СтрокаБилета.СпособУчетаНДС) Тогда
		СтрокаБилета.СпособУчетаНДС  = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоТаблицы(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"БилетыСубконто", "БилетыПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		Форма.СтатьяЗатрат);
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;

КонецФункции

#КонецОбласти