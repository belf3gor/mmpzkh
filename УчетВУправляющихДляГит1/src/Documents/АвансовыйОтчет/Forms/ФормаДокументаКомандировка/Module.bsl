
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвансовыйОтчетФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЕстьСуточные = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	АвансовыйОтчетФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Если докумен ранее был записан без суточных, то и не будем их автоматически заполнять.
	ЕстьСуточные = (Объект.Суточные.Количество() <> 0);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.ПериодКомандировки") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаНачалаКомандировки = ВыбранноеЗначение.ДатаНачала 
			И Объект.ДатаОкончанияКомандировки = ВыбранноеЗначение.ДатаОкончания Тогда
			Возврат;
		КонецЕсли;	
		
		Объект.ДатаНачалаКомандировки = ВыбранноеЗначение.ДатаНачала;
		Объект.ДатаОкончанияКомандировки = ВыбранноеЗначение.ДатаОкончания;
		ПериодКомандировкиПриИзмененииНаСервере();
		Модифицированность = Истина;
				
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.ВыданныеАвансы") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Здесь ВыбранноеЗначение - это адрес таблицы выданных авансов во временном хранилище		
		ЗагрузитьТаблицуАвансов(ВыбранноеЗначение);
				
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.ВыборДокументаАванса") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НовыйАванс = Объект.ВыданныеАвансы.Добавить();
		НовыйАванс.ДокументАванса = ВыбранноеЗначение;
		ОбновитьСуммыАвансов();
		УстановитьТекстВыданныеАвансы(ЭтотОбъект);
		
		ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.Суточные") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Возвращается адрес таблицы расчета суточных во временном хранилище
		ЗагрузитьДанныеСуточных(ВыбранноеЗначение);
		
		ЕстьСуточные = (Объект.Суточные.Количество() <> 0);
		
		ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
		Элементы.СуточныеСуммаСверхНормы.Видимость = (Объект.Суточные.Итог("СуммаСверхНормы") > 0);
		
		Модифицированность = Истина;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.АвансовыйОтчет.Форма.Билеты") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Возвращается адрес таблицы билетов во временном хранилище
		ЗагрузитьТаблицуОбъектаИзВременногоХранилища(ВыбранноеЗначение, "Билеты");
		
		УстановитьТекстБилеты();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	АвансовыйОтчетФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПодразделениеОрганизацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаКомандировкиПриИзменении(Элемент)
	
	ПериодКомандировкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияКомандировкиПриИзменении(Элемент)
	
	ПериодКомандировкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданАвансНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Объект.Организация");
	ПроверяемыеРеквизиты.Добавить("Объект.Дата");
	ПроверяемыеРеквизиты.Добавить("Объект.ФизЛицо");
	
	Если НЕ ПроверитьРеквизитыШапки(ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ДатаАвансовогоОтчета", Объект.Дата);
	ПараметрыФормы.Вставить("ФизЛицо", 				Объект.ФизЛицо);
	ПараметрыФормы.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ТекущийДокумент", 		Объект.Ссылка);
	
	Если Объект.ВыданныеАвансы.Количество() > 0 Тогда
		ИмяФормыАвансов = "Документ.АвансовыйОтчет.Форма.ВыданныеАвансы";
		ПараметрыФормы.Вставить("АдресТаблицыВыданныеАвансы", 
			ПоместитьТаблицуОбъектаВоВременноеХранилище("ВыданныеАвансы"));
	Иначе
		ИмяФормыАвансов = "Документ.АвансовыйОтчет.Форма.ВыборДокументаАванса";
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыАвансов, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеСуммаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Объект.Организация");
	ПроверяемыеРеквизиты.Добавить("Объект.Дата");
	ПроверяемыеРеквизиты.Добавить("Объект.ДатаНачалаКомандировки");
	ПроверяемыеРеквизиты.Добавить("Объект.ДатаОкончанияКомандировки");
	
	Если НЕ ПроверитьРеквизитыШапки(ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
		
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.Суточные",
		ПараметрыФормыСуточные(),
		ЭтотОбъект, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьБилетыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Объект.Организация");
	ПроверяемыеРеквизиты.Добавить("Объект.ФизЛицо");
	ПроверяемыеРеквизиты.Добавить("Объект.ДатаНачалаКомандировки");
	ПроверяемыеРеквизиты.Добавить("Объект.ДатаОкончанияКомандировки");
	
	Если НЕ ПроверитьРеквизитыШапки(ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыБилеты",        ПоместитьТаблицуОбъектаВоВременноеХранилище("Билеты"));
	ПараметрыФормы.Вставить("Организация",               Объект.Организация);
	ПараметрыФормы.Вставить("ФизЛицо",                   Объект.ФизЛицо);
	ПараметрыФормы.Вставить("ТекущийДокумент",           Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаНачалаКомандировки",    Объект.ДатаНачалаКомандировки);
	ПараметрыФормы.Вставить("ДатаОкончанияКомандировки", Объект.ДатаОкончанияКомандировки);
	ПараметрыФормы.Вставить("ВалютаДокумента",           Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("НДСНеВыделять",             Объект.НДСНеВыделять);
	ПараметрыФормы.Вставить("ДатаДокумента",             Объект.Дата);
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.Билеты",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДокументовПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.КоличествоЛистов) Тогда
		Объект.КоличествоЛистов = Объект.КоличествоДокументов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандировочныеРасходы

&НаКлиенте
Процедура КомандировочныеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	ТекущиеДанные.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
						
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыПриИзменении(Элемент)
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыНомерВходящегоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Прочее.НомерВходящегоДокумента", Объект, ТекущиеДанные);
	Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если Изменения.Свойство("СчетЗатрат") Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект,
			ТекущиеДанные,
			АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Прочее.СчетЗатрат", Объект, ТекущиеДанные));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
		
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандировочныеРасходыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачалаКомандировки", Объект.ДатаНачалаКомандировки);
	ПараметрыФормы.Вставить("ДатаОкончанияКомандировки", Объект.ДатаОкончанияКомандировки);
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ПериодКомандировки", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Выплатить(Команда)
	
	Если Команда.Имя = "ВыплатитьПоКассе" Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу");
		ИмяФормыДокумента = "Документ.РасходныйКассовыйОрдер.ФормаОбъекта";
	Иначе
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу");
		ИмяФормыДокумента = "Документ.ПлатежноеПоручение.ФормаОбъекта";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("Организация",       Объект.Организация);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("Контрагент",        Объект.ФизЛицо);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("ВидОперации",       ВидОперации);
	ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента",    - РасчетыСПодотчетнымЛицомИтог);
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ЭтотОбъект); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьСостояниеДокумента();
	
	ЦветФонаИтогов     = ЦветаСтиля.ИтогиФонГруппы;
	ЦветФонаПерерасход = ЦветаСтиля.НекорректныйКонтрагентЦветФонаВСписке;
	ЦветФонаПодсказки  = ЦветаСтиля.ЦветФонаПодсказки;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	УстановитьТекстНадписьДней(НадписьДней, Объект.ДатаНачалаКомандировки, Объект.ДатаОкончанияКомандировки);
	
	// Суточные
	Элементы.СуточныеСуммаСверхНормы.Видимость = (Объект.Суточные.Итог("СуммаСверхНормы") > 0);
	
	// Выданные авансы
	ОбновитьСуммыАвансов();
	УстановитьТекстВыданныеАвансы(ЭтотОбъект);
	
	// Билеты
	УстановитьТекстБилеты();
	
	// Командировочные расходы
	Элементы.ГруппаКомандировочныеРасходыСчетЗатратПодразделениеЗатрат.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"),
		НСтр("ru = 'Счет затрат / Подразделение'"), НСтр("ru = 'Счет затрат'"));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));

	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	АвансовыйОтчетФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ЕстьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Если не предъявлен НДС к вычету, то поля НДС не доступны
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыСуммаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Если НДС к вычету не предъявлен, то поле Поставщик не обязательно
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыПоставщик");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	// Скрыть НДС при применении УСН доходы
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыПоставщик");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Субконто БУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	// Субконто БУ скроем если не используется
	
	Для Сч = 2 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// ПрочееПодразделениеЗатрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КомандировочныеРасходыПодразделениеЗатрат");
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"Объект.Прочее.ПодразделениеЗатратДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	
	Если Объект.НДСНеВыделять <> ПрименяетсяУСНДоходы Тогда
		Объект.НДСНеВыделять = ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Выданные авансы
	ЗаполнитьАвансы();
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзменения = Новый Массив();
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
				
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	
	Если Объект.НДСНеВыделять <> ПрименяетсяУСНДоходы Тогда
		Объект.НДСНеВыделять = ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Суточные
	НормыСуточных = Неопределено;
	Если ЕстьСуточные Тогда
		Документы.АвансовыйОтчет.УстановитьРасчетСуточныхПоУмолчанию(Объект, НормыСуточных);
		Элементы.СуточныеСуммаСверхНормы.Видимость = (Объект.Суточные.Итог("СуммаСверхНормы") > 0);
	КонецЕсли;
	
	// Выданные авансы
	ЗаполнитьАвансы();
	
	// Билеты
	ЗаполнитьБилетыНаСервере();
	УстановитьТекстБилеты();
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
						
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("ПодразделениеОрганизации", Объект));
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	
	// Выданные авансы
	ЗаполнитьАвансы();
	
	// Билеты
	ЗаполнитьБилетыНаСервере();
	УстановитьТекстБилеты();
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПериодКомандировкиПриИзмененииНаСервере()
	
	УстановитьТекстНадписьДней(НадписьДней, Объект.ДатаНачалаКомандировки, Объект.ДатаОкончанияКомандировки);
	
	// Суточные
	Если ЕстьСуточные Тогда
		
		Документы.АвансовыйОтчет.УстановитьРасчетСуточныхПоУмолчанию(Объект, НормыСуточных);
		Элементы.СуточныеСуммаСверхНормы.Видимость = (Объект.Суточные.Итог("СуммаСверхНормы") > 0);
				
	КонецЕсли;
	
	// Билеты
	ЗаполнитьБилетыНаСервере();
	УстановитьТекстБилеты();
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьРеквизитыШапки(ПроверяемыеРеквизиты)
	
	ТекстыОшибок = Новый Соответствие;
	
	ТекстыОшибок.Вставить("Организация", Нстр("ru='Укажите организацию'"));
	ТекстыОшибок.Вставить("Дата", Нстр("ru='Укажите дату авансового отчета'"));
	ТекстыОшибок.Вставить("ФизЛицо", Нстр("ru='Укажите сотрудника'"));
	ТекстыОшибок.Вставить("ДатаНачалаКомандировки", Нстр("ru='Укажите дату начала командировки'"));
	ТекстыОшибок.Вставить("ДатаОкончанияКомандировки", Нстр("ru='Укажите дату окончания командировки'"));
	
	Ошибки = Неопределено;
	
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит;
		Если Найти(Реквизит, "Объект.") Тогда
			
			ИмяРеквизита = СтрЗаменить(Реквизит, "Объект.", "");
			
			Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, 
					Реквизит,
					ТекстыОшибок[ИмяРеквизита],
					"");
			КонецЕсли;	
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, 
					ИмяРеквизита,
					ТекстыОшибок[ИмяРеквизита],
					"");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат (Ошибки = Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписьДней(НадписьДней, ДатаНачалаКомандировки, ДатаОкончанияКомандировки)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаКомандировки) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончанияКомандировки) Тогда
		НадписьДней = "";
		Возврат;
	КонецЕсли; 
	
	// Должна получиться строка вида:
	// 10 дней"
	ТекстШаблон = Нстр("ru='%1 %2'");
	
	ПродолжительностьОбщая = УчетКомандировокКлиентСервер.ПродолжительностьПериодаВДнях(ДатаНачалаКомандировки, ДатаОкончанияКомандировки, Истина);  // в днях, считая день начала и окончания
	
	НадписьДней = СтрШаблон(
		ТекстШаблон,
		ПродолжительностьОбщая,
		СтрокаСЧислом(Нстр("ru = '; день; ; дня; дней; дня'"),
			ПродолжительностьОбщая,
			ВидЧисловогоЗначения.Количественное,
			"L=ru"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстВыданныеАвансы(Форма)
	
	ВыданныеАвансыВсего = Форма.ВыданныеАвансыВсего;
	
	Если Форма.Объект.ВыданныеАвансы.Количество() = 0 Тогда
		Форма.НадписьВыданныеАвансы = Нстр("ru='Добавить'");
		Форма.Элементы.ВалютаДокументаАванс.Видимость = Ложь; 
	Иначе
		Форма.НадписьВыданныеАвансы = Формат(ВыданныеАвансыВсего, "ЧДЦ=2; ЧН=");
		Форма.Элементы.ВалютаДокументаАванс.Видимость = Форма.ЕстьВалютныйУчет; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыАвансов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// Запрос ниже выбирает остатки предыдущих авансов на дату авансового отчета, а также авансы по текущей командировке. 
	// Для расчета предыдущих авансов учитываются:
	// (1) Остатки регистра бухгалтерии на дату авансового отчета.
	// (2) Суммы расходов по текущему документу, которые повлияли на остатки регистра в (1). Так как расходы по авансовому отчету уменьшают остаток авансов,
	//	   то такие суммы нужно добавить обратно, чтобы исключить их влияние на остаток.
	// 	   Во 2-м и 3-м подзапросах объединения выбираются именно такие суммы, а условие вида "АвансовыйОтчетСуточные.Ссылка.Дата < &Период" гарантирует,
	//	   что эти движения повлияли на остатки из (1). Это условие необходимо, если в проведенном авансовом отчете дата меняется на более позднюю.
	// (3) Суммы авансов по текущей командировке, которые повлияли на остатки регистра в (1). 
	//	   Аналогично (2), только такие суммы нужно вычесть, т.к. они завысили остаток предыдущих авансов из (1).
	//	   Документы авансов могли быть распроведены после того, как были выбраны в таблице авансов. 
	//	   Поэтому используем конструкцию вида "ВЫБОР КОГДА ...Проведен... ИНАЧЕ 0 КОНЕЦ".
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Авансы.ОстатокПрошлыхАвансов), 0) КАК ОстатокПрошлыхАвансов,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаВыданныхАвансов), 0) КАК ВыданныеАвансыВсего
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.СуммаОстаток КАК ОстатокПрошлыхАвансов,
	|		0 КАК СуммаВыданныхАвансов
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В (&СчетаРасчетовСПодотчетнымиЛицами),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций),
	|				Организация = &Организация
	|					И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетСуточные.Сумма,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчетСуточные
	|	ГДЕ
	|		АвансовыйОтчетСуточные.Ссылка = &Ссылка
	|		И АвансовыйОтчетСуточные.Ссылка.Проведен
	|		И АвансовыйОтчетСуточные.Ссылка.Дата < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетПрочее.Сумма,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|	ГДЕ
	|		АвансовыйОтчетПрочее.Ссылка = &Ссылка
	|		И АвансовыйОтчетПрочее.Ссылка.Проведен
	|		И АвансовыйОтчетПрочее.Ссылка.Дата < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.Проведен И СписаниеСРасчетногоСчета.Дата < &Период
	|				ТОГДА -СписаниеСРасчетногоСчета.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		СписаниеСРасчетногоСчета.СуммаДокумента
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ВыданныеАвансы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РасходныйКассовыйОрдер.Проведен И РасходныйКассовыйОрдер.Дата < &Период
	|				ТОГДА -РасходныйКассовыйОрдер.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		РасходныйКассовыйОрдер.СуммаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ГДЕ
	|		РасходныйКассовыйОрдер.Ссылка В(&ВыданныеАвансы)) КАК Авансы";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Сотрудник", Объект.ФизЛицо);
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	Запрос.УстановитьПараметр("ВыданныеАвансы", Объект.ВыданныеАвансы.Выгрузить().ВыгрузитьКолонку("ДокументАванса")); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвансы()
	
	Объект.ВыданныеАвансы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ФизЛицо)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ОбновитьСуммыАвансов();
		УстановитьТекстВыданныеАвансы(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	НайденныеДокументыОплаты = УчетКомандировок.ДокументыВыплатыПодотчетномуЛицу(
		Объект.Организация,
		Объект.Дата,
		Объект.ФизЛицо,
		Объект.ВалютаДокумента,
		Объект.Ссылка,
		1,
		Истина);
		
	Для Каждого ДокументАванса Из НайденныеДокументыОплаты Цикл
		НовыйАванс = Объект.ВыданныеАвансы.Добавить();
		НовыйАванс.ДокументАванса = ДокументАванса.Ссылка;
	КонецЦикла;
	
	ОбновитьСуммыАвансов();
	УстановитьТекстВыданныеАвансы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуАвансов(АдресТаблицыВоВременномХранилище)
	
	ЗагрузитьТаблицуОбъектаИзВременногоХранилища(АдресТаблицыВоВременномХранилище, "ВыданныеАвансы");
	
	ОбновитьСуммыАвансов();
	УстановитьТекстВыданныеАвансы(ЭтотОбъект);
	
	ОбновитьРасчетОбщегоИтога(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыСуточные()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыСуточные",      ПоместитьТаблицуОбъектаВоВременноеХранилище("Суточные"));
	ПараметрыФормы.Вставить("Организация",               Объект.Организация);
	ПараметрыФормы.Вставить("ФизЛицо",                   Объект.ФизЛицо);
	ПараметрыФормы.Вставить("ДатаНачалаКомандировки",    Объект.ДатаНачалаКомандировки);
	ПараметрыФормы.Вставить("ДатаОкончанияКомандировки", Объект.ДатаОкончанияКомандировки);
	ПараметрыФормы.Вставить("ВалютаДокумента",           Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("НормыСуточных",             НормыСуточных(ЭтотОбъект));
	ПараметрыФормы.Вставить("ДатаДокумента",             Объект.Дата);
	
	ПараметрыФормы.Вставить("СчетЗатрат",          		 Объект.СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", 		 Объект.ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           		 Объект.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           		 Объект.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           		 Объект.Субконто3);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция НормыСуточных(Форма)
	
	Если Форма.НормыСуточных = Неопределено Тогда
		Форма.НормыСуточных = УчетКомандировок.НормыСуточных(Форма.Объект.Организация, Форма.Объект.Дата);
	КонецЕсли; 
	
	Возврат Форма.НормыСуточных;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстБилеты()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБилеты") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Билеты.Количество() = 0 Тогда
		НадписьБилеты = Новый ФорматированнаяСтрока(Нстр("ru='Нет'"),,,, "Билеты");
	    Возврат;
	КонецЕсли;
	
	ВалютаДокумента = "";
	Если ЕстьВалютныйУчет Тогда
		ВалютаДокумента = Объект.ВалютаДокумента;
	КонецЕсли;
	
	ШаблонИтога = Нстр("ru='%1 %2 на сумму %3 %4'"); // например, "2 билета на сумму 32 500 руб"
	ОписаниеИтога = СтрШаблон(
		ШаблонИтога,
		Объект.Билеты.Количество(),
		СтрокаСЧислом(НСтр("ru='; билет; ; билета; билетов; билета'"),
			Объект.Билеты.Количество(),
			ВидЧисловогоЗначения.Количественное,
			"L=ru_RU"),
		Формат(Объект.Билеты.Итог("Сумма"), "ЧДЦ=2; ЧН="),
		ВалютаДокумента);
				
	ОписаниеИтога = Новый ФорматированнаяСтрока(СокрЛП(ОписаниеИтога),,,,"Билеты");
	
	ШаблонОписанияБилета = Нстр("ru='%1, %2'");
	
	РеквизитыБилетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Объект.Билеты.Выгрузить().ВыгрузитьКолонку("Билет"),
		"ДатаОтправления, Маршрут");
		
	МассивСтрок = Новый Массив;
		
	Для каждого СтрокаБилета Из Объект.Билеты Цикл
		
		// Для каждого билета формируем описание вида "[маршрут], [дата отправления]".
		// Например, "Москва - Сочи, 04.09.2018".
		
		РеквизитыБилета = РеквизитыБилетов[СтрокаБилета.Билет];
		
		Если РеквизитыБилета = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ЧастиОписания = Новый Массив;
		
		Если НЕ ПустаяСтрока(РеквизитыБилета.Маршрут) Тогда
			ЧастиОписания.Добавить(РеквизитыБилета.Маршрут);
		КонецЕсли;	
					
		ЧастиОписания.Добавить(Формат(РеквизитыБилета.ДатаОтправления, "ДЛФ=D"));
			
		МассивСтрок.Добавить(СтрСоединить(ЧастиОписания, Нстр("ru=', '")));
			
	КонецЦикла;
	
	ОписаниеБилетов = СтрСоединить(МассивСтрок, Нстр("ru='; '"));
	
	// В итоге должно получиться описание вида 
	// "2 билета на сумму 32 500 руб (Москва - Сочи, 04.09.2018; Сочи - Москва, 11.09.2018)".
	// Только часть описания ("2 билета на сумму 32 500 руб") выводится гиперссылкой, потому что короткая гиперссылка выглядит лучше.
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ОписаниеИтога);
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(СтрШаблон("(%1)", ОписаниеБилетов));
	
	НадписьБилеты = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБилетыНаСервере()
	
	Объект.Билеты.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаКомандировки)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияКомандировки)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБилеты") Тогда
		Возврат;
	КонецЕсли;
		
	Объект.Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
		Объект.Организация,
		Объект.ДатаНачалаКомандировки,
		Объект.ДатаОкончанияКомандировки,
		,
		Объект.ФизЛицо,
		Объект.Ссылка));
		
	СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.Билеты, "Билеты", Объект, Документы.АвансовыйОтчет);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРасчетОбщегоИтога(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ВалютаДокумента = "";
	Если Форма.ЕстьВалютныйУчет Тогда
		ВалютаДокумента = Объект.ВалютаДокумента;
	КонецЕсли;
	
	ОстатокПрошлыхАвансов = Форма.ОстатокПрошлыхАвансов;
	ВыданныеАвансыВсего = Форма.ВыданныеАвансыВсего;
	
	ТекстОстаток = Нстр("ru='Остаток'");
	ТекстПерерасход = Нстр("ru='Перерасход'");
	
	ЗаголовкиБлоков = Новый Структура;
	// Расчет общего итога состоит из 4 слагаемых/вычитаемых:
	// 1. Предыдущий аванс (остаток/перерасход)
	ХарактеристикиБлока = Новый Структура;
	ТекстОстатокПерерасход = НРег(?(ОстатокПрошлыхАвансов >= 0, ТекстОстаток, ТекстПерерасход));
	ХарактеристикиБлока.Вставить("Заголовок", СтрШаблон(Нстр("ru='Предыдущий аванс (%1)'"), ТекстОстатокПерерасход));
	ХарактеристикиБлока.Вставить("Сумма", ОстатокПрошлыхАвансов);
	ХарактеристикиБлока.Вставить("ЦветФона", ?(ОстатокПрошлыхАвансов >= 0, Форма.ЦветФонаПодсказки, Форма.ЦветФонаПерерасход));
	ЗаголовкиБлоков.Вставить("ПредыдущийАванс", ХарактеристикиБлока);
	
	// 2. Получен аванс
	ХарактеристикиБлока = Новый Структура; 
	ХарактеристикиБлока.Вставить("Заголовок", Нстр("ru='Аванс'"));
	ХарактеристикиБлока.Вставить("Сумма", ВыданныеАвансыВсего);
	ЗаголовкиБлоков.Вставить("Аванс", ХарактеристикиБлока);
	
	// 3. Суточные
	ХарактеристикиБлока = Новый Структура; 
	ХарактеристикиБлока.Вставить("Заголовок", Нстр("ru='Суточные'"));
	ХарактеристикиБлока.Вставить("Сумма", Объект.Суточные.Итог("Сумма"));
	ЗаголовкиБлоков.Вставить("Суточные", ХарактеристикиБлока);
	
	// 4. Расходы
	ХарактеристикиБлока = Новый Структура; 
	ХарактеристикиБлока.Вставить("Заголовок", Нстр("ru='Расходы'"));
	ХарактеристикиБлока.Вставить("Сумма", Объект.Прочее.Итог("Сумма"));
	ЗаголовкиБлоков.Вставить("Расходы", ХарактеристикиБлока);
	
	// ОБЩИЙ ИТОГ
	Форма.РасчетыСПодотчетнымЛицомИтог = ОстатокПрошлыхАвансов
		+ ВыданныеАвансыВсего 
		- Объект.Суточные.Итог("Сумма")
		- Объект.Прочее.Итог("Сумма");
		
	ХарактеристикиБлока = Новый Структура;
	ХарактеристикиБлока.Вставить("Заголовок", ?(Форма.РасчетыСПодотчетнымЛицомИтог >= 0, ТекстОстаток, ТекстПерерасход));
	ХарактеристикиБлока.Вставить("Сумма", ?(Форма.РасчетыСПодотчетнымЛицомИтог >= 0, Форма.РасчетыСПодотчетнымЛицомИтог, - Форма.РасчетыСПодотчетнымЛицомИтог));
	ХарактеристикиБлока.Вставить("ЦветФона", ?(Форма.РасчетыСПодотчетнымЛицомИтог >= 0, Форма.ЦветФонаПодсказки, Форма.ЦветФонаПерерасход));
	ЗаголовкиБлоков.Вставить("Итог", ХарактеристикиБлока);
	
	Для Каждого КлючИЗначение Из ЗаголовкиБлоков Цикл
		
		ИмяБлока = КлючИЗначение.Ключ;
		ОписаниеБлока = КлючИЗначение.Значение;
		
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(ОписаниеБлока.Заголовок);
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(СтрШаблон(Нстр("ru='%1 %2'"), Формат(ОписаниеБлока.Сумма, "Л=ru_RU; ЧДЦ=2; ЧН="), ВалютаДокумента));
		
		Элементы["Блок" + ИмяБлока].Заголовок = СокрЛП(СтрСоединить(ЧастиЗаголовка));
		
		Если ОписаниеБлока.Свойство("ЦветФона") Тогда
			Элементы["Блок" + ИмяБлока].ЦветФона = ОписаниеБлока.ЦветФона;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаВыплатить.Доступность = (Форма.РасчетыСПодотчетнымЛицомИтог < 0);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуОбъектаВоВременноеХранилище(ИмяТаблицы)
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТаблицуОбъектаИзВременногоХранилища(АдресТаблицы, ИмяТаблицы)
	
	ТаблицаОбъекта = ПолучитьИзВременногоХранилища(АдресТаблицы);
	Объект[ИмяТаблицы].Загрузить(ТаблицаОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСуточных(ВыбранноеЗначение)
	
	ДанныеСуточных = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	Объект.Суточные.Загрузить(ДанныеСуточных.Суточные);
	
	Объект.СчетЗатрат          = ДанныеСуточных.СчетЗатрат;
	Объект.ПодразделениеЗатрат = ДанныеСуточных.ПодразделениеЗатрат;
	Объект.Субконто1           = ДанныеСуточных.Субконто1;
	Объект.Субконто2           = ДанныеСуточных.Субконто2;
	Объект.Субконто3           = ДанныеСуточных.Субконто3;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("КомандировочныеРасходыСчетЗатрат");
	ЭлементыСчетов.Добавить("КомандировочныеРасходыПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("КомандировочныеРасходыСубконто1");
	ЭлементыСчетов.Добавить("КомандировочныеРасходыСубконто2");
	ЭлементыСчетов.Добавить("КомандировочныеРасходыСубконто3");
	ЭлементыСчетов.Добавить("КомандировочныеРасходыСпособУчетаНДС");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.КомандировочныеРасходы.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект,
		СтрокаТаблицы,
		НомерСубконто,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.КомандировочныеРасходы.ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "КомандировочныеРасходы", , Ложь));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
