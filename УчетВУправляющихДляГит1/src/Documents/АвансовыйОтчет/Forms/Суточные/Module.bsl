
#Область ОписаниеПеременных

&НаКлиенте
Перем ДействиеВыбрано;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, 
		"Организация,
		|ДатаНачалаКомандировки, 
		|ДатаОкончанияКомандировки,
		|НормыСуточных,
		|ВалютаДокумента,
		|ДатаДокумента,
		|СчетЗатрат,
		|ПодразделениеЗатрат,
		|Субконто1,
		|Субконто2,
		|Субконто3");
		
	Суточные.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыСуточные));
	
	ОбновитьИтоги(ЭтотОбъект);
	УстановитьУсловноеОформление();
	УстановитьВидимостьСчетовУчета();
	
	Если Элементы.НадписьСчетЗатрат.Видимость Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("СчетЗатрат",              СчетЗатрат);
		ДанныеСтроки.Вставить("ПодразделениеЗатрат",     ПодразделениеЗатрат);
		ДанныеСтроки.Вставить("Субконто1",               Субконто1);
		ДанныеСтроки.Вставить("Субконто2",               Субконто2);
		ДанныеСтроки.Вставить("Субконто3",               Субконто3);
		ДанныеСтроки.Вставить("АналитикаУчета",          Неопределено);
		ДанныеСтроки.Вставить("АналитикаУчетаЗаполнена", Неопределено);
		
		УстановитьТекстНадписьСчетЗатрат(НадписьСчетЗатрат, ДанныеСтроки);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	ДатаНачала = ДатаНачалаКомандировки; // ожидаемая дата начала каждого отдельного сегмента командировки
	ШаблонОшибкаНеполныйРасчет = Нстр("ru='Не введены данные за период с %1 по %2'");
	
	Для Каждого СтрокаРасчета Из Суточные Цикл
		
		ИндексСтроки = Суточные.Индекс(СтрокаРасчета);
				
		// Дата окончания должна быть указана
		Если НЕ ЗначениеЗаполнено(СтрокаРасчета.ДатаОкончания) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Суточные[%1].ДатаОкончания",
				Нстр("ru='Не указана дата окончания'"),
				"",
				ИндексСтроки);
				
		КонецЕсли;		
		
		// Дата окончания не должна быть ранее даты начала
		Если ЗначениеЗаполнено(СтрокаРасчета.ДатаОкончания) И СтрокаРасчета.ДатаОкончания < СтрокаРасчета.ДатаНачала Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Суточные[%1].ДатаОкончания",
				Нстр("ru='Дата окончания не должна быть ранее даты начала'"),
				"",
				ИндексСтроки);
				
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ДатаНачала) И СтрокаРасчета.ДатаНачала > ДатаНачала Тогда
			// Есть "разрыв" между сегментами командировки
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Суточные[%1].ДатаОкончания",
				СтрШаблон(ШаблонОшибкаНеполныйРасчет, Формат(ДатаНачала, "ДЛФ=D"), Формат(СтрокаРасчета.ДатаНачала, "ДЛФ=D")),
				"",
				ИндексСтроки);
		КонецЕсли;	
		
		ДатаНачала = СтрокаРасчета.ДатаОкончания; // ожидаемая дата начала следующего сегмента
		
	КонецЦикла;	
		
	// Проверим, что последний сегмент заканчивается в день окончания командировки.
	// ДатаНачала здесь равна дате окончания последнего сегмента (см. цикл выше).
	Если Суточные.Количество() > 0 И ЗначениеЗаполнено(ДатаНачала) И ДатаОкончанияКомандировки > ДатаНачала Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			"Суточные[%1].ДатаОкончания",
			СтрШаблон(ШаблонОшибкаНеполныйРасчет, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончанияКомандировки, "ДЛФ=D")),
			"",
			Суточные.Количество() - 1);
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если ДействиеВыбрано <> Истина Тогда
		ОповеститьОВыборе(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСуточные

&НаКлиенте
Процедура СуточныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	ТекущиеДанные.ДатаОкончания = ДатаОкончанияКомандировки; // дата начала будет рассчитана ниже (см. РассчитатьСуточныеСервер())
	
	Если НЕ Копирование Тогда
		// По умолчанию новая строка - командировка по России
		ТекущиеДанные.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		ТекущиеДанные.Норма = НормыСуточных.НормаПоРФ;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РассчитатьСуточные", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РассчитатьСуточные", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	// Запрещено удалять служебную строку
	Отказ = ТекущиеДанные.СлужебныйРасчет; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеПослеУдаления(Элемент)
	
	РассчитатьСуточныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеСтранаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	ПрежнееЗначение = ТекущиеДанные.ЗаРубежом;
	ТекущиеДанные.ЗаРубежом = ЗначениеЗаполнено(ТекущиеДанные.Страна) 
		И (ТекущиеДанные.Страна <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
		
	Если ТекущиеДанные.ЗаРубежом = ПрежнееЗначение Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные.Норма = ?(ТекущиеДанные.ЗаРубежом, НормыСуточных.НормаЗаРубежом, НормыСуточных.НормаПоРФ);
	РассчитатьСуточныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеСтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СуточныеДатаОкончанияПриИзменении(Элемент)
	РассчитатьСуточныеСервер();
КонецПроцедуры

&НаКлиенте
Процедура СуточныеДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	Если ВыбранноеЗначение = ТекущиеДанные.ДатаОкончания Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	ПриВыбореДаты(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеДатаОкончанияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВыбранноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Текст);
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;	
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	Если ВыбранноеЗначение = ТекущиеДанные.ДатаОкончания Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	ПриВыбореДаты(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеНормаПриИзменении(Элемент)
	
	РассчитатьСуточныеВСтроке(Элементы.Суточные.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуточныеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Суточные.ТекущиеДанные;
	
	НормаНеоблагаемая = ?(ТекущиеДанные.ЗаРубежом, 
		НормыСуточных.НормаЗаРубежомНеОблагаемая,
		НормыСуточных.НормаПоРФНеОблагаемая);
	ТекущиеДанные.СуммаСверхНормы = ТекущиеДанные.Сумма - ТекущиеДанные.КоличествоДней * НормаНеоблагаемая;
	
	Если ТекущиеДанные.КоличествоДней <> 0 Тогда
		ТекущиеДанные.Норма = ТекущиеДанные.Сумма / ТекущиеДанные.КоличествоДней;
	КонецЕсли;	
		
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СуточныеСправка(Команда)
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ОписаниеРасчетаСуточных",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(ПоместитьДанныеСуточныхВоВременноеХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ДействиеВыбрано = Истина;
	ОповеститьОВыборе(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// День возвращения из зарубежной командировки (служебная строка) оформляется особенным образом
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуточныеСтрана");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуточныеДатаОкончания");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Суточные.СлужебныйРасчет", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("НадписьСчетЗатрат");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуточные()
	
	РассчитатьСуточныеСервер();	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуточныеСервер()
	
	УчетКомандировок.РассчитатьСуточные(
		Суточные,
		ДатаНачалаКомандировки,
		ДатаОкончанияКомандировки,
		НормыСуточных);
		
	Суточные.Сортировать("Порядок");
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореДаты(ВыбраннаяДата, СтандартнаяОбработка)
	
	Если ВыбраннаяДата > ДатаОкончанияКомандировки ИЛИ ВыбраннаяДата < ДатаНачалаКомандировки Тогда
		
		СтандартнаяОбработка = Ложь;
		ШаблонСообщения = Нстр("ru='Выбранная дата находится вне периода командировки (%1 - %2)'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения,
				Формат(ДатаНачалаКомандировки, "ДЛФ=D"),
				Формат(ДатаОкончанияКомандировки, "ДЛФ=D")));
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуточныеВСтроке(ТекущаяСтрока)
	
	Однодневная = (ТекущаяСтрока.ДатаНачала = ТекущаяСтрока.ДатаОкончания)
		И НЕ ТекущаяСтрока.СлужебныйРасчет;
	
	УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(
		ТекущаяСтрока,
		Однодневная,
		НормыСуточных);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.СуммаИтог           = Форма.Суточные.Итог("Сумма");
	Форма.СуммаСверхНормыИтог = Форма.Суточные.Итог("СуммаСверхНормы");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеСуточныхВоВременноеХранилище()
	
	ДанныеСуточных = Новый Структура;
	ДанныеСуточных.Вставить("Суточные",            Суточные.Выгрузить());
	ДанныеСуточных.Вставить("СчетЗатрат",          СчетЗатрат);
	ДанныеСуточных.Вставить("ПодразделениеЗатрат", ПодразделениеЗатрат);
	ДанныеСуточных.Вставить("Субконто1",           Субконто1);
	ДанныеСуточных.Вставить("Субконто2",           Субконто2);
	ДанныеСуточных.Вставить("Субконто3",           Субконто3);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСуточных, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СчетЗатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияСчетаЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетаЗатрат()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",      ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",                ДатаДокумента);
	ПараметрыФормы.Вставить("Организация",         Организация);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "КомандировочныеРасходы");
	
	ПараметрыФормы.Вставить("СчетЗатрат",          СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           Субконто3);
	ПараметрыФормы.Вставить("НДСВключенВСтоимость",Истина);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)
	
	// Заполним текст надписи "НадписьСчетЗатрат"
	ДанныеСтроки = Новый Структура("СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|ПодразделениеЗатрат,
		|АналитикаУчета, АналитикаУчетаЗаполнена");
	
	// Заполним НадписьСчетЗатрат
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	УстановитьТекстНадписьСчетЗатрат(НадписьСчетЗатрат, ДанныеСтроки);
	
	// Заполним счета затрат и аналитику.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьТекстНадписьСчетЗатрат(НадписьСчетЗатрат, ДанныеСтроки)
	
	АналитикаУчетаТекст     = "";
	АналитикаУчетаЗаполнена = Истина;
	
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СтроковыеПредставленияСубконто = Новый Структура();
	
	Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
			СвойстваСчета       = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
			
			АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
					ТекстСтроки         = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПодразделениеЗатрат, "Наименование");
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ТекстСтроки;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЕсли;
			
			Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
				ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ПредставлениеСубконто = "";
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Продолжить;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ЗначениеСубконто);
					КонецЕсли;
					
					СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
					СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
					
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			АналитикаУчетаТекст     = АналитикаУчетаТекст + ", <...>";
			АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.АналитикаУчета          = Сред(АналитикаУчетаТекст, 3);
	ДанныеСтроки.АналитикаУчетаЗаполнена = АналитикаУчетаЗаполнена;
	
	НадписьСчетЗатрат                    = ДанныеСтроки.АналитикаУчета;
	
КонецПроцедуры

#КонецОбласти