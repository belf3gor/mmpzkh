#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвансовыйОтчетФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ВыданныеАвансы",    "ВыданныеАвансы");
	СписокТабличныхЧастей.Добавить("Товары",            "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара",    "ВозвратнаяТара");
	СписокТабличныхЧастей.Добавить("ОплатаПоставщикам", "ОплатаПоставщикам");
	СписокТабличныхЧастей.Добавить("Прочее",            "Прочее");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтотОбъект, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтотОбъект, АктивизироватьТабличнуюЧасть);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.АвансовыйОтчет",
		"ФормаДокумента",
		НСтр("ru='Новости: Авансовый отчет'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	АвансовыйОтчетФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеАвансовыйОтчет";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("РегистрироватьСчетаФактурыСпецРежимы", ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы"));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	АвансовыйОтчетФормы.УстановитьЗаголовокФормы(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ИтогАвансов = Объект.ВыданныеАвансы.Итог("СуммаАванса");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(
			Объект.Ссылка,
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("РегистрироватьСчетаФактурыСпецРежимы") И
		ПараметрыЗаписи.РегистрироватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в валюте, то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьДоговорыВВалюте;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПодразделениеОрганизацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПерезаполнитьАвансы();
	КонецЕсли;
	
	// Перезаполним таблицу билетов
	Если Объект.Билеты.Количество() > 0 Тогда
		ЗаполнитьБилетыНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДокументовПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.КоличествоЛистов) Тогда
		Объект.КоличествоЛистов = Объект.КоличествоДокументов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыданныеАвансы

&НаКлиенте
Процедура ВыданныеАвансыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументАвансаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВыданныеАвансы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументАванса) Тогда
		СтрокаТаблицы.СуммаАванса = 0;
		СтрокаТаблицы.Валюта      = Неопределено;
	Иначе
		ЗначенияРеквизитов = ЗначенияРеквизитовИзДокументаАванса(СтрокаТаблицы.ДокументАванса, ЗначениеЗаполнено(Объект.ФизЛицо));
		
		СтрокаТаблицы.СуммаАванса = ЗначенияРеквизитов.СуммаДокумента;
		СтрокаТаблицы.Валюта      = ЗначенияРеквизитов.ВалютаДокумента;
		
		Если ЗначенияРеквизитов.Свойство("ФизЛицо") Тогда
			Объект.ФизЛицо = ЗначенияРеквизитов.ФизЛицо;
		ИначеЕсли ЗначенияРеквизитов.Свойство("Контрагент") Тогда
			Объект.ФизЛицо = ЗначенияРеквизитов.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыОтбораДокументАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыОтбораДокументАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументАвансаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		ПервыйДокумент       = Истина;
		СтрокаТаблицы = Элементы.ВыданныеАвансы.ТекущиеДанные;
		Для каждого ДокументАванса Из ВыбранноеЗначение Цикл
			ЗначенияРеквизитов = ЗначенияРеквизитовИзДокументаАванса(ДокументАванса, Ложь);
			Если ПервыйДокумент Тогда
				Объект.ФизЛицо = ЗначенияРеквизитов.Контрагент;
			Иначе
				Если Объект.ФизЛицо <> ЗначенияРеквизитов.Контрагент Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = Объект.ВыданныеАвансы.Добавить();
			КонецЕсли;
			
			СтрокаТаблицы.ДокументАванса = ДокументАванса;
			СтрокаТаблицы.СуммаАванса    = ЗначенияРеквизитов.СуммаДокумента;
			СтрокаТаблицы.Валюта         = ЗначенияРеквизитов.ВалютаДокумента;
			
			ПервыйДокумент = Ложь;
		КонецЦикла;
		
		Элементы.ВыданныеАвансы.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		УстановитьПараметрыОтбораДокументАванса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, ПредъявленСФ,
		|НомерГТД, СтранаПроисхождения, ОтражениеВУСН, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Материалы");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Материалы");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Количество);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.Цена = 0;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / РасчетноеКоличество;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредъявленСФПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ПредъявленСФ Тогда
		ТекущиеДанные.ДатаСФ      = '00010101';
		ТекущиеДанные.НомерСФ     = "";
		ТекущиеДанные.СчетФактура = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Товары.ПредъявленСФ", Объект, ТекущиеДанные);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетФактураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
		ПроверитьВыбраннуюСчетФактуру(СтрокаТаблицы, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Товары);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаСФПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособУчетаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.СпособучетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Списывается")
		И ТекущиеДанные.ПредъявленСФ Тогда
		ТекущиеДанные.ПредъявленСФ = Ложь;
		ТекущиеДанные.ДатаСФ      = '00010101';
		ТекущиеДанные.НомерСФ     = "";
		ТекущиеДанные.СчетФактура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СчетУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ВозвратнаяТара");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ВозвратнаяТара");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		СтрокаТаблицы.Цена = 0;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	// Передадим данные на сервер
	ДанныеОбъекта = Новый Структура;
	ДанныеСтроки  = Новый Структура;
	
	// - для заполнения договора
	ДанныеОбъекта.Вставить("Организация");
	ДанныеСтроки.Вставить("Контрагент");
	ДанныеСтроки.Вставить("ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки,  СтрокаТаблицы);
	
	// - для заполнения счетов
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("ВозвратнаяТара.Контрагент");
	ПричиныИзменения.Добавить("ВозвратнаяТара.ДоговорКонтрагента"); // Может измениться в ходе серверного вызова
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ДанныеОбъекта,
		ДанныеСтроки);
	
	// Получим данные с сервера
	Изменения = ВозвратнаяТараКонтрагентПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтроки, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.ВозвратнаяТара);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараДоговорКонтрагентаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Контрагент",
		Объект,
		Элементы.ВозвратнаяТара.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПоставщикамПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(Элементы.ОплатаПоставщикам.ТекущиеДанные);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура("Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка,
		|СпособПогашенияЗадолженности, Сумма, СуммаВзаиморасчетов,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("ОплатаПоставщикам.Контрагент");
	ПричиныИзменения.Добавить("ОплатаПоставщикам.ДоговорКонтрагента"); // Может быть изменен в ходе серверного вызова
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ДанныеОбъекта,
		ДанныеСтрокиТабличнойЧасти);
	
	ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.ОплатаПоставщикам);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура("Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СпособПогашенияЗадолженности, Сделка,
		|Сумма, СуммаВзаиморасчетов,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаПлатеж);
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОплатаПоставщикам.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж,
		ДанныеОбъекта,
		ДанныеСтрокиТабличнойЧасти);
	
	ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(
		ДанныеСтрокиТабличнойЧасти,
		ДанныеОбъекта,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтрокиТабличнойЧасти);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	ЕстьДоговорыВВалюте          = ЕстьДоговорыВВалюте
		ИЛИ СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если СтрокаТаблицы.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаТаблицы.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОплатаПоставщикам.СпособПогашенияЗадолженности",
		Объект,
		СтрокаТаблицы);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета",             ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыОбъекта.Вставить("ТипыДокументов",
		"Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатежа = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатежа.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатежа.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатежа.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатежа", СтрокаПлатежа);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбораЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБилеты

&НаКлиенте
Процедура БилетыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Билеты", , Ложь));
		
КонецПроцедуры

&НаКлиенте
Процедура БилетыБилетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Билет) Тогда
		
		ЗаполнитьБилетыНаСервере(Элементы.Билеты.ТекущаяСтрока);
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект,
			ТекущиеДанные,
			АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Билеты", , Ложь));
		
	Иначе
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.СуммаНДС = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Билеты.ТекущиеДанные;
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Билеты.СчетЗатрат", Объект, ТекущиеДанные));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Билеты", , Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоБилеты(1);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоБилеты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоБилеты(2);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоБилеты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоБилеты(3);
	
КонецПроцедуры

&НаКлиенте
Процедура БилетыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоБилеты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

&НаКлиенте
Процедура ПрочееПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПередНачаломИзменения(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
		
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Не НоваяСтрока Или Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.НДСНеВыделять Тогда
		ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетФактураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
		ПроверитьВыбраннуюСчетФактуру(СтрокаТаблицы, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, СуммаВключаетНДС, ПодразделениеОрганизации");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, СтавкаНДС, ПредъявленСФ, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Прочее.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	// Заполним
	Изменения = ПрочееНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);
	
	Если Изменения.Свойство("СчетЗатрат") Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект,
			ТекущиеДанные,
			АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	КонецЕсли;
	
	Если Изменения.Свойство("СчетЗатратНУ") Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект,
			ТекущиеДанные,
			АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПредъявленСФПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ПредъявленСФ Тогда
		ТекущиеДанные.БланкСтрогойОтчетности = Ложь;
		ТекущиеДанные.ДатаСФ      = '00010101';
		ТекущиеДанные.НомерСФ     = "";
		ТекущиеДанные.СчетФактура = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Прочее.ПредъявленСФ", 
		Объект, 
		ТекущиеДанные);
		
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееБланкСтрогойОтчетностиПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	Если СтрокаТаблицы.БланкСтрогойОтчетности Тогда
		СтрокаТаблицы.ДатаСФ  = СтрокаТаблицы.ДатаВходящегоДокумента;
		СтрокаТаблицы.НомерСФ = СтрокаТаблицы.НомерВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Прочее.СчетЗатрат", Объект, ТекущиеДанные));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Прочее.СчетЗатратНУ", Объект, ТекущиеДанные));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, 
		ТекущиеДанные, 
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПоставщикПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Прочее);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПоставщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееДатаСФПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСпособУчетаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	Если ТекущиеДанные.СпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Списывается")
		И ТекущиеДанные.ПредъявленСФ Тогда
		ТекущиеДанные.ПредъявленСФ = Ложь;
		ТекущиеДанные.БланкСтрогойОтчетности = Ложь;
		ТекущиеДанные.ДатаСФ      = '00010101';
		ТекущиеДанные.НомерСФ     = "";
		ТекущиеДанные.СчетФактура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБилеты(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗаполнитьБилетыЗавершение", ЭтотОбъект); 
	
	Если Объект.Билеты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением таблица билетов будет очищена. Продолжить?'");
		ПоказатьВопрос(ОбработкаЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Элементы.ГруппаПрочееСчетЗатратПодразделениеЗатрат.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"),
		НСтр("ru = 'Счет затрат / Подразделение'"), НСтр("ru = 'Счет затрат'"));
		
	Элементы.ВозвратнаяТараКонтрагент.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам"),
		НСтр("ru = 'Контрагент / договор'"), НСтр("ru = 'Контрагент'"));
		
	Элементы.ОплатаПоставщикамКонтрагент.Заголовок = ?(ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам"),
		НСтр("ru = 'Контрагент / договор'"), НСтр("ru = 'Контрагент'"));

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	ВидыДоговоровОплата = Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	ОплатаВВалюте       = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект, ВидыДоговоровОплата, ОплатаВВалюте);
	
	УправлениеФормой(ЭтотОбъект);
	АвансовыйОтчетФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНалогаНаПрибыль       = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация,  Объект.Дата);
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация,              Объект.Дата);
	ПрименяетсяУСН                  = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,             Объект.Дата);
	ПлательщикНДФЛ                  = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация,             Объект.Дата);
	РаздельныйУчетНДСНаСчете19      = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет                = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПересчитатьСуммыВзаиморасчетов();
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента, , , Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзменения = Новый Массив();
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	ИзменилсяДоговорКонтрагента = Ложь;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
	Для каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		Изменения = ВозвратнаяТараУстановитьДоговорКонтрагента(
			СтрокаТаблицы.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента,
			Объект.Организация);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
		Если Изменения.Свойство("ДоговорКонтрагента") Тогда
			ИзменилсяДоговорКонтрагента = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилсяДоговорКонтрагента Тогда
		ПричиныИзменения.Добавить("ВозвратнаяТара.ДоговорКонтрагента");
	КонецЕсли;
	
	ИзменилсяДоговорКонтрагента = Ложь;
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		Изменения = ОплатаПоставщикамУстановитьДоговорКонтрагента(
			СтрокаТаблицы.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента,
			Объект.Организация,
			Объект.ВалютаДокумента,
			ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
		Если Изменения.Свойство("ДоговорКонтрагента") Тогда
			ИзменилсяДоговорКонтрагента = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилсяДоговорКонтрагента Тогда
		ПричиныИзменения.Добавить("ОплатаПоставщикам.ДоговорКонтрагента");
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента, , , Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
	
	ПерезаполнитьАвансы();
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("ПодразделениеОрганизации", Объект));
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Склад, ПодразделениеОрганизации", Объект));
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	КэшКурсов = Новый Соответствие;
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СтруктураКурсаДокумента   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КэшКурсов.Вставить(Объект.ВалютаДокумента, СтруктураКурсаДокумента);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ВалютаДоговора = ВалютаРегламентированногоУчета Тогда
			Продолжить;
		КонецЕсли;
		Если КэшКурсов[ВалютаДоговора] = Неопределено Тогда
			СтруктураКурсаДоговора = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
			КэшКурсов.Вставить(ВалютаДоговора, СтруктураКурсаДоговора);
		КонецЕсли;
		СтрокаТаблицы.КурсВзаиморасчетов      = КэшКурсов[ВалютаДоговора].Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = КэшКурсов[ВалютаДоговора].Кратность;
		СтрокаТаблицы.СуммаВзаиморасчетов     = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			Объект.ВалютаДокумента, ВалютаДоговора,
			Объект.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
			Объект.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ВыданныеАвансы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументАванса) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаТаблицы.ДокументАванса,
			"СуммаДокумента, ВалютаДокумента");
		Если РеквизитыДокумента <> Неопределено Тогда
			СтрокаТаблицы.СуммаАванса = РеквизитыДокумента.СуммаДокумента;
			СтрокаТаблицы.Валюта      = РеквизитыДокумента.ВалютаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьДоговорыВВалюте = Ложь;
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = Объект.ОплатаПоставщикам.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из Объект.ОплатаПоставщикам Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Объект.ВалютаДокумента;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		ЕстьДоговорыВВалюте = ЕстьДоговорыВВалюте
			ИЛИ СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
			ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.ОплатаПоставщикам Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьАвансы()
	
	Если Объект.ВыданныеАвансы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАвансы = Объект.ВыданныеАвансы[0];
	
	Если НЕ ЗначениеЗаполнено(СтрокаАвансы.ДокументАванса) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты документа из первой строки - если они совпадают
	// с текущим Подотчетным лицом, то ничего не делаем
	
	ЗначенияРеквизитов = ЗначенияРеквизитовИзДокументаАванса(СтрокаАвансы.ДокументАванса, Ложь);
	Если ЗначенияРеквизитов.Свойство("ФизЛицо") Тогда
		Подотчетник = ЗначенияРеквизитов.ФизЛицо;
	ИначеЕсли ЗначенияРеквизитов.Свойство("Контрагент") Тогда
		Подотчетник = ЗначенияРеквизитов.Контрагент;
	КонецЕсли;
	
	Если Подотчетник <> Объект.ФизЛицо Тогда
		Объект.ВыданныеАвансы.Очистить();
		
		СтрокаАвансы = Объект.ВыданныеАвансы.Добавить();
		СтрокаАвансы.СуммаАванса = ИтогАвансов;
		СтрокаАвансы.Валюта      = ЗначенияРеквизитов.ВалютаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	СтрокиДляЗаполненияСчетовУчета = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ПодразделениеОрганизации");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ЦенаВключаетНДС = Истина;
		Иначе
			ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СтрокиДляЗаполненияСчетовУчета.Добавить(СтрокаТабличнойЧасти);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
				СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС Тогда
					
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				Если НЕ ЦенаВключаетНДС Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетовУчета, ИмяТаблицы, ДанныеОбъекта, Документы.АвансовыйОтчет);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)
	
	СтрокаТабличнойЧасти = Неопределено;
	
	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.Цена                = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ВозвратнаяТара",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ОплатаВВалюте = ДанныеОбъекта.ВалютаДокумента <> ДанныеОбъекта.ВалютаРегламентированногоУчета;
	Изменения = ОплатаПоставщикамУстановитьДоговорКонтрагента(
		СтрокаТаблицы.Контрагент,
		СтрокаТаблицы.ДоговорКонтрагента,
		ДанныеОбъекта.Организация,
		ДанныеОбъекта.ВалютаДокумента,
		ОплатаВВалюте);
	Если Изменения.Свойство("ДоговорКонтрагента") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
		ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаТаблицы.ДоговорКонтрагента,
		"Владелец, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			РеквизитыДоговораКонтрагента.ВалютаВзаиморасчетов,
			ДанныеОбъекта.Дата);
		СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Иначе
		СтрокаТаблицы.КурсВзаиморасчетов      = 1;
		СтрокаТаблицы.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	ВалютаВзаиморасчетов = РеквизитыДоговораКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов     = ВалютаВзаиморасчетов;
	СтрокаТаблицы.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = РеквизитыДоговораКонтрагента.РасчетыВУсловныхЕдиницах;
	
	СтрокаТаблицы.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.Сумма,
		ДанныеОбъекта.ВалютаДокумента,    ВалютаВзаиморасчетов,
		ДанныеОбъекта.КурсДокумента,      СтрокаТаблицы.КурсВзаиморасчетов,
		ДанныеОбъекта.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
	
	СтрокаТаблицы.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	СтрокаТаблицы.Сделка = Неопределено;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ОплатаПоставщикам",
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаполненныеСчетаУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовИзДокументаАванса(Знач ДокументАванса, Знач ФизЛицоЗаполнено)
	
	РеквизитыСтрока = "СуммаДокумента, ВалютаДокумента";
	
	// Если ФизЛицо еще не было выбрано, заполним его по документу аванса
	Если НЕ ФизЛицоЗаполнено Тогда
		РеквизитыСтрока = РеквизитыСтрока + ", Контрагент";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументАванса, РеквизитыСтрока);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСчетФактуры(СчетФактура, ДокументОснование)
	
	ПараметрыСчетФактуры = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента, ЕстьОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура",       СчетФактура);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка = &СчетФактура
	|	И СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСчетФактуры, Выборка);
	КонецЕсли;
	
	ПараметрыСчетФактуры.ЕстьОснование = НЕ Результат[1].Пустой();
	
	Возврат ПараметрыСчетФактуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьСчетФактуру(СчетФактура, ДокументОснование)
	
	Результат = Ложь;
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	Попытка
		СчетФактураОбъект.Заблокировать();
		НоваяСтрока = СчетФактураОбъект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ДокументОснование;
		СчетФактураОбъект.Записать();
		СчетФактураОбъект.Разблокировать();
		Результат = Истина;
	Исключение
		ШаблонСообщения    = НСтр("ru = 'Не удалось записать документ.
                            |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения   , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.СчетФактураПолученный,
			СчетФактураОбъект.Ссылка, 
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочееНоменклатураПриИзмененииНаСервере(Знач СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Результат = Новый Структура;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Прочее",
		СтрокаТабличнойЧасти);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		Результат.Вставить("Содержание", СведенияОНоменклатуре.НаименованиеПолное);
		Результат.Вставить("СтавкаНДС",  СведенияОНоменклатуре.СтавкаНДС);
	КонецЕсли;
	
	Результат.Вставить("ОтражениеВУСН", Перечисления.ОтражениеВУСН.Принимаются);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОплатаПоставщикамУстановитьДоговорКонтрагента(Знач Контрагент, Знач ДоговорКонтрагента, Знач Организация, Знач Валюта, Знач ОплатаВВалюте)
	ОтборПоВалюте = Новый Структура;
	Изменения = Новый Структура;
	
	ОтборПоВалюте.Вставить("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", ОплатаВВалюте));
	Если ОплатаВВалюте Тогда
		ОтборПоВалюте.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", Валюта));
	КонецЕсли;
	
	ВидыДоговоров = Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, ВидыДоговоров, ОтборПоВалюте) Тогда
		Изменения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Иначе
		Изменения.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуВзаиморасчетов(Знач СтрокаТаблицы)
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.Сумма,
		СтрокаТаблицы.ВалютаДокумента, ВалютаВзаиморасчетов,
		СтрокаТаблицы.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
		СтрокаТаблицы.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
	
	Возврат СуммаВзаиморасчетов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозвратнаяТараКонтрагентПриИзмененииНаСервере(Знач ДанныеОбъекта, Знач ДанныеСтроки, Знач СчетаУчетаКЗаполнению)
	
	Изменения = ВозвратнаяТараУстановитьДоговорКонтрагента(
		ДанныеСтроки.Контрагент,
		ДанныеСтроки.ДоговорКонтрагента,
		ДанныеОбъекта.Организация);
		
	Если Не Изменения.Свойство("ДоговорКонтрагента") Тогда
		СчетаУчетаКЗаполнению.Удалить("ДоговорКонтрагента");
	КонецЕсли;
		
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ВозвратнаяТара",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Изменения, ЗаполненныеСчетаУчета, Истина);
	Возврат Изменения;
		
КонецФункции

&НаСервереБезКонтекста
Функция ВозвратнаяТараУстановитьДоговорКонтрагента(Знач Контрагент, Знач ДоговорКонтрагента, Знач Организация)
	
	Изменения = Новый Структура; // Ключ - Имя реквизита, Значение - новое значение
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, ВидыДоговоров) Тогда
		Изменения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьБилетыЗавершение(Ответ, Параметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБилетыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБилетыНаСервере(ИдентификаторСтроки = Неопределено)

	Если ИдентификаторСтроки = Неопределено Тогда
		
		Объект.Билеты.Загрузить(Справочники.Билеты.СуммыБилетов(
			Объект.Организация, 
			'00010101', // без отбора "снизу" 
			Объект.Дата, 
			, 
			Объект.ФизЛицо, 
			Объект.Ссылка));
			
		Строки = Объект.Билеты;
		
	Иначе
		
		СтрокаБилета = Объект.Билеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаБилетов = Справочники.Билеты.СуммыБилетов(
			Объект.Организация, 
			'00010101', // без отбора "снизу" 
			Объект.Дата, 
			СтрокаБилета.Билет,
			Объект.ФизЛицо, 
			Объект.Ссылка);
		
		Если ТаблицаБилетов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБилета, ТаблицаБилетов[0], "Сумма, СуммаНДС");
		Иначе
			СтрокаБилета.Сумма = 0;
			СтрокаБилета.СуммаНДС = 0;
		КонецЕсли;
		
		Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаБилета);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(Строки, "Билеты", Объект, Документы.АвансовыйОтчет); 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(Форма)
	
	Объект = Форма.Объект;
	СтрокаТаблицы = Объект.ОплатаПоставщикам.НайтиПоИдентификатору(Форма.Элементы.ОплатаПоставщикам.ТекущаяСтрока);
	
	Если Объект.ВалютаДокумента <> СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов
		ИЛИ Объект.КурсДокумента <> СтрокаТаблицы.КурсВзаиморасчетов
		ИЛИ Объект.КратностьДокумента <> СтрокаТаблицы.КратностьВзаиморасчетов Тогда
		ДанныеСтрокиТабличнойЧасти = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
			|Сумма, СуммаВзаиморасчетов, ВалютаДокумента, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетов(ДанныеСтрокиТабличнойЧасти);
	Иначе
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.ОплатаПоставщикам Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВсегоТовары    = Объект.Товары.Итог("Сумма");
	Форма.ВсегоТоварыНДС = Объект.Товары.Итог("СуммаНДС");
	
	ВсегоПрочее    = Объект.Прочее.Итог("Сумма");
	ВсегоПрочееНДС = Объект.Прочее.Итог("СуммаНДС");
	
	Если НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ВсегоТовары = Форма.ВсегоТовары + Форма.ВсегоТоварыНДС;
		ВсегоПрочее = ВсегоПрочее + ВсегоПрочееНДС;
	КонецЕсли;
	
	Форма.ИтогАвансов  = Объект.ВыданныеАвансы.Итог("СуммаАванса");
	Форма.ИтогПоОтчету = Форма.ВсегоТовары + Объект.ОплатаПоставщикам.Итог("Сумма") + ВсегоПрочее;
	ИтогоОстаток       = Форма.ИтогАвансов - Форма.ИтогПоОтчету;
	
	Если ИтогоОстаток >= 0 Тогда
		Форма.ИтогоОстаток     = ИтогоОстаток;
		Форма.ТипИтогаПоОтчету = НСтр("ru = 'Остаток:'");
	Иначе
		Форма.ИтогоОстаток     = -ИтогоОстаток;
		Форма.ТипИтогаПоОтчету = НСтр("ru = 'Перерасход:'");
	КонецЕсли;
	
	Форма.ОтметкаНезаполненногоСклад = Объект.Товары.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	
	Если (Форма.ЕстьВалютныйУчет) Тогда
		СтруктураНадписи.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("Курс",             Объект.КурсДокумента);
		СтруктураНадписи.Вставить("Кратность",        Объект.КратностьДокумента);
	КонецЕсли;
	
	Если (Не Форма.ПлательщикНДС) ИЛИ (Объект.НДСНеВыделять) Тогда
		СтруктураНадписи.Вставить("НДСНеВыделять"	   , Объект.НДСНеВыделять);		
	КонецЕсли;	
	
	Если НЕ Объект.НДСНеВыделять Тогда
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	КонецЕсли;
	
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьКурс      = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьКратность = НСтр("ru = 'Кратн.'");
	СтрокаПлатеж.НадписьСумма     = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыбраннуюСчетФактуру(СтрокаТаблицы, ВыбранноеЗначение)
	
	ПараметрыСчетФактуры = ПолучитьПараметрыСчетФактуры(ВыбранноеЗначение, Объект.Ссылка);
	
	Если НЕ СтрокаТаблицы.ПредъявленСФ Тогда
		СтрокаТаблицы.ПредъявленСФ = Истина;
	КонецЕсли;
	
	ПараметрыВыбраннойСчетФактуры = Новый Структура;
	ПараметрыВыбраннойСчетФактуры.Вставить("ОбновитьРеквизитыСтроки", Ложь);
	ПараметрыВыбраннойСчетФактуры.Вставить("ОбновитьСчетФактуру",     Ложь);
	ПараметрыВыбраннойСчетФактуры.Вставить("ПараметрыСчетФактуры",    ПараметрыСчетФактуры);
	ПараметрыВыбраннойСчетФактуры.Вставить("СтрокаТаблицы",           СтрокаТаблицы);
	ПараметрыВыбраннойСчетФактуры.Вставить("ВыбранноеЗначение",       ВыбранноеЗначение);
	
	Если СтрокаТаблицы.ДатаСФ <> ПараметрыСчетФактуры.ДатаВходящегоДокумента
		ИЛИ СтрокаТаблицы.НомерСФ <> ПараметрыСчетФактуры.НомерВходящегоДокумента Тогда
		Если НЕ ПараметрыСчетФактуры.ЕстьОснование Тогда
			ТекстВопроса = НСтр("ru = 'Дата и номер счета-фактуры, указанные в текущей строке, не соответствуют вх. дате и номеру выбранного счета-фактуры.
				|В выбранном счете-фактуре отсутствует ссылка на текущий авансовый отчет.
				|Обновить дату и номер счета-фактуры в текущей строке и добавить документ в качестве документа-основания в счет-фактуру?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросОбновитьДатуНомерДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВыбраннойСчетФактуры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекстВопроса = НСтр("ru = 'Дата и номер счета-фактуры, указанные в текущей строке, не соответствуют вх. дате и номеру выбранного счета-фактуры.
				|Обновить дату и номер счета-фактуры в текущей строке?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросОбновитьДатуНомерЗавершение", ЭтотОбъект, ПараметрыВыбраннойСчетФактуры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	ИначеЕсли НЕ ПараметрыСчетФактуры.ЕстьОснование Тогда
		ТекстВопроса = НСтр("ru = 'В выбранном счете-фактуре отсутствует ссылка на текущий авансовый отчет.
			|Добавить документ в качестве документа-основания в счет-фактуру?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросДобавитьДокументВОснованиеЗавершение", ЭтотОбъект, ПараметрыВыбраннойСчетФактуры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыСтрокиОбновитьСчетФактуру(ПараметрыВыбраннойСчетФактуры)
	
	СтрокаТаблицы        = ПараметрыВыбраннойСчетФактуры.СтрокаТаблицы;
	ПараметрыСчетФактуры = ПараметрыВыбраннойСчетФактуры.ПараметрыСчетФактуры;
	ВыбранноеЗначение    = ПараметрыВыбраннойСчетФактуры.ВыбранноеЗначение;
	
	Если ПараметрыВыбраннойСчетФактуры.ОбновитьРеквизитыСтроки Тогда
		СтрокаТаблицы.ДатаСФ  = ПараметрыСчетФактуры.ДатаВходящегоДокумента;
		СтрокаТаблицы.НомерСФ = ПараметрыСчетФактуры.НомерВходящегоДокумента;
	КонецЕсли;
	
	Если ПараметрыВыбраннойСчетФактуры.ОбновитьСчетФактуру Тогда
		Результат = ОбновитьСчетФактуру(ВыбранноеЗначение, Объект.Ссылка);
		
		Если Результат Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение:'"),
				ПолучитьНавигационнуюСсылку(ВыбранноеЗначение), Строка(ВыбранноеЗначение));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);
	
	Если Не ПлательщикНДС Тогда
		СтруктураПараметров.Вставить("НДСНеВыделять"	   , Объект.НДСНеВыделять);
	КонецЕсли;
	
	// 2. Открвыаем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если (НЕ РаздельныйУчетНДСНаСчете19 И НЕ Объект.НДСНеВыделять)
		ИЛИ ИспользоватьТипыЦенНоменклатуры
		ИЛИ ЕстьВалютныйУчет Тогда
		ОткрыватьИзМеню = Ложь;
		СтруктураПараметров.Вставить("КурсДокумента",        Объект.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента",   Объект.КратностьДокумента);
	Иначе
		ОткрыватьИзМеню = Истина;
		СтруктураПараметров.Вставить("Курс",        Объект.КурсДокумента);
		СтруктураПараметров.Вставить("Кратность",   Объект.КратностьДокумента);
		Если ПлательщикНДС Тогда
			СтруктураПараметров.Вставить("НДСНеВыделять", Ложь);
		КонецЕсли;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		СписокКоманд = Новый СписокЗначений;
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		КонецЕсли;
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Прочее, "Номенклатура"));
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				МассивНоменклатуры,
				Объект.ТипЦен,
				Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			ПерезаполнитьЦены,
			ПересчитатьЦены,
			ПересчитатьНДС,
			Истина, // ЕстьНДС
			Объект.НДСНеВыделять,
			Истина, // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			ПерезаполнитьЦены,
			ПересчитатьЦены,
			ПересчитатьНДС,
			Ложь,   // ЕстьНДС
			Объект.НДСНеВыделять,
			Истина, // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			Ложь,   // ПерезаполнитьЦены
			ПересчитатьЦены,
			ПересчитатьНДС,
			Истина, // ЕстьНДС
			Объект.НДСНеВыделять,
			Ложь,   // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			Ложь,   // ПерезаполнитьЦены
			ПересчитатьЦены,
			Ложь,   // ПересчитатьНДС,
			Ложь,   // ЕстьНДС
			Объект.НДСНеВыделять,
			Ложь,   // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьЦеныИСуммыВСтроке(СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаПередИзменением,
		СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, НДСНеВыделять, ЕстьЦена, ЗначениеПустогоКоличества)
	
	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсДокумента, НайденнаяСтрока.Кратность, Объект.КратностьДокумента);
				ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				?(ЕстьЦена, СтрокаТаблицы["Цена"], СтрокаТаблицы["Сумма"]),
				ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсДокумента, СтруктураКурса.Кратность, Объект.КратностьДокумента);
			
		Иначе
			Цена = ?(ЕстьЦена, СтрокаТаблицы["Цена"], СтрокаТаблицы["Сумма"]);
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Цена  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				ЦенаВключаетНДС,
				Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена *
				?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		Иначе
			СтрокаТаблицы.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				ЦенаВключаетНДС,
				Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		Если НДСНеВыделять Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЕсли;
	Иначе
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Цена  = Цена;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		Иначе
			СтрокаТаблицы.Сумма = Цена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыОтбораДокументАванса()
	
	СтрокаТаблицы = Элементы.ВыданныеАвансы.ТекущиеДанные;
	Если СтрокаТаблицы.ДокументАванса <> Неопределено Тогда
		МассивПараметров = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаДокумента", Объект.ВалютаДокумента);
		МассивПараметров.Добавить(НовыйПараметр);
		
		Если ТипЗнч(СтрокаТаблицы.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.ФизЛицо);
				МассивПараметров.Добавить(НовыйПараметр);
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации",
					ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу"));
				МассивПараметров.Добавить(НовыйПараметр);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументАванса) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.ФизЛицо);
				МассивПараметров.Добавить(НовыйПараметр);
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации",
					ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу"));
				МассивПараметров.Добавить(НовыйПараметр);
				НовыйПараметр = Новый ПараметрВыбора("МножественныйВыбор", Истина);
				МассивПараметров.Добавить(НовыйПараметр);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументАванса) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
			Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.ФизЛицо);
				МассивПараметров.Добавить(НовыйПараметр);
			КонецЕсли;
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации",
				ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу"));
			МассивПараметров.Добавить(НовыйПараметр);
		КонецЕсли;
		
		Элементы.ВыданныеАвансыДокументАванса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма, Знач ВидыДоговоровОплата, Знач ОплатаВВалюте)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", ОплатаВВалюте));
	Если ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	КонецЕсли;
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ВидыДоговоровОплата));
	Элементы.ОплатаПоставщикамДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки",   Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен",         Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта",         Валюта);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад",          Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора",     ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",     ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",         ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПокупке", Истина);
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Истина);
		Иначе
			ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Объект.СуммаВключаетНДС);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)
	
	ВидПодбора = "";
	
	Возврат ВидПодбора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатежа = ДополнительныеПараметры.СтрокаПлатежа;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Истина;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.НДСНеВыделять 		= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = Объект.КурсДокумента;
		КратностьДоИзменения = Объект.КратностьДокумента;
		
		Объект.ТипЦен               = СтруктураЦеныИВалюта.ТипЦен;
		Объект.СуммаВключаетНДС     = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСНеВыделять		= СтруктураЦеныИВалюта.НДСНеВыделять;
		Объект.НДСВключенВСтоимость = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		Объект.ВалютаДокумента      = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсДокумента        = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьДокумента   = СтруктураЦеныИВалюта.Кратность;
		
		Модифицированность = Истина;
		
		Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
			Если Объект.ВыданныеАвансы.Количество() > 0 Тогда
				ТекстВопроса =
					НСтр("ru = 'Изменилась валюта документа. Погашаемые данным документом авансы должны быть выписаны в той же валюте.
						|Очистить табличную часть ""Авансы""?'");
				
				Оповешение = Новый ОписаниеОповещения("ВопросОчиститьАвансыЗавершение", ЭтотОбъект);
				ПоказатьВопрос(Оповешение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
			КонецЕсли;
			
			ОплатаВВалютеДоИзменения = ВалютаДоИзменения <> ВалютаРегламентированногоУчета;
			ОплатаВВалюте = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
			УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект, ВидыДоговоровОплата, ОплатаВВалюте);
			
			ОчиститьДоговораОплатаПоставщикам(ОплатаВВалюте, ОплатаВВалюте <> ОплатаВВалютеДоИзменения);
		КонецЕсли;
		
		// Пересчитываем табличные части.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДоговораОплатаПоставщикам(ОплатаВВалюте, Знач ПерезаполнитьСчета)
	
	ИзменилсяДоговорКонтрагента = Ложь;
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		Изменения = ОплатаПоставщикамУстановитьДоговорКонтрагента(
			СтрокаТаблицы.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента,
			Объект.Организация,
			Объект.ВалютаДокумента,
			ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПерезаполнитьСчета Тогда
		ПричиныИзменения = Новый Массив;
		ПричиныИзменения.Добавить("ОплатаПоставщикам.ДоговорКонтрагента");
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
			АвансовыйОтчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьАвансыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВыданныеАвансы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновитьДатуНомерДобавитьДокументЗавершение(Результат, ПараметрыВыбраннойСчетФактуры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыВыбраннойСчетФактуры.ОбновитьРеквизитыСтроки = Истина;
		ПараметрыВыбраннойСчетФактуры.ОбновитьСчетФактуру     = Истина;
		ОбновитьРеквизитыСтрокиОбновитьСчетФактуру(ПараметрыВыбраннойСчетФактуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновитьДатуНомерЗавершение(Результат, ПараметрыВыбраннойСчетФактуры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыВыбраннойСчетФактуры.ОбновитьРеквизитыСтроки = Истина;
		ОбновитьРеквизитыСтрокиОбновитьСчетФактуру(ПараметрыВыбраннойСчетФактуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьДокументВОснованиеЗавершение(Результат, ПараметрыВыбраннойСчетФактуры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыВыбраннойСчетФактуры.ОбновитьСчетФактуру = Истина;
		ОбновитьРеквизитыСтрокиОбновитьСчетФактуру(ПараметрыВыбраннойСчетФактуры);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// Склад
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Склад");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Склад", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ОтметкаНезаполненногоСклад", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ПрочееСчетЗатратНУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСчетЗатратНУ");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ОплатаПоставщикамСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ОплатаПоставщикам.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоНУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Прочее.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// Субконто НУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСубконтоНУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.СубконтоНУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.СубконтоНУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Прочее.СубконтоНУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// БилетыСубконто БУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	// БилетыСубконто БУ скроем если не используется
	
	Для Сч = 2 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Билеты.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Билеты.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// БилетыПодразделениеЗатрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыПодразделениеЗатрат");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Билеты.ПодразделениеЗатратДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Билеты.ПодразделениеЗатратНУДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ОплатаПоставщикамНадписьКратность, ОплатаПоставщикамКратностьВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамНадписьКратность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамКратностьВзаиморасчетов");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.ОплатаПоставщикам.КратностьВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.ОплатаПоставщикам.КратностьВзаиморасчетов", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамНадписьКратность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамКратностьВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");            
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПредъявленСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетФактура");
			
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееВсего");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееПредъявленСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееНомерСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСчетФактура");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БилетыПеревозчик");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);
	
	// ТоварыСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыПоставщик, ТоварыДатаСФ, ТоварыНомерСФ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерСФ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПредъявленСФ", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСпособУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСчетУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СчетУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"ПлательщикНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
		"Объект.Товары.ПредъявленСФ", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОплатаПоставщикам() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ОплатаПоставщикамПроинициализировано", Истина);
	
	// ОплатаПоставщикамСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ОплатаПоставщикам.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ОплатаПоставщикамКурсВзаиморасчетов, ОплатаПоставщикамКратностьВзаиморасчетов, ОплатаПоставщикамСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамКратностьВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОплатаПоставщикамСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ОплатаПоставщикам.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрочее() Экспорт
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ПрочееОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеПрочееОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ПрочееНУПроинициализировано") Тогда
		УстановитьУсловноеОформлениеПрочееНУ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрочееОбщее()
	
	НастройкиУсловногоОформления.Вставить("ПрочееОбщееПроинициализировано", Истина);
	
	// Субконто БУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Прочее.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
	// ПрочееПодразделениеЗатрат
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееПодразделениеЗатрат");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.ПодразделениеЗатратДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.ПодразделениеЗатратНУДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ПрочееСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ПрочееБланкСтрогойОтчетности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееБланкСтрогойОтчетности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.Прочее.ПредъявленСФ",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ПрочееПоставщик, ПрочееДатаСФ, ПрочееНомерСФ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееНомерСФ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.Прочее.ПредъявленСФ",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ПрочееСпособУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСпособУчетаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.Прочее.СуммаНДС",
		ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ПрочееСчетУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСчетУчетаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.СчетУчетаНДС",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.Прочее.СуммаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ПлательщикНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.НДСВключенВСтоимость",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"РаздельныйУчетНДСНаСчете19",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.НДСВключенВСтоимость",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.Прочее.ПредъявленСФ",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСчетУчетаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрочееНУ()
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		// Реквизиты НУ для УСН и ИП на НДФЛ скрываются с помощью функциональной опции, 
		// дополнительного условного оформления не требуется.
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("ПрочееНУПроинициализировано", Истина);
	
	// Субконто НУ
	
	Для Сч = 1 По 3 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПрочееСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Прочее.СубконтоНУ" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Прочее.СубконтоНУ" + Сч,
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда
		
		Форма.УстановитьУсловноеОформлениеТовары();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ОплатаПоставщикамПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОплатаПоставщикам Тогда
		
		Форма.УстановитьУсловноеОформлениеОплатаПоставщикам();
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ПрочееОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если Форма.ПлательщикНалогаНаПрибыль
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ПрочееНУПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеПрочее();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчетаТары");
	ЭлементыСчетов.Добавить("ОплатаПоставщикамСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("ОплатаПоставщикамСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("ПрочееСчетЗатрат");
	ЭлементыСчетов.Добавить("ПрочееПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("ПрочееСубконто1");
	ЭлементыСчетов.Добавить("ПрочееСубконто2");
	ЭлементыСчетов.Добавить("ПрочееСубконто3");
	ЭлементыСчетов.Добавить("ПрочееСубконтоНУ1");
	ЭлементыСчетов.Добавить("ПрочееСубконтоНУ2");
	ЭлементыСчетов.Добавить("ПрочееСубконтоНУ3");
	ЭлементыСчетов.Добавить("ПрочееСчетЗатратНУ");
	ЭлементыСчетов.Добавить("ПрочееСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ПрочееСпособУчетаНДС");
	ЭлементыСчетов.Добавить("БилетыСчетЗатрат");
	ЭлементыСчетов.Добавить("БилетыПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("БилетыСубконто1");
	ЭлементыСчетов.Добавить("БилетыСубконто2");
	ЭлементыСчетов.Добавить("БилетыСубконто3");
	ЭлементыСчетов.Добавить("БилетыСпособУчетаНДС");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
			ЭтотОбъект, 
			СтрокаТаблицы,
			АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Прочее.ТекущиеДанные, 
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", , Истина));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоБилеты(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		Элементы.Билеты.ТекущиеДанные,
		НомерСубконто,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Билеты", , Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоБилеты(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Билеты.ТекущиеДанные,
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Билеты", , Ложь));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоНУ(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		Элементы.Прочее.ТекущиеДанные,
		НомерСубконто, 
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Прочее.ТекущиеДанные, 
		АвансовыйОтчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконтоТаблицы(ЭтотОбъект, "Прочее", "НУ", Истина));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти
