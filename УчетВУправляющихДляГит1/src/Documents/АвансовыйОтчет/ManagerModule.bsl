#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 10, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ПолучитьСуммуВыданныхАвансов(Ссылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(АвансовыйОтчетВыданныеАвансы.ДокументАванса.СуммаДокумента) КАК ДокументАвансаСуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // в выборке всегда 1 запись
	
	Возврат ?(Выборка.ДокументАвансаСуммаДокумента = Null,
		0, 
		Выборка.ДокументАвансаСуммаДокумента);
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетВозвратнаяТара.Номенклатура,
	|	АвансовыйОтчетВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК АвансовыйОтчетВозвратнаяТара
	|ГДЕ
	|	АвансовыйОтчетВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчетТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &Ссылка
	|	И НЕ АвансовыйОтчетТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьРасчетСуточныхПоУмолчанию(Объект, НормыСуточных = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаКомандировки)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияКомандировки)Тогда
		Возврат;
	КонецЕсли;	
	
	Если НормыСуточных = Неопределено Тогда
		НормыСуточных = УчетКомандировок.НормыСуточных(Объект.Организация, Объект.Дата);
	КонецЕсли; 
	
	Если Объект.Суточные.Количество() = 0 Тогда
		// Если расчет пустой, то считаем, что весь период командировки относится к России
		РасчетСуточных = Объект.Суточные.Добавить();
		РасчетСуточных.Страна 			= Справочники.СтраныМира.Россия;
		РасчетСуточных.ДатаОкончания 	= Объект.ДатаОкончанияКомандировки;
		РасчетСуточных.Норма 			= НормыСуточных.НормаПоРФ;
	Иначе
		// В любом случае приводим расчет к простому (весь период командировки по одной ставке - либо в России, либо за рубежом)
		// Порядок действий такой:
		// - Определяем харакетристики первого сегмента текущего расчета, т.к. считаем, что это основной (наиболее характерный) сегмент расчета
		// - Далее удаляем прочие сегменты, а первый сегмент "растягиваем" на весь период командировки
		// - Если командировка за границу, то при расчете суточных будет создана 2-я строка (служебная) на день возвращения (см. РассчитатьСуточные())
		
		// Запомним данные 1-й строки текущего расчета 
		СтрокаИсточника = Объект.Суточные[0];
		Норма 			= СтрокаИсточника.Норма;
		Страна 			= СтрокаИсточника.Страна;
		ЗаРубежом 		= СтрокаИсточника.ЗаРубежом;	
		
		Объект.Суточные.Очистить();
		
		// Весь период командировки приходится на одну страну пребывания
		РасчетСуточных = Объект.Суточные.Добавить();
		РасчетСуточных.Страна 			= Страна;
		РасчетСуточных.ЗаРубежом 		= ЗаРубежом;
		РасчетСуточных.ДатаОкончания 	= Объект.ДатаОкончанияКомандировки;
		РасчетСуточных.Норма 			= Норма;
		
	КонецЕсли;	
		
	УчетКомандировок.РассчитатьСуточные(
		Объект.Суточные,
		Объект.ДатаНачалаКомандировки,
		Объект.ДатаОкончанияКомандировки,
		НормыСуточных);

КонецПроцедуры

// Описывает проверяемые реквизиты документа, которые не видны на форме непосредственно, 
// а вместо этого редактируются в отдельной форме при переходе по ссылке.
// См. СчетаУчетаВДокументах.ПроверитьЗаполнение()
//
// Параметры:
//  ВидОперации	 - ПеречислениеСсылка.ВидыОперацийАвансовыйОтчет - вид операции авансового отчета
// 
// Возвращаемое значение:
//   - Соответствие - Ключ - путь к проверяемому реквизиту документа, Значение - путь к реквизиту формы, за которым "спрятан" проверяемый реквизит
//
Функция РеквизитыЗаСсылками(ВидОперации) Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Проверяемые реквизиты прячутся за ссылками только в форме командировки
	Если ВидОперации <> Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		Возврат РеквизитыЗаСсылками;
	КонецЕсли;
				
	// Прячутся за "НадписьБилеты"
	АналитикаБилеты = Новый Массив;
	
	АналитикаБилеты.Добавить("Билеты.СчетЗатрат");
	АналитикаБилеты.Добавить("Билеты.ПодразделениеЗатрат");
	АналитикаБилеты.Добавить("Билеты.Субконто1");
	АналитикаБилеты.Добавить("Билеты.Субконто2");
	АналитикаБилеты.Добавить("Билеты.Субконто3");
	АналитикаБилеты.Добавить("Билеты.СпособУчетаНДС");
	
	Для Каждого ИмяРеквизита Из АналитикаБилеты Цикл
		РеквизитыЗаСсылками.Вставить(ИмяРеквизита, "/НадписьБилеты");
	КонецЦикла;
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Суточные
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатрат", "КомандировочныеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Командировка");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3", "СубконтоЗатрат3");
	
	// Табличная часть Товары
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",     "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",          "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	// Табличная часть ВозвратнаяТара
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчетаТары", "ВозвратнаяТараПолученная");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	// Табличная часть Прочее
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Командировка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",          "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	// Для командировки реквизиты строки табличной части не используются при определении способа учета НДС.
	// Вместо этого значение ПредъявленСчетФактура берется из дополнительных данных (см. ниже).
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Командировка");
	// Фактически способ учета НДС не зависит от поля НомерВходящегоДокумента, но для запуска механизма заполнения счетов необходимо какое-то событие.
	// Добавление новой строки не подходит - такие события не поддерживаются механизмом.
	// Поэтому в данном случае формальная причина заполнения счета учета - изменение номера подтверждающего документа (обязательное поле).  
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВходящийДокумент", "НомерВходящегоДокумента");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетЗатрат", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Командировка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",            "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",            "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",            "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДС",        "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СчетЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ1",          "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ2",          "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ3",          "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетЗатрат", "КомандировочныеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Командировка");
	// Фактически счет затрат не зависит от поля НомерВходящегоДокумента, но для запуска механизма заполнения счетов необходимо какое-то событие.
	// Добавление новой строки не подходит - такие события не поддерживаются механизмом.
	// Поэтому в данном случае формальная причина заполнения счета учета - изменение номера подтверждающего документа (обязательное поле).  
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВходящийДокумент", "НомерВходящегоДокумента");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",           "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",           "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",           "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СчетЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ1",          "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ2",          "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ3",          "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто3");
	
	// Табличная часть Билеты
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Билеты", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	// Фактически способ учета НДС и счет затрат не зависят от поля НомерВходящегоДокумента, но для запуска механизма заполнения счетов необходимо какое-то событие.
	// Добавление новой строки не подходит - такие события не поддерживаются механизмом.
	// Поэтому в данном случае формальная причина заполнения счета учета - изменение номера подтверждающего документа (обязательное поле).  
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВходящийДокумент", "Билет");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Билеты", "СчетЗатрат", "КомандировочныеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВходящийДокумент", "Билет");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",           "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",           "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",           "СубконтоЗатрат3");

	// Табличная часть ОплатаПоставщикам
	// - оплата задолженности 
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОплатаПоставщикам", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",                   "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	// - только аванс
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОплатаПоставщикам", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",                   "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Командировка", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ПредъявленСчетФактура", "");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполнения.Командировка = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка);
	
	// Используется 
	// - для таблицы Билеты всегда
	// - для таблицы Прочее, если это командировка
	ДанныеЗаполнения.ПредъявленСчетФактура = Истина;
		
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//  ТолькоСпособУчета     - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено, ТолькоСпособУчета = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокументаКомандировка";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	ПараметрыПроведения            = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация,  Реквизиты.Период);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		Реквизиты.Организация, Реквизиты.Период);
	НачислятьНДСПоОтгрузке           = УчетнаяПолитика.НачислятьНДСПоОтгрузке(
		Реквизиты.Организация, Реквизиты.Период);
	ВестиУчетПоВидамДеятельностиИП   = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(
		Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа     = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(
		Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНа19Счете       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(
		Реквизиты.Организация, Реквизиты.Период);
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение",		   ЭтоОтложенноеПроведение);
	Реквизиты.Вставить("ПлательщикНДС",                    ПлательщикНДС);
	Реквизиты.Вставить("ПлательщикНДФЛ",                   ПлательщикНДФЛ);
	Реквизиты.Вставить("ПрименяетсяУСН",                   ПрименяетсяУСН);
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Реквизиты.Вставить("НачислятьНДСПоОтгрузке",           НачислятьНДСПоОтгрузке);
	Реквизиты.Вставить("ИспользуетсяОтложенноеПроведение", ИспользуетсяОтложенноеПроведение);
	
	Если Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРеглУчета Тогда
		КоэффициентРуб	= 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ДокументСсылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Период, "ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
			Возврат ПараметрыПроведения;
		КонецЕсли;
		
		КоэффициентРуб = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                  ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",                   Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("КоэффициентРуб",                   КоэффициентРуб);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП",   ВестиУчетПоВидамДеятельностиИП);
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",     ОсновнаяНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("МассивСчетовДляГТД",               УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
	Запрос.УстановитьПараметр("Субсчета10",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	Запрос.УстановитьПараметр("Субсчета97",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов));
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимПрочее", НСтр("ru = 'Прочее'"));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНа19Счете", РаздельныйУчетНДСНа19Счете);
	Запрос.УстановитьПараметр("ПлательщикНДС",              ПлательщикНДС);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение",	ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", ДоговорДляОтложенногоПроведения);
	Запрос.УстановитьПараметр("ИспользуетсяОтложенноеПроведение", ИспользуетсяОтложенноеПроведение);
	Запрос.УстановитьПараметр("ОсновнаяСтавкаНДСПоБилетам", УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(ПлательщикНДС));
	
	Запрос.УстановитьПараметр("СчетЗатратКомандировки", УчетКомандировок.СчетЗатратКомандировочныеРасходы(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("СуммаСуточных", Реквизиты.СуммаСуточных);
	Запрос.УстановитьПараметр("ЭтоКомандировка", Реквизиты.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст =
		ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТоваровУслугНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТоваровГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаБилеты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                       НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьАвансы) КАК ЕстьАвансы,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьТара) КАК ЕстьТара,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьОплаты) КАК ЕстьОплаты,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьПрочее) КАК ЕстьПрочее,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьБилеты) КАК ЕстьБилеты,
	|	СУММА(ВложенныйЗапрос.СуммаСуточных) КАК СуммаСуточных
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьАвансы,
	|		ЛОЖЬ КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТара,
	|		ЛОЖЬ КАК ЕстьОплаты,
	|		ЛОЖЬ КАК ЕстьПрочее,
	|		ЛОЖЬ КАК ЕстьБилеты,
	|		0 КАК СуммаСуточных
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВыданныеАвансы КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВозвратнаяТара КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		0
	|	ИЗ
	|		Документ.АвансовыйОтчет.Билеты КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		СУММА(ТаблицыДокумента.Сумма)
	|	ИЗ
	|		Документ.АвансовыйОтчет.Суточные КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетЗатрат КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	Реквизиты.Субконто1 КАК Субконто1,
	|	Реквизиты.Субконто2 КАК Субконто2,
	|	Реквизиты.Субконто3 КАК Субконто3,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.ДатаНачалаКомандировки КАК ДатаНачалаКомандировки,
	|	Реквизиты.ДатаОкончанияКомандировки КАК ДатаОкончанияКомандировки
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетЗатрат КАК СчетЗатрат,
	|	Реквизиты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	Реквизиты.Субконто1 КАК Субконто1,
	|	Реквизиты.Субконто2 КАК Субконто2,
	|	Реквизиты.Субконто3 КАК Субконто3,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) КАК ВидДоговора,
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК РасчетыПоРеализации,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭлектронныеУслуги,
	|	ЛОЖЬ КАК РасходыПредпринимателя,
	|	Реквизиты.КурсДокумента КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьДокумента КАК КратностьВзаиморасчетов,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАвансы, ЛОЖЬ) КАК ЕстьАвансы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОплаты, ЛОЖЬ) КАК ЕстьОплаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПрочее, ЛОЖЬ) КАК ЕстьПрочее,
	|	ЕСТЬNULL(СоставДокумента.ЕстьБилеты, ЛОЖЬ) КАК ЕстьБилеты,
	|	ЕСТЬNULL(СоставДокумента.СуммаСуточных, 0) КАК СуммаСуточных,
	|	Реквизиты.ДатаНачалаКомандировки КАК ДатаНачалаКомандировки,
	|	Реквизиты.ДатаОкончанияКомандировки КАК ДатаОкончанияКомандировки
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ТаблицаТовары.ВидДокВходящий КАК ВидДокВходящий,
		|	ТаблицаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаТовары.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ТаблицаТовары.Поставщик КАК Контрагент,
		|	ТаблицаТовары.ПредъявленСФ КАК ПредъявленСчетФактура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ИСТИНА)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ &ПрименяетсяУСНДоходыМинусРасходы
		|	КОНЕЦ КАК УчестьРасходыУСНТовары,
		|	ВЫБОР
		|		КОГДА НЕ &РаздельныйУчетНДСНа19Счете
		|				И (ТаблицаТовары.ПредъявленСФ
		|					ИЛИ НЕ &ПлательщикНДС)
		|				И Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НДСВключенВСтоимость,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Тара.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Тара.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВалютыВзаиморасчетов
		|ИЗ
		|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК Тара
		|ГДЕ
		|	Тара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалютВзаиморасчетов
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Период,
		|			Валюта В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВалютыВзаиморасчетов.ВалютаВзаиморасчетов
		|				ИЗ
		|					ВалютыВзаиморасчетов)) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВалютыВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВалютыВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КурсыВалютВзаиморасчетов.Курс КАК Курс,
		|	КурсыВалютВзаиморасчетов.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыДоговоров
		|ИЗ
		|	ВалютыВзаиморасчетов КАК ВалютыВзаиморасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВзаиморасчетов КАК КурсыВалютВзаиморасчетов
		|		ПО ВалютыВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютВзаиморасчетов.ВалютаВзаиморасчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТара.Ссылка,
		|	ТаблицаТара.НомерСтроки,
		|	ТаблицаТара.Номенклатура,
		|	ТаблицаТара.Количество,
		|	ТаблицаТара.Сумма,
		|	ТаблицаТара.Сумма КАК СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ТаблицаТара.Сумма * ЕСТЬNULL(КурсыДоговоров.Курс / КурсыДоговоров.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ТаблицаТара.СчетУчета,
		|	ТаблицаТара.СчетУчетаТары,
		|	ТаблицаТара.Контрагент,
		|	ТаблицаТара.ДоговорКонтрагента,
		|	ТаблицаТара.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаТара.ВидДокВходящий,
		|	ТаблицаТара.ДатаВходящегоДокумента,
		|	ТаблицаТара.НомерВходящегоДокумента,
		|	КурсыДоговоров.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.Дата КАК РеквизитыДата
		|ПОМЕСТИТЬ ТаблицаТара
		|ИЗ
		|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК ТаблицаТара
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыДоговоров КАК КурсыДоговоров
		|		ПО ТаблицаТара.ДоговорКонтрагента = КурсыДоговоров.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВалютыВзаиморасчетов",     НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаКурсыВалютВзаиморасчетов", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаКурсыДоговоров",           НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаТара",                     НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПрочее.Ссылка КАК Ссылка,
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.Номенклатура КАК Номенклатура,
		|	ТаблицаПрочее.Содержание КАК Содержание,
		|	1 КАК Количество,
		|	ТаблицаПрочее.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаПрочее.Сумма
		|		ИНАЧЕ ТаблицаПрочее.Сумма + ТаблицаПрочее.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаПрочее.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаПрочее.Сумма
		|		ИНАЧЕ ТаблицаПрочее.Сумма + ТаблицаПрочее.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаПрочее.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаПрочее.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ТаблицаПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		|	ТаблицаПрочее.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаПрочее.Субконто1 КАК Субконто1,
		|	ТаблицаПрочее.Субконто2 КАК Субконто2,
		|	ТаблицаПрочее.Субконто3 КАК Субконто3,
		|	ТаблицаПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ТаблицаПрочее.СубконтоНУ1 КАК СубконтоНУ1,
		|	ТаблицаПрочее.СубконтоНУ2 КАК СубконтоНУ2,
		|	ТаблицаПрочее.СубконтоНУ3 КАК СубконтоНУ3,
		|	ТаблицаПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ТаблицаПрочее.ВидДокВходящий КАК ВидДокВходящий,
		|	ТаблицаПрочее.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПрочее.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ТаблицаПрочее.Поставщик КАК Контрагент,
		|	ТаблицаПрочее.ПредъявленСФ КАК ПредъявленСчетФактура,
		|	&ПрименяетсяУСНДоходыМинусРасходы КАК УчестьРасходыУСНУслуги,
		|	ВЫБОР
		|		КОГДА НЕ &РаздельныйУчетНДСНа19Счете
		|				И (ТаблицаПрочее.ПредъявленСФ
		|					ИЛИ НЕ &ПлательщикНДС)
		|				И Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НДСВключенВСтоимость,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо
		|ПОМЕСТИТЬ ТаблицаПрочее
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПрочее
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаПрочее.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаПрочее", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьОплаты Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаОплата.Ссылка,
		|	ТаблицаОплата.НомерСтроки,
		|	ТаблицаОплата.ВидДокВходящий,
		|	ТаблицаОплата.ДатаВходящегоДокумента,
		|	ТаблицаОплата.НомерВходящегоДокумента,
		|	ТаблицаОплата.Сумма КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ТаблицаОплата.Сумма * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ТаблицаОплата.Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента,
		|	ТаблицаОплата.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплата.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаОплата.Содержание,
		|	ТаблицаОплата.СуммаВзаиморасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаОплата.КурсВзаиморасчетов,
		|	ТаблицаОплата.КратностьВзаиморасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетовПоАвансам,
		|	ТаблицаОплата.Сделка,
		|	ТаблицаОплата.СпособПогашенияЗадолженности,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо,
		|	Реквизиты.Дата КАК РеквизитыДата
		|ПОМЕСТИТЬ ТаблицаОплата
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаОплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаОплата.Ссылка = &Ссылка
		|	И (НЕ &ЭтоОтложенноеПроведение
		|		ИЛИ ТаблицаОплата.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаОплата", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьБилеты Тогда
		
		ТекстЗапроса = ТекстЗапроса +
	   "ВЫБРАТЬ
	   |	ТаблицаБилеты.НомерСтроки КАК НомерСтроки,
	   |	ТаблицаБилеты.Билет КАК Билет,
	   |	ТаблицаБилеты.Билет.Код КАК НомерБилета,
	   |	ТаблицаБилеты.Билет.ДатаПокупки КАК ДатаПокупки,
	   |	ТаблицаБилеты.СчетФактура КАК СчетФактура,
	   |	ТаблицаБилеты.СчетЗатрат КАК СчетЗатрат,
	   |	ТаблицаБилеты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	   |	ТаблицаБилеты.Субконто1 КАК Субконто1,
	   |	ТаблицаБилеты.Субконто2 КАК Субконто2,
	   |	ТаблицаБилеты.Субконто3 КАК Субконто3,
   	   |	ТаблицаБилеты.СпособУчетаНДС КАК СпособУчетаНДС,
	   |	ВЫБОР
	   |		КОГДА НЕ &ПлательщикНДС
	   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	   |		КОГДА ТаблицаБилеты.Билет.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяССылка)
	   |			ТОГДА &ОсновнаяСтавкаНДСПоБилетам
	   |		ИНАЧЕ ТаблицаБилеты.Билет.СтавкаНДС
	   |	КОНЕЦ КАК СтавкаНДС,
	   |	ТаблицаБилеты.Билет.Перевозчик КАК Перевозчик,
	   |	ТаблицаБилеты.Билет.Сотрудник КАК Сотрудник,
	   |	ТаблицаБилеты.Сумма КАК Сумма,
	   |	ВЫБОР
	   |		КОГДА НЕ &ПлательщикНДС
	   |			ТОГДА 0
	   |		ИНАЧЕ ТаблицаБилеты.СуммаНДС
	   |	КОНЕЦ КАК СуммаНДС,
	   |	ВЫБОР
	   |		КОГДА НЕ &РаздельныйУчетНДСНа19Счете
	   |				И Реквизиты.НДСВключенВСтоимость
	   |			ТОГДА ИСТИНА
	   |		ИНАЧЕ ЛОЖЬ
	   |	КОНЕЦ КАК НДСВключенВСтоимость
	   |ПОМЕСТИТЬ ТаблицаБилеты
	   |ИЗ
	   |	Документ.АвансовыйОтчет.Билеты КАК ТаблицаБилеты
	   |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	   |		ПО (ИСТИНА)
	   |ГДЕ
	   |	ТаблицаБилеты.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаБилеты", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		СуммыТаблицыПрочее = Результат[НомераТаблиц["СуммыТаблицыПрочее"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыПрочее, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыПрочее", СуммыТаблицыПрочее);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеПрочее();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Функция ТекстЗапросаРасчетыВВалютеТовары()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Количество КАК Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб КАК СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВременнаяТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВременнаяТаблицаТовары.ВидДокВходящий КАК ВидДокВходящий,
	|	ВременнаяТаблицаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВременнаяТаблицаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВременнаяТаблицаТовары.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаТовары.СчетФактура КАК СчетФактура,
	|	ВременнаяТаблицаТовары.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|	ВременнаяТаблицаТовары.УчестьРасходыУСНТовары КАК УчестьРасходыУСНТовары,
	|	ВременнаяТаблицаТовары.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ВременнаяТаблицаТовары.РеквизитыВалютаДокумента КАК РеквизитыВалютаДокумента,
	|	ВременнаяТаблицаТовары.РеквизитыФизЛицо КАК РеквизитыФизЛицо
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеПрочее()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СуммыТаблицыПрочее.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаРуб,
	|	СуммыТаблицыПрочее.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыПрочее
	|ИЗ
	|	&СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПрочее.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаПрочее.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаПрочее.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПрочее.Содержание КАК Содержание,
	|	ВременнаяТаблицаПрочее.Количество КАК Количество,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаРуб КАК СуммаРуб,
	|	СуммыТаблицыПрочее.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВременнаяТаблицаПрочее.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаПрочее.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВременнаяТаблицаПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ВременнаяТаблицаПрочее.СчетЗатрат КАК СчетЗатрат,
	|	ВременнаяТаблицаПрочее.Субконто1 КАК Субконто1,
	|	ВременнаяТаблицаПрочее.Субконто2 КАК Субконто2,
	|	ВременнаяТаблицаПрочее.Субконто3 КАК Субконто3,
	|	ВременнаяТаблицаПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаПрочее.СубконтоНУ1 КАК СубконтоНУ1,
	|	ВременнаяТаблицаПрочее.СубконтоНУ2 КАК СубконтоНУ2,
	|	ВременнаяТаблицаПрочее.СубконтоНУ3 КАК СубконтоНУ3,
	|	ВременнаяТаблицаПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВременнаяТаблицаПрочее.ВидДокВходящий КАК ВидДокВходящий,
	|	ВременнаяТаблицаПрочее.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.СчетФактура КАК СчетФактура,
	|	ВременнаяТаблицаПрочее.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаПрочее.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|	ВременнаяТаблицаПрочее.УчестьРасходыУСНУслуги КАК УчестьРасходыУСНУслуги,
	|	ВременнаяТаблицаПрочее.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ВременнаяТаблицаПрочее.РеквизитыВалютаДокумента КАК РеквизитыВалютаДокумента,
	|	ВременнаяТаблицаПрочее.РеквизитыФизЛицо КАК РеквизитыФизЛицо
	|ПОМЕСТИТЬ ТаблицаПрочее
	|ИЗ
	|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|		ПО ВременнаяТаблицаПрочее.НомерСтроки = СуммыТаблицыПрочее.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаПрочее", "ПОМЕСТИТЬ ВременнаяТаблицаПрочее");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПрочее.Ссылка = &Ссылка", "ТаблицаПрочее.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыПрочее", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПрочее.НомерСтроки,
		|	ВременнаяТаблицаПрочее.СтавкаНДС,
		|	ВременнаяТаблицаПрочее.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.СуммаРуб,
		|	ВременнаяТаблицаПрочее.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТоваровТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДСВРознице,
	|	ТаблицаТовары.СуммаВзаиморасчетов - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаНУ,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	ТаблицаТовары.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаТовары.ВидДокВходящий,
	|	ТаблицаТовары.НомерВходящегоДокумента,
	|	ТаблицаТовары.ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеТоваровТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваровУслугНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДСРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.ВидДокВходящий,
		|	ТаблицаТовары.НомерВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента,
		|	ТаблицаТовары.Контрагент,
		|	ТаблицаТовары.ПредъявленСчетФактура,
		|	ТаблицаТовары.СчетФактура,
		|	ТаблицаТовары.НДСВключенВСтоимость
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТоварыНДС", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.СуммаВзаиморасчетов - ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаПрочее.СуммаНДСВзаиморасчетов,
		|	ТаблицаПрочее.Количество,
		|	ТаблицаПрочее.СчетЗатрат,
		|	ТаблицаПрочее.СчетУчетаНДС,
		|	ТаблицаПрочее.СпособУчетаНДС,
		|	ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДС,
		|	ТаблицаПрочее.СуммаНДСРуб,
		|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаРуб,
		|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаБезНДСРуб,
		|	ТаблицаПрочее.СтавкаНДС,
		|	ТаблицаПрочее.ВидДокВходящий,
		|	ТаблицаПрочее.НомерВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента,
		|	ТаблицаПрочее.Контрагент,
		|	ТаблицаПрочее.ПредъявленСчетФактура,
		|	ТаблицаПрочее.СчетФактура,
		|	ТаблицаПрочее.Содержание,
		|	ТаблицаПрочее.Субконто1,
		|	ТаблицаПрочее.Субконто2,
		|	ТаблицаПрочее.Субконто3,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ТаблицаПрочее.ПодразделениеЗатрат,
		|	ТаблицаПрочее.НДСВключенВСтоимость
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("УслугиНДС", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("УслугиНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваровГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("НомераГТД", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК НомерСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СчетФактура КАК ДокументОснование,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.ВидДокВходящий,
	|	ТаблицаТовары.НомерВходящегоДокумента,
	|	ТаблицаТовары.ДатаВходящегоДокумента,
	|	ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.СчетУчета В (&МассивСчетовДляГТД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("НомераГТД", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьПрочее Тогда
		ПараметрыПроведения.Вставить("ПоступлениеПрочееТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Прочее"" КАК ИмяСписка,
	|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПрочее.СуммаВзаиморасчетов - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаПрочее.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаБУ,
	|	ТаблицаПрочее.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаНУ,
	|	ТаблицаПрочее.СуммаНДСРуб,
	|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаПрочее.СчетЗатрат,
	|	ТаблицаПрочее.СчетЗатратНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаПрочее.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	ТаблицаПрочее.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаПрочее.ВидДокВходящий,
	|	ТаблицаПрочее.НомерВходящегоДокумента,
	|	ТаблицаПрочее.ДатаВходящегоДокумента,
	|	ТаблицаПрочее.ПодразделениеЗатрат,
	|	ТаблицаПрочее.Субконто1,
	|	ТаблицаПрочее.Субконто2,
	|	ТаблицаПрочее.Субконто3,
	|	ТаблицаПрочее.СубконтоНУ1,
	|	ТаблицаПрочее.СубконтоНУ2,
	|	ТаблицаПрочее.СубконтоНУ3,
	|	ТаблицаПрочее.Содержание
	|ИЗ
	|	ТаблицаПрочее КАК ТаблицаПрочее
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеПрочееТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТарыТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	ТаблицаТара.Ссылка,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.СуммаВзаиморасчетов,
	|	ТаблицаТара.СуммаРуб,
	|	0 КАК СуммаБезНДСРуб,
	|	0 КАК СуммаНДСРуб,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.СчетУчета,
	|	ТаблицаТара.Контрагент,
	|	ТаблицаТара.ДоговорКонтрагента,
	|	ТаблицаТара.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТара.СчетУчетаТары КАК СчетУчетаРасчетовПоТаре,
	|	ТаблицаТара.ВидДокВходящий,
	|	ТаблицаТара.НомерВходящегоДокумента,
	|	ТаблицаТара.ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаТара КАК ТаблицаТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТара.НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеТарыТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	""АвансовыйОтчет"" КАК ВидОперации,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПогашениеЗадолженности", НомераТаблиц.Количество());
	
	Если НЕ Реквизиты.ЕстьОплаты Тогда
		ПараметрыПроведения.Вставить("ПогашениеЗадолженностиТаблица", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""ОплатаПоставщикам"" КАК ИмяСписка,
	|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплата.РеквизитыПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаОплата.Контрагент,
	|	ТаблицаОплата.ДоговорКонтрагента,
	|	ТаблицаОплата.ВидДоговора КАК ВидДоговора,
	|	ТаблицаОплата.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаОплата.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ТаблицаОплата.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаОплата.СпособПогашенияЗадолженности,
	|	ТаблицаОплата.Сделка КАК ДокументРасчетов,
	|	ТаблицаОплата.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ТаблицаОплата.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
	|	ВЫБОР
	|		КОГДА ТаблицаОплата.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ТаблицаОплата.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаОплата.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
	|	ТаблицаОплата.СуммаВзаиморасчетов,
	|	ТаблицаОплата.СуммаРуб,
	|	ТаблицаОплата.СуммаРуб КАК СуммаБУ,
	|	0 КАК СуммаБезНДСРуб,
	|	0 КАК СуммаНДСРуб,
	|	ТаблицаОплата.ВидДокВходящий,
	|	ТаблицаОплата.ДатаВходящегоДокумента,
	|	ТаблицаОплата.НомерВходящегоДокумента,
	|	ТаблицаОплата.Содержание
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПогашениеЗадолженностиТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы
		 ИЛИ НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьПрочее И Реквизиты.СуммаСуточных = 0 Тогда
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ФизЛицо КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасходыПредпринимателя
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты", НомераТаблиц.Количество());
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТовары.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.Ссылка КАК Партия,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК Сумма,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК НДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.УчестьРасходыУСНТовары";
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса
		+ ?(Реквизиты.ЕстьТовары, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|", "") +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ЭтоКомандировка
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Командировки)
		|		КОГДА ТаблицаУслуги.СчетЗатрат В (&Субсчета97)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
		|	КОНЕЦ КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.СчетЗатрат В (&Субсчета97)
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		ИНАЧЕ ТаблицаУслуги.Номенклатура
		|	КОНЕЦ КАК ЭлементРасхода,
		|	ЛОЖЬ КАК ЭтоТовар,
		|	ЛОЖЬ КАК ЭтоМатериал,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК Количество,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК Сумма,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК НДС,
		|	ТаблицаУслуги.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаУслуги";
	КонецЕсли;
	
	Если Реквизиты.СуммаСуточных > 0 Тогда
		ТекстЗапроса = ТекстЗапроса
		+ ?(Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьПрочее, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|", "") +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Командировки) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	НЕОПРЕДЕЛЕНО КАК ЭлементРасхода,
		|	ЛОЖЬ КАК ЭтоТовар,
		|	ЛОЖЬ КАК ЭтоМатериал,
		|	&СчетЗатратКомандировки КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК Количество,
		|	&СуммаСуточных КАК Сумма,
		|	0 КАК НДС,
		|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН";
	КонецЕсли;
		
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаТоваров",        Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаПрочее",         Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СуммаРуб КАК Сумма,
		|	ТаблицаТовары.СуммаНДСРуб КАК НДС,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		ИНАЧЕ ТаблицаТовары.Номенклатура.НоменклатурнаяГруппа
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	НЕОПРЕДЕЛЕНО КАК СтатьяЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасходовНУ,
		|	ИСТИНА КАК ПринятиеКналоговомуУчету,
		|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК Партия
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаТоваров", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаТоваров", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Прочее"" КАК ИмяСписка,
		|	&СинонимПрочее КАК СинонимСписка,
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.Номенклатура КАК Номенклатура,
		|	ТаблицаПрочее.СуммаРуб КАК Сумма,
		|	ТаблицаПрочее.СуммаНДСРуб КАК НДС,
		|	0 КАК Количество,
		|	ТаблицаПрочее.СчетЗатрат КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидРасходовНУ,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК Партия
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаПрочее", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаПрочее", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Вложенный.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(Вложенный.СуммаРуб) КАК СуммаРуб
		|ИЗ
		|	("
		+ ?(НЕ Реквизиты.ЕстьТовары, "",
		"ВЫБРАТЬ
		|		&Ссылка КАК ДокументРасчетов,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары")
		+ ?(НЕ Реквизиты.ЕстьТовары ИЛИ НЕ Реквизиты.ЕстьПрочее, "", "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|") + ?(НЕ Реквизиты.ЕстьПрочее, "", "
		|	ВЫБРАТЬ
		|		&Ссылка КАК ДокументРасчетов,
		|		ТаблицаПрочее.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаПрочее КАК ТаблицаПрочее")
		+ ") КАК Вложенный
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументРасчетов"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаБилеты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьБилеты Тогда
		ПараметрыПроведения.Вставить("Билеты", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
		
	НомераТаблиц.Вставить("Билеты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
   "ВЫБРАТЬ
   |	ТаблицаБилеты.НомерСтроки КАК НомерСтроки,
   |	ТаблицаБилеты.Билет КАК Билет,
   |	ТаблицаБилеты.НомерБилета КАК НомерБилета,
   |	ТаблицаБилеты.ДатаПокупки КАК ДатаПокупки,
   |	ТаблицаБилеты.СчетФактура КАК СчетФактура,
   |	ТаблицаБилеты.СтавкаНДС КАК СтавкаНДС,
   |	ТаблицаБилеты.Перевозчик КАК Поставщик,
   |	ТаблицаБилеты.Сотрудник КАК Сотрудник,
   |	ТаблицаБилеты.СчетЗатрат КАК СчетЗатрат,
   |	ТаблицаБилеты.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
   |	ТаблицаБилеты.Субконто1 КАК Субконто1,
   |	ТаблицаБилеты.Субконто2 КАК Субконто2,
   |	ТаблицаБилеты.Субконто3 КАК Субконто3,
   |	ТаблицаБилеты.СпособУчетаНДС КАК СпособУчетаНДС,
   |	ТаблицаБилеты.Сумма - ВЫБОР
   |		КОГДА ТаблицаБилеты.НДСВключенВСтоимость
   |			ТОГДА 0
   |		ИНАЧЕ ТаблицаБилеты.СуммаНДС
   |	КОНЕЦ КАК СуммаБУ,
   |	ТаблицаБилеты.СуммаНДС КАК СуммаНДСРуб,
   |	ТаблицаБилеты.Сумма - ТаблицаБилеты.СуммаНДС КАК СуммаРуб,
   |	ТаблицаБилеты.Сумма - ТаблицаБилеты.СуммаНДС КАК СуммаБезНДСРуб,
   |	ТаблицаБилеты.Сумма - ТаблицаБилеты.СуммаНДС КАК СуммаБезНДС,
   |	ТаблицаБилеты.НДСВключенВСтоимость КАК НДСВключенВСтоимость
   |ИЗ
   |	ТаблицаБилеты КАК ТаблицаБилеты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ДобавитьКолонкуСодержаниеТовары(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	ШаблонСодержания = "Поступление %1 по %2 %3 от %4";
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		МПЗ = БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			МПЗ, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержаниеПрочее(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержания = "%1 по %2 %3 от %4";
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			СтрокаТаблицы.Содержание, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержаниеБилеты(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	ШаблонСодержания = НСтр("ru='Билет %1 от %2'");
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Содержание = СтрШаблон(ШаблонСодержания, СтрокаТаблицы.НомерБилета, Формат(СтрокаТаблицы.ДатаПокупки, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержаниеОплата(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержания = "%1 по %2 %3 от %4";
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			СтрокаТаблицы.Содержание, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвижений

Процедура СформироватьРасходыНаСуточные(ТаблицаРеквизиты, Движения) Экспорт
	
	Параметры = ПодготовитьПараметрыСуточные(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.СуммаСуточных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	СчетРасчетовСПодотчетнымиЛицами = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;

	СодержаниеПроводки = НСтр("ru='Суточные по командировке, %1, с %2 по %3'");
	Проводка.Содержание  = СтрШаблон(
		СодержаниеПроводки, 
		Реквизиты.ФизЛицо,
		Формат(Реквизиты.ДатаНачалаКомандировки, "ДЛФ=D"),
		Формат(Реквизиты.ДатаОкончанияКомандировки, "ДЛФ=D"));
				
	Проводка.Сумма = Реквизиты.СуммаСуточных;
	
	// Дт
	Проводка.СчетДт = Реквизиты.СчетЗатрат;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		1, Реквизиты.Субконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		2, Реквизиты.Субконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
		3, Реквизиты.Субконто3);
	
	// Кт
	Проводка.СчетКт  = СчетРасчетовСПодотчетнымиЛицами;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
		"РаботникиОрганизаций", Реквизиты.ФизЛицо);
	
	СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	// В том случае, если учет затрат ведется по подразделениям 
	// (значение ФО учтено в СвойстваСчетаЗатрат.УчетПоПодразделениям),
	// то для суточных подразделение затрат явным образом указывается в настройках счетов учета (Объект.ПодразделениеЗатрат)
	Если СвойстваСчетаЗатрат.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.ПодразделениеЗатрат;
	КонецЕсли;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	// В том случае, если в ИБ ведется учет по обособленным подразделениям (КОРП),
	// то для расчетов с подотчетными лицами подразделение берем из шапки документа (Объект.ПодразделениеОрганизации)
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСуточные(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
			
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"        // <ДокументСсылка.АвансовыйОтчет>
		+ "Период,"             // <Дата>
		+ "ДатаНачалаКомандировки,"    // <Дата>
		+ "ДатаОкончанияКомандировки," // <Дата>
		+ "Организация,"        // <СправочникСсылка.Организации>
		+ "Подразделение,"      // <Ссылка на справочник подразделений>
		+ "ФизЛицо,"  	        // <СправочникСсылка.ФизическиеЛица>
		+ "СуммаСуточных,"      // <Число,15,2>
		+ "СчетЗатрат,"         // <ПланСчетовСсылка.Хозрасчетный>
		+ "ПодразделениеЗатрат,"// <СправочникСсылка.ПодразделенияОрганизаций>
		+ "Субконто1,"          // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"          // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто3";          // <Характеристика.ВидыСубконтоХозрасчетные>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьРасходыПоИспользованнымБилетам(ТаблицаБилеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаБилеты) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Параметры = ПодготовитьПараметрыБилеты(ТаблицаБилеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	Билеты = Параметры.Билеты;
	
	СчетУчетаБилетов = ПланыСчетов.Хозрасчетный.Билеты;
	
	СтатьяЗатрат = УчетКомандировок.СтатьяЗатратКомандировочныеРасходы();
	ПодразделениеЗатратПоУмолчанию = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Реквизиты.Организация);
	
	Для каждого СтрокаБилета Из Билеты Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		СодержаниеПроводки = НСтр("ru='Расходы по билету %1'");
		Проводка.Содержание  = СтрШаблон(СодержаниеПроводки, СтрокаБилета.Билет);
		
		Проводка.Сумма = СтрокаБилета.СуммаБУ;
		
		// Дт
		Проводка.СчетДт  = СтрокаБилета.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаБилета.Субконто1);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			2, СтрокаБилета.Субконто2);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			3, СтрокаБилета.Субконто3);
		
		// Кт
		Проводка.СчетКт  = СчетУчетаБилетов;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"РаботникиОрганизаций", СтрокаБилета.Сотрудник);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Билеты", СтрокаБилета.Билет);
		
		СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		СвойстваСчетаБилетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		// На счете затрат устанавливаем подразделение, указанное в строке билета.
		// ФО ВестиУчетЗатратПоПодразделениям уже учтена в СвойстваСчетаЗатрат.
		Если СвойстваСчетаЗатрат.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаБилета.ПодразделениеЗатрат;
		КонецЕсли;
		
		// На счете билетов устанавливаем обособленное подразделение, указанное в шапке документа.
		// Это подразделение доступно только в КОРП.
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И СвойстваСчетаБилетов.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыБилеты(ТаблицаБилеты, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ПредоплаченныеБилеты
	СписокОбязательныхКолонок = ""
		+ "Сотрудник,"  	    // <СправочникСсылка.ФизическиеЛица>
		+ "Билет,"  	   	    // <СправочникСсылка.Билеты>
		+ "СуммаБУ,"            // <Число,15,2>
		+ "СчетЗатрат,"         // <ПланСчетовСсылка.Хозрасчетный>
		+ "ПодразделениеЗатрат,"// <СправочникСсылка.ПодразделенияОрганизаций>
		+ "Субконто1,"          // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"          // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто3";          // <Характеристика.ВидыСубконтоХозрасчетные>
	
	Параметры.Вставить("Билеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаБилеты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Период,"            // <Дата>
		+ "Организация,"       // <СправочникСсылка.Организации>
		+ "Подразделение";     // <Ссылка на справочник подразделений>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОтложенноеПроведение

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ИспользуетсяОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ(Реквизиты.ЕстьОплаты ИЛИ Реквизиты.ЕстьТара) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = "";
	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	Если Реквизиты.ЕстьОплаты Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОплата.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаОплата.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплата.РеквизитыДата КАК Дата
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата";
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТара.Контрагент КАК Контрагент,
		|	ТаблицаТара.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаТара.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаТара.ВидДоговора КАК ВидДоговора,
		|	ТаблицаТара.РеквизитыДата КАК Дата
		|ИЗ
		|	ТаблицаТара КАК ТаблицаТара";
	КонецЕсли;

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ИспользуетсяОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ (Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьТара ИЛИ Реквизиты.ЕстьПрочее) Тогда
		ПараметрыПроведения.Вставить("ТоварыРегистрацияВПоследовательности", Неопределено);
		ПараметрыПроведения.Вставить("ПрочееРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьТара Тогда

		НомераТаблиц.Вставить("ТоварыРегистрацияВПоследовательности", НомераТаблиц.Количество());

		Если Реквизиты.ЕстьТовары Тогда

			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары";
		
		КонецЕсли;

		Если Реквизиты.ЕстьТара Тогда
	
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТара.СчетУчета КАК СчетУчета,
			|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания
			|ИЗ
			|	ТаблицаТара КАК ТаблицаТара";
		
		КонецЕсли;
		
	Иначе
		ПараметрыПроведения.Вставить("ТоварыРегистрацияВПоследовательности", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		НомераТаблиц.Вставить("ПрочееРегистрацияВПоследовательности", НомераТаблиц.Количество());
	
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПрочее.СчетЗатрат
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее";
	Иначе
		ПараметрыПроведения.Вставить("ПрочееРегистрацияВПоследовательности", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, Отказ) Экспорт

	ВключенВПоследовательность = РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		Объект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		ПараметрыПроведения.ТоварыРегистрацияВПоследовательности,
		Перечисления.ВидыРегламентныхОпераций.ПустаяСсылка()); // Сбрасываемый вид регламентной операции будет определен позже.
		
	Если ВключенВПоследовательность Тогда
		// Документ включен в общую последовательность, больше с ним ничего делать не требуется.
		Возврат;
	КонецЕсли;

	ОбязательноРегистрироватьВПоследовательности = Ложь;

	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.ПрочееРегистрацияВПоследовательности);

	ТаблицаПрочее = Параметры.ТаблицаПрочее;
		
	// Регистрация в последовательности.
	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);

	ИначеЕсли НЕ ВключенВПоследовательность Тогда
		// Если документ регистрирует поступление затрат и при этом не был включен в последовательность,
		// то сбросим актуальность для тех рег.операций, которые зависят от соответствующих счетов.
		РаботаСПоследовательностями.ЗарегистрироватьУстареваниеРегламентныхОперацийПриПоступленииЗатрат(
			Объект, ТаблицаПрочее.ВыгрузитьКолонку("СчетЗатрат"), "Прочее");	

	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаПрочее)

	Параметры = Новый Структура;
	
	// Прочее
	СписокОбязательныхКолонок = ""
	+ "СчетЗатрат"                    // <ПланСчетовСсылка.Хозрасчетный> - Счет учета поступивших затрат.
	;

	Параметры.Вставить("ТаблицаПрочее",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПрочее, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры, 
		ПараметрыПроведения.ПогашениеЗадолженностиТаблица,
		ПараметрыПроведения.ПогашениеЗадолженности,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ПогашениеЗадолженности,
		Отказ);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Авансовый отчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Аванс_Отчет";
	КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет (АО-1)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	// Приходный ордер (М-4)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("ru = 'Приходный ордер (М-4)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авансовый отчет""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДанныеДокументов(МассивДокументов)
	
	СтруктураВозврата = Новый Структура("НачалоПериода, ОкончаниеПериода, Организации, ЕстьВалютные",
		Дата(1, 1, 1), Дата(1, 1, 1), Справочники.Организации.ПустаяСсылка(), Ложь);
	Если ТипЗнч(МассивДокументов) <> Тип("Массив") ИЛИ МассивДокументов.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРегУчета",   ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(АвансовыйОтчет.Дата) КАК НачалоПериода,
	|	МАКСИМУМ(АвансовыйОтчет.Дата) КАК ОкончаниеПериода
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Организация КАК Организации
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|	И АвансовыйОтчет.ВалютаДокумента <> &ВалютаРегУчета";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаДата = Пакет[0].Выбрать();
	Если ВыборкаДата.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДата);
	КонецЕсли;
	
	Если НЕ Пакет[1].Пустой() Тогда
		СтруктураВозврата.Вставить("Организации", Пакет[1].Выгрузить().ВыгрузитьКолонку("Организации"));
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ЕстьВалютные", НЕ Пакет[2].Пустой());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов",  МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка КАК Ссылка,
	|	АвансовыйОтчет.МоментВремени КАК МоментВремени,
	|	АвансовыйОтчет.Номер КАК Номер,
	|	АвансовыйОтчет.Дата КАК ДатаДокумента,
	|	АвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо,
	|	АвансовыйОтчет.ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	АвансовыйОтчет.Организация КАК Руководители,
	|	АвансовыйОтчет.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА АвансовыйОтчет.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ АвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	АвансовыйОтчет.ПодразделениеОрганизации.Код КАК КодПодразделения,
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.СчетЗатрат КАК СчетЗатрат,
	|	АвансовыйОтчет.НазначениеАванса КАК НазначениеАванса,
	|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента,
	|	АвансовыйОтчет.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АвансовыйОтчет.ВалютаДокумента.Представление КАК ПредставлениеВалюты,
	|	АвансовыйОтчет.СуммаДокумента КАК СуммаДокумента,
	|	АвансовыйОтчет.КоличествоДокументов КАК КоличествоДокументов,
	|	АвансовыйОтчет.КоличествоЛистов КАК КоличествоЛистов
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	АвансовыйОтчет.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка КАК АвансовыйОтчет,
	|	АвансовыйОтчетВыданныеАвансы.ДокументАванса КАК ДокументАванса,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ""БАНК""
	|		ИНАЧЕ ""КАССА""
	|	КОНЕЦ КАК ТипДокумента,
	|	АвансовыйОтчетВыданныеАвансы.ДокументАванса.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка В(&МассивОбъектов)";
	
	ДокументыАвансов = Запрос.Выполнить().Выбрать();
	
	ДанныеДокументов = ПолучитьДанныеДокументов(МассивОбъектов);
	Если ДанныеДокументов.ЕстьВалютные Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода",    ДанныеДокументов.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ДанныеДокументов.ОкончаниеПериода);
		Запрос.УстановитьПараметр("Организации",      ДанныеДокументов.Организации);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаДт,
		|	0 КАК СуммаКт,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			Регистратор,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
		|			,
		|			Организация В (&Организации)
		|				И ВалютаКт <> &ВалютаРеглУчета
		|				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	0,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			Регистратор,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&Организации)
		|				И ВалютаДт <> &ВалютаРеглУчета
		|				И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)";
		
		ЗапросПоВалютнымПроводкам = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор В(&МассивОбъектов)
	|	И НЕ(Хозрасчетный.СчетДт.Забалансовый
	|				ИЛИ Хозрасчетный.СчетКт.Забалансовый)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|								ТОГДА АвансовыйОтчет.Сумма
	|							ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|							ТОГДА АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|						ИНАЧЕ (АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС) * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|					КОНЕЦ
	|			КОНЕЦ)) КАК ПоОтчету,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.СуммаНДС
	|				ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|			КОНЕЦ)) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчета.Код КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Ссылка.НДСНеВыделять
	|				И АвансовыйОтчет.СуммаНДС = 0
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ АвансовыйОтчет.СчетУчетаНДС.Код
	|	КОНЕЦ КАК СчетНДС,
	|	АвансовыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчета.Код,
	|	АвансовыйОтчет.Ссылка,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Ссылка.НДСНеВыделять
	|				И АвансовыйОтчет.СуммаНДС = 0
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ АвансовыйОтчет.СчетУчетаНДС.Код
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.Сумма
	|				ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов * (АвансовыйОтчет.КурсВзаиморасчетов / АвансовыйОтчет.КратностьВзаиморасчетов)
	|			КОНЕЦ)),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	|		КОНЕЦ),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ОплатаПоставщикам))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АвансовыйОтчет.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|								ТОГДА АвансовыйОтчет.Сумма
	|							ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|							ТОГДА АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|						ИНАЧЕ (АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС) * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|					КОНЕЦ
	|			КОНЕЦ)),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.СуммаНДС
	|				ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|			КОНЕЦ)),
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Ссылка.НДСНеВыделять
	|				И АвансовыйОтчет.СуммаНДС = 0
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ АвансовыйОтчет.СчетУчетаНДС.Код
	|	КОНЕЦ,
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Прочее))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	АвансовыйОтчет.Ссылка,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Ссылка.НДСНеВыделять
	|				И АвансовыйОтчет.СуммаНДС = 0
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ АвансовыйОтчет.СчетУчетаНДС.Код
	|	КОНЕЦ";
	
	Запрос.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик КАК Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер КАК ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата КАК ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчету) КАК ПоОтчету,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(ДанныеАвансовогоОтчета.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер";
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка КАК Ссылка,
	|	АвансовыйОтчет.ЗаРубежом КАК ЗаРубежом,
	|	СУММА(АвансовыйОтчет.Сумма - АвансовыйОтчет.СуммаСверхНормы) КАК СуммаВПределахНормы,
	|	СУММА(АвансовыйОтчет.СуммаСверхНормы) КАК СуммаСверхНормы
	|ИЗ
	|	Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.ЗаРубежом
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ВыборкаСуточные = Запрос.Выполнить().Выбрать();
	
	// Выборка уникальных счетов учета по документам, подтверждающим расходы
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик КАК Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер КАК ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата КАК ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода КАК НаименованиеРасхода,
	|	ДанныеАвансовогоОтчета.СчетЗатрат КАК Счет
	|ИЗ
	|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
	|ГДЕ
	|	ДанныеАвансовогоОтчета.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода,
	|	ДанныеАвансовогоОтчета.СчетНДС
	|ИЗ
	|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
	|ГДЕ
	|	ДанныеАвансовогоОтчета.СчетНДС <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет";
	
	ВыборкаСчетов  = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Субсчета71     = БухгалтерскийУчетПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	Субсчета71Вал  = БухгалтерскийУчетПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
		
		// ТИТУЛЬНЫЙ ЛИСТ
		ЗапросТитул = Новый Запрос();
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71Вал);
		Иначе
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71);
		КонецЕсли;
		
		ЗапросТитул.УстановитьПараметр("Сотрудник",     Шапка.ПодотчетноеЛицо);
		ЗапросТитул.УстановитьПараметр("Организация",   Шапка.Организация);
		ЗапросТитул.УстановитьПараметр("ДатаИтогов",    Шапка.МоментВремени);
		ЗапросТитул.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаИтогов,
		|			Счет В (&Субсчета71),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Сотрудник
		|				И Подразделение = &Подразделение) КАК ХозрасчетныйОстатки";
		
		Если НЕ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Подразделение = &Подразделение", "");
		КонецЕсли;
		
		ЗапросТитул.Текст = ТекстЗапроса;
		ПредыдущийАванс = ЗапросТитул.Выполнить();
		Если ПредыдущийАванс.Пустой() Тогда
			Перерасход = 0;
			Остаток    = 0;
		Иначе
			ПредыдущийАвансВыборка = ПредыдущийАванс.Выбрать();
			ПредыдущийАвансВыборка.Следующий();
			
			Перерасход = ПредыдущийАвансВыборка.СуммаОстатокКт;
			Остаток    = ПредыдущийАвансВыборка.СуммаОстатокДт;
		КонецЕсли;
		
		ДанныеВал  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Шапка.ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДанныеВал.Кратность) Тогда
			ДанныеВал.Кратность = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеВал.Курс) Тогда
			ДанныеВал.Курс = 1;
		КонецЕсли;
		
		Если Перерасход <> 0 Тогда
			СуммаДоДокумента = - Перерасход;
		ИначеЕсли Остаток <> 0 Тогда
			СуммаДоДокумента = Остаток;
		Иначе
			СуммаДоДокумента = 0;
		КонецЕсли;
		
		ПолученоИзКассы = 0;
		ПолученоИзКассыПоКартам = 0;
		
		ДокументыАвансов.Сбросить();
		Пока ДокументыАвансов.НайтиСледующий(Новый Структура("АвансовыйОтчет", Шапка.Ссылка)) Цикл
			ДобавленнаяСумма = ?(ЗначениеЗаполнено(ДокументыАвансов.Сумма), ДокументыАвансов.Сумма, 0);
			Если ДокументыАвансов.ТипДокумента = "КАССА" Тогда
				ПолученоИзКассы = ПолученоИзКассы + ДобавленнаяСумма;
			Иначе
				ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + ДобавленнаяСумма;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Титул");
		
		КурсДока = ЗаполнениеДокументов.КурсДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КратДока = ЗаполнениеДокументов.КратностьДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КурсоваяРазница = 0;
		
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.ПредставлениеВалютыДокумента   = Шапка.ПредставлениеВалюты;
			ОбластьМакета.Параметры.ПолученоИзКассыВВалюте         = ПолученоИзКассы;
			ОбластьМакета.Параметры.ПолученоИзКассыВВалютеПоКартам = ПолученоИзКассыПоКартам;
			ПолученоИзКассы         = ?(КратДока <> 0, Окр(ПолученоИзКассы * КурсДока / КратДока, 2), 0);
			ПолученоИзКассыПоКартам = ?(КратДока <> 0, Окр(ПолученоИзКассыПоКартам * КурсДока / КратДока, 2), 0);
			
			ЗапросПоВалютнымПроводкам.Сбросить();
			Если ЗапросПоВалютнымПроводкам.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Тогда
				КурсоваяРазница = ЗапросПоВалютнымПроводкам.СуммаДт - ЗапросПоВалютнымПроводкам.СуммаКт;
			КонецЕсли;
			
			// курсовую разницу не разделяем по видам полученных средств
			Если ПолученоИзКассы > 0 Тогда
				ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
			Иначе
				ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + КурсоваяРазница;
			КонецЕсли;
			
			Израсходовано = Окр(Шапка.СуммаДокумента * КурсДока / КратДока, 2) + КурсоваяРазница;
		Иначе
			Израсходовано = Шапка.СуммаДокумента;
		КонецЕсли;
		
		ИтогоПолучено = ПолученоИзКассы + ПолученоИзКассыПоКартам;
		
		СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;
		
		ДанныеПодотчетногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
		ПодотчетноеЛицо         = ДанныеПодотчетногоЛица.Представление;
		ПодотчетноеЛицоОт       = ПодотчетноеЛицо;
		ТабельныйНомер          = ДанныеПодотчетногоЛица.ТабельныйНомер;
		Должность               = ДанныеПодотчетногоЛица.Должность;
		ПодразделениеСотрудника = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
		
		// Выводим титульный лист авансового отчета
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если ЗначениеЗаполнено(ПодразделениеСотрудника) Тогда
			ПараметрыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСотрудника, "Код,Наименование,НаименованиеПолное");
			ОбластьМакета.Параметры.ПредставлениеПодразделения = ?(ПустаяСтрока(ПараметрыПодразделения.НаименованиеПолное),
				ПараметрыПодразделения.Наименование,
				ПараметрыПодразделения.НаименованиеПолное);
			ОбластьМакета.Параметры.КодПодразделения = ПараметрыПодразделения.Код;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛицаОт        = ПодотчетноеЛицоОт;
		ОбластьМакета.Параметры.ТабельныйНомер                         = ТабельныйНомер;
		ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
		ОбластьМакета.Параметры.НомерДокумента                         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакета.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоИзКассыПоКартам                = ПолученоИзКассыПоКартам;
		
		Если СуммаДоДокумента >= 0 Тогда
			ОбластьМакета.Параметры.НачальныйОстаток    =  СуммаДоДокумента;
		Иначе
			ОбластьМакета.Параметры.НачальныйПерерасход = -СуммаДоДокумента;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
		ОбластьМакета.Параметры.Израсходовано = Израсходовано;
		ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
		Если ОстатокНаКонец >= 0  Тогда
			ОбластьМакета.Параметры.КонечныйОстаток    =  ОстатокНаКонец;
		Иначе
			ОбластьМакета.Параметры.КонечныйПерерасход = -ОстатокНаКонец;
		КонецЕсли;
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		ПодразделениеОтветственныхЛиц =
			?(ЗначениеЗаполнено(ПодразделениеСотрудника), ПодразделениеСотрудника ,Шапка.ПодразделениеОрганизации);
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = Руководители.РуководительПредставление;
		Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
		Кассир       = Руководители.КассирПредставление;
		
		ДляРасчета   = Шапка.СуммаДокумента * ДанныеВал.Курс / ДанныеВал.Кратность;
		
		ИспСумма     = Окр(ДляРасчета, 2, 1);
		ЦелСумма     = Цел(ИспСумма);
		КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");
		
		ОбластьМакета.Параметры.ИзрасходованоРуб = ЦелСумма;
		ОбластьМакета.Параметры.ИзрасходованоКоп = КопСумма;
		ОбластьМакета.Параметры.ДатаДокумента    = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.Руководитель     = Руководитель;
		ОбластьМакета.Параметры.ГлавныйБухгалтер = Бухгалтер;
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО    = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.СуммаОтчетаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
			ИспСумма, ВалютаРегламентированногоУчета) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";
		ОбластьМакета.Параметры.КоличествоДокументов = Шапка.КоличествоДокументов;
		ОбластьМакета.Параметры.КоличествоЛистов     = Шапка.КоличествоЛистов;
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
		ОбластьМакета.Параметры.Кассир                             = Кассир;
		ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжностьПредставление;
		
		Счетчик = 0;
		ВыборкаПроводок.Сбросить();
		Пока ВыборкаПроводок.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Цикл
			Счетчик = Счетчик + 1;
			ОбластьМакета.Параметры["СубСчетДебет"  + Счетчик] = ВыборкаПроводок.СчетДт;
			ОбластьМакета.Параметры["СуммаДебет"    + Счетчик] = ВыборкаПроводок.Сумма;
			ОбластьМакета.Параметры["СубСчетКредит" + Счетчик] = ВыборкаПроводок.СчетКт;
			ОбластьМакета.Параметры["СуммаКредит"   + Счетчик] = ВыборкаПроводок.Сумма;
			
			// Регламентированная форма АО-1 предусматривает только 8 строк для вывода Бухгалтерских записей
			Если Счетчик = 8 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// ОБОРОТНАЯ СТОРОНА
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим табличные части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		НомерСтроки   = 0;
		
		ИтогоПоОтчету        = 0;
		ИтогоПоОтчетуВВалюте = 0;
		
		ВыборкаПоТоварам.Сбросить();
		Пока ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьМакета.Параметры.ДокументДата        = ВыборкаПоТоварам.ДокументДата;
			ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(ВыборкаПоТоварам.НаименованиеРасхода);
			ОбластьМакета.Параметры.ДебетСубСчета 		= "";
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Поставщик",           ВыборкаПоТоварам.Поставщик);
			СтруктураПоиска.Вставить("ДокументНомер",       ВыборкаПоТоварам.ДокументНомер);
			СтруктураПоиска.Вставить("ДокументДата",        ВыборкаПоТоварам.ДокументДата);
			СтруктураПоиска.Вставить("НаименованиеРасхода", ВыборкаПоТоварам.НаименованиеРасхода);
			СтруктураПоиска.Вставить("Ссылка",              Шапка.Ссылка);
			
			ВыборкаСчетов.Сбросить();
			Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
				ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
					+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
					+ ВыборкаСчетов.Счет;
			КонецЦикла;
			
			Сумма = ВыборкаПоТоварам.ПоОтчету;
			
			ОбластьМакета.Параметры.ПоОтчету = Сумма;
			ОбластьМакета.Параметры.ПоУчету  = Сумма;
			
			ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
			
			Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
				
				СуммаВВалюте = ВыборкаПоТоварам.ПоОтчетуВВалюте;
				
				ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
				ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
				
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
				
		ШаблонНаименованияРасхода = НСтр("ru='Авансовый отчет (%1)'");
		ШаблонОписанияСуточныхВПределахНорм = НСтр("ru='суточные %1'");
		ШаблонОписанияСуточныхСверхНорм = НСтр("ru='суточные %1 сверх нормы'");
		
		Пока ВыборкаСуточные.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Цикл
			
			ОписаниеСуточных = СтрШаблон(
				ШаблонОписанияСуточныхВПределахНорм,
				?(ВыборкаСуточные.ЗаРубежом, НСтр("ru='за рубежом'"), НСтр("ru='по России'")));
							
			НаименованиеРасхода = СтрШаблон(ШаблонНаименованияРасхода, СокрЛП(ОписаниеСуточных));
				
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьМакета.Параметры.ДокументДата        = Шапка.ДатаДокумента;
			ОбластьМакета.Параметры.ДокументНомер       = Шапка.Номер;
			ОбластьМакета.Параметры.НаименованиеРасхода = НаименованиеРасхода;
			ОбластьМакета.Параметры.ДебетСубСчета 		= Шапка.СчетЗатрат;
						
			Сумма = ВыборкаСуточные.СуммаВПределахНормы;
			
			ОбластьМакета.Параметры.ПоОтчету = Сумма;
			ОбластьМакета.Параметры.ПоУчету  = Сумма;
			
			ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выведем строку суточных сверх нормы
			Если ВыборкаСуточные.СуммаСверхНормы > 0 Тогда
				
				ОписаниеСуточных = СтрШаблон(
					ШаблонОписанияСуточныхСверхНорм,
					?(ВыборкаСуточные.ЗаРубежом, НСтр("ru='за рубежом'"), НСтр("ru='по России'")));
									
				НаименованиеРасхода = СтрШаблон(ШаблонНаименованияРасхода, СокрЛП(ОписаниеСуточных));
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
				ОбластьМакета.Параметры.ДокументДата        = Шапка.ДатаДокумента;
				ОбластьМакета.Параметры.ДокументНомер       = Шапка.Номер;
				ОбластьМакета.Параметры.НаименованиеРасхода = НаименованиеРасхода;
				ОбластьМакета.Параметры.ДебетСубСчета 		= Шапка.СчетЗатрат;
							
				Сумма = ВыборкаСуточные.СуммаСверхНормы;
				
				ОбластьМакета.Параметры.ПоОтчету = Сумма;
				ОбластьМакета.Параметры.ПоУчету  = Сумма;
				
				ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
							
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		// Выводим подвал авансового отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте;
		ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_М4";
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М4");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов"  , МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ4();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПараметрыДокументов = РезультатЗапроса[1].Выгрузить();
	Шапка = РезультатЗапроса[2].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ПараметрыДокумента = ПараметрыДокументов.Найти(Шапка.Ссылка, "Ссылка");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
		ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

		// Выводим заголовок документа
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
		
		ПараметрыШапки = Новый Структура("ПоставщикНаименование, ПоставщикКод, НомерСопроводительногоДокумента");
		Если ПараметрыДокумента.КоличествоПоставщиков = 1 Тогда
			ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "НаименованиеДляПечатныхФорм,");
			ПараметрыШапки.Вставить("ПоставщикНаименование", ПредставлениеКонтрагента);
			ПараметрыШапки.Вставить("ПоставщикКод", Шапка.КодПоставщика);
			
			Если ПараметрыДокумента.КоличествоВходящихДокументов = 1 Тогда
				ПараметрыШапки.Вставить("НомерСопроводительногоДокумента", Шапка.НомерВходящегоДокумента);
			КонецЕсли;
		КонецЕсли;
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(ПараметрыШапки);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
		
		// Выводим заголовок таблицы
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;

		// Инициализация счетчиков страниц и строк
		НомерСтраницы   = 1;
		НомерСтроки     = 0;
		КоличествоСтрок = ПараметрыДокумента.КоличествоСтрок;
		
		// Выводим многострочную часть документа
		Пока Шапка.Следующий() Цикл

			НомерСтроки = НомерСтроки + 1;

			ОбластьМакетаСтрока.Параметры.Заполнить(Шапка);

			ВсегоСНДС = (?(ЗначениеЗаполнено(Шапка.Сумма), Шапка.Сумма, 0)
				 + ?(Шапка.СуммаВключаетНДС, 0, ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0)));

			КоличествоПринято = ?(ЗначениеЗаполнено(Шапка.Количество), Шапка.Количество, 0);
			СуммаНДС          = ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0);
			СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			
			Если Шапка.СуммаВключаетНДС И СуммаНДС <> 0 Тогда
				Цена = ?(КоличествоПринято = 0,
					СуммаБезНДС,
					СуммаБезНДС / КоличествоПринято);
					
			Иначе
					
				Цена = Шапка.Цена;
					
			КонецЕсли;

			ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.Цена              = Цена;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(Шапка.ТоварНаименование);

			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Иначе                                              // иначе - только подвал строк
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
			КонецЕсли;

			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда

				ТабличныйДокумент.Вывести(ОбластьМакетаПодвалСтрок);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
		ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим итоги по документу
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		Если ЗначениеЗаполнено(Шапка.Склад) Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.ДатаСоставления);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.ДатаСоставления);
			ОбластьМакетаПодвал.Параметры.ДолжностьПоставщика = ДанныеФизЛица.Должность;
			ОбластьМакетаПодвал.Параметры.ФИОПоставщика = ДанныеФизЛица.Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ПодотчетноеЛицо) Тогда 
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаСоставления);
			ОбластьМакетаПодвал.Параметры.ДолжностьМОЛ = ДанныеФизЛица.Должность;
			ОбластьМакетаПодвал.Параметры.ФИОМОЛ = ДанныеФизЛица.Представление;
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременныеТаблицы",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаПоставщики",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Поставщик.ИНН КАК ИННПоставщика,
	|	ТаблицаТовары.Поставщик КАК ОбособленноеПодразделениеПоставщика,
	|	ТаблицаТовары.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ТабличныеЧастиДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ТаблицаТовары.СчетФактура = &СчетФактура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаПрочее.НомерСтроки,
	|	ТаблицаПрочее.Номенклатура,
	|	ТаблицаПрочее.Номенклатура.Код,
	|	ТаблицаПрочее.Номенклатура.Артикул,
	|	ТаблицаПрочее.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаПрочее.Номенклатура.ЕдиницаИзмерения,
	|	1,
	|	ТаблицаПрочее.Сумма,
	|	ТаблицаПрочее.Сумма,
	|	ТаблицаПрочее.СуммаНДС,
	|	ТаблицаПрочее.СтавкаНДС,
	|	ИСТИНА,
	|	ТаблицаПрочее.Ссылка.СуммаВключаетНДС,
	|	ТаблицаПрочее.Ссылка,
	|	ЛОЖЬ,
	|	ТаблицаПрочее.Поставщик,
	|	ТаблицаПрочее.Поставщик.ИНН,
	|	ТаблицаПрочее.Поставщик,
	|	ТаблицаПрочее.СчетФактура,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаПрочее.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Прочее))
	|ГДЕ
	|	ТаблицаПрочее.Ссылка = &ДокументОснование
	|	И ТаблицаПрочее.СчетФактура = &СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоставщиков.Поставщик КАК Поставщик,
	|	ТаблицаПоставщиков.ИННПоставщика КАК ИННПоставщика,
	|	ТаблицаПоставщиков.ОбособленноеПодразделениеПоставщика КАК ОбособленноеПодразделениеПоставщика,
	|	ТаблицаПоставщиков.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ Поставщики
	|ИЗ
	|	ТабличныеЧастиДокумента КАК ТаблицаПоставщиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	&ПустоеПодразделение КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	Поставщики.Поставщик КАК Поставщик,
	|	Поставщики.ИННПоставщика КАК ИННПоставщика,
	|	Поставщики.ОбособленноеПодразделениеПоставщика КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	Реквизиты.Организация КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННПокупателя,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
	|	НЕОПРЕДЕЛЕНО КАК Основание,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеДата,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеНомер,
	|	НЕОПРЕДЕЛЕНО КАК Исполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ИсполнительНаОсновании,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЧерезКого,
	|	НЕОПРЕДЕЛЕНО КАК ЗаЗаказчикаНаОсновании,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	&СчетФактура КАК СчетФактура,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Поставщики КАК Поставщики
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар КАК Товар,
	|	ТаблицаТовары.ТоварКод КАК ТоварКод,
	|	ТаблицаТовары.ТоварАртикул КАК ТоварАртикул,
	|	ТаблицаТовары.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.ПредставлениеСтраны КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ТаблицаТовары.РегистрационныйНомерТД КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.ЭтоУслуга КАК ЭтоУслуга,
	|	ТаблицаТовары.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ТаблицаТовары.ВсегоРуб КАК ВсегоРуб,
	|	ТаблицаТовары.НДСРуб КАК НДСРуб,
	|	ТаблицаТовары.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	НЕОПРЕДЕЛЕНО КАК ПериодичностьУслуги,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТабличныеЧастиДокумента КАК ТаблицаТовары";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетФактураВыданныйНалоговыйАгентРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаБезНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	&РасчетнаяСтавкаНДСПоУмолчанию КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.Сумма * &ЗначениеСтавкиНДС / (100 + &ЗначениеСтавкиНДС)) КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ТаблицаДокумента.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|	И НЕ ДоговорыКонтрагентов.УчетАгентскогоНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ4()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументАвансовыйОтчет.Номер КАК Номер,
	|	ДокументАвансовыйОтчет.Ссылка КАК Ссылка,
	|	ДокументАвансовыйОтчет.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ДокументАвансовыйОтчет.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СубСчет,
	|	ДокументАвансовыйОтчет.Дата КАК ДатаСоставления,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДокументАвансовыйОтчет.Организация КАК Организация,
	|	ДокументАвансовыйОтчет.Организация КАК ЮрФизЛицо,
	|	ДокументАвансовыйОтчет.Склад КАК МестоПриемки,
	|	ДокументАвансовыйОтчет.Склад КАК Склад,
	|	ДокументАвансовыйОтчет.Склад.Представление КАК СкладНаименование,
	|	АвансовыйОтчет.Поставщик.Код КАК КодПоставщика,
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	ДокументАвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументАвансовыйОтчет.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументАвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное КАК ПредставлениеПодразделения,
	|	ДокументАвансовыйОтчет.КурсДокумента КАК Курс,
	|	ДокументАвансовыйОтчет.КратностьДокумента КАК Кратность,
	|	ДокументАвансовыйОтчет.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчет.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА АвансовыйОтчет.Номенклатура.Артикул
	|		ИНАЧЕ АвансовыйОтчет.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	АвансовыйОтчет.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	АвансовыйОтчет.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	АвансовыйОтчет.СтавкаНДС КАК СтавкаНДС,
	|	АвансовыйОтчет.Цена,
	|	СУММА(АвансовыйОтчет.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументАвансовыйОтчет.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			КОГДА ДокументАвансовыйОтчет.КратностьДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(АвансовыйОтчет.Сумма * ДокументАвансовыйОтчет.КурсДокумента / ДокументАвансовыйОтчет.КратностьДокумента КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументАвансовыйОтчет.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			КОГДА ДокументАвансовыйОтчет.КратностьДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(АвансовыйОтчет.СуммаНДС * ДокументАвансовыйОтчет.КурсДокумента / ДокументАвансовыйОтчет.КратностьДокумента КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаНДС,
	|	МИНИМУМ(АвансовыйОтчет.НомерСтроки) КАК НомерСтроки,
	|	ДокументАвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДокументАвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|		ПО ДокументАвансовыйОтчет.Ссылка = АвансовыйОтчет.Ссылка
	|ГДЕ
	|	ДокументАвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|	И НЕ АвансовыйОтчет.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументАвансовыйОтчет.Номер,
	|	ДокументАвансовыйОтчет.Ссылка,
	|	ДокументАвансовыйОтчет.Проведен,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	ДокументАвансовыйОтчет.Организация,
	|	ДокументАвансовыйОтчет.Склад,
	|	ДокументАвансовыйОтчет.Склад.Представление,
	|	АвансовыйОтчет.Поставщик.Код,
	|	АвансовыйОтчет.Поставщик,
	|	ДокументАвансовыйОтчет.ВалютаДокумента,
	|	ДокументАвансовыйОтчет.ПодразделениеОрганизации,
	|	ДокументАвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументАвансовыйОтчет.КурсДокумента,
	|	ДокументАвансовыйОтчет.КратностьДокумента,
	|	ДокументАвансовыйОтчет.СуммаВключаетНДС,
	|	АвансовыйОтчет.Номенклатура,
	|	АвансовыйОтчет.Цена,
	|	АвансовыйОтчет.СтавкаНДС,
	|	АвансовыйОтчет.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	АвансовыйОтчет.Номенклатура.ЕдиницаИзмерения.Код,
	|	АвансовыйОтчет.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА АвансовыйОтчет.Номенклатура.Артикул
	|		ИНАЧЕ АвансовыйОтчет.Номенклатура.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументАвансовыйОтчет.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ,
	|	ДокументАвансовыйОтчет.ФизЛицо,
	|	ДокументАвансовыйОтчет.Дата,
	|	ДокументАвансовыйОтчет.Организация,
	|	ДокументАвансовыйОтчет.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеАвансовогоОтчета.Поставщик) КАК КоличествоПоставщиков,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеАвансовогоОтчета.НомерВходящегоДокумента) КАК КоличествоВходящихДокументов,
	|	КОЛИЧЕСТВО(ДанныеАвансовогоОтчета.Ссылка) КАК КоличествоСтрок
	|ИЗ
	|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеАвансовогоОтчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Номер,
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Проведен,
	|	ДанныеАвансовогоОтчета.СубСчет,
	|	ДанныеАвансовогоОтчета.ДатаСоставления,
	|	ДанныеАвансовогоОтчета.НомерВходящегоДокумента,
	|	ДанныеАвансовогоОтчета.Организация,
	|	ДанныеАвансовогоОтчета.ЮрФизЛицо,
	|	ДанныеАвансовогоОтчета.МестоПриемки,
	|	ДанныеАвансовогоОтчета.Склад,
	|	ДанныеАвансовогоОтчета.СкладНаименование,
	|	ДанныеАвансовогоОтчета.КодПоставщика,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ВалютаДокумента,
	|	ДанныеАвансовогоОтчета.ПодразделениеОрганизации,
	|	ДанныеАвансовогоОтчета.ПредставлениеПодразделения,
	|	ДанныеАвансовогоОтчета.Курс,
	|	ДанныеАвансовогоОтчета.Кратность,
	|	ДанныеАвансовогоОтчета.СуммаВключаетНДС,
	|	ДанныеАвансовогоОтчета.Номенклатура,
	|	ДанныеАвансовогоОтчета.ТоварНаименование,
	|	ДанныеАвансовогоОтчета.ТоварКод,
	|	ДанныеАвансовогоОтчета.ЕдиницаИзмеренияНаименование,
	|	ДанныеАвансовогоОтчета.ЕдиницаИзмеренияКод,
	|	ДанныеАвансовогоОтчета.СтавкаНДС,
	|	ДанныеАвансовогоОтчета.Цена,
	|	ДанныеАвансовогоОтчета.Количество,
	|	ДанныеАвансовогоОтчета.Сумма,
	|	ДанныеАвансовогоОтчета.СуммаНДС,
	|	ДанныеАвансовогоОтчета.НомерСтроки,
	|	ДанныеАвансовогоОтчета.ПодотчетноеЛицо
	|ИЗ
	|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеАвансовогоОтчета.ДатаСоставления,
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Аванс_Отчет") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Аванс_Отчет",
			"Авансовый отчет",
			ПечатьАвансовогоОтчета(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4",
			"М-4 (Приходный ордер)", ПечатьМ4(МассивОбъектов, ОбъектыПечати),,
			"ОбщийМакет.ПФ_MXL_М4");
	КонецЕсли;
		
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ФизЛицо");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	МассивРеквизитов.Добавить("ВидОперации");
	
	Возврат МассивРеквизитов;
	
КонецФункции

#Область ОбработчикиОбновления

// Процедура - обработчик обновления
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьВидОперацииПоУмолчанию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	АвансовыйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАвансовыйОтчет.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйОтчет.Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.АвансовыйОтчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено ИЛИ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;
		
		Попытка
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Документы.АвансовыйОтчет.ЗаполнитьВидОперацииПоУмолчанию() не удалось обработать авансовый отчет по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.АвансовыйОтчет, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
		
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.АвансовыйОтчет.ЗаполнитьВидОперацииПоУмолчанию() не удалось обработать авансовые отчеты: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.АвансовыйОтчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.АвансовыйОтчет.ЗаполнитьВидОперацииПоУмолчанию() обработала очередную порцию авансовых отчетов: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик обновления
// Находит авансовые отчеты, в которых не указаны счета затрат для билетов и суточных, и заполняет необходимые реквизиты документов.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьАналитикуУчетаКомандировочныхРасходов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДокументыБезАналитики.Ссылка КАК Ссылка 
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		АвансовыйОтчетСуточные.Ссылка КАК Ссылка,
	|		АвансовыйОтчетСуточные.Ссылка.Дата КАК Дата,
	|		АвансовыйОтчетСуточные.Ссылка.Организация КАК Организация
	|	ИЗ
	|		Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчетСуточные
	|	ГДЕ
	|		АвансовыйОтчетСуточные.Ссылка.Проведен
	|		И АвансовыйОтчетСуточные.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАвансовыйОтчет.Командировка)
	|		И АвансовыйОтчетСуточные.Ссылка.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		АвансовыйОтчетБилеты.Ссылка,
	|		АвансовыйОтчетБилеты.Ссылка.Дата,
	|		АвансовыйОтчетБилеты.Ссылка.Организация
	|	ИЗ
	|		Документ.АвансовыйОтчет.Билеты КАК АвансовыйОтчетБилеты
	|	ГДЕ
	|		АвансовыйОтчетБилеты.Ссылка.Проведен
	|		И АвансовыйОтчетБилеты.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК ДокументыБезАналитики
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыБезАналитики.Дата УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.АвансовыйОтчет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("НеЗаполненныеРеквизиты", Истина); 
			СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Отбор);
			
			Для каждого СтрокаБилета Из ДокументОбъект.Билеты Цикл
				
				Если ЗначениеЗаполнено(СтрокаБилета.СпособУчетаНДС) Тогда
					Продолжить;
				КонецЕсли;	
				
				// До текущих изменений (добавление колонки СпособУчетаНДС) способ учета НДС по билетам всегда устанавливался "Распределяется".
				// Для сохранения совместимости с прежней версией ставим безусловно способ "Распределяется".
				// При этом в случае перепроведения документа при отключенной ФО "РаздельныйУчетНДСНаСчете19" соответствующее субконто счета 19 будет очищено.
				СтрокаБилета.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
				
			КонецЦикла; 
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Документы.АвансовыйОтчет.ЗаполнитьАналитикуУчетаКомандировочныхРасходов() не удалось обработать авансовый отчет по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.АвансовыйОтчет, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
		
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.АвансовыйОтчет.ЗаполнитьАналитикуУчетаКомандировочныхРасходов() не удалось обработать авансовые отчеты: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.АвансовыйОтчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.АвансовыйОтчет.ЗаполнитьАналитикуУчетаКомандировочныхРасходов() обработала очередную порцию авансовых отчетов: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, обработан ли авансовый отчет процедурой обновления (см. ЗаполнитьАналитикуУчетаКомандировочныхРасходов()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция НеТребуетсяЗаполнятьСчетаУчета(Параметры) Экспорт
	
	Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат Истина;
	КонецЕсли;	

	Документ = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
    	Документ = Параметры.Данные;
	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("ДокументОбъект.АвансовыйОтчет")
		 ИЛИ ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Документ = Параметры.Данные.Ссылка;
    КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетСуточные.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчетСуточные
	|ГДЕ
	|	АвансовыйОтчетСуточные.Ссылка = &Ссылка
	|	И АвансовыйОтчетСуточные.Ссылка.Проведен
	|	И АвансовыйОтчетСуточные.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАвансовыйОтчет.Командировка)
	|	И АвансовыйОтчетСуточные.Ссылка.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетБилеты.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Билеты КАК АвансовыйОтчетБилеты
	|ГДЕ
	|	АвансовыйОтчетБилеты.Ссылка = &Ссылка
	|	И АвансовыйОтчетБилеты.Ссылка.Проведен
	|	И АвансовыйОтчетБилеты.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)";

	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Пустой();
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли