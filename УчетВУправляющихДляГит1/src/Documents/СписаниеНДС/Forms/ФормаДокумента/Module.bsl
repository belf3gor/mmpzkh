
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Состав",           "Состав");
	СписокТабличныхЧастей.Добавить("АвансыПолученные", "АвансыПолученные");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСписаниеНДС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
			
		ОбновитьИтогиВПодвале(ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ТекущиеДанные.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.СуммаБезНДС, Ложь, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаБезНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	ТекущиеДанные.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.СуммаБезНДС, Ложь, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНДСПриИзменении(Элемент)
	
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыПолученные

&НаКлиенте
Процедура АвансыПолученныеНДСПриИзменении(Элемент)
	
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПолученныеПриИзменении(Элемент)
	
	ОбновитьИтогиВПодвале(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	
	ЗаполнитьПоПоступлениюТоваровУслуг("Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)
	
	ЗаполнитьПоПоступлениюТоваровУслуг("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСписаннойКредиторскойЗадолженности(Команда)
	
	Если Объект.АвансыПолученные.Количество() > 0  Тогда
		
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением проведение документа будет отменено, а табличная часть будет очищена. Заполнить?'");
		Иначе
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоСписаннойКредиторскойЗадолженности", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьОстаткамиПоСписаннойКредиторскойЗадолженностиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеТабличнойЧастиАвансыПолученные

&НаКлиенте
Процедура ВопросЗаполнитьПоСписаннойКредиторскойЗадолженности(Ответ, Параметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.АвансыПолученные.Очистить();
		ЗаполнитьОстаткамиПоСписаннойКредиторскойЗадолженностиНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоСписаннойКредиторскойЗадолженностиНаКлиенте()
	
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета()
	
	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;
	
	// Проверим заполненность обязательных реквизитов
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	
	НаименованиеЗадания = "ЗаполнитьСписаниеНДСПоСписаннойКредиторскойЗадолженности";
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.СписаниеНДС.ПодготовитьДанныеДляЗаполненияАвансыПолученные",
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АвансыПолученные.Загрузить(ТаблицаДанных);
	
	ОбновитьИтогиВПодвале(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТабличнойЧастиСостав

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(СпособЗаполнения)
	
	Если СпособЗаполнения = "Заполнить"
		И Объект.Состав.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПоступленияТоваровУслуг();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Состав.Очистить();
		ОткрытьФормуВыбораПоступленияТоваровУслуг();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг()

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
		
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Отказ = Ложь;
	ДокументОбъект.ЗаполнитьПоПоступлению(ВыбранноеЗначение, Отказ);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ТекстСообщения = НСтр("ru='Нет данных для списания НДС.'");
	Если Отказ Тогда 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиВПодвале(ЭтотОбъект)

	Объект = ЭтотОбъект.Объект;

	ЭтотОбъект.ИтогСуммаНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
		Объект.Состав.Итог("НДС")
		+ Объект.АвансыПолученные.Итог("НДС"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// СоставНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Состав.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Состав.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "Подразделение", "СубконтоСписанияНДС", "ПодразделениеСписания", "СчетСписанияНДС");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти




