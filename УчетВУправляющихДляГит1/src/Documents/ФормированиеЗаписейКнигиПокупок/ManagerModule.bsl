#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 23, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("ДокументСозданВПомощнике");
	
	Возврат МассивРеквизитов;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит заполнение документа в целом, либо указанной табличной части
//
// Параметры:
//   СтруктураПараметров - Струкутра - структура входных параметров с ключами:
//     * Организация           - СправочникСсылка.Организация - организация, для которой будут получены данные для заполнения документа.
//     * Дата                  - Дата - дата, на которую будут получены данные для заполнения документа.
//     * ПредъявленНДСКВычету0 - Булево - признак заполнения вычетами по деятельности, облагаемой по ставке 0%.
//     * ИмяТабЧасти           - Строка, Неопределено - идентификатор табличной части, для которой выполняется заполнение,
//                               если передано Неопределено - выполняется заполнение всех табличных частей.
//   АдресХранилища - Строка - адрес временного хранилища для помещения результата выполнения.
Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	ИмяТабЧасти           = СтруктураПараметров.ИмяТабЧасти;
	УпрощенныйУчетНДС     = УчетнаяПолитика.УпрощенныйУчетНДС(СтруктураПараметров.Организация, СтруктураПараметров.Дата);
	ВерсияНДС             = УчетНДСКлиентСервер.Версия(СтруктураПараметров.Дата);
	ПредъявленНДСКВычету0 = СтруктураПараметров.ПредъявленНДСКВычету0;
	
	Если ИмяТабЧасти = Неопределено Тогда 
		
		Если ПредъявленНДСКВычету0 Тогда
			
			// НДС по приобретенным ценностям
			ДанныеДляЗаполнения.Вставить(
				"ВычетПоПриобретеннымЦенностям", ПодготовитьДанныеРазделаВычетПоПриобретеннымЦенностям(СтруктураПараметров));
			
			// НДС налоговый агент
			ДанныеДляЗаполнения.Вставить(
				"ВычетНДСПоНалоговомуАгенту", ПодготовитьДанныеРазделаВычетНДСПоНалоговомуАгенту(СтруктураПараметров));
				
		Иначе
			
			Если УпрощенныйУчетНДС Тогда
				
				// Вычет при зачете полученных авансов
				ДанныеДляЗаполнения.Вставить(
					"НДСсАвансов", ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(СтруктураПараметров));
				
			Иначе
				
				// Вычет при зачете полученных авансов
				ДанныеДляЗаполнения.Вставить(
					"НДСсАвансов", ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(СтруктураПараметров));
					
				Если УчетНДСКлиентСервер.Версия(СтруктураПараметров.Дата) = 1 Тогда
					
					// Вычет НДС при выдаче авансов
					ДанныеДляЗаполнения.Вставить(
						"НДСсАвансовВыданных", ПодготовитьДанныеРазделаВычетНДССВыданныхАвансов(СтруктураПараметров));
						
				КонецЕсли;
				
				// НДС по приобретенным ценностям
				ДанныеДляЗаполнения.Вставить(
					"ВычетПоПриобретеннымЦенностям", ПодготовитьДанныеРазделаВычетПоПриобретеннымЦенностям(СтруктураПараметров));
				
				// НДС налоговый агент
				ДанныеДляЗаполнения.Вставить(
					"ВычетНДСПоНалоговомуАгенту", ПодготовитьДанныеРазделаВычетНДСПоНалоговомуАгенту(СтруктураПараметров));
					
				Если СтруктураПараметров.Дата >= '20111001' Тогда	
				
					// Вычет при изменении стоимости в сторону уменьшения
					ДанныеДляЗаполнения.Вставить(
						"ВычетПриИзмененииСтоимостиВСторонуУменьшения", ПодготовитьДанныеРазделаВычетПриИзмененииСтоимостиВСторонуУменьшения(СтруктураПараметров));
						
				КонецЕсли;
	            			
			КонецЕсли;	
			
		КонецЕсли; 
	
	ИначеЕсли ИмяТабЧасти = "ВычетПоПриобретеннымЦенностям" Тогда
		
		ДанныеДляЗаполнения.Вставить(
			ИмяТабЧасти, ПодготовитьДанныеРазделаВычетПоПриобретеннымЦенностям(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "НДСсАвансов" Тогда
		
		ДанныеДляЗаполнения.Вставить(
			ИмяТабЧасти, ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "НДСсАвансовВыданных" Тогда
		
		ДанныеДляЗаполнения.Вставить(
			ИмяТабЧасти, ПодготовитьДанныеРазделаВычетНДССВыданныхАвансов(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "ВычетНДСПоНалоговомуАгенту" Тогда
		
		ДанныеДляЗаполнения.Вставить(
			ИмяТабЧасти, ПодготовитьДанныеРазделаВычетНДСПоНалоговомуАгенту(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "ВычетПриИзмененииСтоимостиВСторонуУменьшения" Тогда
		
		ДанныеДляЗаполнения.Вставить(
			ИмяТабЧасти, ПодготовитьДанныеРазделаВычетПриИзмененииСтоимостиВСторонуУменьшения(СтруктураПараметров));
		
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Получает остатки авансов полученных по данным регистров "НДСЗаписиКнигиПокупок", "НДСЗаписиКнигиПродаж"
// и остатку по счету 76.АВ.
//
// Параметры:
//   СтруктураПараметров - Струкутра - структура входных параметров с ключами:
//     * Организация - СправочникСсылка.Организация - организация, для которой будут получены данные об остатках авансов.
//     * Дата        - Дата - дата, на которую будут получены данные об остатках авансов.
//
// Возвращаемое значение:
//   Таблица значений с колонками:
//    * СчетФактура             - ДокументСсылка - расчетный документ, по которому числится полученный аванс.
//    * СчетФактураДата         - Дата - дата расчетного документа, по которому числится полученный аванс.
//    * Покупатель              - СправоникСсылка.Контрагенты - покупатель.
//    * ВидЦенности             - ПеречислениеСсылка.ВидыЦенностей - вид ценности.
//    * СтавкаНДС               - ПеречислениеСсылка.СтавкиНДС - ставка НДС аванса.
//    * ДоговорКонтрагента      - СправоникСсылка.ДоговорыКонтрагентов - договор с покупателем.
//    * СуммаБезНДС             - Число (15, 2) - сумма аванса за вычетом НДС.
//    * НДС                     - Число (15, 2) - сумма налога.
//    * ИсправленныйСчетФактура - ДокументСсылка - ссылка на исправленный счет-фактуру.
//    * ДатаСобытия             - Дата - дата начисления налога с предварительной оплаты.
Функция ОстаткиНДССАвансовПолученных(СтруктураПараметров) Экспорт

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница",         Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто",        ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыЦенностейАванс",  ВидыЦенностейАванс);
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          МассивСчетовАвансов);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР", СубконтоСчетаРасчетов_ЕстьДР);

	// Подготовка исходных данных.
	Запрос.Текст = ТекстЗапросаАвансыПолученные();

	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиПоРегистру = Результаты[4].Выгрузить();
	КоличествоСтрокОстаткаПоРегистру = ОстаткиПоРегистру.Количество();
	Если КоличествоСтрокОстаткаПоРегистру = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	// Учитываем остаток по счету 76.АВ.
	ОстаткиПоСчету = Результаты[5].Выгрузить();
	
	// Параллельно обходим две таблицы, одинаково отсортированые.
	ИндексСтрокиОстаткаПоРегистру = 0;
	Для каждого СтрокаОстаткаПоСчету Из ОстаткиПоСчету Цикл
		
		// Проходим остатки по регистру, которые соответствуют остаткам по счету.
		Пока ИндексСтрокиОстаткаПоРегистру < КоличествоСтрокОстаткаПоРегистру Цикл
		
			СтрокаОстаткаПоРегистру = ОстаткиПоРегистру[ИндексСтрокиОстаткаПоРегистру];
			Если СтрокаОстаткаПоРегистру.СчетФактура <> СтрокаОстаткаПоСчету.СчетФактура
			 Или СтрокаОстаткаПоРегистру.Покупатель <> СтрокаОстаткаПоСчету.Покупатель Тогда
				Прервать; // данные, соответствующие другому остатку по счету
			КонецЕсли;
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса = 0 Тогда
				// не должно быть остатков по регистру, если нет остатков по счету
				ОстаткиПоРегистру.Удалить(ИндексСтрокиОстаткаПоРегистру);
				КоличествоСтрокОстаткаПоРегистру = КоличествоСтрокОстаткаПоРегистру - 1;
				
			Иначе
				
				Если СтрокаОстаткаПоСчету.СуммаНДСАванса >= СтрокаОстаткаПоРегистру.НДС Тогда
					СтрокаОстаткаПоСчету.СуммаНДСАванса = СтрокаОстаткаПоСчету.СуммаНДСАванса - СтрокаОстаткаПоРегистру.НДС;
				Иначе
					СтрокаОстаткаПоРегистру.СуммаБезНДС = 
						(СтрокаОстаткаПоРегистру.СуммаБезНДС/СтрокаОстаткаПоРегистру.НДС) * СтрокаОстаткаПоСчету.СуммаНДСАванса;
					СтрокаОстаткаПоРегистру.НДС = СтрокаОстаткаПоСчету.СуммаНДСАванса;
				КонецЕсли;
				ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоСтрокОстаткаПоРегистру = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	СравнениеПоИдентификатору = Новый СравнениеЗначений;
	ОстаткиПоРегистру.Сортировать("Покупатель, СчетФактура, ДоговорКонтрагента", СравнениеПоИдентификатору);
	НепогашенныеАвансы = Результаты[7].Выбрать(); // отсортированы как ОстаткиПоРегистру
	
	// Параллельно обходим две таблицы, одинаково отсортированые.
	СтруктураОтбора = СтруктураОтбораСтрок();
	МассивСуммаБезНДС = Новый Массив;
	МассивСуммаНДС    = Новый Массив;
	ИндексСтрокиОстаткаПоРегистру = 0;
	Пока НепогашенныеАвансы.Следующий() Цикл
	
		СуммаБезНДС = 0;
		МассивСуммаБезНДС.Очистить();
		СуммаНДС = 0;
		МассивСуммаНДС.Очистить();
		
		Если СтруктураОтбора.СчетФактура <> НепогашенныеАвансы.СчетФактура
		 Или СтруктураОтбора.ДоговорКонтрагента <> НепогашенныеАвансы.ДоговорКонтрагента
		 Или СтруктураОтбора.Покупатель <> НепогашенныеАвансы.Покупатель Тогда
			// Повторный поиск (например, если разные ДатаСобытия) не выполняем. Используем ранее полученные строки.
			
			СтруктураОтбора.Покупатель         = НепогашенныеАвансы.Покупатель;
			СтруктураОтбора.ДоговорКонтрагента = НепогашенныеАвансы.ДоговорКонтрагента;
			СтруктураОтбора.СчетФактура        = НепогашенныеАвансы.СчетФактура;
			СтрокиАвансаПоОтбору = УчетНДСПереопределяемый.НайтиСтрокиПоОтбору(
				ОстаткиПоРегистру, ИндексСтрокиОстаткаПоРегистру, СтруктураОтбора, "Покупатель", СравнениеПоИдентификатору);
			
		КонецЕсли;
		
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			
			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС    = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
		КонецЦикла; 
		
		СуммаСНДС = Мин(НепогашенныеАвансы.Сумма, СуммаБезНДС + СуммаНДС);
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС / (СуммаБезНДС + СуммаНДС), 2);
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	
	КонецЦикла;
	
	СтрокиКУдалению = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС", 0, 0));	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат ОстаткиПоРегистру;
	
КонецФункции

Функция ТекстЗапросаАвансыПолученные() Экспорт

	// 0. Получаем остатки по 76.АВ .
	// 1. Договоры счетов-фактур по документу аванса.
	// 2. Получаем обороты НДСЗаписиКнигиПродаж.
	// 3. Получаем обороты НДСЗаписиКнигиПокупок.
	// 4. Возвращаем данные по регистру накопления НДСЗаписиКнигиПродаж. Данные из регистра упорядочены для дальнейшего использования в алгоритме.
	// 5. Возвращаем остатки по 76.АВ . Остатки по счету, отсутствующие в регистре, будут пропускаться при обработке таблицы.
	// 6. Подготавливаем список счетов авансов полученных.
	// 7. Возвращаем остатки непогашенных авансов. Данные из регистра упорядочены для дальнейшего использования в алгоритме.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	&Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСАванса
	|ПОМЕСТИТЬ ОстаткиПоСчету
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоАвансамИПредоплатам), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Организация,
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиПоСчету.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговорыСчетовФактур
	|ИЗ
	|	ОстаткиПоСчету КАК ОстаткиПоСчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ОстаткиПоСчету.СчетФактура = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	(СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс))
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	МИНИМУМ(НДСЗаписиКнигиПродажОбороты.ДатаСобытия) КАК ДатаСобытия,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ВТНДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&ДатаГраница,
	|			,
	|			(СчетФактура, Организация, Покупатель) В
	|					(ВЫБРАТЬ
	|						ОстаткиПоСчету.СчетФактура,
	|						ОстаткиПоСчету.Организация,
	|						ОстаткиПоСчету.Покупатель
	|					ИЗ
	|						ОстаткиПоСчету КАК ОстаткиПоСчету)
	|				И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	ДоговорКонтрагента,
	|	ИсправленныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|	КОНЕЦ КАК ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот) КАК НДСОборот
	|ПОМЕСТИТЬ ЗаписиКнигиПокупокОбъедененная
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&ДатаГраница,
	|			,
	|			СчетФактура В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиПоСчету.СчетФактура
	|					ИЗ
	|						ОстаткиПоСчету КАК ОстаткиПоСчету)
	|				И Организация = &Организация
	|				И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	ДоговорКонтрагента,
	|	ИсправленныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК НДС,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродажОбороты.ДатаСобытия, ДЕНЬ)) КАК ДатаСобытия
	|ИЗ
	|	ВТНДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСЗаписиКнигиПродажОбороты.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиКнигиПокупокОбъедененная КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСЗаписиКнигиПродажОбороты.СчетФактура = НДСЗаписиКнигиПокупокОбороты.СчетФактура
	|			И НДСЗаписиКнигиПродажОбороты.ВидЦенности = НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|			И НДСЗаписиКнигиПродажОбороты.СтавкаНДС = НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|			И НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура = НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура
	|			И НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	|ГДЕ
	|	ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|	И (НДСЗаписиКнигиПродажОбороты.НДСОборот <> 0
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура,
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоСчету.СчетФактура КАК СчетФактура,
	|	ОстаткиПоСчету.Покупатель КАК Покупатель,
	|	ОстаткиПоСчету.СуммаНДСАванса КАК СуммаНДСАванса
	|ИЗ
	|	ОстаткиПоСчету КАК ОстаткиПоСчету
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура,
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаАвансов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ХозрасчетныйОстатки.Субконто2) КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаАвансов.Счет
	|				ИЗ
	|					СчетаАвансов КАК СчетаАвансов),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И (Субконто3, Субконто1) В
	|					(ВЫБРАТЬ
	|						ОстаткиПоСчету.СчетФактура,
	|						ОстаткиПоСчету.Покупатель
	|					ИЗ
	|						ОстаткиПоСчету КАК ОстаткиПоСчету)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСчетовФактур КАК ДоговорыСчетовФактур
	|		ПО ХозрасчетныйОстатки.Субконто3 = ДоговорыСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ДоговорыСчетовФактур.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОстатки.Субконто2 = ДоговорыСчетовФактур.ДоговорКонтрагента
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ХозрасчетныйОстатки.Субконто2)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция СтруктураОтбораСтрок() Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Покупатель");
	СтруктураОтбора.Вставить("ДоговорКонтрагента");
	СтруктураОтбора.Вставить("СчетФактура");
	Возврат СтруктураОтбора;

КонецФункции

// Создает временную таблицу СписокСчетовФактур.
//
Процедура СоздатьСписокСчетовФактур(ТаблицаИсточник, МенеджерВТ_СписокСчетовФактур, ОтборСтрок = Неопределено) Экспорт

	ТаблицаСчетовФактур = ТаблицаИсточник.Скопировать(ОтборСтрок, "СчетФактура");
	ТаблицаСчетовФактур.Свернуть("СчетФактура");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("ТаблицаСчетовФактур", ТаблицаСчетовФактур);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетовФактур.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСчетовФактур КАК ТаблицаСчетовФактур
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаПараметровПроведения

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();
	Результат = Запрос.Выполнить();
	ПараметрыПроведения.Вставить("Реквизиты", Результат.Выгрузить());
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПредъявленНДСКВычету0",      Реквизиты.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("ДатаДокумента",              Реквизиты.Период);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",    НачалоКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",     КонецКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", УчетНДСПереопределяемый.ПолучитьМассивПустыхИсправленныхСчетовФактур());
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаПоПриобретеннымЦенностям(НомераТаблиц)
		+ ТекстЗапросаПоАвансамПолученным(НомераТаблиц)
		+ ТекстЗапросаПоАвансамВыданным(НомераТаблиц)
		+ ТекстЗапросаНалоговыйАгент(НомераТаблиц)
		+ ТекстЗапросаИзменениеСтоимостиВСторонуУменьшения(НомераТаблиц)
		+ ТекстЗапросаПоФормированиюРегламентнойОперации(НомераТаблиц);
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПредъявленНДСКВычету0,
	|	Неопределено КАК УпрощенныйУчетНДС,
	|	Реквизиты.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаРеквизитыДокумента()

Функция ТекстЗапросаПоПриобретеннымЦенностям(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВычетПоПриобретеннымЦенностям", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВычетПоПриобретеннымЦенностям.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &ПредъявленНДСКВычету0
	|			ТОГДА ВЫБОР
	|					КОГДА ВычетПоПриобретеннымЦенностям.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НеПодтвержденаСтавка0)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|	КОНЕЦ КАК Событие,
	|	ВычетПоПриобретеннымЦенностям.СчетФактура КАК СчетФактура,
	|	ВычетПоПриобретеннымЦенностям.СтавкаНДС КАК СтавкаНДС,
	|	ВычетПоПриобретеннымЦенностям.СуммаБезНДС КАК СуммаБезНДС,
	|	ВычетПоПриобретеннымЦенностям.НДС КАК НДС,
	|	ВычетПоПриобретеннымЦенностям.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ВычетПоПриобретеннымЦенностям.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ВычетПоПриобретеннымЦенностям.ЗаписьДополнительногоЛиста
	|			ТОГДА ВычетПоПриобретеннымЦенностям.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ВычетПоПриобретеннымЦенностям.Состояние КАК Состояние,
	|	ВычетПоПриобретеннымЦенностям.ВидЦенности КАК ВидЦенности,
	|	ВычетПоПриобретеннымЦенностям.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ВычетПоПриобретеннымЦенностям.Ссылка.ПредъявленНДСКВычету0
	|				И (ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора МЕЖДУ &НачалоНалоговогоПериода И &КонецНалоговогоПериода)
	|			ТОГДА ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора
	|		КОГДА ВычетПоПриобретеннымЦенностям.Ссылка.ПредъявленНДСКВычету0
	|			ТОГДА ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|		КОГДА ДанныеПервичныхДокументовИсправленныйСчетФактура.ДатаРегистратора > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (ДанныеПервичныхДокументовИсправленныйСчетФактура.ДатаРегистратора МЕЖДУ &НачалоНалоговогоПериода И &КонецНалоговогоПериода)
	|			ТОГДА ДанныеПервичныхДокументовИсправленныйСчетФактура.ДатаРегистратора
	|		КОГДА ДанныеПервичныхДокументовИсправленныйСчетФактура.ДатаРегистратора > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|		КОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора МЕЖДУ &НачалоНалоговогоПериода И &КонецНалоговогоПериода
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ВычетПоПриобретеннымЦенностям.Ссылка.ПредъявленНДСКВычету0
	|			ТОГДА ВЫБОР
	|					КОГДА ВычетПоПриобретеннымЦенностям.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|						ТОГДА ВЫБОР
	|								КОГДА ВычетПоПриобретеннымЦенностям.ЗаписьДополнительногоЛиста
	|									ТОГДА ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВычетПоПриобретеннымЦенностям.ДатаОплаты > ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора
	|											ТОГДА ВычетПоПриобретеннымЦенностям.ДатаОплаты
	|										ИНАЧЕ ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора
	|									КОНЕЦ
	|							КОНЕЦ
	|					ИНАЧЕ ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВычетПоПриобретеннымЦенностям.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	ВычетПоПриобретеннымЦенностям.Ссылка.Организация КАК Организация,
	|	ВычетПоПриобретеннымЦенностям.Ссылка КАК Регистратор,
	|	""НДС"" КАК Содержание,
	|	ВЫБОР
	|		КОГДА ВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|			ТОГДА ВычетПоПриобретеннымЦенностям.ДокументОплаты
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ВычетПоПриобретеннымЦенностям.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ВычетПоПриобретеннымЦенностям.ДатаОплаты
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ВычетПоПриобретеннымЦенностям.ДатаДокументаОплаты
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ВычетПоПриобретеннымЦенностям.НомерДокументаОплаты
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ПредъявленНДСКВычету0
	|						И ВычетПоПриобретеннымЦенностям.КодВидаОперации = """"
	|					ТОГДА ""25""
	|				ИНАЧЕ ВычетПоПриобретеннымЦенностям.КодВидаОперации
	|			КОНЕЦ
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПоПриобретеннымЦенностям КАК ВычетПоПриобретеннымЦенностям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО ВычетПоПриобретеннымЦенностям.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|			И (ДанныеПервичныхДокументовСчетФактура.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОтгрузки
	|		ПО ВычетПоПриобретеннымЦенностям.ДокументОтгрузки = ДанныеПервичныхДокументовДокументОтгрузки.Документ
	|			И (ДанныеПервичныхДокументовДокументОтгрузки.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовИсправленныйСчетФактура
	|		ПО ВычетПоПриобретеннымЦенностям.ИсправленныйСчетФактура = ДанныеПервичныхДокументовИсправленныйСчетФактура.Документ
	|			И (ДанныеПервичныхДокументовИсправленныйСчетФактура.Организация = &Организация)
	|ГДЕ
	|	ВычетПоПриобретеннымЦенностям.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетПоПриобретеннымЦенностям.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоАвансамПолученным(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВТ_ДокументыОснования", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетаФактурыДокументы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПоАвансамПолученным", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.СчетФактура КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ФормированиеЗаписейКнигиПокупокНДСсАвансов
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупокНДСсАвансов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|	КОНЕЦ КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ СчетаФактурыДокументы
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыОснования.ДокументОснование
	|			ИЗ
	|				ВТ_ДокументыОснования)
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 10, 1)
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ИсправленныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАвансовПолученных.Покупатель КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УчетАгентскогоНДС, ЛОЖЬ) = ИСТИНА
	|				И ЕСТЬNULL(ДоговорыКонтрагентов.ВидАгентскогоДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗачетАвансовПолученных.ВозвратАвансовПолученных
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент)
	|				КОНЕЦ
	|		КОГДА ЗачетАвансовПолученных.ВозвратАвансовПолученных
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|	КОНЕЦ КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА &ПредъявленНДСКВычету0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|	КОНЕЦ КАК Событие,
	|	ЗачетАвансовПолученных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗачетАвансовПолученных.СчетФактура КАК СчетФактура,
	|	ЗачетАвансовПолученных.СтавкаНДС КАК СтавкаНДС,
	|	ЗачетАвансовПолученных.СуммаБезНДС КАК СуммаБезНДС,
	|	ЗачетАвансовПолученных.НДС КАК НДС,
	|	ЗачетАвансовПолученных.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ДатаДокумента
	|		ИНАЧЕ ЗачетАвансовПолученных.ДатаСобытия
	|	КОНЕЦ КАК ДатаОплаты,
	|	ЗачетАвансовПолученных.ДокументОтгрузки КАК ДокументОплаты,
	|	ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ЗаписьДополнительногоЛиста
	|			ТОГДА ЗачетАвансовПолученных.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗачетАвансовПолученных.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗачетАвансовПолученных.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА ЗачетАвансовПолученных.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗачетАвансовПолученных.ИсправленныйСчетФактура
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УчетАгентскогоНДС, ЛОЖЬ) = ИСТИНА
	|				И ЕСТЬNULL(ДоговорыКонтрагентов.ВидАгентскогоДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)
	|			ТОГДА ""43""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СчетаФактурыДокументы.КодВидаОперации, ""22"") = ""26""
	|					ТОГДА ВЫБОР
	|							КОГДА ЗачетАвансовПолученных.ВозвратАвансовПолученных
	|								ТОГДА ""16""
	|							ИНАЧЕ ""26""
	|						КОНЕЦ
	|				ИНАЧЕ ""22""
	|			КОНЕЦ
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ЗачетАвансовПолученных.НомерДокументаОплаты
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ЗачетАвансовПолученных.ДатаДокументаОплаты
	|	КОНЕЦ КАК ДатаДокументаОплаты
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансов КАК ЗачетАвансовПолученных
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|		ПО ЗачетАвансовПолученных.СчетФактура = СчетаФактурыДокументы.ДокументОснование
	|			И ЗачетАвансовПолученных.Покупатель = СчетаФактурыДокументы.Контрагент
	|			И ЗачетАвансовПолученных.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента
	|			И ЗачетАвансовПолученных.ИсправленныйСчетФактура = СчетаФактурыДокументы.ИсправленныйСчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ЗачетАвансовПолученных.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЗачетАвансовПолученных.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗачетАвансовПолученных.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПоАвансамВыданным(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоАвансамВыданным", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НДСсАвансовВыданных.Поставщик КАК Контрагент,
	|	НДСсАвансовВыданных.ДоговорКонтрагента,
	|	НДСсАвансовВыданных.СчетФактура,
	|	НДСсАвансовВыданных.СтавкаНДС,
	|	НДСсАвансовВыданных.СуммаБезНДС,
	|	НДСсАвансовВыданных.НДС КАК СуммаНДС,
	|	НДСсАвансовВыданных.ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСсАвансовВыданных.ЗаписьДополнительногоЛиста
	|			ТОГДА НДСсАвансовВыданных.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора МЕЖДУ &НачалоНалоговогоПериода И &КонецНалоговогоПериода
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСсАвансовВыданных.Ссылка.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	"""" КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.НДСсАвансовВыданных КАК НДСсАвансовВыданных
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|	ПО НДСсАвансовВыданных.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|		И ДанныеПервичныхДокументовСчетФактура.Организация = &Организация
	|
	|ГДЕ
	|	НДСсАвансовВыданных.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСсАвансовВыданных.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции	

Функция ТекстЗапросаНалоговыйАгент(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВычетНДСПоНалоговомуАгенту", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВычетНДСПоНалоговомуАгенту.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &ПредъявленНДСКВычету0
	|			ТОГДА ВЫБОР
	|					КОГДА ВычетНДСПоНалоговомуАгенту.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НеПодтвержденаСтавка0)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|	КОНЕЦ КАК Событие,
	|	ВычетНДСПоНалоговомуАгенту.СчетФактура КАК СчетФактура,
	|	ВычетНДСПоНалоговомуАгенту.СтавкаНДС КАК СтавкаНДС,
	|	ВычетНДСПоНалоговомуАгенту.СуммаБезНДС КАК СуммаБезНДС,
	|	ВычетНДСПоНалоговомуАгенту.НДС КАК НДС,
	|	ВычетНДСПоНалоговомуАгенту.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ВычетНДСПоНалоговомуАгенту.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ВычетНДСПоНалоговомуАгенту.ЗаписьДополнительногоЛиста
	|			ТОГДА ВычетНДСПоНалоговомуАгенту.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ВычетНДСПоНалоговомуАгенту.Состояние КАК Состояние,
	|	ВычетНДСПоНалоговомуАгенту.ВидЦенности КАК ВидЦенности,
	|	ВычетНДСПоНалоговомуАгенту.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ВычетНДСПоНалоговомуАгенту.Ссылка.ПредъявленНДСКВычету0
	|			ТОГДА ВЫБОР
	|					КОГДА ВычетНДСПоНалоговомуАгенту.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|						ТОГДА ВЫБОР
	|								КОГДА ВычетНДСПоНалоговомуАгенту.ЗаписьДополнительногоЛиста
	|									ТОГДА ВычетНДСПоНалоговомуАгенту.Ссылка.Дата
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВычетНДСПоНалоговомуАгенту.ДатаОплаты > ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора
	|											ТОГДА ВычетНДСПоНалоговомуАгенту.ДатаОплаты
	|										ИНАЧЕ ДанныеПервичныхДокументовДокументОтгрузки.ДатаРегистратора
	|									КОНЕЦ
	|							КОНЕЦ
	|					ИНАЧЕ ВычетНДСПоНалоговомуАгенту.Ссылка.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВычетНДСПоНалоговомуАгенту.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	ВычетНДСПоНалоговомуАгенту.Ссылка.Дата КАК ДатаСобытия,
	|	""НДС"" КАК Содержание,
	|	ВычетНДСПоНалоговомуАгенту.Ссылка.Организация КАК Организация,
	|	ВычетНДСПоНалоговомуАгенту.Ссылка КАК Регистратор,
	|	ВычетНДСПоНалоговомуАгенту.ДокументОплаты КАК ДокументОплаты,
	|	ВычетНДСПоНалоговомуАгенту.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВычетНДСПоНалоговомуАгенту.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ВычетНДСПоНалоговомуАгенту.ДатаОплаты
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплатыНДС.Номер, """")
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументовДокументОплатыНДС.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	"""" КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетНДСПоНалоговомуАгенту КАК ВычетНДСПоНалоговомуАгенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОплатыНДС
	|		ПО ВычетНДСПоНалоговомуАгенту.ДокументОплатыНДС = ДанныеПервичныхДокументовДокументОплатыНДС.Документ
	|			И (ДанныеПервичныхДокументовДокументОплатыНДС.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументОтгрузки
	|		ПО ВычетНДСПоНалоговомуАгенту.ДокументОтгрузки = ДанныеПервичныхДокументовДокументОтгрузки.Документ
	|			И (ДанныеПервичныхДокументовДокументОтгрузки.Организация = &Организация)
	|ГДЕ
	|	ВычетНДСПоНалоговомуАгенту.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетНДСПоНалоговомуАгенту.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаИзменениеСтоимостиВСторонуУменьшения(НомераТаблиц)

	НомераТаблиц.Вставить("ВТ_ДокументыОснованияУменьшениеСтоимости", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СчетаФактурыДокументыУменьшениеСтоимости", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаВычетПриИзмененииСтоимостиВСторонуУменьшения", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснованияУменьшениеСтоимости
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПриИзмененииСтоимостиВСторонуУменьшения КАК ВычетПриИзмененииСтоимостиВСторонуУменьшения
	|ГДЕ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.КодВидаОперацииНаУменьшение КАК КодВидаОперации,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ СчетаФактурыДокументыУменьшениеСтоимости
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыОснованияУменьшениеСтоимости.ДокументОснование
	|			ИЗ
	|				ВТ_ДокументыОснованияУменьшениеСтоимости)
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура КАК СчетФактура,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Поставщик КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.НДС КАК НДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СуммаБезНДС КАК СуммаБезНДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СтавкаНДС КАК СтавкаНДС,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО КАК Состояние,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка.Дата КАК ДатаСобытия,
	|	НЕОПРЕДЕЛЕНО КАК ДатаОплаты,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.ВидЦенности КАК ВидЦенности,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ВычетПриИзмененииСтоимостиВСторонуУменьшения.ЗаписьДополнительногоЛиста
	|			ТОГДА ВычетПриИзмененииСтоимостиВСторонуУменьшения.КорректируемыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА ВычетПриИзмененииСтоимостиВСторонуУменьшения.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВычетПриИзмененииСтоимостиВСторонуУменьшения.ИсправленныйСчетФактура
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	""НДС"" КАК Содержание,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка.Дата КАК Период,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка КАК Регистратор,
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка.Организация КАК Организация,
	|	"""" КАК НомерДокументаОплаты,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СчетаФактурыДокументы.КодВидаОперации, ""16"")
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПриИзмененииСтоимостиВСторонуУменьшения КАК ВычетПриИзмененииСтоимостиВСторонуУменьшения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументыУменьшениеСтоимости КАК СчетаФактурыДокументы
	|		ПО ВычетПриИзмененииСтоимостиВСторонуУменьшения.СчетФактура = СчетаФактурыДокументы.ДокументОснование
	|ГДЕ
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетПриИзмененииСтоимостиВСторонуУменьшения.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПоФормированиюРегламентнойОперации(НомераТаблиц)

	НомераТаблиц.Вставить("ДанныеРегламентнойОперации", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Реквизиты.Дата, КВАРТАЛ) КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ПредъявленНДСКВычету0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	КОНЕЦ КАК РегламентнаяОперация
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

#КонецОбласти

#Область ЗаполнениеДокумента

#Область ПриобретенныеЦенности

Функция ПодготовитьДанныеРазделаВычетПоПриобретеннымЦенностям(СтруктураПараметров) Экспорт
	
	ВычетПоПриобретеннымЦенностям = Новый ТаблицаЗначений();
	Для Каждого КолонкаТабличнойЧасти Из Метаданные.Документы.ФормированиеЗаписейКнигиПокупок.ТабличныеЧасти.ВычетПоПриобретеннымЦенностям.Реквизиты Цикл
		ВычетПоПриобретеннымЦенностям.Колонки.Добавить(КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Тип);
	КонецЦикла; 
	
	ВычетПоПриобретеннымЦенностям.Колонки.Добавить("СчетФактураДата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
		ТаблицаНДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(СтруктураПараметров);
	Иначе
		ТаблицаНДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(СтруктураПараметров);
	КонецЕсли;
	
	Если ТаблицаНДСкВычету.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Возврат ВычетПоПриобретеннымЦенностям;
	КонецЕсли;
	
	ИсключитьНДСпоНепринятымКУчетуНМА(СтруктураПараметров, ТаблицаНДСкВычету);
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.Дата) >= 3 Тогда
		ТаблицаНДСкВычету.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТаблицаНДСкВычету.Колонки.Добавить("ДатаДокументаОплаты",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КонецЕсли;
	
	ТаблицаНДСкВычету.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	
	// Получим информацию об оплатах
	ПолучитьДанныеОДокументахОплатыВвозИзТаможенногоСоюза(СтруктураПараметров, ТаблицаНДСкВычету);
	ПолучитьДанныеОДокументахОплатыИмпорт(СтруктураПараметров, ТаблицаНДСкВычету);
	ПолучитьДанныеОДокументахОплатыКомандировочныеРасходы(СтруктураПараметров, ТаблицаНДСкВычету);
	
	ПолучитьДанныеОДокументахОплатыЭлектронныеУслуги(СтруктураПараметров, ТаблицаНДСкВычету);
	ИсключитьНеоплаченныеЭлектронныеУслуги(ТаблицаНДСкВычету);
	
	МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
	СоздатьСписокСчетовФактур(ТаблицаНДСкВычету, МенеджерВТ_СписокСчетовФактур);
	Если СтруктураПараметров.ПредъявленНДСКВычету0 
		И УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(СтруктураПараметров.Организация, СтруктураПараметров.Дата) Тогда
		
		ТаблицаСФ = ОпределитьНаличиеСчетовФактурПолученных(КонецДня(СтруктураПараметров.Дата), МенеджерВТ_СписокСчетовФактур);
		
	Иначе
		
		ПараметрыПоискаСчетовФактур = ПараметрыПоискаСчетовФактур(СтруктураПараметров, МенеджерВТ_СписокСчетовФактур);
		ТаблицаСФ = УчетНДСПереопределяемый.ОпределитьНаличиеСчетовФактурПолученных(ПараметрыПоискаСчетовФактур);
	
	КонецЕсли;
	МенеджерВТ_СписокСчетовФактур.Закрыть();
		
	ОтфактурованныеПоступления = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ТаблицаСФ.ВыгрузитьКолонку("Документ"), Истина);
	
	СписокСчетовФактур = Новый СписокЗначений;
	СписокСчетовФактур.ЗагрузитьЗначения(ОтфактурованныеПоступления);
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(СтруктураПараметров.Дата);
	
	Для Каждого СтрокаСчетФактура Из ТаблицаНДСкВычету Цикл
		
		Если СписокСчетовФактур.НайтиПоЗначению(СтрокаСчетФактура.СчетФактура) <> Неопределено 
			ИЛИ (СтрокаСчетФактура.ВидЦенности = Перечисления.ВидыЦенностей.Возврат 
			И ТипЗнч(СтрокаСчетФактура.СчетФактура) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ СтрокаСчетФактура.ВидЦенности = Перечисления.ВидыЦенностей.ЭлектронныеУслуги Тогда
			
			НоваяСтрока = ВычетПоПриобретеннымЦенностям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетФактура);
			
			Если СтрокаСчетФактура.ВидЦенности = Перечисления.ВидыЦенностей.ЭлектронныеУслуги Тогда
				НоваяСтрока.ДатаПолученияСчетаФактуры = СтрокаСчетФактура.СчетФактураДата;
				НоваяСтрока.КодВидаОперации = "45";
			КонецЕсли;
			
			Если ВерсияКодовВидовОпераций > 1 Тогда
				СчетФактураПоДокументу = ТаблицаСФ.Найти(СтрокаСчетФактура.СчетФактура, "Документ");
				Если СчетФактураПоДокументу <> Неопределено Тогда
					
					// Для ценностей, закупленных как для реализации на экспорт, так и для внутреннего рынка, но реализованных под 0%
					// необходимо разбить запись на 2:
					// с кодом "25" для части, закупленной для внутреннего рынка;
					// с кодом, указанным в счете-фактуре, для части, закупленной для реализации на экспорт.
					Если СтруктураПараметров.ПредъявленНДСКВычету0 
						И СтрокаСчетФактура.СуммаВосстановленоПриРеализации0 <> 0 Тогда 
						
						НоваяСтрока.СуммаБезНДС = СтрокаСчетФактура.СуммаВосстановленоПриРеализации0;
						НоваяСтрока.НДС         = СтрокаСчетФактура.СуммаНДСВосстановленоПриРеализации0;
						НоваяСтрока.КодВидаОперации = "25";
						// Добавим строку по ценностям, закупленным для реализации на экспорт.
						Если СтрокаСчетФактура.СуммаРазблокированоПриРеализации0 <> 0 Тогда 
							НоваяСтрока = ВычетПоПриобретеннымЦенностям.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетФактура);
							НоваяСтрока.СуммаБезНДС     = СтрокаСчетФактура.СуммаРазблокированоПриРеализации0;
							НоваяСтрока.НДС             = СтрокаСчетФактура.СуммаНДСРазблокированоПриРеализации0;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КодВидаОперации)
						ИЛИ НоваяСтрока.КодВидаОперации = "01" Тогда
						// Код вида операции из счета-фактуры
						НоваяСтрока.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(
							СчетФактураПоДокументу.КодВидаОперации, ВерсияКодовВидовОпераций);
					КонецЕсли;
					
					Если НЕ СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
						НоваяСтрока.ДатаПолученияСчетаФактуры = СчетФактураПоДокументу.СчетФактураДата;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 
				И НЕ КонецКвартала(НоваяСтрока.ДокументОтгрузки.Дата) = КонецКвартала(СтруктураПараметров.Дата) Тогда
				НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;
				НоваяСтрока.КорректируемыйПериод = НоваяСтрока.ДокументОтгрузки.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметров.ПредъявленНДСКВычету0
	 Или СтруктураПараметров.Дата < '20150101' Тогда
		КолонкиСортировки = "СчетФактураДата,СчетФактура";
	Иначе
		КолонкиСортировки = "ДатаПолученияСчетаФактуры,СчетФактураДата,СчетФактура";
	КонецЕсли;
	
	ВычетПоПриобретеннымЦенностям.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	Возврат ВычетПоПриобретеннымЦенностям;
	
КонецФункции

Функция ПараметрыПоискаСчетовФактур(ПараметрыФормированияКниги, ДокументыОснования)
	
	Результат = УчетНДС.НовыйПараметрыПоискаСчетовФактур();
	
	ДокументыОснованияБезДублей = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования, Истина);
	ДатаПоискаСчетовФактур = ПолучитьДатуПоискаСчетовФактурПоПриобретеннымЦенностям(ПараметрыФормированияКниги.Дата);
	
	Результат.КонецПериода        = ПараметрыФормированияКниги.Дата;
	Результат.Организация         = ПараметрыФормированияКниги.Организация;
	Результат.Фильтр              = ДокументыОснованияБезДублей;
	Результат.НаличиеСчетаФактуры = Истина;
	Результат.ДатаСФНеБолее       = ДатаПоискаСчетовФактур;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьНаличиеСчетовФактурПолученных(КонецПериода, МенеджерВТ_СписокСчетовФактур)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.Ссылка.Проведен КАК СчетФактураПроведен,
	|	СчетФактураПолученный.Ссылка.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ СчетаФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО СчетФактураПолученный.Ссылка = СписокСчетовФактур.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.Ссылка.Проведен,
	|	СчетФактураПолученный.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.КодВидаОперации
	|	КОНЕЦ
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО СчетФактураПолученный.ДокументОснование = СписокСчетовФактур.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Проведен,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	""""
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = СписокСчетовФактур.СчетФактура
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|	И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Проведен,
	|	ГТДИмпорт.Дата,
	|	""20""
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО ГТДИмпорт.Ссылка = СписокСчетовФактур.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозе.Ссылка,
	|	ЗаявлениеОВвозе.Проведен,
	|	ЗаявлениеОВвозе.Дата,
	|	""19""
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО ЗаявлениеОВвозе.Ссылка = СписокСчетовФактур.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСчетФактураПолученный.СчетФактура КАК Документ,
	|	ВременнаяТаблицаСчетФактураПолученный.КодВидаОперации
	|ИЗ
	|	СчетаФактурыПолученные КАК ВременнаяТаблицаСчетФактураПолученный
	|ГДЕ
	|	ВременнаяТаблицаСчетФактураПолученный.СчетФактураПроведен
	|	И ВременнаяТаблицаСчетФактураПолученный.СчетФактураДата <= &КонецПериода";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДатуПоискаСчетовФактурПоПриобретеннымЦенностям(ДатаДокумента)
	
	Если ДатаДокумента < '20150101'
		ИЛИ КонецДня(ДатаДокумента) <> КонецКвартала(ДатаДокумента) Тогда 
		Возврат КонецДня(ДатаДокумента);
	Иначе
		
		День = 24 * 60 * 60;
		ДатаПодачиДекларации = НачалоДня(ДатаДокумента) + 25 * День;
		
		// Перенесем на рабочие дни
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		
		Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
			Возврат КонецДня(ДатаПодачиДекларации);
		КонецЕсли; 
		
		ИсходныеДаты = Новый Массив;
		ИсходныеДаты.Добавить(ДатаПодачиДекларации);
		
		ГрафикПереноса = КалендарныеГрафики.ДатыБлижайшихРабочихДней(
			ПроизводственныйКалендарь, 
			ИсходныеДаты,
			Ложь,
			Ложь,
			Истина);
		
		ДатаПереноса = ?(ЗначениеЗаполнено(ГрафикПереноса[ДатаПодачиДекларации]), 
			ГрафикПереноса[ДатаПодачиДекларации], ДатаПодачиДекларации);
		
		Возврат КонецДня(ДатаПереноса);
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(СтруктураПараметров)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация КАК Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.ДатаОплаты КАК ДатаОплаты,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПредъявленныйОстатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей)
	|				И НЕ СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|				И НЕ СчетФактура ССЫЛКА Документ.АвансовыйОтчет) КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО НДСПредъявленныйОстатки.СчетФактура = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ЗаполнитьПоВсемДокументам
	|					И НЕ СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL
	|					И ВЫРАЗИТЬ(СчетФактураПолученныйДокументыОснования.Ссылка КАК Документ.СчетФактураПолученный).СуммаНДСДокумента = 0
	|					И ВЫРАЗИТЬ(СчетФактураПолученныйДокументыОснования.Ссылка КАК Документ.СчетФактураПолученный).Проведен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Остатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей)) КАК НДСПредъявленныйРеализация0Остатки
	|ГДЕ
	|	НЕ &РаздельныйУчетНДСНаСчете19
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация КАК Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.ДатаОплаты КАК ДатаОплаты,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА &Дата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА ВЫБОР
	|								КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|										И ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).ВозвратЧерезКомиссионера
	|									ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).КодВидаОперации
	|								ИНАЧЕ ""16""
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|								ТОГДА ""17""
	|							КОГДА &Дата < ДАТАВРЕМЯ(2016, 7, 1)
	|								ТОГДА ""03""
	|							ИНАЧЕ ""01""
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				И ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	ВТНДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйРеализация0Остатки КАК НДСПредъявленныйРеализация0Остатки
	|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
	|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
	|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
	|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДатаОплаты,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	РеквизитыДокументовРасчетов.ДатаРегистратора
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата";
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей",
		Перечисления.ВидыЦенностей.МассивВидовЦенностейУчитывающихсяПоДоговорам());
	Запрос.УстановитьПараметр("Организация",              СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата",                     КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаГраница",              Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19",
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(СтруктураПараметров.Организация, СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемДокументам", (СтруктураПараметров.ЗаполнитьПоВсемДокументам));
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(СтруктураПараметров)

	УстановитьПривилегированныйРежим(Истина);

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(СтруктураПараметров.Организация, СтруктураПараметров.Дата);
	
	// Подготавливаем исходные данные.
	// 0. Получаем остатки НДС, предъявленного к реализации по ставке 0%.
	// 1. Формируем список счетов-фактур.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК НДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.Состояние
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйРеализация0Остатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей)
	|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСПредъявленныйРеализация0Остатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	ВТ_НДСПредъявленныйРеализация0Остатки КАК ВТ_НДСПредъявленныйРеализация0Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// 2. Получаем информацию по восстановлению НДС.
	
	Если СтруктураПараметров.Дата < '20150101' Тогда
	
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	НЕОПРЕДЕЛЕНО КАК СчетФактура,
		|	0 КАК СуммаБезНДС,
		|	0 КАК НДС,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_НДСПродажи";
	
	Иначе
		Если РаздельныйУчетНДСНаСчете19 Тогда
			
			// 0. Получаем суммы восстановленного НДС по регистру НДСЗаписиКнигиПродаж.
			// 1. Получаем суммы НДС, ранее принятые к вычету.
			// 3. Получаем оставшуюся сумму НДС не принятого к вычету, ранее восстановленного.
			//    Считаем, что первоначально к вычету берется НДС, ранее восстановленный при реализации
			//    ценностей по ставке 0% (с кодом "25"). 
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор,
			|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
			|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(НДСЗаписиКнигиПродаж.НДС) КАК НДС,
			|	НДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
			|	НДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_НДСПродажиПредварительная
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
			|		ПО НДСЗаписиКнигиПродаж.СчетФактура = СписокСчетовФактур.СчетФактура
			|ГДЕ
			|	НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
			|	И НДСЗаписиКнигиПродаж.Период <= &Дата
			|	И НДСЗаписиКнигиПродаж.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	НДСЗаписиКнигиПродаж.ВидЦенности,
			|	НДСЗаписиКнигиПродаж.СтавкаНДС,
			|	НДСЗаписиКнигиПродаж.СчетФактура,
			|	НДСЗаписиКнигиПродаж.Регистратор
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура,
			|	ВидЦенности,
			|	СтавкаНДС,
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НДСЗаписиКнигиПокупок.ДокументОтгрузки КАК ДокументОтгрузки,
			|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
			|	СУММА(НДСЗаписиКнигиПокупок.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
			|	НДСЗаписиКнигиПокупок.ВидЦенности КАК ВидЦенности,
			|	НДСЗаписиКнигиПокупок.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_НДСПокупки
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
			|		ПО НДСЗаписиКнигиПокупок.СчетФактура = СписокСчетовФактур.СчетФактура
			|ГДЕ
			|	НДСЗаписиКнигиПокупок.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
			|	И НДСЗаписиКнигиПокупок.Период <= &Дата
			|	И НДСЗаписиКнигиПокупок.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	НДСЗаписиКнигиПокупок.ВидЦенности,
			|	НДСЗаписиКнигиПокупок.СчетФактура,
			|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
			|	НДСЗаписиКнигиПокупок.СтавкаНДС
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура,
			|	ВидЦенности,
			|	СтавкаНДС,
			|	ДокументОтгрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НДСПродажиПредварительная.Регистратор,
			|	ВТ_НДСПродажиПредварительная.СчетФактура КАК СчетФактура,
			|	СУММА(ВЫБОР
			|			КОГДА ВТ_НДСПродажиПредварительная.СуммаБезНДС > ЕСТЬNULL(ВТ_НДСПокупки.СуммаБезНДС, 0)
			|				ТОГДА ВТ_НДСПродажиПредварительная.СуммаБезНДС - ЕСТЬNULL(ВТ_НДСПокупки.СуммаБезНДС, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаБезНДС,
			|	СУММА(ВЫБОР
			|			КОГДА ВТ_НДСПродажиПредварительная.НДС > ЕСТЬNULL(ВТ_НДСПокупки.НДС, 0)
			|				ТОГДА ВТ_НДСПродажиПредварительная.НДС - ЕСТЬNULL(ВТ_НДСПокупки.НДС, 0)
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК НДС,
			|	ВТ_НДСПродажиПредварительная.ВидЦенности КАК ВидЦенности,
			|	ВТ_НДСПродажиПредварительная.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_НДСПродажи
			|ИЗ
			|	ВТ_НДСПродажиПредварительная КАК ВТ_НДСПродажиПредварительная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСПокупки КАК ВТ_НДСПокупки
			|		ПО ВТ_НДСПродажиПредварительная.СчетФактура = ВТ_НДСПокупки.СчетФактура
			|			И ВТ_НДСПродажиПредварительная.ВидЦенности = ВТ_НДСПокупки.ВидЦенности
			|			И ВТ_НДСПродажиПредварительная.СтавкаНДС = ВТ_НДСПокупки.СтавкаНДС
			|			И ВТ_НДСПродажиПредварительная.Регистратор = ВТ_НДСПокупки.ДокументОтгрузки
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_НДСПродажиПредварительная.ВидЦенности,
			|	ВТ_НДСПродажиПредварительная.СтавкаНДС,
			|	ВТ_НДСПродажиПредварительная.Регистратор,
			|	ВТ_НДСПродажиПредварительная.СчетФактура
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура,
			|	ВидЦенности,
			|	СтавкаНДС";
			
		Иначе
		
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Регистратор) КАК Регистратор,
			|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
			|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(НДСЗаписиКнигиПродаж.НДС) КАК НДС,
			|	НДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
			|	НДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_НДСПродажи
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
			|		ПО НДСЗаписиКнигиПродаж.СчетФактура = СписокСчетовФактур.СчетФактура
			|ГДЕ
			|	НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
			|	И НДСЗаписиКнигиПродаж.Период <= &Дата
			|	И НДСЗаписиКнигиПродаж.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	НДСЗаписиКнигиПродаж.СтавкаНДС,
			|	НДСЗаписиКнигиПродаж.ВидЦенности,
			|	НДСЗаписиКнигиПродаж.СчетФактура
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура,
			|	ВидЦенности,
			|	СтавкаНДС";
			
		КонецЕсли;
	КонецЕсли;
	
	// 3. Формируем исходные данные для алгоритма.
	// Считаем, что первоначально к вычету принимается НДС, ранее восстановленный при реализации под 0%.
	// Учитываем возможность частичного подтверждения ставки 0%, в этом случае непринятая к вычету ранее восстановленная 
	// сумма НДС может быть больше, чем принимаемая к вычету в текущем документе часть НДС. В таком случае считаем, что принимается к вычету
	// НДС, ранее восстановленный (с кодом "25").
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" +
	"ВЫБРАТЬ
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СчетФактураДата КАК СчетФактураДата,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.СуммаБезНДС,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.НДС,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	ВТ_НДСПредъявленныйРеализация0Остатки.Состояние,
	|	ВЫБОР
	|		КОГДА &ДатаДо2015Года
	|				ИЛИ НЕ &РаздельныйУчетНДСНаСчете19
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТ_НДСПродажи.СуммаБезНДС, 0) > ВТ_НДСПредъявленныйРеализация0Остатки.СуммаБезНДС
	|			ТОГДА ВТ_НДСПредъявленныйРеализация0Остатки.СуммаБезНДС
	|		ИНАЧЕ ЕСТЬNULL(ВТ_НДСПродажи.СуммаБезНДС, 0)
	|	КОНЕЦ КАК СуммаВосстановленоПриРеализации0,
	|	ВЫБОР
	|		КОГДА &ДатаДо2015Года
	|				ИЛИ НЕ &РаздельныйУчетНДСНаСчете19
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТ_НДСПродажи.НДС, 0) > ВТ_НДСПредъявленныйРеализация0Остатки.НДС
	|			ТОГДА ВТ_НДСПредъявленныйРеализация0Остатки.НДС
	|		ИНАЧЕ ЕСТЬNULL(ВТ_НДСПродажи.НДС, 0)
	|	КОНЕЦ КАК СуммаНДСВосстановленоПриРеализации0,
	|	ВЫБОР
	|		КОГДА &ДатаДо2015Года
	|				ИЛИ НЕ &РаздельныйУчетНДСНаСчете19
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТ_НДСПродажи.СуммаБезНДС, 0) > ВТ_НДСПредъявленныйРеализация0Остатки.СуммаБезНДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_НДСПредъявленныйРеализация0Остатки.СуммаБезНДС - ЕСТЬNULL(ВТ_НДСПродажи.СуммаБезНДС, 0)
	|	КОНЕЦ КАК СуммаРазблокированоПриРеализации0,
	|	ВЫБОР
	|		КОГДА &ДатаДо2015Года
	|				ИЛИ НЕ &РаздельныйУчетНДСНаСчете19
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТ_НДСПродажи.НДС, 0) > ВТ_НДСПредъявленныйРеализация0Остатки.НДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_НДСПредъявленныйРеализация0Остатки.НДС - ЕСТЬNULL(ВТ_НДСПродажи.НДС, 0)
	|	КОНЕЦ КАК СуммаНДСРазблокированоПриРеализации0,
	|	ВЫБОР
	|		КОГДА &ДатаДо2015Года
	|			ТОГДА """"
	|		КОГДА НЕ &РаздельныйУчетНДСНаСчете19
	|				И ЕСТЬNULL(ВТ_НДСПродажи.НДС, 0) > 0
	|			ТОГДА ""25""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ ДанныеПоНДС
	|ИЗ
	|	ВТ_НДСПредъявленныйРеализация0Остатки КАК ВТ_НДСПредъявленныйРеализация0Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСПродажи КАК ВТ_НДСПродажи
	|		ПО ВТ_НДСПредъявленныйРеализация0Остатки.СчетФактура = ВТ_НДСПродажи.СчетФактура
	|			И ВТ_НДСПредъявленныйРеализация0Остатки.ВидЦенности = ВТ_НДСПродажи.ВидЦенности
	|			И ВТ_НДСПредъявленныйРеализация0Остатки.СтавкаНДС = ВТ_НДСПродажи.СтавкаНДС
	|			И (НЕ &РаздельныйУчетНДСНаСчете19
	|				ИЛИ ВТ_НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки = ВТ_НДСПродажи.Регистратор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НДСПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокСчетовФактур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НДСПредъявленныйРеализация0Остатки";

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Организация",   СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница",   Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата",          КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаДо2015Года", (СтруктураПараметров.Дата < '20150101'));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", РаздельныйУчетНДСНаСчете19);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	ИсключаемыеВидыЦенностей = Перечисления.ВидыЦенностей.МассивВидовЦенностейУчитывающихсяПоДоговорам();
	ИндексТоварыНалоговыйАгент = ИсключаемыеВидыЦенностей.Найти(Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент);
	Если ИндексТоварыНалоговыйАгент <> Неопределено Тогда
		ИсключаемыеВидыЦенностей.Удалить(ИндексТоварыНалоговыйАгент);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.Выполнить();
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НДСПредъявленный.СчетФактура КАК СчетФактура,
		|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик
		|ПОМЕСТИТЬ НДСПредъявленный
		|ИЗ
		|	ДанныеПоНДС КАК ДанныеПоНДС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
		|		ПО ДанныеПоНДС.СчетФактура = НДСПредъявленный.СчетФактура
		|			И (НДСПредъявленный.Организация = &Организация)
		|ГДЕ
		|	НДСПредъявленный.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленный.СчетФактура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоНДС.СчетФактура КАК СчетФактура,
		|	ДанныеПоНДС.СчетФактураДата КАК СчетФактураДата,
		|	ДанныеПоНДС.ВидЦенности КАК ВидЦенности,
		|	ДанныеПоНДС.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПоНДС.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ДанныеПоНДС.СуммаБезНДС КАК СуммаБезНДС,
		|	ДанныеПоНДС.СуммаВосстановленоПриРеализации0 КАК СуммаВосстановленоПриРеализации0,
		|	ДанныеПоНДС.СуммаНДСВосстановленоПриРеализации0 КАК СуммаНДСВосстановленоПриРеализации0,
		|	ДанныеПоНДС.СуммаРазблокированоПриРеализации0 КАК СуммаРазблокированоПриРеализации0,
		|	ДанныеПоНДС.СуммаНДСРазблокированоПриРеализации0 КАК СуммаНДСРазблокированоПриРеализации0,
		|	ДанныеПоНДС.НДС КАК НДС,
		|	ДанныеПоНДС.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ДанныеПоНДС.Состояние КАК Состояние,
		|	ДанныеПоНДС.КодВидаОперации КАК КодВидаОперации,
		|	ЕСТЬNULL(НДСПредъявленный.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик
		|ИЗ
		|	ДанныеПоНДС КАК ДанныеПоНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПредъявленный КАК НДСПредъявленный
		|		ПО ДанныеПоНДС.СчетФактура = НДСПредъявленный.СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура В
		|					(ВЫБРАТЬ
		|						ДанныеПоНДС.СчетФактура
		|					ИЗ
		|						ДанныеПоНДС)
		|				И НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей)
		|				И (НЕ ВидЦенности В (&ВидыЦенностейОплата)
		|					ИЛИ ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1))) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоНДС.СчетФактура КАК СчетФактура,
		|	ДанныеПоНДС.СчетФактураДата КАК СчетФактураДата,
		|	ДанныеПоНДС.ВидЦенности КАК ВидЦенности,
		|	ДанныеПоНДС.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПоНДС.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ДанныеПоНДС.СуммаБезНДС КАК СуммаБезНДСКВычету,
		|	0 КАК СуммаВосстановленоПриРеализации0,
		|	0 КАК СуммаНДСВосстановленоПриРеализации0,
		|	0 КАК СуммаРазблокированоПриРеализации0,
		|	0 КАК СуммаНДСРазблокированоПриРеализации0,
		|	ДанныеПоНДС.НДС КАК НДСКВычету,
		|	ДанныеПоНДС.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ДанныеПоНДС.Состояние КАК Состояние,
		|	ДанныеПоНДС.КодВидаОперации КАК КодВидаОперации
		|ИЗ
		|	ДанныеПоНДС КАК ДанныеПоНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";
		
		// Виды ценностей, по которым требуется оплата
		ВидыЦенностейОплата = Новый СписокЗначений;
		ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
		ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		Запрос.УстановитьПараметр("ВидыЦенностейОплата", ВидыЦенностейОплата);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		НДСПредъявленный = Результаты[0].Выгрузить();
		НДСПредъявленный.Индексы.Добавить("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");

		Результат = Результаты[1].Выгрузить();
		ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", НДСПредъявленный.Колонки.СуммаБезНДС.ТипЗначения.КвалификаторыЧисла);
		Результат.Колонки.Добавить("СуммаБезНДС", ОписаниеТипаСуммы);
		Результат.Колонки.Добавить("НДС",         ОписаниеТипаСуммы);
		Результат.Колонки.Добавить("Поставщик",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		Результат.Колонки.Добавить("ДатаОплаты",  Новый ОписаниеТипов("Дата"));
		
		СтруктураОтбора = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
		КоличествоСтрокКВычету = Результат.Количество();
		КоличествоПройденныхСтрокКВычету = 0;
		
		// Отбираем строки к вычету по регистру НДСПредъявленныйРеализация0, не превышающие остаток по НДСПредъявленный.
		// Определяем поставщика и дату оплаты по остаткам НДСПредъявленный.
		Для Каждого СтрокаКВычету Из Результат Цикл
			
			Если КоличествоПройденныхСтрокКВычету >= КоличествоСтрокКВычету Тогда
			    // Останавливаемся, если в таблицу добавлялись строки.
				Прервать;
			КонецЕсли;
			КоличествоПройденныхСтрокКВычету = КоличествоПройденныхСтрокКВычету + 1;
			
			СтруктураОтбора.СчетФактура  = СтрокаКВычету.СчетФактура;
			СтруктураОтбора.ВидЦенности  = СтрокаКВычету.ВидЦенности;
			СтруктураОтбора.СтавкаНДС    = СтрокаКВычету.СтавкаНДС;
			СтруктураОтбора.СчетУчетаНДС = СтрокаКВычету.СчетУчетаНДС;
			СтрокиНДСПредъявленный = НДСПредъявленный.НайтиСтроки(СтруктураОтбора);
			
			КоличествоСтрокПредъявленного = СтрокиНДСПредъявленный.Количество();
			Если КоличествоСтрокПредъявленного = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИспользоватьИсходнуюСтроку = Истина;
			Для каждого СтрокаНДСПредъявленный Из СтрокиНДСПредъявленный Цикл
				
				Если СтрокаКВычету.СуммаБезНДСКВычету = 0 И СтрокаКВычету.НДСКВычету = 0 Тогда
					Прервать;
				КонецЕсли;	
				
				СуммаБезНДС = Мин(СтрокаКВычету.СуммаБезНДСКВычету, СтрокаНДСПредъявленный.СуммаБезНДС);
				НДС = Мин(СтрокаКВычету.НДСКВычету, СтрокаНДСПредъявленный.НДС);
				
				Если ИспользоватьИсходнуюСтроку Тогда
					НоваяСтрока = СтрокаКВычету;
					ИспользоватьИсходнуюСтроку = Ложь;
				Иначе
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКВычету);
				КонецЕсли;
				НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
				НоваяСтрока.НДС         = НДС;
				НоваяСтрока.Поставщик   = СтрокаНДСПредъявленный.Поставщик;
				НоваяСтрока.ДатаОплаты  = СтрокаНДСПредъявленный.ДатаОплаты;
				
				СтрокаКВычету.СуммаБезНДСКВычету = СтрокаКВычету.СуммаБезНДСКВычету - СуммаБезНДС;
				СтрокаКВычету.НДСКВычету         = СтрокаКВычету.НДСКВычету - НДС;
				СтрокаНДСПредъявленный.СуммаБезНДС = СтрокаНДСПредъявленный.СуммаБезНДС - СуммаБезНДС;
				СтрокаНДСПредъявленный.НДС         = СтрокаНДСПредъявленный.НДС - НДС;
				
			КонецЦикла;
			
		 КонецЦикла;
		 
		 Результат.Колонки.Удалить("СуммаБезНДСКВычету");
		 Результат.Колонки.Удалить("НДСКВычету");
		 Результат.Сортировать("СчетФактураДата");
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсключитьНДСпоНепринятымКУчетуНМА(СтруктураПараметров, ТаблицаНДСкВычету)

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНДСпоНМА = ТаблицаНДСкВычету.Скопировать(, "СчетФактура, ВидЦенности, СчетУчетаНДС, Поставщик");
	ТаблицаНДСпоНМА.Свернуть("СчетФактура, ВидЦенности, СчетУчетаНДС, Поставщик");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", 			КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", 	Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТаблицаНДСкВычету", ТаблицаНДСпоНМА);

	Запрос.УстановитьПараметр("ВидСубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	МассивВидыСубконтоКонтрагентыДокументы = Новый Массив;
	МассивВидыСубконтоКонтрагентыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивВидыСубконтоКонтрагентыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДокументы", МассивВидыСубконтоКонтрагентыДокументы);
	
	Запрос.УстановитьПараметр("Субсчета0805", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов));
	Запрос.УстановитьПараметр("Субсчета1902", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДСкВычету.Поставщик КАК Поставщик,
	|	ТаблицаНДСкВычету.СчетФактура КАК СчетФактура,
	|	ТаблицаНДСкВычету.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаНДСкВычету.ВидЦенности КАК ВидЦенности
	|ПОМЕСТИТЬ ВТ_ТаблицаНДСкВычету
	|ИЗ
	|	&ТаблицаНДСкВычету КАК ТаблицаНДСкВычету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНДСкВычету.Поставщик,
	|	ВТ_ТаблицаНДСкВычету.СчетФактура
	|ПОМЕСТИТЬ ВТ_ТаблицаНДСпоНМА
	|ИЗ
	|	ВТ_ТаблицаНДСкВычету КАК ВТ_ТаблицаНДСкВычету
	|ГДЕ
	|	(ВТ_ТаблицаНДСкВычету.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|			ИЛИ ВТ_ТаблицаНДСкВычету.СчетУчетаНДС В (&Субсчета1902))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_ТаблицаНДСкВычету.Поставщик,
	|	ВТ_ТаблицаНДСкВычету.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК НМА,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК Поставщик,
	|	ХозрасчетныйОбороты.КорСубконто2 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаПоступленияНМА
	|ПОМЕСТИТЬ ВТ_ПоступлениеНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Дата,
	|			,
	|			Счет В (&Субсчета0805),
	|			&ВидСубконтоНМА,
	|			Организация = &Организация
	|				И (КорСубконто1, КорСубконто2) В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаНДСпоНМА.Поставщик,
	|						ВТ_ТаблицаНДСпоНМА.СчетФактура
	|					ИЗ
	|						ВТ_ТаблицаНДСпоНМА),
	|			,
	|			&ВидыСубконтоКонтрагентыДокументы) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК НМА,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК ОстатокНеПринятоКУчетуНМА
	|ПОМЕСТИТЬ ВТ_НеПринятоКУчетуНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В (&Субсчета0805),
	|			&ВидСубконтоНМА,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_ПоступлениеНМА.НМА
	|					ИЗ
	|						ВТ_ПоступлениеНМА)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот) КАК СуммаНДСПринятКвычету
	|ПОМЕСТИТЬ ВТ_ПоступлениеНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&Дата,
	|			,
	|			Организация = &Организация
	|				И (Поставщик, СчетФактура) В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаНДСпоНМА.Поставщик,
	|						ВТ_ТаблицаНДСпоНМА.СчетФактура
	|					ИЗ
	|						ВТ_ТаблицаНДСпоНМА)) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНДСпоНМА.Поставщик КАК Поставщик,
	|	ВТ_ТаблицаНДСпоНМА.СчетФактура КАК СчетФактура,
	|	СУММА(ЕСТЬNULL(ВТ_ПоступлениеНМА.СуммаПоступленияНМА, 0)) КАК СуммаПоступленияНМА,
	|	СУММА(ЕСТЬNULL(ВТ_НеПринятоКУчетуНМА.ОстатокНеПринятоКУчетуНМА, 0)) КАК ОстатокНеПринятоКУчетуНМА
	|ПОМЕСТИТЬ ВТ_СгруппированныеДанныеПоНМА
	|ИЗ
	|	ВТ_ТаблицаНДСпоНМА КАК ВТ_ТаблицаНДСпоНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоступлениеНМА КАК ВТ_ПоступлениеНМА
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеПринятоКУчетуНМА КАК ВТ_НеПринятоКУчетуНМА
	|			ПО ВТ_ПоступлениеНМА.НМА = ВТ_НеПринятоКУчетуНМА.НМА
	|		ПО ВТ_ТаблицаНДСпоНМА.Поставщик = ВТ_ПоступлениеНМА.Поставщик
	|			И ВТ_ТаблицаНДСпоНМА.СчетФактура = ВТ_ПоступлениеНМА.СчетФактура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНДСпоНМА.Поставщик,
	|	ВТ_ТаблицаНДСпоНМА.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_ТаблицаНДСпоНМА.Поставщик,
	|	ВТ_ТаблицаНДСпоНМА.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СгруппированныеДанныеПоНМА.Поставщик,
	|	ВТ_СгруппированныеДанныеПоНМА.СчетФактура,
	|	ВТ_СгруппированныеДанныеПоНМА.СуммаПоступленияНМА,
	|	ВТ_СгруппированныеДанныеПоНМА.ОстатокНеПринятоКУчетуНМА,
	|	ЕСТЬNULL(ВТ_ПоступлениеНДС.СуммаНДСПринятКвычету, 0) КАК СуммаНДСПринятКвычету
	|ИЗ
	|	ВТ_СгруппированныеДанныеПоНМА КАК ВТ_СгруппированныеДанныеПоНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоступлениеНДС КАК ВТ_ПоступлениеНДС
	|		ПО ВТ_СгруппированныеДанныеПоНМА.Поставщик = ВТ_ПоступлениеНДС.Поставщик
	|			И ВТ_СгруппированныеДанныеПоНМА.СчетФактура = ВТ_ПоступлениеНДС.СчетФактура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	МассивКоэфСуммаБезНДС = Новый Массив;
	МассивКоэфСуммаНДС = Новый Массив;

	СтруктураПоиска = Новый Структура("Поставщик, СчетФактура");
	ТаблицаНДСкВычету.Индексы.Добавить("Поставщик, СчетФактура");
	
	Пока Выборка.Следующий() Цикл
	
		// Пропускаем позиции без суммы поступления НМА.
		Если Выборка.СуммаПоступленияНМА = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска.Поставщик	= Выборка.Поставщик;
		СтруктураПоиска.СчетФактура	= Выборка.СчетФактура;
		
		НайденныеСтроки = ТаблицаНДСкВычету.НайтиСтроки(СтруктураПоиска);
		
		// Рассчитаем долю НДС, которую пока нельзя принять к вычету исходя из принятых к учету НМА.
		Если Выборка.ОстатокНеПринятоКУчетуНМА = Выборка.СуммаПоступленияНМА Тогда
			// НМА еще не приняты к учету, НДС к вычету не принимается,
			// удалим строки из таблицы к вычету.
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТаблицаНДСкВычету.Удалить(НайденнаяСтрока);
			КонецЦикла;		
			
			Продолжить;
		КонецЕсли;

		СуммаБезНДСФактическийОстаток 	= 0;
		СуммаНДСФактическийОстаток 		= 0;

		МассивКоэфСуммаБезНДС.Очистить();
		МассивКоэфСуммаНДС.Очистить();
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СуммаБезНДСФактическийОстаток 	= СуммаБезНДСФактическийОстаток + НайденнаяСтрока.СуммаБезНДС;
			СуммаНДСФактическийОстаток 		= СуммаНДСФактическийОстаток 	+ НайденнаяСтрока.НДС;
			
			МассивКоэфСуммаНДС.Добавить(НайденнаяСтрока.НДС);
			МассивКоэфСуммаБезНДС.Добавить(НайденнаяСтрока.СуммаБезНДС);
		КонецЦикла;
		
		// Общая сумма НДС по счету-фактуре определяется как то, что осталось в НДСПредъявленном 
		// плюс то, что уже ранее было принято к вычету. Вычисляет таким образом, чтобы учесть возможные
		// исправления счета-фактуры.
		СуммаПоступленияНДС = СуммаНДСФактическийОстаток + Выборка.СуммаНДСПринятКвычету;
		
		СуммаБезНДСРасчетныйОстаток = Выборка.ОстатокНеПринятоКУчетуНМА;
		СуммаНДСРасчетныйОстаток 	= Окр(Выборка.ОстатокНеПринятоКУчетуНМА / Выборка.СуммаПоступленияНМА * СуммаПоступленияНДС, 2);

		
		СуммаБезНДСкВычету 	= СуммаБезНДСФактическийОстаток - СуммаБезНДСРасчетныйОстаток;
		СуммаНДСкВычету 	= СуммаНДСФактическийОстаток - СуммаНДСРасчетныйОстаток;
		
		МассивРаспределеннаяСуммаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаБезНДСкВычету, МассивКоэфСуммаБезНДС);
		МассивРаспределеннаяСуммаНДС 	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДСкВычету, МассивКоэфСуммаНДС);

		Для Инд = 0 По НайденныеСтроки.ВГраница() Цикл

			Если СуммаБезНДСкВычету <= 0 И СуммаНДСкВычету <= 0 Тогда
				// По счету-фактуре нельзя принимать НДС к вычету, надо удалить строку.
				ТаблицаНДСкВычету.Удалить(НайденныеСтроки[Инд]);
				Продолжить;
			КонецЕсли;
		
			Если МассивРаспределеннаяСуммаБезНДС <> Неопределено Тогда
				НайденныеСтроки[Инд].СуммаБезНДС = МассивРаспределеннаяСуммаБезНДС[Инд];
			КонецЕсли;
			
			Если МассивРаспределеннаяСуммаНДС <> Неопределено Тогда
				НайденныеСтроки[Инд].НДС = МассивРаспределеннаяСуммаНДС[Инд];
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыВвозИзТаможенногоСоюза(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.Дата));
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыОплатВКнигеПокупок.СчетФактура КАК СчетФактура,
	|	ДатыОплатВКнигеПокупок.ДатаДокументаОплаты КАК ДатаОплаты,
	|	ДатыОплатВКнигеПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ДатыОплатВКнигеПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК ДатыОплатВКнигеПокупок
	|ГДЕ
	|	ДатыОплатВКнигеПокупок.Организация = &Организация
	|	И ДатыОплатВКнигеПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|	И ДатыОплатВКнигеПокупок.Период <= &КонецПериода
	|	И ДатыОплатВКнигеПокупок.ДатаДокументаОплаты <= &КонецПериода";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ОплаченныйНДС = Результат.Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("СчетФактура");
		
	Отбор = Новый Структура("СчетФактура");

	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
			Прервать;
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыИмпорт(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация",        СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода",       КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ВидыСубконто",       ВидыСубконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|ГДЕ
	|	ТаблицаРезультатов.ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура,
	|	ХозрасчетныйСубконтоКт.Значение КАК ДокументОплаты,
	|	СУММА(Хозрасчетный.Сумма) КАК СуммаБазис
	|ПОМЕСТИТЬ ДокументыОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРезультатов КАК ТаблицаРезультатов
	|		ПО (ХозрасчетныйСубконтоДт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И ХозрасчетныйСубконтоДт.Значение = ТаблицаРезультатов.СчетФактура
	|			И (ХозрасчетныйСубконтоДт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконтоДт.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконтоДт.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконтоДт.НомерСтроки = Хозрасчетный.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКт
	|		ПО ХозрасчетныйСубконтоДт.Период = ХозрасчетныйСубконтоКт.Период
	|			И ХозрасчетныйСубконтоДт.Регистратор = ХозрасчетныйСубконтоКт.Регистратор
	|			И ХозрасчетныйСубконтоДт.НомерСтроки = ХозрасчетныйСубконтоКт.НомерСтроки
	|			И ХозрасчетныйСубконтоДт.Вид = ХозрасчетныйСубконтоКт.Вид
	|			И (ХозрасчетныйСубконтоКт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.Период <= &КонецПериода
	|	И ХозрасчетныйСубконтоКт.Период ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконтоКт.Значение,
	|	ТаблицаРезультатов.СчетФактура
	|
	|ИМЕЮЩИЕ
	|	СУММА(Хозрасчетный.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Номер, """") КАК НомерДокументаОплаты,
	|	ДокументыОплаты.СуммаБазис
	|ИЗ
	|	ДокументыОплаты КАК ДокументыОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И ДокументыОплаты.ДокументОплаты = РеквизитыДокументовРасчетов.Документ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ОплаченныйНДС = Результат.Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("СчетФактура");
	
	Отбор = Новый Структура("СчетФактура");

	ДополнительныеДокументыОплатыПоГТД = ТаблицаРезультатов.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.ТаможенныеПлатежи
			И СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиОтбора.Количество() = 1 Тогда
			// Документ оплаты один, распределение оплат не требуется
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокиОтбора[0]);
			Продолжить;
		КонецЕсли;
		
		БазисРаспределения = Новый Массив();
		ПустойМассив = Новый Массив();
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			БазисРаспределения.Добавить(СтрокаОтбора.СуммаБазис);
			ПустойМассив.Добавить(0);
		КонецЦикла;
		
		Если СтрокаТаблицы.СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.СуммаБезНДС, БазисРаспределения);
		Иначе
			МассивСуммаБезНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтрокаТаблицы.НДС > 0 Тогда
			МассивНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.НДС, БазисРаспределения);
		Иначе
			МассивНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
			
			Если СтрокаТаблицы.СуммаВосстановленоПриРеализации0 > 0 Тогда
				МассивСуммаВосстановленоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаВосстановленоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаВосстановленоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0 > 0 Тогда
				МассивСуммаНДСВосстановленоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаНДСВосстановленоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРазблокированоПриРеализации0 > 0 Тогда
				МассивСуммаРазблокированоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаРазблокированоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаРазблокированоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0 > 0 Тогда
				МассивСуммаНДСРазблокированоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаНДСРазблокированоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
		КонецЕсли;
			
		Счетчик = 0;
		ПерваяСтрока = Истина;
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			Если ПерваяСтрока Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
				СтрокаТаблицы.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				СтрокаТаблицы.НДС = МассивНДС[Счетчик];
				Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
					СтрокаТаблицы.СуммаВосстановленоПриРеализации0     = МассивСуммаВосстановленоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0  = МассивСуммаНДСВосстановленоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаРазблокированоПриРеализации0    = МассивСуммаРазблокированоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0 = МассивСуммаНДСРазблокированоПриРеализации0[Счетчик];
				КонецЕсли;
				ПерваяСтрока = Ложь;
			Иначе
				ДополнительнаяСтрока = ДополнительныеДокументыОплатыПоГТД.Добавить();
				Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
					ИсключаемыеСвойства = ""
					+ "СуммаБезНДС,"
					+ "НДС,"
					+ "СуммаВосстановленоПриРеализации0,"
					+ "СуммаНДСВосстановленоПриРеализации0," 
					+ "СуммаРазблокированоПриРеализации0,"
					+ "СуммаНДСРазблокированоПриРеализации0";
					ДополнительнаяСтрока.СуммаВосстановленоПриРеализации0     = МассивСуммаВосстановленоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаНДСВосстановленоПриРеализации0  = МассивСуммаНДСВосстановленоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаРазблокированоПриРеализации0    = МассивСуммаРазблокированоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаНДСРазблокированоПриРеализации0 = МассивСуммаНДСРазблокированоПриРеализации0[Счетчик];
				Иначе
					ИсключаемыеСвойства = ""
					+ "СуммаБезНДС,"
					+ "НДС,";
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТаблицы, ,ИсключаемыеСвойства);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаОтбора);
				ДополнительнаяСтрока.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				ДополнительнаяСтрока.НДС = МассивНДС[Счетчик];
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеДокументыОплатыПоГТД, ТаблицаРезультатов);

КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыКомандировочныеРасходы(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация",        СтруктураПараметров.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаРезультатов.СчетФактура КАК Документ.СчетФактураПолученный) КАК СчетФактура
	|ПОМЕСТИТЬ ВТКомандировочныеРасходы
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|ГДЕ
	|	ТаблицаРезультатов.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКомандировочныеРасходы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты
	|ИЗ
	|	ВТКомандировочныеРасходы КАК ВТКомандировочныеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|				ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|					И АвансовыйОтчет.Ссылка = ДанныеПервичныхДокументов.Документ
	|			ПО СчетФактураПолученный.ДокументОснование = АвансовыйОтчет.Ссылка
	|		ПО ВТКомандировочныеРасходы.СчетФактура = СчетФактураПолученный.Ссылка";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КомандировочныеРасходы = Результат.Выгрузить();
	
	Отбор = Новый Структура("СчетФактура");

	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = КомандировочныеРасходы.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
			Прервать;
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыЭлектронныеУслуги(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов",  ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация",         СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",       '20190101');
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетПереоценки",      ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|ГДЕ
	|	ТаблицаРезультатов.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК СуммаБазис
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаГраница,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаРезультатов.СчетФактура
	|					ИЗ
	|						ТаблицаРезультатов)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ХозрасчетныйСубконтоКт.Значение, Хозрасчетный.Регистратор) КАК ДокументОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА Хозрасчетный.СчетДт.Валютный
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаДт
	|			ИНАЧЕ Хозрасчетный.Сумма
	|		КОНЕЦ) КАК СуммаБазис,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ ДокументыОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРезультатов КАК ТаблицаРезультатов
	|		ПО (ХозрасчетныйСубконтоДт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И ХозрасчетныйСубконтоДт.Значение = ТаблицаРезультатов.СчетФактура
	|			И (ХозрасчетныйСубконтоДт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконтоДт.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконтоДт.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконтоДт.НомерСтроки = Хозрасчетный.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКт
	|		ПО ХозрасчетныйСубконтоДт.Период = ХозрасчетныйСубконтоКт.Период
	|			И ХозрасчетныйСубконтоДт.Регистратор = ХозрасчетныйСубконтоКт.Регистратор
	|			И ХозрасчетныйСубконтоДт.НомерСтроки = ХозрасчетныйСубконтоКт.НомерСтроки
	|			И ХозрасчетныйСубконтоДт.Вид = ХозрасчетныйСубконтоКт.Вид
	|			И (ХозрасчетныйСубконтоКт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.СчетКт <> &СчетПереоценки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРезультатов.СчетФактура,
	|	ЕСТЬNULL(ХозрасчетныйСубконтоКт.Значение, Хозрасчетный.Регистратор),
	|	Хозрасчетный.Сумма
	|
	|ИМЕЮЩИЕ
	|	СУММА(Хозрасчетный.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.СуммаБезНДСОборот + НДСЗаписиКнигиПокупок.НДСОборот КАК Сумма
	|ПОМЕСТИТЬ ДокументыОплатыКнигаПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			(СчетФактура, Организация, ДокументОплаты) В
	|				(ВЫБРАТЬ
	|					ДокументыОплаты.СчетФактура,
	|					&Организация,
	|					ДокументыОплаты.ДокументОплаты
	|				ИЗ
	|					ДокументыОплаты)) КАК НДСЗаписиКнигиПокупок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеквизитыДокументовРасчетов.Номер, """") = """"
	|			ТОГДА ЕСТЬNULL(РеквизитыДокументовРасчетов.НомерРегистратора, """")
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыДокументовРасчетов.Номер, """")
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ДокументыОплаты.ДокументОплаты КАК ДокументОплаты,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ДокументыОплаты.СуммаБазис = 0
	|				ТОГДА 0
	|			ИНАЧЕ ДокументыОплаты.СуммаБазис - ЕСТЬNULL(ДокументыОплатыКнигаПокупок.Сумма, 0) * ДокументыОплаты.Сумма / ДокументыОплаты.СуммаБазис
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБазис
	|ИЗ
	|	ДокументыОплаты КАК ДокументыОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И ДокументыОплаты.ДокументОплаты = РеквизитыДокументовРасчетов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОплатыКнигаПокупок КАК ДокументыОплатыКнигаПокупок
	|		ПО ДокументыОплаты.СчетФактура = ДокументыОплатыКнигаПокупок.СчетФактура
	|			И ДокументыОплаты.ДокументОплаты = ДокументыОплатыКнигаПокупок.ДокументОплаты
	|ГДЕ
	|	(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ДокументыОплаты.СуммаБазис = 0
	|					ТОГДА 0
	|				ИНАЧЕ ДокументыОплаты.СуммаБазис - ЕСТЬNULL(ДокументыОплатыКнигаПокупок.Сумма, 0) * ДокументыОплаты.Сумма / ДокументыОплаты.СуммаБазис
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.СчетФактура,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО,
	|	Задолженность.СуммаБазис
	|ИЗ
	|	Задолженность КАК Задолженность";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ОплаченныйНДС = Результат.Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("СчетФактура");
	
	Отбор = Новый Структура("СчетФактура");

	ДополнительныеДокументыОплаты = ТаблицаРезультатов.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.ЭлектронныеУслуги Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиОтбора.Количество() = 1 Тогда
			// Документ оплаты один, распределение оплат не требуется
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокиОтбора[0]);
			Продолжить;
		КонецЕсли;
		
		БазисРаспределения = Новый Массив();
		ПустойМассив = Новый Массив();
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			БазисРаспределения.Добавить(СтрокаОтбора.СуммаБазис);
			ПустойМассив.Добавить(0);
		КонецЦикла;
		
		Если СтрокаТаблицы.СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.СуммаБезНДС, БазисРаспределения);
		Иначе
			МассивСуммаБезНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтрокаТаблицы.НДС > 0 Тогда
			МассивНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.НДС, БазисРаспределения);
		Иначе
			МассивНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
			
			Если СтрокаТаблицы.СуммаВосстановленоПриРеализации0 > 0 Тогда
				МассивСуммаВосстановленоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаВосстановленоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаВосстановленоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0 > 0 Тогда
				МассивСуммаНДСВосстановленоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаНДСВосстановленоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРазблокированоПриРеализации0 > 0 Тогда
				МассивСуммаРазблокированоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаРазблокированоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаРазблокированоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0 > 0 Тогда
				МассивСуммаНДСРазблокированоПриРеализации0 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
					СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0, БазисРаспределения);
			Иначе
				МассивСуммаНДСРазблокированоПриРеализации0 = ПустойМассив;
			КонецЕсли;
			
		КонецЕсли;
			
		Счетчик = 0;
		ПерваяСтрока = Истина;
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			Если ПерваяСтрока Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
				СтрокаТаблицы.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				СтрокаТаблицы.НДС = МассивНДС[Счетчик];
				Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
					СтрокаТаблицы.СуммаВосстановленоПриРеализации0     = МассивСуммаВосстановленоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаНДСВосстановленоПриРеализации0  = МассивСуммаНДСВосстановленоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаРазблокированоПриРеализации0    = МассивСуммаРазблокированоПриРеализации0[Счетчик];
					СтрокаТаблицы.СуммаНДСРазблокированоПриРеализации0 = МассивСуммаНДСРазблокированоПриРеализации0[Счетчик];
				КонецЕсли;
				ПерваяСтрока = Ложь;
			Иначе
				ДополнительнаяСтрока = ДополнительныеДокументыОплаты.Добавить();
				Если СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
					ИсключаемыеСвойства = ""
					+ "СуммаБезНДС,"
					+ "НДС,"
					+ "СуммаВосстановленоПриРеализации0,"
					+ "СуммаНДСВосстановленоПриРеализации0," 
					+ "СуммаРазблокированоПриРеализации0,"
					+ "СуммаНДСРазблокированоПриРеализации0";
					ДополнительнаяСтрока.СуммаВосстановленоПриРеализации0     = МассивСуммаВосстановленоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаНДСВосстановленоПриРеализации0  = МассивСуммаНДСВосстановленоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаРазблокированоПриРеализации0    = МассивСуммаРазблокированоПриРеализации0[Счетчик];
					ДополнительнаяСтрока.СуммаНДСРазблокированоПриРеализации0 = МассивСуммаНДСРазблокированоПриРеализации0[Счетчик];
				Иначе
					ИсключаемыеСвойства = ""
					+ "СуммаБезНДС,"
					+ "НДС,";
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТаблицы, ,ИсключаемыеСвойства);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаОтбора);
				ДополнительнаяСтрока.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				ДополнительнаяСтрока.НДС = МассивНДС[Счетчик];
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеДокументыОплаты, ТаблицаРезультатов);

КонецПроцедуры

Процедура ИсключитьНеоплаченныеЭлектронныеУслуги(ТаблицаРезультатов)
	
	СтрокиКУдалению = Новый Массив;
	
	Отбор = Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ЭлектронныеУслуги);
	СтрокиЭлектронныеУслуги = ТаблицаРезультатов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаЭлектронныеУслуги Из СтрокиЭлектронныеУслуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаЭлектронныеУслуги.ДатаОплаты) Тогда
			СтрокиКУдалению.Добавить(СтрокаЭлектронныеУслуги);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область АвансыПолученные

Функция ПодготовитьДанныеРазделаВычетНДССПолученныхАвансов(СтруктураПараметров) Экспорт

	НДСсАвансов = Новый ТаблицаЗначений();
	Для Каждого КолонкаТабличнойЧасти Из Метаданные.Документы.ФормированиеЗаписейКнигиПокупок.ТабличныеЧасти.НДСсАвансов.Реквизиты Цикл
		НДСсАвансов.Колонки.Добавить(КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Тип);
	КонецЦикла; 
	НДСсАвансов.Колонки.Добавить("СчетФактураВыданныйДата");
	НДСсАвансов.Колонки.Добавить("СчетФактураДата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));	

	Если УчетнаяПолитика.УпрощенныйУчетНДС(СтруктураПараметров.Организация, СтруктураПараметров.Дата)
		ИЛИ СтруктураПараметров.Дата >= '20120101' Тогда
		
		ОбратноеНачислениеНДС.ДополнитьДаннымиОЗачтенныхАвансах(СтруктураПараметров, НДсСАвансов);
		
		ТаблицаАвансов = ОстаткиНДССАвансовПолученных(СтруктураПараметров);
		Если ТаблицаАвансов.Количество() = 0 Тогда
			Возврат НДСсАвансов;
		КонецЕсли;
		
		МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
		СоздатьСписокСчетовФактур(ТаблицаАвансов, МенеджерВТ_СписокСчетовФактур);
		ЗачетыАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ_УпрощенныйУчетНДС(СтруктураПараметров, МенеджерВТ_СписокСчетовФактур);
		РаспределитьЗачетыАвансаПоСФ_УпрощенныйУчетНДС(СтруктураПараметров, ТаблицаАвансов, НДсСАвансов, МенеджерВТ_СписокСчетовФактур, ЗачетыАвансов);
		
		ОтборВозвратаАвансовПолученных = Новый Структура("ВозвратАвансовПолученных", Истина);
		МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
		СоздатьСписокСчетовФактур(НДсСАвансов, МенеджерВТ_СписокСчетовФактур, ОтборВозвратаАвансовПолученных);
		ПолучитьДанныеОДокументахОплатыВозвратАванса(СтруктураПараметров, НДсСАвансов, МенеджерВТ_СписокСчетовФактур);
		
	Иначе
		
		ДеревоНДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов(СтруктураПараметров);
		Если ДеревоНДСсАвансов.Строки.Количество() = 0 Тогда
			// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
			Возврат НДСсАвансов;
		КонецЕсли;
		
		СписокСчетовФактур = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДеревоНДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
		ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СтруктураПараметров, СписокСчетовФактур);
		РаспределитьЗачетыАвансаПоСФ(СтруктураПараметров, ДеревоНДСсАвансов, НДСсАвансов, СписокСчетовФактур, ТаблицаЗачетовАвансов);
		
		СтрокиКУдалению = НДсСАвансов.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС,ВалютнаяСумма", 0, 0, 0));
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НДсСАвансов.Удалить(СтрокаКУдалению);
		КонецЦикла;

	КонецЕсли;

	НДСсАвансов.Сортировать("СчетФактураДата,СчетФактура", Новый СравнениеЗначений);
	
	Возврат НДСсАвансов;
	
КонецФункции

Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ_УпрощенныйУчетНДС(СтруктураПараметров, МенеджерВТ_СписокСчетовФактур)
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	МассивСчетовАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансов); // Добавляет субсчета, если они есть.
	
	СчетаВозвратаДенежныхСредств = Новый Массив();
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);                  // 51
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);                   // 52
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);                // 50.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);               // 50.02
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);             // 50.21
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);                   // 57.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);        // 57.03
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);                // 57.21
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВозвратаДенежныхСредств, МассивСчетовАвансов); // 62.02, 62.22, 62.32

	ПредопределенныеКоррСчетаИсключения = Новый Массив;
	ПредопределенныеКоррСчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); // 62.03
	ПредопределенныеКоррСчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);      // 91.01
	КоррСчетаИсключения = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеКоррСчетаИсключения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("Организация",                  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          МассивСчетовАвансов);
	Запрос.УстановитьПараметр("СчетаВозвратаДенежныхСредств", СчетаВозвратаДенежныхСредств);
	Запрос.УстановитьПараметр("КоррСчетаИсключения",          КоррСчетаИсключения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Организация КАК Организация,
	|	ХозрасчетныйСубконто1.Значение КАК Покупатель,
	|	ХозрасчетныйСубконто2.Значение КАК ДоговорКонтрагента,
	|	ХозрасчетныйСубконто3.Значение КАК ДокументАвансаДТ,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	ХозрасчетныйСубконтоКТ1.Значение КАК ПокупательКТ,
	|	ХозрасчетныйСубконтоКТ3.Значение КАК ДокументАвансаКТ,
	|	СписокСчетовФактур.СчетФактура КАК СчетФактура,
	|	СУММА(Хозрасчетный.Сумма) КАК СуммаАванса,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетКт В (&СчетаВозвратаДенежныхСредств)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратАвансовПолученных,
	|	Хозрасчетный.СчетДт КАК СчетДт
	|ПОМЕСТИТЬ ОборотыПоДебету62Предварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО (ХозрасчетныйСубконто3.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И ХозрасчетныйСубконто3.Значение = СписокСчетовФактур.СчетФактура
	|			И (ХозрасчетныйСубконто3.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто3.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконто3.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = Хозрасчетный.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто1
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконто1.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконто1.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконто1.НомерСтроки
	|			И (ХозрасчетныйСубконто1.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (ХозрасчетныйСубконто1.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто2
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконто2.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконто2.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконто2.НомерСтроки
	|			И (ХозрасчетныйСубконто2.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И (ХозрасчетныйСубконто2.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКТ1
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконтоКТ1.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконтоКТ1.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконтоКТ1.НомерСтроки
	|			И (ХозрасчетныйСубконтоКТ1.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (ХозрасчетныйСубконтоКТ1.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКТ3
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконтоКТ3.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконтоКТ3.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконтоКТ3.НомерСтроки
	|			И (ХозрасчетныйСубконтоКТ3.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И (ХозрасчетныйСубконтоКТ3.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.Период <= &КонецПериода
	|	И Хозрасчетный.СчетДт В(&МассивСчетовАвансов)
	|	И НЕ Хозрасчетный.СчетКт В (&КоррСчетаИсключения)
	|	И ХозрасчетныйСубконто1.Период ЕСТЬ НЕ NULL 
	|	И ХозрасчетныйСубконто2.Период ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация,
	|	ХозрасчетныйСубконто1.Значение,
	|	ХозрасчетныйСубконто2.Значение,
	|	ХозрасчетныйСубконто3.Значение,
	|	Хозрасчетный.СчетКт,
	|	ХозрасчетныйСубконтоКТ1.Значение,
	|	ХозрасчетныйСубконтоКТ3.Значение,
	|	СписокСчетовФактур.СчетФактура,
	|	Хозрасчетный.СчетДт,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетКт В (&СчетаВозвратаДенежныхСредств)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(Хозрасчетный.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОборотыПоДебету62Предварительная.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговорыСчетовФактур
	|ИЗ
	|	ОборотыПоДебету62Предварительная КАК ОборотыПоДебету62Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ОборотыПоДебету62Предварительная.СчетФактура = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	(СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс))
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоДебету62Предварительная.Организация КАК Организация,
	|	ОборотыПоДебету62Предварительная.Покупатель КАК Покупатель,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ОборотыПоДебету62Предварительная.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	ОборотыПоДебету62Предварительная.СчетФактура КАК СчетФактура,
	|	СУММА(ОборотыПоДебету62Предварительная.СуммаАванса) КАК СуммаАванса,
	|	ОборотыПоДебету62Предварительная.ДатаСобытия КАК ДатаСобытия,
	|	ОборотыПоДебету62Предварительная.ВозвратАвансовПолученных КАК ВозвратАвансовПолученных
	|ПОМЕСТИТЬ ОборотыПоДебету62
	|ИЗ
	|	ОборотыПоДебету62Предварительная КАК ОборотыПоДебету62Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСчетовФактур КАК ДоговорыСчетовФактур
	|		ПО ОборотыПоДебету62Предварительная.СчетФактура = ДоговорыСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ДоговорыСчетовФактур.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА ОборотыПоДебету62Предварительная.ДоговорКонтрагента = ДоговорыСчетовФактур.ДоговорКонтрагента
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ(ОборотыПоДебету62Предварительная.СчетКт = ОборотыПоДебету62Предварительная.СчетДт
	|				И ОборотыПоДебету62Предварительная.Покупатель = ОборотыПоДебету62Предварительная.ПокупательКТ
	|				И ОборотыПоДебету62Предварительная.ДокументАвансаДТ = ОборотыПоДебету62Предварительная.ДокументАвансаКТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоДебету62Предварительная.Организация,
	|	ОборотыПоДебету62Предварительная.Покупатель,
	|	ОборотыПоДебету62Предварительная.СчетФактура,
	|	ОборотыПоДебету62Предварительная.ДатаСобытия,
	|	ОборотыПоДебету62Предварительная.ВозвратАвансовПолученных,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ОборотыПоДебету62Предварительная.ДоговорКонтрагента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПокупки.Организация КАК Организация,
	|	НДСПокупки.Поставщик КАК Покупатель,
	|	НДСПокупки.СчетФактура КАК СчетФактура,
	|	НДСПокупки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(НДСПокупки.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	СУММА(НДСПокупки.СуммаБезНДСОборот + НДСПокупки.НДСОборот) КАК СуммаВсего
	|ПОМЕСТИТЬ ОборотыКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			(Организация, Поставщик, СчетФактура) В
	|				(ВЫБРАТЬ
	|					ОборотыПоДебету62.Организация,
	|					ОборотыПоДебету62.Покупатель,
	|					ОборотыПоДебету62.СчетФактура
	|				ИЗ
	|					ОборотыПоДебету62 КАК ОборотыПоДебету62)) КАК НДСПокупки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПокупки.Организация,
	|	НДСПокупки.Поставщик,
	|	НДСПокупки.СчетФактура,
	|	НДСПокупки.ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(НДСПокупки.ДатаСобытия, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоДебету62.Организация КАК Организация,
	|	ОборотыПоДебету62.Покупатель КАК Покупатель,
	|	ОборотыПоДебету62.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОборотыПоДебету62.СчетФактура КАК СчетФактура,
	|	ОборотыПоДебету62.ДатаСобытия КАК ДатаСобытия,
	|	ОборотыПоДебету62.ВозвратАвансовПолученных КАК ВозвратАвансовПолученных,
	|	ОборотыПоДебету62.СуммаАванса - ЕСТЬNULL(ОборотыКнигиПокупок.СуммаВсего, 0) КАК СуммаАванса
	|ИЗ
	|	ОборотыПоДебету62 КАК ОборотыПоДебету62
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыКнигиПокупок КАК ОборотыКнигиПокупок
	|		ПО ОборотыПоДебету62.Организация = ОборотыКнигиПокупок.Организация
	|			И ОборотыПоДебету62.Покупатель = ОборотыКнигиПокупок.Покупатель
	|			И ОборотыПоДебету62.ДоговорКонтрагента = ОборотыКнигиПокупок.ДоговорКонтрагента
	|			И ОборотыПоДебету62.СчетФактура = ОборотыКнигиПокупок.СчетФактура
	|			И ОборотыПоДебету62.ДатаСобытия = ОборотыКнигиПокупок.ДатаСобытия
	|ГДЕ
	|	ОборотыПоДебету62.СуммаАванса - ЕСТЬNULL(ОборотыКнигиПокупок.СуммаВсего, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия,
	|	ВозвратАвансовПолученных УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыКнигиПокупок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыПоДебету62";

	УстановитьПривилегированныйРежим(Истина);

	ЗачетыАвансов = Запрос.Выполнить().Выбрать();
	
	// Выборка специальным образом упорядочена для использования далее в алгоритме.
	
	Возврат ЗачетыАвансов;
	
КонецФункции

Процедура РаспределитьЗачетыАвансаПоСФ_УпрощенныйУчетНДС(СтруктураПараметров, ТаблицаАвансов, ТаблицаРезультатов, МенеджерВТ_СписокСчетовФактур, ЗачетыАвансов)
	
	СравнениеПоИдентификатору = Новый СравнениеЗначений;
	// И ТаблицаАвансов, и ЗачетыАвансов были отсортированы ранее в порядке "Покупатель, СчетФактура, ДоговорКонтрагента".
	
	СтруктураОтбора = СтруктураОтбораСтрок();
	МассивСуммаБезНДС = Новый Массив;
	МассивСуммаНДС = Новый Массив;
	ИндексСтрокиТаблицыАвансов = 0;
	Пока ЗачетыАвансов.Следующий() Цикл
		
		СуммаБезНДС = 0;
		МассивСуммаБезНДС.Очистить();
		СуммаНДС = 0;
		МассивСуммаНДС.Очистить();
		
		Если СтруктураОтбора.СчетФактура <> ЗачетыАвансов.СчетФактура
		 Или СтруктураОтбора.ДоговорКонтрагента <> ЗачетыАвансов.ДоговорКонтрагента
		 Или СтруктураОтбора.Покупатель <> ЗачетыАвансов.Покупатель Тогда
			// Повторный поиск (например, если разные ДатаСобытия) не выполняем. Используем ранее полученные строки.
			
			СтруктураОтбора.Покупатель         = ЗачетыАвансов.Покупатель;
			СтруктураОтбора.ДоговорКонтрагента = ЗачетыАвансов.ДоговорКонтрагента;
			СтруктураОтбора.СчетФактура        = ЗачетыАвансов.СчетФактура;
			СтрокиАвансаПоОтбору = УчетНДСПереопределяемый.НайтиСтрокиПоОтбору(
				ТаблицаАвансов, ИндексСтрокиТаблицыАвансов, СтруктураОтбора, "Покупатель", СравнениеПоИдентификатору);
			СтруктураПредыдущегоОтбора = СтруктураОтбора;
			
		КонецЕсли;
		Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			Если СтрокаАвансаПоОтбору.ДатаСобытия > ЗачетыАвансов.ДатаСобытия Тогда
				// Не учитываем зачет аванса, произведенный до выписки счета-фактуры
				Продолжить;
			КонецЕсли;
			
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);

			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
		КонецЦикла;

		Если СуммаБезНДС + СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли; 

		СуммаСНДС = Мин(ЗачетыАвансов.СуммаАванса, СуммаБезНДС + СуммаНДС);
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС / (СуммаБезНДС+СуммаНДС), 2);
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		СуммаНДС = Окр(СуммаСНДС - СуммаБезНДС, 2);
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			Если СтрокаАвансаПоОтбору.ДатаСобытия > ЗачетыАвансов.ДатаСобытия Тогда
				// Не учитываем зачет аванса, произведенный до выписки счета-фактуры
				Продолжить;
			КонецЕсли;
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаАвансаПоОтбору, 
				"СчетФактура,СчетФактураДата,Покупатель,ДоговорКонтрагента,СтавкаНДС,ИсправленныйСчетФактура");
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЗачетыАвансов, 
				"ДатаСобытия,ВозвратАвансовПолученных");
			
			СтрокаРезультата.СуммаБезНДС     = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС             = ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);
			
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС         = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыВозвратАванса(СтруктураПараметров, ТаблицаРезультатов, МенеджерВТ_СписокСчетовФактур)
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.Дата) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчетовАвансов = Новый Массив;
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	МассивСчетовАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансов); // добавляем субсчета
	
	СчетаВозвратаДенежныхСредств = Новый Массив();
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);       // 52
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);   // 50.02
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);       // 57.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);    // 57.21
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВозвратаДенежныхСредств, МассивСчетовАвансов); // 62.02, 62.22, 62.32
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          МассивСчетовАвансов);
	Запрос.УстановитьПараметр("СчетаВозвратаДенежныхСредств", СчетаВозвратаДенежныхСредств);
	Запрос.УстановитьПараметр("Организация",                  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаВозврата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументВозвратаАванса,
	|	ХозрасчетныйОбороты.Период КАК ДатаСобытия,
	|	ХозрасчетныйОбороты.Субконто1 КАК СчетФактура,
	|	ХозрасчетныйОбороты.Организация КАК Организация
	|ПОМЕСТИТЬ ДокументыВозвратаАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаГраница,
	|			Регистратор,
	|			Счет В (&МассивСчетовАвансов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур),
	|			КорСчет В (&СчетаВозвратаДенежныхСредств),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыВозвратаАванса.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ДокументыВозвратаАванса.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	ДокументыВозвратаАванса.СуммаВозврата КАК СуммаБазис,
	|	ДокументыВозвратаАванса.ДокументВозвратаАванса КАК ДокументВозвратаАванса,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаОплаты
	|ИЗ
	|	ДокументыВозвратаАванса КАК ДокументыВозвратаАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументыВозвратаАванса.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДокументыВозвратаАванса.ДокументВозвратаАванса = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ОплаченныйНДС = Результат.Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("СчетФактура,ДатаСобытия");
	Отбор = Новый Структура("СчетФактура,ДатаСобытия");

	ДополнительныеДокументыОплаты = ТаблицаРезультатов.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если НЕ СтрокаТаблицы.ВозвратАвансовПолученных Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.СчетФактура = СтрокаТаблицы.СчетФактура;
		Отбор.ДатаСобытия = СтрокаТаблицы.ДатаСобытия;
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиОтбора.Количество() = 1 Тогда
			// Документ оплаты один, распределение оплат не требуется
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокиОтбора[0]);
			Продолжить;
		КонецЕсли;
		
		БазисРаспределения = Новый Массив();
		ПустойМассив = Новый Массив();
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			БазисРаспределения.Добавить(СтрокаОтбора.СуммаБазис);
			ПустойМассив.Добавить(0);
		КонецЦикла;
		
		Если СтрокаТаблицы.СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.СуммаБезНДС, БазисРаспределения);
		Иначе
			МассивСуммаБезНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтрокаТаблицы.НДС > 0 Тогда
			МассивНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТаблицы.НДС, БазисРаспределения);
		Иначе
			МассивНДС = ПустойМассив;
		КонецЕсли; 

		Счетчик = 0;
		ПерваяСтрока = Истина;
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			Если ПерваяСтрока Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
				СтрокаТаблицы.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				СтрокаТаблицы.НДС = МассивНДС[Счетчик];
				ПерваяСтрока = Ложь;
			Иначе
				ДополнительнаяСтрока = ДополнительныеДокументыОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТаблицы, ,"СуммаБезНДС, НДС");
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаОтбора);
				ДополнительнаяСтрока.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				ДополнительнаяСтрока.НДС = МассивНДС[Счетчик];
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеДокументыОплаты, ТаблицаРезультатов);
	
КонецПроцедуры

Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов(СтруктураПараметров)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ(НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСсАвансовОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыДокументовРасчетов.ДатаРегистратора,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);

	ДеревоНДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ДеревоНДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат ДеревоНДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДеревоНДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаАвансов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) = ЛОЖЬ
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаАвансов.Счет
	|				ИЗ
	|					СчетаАвансов КАК СчетаАвансов),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	Запрос.Текст = СтрЗаменить(	Запрос.Текст, 
								"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаРасчетыВУЕ("ХозрасчетныйОстатки.Субконто2"));
	
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = ДеревоНДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаЗафиксированногоАванса.РасчетыВУсловныхЕдиницах 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов),Константы.ВалютаРегламентированногоУчета.Получить(),СтрокаЗафиксированногоАванса.ВалютаРасчетов);
						
			Отбор = Новый Структура("Покупатель, ДоговорКонтрагента, ВалютаАванса", СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = Новый Массив();
			МассивСуммаНДС = Новый Массив();
			МассивВалютнаяСуммаСНДС = Новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютнаяСуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаЗафиксированногоАванса.ВалютаРасчетов = Константы.ВалютаРегламентированногоУчета.Получить() 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов) Тогда
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС > 0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС > 0 Тогда
				МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС > 0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0,МассивСуммаБезНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0);
				Счетчик = Счетчик + 1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = Новый Массив();
	Для каждого СтрокаПоСФ Из ДеревоНДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 И СтрокаАванса.НДС = 0 И СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		ДеревоНДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат ДеревоНДСсАвансов;
	
КонецФункции

Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СтруктураПараметров, СписокСчетовФактур)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	 
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.УстановитьПараметр("СчетаВекселяПолученные", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВекселяПолученные));
	Запрос.УстановитьПараметр("СчетаПрочиеДоходыИРасходы", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_МассивСчетовАвансов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МассивСчетовАвансов.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаАвансов
	|ИЗ
	|	ВТ_МассивСчетовАвансов КАК ВТ_МассивСчетовАвансов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ВТ_МассивСчетовАвансов.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|				И НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|					И НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL 
	|				ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотДт
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ХозрасчетныйОбороты.Период КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаГраница,
	|			День,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаАвансов.Счет
	|				ИЗ
	|					СчетаАвансов КАК СчетаАвансов),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур),
	|			НЕ КорСчет В (&СчетаВекселяПолученные)
	|				И НЕ КорСчет В
	|						(ВЫБРАТЬ
	|							ВТ_МассивСчетовАвансов.Счет
	|						ИЗ
	|							ВТ_МассивСчетовАвансов),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&СчетаПрочиеДоходыИРасходы)
	|				ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто1 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Справочник.ПрочиеДоходыИРасходы.Ссылка
	|							ИЗ
	|								Справочник.ПрочиеДоходыИРасходы
	|							ГДЕ
	|								Справочник.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|				И НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	Запрос.Текст = СтрЗаменить(	Запрос.Текст,
								"ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаРасчетыВУЕ("ХозрасчетныйОбороты.Субконто2"));
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

КонецФункции

Процедура РаспределитьЗачетыАвансаПоСФ(СтруктураПараметров, ДеревоНДСсАвансов, ТаблицаРезультатов, СписокСчетовФактур, ТаблицаЗачетовАвансов)
	
	СчетаФактурыВыданные = ПолучитьСписокСчетовФактурВыданныхНаАванс(СписокСчетовФактур);
	
	Для каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетовАвансов.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = ДеревоНДСсАвансов.Строки.Найти(ПогашенныйАвансПоСФ.ДокументОплаты, "СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		СчетФактураВыданныйДата = '00010101';
		СчетФактураВыданный = СчетаФактурыВыданные.Найти(ПогашенныйАвансПоСФ.ДокументОплаты, "СчетФактура");
		Если СчетФактураВыданный <> Неопределено Тогда
			СчетФактураВыданныйДата = СчетФактураВыданный.СчетФактураВыданныйДата;
		КонецЕсли;
		
		Для Каждого СтрокаПогашенияАванса Из ПогашенныйАвансПоСФ.Строки Цикл
			
			Если НачалоДня(СтрокаПогашенияАванса.Дата) < НачалоДня(СчетФактураВыданныйДата) Тогда
				Продолжить;
			КонецЕсли;
			
			ВалютаАванса = ?(СтрокаПогашенияАванса.РасчетыВУсловныхЕдиницах 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаПогашенияАванса.ВалютаРасчетов), Константы.ВалютаРегламентированногоУчета.Получить(),СтрокаПогашенияАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель, ДоговорКонтрагента, ВалютаАванса", СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
				
			КонецЦикла; 
			
			Если ВалютаАванса = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				Если СуммаБезНДС+СуммаНДС = 0 тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС * Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС + СуммаНДС))/(СуммаБезНДС + СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС + СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС + СуммаНДС) * Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС > 0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС > 0 Тогда
				МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС > 0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				
				Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0) = 0 
					И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 
					И ?(ВалютнаяСуммаСНДС > 0,МассивВалютнаяСуммаСНДС[Счетчик], 0)= 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура		= СтрокаАвансаПоОтбору.СчетФактура;
				СтрокаРезультата.СчетФактураДата	= СтрокаАвансаПоОтбору.СчетФактураДата;
				СтрокаРезультата.Покупатель			= СтрокаАвансаПоОтбору.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
				СтрокаРезультата.ВалютаДокумента	= СтрокаАвансаПоОтбору.ВалютаАванса;
				СтрокаРезультата.СтавкаНДС			= СтрокаАвансаПоОтбору.СтавкаНДС;
				СтрокаРезультата.ДатаСобытия		= СтрокаПогашенияАванса.Дата;
				СтрокаРезультата.СуммаБезНДС		= ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
				СтрокаРезультата.НДС				= ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
				СтрокаРезультата.ВалютнаяСумма		= ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС 	   = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0,МассивСуммаБезНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.НДС 			   = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0);
				
				Счетчик = Счетчик + 1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокСчетовФактурВыданныхНаАванс(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактураВыданный,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК СчетФактура,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК СчетФактураВыданныйДата
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокСчетовФактур)
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область АвансыВыданные

Процедура ПолучитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетНДСКлиентСервер.Версия(СтруктураПараметров.Дата) > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеРазделаВычетНДССВыданныхАвансов(СтруктураПараметров) Экспорт 
	
	НДСсАвансовВыданных = Новый ТаблицаЗначений();
	Для Каждого КолонкаТабличнойЧасти Из Метаданные.Документы.ФормированиеЗаписейКнигиПокупок.ТабличныеЧасти.НДСсАвансовВыданных.Реквизиты Цикл
		НДСсАвансовВыданных.Колонки.Добавить(КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Тип);
	КонецЦикла; 
	
	НДСсАвансовВыданных.Колонки.Добавить("СчетФактураДата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));		
	
	ПолучитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(СтруктураПараметров, НДСсАвансовВыданных);
	
	НДСсАвансовВыданных.Сортировать("СчетФактураДата,СчетФактура,Поставщик,ДоговорКонтрагента,СтавкаНДС",
		Новый СравнениеЗначений);
	
	Возврат НДСсАвансовВыданных;
		
КонецФункции

#КонецОбласти

#Область НалоговыйАгент

Функция ПодготовитьДанныеРазделаВычетНДСПоНалоговомуАгенту(СтруктураПараметров) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ФормированиеЗаписейКнигиПокупок;
	ВычетНДСПоНалоговомуАгенту = Новый ТаблицаЗначений();
	Для Каждого КолонкаТабличнойЧасти Из МетаданныеДокумента.ТабличныеЧасти.ВычетНДСПоНалоговомуАгенту.Реквизиты Цикл
		ВычетНДСПоНалоговомуАгенту.Колонки.Добавить(КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Тип);
	КонецЦикла; 
	
	Если НЕ СтруктураПараметров.ПредъявленНДСКВычету0 Тогда
		ТаблицаРезультатов = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный(СтруктураПараметров);
	Иначе
		ТаблицаРезультатов = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(СтруктураПараметров);
	КонецЕсли;
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Возврат ВычетНДСПоНалоговомуАгенту;
	КонецЕсли;
	
	ТаблицаРезультатов.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(
		МетаданныеДокумента.ТабличныеЧасти.ВычетНДСПоНалоговомуАгенту.Реквизиты.ДокументОплаты.Тип.Типы()));
	Если ТаблицаРезультатов.Колонки.Найти("ДатаОплаты") = Неопределено Тогда
		ТаблицаРезультатов.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	ИсключитьНДСНалоговогоАгентаНеоплаченныйПоставщику(СтруктураПараметров, ТаблицаРезультатов);
	
	ИсключитьНДСпоНепринятымКУчетуНМА(СтруктураПараметров, ТаблицаРезультатов);
	
	ПолучитьДанныеОДокументахОплаты(СтруктураПараметров, ТаблицаРезультатов);
	
	ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(СтруктураПараметров, ТаблицаРезультатов);
	
	ОтфактурованныеВычеты = ОпределитьНаличиеСчетовФактурНалоговогоАгента(СтруктураПараметров, ТаблицаРезультатов);
	ОтфактурованныеВычеты.Индексы.Добавить("ДокументОплаты, ДоговорКонтрагента");
	
	ВычетНДСПоНалоговомуАгенту.Очистить();
	ВычетНДСПоНалоговомуАгенту.Колонки.Добавить("СчетФактураДата", 
		Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ПолучитьДанныеОДокументахОплатыАгентскогоНДСВБюджет(СтруктураПараметров, ТаблицаРезультатов);
	
	СтруктураОтбора = Новый Структура("ДокументОплаты, ДоговорКонтрагента");
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент Тогда
			
			СтруктураОтбора.ДокументОплаты = СтрокаТаблицы.СчетФактура;
			СтруктураОтбора.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
			
			МассивСчетовФактур = ОтфактурованныеВычеты.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСчетовФактур.Количество() <> 0 Тогда
			
				НоваяСтрока = ВычетНДСПоНалоговомуАгенту.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если МассивСчетовФактур[0].Исправление Тогда
					// Вычеты отсортированы по убыванию номера исправления, установим последний исправленный счет-фактуру
					НоваяСтрока.ИсправленныйСчетФактура = МассивСчетовФактур[0].Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
			МассивСчетовФактур = ОтфактурованныеВычеты.НайтиСтроки(СтруктураОтбора);
		
			Если МассивСчетовФактур.Количество() <> 0 Тогда
			
				НоваяСтрока = ВычетНДСПоНалоговомуАгенту.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если МассивСчетовФактур[0].Исправление Тогда
					// Вычеты отсортированы по убыванию номера исправления, установим последний исправленный счет-фактуру
					НоваяСтрока.ИсправленныйСчетФактура = МассивСчетовФактур[0].Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ВычетНДСПоНалоговомуАгенту.Свернуть(
		"СчетФактураДата,СчетФактура,ДатаОплаты,ВидЦенности,Поставщик,ДоговорКонтрагента,СтавкаНДС,ДокументОплаты,
		|ДокументОплатыНДС,ДокументОтгрузки,Состояние,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СчетУчетаНДС,
		|ИсправленныйСчетФактура",
		"СуммаБезНДС,НДС");
	
	ВычетНДСПоНалоговомуАгенту.Сортировать("СчетФактураДата,СчетФактура,ДатаОплаты", Новый СравнениеЗначений);
		
	Возврат ВычетНДСПоНалоговомуАгенту;

КонецФункции

Функция ОпределитьНаличиеСчетовФактурНалоговогоАгента(СтруктураПараметров, ТаблицаДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Документы поступления, к которым должны быть зарегистированные счета-фактуры поставщиков товаров п.8 ст. 161 НК.
	ТаблицаСчетовФактур = ТаблицаДокументов.Скопировать(, "СчетФактура");
	
	// Документы оплаты, к которым должны быть выписанные счета-фактуры налогового агента.
	ТаблицаДокументовОплаты = ТаблицаДокументов.Скопировать(, "ДокументОплаты");
	ТаблицаДокументовОплаты.Колонки.ДокументОплаты.Имя = "СчетФактура";
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСчетовФактур, ТаблицаДокументовОплаты);
	
	МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
	СоздатьСписокСчетовФактур(ТаблицаДокументовОплаты, МенеджерВТ_СписокСчетовФактур);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТаблицаДокументов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Дата", СтруктураПараметров.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОплаты,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.Исправление КАК Исправление,
	|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО СчетФактураВыданный.ДокументОснование = СписокСчетовФактур.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)
	|	И СчетФактураВыданный.Проведен
	|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) <= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.ДоговорКонтрагента
	|ИЗ
	|	СписокСчетовФактур КАК СписокСчетовФактур
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО (СчетФактураПолученныйДокументыОснования.ДокументОснование = СписокСчетовФактур.СчетФактура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	СчетФактураПолученный.ДоговорКонтрагента В(&ДоговорКонтрагента)
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|	И СчетФактураПолученный.Проведен
	|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления, ДЕНЬ) <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерИсправления УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ДатаОплаты,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
	|	НДСПредъявленныйОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПредъявленныйОстатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)
	|				И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Остатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)) КАК НДСПредъявленныйРеализация0Остатки
	|ГДЕ
	|	НЕ &РаздельныйУчетНДСНаСчете19
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК СНДС,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата
	|ИЗ
	|	ВТНДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйРеализация0Остатки КАК НДСПредъявленныйРеализация0Остатки
	|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
	|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
	|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
	|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ДатаОплаты,
	|	РеквизитыДокументовРасчетов.ДатаРегистратора
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура";
	
	
	ВидыЦенностейНалоговыйАгент = Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностейНалоговыйАгент, Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров());
		
	Запрос.УстановитьПараметр("ВидыЦенностейНалоговыйАгент", ВидыЦенностейНалоговыйАгент);
	Запрос.УстановитьПараметр("Организация",                 СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата",                        КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаГраница",                 Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19",
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(СтруктураПараметров.Организация, СтруктураПараметров.Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(СтруктураПараметров)

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(СтруктураПараметров.Организация, СтруктураПараметров.Дата);
	
	Запрос = Новый Запрос;
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
		|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Остатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)
		|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДСПредъявленный.СчетФактура,
		|	НДСПредъявленный.Поставщик,
		|	НДСПредъявленный.ДоговорКонтрагента
		|ПОМЕСТИТЬ ВТНДСПредъявленный
		|ИЗ
		|	ВТНДСПредъявленныйРеализация0Остатки КАК НДСПредъявленныйРеализация0
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
		|		ПО НДСПредъявленныйРеализация0.СчетФактура = НДСПредъявленный.СчетФактура
		|ГДЕ
		|	НДСПредъявленный.Организация = &Организация
		|	И НДСПредъявленный.ВидЦенности В(&ВидыЦенностейНалоговыйАгент)
		|	И НДСПредъявленный.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И НДСПредъявленный.Поставщик <> &ПустойКонтрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НДСПредъявленный.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация КАК Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленный.Поставщик КАК Поставщик,
		|	НДСПредъявленный.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние КАК Состояние,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК СНДС,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата
		|ИЗ
		|	ВТНДСПредъявленныйРеализация0Остатки КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСПредъявленный КАК НДСПредъявленный
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленный.СчетФактура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйРеализация0Остатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
		|	НДСПредъявленный.Поставщик,
		|	НДСПредъявленный.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.Организация
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) > 0
		|		ИЛИ СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Поставщик,
		|	ДоговорКонтрагента,
		|	СчетФактура";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
		|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Остатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)
		|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура,
		|	ВидЦенности,
		|	СтавкаНДС,
		|	СчетУчетаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДСОстаток
		|ПОМЕСТИТЬ ВТНДСПредъявленныйОстатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностейНалоговыйАгент)
		|				И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура,
		|	ВидЦенности,
		|	СтавкаНДС,
		|	СчетУчетаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК СНДС,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата
		|ИЗ
		|	ВТНДСПредъявленныйРеализация0Остатки КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйРеализация0Остатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыЦенностейНалоговыйАгент",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПолучитьДанныеОДокументахОплаты(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", 		СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", 				Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаИсключения", 	СчетаИсключения);
	Запрос.УстановитьПараметр("СчетПереоценки", 	ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
	|			ТОГДА ХозрасчетныйОбороты.Регистратор
	|		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3
	|	КОНЕЦ КАК ДокументОплаты,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаБезНДС
	|ПОМЕСТИТЬ ТаблицаОборотыХозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Дата,
	|			Регистратор,
	|			НЕ Счет В (&СчетаИсключения),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2, Субконто3) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаРезультатов.Поставщик,
	|						ТаблицаРезультатов.ДоговорКонтрагента,
	|						ТаблицаРезультатов.СчетФактура
	|					ИЗ
	|						ТаблицаРезультатов),
	|			КорСчет <> &СчетПереоценки,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, ХозрасчетныйОбороты.Регистратор) <> ХозрасчетныйОбороты.Субконто3
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Поставщик КАК Поставщик,
	|	ХозрасчетныйОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.СчетФактура КАК СчетФактура,
	|	ХозрасчетныйОбороты.ДокументОплаты КАК ДокументОплаты,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаОплаты,
	|	ХозрасчетныйОбороты.СуммаБезНДС КАК СуммаБезНДС
	|ПОМЕСТИТЬ ОборотыРасчеты
	|ИЗ
	|	ТаблицаОборотыХозрасчетный КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВводНачальныхОстатковДанныеПоСФНДС.Контрагент,
	|	ВводНачальныхОстатковДанныеПоСФНДС.ДоговорКонтрагента,
	|	ВводНачальныхОстатковДанныеПоСФНДС.СчетФактура,
	|	ВводНачальныхОстатковДанныеПоСФНДС.ДокументОплаты,
	|	ВводНачальныхОстатковДанныеПоСФНДС.ДатаСФ,
	|	ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСОплата
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК ВводНачальныхОстатковДанныеПоСФНДС
	|ГДЕ
	|	ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Дата <= &КонецПериода
	|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Организация = &Организация
	|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Проведен
	|	И ВводНачальныхОстатковДанныеПоСФНДС.ПредъявленСФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Поставщик,
	|	ДокументОплаты,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК Поставщик,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.СуммаБезНДСОборот КАК СуммаОплаты
	|ПОМЕСТИТЬ ДокументыОплатыКнигаПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&Дата,
	|			,
	|			(СчетФактура, Организация, Поставщик, ДокументОплаты, ДоговорКонтрагента) В
	|				(ВЫБРАТЬ
	|					ОборотыРасчеты.СчетФактура,
	|					&Организация,
	|					ОборотыРасчеты.Поставщик,
	|					ОборотыРасчеты.ДокументОплаты,
	|					ОборотыРасчеты.ДоговорКонтрагента
	|				ИЗ
	|					ОборотыРасчеты)) КАК НДСЗаписиКнигиПокупок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Поставщик,
	|	ДокументОплаты,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыРасчеты.СчетФактура КАК СчетФактура,
	|	ОборотыРасчеты.Поставщик КАК Поставщик,
	|	ОборотыРасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОборотыРасчеты.ДокументОплаты КАК ДокументОплаты,
	|	ОборотыРасчеты.ДатаОплаты КАК ДатаОплаты,
	|	ОборотыРасчеты.СуммаБезНДС - ЕСТЬNULL(ДокументыОплатыКнигаПокупок.СуммаОплаты, 0) КАК СуммаБезНДС
	|ПОМЕСТИТЬ ОборотыРасчетыДокументыОплаты
	|ИЗ
	|	ОборотыРасчеты КАК ОборотыРасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОплатыКнигаПокупок КАК ДокументыОплатыКнигаПокупок
	|		ПО ОборотыРасчеты.СчетФактура = ДокументыОплатыКнигаПокупок.СчетФактура
	|			И ОборотыРасчеты.Поставщик = ДокументыОплатыКнигаПокупок.Поставщик
	|			И ОборотыРасчеты.ДокументОплаты = ДокументыОплатыКнигаПокупок.ДокументОплаты
	|			И ОборотыРасчеты.ДоговорКонтрагента = ДокументыОплатыКнигаПокупок.ДоговорКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура,
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОборотыРасчеты.ДокументОплаты КАК ДокументОплаты,
	|	ОборотыРасчеты.ДатаОплаты КАК ДатаОплаты,
	|	ОборотыРасчеты.СуммаБезНДС КАК СуммаБезНДС
	|ИЗ
	|	ТаблицаРезультатов КАК ТаблицаРезультатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчетыДокументыОплаты КАК ОборотыРасчеты
	|		ПО ТаблицаРезультатов.Поставщик = ОборотыРасчеты.Поставщик
	|			И ТаблицаРезультатов.ДоговорКонтрагента = ОборотыРасчеты.ДоговорКонтрагента
	|			И ТаблицаРезультатов.СчетФактура = ОборотыРасчеты.СчетФактура
	|ГДЕ
	|	НЕ ОборотыРасчеты.ДокументОплаты ЕСТЬ NULL
	|	И НЕ ОборотыРасчеты.ДокументОплаты = НЕОПРЕДЕЛЕНО
	|	И ОборотыРасчеты.СуммаБезНДС > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОплаты";

	ОплаченныйНДС = Запрос.Выполнить().Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("Поставщик, ДоговорКонтрагента, СчетФактура");
	
	Отбор = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОтбора.ДокументОплаты) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				// Вычет по поступлениям, по которым отражен возврат, уже отсторнирован
				Продолжить;
			КонецЕсли;
			
			СуммаБезНДССтроки = Мин(СтрокаТаблицы.СуммаБезНДС, СтрокаОтбора.СуммаБезНДС);
			
			Если СтрокаТаблицы.СуммаБезНДС = 0 Тогда
				НДССтроки = СтрокаТаблицы.НДС;
			Иначе	
				НДССтроки = Окр(СтрокаТаблицы.НДС * СуммаБезНДССтроки / СтрокаТаблицы.СуммаБезНДС, 2);
			КонецЕсли;
			
			Если СуммаБезНДССтроки < СтрокаТаблицы.СуммаБезНДС
				ИЛИ НДССтроки < СтрокаТаблицы.НДС Тогда
				
				НоваяСтрока = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СуммаБезНДС = НоваяСтрока.СуммаБезНДС - СуммаБезНДССтроки;
				НоваяСтрока.НДС = НоваяСтрока.НДС - НДССтроки;
				
			КонецЕсли;
				
			СтрокаТаблицы.СуммаБезНДС = СуммаБезНДССтроки;
			СтрокаТаблицы.НДС = НДССтроки;
			
			СтрокаТаблицы.ДокументОплаты = СтрокаОтбора.ДокументОплаты;
			СтрокаТаблицы.ДатаОплаты = СтрокаОтбора.ДатаОплаты;
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - СуммаБезНДССтроки;
			
			Прервать;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда 
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьНДСНалоговогоАгентаНеоплаченныйПоставщику(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРезультатов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|ГДЕ
	|	ТаблицаРезультатов.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаБезНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2, Субконто3) В
	|					(ВЫБРАТЬ
	|						ТаблицаРезультатов.Поставщик,
	|						ТаблицаРезультатов.ДоговорКонтрагента,
	|						ТаблицаРезультатов.СчетФактура
	|					ИЗ
	|						ТаблицаРезультатов КАК ТаблицаРезультатов)) КАК ХозрасчетныйОстатки";
	
	НеоплаченныйНДС = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультатов.Индексы.Добавить("Поставщик, ДоговорКонтрагента, СчетФактура");
	
	Отбор = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаТаблицы Из НеоплаченныйНДС Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаРезультатов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаБезНДС = Мин(СтрокаТаблицы.СуммаБезНДС, СтрокаОтбора.СуммаБезНДС);
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - Окр(СтрокаОтбора.НДС * СуммаБезНДС / СтрокаОтбора.СуммаБезНДС, 2);
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - СуммаБезНДС;
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Или СтрокаОтбора.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРезультатов.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументОплаты,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК НДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2, Субконто3) В
	|					(ВЫБРАТЬ
	|						ТаблицаРезультатов.Поставщик,
	|						ТаблицаРезультатов.ДоговорКонтрагента,
	|						ТаблицаРезультатов.ДокументОплаты
	|					ИЗ
	|						ТаблицаРезультатов КАК ТаблицаРезультатов)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
				   
	НеоплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("Поставщик, ДоговорКонтрагента, ДокументОплаты");

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаТаблицы Из НеоплаченныйНДС Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаРезультатов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НДС = Мин(СтрокаТаблицы.НДС, СтрокаОтбора.НДС);
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - Окр(СтрокаОтбора.СуммаБезНДС * НДС / СтрокаОтбора.НДС, 2);
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - НДС;
			
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДС - НДС;
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Или СтрокаОтбора.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыАгентскогоНДСВБюджет(СтруктураПараметров, ТаблицаРезультатов)
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.Дата) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.ФормированиеЗаписейКнигиПокупок;
	ТипыДокументовОплатыНДС = МетаданныеДокумента.ТабличныеЧасти.ВычетНДСПоНалоговомуАгенту.Реквизиты.ДокументОплатыНДС.Тип.Типы();
	
	ТаблицаРезультатов.Колонки.Добавить("ДокументОплатыНДС", Новый ОписаниеТипов(ТипыДокументовОплатыНДС));
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРезультатов",  ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация",         СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Дата",                Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ВидыСубконто",        ВидыСубконто);
	Запрос.УстановитьПараметр("НДСНалоговогоАгента", ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	Запрос.УстановитьПараметр("СчетПереоценки",      ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.Поставщик КАК Поставщик,
	|	ТаблицаРезультатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРезультатов.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультатов КАК ТаблицаРезультатов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК ДокументОплаты,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументОплатыНДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаУплатыНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Дата,
	|			Регистратор,
	|			Счет = &НДСНалоговогоАгента,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2, Субконто3) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаРезультатов.Поставщик,
	|						ТаблицаРезультатов.ДоговорКонтрагента,
	|						ТаблицаРезультатов.ДокументОплаты
	|					ИЗ
	|						ТаблицаРезультатов),
	|			КорСчет <> &СчетПереоценки,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, ХозрасчетныйОбороты.Регистратор) <> ХозрасчетныйОбороты.Субконто3
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Период";
	
	ОплаченныйНДС = Запрос.Выполнить().Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("ДокументОплаты,Поставщик,ДоговорКонтрагента");
	
	Отбор = Новый Структура("ДокументОплаты,Поставщик,ДоговорКонтрагента");

	ТаблицаРезультатовДополнение = ТаблицаРезультатов.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент Тогда
			Продолжить;
		КонецЕсли;
		
		ОсталосьРаспределитьНДС         = СтрокаТаблицы.НДС;
		ОсталосьРаспределитьСуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		ПерваяСтрока = Истина;
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если ОсталосьРаспределитьНДС = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОтбора.СуммаУплатыНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РаспределитьНДСНаТекущийДокументОплаты = Мин(СтрокаОтбора.СуммаУплатыНДС, ОсталосьРаспределитьНДС);
			Если РаспределитьНДСНаТекущийДокументОплаты = ОсталосьРаспределитьНДС Тогда
				РаспределитьСуммаБезНДСНаТекущийДокументОплаты = ОсталосьРаспределитьСуммаБезНДС;
			Иначе
				РаспределитьСуммаБезНДСНаТекущийДокументОплаты = 
					Окр(ОсталосьРаспределитьСуммаБезНДС * РаспределитьНДСНаТекущийДокументОплаты/ОсталосьРаспределитьНДС, 2);
				КонецЕсли;
			РаспределитьСНДС = РаспределитьНДСНаТекущийДокументОплаты + РаспределитьСуммаБезНДСНаТекущийДокументОплаты;
			
			ОсталосьРаспределитьНДС = ОсталосьРаспределитьНДС - РаспределитьНДСНаТекущийДокументОплаты;
			ОсталосьРаспределитьСуммаБезНДС = ОсталосьРаспределитьСуммаБезНДС - РаспределитьСуммаБезНДСНаТекущийДокументОплаты;
			
			СтрокаОтбора.СуммаУплатыНДС = СтрокаОтбора.СуммаУплатыНДС - РаспределитьНДСНаТекущийДокументОплаты;
			
			Если ПерваяСтрока Тогда
				// Уменьшаем суммы по строке, указываем документ оплаты НДС.
				СтрокаТаблицы.НДС               = РаспределитьНДСНаТекущийДокументОплаты;
				СтрокаТаблицы.СуммаБезНДС       = РаспределитьСуммаБезНДСНаТекущийДокументОплаты;
				СтрокаТаблицы.СНДС              = РаспределитьСНДС;
				СтрокаТаблицы.ДокументОплатыНДС = СтрокаОтбора.ДокументОплатыНДС;
			Иначе
				// Если строка не первая добавим строку-дополнение.
				НоваяСтрокаРезультата = ТаблицаРезультатовДополнение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаТаблицы);
				НоваяСтрокаРезультата.НДС               = РаспределитьНДСНаТекущийДокументОплаты;
				НоваяСтрокаРезультата.СуммаБезНДС       = РаспределитьСуммаБезНДСНаТекущийДокументОплаты;
				НоваяСтрокаРезультата.СНДС              = РаспределитьСНДС;
				НоваяСтрокаРезультата.ДокументОплатыНДС = СтрокаОтбора.ДокументОплатыНДС;
			КонецЕсли; 
			
			ПерваяСтрока = Ложь;
			
		КонецЦикла;
		
		Если ОсталосьРаспределитьНДС <> 0 ИЛИ ОсталосьРаспределитьСуммаБезНДС <> 0 Тогда
			// Строки по документам оплаты закончились, но не весь НДС распределен, добавим строки с незаполненным документом оплаты.
			НоваяСтрокаРезультата = ТаблицаРезультатовДополнение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаТаблицы);
			НоваяСтрокаРезультата.НДС               = ОсталосьРаспределитьНДС;
			НоваяСтрокаРезультата.СуммаБезНДС       = ОсталосьРаспределитьСуммаБезНДС;
			НоваяСтрокаРезультата.СНДС              = ОсталосьРаспределитьНДС + ОсталосьРаспределитьСуммаБезНДС;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТаблицаРезультатовДополнение.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРезультатовДополнение, ТаблицаРезультатов);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УменьшениеСтоимостиРеализации

Процедура ПолучитьВычетПриИзмененииСтоимостиВСторонуУменьшенияПоДаннымРегистраНДСПредъявленный(СтруктураПараметров, ТаблицаРезультатов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаСФНеБолее", КонецДня(СтруктураПараметров.Дата));

	Если НЕ УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(СтруктураПараметров.Дата) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО НДСПредъявленныйОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
		|ГДЕ
		|	НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|	И СчетФактураВыданный.Ссылка.Дата <= &ДатаСФНеБолее"; 
		
	ИначеЕсли СтруктураПараметров.Дата < '20150101' Тогда 
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСПредъявленныйОстатки.СчетФактура
		|	КОНЕЦ КАК ДокументОснование,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток
		|ПОМЕСТИТЬ НДСПредъявленныйОстатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	НДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО НДСПредъявленныйОстатки.ДокументОснование = СчетФактураВыданный.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
		|ГДЕ
		|	НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
		|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
		|	И СчетФактураВыданный.Ссылка.Выставлен
		|	И СчетФактураВыданный.Ссылка.ДатаВыставления <= &ДатаСФНеБолее
		|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)";
		
	ИначеЕсли СтруктураПараметров.Дата < '20170101' Тогда 
		
		// В соответствии с письмом Минфина от 20 января 2015 г. N 03-07-05/1271
		// при уменьшении стоимости отгруженных товаров (выполненных работ, оказанных услуг) продавец, 
		// имеет право принять к вычету налог на добавленную стоимость в сумме разницы между суммами налога, 
		// на основании первичных учетных документов, подтверждающих согласие (факт уведомления) покупателя на уменьшение стоимости 
		// товаров (работ, услуг). При этом указанные первичные документы подлежат регистрации продавцом в книге покупок
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДСОстаток
		|ПОМЕСТИТЬ НДСПредъявленныйОстатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	НДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ";
		
	Иначе
		
		// В соответствии с постановлением Правительства РФ от 19.08.2017 N 981
		// аннулирование исправляемого счета-фактуры и регистрация исправленного счета-фактуры 
		// могут быть отражены одновременно в дополнительном листе.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДСОстаток
		|ПОМЕСТИТЬ НДСПредъявленныйОстатки
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация КАК Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
		|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		|				И НЕ РеквизитыДокументовРасчетов.ДатаРегистратора ЕСТЬ NULL
		|			ТОГДА НАЧАЛОПЕРИОДА(РеквизитыДокументовРасчетов.ДатаРегистратора, КВАРТАЛ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		|				И НЕ РеквизитыДокументовРасчетов.ДатаРегистратора ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаписьДополнительногоЛиста
		|ИЗ
		|	НДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
		|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
		|			И НДСПредъявленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеРазделаВычетПриИзмененииСтоимостиВСторонуУменьшения(СтруктураПараметров) Экспорт 
	
	ВычетПриИзмененииСтоимостиВСторонуУменьшения = Новый ТаблицаЗначений();
	Для каждого КолонкаТабличнойЧасти Из Метаданные.Документы.ФормированиеЗаписейКнигиПокупок.ТабличныеЧасти.ВычетПриИзмененииСтоимостиВСторонуУменьшения.Реквизиты Цикл
		ВычетПриИзмененииСтоимостиВСторонуУменьшения.Колонки.Добавить(КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Тип);
	КонецЦикла; 
	
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Колонки.Добавить("СчетФактураДата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ПолучитьВычетПриИзмененииСтоимостиВСторонуУменьшенияПоДаннымРегистраНДСПредъявленный(СтруктураПараметров, ВычетПриИзмененииСтоимостиВСторонуУменьшения);
	
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Сортировать("СчетФактураДата,СчетФактура", Новый СравнениеЗначений);
	
	Возврат ВычетПриИзмененииСтоимостиВСторонуУменьшения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик обновления
//
//Устанавливает новый код вида операции для сводных счетов-фактур по комиссии
Процедура УстановитьКодВидаОперации() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СводныеКомиссионныеСФ
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.СводныйКомиссионный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка КАК Ссылка,
	|	ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.НомерСтроки - 1 КАК ИндексСтроки,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.КодВидаОперации <> """"
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодЗаполнен,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.ПредъявленНДСКВычету0
	|			ТОГДА ""25""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА ""16""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|								ТОГДА ""17""
	|							КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.Дата < ДАТАВРЕМЯ(2016, 7, 1)
	|								ТОГДА ""03""
	|							ИНАЧЕ ""01""
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				И ВЫРАЗИТЬ(ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		КОГДА НЕ ВТ_СводныеКомиссионныеСФ.ДокументОснование ЕСТЬ NULL 
	|			ТОГДА ""27""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПокупок.ВычетПоПриобретеннымЦенностям КАК ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СводныеКомиссионныеСФ КАК ВТ_СводныеКомиссионныеСФ
	|		ПО ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура = ВТ_СводныеКомиссионныеСФ.ДокументОснование
	|ГДЕ
	|	ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|	И ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.КодВидаОперации <> """"
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.НомерСтроки - 1,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.ПредъявленНДСКВычету0
	|			ТОГДА ""25""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА ""16""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|								ТОГДА ""17""
	|							КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.Ссылка.Дата < ДАТАВРЕМЯ(2016, 7, 1)
	|								ТОГДА ""03""
	|							ИНАЧЕ ""01""
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				И ВЫРАЗИТЬ(ФормированиеЗаписейКнигиПокупокВычетПоПриобретеннымЦенностям.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
	|			ТОГДА ""23""
	|		КОГДА НЕ ВТ_СводныеКомиссионныеСФ.ДокументОснование ЕСТЬ NULL 
	|			ТОГДА ""27""
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИТОГИ
	|	СУММА(КодЗаполнен)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка";
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий()
		И ВыборкаИтоги.КодЗаполнен = 0 Тогда
		ВыборкаДокументы = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументы.Следующий() Цикл
			ФормированиеЗаписейДокумент = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
			ВыборкаСтроки = ВыборкаДокументы.Выбрать();
			Пока ВыборкаСтроки.Следующий() Цикл
				ФормированиеЗаписейДокумент.ВычетПоПриобретеннымЦенностям[ВыборкаСтроки.ИндексСтроки].КодВидаОперации = ВыборкаСтроки.КодВидаОперации;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФормированиеЗаписейДокумент);
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвижений

#Область ВыданныеАвансы

Процедура СформироватьДвиженияВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 2
	 ИЛИ УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);

	Параметры.Авансы.Свернуть("Контрагент, ДоговорКонтрагента, СчетФактура, СтавкаНДС, СчетУчетаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, ИсправленныйСчетФактура",
		"СуммаНДС, СуммаБезНДС");

	СформироватьПроводкиВычетНДСВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
	СформироватьДвиженияНДСПредъявленныйВыданныйАвансРасход(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
	СформироватьДвиженияНДССАвансовРасход(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура";
	
	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиВычетНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание = НСтр("ru='Вычет НДС с выданного аванса'");
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; // 76.ВА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтрокаТаблицы.Контрагент);

		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
		НоваяЗапись.Поставщик   = СтрокаТаблицы.Контрагент;
		НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		НоваяЗапись.НДС         = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВыданныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСПредъявленный.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);

		НоваяЗапись.Поставщик    = СтрокаТаблицы.Контрагент;
		НоваяЗапись.ВидЦенности  = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		НоваяЗапись.НДС          = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДССАвансовРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСсАвансов.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);

		НоваяЗапись.ВидЦенности  = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.НДС          = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСсАвансов.Записывать = Истина;

КонецПроцедуры


#КонецОбласти 

#Область ЗачетПолученныхАвансов

// Процедура формирует вычет НДС при зачете полученного аванса
//
Процедура СформироватьДвиженияВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	
	Параметры = ПодготовитьПараметрыВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];

	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 
		И НЕ УпрощенныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСсАвансовЗачетПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
	КонецЕсли;
	
	СформироватьПроводкиВычетНДСПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПокупокПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВычетНДСПриЗачетеПолученногоАванса()
//
Функция ПодготовитьПараметрыВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "ПредъявленНДСКВычету0";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ДатаСобытия,"
	+ "Событие,"
	+ "ВидЦенности,"
	+ "КодВидаОперации,"
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты,"
	+ "ДатаОплаты,"
	+ "ДокументОплаты,"
	+ "ВалютаДокумента,"
	+ "ВалютнаяСумма,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура,";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиВычетНДСПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание = "Вычет НДС по предоплате";

		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент
		 ИЛИ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров; // 68.52
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокПолученныйАванс(Реквизиты, ТаблицаАвансов, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли