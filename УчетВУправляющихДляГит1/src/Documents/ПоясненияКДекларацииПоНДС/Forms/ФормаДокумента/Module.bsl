&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрорисоватьСтатус(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьДекларацию();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВозможностьВыбораКонтрагентов();
	
	ПослеИзмененияТребования();
	
	ПересчитатьКоличествоСтрокСервер(ЭтотОбъект);
	
	Элементы.ГруппаОрганизация.Видимость = НЕ РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	УдалитьНастройкиИнтерфейса();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Контрагенты.Очистить();
	ТекущийОбъект.ДокументыОплаты.Очистить();
	ТекущийОбъект.ДатыПринятияНаУчет.Очистить();
	ТекущийОбъект.ПосредническаяДеятельность.Очистить();
	
	Для Каждого СтрокаКнигиПокупок Из Объект.КнигаПокупок Цикл
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "Продавец", ТекущийОбъект.Контрагенты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПродавецРасхождение", ТекущийОбъект.Контрагенты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплаты", ТекущийОбъект.ДокументыОплаты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплатыРасхождение", ТекущийОбъект.ДокументыОплаты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДатаПринятияНаУчет", ТекущийОбъект.ДатыПринятияНаУчет);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДатаПринятияНаУчетРасхождение", ТекущийОбъект.ДатыПринятияНаУчет);
	КонецЦикла;
	
	Для Каждого СтрокаКнигиПокупок Из Объект.КнигаПокупокДл Цикл
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "Продавец", ТекущийОбъект.Контрагенты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПродавецРасхождение", ТекущийОбъект.Контрагенты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплаты", ТекущийОбъект.ДокументыОплаты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплатыРасхождение", ТекущийОбъект.ДокументыОплаты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДатаПринятияНаУчет", ТекущийОбъект.ДатыПринятияНаУчет);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДатаПринятияНаУчетРасхождение", ТекущийОбъект.ДатыПринятияНаУчет);
	КонецЦикла;
	
	Для Каждого СтрокаКнигиПокупок Из Объект.КнигаПродаж Цикл
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "Покупатель", ТекущийОбъект.Контрагенты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПокупательРасхождение", ТекущийОбъект.Контрагенты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплаты", ТекущийОбъект.ДокументыОплаты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплатыРасхождение", ТекущийОбъект.ДокументыОплаты);
	КонецЦикла;
	
	Для Каждого СтрокаКнигиПокупок Из Объект.КнигаПродажДл Цикл
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "Покупатель", ТекущийОбъект.Контрагенты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПокупательРасхождение", ТекущийОбъект.Контрагенты);
		
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплаты", ТекущийОбъект.ДокументыОплаты);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ДокументОплатыРасхождение", ТекущийОбъект.ДокументыОплаты);
	КонецЦикла;
	
	Для Каждого СтрокаКнигиПокупок Из Объект.ЖурналУчетаВыставленныхСчетовФактур Цикл
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПосредническаяДеятельность", ТекущийОбъект.ПосредническаяДеятельность);
		ЗаписатьСведенияВТаблицу(СтрокаКнигиПокупок, "ПосредническаяДеятельностьРасхождение", ТекущийОбъект.ПосредническаяДеятельность);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПоясненияКДекларацииПоНДС", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПослеУдаления(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОтправленныеРанееПоясненияНажатие(Элемент)
	
	КонтекстЭДОКлиент.ПоказатьОтправленныеОтветыНаТребованияФНС(Объект.Требование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупрежедениеОбУточненнойДекларацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Найти(НавигационнаяСсылкаФорматированнойСтроки, "_NewDeclaration") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		КонтекстЭДОКлиент.ПодготовитьКорректирующуюДекларациюПоНДСИзПояснения(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Найти(НавигационнаяСсылка, "Декларация") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Объект.Декларация);
		
	ИначеЕсли Найти(НавигационнаяСсылка, "Выбрать файл") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьФайлДекларации();
		
	ИначеЕсли Найти(НавигационнаяСсылка, "Выбрать из базы") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьДекларациюИзБазы();
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТребованиюНажатие(Элемент)
	ПерезаполнитьПоТребованию(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПоКСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Заполнить автоматически" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаСведКС Из Объект.СведКС Цикл
			Если СтрокаСведКС.НомКС = "1.25" Тогда
				СтрокаСведКС.ПоясненКС = ПоясненКС_1_25();
			ИначеЕсли СтрокаСведКС.НомКС = "1.26" Тогда
				СтрокаСведКС.ПоясненКС = ПоясненКС_1_26();
			ИначеЕсли СтрокаСведКС.НомКС = "1.27" Тогда
				СтрокаСведКС.ПоясненКС = ПоясненКС_1_27();
			ИначеЕсли СтрокаСведКС.НомКС = "1.28" Тогда
				СтрокаСведКС.ПоясненКС = ПоясненКС_1_28();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПоясненКС_1_25", ПоясненКС_1_25());
		ДополнительныеПараметры.Вставить("ПоясненКС_1_26", ПоясненКС_1_26());
		ДополнительныеПараметры.Вставить("ПоясненКС_1_27", ПоясненКС_1_27());
		ДополнительныеПараметры.Вставить("ПоясненКС_1_28", ПоясненКС_1_28());
		
		ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаПоясненияПоКС", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентуПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
		
		Сведения = СведенияОКонтрагентеПоСсылке(ОтборПоКонтрагенту);
		ИНН = Сведения.ИНН;
	
		Элементы.КнигаПокупок.ОтборСтрок = Новый ФиксированнаяСтруктура("ПродавецПредставление", ИНН);
		Элементы.КнигаПокупокДл.ОтборСтрок = Новый ФиксированнаяСтруктура("ПродавецПредставление", ИНН);
		Элементы.КнигаПродаж.ОтборСтрок = Новый ФиксированнаяСтруктура("ПокупательПредставление", ИНН);
		Элементы.КнигаПродажДл.ОтборСтрок = Новый ФиксированнаяСтруктура("ПокупательПредставление", ИНН);
		Элементы.ЖурналУчетаВыставленныхСчетовФактур.ОтборСтрок = Новый ФиксированнаяСтруктура("ПокупательИННПредставление", ИНН);
		Элементы.ЖурналУчетаПолученныхСчетовФактур.ОтборСтрок = Новый ФиксированнаяСтруктура("ПродавецИННПредставление", ИНН);
		Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ОтборСтрок = Новый ФиксированнаяСтруктура("ПокупательИННПредставление", ИНН);
		Элементы.НетКнигаПрод.ОтборСтрок = Новый ФиксированнаяСтруктура("ПокупательИНН", ИНН);
		
	Иначе
		
		УбратьОтбор();
		
	КонецЕсли;
	
	ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнигаПокупок

&НаКлиенте
Процедура КнигаПокупокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.КнигаПокупок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "КнигаПокупокРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСчетаФактуры("КнигаПокупок", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "КнигаПокупокРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("КнигаПокупок", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокПродавецИНН"
				И (ДанныеСтроки.ПродавецКоличествоСтрок > 0) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПокупок", ДанныеСтроки, "Продавец", Элементы.КнигаПокупокГруппаПродавец.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПокупокПродавецИННРасхождение"
				И (ДанныеСтроки.ПродавецРасхождениеКоличествоСтрок > 1) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПокупок", ДанныеСтроки, "ПродавецРасхождение", Элементы.КнигаПокупокГруппаПродавец.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПокупокДокументОплатыНомер"
				И ДанныеСтроки.ДокументОплатыКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПокупок", ДанныеСтроки, "ДокументОплаты");
	ИначеЕсли Поле.Имя = "КнигаПокупокДокументОплатыРасхождениеНомер"
				И ДанныеСтроки.ДокументОплатыРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПокупок", ДанныеСтроки, "ДокументОплатыРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокНомерТаможеннойДекларации" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТаможеннойДекларации("КнигаПокупок", ДанныеСтроки, "НомерТаможеннойДекларации");
	ИначеЕсли Поле.Имя = "КнигаПокупокДатаПринятияНаУчетДата"
				И ДанныеСтроки.ДатаПринятияНаУчетКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДатыПринятияНаУчет("КнигаПокупок", ДанныеСтроки, "ДатаПринятияНаУчет");
	ИначеЕсли Поле.Имя = "КнигаПокупокДатаПринятияНаУчетРасхождениеДата"
				И ДанныеСтроки.ДатаПринятияНаУчетРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДатыПринятияНаУчет("КнигаПокупок", ДанныеСтроки, "ДатаПринятияНаУчетРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокПосредникИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПосредникИННКонтрагенты);
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьИдентификаторыСписков(Элемент.ТекущиеДанные, 
			"ДокументОплаты,ДокументОплатыРасхождение,ДатаПринятияНаУчет,ДатаПринятияНаУчетРасхождение,Продавец,ПродавецРасхождение");
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.КнигаПокупок.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("КнигаПокупок", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуСчетаФактуры("КнигаПокупок", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("КнигаПокупок", ДанныеСтроки, "Расхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупок", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПокупок", ДанныеСтроки, "Продавец", Элементы.КнигаПокупокГруппаПродавец.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "Продавец");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупок", ДанныеСтроки, "Продавец", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИННРасхождениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПокупок", ДанныеСтроки, "ПродавецРасхождение", Элементы.КнигаПокупокГруппаПродавец.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИННРасхождениеПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ПродавецРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПродавецИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупок", ДанныеСтроки, "ПродавецРасхождение", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупок", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПокупок", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокСтоимостьПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупок", "Стоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокСуммаНДСПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупок", "СуммаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокВалютаРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПокупок", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокСуммаНДСРасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупок", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыРасхождениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупок", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДокументОплатыРасхождениеНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокНомерТаможеннойДекларацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупок", "НомерТаможеннойДекларации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокНомерТаможеннойДекларацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуТаможеннойДекларации("КнигаПокупок", ДанныеСтроки, "НомерТаможеннойДекларации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокНомерТаможеннойДекларацииРасхождениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуТаможеннойДекларации("КнигаПокупок", ДанныеСтроки, "НомерТаможеннойДекларацииРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДатаПринятияНаУчетДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыПринятияНаУчет("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДатаПринятияНаУчет");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДатаПринятияНаУчетДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуДатыПринятияНаУчет("КнигаПокупок", ДанныеСтроки, "ДатаПринятияНаУчет");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДатаПринятияНаУчетРасхождениеДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ОткрытьФормуДатыПринятияНаУчет("КнигаПокупок", ДанныеСтроки, "ДатаПринятияНаУчетРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДатаПринятияНаУчетРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыПринятияНаУчет("КнигаПокупок", Элементы.КнигаПокупок.ТекущаяСтрока, "ДатаПринятияНаУчетРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПосредникИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИНН);
	
	ИмяРеквизита = "ПосредникИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПосредникИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупок", ДанныеСтроки, "ПосредникИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПосредникИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПосредникИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокПосредникИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупок.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупок", ДанныеСтроки, "ПосредникИННРасхождение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнигаПокупокДл

&НаКлиенте
Процедура КнигаПокупокДлВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.КнигаПокупокДл.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "КнигаПокупокДлРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСчетаФактуры("КнигаПокупокДл", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("КнигаПокупокДл", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлПродавецИНН"
				И (ДанныеСтроки.ПродавецКоличествоСтрок > 0) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПокупокДл", ДанныеСтроки, "Продавец", Элементы.КнигаПокупокДлГруппаПродавец.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПокупокДлПродавецИННРасхождение"
				И ДанныеСтроки.ПродавецРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПокупокДл", ДанныеСтроки, "ПродавецРасхождение", Элементы.КнигаПокупокДлГруппаПродавец.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПокупокДлДокументОплатыНомер"
				И ДанныеСтроки.ДокументОплатыКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплаты");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлДокументОплатыРасхождениеНомер"
				И ДанныеСтроки.ДокументОплатыРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлНомерТаможеннойДекларации" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТаможеннойДекларации("КнигаПокупокДл", ДанныеСтроки, "НомерТаможеннойДекларации");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлДатаПринятияНаУчетДата"
				И ДанныеСтроки.ДатаПринятияНаУчетКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДатыПринятияНаУчет("КнигаПокупокДл", ДанныеСтроки, "ДатаПринятияНаУчет");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлДатаПринятияНаУчетРасхождениеДата"
				И ДанныеСтроки.ДатаПринятияНаУчетРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДатыПринятияНаУчет("КнигаПокупокДл", ДанныеСтроки, "ДатаПринятияНаУчетРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПокупокДлПосредникИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПосредникИННКонтрагенты);		
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьИдентификаторыСписков(Элемент.ТекущиеДанные, 
			"ДокументОплаты,ДокументОплатыРасхождение,ДатаПринятияНаУчет,ДатаПринятияНаУчетРасхождение,Продавец,ПродавецРасхождение");
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.КнигаПокупокДл.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("КнигаПокупокДл", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуСчетаФактуры("КнигаПокупокДл", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("КнигаПокупокДл", ДанныеСтроки, "Расхождение");

КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупокДл", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "Продавец");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупокДл", ДанныеСтроки, "Продавец", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПокупокДл", ДанныеСтроки, "Продавец", Элементы.КнигаПокупокДлГруппаПродавец.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецРасхождениеИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ПродавецРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецРасхождениеИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупокДл", ДанныеСтроки, "ПродавецРасхождение", Истина);

КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПродавецРасхождениеИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПокупокДл", ДанныеСтроки, "ПродавецРасхождение", Элементы.КнигаПокупокДлГруппаПродавец.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупокДл", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПокупокДл", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлКодВалютыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПокупокДл", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлСтоимостьПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупокДл", "Стоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлСуммаНДСПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупокДл", "СуммаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлСуммаНДСРасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДатаПринятияНаУчетДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыПринятияНаУчет("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДатаПринятияНаУчет");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДатаПринятияНаУчетДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДатыПринятияНаУчет("КнигаПокупокДл", ДанныеСтроки, "ДатаПринятияНаУчет");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДатаПринятияНаУчетРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыПринятияНаУчет("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДатаПринятияНаУчетРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДатаПринятияНаУчетРасхождениеДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДатыПринятияНаУчет("КнигаПокупокДл", ДанныеСтроки, "ДатаПринятияНаУчетРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыРасхождениеНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыРасхождениеНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПокупокДл", Элементы.КнигаПокупокДл.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлДокументОплатыРасхождениеДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПокупокДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлНомерТаможеннойДекларацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПокупокДл", "НомерТаможеннойДекларации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлНомерТаможеннойДекларацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуТаможеннойДекларации("КнигаПокупокДл", ДанныеСтроки, "НомерТаможеннойДекларации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлНомерТаможеннойДекларацииРасхождениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ОткрытьФормуТаможеннойДекларации("КнигаПокупокДл", ДанныеСтроки, "НомерТаможеннойДекларацииРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПосредникИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИНН);
	
	ИмяРеквизита = "ПосредникИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПосредникИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупокДл", ДанныеСтроки, "ПосредникИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПосредникИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПосредникИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупокДлПосредникИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПокупокДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПокупокДл", ДанныеСтроки, "ПосредникИННРасхождение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнигаПродаж

&НаКлиенте
Процедура КнигаПродажВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.КнигаПродаж.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "КнигаПродажРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСчетаФактуры("КнигаПродаж", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "КнигаПродажРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("КнигаПродаж", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "КнигаПродажПокупательИНН"
				И (ДанныеСтроки.ПокупательКоличествоСтрок > 0)Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПродаж", ДанныеСтроки, "Покупатель", Элементы.КнигаПродажГруппаПокупатель.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПродажПокупательРасхождениеИНН"
				И ДанныеСтроки.ПокупательРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПродаж", ДанныеСтроки, "ПокупательРасхождение", Элементы.КнигаПродажГруппаПокупатель.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПродажДокументОплатыНомер"
				И ДанныеСтроки.ДокументОплатыКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплаты");
	ИначеЕсли Поле.Имя = "КнигаПродажДокументОплатыРасхождениеНомер"
				И ДанныеСтроки.ДокументОплатыРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплатыРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПродажПосредникИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПосредникИННКонтрагенты);		
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьИдентификаторыСписков(Элемент.ТекущиеДанные, 
			"ДокументОплаты,ДокументОплатыРасхождение,Покупатель,ПокупательРасхождение");
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КнигаПродажРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.КнигаПродаж.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("КнигаПродаж", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуСчетаФактуры("КнигаПродаж", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("КнигаПродаж", ДанныеСтроки, "Расхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "Покупатель");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродаж", ДанныеСтроки, "Покупатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПродаж", ДанныеСтроки, "Покупатель", Элементы.КнигаПродажГруппаПокупатель.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательРасхождениеИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "ПокупательРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательРасхождениеИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродаж", ДанныеСтроки, "ПокупательРасхождение", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПокупательРасхождениеИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПродаж", ДанныеСтроки, "ПокупательРасхождение", Элементы.КнигаПродажГруппаПокупатель.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПродаж", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажКодВалютыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПродаж", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимость20ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "Стоимость20");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимость18ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "Стоимость18");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС20ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "СуммаНДС20");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС18ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "СуммаНДС18");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС20РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС18РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимость10ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "Стоимость10");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС10ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "СуммаНДС10");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСуммаНДС10РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимость0ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "Стоимость0");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимостьОсвобождаемаяПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "СтоимостьОсвобождаемая");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажСтоимостьВсегоПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродаж", "СтоимостьВсего");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыРасхождениеНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродаж", Элементы.КнигаПродаж.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыРасхождениеНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДокументОплатыРасхождениеДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродаж", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПосредникИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИНН);
	
	ИмяРеквизита = "ПосредникИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПосредникИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродаж", ДанныеСтроки, "ПосредникИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПосредникИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПосредникИННРасхождение", Сведения);

КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажПосредникИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродаж.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродаж", ДанныеСтроки, "ПосредникИННРасхождение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнигаПродажДл

&НаКлиенте
Процедура КнигаПродажДлВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.КнигаПродажДл.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "КнигаПродажДлРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСчетаФактуры("КнигаПродажДл", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "КнигаПродажДлРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("КнигаПродажДл", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "КнигаПродажДлПокупательИНН"
				И (ДанныеСтроки.ПокупательКоличествоСтрок > 0) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПродажДл", ДанныеСтроки, "Покупатель", Элементы.КнигаПродажДлГруппаПокупатель.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПродажДлПокупательРасхождениеИНН"
				И ДанныеСтроки.ПокупательРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСпискаКонтрагентов("КнигаПродажДл", ДанныеСтроки, "ПокупательРасхождение", Элементы.КнигаПродажДлГруппаПокупатель.Заголовок);
	ИначеЕсли Поле.Имя = "КнигаПродажДлДокументОплатыНомер"
				И ДанныеСтроки.ДокументОплатыКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплаты");
	ИначеЕсли Поле.Имя = "КнигаПродажДлДокументОплатыРасхождениеНомер"
				И ДанныеСтроки.ДокументОплатыРасхождениеКоличествоСтрок > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	ИначеЕсли Поле.Имя = "КнигаПродажДлПосредникИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПосредникИННКонтрагенты);
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьИдентификаторыСписков(Элемент.ТекущиеДанные, 
			"ДокументОплаты,ДокументОплатыРасхождение,Покупатель,ПокупательРасхождение");
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.КнигаПродажДл.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("КнигаПродажДл", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуСчетаФактуры("КнигаПродажДл", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("КнигаПродажДл", ДанныеСтроки, "Расхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "Покупатель");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродажДл", ДанныеСтроки, "Покупатель", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПродажДл", ДанныеСтроки, "Покупатель", Элементы.КнигаПродажДлГруппаПокупатель.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательРасхождениеИННПриИзменении(Элемент)
	
	ПриИзмененииИННКонтрагентаСпискаРеквизитов("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "ПокупательРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательРасхождениеИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродажДл", ДанныеСтроки, "ПокупательРасхождение", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПокупательРасхождениеИННОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуСпискаКонтрагентов("КнигаПродажДл", ДанныеСтроки, "ПокупательРасхождение", Элементы.КнигаПродажДлГруппаПокупатель.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПродажДл", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлКодВалютыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("КнигаПродажДл", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимость20ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "Стоимость20");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимость18ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "Стоимость18");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС20ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "СуммаНДС20");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС18ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "СуммаНДС18");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС20РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС18РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимость10ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "Стоимость10");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС10ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "СуммаНДС10");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСуммаНДС10РасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимость0ПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "Стоимость0");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимостьОсвобождаемаяПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "СтоимостьОсвобождаемая");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлСтоимостьВсегоПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("КнигаПродажДл", "СтоимостьВсего");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыРасхождениеНомерПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыРасхождениеДатаПриИзменении(Элемент)
	
	ПриИзмененииДокументаОплатыНаСервере("КнигаПродажДл", Элементы.КнигаПродажДл.ТекущаяСтрока, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыРасхождениеНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлДокументОплатыРасхождениеДатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ОткрытьФормуДокументовОплаты("КнигаПродажДл", ДанныеСтроки, "ДокументОплатыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПосредникИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИНН);
	
	ИмяРеквизита = "ПосредникИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПосредникИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродажДл", ДанныеСтроки, "ПосредникИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПосредникИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПосредникИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПосредникИННРасхождение", Сведения);

КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажДлПосредникИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.КнигаПродажДл.ТекущиеДанные;
	
	ВыбратьКонтрагента("КнигаПродажДл", ДанныеСтроки, "ПосредникИННРасхождение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурналУчетаВыставленныхСчетовФактур

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.ЖурналУчетаВыставленныхСчетовФактур.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПосредническойДеятельности("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПосредническаяДеятельность");
	ИначеЕсли Поле.Имя = "ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьРасхождениеПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПосредническойДеятельности("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПосредническаяДеятельностьРасхождение");
	ИначеЕсли Поле.Имя = "ЖурналУчетаВыставленныхСчетовФактурПокупательИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПокупательИННКонтрагенты);
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьИдентификаторыСписков(Элемент.ТекущиеДанные, "ПосредническаяДеятельность");
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("ЖурналУчетаВыставленныхСчетовФактур", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "Расхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПокупательИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПокупательИНН);
	
	ИмяРеквизита = "ПокупательИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПокупательИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПокупательИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуПосредническойДеятельности("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПосредническаяДеятельность");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьРасхождениеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуПосредническойДеятельности("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПосредническаяДеятельностьРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПокупательИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПокупательИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПокупательИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурПокупательИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаВыставленныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаВыставленныхСчетовФактур", ДанныеСтроки, "ПокупательИННРасхождение", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаВыставленныхСчетовФактур", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаВыставленныхСчетовФактурКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурналУчетаПолученныхСчетовФактур

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.ЖурналУчетаПолученныхСчетовФактур.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "");
	ИначеЕсли Поле.Имя = "ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактурыРасхождение" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "Расхождение");
	ИначеЕсли Поле.Имя = "ЖурналУчетаПолученныхСчетовФактурПродавецИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПродавецИННКонтрагенты);
	ИначеЕсли Поле.Имя = "ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.СубкомиссионерИННКонтрагенты);
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("ЖурналУчетаПолученныхСчетовФактур", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактурыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуРеквизитовСчетаФактуры("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "Расхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурПродавецИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПродавецИНН);
	
	ИмяРеквизита = "ПродавецИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурПродавецИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "ПродавецИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВалютыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурПродавецИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПродавецИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПродавецИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурПродавецИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "ПродавецИННРасхождение", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.СубкомиссионерИНН);
	
	ИмяРеквизита = "СубкомиссионерИНН";
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения);
	
	СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "СубкомиссионерИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.СубкомиссионерИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "СубкомиссионерИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ЖурналУчетаПолученныхСчетовФактур.ТекущиеДанные;
	
	ВыбратьКонтрагента("ЖурналУчетаПолученныхСчетовФактур", ДанныеСтроки, "СубкомиссионерИННРасхождение", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВидаСделкиПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "КодВидаСделки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВидаОперацииПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = КодыВидовОперацийПолученныхСчетовФактур(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСтоимостьПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "Стоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурСуммаНДСПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "СуммаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУвеличениеПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "РазницаСтоимостиУвеличение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУвеличениеПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "РазницаСуммыНДСУвеличение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУменьшениеПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "РазницаСтоимостиУменьшение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУменьшениеПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ЖурналУчетаПолученныхСчетовФактур", "РазницаСуммыНДСУменьшение");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыставленныеСчетаФактурыНеплательщиковНДС

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИНН" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(ДанныеСтроки.ПокупательИННКонтрагенты);
	ИначеЕсли ЭтоПолеПериода(Поле.Имя) Тогда
		ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка);
	ИначеЕсли ЭтоПолеКодаОшибки(Поле.Имя) Тогда
		ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСРезультатПроверкиПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущаяСтрока;
	РезультатПроверкиПриИзмененииНаСервере("ВыставленныеСчетаФактурыНеплательщиковНДС", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСНомерСчетаФактурыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "НомерСчетаФактуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСДатаСчетаФактурыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "ДатаСчетаФактуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСКодВалютыПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСКодВалютыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("ВыставленныеСчетаФактурыНеплательщиковНДС", ДанныеСтроки, "КодВалюты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСКодВалютыРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	ОткрытьФормуВыбораВалюты("ВыставленныеСчетаФактурыНеплательщиковНДС", ДанныеСтроки, "КодВалютыРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПокупательИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПокупательИНН", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	ВыбратьКонтрагента("ВыставленныеСчетаФактурыНеплательщиковНДС", ДанныеСтроки, "ПокупательИНН", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННРасхождениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки.ПокупательИННРасхождение);
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, "ПокупательИННРасхождение", Сведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.ВыставленныеСчетаФактурыНеплательщиковНДС.ТекущиеДанные;
	
	ВыбратьКонтрагента("ВыставленныеСчетаФактурыНеплательщиковНДС", ДанныеСтроки, "ПокупательИННРасхождение", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДССтоимостьБезНДСПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "СтоимостьБезНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДССуммаНДСПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "СуммаНДС");
	
КонецПроцедуры


&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДССуммаНДСРасхождениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыНеплательщиковНДССтоимостьПриИзменении(Элемент)
	
	СкопироватьЗначениеВРасхождение("ВыставленныеСчетаФактурыНеплательщиковНДС", "Стоимость");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНетКнигаПрод

&НаКлиенте
Процедура НетКнигаПродКодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродКодВидаОперацииРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = КодыВидовОперацийВыданныхСчетовФактур(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательИННПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательИННРасхождениеПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникИННПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникИНННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникИННРасхождениеПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникИННРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродРазделПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("Раздел");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродНомерСчетаФактурыПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("НомерСчетаФактуры");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродКодВидаОперацииПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("КодВидаОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродСтоимостьВсегоПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("СтоимостьВсего");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродДатаСчетаФактурыПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("ДатаСчетаФактуры");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродСтоимостьРубВсегоПриИзменении(Элемент)
	
	НетКнигаПродУстановитьЗначениеРасхождения("СтоимостьРубВсего");
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательКПППриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательКППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательКППРасхождениеПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательКППРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникКПППриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникКППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникКППРасхождениеПриИзменении(Элемент)
	
	НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПосредникКППРасхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УстановитьНадписи(Элемент.ТекущиеДанные);
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведКСВыбор

&НаКлиенте
Процедура СведКСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведКСНомКСПриИзменении(Элемент)
	ПоказатьПодсказкуПоКС();
КонецПроцедуры

&НаКлиенте
Процедура СведКСПослеУдаления(Элемент)
	ПоказатьПодсказкуПоКС();
	ПересчитатьКоличествоСтрокКлиент(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечататьРаздел(Команда)
	
	ПечатьТребование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТребования(Команда)
	
	ПечатьТребование(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТребование(ТолькоТекущийРаздел = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТолькоТекущийРаздел", ТолькоТекущийРаздел);
		
	Если НаложенОтбор(ТолькоТекущийРаздел) Тогда
		
		Если ТолькоТекущийРаздел Тогда
			Текст = НСтр("ru = 'В табличной части установлены отборы. 
	                      |Распечатать все строки или только отобранные?'");
		Иначе
			Текст = НСтр("ru = 'В табличный частях установлены отборы. 
	                      |Распечатать все строки или только отобранные?'");
		КонецЕсли;
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПечатьТребования_ПослеВопроса", 
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений(); 
		Кнопки.Добавить(НСтр("ru = 'Все строки'"));
		Кнопки.Добавить(НСтр("ru = 'Только отбранные'"));
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Кнопки);
		
	Иначе
		
		ПечатьТребования_ПослеВопроса(НСтр("ru = 'Все строки'"), ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтбор()
	
	ТЧ = ТабличныеЧасти(Истина);
	
	ЕстьОтбор = Ложь;
	Для каждого Имя Из ТЧ Цикл
		Таблица = Объект[Имя];
		Если КоличествоОтобранныхСтрок(Имя) <> Таблица.Количество() Тогда
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОтбор;
		
КонецФункции

&НаКлиенте
Процедура Отправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьЗаполнениеТабличныхЧастейПередОтправкой(Отказ);
	
	Если Не Отказ Тогда
		
		ЕстьОтбор = ЕстьОтбор();
		Если ЕстьОтбор Тогда
			ДопТекст = НСтр("ru = '
                             |Обратите внимание, в строках пояснения установлен отбор.'");
		Иначе
			ДопТекст = Неопределено;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьПояснение(
			КонтекстЭДОКлиент, 
			Объект.Ссылка, 
			Объект.Организация, 
			УникальныйИдентификатор, 
			ОписаниеОповещения,
			ДопТекст);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТребованию(Команда)
	
	ТекстВопроса = НСтр("ru = 'Перезаполнить пояснение без учета ранее отправленных пояснений?
						|Изменения данного документа будут потеряны.'");
	
	Оповещение = Новый ОписаниеОповещения("ПерезаполнитьПоТребованиюЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоТребованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоТребованиюНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьНастройкиИнтерфейса()
	
	Попытка
	
		УстановитьПривилегированныйРежим(Истина);
		
		ПользовательСсылка          = Пользователи.ТекущийПользователь();
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ИдентификаторПользователяИБ");
		ПользовательИБ              = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено Тогда
			ИмяПользователя = ПользовательИБ.Имя;
		Иначе
			Возврат;
		КонецЕсли;
		
		Настройка = "Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаДокумента/НастройкиФормы";
		
		// Удаление настроек динамических списков.
		КлючОбъектаЧастями = СтрРазделить(Настройка, "/");
		ИмяОбъекта         = КлючОбъектаЧастями[0];
		ПараметрыОтбора    = Новый Структура;
		ПараметрыОтбора.Вставить("КлючОбъекта",  ИмяОбъекта);
		ПараметрыОтбора.Вставить("Пользователь", ИмяПользователя);
		ВыборкаНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.Выбрать(ПараметрыОтбора);
		Пока ВыборкаНастроек.Следующий() Цикл
			ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ВыборкаНастроек.КлючОбъекта, ВыборкаНастроек.КлючНастроек, ИмяПользователя);
		КонецЦикла;
		
		ХранилищеСистемныхНастроек.Удалить(Настройка, "", ИмяПользователя);	
		
	Исключение
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами.ОчисткаНастроекПользователяВПояснении'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон("%1: %2", "Не удалось очистить настройки формы пояснения", ИнформацияОбОшибке));
		
	КонецПопытки; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайлДекларации(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ФайлыБылиВыбраны Тогда
		
		ИдДекларации = ИдДекларации(АдресДанных, ВыбранноеИмяФайла);
		Если ЗначениеЗаполнено(ИдДекларации) Тогда
			Объект.Декларация 	= ИдДекларации;
			Модифицированность 	= Истина;
			УправлениеДекларацией(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТребования_ПослеВопроса(Результат, ВходящийКонтекст) Экспорт
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоТекущийРаздел = ВходящийКонтекст.ТолькоТекущийРаздел;
	
	ТолькоОтобранные = Результат = НСтр("ru = 'Только отбранные'");
	СтрокиТЧ = ПечатаемыеСтроки(ТолькоОтобранные, ТолькоТекущийРаздел);
	
	ТабДок = ТабличныйДокументТребованияПоНДССервер(СтрокиТЧ);
	КонтекстЭДОКлиент.НапечататьДокумент(ТабДок, Заголовок);
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументТребованияПоНДССервер(СтрокиТЧ)
	
	ВыбранныеСтроки = ВыбранныеСтроки(СтрокиТЧ);
	СтрокиТЧ        = Неопределено; // Чтобы с сервера на клиент не возвращались таблицы значений

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ТабличныйДокументПояснения(ЭтотОбъект.Объект.Ссылка, ВыбранныеСтроки, Истина);
	
КонецФункции

&НаСервере
Функция ВыбранныеСтроки(Знач СтрокиТЧ)
	
	Для каждого ТЧ Из СтрокиТЧ Цикл
		
		Имя = ТЧ.Ключ;
		
		Если Имя = "ПояснИнОсн"	Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСтрок = ТЧ.Значение;
		Таблица = Объект[Имя];
		
		ВыбраныеСтроки = Новый Массив;
		Для Каждого ИдСтроки Из ИдСтрок Цикл
	        ВыбраныеСтроки.Добавить(Таблица.НайтиПоИдентификатору(ИдСтроки));
	    КонецЦикла;

	    СтрокиТЧ[Имя] = Таблица.Выгрузить(ВыбраныеСтроки);
	
	КонецЦикла;
	
	Возврат СтрокиТЧ;
    
КонецФункции

&НаКлиенте
Функция ТекущаяТЧ()
	Возврат СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Группа", "");
КонецФункции

&НаКлиенте
Функция НаложенОтбор(ТолькоТекущийРаздел)
	
	Если ТолькоТекущийРаздел Тогда
		ТЧ = Новый Массив;
		ТЧ.Добавить(ТекущаяТЧ());
	Иначе
		ТЧ = ТабличныеЧасти();
	КонецЕсли;
	
	НаложенОтбор = Ложь;
	
	Для каждого Имя Из ТЧ Цикл
		
		Если Имя = "ПояснИнОсн" Тогда
			// Нет табличной части
			Продолжить;
		КонецЕсли;
		
		Таблица = Объект[Имя];
		Если КоличествоОтобранныхСтрок(Имя) <> Таблица.Количество() Тогда
			НаложенОтбор = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаложенОтбор;
	
КонецФункции

&НаКлиенте
Процедура НетКнигаПродУстановитьЗначениеРасхождения(ИмяКолонки)
	
	ДанныеСтроки = Элементы.НетКнигаПрод.ТекущиеДанные;
	
	ИмяКолонкиРасхождения = ИмяКолонки + "Расхождение";
	Если ДанныеСтроки.Свойство(ИмяКолонки)
		И ДанныеСтроки.Свойство(ИмяКолонкиРасхождения) Тогда
		ДанныеСтроки[ИмяКолонкиРасхождения] = ДанныеСтроки[ИмяКолонки];
	КонецЕсли;
	
	ИмяКолонкиПередставление = ИмяКолонки + "Представление";
	ИмяКолонкиРасхожденияПередставление = ИмяКолонкиРасхождения + "Представление";
	
	Если ДанныеСтроки.Свойство(ИмяКолонкиПередставление)
		И ДанныеСтроки.Свойство(ИмяКолонкиРасхожденияПередставление) Тогда
		ДанныеСтроки[ИмяКолонкиРасхожденияПередставление] = ДанныеСтроки[ИмяКолонкиПередставление];
	КонецЕсли;
	
	ИмяКолонкиКонтрагенты = ИмяКолонки + "Контрагенты";
	ИмяКолонкиРасхожденияКонтрагенты = ИмяКолонкиРасхождения + "Контрагенты";
	
	Если ДанныеСтроки.Свойство(ИмяКолонкиКонтрагенты)
		И ДанныеСтроки.Свойство(ИмяКолонкиРасхожденияКонтрагенты) Тогда
		ДанныеСтроки[ИмяКолонкиРасхожденияКонтрагенты] = ДанныеСтроки[ИмяКолонкиКонтрагенты];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДекларации()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораФайлДекларации", 
		ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещения);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекларацию()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		Объект.Декларация = КонтекстЭДОСервер.ДекларацияИзФайлаТребованияОПредставленииПоясненийКДекларацииНДС(Объект.Требование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ВТребованииЕстьXMLФайл				= КонтекстЭДОСервер.ЕстьТребованияКРазделам8_12(Объект.Требование);
	ДоступноРедактированиеДанныхФНС 	= НЕ ВТребованииЕстьXMLФайл;
	
	ДанныеТребования = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ДанныеТребованияОПредставленииПоясненийКДекларацииНДС(Объект.Требование);
	
	Если ВТребованииЕстьXMLФайл Тогда
		ВерсияФоматаТребования = ДанныеТребования.ВерсФорм;
	КонецЕсли;
	
	РеквизитыДатПринятияНаУчет = Документы.ПоясненияКДекларацииПоНДС.РеквизитыДатПринятияНаУчет();
	РеквизитыДокументовОплаты  = Документы.ПоясненияКДекларацииПоНДС.РеквизитыДокументовОплаты();
	РеквизитыКонтрагентов      = Документы.ПоясненияКДекларацииПоНДС.РеквизитыКонтрагентов();
	РеквизитыПосредническойДеятельности = Документы.ПоясненияКДекларацииПоНДС.РеквизитыПосредническойДеятельности();
	
	РанееОтправленныеПояснения = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ОтправленныеОтветыНаТребованиеПоясненийКДекларацииНДС(Объект.Требование);
	
	Элементы.ДекорацияОтправленныеРанееПояснения.Видимость = 
		РанееОтправленныеПояснения.Количество() > 1
		ИЛИ РанееОтправленныеПояснения.Количество() = 1 И РанееОтправленныеПояснения[0] <> Объект.Ссылка;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	СкрытьНезаполненныеКолонкиПериодОтраженияЗаписи();
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПроверитьСостояниеОтправкиПояснения();
	
	УправлениеЭлементамиУправленияОтправки();
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьТабличныхЧастей();
	
	УправлениеФормой(ЭтотОбъект);
	
	УправлениеДекларацией(ЭтотОбъект);
	
	ПоказатьПодсказкуПоКС();
	
	Если ВТребованииЕстьXMLФайл И ДокументооборотСКОКлиентСервер.СравнитьВерсииФормата(ВерсияФоматаТребования, "5.05") < 0 Тогда
		Элементы.КнигаПродажГруппаСтоимость20.Видимость 	= Ложь;
		Элементы.КнигаПродажГруппаСуммаНДС20.Видимость 		= Ложь;
		Элементы.КнигаПродажДлГруппаСтоимость20.Видимость 	= Ложь;
		Элементы.КнигаПродажДлГруппаНДС20.Видимость 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоСтрокСервер(Форма)
	
	ТЧ = ТабличныеЧасти(Истина);
	
	Для каждого Имя Из ТЧ Цикл
		Таблица    = Форма.Объект[Имя]; // отличие в этой строке
		ДобавитьКоличествоВЗаголовокТаблиц(Форма, Имя, Таблица.Количество());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоСтрокКлиент(Форма)
	
	ТЧ = ТабличныеЧасти(Истина);
	
	Для каждого Имя Из ТЧ Цикл
		Таблица    = Форма.Объект[Имя];
		Количество = КоличествоОтобранныхСтрок(Имя); // отличие в этой строке
		ДобавитьКоличествоВЗаголовокТаблиц(Форма, Имя, Количество);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСтраницыБезСкобок(Знач ЗаголовокСтраницы)
	
	ПозицияСкобки = СтрНайти(ЗаголовокСтраницы, "(");
	
	Если ПозицияСкобки <> 0 Тогда
		ЗаголовокСтраницы = Лев(ЗаголовокСтраницы, ПозицияСкобки - 1);
	КонецЕсли;

	Возврат СокрЛП(ЗаголовокСтраницы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьКоличествоВЗаголовокТаблиц(Форма, Имя, Количество)
	
	// Добавляем к имени страницы количество строк
	
	Страница = Форма.Элементы["Группа" + Имя];
	
	Страница.Заголовок = ЗаголовокСтраницыБезСкобок(Страница.Заголовок);
	
	Шаблон = НСтр("ru = '%1 (%2)'");
	Шаблон = СтрШаблон(Шаблон, Страница.Заголовок, Количество);
	Страница.Заголовок = Шаблон;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоОтобранныхСтрок(Имя)
    
	Таблица = Объект[Имя];
	Элемент = Элементы[Имя];
	
	Количество = 0;
    
    Для Каждого СтрокаТаблицыФормы Из Таблица Цикл
        ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
        Если Элемент.ПроверитьСтроку(ИдентификаторСтроки) Тогда
            Количество = Количество + 1;
        КонецЕсли;
    КонецЦикла;
	
    Возврат Количество;
	
КонецФункции

&НаКлиенте
Функция ПечатаемыеСтроки(ТолькоОтобранные, ТолькоТекущийРаздел)
	
	Если ТолькоТекущийРаздел Тогда
		ТЧ = Новый Массив;
		ТЧ.Добавить(ТекущаяТЧ());
	Иначе
		ТЧ = ТабличныеЧасти(Истина);
		ТЧ.Добавить("ПояснИнОсн");
	КонецЕсли;
	
	ОтобранныеСтроки = Новый Структура;
	Для каждого Имя Из ТЧ Цикл
		
		Таблица = Объект[Имя];
		Элемент = Элементы[Имя];
		
		Если Имя = "ПояснИнОсн" Тогда
			ОтобранныеСтроки.Вставить("ПояснИнОсн", Объект.ПояснИнОсн);
		Иначе
		
			ИдентификаторыВыбраныхСтрок = Новый Массив;
		
			Для Каждого СтрокаТаблицыФормы Из Таблица Цикл
				
				ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		        Если ТолькоОтобранные И Элемент.ПроверитьСтроку(ИдентификаторСтроки) ИЛИ НЕ ТолькоОтобранные Тогда
		            ИдентификаторыВыбраныхСтрок.Добавить(ИдентификаторСтроки);
				КонецЕсли;
			
			КонецЦикла;
			
			ОтобранныеСтроки.Вставить(Имя, ИдентификаторыВыбраныхСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
    Возврат ОтобранныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТабличныеЧасти(ДобавлятьКС = Ложь)
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТабличныеЧастиПояснения(ДобавлятьКС);
	
КонецФункции	
	
&НаСервере
Процедура УправлениеЭлементамиУправленияОтправки()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда 
		Элементы.КнопкаОтправить.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПояснениеОтправлено Тогда
		
		Элементы.ФормаОтправить.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПеречитать.Видимость = Ложь;
		Элементы.ФормаПерезаполнитьПоТребованию.Видимость = Ложь;
		Элементы.ФормаИзменитьФорму.Видимость = Ложь;
		
		Элементы.Страницы.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеОтправкиПояснения()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтатусОтправки 			= КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);
	ПояснениеОтправлено 	= ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	УстановитьУсловноеОформлениеКнигаПокупок();
	УстановитьУсловноеОформлениеКнигаПокупокДл();
	УстановитьУсловноеОформлениеКнигаПродаж();
	УстановитьУсловноеОформлениеКнигаПродажДл();
	УстановитьУсловноеОформлениеЖурналУчетаВыставленныхСчетовФактур();
	УстановитьУсловноеОформлениеЖурналУчетаПолученныхСчетовФактур();
	УстановитьУсловноеОформлениеВыставленныеСчетаФактуры();
	УстановитьУсловноеОформлениеНетКнигаПрод();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКнигаПокупок()
	
	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПродавецИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокСтоимостьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокСуммаНДСРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДатаПринятияНаУчетРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДокументОплатыРасхождениеНомер");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДокументОплатыРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокНомерТаможеннойДекларацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПосредникИННРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПродавец
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПродавецИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.ПродавецКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупок.ПродавецПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПродавецИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.ПродавецРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупок.ПродавецРасхождениеПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПродавецИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.ПродавецРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 1);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПосредник
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПосредникИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.ПосредникИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупок.ПосредникИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокПосредникИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупок.ПосредникИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупок.ПосредникИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДокументОплаты
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДокументОплатыНомер",
													"КнигаПокупокДокументОплатыДата",
													"Объект.КнигаПокупок.ДокументОплатыКоличествоСтрок",
													"Объект.КнигаПокупок.ДокументОплатыПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДокументОплатыРасхождениеНомер",
													"КнигаПокупокДокументОплатыРасхождениеДата",
													"Объект.КнигаПокупок.ДокументОплатыРасхождениеКоличествоСтрок",
													"Объект.КнигаПокупок.ДокументОплатыРасхождениеПредставление");
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДатаПринятияНаУчет
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДатаПринятияНаУчетДата",
													"",
													"Объект.КнигаПокупок.ДатаПринятияНаУчетКоличествоСтрок",
													"Объект.КнигаПокупок.ДатаПринятияНаУчетПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДатаПринятияНаУчетРасхождениеДата",
													"",
													"Объект.КнигаПокупок.ДатаПринятияНаУчетРасхождениеКоличествоСтрок",
													"Объект.КнигаПокупок.ДатаПринятияНаУчетРасхождениеПредставление");
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПокупок();
		ДобавитьУсловноеОформлениеРасхождений("КнигаПокупок", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКнигаПокупокДл()

	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПродавецИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлДатаПринятияНаУчетРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлСтоимостьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлСуммаНДСРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлДатаПринятияНаУчетРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлДокументОплатыРасхождениеНомер");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлДокументОплатыРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлНомерТаможеннойДекларацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПосредникИННРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПродавец
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПродавецИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.ПродавецКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупокДл.ПродавецПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПродавецИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.ПродавецРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупокДл.ПродавецРасхождениеПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПродавецИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.ПродавецРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 1);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПосредник
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПосредникИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.ПосредникИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупокДл.ПосредникИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПокупокДлПосредникИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПокупокДл.ПосредникИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПокупокДл.ПосредникИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДокументОплаты
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДлДокументОплатыНомер",
													"КнигаПокупокДлДокументОплатыДата",
													"Объект.КнигаПокупокДл.ДокументОплатыКоличествоСтрок",
													"Объект.КнигаПокупокДл.ДокументОплатыПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДлДокументОплатыРасхождениеНомер",
													"КнигаПокупокДлДокументОплатыРасхождениеДата",
													"Объект.КнигаПокупокДл.ДокументОплатыРасхождениеКоличествоСтрок",
													"Объект.КнигаПокупокДл.ДокументОплатыРасхождениеПредставление");
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДатаПринятияНаУчет
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДлДатаПринятияНаУчетДата",
													"",
													"Объект.КнигаПокупокДл.ДатаПринятияНаУчетКоличествоСтрок",
													"Объект.КнигаПокупокДл.ДатаПринятияНаУчетПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПокупокДлДатаПринятияНаУчетРасхождениеДата",
													"",
													"Объект.КнигаПокупокДл.ДатаПринятияНаУчетРасхождениеКоличествоСтрок",
													"Объект.КнигаПокупокДл.ДатаПринятияНаУчетРасхождениеПредставление");
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПокупок();
		ДобавитьУсловноеОформлениеРасхождений("КнигаПокупокДл", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры	
	
&НаСервере
Процедура УстановитьУсловноеОформлениеКнигаПродаж()

	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПокупательРасхождениеИНН");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимость20Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСуммаНДС20Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимость18Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСуммаНДС18Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимость10Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСуммаНДС10Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимость0Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимостьОсвобождаемаяРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажСтоимостьВсегоРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДокументОплатыРасхождениеНомер");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДокументОплатыРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПосредникИННРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПокупатель
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПокупательИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.ПокупательКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродаж.ПокупательПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПокупательРасхождениеИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.ПокупательРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродаж.ПокупательРасхождениеПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПокупательРасхождениеИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.ПокупательРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 1);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПосредник
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПосредникИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.ПосредникИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродаж.ПосредникИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажПосредникИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродаж.ПосредникИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродаж.ПосредникИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДокументОплаты
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПродажДокументОплатыНомер",
													"КнигаПродажДокументОплатыДата",
													"Объект.КнигаПродаж.ДокументОплатыКоличествоСтрок",
													"Объект.КнигаПродаж.ДокументОплатыПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПродажДокументОплатыРасхождениеНомер",
													"КнигаПродажДокументОплатыРасхождениеДата",
													"Объект.КнигаПродаж.ДокументОплатыРасхождениеКоличествоСтрок",
													"Объект.КнигаПродаж.ДокументОплатыРасхождениеПредставление");
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПродаж();
		ДобавитьУсловноеОформлениеРасхождений("КнигаПродаж", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьУсловноеОформлениеКнигаПродажДл()

	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПокупательРасхождениеИНН");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимость20Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСуммаНДС20Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимость18Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСуммаНДС18Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимость10Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСуммаНДС10Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимость0Расхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимостьОсвобождаемаяРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлСтоимостьВсегоРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлДокументОплатыРасхождениеНомер");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлДокументОплатыРасхождениеДата");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПосредникИННРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПокупатель
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПокупательИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.ПокупательКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродажДл.ПокупательПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПокупательРасхождениеИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.ПокупательРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 0);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродажДл.ПокупательРасхождениеПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПокупательРасхождениеИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.ПокупательРасхождениеКоличествоСтрок", ВидСравненияКомпоновкиДанных.Больше, 1);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПосредник
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПосредникИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.ПосредникИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродажДл.ПосредникИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаПродажДлПосредникИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КнигаПродажДл.ПосредникИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.КнигаПродажДл.ПосредникИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляДокументОплаты
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПродажДлДокументОплатыНомер",
													"КнигаПродажДлДокументОплатыДата",
													"Объект.КнигаПродажДл.ДокументОплатыКоличествоСтрок",
													"Объект.КнигаПродажДл.ДокументОплатыПредставление");
		
		ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения("КнигаПродажДлДокументОплатыРасхождениеНомер",
													"КнигаПродажДлДокументОплатыРасхождениеДата",
													"Объект.КнигаПродажДл.ДокументОплатыРасхождениеКоличествоСтрок",
													"Объект.КнигаПродажДл.ДокументОплатыРасхождениеПредставление");
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПродаж();
		ДобавитьУсловноеОформлениеРасхождений("КнигаПродажДл", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьУсловноеОформлениеЖурналУчетаВыставленныхСчетовФактур()
	
	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурПокупательИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьРасхождениеПредставление");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурКодВидаОперацииРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаВыставленныхСчетовФактур.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПокупатель
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурПокупательИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаВыставленныхСчетовФактур.ПокупательИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаВыставленныхСчетовФактур.ПокупательИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаВыставленныхСчетовФактурПокупательИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаВыставленныхСчетовФактур.ПокупательИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаВыставленныхСчетовФактур.ПокупательИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийЖурналаУчетаВыставленныхСчетовФактур();
		ДобавитьУсловноеОформлениеРасхождений("ЖурналУчетаВыставленныхСчетовФактур", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЖурналУчетаПолученныхСчетовФактур()

	#Область ВидимостьСтрокиРасхождений
			
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурКодВидаСделкиРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурПродавецИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурСтоимостьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурСуммаНДСРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУвеличениеРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУвеличениеРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУменьшениеРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУменьшениеРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаПолученныхСчетовФактур.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПродавец
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурПродавецИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаПолученныхСчетовФактур.ПродавецИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаПолученныхСчетовФактур.ПродавецИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурПродавецИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаПолученныхСчетовФактур.ПродавецИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаПолученныхСчетовФактур.ПродавецИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляСубкомиссионер
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаПолученныхСчетовФактур.СубкомиссионерИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаПолученныхСчетовФактур.СубкомиссионерИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЖурналУчетаПолученныхСчетовФактур.СубкомиссионерИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЖурналУчетаПолученныхСчетовФактур.СубкомиссионерИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийЖурналаУчетаПолученныхСчетовФактур();
		ДобавитьУсловноеОформлениеРасхождений("ЖурналУчетаПолученныхСчетовФактур", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьУсловноеОформлениеВыставленныеСчетаФактуры()
	
	#Область ВидимостьСтрокиРасхождений
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСНомерСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСДатаСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСКодВалютыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДССтоимостьБезНДСРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДССуммаНДСРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДССтоимостьРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область УсловноеОформлениеПоляПокупатель
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИНН");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.ПокупательИНН", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.ПокупательИННПредставление"));
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННРасхождение");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.ПокупательИННРасхождение", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.ПокупательИННРасхождениеПредставление"));
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийВыставленныхСчетовФактурНеплательщиковНДС();
		ДобавитьУсловноеОформлениеРасхождений("ВыставленныеСчетаФактурыНеплательщиковНДС", ПоляПроверкиРасхождений);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНетКнигаПрод()

	// Замена заголовка "Сведения верны" на "Не подтверждается"
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродРезультатПроверки");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НетКнигаПрод.РезультатПроверки", ВидСравненияКомпоновкиДанных.Равно,Перечисления.РезультатПроверкиСтрокиДекларации.СведенияВерны);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Не подтверждается");
	
	#Область ВидимостьСтрокиРасхождений
	
		// Скрываем вторую строку
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродНадписьРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродРазделРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродНомерСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродДатаСчетаФактурыРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродКодВидаОперацииРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПокупательИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПокупательКППРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродСтоимостьВсегоРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродСтоимостьРубВсегоРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПосредникИННРасхождение");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПосредникКППРасхождение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.НетКнигаПрод.РезультатПроверки", 
			ВидСравненияКомпоновкиДанных.НеРавно, 
			Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// Скрываем лишние колонки для случая, когда расхождение не подтверждается.
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродРаздел");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродКодВидаОперации");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродСтоимостьВсего");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродСтоимостьРубВсего");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПосредникИНН");
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродПосредникКПП");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.НетКнигаПрод.РезультатПроверки", 
			ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.РезультатПроверкиСтрокиДекларации.СведенияВерны);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "<не заполняется>");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	#КонецОбласти
	
	#Область ВыделениеРасхождений
		ПоляПроверкиРасхождений = ПоляПроверкиРасхожденийНетКнигаПрод();
		ДобавитьУсловноеОформлениеРасхождений("НетКнигаПрод", ПоляПроверкиРасхождений);
	#КонецОбласти
	
	#Область НаименованиеКонтрагента
	
		// Скрываем наименование контрагента, если его нет.
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НетКнигаПродНаименованиеКонтрагента");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.НетКнигаПрод.НаименованиеКонтрагента", 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "<не указано>");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеВидимостиМногострочногоЗначения(ОформляемыеПоля, ОформляемыПоляДляОдногоЗначения, ПутьКРеквизитуУсловия, ПолеМногострочногоПредставления)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОформляемыеПоля, ",");
	Для Каждого ОформляемоеПоле Из Массив Цикл
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ПутьКРеквизитуУсловия, ВидСравненияКомпоновкиДанных.Больше, 1);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ПолеМногострочногоПредставления));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	МассивПолейОдногоЗначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОформляемыПоляДляОдногоЗначения, ",");
	Если МассивПолейОдногоЗначения.Количество()>0 Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		Для Каждого ОформляемоеПоле Из МассивПолейОдногоЗначения Цикл
			ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ПутьКРеквизитуУсловия, ВидСравненияКомпоновкиДанных.Больше, 1);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеРасхождений(ТабличнаяЧасть, ПоляПроверкиРасхождений)
	
	Для Каждого ПолеПроверки Из ПоляПроверкиРасхождений Цикл
		
		МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеПроверки.Элементы, ",");
		Для К =0 По МассивЭлементов.Количество()-1 Цикл
			МассивЭлементов[К] = ТабличнаяЧасть + МассивЭлементов[К];
		КонецЦикла;
		
		Если ПолеПроверки.Свойство("Важно")
			И ПолеПроверки.Важно = Истина Тогда
			ДобавитьУсловноеОформлениеЗначениеОтличаетсяВажно(МассивЭлементов,
															"Объект."+ТабличнаяЧасть+"."+ПолеПроверки.Поле,
															"Объект."+ТабличнаяЧасть+"."+ПолеПроверки.ПолеРасхождение);
		Иначе
			ДобавитьУсловноеОформлениеЗначениеОтличается(МассивЭлементов,
															"Объект."+ТабличнаяЧасть+"."+ПолеПроверки.Поле,
															"Объект."+ТабличнаяЧасть+"."+ПолеПроверки.ПолеРасхождение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеЗначениеОтличается(ОформляемыеПоля, ПутьКРеквизитуУсловияЛево, ПутьКРеквизитуУсловияПраво)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ОформляемоеПоле Из ОформляемыеПоля Цикл
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ПутьКРеквизитуУсловияЛево, ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных(ПутьКРеквизитуУсловияПраво));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[ОформляемоеПоле].Шрифт, , , Истина, , , , ));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеЗначениеОтличаетсяВажно(ОформляемыеПоля, ПутьКРеквизитуУсловияЛево, ПутьКРеквизитуУсловияПраво)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ОформляемоеПоле Из ОформляемыеПоля Цикл
		ДобавитьОформляемоеПоле(ЭлементУО.Поля, ОформляемоеПоле);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		ПутьКРеквизитуУсловияЛево, ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных(ПутьКРеквизитуУсловияПраво));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[ОформляемоеПоле].Шрифт, , , Истина, , , , ));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Возврат ПолеЭлемента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	НеобходимаУточненнаяДекларация = НеобходимаУточненнаяДекларация(Объект);
	
	Если НеобходимаУточненнаяДекларация Тогда
		Элементы.ГруппаПредупреждениеОбУточненнойДекларации.Видимость = Истина;
	Иначе
		Элементы.ГруппаПредупреждениеОбУточненнойДекларации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДекларацией(Форма)
	
	Элементы = Форма.Элементы;
	Объект  = Форма.Объект;
	Декларация = Объект.Декларация;
	
	// В базе нет декларации
	Если ЗначениеЗаполнено(Декларация) Тогда
		
		Если ТипЗнч(Декларация) = Тип("Строка") Тогда
		
			ПредставлениеДекларации = Декларация;
			
			// Мы нашли декларацию в базе
		ИначеЕсли ТипЗнч(Декларация) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда 
			
			ПредставлениеДекларации = ПредставлениеДокументаРеглОтч(Декларация);
			ПредставлениеДекларации = Новый ФорматированнаяСтрока(ПредставлениеДекларации,,,, "Декларация");
			
		ИначеЕсли ТипЗнч(Декларация) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			ПредставлениеДекларации = Строка(Декларация);
			ПредставлениеДекларации = Новый ФорматированнаяСтрока(ПредставлениеДекларации,,,, "Декларация");
			
		КонецЕсли;
		
	Иначе
		ПредставлениеДекларации = НСтр("ru = 'Декларация не найдена'");
	КонецЕсли;
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(ПредставлениеДекларации);
	Подстроки.Добавить("   ");
	
	Если НЕ Форма.ПояснениеОтправлено Тогда
		Подстроки.Добавить(Новый ФорматированнаяСтрока("Выбрать из базы",,,, "Выбрать из базы"));
		Подстроки.Добавить("   ");
		Подстроки.Добавить(Новый ФорматированнаяСтрока("Выбрать файл",,,, "Выбрать файл"));
	КонецЕсли;
	
	Форма.ПредставлениеДекларации = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

 &НаСервереБезКонтекста
Функция ПредставлениеДокументаРеглОтч(Декларация)
	Возврат РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Декларация); 
КонецФункции

&НаСервере
Процедура УстановитьВидимостьТабличныхЧастей()
	
	ТабличныеЧасти = Новый Структура("КнигаПокупок, КнигаПокупокДл, КнигаПродаж, КнигаПродажДл, ЖурналУчетаВыставленныхСчетовФактур, ЖурналУчетаПолученныхСчетовФактур, ВыставленныеСчетаФактурыНеплательщиковНДС, СведКС, НетКнигаПрод");
	
	КоличествоЗаполненныхТабличныхЧастей = 0;
	Если ВТребованииЕстьXMLФайл ИЛИ ПояснениеОтправлено Тогда
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			КоличествоСтрок = Объект[ТабличнаяЧасть.Ключ].Количество();
			Элементы["Группа"+ТабличнаяЧасть.Ключ].Видимость = КоличествоСтрок > 0;
			Если КоличествоСтрок > 0 Тогда
				КоличествоЗаполненныхТабличныхЧастей = КоличествоЗаполненныхТабличныхЧастей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ГруппаВсеОтправлены.Видимость = ВТребованииЕстьXMLФайл И КоличествоЗаполненныхТабличныхЧастей = 0 И НЕ ПояснениеОтправлено;
	
	Если ПояснениеОтправлено Тогда
		Если ЗначениеЗаполнено(Объект.ПояснИнОсн) Тогда
			КоличествоЗаполненныхТабличныхЧастей = КоличествоЗаполненныхТабличныхЧастей + 1;
		КонецЕсли;
		Элементы.ГруппаПояснИнОсн.Видимость = ЗначениеЗаполнено(Объект.ПояснИнОсн);
	Иначе
		Элементы.ГруппаПояснИнОсн.Видимость = Истина;
		Если ДоступноРедактированиеДанныхФНС Тогда
			Элементы.ГруппаНетКнигаПрод.Видимость = Истина;
			Элементы.ГруппаСведКС.Видимость 	  = Истина;
			КоличествоЗаполненныхТабличныхЧастей = КоличествоЗаполненныхТабличныхЧастей + 3;
		Иначе
			КоличествоЗаполненныхТабличныхЧастей = КоличествоЗаполненныхТабличныхЧастей + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если (ВТребованииЕстьXMLФайл ИЛИ ПояснениеОтправлено) И КоличествоЗаполненныхТабличныхЧастей = 1 Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Элементы[ТабличнаяЧасть.Ключ].ИзменятьСоставСтрок = ДоступноРедактированиеДанныхФНС;
	КонецЦикла;
	
	УстановитьСвойстваКолонокТабличныхЧастей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКолонокТабличныхЧастей()
	
	#Область КнигаПокупок
	
	Элементы.КнигаПокупокНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПокупокОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПокупокРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокПродавецИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокСтоимость.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокСуммаНДС.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДатаПринятияНаУчетДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДокументОплатыНомер.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДокументОплатыДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокНомерТаможеннойДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокПосредникИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область КнигаПокупокДл
	
	Элементы.КнигаПокупокДлНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПокупокДлОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПокупокДлРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлПродавецИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлСтоимость.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлСуммаНДС.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлДатаПринятияНаУчетДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлДокументОплатыНомер.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлДокументОплатыДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлНомерТаможеннойДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПокупокДлПосредникИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	
	#КонецОбласти
	
	#Область КнигаПродаж
	
	Элементы.КнигаПродажНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПродажОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПродажРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажПокупательИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимость20.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСуммаНДС20.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимость18.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСуммаНДС18.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимость10.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСуммаНДС10.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимость0.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимостьОсвобождаемая.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажСтоимостьВсего.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДокументОплатыНомер.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДокументОплатыДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажПосредникИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область КнигаПродажДл
	
	Элементы.КнигаПродажДлНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПродажДлОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.КнигаПродажДлРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлПокупательИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимость20.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСуммаНДС20.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимость18.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСуммаНДС18.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимость10.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСуммаНДС10.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимость0.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимостьОсвобождаемая.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлСтоимостьВсего.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлДокументОплатыНомер.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлДокументОплатыДата.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.КнигаПродажДлПосредникИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область ЖурналУчетаВыставленныхСчетовФактур
	
	Элементы.ЖурналУчетаВыставленныхСчетовФактурНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.ЖурналУчетаВыставленныхСчетовФактурОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.ЖурналУчетаВыставленныхСчетовФактурРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаВыставленныхСчетовФактурПокупательИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаВыставленныхСчетовФактурПосредническаяДеятельностьПредставление.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаВыставленныхСчетовФактурКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область ЖурналУчетаПолученныхСчетовФактур
	
	Элементы.ЖурналУчетаПолученныхСчетовФактурНомерСтрокиДекларации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.ЖурналУчетаПолученныхСчетовФактурОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.ЖурналУчетаПолученныхСчетовФактурРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурПродавецИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурКодВидаСделки.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурКодВидаОперации.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурСтоимость.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурСуммаНДС.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУвеличение.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУвеличение.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурРазницаСтоимостиУменьшение.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ЖурналУчетаПолученныхСчетовФактурРазницаСуммыНДСУменьшение.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область ВыставленныеСчетаФактурыНеплательщиковНДС
	
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСОшибкаПредставление.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСНомерСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСДатаСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСКодВалюты.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИНН.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДССтоимостьБезНДС.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДССуммаНДС.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	Элементы.ВыставленныеСчетаФактурыНеплательщиковНДССтоимость.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	
	#КонецОбласти
	
	#Область НетКнигаПрод
	
	Если ДоступноРедактированиеДанныхФНС Тогда
		Элементы.НетКнигаПродНомерСчетаФактуры.ТолькоПросмотр = Ложь;
		Элементы.НетКнигаПродДатаСчетаФактуры.ТолькоПросмотр = Ложь;
		Элементы.НетКнигаПродПокупательИНН.ТолькоПросмотр = Ложь;
		Элементы.НетКнигаПродПокупательКПП.ТолькоПросмотр = Ложь;
		Элементы.НетКнигаПродНаименованиеКонтрагента.Видимость = Ложь;
	Иначе
		Элементы.НетКнигаПродНомерСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
		Элементы.НетКнигаПродДатаСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
		Элементы.НетКнигаПродНаименованиеКонтрагента.ТолькоПросмотр = НЕ ДоступноРедактированиеДанныхФНС;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СведКС
	Элементы.СведКСГруппаИнформация.Видимость = НЕ ДоступноРедактированиеДанныхФНС;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ТаблицаКонтрагентов   = КонтекстЭДОСервер.ТаблицаКонтрагентовПояснения(Объект);
	СведенияОКонтрагентах = КонтекстЭДОСервер.СведенияОКонтрагентахПояснения(Объект, ТаблицаКонтрагентов);
	
	СведенияОДокументахОплаты = Объект.ДокументыОплаты.Выгрузить();
	СведенияОДокументахОплаты.Индексы.Добавить("ИдентификаторЗначения");
	
	СведенияОДатахПринятияНаУчет = Объект.ДатыПринятияНаУчет.Выгрузить();
	СведенияОДатахПринятияНаУчет.Индексы.Добавить("ИдентификаторЗначения");
	
	СведенияОПосредническойДеятельности = Объект.ПосредническаяДеятельность.Выгрузить();
	СведенияОПосредническойДеятельности.Индексы.Добавить("ИдентификаторЗначения");
	
	Для каждого СтрокаТаблицы Из Объект.КнигаПокупок Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела8(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела8(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.КнигаПокупокДл Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела8(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела8(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.КнигаПродаж Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела9(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела9(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.КнигаПродажДл Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела9(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела9(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ЖурналУчетаВыставленныхСчетовФактур Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела10(СтрокаТаблицы, СведенияОПосредническойДеятельности, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела10(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ЖурналУчетаПолученныхСчетовФактур Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела11(СтрокаТаблицы, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела11(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ВыставленныеСчетаФактурыНеплательщиковНДС Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРаздела12(СтрокаТаблицы, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРаздела12(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.НетКнигаПрод Цикл
		ЗаполнитьДанныеРеквизитовСоСпискамиРазделаНетКнигаПрод(СтрокаТаблицы, ТаблицаКонтрагентов);
		ЗаполнитьДобавленныеКолонкиСтрокиРазделаНетКнигаПрод(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРаздела8(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов)
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "Продавец", РеквизитыКонтрагентов, СведенияОКонтрагентах);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ПродавецРасхождение", РеквизитыКонтрагентов, СведенияОКонтрагентах);
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДокументОплаты", РеквизитыДокументовОплаты, СведенияОДокументахОплаты);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДокументОплатыРасхождение", РеквизитыДокументовОплаты, СведенияОДокументахОплаты);
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДатаПринятияНаУчет", РеквизитыДатПринятияНаУчет, СведенияОДатахПринятияНаУчет);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДатаПринятияНаУчетРасхождение", РеквизитыДатПринятияНаУчет, СведенияОДатахПринятияНаУчет);
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение", ТаблицаКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРаздела9(СтрокаТаблицы, СведенияОКонтрагентах, СведенияОДокументахОплаты, СведенияОДатахПринятияНаУчет, ТаблицаКонтрагентов)
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "Покупатель", РеквизитыКонтрагентов, СведенияОКонтрагентах);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ПокупательРасхождение", РеквизитыКонтрагентов, СведенияОКонтрагентах);
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДокументОплаты", РеквизитыДокументовОплаты, СведенияОДокументахОплаты);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ДокументОплатыРасхождение", РеквизитыДокументовОплаты, СведенияОДокументахОплаты);
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение", ТаблицаКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРаздела10(СтрокаТаблицы, СведенияОПосредническойДеятельности, ТаблицаКонтрагентов)
	
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ПосредническаяДеятельность", РеквизитыПосредническойДеятельности, СведенияОПосредническойДеятельности);
	ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, "ПосредническаяДеятельностьРасхождение", РеквизитыПосредническойДеятельности, СведенияОПосредническойДеятельности);
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение", ТаблицаКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРаздела11(СтрокаТаблицы, ТаблицаКонтрагентов)
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПродавецИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПродавецИННРасхождение", ТаблицаКонтрагентов);
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "СубкомиссионерИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "СубкомиссионерИННРасхождение", ТаблицаКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРаздела12(СтрокаТаблицы, ТаблицаКонтрагентов)
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИНН", ТаблицаКонтрагентов);
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение", ТаблицаКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовСоСпискамиРазделаНетКнигаПрод(СтрокаТаблицы, ТаблицаКонтрагентов)
	
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИНН", ТаблицаКонтрагентов, "ПокупательКПП");
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение", ТаблицаКонтрагентов, "ПокупательКППРасхождение");
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИНН", ТаблицаКонтрагентов, "ПосредникКПП");
	УстановитьДанныеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение", ТаблицаКонтрагентов, "ПосредникКППРасхождение");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРаздела8(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	СтрокаТаблицы.ОшибкаПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеОшибкиРаздела8(СтрокаТаблицы.КодОшибки, СтрокаТаблицы.ГрафаОшибки);
	
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "");
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "Расхождение");
	
	УстановитьПредставлениеСпискаКонтрагентов(СтрокаТаблицы, "Продавец");
	УстановитьПредставлениеСпискаКонтрагентов(СтрокаТаблицы, "ПродавецРасхождение");
	
	УстановитьПредставлениеДокументовОплаты(СтрокаТаблицы, "ДокументОплаты");
	УстановитьПредставлениеДокументовОплаты(СтрокаТаблицы, "ДокументОплатыРасхождение");
	
	УстановитьПредставлениеДатыПринятияНаУчет(СтрокаТаблицы, "ДатаПринятияНаУчет");
	УстановитьПредставлениеДатыПринятияНаУчет(СтрокаТаблицы, "ДатаПринятияНаУчетРасхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение");
	
	УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРаздела9(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	СтрокаТаблицы.ОшибкаПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеОшибкиРаздела9(СтрокаТаблицы.КодОшибки, СтрокаТаблицы.ГрафаОшибки, ВерсияФоматаТребования);
	
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "");
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "Расхождение");
	
	УстановитьПредставлениеСпискаКонтрагентов(СтрокаТаблицы, "Покупатель");
	УстановитьПредставлениеСпискаКонтрагентов(СтрокаТаблицы, "ПокупательРасхождение");
	
	УстановитьПредставлениеДокументовОплаты(СтрокаТаблицы, "ДокументОплаты");
	УстановитьПредставлениеДокументовОплаты(СтрокаТаблицы, "ДокументОплатыРасхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение");
	
	УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРаздела10(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	СтрокаТаблицы.ОшибкаПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеОшибкиРаздела10(СтрокаТаблицы.КодОшибки, СтрокаТаблицы.ГрафаОшибки);
	
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "");
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "Расхождение");
	
	УстановитьПредставлениеПосредническойДеятельности(СтрокаТаблицы, "ПосредническаяДеятельность");
	УстановитьПредставлениеПосредническойДеятельности(СтрокаТаблицы, "ПосредническаяДеятельностьРасхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение");
	
	УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРаздела11(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	СтрокаТаблицы.ОшибкаПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеОшибкиРаздела11(СтрокаТаблицы.КодОшибки, СтрокаТаблицы.ГрафаОшибки);
	
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "");
	УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, "Расхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПродавецИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПродавецИННРасхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "СубкомиссионерИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "СубкомиссионерИННРасхождение");
	
	УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРаздела12(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	СтрокаТаблицы.ОшибкаПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеОшибкиРаздела12(СтрокаТаблицы.КодОшибки, СтрокаТаблицы.ГрафаОшибки);
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение");
	
	УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтрокиРазделаНетКнигаПрод(СтрокаТаблицы)
	
	УстановитьНадписи(СтрокаТаблицы);
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПокупательИННРасхождение");
	
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИНН");
	УстановитьПредставлениеКонтрагента(СтрокаТаблицы, "ПосредникИННРасхождение");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписи(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьРасхождение = "Уточненные данные:";
	СтрокаТаблицы.НадписьПоДаннымФНС = "По данным ФНС:";
	
КонецПроцедуры

&НаСервере
Процедура РезультатПроверкиПриИзмененииНаСервере(ИмяТабличнойЧасти, ВыбраннаяСтрока)
	
	ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеСтроки.РезультатПроверки = Перечисления.РезультатПроверкиСтрокиДекларации.СведенияВерны Тогда
		Если ИмяТабличнойЧасти = "КнигаПокупок"
			ИЛИ ИмяТабличнойЧасти = "КнигаПокупокДл" Тогда
			Документы.ПоясненияКДекларацииПоНДС.ЗаполнитьРасхожденияСтрокиРаздела8(ДанныеСтроки);
			ДанныеСтроки.ПродавецРасхождениеДанные = ДанныеСтроки.ПродавецДанные.Скопировать();
			ДанныеСтроки.ДокументОплатыРасхождениеДанные = ДанныеСтроки.ДокументОплатыДанные.Скопировать();
			ДанныеСтроки.ДатаПринятияНаУчетРасхождениеДанные = ДанныеСтроки.ДатаПринятияНаУчетДанные.Скопировать();
			ДанныеСтроки.ПосредникИННРасхождениеКонтрагенты  = ДанныеСтроки.ПосредникИННКонтрагенты.Скопировать();
			ЗаполнитьДобавленныеКолонкиСтрокиРаздела8(ДанныеСтроки);
		ИначеЕсли ИмяТабличнойЧасти = "КнигаПродаж"
			ИЛИ ИмяТабличнойЧасти = "КнигаПродажДл" Тогда
			Документы.ПоясненияКДекларацииПоНДС.ЗаполнитьРасхожденияСтрокиРаздела9(ДанныеСтроки);
			ДанныеСтроки.ПокупательРасхождениеДанные = ДанныеСтроки.ПокупательДанные.Скопировать();
			ДанныеСтроки.ДокументОплатыРасхождениеДанные = ДанныеСтроки.ДокументОплатыДанные.Скопировать();
			ДанныеСтроки.ПосредникИННРасхождениеКонтрагенты = ДанныеСтроки.ПосредникИННКонтрагенты.Скопировать();
			ЗаполнитьДобавленныеКолонкиСтрокиРаздела9(ДанныеСтроки);
		ИначеЕсли ИмяТабличнойЧасти = "ЖурналУчетаВыставленныхСчетовФактур" Тогда
			Документы.ПоясненияКДекларацииПоНДС.ЗаполнитьРасхожденияСтрокиРаздела10(ДанныеСтроки);
			ДанныеСтроки.ПосредническаяДеятельностьРасхождениеДанные = ДанныеСтроки.ПосредническаяДеятельностьДанные.Скопировать();
			ДанныеСтроки.ПокупательИННРасхождениеКонтрагенты = ДанныеСтроки.ПокупательИННКонтрагенты.Скопировать();
			ЗаполнитьДобавленныеКолонкиСтрокиРаздела10(ДанныеСтроки);
		ИначеЕсли ИмяТабличнойЧасти = "ЖурналУчетаПолученныхСчетовФактур" Тогда
			Документы.ПоясненияКДекларацииПоНДС.ЗаполнитьРасхожденияСтрокиРаздела11(ДанныеСтроки);
			ДанныеСтроки.ПродавецИННРасхождениеКонтрагенты = ДанныеСтроки.ПродавецИННКонтрагенты.Скопировать();
			ДанныеСтроки.СубкомиссионерИННРасхождениеКонтрагенты = ДанныеСтроки.СубкомиссионерИННКонтрагенты.Скопировать();
			ЗаполнитьДобавленныеКолонкиСтрокиРаздела11(ДанныеСтроки);
		ИначеЕсли ИмяТабличнойЧасти = "ВыставленныеСчетаФактурыНеплательщиковНДС" Тогда
			Документы.ПоясненияКДекларацииПоНДС.ЗаполнитьРасхожденияСтрокиРаздела12(ДанныеСтроки);
			ДанныеСтроки.ПокупательИННРасхождениеКонтрагенты = ДанныеСтроки.ПокупательИННКонтрагенты.Скопировать();
			ЗаполнитьДобавленныеКолонкиСтрокиРаздела12(ДанныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСчетаФактуры(СтрокаТаблицы, ТипРеквизитов)
	
	СтрокаТаблицы["РеквизитыСчетаФактуры"+ТипРеквизитов] = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПредставлениеСчетаФактурыПояснения(СтрокаТаблицы, ТипРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСпискаКонтрагентов(СтрокаТаблицы, ИмяРеквизита)
	
	СписокКонтрагентов = СтрокаТаблицы[ИмяРеквизита+"Данные"];
	
	Если СписокКонтрагентов.Количество() > 0 Тогда
		СтрокаТаблицы[ИмяРеквизита+"ИНН"] = СписокКонтрагентов[0].Значение.ИНН;
	Иначе
		СтрокаТаблицы[ИмяРеквизита+"ИНН"] = "";
	КонецЕсли;
	
	СтрокаТаблицы[ИмяРеквизита+"КоличествоСтрок"] = СписокКонтрагентов.Количество();
	
	СтрокаТаблицы[ИмяРеквизита+"Представление"]   = ПредставлениеПоСпискуСтрок(СписокКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеКонтрагента(СтрокаТаблицы, ПолеИНН, ТаблицаКонтрагентов, ПолеКПП = "")
	
	СведенияОКонтрагенте = Новый Структура("ИНН, КПП");
	СведенияОКонтрагенте.ИНН = СтрокаТаблицы[ПолеИНН];
	
	Если ЗначениеЗаполнено(ПолеКПП) Тогда
		
		СведенияОКонтрагенте.КПП = СтрокаТаблицы[ПолеКПП];
		
		Сведения = Документы.ПоясненияКДекларацииПоНДС.СведенияОКонтрагентеПоТаблицеКонтрагентов(
			СведенияОКонтрагенте.ИНН, 
			ТаблицаКонтрагентов, 
			СведенияОКонтрагенте.КПП);
		
		СтрокаТаблицы[ПолеИНН+"Контрагенты"] = Сведения.Контрагенты;
		
		Если СтрокаТаблицы.Свойство(ПолеКПП+"Контрагенты") Тогда
			СтрокаТаблицы[ПолеКПП+"Контрагенты"] = Сведения.Контрагенты;
		КонецЕсли;
			
	Иначе
			
		Сведения = Документы.ПоясненияКДекларацииПоНДС.СведенияОКонтрагентеПоТаблицеКонтрагентов(
			СведенияОКонтрагенте.ИНН, 
			ТаблицаКонтрагентов);
			
		СтрокаТаблицы[ПолеИНН+"Контрагенты"] = Сведения.Контрагенты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы)
	
	СтрокаТаблицы.ПериодОтраженияЗаписиПредставление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеПериодаОтраженияЗаписи(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеКонтрагента(СтрокаТаблицы, ПолеИНН)
	
	СписокКонтрагентов = СтрокаТаблицы[ПолеИНН+"Контрагенты"];
	
	МассивПредставлений = Новый Массив;
	Для Каждого СтрокаКонтрагента Из СписокКонтрагентов Цикл
		МассивПредставлений.Добавить(СтрокаКонтрагента.Представление);
	КонецЦикла;
	ПредставлениеКонтрагента = СтрСоединить(МассивПредставлений, ";");
	
	Сведения = Новый Структура("ИНН", СтрокаТаблицы[ПолеИНН]);
	
	СтрокаТаблицы[ПолеИНН+"Представление"] = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеКонтрагента(Сведения, ПредставлениеКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеДокументовОплаты(СтрокаТаблицы, ИмяРеквизита)
	
	СписокДокументовОплаты = СтрокаТаблицы[ИмяРеквизита+"Данные"];
	
	Если СписокДокументовОплаты.Количество() > 0 Тогда
		СтрокаТаблицы[ИмяРеквизита+"Номер"] = СписокДокументовОплаты[0].Значение.Номер;
		СтрокаТаблицы[ИмяРеквизита+"Дата"] = СписокДокументовОплаты[0].Значение.Дата;
	Иначе
		СтрокаТаблицы[ИмяРеквизита+"Номер"] = "";
		СтрокаТаблицы[ИмяРеквизита+"Дата"] = Дата(1,1,1);
	КонецЕсли;
	
	СтрокаТаблицы[ИмяРеквизита+"КоличествоСтрок"] = СписокДокументовОплаты.Количество();
	
	СтрокаТаблицы[ИмяРеквизита+"Представление"] = ПредставлениеПоСпискуСтрок(СписокДокументовОплаты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеДатыПринятияНаУчет(СтрокаТаблицы, ИмяРеквизита)
	
	СписокДатПринятияНаУчет = СтрокаТаблицы[ИмяРеквизита+"Данные"];
	
	Если СписокДатПринятияНаУчет.Количество() > 0 Тогда
		СтрокаТаблицы[ИмяРеквизита+"Дата"] = СписокДатПринятияНаУчет[0].Значение.ДатаПринятияНаУчет;
	Иначе
		СтрокаТаблицы[ИмяРеквизита+"Дата"] = Дата(1,1,1);
	КонецЕсли;
	
	СтрокаТаблицы[ИмяРеквизита+"КоличествоСтрок"] = СписокДатПринятияНаУчет.Количество();
	
	СтрокаТаблицы[ИмяРеквизита+"Представление"] = ПредставлениеПоСпискуСтрок(СписокДатПринятияНаУчет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПосредническойДеятельности(СтрокаТаблицы, ИмяРеквизита)
	
	СписокПосредническойДеятельности = СтрокаТаблицы[ИмяРеквизита+"Данные"];
	
	Если СписокПосредническойДеятельности.Количество() = 0 Тогда
		СтрокаТаблицы[ИмяРеквизита+"Представление"] = "";
	Иначе
		СтрокаТаблицы[ИмяРеквизита+"Представление"] = ЧислоПрописью(СписокПосредническойДеятельности.Количество(), , "операция, операции, операций, ж, , , , ж, 0"); 
	КонецЕсли;
	
	СтрокаТаблицы[ИмяРеквизита+"Хэш"] = ХэшСпискаЗначенийРеквизитов(СписокПосредническойДеятельности);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшСпискаЗначенийРеквизитов(СписокЗначенийРеквизитов)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	Для Каждого Строка Из СписокЗначенийРеквизитов Цикл
		ТекстовоеПредставление = "";
		Для Каждого Элемент Из Строка.Значение Цикл
			ТекстовоеПредставление = ТекстовоеПредставление + Строка(Элемент.Значение);
		КонецЦикла;
		ХешированиеДанных.Добавить(ТекстовоеПредставление);
	КонецЦикла;
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗначенийРеквизита(СтрокаТаблицы, ИмяРеквизита, СписокПолей, ТаблицаСпискаПолей);
	СтрокаТаблицы[ИмяРеквизита+"Данные"] = Новый СписокЗначений();
	МассивЗначенийПолей = ТаблицаСпискаПолей.НайтиСтроки(Новый Структура("ИдентификаторЗначения", СтрокаТаблицы[ИмяРеквизита]));
	Для Каждого ЗначенияПоля ИЗ МассивЗначенийПолей Цикл
		СтруктураДанных = Новый Структура(СписокПолей);
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ЗначенияПоля);
		Если ИмяРеквизита = "ДокументОплаты"
			ИЛИ ИмяРеквизита = "ДокументОплатыРасхождение" Тогда
			Представление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеДокументаОплаты(СтруктураДанных);
		ИначеЕсли ИмяРеквизита = "ДатаПринятияНаУчет"
			ИЛИ ИмяРеквизита = "ДатаПринятияНаУчетРасхождение" Тогда
			Представление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеДатыПринятияНаУчет(СтруктураДанных);
		ИначеЕсли ИмяРеквизита = "Продавец"
			ИЛИ ИмяРеквизита = "ПродавецРасхождение"
			ИЛИ ИмяРеквизита = "Покупатель"
			ИЛИ ИмяРеквизита = "ПокупательРасхождение" Тогда
			Представление = ЗначенияПоля.ПредставлениеКонтрагента;
			СтруктураДанных.Вставить("Контрагенты", ЗначенияПоля.Контрагенты);
		Иначе
			Представление = Неопределено;
		КонецЕсли;
		
		СтрокаТаблицы[ИмяРеквизита+"Данные"].Добавить(СтруктураДанных, Представление);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПоСпискуСтрок(СписокСтрок)
	
	Представление = "";
	Для Каждого Строка Из СписокСтрок Цикл
		Если ЗначениеЗаполнено(Представление) Тогда
			Представление = Представление + "; ";
		КонецЕсли;
		Представление = Представление + Строка.Представление;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРеквизитовСчетаФактуры(ИмяТабличнойЧасти, ДанныеСтроки, ТипРеквизитов)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("НомерСтрокиДокумента", 		ДанныеСтроки.НомерСтроки);
	ПараметрыФормы.Вставить("НомерСтрокиДекларации", 		ДанныеСтроки.НомерСтрокиДекларации);
	
	ПараметрыФормы.Вставить("ДатаСчетаФактуры", 			ДанныеСтроки["ДатаСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("НомерСчетаФактуры", 			ДанныеСтроки["НомерСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("НомерИсправленияСчетаФактуры",	ДанныеСтроки["НомерИсправленияСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("ДатаИсправленияСчетаФактуры",	ДанныеСтроки["ДатаИсправленияСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("НомерКорректировочногоСчетаФактуры",		ДанныеСтроки["НомерКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("ДатаКорректировочногоСчетаФактуры",		ДанныеСтроки["ДатаКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("НомерИсправленияКорректировочногоСчетаФактуры",	ДанныеСтроки["НомерИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	ПараметрыФормы.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры",		ДанныеСтроки["ДатаИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И ТипРеквизитов = "");
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ТипРеквизитов", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ТипРеквизитов);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыРеквизитовСчетаФактурыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаРеквизитыСчетаФактуры", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыРеквизитовСчетаФактурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	ТипРеквизитов = ДополнительныеПараметры.ТипРеквизитов;
	
	УстановитьРеквизитыСчетаФактуры(РезультатЗакрытия, ДанныеСтроки, ТипРеквизитов);
	
	УстановитьПредставлениеСчетаФактуры(ДанныеСтроки, ТипРеквизитов);
	
	Если ДоступноРедактированиеДанныхФНС
		И ТипРеквизитов = "" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаСчетаФактурыРасхождение)
			ИЛИ ДанныеСтроки.РезультатПроверки <> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			УстановитьРеквизитыСчетаФактуры(РезультатЗакрытия, ДанныеСтроки, "Расхождение");
			
			УстановитьПредставлениеСчетаФактуры(ДанныеСтроки, "Расхождение");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитыСчетаФактуры(РезультатЗакрытия, ДанныеСтроки, ТипРеквизитов)
	
	РезультатЗакрытия.Свойство("ДатаСчетаФактуры",				ДанныеСтроки["ДатаСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("НомерСчетаФактуры",				ДанныеСтроки["НомерСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("НомерИсправленияСчетаФактуры",	ДанныеСтроки["НомерИсправленияСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("ДатаИсправленияСчетаФактуры",	ДанныеСтроки["ДатаИсправленияСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("НомерКорректировочногоСчетаФактуры",	ДанныеСтроки["НомерКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("ДатаКорректировочногоСчетаФактуры",		ДанныеСтроки["ДатаКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("НомерИсправленияКорректировочногоСчетаФактуры",	ДанныеСтроки["НомерИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	РезультатЗакрытия.Свойство("ДатаИсправленияКорректировочногоСчетаФактуры",		ДанныеСтроки["ДатаИсправленияКорректировочногоСчетаФактуры"+ТипРеквизитов]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСчетаФактуры(ИмяТабличнойЧасти, ДанныеСтроки, ТипРеквизитов)
	
	Если ДоступноРедактированиеДанныхФНС Тогда
		ОткрытьФормуРеквизитовСчетаФактуры(ИмяТабличнойЧасти, ДанныеСтроки, ТипРеквизитов);
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "КнигаПокупок"
		ИЛИ ИмяТабличнойЧасти = "КнигаПокупокДл" Тогда
		
		ЭтоСчетФактураВыданный = Ложь;
		
		ДанныеПродавца = ДанныеСтроки.ПродавецДанные;
		Если ДанныеПродавца.Количество() > 0 Тогда
			ИННКонтрагента = ДанныеПродавца[0].Значение.ИНН;
		Иначе
			ИННКонтрагента = "";
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "КнигаПродаж"
		ИЛИ ИмяТабличнойЧасти = "КнигаПродажДл" Тогда
		
		ДанныеПродавца = ДанныеСтроки.ПокупательДанные;
		Если ДанныеПродавца.Количество() > 0 Тогда
			ИННКонтрагента = ДанныеПродавца[0].Значение.ИНН;
		Иначе
			ИННКонтрагента = "";
		КонецЕсли;
		
		ЭтоСчетФактураВыданный = Истина;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Организация", Объект.Организация);
	ПараметрыПоиска.Вставить("ИННКонтрагента", ИННКонтрагента);
	ПараметрыПоиска.Вставить("СчетФактураВыданный", ЭтоСчетФактураВыданный);
	ПараметрыПоиска.Вставить("НомерСчетаФактуры", ДанныеСтроки.НомерСчетаФактуры);
	ПараметрыПоиска.Вставить("ДатаСчетаФактуры", ДанныеСтроки.ДатаСчетаФактуры);
	ПараметрыПоиска.Вставить("НомерИсправленияСчетаФактуры", ДанныеСтроки.НомерИсправленияСчетаФактуры);
	ПараметрыПоиска.Вставить("ДатаИсправленияСчетаФактуры", ДанныеСтроки.ДатаИсправленияСчетаФактуры);
	ПараметрыПоиска.Вставить("НомерКорректировочногоСчетаФактуры", ДанныеСтроки.НомерКорректировочногоСчетаФактуры);
	ПараметрыПоиска.Вставить("ДатаКорректировочногоСчетаФактуры", ДанныеСтроки.ДатаКорректировочногоСчетаФактуры);
	ПараметрыПоиска.Вставить("НомерИсправленияКорректировочногоСчетаФактуры", ДанныеСтроки.НомерИсправленияКорректировочногоСчетаФактуры);
	ПараметрыПоиска.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры", ДанныеСтроки.ДатаИсправленияКорректировочногоСчетаФактуры);
	
	ПоискВыполнен = Ложь;
	НайденныйСчетФактура = НайтиСчетФактуруНаСервере(ПараметрыПоиска, ПоискВыполнен);
	Если ПоискВыполнен Тогда
		Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
			ПоказатьЗначение(, НайденныйСчетФактура);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Счет-фактура не найден'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КодыВидовОперацийПолученныхСчетовФактур(ЭтоЖурнал = Ложь)
	
	Возврат ДокументооборотСКОКлиент.КодыВидовОперацийПолученныхСчетовФактур(ЭтоЖурнал);
	
КонецФункции

&НаКлиенте
Функция КодыВидовОперацийВыданныхСчетовФактур(ЭтоЖурнал = Ложь, ЭтоНетКнигаПрод = Ложь)
	
	Возврат ДокументооборотСКОКлиент.КодыВидовОперацийВыданныхСчетовФактур(ЭтоЖурнал, ЭтоНетКнигаПрод);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСпискаКонтрагентов(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита, Заголовок)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокКонтрагентов = ДанныеСтроки[ИмяРеквизита+"Данные"];
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И Найти(ИмяРеквизита, "Расхождение")=0);
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Контрагенты",    СписокКонтрагентов);
	ПараметрыФормы.Вставить("ЗаголовокФормы", Заголовок);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыСпискаКонтрагентовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаСпискаКонтрагентов", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыСпискаКонтрагентовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита+"Данные"] = РезультатЗакрытия;
	
	УстановитьПредставлениеСпискаКонтрагентов(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	Если СтрНайти(ДополнительныеПараметры.ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ДополнительныеПараметры.ИмяРеквизита+"Расхождение";
		
		Если ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"].Количество() = 0
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
				
				ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"] = РезультатЗакрытия.Скопировать();
				
				УстановитьПредставлениеСпискаКонтрагентов(ДанныеСтроки, ИмяРеквизитаРасхождение);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалюты(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр
		ИЛИ (НЕ ДоступноРедактированиеДанныхФНС 
			И ДанныеСтроки.РезультатПроверки = ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.СведенияВерны")) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПолучитьВалютуПоКоду(ДанныеСтроки[ИмяРеквизита]));
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Валюты.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОповещениеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыВыбораВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита] = КодВалюты(РезультатЗакрытия);
	
	Если СтрНайти(ДополнительныеПараметры.ИмяРеквизита, "Расхождение") = 0 Тогда
		ИмяРеквизитаРасхождение = ДополнительныеПараметры.ИмяРеквизита + "Расхождение";
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаРасхождение])
			ИЛИ ДанныеСтроки.РезультатПроверки <> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			ДанныеСтроки[ИмяРеквизитаРасхождение] = ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПосредническойДеятельности(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПосредническойДеятельности = ДанныеСтроки[ИмяРеквизита+"Данные"];
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ПосредническаяДеятельность", СписокПосредническойДеятельности);
	ПараметрыФормы.Вставить("ЗаголовокФормы", Заголовок);
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И Найти(ИмяРеквизита, "Расхождение")=0);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыПосредническойДеятельностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаСпискаПосредническойДеятельности", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыПосредническойДеятельностиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита+"Данные"] = РезультатЗакрытия;
	
	УстановитьПредставлениеПосредническойДеятельности(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	СкопироватьСведенияОСкопироватьСведенияОПосредническойДеятельностиВРасхождение(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСведенияОСкопироватьСведенияОПосредническойДеятельностиВРасхождение(ДанныеСтроки, ИмяРеквизита)
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ИмяРеквизита+"Расхождение";
		
		Если ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"].Количество() = 0
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"] = ДанныеСтроки[ИмяРеквизита+"Данные"].Скопировать();
			
			УстановитьПредставлениеПосредническойДеятельности(ДанныеСтроки, ИмяРеквизитаРасхождение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуПоКоду(КодВалюты)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодВалюты", СокрЛП(КодВалюты));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция КодВалюты(Валюта)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДатыПринятияНаУчет(ИмяТабличнойЧасти, Строка, ИмяРеквизита)
	
	ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Строка);
	
	УстановитьСведенияОДатеПринятияНаУчет(ДанныеСтроки, ИмяРеквизита);
	
	СкопироватьСведенияОДатеПринятияНаУчетВРасхождение(ДанныеСтроки, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСведенияОДатеПринятияНаУчет(ДанныеСтроки, ИмяРеквизита)
	
	ИмяРеквизитаДанные = ИмяРеквизита + "Данные";
	ИмяРеквизитаДата   = ИмяРеквизита + "Дата";
	
	Если ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаДата]) Тогда
		
		Если ДанныеСтроки[ИмяРеквизитаДанные].Количество() = 0 Тогда
			СтруктураДанных = Новый Структура(РеквизитыДатПринятияНаУчет);
			ДанныеСтроки[ИмяРеквизитаДанные].Добавить(СтруктураДанных);
		КонецЕсли;
		
		ДанныеСтроки[ИмяРеквизитаДанные][0].Значение.ДатаПринятияНаУчет = ДанныеСтроки[ИмяРеквизитаДата];
		ДанныеСтроки[ИмяРеквизитаДанные][0].Представление = Формат(ДанныеСтроки[ИмяРеквизитаДата], "ДЛФ=D");
		УстановитьПредставлениеДатыПринятияНаУчет(ДанныеСтроки, ИмяРеквизита);
		
	Иначе
		ДанныеСтроки[ИмяРеквизитаДанные].Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСведенияОДатеПринятияНаУчетВРасхождение(ДанныеСтроки, ИмяРеквизита)
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ИмяРеквизита+"Расхождение";
		
		Если ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"].Количество() = 0
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"] = ДанныеСтроки[ИмяРеквизита+"Данные"].Скопировать();
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Дата"]   = ДанныеСтроки[ИмяРеквизита+"Дата"];
			
			УстановитьПредставлениеДатыПринятияНаУчет(ДанныеСтроки, ИмяРеквизитаРасхождение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументовОплаты(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументовОплаты = ДанныеСтроки[ИмяРеквизита+"Данные"];
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ДокументыОплаты", СписокДокументовОплаты);
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И Найти(ИмяРеквизита, "Расхождение")=0);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыДокументовОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаСпискаДокументовОплаты", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыДокументовОплатыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита+"Данные"] = РезультатЗакрытия;
	
	УстановитьПредставлениеДокументовОплаты(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	СкопироватьСведенияОДокументеОплатыВРасхождение(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТаможеннойДекларации(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТаможенныхДеклараций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеСтроки[ИмяРеквизита], ";");
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ТаможенныеДекларации", МассивТаможенныхДеклараций);
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И Найти(ИмяРеквизита, "Расхождение")=0);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыТаможеннойДекларацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаСпискаТаможенныхДеклараций", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыТаможеннойДекларацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита] = СтрСоединить(РезультатЗакрытия, ";");
	
	СкопироватьЗначениеВРасхождение(ДополнительныеПараметры.ИмяТабличнойЧасти, ДополнительныеПараметры.ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДатыПринятияНаУчет(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДатПринятияКУчету = ДанныеСтроки[ИмяРеквизита+"Данные"];
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ДатыПринятияНаУчет", СписокДатПринятияКУчету);
	
	ОткрытьФормуДляПросмотра = ТолькоПросмотр ИЛИ (НЕ ДоступноРедактированиеДанныхФНС И Найти(ИмяРеквизита, "Расхождение")=0);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрытьФормуДляПросмотра);
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти, ИдентификаторСтроки, ИмяРеквизита", 
					ИмяТабличнойЧасти, ДанныеСтроки.ПолучитьИдентификатор(), ИмяРеквизита);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыДатыПринятияНаУчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаСпискаДатПринятияНаУчет", ПараметрыФормы, ЭтаФорма,,,,ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыДатыПринятияНаУчетЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеСтроки[ДополнительныеПараметры.ИмяРеквизита+"Данные"] = РезультатЗакрытия;
	
	УстановитьПредставлениеДатыПринятияНаУчет(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	СкопироватьСведенияОДатеПринятияНаУчетВРасхождение(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита);
	
	Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументаОплатыНаСервере(ИмяТабличнойЧасти, Строка, ИмяРеквизита)
	
	ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Строка);
	
	УстановитьСведенияОДокументеОплаты(ДанныеСтроки, ИмяРеквизита);
	
	СкопироватьСведенияОДокументеОплатыВРасхождение(ДанныеСтроки, ИмяРеквизита)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСведенияОДокументеОплаты(ДанныеСтроки, ИмяРеквизита)
	
	ИмяРеквизитаНомер  = ИмяРеквизита + "Номер";
	ИмяРеквизитаДата   = ИмяРеквизита + "Дата";
	ИмяРеквизитаДанные = ИмяРеквизита + "Данные";
	
	Если ДанныеСтроки[ИмяРеквизитаДанные].Количество() = 0 Тогда
		СтруктураДанных = Новый Структура(РеквизитыДокументовОплаты);
		ДанныеСтроки[ИмяРеквизитаДанные].Добавить(СтруктураДанных);
	КонецЕсли;
	
	ДанныеСтроки[ИмяРеквизитаДанные][0].Значение.Номер = ДанныеСтроки[ИмяРеквизитаНомер];
	ДанныеСтроки[ИмяРеквизитаДанные][0].Значение.Дата = ДанныеСтроки[ИмяРеквизитаДата];
	ДанныеСтроки[ИмяРеквизитаДанные][0].Представление = Документы.ПоясненияКДекларацииПоНДС.ПредставлениеДокументаОплаты(ДанныеСтроки[ИмяРеквизитаДанные][0].Значение);
	
	УстановитьПредставлениеДокументовОплаты(ДанныеСтроки, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьСведенияОДокументеОплатыВРасхождение(ДанныеСтроки, ИмяРеквизита)
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ИмяРеквизита+"Расхождение";
		
		СведенияОДокументеОплатыНеЗаполнены = 
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"].Количество() = 0
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаРасхождение+"Дата"])
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаРасхождение+"Номер"]);
		
		Если СведенияОДокументеОплатыНеЗаполнены
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"] = ДанныеСтроки[ИмяРеквизита+"Данные"].Скопировать();
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Дата"]   = ДанныеСтроки[ИмяРеквизита+"Дата"];
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Номер"]  = ДанныеСтроки[ИмяРеквизита+"Номер"];
			
			УстановитьПредставлениеДокументовОплаты(ДанныеСтроки, ИмяРеквизитаРасхождение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИННКонтрагентаСпискаРеквизитов(ИмяТабличнойЧасти, Строка, ИмяРеквизита)
	
	ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Строка);
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки[ИмяРеквизита+"ИНН"]);
	
	УстановитьСведенияОКонтрагентеСписка(ДанныеСтроки, ИмяРеквизита, Сведения, РеквизитыКонтрагентов);
	
	СкопироватьСведенияОКонтрагентеСпискаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения, РеквизитыКонтрагентов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьСведенияОКонтрагентеСпискаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения, РеквизитыКонтрагентов)
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ИмяРеквизита+"Расхождение";
		
		Если ДанныеСтроки[ИмяРеквизитаРасхождение+"Данные"].Количество() = 0
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			УстановитьСведенияОКонтрагентеСписка(ДанныеСтроки, ИмяРеквизитаРасхождение, Сведения, РеквизитыКонтрагентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСведенияОКонтрагентеСписка(ДанныеСтроки, ИмяРеквизита, Сведения, РеквизитыКонтрагентов)
	
	Если СокрЛП(Сведения.ИНН) <> "" Тогда
		Если ДанныеСтроки[ИмяРеквизита+"Данные"].Количество() = 0 Тогда
			СтруктураДанных = Новый Структура(РеквизитыКонтрагентов);
			СтруктураДанных.Вставить("Контрагенты");
			ДанныеСтроки[ИмяРеквизита+"Данные"].Добавить(СтруктураДанных);
		КонецЕсли;
		
		ДанныеСтроки[ИмяРеквизита+"Данные"][0].Значение.ИНН = Сведения.ИНН;
		ДанныеСтроки[ИмяРеквизита+"Данные"][0].Значение.Контрагенты = Сведения.Контрагенты;
		ДанныеСтроки[ИмяРеквизита+"Данные"][0].Представление = Сведения.Представление;
	Иначе
		ДанныеСтроки[ИмяРеквизита+"Данные"].Очистить();
	КонецЕсли;
	
	УстановитьПредставлениеСпискаКонтрагентов(ДанныеСтроки, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизита, Сведения, КлючЗначения = "ИНН")
	
	ДанныеСтроки[ИмяРеквизита]                 = Сведения[КлючЗначения];
	ДанныеСтроки[ИмяРеквизита+"Представление"] = Сведения.Представление;
	ДанныеСтроки[ИмяРеквизита+"Контрагенты"]   = Сведения.Контрагенты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ИмяРеквизита, Сведения, КлючЗначения = "ИНН")
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
		
		ИмяРеквизитаРасхождение = ИмяРеквизита+"Расхождение";
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаРасхождение])
			ИЛИ ДанныеСтроки.РезультатПроверки 
				<> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
			
			ДанныеСтроки[ИмяРеквизитаРасхождение]                 = Сведения[КлючЗначения];
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Представление"] = Сведения.Представление;
			ДанныеСтроки[ИмяРеквизитаРасхождение+"Контрагенты"]   = Сведения.Контрагенты;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(ИмяТабличнойЧасти, ДанныеСтроки, ИмяРеквизита, ЭтоСписокКонтрагентов)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЭтоСписокКонтрагентов Тогда
		СписокКонтрагенты = ДанныеСтроки[ИмяРеквизита+"Данные"];
		Если СписокКонтрагенты.Количество()>0 Тогда
			Контрагенты = СписокКонтрагенты[0].Значение.Контрагенты;
			Если Контрагенты.Количество()>0 Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", Контрагенты[0].Значение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Контрагенты = ДанныеСтроки[ИмяРеквизита+"Контрагенты"];
		Если Контрагенты.Количество()>0 Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Контрагенты[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти",      ИмяТабличнойЧасти);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки",    ДанныеСтроки.ПолучитьИдентификатор());
	ДополнительныеПараметры.Вставить("ИмяРеквизита",           ИмяРеквизита);
	ДополнительныеПараметры.Вставить("ЭтоСписокКонтрагентов",  ЭтоСписокКонтрагентов);
	
	ОповещениеФормы = Новый ОписаниеОповещения("ВыбратьКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагентаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		ДанныеСтроки = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Сведения = СведенияОКонтрагентеПоСсылке(РезультатЗакрытия);
		
		Если ДополнительныеПараметры.ЭтоСписокКонтрагентов Тогда
			
			УстановитьСведенияОКонтрагентеСписка(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита, Сведения, РеквизитыКонтрагентов);
			
			СкопироватьСведенияОКонтрагентеСпискаВРасхождение(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита, Сведения, РеквизитыКонтрагентов);
			
		Иначе
			
			Если ДополнительныеПараметры.ИмяТабличнойЧасти = "НетКнигаПрод" Тогда
				
				ОтработатьВыборКонтрагентаВНетКнигаПрод(ДанныеСтроки, Сведения, ДополнительныеПараметры.ИмяРеквизита);
				
			Иначе
				
				УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита, Сведения);
				
				СкопироватьСведенияОКонтрагентеРеквизитаВРасхождение(ДанныеСтроки, ДополнительныеПараметры.ИмяРеквизита, Сведения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьВыборКонтрагентаВНетКнигаПрод(ДанныеСтроки, Сведения, ИмяРеквизита) Экспорт
	
	ИмяРеквизитаИНН = ИменаРеквизитов(ИмяРеквизита).ИмяРеквизитаИНН;
	ИмяРеквизитаКПП = ИменаРеквизитов(ИмяРеквизита).ИмяРеквизитаКПП;
	
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизитаИНН, Сведения, "ИНН");
	УстановитьСведенияОКонтрагентеРеквизита(ДанныеСтроки, ИмяРеквизитаКПП, Сведения, "КПП");
	
	НетКнигаПродУстановитьЗначениеРасхождения(ИмяРеквизитаИНН);
	НетКнигаПродУстановитьЗначениеРасхождения(ИмяРеквизитаКПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗначениеВРасхождение(ИмяТаблицы, ИмяРеквизита)
	
	Если СтрНайти(ИмяРеквизита, "Расхождение") = 0 Тогда
	
		ДанныеСтроки = Элементы[ИмяТаблицы].ТекущиеДанные;
		
		Если ДанныеСтроки <> Неопределено Тогда
			
			ИмяРеквизитаРасхождение = ИмяРеквизита + "Расхождение";
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизитаРасхождение])
				ИЛИ ДанныеСтроки.РезультатПроверки <> ПредопределенноеЗначение("Перечисление.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения") Тогда
				ДанныеСтроки[ИмяРеквизитаРасхождение] = ДанныеСтроки[ИмяРеквизита];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИменаРеквизитов(ИмяРеквизита)
	
	ИмяРеквизитаИНН = "";
	ИмяРеквизитаКПП = "";
	
	Если СтрНайти(ИмяРеквизита, "ИНН") > 0 Тогда
		ИмяРеквизитаИНН = ИмяРеквизита;
		ИмяРеквизитаКПП = СтрЗаменить(ИмяРеквизита, "ИНН", "КПП");
	Иначе
		ИмяРеквизитаИНН = СтрЗаменить(ИмяРеквизита, "КПП", "ИНН");
		ИмяРеквизитаКПП = ИмяРеквизита;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяРеквизитаИНН", ИмяРеквизитаИНН);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКПП", ИмяРеквизитаКПП);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСведенияВТаблицу(ДанныеСтроки, ИмяРеквизита, ТаблицаХранения)
	
	Документы.ПоясненияКДекларацииПоНДС.ЗаписатьМассивРеквизитовВТаблицуХранения(
			ДанныеСтроки[ИмяРеквизита+"Данные"].ВыгрузитьЗначения(), ТаблицаХранения, ДанныеСтроки[ИмяРеквизита]);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОКонтрагентеПоСсылке(Контрагент)
	
	Возврат Документы.ПоясненияКДекларацииПоНДС.СведенияОКонтрагентеПоСсылке(Контрагент);
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОКонтрагентеПоИНН(ИНН, КПП = "")
	
	Возврат Документы.ПоясненияКДекларацииПоНДС.СведенияОКонтрагентеПоИНН(ИНН, КПП);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСчетФактуруНаСервере(ПараметрыПоиска, ПоискВыполнен)
	
	НайденныйСчетФактура = Неопределено;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.НайтиСчетФактуруПоРеквизитам(ПараметрыПоиска, ПоискВыполнен, НайденныйСчетФактура);
	
	Возврат НайденныйСчетФактура;
	
КонецФункции

&НаСервере
Процедура УстановитьВозможностьВыбораКонтрагентов()
	
	КонтрагентыДоступны = ЭлектронныйДокументооборотСКонтролирующимиОрганами.СправочникКонтрагентовДоступен();
	
	Если НЕ КонтрагентыДоступны Тогда
		Элементы.КнигаПокупокПродавецИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.КнигаПокупокПосредникИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.КнигаПокупокДлПродавецИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.КнигаПокупокДлПосредникИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.КнигаПродажПокупательРасхождениеИНН.КнопкаВыбора = Ложь;
		Элементы.КнигаПродажПосредникИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.КнигаПродажДлПокупательРасхождениеИНН.КнопкаВыбора = Ложь;
		Элементы.КнигаПродажДлПосредникИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.ЖурналУчетаВыставленныхСчетовФактурПокупательИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.ЖурналУчетаПолученныхСчетовФактурПродавецИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.ЖурналУчетаПолученныхСчетовФактурСубкомиссионерИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.ВыставленныеСчетаФактурыНеплательщиковНДСПокупательИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.НетКнигаПродПокупательИНН.КнопкаВыбора = Ложь;
		Элементы.НетКнигаПродПокупательИННРасхождение.КнопкаВыбора = Ложь;
		Элементы.НетКнигаПродПосредникИНН.КнопкаВыбора = Ложь;
		Элементы.НетКнигаПродПосредникИННРасхождение.КнопкаВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимаУточненнаяДекларация(Объект)
	Возврат Объект.КнигаПокупок.Итог("СуммаНДСРасхождение") <> Объект.КнигаПокупок.Итог("СуммаНДС")
		ИЛИ Объект.КнигаПокупокДл.Итог("СуммаНДСРасхождение") <> Объект.КнигаПокупокДл.Итог("СуммаНДС")
		ИЛИ Объект.КнигаПродаж.Итог("СуммаНДС20Расхождение") <> Объект.КнигаПродаж.Итог("СуммаНДС20")
		ИЛИ Объект.КнигаПродаж.Итог("СуммаНДС18Расхождение") <> Объект.КнигаПродаж.Итог("СуммаНДС18")
		ИЛИ Объект.КнигаПродаж.Итог("СуммаНДС10Расхождение") <> Объект.КнигаПродаж.Итог("СуммаНДС10")
		ИЛИ Объект.КнигаПродажДл.Итог("СуммаНДС20Расхождение") <> Объект.КнигаПродажДл.Итог("СуммаНДС20")
		ИЛИ Объект.КнигаПродажДл.Итог("СуммаНДС18Расхождение") <> Объект.КнигаПродажДл.Итог("СуммаНДС18")
		ИЛИ Объект.КнигаПродажДл.Итог("СуммаНДС10Расхождение") <> Объект.КнигаПродажДл.Итог("СуммаНДС10")
		ИЛИ Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.Итог("СуммаНДСРасхождение") <> Объект.ВыставленныеСчетаФактурыНеплательщиковНДС.Итог("СуммаНДС");
КонецФункции

Функция ПерезаполнитьПоТребованиюНаСервере()
	
	ПояснениеОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТабличнаяЧасть ИЗ Метаданные.Документы.ПоясненияКДекларацииПоНДС.ТабличныеЧасти Цикл
		ПояснениеОбъект[ТабличнаяЧасть.Имя].Очистить();
	КонецЦикла;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ОснованиеСсылка", ПояснениеОбъект.Требование);
	ДанныеЗаполнения.Вставить("ЗаполнитьБезУчетаОтправленныхСтрок", Истина);
	
	ПояснениеОбъект.Заполнить(ДанныеЗаполнения);
	
	ЗначениеВРеквизитФормы(ПояснениеОбъект, "Объект");
	
	ПодготовитьФормуНаСервере();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийВыставленныхСчетовФактурНеплательщиковНДС()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "НомерСчетаФактуры");
	СвойстваПолей.Вставить("ПолеРасхождение", "НомерСчетаФактурыРасхождение");
	СвойстваПолей.Вставить("Элементы",        "НомерСчетаФактурыРасхождение");
	СвойстваПолей.Вставить("Обязательное",    Истина);
	СвойстваПолей.Вставить("ОписаниеПоля",    НСтр("ru = 'Номер'"));
	
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "ДатаСчетаФактуры");
	СвойстваПолей.Вставить("ПолеРасхождение", "ДатаСчетаФактурыРасхождение");
	СвойстваПолей.Вставить("Элементы",        "ДатаСчетаФактурыРасхождение");
	СвойстваПолей.Вставить("Обязательное",    Истина);
	СвойстваПолей.Вставить("ОписаниеПоля",    НСтр("ru = 'Дата'"));
	
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "КодВалюты");
	СвойстваПолей.Вставить("ПолеРасхождение", "КодВалютыРасхождение");
	СвойстваПолей.Вставить("Элементы",        "КодВалютыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "ПокупательИНН");
	СвойстваПолей.Вставить("ПолеРасхождение", "ПокупательИННРасхождение");
	СвойстваПолей.Вставить("Элементы",        "ПокупательИННРасхождение");
		
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "СтоимостьБезНДС");
	СвойстваПолей.Вставить("ПолеРасхождение", "СтоимостьБезНДСРасхождение");
	СвойстваПолей.Вставить("Элементы",        "СтоимостьБезНДСРасхождение");
		
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "СуммаНДС");
	СвойстваПолей.Вставить("ПолеРасхождение", "СуммаНДСРасхождение");
	СвойстваПолей.Вставить("Элементы",        "СуммаНДСРасхождение");
	СвойстваПолей.Вставить("Важно",           Истина);
		
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	СвойстваПолей = Новый Структура();
	СвойстваПолей.Вставить("Поле",            "Стоимость");
	СвойстваПолей.Вставить("ПолеРасхождение", "СтоимостьРасхождение");
	СвойстваПолей.Вставить("Элементы",        "СтоимостьРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(СвойстваПолей);
	
	Возврат ПоляПроверкиРасхождений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийЖурналаУчетаВыставленныхСчетовФактур()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РеквизитыСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Номер и дата с/ф.'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПокупательИННПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПокупательИННРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПокупательИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПосредническаяДеятельностьХэш");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПосредническаяДеятельностьРасхождениеХэш");
	ПоляПроверки.Вставить("Элементы",        "ПосредническаяДеятельностьРасхождениеПредставление");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаОперации");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Вид операции'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	Возврат ПоляПроверкиРасхождений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийЖурналаУчетаПолученныхСчетовФактур()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РеквизитыСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Номер и дата с/ф.'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаСделки");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаСделкиРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаСделкиРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВалюты");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВалютыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВалютыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПродавецИННПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПродавецИННРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПродавецИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СубкомиссионерИННПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "СубкомиссионерИННРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "СубкомиссионерИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СуммаНДС");
	ПоляПроверки.Вставить("ПолеРасхождение", "СуммаНДСРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СуммаНДСРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РазницаСтоимостиУвеличение");
	ПоляПроверки.Вставить("ПолеРасхождение", "РазницаСтоимостиУвеличениеРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РазницаСтоимостиУвеличениеРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РазницаСуммыНДСУвеличение");
	ПоляПроверки.Вставить("ПолеРасхождение", "РазницаСуммыНДСУвеличениеРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РазницаСуммыНДСУвеличениеРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РазницаСтоимостиУменьшение");
	ПоляПроверки.Вставить("ПолеРасхождение", "РазницаСтоимостиУменьшениеРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РазницаСтоимостиУменьшениеРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РазницаСуммыНДСУменьшение");
	ПоляПроверки.Вставить("ПолеРасхождение", "РазницаСуммыНДСУменьшениеРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РазницаСуммыНДСУменьшениеРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаОперации");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Вид операции'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	Возврат ПоляПроверкиРасхождений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийКнигиПокупок()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РеквизитыСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Номер и дата с/ф.'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаОперации");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Вид операции'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПродавецПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПродавецРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПродавецИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВалюты");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВалютыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВалютыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СуммаНДС");
	ПоляПроверки.Вставить("ПолеРасхождение", "СуммаНДСРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СуммаНДСРасхождение");
	ПоляПроверки.Вставить("Важно",           Истина);
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ДатаПринятияНаУчетПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ДатаПринятияНаУчетРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ДатаПринятияНаУчетРасхождениеДата");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ДокументОплатыПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ДокументОплатыРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ДокументОплатыРасхождениеНомер");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "НомерТаможеннойДекларации");
	ПоляПроверки.Вставить("ПолеРасхождение", "НомерТаможеннойДекларацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "НомерТаможеннойДекларацииРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПосредникИНН");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПосредникИННРасхождение");
	ПоляПроверки.Вставить("Элементы",        "ПосредникИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	Возврат ПоляПроверкиРасхождений;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийКнигиПродаж()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "РеквизитыСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РеквизитыСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Номер и дата с/ф.'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаОперации");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Обязательное",    Истина);
	ПоляПроверки.Вставить("ОписаниеПоля",    НСтр("ru = 'Вид операции'"));
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПокупательПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПокупательРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПокупательРасхождениеИНН");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВалюты");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВалютыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВалютыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость20");
	ПоляПроверки.Вставить("ПолеРасхождение", "Стоимость20Расхождение");
	ПоляПроверки.Вставить("Элементы",        "Стоимость20Расхождение");	
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость18");
	ПоляПроверки.Вставить("ПолеРасхождение", "Стоимость18Расхождение");
	ПоляПроверки.Вставить("Элементы",        "Стоимость18Расхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость10");
	ПоляПроверки.Вставить("ПолеРасхождение", "Стоимость10Расхождение");
	ПоляПроверки.Вставить("Элементы",        "Стоимость10Расхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Стоимость0");
	ПоляПроверки.Вставить("ПолеРасхождение", "Стоимость0Расхождение");
	ПоляПроверки.Вставить("Элементы",        "Стоимость0Расхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СтоимостьОсвобождаемая");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьОсвобождаемаяРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьОсвобождаемаяРасхождение");
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СтоимостьВсего");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьВсегоРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьВсегоРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СуммаНДС20");
	ПоляПроверки.Вставить("ПолеРасхождение", "СуммаНДС20Расхождение");
	ПоляПроверки.Вставить("Элементы",        "СуммаНДС20Расхождение");
	ПоляПроверки.Вставить("Важно",           Истина);
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СуммаНДС18");
	ПоляПроверки.Вставить("ПолеРасхождение", "СуммаНДС18Расхождение");
	ПоляПроверки.Вставить("Элементы",        "СуммаНДС18Расхождение");
	ПоляПроверки.Вставить("Важно",           Истина);
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СуммаНДС10");
	ПоляПроверки.Вставить("ПолеРасхождение", "СуммаНДС10Расхождение");
	ПоляПроверки.Вставить("Элементы",        "СуммаНДС10Расхождение");
	ПоляПроверки.Вставить("Важно",           Истина);
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ДокументОплатыПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ДокументОплатыРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ДокументОплатыРасхождениеНомер");
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПосредникИНН");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПосредникИННРасхождение");
	ПоляПроверки.Вставить("Элементы",        "ПосредникИННРасхождение");
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	Возврат ПоляПроверкиРасхождений;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПроверкиРасхожденийНетКнигаПрод()
	
	ПоляПроверкиРасхождений = Новый Массив();
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ДатаСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "ДатаСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "ДатаСчетаФактурыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "НомерСчетаФактуры");
	ПоляПроверки.Вставить("ПолеРасхождение", "НомерСчетаФактурыРасхождение");
	ПоляПроверки.Вставить("Элементы",        "НомерСчетаФактурыРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "Раздел");
	ПоляПроверки.Вставить("ПолеРасхождение", "РазделРасхождение");
	ПоляПроверки.Вставить("Элементы",        "РазделРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);	
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "КодВидаОперации");
	ПоляПроверки.Вставить("ПолеРасхождение", "КодВидаОперацииРасхождение");
	ПоляПроверки.Вставить("Элементы",        "КодВидаОперацииРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПокупательИННПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПокупательИННРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПокупательИННРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПокупательКПП");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПокупательКППРасхождение");
	ПоляПроверки.Вставить("Элементы",        "ПокупательКППРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);	
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СтоимостьВсего");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьВсегоРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьВсегоРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "СтоимостьРубВсего");
	ПоляПроверки.Вставить("ПолеРасхождение", "СтоимостьРубВсегоРасхождение");
	ПоляПроверки.Вставить("Элементы",        "СтоимостьРубВсегоРасхождение");
	
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПосредникИННПредставление");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПосредникИННРасхождениеПредставление");
	ПоляПроверки.Вставить("Элементы",        "ПосредникИННРасхождение");
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	ПоляПроверки = Новый Структура();
	ПоляПроверки.Вставить("Поле",            "ПосредникКПП");
	ПоляПроверки.Вставить("ПолеРасхождение", "ПосредникКППРасхождение");
	ПоляПроверки.Вставить("Элементы",        "ПосредникКППРасхождение");
	 
	ПоляПроверкиРасхождений.Добавить(ПоляПроверки);
	
	Возврат ПоляПроверкиРасхождений;
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеТабличныхЧастейПередОтправкой(Отказ)
	
	Если Объект.КнигаПокупок.Количество() = 0
		И Объект.КнигаПокупокДл.Количество() = 0
		И Объект.КнигаПродаж.Количество() = 0
		И Объект.КнигаПродажДл.Количество() = 0
		И Объект.ЖурналУчетаВыставленныхСчетовФактур.Количество() = 0
		И Объект.ЖурналУчетаПолученныхСчетовФактур.Количество() = 0
		И Объект.СведКС.Количество() = 0
		И Объект.НетКнигаПрод.Количество() = 0
		И НЕ ЗначениеЗаполнено(Объект.ПояснИнОсн) Тогда
		
		ТекстСообщения = НСтр("ru = 'Пояснение не заполнено. Отправка невозможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		
	КонецЕсли;
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПокупок();
	ПроверитьСтрокиТабличнойЧасти("КнигаПокупок", "Раздела 8", ПоляДляПроверкиРасхождений, Отказ);
	ПроверитьСтрокиТабличнойЧасти("КнигаПокупокДл", "Раздела 8.1", ПоляДляПроверкиРасхождений, Отказ);
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийКнигиПродаж();
	ПроверитьСтрокиТабличнойЧасти("КнигаПродаж", "Раздела 9", ПоляДляПроверкиРасхождений, Отказ);
	ПроверитьСтрокиТабличнойЧасти("КнигаПродажДл", "Раздела 9.1", ПоляДляПроверкиРасхождений, Отказ);
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийЖурналаУчетаВыставленныхСчетовФактур();
	ПроверитьСтрокиТабличнойЧасти("ЖурналУчетаВыставленныхСчетовФактур", "Раздела 10", ПоляДляПроверкиРасхождений, Отказ);
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийЖурналаУчетаПолученныхСчетовФактур();
	ПроверитьСтрокиТабличнойЧасти("ЖурналУчетаПолученныхСчетовФактур", "Раздела 11", ПоляДляПроверкиРасхождений, Отказ);
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийВыставленныхСчетовФактурНеплательщиковНДС();
	ПроверитьСтрокиТабличнойЧасти("ВыставленныеСчетаФактурыНеплательщиковНДС", "Раздела 12", ПоляДляПроверкиРасхождений, Отказ);
	
	ПоляДляПроверкиРасхождений = ПоляПроверкиРасхожденийНетКнигаПрод();
	ПроверитьСтрокиТабличнойЧасти("НетКнигаПрод", "раздела ""Нет в книге продаж""", ПоляДляПроверкиРасхождений, Отказ);
	
	Если Объект.НетКнигаПрод.Количество() > 0 Тогда
		 ПроверитьНетКнигаПрод(Отказ);
	КонецЕсли;
	
	Если Объект.СведКС.Количество() > 0 Тогда
		ПроверитьКонтрольныеСоотношения(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНетКнигаПрод(Отказ)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НетКнигаПрод Цикл
		
		Если ДоступноРедактированиеДанныхФНС Тогда
			ПроверитьИНН(СтрокаТабличнойЧасти, "ПокупательИНН", НСтр("ru = 'ИНН покупателя (по данным ФНС)'"), Отказ);
			ПроверитьКПП(СтрокаТабличнойЧасти, "ПокупательКПП", НСтр("ru = 'КПП покупателя (по данным ФНС)'"), Отказ);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.РезультатПроверки = Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения Тогда
			
			ПроверитьИНН(СтрокаТабличнойЧасти, "ПокупательИННРасхождение", НСтр("ru = 'ИНН покупателя (уточненные данные)'"), Отказ);
			ПроверитьКПП(СтрокаТабличнойЧасти, "ПокупательКППРасхождение", НСтр("ru = 'КПП покупателя (уточненные данные)'"), Отказ);
			
			Если ДоступноРедактированиеДанныхФНС Тогда
				ПроверитьИНН(СтрокаТабличнойЧасти, "ПосредникИНН", НСтр("ru = 'ИНН посредника (по данным ФНС)'"), Отказ);
				ПроверитьКПП(СтрокаТабличнойЧасти, "ПосредникКПП", НСтр("ru = 'КПП посредника (по данным ФНС)'"), Отказ);
			КонецЕсли;
			
			ПроверитьИНН(СтрокаТабличнойЧасти, "ПосредникИННРасхождение", НСтр("ru = 'ИНН посредника (уточненные данные)'"), Отказ);
			ПроверитьКПП(СтрокаТабличнойЧасти, "ПосредникКППРасхождение", НСтр("ru = 'КПП посредника (уточненные данные)'"), Отказ);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИНН(СтрокаТабличнойЧасти, ИмяПоля, НаименованиеПоля, Отказ)
	
	ИНН = СтрокаТабличнойЧасти[ИмяПоля];
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		ЭтоЮридическоеЛицо = СтрДлина(ИНН) <> 12;
		
		ТекстОшибки = "";
		ЕстьОшибка = НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮридическоеЛицо, ТекстОшибки);
		
		Если ЕстьОшибка Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Нет в книге продаж"" %2 заполнен некорректно:'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки, НаименованиеПоля);
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		
			КлючДанных = "НетКнигаПрод[%1]." + ИмяПоля;
			КлючДанных = СтрШаблон(КлючДанных, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКПП(СтрокаТабличнойЧасти, ИмяПоляКПП, НаименованиеПоляКПП, Отказ)
	
	ИмяПоляИНН = ИменаРеквизитов(ИмяПоляКПП).ИмяРеквизитаИНН;
	
	ИНН = СтрокаТабличнойЧасти[ИмяПоляИНН];
	КПП = СтрокаТабличнойЧасти[ИмяПоляКПП];
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		ЭтоЮридическоеЛицо = СтрДлина(ИНН) <> 12;
		
		Если НЕ ЭтоЮридическоеЛицо И ЗначениеЗаполнено(КПП) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Нет в книге продаж"" обнаружена ошибка: у ИП не может быть заполнен КПП'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки);
			
			КлючДанных = "НетКнигаПрод[%1]." + ИмяПоляКПП;
			КлючДанных = СтрШаблон(КлючДанных, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КПП) Тогда
		
		ТекстОшибки = "";
		ЕстьОшибка = НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстОшибки);
		
		Если ЕстьОшибка Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Нет в книге продаж"" %2 заполнено некорректно:'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки, НаименованиеПоляКПП);
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		
			КлючДанных = "НетКнигаПрод[%1]." + ИмяПоляКПП;
			КлючДанных = СтрШаблон(КлючДанных, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтрокиТабличнойЧасти(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, ПоляДляПроверкиРасхождений, Отказ)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если ДоступноРедактированиеДанныхФНС Тогда
			
			// Проверяем, что все поля со стороны ФНС, которые нужно заполнить, заполнены.
			
			Если СтрокаТабличнойЧасти.Свойство("НомерСтрокиДекларации")
				И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСтрокиДекларации) Тогда
					СообщитьОНезаполненномПоле(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки,
						"НомерСтрокиДекларации", НСтр("ru = 'Строка'"), Отказ);
			КонецЕсли;
			
			Для Каждого Поле Из ПоляДляПроверкиРасхождений Цикл
				Если Поле.Свойство("Обязательное")
					И Поле.Обязательное 
					И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[Поле.Поле]) Тогда
					
					СообщитьОНезаполненномПоле(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки,
						Поле.Поле, Поле.ОписаниеПоля, Отказ);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.РезультатПроверки = Перечисления.РезультатПроверкиСтрокиДекларации.ВыявленыРасхождения Тогда
			
			РасхожденийНеНайдено = Истина;
			Для Каждого Поле Из ПоляДляПроверкиРасхождений Цикл
				Если СтрокаТабличнойЧасти[Поле.Поле] <> СтрокаТабличнойЧасти[Поле.ПолеРасхождение] Тогда
					РасхожденийНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РасхожденийНеНайдено Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 %2 указан ответ ""Найдены расхождения"", но уточненные сведения соответствуют данным ФНС'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				КлючДанных = ИмяТабличнойЧасти + "[%1].РезультатПроверки";
				КлючДанных = СтрШаблон(КлючДанных, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОНезаполненномПоле(ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти, НомерСтроки, Поле, ОписаниеПоля, Отказ)
	
	ТекстСообщения = НСтр("ru = 'В строке %1 %2 не заполнено обязательное поле ""%3""'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		НомерСтроки, ПредставлениеТабличнойЧасти, ОписаниеПоля);
	
	КлючДанных = ИмяТабличнойЧасти + "[%1].%2";
	КлючДанных = СтрШаблон(КлючДанных, Формат(НомерСтроки - 1, "ЧГ=0"), Поле);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрольныеСоотношения(Отказ)
	
	Если ДоступноРедактированиеДанныхФНС Тогда
	
		ЗаменяемыеСимволы 	= "0123456789";
		СимволыЗамены 		= "XXXXXXXXXX";
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.СведКС Цикл 
			
			НомерКС 	= СтрокаТабличнойЧасти.НомКС;
			ПоясненКС 	= СтрокаТабличнойЧасти.ПоясненКС;
			
			НомерКСПослеЗамены = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				ЗаменяемыеСимволы, 
				НомерКС, 
				СимволыЗамены);
				
			ЕстьОшибка = Ложь;
			
			Если НЕ ЗначениеЗаполнено(НомерКС) Тогда
				
				ЕстьОшибка = Истина;
				
				ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Контрольные соотношения"" не заполнен номер контрольного соотношения'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки);
				
				КлючДанных = "СведКС[%1].НомКС";
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ПоясненКС) Тогда
				
				ЕстьОшибка = Истина;
				
				ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Контрольные соотношения"" не заполнено пояснение расхождений'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки);
				
				КлючДанных = "СведКС[%1].ПоясненКС";
				
			ИначеЕсли НомерКСПослеЗамены <> "X.X" 
				И НомерКСПослеЗамены <> "X.XX"
				И НомерКСПослеЗамены <> "X.X.X"
				И НомерКСПослеЗамены <> "X.XX.X" Тогда
				
				ЕстьОшибка = Истина;
				
				ТекстСообщения = НСтр("ru = 'В строке %1 раздела ""Контрольные соотношения"" номер контрольного соотношения
					|не соответствует ни одному из шаблонов X.X, X.XX, X.X.X, X.XX.X'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки);
				
				КлючДанных = "СведКС[%1].НомКС";
				
			КонецЕсли;
			
			Если ЕстьОшибка Тогда
				
				КлючДанных = СтрШаблон(КлючДанных, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=0"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , КлючДанных, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИдДекларации(АдресДанных, ВыбранноеИмяФайла)
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваФайла 	= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);

	Если КонтекстЭДОСервер.ЭтоФайлВыгрузкиДекларацияНДС(СвойстваФайла.Имя) Тогда
		
		Если НРег(СвойстваФайла.Расширение) = НРег(".xml") Тогда
			
			Если НЕ ЭтоАдресВременногоХранилища(АдресДанных) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось открыть файл");
				Возврат Неопределено;
			КонецЕсли;
			
			ПолноеИмяФайла = КаталогВременныхФайлов() + СвойстваФайла.Имя;
			ПолучитьИзВременногоХранилища(АдресДанных).Записать(ПолноеИмяФайла);
			
			// считываем показатели файла
			ОбъектЧтениеXML = Новый ЧтениеXML;
			Попытка
				ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
				ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
				ПоказателиВыгрузки = Новый Соответствие;
				Пока ОбъектЧтениеXML.Прочитать() Цикл
					Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
						Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
							Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
								ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				ОбъектЧтениеXML.Закрыть();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1"" не является файлом выгрузки декларации по НДС в формате XML.'"), СвойстваФайла.Имя);
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
			
			// определение вида отчета
			КНД = ПоказателиВыгрузки["КНД"];
			Если КНД = Неопределено ИЛИ КНД = "" ИЛИ КНД <> "1151001" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный файл не является файлом декларации по НДС'"));
				Возврат Неопределено;
			КонецЕсли;
			
			Если НЕ ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
				
				// определение организации
				Если ПоказателиВыгрузки["ИННФЛ"] <> Неопределено Тогда
					ИНН = ПоказателиВыгрузки["ИННФЛ"];
					КПП = "";
				Иначе
					ИНН = ?(ПоказателиВыгрузки["ИННЮЛ"] = Неопределено, "", ПоказателиВыгрузки["ИННЮЛ"]);
					КПП = ?(ПоказателиВыгрузки["КПП"] = Неопределено, "", ПоказателиВыгрузки["КПП"]);
				КонецЕсли;
				
				ОрганизацияВФайле = КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
				Если ОрганизацияВФайле <> Объект.Организация Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация в выбранном файле декларации по НДС не совпадает с организацией, указанной в требовании'"));
					Возврат Неопределено;
				КонецЕсли;
				
				// Если в требовании нет XML-файла, то мы не можем определить и проверить НомКорр, Период и ОтчетГод.
				Если ВТребованииЕстьXMLФайл Тогда
					СвойстваДекларации = КонтекстЭДОСервер.СвойстваДекларацииИзФайлаТребованияОПредставленииПоясненийКДекларацииНДС(Объект.Требование);
					
					НомКорр = ПоказателиВыгрузки["НомКорр"];
					Если НомКорр <> СвойстваДекларации.ТребованиеНомКорр Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Номер корректировки в выбранном файле декларации по НДС не совпадает с номером корректировки, указанном в требовании'"));
						Возврат Неопределено;
					КонецЕсли;
					
					Период = ПоказателиВыгрузки["Период"];
					Если Период <> СвойстваДекларации.ТребованиеПериод Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Период в выбранном файле декларации по НДС не совпадает с периодом, указанном в требовании'"));
						Возврат Неопределено;
					КонецЕсли;
					
					ОтчетГод = ПоказателиВыгрузки["ОтчетГод"];
					Если ОтчетГод <> СвойстваДекларации.ТребованиеОтчетГод Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Год в выбранном файле декларации по НДС не совпадает с годом, указанном в требовании'"));
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Возврат ПоказателиВыгрузки["ИдФайл"]; 
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл декларации по НДС должен иметь расширение xml'"));
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный файл не является файлом декларации по НДС'"));
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УстановитьИдентификаторыСписков(ТекущиеДанные, ИменаКолонок)
	
	МассивИменКолонок = СтрРазделить(ИменаКолонок, ",");
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		ТекущиеДанные[СокрЛП(ИмяКолонки)] = Новый УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолеПериода(ИмяПоля)
	
	Возврат СтрНайти(ИмяПоля, "ПериодОтраженияЗаписиПредставление") > 0
	
КонецФункции

&НаКлиенте
Функция ЭтоПолеКодаОшибки(ИмяПоля)
	
	Возврат СтрНайти(ИмяПоля, "ОшибкаПредставление") > 0
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПериодОтражения(ДанныеСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ДанныеСтроки.ПериодОтраженияЗаписиПредставление,
		"; ");
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Периоды отражения'"));
	ДополнительныеПараметры.Вставить("Значения",  Значения);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаМножественныхЗначений", ДополнительныеПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибку(ДанныеСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ДанныеСтроки.ОшибкаПредставление,
		Символы.ПС);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Перечень ошибок'"));
	ДополнительныеПараметры.Вставить("Значения",  Значения);
	
	ОткрытьФорму("Документ.ПоясненияКДекларацииПоНДС.Форма.ФормаМножественныхЗначений", ДополнительныеПараметры, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОтправки

&НаСервере
Процедура ПоказатьПодсказкуПоКС()
	
	ЕстьНужныеКС = Ложь;
	
	Для каждого СтрокаСведКС Из Объект.СведКС Цикл
		Если СтрокаСведКС.НомКС = "1.25"
			ИЛИ СтрокаСведКС.НомКС = "1.26"
			ИЛИ СтрокаСведКС.НомКС = "1.27" Тогда
	
			ЕстьНужныеКС = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОперации = ЕстьОперацииОбратногоНачисленияНДС();
	
	Элементы.ПодсказкаПоКС.Видимость = ЕстьНужныеКС И ЕстьОперации И НЕ ПояснениеОтправлено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоясненКС_1_25()
	
	Возврат НСтр("ru = 'Несоответствие по КС 1.25 связано с особенностями заполнения налоговой декларации по НДС в связи с выполнением обязанностей налогового агента в соответствии с п. 8 ст. 161 НК РФ  и отражением в разделах 8 и 9 налоговой декларации по НДС регистрационных записей по счетам-фактурам продавцов с КВО 41, 42, 43, 44 согласно письму ФНС России от 16.01.2018 № СД-4-3/480@.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоясненКС_1_26()
	
	Возврат НСтр("ru = 'Несоответствие по КС 1.26 связано с особенностями заполнения налоговой декларации по НДС в связи с выполнением обязанностей налогового агента в соответствии с п. 8 ст. 161 НК РФ  и отражением в раздел 9 налоговой декларации по НДС регистрационных записей по счетам-фактурам продавцов с КВО 41, 42, 43, 44 согласно письму ФНС России от 16.01.2018 № СД-4-3/480@.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоясненКС_1_27()
	
	Возврат НСтр("ru = 'Несоответствие по КС 1.27 связано с особенностями заполнения налоговой декларации по НДС в связи с выполнением обязанностей налогового агента в соответствии с п. 8 ст. 161 НК РФ  и отражением в разделе 9 налоговой декларации по НДС регистрационных записей по счетам-фактурам продавцов с КВО 41, 42, 43, 44 согласно письму ФНС России от 16.01.2018 № СД-4-3/480@.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоясненКС_1_28()
	
	Возврат НСтр("ru = 'Несоответствие по КС 1.28 связано с особенностями заполнения налоговой декларации по НДС в связи с выполнением обязанностей налогового агента в соответствии с п. 8 ст. 161 НК РФ  и отражением в разделе 8 налоговой декларации по НДС регистрационных записей по счетам-фактурам продавцов с КВО 41, 42, 43, 44 согласно письму ФНС России от 16.01.2018 № СД-4-3/480@.'");
	
КонецФункции

&НаСервере
Функция ЕстьОперацииОбратногоНачисленияНДС()
	
	ЕстьОперации = Ложь;
	
	СправочникДоговорыКонтрагентов     = Метаданные.Справочники.Найти("ДоговорыКонтрагентов");
	ПеречислениеВидыАгентскихДоговоров = Метаданные.Перечисления.Найти("ВидыАгентскихДоговоров");
	
	Если СправочникДоговорыКонтрагентов <> Неопределено
		И СправочникДоговорыКонтрагентов.Реквизиты.Найти("УчетАгентскогоНДС") <> Неопределено
		И СправочникДоговорыКонтрагентов.Реквизиты.Найти("ВидАгентскогоДоговора") <> Неопределено
		И ПеречислениеВидыАгентскихДоговоров <> Неопределено
		И ПеречислениеВидыАгентскихДоговоров.ЗначенияПеречисления.Найти("РеализацияТоваров") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);

		// Для того, чтобы проверка конфигурации не ругалась, если таких метаданных нет
		ТекстДоговорыКонтрагентов   = "ДоговорыКонтрагентов";
		ТекстУчетАгентскогоНДС      = "УчетАгентскогоНДС";
		ТекстВидАгентскогоДоговора  = "ВидАгентскогоДоговора";
		ТекстВидыАгентскихДоговоров = "ВидыАгентскихДоговоров";
		ТекстРеализацияТоваров      = "РеализацияТоваров";
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		| ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		| Справочник." + ТекстДоговорыКонтрагентов + " КАК ДоговорыКонтрагентов
		|ГДЕ
		| ДоговорыКонтрагентов.Организация = &Организация
		| И ДоговорыКонтрагентов." + ТекстУчетАгентскогоНДС + "
		| И ДоговорыКонтрагентов." + ТекстВидАгентскогоДоговора + " = ЗНАЧЕНИЕ(Перечисление." + ТекстВидыАгентскихДоговоров + "." + ТекстРеализацияТоваров + ")";
		
		
		Результат = Запрос.Выполнить();
		
		ЕстьОперации = НЕ Результат.Пустой();
		
	КонецЕсли;
	
	Возврат ЕстьОперации;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПрорисоватьСтатус(ЭтотОбъект);
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияТребования()
	
	Заголовок = Документы.ПоясненияКДекларацииПоНДС.НаименованиеОтветаПоТребованию(Объект.Требование);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНезаполненныеКолонкиПериодОтраженияЗаписи()
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("КнигаПокупок");
	ИменаТаблиц.Добавить("КнигаПокупокДл");
	ИменаТаблиц.Добавить("КнигаПродаж");
	ИменаТаблиц.Добавить("КнигаПродажДл");
	ИменаТаблиц.Добавить("ЖурналУчетаВыставленныхСчетовФактур");
	ИменаТаблиц.Добавить("ЖурналУчетаПолученныхСчетовФактур");
	ИменаТаблиц.Добавить("ВыставленныеСчетаФактурыНеплательщиковНДС");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		КолонкаЗаполнена = Ложь;
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодОтраженияЗаписиПредставление) Тогда
				КолонкаЗаполнена = Истина;
			КонецЕсли;
		КонецЦикла;
		Элементы[ИмяТаблицы + "ПериодОтраженияЗаписиПредставление"].Видимость = КолонкаЗаполнена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДекларациюИзБазы()

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВыбораДекларацииИзБазы", 
		ЭтотОбъект); 
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораДекларацииПоНДС",
		ДополнительныеПараметры,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВыбораДекларацииИзБазы(ВыбраннаяДекларация, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДекларация) Тогда
		Объект.Декларация 	= ВыбраннаяДекларация;
		Модифицированность 	= Истина;
		УправлениеДекларацией(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательПриИзмененииКонтрагента(Элемент)
	
	ИмяЭлемента 	= Элемент.Имя; 
	ИмяРеквизита  	= СтрЗаменить(ИмяЭлемента, "НетКнигаПрод", "");
	
	ИмяРеквизитаИНН = ИменаРеквизитов(ИмяРеквизита).ИмяРеквизитаИНН;
	ИмяРеквизитаКПП = ИменаРеквизитов(ИмяРеквизита).ИмяРеквизитаКПП;
	
	ДанныеСтроки = Элементы.НетКнигаПрод.ТекущиеДанные;
	
	Сведения = СведенияОКонтрагентеПоИНН(ДанныеСтроки[ИмяРеквизитаИНН], ДанныеСтроки[ИмяРеквизитаКПП]);
	
	ОтработатьВыборКонтрагентаВНетКнигаПрод(ДанныеСтроки, Сведения, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродПокупательНачалоВыбораКонтрагента(СтандартнаяОбработка, Элемент)
	
	ИмяЭлемента 	= Элемент.Имя; 
	ИмяРеквизита  	= СтрЗаменить(ИмяЭлемента, "НетКнигаПрод", "");
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.НетКнигаПрод.ТекущиеДанные;
	
	ВыбратьКонтрагента("НетКнигаПрод", ДанныеСтроки, ИмяРеквизита, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НетКнигаПродВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНетКнигаПрод Тогда
		
		ТекущиеДанные = Элементы.НетКнигаПрод.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если Поле = Элементы.НетКнигаПродПокупательИНН 
				ИЛИ Поле = Элементы.НетКнигаПродПокупательКПП
				ИЛИ Поле = Элементы.НетКнигаПродНаименованиеКонтрагента Тогда
				КонтрагентыИзСтроки = ТекущиеДанные.ПокупательИННКонтрагенты;
			Иначе
				Возврат;
			КонецЕсли;
				
			КонтекстЭДОКлиент.ОткрытьКонтрагентовИзТребования(КонтрагентыИзСтроки);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьОтбор()
	
	ТЧ = ТабличныеЧасти();
	Для каждого Имя Из ТЧ Цикл
		Элементы[Имя].ОтборСтрок = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти