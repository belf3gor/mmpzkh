
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ Отказ Тогда
		Объект.Контрагенты.Очистить();

		Для Каждого СтрокаКонтрагента Из Дебиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		КонецЦикла;

		Для Каждого СтрокаКонтрагента Из Кредиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Документы.ИнвентаризацияРасчетовСКонтрагентами.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, ЭтаФорма, Истина);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если НЕ ОбъектГотовКЗаполнению(Неопределено) Тогда
		Объект.Организация = ТекущаяОрганизация;
		Возврат;
	КонецЕсли;

	ТекущаяОрганизация = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользуетсяОтложенноеПроведение = ИспользуетсяОтложенноеПроведение(Объект.Организация, Объект.Дата);
	КонецЕсли;

	Объект.Контрагенты.Очистить();
	Дебиторы.Очистить();
	Кредиторы.Очистить();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДебиторскуюЗадолженность(Команда)

	ЗаполнитьДолги("Дебиторская");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторскуюЗадолженность(Команда)

	ЗаполнитьДолги("Кредиторская");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеЗадолженности(Команда)

	ЗаполнитьДолги("Общая");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаПоУмолчанию(Команда)

	Если Объект.СчетаРасчетов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все счета учета будут удалены. " + Символы.ПС + "Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросВсеСчетаУчетаБудутУдаленыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьприВыборе,МножественныйВыбор,РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторы

&НаКлиенте
Процедура ДебиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторы

&НаКлиенте
Процедура КредиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", 
													Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо));
		Если СтрокиФЛ.Количество() > 1 Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Физическое лицо %физлицо% уже включено в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%физлицо%", 
												Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = Объект.ИнвентаризационнаяКомиссия.Количество();
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		СтрокиФизЛица = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранныйЭлемент));
		Если СтрокиФизЛица.Количество() = 0 Тогда
			СтрокаФизЛица = Объект.ИнвентаризационнаяКомиссия.Добавить();
			СтрокаФизЛица.ФизЛицо = ВыбранныйЭлемент;
		Иначе
			СтрокаФизЛица = СтрокиФизЛица[0];
			ИндексСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(СтрокаФизЛица);
			ИмяПоля = "ИнвентаризационнаяКомиссия[" + Формат(ИндексСтроки, "ЧДЦ=0; ЧГ=") + "].ФизЛицо"; 
			ТекстСообщения = НСтр("ru = 'Физическое лицо %1 уже добавлено в список комиссии'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранныйЭлемент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяПоля);
		КонецЕсли; 
		Элементы.ИнвентаризационнаяКомиссия.ТекущаяСтрока = СтрокаФизЛица;
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;  
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Разделяет табличную часть "Контрагенты" на отдельные таблицы значений
//
&НаСервере
Процедура ЗагрузитьИзДокументаДебиторовИКредиторов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Дебиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Кредиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Дебиторы.Загрузить(РезультатыЗапроса[0].Выгрузить());
	Кредиторы.Загрузить(РезультатыЗапроса[1].Выгрузить());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.КоличествоДебиторов        = Форма.Дебиторы.Количество();
	Форма.КоличествоКредиторов       = Форма.Кредиторы.Количество();
	Форма.ВсегоДебиторы              = Форма.Дебиторы.Итог("Всего");
	Форма.ВсегоКредиторы             = Форма.Кредиторы.Итог("Всего");
	Форма.ПодтвержденоДебиторы       = Форма.Дебиторы.Итог("Подтверждено");
	Форма.ПодтвержденоКредиторы      = Форма.Кредиторы.Итог("Подтверждено");
	Форма.НеПодтвержденоДебиторы     = Форма.Дебиторы.Итог("НеПодтверждено");
	Форма.НеПодтвержденоКредиторы    = Форма.Кредиторы.Итог("НеПодтверждено");
	Форма.ИстекСрокДавностиДебиторы  = Форма.Дебиторы.Итог("ИстекСрокДавности");
	Форма.ИстекСрокДавностиКредиторы = Форма.Кредиторы.Итог("ИстекСрокДавности");

КонецПроцедуры

// Проверяет готовность документа к автоматическому заполнению данными учета
//
&НаКлиенте
Функция ОбъектГотовКЗаполнению(ИмяВидаЗадолженности = Неопределено)

	Если Объект.СчетаРасчетов.Количество() = 0 И ИмяВидаЗадолженности <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан список счетов, по которым должен формироваться документ!'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьТекстВопроса(ИмяВидаЗадолженности)

	ТекстВопроса = "";
	Если ИмяВидаЗадолженности = Неопределено И (Дебиторы.Количество() > 0 ИЛИ Кредиторы.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru = 'При изменении значения реквизита все строки задолженностей будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Дебиторская" И Дебиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки дебиторской задолженности будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Кредиторская" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки кредиторской задолженности будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Общая" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки задолженности контрагентов будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	КонецЕсли;

	Возврат ТекстВопроса;

КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыВСтроке(СтрокаТаблицы, ИмяТаблицы)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
	Если СтрокаТаблицы.ИстекСрокДавности > СтрокаТаблицы.Всего Тогда

		// ошибка выведется только однократно, после чего поле "ИстекСрокДавности" заполнится правильными данными.
		// В обработке проверки заполнения это проверять не нужно.
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(СтрокаТаблицы);
		ИмяПоля = ИмяТаблицы + "[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ИстекСрокДавности"; 
		ТекстСообщения = НСтр("ru = 'Сумма с истекшим сроком давности не может быть больше общей суммы задолженности'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);

		СтрокаТаблицы.ИстекСрокДавности = СтрокаТаблицы.Всего;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)

	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);

	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл

		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;

		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация 	 = Объект.Организация;
	ИспользуетсяОтложенноеПроведение = ИспользуетсяОтложенноеПроведение(ТекущаяОрганизация, ТекущаяДатаДокумента);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьИзДокументаДебиторовИКредиторов();
	Иначе
		Дебиторы.Очистить();
		Кредиторы.Очистить();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Элементы.ДокументОснованиеВид.СписокВыбора.Очистить();
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Приказ");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Постановление");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Распоряжение");

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВсеСчетаУчетаБудутУдаленыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеПоОстаткам

// Заполняет табличную часть "СчетаРасчетов" значениями по умолчению
//
&НаСервере
Процедура ЗаполнитьСчетаПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	НоваяСтрокаСчета = ТаблицаСчетов.Добавить();
	НоваяСтрокаСчета.СчетРасчетов = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	НоваяСтрокаСчета = ТаблицаСчетов.Добавить();
	НоваяСтрокаСчета.СчетРасчетов = ПланыСчетов.Хозрасчетный.ФинансовыеВложения;
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СчетаРасчетов.Загрузить(ТаблицаСчетов);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолги(ИмяВидаЗадолженности)
	
	Если НЕ ОбъектГотовКЗаполнению(ИмяВидаЗадолженности) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ПолучитьТекстВопроса(ИмяВидаЗадолженности);

	Если ТекстВопроса = "" Тогда
		ЗаполнитьДолгиПоАктуальнымДанным(ИмяВидаЗадолженности);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДолгиЗавершение", ЭтотОбъект, ИмяВидаЗадолженности);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает заполнение таблицы значений задолженностью указанного вида
&НаКлиенте
Процедура ЗаполнитьДолгиПоАктуальнымДанным(ИмяВидаЗадолженности)
	
	Если ИмяВидаЗадолженности = "Дебиторская" Или ИмяВидаЗадолженности = "Общая" Тогда
		Дебиторы.Очистить();
	КонецЕсли;
	Если ИмяВидаЗадолженности = "Кредиторская" Или ИмяВидаЗадолженности = "Общая" Тогда
		Кредиторы.Очистить();
	КонецЕсли;
	
	Если ИспользуетсяОтложенноеПроведение Тогда
		
		НачалоНеактуальности = МоментАктуальностиОтложенныхРасчетов(Объект.Организация, КонецДня(Объект.Дата));
		Если НачалоНеактуальности <> Неопределено Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяВидаЗадолженности",      ИмяВидаЗадолженности);
			ДополнительныеПараметры.Вставить("ДатаОкончанияАктуализации", КонецДня(Объект.Дата));
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьДолгиПоАктуальнымДаннымЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Данные учета не актуальны. Необходимо актуализировать расчеты с контрагентами.'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ВыполнитьАктуализацию",  НСтр("ru = 'Выполнить актуализацию'"));
			Кнопки.Добавить("НеАктуализировать", НСтр("ru = 'Не актуализировать взаиморасчеты'"));
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , "ВыполнитьАктуализацию", Заголовок);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДолгиНаКлиенте(ИмяВидаЗадолженности);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиНаКлиенте(ИмяВидаЗадолженности, ДатаОкончанияАктуализации = Неопределено)
	
	// запускаем фоновое задание
	РезультатЗаполнения = ЗаполнитьДолгиНаСервере(ИмяВидаЗадолженности, ДатаОкончанияАктуализации);
	
	Если РезультатЗаполнения.ЗаданиеВыполнено Тогда
		// Результат получен и уже обработан на стороне сервера
		СообщитьРезультатЗаполнения(РезультатЗаполнения);

	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗаданияАктуализации);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицы значений как дебиторской, так и кредиторской задолженностью
&НаСервере
Функция ЗаполнитьДолгиНаСервере(ИмяВидаЗадолженности, ДатаОкончанияАктуализации)

	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗаданияАктуализации) Тогда
		// Надо ждать
		Возврат Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыйРезультатЗаполнения();
	КонецЕсли;
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнить данными расчетов с контрагентами'");
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыЗаполнения = Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыеПараметрыЗаполнения(Объект);
	ПараметрыЗаполнения.АдресХранилищаСОшибками = АдресХранилищаСОшибками;
	Если ЗначениеЗаполнено(ДатаОкончанияАктуализации) Тогда
		ПараметрыЗаполнения.ДатаОкончанияАктуализации = ДатаОкончанияАктуализации;
	КонецЕсли;
	Если ИмяВидаЗадолженности = "Дебиторская" Или ИмяВидаЗадолженности = "Общая" Тогда
		ПараметрыЗаполнения.Контрагенты.Вставить("Дебиторы", Дебиторы.Выгрузить());
	КонецЕсли;
	Если ИмяВидаЗадолженности = "Кредиторская" Или ИмяВидаЗадолженности = "Общая" Тогда
		ПараметрыЗаполнения.Контрагенты.Вставить("Кредиторы", Кредиторы.Выгрузить());
	КонецЕсли;
	
	Результат = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.ИнвентаризацияРасчетовСКонтрагентами.ЗаполнитьПоОстаткам", 
		ПараметрыЗаполнения, 
		НаименованиеФоновогоЗадания);
		
	АдресХранилищаАктуализации       = Результат.АдресХранилища;
	ИдентификаторЗаданияАктуализации = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РезультатЗаполнения = ПрочитатьРезультатЗаполнения();
	Иначе
		РезультатЗаполнения = Документы.ИнвентаризацияРасчетовСКонтрагентами.НовыйРезультатЗаполнения();
	КонецЕсли;
	
	// Передадим данные на клиент.
	Возврат РезультатЗаполнения;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
			РезультатЗаполнения = ПрочитатьРезультатЗаполнения();
			СообщитьРезультатЗаполнения(РезультатЗаполнения);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьРезультатЗаполнения()
	
	РезультатЗаполнения = Документы.ИнвентаризацияТоваровНаСкладе.НовыйРезультатЗаполнения();
	
	РезультатЗаполнения.ЗаданиеВыполнено = Истина;
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилищаАктуализации) Тогда
		ОбновитьИтоги(ЭтотОбъект);
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	РезультатЗаполнения.ОткрытьФормуОшибки = ДанныеЗаполнения.ОткрытьФормуОшибки;
	
	// Нет необходимости помещать загруженные данные в РезультатЗаполнения.
	Для каждого ИмяТаблицыЗадолженности Из ДанныеЗаполнения.Контрагенты Цикл
		Если ИмяТаблицыЗадолженности.Ключ = "Дебиторы" Тогда
			Дебиторы.Загрузить(ИмяТаблицыЗадолженности.Значение);
		Иначе
			Кредиторы.Загрузить(ИмяТаблицыЗадолженности.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(АдресХранилищаАктуализации);
	АдресХранилищаАктуализации = "";
	
	ОбновитьИтоги(ЭтотОбъект);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура СообщитьРезультатЗаполнения(РезультатЗаполнения)
	
	Если Не РезультатЗаполнения.ОткрытьФормуОшибки Тогда
		// Актуализация прошла успешно (или не потребовалась).
		Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
			УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
			АдресХранилищаСОшибками = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДолгиПоАктуальнымДанным(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиПоАктуальнымДаннымЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ВыполнитьАктуализацию" Тогда
		ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры.ИмяВидаЗадолженности, ДополнительныеПараметры.ДатаОкончанияАктуализации);
	Иначе
		ЗаполнитьДолгиНаКлиенте(ДополнительныеПараметры.ИмяВидаЗадолженности);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяОтложенноеПроведение(Знач Организация, Знач Период)
	
	Возврат ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция МоментАктуальностиОтложенныхРасчетов(Знач Организация, Знач Период)
	
	Возврат УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(Организация, Период);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти