#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",    "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажи");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Инвентаризация товаров на складе
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризацияТоваровНаСкладе";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризация товаров на складе'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	// Инвентаризационная опись товаров (ИНВ-3)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ3";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризационная опись товаров (ИНВ-3)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	// Сличительная ведомость (ИНВ-19)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ19";
	КомандаПечати.Представление = НСтр("ru = 'Сличительная ведомость (ИНВ-19)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	// Приказ о проведении инвентаризации (ИНВ-22)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ22";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о проведении инвентаризации (ИНВ-22)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Инвентаризация товаров на складе""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияТоваровНаСкладе") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИнвентаризацияТоваровНаСкладе", "Инвентаризация товаров на складе", 
			ПечатьИнвентаризации(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета), , "Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ3") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ3", "ИНВ-3 (Инвентаризационная опись товаров)", 
			ПечатьИнв3(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета), , "Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ3");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ19") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ19",  "ИНВ-19 (Сличительная ведомость)", 
			ПечатьИНВ19(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета), , "Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ19");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ22") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ22",  "ИНВ-22 (Приказ)", 
			ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета), , "ОбщийМакет.ПФ_MXL_ИНВ22");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьВыборкуШапок(МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка,
	|	ИнвентаризацияТоваровНаСкладе.Номер,
	|	ИнвентаризацияТоваровНаСкладе.Дата,
	|	ИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИнвентаризацияТоваровНаСкладе.Дата
	|		ИНАЧЕ ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата
	|	КОНЕЦ КАК ДокументОснованиеДата,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер = """"
	|			ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, ИнвентаризацияТоваровНаСкладе.Номер)
	|		ИНАЧЕ ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер
	|	КОНЕЦ КАК ДокументОснованиеНомер,
	|	ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ИнвентаризацияТоваровНаСкладе.Организация,
	|	ИнвентаризацияТоваровНаСкладе.Склад.Представление КАК ПредставлениеСклада,
	|	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация1,
	|	ИнвентаризацияТоваровНаСкладе.Склад,
	|	ИнвентаризацияТоваровНаСкладе.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Наименование КАК ТоварКратко,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ИнвентаризацияТоваровНаСкладе.Товары.Номенклатура.Артикул
	|			ИНАЧЕ ИнвентаризацияТоваровНаСкладе.Товары.Номенклатура.Код
	|		КОНЕЦ КАК КодАртикул,
	|		СчетУчета КАК СубСчет,
	|		Количество КАК Количество,
	|		КоличествоУчет КАК КоличествоПоУчету,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Цена,
	|		Сумма,
	|		СуммаУчет КАК СуммаПоУчету
	|	),
	|	ИнвентаризацияТоваровНаСкладе.ИнвентаризационнаяКомиссия.(
	|		НомерСтроки,
	|		ФизЛицо,
	|		Председатель КАК Председатель
	|	),
	|	ИнвентаризацияТоваровНаСкладе.ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ИнвентаризацияТоваровНаСкладе.Организация = ДанныеПервичныхДокументов.Организация
	|			И ИнвентаризацияТоваровНаСкладе.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияТоваровНаСкладе.Дата,
	|	Ссылка,
	|	Председатель УБЫВ,
	|	ИнвентаризацияТоваровНаСкладе.Товары.НомерСтроки";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПечатьИнвентаризации(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаПечати = ВалютаРегламентированногоУчета;
	Шапки = ПолучитьВыборкуШапок(МассивОбъектов);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе");
	ПервыйДокумент = Истина;
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;

	Пока Шапки.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапки, 
																					"Инвентаризация товаров на складе");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим данные об организации и складе
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапки);
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапки.Организация, Шапки.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		
		ОбластьМакета.Параметры.ВалютаНаименование = Строка(ВалютаПечати);
		ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку таблицы
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ОбластьМакета.Параметры.Заполнить(Шапки);
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ОбластьМакета.Параметры.Колонка = "Артикул";
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ОбластьМакета.Параметры.Колонка = "Код";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогСуммы        = 0;
		ИтогСуммыПоУчету = 0;

		ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ВыборкаСтрокТовары = Шапки.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар;

			ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
			ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего        = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтогСуммы);
		ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтогСуммыПоУчету);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим подписи к документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапки.Ссылка);

	КонецЦикла;	//Шапки.Следующий() 
	
	Возврат ТабДокумент;

КонецФункции

Функция ПечатьИнв3(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета)

	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаПечати = ВалютаРегламентированногоУчета;
	Шапка = ПолучитьВыборкуШапок(МассивОбъектов);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ3");
	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ЧленКомиссии = Шапка.ИнвентаризационнаяКомиссия.Выбрать();

		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.Дата;
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакета.Параметры.ДатаОкончанияИнвентаризацииЛокальныйФормат = Шапка.ДатаОкончанияИнвентаризации; 
		
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.Дата);
		ОбластьМакета.Параметры.ДолжностьМОЛ1     = ДанныеМОЛ.Должность;
		ОбластьМакета.Параметры.ФИОМОЛ1           = ДанныеМОЛ.Представление;
		ОбластьМакета.Параметры.Подразделение = Шапка.Склад;
			
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		//////////////////////////////////////////////////////////////////////
		// 2-я страница формы

		ИтогФактКоличество = 0;
		ИтогФактСумма      = 0;
		ИтогФактСуммаВсего = 0;
		ИтогБухКоличество  = 0;
		ИтогБухСумма       = 0;

		КолвоСтрокПоСтранице = 0;
		КолвоПоСтранице      = 0;
		СуммаЛиста           = 0;
		ИтогоКолво           = 0;
		
		НомерСтраницы = 2;
	    Ном = 0;

		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		// Выводим многострочную часть документа
		ПодвалСтраницы  = Макет.ПолучитьОбласть("ПодвалСтраницы");	
			
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Ном = Ном + 1;
			СтрокаТаблицы   = Макет.ПолучитьОбласть("Строка");
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалСтраницы);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
				ПараметрыОбласти = ОбластьИтоговПоСтранице.Параметры;

				ПараметрыОбласти.ИтогоФактКоличество = ИтогФактКоличество;
				ПараметрыОбласти.ИтогоФактСумма      = ИтогФактСумма;
				ПараметрыОбласти.ИтогоБухКоличество  = ИтогБухКоличество;
				ПараметрыОбласти.ИтогоБухСумма       = ИтогБухСумма;

				ПараметрыОбласти.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
				ПараметрыОбласти.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(КолвоПоСтранице);
				ПараметрыОбласти.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);

				ИтогФактКоличество = 0;
				ИтогФактСумма      = 0;
				ИтогБухКоличество  = 0;
				ИтогБухСумма       = 0;

				КолвоСтрокПоСтранице = 0;
				КолвоПоСтранице      = 0;
				СуммаЛиста           = 0;

			КонецЕсли;

			СтрокаТаблицы.Параметры.Номер = Ном;
			СтрокаТаблицы.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар), ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварКратко);

			ТабДокумент.Вывести(СтрокаТаблицы);

			ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.Количество;
			ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.Сумма;
			ИтогФактСуммаВсего = ИтогФактСуммаВсего + ВыборкаСтрокТовары.Сумма;
			ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.КоличествоПоУчету;
			ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.СуммаПоУчету;
			ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.Количество;

			КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
			КолвоПоСтранице      = КолвоПоСтранице      + ВыборкаСтрокТовары.Количество;
			СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.Сумма;

		КонецЦикла;

		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
		ПараметрыОбласти = ОбластьИтоговПоСтранице.Параметры;

		ПараметрыОбласти.ИтогоФактКоличество  = ИтогФактКоличество;
		ПараметрыОбласти.ИтогоФактСумма       = ИтогФактСумма;
		ПараметрыОбласти.ИтогоБухКоличество   = ИтогБухКоличество;
		ПараметрыОбласти.ИтогоБухСумма        = ИтогБухСумма;
		ПараметрыОбласти.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
		ПараметрыОбласти.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(КолвоПоСтранице);
		ПараметрыОбласти.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

		// Выводим подвал документа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(ИтогоКолво);
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
		ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогФактСуммаВсего, ВалютаПечати);
		
		Инд = 1;
		Пока ЧленКомиссии.Следующий() Цикл
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, ЧленКомиссии.ФизЛицо, Шапка.Дата);
			Если Инд <= 4 Тогда
				Если ЧленКомиссии.Председатель Тогда
					ОбластьМакета.Параметры["ДолжностьПредседателя"] = ДанныеЧленаКомиссии.Должность;
					ОбластьМакета.Параметры["ФИОПредседателя"] = ДанныеЧленаКомиссии.Представление;
				Иначе
					ОбластьМакета.Параметры["ДолжностьЧленаКомиссии" + Инд] = ДанныеЧленаКомиссии.Должность;
					ОбластьМакета.Параметры["ФИОЧленаКомиссии" + Инд] = ДанныеЧленаКомиссии.Представление;
				КонецЕсли;		
			Иначе
				ТабДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ДопЧленКомиссии");
	           	ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"] = ДанныеЧленаКомиссии.Должность;
				ОбластьМакета.Параметры["ФИОЧленаКомиссии"] = ДанныеЧленаКомиссии.Представление;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписиМОЛ");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
		ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
			
		ОбластьМакета.Параметры.ДолжностьМОЛ1   = ДанныеМОЛ.Должность;
		ОбластьМакета.Параметры.ФИОМОЛ1         = ДанныеМОЛ.Представление;
		
		ОбластьМакета.Параметры.ДатаДокумента 	= Шапка.Дата;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;	//Шапки.Следующий() 

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьИНВ19(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаПечати = ВалютаРегламентированногоУчета;
	Шапка = ПолучитьВыборкуШапок(МассивОбъектов);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 20;
		ТабДокумент.ПолеСправа         = 0;
	КонецЕсли;

	
	// Получение областей макета.
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИНВ19");
	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ЧленКомиссии = Шапка.ИнвентаризационнаяКомиссия.Выбрать();
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоТаблицы1");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

		// Вывод шапки документа.
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ДатаДокумента            = Шапка.Дата;
		ОбластьМакетаШапка.Параметры.ДатаНачалаИнвентаризации = Шапка.ДатаНачалаИнвентаризации;
		ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.Дата);
		ОбластьМакетаШапка.Параметры.ДолжностьМОЛ1     = ДанныеМОЛ.Должность;
		ОбластьМакетаШапка.Параметры.ФИОМОЛ1           = ДанныеМОЛ.Представление;
		ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = Шапка.Склад;

		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);

		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		НомерСтраницы   = 2;
		НомерСтроки     = 1;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();

		ИтогоРезультатИзлишекКоличествоПоСтранице   = 0;
		ИтогоРезультатИзлишекСуммаПоСтранице        = 0;
		ИтогоРезультатНедостачаКоличествоПоСтранице = 0;
		ИтогоРезультатНедостачаСуммаПоСтранице      = 0;
		
		ИтогоРезультатИзлишекКоличество   = 0;
		ИтогоРезультатИзлишекСумма        = 0;
		ИтогоРезультатНедостачаКоличество = 0;
		ИтогоРезультатНедостачаСумма      = 0;
		

		// Вывод заголовка таблицы.
		ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы)); 
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Вывод многострочной части докмента.
		ВыборкаСтрокТовары = Шапка.Товары.Выгрузить();
		Для каждого СтрокаТовары Из ВыборкаСтрокТовары Цикл
			
			СтруктураЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТовары);

			ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТовары.Товар), 
															СтрокаТовары.Товар, СтрокаТовары.ТоварКратко);
			
			СтруктураЗаполнения.Вставить("ТоварНаименование", ТоварНаименование);
			СтруктураЗаполнения.Вставить("Номер", НомерСтроки);
			
			Разница     = СтрокаТовары.Количество - СтрокаТовары.КоличествоПоУчету;
			РазницаСумм = СтрокаТовары.Сумма      - СтрокаТовары.СуммаПоУчету;
			
			Если Разница = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Разница < 0 Тогда
				
				СтруктураЗаполнения.Вставить("РезультатНедостачаКоличество", - Разница);
				СтруктураЗаполнения.Вставить("РезультатНедостачаСумма",      - РазницаСумм);
				СтруктураЗаполнения.Вставить("РезультатИзлишекКоличество",     0);
				СтруктураЗаполнения.Вставить("РезультатИзлишекСумма",          0);
				
			Иначе
				
				СтруктураЗаполнения.Вставить("РезультатНедостачаКоличество", 0);
				СтруктураЗаполнения.Вставить("РезультатНедостачаСумма",      0);
				СтруктураЗаполнения.Вставить("РезультатИзлишекКоличество",   Разница);
				СтруктураЗаполнения.Вставить("РезультатИзлишекСумма",        РазницаСумм);

			КонецЕсли;
			
			
			// Проверка вывода.
			СтрокаСПодвалом = Новый Массив();
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок <> 1 Тогда
					
					СтруктураЗаполненияИтоги = Новый Структура;
					СтруктураЗаполненияИтоги.Вставить("ИтогоРезультатИзлишекКоличество",   ИтогоРезультатИзлишекКоличествоПоСтранице);
					СтруктураЗаполненияИтоги.Вставить("ИтогоРезультатИзлишекСумма",        ИтогоРезультатИзлишекСуммаПоСтранице);
					СтруктураЗаполненияИтоги.Вставить("ИтогоРезультатНедостачаКоличество", ИтогоРезультатНедостачаКоличествоПоСтранице);
					СтруктураЗаполненияИтоги.Вставить("ИтогоРезультатНедостачаСумма",      ИтогоРезультатНедостачаСуммаПоСтранице);
					
					ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(СтруктураЗаполненияИтоги);
					
					ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + ИтогоРезультатИзлишекКоличествоПоСтранице;
					ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + ИтогоРезультатИзлишекСуммаПоСтранице;
					ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + ИтогоРезультатНедостачаКоличествоПоСтранице;
					ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + ИтогоРезультатНедостачаСуммаПоСтранице;
					
					ИтогоРезультатИзлишекКоличествоПоСтранице   = 0;
					ИтогоРезультатИзлишекСуммаПоСтранице        = 0;
					ИтогоРезультатНедостачаКоличествоПоСтранице = 0;
					ИтогоРезультатНедостачаСуммаПоСтранице      = 0;
			
					// Вывод итого по странице.
					ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					// Вывод разделителя страниц.
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Вывод заголовка таблицы.
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
					ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;

			КонецЕсли;
			
			ИтогоРезультатНедостачаКоличествоПоСтранице = ИтогоРезультатНедостачаКоличествоПоСтранице + СтруктураЗаполнения.РезультатНедостачаКоличество;
			ИтогоРезультатНедостачаСуммаПоСтранице      = ИтогоРезультатНедостачаСуммаПоСтранице      + СтруктураЗаполнения.РезультатНедостачаСумма;
			ИтогоРезультатИзлишекКоличествоПоСтранице   = ИтогоРезультатИзлишекКоличествоПоСтранице   + СтруктураЗаполнения.РезультатИзлишекКоличество;
			ИтогоРезультатИзлишекСуммаПоСтранице        = ИтогоРезультатИзлишекСуммаПоСтранице        + СтруктураЗаполнения.РезультатИзлишекСумма;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(СтруктураЗаполнения);
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;
		
		ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + ИтогоРезультатИзлишекКоличествоПоСтранице;
		ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + ИтогоРезультатИзлишекСуммаПоСтранице;
		ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + ИтогоРезультатНедостачаКоличествоПоСтранице;
		ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + ИтогоРезультатНедостачаСуммаПоСтранице;

		// Вывод итого по странице.
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ИтогоРезультатИзлишекКоличество",   ИтогоРезультатИзлишекКоличество);
		СтруктураЗаполнения.Вставить("ИтогоРезультатИзлишекСумма",        ИтогоРезультатИзлишекСумма);
		СтруктураЗаполнения.Вставить("ИтогоРезультатНедостачаКоличество", ИтогоРезультатНедостачаКоличество);
		СтруктураЗаполнения.Вставить("ИтогоРезультатНедостачаСумма",      ИтогоРезультатНедостачаСумма);
		
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(СтруктураЗаполнения);
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Вывод подвала.
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ОбластьМакетаПодвал.Параметры.ФИОБухгалтера = Руководители.ГлавныйБухгалтерПредставление;
		ОбластьМакетаПодвал.Параметры.ДолжностьМОЛ1 = ДанныеМОЛ.Должность;
		ОбластьМакетаПодвал.Параметры.ФИОМОЛ1 = ДанныеМОЛ.Представление;
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ВалютаРегламентированногоУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаПечати = ВалютаРегламентированногоУчета;
	Шапка = ПолучитьВыборкуШапок(МассивОбъектов);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ22";
	
	// Получение областей макета.
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ИНВ22");
	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл
	
		ЗаголовокРазделаПодписей = Новый Структура();
		ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
		ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ЧленКомиссии = Шапка.ИнвентаризационнаяКомиссия.Выбрать();
	
		// Получаем области макета для вывода в табличный документ
		ШапкаОтчета   = Макет.ПолучитьОбласть("Шапка");
		Подпись = Макет.ПолучитьОбласть("Подпись");
		Подвал  = Макет.ПолучитьОбласть("Подвал");
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		
		ШапкаОтчета.Параметры.Заполнить(Шапка);
		ШапкаОтчета.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		ШапкаОтчета.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		
		ШапкаОтчета.Параметры.НомерДокумента = Шапка.ДокументОснованиеНомер;
		ШапкаОтчета.Параметры.ДатаДокумента  = Шапка.ДокументОснованиеДата;
		
		ШапкаОтчета.Параметры.НаименованиеИмуществаОбязательств = "";
		ШапкаОтчета.Параметры.Подразделение = Шапка.Склад;
		
		ТабДокумент.Вывести(ШапкаОтчета);
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = Неопределено;
		Если ЧленКомиссии.Следующий() Тогда
			Если ЧленКомиссии.Председатель Тогда
				ПредседательКомиссии = ЧленКомиссии;
			КонецЕсли;	// 
		КонецЕсли;
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.Дата);
				
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		    Подпись.Параметры.НаименованиеЧленаКомисси = ПредседательКомиссии.ФизЛицо.Наименование;
			
		Иначе
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.НаименованиеЧленаКомисси = "";
			
		КонецЕсли;
			
		ТабДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		КоличествоЧленовКомиссии = 0;
		
		// Сначала выведем членов комиссии из выборки
		Пока ЧленКомиссии.Следующий() Цикл
			
			Если ЧленКомиссии.Председатель Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, ЧленКомиссии.ФизЛицо, Шапка.Дата);
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = ДанныеЧленаКомиссии.Должность;
	    	Подпись.Параметры.НаименованиеЧленаКомисси = ЧленКомиссии.ФизЛицо.Наименование;
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если КоличествоЧленовКомиссии < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Для Итератор = (КоличествоЧленовКомиссии + 1) По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
															   "");
				Подпись.Параметры.Должность                = "";
			    Подпись.Параметры.НаименованиеЧленаКомисси = "";
				
				ТабДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		
		КонецЕсли;
		
		// Выведем подвал приказа
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Подвал.Параметры.НаименованиеИмуществаОбязательств = "";
		Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Шапка.ДатаНачалаИнвентаризации, "ДЛФ=DD");
		Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Шапка.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
		Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Шапка.ПричинаПроведенияИнвентаризации;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
		
		Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжностьПредставление;
		Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.РуководительПредставление;
		
		ТабДокумент.Вывести(Подвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;	//Шапки.Следующий() 

	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеПоОстаткам

Функция НовыеПараметрыЗаполнения() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	// Один из двух вариантов: "Заполнить" или "ПерезаполнитьУчетныеКоличества".
	ПараметрыЗаполнения.Вставить("НазваниеДействия", "Заполнить");
	
	ПараметрыЗаполнения.Вставить("ВыполнитьКорректировкуСтоимости",  Ложь);
	
	// Результат Обработки.ЗакрытиеМесяца.НовыеПараметрыВыполненияОперации()
	ПараметрыЗаполнения.Вставить("ПараметрыКорректировкиСтоимости");
	
	ПараметрыЗаполнения.Вставить("ИспользуетсяОтложенноеПроведение", Ложь);
	
	ПараметрыЗаполнения.Вставить("Ссылка",            Документы.ИнвентаризацияТоваровНаСкладе.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ОтветственноеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Дата",              '0001-01-01');
	ПараметрыЗаполнения.Вставить("Склад",             Справочники.Склады.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Организация",       Справочники.Организации.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция НовыйРезультатЗаполнения() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаданиеВыполнено",              Ложь);
	СтруктураПараметров.Вставить("ОткрытьФормуОшибки",            Ложь);
	СтруктураПараметров.Вставить("ОперацияКорректировкаСтоимости");
	СтруктураПараметров.Вставить("ТаблицаТовары");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает таблицу остатков по складу. Предназначена для запуска фоновым заданием.
//
// Параметры:
//  ПараметрыЗаполнения - Структура - см. НовыеПараметрыЗаполнения().
//  АдресХранилища - Строка - место, куда фоновое задание поместит результат.
//
Процедура ЗаполнитьПоОстаткам(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	Результат = НовыйРезультатЗаполнения();
	
	Если ПараметрыЗаполнения.ВыполнитьКорректировкуСтоимости Тогда
		
		РезультатКорректировки = Обработки.ЗакрытиеМесяца.АктуализироватьОстатки(ПараметрыЗаполнения.ПараметрыКорректировкиСтоимости);
		
		Если ТипЗнч(РезультатКорректировки) <> Тип("Структура")
		 Или Не РезультатКорректировки.Свойство("Отказ")
		 Или Не РезультатКорректировки.Свойство("Ссылка") Тогда
			Возврат;
		КонецЕсли;
			
		Результат.ОткрытьФормуОшибки = РезультатКорректировки.Отказ;
		Результат.ОперацияКорректировкаСтоимости = РезультатКорректировки.Ссылка;
		
	КонецЕсли;
	
	Если Не Результат.ОткрытьФормуОшибки Тогда
		Результат.ТаблицаТовары = ЗаполнитьПоОстаткамНаСкладе(ПараметрыЗаполнения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СписокСкладовДляЗаполнения(ПараметрыЗаполнения)

	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) Тогда
		
		СписокСкладов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗаполнения.Склад);
		
	Иначе
		
		ЗапросПоСкладам = Новый Запрос;
		ЗапросПоСкладам.УстановитьПараметр("МОЛ", ПараметрыЗаполнения.ОтветственноеЛицо);
		ЗапросПоСкладам.УстановитьПараметр("КонецПериода", ПараметрыЗаполнения.Дата);
		ЗапросПоСкладам.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&КонецПериода, ) КАК ОтветственныеЛицаСрезПоследних
		|ГДЕ
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &МОЛ";
		
		СписокСкладов = ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница");
		
	КонецЕсли;
	
	Возврат СписокСкладов;

КонецФункции

Функция ПодготовитьЗапросИнвентаризация(ПараметрыЗаполнения)
	
	// Определим настройки аналитического учета.
	ВестиСкладскойУчетБУ = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	ВестиСуммовойУчетПоСкладамБУ = ВестиСкладскойУчетБУ
		И БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
		
	МассивИсклСчетов = Новый Массив();
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);                            // 42
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГТД);                                        // ГТД
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);          // МЦ
	МассивИсклСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивИсклСчетов);
	
	// Определяем условия отборов по счетам и аналитикам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментАнализаОстатков",  Новый Граница(ПараметрыЗаполнения.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Склад",		            СписокСкладовДляЗаполнения(ПараметрыЗаполнения));
	Запрос.УстановитьПараметр("МОЛ",	 			    ПараметрыЗаполнения.ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация",	        ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("ИсклСчета",	 		    МассивИсклСчетов);
	ТолькоПерезаполнение = (ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества");
	Если ТолькоПерезаполнение Тогда
		Запрос.УстановитьПараметр("ДокументСсылка", ПараметрыЗаполнения.Ссылка);
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение Тогда
		Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
			ТекстУсловияСчетов = "ИСТИНА";
		Иначе
			ТекстУсловияСчетов = "НЕ Счет В (&ИсклСчета)";
		КонецЕсли;
	Иначе
		// Актуальность на дату документа возможна только для отдельных счетов. Для всех остальных счетов актуальными будут
		// только остатки, учитывающие проводки корректировки стоимости по состоянию на конец месяца.
		Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
			ТекстУсловияСчетов = "(&АктуальностьНаКонецМесяца
			|				И НЕ ИнвентаризацияТоваровНаСкладеТовары.СчетУчета В (&СчетаРассчитываемыеОперативно)
			|			ИЛИ НЕ &АктуальностьНаКонецМесяца
			|				И ИнвентаризацияТоваровНаСкладеТовары.СчетУчета В (&СчетаРассчитываемыеОперативно))";
		Иначе
			ТекстУсловияСчетов = "(&АктуальностьНаКонецМесяца
			|						И НЕ Счет В (&ИсклСчета, &СчетаРассчитываемыеОперативно)
			|					ИЛИ НЕ &АктуальностьНаКонецМесяца
			|						И Счет В (&СчетаРассчитываемыеОперативно)
			|						И НЕ Счет В (&ИсклСчета))";
		КонецЕсли;
		Запрос.УстановитьПараметр("СчетаРассчитываемыеОперативно", УчетТоваров.СчетаРассчитываемыеОперативно());
	КонецЕсли;
	ТекстУсловияКоличества = ?(ВестиСкладскойУчетБУ, "И Субконто2 В (&Склад)", "");
	ТекстУсловияЦены = ?(ВестиСуммовойУчетПоСкладамБУ, "И Субконто2 В (&Склад)", "");
	
	// Определяем наборы субконто.
	
	ПорядокСубконтоКоличество = Новый Массив();
	ПорядокСубконтоКоличество.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСкладскойУчетБУ Тогда
		ПорядокСубконтоКоличество.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоЦена = Новый Массив();
	ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСуммовойУчетПоСкладамБУ Тогда
		ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоМОЛ = Новый Массив();
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Запрос.УстановитьПараметр("ПорядокСубконтоКоличество", ПорядокСубконтоКоличество);
	Запрос.УстановитьПараметр("ПорядокСубконтоЦена",       ПорядокСубконтоЦена);
	Запрос.УстановитьПараметр("ПорядокСубконтоМОЛ",        ПорядокСубконтоМОЛ);
	
	Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
		
		ТекстЗапросаИнвентаризация =
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.Цена КАК Цена,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице КАК ЦенаВРознице,
		|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &ДокументСсылка
		|	И &ТекстУсловияСчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиКоличество.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиКоличество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков,
		|			НЕ Счет В (&ИсклСчета),
		|			&ПорядокСубконтоКоличество,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаТовары.Номенклатура
		|					ИЗ
		|						ТаблицаТовары КАК ТаблицаТовары)
		|				И &ТекстУсловияКоличества) КАК ХозрасчетныйОстаткиКоличество
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиКоличество.Субконто1,
		|	ХозрасчетныйОстаткиКоличество.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйЦена.Счет КАК Счет,
		|	ХозрасчетныйЦена.Субконто1 КАК Субконто1,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДляЦены,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДляЦены
		|ПОМЕСТИТЬ ХозрасчетныйЦена
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоМесяца,
		|			&МоментАнализаЦены,
		|			Период,
		|			ДвиженияИГраницыПериода,
		|			,
		|			&ПорядокСубконтоЦена,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаТовары.Номенклатура
		|					ИЗ
		|						ТаблицаТовары КАК ТаблицаТовары)
		|				И &ТекстУсловияЦены) КАК ХозрасчетныйЦена
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйЦена.Субконто1,
		|	ХозрасчетныйЦена.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Счет";
		
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
			
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Склад)
		   И ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственноеЛицо) Тогда
		   
		   // Для счёта 10.11 отложенное проведение не используется, поэтому сумма всегда на дату документа.
		   
		   ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация +
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК Счет,
			|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
			|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
			|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток
			|ПОМЕСТИТЬ ХозрасчетныйМОЛ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментАнализаОстатков,
			|			НЕ Счет В (&ИсклСчета),
			|			&ПорядокСубконтоМОЛ,
			|			НЕ &АктуальностьНаКонецМесяца
			|				И Организация = &Организация
			|				И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Субконто1,
			|	Счет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) = 0
			|			ТОГДА ТаблицаТовары.Цена
			|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.СуммаОстаток, 0)
			|	КОНЕЦ КАК СуммаДляЦены,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0)
			|	КОНЕЦ КАК КоличествоДляЦены,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) > 0
			|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КоличествоУчет,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.ЦенаВРознице КАК ЦенаВРознице,
			|	ТаблицаТовары.Сумма КАК Сумма
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйМОЛ КАК ХозрасчетныйМОЛ
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйМОЛ.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйМОЛ.Счет
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
			|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
			|			ПО ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
			|				И ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйОстаткиКоличество.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйОстаткиКоличество.Счет"
			
		Иначе
			
			ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация +
			"ВЫБРАТЬ
			|	ТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, ТаблицаТовары.Цена) КАК СуммаДляЦены,
			|	ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 1) КАК КоличествоДляЦены,
			|	ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) КАК КоличествоУчет,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.ЦенаВРознице КАК ЦенаВРознице,
			|	ТаблицаТовары.Сумма КАК Сумма
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
			|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
			|			ПО ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
			|				И ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйОстаткиКоличество.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйОстаткиКоличество.Счет";
		
		КонецЕсли;
		
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		СхемаЗапроса = Новый СхемаЗапроса();
		
		СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиКоличество.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиКоличество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков,
		|			&ТекстУсловияСчетов,
		|			&ПорядокСубконтоКоличество,
		|			Организация = &Организация
		|				И &ТекстУсловияКоличества) КАК ХозрасчетныйОстаткиКоличество
		|ГДЕ
		|	ХозрасчетныйОстаткиКоличество.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиКоличество.Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйЦена.Счет КАК Счет,
		|	ХозрасчетныйЦена.Субконто1 КАК Субконто1,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДляЦены,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДляЦены
		|ПОМЕСТИТЬ ХозрасчетныйЦена
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоМесяца,
		|			&МоментАнализаЦены,
		|			Период,
		|			ДвиженияИГраницыПериода,
		|			&ТекстУсловияСчетов,
		|			&ПорядокСубконтоЦена,
		|			Организация = &Организация
		|				И &ТекстУсловияЦены) КАК ХозрасчетныйЦена
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйЦена.Счет,
		|	ХозрасчетныйЦена.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК СчетУчета,
		|	ХозрасчетныйОстаткиКоличество.Счет.Порядок КАК Порядок,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, 0) КАК СуммаДляЦены,
		|	ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) КАК КоличествоДляЦены,
		|	ХозрасчетныйОстаткиКоличество.КоличествоОстаток КАК КоличествоУчет
		|ИЗ
		|	ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
		|		ПО ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
		|			И ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Счет.Порядок,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков, // Для счёта 10.11 отложенное проведение не используется, поэтому сумма всегда на дату документа.
		|			НЕ Счет В (&ИсклСчета),
		|			&ПорядокСубконтоМОЛ,
		|			НЕ &АктуальностьНаКонецМесяца
		|				И Организация = &Организация
		|				И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Номенклатура");
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственноеЛицо) Тогда
			СхемаЗапроса.ПакетЗапросов[2].Операторы.Удалить(1);
		КонецЕсли; 
		
		ТекстЗапросаИнвентаризация = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "&ТекстУсловияСчетов",       ТекстУсловияСчетов);
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "И &ТекстУсловияКоличества", ТекстУсловияКоличества);
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "И &ТекстУсловияЦены",       ТекстУсловияЦены);
	
	Запрос.Текст = ТекстЗапросаИнвентаризация;
	
	Возврат Запрос;
	
КонецФункции

// Заполняет документ по остаткам на складе.
//
// Параметры:
//  ПараметрыЗаполнения - Структура - см. НовыеПараметрыЗаполнения().
// 
Функция ЗаполнитьПоОстаткамНаСкладе(ПараметрыЗаполнения)

	Запрос = ПодготовитьЗапросИнвентаризация(ПараметрыЗаполнения);
	
	ТаблицаТовары = Документы.ИнвентаризацияТоваровНаСкладе.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	// При оперативном проведении моментом актуальности является дата документа.
	// Если используется отложенное проведение, то отдельно определяются остатки
	// по количеству и сумме по счетам, которые рассчитываются оперативно, а по всем
	// остальным счетам цена определяется в целом за месяц аналогично тому,
	// как рассчитывает корректировка стоимости списания.
	РассчитатьЦеныНаМоментАктуальности(ТаблицаТовары, Ложь, Запрос, ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение Тогда
		// При отложенном проведении делаем второй вызов для счетов,
		// суммы по которым рассчитываются неоперативно (целиком за месяц),
		// поэтому момент актуальности - это конец месяца.
		РассчитатьЦеныНаМоментАктуальности(ТаблицаТовары, Истина, Запрос, ПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат ТаблицаТовары;
	
КонецФункции

Процедура РассчитатьЦеныНаМоментАктуальности(ТаблицаТовары, АктуальностьНаКонецМесяца, Запрос, ПараметрыЗаполнения)
	
	Если АктуальностьНаКонецМесяца Тогда // нужно рассчитать цену с учётом корректировки стоимости
		МоментАнализаЦены  = Новый Граница(КонецМесяца(ПараметрыЗаполнения.Дата), ВидГраницы.Включая);
		МоментНачалаМесяца = Новый Граница(НачалоМесяца(ПараметрыЗаполнения.Дата), ВидГраницы.Включая);
	ИначеЕсли ПараметрыЗаполнения.Дата = НачалоМесяца(ПараметрыЗаполнения.Дата) Тогда // используем только остатки
		МоментАнализаЦены  = Новый Граница(ПараметрыЗаполнения.Дата, ВидГраницы.Исключая);
		МоментНачалаМесяца = Новый Граница(ПараметрыЗаполнения.Дата - 1, ВидГраницы.Исключая);
	Иначе // нужно рассчитать цену на дату документа
		МоментАнализаЦены = ПараметрыЗаполнения.Дата;
		МоментНачалаМесяца = НачалоМесяца(ПараметрыЗаполнения.Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АктуальностьНаКонецМесяца", АктуальностьНаКонецМесяца);
	Запрос.УстановитьПараметр("НачалоМесяца",              МоментНачалаМесяца);
	Запрос.УстановитьПараметр("МоментАнализаЦены",         МоментАнализаЦены);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗаполнения.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	ТолькоПерезаполнение = (ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаТовары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет = Выборка.КоличествоУчет;
		СтрокаТабличнойЧасти.СчетУчета	    = Выборка.СчетУчета;
		
		Цена = ?(Выборка.КоличествоДляЦены = 0, 0, Выборка.СуммаДляЦены / Выборка.КоличествоДляЦены);
		
		СтрокаТабличнойЧасти.СуммаУчет = Цена * Выборка.КоличествоУчет;
		СтрокаТабличнойЧасти.Цена      = Цена;

		Если ТолькоПерезаполнение Тогда
			
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
			
			СтрокаТабличнойЧасти.Сумма        = Цена * Выборка.Количество;
			
		Иначе
			
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУчет;
			СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.СуммаУчет;
			Если ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
					ДанныеСклада.ТипЦенРозничнойТорговли, ПараметрыЗаполнения.Дата, ВалютаРегламентированногоУчета, 1, 1);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли