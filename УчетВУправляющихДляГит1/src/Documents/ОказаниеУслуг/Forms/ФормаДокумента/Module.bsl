// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// Событие "Запись_СчетФактураВыданный" обрабатывать незачем
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОказаниеУслуг";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СтруктураРеквизитовПодписи = Новый Структура;

	СтруктураРеквизитовПодписи.Вставить("Исполнитель", "ИсполнительНаОсновании");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОказаниеУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаПатенте Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
	Иначе
		Объект.Патент = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) И НЕ Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаиморасчетовПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидВзаиморасчетов)
		И Объект.Контрагенты.Количество() > 0 Тогда
		
		ВидВзаиморасчетовПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		НоменклатураПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	СуммаВключаетНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Объект.СчетДоходов);
		
	Если СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И ОсновнаяНоменклатурнаяГруппа <> Неопределено Тогда
		
		Объект.Субконто = ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетПСНКлиент.ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		Объект.Организация,
		Объект.Дата,
		СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Контрагенты>

&НаКлиенте
Процедура КонтрагентыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.Контрагенты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета, ВестиУчетПоДоговорам");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета;
	ДанныеОбъекта.ВестиУчетПоДоговорам           = ВестиУчетПоДоговорам;
	
	ДанныеСтроки	= Новый Структура(
		"Контрагент, ДоговорКонтрагента, Количество,
		|Цена, Сумма, СуммаНДС, Всего,
		|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	КонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагенты);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НоваяСтрока = Объект.Контрагенты.Добавить();
		НоваяСтрока.Контрагент = ВыбранноеЗначение;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ВыданСФ	   = ПлательщикНДС;
			
		ДанныеОбъекта	= Новый Структура("Дата, Организация, Номенклатура,
			|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета, ВестиУчетПоДоговорам");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
		ДанныеОбъекта.ВестиУчетПоДоговорам              = ВестиУчетПоДоговорам;
		
		ДанныеСтроки = Новый Структура(
			"Контрагент, ДоговорКонтрагента, Количество,
			|Цена, Сумма, СуммаНДС, Всего,
			|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
			|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрока);
		
		КонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		УправлениеФормой(ЭтаФорма);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыДоговорКонтрагентаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета, ВестиУчетПоДоговорам");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	ДанныеОбъекта.ВестиУчетПоДоговорам              = ВестиУчетПоДоговорам;
	
	ДанныеСтроки = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Количество,
		|Цена, Сумма, СуммаНДС, Всего,
		|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКоличествоПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыЦенаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыСуммаНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	СтрокаТаблицы.ВыданСФ = ПлательщикНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыСтроки(СтрокаТаблицы)

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СчетаФактуры>

&НаКлиенте
Процедура СчетаФактурыВыданСФПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СчетаФактуры.ТекущиеДанные;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыСчетФактураПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СчетаФактуры.ТекущиеДанные;
	
	СтрокаТаблицы.ВыданСФ	= ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыКонтрагентПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.СчетаФактуры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Контрагенты.Очистить();
		ЗаполнитьПоВидуВзаиморасчетовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуВзаиморасчетов(Команда)

	Если Объект.Контрагенты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Иначе
		ЗаполнитьПоВидуВзаиморасчетовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтрагенты(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,
		Элементы.Контрагенты, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиУстановить(Команда)

	УстановитьСнятьОтметкиНаСервере(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиСнять(Команда)

	УстановитьСнятьОтметкиНаСервере(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Субконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Субконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// КонтрагентыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтрагентыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетРасходовПоОказаниюУслуг", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента			= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	ТекущееЗначениеСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	
	ТекстНеобходимоЗаполнитьПатент  = УчетПСН.ТекстНеобходимоЗаполнитьПатент();
	
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Объект.СчетДоходов);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Внешний вид формы

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименениеУСН			= УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ			= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент	= УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам    = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Используется в условном оформлении
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Объект.Дата, Объект.Организация);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступШапка.Видимость  = Форма.ПрименяетсяУСНПатент И НЕ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступПодвал.Видимость = Форма.ПрименяетсяУСНПатент И НЕ Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовПатента.Видимость = 
		УчетПСНКлиентСервер.ПоказатьПредупреждениеНеобходимоЗаполнитьПатент(
			Объект.Организация,
			Объект.Патент,
			Форма.ПрименяетсяТолькоУСНПатент,
			Форма.ПрименяетсяНесколькоПатентов);
	
	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.СтавкаНДС.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Номенклатура);
	
	Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выписаны счета-фактуры на сумму %1 %3, в т.ч. НДС %2 %3'"),
		Формат(Объект.Контрагенты.Итог("СуммаСчетаФактуры"), "ЧЦ=15; ЧДЦ=2; ЧН="),
		Формат(Объект.Контрагенты.Итог("СуммаНДССчетаФактуры"), "ЧЦ=15; ЧДЦ=2; ЧН="),
		Строка(Форма.ВалютаРегламентированногоУчета));
	
	СуммаНДС	= Объект.Контрагенты.Итог("СуммаНДС");
	Элементы.СчетУчетаНДСПоРеализации.АвтоОтметкаНезаполненного	= (СуммаНДС > 0);
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного		= (СуммаНДС > 0);
	
	Если Форма.ИспользоватьОднуНоменклатурнуюГруппу И Форма.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам Тогда
		Элементы.Субконто.Видимость = Ложь;
	Иначе
		Элементы.Субконто.Видимость = Истина;
	КонецЕсли;
	
	Элементы.СуммаВключаетНДС.Видимость = НЕ (Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
	ОбновитьИтоги(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.Контрагенты.Итог("Всего");

КонецПроцедуры

// При изменении реквизитов

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	УчетПСН.ДатаПриИзменении(Объект);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидВзаиморасчетовПриИзмененииНаСервере()

	ДанныеОбъекта	= Новый Структура("Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета, ВестиУчетПоДоговорам");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	ДанныеОбъекта.ВестиУчетПоДоговорам              = ВестиУчетПоДоговорам;
	ВидыДоговоров = ПолучитьМассивВидовДоговоров();
	СтруктураОтбораДоговоров = Новый Структура(
		"ВидВзаиморасчетов, ВалютаВзаиморасчетов",
		Новый Структура("ЗначениеОтбора", Объект.ВидВзаиморасчетов),
		Новый Структура("ЗначениеОтбора", ВалютаРегламентированногоУчета));
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			СтрокаТаблицы.ДоговорКонтрагента, СтрокаТаблицы.Контрагент, Объект.Организация,
			ВидыДоговоров, СтруктураОтбораДоговоров);
		
		Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТаблицы, "Контрагенты");
		
		ЗаполнитьЦенуТабЧасти(СтрокаТаблицы, ДанныеОбъекта);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеСтроки, Знач ДанныеОбъекта)

	ВидыДоговоров = ПолучитьМассивВидовДоговоров();
	СтруктураОтбораДоговоров = Новый Структура(
		"ВидВзаиморасчетов, ВалютаВзаиморасчетов",
		Новый Структура("ЗначениеОтбора", ДанныеОбъекта.ВидВзаиморасчетов),
		Новый Структура("ЗначениеОтбора", ДанныеОбъекта.ВалютаРегламентированногоУчета));
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация,
		ВидыДоговоров, СтруктураОтбораДоговоров);
	
	Если НЕ ДанныеОбъекта.ВестиУчетПоДоговорам ИЛИ ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, Знач ДанныеОбъекта)

	Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, ДанныеСтроки, "Контрагенты");
	
	ЗаполнитьЦенуТабЧасти(ДанныеСтроки, ДанныеОбъекта);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтроки, 1);
	
	ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.Сумма, ДанныеОбъекта.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС));
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(ДанныеСтроки, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, ДеятельностьНаПатенте,
		|Номенклатура, ВидВзаиморасчетов, СуммаВключаетНДС, ВалютаРегламентированногоУчета,
		|Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета;
	ДанныеОбъекта.Реализация = Истина;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.Номенклатура, ДанныеОбъекта);
	
	Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект, СведенияОНоменклатуре);
	
	Объект.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	
	ДанныеОбъекта.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		ЗаполнитьЦенуТабЧасти(СтрокаТаблицы, ДанныеОбъекта);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СуммаВключаетНДСПриИзмененииНаСервере()

	СтароеСуммаВключаетНДС 			= ТекущееЗначениеСуммаВключаетНДС;
	ТекущееЗначениеСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
		
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТаблицы.Цена, СтароеСуммаВключаетНДС, Объект.СуммаВключаетНДС, ПроцентНДС);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, ПроцентНДС);
			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

// Прочий функционал

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоВидуВзаиморасчетовНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоВидуВзаиморасчетов();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметкиНаСервере(ВыданСФ)

	Отбор	= Новый Структура("ВыданСФ", НЕ ВыданСФ);
	НайденныеСтроки	= Объект.Контрагенты.НайтиСтроки(Отбор);
	СостояниеДокументаДляТЧ = ?(ВыданСФ, 1, 2);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.ВыданСФ = ВыданСФ;
		СтрокаТаблицы.СостояниеДокумента = СостояниеДокументаДляТЧ;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЦенуТабЧасти(ДанныеСтроки, Знач ДанныеОбъекта)

	ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ТипЦен");
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ДанныеОбъекта.Номенклатура,
			ТипЦен, ДанныеОбъекта.Дата, ДанныеОбъекта.ВалютаРегламентированногоУчета, 1, 1);
			
		ДанныеСтроки.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС"),
			ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС));
	Иначе
		ДанныеСтроки.Цена = 0;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Знач СуммаВключаетНДС)

	СтрокаТаблицы.Всего	= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.ВыданСФ Тогда
		СтрокаТаблицы.СуммаСчетаФактуры		= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.СуммаНДССчетаФактуры	= СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СостояниеДокумента 	= 1;
	Иначе
		СтрокаТаблицы.СуммаСчетаФактуры		= 0;
		СтрокаТаблицы.СуммаНДССчетаФактуры	= 0;
		СтрокаТаблицы.СостояниеДокумента 	= 2;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПатентПоУмолчанию(Организация, Знач Дата)
	
	Возврат УчетПСН.ПатентПоУмолчанию(Организация, Дата);
	
КонецФункции

&НаКлиенте
Процедура ПатентЗаполнениеРеквизитовЗавершение(ВыбранныйПатент, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если НЕ УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		Объект.Патент                = ВыбранныйПатент;
		
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Объект.ИсполнительНаОсновании = ПолучитьОснованиеПраваПодписиФизЛица(Объект.Исполнитель,Объект.Организация,Объект.дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОснованиеПраваПодписиФизЛица(ФизическоеЛицо,Организация,ДатаОтбор)
                                                                    
	Возврат Справочники.ОснованияПраваПодписи.ОснованиеПраваПодписиФизЛица(ФизическоеЛицо,Организация,ДатаОтбор);
	    
КонецФункции

#КонецОбласти
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
