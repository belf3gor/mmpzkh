#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьПоВидуВзаиморасчетов() Экспорт

	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",			Дата);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ВидДоговора",		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов",	ВидВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец.Наименование КАК НаименованиеКонтрагента,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ТипЦен КАК ТипЦен,
	|	ДоговорыКонтрагентов.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.ВидВзаиморасчетов = &ВидВзаиморасчетов
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|	И ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.Владелец.Наименование,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.ТипЦен,
	|	ДоговорыКонтрагентов.ТипЦен.ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.ВидВзаиморасчетов = &ВидВзаиморасчетов
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|	И НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.СрокДействия, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&ДатаСреза, МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеКонтрагента";
	
	ТаблицаДоговоров	= Запрос.Выполнить().Выгрузить();
	
	ЦеныНоменклатуры = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		МассивТиповЦен	= ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоговоров, "ТипЦен", Истина);
		
		Для Каждого ТипЦен Из МассивТиповЦен Цикл
			Цена	= 0;
			Если ЗначениеЗаполнено(ТипЦен) Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,
							ТипЦен, Дата, ВалютаРегламентированногоУчета, 1, 1);
			КонецЕсли;
			ЦеныНоменклатуры.Вставить(ТипЦен, Цена);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаДоговоров Цикл
		
		НоваяСтрока	= Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ЭтотОбъект, НоваяСтрока, "Контрагенты");
		
		НоваяСтрока.Количество	= 1;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЦен)
			И ЦеныНоменклатуры.Получить(СтрокаТаблицы.ТипЦен) <> Неопределено Тогда
			
			НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				ЦеныНоменклатуры.Получить(СтрокаТаблицы.ТипЦен),
				СтрокаТаблицы.ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
			
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.Сумма,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Заполнение реквизитов, специфичных для документа:
	Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОказаниеУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, Неопределено,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Таблицы выручки от реализации: собственных услуг
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтОказаниеУслуг(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты,
		ПараметрыПроведения.РеализацияРеквизиты, Отказ);

	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;

	Документы.ОказаниеУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчеты);
	
	// Учет доходов и расходов ИП
	ТаблицаОказаниеУслугИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.РеализацияРеквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыУслуги, Неопределено, Неопределено,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);

	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		Неопределено, // Не надо пересчитывать по курсу аванса
		ПараметрыПроведения.РеализацияРеквизиты);
	
	УчетНДС.СформироватьДвиженияОказаниеУслуг(
		ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		,
		Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	МассивНепроверяемыхРеквизитов.Добавить("Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПоРеализации");
	
	Если Не РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Дата, Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасходов");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагенты.ДоговорКонтрагента");
	КонецЕсли;
	
	Если Контрагенты.Итог("СуммаНДС") <> 0 И НЕ ЗначениеЗаполнено(СчетУчетаНДСПоРеализации) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", , НСтр("ru = 'Счет учета НДС по реализации'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СчетУчетаНДСПоРеализации", "Объект", Отказ);
		
	КонецЕсли;
	
	Если НЕ ДеятельностьНаПатенте Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Патент");
	КонецЕсли;
	
	Если ПлательщикНДФЛ Тогда
		
		УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
			ЭтотОбъект, "СчетДоходов", "Субконто", НСтр("ru = 'Субконто'"), , , Отказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(Контрагенты, ЭтотОбъект);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Контрагенты");
	
	СформироватьСчетаФактуры(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ РучнаяКорректировка Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Для каждого СтрокаТЧ Из Контрагенты Цикл
		СтрокаТЧ.ВыданСФ		= Ложь;
		СтрокаТЧ.СчетФактура	= Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	Перем РегистрыТребующиеОчисткиПоДокументам;
	
	Если Не УчетНДСБП.УстановитьУправляемуюБлокировку("СчетФактураВыданный", ПодчиненныеСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект);
	ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам", РегистрыТребующиеОчисткиПоДокументам);
	
	ОтборПоДокументуОснованию = Новый Структура("ДокументОснование", Ссылка);
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
		
		СФНеНужен = (ПометкаУдаления Или Не СтрокаСФ.Использован);
		
		Если СФНеНужен И СтрокаСФ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ГрупповоеПерепроведение);
		Если РегистрыТребующиеОчисткиПоДокументам <> Неопределено Тогда
			ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
				РегистрыТребующиеОчисткиПоДокументам);
		КонецЕсли;
		
		Если СФНеНужен И ДокументСФ.ДокументыОснования.Количество() <= 1 Тогда
			ДокументСФ.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
		Если СФНеНужен Тогда
				
			СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(ОтборПоДокументуОснованию);
			Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
				ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
			КонецЦикла;
			РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
		Иначе
			
			// Если в счете-фактуре несколько оснований, счет-фактура проводится, только если все основания проведены.
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ДокументСФ.ДокументыОснования.Количество() > 1 
				И УчетНДСБП.ЕстьНепроведеныеОснованияСчетаФактуры(ДокументСФ.ДокументыОснования, Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			ОбновитьНомераПлатежноРасчетныхДокументов(ДокументСФ, СтрокаСФ.Контрагент, СтрокаСФ.ДоговорКонтрагента);

		КонецЕсли;
		ДокументСФ.Записать(РежимЗаписиСФ);
	
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьСчетаФактуры(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ОказаниеУслуг.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = ЭтотОбъект.Контрагенты.ВыгрузитьКолонки("Контрагент, ДоговорКонтрагента, СчетФактура");
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Контрагенты Цикл
		Если СтрокаТабличнойЧасти.ВыданСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ДанныеСчетовФактур.Свернуть("Контрагент, ДоговорКонтрагента, СчетФактура");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(СтрокаТаблицы.Контрагент, "Выданный", Ложь) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
		
		ДокументСФ.Дата               	 = ЭтотОбъект.Дата;
		ДокументСФ.Организация        	 = ЭтотОбъект.Организация;
		ДокументСФ.Ответственный      	 = Пользователи.ТекущийПользователь();
		ДокументСФ.Контрагент         	 = СтрокаТаблицы.Контрагент;
		ДокументСФ.ДоговорКонтрагента 	 = СтрокаТаблицы.ДоговорКонтрагента;
		ДокументСФ.ВидСчетаФактуры    	 = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		ДокументСФ.КодВидаОперации	  	 = "01";
		ДокументСФ.КодСпособаВыставления = 1;
		
		Если НЕ УчетНДСПереопределяемый.НаличиеСоглашенияОбменаЭД(
			Новый Структура("Организация,Контрагент", ЭтотОбъект.Организация, СтрокаТаблицы.Контрагент)) Тогда
			
			ДокументСФ.Выставлен = Истина;
			ДокументСФ.ДатаВыставления = ЭтотОбъект.Дата;
			
		Иначе
			ДокументСФ.КодСпособаВыставления = 2;
		КонецЕсли;
		
		ДокументСФ.Комментарий	= НСтр("ru = 'Создан автоматически на основании документа оказания услуг'");
		
		ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
		
		ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументСФ);
		
		ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
		Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
			ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
				ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
		КонецЕсли;
		ДокументСФ.Записать();
		
		// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
		СтрокаСФ = ТаблицаСФ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Процедура ОбновитьНомераПлатежноРасчетныхДокументов(ДокументСФ, Контрагент, ДоговорКонтрагента)
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(Ссылка);
	
	Если ДокументСФ.ПлатежноРасчетныеДокументы.Количество() = 0 Тогда 
		ДокументСФ.ПлатежноРасчетныеДокументы.Очистить();
		ДокументСФ.ПлатежноРасчетныеДокументы.Загрузить(
			Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований, Контрагент, ДоговорКонтрагента));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаФактурыВДокументе()

	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Контрагенты Цикл
		Если СтрокаТабличнойЧасти.ВыданСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетФактураВыданный.Проведен,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументСсылка)
	|			И СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаСФ;

КонецФункции

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("Ссылка", СтрокаДокумента.СчетФактура);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если (НайденнаяСтрока.Контрагент = СтрокаДокумента.Контрагент ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент))
			И (НайденнаяСтрока.Контрагент = СтрокаДокумента.ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.ДоговорКонтрагента)) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Для Каждого НайденнаяСтрока Из ТаблицаСФ Цикл
		Если (НайденнаяСтрока.Контрагент = СтрокаДокумента.Контрагент ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент))
			И (НайденнаяСтрока.ДоговорКонтрагента = СтрокаДокумента.ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.ДоговорКонтрагента)) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли
