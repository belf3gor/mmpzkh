
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// С версии 3.0.31 устанавливаем по умолчанию флажок включенным и скрытым для пользователя
	Объект.ОтражатьВосстановлениеВКнигеПродаж = Истина;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеВосстановлениеНДСПоОбъектамНедвижимости";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ВосстановлениеНДСПоОбъектамНедвижимости.Форма.ФормаПодбораОбъектовНедвижимости" Тогда 
		ОбработкаВыбораПодборОбъектовНедвижимостиНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ВосстановлениеНДСПоОбъектамНедвижимости.Форма.ФормаПодбораСчетовФактур" Тогда 
		ОбработкаВыбораПодборСчетовФактурНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СостояниеРегламентнойОперации", 
		?(Объект.Проведен, ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"), 
						   ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено")));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ТекущаяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'При изменении организации табличные части будут очищены. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВосстановлениеВКнигеПродажПриИзменении(Элемент)
	
	Если Объект.ОтражатьВосстановлениеВКнигеПродаж Тогда
		
		НуженВопрос = ПроверитьИспользуетсяДляОперацийНеОблагаемыхНДС();		
		Если НуженВопрос Тогда
			НуженВопрос = Ложь;
			СтруктураОтбораСФ.Вставить("КодОперацииДляДекларации");
			
			Для Каждого СтрокаОбъектНедвижимости ИЗ Объект.ОбъектыНедвижимости Цикл
				
				СтруктураОтбораСФ.КлючСтроки = СтрокаОбъектНедвижимости.КлючСтроки;
				
				Для Каждого ВидЦенности ИЗ СтруктураВидовЦенности Цикл
					
					СтруктураОтбораСФ.КодОперацииДляДекларации = ВидЦенности.Значение;
					СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
					СуммаПоВидуЦенности = 0;
					СуммаВосстановленаПоВидуЦенности = 0;
					Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
						СуммаПоВидуЦенности = СуммаПоВидуЦенности + СтрокаСчетФактура.НДС;
						СуммаВосстановленаПоВидуЦенности = СуммаВосстановленаПоВидуЦенности + СтрокаСчетФактура.НДСВосстановлен;
					КонецЦикла;
					Если СтрокаОбъектНедвижимости[ВидЦенности.Ключ] <> СуммаПоВидуЦенности
						ИЛИ СтрокаОбъектНедвижимости[ВидЦенности.Ключ + "Восстановлена"] <> СуммаВосстановленаПоВидуЦенности Тогда
						НуженВопрос = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			СтруктураОтбораСФ.Удалить("КодОперацииДляДекларации");
		КонецЕсли;
		
		Если НуженВопрос Тогда
			
			ТекстВопроса = НСтр("ru = 'При установке флага суммы вычетов и восстановления объектов недвижимости,
				|которые используются для операций, не облагаемых НДС, будут заполнены по данным счетов-фактур. Продолжить?'");
				
			Оповещение = Новый ОписаниеОповещения("ВопросСуммыБудутЗаполненыПоДаннымСФЗавершение", ЭтотОбъект);	
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыНедвижимости

&НаКлиенте
Процедура ОбъектыНедвижимостиСуммаНДСПоПодряднымРаботамПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаНДСПоПодряднымРаботамВосстановлена = ПолучитьСуммуВосстановления(
		ТекущиеДанные.СуммаНДСПоПодряднымРаботам, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиСуммаНДСПоСМРДляСобственногоПотребленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена = ПолучитьСуммуВосстановления(
		ТекущиеДанные.СуммаНДСПоСМРДляСобственногоПотребления, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиСуммаНДСПоОбъектуНедвижимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаНДСПоОбъектуНедвижимостиВосстановлена = ПолучитьСуммуВосстановления(
		ТекущиеДанные.СуммаНДСПоОбъектуНедвижимости, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиДоляВыручкиНеОблагаемаяНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС > 100 Тогда 
		ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС = 100;
	КонецЕсли;
	
	СтруктураОтбораСФ.КлючСтроки = ТекущиеДанные.КлючСтроки;
	СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
	Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
		РассчитатьСуммыВосстановления(ТекущиеДанные, СтрокаСчетФактура);
	КонецЦикла;
	
	Если Объект.ОтражатьВосстановлениеВКнигеПродаж Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанные, , ЭтаФорма);
	Иначе
		ТекущиеДанные.СуммаНДСПоПодряднымРаботамВосстановлена = ПолучитьСуммуВосстановления(
			ТекущиеДанные.СуммаНДСПоПодряднымРаботам, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
		ТекущиеДанные.СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена = ПолучитьСуммуВосстановления(
			ТекущиеДанные.СуммаНДСПоСМРДляСобственногоПотребления, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
		ТекущиеДанные.СуммаНДСПоОбъектуНедвижимостиВосстановлена = ПолучитьСуммуВосстановления(
			ТекущиеДанные.СуммаНДСПоОбъектуНедвижимости, ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "СчетаФактуры".
		// Значение должно быть уникальным
		НеУстановлено = Истина;
		Кандидат = Объект.ОбъектыНедвижимости.Количество();
		СтруктураОтбора = Новый Структура("КлючСтроки", Кандидат);
		
		Пока НеУстановлено Цикл
			СтрокиОбъектыНедвижимости = Объект.ОбъектыНедвижимости.НайтиСтроки(СтруктураОтбора);
			Если СтрокиОбъектыНедвижимости.Количество() = 0 Тогда
				// Уникальное значение ключа
				Элементы.ОбъектыНедвижимости.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;
			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОтобразитьСчетаФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Необходимо очистить дополнительные сведения
	НоваяСтрока = ТаблицаУдаленныхКлючей.Добавить();
	НоваяСтрока.КлючСтроки = ТекДанные.КлючСтроки;
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ОбъектНедвижимости", ТекущиеДанные.ОбъектНедвижимости);
	СтрокиОбъектыНедвижимости = Объект.ОбъектыНедвижимости.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОбъектыНедвижимости.Количество() <> 0 Тогда
		Для Каждого СтрокаОбъектНедвижимости ИЗ СтрокиОбъектыНедвижимости Цикл
			Если СтрокаОбъектНедвижимости.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				ТекстОшибки = НСтр("ru='В табличной части уже есть строка с указанным объектом недвижимости 
					|(строка №  %НомерСтроки%)'");     
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокиОбъектыНедвижимости[0].НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, , "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиИспользуетсяДляОперацийНеОблагаемыхНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопрос = Ложь;
	СтруктураОтбораСФ.Вставить("КодОперацииДляДекларации");
	
	СтруктураОтбораСФ.КлючСтроки = ТекущиеДанные.КлючСтроки;
	
	Для Каждого ВидЦенности ИЗ СтруктураВидовЦенности Цикл
		
		СтруктураОтбораСФ.КодОперацииДляДекларации = ВидЦенности.Значение;
		СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
		СуммаПоВидуЦенности = 0;
		СуммаВосстановленаПоВидуЦенности = 0;
		Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
			СуммаПоВидуЦенности = СуммаПоВидуЦенности + СтрокаСчетФактура.НДС;
			СуммаВосстановленаПоВидуЦенности = СуммаВосстановленаПоВидуЦенности + СтрокаСчетФактура.НДСВосстановлен;
		КонецЦикла;
		Если ТекущиеДанные[ВидЦенности.Ключ] <> СуммаПоВидуЦенности
			ИЛИ ТекущиеДанные[ВидЦенности.Ключ + "Восстановлена"] <> СуммаВосстановленаПоВидуЦенности Тогда
			НуженВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбораСФ.Удалить("КодОперацииДляДекларации");
	
	Если ТекущиеДанные.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
		Если НуженВопрос И Объект.ОтражатьВосстановлениеВКнигеПродаж Тогда
			ТекстВопроса = НСтр("ru = 'При установке флага суммы вычетов и восстановления 
				|будут заполнены по данным счетов-фактур. Продолжить?'");
				
			Оповещение = Новый ОписаниеОповещения("ВопросСуммыВычетовИВосстановленияБудутЗаполненыПоДаннымСФЗавершение", ЭтотОбъект, ТекущиеДанные);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);	
		КонецЕсли;
	Иначе
		ТекущиеДанные.ДатаНачалаИспользованияДляОпераций = '00010101';
		ТекущиеДанные.ДоляВыручкиНеОблагаемаяНДС = 0;
		ТекущиеДанные.СуммаНДСПоПодряднымРаботамВосстановлена = 0;
		ТекущиеДанные.СуммаНДСПоСМРДляСобственногоПотребленияВосстановлена = 0;
		ТекущиеДанные.СуммаНДСПоОбъектуНедвижимостиВосстановлена = 0;
		СтруктураОтбораСФ.КлючСтроки = ТекущиеДанные.КлючСтроки;
		СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
		Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
			СтрокаСчетФактура.СуммаБезНДСВосстановлена = 0;
			СтрокаСчетФактура.НДСВосстановлен = 0;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиПриАктивизацииСтроки(Элемент)
	
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаФактуры

&НаКлиенте
Процедура СчетаФактурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Если ТекущиеДанныеОбъекта = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение( , "Сначала выделите объект недвижимости для добавления счетов-фактур!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.СчетаФактуры.ТекущиеДанные.КлючСтроки = Элементы.СчетаФактуры.ОтборСтрок.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.СуммаБезНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
	Если ТекущиеДанныеОбъекта = Неопределено 
		ИЛИ ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС = 0 Тогда
		ТекущиеДанные.СуммаБезНДСВосстановлена = 0;
		ТекущиеДанные.НДСВосстановлен = 0;
	Иначе
		ТекущиеДанные.СуммаБезНДСВосстановлена = ПолучитьСуммуВосстановления(
			ТекущиеДанные.СуммаБезНДС, ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС);
		ТекущиеДанные.НДСВосстановлен = ПолучитьСуммуВосстановления(
			ТекущиеДанные.НДС, ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС);
	КонецЕсли;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Ложь,
	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
	Если ТекущиеДанныеОбъекта = Неопределено 
		ИЛИ ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС = 0 Тогда
		ТекущиеДанные.НДСВосстановлен = 0;
	Иначе
		ТекущиеДанные.НДСВосстановлен = ПолучитьСуммуВосстановления(ТекущиеДанные.НДС, 
			ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС);
	КонецЕсли;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыНДСПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеОбъекта = Неопределено 
		ИЛИ ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС = 0 Тогда
		ТекущиеДанные.НДСВосстановлен = 0;
	Иначе
		ТекущиеДанные.НДСВосстановлен = ПолучитьСуммуВосстановления(ТекущиеДанные.НДС, 
			ТекущиеДанныеОбъекта.ДоляВыручкиНеОблагаемаяНДС);
	КонецЕсли;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыВидЦенностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СчетаФактуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКодОперацииДляДекларации = ПолучитьКодОперацииДляДекларации(ТекущиеДанные.ВидЦенности);
	Если НовыйКодОперацииДляДекларации <> Неопределено Тогда
		ТекущиеДанные.КодОперацииДляДекларации = НовыйКодОперацииДляДекларации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПослеУдаления(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтражатьВосстановлениеВКнигеПродаж Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыСуммаБезНДСВосстановленаПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыНДСВосстановленПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыКодОперацииДляДекларацииПриИзменении(Элемент)
	
	ТекущиеДанныеОбъекта = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъекта <> Неопределено Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъекта, , ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборОбъектыНедвижимости(Команда)
	
	АдресОбъектыНедвижимостиВХранилище = ПоместитьОбъектыНедвижимости();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Дата",        Объект.Дата );
	ПараметрыФормы.Вставить("АдресОбъектыНедвижимостиВХранилище", АдресОбъектыНедвижимостиВХранилище);
	
	ОткрытьФорму("Документ.ВосстановлениеНДСПоОбъектамНедвижимости.Форма.ФормаПодбораОбъектовНедвижимости",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектовНедвижимости(Команда)
	
	Если Объект.ОбъектыНедвижимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОбъектовНедвижимостиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолюВыручки(Команда)
	
	ДоляВыручкиНеОблагаемаяНДС = 0;
	ТекущиеДанныеОбъектНедвижимости = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъектНедвижимости <> Неопределено Тогда 
		ДоляВыручкиНеОблагаемаяНДС = ТекущиеДанныеОбъектНедвижимости.ДоляВыручкиНеОблагаемаяНДС;
	КонецЕсли;
	
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьДолюВыручкиЗавершение", ЭтотОбъект);
	
	ПоказатьВводЧисла(ОбработчикОповещенияОЗакрытии, ДоляВыручкиНеОблагаемаяНДС, НСтр("ru='Введите долю выручки, необлагаемую НДС (%)'"), 10, 2)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыНДСПоСФ(Команда)
	
	ТекстВопроса = НСтр("ru = 'Суммы вычетов и восстановления по объектам недвижимости 
		|будут заполнены по данным счетов-фактур. Продолжить?'");
		
	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСуммыНДСПоСФЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыНДСПоСФвСтроке(Команда)
	
	ТекущиеДанныеОбъектНедвижимости = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанныеОбъектНедвижимости = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Суммы вычетов и восстановления по %1
		|будут заполнены по данным счетов-фактур. Продолжить?'"),
		ТекущиеДанныеОбъектНедвижимости.ОбъектНедвижимости);
	
	Оповещение = Новый ОписаниеОповещения("ВопросСуммыНДСПоСФвСтрокеЗавершение", ЭтотОбъект, ТекущиеДанныеОбъектНедвижимости);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСчетовФактур(Команда)

	ДанныеСтроки = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Сначала выделите объект недвижимости для подбора счетов-фактур!'"));
		Возврат;
	КонецЕсли;

	АдресСчетаФактурыВХранилище = ПоместитьСчетФактуры(ДанныеСтроки.КлючСтроки);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Дата",        Объект.Дата );
	ПараметрыФормы.Вставить("КлючСтроки",  ДанныеСтроки.КлючСтроки);
	ПараметрыФормы.Вставить("ОсновноеСредство",  ДанныеСтроки.ОбъектНедвижимости);
	ПараметрыФормы.Вставить("АдресСчетаФактурыВХранилище", АдресСчетаФактурыВХранилище);
	
	ОткрытьФорму("Документ.ВосстановлениеНДСПоОбъектамНедвижимости.Форма.ФормаПодбораСчетовФактур",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетСписанияНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетСписанияНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВосстановлениеВКнигеПродаж", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетаФактурыСуммаБезНДСВосстановлена, СчетаФактурыНДСВосстановлен

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыСуммаБезНДСВосстановлена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыНДСВосстановлен");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОбъектыНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Поля не доступны для операций, необлагаемых НДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоОбъектуНедвижимости");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоПодряднымРаботам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоСМРДляСобственногоПотребления");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВосстановлениеВКнигеПродаж", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОбъектыНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ОбъектыНедвижимостиДатаНачалаИспользованияДляОпераций, ОбъектыНедвижимостиДоляВыручкиНеОблагаемаяНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиДатаНачалаИспользованияДляОпераций");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиДоляВыручкиНеОблагаемаяНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОбъектыНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Поля не доступны для операций, кроме необлагаемых НДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоОбъектуНедвижимостиВосстановлена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоПодряднымРаботамВосстановлена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыНедвижимостиСуммаНДСПоСМРДляСобственногоПотребленияВосстановлена");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОтражатьВосстановлениеВКнигеПродаж", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// СчетаФактурыНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетаФактурыНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СчетаФактуры.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СчетаФактуры.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ТекущаяОрганизация = Объект.Организация;
	Объект.ОбъектыНедвижимости.Очистить();
	Объект.СчетаФактуры.Очистить();
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСуммуВосстановления(Сумма, ДоляВыручки)
	
	Возврат Сумма * (ДоляВыручки/100) / 10;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыВосстановления(СтрокаОбъектНедвижимости, СтрокаСчетФактура)
	
	Если СтрокаСчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОбъектНедвижимости = Неопределено ИЛИ СтрокаОбъектНедвижимости.ДоляВыручкиНеОблагаемаяНДС = 0 Тогда
		СтрокаСчетФактура.СуммаБезНДСВосстановлена = 0;
		СтрокаСчетФактура.НДСВосстановлен = 0;
	Иначе
		СтрокаСчетФактура.СуммаБезНДСВосстановлена = ПолучитьСуммуВосстановления(СтрокаСчетФактура.СуммаБезНДС, 
			СтрокаОбъектНедвижимости.ДоляВыручкиНеОблагаемаяНДС);
		СтрокаСчетФактура.НДСВосстановлен = ПолучитьСуммуВосстановления(СтрокаСчетФактура.НДС, 
			СтрокаОбъектНедвижимости.ДоляВыручкиНеОблагаемаяНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммыПоСчетамФактурамВСтроке(СтрокаОбъектНедвижимости, УчитыватьНеиспользуемые = Ложь, Форма)
	
	Если СтрокаОбъектНедвижимости = Неопределено 
		ИЛИ (НЕ УчитыватьНеиспользуемые И НЕ СтрокаОбъектНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбораСФ = Форма.СтруктураОтбораСФ;
	Объект = Форма.Объект;
	СтруктураВидовЦенности = Форма.СтруктураВидовЦенности;
	
	СтруктураОтбораСФ.Вставить("КодОперацииДляДекларации");
	СтруктураОтбораСФ.КлючСтроки = СтрокаОбъектНедвижимости.КлючСтроки;
	
	Для Каждого ВидЦенности ИЗ СтруктураВидовЦенности Цикл
		
		СтруктураОтбораСФ.КодОперацииДляДекларации = ВидЦенности.Значение;
		СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
		СтрокаОбъектНедвижимости[ВидЦенности.Ключ] = 0;
		СтрокаОбъектНедвижимости[ВидЦенности.Ключ + "Восстановлена"] = 0;
		Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
			
			СтрокаОбъектНедвижимости[ВидЦенности.Ключ] = СтрокаОбъектНедвижимости[ВидЦенности.Ключ] + СтрокаСчетФактура.НДС;
			СтрокаОбъектНедвижимости[ВидЦенности.Ключ + "Восстановлена"] = 
				СтрокаОбъектНедвижимости[ВидЦенности.Ключ + "Восстановлена"] + СтрокаСчетФактура.НДСВосстановлен;
			
		КонецЦикла;
	КонецЦикла;
	
	СтруктураОтбораСФ.Удалить("КодОперацииДляДекларации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСчетаФактуры()
	
	ТекущиеДанные = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		// Включаем отбор по ключу из текущей строки табличной части "ОбъектыНедвижимости"
		ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", ТекущиеДанные.КлючСтроки); 
		
	Иначе
		
		// Текущая строка в таблице косвенных расходов не установлена
		ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", 0); 
		
	КонецЕсли;
	
	Элементы.СчетаФактуры.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодОперацииДляДекларации(ВидЦенности)
	
	Если ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение");
	ИначеЕсли ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.СМРПодрядные") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные");
	ИначеЕсли ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.СМРСобственнымиСилами") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ТекущиеДанныеОбъекты = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Элементы.ЗаполнитьСуммыНДСПоСФвСтроке.Доступность = (ТекущиеДанныеОбъекты <> Неопределено);
	
	Элементы.ГруппаСтраницаСчетаСписанияНДС.Видимость = Объект.ОтражатьВосстановлениеВКнигеПродаж;
	
	Для каждого КнопкаЗаполнить Из Элементы.ПодменюОбъектыНедвижимости.ПодчиненныеЭлементы Цикл
		КнопкаЗаполнить.Доступность = НЕ ТолькоПросмотр;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОбъектыНедвижимости()
	
	ТаблицаОбъектовНедвижимости = Объект.ОбъектыНедвижимости.Выгрузить(, "ОбъектНедвижимости, ДатаВводаВЭксплуатациюБУ, ДатаНачисленияАмортизацииНУ, СтоимостьОбъектаНедвижимости");

	ТаблицаОбъектовНедвижимости.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовНедвижимости.ЗаполнитьЗначения(Истина, "Выбран");

	АдресОбъектыНедвижимостиВХранилище = ПоместитьВоВременноеХранилище(ТаблицаОбъектовНедвижимости, УникальныйИдентификатор);
	
	Возврат АдресОбъектыНедвижимостиВХранилище;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборОбъектовНедвижимостиНаСервере(ВыбранноеЗначение)
	
	Результат = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОбъектыНедвижимостиВХранилище);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ОбъектНедвижимости");
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		СтруктураОтбора.ОбъектНедвижимости = СтрокаРезультата.ОбъектНедвижимости;
		СтрокиОбъектыНедвижимости = Объект.ОбъектыНедвижимости.НайтиСтроки(СтруктураОтбора);
		Если СтрокиОбъектыНедвижимости.Количество() <> 0 Тогда
			СтрокаРезультата.Выбран = Ложь;
			Для Каждого СтрокаОбъектНедвижимости ИЗ СтрокиОбъектыНедвижимости Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъектНедвижимости, СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбораКандидата = Новый Структура;
	СтруктураОтбораКандидата.Вставить("КлючСтроки",0); 
	
	Для каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Выбран Тогда
			НоваяСтрока = Объект.ОбъектыНедвижимости.Добавить();
			НоваяСтрока.ДатаВводаВЭксплуатациюБУ          = СтрокаРезультата.ДатаВводаВЭксплуатациюБУ;
			НоваяСтрока.ДатаНачисленияАмортизацииНУ       = СтрокаРезультата.ДатаНачисленияАмортизацииНУ;
			НоваяСтрока.ОбъектНедвижимости                = СтрокаРезультата.ОбъектНедвижимости;
			НоваяСтрока.СтоимостьОбъектаНедвижимости      = СтрокаРезультата.СтоимостьОбъектаНедвижимости;
			// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
			// "СчетаФактуры".
			// Значение должно быть уникальным
			НеУстановлено = Истина;
			Кандидат = Объект.ОбъектыНедвижимости.Количество();
			
			СтруктураОтбораКандидата.КлючСтроки = Кандидат;
			Пока НеУстановлено Цикл
				Если Объект.ОбъектыНедвижимости.НайтиСтроки(СтруктураОтбораКандидата).Количество() = 0 Тогда
					// Уникальное значение ключа
					НоваяСтрока.КлючСтроки = Кандидат;
					НеУстановлено = Ложь;
				Иначе
					// Такое значение ключа уже использовано
					Кандидат = Кандидат + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// Удалим ОСы, которые не были отобраны в форме подбора, но есть в ТЧ
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
		СтруктураОтбора.ОбъектНедвижимости = СтрокаОбъектНедвижимости.ОбъектНедвижимости;
		Если Результат.Найти(СтрокаОбъектНедвижимости.ОбъектНедвижимости, "ОбъектНедвижимости") = Неопределено Тогда
			СтруктураОтбораСФ.КлючСтроки = СтрокаОбъектНедвижимости.КлючСтроки;
			СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
			Для каждого СтрокаКУдалению Из СтрокиСчетаФактуры Цикл
				Объект.СчетаФактуры.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению.Добавить(СтрокаОбъектНедвижимости);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.ОбъектыНедвижимости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСчетФактуры(КлючСтроки)
	
	СтруктураПоиска = Новый Структура("КлючСтроки", КлючСтроки);
	НайденныеСтроки = Объект.СчетаФактуры.НайтиСтроки(СтруктураПоиска);

	ТаблицаСчетаФактуры = Объект.СчетаФактуры.Выгрузить(НайденныеСтроки);

	ТаблицаСчетаФактуры.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетаФактуры.ЗаполнитьЗначения(Истина, "Выбран");

	АдресСчетаФактурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаСчетаФактуры, УникальныйИдентификатор);
	
	Возврат АдресСчетаФактурыВХранилище;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборСчетовФактурНаСервере(ВыбранноеЗначение)
	
	Результат = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСчетаФактурыВХранилище);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбъектНедвижимости = Объект.ОбъектыНедвижимости[Элементы.ОбъектыНедвижимости.ТекущаяСтрока];
	Если СтрокаОбъектНедвижимости = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбораСФ = Новый Структура;
	СтруктураОтбораСФ.Вставить("КлючСтроки", СтрокаОбъектНедвижимости.КлючСтроки); 

	СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
	Для Каждого СтрокаСчетФактура Из СтрокиСчетаФактуры Цикл
		Объект.СчетаФактуры.Удалить(СтрокаСчетФактура);
	КонецЦикла;	

	Для Каждого СтрокаПодбора Из Результат Цикл
		СтрокаСчетФактура = Объект.СчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСчетФактура, СтрокаПодбора);
		СтрокаСчетФактура.КлючСтроки = СтрокаОбъектНедвижимости.КлючСтроки;
		
		РассчитатьСуммыВосстановления(СтрокаОбъектНедвижимости, СтрокаСчетФактура);
	КонецЦикла;
	
	ЗаполнитьСуммыПоСчетамФактурамВСтроке(СтрокаОбъектНедвижимости, , ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	ТекущаяОрганизация     = Объект.Организация;
	
	СтруктураОтбораСФ = Новый Структура("КлючСтроки");
	
	СтруктураВидовЦенности = Новый Структура;
	СтруктураВидовЦенности.Вставить("СуммаНДСПоПодряднымРаботам", 
		Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные);
	СтруктураВидовЦенности.Вставить("СуммаНДСПоСМРДляСобственногоПотребления", 
		Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные); 
	СтруктураВидовЦенности.Вставить("СуммаНДСПоОбъектуНедвижимости", 
		Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы",ПараметрыЗаполненияФормы) Тогда
	
		ЗаполнитьЗначенияСвойств(Форма.Объект,ПараметрыЗаполненияФормы);			
	
	КонецЕсли; 		

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСуммыНДСПоСФЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСуммыПоСчетамФактурам(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСуммыНДСПоСФвСтрокеЗавершение(Результат, ТекущиеДанныеОбъектНедвижимости) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанныеОбъектНедвижимости, Истина, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСуммыБудутЗаполненыПоДаннымСФЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
			Если СтрокаОбъектНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
				ЗаполнитьСуммыПоСчетамФактурамВСтроке(СтрокаОбъектНедвижимости, , ЭтаФорма);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект.ОтражатьВосстановлениеВКнигеПродаж = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСуммыВычетовИВосстановленияБудутЗаполненыПоДаннымСФЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(ТекущиеДанные, , ЭтаФорма);
	Иначе
		ТекущиеДанные.ИспользуетсяДляОперацийНеОблагаемыхНДС = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолюВыручкиЗавершение(ДоляВыручкиНеОблагаемаяНДС, ДополнительныеПараметры) Экспорт
	
	Если ДоляВыручкиНеОблагаемаяНДС <> Неопределено Тогда
		
		Если ДоляВыручкиНеОблагаемаяНДС > 100 Тогда 
			ДоляВыручкиНеОблагаемаяНДС = 100;//Больше 100% доля выручки быть не может
		ИначеЕсли ДоляВыручкиНеОблагаемаяНДС < 0 Тогда 
			ДоляВыручкиНеОблагаемаяНДС = 0;//Меньше 0% доля выручки быть не может
		КонецЕсли;
		
		Для Каждого СтрокаОбъектНедвижимости ИЗ Объект.ОбъектыНедвижимости Цикл
			Если СтрокаОбъектНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
				СтрокаОбъектНедвижимости.ДоляВыручкиНеОблагаемаяНДС = ДоляВыручкиНеОблагаемаяНДС;
				СтруктураОтбораСФ.КлючСтроки = СтрокаОбъектНедвижимости.КлючСтроки;
				СтрокиСчетаФактуры = Объект.СчетаФактуры.НайтиСтроки(СтруктураОтбораСФ);
				Для Каждого СтрокаСчетФактура ИЗ СтрокиСчетаФактуры Цикл
					РассчитатьСуммыВосстановления(СтрокаОбъектНедвижимости, СтрокаСчетФактура);
				КонецЦикла;
				ЗаполнитьСуммыПоСчетамФактурамВСтроке(СтрокаОбъектНедвижимости, , ЭтаФорма);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОбъектовНедвижимостиСервер()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ВосстановлениеНДСПоОбъектамНедвижимости"));
	СписокОбъектов = ДокОбъект.ОбъектыНедвижимости.ВыгрузитьКолонку("ОбъектНедвижимости");
	
	СтоимостьОбъектов = Документы.ВосстановлениеНДСПоОбъектамНедвижимости.ПолучитьПараметрыОСпоСписку(Объект.Дата,
		Объект.Организация, СписокОбъектов).Выбрать();
	
	Если СтоимостьОбъектов.Количество() <> 0 Тогда
		
		СтруктураОтбора = Новый Структура("ОбъектНедвижимости");
		Пока СтоимостьОбъектов.Следующий()  Цикл
			СтруктураОтбора.ОбъектНедвижимости = СтоимостьОбъектов.ОбъектНедвижимости;
			СтрокиОбъектыНедвижимости = ДокОбъект.ОбъектыНедвижимости.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаОбъектНедвижимости ИЗ СтрокиОбъектыНедвижимости Цикл 
				ЗаполнитьЗначенияСвойств(СтрокаОбъектНедвижимости, СтоимостьОбъектов);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИспользуетсяДляОперацийНеОблагаемыхНДС()
	
	КолонкаТаблицы = Объект.ОбъектыНедвижимости.Выгрузить(,"ИспользуетсяДляОперацийНеОблагаемыхНДС");
	Ответ = КолонкаТаблицы.Найти(Истина, "ИспользуетсяДляОперацийНеОблагаемыхНДС") <> Неопределено;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСуммыПоСчетамФактурам(УчитыватьНеиспользуемые = Ложь)
	
	Для каждого СтрокаОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
		ЗаполнитьСуммыПоСчетамФактурамВСтроке(СтрокаОбъектНедвижимости, УчитыватьНеиспользуемые, ЭтаФорма);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для Каждого СтрокаКлюча Из ТаблицаУдаленныхКлючей Цикл
		
		КлючПоиска = Новый Структура("КлючСтроки", СтрокаКлюча.КлючСтроки);
		МассивСтрокСФ = Объект.СчетаФактуры.НайтиСтроки(КлючПоиска);
		
		Для каждого СтрокаТЧ Из МассивСтрокСФ Цикл
			Объект.СчетаФактуры.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "Подразделение", "СубконтоСписанияНДС", "ПодразделениеСписания", "СчетСписанияНДС");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
