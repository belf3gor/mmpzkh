////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Материалы",				"Материалы");
	СписокТабличныхЧастей.Добавить("МатериалыЗаказчика",	"МатериалыЗаказчика");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ТребованиеНакладная",
		"ФормаДокумента",
		НСтр("ru='Новости: Требование-накладная'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТребованиеНакладная.Форма.ФормаКомиссия" Тогда
		ОбработкаВыбораКомиссия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеТребованиеНакладная";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ЗаполнитьЗависимыеСчета("ПодразделениеОрганизации");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьЗависимыеСчета("Склад");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦельРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВводЦелейРасходаМатериаловКлиент.ЦельРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаЗатратВТаблицеПриИзменении(Элемент)
	
	СчетаУчетаЗатратВТаблицеПриИзмененииНаСервере(Ложь);
	
	Если Объект.СчетаУчетаЗатратВТаблице И Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru = 'Заполнить статьи затрат в списке ""Материалы"" значениями по умолчанию?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСтатьиЗатратЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)

	Если Объект.НДСвСтоимостиТоваров <> ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость") Тогда
		Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 1;
	ИначеЕсли Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0 Тогда
		ЗаполнитьЗависимыеСчетаНаКлиенте("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	ПрименитьНДСВСтоимостиТоваров(ЭтаФорма);
	
	Если Элементы.АналитикаЗатратНДС.Видимость Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)

	Если Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0 Тогда
		ЗаполнитьЗависимыеСчетаНаКлиенте("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
	КонецЕсли;
	
	ПрименитьНДСВСтоимостиТоваров(ЭтаФорма);
	
	Если Элементы.АналитикаЗатратНДС.Видимость Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)

	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНДС(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Материалы>

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	КонтейнерОбъект = Новый Структура;
	
	КонтейнерСтрока = Новый Структура("Номенклатура, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Материалы.Номенклатура",
		Объект,
		ТекущиеДанные,
		КонтейнерОбъект,
		КонтейнерСтрока);
		
	// Заполним
	Изменения = МатериалПриИзмененииНаСервере(КонтейнерСтрока, КонтейнерОбъект, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Материалы.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент	= 1;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;
	
	ТекущиеДанные	= Элементы.Материалы.ТекущиеДанные;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",	Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",	Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",	ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",		ТекущиеДанные.Счет);
	ПараметрыОбъекта.Вставить("Склад",			Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов",	"Метаданные.Документы.ТребованиеНакладная.ТабличныеЧасти.Материалы.Реквизиты.ДокументОприходования.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость	= 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетЗатратПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(НачатьЗаполнениеСчетовУчета("Материалы.СчетЗатрат", Объект, ТекущиеДанные));
	
	ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.Себестоимость = 0;
		Элемент.ТекущиеДанные.ДокументОприходования = Неопределено;
		
	ИначеЕсли НоваяСтрока Тогда
		ДанныеТекущейСтроки = Элементы.Материалы.ТекущиеДанные;
		
		РеквизитыДляПереносаИзШапки = Новый Массив;
		РеквизитыДляПереносаИзШапки.Добавить("СчетЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("ПодразделениеЗатрат");
		РеквизитыДляПереносаИзШапки.Добавить("СпособУчетаНДС");
		
		Изменения = Новый Массив;
		
		Для Каждого ИмяРеквизита Из РеквизитыДляПереносаИзШапки Цикл
		
			Если ДанныеТекущейСтроки.Свойство(ИмяРеквизита) 
				И Не ЗначениеЗаполнено(ДанныеТекущейСтроки[ИмяРеквизита]) 
				И Объект.Свойство(ИмяРеквизита) 
				И ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
				
				ДанныеТекущейСтроки[ИмяРеквизита] = Объект[ИмяРеквизита];
				Изменения.Добавить("Материалы." + ИмяРеквизита);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Изменения.Количество() > 0 Тогда
		
			ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(Изменения, Объект, ДанныеТекущейСтроки);
			СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
			ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(ДанныеТекущейСтроки);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("Материалы.НоменклатурнаяГруппа", Объект, Элементы.Материалы.ТекущиеДанные);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МатериалыНомерГТДЗавершение", 
		ЭтотОбъект, Новый Структура("Форма", ЭтотОбъект));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <МатериалыЗаказчика>

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	ДанныеОбъекта = Новый Структура;
	
	ДанныеСтроки = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"МатериалыЗаказчика.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтроки);
		
	Изменения = МатериалЗаказчикаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Изменения);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбработкаПодбораМатериалы(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМатериалыЗаказчика(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("МатериалыЗаказчика");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",		ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента", 		Объект.Дата);
	АдресХранилищаСоставКомиссии = ПоместитьСоставКомиссииВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаСоставКомиссии", АдресХранилищаСоставКомиссии); 
	
	ОткрытьФорму("Документ.ТребованиеНакладная.Форма.ФормаКомиссия", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Реквизиты отображаются, если установлен флаг "Счета учета затрат в таблице".

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыНоменклатурнаяГруппа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСчетЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСтатьяЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПодразделениеЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СчетаУчетаЗатратВТаблице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Контрагент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтмечатьПустогоКонтрагента", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// МатериалыДокументОприходования, МатериалыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыСебестоимость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Материалы.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Материалы.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);
				
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// МатериалыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.Себестоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// МатериалыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));



	// МатериалыПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыПодразделениеЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// СчетЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтмечатьПустойСчетЗатрат", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтмечатьПустойСпособУчетаНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеВидимостью();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
		
	УправлениеФормой(ЭтаФорма);

	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Форма.ОтмечатьПустойСчетЗатрат		= Объект.Материалы.Количество() > 0;
	Форма.ОтмечатьПустойСпособУчетаНДС	= Объект.Материалы.Количество() > 0;
	
	Форма.ОтмечатьПустогоКонтрагента	= Объект.МатериалыЗаказчика.Количество() > 0;
	
	ПрименитьНДСВСтоимостиТоваров(Форма);
	
	// Может оказаться так, что отображается только одна страница. 
	// В таком случае убираем отображение страниц
	Если НужноУбратьЗакладкиСтраниц(Объект) Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НужноУбратьЗакладкиСтраниц(Объект)

	Возврат НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("ВедетсяПроизводственнаяДеятельность", Объект) 
		И (НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() ИЛИ Объект.СчетаУчетаЗатратВТаблице) 
		И НЕ ОбщегоНазначенияБПВызовСервера.ПолучитьФункциональнуюОпциюОбъекта("РаздельныйУчетНДСДо2014Года", Объект)

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНДСВСтоимостиТоваров(Форма)
	
	НДСВключитьВСтоимость = (Форма.Объект.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость"));
	
	Форма.Элементы.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат.Видимость = НДСВключитьВСтоимость;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Форма.Элементы.АналитикаЗатратНДС.Видимость = НДСВключитьВСтоимость И (Форма.Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()

	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.СтраницаСчетЗатрат.Видимость = НЕ Объект.СчетаУчетаЗатратВТаблице;
	КонецЕсли;
	
	ПрименитьНДСВСтоимостиТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) =
		Перечисления.СпособыОценки.ПоСредней);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТабЧасти Из Объект.Материалы Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти)
	
	Если СтрокаТабЧасти.Свойство("ПодразделениеЗатратДоступность") И СтрокаТабЧасти.Свойство("СчетЗатрат") Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабЧасти.СчетЗатрат) И СтрокаТабЧасти.ПодразделениеЗатратДоступность Тогда
			СтрокаТабЧасти.ПодразделениеЗатратДоступность = Ложь;
		Иначе
			СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабЧасти.СчетЗатрат);
			СтрокаТабЧасти.ПодразделениеЗатратДоступность = СвойстваСчета.УчетПоПодразделениям;
		КонецЕсли;
	КонецЕсли;
	
	// СчетУчета
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() 
		И ЗначениеЗаполнено(СтрокаТабЧасти.Счет) Тогда
		СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабЧасти.Счет);
		СтрокаТабЧасти.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		СтрокаТабЧасти.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			ИЛИ СвойстваСчета.ВидСубконто2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии")
			ИЛИ СвойстваСчета.ВидСубконто3 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗависимыеСчета("Дата");

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗависимыеСчета("Организация");
	
	// Счета могли поменяться на значения по умолчанию.
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	Объект.СоставКомиссии.Очистить();
	Документы.ТребованиеНакладная.ЗаполнитьСоставКомиссии(Объект.СоставКомиссии, Объект.Организация);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СчетаУчетаЗатратВТаблицеПриИзмененииНаСервере(ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию)
	
	УправлениеВидимостью();
	
	УправлениеФормой(ЭтаФорма);

	// Дозаполним табличную часть
	Если Не Объект.СчетаУчетаЗатратВТаблице Или Объект.Материалы.Количество() = 0 Или Не ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;
		
	СвойстваСчетаЗатрат	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетЗатрат);
	
	Для Индекс = 1 По СвойстваСчетаЗатрат.КоличествоСубконто Цикл
		Если СвойстваСчетаЗатрат["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			НоменклатурнаяГруппа	= Объект["Субконто" + Индекс];
		ИначеЕсли СвойстваСчетаЗатрат["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
			СтатьяЗатрат	        = Объект["Субконто" + Индекс];
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		
		СтрокаТабличнойЧасти.СчетЗатрат				= Объект.СчетЗатрат;
		СтрокаТабличнойЧасти.ПодразделениеЗатрат	= Объект.ПодразделениеЗатрат;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.СпособУчетаНДС			= Объект.СпособУчетаНДС;
		Если Не ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтатьяЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию Тогда
		ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию();
	КонецЕсли;
			
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию()
	
	// Воспользуемся той же логикой, что заполняет статьи при заполнении счетов учета
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("Материалы.СчетЗатрат", Объект);
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Очистить();
	ПараметрыЗаполненияСчетовУчета.КЗаполнению.Вставить("Материалы.СтатьяЗатрат", Истина);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаголовокПодбора(Ссылка, ПредставлениеТаблицы)
    
    Если Ссылка.Пустая() Тогда
    
    	ПредставлениеДокумента = Ссылка.Метаданные().Представление();
    
    Иначе
    
    	ПредставлениеДокумента = Строка(Ссылка);
    
    КонецЕсли; 

    Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подбор номенклатуры в %1 (%2)'"),
		ПредставлениеДокумента, ПредставлениеТаблицы);

КонецФункции 
 
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ПараметрыФормы.Вставить("ВидПодбора", "");
	
	Если ИмяТаблицы = "Материалы" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Материалы'");
		ПараметрыФормы.Вставить("ПоказыватьЗабалансовыеОстатки", Ложь);
	ИначеЕсли ИмяТаблицы = "МатериалыЗаказчика" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Материалы заказчика'");
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыФормы.Вставить("ВидПодбора", "МатериалыЗаказчика");
	КонецЕсли;
	
	ЗаголовокПодбора = ПолучитьЗаголовокПодбора(Объект.Ссылка, ПредставлениеТаблицы);
    
	ПараметрыФормы.Вставить("ЕстьЦена",            Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",      Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",        ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта",              ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",       Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад",               Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",           ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",          ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",              Ложь);
	ПараметрыФормы.Вставить("ПоказыватьОстатки",   Истина);
	ПараметрыФормы.Вставить("ПоказыватьОтрицательныеОстатки",   Ложь);
	Параметрыформы.Вставить("ПоказыватьЦены",      Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если ЭтоВставкаИзБуфера
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
			СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент), 
			СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
	
		Если ИмяТаблицы = "Материалы" Тогда
			
			СтрокаТабличнойЧасти.ОтражениеВУСН			= Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
				СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
			СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
				СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа),
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа, СведенияОНоменклатуре.НоменклатурнаяГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ТребованиеНакладная);
	
	Если ИмяТаблицы = "Материалы" Тогда
		Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетов Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;	
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКомиссия(ВыбранноеЗначение)
	
	Если ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
		ПолучитьСоставКомиссииИзВременногоХранилищаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСоставКомиссииИзВременногоХранилищаНаСервере(АдресХранилищаСоставКомиссии)
	
	Объект.СоставКомиссии.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилищаСоставКомиссии));
	УдалитьИзВременногоХранилища(АдресХранилищаСоставКомиссии);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСоставКомиссииВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.СоставКомиссии.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция МатериалПриИзмененииНаСервере(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Результат = Новый Структура; // Может быть переопределена ниже, при вызове ЗначенияРеквизитовОбъекта
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Результат.Вставить("ЕдиницаИзмерения");
		Результат.Вставить("НомерГТД");
		Результат.Вставить("СтранаПроисхождения");
		Результат.Вставить("НоменклатурнаяГруппа");
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Номенклатура, Результат);
		
		ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
		Если ОсновнаяНоменклатурнаяГруппа <> Неопределено 
			И НЕ ЗначениеЗаполнено(Результат.НоменклатурнаяГруппа) Тогда
			Результат.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
		КонецЕсли;
		Результат.Вставить("Коэффициент", 1);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
		Результат.Вставить("ОтражениеВУСН", Перечисления.ОтражениеВУСН.Принимаются);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ТребованиеНакладная,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Материалы",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Если Результат.Свойство("СчетЗатрат") Тогда
		Результат.Вставить("ПодразделениеЗатратДоступность");
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция МатериалЗаказчикаПриИзмененииНаСервере(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Результат.Вставить("ЕдиницаИзмерения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "ЕдиницаИзмерения"));
		Результат.Вставить("Коэффициент",      1);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ТребованиеНакладная,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"МатериалыЗаказчика",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура МатериалыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСтатьиЗатратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСтатьиЗатратЗначениямиПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры


#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("МатериалыСчет");
	ЭлементыСчетов.Добавить("МатериалыСчетЗатрат");
	ЭлементыСчетов.Добавить("МатериалыПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("МатериалыСтатьяЗатрат");
	ЭлементыСчетов.Добавить("МатериалыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("СчетЗатрат");
	ЭлементыСчетов.Добавить("ПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("СпособУчетаНДС");
	ЭлементыСчетов.Добавить("МатериалыЗаказчикаСчет");
	ЭлементыСчетов.Добавить("МатериалыЗаказчикаСчетПередачи");
	
	ЭлементыСчетов.Добавить("АналитикаЗатратНДС");       // Содержит настройки, связанные со счетами
	ЭлементыСчетов.Добавить("СтраницаСчетЗатрат");       // Содержит надписи про счета учета, видимость управляется также в УстановитьВидимостьСчетовУчета()
	ЭлементыСчетов.Добавить("СчетаУчетаЗатратВТаблице"); // Настройка, связанная со счетами
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ТребованиеНакладная",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СтатьяЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.НоменклатурнаяГруппа");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СтатьяЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.НоменклатурнаяГруппа");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// СчетаУчетаЗатратВТаблице
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетаУчетаЗатратВТаблице") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СтатьяЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.НоменклатурнаяГруппа");
	КонецЕсли;

	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.ПодразделениеЗатрат");
	КонецЕсли;

	// НДСвСтоимостиТоваров
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетСписанияНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// СчетСписанияНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоСписанияНДС3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// Материалы.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СтатьяЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.НоменклатурнаяГруппа");
	КонецЕсли;

	// Материалы.СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СтатьяЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.НоменклатурнаяГруппа");
	КонецЕсли;

	// Материалы.НоменклатурнаяГруппа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.НоменклатурнаяГруппа") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Материалы.СпособУчетаНДС");
	КонецЕсли;

	// МатериалыЗаказчика.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.Счет");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// МатериалыЗаказчика.Счет
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Счет") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "МатериалыЗаказчика.СчетПередачи");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// СчетаУчетаЗатратВТаблице
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетаУчетаЗатратВТаблице") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
		КонецЕсли;

		// НДСвСтоимостиТоваров
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСвСтоимостиТоваров") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// СчетСписанияНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетСписанияНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетСписанияНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСвСтоимостиТоваров");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоСписанияНДС3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// Материалы.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
		КонецЕсли;

		// Материалы.СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетаУчетаЗатратВТаблице");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Материалы.НоменклатурнаяГруппа
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Материалы.НоменклатурнаяГруппа") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НоменклатурнаяГруппа");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// МатериалыЗаказчика.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
		КонецЕсли;

		// МатериалыЗаказчика.Счет
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("МатериалыЗаказчика.Счет") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Счет");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетПередачи");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗависимыеСчета(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	Изменения.Вставить("Материалы");// Точно не знаем, что изменился этот список, но раз уж на сервере, то заполним
	НастроитьСубконто(ЭтаФорма, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗависимыеСчетаНаКлиенте(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконто(Форма, Изменения)
	
	Если Изменения.Свойство("Материалы") Тогда
		Для Каждого СтрокаТабЧасти Из Форма.Объект.Материалы Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабЧасти);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "СтраницаМатериалы" Тогда
		ИмяТаблицы = "Материалы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаМатериалыЗаказчика" Тогда	
		ИмяТаблицы = "МатериалыЗаказчика";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	// Общие свойства для разных табличных частей
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	
	Если ПараметрыВставки.ИмяТаблицы = "Материалы" Тогда
		
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("Счет");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетЗатрат");
				СписокСвойств.Добавить("СтатьяЗатрат");
				СписокСвойств.Добавить("ПодразделениеЗатрат");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("ДокументОприходования");
			СписокСвойств.Добавить("НоменклатурнаяГруппа");
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "МатериалыЗаказчика" Тогда
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			СписокСвойств.Добавить("Счет");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетПередачи");
			КонецЕсли;
		КонецЕсли;	
			
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	
	Элементы.МатериалыВставитьСтроки.Доступность				= Доступность;
	Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность	= Доступность;
	
	Элементы.МатериалыЗаказчикаВставитьСтроки.Доступность				 = Доступность;
	Элементы.МатериалыЗаказчикаКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"Субконто", "ПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
		
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконтоНДС(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНДС(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконтоНДС(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНДС(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСписанияНДС", "", "СубконтоСписанияНДС", "", "СчетСписанияНДС");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура МатериалыСчетПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(ТекущиеДанные);
КонецПроцедуры

#Область ПроцедурыПодсистемыКвартплаты

// Квартплата +

&НаКлиенте
// Обрабочик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещение формы документа "Заявка на выполнение работ".
	Оповестить("Запись_ТребованиеНакладная", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

// Квартплата -

#КонецОбласти
