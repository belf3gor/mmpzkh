#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 12, 0);
	
КонецФункции

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатрат",         "ИспользованиеМатериалов");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СписокЗаполнен");// Счет важен только для собственных материалов
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Список", "Материалы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СчетаУчетаЗатратВШапке");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",            "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",            "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",            "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СпособУчетаНДС", "СпособУчетаНДСИспользованного");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СчетаУчетаЗатратВШапке");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СписокЗаполнен");// Важен только для собственных материалов
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Список", "Материалы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Субконто1", "НоменклатурнаяГруппаСубконто1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Субконто2", "НоменклатурнаяГруппаСубконто2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Субконто3", "НоменклатурнаяГруппаСубконто3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетСписанияНДС",    "ЗатратыНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СписатьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОтдельнаяАналитикаСписанияНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СписокЗаполнен");// Важен только для собственных материалов
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Список", "Материалы");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоСписанияНДС3", "СубконтоЗатрат3");
	
	// Табличная часть Материалы
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Материалы", "Счет",           "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Материалы", "СчетЗатрат",     "ИспользованиеМатериалов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СтатьяЗатрат",        "СтатьяЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "НоменклатурнаяГруппа",        "НоменклатурнаяГруппа");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Материалы", "СпособУчетаНДС", "СпособУчетаНДСИспользованного");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	
	// Табличная часть МатериалыЗаказчика
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "МатериалыЗаказчика", "Счет", "МатериалыПринятыеВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетПередачи", "МатериалыПринятыеВПереработкуВПроизводстве");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Материалы");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетаУчетаЗатратВТаблице"); // Для одноименного условия
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"СчетаУчетаЗатратВШапке", // Для одноименного условия
		"СчетаУчетаЗатратВТаблице");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"СписатьНДС", // Для одноименного условия
		"НДСвСтоимостиТоваров");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"ОтдельнаяАналитикаСписанияНДС", // Для одноименного условия
		"ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат");
	
	Возврат Правила;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("СписатьНДС") Тогда
		ДанныеЗаполнения.СписатьНДС = (ДанныеЗаполнения.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ОтдельнаяАналитикаСписанияНДС") Тогда
		// Реквизит имеет тип число
		ДанныеЗаполнения.ОтдельнаяАналитикаСписанияНДС = (ДанныеЗаполнения.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 0);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СчетаУчетаЗатратВШапке") Тогда
		ДанныеЗаполнения.СчетаУчетаЗатратВШапке = (ДанныеЗаполнения.СчетаУчетаЗатратВТаблице = Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура ЗаполнитьСоставКомиссии(СоставКомиссии, Организация) Экспорт 
	
	Если СоставКомиссии.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТребованиеНакладная.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоследнийДокумент
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Организация = &Организация
	|	И ТребованиеНакладная.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяСоставКомиссии.НомерСтроки КАК НомерСтроки,
	|	ТребованиеНакладнаяСоставКомиссии.ФизЛицо КАК ФизЛицо,
	|	ТребованиеНакладнаяСоставКомиссии.Должность КАК Должность
	|ИЗ
	|	ПоследнийДокумент КАК ПоследнийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная.СоставКомиссии КАК ТребованиеНакладнаяСоставКомиссии
	|		ПО ПоследнийДокумент.Ссылка = ТребованиеНакладнаяСоставКомиссии.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСоставКомиссии = СоставКомиссии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСоставКомиссии, Выборка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	Реквизиты        = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("ПлательщикНДС",  УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПлательщикНДФЛ", УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	
	Запрос.УстановитьПараметр("СинонимМатериалы",			НСтр("ru = 'Материалы'"));
	Запрос.УстановитьПараметр("СинонимМатериалыЗаказчика",	НСтр("ru = 'Материалы заказчика'"));
	
	Запрос.УстановитьПараметр("СодержаниеСписаниеМатериаловНаИздержки",			"Списание материалов на издержки");
	Запрос.УстановитьПараметр("СодержаниеСписаниеМатериаловНаПрочиеРасходы",	"Списание материалов на прочие расходы");
	Запрос.УстановитьПараметр("СодержаниеСписаниеМатериаловВПроизводство",		"Списание материалов в производство");
	
	Запрос.УстановитьПараметр("СодержаниеСписаниеДавальческихНаИздержки",		"Списание давальческих материалов на издержки");
	Запрос.УстановитьПараметр("СодержаниеСписаниеДавальческихНаПрочиеРасходы",	"Списание давальческих материалов на прочие расходы");
	Запрос.УстановитьПараметр("СодержаниеСписаниеДавальческихВПроизводство",	"Списание давальческих материалов в производство");
	
	Запрос.УстановитьПараметр("Субсчета44",	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыНаПродажу));
	Запрос.УстановитьПараметр("Субсчета91",	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Результат = Запрос.ВыполнитьПакет();
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ИПРеквизиты", ПараметрыПроведения.МатериалыРеквизиты);
	Иначе
		ПараметрыПроведения.Вставить("ИПРеквизиты", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьМатериалы) КАК ЕстьМатериалы,
	|	МАКСИМУМ(СоставДокумента.ЕстьМатериалыЗаказчика) КАК ЕстьМатериалыЗаказчика
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьМатериалы,
	|		ЛОЖЬ КАК ЕстьМатериалыЗаказчика
	|	ИЗ
	|		Документ.ТребованиеНакладная.Материалы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетаУчетаЗатратВТаблице,
	|	Реквизиты.СчетЗатрат,
	|	Реквизиты.ПодразделениеЗатрат,
	|	Реквизиты.Субконто1,
	|	Реквизиты.Субконто2,
	|	Реквизиты.Субконто3,
	|	Реквизиты.СпособУчетаНДС,
	|	Реквизиты.НДСвСтоимостиТоваров,
	|	Реквизиты.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат,
	|	Реквизиты.СчетСписанияНДС,
	|	Реквизиты.СубконтоСписанияНДС1,
	|	Реквизиты.СубконтоСписанияНДС2,
	|	Реквизиты.СубконтоСписанияНДС3
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ТребованиеНакладная КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СчетаУчетаЗатратВТаблице,
	|	ЕСТЬNULL(СоставДокумента.ЕстьМатериалы, ЛОЖЬ) КАК ЕстьМатериалы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьМатериалыЗаказчика, ЛОЖЬ) КАК ЕстьМатериалыЗаказчика
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьМатериалы Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаМатериалы", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаМатериалы.Ссылка,
		|	ТаблицаМатериалы.НомерСтроки,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Количество,
		|	ТаблицаМатериалы.НомерГТД,
		|	ТаблицаМатериалы.СтранаПроисхождения,
		|	ТаблицаМатериалы.Счет,
		|	ЕСТЬNULL(ТаблицаМатериалы.Счет.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
		|	ТаблицаМатериалы.СчетЗатрат,
		|	ТаблицаМатериалы.ПодразделениеЗатрат,
		|	ТаблицаМатериалы.НоменклатурнаяГруппа,
		|	ТаблицаМатериалы.СтатьяЗатрат,
		|	ТаблицаМатериалы.СпособУчетаНДС,
		|	ТаблицаМатериалы.ДокументОприходования,
		|	ТаблицаМатериалы.Себестоимость
		|ПОМЕСТИТЬ ТаблицаМатериалы
		|ИЗ
		|	Документ.ТребованиеНакладная.Материалы КАК ТаблицаМатериалы
		|ГДЕ
		|	ТаблицаМатериалы.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьМатериалыЗаказчика Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаМатериалыЗаказчика", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаМатериалыЗаказчика.Ссылка,
		|	ТаблицаМатериалыЗаказчика.НомерСтроки,
		|	ТаблицаМатериалыЗаказчика.Номенклатура,
		|	ТаблицаМатериалыЗаказчика.Количество,
		|	ТаблицаМатериалыЗаказчика.Счет,
		|	ТаблицаМатериалыЗаказчика.СчетПередачи
		|ПОМЕСТИТЬ ТаблицаМатериалыЗаказчика
		|ИЗ
		|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
		|ГДЕ
		|	ТаблицаМатериалыЗаказчика.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСписаниеМатериалов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьМатериалы Тогда
		ПараметрыПроведения.Вставить("МатериалыРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаМатериалы",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("МатериалыРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМатериалы",   НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	""ТребованиеНакладная"" КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.СчетЗатрат В (&Субсчета44)
	|			ТОГДА &СодержаниеСписаниеМатериаловНаИздержки
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.СчетЗатрат В (&Субсчета91)
	|			ТОГДА &СодержаниеСписаниеМатериаловНаПрочиеРасходы
	|		ИНАЧЕ &СодержаниеСписаниеМатериаловВПроизводство
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Материалы"" КАК ИмяСписка,
	|	&СинонимМатериалы КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМатериалы.Счет КАК СчетУчета,
	|	ТаблицаМатериалы.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаМатериалы.ДокументОприходования,
	|	ТаблицаМатериалы.Себестоимость,
	|	ТаблицаМатериалы.Количество,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.ПодразделениеЗатрат
	|		ИНАЧЕ Реквизиты.ПодразделениеЗатрат
	|	КОНЕЦ КАК КорПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.СпособУчетаНДС
	|		ИНАЧЕ Реквизиты.СпособУчетаНДС
	|	КОНЕЦ КАК СпособУчетаНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.СчетЗатрат
	|		ИНАЧЕ Реквизиты.СчетЗатрат
	|	КОНЕЦ КАК КорСчетСписания,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.НоменклатурнаяГруппа
	|		ИНАЧЕ Реквизиты.Субконто1
	|	КОНЕЦ КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.СтатьяЗатрат
	|		ИНАЧЕ Реквизиты.Субконто2
	|	КОНЕЦ КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Реквизиты.Субконто3
	|	КОНЕЦ КАК КорСубконто3,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВидКорСубконто1,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВидКорСубконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеМатериаловЗаказчика(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьМатериалыЗаказчика Тогда
		ПараметрыПроведения.Вставить("МатериалыЗаказчикаРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаМатериалыЗаказчика", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("МатериалыЗаказчикаРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМатериалыЗаказчика", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.СчетЗатрат В (&Субсчета44)
	|			ТОГДА &СодержаниеСписаниеДавальческихНаИздержки
	|		КОГДА НЕ Реквизиты.СчетаУчетаЗатратВТаблице
	|				И Реквизиты.СчетЗатрат В (&Субсчета91)
	|			ТОГДА &СодержаниеСписаниеДавальческихНаПрочиеРасходы
	|		ИНАЧЕ &СодержаниеСписаниеДавальческихВПроизводство
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""МатериалыЗаказчика"" КАК ИмяСписка,
	|	&СинонимМатериалыЗаказчика КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаМатериалыЗаказчика.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМатериалыЗаказчика.Счет КАК СчетУчета,
	|	ТаблицаМатериалыЗаказчика.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаМатериалыЗаказчика.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	ТаблицаМатериалыЗаказчика.СчетПередачи КАК КорСчетСписания,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	ТаблицаМатериалыЗаказчика.Номенклатура КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаМатериалыЗаказчика КАК ТаблицаМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьМатериалы Тогда
		ПараметрыПроведения.Вставить("НДСРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("НДСМатериалы", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("НДСРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("НДСМатериалы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НДСвСтоимостиТоваров КАК НДСвСтоимостиТоваров,
	|	Реквизиты.СчетСписанияНДС КАК СчетСписанияНДС,
	|	Реквизиты.СубконтоСписанияНДС1 КАК СубконтоСписанияНДС1,
	|	Реквизиты.СубконтоСписанияНДС2 КАК СубконтоСписанияНДС2,
	|	Реквизиты.СубконтоСписанияНДС3 КАК СубконтоСписанияНДС3,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СписыватьНДСнаКорСчетИАналитикуТовара,
	|	Реквизиты.ПодразделениеЗатрат КАК Подразделение,
	|	Реквизиты.Контрагент КАК Контрагент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Материалы"" КАК ИмяСписка,
	|	&СинонимМатериалы КАК СинонимСписка,
	|	ТаблицаМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалы.Количество КАК Количество,
	|	ТаблицаМатериалы.Счет КАК СчетУчета,
	|	ТаблицаМатериалы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаМатериалы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетаУчетаЗатратВТаблице
	|			ТОГДА ТаблицаМатериалы.СпособУчетаНДС
	|		ИНАЧЕ Реквизиты.СпособУчетаНДС
	|	КОНЕЦ КАК НовыйСпособУчетаНДС
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаМатериалы.СчетУчетаЗабалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПодготовитьТаблицыМатериаловПродукцииИП(ТаблицаСписанныеМПЗ, ТаблицаРеквизиты) Экспорт
	Перем СтруктураТаблиц;
	
	СтруктураТаблиц	= Новый Структура("ТаблицаМатериалов, ПолученоПродукции");
	
	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0
		ИЛИ ТаблицаСписанныеМПЗ = Неопределено
		ИЛИ ТаблицаСписанныеМПЗ.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты	= ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	МассивТиповЗатрат	= Новый Массив;
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.РасходыБудущихПериодов"));
	ОписаниеТиповЗатрат	= Новый ОписаниеТипов(МассивТиповЗатрат);
	
	ТаблицаМатериалов	= ТаблицаСписанныеМПЗ.Скопировать();
	ТаблицаМатериалов.Колонки.КорСчетСписания.Имя	= "СчетЗатрат";
	ТаблицаМатериалов.Колонки.Добавить("Продукция",				ОписаниеТиповЗатрат);
	ТаблицаМатериалов.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМатериалов.Колонки.Добавить("СтатьяЗатрат",			ОписаниеТиповЗатрат);
	ТаблицаМатериалов.Колонки.Добавить("СчетДоходов",			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоПродукции",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Для Каждого Материал Из ТаблицаМатериалов Цикл
		
		Для НомерСубконто = 1 По 3 Цикл
			
			ЗначениеСубконто	= Материал["КорСубконто" + НомерСубконто];
			
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				ТипСубконто			= ТипЗнч(ЗначениеСубконто);
				Если ОписаниеТиповЗатрат.СодержитТип(ТипСубконто) Тогда
					Материал.СтатьяЗатрат	= ЗначениеСубконто;
				ИначеЕсли ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					Материал.НоменклатурнаяГруппа	= ЗначениеСубконто;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Материал.Продукция	= Материал.СтатьяЗатрат;
		
	КонецЦикла;
	
	СтруктураТаблиц.ТаблицаМатериалов =
		УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуСписанияМатериалов(ТаблицаМатериалов, ТаблицаРеквизиты);
	
	Если СтруктураТаблиц.ТаблицаМатериалов <> Неопределено Тогда
		СтруктураТаблиц.ПолученоПродукции = СтруктураТаблиц.ТаблицаМатериалов.Скопировать();
		СтруктураТаблиц.ПолученоПродукции.Колонки.СчетЗатрат.Имя = "СчетУчетаПродукции";
		СтруктураТаблиц.ПолученоПродукции.Свернуть("СчетУчетаПродукции, Продукция, НоменклатурнаяГруппа", "КоличествоПродукции");
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Требование-накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТребованиеНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Требование-накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	// Требование-накладная (М-11)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru = 'Требование-накладная (М-11)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
	// Акт на списание материалов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктНаСписаниеМатериалов";
	КомандаПечати.Представление = НСтр("ru = 'Акт на списание материалов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 30;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Требование-накладная""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета ПКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТребованиеНакладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТребованиеНакладная", "Требование накладная",
			ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати), , "Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", "М11 (Требование-накладная)",
			ПечатьМ11(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_М11");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаСписаниеМатериалов") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаСписаниеМатериалов", "Акт на списание материалов",
			ПечатьАктНаСписаниеМатериалов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), , "Документ.ТребованиеНакладная.ПФ_MXL_АктНаСписаниеМатериалов");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция М11ТекстЗапросаШапки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Дата КАК ДатаНач,
	|	ТребованиеНакладная.Дата КАК ДатаКон,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Контрагент,
	|	ТребованиеНакладная.Контрагент.Представление КАК ФИОПолучателя,
	|	ТребованиеНакладная.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТребованиеНакладная.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатрат,
	|	ТребованиеНакладная.СчетЗатрат.Код КАК СчетЗатратКод,
	|	ТребованиеНакладная.ПодразделениеЗатрат,
	|	ТребованиеНакладная.ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|	ТребованиеНакладная.ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|	ТребованиеНакладная.СчетаУчетаЗатратВТаблице,
	|	ТребованиеНакладная.Материалы.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест,
	|		ДокументОприходования КАК Партия,
	|		ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|		ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|		ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|		СчетЗатрат.Код КАК СчетЗатратКод
	|	),
	|	ТребованиеНакладная.МатериалыЗаказчика.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест
	|	)
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЦенаСписания(ТаблицаСуммСписанияПоДокументам, Номенклатура, Партия)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",  Номенклатура);
	СтруктураПоиска.Вставить("Партия",        ?(ЗначениеЗаполнено(Партия), Партия, Неопределено));
	
	НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		СтрокаСуммСписания = НайденныеСтроки[0];
		Если СтрокаСуммСписания.Количество = 0 Тогда
			Возврат 0;
		Иначе
			Возврат СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаСуммСписанияПоДокументу(Знач ТаблицаСуммСписанияПоДокументам, Регистратор, ТаблицаМатериалы)

	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Номенклатура");
	ТаблицаРезультата.Колонки.Добавить("Партия");
	ТаблицаРезультата.Колонки.Добавить("Количество");
	ТаблицаРезультата.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументам.Скопировать(Новый Структура("Регистратор", Регистратор));
	
	СтруктураПоиска = Новый Структура("Номенклатура, Партия");
	
	// Сначала заполним сумму оценки по строкам с заполненной партией.
	Для каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаМатериал.Партия) Тогда
			Продолжить;
		КонецЕсли; 
	
		СтруктураПоиска.Вставить("Номенклатура",  СтрокаМатериал.Материал);
		СтруктураПоиска.Вставить("Партия",        СтрокаМатериал.Партия);
		
		НайденныеСтроки = ТаблицаСуммСписанияПоДокументу.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Если не нашли партии в таблице сумм - очищаем ее в таблице материалов, чтобы оценка прошла "по средней"
			СтрокаМатериал.Партия = Неопределено;
		Иначе
			СтрокаСуммСписания = НайденныеСтроки[0];
			Если СтрокаСуммСписания.Количество < СтрокаМатериал.Количество  Тогда
				СтрокаМатериал.Партия = Неопределено;
			Иначе
				
				КоличествоПоСтроке = Мин(СтрокаСуммСписания.Количество, СтрокаМатериал.Количество);
				СуммаПоСтроке      = Окр(СтрокаСуммСписания.Сумма*КоличествоПоСтроке/СтрокаСуммСписания.Количество, 2);
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				
				НоваяСтрока.Номенклатура = СтрокаМатериал.Материал;
				НоваяСтрока.Партия       = СтрокаМатериал.Партия;
				НоваяСтрока.Количество   = КоличествоПоСтроке;
				НоваяСтрока.Сумма        = СуммаПоСтроке;
				
				СтрокаСуммСписания.Сумма      = СтрокаСуммСписания.Сумма - НоваяСтрока.Сумма;
				СтрокаСуммСписания.Количество = СтрокаСуммСписания.Количество - НоваяСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// По незаполненным партиям рассчитаем среднюю
	Для каждого СтрокаСуммСписания Из ТаблицаСуммСписанияПоДокументу Цикл
		Если СтрокаСуммСписания.Количество <> 0 Тогда 
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСуммСписания, ,"Партия");
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Партия", "Количество, Сумма");
	ТаблицаРезультата.Индексы.Добавить("Номенклатура, Партия");
	
	Возврат ТаблицаРезультата;
КонецФункции
 

Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = М11ТекстЗапросаШапки();
	
	ШапкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
		
		// Из общей таблицы сумм списания получим таблицу по документу с учетом партий указанных в табличной части.
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивовПоПартиям(МассивОбъектов, ДатаНач, ДатаКон);
		
		ПервыйДокумент = Истина;
		Шапка = ШапкаИтоги.Выбрать();
		
		Пока Шапка.Следующий() Цикл
			
			Материалы           = Шапка.Материалы.Выгрузить();
			МатериалыЗаказчиков = Шапка.МатериалыЗаказчика.Выгрузить();
			
			ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументу(ТаблицаСуммСписанияПоДокументам, Шапка.Ссылка, Материалы);
			
			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М11");
			Область = Макет.ПолучитьОбласть("Шапка");
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Заголовок",  "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь));
			Параметры.Вставить("КодОКПО",    Шапка.КодПоОКПО);
			СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
			ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,");
			Параметры.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
			Параметры.Вставить("ДатаСоставления",          Формат(Шапка.Дата, "ДФ=dd.MM.yy"));
			Параметры.Вставить("Склад",                    Шапка.Склад);
			
			Если Не Шапка.СчетаУчетаЗатратВТаблице Тогда
				Параметры.Вставить("ПредставлениеПодразделения", ПредставлениеПодразделенияЗатрат(Шапка));
				Параметры.Вставить("КоррСчет",Шапка.СчетЗатратКод);
			Иначе
				
				// Может быть несколько, если счета учета затрат - в таблице
				Получатели = Новый Соответствие;
				СчетаУчетаЗатрат = Новый Соответствие;
				Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
					Получатели.Вставить(СтрокаТабличнойЧасти.ПодразделениеЗатрат, ПредставлениеПодразделенияЗатрат(СтрокаТабличнойЧасти));
					СчетаУчетаЗатрат.Вставить(СтрокаТабличнойЧасти.СчетЗатратКод);
				КонецЦикла;
				
				Если Получатели.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из Получатели Цикл
						Параметры.Вставить("ПредставлениеПодразделения", КлючИЗначение.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Если СчетаУчетаЗатрат.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаУчетаЗатрат Цикл
						Параметры.Вставить("КоррСчет",КлючИЗначение.Ключ);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Область.Параметры.Заполнить(Параметры);
			ТабДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Строка");
			
			// Поиск сумм списания активов для заполнения Цены и Суммы
			
			Для Каждого СтрокаТЧ Из Материалы Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
				Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
				Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
				Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
				Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
				Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
				
				Цена = ЦенаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, СтрокаТЧ.Партия);
				
				Параметры.Вставить("Цена",  Цена);
				Параметры.Вставить("Сумма", Цена * СтрокаТЧ.Количество);
				
				Область.Параметры.Заполнить(Параметры);
				ТабДокумент.Вывести(Область);
				
			КонецЦикла;
			
			Для Каждого СтрокаТЧ Из МатериалыЗаказчиков Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
				Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
				Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
				Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
				Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
				Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
				
				Цена = ЦенаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, Неопределено);
				Параметры.Вставить("Цена",  Цена);
				Параметры.Вставить("Сумма", Цена * СтрокаТЧ.Количество);
				
				Область.Параметры.Заполнить(Параметры);
				ТабДокумент.Вывести(Область);
				
			КонецЦикла;
			
			Область = Макет.ПолучитьОбласть("Подвал");
			
			Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
				МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад,Шапка.Дата);
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,МОЛ,Шапка.Дата);
				Область.Параметры.МОЛДолжность = ДанныеФизЛица.Должность;
				Область.Параметры.МОЛФИО = ДанныеФизЛица.Представление;
			КонецЕсли;
			
			ТабДокумент.Вывести(Область);
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабДокумент;
КонецФункции

Функция ПредставлениеПодразделенияЗатрат(Выборка)
	
	Если ЗначениеЗаполнено(Выборка.ПодразделениеЗатратНаименованиеПолное) Тогда
		Возврат СокрЛП(Выборка.ПодразделениеЗатратНаименованиеПолное);
	Иначе
		Возврат Выборка.ПодразделениеЗатратНаименование;
	КонецЕсли;
	
КонецФункции

Функция ТребованиеНакладнаяТекстЗапросаШапки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Контрагент,
	|	ТребованиеНакладная.Контрагент.Представление КАК ФИОПолучателя,
	|	ТребованиеНакладная.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТребованиеНакладная.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатрат,
	|	ТребованиеНакладная.ПодразделениеЗатрат,
	|	ТребованиеНакладная.Материалы.(
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест
	|	),
	|	ТребованиеНакладная.МатериалыЗаказчика.(
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест
	|	)
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Ссылка";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_ТН";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ТребованиеНакладнаяТекстЗапросаШапки();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная");
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Вывод заголовка
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Требование-накладная");
		Область.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		Область.Параметры.Организация = ПредставлениеОрганизации;
		Область.Параметры.ИмяКолонкиКодов = ?(ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул,
			"Артикул", "Код");
		ТабДокумент.Вывести(Область);
					
		ТаблицаМатериалов = Шапка.Материалы.Выгрузить();
		ТаблицаМатериалов.Свернуть("Код, Имя, ЕдИзм, ЕдИзмМест", "Количество,КоличествоМест");
		
		НомерТекущий = 1;
		Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
			
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(СтрокаТЧ);
			Область.Параметры.НомерТекущий = НомерТекущий;
			ТабДокумент.Вывести(Область);
			НомерТекущий = НомерТекущий + 1;
		КонецЦикла;
		
		ТаблицаМатериаловЗаказчика = Шапка.МатериалыЗаказчика.Выгрузить();
		ТаблицаМатериаловЗаказчика.Свернуть("Код, Имя, ЕдИзм, ЕдИзмМест", "Количество,КоличествоМест");
		
		Для Каждого СтрокаТЧ Из ТаблицаМатериаловЗаказчика Цикл
			
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(СтрокаТЧ);
			Область.Параметры.НомерТекущий = НомерТекущий;
			ТабДокумент.Вывести(Область);
			НомерТекущий = НомерТекущий + 1;
			
		КонецЦикла;
		
		// Вывод подвала
		Область = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(Область);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
				
	Возврат ТабДокумент;

КонецФункции

Функция ТекстЗапросаАктНаСписаниеМатериалов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер КАК НомерДокумента,
	|	ТребованиеНакладная.Дата КАК ДатаДокумента,
	|	ТребованиеНакладная.Дата КАК ДатаНач,
	|	ТребованиеНакладная.Дата КАК ДатаКон,
	|	ТребованиеНакладная.Организация КАК Организация,
	|	ТребованиеНакладная.Ссылка КАК Ссылка,
	|	ТребованиеНакладная.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТребованиеНакладная.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ТребованиеНакладная.Склад КАК Склад,
	|	ТребованиеНакладная.ЦельРасхода КАК ЦельРасхода,
	|	ТребованиеНакладная.Материалы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА Номенклатура.Наименование
	|			ИНАЧЕ Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК МатериалНаименование,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ДокументОприходования КАК Партия
	|	) КАК Материалы,
	|	ТребованиеНакладная.СоставКомиссии.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ФизЛицо КАК ФизЛицо,
	|		Должность КАК Должность,
	|		Должность.Наименование КАК ДолжностьНаименование
	|	) КАК СоставКомиссии
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Дата,
	|	ТребованиеНакладная.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьАктНаСписаниеМатериалов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб		   = Истина;
	ТабличныйДокумент.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктНаСписаниеМатериалов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_АктНаСписаниеМатериалов");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаАктНаСписаниеМатериалов();
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ВыборкаИтоги.ДатаНач), ВыборкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ВыборкаИтоги.ДатаКон), ВыборкаИтоги.ДатаКон, '00010101');
		
		// Из общей таблицы сумм списания получим таблицу по документу с учетом партий указанных в табличной части.
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивовПоПартиям(МассивОбъектов, ДатаНач, ДатаКон);
		
		ПервыйДокумент = Истина;
		ВыборкаДокумент = ВыборкаИтоги.Выбрать();
		
		Пока ВыборкаДокумент.Следующий() Цикл
			
			Материалы = ВыборкаДокумент.Материалы.Выгрузить();
			СоставКомиссии = ВыборкаДокумент.СоставКомиссии.Выгрузить();
			
			// В запросе сортировать нельзя, потому что выбираются данные двух табличных частей
			Материалы.Сортировать("НомерСтроки");
			СоставКомиссии.Сортировать("НомерСтроки");
			
			СписокФизЛиц = СоставКомиссии.ВыгрузитьКолонку("ФизЛицо");
			ПоляИмени = "ФамилияИО";
			ФИОФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина,
				СписокФизЛиц,
				ПоляИмени,
				ВыборкаДокумент.ДатаДокумента);
			
			Если Материалы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументу(ТаблицаСуммСписанияПоДокументам, ВыборкаДокумент.Ссылка, Материалы);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаДокумент);
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаДокумент.Организация, ВыборкаДокумент.ДатаДокумента);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокумент.НомерДокумента, Истина, Ложь);
			ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокумент.ДатаДокумента, "ДФ='dd.MM.yyyy ""г.""'");
			
			ПодразделениеОтветственныхЛиц = ВыборкаДокумент.ПодразделениеОрганизации;
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаДокумент.Организация, ВыборкаДокумент.ДатаДокумента, ПодразделениеОтветственныхЛиц);
			ОбластьМакета.Параметры.ФИОРуководителя = Руководители.РуководительПредставление;
			
			Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
				И СведенияОбОрганизации.ИндивидуальныйПредприниматель = Руководители.Руководитель Тогда
				ЭтоИндивидуальныйПредприниматель = Истина;
				ОбластьМакета.Параметры.ДолжностьРуководителя = НСтр("ru = 'Индивидуальный предприниматель'");
			Иначе
				ЭтоИндивидуальныйПредприниматель = Ложь;
				ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			ИтогоСумма = 0;
			Для Каждого Строка Из Материалы Цикл
				
				Параметры = Новый Структура;
				НомерСтроки = Материалы.Индекс(Строка)+1;
				Параметры.Вставить("НомерСтроки", НомерСтроки);
				Параметры.Вставить("МатериалНаименование", Строка.МатериалНаименование);
				Параметры.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
				Параметры.Вставить("Количество", Строка.Количество);
				
				// Поиск сумм списания маериалов для заполнения Цены и Суммы
				Цена = ЦенаСписания(ТаблицаСуммСписанияПоДокументу, Строка.Материал, Строка.Партия);
				Сумма = Окр(Цена * Строка.Количество, 2);
				
				Параметры.Вставить("Цена", Цена);
				Параметры.Вставить("Сумма", Сумма);
				
				ОбластьМакета.Параметры.Заполнить(Параметры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ИтогоСумма = ИтогоСумма + Сумма;
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим итоги по документу в общем
			Если ИтогоСумма <> 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОбщаяСумма");
				ОбластьМакета.Параметры.Итого = ИтогоСумма;
				ОбластьМакета.Параметры.ОбщаяСумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтогоСумма, ВалютаРегУчета);
				ОбластьМакета.Параметры.ОбщаяСуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСумма, ВалютаРегУчета);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// Для предпринимателя, которому комиссия не нужна, выводим специальный подвал документа
			Если ЭтоИндивидуальныйПредприниматель И СоставКомиссии.Количество() = 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Предприниматель");
				ОбластьМакета.Параметры.ФИОПредпринимателя = СведенияОбОрганизации.ФамилияИнициалыФизлица;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				ВывестиКомиссию(ТабличныйДокумент, Макет, СоставКомиссии, ФиоФизЛиц);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокумент.Ссылка);
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура ВывестиКомиссию(ТабличныйДокумент, Макет, СоставКомиссии, ФиоФизЛиц)

	//комиссия не заполнена: вариант по умолчанию (4 члена комиссии)
	Если СоставКомиссии.Количество() = 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПредседательКомиссии");
		ОбластьМакета.Параметры.ПредседательКомиссии = НСтр("ru = 'Председатель комиссии:'");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакета.Параметры.ЧленыКомиссии = НСтр("ru = 'Члены комиссии:'");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.ЧленыКомиссии = "";
		Для Сч = 2 По 3 Цикл
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	//Комиссия заполнена
	ОбластьМакета = Макет.ПолучитьОбласть("ПредседательКомиссии");
	Если СоставКомиссии.Количество() <> 1 Тогда
		ОбластьМакета.Параметры.ПредседательКомиссии = НСтр("ru = 'Председатель комиссии:'");
	КонецЕсли;
	ОбластьМакета.Параметры.ДолжностьПредседателя = СоставКомиссии[0].ДолжностьНаименование;
	ОбластьМакета.Параметры.ФИОПредседателя = ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, СоставКомиссии[0].ФизЛицо);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЧленКомиссии");
	Если СоставКомиссии.Количество() <> 1 Тогда
		ОбластьМакета.Параметры.ЧленыКомиссии = НСтр("ru = 'Члены комиссии:'");
	КонецЕсли;
			
	Для ИндексСтроки = 1 По СоставКомиссии.Количество() - 1 Цикл
		Строка = СоставКомиссии[ИндексСтроки];
		Если ИндексСтроки > 1 Тогда
			ОбластьМакета.Параметры.ЧленыКомиссии = ""; 
		КонецЕсли;
		ОбластьМакета.Параметры.ДолжностьЧленКомиссии = Строка.ДолжностьНаименование;
		ОбластьМакета.Параметры.ФИОЧленКомиссии = ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, Строка.ФизЛицо);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеФИОЧленаКомиссии(ФИОФизЛиц, ФизЛицо)
	
	ФИОФизЛица = ФИОФизЛиц.Найти(ФизЛицо, "ФизическоеЛицо");
	Если ФИОФизЛица = Неопределено Тогда
		Представление = "";
	Иначе
		Представление = ФИОФизЛица.ФамилияИО;
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
