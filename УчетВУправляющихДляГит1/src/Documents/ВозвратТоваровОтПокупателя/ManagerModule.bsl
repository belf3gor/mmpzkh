#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет предъявлена ли сумма НДС по документу
//
// Параметры:
// ТекущийДокумент - документ, сумму НДС которого нужно вычислить
//
// Возвращаемое значение:
// Булево - если сумма НДС в документе не нулевая
Функция НаличиеСуммыНДС(ТекущийДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Ссылка";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", ТекущийДокумент);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаНДС > 0;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 7, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ОтразитьВКнигеПокупок");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоТаре",        "ВозвратнаяТараПереданная");
	
	// Табличная часть Товары
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Оборудование");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	//  Оборудование (тоже в табличной части Товары)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",     "ОборудованиеНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Оборудование");
	
	//   Выручка (для оборудования)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",     "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов", "Расходы");
	
	//   Запасы (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Способ учета НДС
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	
	// Табличная часть ВозвратнаяТара
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДеятельностьНаПатенте");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ОтразитьВКнигеПокупок");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Оборудование", "ВидОперации");
	
	Возврат Правила;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт

	Если ДанныеЗаполнения.Свойство("Оборудование") Тогда
		
		ДанныеЗаполнения.Оборудование = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);
		
	КонецЕсли;

КонецПроцедуры


#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц) Экспорт
	
	ИменаТаблиц.Добавить("ВТ_ОплачиваемыеДокументы");
	ИменаТаблиц.Добавить("ВТ_ОплачиваемаяНоменклатура");
	ИменаТаблиц.Добавить("ОплачиваемаяНоменклатура");
	ИменаТаблиц.Добавить("ОплачиваемыеДокументы");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Документ,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаДокумента,
	|	ВозвратТоваровОтПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	0 КАК СуммаСкидкиПоДокументу,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВозвратТоваровОтПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаПлатежа,
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаПлатежа) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВТ_ОплачиваемыеДокументы
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РасшифровкаПлатежа КАК ВТ_РасшифровкаПлатежа
	|		ПО ВТ_РеквизитыШапки.Ссылка = ВТ_РасшифровкаПлатежа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ВТ_РеквизитыШапки.ДокументОснование = ВозвратТоваровОтПокупателя.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВТ_РеквизитыШапки.ВалютаДокумента,
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента,
	|	ВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	|	ВозвратТоваровОтПокупателя.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплачиваемыеДокументы.Документ КАК Документ,
	|	ВТ_ОплачиваемыеДокументы.ДатаДокумента КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК КоличествоОтгружено,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
	|			ИНАЧЕ (ВозвратТоваровОтПокупателяТовары.Сумма + ВозвратТоваровОтПокупателяТовары.СуммаНДС) / ВозвратТоваровОтПокупателяТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	0 КАК СуммаСкидок,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА ВозвратТоваровОтПокупателяТовары.Сумма
	|			ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Сумма + ВозвратТоваровОтПокупателяТовары.СуммаНДС
	|		КОНЕЦ) КАК Сумма,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.НомерГТД.РегистрационныйНомер, НЕОПРЕДЕЛЕНО) КАК НомерТаможеннойДекларации,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения.Код, НЕОПРЕДЕЛЕНО) КАК КодСтраныПроисхожденияТовара,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорПлатежногоАгента,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныйАгент
	|ПОМЕСТИТЬ ВТ_ОплачиваемаяНоменклатура
	|ИЗ
	|	ВТ_ОплачиваемыеДокументы КАК ВТ_ОплачиваемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ПО ВТ_ОплачиваемыеДокументы.Документ = ВозвратТоваровОтПокупателяТовары.Ссылка
	|			И ВТ_ОплачиваемыеДокументы.СтавкаНДС = ВозвратТоваровОтПокупателяТовары.СтавкаНДС
	|ГДЕ
	|	НЕ ВозвратТоваровОтПокупателяТовары.Ссылка ЕСТЬ NULL
	|	И ВозвратТоваровОтПокупателяТовары.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплачиваемыеДокументы.Документ,
	|	ВТ_ОплачиваемыеДокументы.ДатаДокумента,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
	|			ИНАЧЕ (ВозвратТоваровОтПокупателяТовары.Сумма + ВозвратТоваровОтПокупателяТовары.СуммаНДС) / ВозвратТоваровОтПокупателяТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.НомерГТД.РегистрационныйНомер, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения.Код, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплачиваемаяНоменклатура.Документ КАК Документ,
	|	ВТ_ОплачиваемаяНоменклатура.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_ОплачиваемаяНоменклатура.Наименование КАК Наименование,
	|	ВТ_ОплачиваемаяНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТ_ОплачиваемаяНоменклатура.Количество КАК Количество,
	|	ВТ_ОплачиваемаяНоменклатура.КоличествоОтгружено КАК КоличествоОтгружено,
	|	ВТ_ОплачиваемаяНоменклатура.Цена КАК Цена,
	|	ВТ_ОплачиваемаяНоменклатура.СуммаСкидок КАК СуммаСкидок,
	|	ВТ_ОплачиваемаяНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОплачиваемаяНоменклатура.СуммаНДС КАК СуммаНДС,
	|	ВТ_ОплачиваемаяНоменклатура.Сумма КАК Сумма,
	|	ВТ_ОплачиваемаяНоменклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, НЕОПРЕДЕЛЕНО)) КАК Штрихкод,
	|	ВТ_ОплачиваемаяНоменклатура.КодСтраныПроисхожденияТовара КАК КодСтраныПроисхожденияТовара,
	|	ВТ_ОплачиваемаяНоменклатура.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	ВТ_ОплачиваемаяНоменклатура.ПлатежныйАгент КАК ПлатежныйАгент
	|ИЗ
	|	ВТ_ОплачиваемаяНоменклатура КАК ВТ_ОплачиваемаяНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВТ_ОплачиваемаяНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОплачиваемаяНоменклатура.Документ,
	|	ВТ_ОплачиваемаяНоменклатура.ДатаДокумента,
	|	ВТ_ОплачиваемаяНоменклатура.Наименование,
	|	ВТ_ОплачиваемаяНоменклатура.Номенклатура,
	|	ВТ_ОплачиваемаяНоменклатура.Количество,
	|	ВТ_ОплачиваемаяНоменклатура.КоличествоОтгружено,
	|	ВТ_ОплачиваемаяНоменклатура.Цена,
	|	ВТ_ОплачиваемаяНоменклатура.СуммаСкидок,
	|	ВТ_ОплачиваемаяНоменклатура.СтавкаНДС,
	|	ВТ_ОплачиваемаяНоменклатура.СуммаНДС,
	|	ВТ_ОплачиваемаяНоменклатура.Сумма,
	|	ВТ_ОплачиваемаяНоменклатура.ДоговорПлатежногоАгента,
	|	ВТ_ОплачиваемаяНоменклатура.КодСтраныПроисхожденияТовара,
	|	ВТ_ОплачиваемаяНоменклатура.НомерТаможеннойДекларации,
	|	ВТ_ОплачиваемаяНоменклатура.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплачиваемыеДокументы.Документ КАК Документ,
	|	ВТ_ОплачиваемыеДокументы.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_ОплачиваемыеДокументы.СуммаСкидкиПоДокументу КАК СуммаСкидкиПоДокументу,
	|	ВТ_ОплачиваемыеДокументы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|		И ВТ_ОплачиваемыеДокументы.ВалютаДокумента <> ВТ_ОплачиваемыеДокументы.ВалютаПлатежа КАК РасчетыВУсловныхЕдиницах,
	|	ВТ_ОплачиваемыеДокументы.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОплачиваемыеДокументы.СуммаНДС КАК СуммаНДС,
	|	ВТ_ОплачиваемыеДокументы.СуммаОплаты КАК СуммаОплаты,
	|	ВТ_ОплачиваемыеДокументы.СуммаОплаты КАК СуммаОплатыВсего,
	|	ВТ_ОплачиваемыеДокументы.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ
	|	ВТ_ОплачиваемыеДокументы КАК ВТ_ОплачиваемыеДокументы";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	Реквизиты.Контрагент.ИНН КАК ИННпоставщика,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.Организация КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	ИСТИНА КАК ЕстьТовары,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом,
	|	"""" КАК Исполнитель,
	|	"""" КАК ИсполнительНаОсновании,
	|	"""" КАК ОтпускПроизвел,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЧерезКого,
	|	"""" КАК ЗаЗаказчикаНаОсновании
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	НЕОПРЕДЕЛЕНО КАК ПериодичностьУслуги,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка) КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма + ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|		КОНЕЦ) КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка) КАК СпособПогашенияЗадолженности
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента,
	|	ТаблицаДокумента.Ссылка.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Номенклатура,
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ВозвратТоваровОтПокупателяВозвратнаяТара
	|ГДЕ
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	|	И НЕ ВозвратТоваровОтПокупателяТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование;
		Конецесли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьПредъявленСчетФактура");
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	МассивРеквизитов.Добавить("УдалитьНомерВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьДатаВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьНДСПредъявленКВычету");
	МассивРеквизитов.Добавить("УдалитьКодВидаОперации");
	МассивРеквизитов.Добавить("УдалитьКодСпособаПолучения");
	
	Возврат МассивРеквизитов;
	
КонецФункции
 

// Функция возвращает таблицу значений для заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДанныеОбъекта     - данные текущего объекта.
//  ДокументОснование - ссылка на документ основание.
//
Функция ТоварыПоДаннымОснования(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОснованиеРеализацияТоваров      = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ОснованиеОтражениеНачисленияНДС = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтражениеНачисленияНДС");
	ОснованиеРозничнаяПродажа       = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РозничнаяПродажа");
	
	Запрос = Новый Запрос(ТекстЗапросаЗаполнениеДокументов(ДокументОснование));
	
	Запрос.УстановитьПараметр("ДокументОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   ДанныеОбъекта.ДоговорКонтрагента);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	РезультатЗапроса = ПакетЗапросов[0];
	ОснованияКоррекции= Документы.РеализацияТоваровУслуг.ТоварыКВозвратуПоРеализации(ДокументОснование, Новый МоментВремени(ДанныеОбъекта.Дата, ДанныеОбъекта.Ссылка));
	
	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДанныеОбъекта.Ссылка,      ВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДанныеОбъекта.Ссылка, ВалютаРегламентированногоУчета);
	
	Если ОснованиеОтражениеНачисленияНДС ИЛИ ОснованиеРозничнаяПродажа Тогда
		СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация,
			ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса.Выгрузить(), "Номенклатура", Истина),
			ДанныеОбъекта.Склад,
			ДанныеОбъекта.Дата);
	КонецЕсли;
	
	СоответствиеСтавокИСпособовУчетаНДС = УчетНДСРаздельный.ПолучитьСоответствиеСтавокИСпособовУчетаНДС();
	
	ТаблицаЗначенийТовары = ДанныеОбъекта.Товары.Выгрузить().СкопироватьКолонки();
	
	СтруктураОтбора = Новый Структура("Номенклатура, Цена");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗначенийТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		// Найдем основания коррекции, и заполним по остаткам
		СтрокиОснования = ОснованияКоррекции.НайтиСтроки(СтруктураОтбора);
		Если СтрокиОснования.Количество() > 0 Тогда
			СтрокаОснования = СтрокиОснования[0];
			
			СтрокаТабличнойЧасти.ИсправляемыйДокумент = СтрокаОснования.Ссылка;
			СтрокаТабличнойЧасти.Количество           = СтрокаОснования.Количество;
			СтрокаТабличнойЧасти.Сумма                = СтрокаОснования.Сумма;
			СтрокаТабличнойЧасти.СуммаНДС             = СтрокаОснования.СуммаНДС;
			ОснованияКоррекции.Удалить(СтрокаОснования);
		КонецЕсли; 
		
		Если ОснованиеОтражениеНачисленияНДС ИЛИ ОснованиеРозничнаяПродажа Тогда
			СчетаУчета = СоответствиеСчетовУчета.Получить(Выборка.Номенклатура);
			Если СчетаУчета <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетРасходов             = СчетаУчета.СчетРасходов;
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
				СтрокаТабличнойЧасти.Субконто                 = СчетаУчета.Субконто1;
			КонецЕсли;
		КонецЕсли;
		
		СпособУчетаНДС = СоответствиеСтавокИСпособовУчетаНДС.Получить(Выборка.СтавкаНДС);
		Если СпособУчетаНДС <> Неопределено Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СпособУчетаНДС;
		КонецЕсли;
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
			Выборка.ВалютаДокумента,    ДанныеОбъекта.ВалютаДокумента,
			Выборка.КурсДокумента,      КурсДокумента,
			Выборка.КратностьДокумента, КратностьДокумента);
		
		СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Выборка.СуммаВключаетНДС,
			ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	КонецЦикла;
	
	Возврат ТаблицаЗначенийТовары;
КонецФункции

// Функция возвращает таблицу значений для заполнение табличной части Возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДанныеОбъекта     - данные текущего объекта.
//  ДокументОснование - ссылка на документ основание.
//
Функция ВозратнаяТараПоДаннымРеализации(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВозвратнаяТараДокумента = ДанныеОбъекта.ВозвратнаяТара.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	Док.СчетУчета,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВозвратнойТары = ВозвратнаяТараДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВозвратнойТары, Выборка);
		
		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Выборка.Количество;
		СтрокаВозвратнойТары.СчетУчета    = Выборка.СчетУчета;
		
		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);
		
	КонецЦикла;
	
	Возврат ВозвратнаяТараДокумента;
	
КонецФункции

// Заполняет реквизит "ДеятельностьНаТорговомСборе" по данным учета и данным документа.
//
Процедура УстановитьДеятельностьНаТорговомСборе(Объект) Экспорт
	
	Если Не Объект.ДеятельностьНаПатенте Тогда
		Объект.ДеятельностьНаТорговомСборе = ТорговыйСбор.ДеятельностьНаТорговомСбореПриУСНДоходы(
			Объект.Организация, Объект.Склад, Объект.Дата);
	ИначеЕсли Объект.ДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц, ЭтоОтложенноеПроведение);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.Вставить("ПлательщикНДС",
		УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент",
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	
	Запрос.УстановитьПараметр("ПрименяетсяУСН",              Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",        Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте",       Реквизиты.ДеятельностьНаПатенте);
	Запрос.УстановитьПараметр("ДеятельностьНаТорговомСборе", Реквизиты.ДеятельностьНаТорговомСборе);
	
	Запрос.УстановитьПараметр("МассивСчетовДляГТД", УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
	Запрос.УстановитьПараметр("Субсчета10",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	
	Реквизиты.Вставить("ЭтоДоговорСКомиссионером",
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("ЭтоДоговорСКомиссионером", Реквизиты.ЭтоДоговорСКомиссионером);
	
	Реквизиты.Вставить("ЭтоРозница",
		ЗначениеЗаполнено(Реквизиты.Сделка) И ТипЗнч(Реквизиты.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Запрос.УстановитьПараметр("ЭтоРозница", Реквизиты.ЭтоРозница);
	
	КорПодразделение = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Сделка)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", Реквизиты.Сделка.Метаданные()) Тогда
		КорПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Сделка, "ПодразделениеОрганизации");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КорПодразделение) Тогда
		КорПодразделение = Реквизиты.Подразделение;
	КонецЕсли;
	
	Реквизиты.Вставить("КорПодразделение", КорПодразделение);
	Запрос.УстановитьПараметр("КорПодразделение", Реквизиты.КорПодразделение);
	
	Реквизиты.Вставить("ДокументРасчетов", ?(ЗначениеЗаполнено(Реквизиты.Сделка), Реквизиты.Сделка, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("ДокументРасчетов", Реквизиты.ДокументРасчетов);
	
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",   НСтр("ru = 'Возвратная тара'"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРасходыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары И Реквизиты.УказанДокументОтгрузки Тогда
		Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
			СписаниеТоваровСписокНоменклатуры =
				ПараметрыПроведения.СписаниеТоваровТаблицаТовары.Скопировать( , "Номенклатура");
		Иначе
			СписаниеТоваровСписокНоменклатуры =
				ПараметрыПроведения.СписаниеТоваровТаблицаТоварыОтКомиссионера.Скопировать( , "Номенклатура");
		КонецЕсли;
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", СписаниеТоваровСписокНоменклатуры);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда
		Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
			СписаниеТоваровСчетаУчета =
				ПараметрыПроведения.СписаниеТоваровТаблицаТовары.Скопировать( , "СчетУчета, Комиссионный");
		Иначе
			СписаниеТоваровСчетаУчета =
				ПараметрыПроведения.СписаниеТоваровТаблицаТоварыОтКомиссионера.Скопировать( , "СчетУчета, Комиссионный");
		КонецЕсли;
		СписаниеТоваровСчетаУчета.Свернуть("СчетУчета, Комиссионный");
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", СписаниеТоваровСчетаУчета);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

// Подготоваливает необходимые таблицы для счет фактуры полученный.
// Данные таблиц необходимы для формирования движений по регистру НДС Предъявленный.
//
// Параметры:
// ТекущийДокумент - документ по которому нужно получить движения
// Отказ - флаг отказа.
//
// Возвращаемое значение:
// Структура - содержатся таблицы по документу.
Функция ПодготовитьПараметрыПроведенияДляСчетФактуры(ТекущийДокумент, Отказ = Ложь) Экспорт

	ПараметрыПроведения = ПодготовитьПараметрыПроведения(ТекущийДокумент, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаСписанныеТоварыОтПокупателя = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТаблицаТовары, ПараметрыПроведения.СписаниеТоваровСчетаУчета,
		ПараметрыПроведения.СписаниеТоваровСписокНоменклатуры, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	// Таблица товаров, возвращенных от комиссионера
	ТаблицаСписанныеТоварыОтКомиссионера =  УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТаблицаТоварыОтКомиссионера,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
	
	// Таблица товаров для общего случая, т.к. возврат от комиссионера определяется
	// по виду договора из шапки документа, то фактически заполненной является только
	// одна таблица.
	Если ТаблицаСписанныеТоварыОтКомиссионера.Количество() > 0 Тогда
		ТаблицаСписанныеТовары = ТаблицаСписанныеТоварыОтКомиссионера;
	Иначе
		ТаблицаСписанныеТовары = ТаблицаСписанныеТоварыОтПокупателя;
	КонецЕсли;
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары,
		ПараметрыПроведения.РеализацияРеквизиты, Отказ);
	
	ПараметрыПроведения.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	ПараметрыПроведения.Вставить("ТаблицаВзаиморасчеты", ТаблицаВзаиморасчеты);
	ПараметрыПроведения.Вставить("ТаблицыРеализация", ТаблицыРеализация);
	ПараметрыПроведения.Вставить("ТаблицаСписанныеТоварыОтКомиссионера", ТаблицаСписанныеТоварыОтКомиссионера);

	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц, ЭтоОтложенноеПроведение)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	Если ЭтоОтложенноеПроведение Тогда
		// При отложенном проведении нет необходимости обращаться к табличным частям документа, 
		// которые могут содержать много строк. 
		// Суммы взаиморасчетов могут быть получены из ранее сформированных проводок документа.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК ЕстьТовары,
		|	ЛОЖЬ КАК ЕстьТара
		|ПОМЕСТИТЬ СоставДокумента
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
		|	МАКСИМУМ(СоставДокумента.ЕстьТара) КАК ЕстьТара
		|ПОМЕСТИТЬ СоставДокумента
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА КАК ЕстьТовары,
		|		ЛОЖЬ КАК ЕстьТара
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ТаблицаДокумента
		|	ГДЕ
		|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	Реквизиты.Патент КАК Патент,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.Сделка КАК Сделка,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеПервичныхДокументов.Документ ЕСТЬ NULL
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОтгрузки,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеПервичныхДокументов.Документ ЕСТЬ NULL
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать)
	|	КОНЕЦ КАК СпособЗачетаАвансов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтразитьВКнигеПокупок КАК ОтразитьВКнигеПокупок,
	|	Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат КАК ПокупателемВыставляетсяСчетФактураНаВозврат,
	|	Реквизиты.ПокупателюВыставляетсяКорректировочныйСчетФактура КАК ПокупателюВыставляетсяКорректировочныйСчетФактура,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.Дата >= ДАТАВРЕМЯ(2012, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ)
	|		КОГДА Реквизиты.ОтразитьВКнигеПокупок
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ)
	|					ИНАЧЕ Реквизиты.СчетУчетаНДС
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	КОНЕЦ КАК СчетУчетаНДС,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаРеализации
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = Реквизиты.Сделка)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.ТипСклада КАК ТипСкладаОтправителя,
	|	Реквизиты.Склад КАК СкладПолучатель,
	|	Реквизиты.ТипСклада КАК ТипСкладаПолучателя,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеПолучатель,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	Реквизиты.Патент КАК Патент,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Сделка КАК Сделка,
	|	Реквизиты.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.Сделка ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Реквизиты.Сделка
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.ДатаРеализации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтразитьВКнигеПокупок КАК ОтразитьВКнигеПокупок,
	|	Реквизиты.СчетУчетаНДС КАК СчетУчетаНДС,
	|	Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат КАК ПокупателемВыставляетсяСчетФактураНаВозврат,
	|	Реквизиты.ПокупателюВыставляетсяКорректировочныйСчетФактура КАК ПокупателюВыставляетсяКорректировочныйСчетФактура,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	|	НЕОПРЕДЕЛЕНО КАК НДСвСтоимостиТоваров,
	|	НЕОПРЕДЕЛЕНО КАК СчетСписанияНДС,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС3,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	// В запросе выполняется явное приведение типа числовых полей через ВЫРАЗИТЬ(),
	// чтобы в результате запроса поля были как обычные числа, а не как в табличной части 
	// документа - неотрицательные, т.к. потом при формировании движений выполняется 
	// инвертирование знака (проводка сторно).
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.Услуга КАК ЭтоУслуга,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Себестоимость КАК ЧИСЛО(15, 2)) КАК Себестоимость,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|				ТОГДА ТаблицаТовары.Сумма
		|			ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВзаиморасчетов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|				ТОГДА ТаблицаТовары.Сумма
		|			ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.ПереданныеСчетУчета КАК ПереданныеСчетУчета,
		|	ЕСТЬNULL(ТаблицаТовары.ПереданныеСчетУчета.Забалансовый, ЛОЖЬ) КАК ПереданныеСчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ВЫБОР
		|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоходЕНВД,
		|	ТаблицаТовары.СчетРасходов КАК СчетРасходов,
		|	ТаблицаТовары.Субконто КАК Субконто,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
		|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратнаяТара", НомераТаблиц.Количество());
	
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаВозвратнаяТара.Ссылка,
		|	ТаблицаВозвратнаяТара.НомерСтроки,
		|	ТаблицаВозвратнаяТара.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Сумма КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Сумма КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ТаблицаВозвратнаяТара.СчетУчета
		|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ТаблицаВозвратнаяТара
		|ГДЕ
		|	ТаблицаВозвратнаяТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)

	НомераТаблиц = Новый Структура;
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли; 
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		СуммыТаблицыТара = Результат[НомераТаблиц["СуммыТаблицыТара"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТара, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТара", СуммыТаблицыТара);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТара();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаВозвратнаяТара", "ПОМЕСТИТЬ ВременнаяТаблицаТара");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВозвратнаяТара.Ссылка = &Ссылка", "ТаблицаВозвратнаяТара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТара.НомерСтроки,
		|	ВременнаяТаблицаТара.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТара.СуммаРуб
		|ИЗ
		|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ЭтоУслуга,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СпособУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.СчетУчетаЗабалансовый,
	|	ВременнаяТаблицаТовары.ПереданныеСчетУчета,
	|	ВременнаяТаблицаТовары.ПереданныеСчетУчетаЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ДоходЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.ОтражениеВУСН
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеТара()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТара.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб
	|ПОМЕСТИТЬ СуммыТаблицыТара
	|ИЗ
	|	&СуммыТаблицыТара КАК СуммыТаблицыТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТара.Ссылка,
	|	ВременнаяТаблицаТара.НомерСтроки,
	|	ВременнаяТаблицаТара.Номенклатура,
	|	ВременнаяТаблицаТара.Количество,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб,
	|	ВременнаяТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
	|ИЗ
	|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТара КАК СуммыТаблицыТара
	|		ПО ВременнаяТаблицаТара.НомерСтроки = СуммыТаблицыТара.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровРеквизиты",                   Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары",               Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.ДатаРеализации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаДокументаРеализации,
	|	Реквизиты.Сделка,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
		
		НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", Неопределено);
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаЗабалансовый КАК Комиссионный,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанДокументОтгрузки
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.Ссылка
		|	КОНЕЦ КАК Партия,
		|	ТаблицаТовары.Себестоимость,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
		|	ТаблицаТовары.Субконто КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	1 КАК ВидКорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
		|	&КорПодразделение КАК КорПодразделение,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписанияНУ,
		|	0 КАК СуммаКорСписанияПР,
		|	0 КАК СуммаКорСписанияВР
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары", Неопределено);
		НомераТаблиц.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.ПереданныеСчетУчета КАК СчетУчета,
		|	ТаблицаТовары.ПереданныеСчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаЗабалансовый КАК Комиссионный,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.Себестоимость,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчета КАК КорСчетСписания,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
		|	ТаблицаТовары.Номенклатура КАК КорСубконто1,
		|	Реквизиты.Склад КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	НЕОПРЕДЕЛЕНО КАК Комитент,
		|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
		|	0 КАК СуммаРасчетовСКомитентом,
		|	&КорПодразделение КАК КорПодразделение,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписанияНУ,
		|	0 КАК СуммаКорСписанияПР,
		|	0 КАК СуммаКорСписанияВР
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеТары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	ТаблицаВозвратнаяТара.НомерСтроки,
	|	ТаблицаВозвратнаяТара.Номенклатура,
	|	ТаблицаВозвратнаяТара.Количество,
	|	ТаблицаВозвратнаяТара.СуммаВзаиморасчетов,
	|	ТаблицаВозвратнаяТара.СуммаРуб,
	|	ТаблицаВозвратнаяТара.СчетУчета,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат тары от комиссионера""
	|		ИНАЧЕ ""Возврат тары от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ВыручкаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВыручкаТовары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетДоходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВЫБОР
	|		КОГДА &ЭтоРозница
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаТовары.СчетУчетаЗабалансовый КАК ЭтоКомиссия,
	|	ТаблицаТовары.ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоДоговорСКомиссионером  Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента",       НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор) КАК СуммаВзаиморасчетовТорговыйСбор,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовПатент) КАК СуммаВзаиморасчетовПатент
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаРуб,
	|		0 КАК СуммаВзаиморасчетовКомитента,
	|		0 КАК СуммаВзаиморасчетовЕНВД,
	|		0 КАК СуммаВзаиморасчетовТорговыйСбор,
	|		0 КАК СуммаВзаиморасчетовПатент";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб,
		|		ВЫБОР
		|			КОГДА ТаблицаТовары.СчетУчетаЗабалансовый
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовКомитента,
		|		ВЫБОР
		|			КОГДА НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|					И НЕ &ДеятельностьНаПатенте
		|					И ТаблицаТовары.ДоходЕНВД
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовЕНВД,
		|		ВЫБОР
		|			КОГДА НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|					И НЕ &ДеятельностьНаПатенте
		|					И &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовТорговыйСбор,
		|		ВЫБОР
		|			КОГДА НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|					И &ДеятельностьНаПатенте
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовПатент
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	&ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	&ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	&КорПодразделение КАК КорПодразделение,
	|	Реквизиты.Сделка,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовКомитента,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовЕНВД,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Сделка КАК ДокументАванса,
		|	0 КАК СуммаЗачета
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ПараметрыПроведения.Вставить("РеализацияРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеализацияРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	&ДокументРасчетов КАК ДокументРасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СчетДоходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВЫБОР
	|		КОГДА &ЭтоРозница
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|				И НЕ &ЭтоРозница
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ Реквизиты.Ссылка
	|	КОНЕЦ КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаТовары.СчетУчетаЗабалансовый КАК ЭтоКомиссия,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЛОЖЬ КАК ЭтоНесырьевойТовар,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) КАК КодРаздел7ДекларацииНДС,
	|	ЛОЖЬ КАК КодСоответствуетСт149НКРФ,
	|	ЛОЖЬ КАК КодВключаетсяВРеестр,
	|	ЛОЖЬ КАК УслугиЗаРубежом,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ Реквизиты.Ссылка
	|	КОНЕЦ КАК ДокументРасчетовСКомитентом,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.ДатаРеализации
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТоварыСГТД", Неопределено);
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС",  Неопределено);
		ПараметрыПроведения.Вставить("ТоварыНДС",  Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыСГТД", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.СчетУчета В (&МассивСчетовДляГТД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС",  Неопределено);
		ПараметрыПроведения.Вставить("ТоварыНДС",  Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС", Неопределено);
	Иначе
		НомераТаблиц.Вставить("КомиссионныеТоварыНДС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.ПереданныеСчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчета КАК СчетУчетаПолучатель,
		|	ТаблицаТовары.СпособУчетаНДС КАК НовыйСпособУчетаНДС,
		|	Реквизиты.Склад КАК СкладПолучатель
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		  |	""Товары"" КАК ИмяСписка,
		  |	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		  |	ВЫБОР
		  |		КОГДА ТаблицаТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2019, 1, 1)
		  |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределен)
		  |		ИНАЧЕ ТаблицаТовары.СпособУчетаНДС
		  |	КОНЕЦ КАК СпособУчетаНДС
		  |ИЗ
		  |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
		  |ГДЕ
		  |	ТаблицаТовары.Ссылка = &Ссылка
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасходыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("УСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		ПараметрыПроведения.Вставить("УСНРеквизитыСделки", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
		НомераТаблиц.Вставить("УСНРеквизиты",       НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УСНТаблицаРасходов", НомераТаблиц.Количество());
		ПараметрыПроведения.Вставить("УСНРеквизитыСделки", Неопределено);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация,
		|	Реквизиты.Сделка,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.ВидДоговора,
		|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта,
		|	Реквизиты.УчетАгентскогоНДС,
		|	ИСТИНА КАК ЭтоВозврат,
		|	ЛОЖЬ КАК РасходыПредпринимателя
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТовары.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.Ссылка КАК Партия,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Себестоимость КАК Себестоимость,
		|	ТаблицаТовары.Себестоимость КАК Сумма,
		|	0 КАК НДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	Иначе
		ПараметрыПроведения.Вставить("УСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		НомераТаблиц.Вставить("УСНРеквизитыСделки", НомераТаблиц.Количество());
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.ДатаРеализации КАК Дата,
		|	Реквизиты.ДатаРеализации КАК Период,
		|	Реквизиты.Сделка КАК Ссылка,
		|	Реквизиты.Сделка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПроставитьСторноТаблиц(ТаблицаСписанныеТовары, ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания, СуммаСписанияНУ,
		|СуммаСписанияВР, СуммаСписанияПР, СуммаКорСписанияНУ, СуммаКорСписанияВР, СуммаКорСписанияПР");
	
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		МножительСписания = ?(Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, 1, -1);
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, МножительСписания);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, СуммаВзаиморасчетов, СуммаРуб, СуммаНДСРуб,
		|СуммаБУ, СуммаНУ, СуммаРасчетовСКомитентом, СуммаПоступленияОтКомитента");
		
	Если ТаблицаСобственныеТоварыУслуги <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСобственныеТоварыУслуги, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	Если ТаблицаТоварыУслугиКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаТоварыУслугиКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, Выручка, СуммаПоступления, СуммаНДС");
	
	Если ТаблицаРеализованныеТоварыКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаРеализованныеТоварыКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицыДляУСН(
			ПоступлениеРасходовУСНТаблицаРасходов,
			ТаблицаТовары,
			ТаблицаВзаиморасчеты,
			ТаблицаРеквизитыСделки,
			ТаблицаРеквизиты,
			СуммаСторноРасходов, // Рассчитывается и возвращается
			СуммаСторноНДС, // Рассчитывается и возвращается
			СуммаПризнанияНДС, // Рассчитывается и возвращается
			Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПорядокПризнанияРасходовПоНДС        = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияРасходовПоТоварам    = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияМатериальныхРасходов = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период);

	СуммаСторноНДС    = 0;
	СуммаПризнанияНДС = 0;

	Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Если это возврат от комиссионера, то движения по РасходамПриУСН делаются по данным других таблиц, а значит, надо вернуть Неопределено
		Возврат Неопределено;
	Иначе
		ВыделятьНДСУСН           = (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		ВыделятьНДСУСНРеализация = (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

		ТоварыПоОплате    = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		ТоварыПоОтгрузке  = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);

		Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
			
			ТаблицаРасходыУСНПоСделке = РасходыПоСделкеУСН(Реквизиты.Сделка); 
			
			МассивНоменклатуры 	= ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
			ТаблицаПартииСделки = ПартииПоСделкеУСН(Реквизиты, МассивНоменклатуры);
			
			// 1. Подготовить пустую таблицу для формирования движений
			НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Реквизиты.Сделка);
			НаборЗаписей.Прочитать();
			ТаблицаДвиженийРасходов = НаборЗаписей.ВыгрузитьКолонки();
			// Добавить обязательные колонки
			ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоТовар", Новый ОписаниеТипов("Булево"));
			ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоМатериал", Новый ОписаниеТипов("Булево"));

			// 2. Добавим в партии информацию об изменении ОтражениеВУСН
			НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(ТаблицаРеквизитыСделки[0], ТаблицаПартииСделки, "Реализация");

			// 3. Из движений по регистру РасходыПриУСН, сделанных документом Сделка, удалить приходы
			КолСтрок = ТаблицаРасходыУСНПоСделке.Количество();
			Для Н = 1 по КолСтрок Цикл
				Если ТаблицаРасходыУСНПоСделке[КолСтрок - Н].ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					ТаблицаРасходыУСНПоСделке.Удалить(ТаблицаРасходыУСНПоСделке[КолСтрок - Н]);
				КонецЕсли;
			КонецЦикла;

			// 4. Формирование таблицы фильтров
			ТаблицаФильтров = Новый ТаблицаЗначений;
			ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			ТаблицаФильтров.Колонки.Добавить("Условие");

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "ВидРасхода";
			Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Номенклатура;
			Фильтр.Условие      = "=";

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "СтатусыПартийУСН";
			Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Списанные;
			Фильтр.Условие      = "=";

			МассивНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "ЭлементРасхода";
			Фильтр.ЗначениеПоля = МассивНоменклатуры;
			Фильтр.Условие      = "В";

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "Партия";
			Фильтр.ЗначениеПоля = Реквизиты.Сделка;
			Фильтр.Условие      = "=";

			// 5. Из таблицы расходов выбираем соответствующие партии и элементы расходов
			ТаблицаОстатковРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(
				Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая),
				Реквизиты.Организация,
				ТаблицаФильтров);

			ТаблицаПартииСделки.Индексы.Добавить("Номенклатура");
			ТаблицаРасходыУСНПоСделке.Индексы.Добавить("ЭлементРасхода,Партия");
			ТаблицаОстатковРасходов.Индексы.Добавить("ЭлементРасхода");

			// 6 .Цикл по товарам, ...
			Для Каждого Строка Из ТаблицаТовары Цикл

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);

				НайденныеСтроки = ТаблицаПартииСделки.НайтиСтроки(СтруктураОтбора);

				СтатусСписания = Перечисления.ОтражениеВУСН.ПустаяСсылка();
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтатусСписания = НайденныеСтроки[0].СтатусСписания;
				КонецЕсли;

				//Добавить строки поступления по партиям
				КоличествоОсталосьСписать = Строка.Количество;
				Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
					Если НЕ КоличествоОсталосьСписать > 0 Тогда
						Прервать;
					КонецЕсли;
					Если НЕ СтрокаПартии.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;

					КоличествоСписать         = Мин(КоличествоОсталосьСписать, СтрокаПартии.Количество);
					КоличествоОсталосьСписать = КоличествоОсталосьСписать - КоличествоСписать;
					СтрокаПартии.Количество   = СтрокаПартии.Количество - КоличествоСписать;

					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ЭлементРасхода", Строка.Номенклатура);

					СтруктураОтбораПоПартиям = Новый Структура;
					СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода", Строка.Номенклатура);
					СтруктураОтбораПоПартиям.Вставить("Партия",         СтрокаПартии.ДокументОприходования);

					НайденныеСтрокиСписано = ТаблицаРасходыУСНПоСделке.НайтиСтроки(СтруктураОтбораПоПартиям);
					НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);

					КоличествоОсталосьСписатьРасход = КоличествоСписать;
					Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
						Если НЕ СтрокаСписания.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
							Если НЕ СтрокаСписания.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;
							Если НЕ КоличествоОсталосьСписатьРасход > 0 Тогда
								Прервать;
							КонецЕсли;
							Если НЕ СтрокаОстатка.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;

							КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество, СтрокаОстатка.Количество);
							Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
							//Добавить строки поступления по расходам
							НоваяСтрокаРасход = ТаблицаДвиженийРасходов.Добавить();
							НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();

							ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
							ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаОстатка);

							НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
							НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
							НоваяСтрокаПриход.СтатусыПартийУСН  = СтрокаСписания.СтатусыПартийУСН;
							НоваяСтрокаПриход.Партия            = СтрокаСписания.Партия;
							Если (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
									ИЛИ (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН  = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН   = Перечисления.СтатусыРасходовУСН.НеСписано;
							Иначе
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
							КонецЕсли;
							//Движение расход
							НоваяСтрокаРасход.Сумма      = Коэфф*СтрокаОстатка.Сумма;
							НоваяСтрокаРасход.НДС        = Коэфф*СтрокаОстатка.НДС;
							НоваяСтрокаРасход.Количество = КоличествоСписатьРасход;
							//Движение приход
							НоваяСтрокаПриход.Сумма      = Коэфф * СтрокаОстатка.Сумма;
							НоваяСтрокаПриход.НДС        = Коэфф * СтрокаОстатка.НДС;
							НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

							КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
							СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
							СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

							СтрокаОстатка.Количество = СтрокаОстатка.Количество - НоваяСтрокаПриход.Количество;
							СтрокаОстатка.Сумма      = СтрокаОстатка.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаОстатка.НДС        = СтрокаОстатка.НДС - НоваяСтрокаПриход.НДС;

							Если (Реквизиты.Период >= Дата("20060101"))
									И (ТоварыПоОтгрузке)
									И (НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаСторноРасходов = СуммаСторноРасходов
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.Сумма,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);
								СуммаСторноНДС = СуммаСторноНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							ИначеЕсли (ВыделятьНДСУСН)
									И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаПризнанияНДС = СуммаПризнанияНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							КонецЕсли;

						КонецЦикла;
					КонецЦикла;

					Если КоличествоОсталосьСписатьРасход > 0 Тогда
						Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
							Если НЕ СтрокаСписания.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;
							КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество);
							Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасход/СтрокаСписания.Количество);

							//Добавить строки поступления по расходам
							НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
							Для Каждого Кол Из ТаблицаДвиженийРасходов.Колонки Цикл
								Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
									Продолжить;
								КонецЕсли;
								НоваяСтрокаПриход[Кол.Имя] = СтрокаСписания[Кол.Имя];
							КонецЦикла;
							НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;

							//Определим сумму сторнируемых расходов
							ЭтоТовар	= БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)
								ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Товары);
							ЭтоМатериал	= БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Материалы);
							
							РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
						
							Если (РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
							Иначе
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
							КонецЕсли;

							//Движение приход
							НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
							НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
							НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

							КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
							СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
							СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

							Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
								НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
							КонецЕсли;

							Если (НЕ РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаСторноРасходов = СуммаСторноРасходов
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.Сумма,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);
								СуммаСторноНДС = СуммаСторноНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							ИначеЕсли (ВыделятьНДСУСН)
									И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаПризнанияНДС = СуммаПризнанияНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							КонецЕсли;

						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				Если КоличествоОсталосьСписать > 0 Тогда
					//Оприходовать по документу возврата
				КонецЕсли;

			КонецЦикла;

			//Недостающие поля.
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Период, "Период");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");

			Возврат ТаблицаДвиженийРасходов;

		Иначе // Поле "Сделка" пустое

			// Никакой подготовки не требуется, таблица уже подготовлена в запросе
			ТаблицаДвиженийРасходов = ПоступлениеРасходовУСНТаблицаРасходов.Скопировать();
			Возврат ТаблицаДвиженийРасходов;

		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция РасходыПоСделкеУСН(Сделка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка",     Сделка);
	Запрос.УстановитьПараметр("Субсчета10", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.Период,
	|	РасходыПриУСН.Регистратор,
	|	РасходыПриУСН.НомерСтроки,
	|	РасходыПриУСН.Активность,
	|	РасходыПриУСН.ВидДвижения,
	|	РасходыПриУСН.Организация,
	|	РасходыПриУСН.СтатусыОплатыРасходовУСН,
	|	РасходыПриУСН.РасчетныйДокумент,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.ВидРасхода,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.СтатусыПартийУСН,
	|	РасходыПриУСН.СчетУчета,
	|	РасходыПриУСН.Валюта,
	|	РасходыПриУСН.ДоговорКонтрагента,
	|	РасходыПриУСН.ОтражениеВУСН,
	|	РасходыПриУСН.НомерСтрокиДокумента,
	|	РасходыПриУСН.РеквизитыДокументаОплаты,
	|	РасходыПриУСН.Количество,
	|	РасходыПриУСН.Сумма,
	|	РасходыПриУСН.НДС,
	|	РасходыПриУСН.ЭтапПроведения,
	|	РасходыПриУСН.СтатусСписания,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМатериал,
	|	РасходыПриУСН.МоментВремени
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.Регистратор = &Сделка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПартииПоСделкеУСН(Реквизиты, МассивНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Сделка",      		Реквизиты.Сделка);
	Запрос.УстановитьПараметр("Организация", 		Реквизиты.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
 	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Сделка КАК Сделка,
	|	ИСТИНА КАК НепосредственнаяСделка
	|ПОМЕСТИТЬ ВременнаяТаблицаСделки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыВозвратаТоваров.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДокументыВозвратаТоваров
	|ГДЕ
	|	ДокументыВозвратаТоваров.Сделка = &Сделка
	|	И ДокументыВозвратаТоваров.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.СубконтоКт1 КАК Номенклатура,
	|	Партии.СубконтоКт2 КАК ДокументОприходования,
	|	Партии.КоличествоОборотКт КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПартии
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			Регистратор,
	|			,
	|			,
	|			,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И СубконтоКт1 В (&МассивНоменклатуры)) КАК Партии
	|ГДЕ
	|	Партии.Регистратор В
	|			(ВЫБРАТЬ
	|				Сделки.Сделка
	|			ИЗ
	|				ВременнаяТаблицаСделки КАК Сделки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ДокументОприходования КАК ДокументОприходования,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Партии.Номенклатура КАК Номенклатура,
	|		Партии.ДокументОприходования КАК ДокументОприходования,
	|		Партии.Количество КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаПартии КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|			ПО Партии.Регистратор = Сделки.Сделка
	|				И (Сделки.НепосредственнаяСделка)
	|	ГДЕ
	|		Партии.Количество > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Партии.Номенклатура,
	|		Партии.ДокументОприходования,
	|		Партии.Количество
	|	ИЗ
	|		ВременнаяТаблицаПартии КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|			ПО Партии.Регистратор = Сделки.Сделка
	|				И (НЕ Сделки.НепосредственнаяСделка)
	|	ГДЕ
	|		Партии.Количество < 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ДокументОприходования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицуВыручкиОтРеализацииИП(ТаблицаВыручки, ТаблицаРеквизиты) Экспорт

	Если ТаблицаВыручки = Неопределено ИЛИ ТаблицаВыручки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМПЗ	= ТаблицаВыручки.Скопировать();
	ТаблицаМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМПЗ.Колонки.Добавить("Продукция",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМПЗ.Колонки.Добавить("СчетЗатрат",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету",	Новый ОписаниеТипов("Булево"));
	ТаблицаМПЗ.Колонки.Добавить("СтатьяЗатрат",				Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("ВидРасходовНУ",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ТаблицаМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	ТаблицаМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	
	ТаблицаМПЗ.Колонки.СуммаРуб.Имя		= "Сумма";
	ТаблицаМПЗ.Колонки.СуммаНДСРуб.Имя	= "НДС";
	
	ВестиУчетПоВидамДеятельностиИП	= УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		ТаблицаМПЗ.ЗагрузитьКолонку(ТаблицаМПЗ.ВыгрузитьКолонку("Субконто"), "НоменклатурнаяГруппа");
	Иначе
		ОсновнаяНоменклатурнаяГруппа	= УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
		ТаблицаМПЗ.ЗаполнитьЗначения(ОсновнаяНоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	ТаблицаМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	
	Возврат ТаблицаМПЗ;

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.Дата КАК Дата
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РеквизитыРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
	|	Реквизиты.ДатаРеализации КАК ДатаРеализации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, ТаблицаСписанныеТовары, Отказ) Экспорт

	// Возврат от покупателям за прошлые месяцы должен
	// определять себестоимость возвращаемого товара за месяц реализации, 
	// поэтому такие документы всегда регистрируем в последовательности, 
	// чтобы при закрытии месяца они перепроводились по актуальным данным.

	ОбязательноРегистрироватьВПоследовательности = Истина;
	
	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.РеквизитыРегистрацияВПоследовательности);
		
	Если Параметры.Реквизиты.Количество() > 0 Тогда
	
		// Если параметры проведения для регистрации в последовательности заполнены, то анализируем их, 
		// иначе безусловно регистрируем в последовательности.
		Реквизиты = Параметры.Реквизиты[0];
		ОбязательноРегистрироватьВПоследовательности = Ложь;
		
		Если Реквизиты.УказанДокументОтгрузки
			И НачалоМесяца(Реквизиты.ДатаРеализации) <> НачалоМесяца(Реквизиты.Период) Тогда
			ОбязательноРегистрироватьВПоследовательности = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
	Иначе
		РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
			Объект,
			Отказ,
			ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
			ТаблицаСписанныеТовары);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "ДатаРеализации,"      		// <Дата> - дата документа, которым был реализован возвращаемый товар
	+ "УказанДокументОтгрузки";	  	// <Булево> - Истина, если указан документ отгрузки

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

	СформироватьДвиженияЗачетАвансаПоВозвратуОтПокупателя(
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		Параметры.Движения, 
		Отказ,
		Истина);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
	
КонецПроцедуры

// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура СформироватьДвиженияЗачетАвансаПоВозвратуОтПокупателя(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];

	Если ТипЗнч(Реквизиты.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтоОтложенноеПроведение 
		И ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		// При включенном отложенном проведении в момент оперативного проведения остатки по рублевым взаиморасчетам не получаем,
		// они будут актуализированы при выполнении отложенных расчетов.
		
		Если Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
			И НЕ УчетВзаиморасчетов.ЭтоВидДоговораРасчетыПоКомиссии(Реквизиты.ВидДоговора) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Проводки = Движения.Хозрасчетный;

	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = - СтрокаВзаиморасчетов.СуммаРуб;

			СчетАванса = ?(ЗначениеЗаполнено(Реквизиты.СчетУчетаРасчетовПоАвансам),
				Реквизиты.СчетУчетаРасчетовПоАвансам,
				Реквизиты.СчетУчетаРасчетовСКонтрагентом);

			Проводка.СчетДт = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Сделка);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			КонецЕсли;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.КорПодразделение;
			КонецЕсли;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт		 = Проводка.Сумма;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт		 = Проводка.Сумма;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ)

	Если ТаблицаРасходовДляУСН = Неопределено ИЛИ ТаблицаРасходовДляУСН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасходыПриУСН.Очистить();
	
	Для каждого ТекущаяЗапись Из ТаблицаРасходовДляУСН Цикл
		НоваяЗапись = Движения.РасходыПриУСН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяЗапись);
	КонецЦикла;
	
	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

//ИнтеграцияГИСМ

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция <> Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
	Если ИспользоватьАвтоматическийОбмен Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
	Иначе
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ВозвратТоваровОтПокупателяXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ВозвратТоваровОтПокупателяXML(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
	|	ВозвратТоваровОтПокупателя.Номер КАК Номер,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
	|	ВозвратТоваровОтПокупателя.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура) КАК ПредставлениеНоменклатуры,
	|	КонтрольныезнакиГИСМ.Код КАК НомерКиЗ,
	|	КонтрольныезнакиГИСМ.RFIDTID КАК TID,
	|	КонтрольныезнакиГИСМ.RFIDEPC КАК EPC
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныезнакиГИСМ
	|		ПО (КонтрольныезнакиГИСМ.Ссылка = Товары.КиЗ_ГИСМ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "return_signs";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ВозвратТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ВозвратТоваров.action_id  = ВозвратТоваров.action_id;
	
	Попытка
		ВозвратТоваров.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
	КонецПопытки;
	
	ВозвратТоваров.return_doc_num  = Шапка.Номер;
	ВозвратТоваров.return_doc_date = Шапка.Дата;
	
	ХранилищеВременныхДат = Новый Соответствие;
	ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
		ВозвратТоваров,
		"return_date",
		Шапка.Дата,
		ХранилищеВременныхДат);
	
	ВозвратТоваров.returns = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров, "returns");
	ВозвратТоваров.returns.signs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns, "signs");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns.signs, "sign");
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
			
			НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
			
			НоваяСтрока.sign_tid = СтрокаТЧ.TID;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
			
			Попытка
				НоваяСтрока.sign_sgtin = МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC);
			Исключение
				ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Для номенклатуры %1 указан некорректный EPC ""%2"".'"),
						ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика),
						СтрокаТЧ.EPC));
			КонецПопытки;
			
		КонецЕсли;
		
		ВозвратТоваров.returns.signs.sign.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ВозвратТоваров;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

//Конец ИнтеграцияГИСМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Возврат от покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Возврат от покупателя'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет-фактура от поставщика
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученный) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетФактураПолученный";
		КомандаПечати.Представление = НСтр("ru = 'Счет-фактура за поставщика'");
		КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактурПолученных";
	КонецЕсли;
	
	// Счет-фактура покупателю
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СчетФактура";
		КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
		КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактур";
		КомандаПечати.ФункциональныеОпции = "ИспользуетсяОСНО,ИспользуетсяНДФЛИП,ОсуществляетсяЗакупкаТоваровУслугДляКомитентов,ОсуществляетсяРеализацияТоваровУслугКомитентов,ВыписыватьСчетаФактурыСпецРежимы,УплачиватьНДССпецРежимы,ВедетсяУчетИмпортныхТоваров";
		КомандаПечати.ДополнительныеПараметры.Вставить("ИдентификаторВКомплекте","СчетФактураКомплект");
	КонецЕсли;
	
	// Универсальный передаточный документ за поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД) за поставщика'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРублевыхСуммДокументовВВалюте) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	КонецЕсли;
	
	// Реестр документов
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Реестр";
		КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Возврат товаров от покупателя""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм    = "ФормаСписка";
		КомандаПечати.Порядок       = 100;
	КонецЕсли; 
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																"Накладная",
																"Возврат от покупателя",
																ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати),
																,
																"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокументКомплект") Тогда
		ИменаФайлов = Неопределено;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "УПД",
			УчетНДС.ПечатьКомплектаУПД(
				КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, ИменаФайлов, ПараметрыПечати),,, ИменаФайлов);
	КонецЕсли;
		
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(
		МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная();

	Шапка = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл

		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Возврат от покупателя");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");

		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		СуммаНП  = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;

		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;
		
		ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
		Пока ВыборкаСтрокТара.Следующий() Цикл

			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТара);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + ВыборкаСтрокТара.Сумма;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС

		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		КоличествоПозиций = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТара.Количество();
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + КоличествоПозиций
		+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);

		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Номер,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента,
	|	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтПокупателя.Организация,
	|	ВозвратТоваровОтПокупателя.ПодразделениеОрганизации,
	|	ВозвратТоваровОтПокупателя.СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.ВалютаДокумента,
	|	ВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	|	ВозвратТоваровОтПокупателя.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровОтПокупателя.Товары.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровОтПокупателя.Товары.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС
	|	),
	|	ВозвратТоваровОтПокупателя.ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровОтПокупателя.ВозвратнаяТара.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровОтПокупателя.ВозвратнаяТара.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Ссылка";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаОстаткаДолгаПоСделке",                            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаОстаткаДолгаПоСделке",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.Сделка
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.Сумма
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|					И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.Сумма * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПредоплатыРуб,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаДт
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|					И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаКт * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаДт * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВалПоДокументу,
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ХозрасчетныйСубконто.Значение = ВТ_ТаблицаПоШапкеДокумента.Сделка
	|			И (НЕ ЕСТЬNULL(ВТ_ТаблицаПоШапкеДокумента.Сделка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|			И ХозрасчетныйСубконто.Период <= ВТ_ТаблицаПоШапкеДокумента.Ссылка.Дата
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|ГДЕ
	|	(Хозрасчетный.СчетДт В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|				ИЗ
	|					ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента)
	|			ИЛИ Хозрасчетный.СчетКт В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|				ИЗ
	|					ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	ХозрасчетныйСубконто.Значение,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|			ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу * (ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыРуб / ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал)
	|		ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыРуб
	|	КОНЕЦ КАК СуммаПредоплатыРуб,
	|	ВЫБОР
	|		КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|			ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу
	|		ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|	КОНЕЦ КАК СуммаПредоплатыВал,
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ) КАК ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата КАК ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ = ДанныеПервичныхДокументов.Документ
	|			И ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|				ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу
	|			ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|		КОНЕЦ <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Товар,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК ТоварНаименование,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК ВсегоВал,
	|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК НДСВал,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ВозвратТоваровОтПокупателяТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьДвиженияПоРегистрамУСН(
				ДокументОбъект,
				ТаблицаРасходовДляУСН,
				ТаблицаСписанныеТовары,
				ТаблицаВзаиморасчеты,
				ТаблицаРеквизиты,
				СуммаСторноРасходов,
				СуммаСторноНДС,
				СуммаПризнанияНДС,
				Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	// Может быть как возврат из реализации (если вид договора = "С комиссионером"),
	//  так и возврат от покупателя

	Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
		НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, СтруктураДопПараметров);
	Иначе
		Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
			// По регистру РасходыПриУСН
			СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ);
			// По регистру КУДиР
			СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС, СуммаСторноНДС, Движения, Отказ);
		Иначе
			СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, 0, 0, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС = 0, СуммаСторноНДС = 0, Движения, Отказ)

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	ДвиженияКУДиР = Движения.КнигаУчетаДоходовИРасходов;

	ДвиженияКУДиР.Очистить();

	Если СуммаПризнанияНДС <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = "При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).";
		СтрокаКниги.Графа7          = СуммаПризнанияНДС;
		СтрокаКниги.НДС             = 0;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(
			Реквизиты.Регистратор, Реквизиты.Организация, Реквизиты.Период);
	КонецЕсли;

	Если СуммаСторноРасходов <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
		СтрокаКниги.Графа7          = - СуммаСторноРасходов;
		СтрокаКниги.НДС             = - СуммаСторноНДС;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(
			Реквизиты.Регистратор, Реквизиты.Организация, Реквизиты.Период);
	КонецЕсли;

	ДвиженияКУДиР.Записывать = Истина;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура ЗаполнитьПоказателиПоСделке(ТаблицаТовары, ДанныеОбъекта) Экспорт
	Перем Ссылка;
	
	Если ДанныеОбъекта.Свойство("Ссылка", Ссылка) И ЗначениеЗаполнено(Ссылка) Тогда
		МоментВремени = Новый МоментВремени(ДанныеОбъекта.Дата, Ссылка);
	Иначе
		МоментВремени = Новый МоментВремени(КонецДня(ДанныеОбъекта.Дата)+1);
	КонецЕсли; 
	
	ТаблицаОстатков = Документы.РеализацияТоваровУслуг.ТоварыКВозвратуПоРеализации(ДанныеОбъекта.Сделка, МоментВремени);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Цена, НомерГТД");
	
	Для каждого СтрокаТовары Из ТаблицаТовары Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовары);
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.КоличествоПослеИзменения = 0;
			СтрокаТовары.СуммаПослеИзменения      = 0;
			СтрокаТовары.СуммаНДСПослеИзменения   = 0;
			СтрокаТовары.ИсправляемыйДокумент     = Неопределено;
		Иначе
			СтрокаОстатки = НайденныеСтроки[0];
			
			СтрокаТовары.КоличествоПослеИзменения = Макс(СтрокаОстатки.Количество - СтрокаТовары.Количество, 0);
			СтрокаТовары.СуммаПослеИзменения      = Макс(СтрокаОстатки.Сумма - СтрокаТовары.Сумма, 0);
			СтрокаТовары.СуммаНДСПослеИзменения   = Макс(СтрокаОстатки.СуммаНДС - СтрокаТовары.СуммаНДС, 0);
			СтрокаТовары.ИсправляемыйДокумент     = СтрокаОстатки.Ссылка;
			
			ТаблицаОстатков.Удалить(СтрокаОстатки);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВалютаРегламентированногоУчета",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНоменклатуры",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонстантаВалютаРегламентированногоУчета.Значение КАК ВалютаРеглУчета
	|ПОМЕСТИТЬ КонстантаВалютаРегламентированногоУчета
	|ИЗ
	|	Константа.ВалютаРегламентированногоУчета КАК КонстантаВалютаРегламентированногоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета
	|		ИНАЧЕ Реквизиты.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БратьСуммыИзРегистраРублевыеСуммы,
	|	"""" КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы
	|ПОМЕСТИТЬ ВременнаяТаблицаРеквизиты
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонстантаВалютаРегламентированногоУчета КАК КонстантаВалютаРегламентированногоУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.СчетаФактурыОтИмениОрганизации = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|						ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|					ИНАЧЕ Реквизиты.Организация
	|				КОНЕЦ
	|		КОГДА &ПредставлениеПоставщика <> """"
	|			ТОГДА &ПредставлениеПоставщика
	|		КОГДА СчетФактураВыданный.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И СчетФактураВыданный.Продавец <> СчетФактураВыданный.Контрагент
	|			ТОГДА ВЫБОР
	|					КОГДА СчетФактураВыданный.Продавец.ОбособленноеПодразделение
	|							И СчетФактураВыданный.Продавец.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|						ТОГДА СчетФактураВыданный.Продавец.ГоловнойКонтрагент
	|					ИНАЧЕ СчетФактураВыданный.Продавец
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|				ИНАЧЕ Реквизиты.Организация
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &АдресПоставщика <> """"
	|			ТОГДА &АдресПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресПоставщика,
	|	ВЫБОР
	|		КОГДА &ИННКПППоставщика <> """"
	|			ТОГДА &ИННКПППоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИННКПППоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.СчетаФактурыОтИмениОрганизации = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|						ТОГДА Реквизиты.Организация.ГоловнаяОрганизация.ИНН
	|					ИНАЧЕ Реквизиты.Организация.ИНН
	|				КОНЕЦ
	|		КОГДА СчетФактураВыданный.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И СчетФактураВыданный.Продавец <> СчетФактураВыданный.Контрагент
	|			ТОГДА СчетФактураВыданный.Продавец.ИНН
	|		ИНАЧЕ Реквизиты.Организация.ИНН
	|	КОНЕЦ КАК ИННПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.СчетаФактурыОтИмениОрганизации = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|						ТОГДА Реквизиты.ПодразделениеОрганизации
	|					ИНАЧЕ Реквизиты.Организация
	|				КОНЕЦ
	|		КОГДА СчетФактураВыданный.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И СчетФактураВыданный.Продавец <> СчетФактураВыданный.Контрагент
	|			ТОГДА СчетФактураВыданный.Продавец
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДСПокупателем КАК НДСИсчисляетсяНалоговымАгентом,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
	|	Реквизиты.СопроводительныеДокументы КАК СопроводительныеДокументы
	|ИЗ
	|	ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО Реквизиты.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ КАК ТабличнаяЧастьДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДСРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК ВсегоРубДоИзменения,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК СуммаБезНДСРубДоИзменения,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК НДСРубДоИзменения
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|	И РегистрСведенийРублевыеСуммыДокументовВВалюте.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|	1 КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Номенклатура КАК Товар,
	|	ТаблицаНоменклатуры.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаНоменклатуры.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТаблицаНоменклатуры.Количество КАК КоличествоИзменение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаНоменклатуры.КоличествоПослеИзменения = 0
	|									ТОГДА 0
	|								КОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения = 0
	|									ТОГДА ТаблицаНоменклатуры.Цена
	|								ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаПослеИзменения - ТаблицаНоменклатуры.СуммаНДСПослеИзменения) / ТаблицаНоменклатуры.КоличествоПослеИзменения КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаНоменклатуры.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.КоличествоПослеИзменения = 0
	|					ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|				ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаНоменклатуры.КоличествоПослеИзменения = 0
	|									ТОГДА 0
	|								КОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения = 0
	|									ТОГДА ТаблицаНоменклатуры.Цена
	|								ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаНоменклатуры.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Количество = 0
	|					ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|				ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаИзменение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|	КОНЕЦ КАК СуммаНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДС
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|	КОНЕЦ КАК СуммаНДСИзменение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.СуммаПослеИзменения - ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|					ИНАЧЕ ТаблицаНоменклатуры.СуммаПослеИзменения
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб
	|	КОНЕЦ КАК СтоимостьБезНДСИзменение,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.СуммаПослеИзменения
	|					ИНАЧЕ ТаблицаНоменклатуры.СуммаПослеИзменения + ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма + ТаблицаНоменклатуры.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб
	|	КОНЕЦ КАК СтоимостьСНДСИзменение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ТаблицаНоменклатуры.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварыКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаНоменклатуры.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаНоменклатуры.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныечастиДокументов.Товары))
	|			И (ТаблицаНоменклатуры.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &ДокументОснование
	|	И ТаблицаНоменклатуры.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Товар КАК Товар,
	|	ТаблицаНоменклатуры.ТоварКод КАК ТоварКод,
	|	ТаблицаНоменклатуры.ТоварАртикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаНоменклатуры.ПредставлениеСтраны КАК ПредставлениеСтраны,
	|	ТаблицаНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаНоменклатуры.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТаблицаНоменклатуры.КоличествоПослеИзменения + ТаблицаНоменклатуры.КоличествоИзменение КАК КоличествоДоИзменения,
	|	ТаблицаНоменклатуры.ЦенаПослеИзменения КАК ЦенаДоИзменения,
	|	ТаблицаНоменклатуры.ЦенаПослеИзменения КАК ЦенаПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения + ТаблицаНоменклатуры.СтоимостьБезНДСИзменение КАК СтоимостьБезНДСДоИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСПослеИзменения + ТаблицаНоменклатуры.СуммаНДСИзменение КАК СуммаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения + ТаблицаНоменклатуры.СтоимостьСНДСИзменение КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСИзменение > 0
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьБезНДСИзменение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСИзменение < 0
	|			ТОГДА -ТаблицаНоменклатуры.СтоимостьБезНДСИзменение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСИзменение > 0
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСИзменение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСИзменение < 0
	|			ТОГДА -ТаблицаНоменклатуры.СуммаНДСИзменение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСИзменение > 0
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьСНДСИзменение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСИзменение < 0
	|			ТОГДА -ТаблицаНоменклатуры.СтоимостьСНДСИзменение > 0
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДСПослеИзменения,
	|	ТаблицаНоменклатуры.ЭтоУслуга КАК ЭтоУслуга,
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|	ТаблицаНоменклатуры.ТоварыКодТНВЭД КАК ТоварКодТНВЭД,
	|	ТаблицаНоменклатуры.ТоварыКодТНВЭД КАК ТоварКодТНВЭДДоИзменения
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(ТаблицаНоменклатуры.КоличествоИзменение <> 0
	|			ИЛИ ТаблицаНоменклатуры.СтоимостьБезНДСИзменение <> 0
	|			ИЛИ ТаблицаНоменклатуры.СуммаНДСИзменение <> 0
	|			ИЛИ ТаблицаНоменклатуры.ЦенаИзменение <> 0)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА

Процедура УстановитьТекстЗапроса(ЗапросВыборки, ТекстЗапроса, ИмяКолонки)
	ОператорЗапроса  = ЗапросВыборки.Операторы[0];
	
	Колонка = ЗапросВыборки.Колонки.Найти(ИмяКолонки);
	Если Колонка = Неопределено Тогда
		Индекс = -1;
	Иначе
		Индекс = ОператорЗапроса.ВыбираемыеПоля.Индекс(Колонка.Поля[0])
	КонецЕсли;
	
	Если Индекс = -1 Тогда
		ОператорЗапроса.ВыбираемыеПоля.Добавить(ТекстЗапроса);
		ЗапросВыборки.Колонки[ЗапросВыборки.Колонки.Количество()-1].Псевдоним = ИмяКолонки;
	Иначе
		ОператорЗапроса.ВыбираемыеПоля[Индекс] = Новый ВыражениеСхемыЗапроса(ТекстЗапроса);
	КонецЕсли; 
КонецПроцедуры

Функция ТекстЗапросаЗаполнениеДокументов(ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументОснованиеТовары.Номенклатура КАК Номенклатура,
	|	ДокументОснованиеТовары.НомерГТД КАК НомерГТД,
	|	ДокументОснованиеТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДокументОснованиеТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	ДокументОснованиеТовары.Количество КАК Количество,
	|	ДокументОснованиеТовары.Цена КАК Цена,
	|	ДокументОснованиеТовары.Сумма КАК Сумма,
	|	ДокументОснованиеТовары.СтавкаНДС КАК СтавкаНДС,
	|	ДокументОснованиеТовары.СуммаНДС КАК СуммаНДС,
	|	ДокументОснованиеТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	&ДокументОснование КАК ИсправляемыйДокумент,
	|	1 КАК КурсДокумента,
	|	1 КАК КратностьДокумента,
	|	ЛОЖЬ КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументОснованиеТовары
	|ГДЕ
	|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
	|	И НЕ ДокументОснованиеТовары.Номенклатура.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснованиеТовары.НомерСтроки";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросВыборки = СхемаЗапроса.ПакетЗапросов[0];
	
	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	
	Если ДокументОснованиеИмя = "ОтражениеНачисленияНДС" Тогда
		ИмяТаблицы = СтрШаблон("Документ.%1.ТоварыИУслуги", ДокументОснованиеИмя);
	Иначе
		УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.Ссылка.СуммаВключаетНДС",  "СуммаВключаетНДС");
		УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.СчетРасходов",             "СчетРасходов");
		УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
		УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.Субконто",                 "Субконто");
		
		Если НЕ ДокументОснованиеИмя = "РозничнаяПродажа" Тогда
			УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.НомерГТД",             "НомерГТД");
			УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.СтранаПроисхождения",  "СтранаПроисхождения");
			УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.СчетУчета",            "СчетУчета");
			УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.СчетДоходов",          "СчетДоходов");
			
			Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
				УстановитьТекстЗапроса(ЗапросВыборки, "
				|	ВЫБОР КОГДА ДокументОснованиеТовары.Ссылка.ВалютаДокумента = ДокументОснованиеТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
				|		ДокументОснованиеТовары.Ссылка.КурсВзаиморасчетов
				|	ИНАЧЕ
				|		1
				|	КОНЕЦ", "КурсДокумента");
				УстановитьТекстЗапроса(ЗапросВыборки, "
				|	ВЫБОР КОГДА ДокументОснованиеТовары.Ссылка.ВалютаДокумента = ДокументОснованиеТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
				|		ДокументОснованиеТовары.Ссылка.КратностьВзаиморасчетов
				|	ИНАЧЕ
				|		1
				|	КОНЕЦ", "КратностьДокумента");
				УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.ПереданныеСчетУчета", "ПереданныеСчетУчета");
				УстановитьТекстЗапроса(ЗапросВыборки, "ДокументОснованиеТовары.КодТНВЭД", "КодТНВЭД");
			КонецЕсли; 
		КонецЕсли;
		
		ИмяТаблицы = СтрШаблон("Документ.%1.Товары", ДокументОснованиеИмя);
	КонецЕсли;
	
	ИсточникиЗапроса       = ЗапросВыборки.Операторы[0].Источники;
	МодифицируемыйИсточник = ИсточникиЗапроса.НайтиПоПсевдониму("ДокументОснованиеТовары");
	
	ИсточникиЗапроса.Заменить(
		ИсточникиЗапроса.Индекс(МодифицируемыйИсточник),
		ЗапросВыборки.ДоступныеТаблицы.Найти(ИмяТаблицы));
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ПроверитьКорректностьЗаполненияДокументов(СписокДокументов) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК ВозвратСсылка,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК ИсходныйДокументДата,
	|	РеализацияТоваровУслугТовары.Ссылка КАК ИсходныйДокументСсылка
	|ПОМЕСТИТЬ ВТ_ОснованияВозврата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка = РеализацияТоваровУслугТовары.Ссылка
	|			И ВозвратТоваровОтПокупателяТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|			И ВозвратТоваровОтПокупателяТовары.НомерГТД = РеализацияТоваровУслугТовары.НомерГТД
	|			И ВозвратТоваровОтПокупателяТовары.Цена = РеализацияТоваровУслугТовары.Цена
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&СписокДокументов)
	|	И НЕ РеализацияТоваровУслугТовары.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.НомерГТД,
	|	ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка.Дата,
	|	ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТоварыИсходный
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка = ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка.Сделка
	|			И ВозвратТоваровОтПокупателяТовары.Номенклатура = ВозвратТоваровОтПокупателяТоварыИсходный.Номенклатура
	|			И ВозвратТоваровОтПокупателяТовары.Цена = ВозвратТоваровОтПокупателяТоварыИсходный.Цена
	|			И ВозвратТоваровОтПокупателяТовары.НомерГТД = ВозвратТоваровОтПокупателяТоварыИсходный.НомерГТД
	|			И ВозвратТоваровОтПокупателяТовары.Ссылка.МоментВремени > ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка.МоментВремени
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&СписокДокументов)
	|	И НЕ ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка ЕСТЬ NULL
	|	И НЕ ВозвратТоваровОтПокупателяТоварыИсходный.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.НомерГТД,
	|	КорректировкаРеализацииТовары.Ссылка.Дата,
	|	КорректировкаРеализацииТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = КорректировкаРеализацииТовары.Номенклатура
	|			И ВозвратТоваровОтПокупателяТовары.Цена = КорректировкаРеализацииТовары.Цена
	|			И ВозвратТоваровОтПокупателяТовары.НомерГТД = КорректировкаРеализацииТовары.НомерГТД
	|			И ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка = КорректировкаРеализацииТовары.Ссылка.ДокументРеализации
	|			И ВозвратТоваровОтПокупателяТовары.Ссылка.МоментВремени > КорректировкаРеализацииТовары.Ссылка.МоментВремени
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&СписокДокументов)
	|	И НЕ КорректировкаРеализацииТовары.Ссылка ЕСТЬ NULL
	|	И НЕ КорректировкаРеализацииТовары.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОснованияВозврата.ВозвратСсылка КАК ВозвратСсылка,
	|	ВТ_ОснованияВозврата.Номенклатура КАК Номенклатура,
	|	ВТ_ОснованияВозврата.Цена КАК Цена,
	|	ВТ_ОснованияВозврата.НомерГТД КАК НомерГТД,
	|	МАКСИМУМ(ВТ_ОснованияВозврата.ИсходныйДокументДата) КАК ИсходныйДокументДата
	|ПОМЕСТИТЬ ВТ_СрезПоследнихДата
	|ИЗ
	|	ВТ_ОснованияВозврата КАК ВТ_ОснованияВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОснованияВозврата.ВозвратСсылка,
	|	ВТ_ОснованияВозврата.Номенклатура,
	|	ВТ_ОснованияВозврата.Цена,
	|	ВТ_ОснованияВозврата.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОснованияВозврата.ВозвратСсылка КАК Ссылка,
	|	ВТ_ОснованияВозврата.Номенклатура КАК Номенклатура,
	|	ВТ_ОснованияВозврата.Цена КАК Цена,
	|	ВТ_ОснованияВозврата.НомерГТД КАК НомерГТД,
	|	МАКСИМУМ(ВТ_ОснованияВозврата.ИсходныйДокументСсылка) КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ВТ_ОснованияВозвратаСрезПоследних
	|ИЗ
	|	ВТ_ОснованияВозврата КАК ВТ_ОснованияВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезПоследнихДата КАК ВТ_СрезПоследнихДата
	|		ПО ВТ_ОснованияВозврата.ВозвратСсылка = ВТ_СрезПоследнихДата.ВозвратСсылка
	|			И ВТ_ОснованияВозврата.Номенклатура = ВТ_СрезПоследнихДата.Номенклатура
	|			И ВТ_ОснованияВозврата.Цена = ВТ_СрезПоследнихДата.Цена
	|			И ВТ_ОснованияВозврата.НомерГТД = ВТ_СрезПоследнихДата.НомерГТД
	|			И ВТ_ОснованияВозврата.ИсходныйДокументДата = ВТ_СрезПоследнихДата.ИсходныйДокументДата
	|ГДЕ
	|	НЕ ВТ_СрезПоследнихДата.ИсходныйДокументДата ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОснованияВозврата.ВозвратСсылка,
	|	ВТ_ОснованияВозврата.Номенклатура,
	|	ВТ_ОснованияВозврата.Цена,
	|	ВТ_ОснованияВозврата.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК ВозвратТоваров,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснованияВозвратаСрезПоследних КАК ОснованияВозврата
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = ОснованияВозврата.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&СписокДокументов)
	|	И ВозвратТоваровОтПокупателяТовары.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|	И ОснованияВозврата.ИсправляемыйДокумент ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТекущийВозвратТовары.Ссылка,
	|	ТекущийВозвратТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТекущийВозвратТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснованияВозвратаСрезПоследних КАК ОснованияВозврата
	|		ПО ТекущийВозвратТовары.Ссылка = ОснованияВозврата.Ссылка
	|			И ТекущийВозвратТовары.Номенклатура = ОснованияВозврата.Номенклатура
	|			И ТекущийВозвратТовары.Цена = ОснованияВозврата.Цена
	|			И ТекущийВозвратТовары.НомерГТД = ОснованияВозврата.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ИсправляемыйДокументТовары
	|		ПО (ОснованияВозврата.ИсправляемыйДокумент = ИсправляемыйДокументТовары.Ссылка)
	|			И (ОснованияВозврата.Номенклатура = ИсправляемыйДокументТовары.Номенклатура)
	|			И (ОснованияВозврата.Цена = ИсправляемыйДокументТовары.Цена)
	|			И (ОснованияВозврата.НомерГТД = ИсправляемыйДокументТовары.НомерГТД)
	|ГДЕ
	|	(ИсправляемыйДокументТовары.Ссылка <> ТекущийВозвратТовары.ИсправляемыйДокумент
	|			ИЛИ ИсправляемыйДокументТовары.КоличествоПослеИзменения <> ТекущийВозвратТовары.КоличествоПослеИзменения + ТекущийВозвратТовары.Количество
	|			ИЛИ ИсправляемыйДокументТовары.СуммаПослеИзменения <> ТекущийВозвратТовары.СуммаПослеИзменения + ТекущийВозвратТовары.Сумма
	|			ИЛИ ИсправляемыйДокументТовары.СуммаНДСПослеИзменения <> ТекущийВозвратТовары.СуммаНДСПослеИзменения + ТекущийВозвратТовары.СуммаНДС)
	|	И ТекущийВозвратТовары.Ссылка В(&СписокДокументов)
	|	И НЕ ИсправляемыйДокументТовары.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТекущийВозвратТовары.Ссылка,
	|	ТекущийВозвратТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТекущийВозвратТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснованияВозвратаСрезПоследних КАК ОснованияВозврата
	|		ПО ТекущийВозвратТовары.Ссылка = ОснованияВозврата.Ссылка
	|			И ТекущийВозвратТовары.Номенклатура = ОснованияВозврата.Номенклатура
	|			И ТекущийВозвратТовары.Цена = ОснованияВозврата.Цена
	|			И ТекущийВозвратТовары.НомерГТД = ОснованияВозврата.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ИсправляемыйДокументТовары
	|		ПО (ОснованияВозврата.ИсправляемыйДокумент = ИсправляемыйДокументТовары.Ссылка)
	|			И (ОснованияВозврата.Номенклатура = ИсправляемыйДокументТовары.Номенклатура)
	|			И (ОснованияВозврата.Цена = ИсправляемыйДокументТовары.Цена)
	|			И (ОснованияВозврата.НомерГТД = ИсправляемыйДокументТовары.НомерГТД)
	|ГДЕ
	|	(ИсправляемыйДокументТовары.Ссылка <> ТекущийВозвратТовары.ИсправляемыйДокумент
	|			ИЛИ ИсправляемыйДокументТовары.Количество <> ТекущийВозвратТовары.КоличествоПослеИзменения + ТекущийВозвратТовары.Количество
	|			ИЛИ ИсправляемыйДокументТовары.Сумма <> ТекущийВозвратТовары.СуммаПослеИзменения + ТекущийВозвратТовары.Сумма
	|			ИЛИ ИсправляемыйДокументТовары.СуммаНДС <> ТекущийВозвратТовары.СуммаНДСПослеИзменения + ТекущийВозвратТовары.СуммаНДС)
	|	И ТекущийВозвратТовары.Ссылка В(&СписокДокументов)
	|	И НЕ ИсправляемыйДокументТовары.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТекущийВозвратТовары.Ссылка,
	|	ТекущийВозвратТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТекущийВозвратТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснованияВозвратаСрезПоследних КАК ОснованияВозврата
	|		ПО ТекущийВозвратТовары.Ссылка = ОснованияВозврата.Ссылка
	|			И ТекущийВозвратТовары.Номенклатура = ОснованияВозврата.Номенклатура
	|			И ТекущийВозвратТовары.Цена = ОснованияВозврата.Цена
	|			И ТекущийВозвратТовары.НомерГТД = ОснованияВозврата.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ИсправляемыйДокументТовары
	|		ПО ТекущийВозвратТовары.ИсправляемыйДокумент = ИсправляемыйДокументТовары.Ссылка
	|			И ТекущийВозвратТовары.Номенклатура = ИсправляемыйДокументТовары.Номенклатура
	|			И ТекущийВозвратТовары.Цена = ИсправляемыйДокументТовары.Цена
	|			И ТекущийВозвратТовары.НомерГТД = ИсправляемыйДокументТовары.НомерГТД
	|ГДЕ
	|	(ИсправляемыйДокументТовары.Ссылка <> ТекущийВозвратТовары.ИсправляемыйДокумент
	|			ИЛИ ИсправляемыйДокументТовары.Количество <> ТекущийВозвратТовары.КоличествоПослеИзменения + ТекущийВозвратТовары.Количество
	|			ИЛИ ИсправляемыйДокументТовары.Сумма <> ТекущийВозвратТовары.СуммаПослеИзменения + ТекущийВозвратТовары.Сумма
	|			ИЛИ ИсправляемыйДокументТовары.СуммаНДС <> ТекущийВозвратТовары.СуммаНДСПослеИзменения + ТекущийВозвратТовары.СуммаНДС)
	|	И ТекущийВозвратТовары.Ссылка В(&СписокДокументов)
	|	И НЕ ИсправляемыйДокументТовары.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ТребующиеПерепроведения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВозвратТоваров");
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                 ТребующиеПерепроведения.Количество() = 0);
	Результат.Вставить("ТребующиеПерепроведения", ТребующиеПерепроведения);
	
	Возврат Результат;
КонецФункции

#Область ПечатьУПД

// Определяет какие из переданных документов, на основании которых формируется печатная форма
// универсального передаточного документа на печать, можно распечатать без выписки счета-фактуры.
// В конфигурации не поддерживается печать универсального передаточного документа в статусе "2" 
// (только первичный документ), если в документе выделена сумма НДС и сумма налога не относится
// к посреднической деятельности.
//
// Параметры:
//   МассивДокументов - Массив - массив документов, по которым формируется печатная форма.
//
// Возвращаемое значение:
//   ДокументыСчетФактураНеТребуются - Массив - документы, для печати которых не требуется выписка счета-фактуры.
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)
	|	И ВозвратТоваровОтПокупателя.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = ВозвратТоваровОтПокупателя.Ссылка)
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЕстьНДС Тогда
			ДокументыСчетФактураНеТребуются.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

// Возвращает текст запроса для формирования печатной формы универсального передаточного документа
// Параметры:
//   ИспользуетсяПостановлениеНДС981 - Булево - признак применения постановления Правительства РФ №981
//
// Возвращаемое значение:
//   ТекстЗапроса - Строка - текст запроса для формирования печатной формы универсального передаточного документа.
Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(ИспользуетсяПостановлениеНДС981 = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) КАК СчетФактура,
	|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
	|	"""" КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	"""" КАК Руководитель,
	|	"""" КАК ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЛОЖЬ КАК УдалитьПрефиксыИзНомера,
	|	ЛОЖЬ КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	"""" КАК КППСчетаФактуры,
	|	"""" КАК КПППродавца,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)
	|	И &УсловиеПоДате";
	
	Если ИспользуетсяПостановлениеНДС981 = Неопределено Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате", "ИСТИНА");
	ИначеЕсли ИспользуетсяПостановлениеНДС981 Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ВозвратТоваровОтПокупателя.Дата >= ДАТАВРЕМЯ(2017,10,1)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ВозвратТоваровОтПокупателя.Дата < ДАТАВРЕМЯ(2017,10,1)");
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли