#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мИспользоватьФункционалВыгрузкиВГЦЖС Экспорт; // Хранит значение константы "ИспользоватьФункционалВыгрузкиВГЦЖС".

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет, имеется ли действующая льгота по текущему проживающему.
//
Функция ПроверитьУстановкуЛьготыПоПроживающему(УстановкаЛьготы, ДатаНачала)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",              ДатаНачала);
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", УстановкаЛьготы.Льгота);
	Запрос.УстановитьПараметр("Проживающий",       УстановкаЛьготы.Проживающий);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий = &Проживающий
	|				И ЛьготнаяКатегория = &ЛьготнаяКатегория
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних";
	
	ВыборкаПоЛьготникам = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоЛьготникам.Следующий() Тогда
		Возврат ВыборкаПоЛьготникам.Действие;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьУстановкуЛьготыПоПроживающему()

// Проверяет необходимость установки льготы.
//
Процедура ПроверитьУстановкуЛьготыПоПроживающим(ТаблицаУстановкиЛьготы, Отказ, Заголовок)

	Для Каждого СтрокаУстановкиЛьготы Из ТаблицаУстановкиЛьготы Цикл
		
		Если ЗначениеЗаполнено(СтрокаУстановкиЛьготы.ДатаНачала) Тогда
			ДатаНачала = СтрокаУстановкиЛьготы.ДатаНачала;
		Иначе
			ДатаНачала = Дата;
		КонецЕсли;
		
		ЛьготаУстановлена = ПроверитьУстановкуЛьготыПоПроживающему(СтрокаУстановкиЛьготы, ДатаНачала);
		Если ВидОперации = Перечисления.КВП_ВидыОперацийУстановкиЛьгот.УстановкаЛьготы И ЛьготаУстановлена Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для проживающего """ + СтрокаУстановкиЛьготы.Проживающий 
			+ """ уже действует льгота """ + СтрокаУстановкиЛьготы.Льгота + """ на " 
			+ Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + "!", Отказ, Заголовок);
		ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийУстановкиЛьгот.ПрекращениеЛьготы И Не ЛьготаУстановлена Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для проживающего """ + СтрокаУстановкиЛьготы.Проживающий 
			+ """ льгота """ + СтрокаУстановкиЛьготы.Льгота + """ на " 
			+ Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " не установлена!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.КВП_ВидыОперацийУстановкиЛьгот.УстановкаЛьготы
			 И Не СтрокаУстановкиЛьготы.ДатаОкончания = Дата(1, 1, 1)
			 И СтрокаУстановкиЛьготы.ДатаОкончания <= СтрокаУстановкиЛьготы.ДатаНачала Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для проживающего """ + СтрокаУстановкиЛьготы.Проживающий 
			+ """ дата окончания предоставления льготы должна быть больше чем дата начала предоставления льготы!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьУстановкуЛьготыПоПроживающим()

// Реализует движения документа по регистру КВП_НазначенныеЛьготы.
Процедура ДвижениеПоРегиструНазначенныеЛьготы(СтруктураШапкиДокумента, ТаблицаУстановкиЛьгот, Отказ, Заголовок)
	
	ДействиеНаНачало = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.КВП_ВидыОперацийУстановкиЛьгот.УстановкаЛьготы,
						 Истина, 
						 Ложь);
	
	Для Каждого СтрокаУстановкиЛьгот Из ТаблицаУстановкиЛьгот Цикл
		
		Если ЗначениеЗаполнено(СтрокаУстановкиЛьгот.ДатаНачала) Тогда
			ДатаНачала = СтрокаУстановкиЛьгот.ДатаНачала;
		Иначе
			ДатаНачала = Дата;
		КонецЕсли;
		
		// Регистр "Назначенные льготы" имеет периодичность «В пределах секунды». 
		// Но при проведении искусственно устанавливаем периодичность в пределах дня, для этого:
		// - при установке перемещаем период на начало дня, 
		// - при отмене льготы - на начало дня + 1 секунда.
		
		// Начало действия льготы
		Движение                        = Движения.КВП_НазначенныеЛьготы.Добавить();
		Движение.Период                 = НачалоДня(СтруктураШапкиДокумента.Дата);
		Движение.ДатаИзменения          = ДатаНачала;
		Движение.Проживающий            = СтрокаУстановкиЛьгот.Проживающий;
		Движение.ЛьготнаяКатегория      = СтрокаУстановкиЛьгот.Льгота;
		Движение.Действие               = ДействиеНаНачало;
		Движение.ВидДокумента           = СтрокаУстановкиЛьгот.ВидДокумента;
		Движение.СерияДокумента         = СтрокаУстановкиЛьгот.СерияДокумента;
		Движение.НомерДокумента         = СтрокаУстановкиЛьгот.НомерДокумента;
		Движение.ДатаВыдачиДокумента    = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента;
		Движение.ДатаОкончанияДокумента = СтрокаУстановкиЛьгот.ДатаОкончанияДокумента;
		Движение.КемВыдан               = СтрокаУстановкиЛьгот.КемВыдан;
		
		Если мИспользоватьФункционалВыгрузкиВГЦЖС Тогда
			
			Движение.ВидДокумента2           = СтрокаУстановкиЛьгот.ВидДокумента2;
			Движение.ВидДокумента3           = СтрокаУстановкиЛьгот.ВидДокумента3;
			Движение.СерияДокумента2         = СтрокаУстановкиЛьгот.СерияДокумента2;
			Движение.СерияДокумента3         = СтрокаУстановкиЛьгот.СерияДокумента3;
			Движение.НомерДокумента2         = СтрокаУстановкиЛьгот.НомерДокумента2;
			Движение.НомерДокумента3         = СтрокаУстановкиЛьгот.НомерДокумента3;
			Движение.ДатаВыдачиДокумента2    = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента2;
			Движение.ДатаВыдачиДокумента3    = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента3;
			Движение.ДатаОкончанияДокумента2 = СтрокаУстановкиЛьгот.ДатаОкончанияДокумента2;
			Движение.ДатаОкончанияДокумента3 = СтрокаУстановкиЛьгот.ДатаОкончанияДокумента3;
			Движение.КемВыдан2               = СтрокаУстановкиЛьгот.КемВыдан2;
			Движение.КемВыдан3               = СтрокаУстановкиЛьгот.КемВыдан3;
			
		КонецЕсли;
		
		// Конец действия льготы
		Если СтрокаУстановкиЛьгот.ДатаОкончания <> '00010101' Тогда
			
			Движение = Движения.КВП_НазначенныеЛьготы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаУстановкиЛьгот);
			Движение.Период              = НачалоДня(СтруктураШапкиДокумента.Дата) + 1;
			Движение.ДатаИзменения       = УПЖКХ_РасчетЛьгот.ПолучитьДатуОкончанияДействияИлиПриостановкиЛьгот(СтрокаУстановкиЛьгот.ДатаОкончания);
			Движение.Проживающий         = СтрокаУстановкиЛьгот.Проживающий;
			Движение.ЛьготнаяКатегория   = СтрокаУстановкиЛьгот.Льгота;
			Движение.Действие            = Не ДействиеНаНачало;
			Движение.ВидДокумента        = СтрокаУстановкиЛьгот.ВидДокумента;
			Движение.СерияДокумента      = СтрокаУстановкиЛьгот.СерияДокумента;
			Движение.НомерДокумента      = СтрокаУстановкиЛьгот.НомерДокумента;
			Движение.ДатаВыдачиДокумента = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента;
			Движение.КемВыдан            = СтрокаУстановкиЛьгот.КемВыдан;
			
			Если мИспользоватьФункционалВыгрузкиВГЦЖС Тогда
				
				Движение.ВидДокумента2        = СтрокаУстановкиЛьгот.ВидДокумента2;
				Движение.ВидДокумента3        = СтрокаУстановкиЛьгот.ВидДокумента3;
				Движение.СерияДокумента2      = СтрокаУстановкиЛьгот.СерияДокумента2;
				Движение.СерияДокумента3      = СтрокаУстановкиЛьгот.СерияДокумента3;
				Движение.НомерДокумента2      = СтрокаУстановкиЛьгот.НомерДокумента2;
				Движение.НомерДокумента3      = СтрокаУстановкиЛьгот.НомерДокумента3;
				Движение.ДатаВыдачиДокумента2 = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента2;
				Движение.ДатаВыдачиДокумента3 = СтрокаУстановкиЛьгот.ДатаВыдачиДокумента3;
				Движение.КемВыдан2            = СтрокаУстановкиЛьгот.КемВыдан2;
				Движение.КемВыдан3            = СтрокаУстановкиЛьгот.КемВыдан3;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет табличную часть документа.
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт
	
	// В будущем планируем реализовать настройку в учетной политике, которая бы задавала,
	// для какого типа жильцов(зарегистрированных или проживающих) давать устанавливать льготы,
	// поэтому тут выполнена подготовка к переходу на эту настройку.
	// Пока жильцы выбираются только из списка проживающих.
	
	ПоПроживающим = Истина; // тут необходимо проверить настройку учетной политики
	
	Запрос = Новый Запрос();
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийУстановкиЛьгот.ПрекращениеЛьготы Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НазначенныеЛьготы.Проживающий КАК Проживающий,
		|	НазначенныеЛьготы.ЛьготнаяКатегория КАК Льгота
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
		|			&ДатаЛьгот,
		|			Проживающий.Владелец = &Объект
		|				И ДатаИзменения <= &Дата) КАК НазначенныеЛьготы
		|ГДЕ
		|	НазначенныеЛьготы.Действие";
		
	Иначе
		
		Если ПоПроживающим Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Проживающие.Жилец КАК Проживающий
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
			|			,
			|			ЛицевойСчет = &Объект
			|				И ДатаИзменения < &Дата) КАК Проживающие
			|ГДЕ
			|	Проживающие.Проживает";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Зарегистрированные.Жилец КАК Проживающий
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
			|			,
			|			ЛицевойСчет = &Объект
			|				И ДатаИзменения < &Дата) КАК Зарегистрированные
			|ГДЕ
			|	Зарегистрированные.Зарегистрирован";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Объект",    Объект);
	Запрос.УстановитьПараметр("Дата",      Дата);
	Запрос.УстановитьПараметр("ДатаЛьгот", Новый Граница(НачалоДня(Дата), ВидГраницы.Исключая));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокЛьгот.Добавить();
		НоваяСтрока.ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура проведения документа
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_УстановкаЛьгот.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	ТаблицаУстановкиЛьгот   = ПараметрыПроведения.ТаблицаУстановкиЛьгот;
	
	ПроверитьУстановкуЛьготыПоПроживающим(ТаблицаУстановкиЛьгот, Отказ, Заголовок);
	
	мИспользоватьФункционалВыгрузкиВГЦЖС = Константы.УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖС.Получить();
	
	Если Не Отказ Тогда
		
		ДвижениеПоРегиструНазначенныеЛьготы(СтруктураШапкиДокумента, ТаблицаУстановкиЛьгот, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	ПроверяемыеРеквизиты.Добавить("Объект");
	
	ПроверяемыеРеквизиты.Добавить("СписокЛьгот.Проживающий");
	ПроверяемыеРеквизиты.Добавить("СписокЛьгот.Льгота");
	ПроверяемыеРеквизиты.Добавить("СписокЛьгот.ДатаНачала");
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли