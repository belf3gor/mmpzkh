#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Заполняет табличные части документа.
Процедура ЗаполнитьТабличнуюЧасть()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличныеЧасти();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаСервере
// Заполняет табличные части документа для лицевого счета.
Процедура ЗаполнитьСтрокуЛицевогоСчета(ЛицевойСчет)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличныеЧасти(ЛицевойСчет, Истина);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает доступность элементов управления формы.
Процедура УстановитьДоступность()
	
	Элементы.ГруппаШапка.Доступность            = НЕ Объект.ОтчетСдан;
	Элементы.Организация.Доступность            = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаОтбора.Доступность           = НЕ Объект.ОтчетСдан;
	Элементы.Период.Доступность                 = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаПлательщики.Доступность      = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаНачисления.Доступность       = НЕ Объект.ОтчетСдан;
	Элементы.ГруппаПотребителиУслуг.Доступность = НЕ Объект.ОтчетСдан;
	Элементы.Ответственный.Доступность          = НЕ Объект.ОтчетСдан;
	Элементы.Комментарий.Доступность            = НЕ Объект.ОтчетСдан;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов управления формы.
Процедура УстановитьВидимость()
	
	Элементы.ПлательщикиРайон.Видимость                    = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиУлица.Видимость                    = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиФормаСобственности.Видимость       = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиТипЗаселения.Видимость             = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиТипЗапирающегоУстройства.Видимость = Элементы.ФормаРасшифровка.Пометка;
	Элементы.ПлательщикиТипПлиты.Видимость                 = Элементы.ФормаРасшифровка.Пометка;
	
КонецПроцедуры

&НаСервере
// Функция получает ключ записи настроек выгрузки.
Функция ПолучитьКлючЗаписи()
	
	ТаблицаЗаписей = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(Объект.Дата);
	Если ТаблицаЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СоздатьКлючЗаписи(Новый Структура("Период", 
		ТаблицаЗаписей.Получить(0).Период));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура устанавливает отбор для табличной части "Документы льгот".
Процедура УстановитьОтборДетальныхТабличныхЧастей(Элемент)
	
	Элемент.Обновить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.Начисления.ОтборСтрок       = Новый ФиксированнаяСтруктура("ЛицевойСчет", Элемент.ТекущиеДанные.ЛицевойСчет);
		Элементы.ПотребителиУслуг.ОтборСтрок = Новый ФиксированнаяСтруктура("ЛицевойСчет", Элемент.ТекущиеДанные.ЛицевойСчет);
	Иначе
		Элементы.Начисления.ОтборСтрок       = Новый ФиксированнаяСтруктура("ЛицевойСчет",
		                                     ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
		Элементы.ПотребителиУслуг.ОтборСтрок = Новый ФиксированнаяСтруктура("ЛицевойСчет",
		                                     ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает код организации.
Функция ПолучитьКодОрганизации()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	КодОрганизации = ДокументОбъект.ПолучитьКодОрганизации();
	
	Возврат КодОрганизации;
	
КонецФункции

&НаКлиенте
// Процедура сохраняет файл на диск.
Процедура СохранитьФайлНаДиск(КаталогСохранения = Неопределено, МассивИмен)
	
	МассивВыгружаемыхФайлов = Новый Массив();
	КодОрганизации = ПолучитьКодОрганизации();

	СтруктураПараметровФайлов = СохранитьФайлНаДискНаСервере(КаталогСохранения, МассивИмен, КодОрганизации, МассивВыгружаемыхФайлов);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки",ЭтотОбъект, Новый Структура("КаталогСохранения, МассивИмен, СтруктураПараметровФайлов", КаталогСохранения, МассивИмен, СтруктураПараметровФайлов));
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
	
КонецПроцедуры // СохранитьФайлНаДиск()

&НаСервере
// Функция возвращает текст файла выгрузки.
Функция СохранитьФайлНаДискНаСервере(КаталогСохранения = Неопределено, МассивИмен, КодОрганизации, МассивВыгружаемыхФайлов)
	
	// Определяем действие настройки "ОбрезатьПрефиксЛС".
	Если ОбрезатьПрефиксЛС = Неопределено Тогда
		ОбрезатьПрефиксЛС = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ОпределитьДействиеНастройки_ОбрезатьПрефиксЛС(Объект.Дата);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметровФайлов = ДокументОбъект.СформироватьФайлыДляВыгрузки(КаталогСохранения, МассивИмен, ОбрезатьПрефиксЛС, КодОрганизации, МассивВыгружаемыхФайлов);
	
	Возврат СтруктураПараметровФайлов;
	
КонецФункции // СохранитьФайлНаДискНаСервере()

&НаКлиенте
// Процедура-обработчик, вызванная в процедуре "ВыгрузкаФайлов()".
Процедура ОбработатьПослеВыгрузки(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПомещенныеФайлы = Неопределено И Не ПомещенныеФайлы.Количество() = 0 Тогда
		
		КаталогСохранения  = ДополнительныеПараметры.КаталогСохранения;
		МассивИмен         = ДополнительныеПараметры.МассивИмен;
		ПараметрыДляПечати = ДополнительныеПараметры.СтруктураПараметровФайлов;
		Если КаталогСохранения <> Неопределено Тогда
			
			Текст = "Файлы успешно сохранены!" + Символы.ПС + "Путь к файлам: "
			+ Символы.Таб + КаталогСохранения + Символы.ПС + "Имена файлов:" + Символы.ПС;
			Для Каждого ТекИмя Из МассивИмен Цикл
				Текст = Текст + Символы.Таб + ТекИмя + Символы.ПС;
			КонецЦикла;
		Иначе
			
			Текст = "Файлы успешно сохранены!" + Символы.ПС + "Имена файлов:" + Символы.ПС;
			Для Каждого ТекИмя Из МассивИмен Цикл
				Текст = Текст + Символы.Таб + ТекИмя + Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		
		// Очищаем действие настройки для того, чтобы при повторном сохранении данных в файлы
		// и при изменении настройки "Обрезать префикс "л/с №" в наименованиях лицевых счетов"
		// не происходило ошибочное обрезание/сохранение префиксов.
		ОбрезатьПрефиксЛС = Неопределено;
		
		Текст              = Текст + "Сформировать сводную ведомость?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранитьНаДискПродолжение", ЭтотОбъект, Новый Структура("ПараметрыДляПечати", ПараметрыДляПечати));
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПослеВыгрузки()

&НаКлиенте
// Процедура формирует итоговые сводные ведомости.
Процедура СформироватьСводныеВедомости(ПараметрыДляПечати)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Документ.УПЖКХ_ОтчетОНачисленияхЗаЖКУ", 
	"СводнуюВедомость", 
	МассивОбъектов,
	ЭтаФорма,
	ПараметрыДляПечати);
	
КонецПроцедуры

&НаСервере
// Процедура удаляет строки из табличной части "Документы льгот".
Процедура УдалитьСтрокиТабличнойЧасти(ЛицевойСчет, УдалитьСтрокуТабличнойЧастиНачисления = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если УдалитьСтрокуТабличнойЧастиНачисления Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
			Если НЕ СтрокаТаблицы.ЛицевойСчет = ЛицевойСчет Тогда 
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Объект.Начисления.Загрузить(Объект.Начисления.Выгрузить(МассивСтрок));
		
	КонецЕсли;
	
	МассивСтрок.Очистить();
	Для Каждого СтрокаТаблицы Из Объект.ПотребителиУслуг Цикл
		Если НЕ СтрокаТаблицы.ЛицевойСчет = ЛицевойСчет Тогда
			МассивСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ПотребителиУслуг.Загрузить(Объект.ПотребителиУслуг.Выгрузить(МассивСтрок));
	
КонецПроцедуры

&НаКлиенте
// Процедура очищает текущую строку табличной части "Плательщики".
Процедура ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока, СтрокиОбработки = Неопределено)
	
	Для Каждого ТекЭлемент Из Элементы.Плательщики.ПодчиненныеЭлементы Цикл
		
		ИмяТекЭлемента = СтрЗаменить(ТекЭлемент.Имя, "Плательщики", "");
		
		Если ИмяТекЭлемента = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокиОбработки = Неопределено Тогда
			Если НЕ СтрокиОбработки.Найти(ИмяТекЭлемента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяСтрока[ИмяТекЭлемента] = "";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбъектДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_ОтчетОНачисленияхЗаЖКУ"));
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ОбъектДокумента,
		УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
		
	Иначе
		// Это существующий документ. 
		// Проверим, что его можно менять.
		СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Период = Объект.Дата;
	КонецЕсли;
	МесяцСтрока = Формат(Объект.Период, "ДФ='MMMM yyyy'");
	
	УстановитьДоступность();
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура обработчик команды "Настройки".
Процедура Настройки(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ФормаЗаписи",
	Новый Структура("Ключ, ПараметрНастройки", ПолучитьКлючЗаписи(),
	"Настройки выгрузки начислений за ЖКУ"), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "ПечатьТекущегоЛС".
Процедура ПечатьТекущегоЛС(Команда)
	
	ТекДанные = Элементы.Плательщики.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено И ЗначениеЗаполнено(ТекДанные.ЛицевойСчет) Тогда
		
		ФормаОтчета = ПолучитьФорму("Отчет.КВП_ВыпискаПоЛицевомуСчету.Форма", , ЭтаФорма);
		ФормаОтчета.Отчет.ЛицевойСчет   = ТекДанные.ЛицевойСчет;
		ФормаОтчета.Отчет.НачалоПериода = НачалоМесяца(Объект.Период);
		ФормаОтчета.Отчет.КонецПериода  = КонецМесяца(Объект.Период);
		ФормаОтчета.Отчет.ДатаВыдачи    = Объект.Период;
		ФормаОтчета.Отчет.Организация   = Объект.Организация;
		
		ФормаОтчета.СформироватьОтчетНаСервере();
		ФормаОтчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ПечатьТекущегоЛС()

&НаКлиенте
// Процедура обработчик команды "СохранитьНаДиск".
Процедура СохранитьНаДиск(Команда)
	
	Если Объект.Плательщики.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Табличные части не заполнены!");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса       = "Перед формированием файла необходимо записать документ. Записать?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранитьНаДиск", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СохранитьНаДискПродолжение();
	
КонецПроцедуры // СохранитьНаДиск()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "СохранитьНаДиск()".
Процедура ОбработатьРезультатВопросаСохранитьНаДиск(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьНаДискПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаСохранитьНаДиск()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СохранитьНаДиск()".
Процедура СохранитьНаДискПродолжение()
	
	КодОрганизации = ПолучитьКодОрганизации();
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("P1_" + КодОрганизации + "_" + Формат(Объект.Дата, "ДФ=""ММгггг""") + ".txt");
	МассивИмен.Добавить("P2_" + КодОрганизации + "_" + Формат(Объект.Дата, "ДФ=""ММгггг""") + ".txt");
	МассивИмен.Добавить("P3_" + КодОрганизации + "_" + Формат(Объект.Дата, "ДФ=""ММгггг""") + ".txt");
	
	Если РасширениеПодключено Тогда
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораКаталога.Заголовок = "Сохранение файлов";
		ДиалогВыбораКаталога.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("СохранитьНаДискПродолжениеЗавершение", ЭтотОбъект, МассивИмен));
	Иначе
		СохранитьФайлНаДиск(,МассивИмен);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаДискПродолжение()

&НаКлиенте

// Обрабатывает результат выбора католога сохранения.
Процедура СохранитьНаДискПродолжениеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	МассивИмен = ДополнительныеПараметры;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогСохранения = ВыбранныеФайлы[0];
		СохранитьФайлНаДиск(КаталогСохранения, МассивИмен);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаДискПродолжениеЗавершение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ОбработатьПослеВыгрузки()".
Процедура ОбработатьРезультатВопросаСохранитьНаДискПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьСводныеВедомости(ДополнительныеПараметры.ПараметрыДляПечати);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаСохранитьНаДискПродолжение()

&НаКлиенте
// Процедура обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если ПолучитьКлючЗаписи() = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса       = "Не найдены настройки выгрузки в ГЦЖС. Создать настройку?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "Заполнить()".
Процедура ОбработатьРезультатВопросаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПродолжение", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ФормаЗаписи",
		Новый Структура("Ключ, ПараметрНастройки", ПолучитьКлючЗаписи(),
		"Настройки выгрузки начислений за ЖКУ"), ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьЗавершение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ОбработатьРезультатВопросаЗаполнитьЗавершение()",
// а также процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьПродолжение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверитьКоличествоЗаписейТЧПлательщики();
	
КонецПроцедуры // ЗаполнитьПродолжение()

&НаКлиенте
// Процедура проверяет количество записей в ТЧ "Плательщики".
Процедура ПроверитьКоличествоЗаписейТЧПлательщики()
	
	Если Объект.Плательщики.Количество() > 0 Тогда
		ТекстВопроса       = "Табличные части будут очищены! Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПроверитьКоличествоЗаписейТЧПлательщики", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВызватьЗаполнениеТабличнойЧасти();
	
КонецПроцедуры // ПроверитьКоличествоЗаписейТЧПлательщики()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПроверитьКоличествоЗаписейТЧПлательщики()".
Процедура ОбработатьРезультатВопросаПроверитьКоличествоЗаписейТЧПлательщики(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьЗаполнениеТабличнойЧасти();
	
КонецПроцедуры // ОбработатьРезультатВопросаПроверитьКоличествоЗаписейТЧПлательщики()

&НаКлиенте
// Процедура вызывает процедуру запполнения ТЧ и процедуру установки отбора.
Процедура ВызватьЗаполнениеТабличнойЧасти()
	
	ЗаполнитьТабличнуюЧасть();
	
	УстановитьОтборДетальныхТабличныхЧастей(Элементы.Плательщики);
	
КонецПроцедуры // ВызватьЗаполнениеТабличнойЧасти()

&НаКлиенте
// Процедура обработчик команды "Расшифровка".
Процедура Расшифровка(Команда)
	
	Элементы.ФормаРасшифровка.Пометка = Не Элементы.ФормаРасшифровка.Пометка;
	УстановитьВидимость();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура обработчик события "ПриИзменении" флажка "ОтчетСдан".
Процедура ОтчетСданПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриАктивизацииСтроки" табличной части "Плательщики".
Процедура ПлательщикиПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборДетальныхТабличныхЧастей(Элементы.Плательщики);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередНачаломДобавления" табличной части "Начисления".
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Плательщики.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Не заполнен лицевой счет в табличной части ""Плательщики""!", Отказ);
	ИначеЕсли Элементы.Плательщики.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Плательщики.ТекущиеДанные.КодПлательщика) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Не заполнен код плательщика в табличной части ""Плательщики""!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриНачалеРедактирования" табличной части "Начисления".
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ЛицевойСчет = Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет;
		Элемент.ТекущиеДанные.КодПлательщика = Элементы.Плательщики.ТекущиеДанные.КодПлательщика;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПередНачаломДобавления" табличной части "ПотребителиУслуг".
Процедура ПотребителиУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Плательщики.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Не заполнен лицевой счет в табличной части ""Плательщики""!", Отказ);
	ИначеЕсли Элементы.Плательщики.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Плательщики.ТекущиеДанные.КодПлательщика) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Не заполнен код плательщика в табличной части ""Плательщики""!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриНачалеРедактирования" табличной части "ПотребителиУслуг".
Процедура ПотребителиУслугПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ЛицевойСчет = Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет;
		Элемент.ТекущиеДанные.КодПлательщика = Элементы.Плательщики.ТекущиеДанные.КодПлательщика;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыОбработкиМесяцСтрокой

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "Период".
Процедура ПериодПриИзменении(Элемент)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииПриИзменении(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбораИзСписка" реквизита "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииНачалоВыбора(ЭтаФорма, "Объект.Период", "МесяцСтрока",
	Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииРегулирование(ЭтаФорма, "Объект.Период", "МесяцСтрока",
	Элемент, Направление, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииАвтоПодборТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент,
	Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииОкончаниеВводаТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент,
	Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "Плательщики".
Процедура ПлательщикиПередУдалением(Элемент, Отказ)
	
	Элемент.Обновить();
	ЛицевойСчет = ?(НЕ Элемент.ТекущиеДанные = Неопределено, Элемент.ТекущиеДанные.ЛицевойСчет, 
	ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	
	УдалитьСтрокиТабличнойЧасти(ЛицевойСчет, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "ЛицевойСчет" таблицы "Плательщики".
Процедура ПлательщикиЛицевойСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные;
	
	ЛицевойСчет = ТекущаяСтрока.ЛицевойСчет;
	
	Если Объект.Плательщики.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)).Количество() > 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Лицевой счет """ + Строка(ЛицевойСчет) + """ уже присутствует в табличной части!");
		ТекущаяСтрока.ЛицевойСчет = ПредыдущийЛицевойСчет;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийЛицевойСчет) Тогда
		УдалитьСтрокиТабличнойЧасти(ПредыдущийЛицевойСчет, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
		ЗаполнитьСтрокуЛицевогоСчета(ЛицевойСчет);
		УстановитьОтборДетальныхТабличныхЧастей(Элементы.Плательщики);
	Иначе
		ОчиститьТекущуюСтрокуПлательщиков(ЭтаФорма.Элементы.Плательщики.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ЛицевойСчет" таблицы "Плательщики".
Процедура ПлательщикиЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийЛицевойСчет = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет;
	ПредыдущийПлательщик  = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" колонки "ЛицевойСчет" таблицы "Плательщики".
Процедура ПлательщикиЛицевойСчетОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийЛицевойСчет = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.ЛицевойСчет;
	ПредыдущийПлательщик  = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "Плательщик" таблицы "Плательщики".
Процедура ПлательщикиПлательщикПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные;
	
	ТекущийПлательщик = ТекущаяСтрока.Плательщик;
	Если ЗначениеЗаполнено(ТекущийПлательщик) 
		И Объект.Плательщики.НайтиСтроки(Новый Структура("Плательщик", ТекущийПлательщик)).Количество() > 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
		"Плательщик """ + Строка(ТекущийПлательщик) + """ уже присутствует в табличной части!");
		ТекущаяСтрока.Плательщик = ПредыдущийПлательщик;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийЛицевойСчет) Тогда
		УдалитьСтрокиТабличнойЧасти(ПредыдущийЛицевойСчет, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока.Плательщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Плательщик)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЛицевойСчет) Тогда
			ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		Иначе
			Контрагент = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
			ТекущаяСтрока.ЛицевойСчет, Объект.Организация, , "Контрагент");
			ЛицевойСчет = ?(Контрагент = ТекущаяСтрока.Плательщик, ТекущаяСтрока.ЛицевойСчет,
			ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
		КонецЕсли;
	Иначе
		ЛицевойСчет = ?(ЗначениеЗаполнено(ТекущаяСтрока.Плательщик),
		ПолучитьЛицевойСчетПроживающего(ТекущаяСтрока.Плательщик),
		ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛицевойСчет) Тогда
		ТекущаяСтрока.ЛицевойСчет = ЛицевойСчет;
		ЗаполнитьСтрокуЛицевогоСчета(ЛицевойСчет);
		ТекущаяСтрока.Плательщик  = ТекущийПлательщик;
		УстановитьОтборДетальныхТабличныхЧастей(Элементы.Плательщики);
	Иначе
		СтрокиОбработки = Новый Массив;
		СтрокиОбработки.Добавить("ЛицевойСчет");
		СтрокиОбработки.Добавить("Плательщик");
		ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока, СтрокиОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "Плательщик" таблицы "Плательщики".
Процедура ПлательщикиПлательщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийЛицевойСчет = ?(ЗначениеЗаполнено(ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик),
	ПолучитьЛицевойСчетПроживающего(ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик),
	ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	ПредыдущийПлательщик = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" колонки "Плательщик" таблицы "Плательщики".
Процедура ПлательщикиПлательщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийЛицевойСчет = ?(ЗначениеЗаполнено(ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик),
	ПолучитьЛицевойСчетПроживающего(ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик),
	ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	ПредыдущийПлательщик = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные.Плательщик;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" колонки "Плательщик" таблицы "Плательщики".
Процедура ПлательщикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущаяСтрока = ЭтаФорма.Элементы.Плательщики.ТекущиеДанные;
		ОчиститьТекущуюСтрокуПлательщиков(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает л/сч жильца.
Функция ПолучитьЛицевойСчетПроживающего(Проживающий)
	
	Возврат Проживающий.Владелец;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
