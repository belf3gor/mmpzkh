#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличные части документа.
//
// Параметры
//  мНеУчитыватьЛьготыВоВзаиморасчетах - булево, признак учета льготы во взаиморасчетах.
//
Процедура ЗаполнитьТабличныеЧасти(ЛицевойСчет = Неопределено, ЗаполнятьПоЛС = Ложь) Экспорт
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Если НЕ ЗаполнятьПоЛС Тогда
		Плательщики.Очистить();
		Начисления.Очистить();
		ПотребителиУслуг.Очистить();
	КонецЕсли;
	
	СтруктураТаблиц = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СформироватьТаблицыКодов(Дата, Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураТекстовЗапроса = ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("ДатаНач",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                   КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаСГраницей",              Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОкончанияПериодаЗадолженности", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("КодыРайонов",               СтруктураТаблиц.КодыРайонов);
	Запрос.УстановитьПараметр("КодыУлиц",                  СтруктураТаблиц.КодыУлиц);
	Запрос.УстановитьПараметр("КодыЗданий",                СтруктураТаблиц.КодыЗданий);
	Запрос.УстановитьПараметр("КодыПлательщиков",          СтруктураТаблиц.КодыПлательщиков);
	Запрос.УстановитьПараметр("КодыТиповЗаселения",        СтруктураТаблиц.КодыТиповЗаселения);
	Запрос.УстановитьПараметр("КодыУслуг",                 СтруктураТаблиц.КодыУслуг);
	Запрос.УстановитьПараметр("КодыЗапирающегоУстройства", СтруктураТаблиц.КодыЗапирающегоУстройства);
	Запрос.УстановитьПараметр("КодыТиповПлит",             СтруктураТаблиц.КодыТиповПлит);
	
	Для Каждого Текст Из СтруктураТекстовЗапроса Цикл
		
		ТекстЗапроса = Текст.Значение;
		
		Если ЗначениеЗаполнено(Услуга) Тогда
			
			СписокУслуг = Новый СписокЗначений;
			
			Если Услуга.ЭтоГруппа Тогда
				СписокУслуг = ПолучитьЭлементыСправочникаПоГруппе(Услуга);
			Иначе
				СписокУслуг.Добавить(Услуга);
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУслуги", "Услуга В (&Услуги)");
			Запрос.УстановитьПараметр("Услуги", СписокУслуг);
			
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУслуги", "Истина");
		КонецЕсли;
		
		// ОСОБЕННОСТЬ отбора по объекту:
		// Назначенные начисления сейчас отбираются только по назначениям непосредственно на лицевые счета.
		// В общем случае назначение может быть установлено, к примеру, на здания.
		// В будущем можно будет учесть этот момент и получать данные о назначении услуг по объектам учета.
		
		Если НЕ ЗаполнятьПоЛС Тогда
			
			Если ЗначениеЗаполнено(ОбъектОтбор) Тогда
				ТипОбъекта = ТипЗнч(ОбъектОтбор);
				Если ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеФизЛицо",   "Помещение.Владелец В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПлощадь",   "Объект.Владелец В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление", "ЛицевойСчет.Адрес.Владелец В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНазначение", "Объект.Адрес.Владелец В (&Объект)");
				ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_Подъезды") Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеФизЛицо",   "Помещение.Подъезд В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПлощадь",   "Объект.Подъезд В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление", "ЛицевойСчет.Адрес.Подъезд В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНазначение", "Объект.Адрес.Подъезд В (&Объект)");
				ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеФизЛицо",   "Истина");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПлощадь",   "Истина");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление", "ЛицевойСчет В (&Объект)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНазначение", "Объект В (&Объект)");
				КонецЕсли;
				Если ОбъектОтбор.ЭтоГруппа Тогда
					СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппе(ОбъектОтбор);
					Запрос.УстановитьПараметр("Объект", СписокОбъектов);
				Иначе
					Запрос.УстановитьПараметр("Объект", ОбъектОтбор);
				КонецЕсли;
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеФизЛицо",   "Истина");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПлощадь",   "Истина");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление", "Истина");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНазначение", "Истина");
			КонецЕсли;
			
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеФизЛицо",   "Истина");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПлощадь",   "Истина");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНачисление", "ЛицевойСчет = &Объект");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНазначение", "Объект = &Объект");
			Запрос.УстановитьПараметр("Объект", ЛицевойСчет);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораНачисленияЛьготПоПериоду", "Период <= ДАТАВРЕМЯ(" + Формат(Дата, "ДФ=yyyy,MM,dd,HH,mm,ss")+")");
		
		СтруктураТекстовЗапроса.Вставить(Текст.Ключ, ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос.Текст = СтруктураТекстовЗапроса.ТекстЗапросаБезКИ;
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет.Адрес.Владелец КАК Объект
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет.Адрес.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = СтруктураТекстовЗапроса.ТекстЗапросаИтоговый;
	
	//МассивРезультат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	// Запрос выполняем в пакетном режиме, так как начисления и данные по жильцам
	// получаем в отдельных подзапросах для исключения дублирования данных по начислениям,
	// так как это происходило раньше при выводе начислений совместно с жильцами.
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Данные начислений содержатся в подзапросе с индексом 9.
	ВыборкаНачислений = МассивРезультатов[9].Выбрать();
	Пока ВыборкаНачислений.Следующий() Цикл
		
		// Добавление новой строки в таблицу начислений.
		НоваяСтрокаУслуги = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ВыборкаНачислений);
		НоваяСтрокаУслуги.СуммаНачисленнойПлаты                     = ВыборкаНачислений.СуммаНачислений;
		НоваяСтрокаУслуги.СуммаПлатыСЛьготой                        = ВыборкаНачислений.СуммаНачисленийСЛьготами;
		НоваяСтрокаУслуги.СуммаНачисленнойПлатыНаЗарегистрированных = ВыборкаНачислений.СуммаНачислений;
		НоваяСтрокаУслуги.СуммаПлатыСЛьготойНаЗарегистрированных    = ВыборкаНачислений.СуммаНачисленийСЛьготами;
		
	КонецЦикла;
	
	// Данные по лицевым счетам и жильцам содержатся в подзапросе с индексом 14.
	ВыборкаЛС = МассивРезультатов[14].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		НоваяСтрокаЛС = ?(НЕ ЗаполнятьПоЛС, Плательщики.Добавить(), Плательщики.Найти(ЛицевойСчет, "ЛицевойСчет"));
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЛС, ВыборкаЛС);
		НоваяСтрокаЛС.Квартира = "" + ВыборкаЛС.НомерКвартиры + ВыборкаЛС.Суффикс;
		НоваяСтрокаЛС.КолвоЧеловек = ВыборкаЛС.КоличествоЗарегистрированных;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаЛС.ФамилияПлательщика) Тогда
			СтруктураФИО = РазделитьФИО(ВыборкаЛС.ФИОПлательщика);
			НоваяСтрокаЛС.ФамилияПлательщика  = СтруктураФИО.Фамилия;
			НоваяСтрокаЛС.ИмяПлательщика      = СтруктураФИО.Имя;
			НоваяСтрокаЛС.ОтчествоПлательщика = СтруктураФИО.Отчество;
		КонецЕсли;
		
		// Суммовые показатели по лицевому счету.
		НоваяСтрокаЛС.СуммаНачисленнойПлаты                     = ВыборкаЛС.СуммаНачислений;
		НоваяСтрокаЛС.СуммаПлатыСЛьготой                        = ВыборкаЛС.СуммаНачисленийСЛьготами;
		НоваяСтрокаЛС.СуммаНачисленнойПлатыНаЗарегистрированных = ВыборкаЛС.СуммаНачислений;
		НоваяСтрокаЛС.СуммаПлатыСЛьготойНаЗарегистрированных    = ВыборкаЛС.СуммаНачисленийСЛьготами;
		
		// Получение данных по жильцам.
		ПорядковыйНомер = 1;
		ВыборкаЖильцов = ВыборкаЛС.Выбрать();
		Пока ВыборкаЖильцов.Следующий() Цикл
			
			НоваяСтрокаЖильца = ПотребителиУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЖильца, ВыборкаЖильцов);
			НоваяСтрокаЖильца.Номер = ПорядковыйНомер;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаЖильца.Фамилия) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЖильца, РазделитьФИО(ВыборкаЖильцов.ФИО));
			КонецЕсли;
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст запроса.
//
Функция ПолучитьТекстЗапроса()
	
	СтруктураТекстов = Новый Структура;
	
	ТекстЗапросаБезКИ = 
	"ВЫБРАТЬ
	|	втКодыРайонов.Код,
	|	втКодыРайонов.Наименование
	|ПОМЕСТИТЬ КодыРайонов
	|ИЗ
	|	&КодыРайонов КАК втКодыРайонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыУлиц.Код,
	|	втКодыУлиц.Наименование
	|ПОМЕСТИТЬ КодыУлиц
	|ИЗ
	|	&КодыУлиц КАК втКодыУлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыЗданий.Код,
	|	КодыЗданий.Наименование
	|ПОМЕСТИТЬ КодыЗданий
	|ИЗ
	|	&КодыЗданий КАК КодыЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыПлательщиков.Код,
	|	втКодыПлательщиков.Наименование,
	|	втКодыПлательщиков.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ КодыПлательщиков
	|ИЗ
	|	&КодыПлательщиков КАК втКодыПлательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыТиповЗаселения.Код,
	|	втКодыТиповЗаселения.Наименование
	|ПОМЕСТИТЬ КодыТиповЗаселения
	|ИЗ
	|	&КодыТиповЗаселения КАК втКодыТиповЗаселения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Льготный) КАК ВидТарифаПоПеречислению
	|ПОМЕСТИТЬ
	|	ПеречислениеВидовТарифов
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыУслуг.Код,
	|	втКодыУслуг.Наименование,
	|	втКодыУслуг.ВидТарифа
	|ПОМЕСТИТЬ КодыУслугДляОбработки
	|ИЗ
	|	&КодыУслуг КАК втКодыУслуг
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугДляОбработки.Код,
	|	КодыУслугДляОбработки.Наименование,
	|	КодыУслугДляОбработки.ВидТарифа
	|ПОМЕСТИТЬ КодыУслугСУказаннымВидомТарифа
	|ИЗ
	|	КодыУслугДляОбработки КАК КодыУслугДляОбработки
	|ГДЕ
	|	НЕ КодыУслугДляОбработки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугДляОбработки.Код,
	|	КодыУслугДляОбработки.Наименование
	|ПОМЕСТИТЬ КодыУслугБезВидаТарифа
	|ИЗ
	|	КодыУслугДляОбработки КАК КодыУслугДляОбработки
	|ГДЕ
	|	КодыУслугДляОбработки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КодыУслугБезВидаТарифа.Код,
	|	КодыУслугБезВидаТарифа.Наименование,
	|	ПеречислениеВидовТарифов.ВидТарифаПоПеречислению КАК ВидТарифа
	|ПОМЕСТИТЬ ВозможныеКодыУслугЕслиВидТарифаНеУказан
	|ИЗ
	|	КодыУслугБезВидаТарифа КАК КодыУслугБезВидаТарифа
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПеречислениеВидовТарифов КАК ПеречислениеВидовТарифов ПО ИСТИНА
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыУслугСУказаннымВидомТарифа.Код,
	|	КодыУслугСУказаннымВидомТарифа.Наименование,
	|	КодыУслугСУказаннымВидомТарифа.ВидТарифа
	|ПОМЕСТИТЬ КодыУслуг
	|ИЗ
	|	КодыУслугСУказаннымВидомТарифа КАК КодыУслугСУказаннымВидомТарифа
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.Код,
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.Наименование,
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан.ВидТарифа
	|ИЗ
	|	ВозможныеКодыУслугЕслиВидТарифаНеУказан КАК ВозможныеКодыУслугЕслиВидТарифаНеУказан
	|ГДЕ
	|	НЕ (ВозможныеКодыУслугЕслиВидТарифаНеУказан.Наименование, ВозможныеКодыУслугЕслиВидТарифаНеУказан.ВидТарифа) В
	|				(ВЫБРАТЬ
	|					КодыУслугСУказаннымВидомТарифа.Наименование КАК Наименование,
	|					КодыУслугСУказаннымВидомТарифа.ВидТарифа КАК ВидТарифа
	|				ИЗ
	|					КодыУслугСУказаннымВидомТарифа КАК КодыУслугСУказаннымВидомТарифа)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыЗапирающегоУстройства.Код,
	|	втКодыЗапирающегоУстройства.Наименование
	|ПОМЕСТИТЬ КодыЗапирающегоУстройства
	|ИЗ
	|	&КодыЗапирающегоУстройства КАК втКодыЗапирающегоУстройства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыТиповПлит.Код,
	|	втКодыТиповПлит.Наименование
	|ПОМЕСТИТЬ КодыТиповПлит
	|ИЗ
	|	&КодыТиповПлит КАК втКодыТиповПлит
	|;
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	МИНИМУМ(ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийНепогашенныйМесяцНачисления
	|ПОМЕСТИТЬ втТаблицаДолговПоЛСИУслугам
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаСГраницей,
	|			Организация = &Организация И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК ВзаиморасчетыПоЛицевымСчетамОстатки
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|ИМЕЮЩИЕ
	|	СУММА(ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) > 0
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДолговПоЛСИУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	РАЗНОСТЬДАТ(КОНЕЦПЕРИОДА(МИНИМУМ(ТаблицаДолговПоЛСИУслугам.СамыйРаннийНепогашенныйМесяцНачисления),МЕСЯЦ), &ДатаОкончанияПериодаЗадолженности, МЕСЯЦ) КАК Задолженность
	|ПОМЕСТИТЬ втТаблицаДолговСКоличествомМесяцевЗадолженности
	|ИЗ 
	|	втТаблицаДолговПоЛСИУслугам КАК ТаблицаДолговПоЛСИУслугам
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДолговПоЛСИУслугам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисленияОборот,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакВидаНачислений,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ втНачисленияОбороты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			&ОбъектНачисление
	|				И Организация = &Организация
	|				И &УсловиеУслуги
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг),
	|                                ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ),
	|                                ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка))
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты),
	|                                  ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))) КАК УПЖКХ_НачисленияОбороты
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ),
	|	                                                   ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу),
	|	                                                   ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему),
	|	                                                   ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу),
	|	                                                   ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента),
	|	                                                   ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка) КАК СоставнаяУслуга,
	|	0 КАК Тариф,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий) КАК ВидТарифа,
	|	0 КАК Количество,
	|	0 КАК СуммаНачисленияОборот,
	|	0 КАК ПризнакВидаНачислений,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И &ОбъектНазначение
	|				И &УсловиеУслуги
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка),
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий),
	|	0,
	|	0,
	|	0,
	|	2
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период <= &ДатаКон
	|	И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И &ОбъектНазначение
	|	И &УсловиеУслуги
	|	И КВП_НазначенныеНачисления.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ЛицевойСчет,
	|	Начисления.Услуга,
	|	МИНИМУМ(Начисления.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втНачисленияСПриоритетами
	|ИЗ
	|	(ВЫБРАТЬ
	|		втНачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|		втНачисленияОбороты.Услуга КАК Услуга,
	|		втНачисленияОбороты.Приоритет КАК Приоритет
	|	ИЗ
	|		втНачисленияОбороты КАК втНачисленияОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		втНазначенныеНачисления.ЛицевойСчет,
	|		втНазначенныеНачисления.Услуга,
	|		втНазначенныеНачисления.Приоритет
	|	ИЗ
	|		втНазначенныеНачисления КАК втНазначенныеНачисления) КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ЛицевойСчет,
	|	Начисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачисленияСПриоритетами.ЛицевойСчет,
	|	втНачисленияСПриоритетами.Услуга,
	|	ЕСТЬNULL(втНачисленияОбороты.СоставнаяУслуга, втНазначенныеНачисления.СоставнаяУслуга) КАК СоставнаяУслуга,
	|	СУММА(ЕСТЬNULL(втНачисленияОбороты.Тариф, втНазначенныеНачисления.Тариф)) КАК Тариф,
	|	ЕСТЬNULL(втНачисленияОбороты.ВидТарифа, втНазначенныеНачисления.ВидТарифа) КАК ВидТарифа,
	|	СУММА(ЕСТЬNULL(втНачисленияОбороты.Количество, втНазначенныеНачисления.Количество)) КАК Количество,
	|	СУММА(ЕСТЬNULL(втНачисленияОбороты.СуммаНачисленияОборот, втНазначенныеНачисления.СуммаНачисленияОборот)) КАК СуммаНачисленияОборот,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленияОбороты.ПризнакВидаНачислений, втНазначенныеНачисления.ПризнакВидаНачислений)) КАК ПризнакВидаНачислений
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втНачисленияСПриоритетами КАК втНачисленияСПриоритетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияОбороты КАК втНачисленияОбороты
	|		ПО втНачисленияСПриоритетами.ЛицевойСчет = втНачисленияОбороты.ЛицевойСчет
	|			И втНачисленияСПриоритетами.Услуга = втНачисленияОбороты.Услуга
	|			И втНачисленияСПриоритетами.Приоритет = втНачисленияОбороты.Приоритет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втНачисленияСПриоритетами.ЛицевойСчет = втНазначенныеНачисления.ЛицевойСчет
	|			И втНачисленияСПриоритетами.Услуга = втНазначенныеНачисления.Услуга
	|			И втНачисленияСПриоритетами.Приоритет = втНазначенныеНачисления.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСПриоритетами.ЛицевойСчет,
	|	втНачисленияСПриоритетами.Услуга,
	|	ЕСТЬNULL(втНачисленияОбороты.СоставнаяУслуга, втНазначенныеНачисления.СоставнаяУслуга),
	|	ЕСТЬNULL(втНачисленияОбороты.ВидТарифа, втНазначенныеНачисления.ВидТарифа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачисленийВсего.ЛицевойСчет,
	|	ТаблицаНачисленийВсего.Услуга,
	|	СУММА(ТаблицаНачисленийВсего.СуммаНачисленияОборот) КАК НачисленоВсего,
	|	МАКСИМУМ(втТаблицаДолговСКоличествомМесяцевЗадолженности.Задолженность) КАК Задолженность
	|ПОМЕСТИТЬ врТаблицаНачисленийВсего
	|ИЗ
	|	втНачисления КАК ТаблицаНачисленийВсего
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДолговСКоличествомМесяцевЗадолженности КАК втТаблицаДолговСКоличествомМесяцевЗадолженности
	|		ПО ТаблицаНачисленийВсего.ЛицевойСчет = втТаблицаДолговСКоличествомМесяцевЗадолженности.ЛицевойСчет
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачисленийВсего.ЛицевойСчет,
	|	ТаблицаНачисленийВсего.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНаниматель.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец КАК Плательщик,
	|	УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец.ФизЛицо КАК ПлательщикФизЛицо,
	|	ЕСТЬNULL(КодыПлательщиков.Код, 0) КАК КодПлательщика
	|ПОМЕСТИТЬ втПлательщикиЛицевыхСчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, &ОбъектНачисление) КАК УПЖКХ_ОтветственныйСобственникНаниматель
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыПлательщиков КАК КодыПлательщиков
	|		ПО УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец = КодыПлательщиков.Наименование
	|			И УПЖКХ_ОтветственныйСобственникНаниматель.ЛицевойСчет = КодыПлательщиков.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлательщикиЛицевыхСчетов.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_БлагоустройстваПомещений.ВидБлагоустройства, КВП_БлагоустройстваЗданий.ВидБлагоустройства) = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ТипЗапирающегоУстройства)
	|				ТОГДА ЕСТЬNULL(КВП_БлагоустройстваПомещений.Значение, КВП_БлагоустройстваЗданий.Значение)
	|		КОНЕЦ) КАК ТипЗапирающегоУстройства,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_БлагоустройстваПомещений.ВидБлагоустройства, КВП_БлагоустройстваЗданий.ВидБлагоустройства) = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ЕСТЬNULL(КВП_БлагоустройстваПомещений.Значение, КВП_БлагоустройстваЗданий.Значение)
	|		КОНЕЦ) КАК ТипПлиты
	|ПОМЕСТИТЬ втСвойствОбъектов
	|ИЗ
	|	втПлательщикиЛицевыхСчетов КАК втПлательщикиЛицевыхСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройстваПомещений
	|		ПО втПлательщикиЛицевыхСчетов.ЛицевойСчет.Адрес = КВП_БлагоустройстваПомещений.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройстваЗданий
	|		ПО втПлательщикиЛицевыхСчетов.ЛицевойСчет.Адрес.Владелец = КВП_БлагоустройстваЗданий.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втПлательщикиЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготы.ЛицевойСчет,
	|	КВП_НачисленныеЛьготы.Услуга,
	|	СУММА(КВП_НачисленныеЛьготы.СуммаНачисления) КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втСуммыЛьгот
	|ИЗ РегистрНакопления.КВП_НачисленныеЛьготы КАК КВП_НачисленныеЛьготы
	|ГДЕ
	|	&УсловиеОтбораНачисленияЛьготПоПериоду
	|	И Организация = &Организация
	|	И &УсловиеУслуги
	|	И &ОбъектНачисление
	|	И МесяцНачисления = &ДатаНач
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленныеЛьготы.ЛицевойСчет,
	|	КВП_НачисленныеЛьготы.Услуга
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающих.Жилец,
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающих.Проживает КАК ПризнакПроживания
	|ПОМЕСТИТЬ ТаблицаПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаКон
	|				И &ОбъектНачисление) КАК УПЖКХ_СведенияОПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЗарегистрированных.Жилец,
	|	СведенияОЗарегистрированных.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА СведенияОЗарегистрированных.ВременнаяРегистрация
	|			ТОГДА 2
	|		КОГДА СведенияОЗарегистрированных.Зарегистрирован
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидРегистрации
	|ПОМЕСТИТЬ втТаблицаЗарегистрированныхСрезПоследних
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаКон
	|				И &ОбъектНачисление) КАК СведенияОЗарегистрированных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаРегистрации
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхНаДату
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|				ДатаИзменения <= &ДатаКон
	|				И &ОбъектНачисление) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхНаДатуБезОтбора
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|				&ОбъектНачисление) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЗарегистрированныхСрезПоследних.Жилец,
	|	втТаблицаЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	втТаблицаЗарегистрированныхСрезПоследних.ВидРегистрации КАК ВидРегистрации,
	|	ЕСТЬNULL(втСведенияОЗарегистрированныхНаДату.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхНаДату.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) < ЕСТЬNULL(втСведенияОЗарегистрированныхНаДатуБезОтбора.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхНаДатуБезОтбора.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ ТаблицаЗарегистрированных
	|ИЗ
	|	втТаблицаЗарегистрированныхСрезПоследних КАК втТаблицаЗарегистрированныхСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхНаДату КАК втСведенияОЗарегистрированныхНаДату
	|		ПО втТаблицаЗарегистрированныхСрезПоследних.Жилец = втСведенияОЗарегистрированныхНаДату.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхНаДатуБезОтбора КАК втСведенияОЗарегистрированныхНаДатуБезОтбора
	|		ПО втТаблицаЗарегистрированныхСрезПоследних.Жилец = втСведенияОЗарегистрированныхНаДатуБезОтбора.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_СобственникиПомещений.Собственник КАК ФизЛицо,
	|	УПЖКХ_СобственникиПомещений.Помещение,
	|	УПЖКХ_СобственникиПомещений.Действует,
	|	УПЖКХ_СобственникиПомещений.ДоляСобственникаЧислитель КАК ДоляЧислитель,
	|	УПЖКХ_СобственникиПомещений.ДоляСобственникаЗнаменатель КАК ДоляЗнаменатель
	|ПОМЕСТИТЬ ТаблицаСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКон,
	|			&УсловиеФизЛицо
	|				И Собственник ССЫЛКА Справочник.ФизическиеЛица) КАК УПЖКХ_СобственникиПомещений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|	ПО УПЖКХ_СобственникиПомещений.Собственник = УПЖКХ_Жильцы.ФизЛицо
	|	И УПЖКХ_Жильцы.Владелец.Адрес = УПЖКХ_СобственникиПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещений.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СобственникиПомещений.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_СобственникиПомещений.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещений.Действует КАК Собственник,
	|	УПЖКХ_СобственникиПомещений.ДоляЧислитель КАК ДоляЧислитель,
	|	УПЖКХ_СобственникиПомещений.ДоляЗнаменатель КАК ДоляЗнаменатель,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственникиПомещений.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		КОГДА УПЖКХ_СобственникиПомещений.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""Ж""
	|	КОНЕЦ КАК Пол,
	|	УПЖКХ_СобственникиПомещений.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_СобственникиПомещений.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомер,
	|	ЛОЖЬ КАК ПризнакПроживания,
	|	0 КАК ВидРегистрации,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаРегистрации,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ ТаблицаЖильцов
	|ИЗ
	|	ТаблицаСобственников КАК УПЖКХ_СобственникиПомещений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо,
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет.Адрес,
	|	ЛОЖЬ,
	|	0,
	|	1,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		КОГДА УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""Ж""
	|	КОНЕЦ,
	|	УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо.ДатаРождения,
	|	УПЖКХ_СведенияОПроживающих.Жилец.ФизЛицо.СтраховойНомерПФР,
	|	УПЖКХ_СведенияОПроживающих.ПризнакПроживания,
	|	0,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	ТаблицаПроживающих КАК УПЖКХ_СведенияОПроживающих
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОЗарегистрированных.ЛицевойСчет,
	|	СведенияОЗарегистрированных.Жилец.ФизЛицо,
	|	СведенияОЗарегистрированных.ЛицевойСчет.Адрес,
	|	ЛОЖЬ,
	|	0,
	|	1,
	|	ВЫБОР
	|		КОГДА СведенияОЗарегистрированных.Жилец.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		КОГДА СведенияОЗарегистрированных.Жилец.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""Ж""
	|	КОНЕЦ,
	|	СведенияОЗарегистрированных.Жилец.ФизЛицо.ДатаРождения,
	|	СведенияОЗарегистрированных.Жилец.ФизЛицо.СтраховойНомерПФР,
	|	ЛОЖЬ,
	|	СведенияОЗарегистрированных.ВидРегистрации,
	|	СведенияОЗарегистрированных.ДатаРегистрации,
	|	СведенияОЗарегистрированных.ДатаСнятияСРегистрации
	|ИЗ
	|	ТаблицаЗарегистрированных КАК СведенияОЗарегистрированных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Жильцы.ЛицевойСчет,
	|	Жильцы.ФизЛицо,
	|	Жильцы.Помещение,
	|	Жильцы.Собственник,
	|	Жильцы.ДоляЧислитель,
	|	Жильцы.ДоляЗнаменатель,
	|	Жильцы.Пол,
	|	Жильцы.ДатаРождения,
	|	Жильцы.СтраховойНомер,
	|	Жильцы.ПризнакПроживания,
	|	Жильцы.ВидРегистрации,
	|	Жильцы.ДатаРегистрации,
	|	Жильцы.ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВсеЖильцы.ЛицевойСчет КАК ЛицевойСчет,
	|		ВсеЖильцы.ФизЛицо КАК ФизЛицо,
	|		ВсеЖильцы.Помещение КАК Помещение,
	|		МАКСИМУМ(ВсеЖильцы.Собственник) КАК Собственник,
	|		МАКСИМУМ(ВсеЖильцы.ДоляЧислитель) КАК ДоляЧислитель,
	|		МАКСИМУМ(ВсеЖильцы.ДоляЗнаменатель) КАК ДоляЗнаменатель,
	|		МАКСИМУМ(ВсеЖильцы.Пол) КАК Пол,
	|		МАКСИМУМ(ВсеЖильцы.ДатаРождения) КАК ДатаРождения,
	|		МАКСИМУМ(ВсеЖильцы.СтраховойНомер) КАК СтраховойНомер,
	|		МАКСИМУМ(ВсеЖильцы.ПризнакПроживания) КАК ПризнакПроживания,
	|		МАКСИМУМ(ВсеЖильцы.ВидРегистрации) КАК ВидРегистрации,
	|		МАКСИМУМ(ВсеЖильцы.ДатаРегистрации) КАК ДатаРегистрации,
	|		МАКСИМУМ(ВсеЖильцы.ДатаСнятияСРегистрации) КАК ДатаСнятияСРегистрации
	|	ИЗ
	|		ТаблицаЖильцов КАК ВсеЖильцы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВсеЖильцы.ЛицевойСчет,
	|		ВсеЖильцы.ФизЛицо,
	|		ВсеЖильцы.Помещение) КАК Жильцы
	|ГДЕ
	|	(Жильцы.Собственник
	|			ИЛИ Жильцы.ПризнакПроживания
	|			ИЛИ НЕ Жильцы.ВидРегистрации = 0)";
	
	СтруктураТекстов.Вставить("ТекстЗапросаБезКИ", ТекстЗапросаБезКИ);
	
	ТекстЗапросаИтоговый = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ вт_ПлощадьПомещенияОбщаяСрезПоследних
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаКон, &УсловиеПлощадь
	|	                                                             И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь),
	|	                                                                             ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность) КАК ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|ПОМЕСТИТЬ вт_ТаблицаОснованийПолученияВСобственность
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, &УсловиеФизЛицо И Помещение В (Выбрать РАЗЛИЧНЫЕ ВнутрТаблицаСобственников.Помещение Из ТаблицаСобственников КАК ВнутрТаблицаСобственников)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаЗарегистрированных.Жилец) КАК КоличествоЗарегистрированных,
	|	ТаблицаЗарегистрированных.ЛицевойСчет
	|ПОМЕСТИТЬ вт_УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ИЗ
	|	ТаблицаЗарегистрированных КАК ТаблицаЗарегистрированных
	|ГДЕ
	|	НЕ ТаблицаЗарегистрированных.ВидРегистрации = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗарегистрированных.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаПроживающих.Жилец) КАК КоличествоПроживающих,
	|	ТаблицаПроживающих.ЛицевойСчет
	|ПОМЕСТИТЬ вт_УПЖКХ_СведенияОПроживающихСрезПоследних
	|ИЗ
	|	ТаблицаПроживающих КАК ТаблицаПроживающих
	|ГДЕ
	|	ТаблицаПроживающих.ПризнакПроживания
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаСобственников.ФизЛицо) КАК КоличествоСобственников,
	|	ТаблицаСобственников.Помещение
	|ПОМЕСТИТЬ вт_УПЖКХ_СведенияОСобственниках
	|ИЗ
	|	ТаблицаСобственников КАК ТаблицаСобственников
	|ГДЕ
	|	ТаблицаСобственников.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСобственников.Помещение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаНачислений.Услуга КАК Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга КАК СоставнаяУслуга,
	|	ЕСТЬNULL(КодыУслуг.Код, 0) КАК КодУслуги,
	|	ТаблицаНачислений.ВидТарифа КАК ВидТарифа,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНачислений.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|				И ТаблицаНачислений.СоставнаяУслуга = КодыУслуг.Наименование И ТаблицаНачислений.ВидТарифа = КодыУслуг.ВидТарифа
	|			ТОГДА 2
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ТаблицаНачислений.Услуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|						И ТаблицаНачислений.Услуга = КодыУслуг.Наименование И ТаблицаНачислений.ВидТарифа = КодыУслуг.ВидТарифа
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ врКодыУслугСПриоритетами
	|ИЗ
	|	втНачисления КАК ТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыУслуг КАК КодыУслуг
	|		ПО ((ТаблицаНачислений.Услуга = КодыУслуг.Наименование
	|				ИЛИ ТаблицаНачислений.СоставнаяУслуга = КодыУслуг.Наименование) И ТаблицаНачислений.ВидТарифа = КодыУслуг.ВидТарифа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга,
	|	ЕСТЬNULL(КодыУслуг.Код, 0),
	|	ТаблицаНачислений.ВидТарифа,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНачислений.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|				И ТаблицаНачислений.СоставнаяУслуга = КодыУслуг.Наименование И ТаблицаНачислений.ВидТарифа = КодыУслуг.ВидТарифа
	|			ТОГДА 2
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ТаблицаНачислений.Услуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|						И ТаблицаНачислений.Услуга = КодыУслуг.Наименование И ТаблицаНачислений.ВидТарифа = КодыУслуг.ВидТарифа
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врКодыУслугСПриоритетами.Услуга КАК Услуга,
	|	врКодыУслугСПриоритетами.СоставнаяУслуга КАК СоставнаяУслуга,
	|	врКодыУслугСПриоритетами.ВидТарифа КАК ВидТарифа,
	|	МАКСИМУМ(врКодыУслугСПриоритетами.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ врКодыУслугСМаксимальнымПриоритетом
	|ИЗ
	|	врКодыУслугСПриоритетами КАК врКодыУслугСПриоритетами
	|
	|СГРУППИРОВАТЬ ПО
	|	врКодыУслугСПриоритетами.Услуга,
	|	врКодыУслугСПриоритетами.СоставнаяУслуга,
	|	врКодыУслугСПриоритетами.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врКодыУслугСПриоритетами.Услуга КАК Услуга,
	|	врКодыУслугСПриоритетами.СоставнаяУслуга КАК СоставнаяУслуга,
	|	врКодыУслугСПриоритетами.КодУслуги КАК КодУслуги,
	|	врКодыУслугСПриоритетами.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ врКодыУслугИтоговая
	|ИЗ
	|	врКодыУслугСПриоритетами КАК врКодыУслугСПриоритетами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врКодыУслугСМаксимальнымПриоритетом КАК врКодыУслугСМаксимальнымПриоритетом
	|		ПО врКодыУслугСПриоритетами.Услуга = врКодыУслугСМаксимальнымПриоритетом.Услуга
	|			И врКодыУслугСПриоритетами.СоставнаяУслуга = врКодыУслугСМаксимальнымПриоритетом.СоставнаяУслуга
	|			И врКодыУслугСПриоритетами.ВидТарифа = врКодыУслугСМаксимальнымПриоритетом.ВидТарифа
	|			И врКодыУслугСПриоритетами.Приоритет = врКодыУслугСМаксимальнымПриоритетом.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.ПризнакВидаНачислений,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.ВидТарифа,
	|	ТаблицаНачислений.Количество КАК Объем,
	|	ТаблицаНачислений.СуммаНачисленияОборот КАК СуммаНачислений,
	|	ТаблицаНачислений.СуммаНачисленияОборот - ЕСТЬNULL(СуммыЛьгот.СуммаНачисленияОборот, 0) * (ТаблицаНачислений.СуммаНачисленияОборот / ВЫБОР
	|		КОГДА ТаблицаНачисленийВсего.НачисленоВсего = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаНачисленийВсего.НачисленоВсего
	|	КОНЕЦ) КАК СуммаНачисленийСЛьготами,
	|	ЕСТЬNULL(втПлательщикиЛицевыхСчетов.КодПлательщика, 0) КАК КодПлательщика,
	|	ЕСТЬNULL(врКодыУслугИтоговая.КодУслуги, 0) КАК КодУслуги
	|ПОМЕСТИТЬ врНачисленияПоЛицевымСчетам
	|ИЗ
	|	втНачисления КАК ТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНачисленийВсего КАК ТаблицаНачисленийВсего
	|		ПО ТаблицаНачислений.ЛицевойСчет = ТаблицаНачисленийВсего.ЛицевойСчет
	|			И ТаблицаНачислений.Услуга = ТаблицаНачисленийВсего.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыЛьгот КАК СуммыЛьгот
	|		ПО ТаблицаНачислений.ЛицевойСчет = СуммыЛьгот.ЛицевойСчет
	|			И ТаблицаНачислений.Услуга = СуммыЛьгот.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлательщикиЛицевыхСчетов КАК втПлательщикиЛицевыхСчетов
	|		ПО ТаблицаНачислений.ЛицевойСчет = втПлательщикиЛицевыхСчетов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врКодыУслугИтоговая КАК врКодыУслугИтоговая
	|		ПО ТаблицаНачислений.Услуга = врКодыУслугИтоговая.Услуга
	|		И ТаблицаНачислений.ВидТарифа = врКодыУслугИтоговая.ВидТарифа
	|			И ТаблицаНачислений.СоставнаяУслуга = врКодыУслугИтоговая.СоставнаяУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияПоЛицевымСчетам.ЛицевойСчет,
	|	врНачисленияПоЛицевымСчетам.Услуга,
	|	врНачисленияПоЛицевымСчетам.ПризнакВидаНачислений,
	|	врНачисленияПоЛицевымСчетам.Тариф,
	|	СУММА(врНачисленияПоЛицевымСчетам.Объем) КАК Объем,
	|	СУММА(врНачисленияПоЛицевымСчетам.СуммаНачислений) КАК СуммаНачислений,
	|	СУММА(врНачисленияПоЛицевымСчетам.СуммаНачисленийСЛьготами) КАК СуммаНачисленийСЛьготами,
	|	врНачисленияПоЛицевымСчетам.КодПлательщика,
	|	врНачисленияПоЛицевымСчетам.КодУслуги
	|ИЗ
	|	врНачисленияПоЛицевымСчетам КАК врНачисленияПоЛицевымСчетам
	|СГРУППИРОВАТЬ ПО
	|	врНачисленияПоЛицевымСчетам.ЛицевойСчет,
	|	врНачисленияПоЛицевымСчетам.Услуга,
	|	врНачисленияПоЛицевымСчетам.ПризнакВидаНачислений,
	|	врНачисленияПоЛицевымСчетам.Тариф,
	|	врНачисленияПоЛицевымСчетам.КодПлательщика,
	|	врНачисленияПоЛицевымСчетам.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	СУММА(врНачисленияПоЛицевымСчетам.СуммаНачислений) КАК СуммаНачислений,
	|	СУММА(врНачисленияПоЛицевымСчетам.СуммаНачисленийСЛьготами) КАК СуммаНачисленийСЛьготами,
	|	МАКСИМУМ(ЕСТЬNULL(врТаблицаНачисленийВсего.Задолженность, 0)) КАК Задолженность
	|ПОМЕСТИТЬ врИтогиНачисленийПоЛицевымСчетам
	|ИЗ
	|	врНачисленияПоЛицевымСчетам КАК врНачисленияПоЛицевымСчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО врНачисленияПоЛицевымСчетам.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНачисленийВсего КАК врТаблицаНачисленийВсего
	|		ПО врНачисленияПоЛицевымСчетам.ЛицевойСчет = врТаблицаНачисленийВсего.ЛицевойСчет
	|			И врНачисленияПоЛицевымСчетам.Услуга = врТаблицаНачисленийВсего.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	врНачисленияПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес,
	|	КВП_ЛицевыеСчета.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет,
	|	врИтогиНачисленийПоЛицевымСчетам.Помещение.Код КАК НомерКвартиры,
	|	врИтогиНачисленийПоЛицевымСчетам.Помещение.Суффикс КАК Суффикс,
	|	врИтогиНачисленийПоЛицевымСчетам.СуммаНачислений,
	|	врИтогиНачисленийПоЛицевымСчетам.СуммаНачисленийСЛьготами,
	|	врИтогиНачисленийПоЛицевымСчетам.Задолженность,
	|	ЕСТЬNULL(втПлательщикиЛицевыхСчетов.Плательщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Плательщик,
	|	ЕСТЬNULL(втПлательщикиЛицевыхСчетов.ПлательщикФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ПлательщикФизЛицо,
	|	ЕСТЬNULL(вт_УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(вт_УПЖКХ_СведенияОПроживающихСрезПоследних.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(Жильцы.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицо,
	|	ЕСТЬNULL(Жильцы.Собственник, ЛОЖЬ) КАК Собственник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(Жильцы.ДоляЧислитель, 0) > 0
	|										И ЕСТЬNULL(Жильцы.ДоляЗнаменатель, 0) > 0
	|										И ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь, 0) > 0
	|									ТОГДА ЕСТЬNULL(Жильцы.ДоляЧислитель, 0) / ЕСТЬNULL(Жильцы.ДоляЗнаменатель, 0) * ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь, 0)
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(вт_УПЖКХ_СведенияОСобственниках.КоличествоСобственников, 0) > 0
	|									ТОГДА ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь, 0) / ЕСТЬNULL(вт_УПЖКХ_СведенияОСобственниках.КоличествоСобственников, 0)
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|						ТОГДА ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПлощадьВСобственности,
	|	ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(вт_ПлощадьПомещенияОбщаяСрезПоследних.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь,
	|	ЕСТЬNULL(втПлательщикиЛицевыхСчетов.КодПлательщика, 0) КАК КодПлательщика,
	|	ЕСТЬNULL(КодыЗданий.Код, 0) КАК КодДома,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Район, """") КАК Район,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ФормаСобственности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|						И ЕСТЬNULL(вт_ТаблицаОснованийПолученияВСобственность.ОснованиеПолученияВСобственность, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.Приватизация)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодФормаСобственности,
	|	ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) КАК ТипЗаселения,
	|	ЕСТЬNULL(втСвойствОбъектов.ТипЗапирающегоУстройства, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипЗапирающегоУстройства.ПустаяСсылка)) КАК ТипЗапирающегоУстройства,
	|	ЕСТЬNULL(втСвойствОбъектов.ТипПлиты, ЗНАЧЕНИЕ(Перечисление.КВП_Плита.ПустаяСсылка)) КАК ТипПлиты,
	|	ЕСТЬNULL(Жильцы.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Жильцы.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ЕСТЬNULL(Жильцы.СтраховойНомер, """") КАК СтраховойНомер,
	|	ЕСТЬNULL(Жильцы.ПризнакПроживания, ЛОЖЬ) КАК ПризнакПроживания,
	|	ЕСТЬNULL(Жильцы.ВидРегистрации, 0) КАК ВидРегистрации,
	|	ЕСТЬNULL(Жильцы.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
	|	ЕСТЬNULL(Жильцы.ДатаСнятияСРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ врЛицевыеСчетаИЖильцы
	|ИЗ
	|	врИтогиНачисленийПоЛицевымСчетам КАК врИтогиНачисленийПоЛицевымСчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойствОбъектов КАК втСвойствОбъектов
	|		ПО врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет = втСвойствОбъектов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцы КАК Жильцы
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = Жильцы.Помещение
	|			И врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет = Жильцы.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлательщикиЛицевыхСчетов КАК втПлательщикиЛицевыхСчетов
	|		ПО врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет = втПлательщикиЛицевыхСчетов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЗданий КАК КодыЗданий
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Здание = КодыЗданий.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Здание = втКонтактнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&ДатаКон, &УсловиеФизЛицо) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = КВП_СостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПлощадьПомещенияОбщаяСрезПоследних КАК вт_ПлощадьПомещенияОбщаяСрезПоследних
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = вт_ПлощадьПомещенияОбщаяСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ТаблицаОснованийПолученияВСобственность КАК вт_ТаблицаОснованийПолученияВСобственность
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = вт_ТаблицаОснованийПолученияВСобственность.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УПЖКХ_СведенияОЗарегистрированныхСрезПоследних КАК вт_УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет = вт_УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УПЖКХ_СведенияОПроживающихСрезПоследних КАК вт_УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО врИтогиНачисленийПоЛицевымСчетам.ЛицевойСчет = вт_УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УПЖКХ_СведенияОСобственниках КАК вт_УПЖКХ_СведенияОСобственниках
	|		ПО врИтогиНачисленийПоЛицевымСчетам.Помещение = вт_УПЖКХ_СведенияОСобственниках.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное,
	|	СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное,
	|	СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
	|ПОМЕСТИТЬ
	|	врТаблицаСтепеньРодстваФизЛиц
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&ДатаКон, ФизическоеЛицоОсновное В (ВЫБРАТЬ
	|	                                                                                                 ЛицевыеСчетаИЖильцы.ПлательщикФизЛицо
	|	                                                                                             ИЗ
	|	                                                                                                  врЛицевыеСчетаИЖильцы КАК ЛицевыеСчетаИЖильцы) И
	|	                                                                   ФизическоеЛицоСвязанное В (ВЫБРАТЬ
	|	                                                                                                 ЛицевыеСчетаИЖильцы.ФизЛицо
	|	                                                                                             ИЗ
	|	                                                                                                  врЛицевыеСчетаИЖильцы КАК ЛицевыеСчетаИЖильцы)) КАК СтепеньРодстваФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ
	|	врТаблицаФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ФизическоеЛицо В (ВЫБРАТЬ
	|	                                                                               ЛицевыеСчетаИЖильцы.ФизЛицо
	|	                                                                           ИЗ
	|	                                                                               врЛицевыеСчетаИЖильцы КАК ЛицевыеСчетаИЖильцы)) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДанных.Плательщик КАК Плательщик,
	|	ТаблицаДанных.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаДанных.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаДанных.ФизЛицо КАК Жилец,
	|	ТаблицаДанных.Собственник КАК Собственник,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.Собственник
	|			ТОГДА ТаблицаДанных.ПлощадьВСобственности
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПлощадьВСобственности,
	|	ТаблицаДанных.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ТаблицаДанных.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	ТаблицаДанных.КодПлательщика КАК КодПлательщика,
	|	ТаблицаДанных.Район КАК Район,
	|	ТаблицаДанных.Улица КАК Улица,
	|	ТаблицаДанных.Дом КАК Дом,
	|	ТаблицаДанных.КодДома КАК КодДома,
	|	ТаблицаДанных.Корпус КАК Корпус,
	|	ТаблицаДанных.НомерКвартиры КАК НомерКвартиры,
	|	ТаблицаДанных.Суффикс КАК Суффикс,
	|	ТаблицаДанных.ФормаСобственности КАК ФормаСобственности,
	|	ТаблицаДанных.ТипЗаселения КАК ТипЗаселения,
	|	ВЫБОР
	|		КОГДА ТаблицаСтепеньРодстваФизЛиц.СтепеньРодства ЕСТЬ NULL
	|				И ТаблицаДанных.ПлательщикФизЛицо = ТаблицаДанных.ФизЛицо
	|			ТОГДА ""ОКС""
	|		ИНАЧЕ ТаблицаСтепеньРодстваФизЛиц.СтепеньРодства
	|	КОНЕЦ КАК СтепеньРодства,
	|	ЕСТЬNULL(ТаблицаФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ТаблицаФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИОФизЛиц.Отчество, """") КАК Отчество,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ПлательщикФизЛицо = ТаблицаДанных.ФизЛицо
	|			ТОГДА ЕСТЬNULL(ТаблицаФИОФизЛиц.Фамилия, """")
	|	КОНЕЦ КАК ФамилияПлательщика,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ПлательщикФизЛицо = ТаблицаДанных.ФизЛицо
	|			ТОГДА ЕСТЬNULL(ТаблицаФИОФизЛиц.Имя, """")
	|	КОНЕЦ КАК ИмяПлательщика,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ПлательщикФизЛицо = ТаблицаДанных.ФизЛицо
	|			ТОГДА ЕСТЬNULL(ТаблицаФИОФизЛиц.Отчество, """")
	|	КОНЕЦ КАК ОтчествоПлательщика,
	|	ЕСТЬNULL(КодыУлиц.Код, 0) КАК КодУлицы,
	|	ЕСТЬNULL(КодыРайонов.Код, 0) КАК КодРайона,
	|	ЕСТЬNULL(КодыТиповЗаселения.Код, 0) КАК КодТипЗаселения,
	|	ТаблицаДанных.ТипЗапирающегоУстройства КАК ТипЗапирающегоУстройства,
	|	ТаблицаДанных.ТипПлиты КАК ТипПлиты,
	|	ЕСТЬNULL(КодыЗапирающегоУстройства.Код, 0) КАК КодТипЗапирающегоУстройства,
	|	ЕСТЬNULL(КодыТиповПлит.Код, 0) КАК КодТипПлиты,
	|	ТаблицаДанных.КодФормаСобственности КАК КодФормаСобственности,
	|	ТаблицаДанных.Пол КАК Пол,
	|	ТаблицаДанных.ДатаРождения КАК ДатаРождения,
	|	ТаблицаДанных.СтраховойНомер КАК СтраховойНомер,
	|	ТаблицаДанных.ПризнакПроживания КАК ПризнакПроживания,
	|	ТаблицаДанных.ВидРегистрации КАК ВидРегистрации,
	|	ТаблицаДанных.ДатаРегистрации КАК ДатаРегистрации,
	|	ТаблицаДанных.ДатаСнятияСРегистрации КАК ДатаОкончанияРегистрации,
	|	ТаблицаДанных.ФизЛицо.Наименование КАК ФИО,
	|	ТаблицаДанных.Плательщик.Наименование КАК ФИОПлательщика,
	|	ТаблицаДанных.СуммаНачислений КАК СуммаНачислений,
	|	ТаблицаДанных.СуммаНачисленийСЛьготами КАК СуммаНачисленийСЛьготами,
	|	ТаблицаДанных.Задолженность КАК Задолженность
	|ИЗ
	|	врЛицевыеСчетаИЖильцы КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаСтепеньРодстваФизЛиц КАК ТаблицаСтепеньРодстваФизЛиц
	|		ПО ТаблицаДанных.ПлательщикФизЛицо = ТаблицаСтепеньРодстваФизЛиц.ФизическоеЛицоОсновное
	|			И ТаблицаДанных.ФизЛицо = ТаблицаСтепеньРодстваФизЛиц.ФизическоеЛицоСвязанное
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаФИОФизЛиц КАК ТаблицаФИОФизЛиц
	|		ПО ТаблицаДанных.ФизЛицо = ТаблицаФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыРайонов КАК КодыРайонов
	|		ПО ТаблицаДанных.Район = КодыРайонов.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыУлиц КАК КодыУлиц
	|		ПО ТаблицаДанных.Улица = КодыУлиц.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыТиповЗаселения КАК КодыТиповЗаселения
	|		ПО ТаблицаДанных.ТипЗаселения = КодыТиповЗаселения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЗапирающегоУстройства КАК КодыЗапирающегоУстройства
	|		ПО ТаблицаДанных.ТипЗапирающегоУстройства = КодыЗапирающегоУстройства.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыТиповПлит КАК КодыТиповПлит
	|		ПО ТаблицаДанных.ТипПлиты = КодыТиповПлит.Наименование
	|ИТОГИ
	|	МАКСИМУМ(Плательщик),
	|	МАКСИМУМ(КоличествоЗарегистрированных),
	|	МАКСИМУМ(КоличествоПроживающих),
	|	МАКСИМУМ(Собственник),
	|	МАКСИМУМ(ПлощадьВСобственности),
	|	МАКСИМУМ(ОбщаяПлощадь),
	|	МАКСИМУМ(ЖилаяПлощадь),
	|	МАКСИМУМ(КодПлательщика),
	|	МАКСИМУМ(Район),
	|	МАКСИМУМ(Улица),
	|	МАКСИМУМ(Дом),
	|	МАКСИМУМ(КодДома),
	|	МАКСИМУМ(Корпус),
	|	МАКСИМУМ(НомерКвартиры),
	|	МАКСИМУМ(Суффикс),
	|	МАКСИМУМ(ФормаСобственности),
	|	МАКСИМУМ(ТипЗаселения),
	|	МАКСИМУМ(СтепеньРодства),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество),
	|	МАКСИМУМ(ФамилияПлательщика),
	|	МАКСИМУМ(ИмяПлательщика),
	|	МАКСИМУМ(ОтчествоПлательщика),
	|	МАКСИМУМ(КодУлицы),
	|	МАКСИМУМ(КодРайона),
	|	МАКСИМУМ(КодТипЗаселения),
	|	МАКСИМУМ(ТипЗапирающегоУстройства),
	|	МАКСИМУМ(ТипПлиты),
	|	МАКСИМУМ(КодТипЗапирающегоУстройства),
	|	МАКСИМУМ(КодТипПлиты),
	|	МАКСИМУМ(КодФормаСобственности),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(СтраховойНомер),
	|	МАКСИМУМ(ПризнакПроживания),
	|	МАКСИМУМ(ВидРегистрации),
	|	МАКСИМУМ(ДатаРегистрации),
	|	МАКСИМУМ(ДатаОкончанияРегистрации),
	|	МАКСИМУМ(ФИОПлательщика),
	|	МАКСИМУМ(СуммаНачислений),
	|	МАКСИМУМ(СуммаНачисленийСЛьготами),
	|	МАКСИМУМ(Задолженность)
	|ПО
	|	ЛицевойСчет";
	
	СтруктураТекстов.Вставить("ТекстЗапросаИтоговый", ТекстЗапросаИтоговый);
	
	Возврат СтруктураТекстов;
	
КонецФункции

// Форматирует данные типа "Число": выравнивает по правому краю, добавляет не значащими нулями до указанной длины.
// Дробная и целая части имеют фиксированную длину и пишутся друг за другом без разделителя.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать;
//  РазмерЦелойЧасти - фиксированная длина всего числа;
//  РазмерДробнойЧасти - фиксированная длина дробной части выходного значения.
//
Функция ФорматЧисло(Данные, РазмерЦелойЧасти, РазмерДробнойЧасти = 0)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат СтрокаИзСимволов(РазмерЦелойЧасти, "0");
	КонецЕсли;
	ФорматнаяСтрока = "ЧЦ=" + РазмерЦелойЧасти + "; ЧДЦ=" + РазмерДробнойЧасти + "; ЧН=0; ЧВН=; ЧГ=0";
	ДанныеЧисло = Число(Данные);
	
	СтрокаИтог = СтрЗаменить(Формат(ДанныеЧисло, ФорматнаяСтрока), ",", "");
	Возврат ?(ДанныеЧисло = 0, СтрокаИзСимволов(РазмерЦелойЧасти + РазмерДробнойЧасти, "0"), СтрокаИтог);
	
КонецФункции

// Форматирует данные типа "Число": выравнивает по правому краю.
// Дробная и целая части имеют фиксированную длину и пишутся друг за другом без разделителя.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать.
//
Функция ЧисловойФормат(Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат "0";
	КонецЕсли;
	ДанныеЧисло = Число(Данные);
	
	Возврат СтрЗаменить(Формат(ДанныеЧисло, "ЧН=0; ЧВН=; ЧГ=0"), ",", "");
	
КонецФункции

// Форматирует данные типа "Дата": состоит из цифр, без разделителей, фиксированной длины 8.
//
// Параметры:
//  Данные - данные, которые необходимо отформатировать.
//
Функция ФорматДата(Данные, ТолькоМесяц = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Если ТолькоМесяц Тогда
			Возврат СтрокаИзСимволов(6, "0");
		Иначе
			Возврат СтрокаИзСимволов(8, "0");
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоМесяц Тогда
		Возврат ФорматЧисло(Формат(Дата(Данные), "ДФ=MMyyyy; ДП=000000"), 6);
	Иначе
		Возврат ФорматЧисло(Формат(Дата(Данные), "ДФ=ddMMyyyy; ДП=00000000"), 8);
	КонецЕсли;
	
Конецфункции

// Возвращает строку указанной длины из определенных символов.
//
// Параметры:
//  Длина - длина строки;
//  Символ - символ из которого будет составлена строка.
//
Функция СтрокаИзСимволов(Длина, Символ)
	
	Результат = "";
	Для Сч = 1 По Длина Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует файлы для выгрузки 
// Параметры:
//  КаталогСохраненияФайлов - Строка - путь для сохранения файлов;
//  МассивИмен              - Массив - массив имен файлов.
//  ОбрезатьПрефиксЛС       - Булево - нужно исключать префикс из наименования лицевого счета.
//  КодОрганизации          - Строка - код организации.
//  МассивВыгружаемыхФайлов - Массив - массив, содержащий описания передаваемых файлов.
// Возвращает:
//  СтруктураПараметровФайлов - Структура - структура, содержащая информацию о файлах.
//
Функция СформироватьФайлыДляВыгрузки(КаталогСохраненияФайлов = Неопределено, МассивИмен, ОбрезатьПрефиксЛС, КодОрганизации, МассивВыгружаемыхФайлов) Экспорт
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СтруктураПараметровФайлов = Новый Структура;
	
	Объект = ЭтотОбъект;
	
	// Получение каталога сохранения
	Если КаталогСохраненияФайлов <> Неопределено Тогда
		КаталогСохранения = КаталогСохраненияФайлов + ?(СтрЗаканчиваетсяНа(КаталогСохраненияФайлов, "\"), "", "\");
	Иначе 
		КаталогСохранения = "";
	КонецЕсли;
	
	Индекс = 1;
	Для Каждого ТекИмя Из МассивИмен Цикл
		
		ТекстФайла = ПолучитьТекстФайлаДляВыгрузки(Индекс, ОбрезатьПрефиксЛС, КодОрганизации);
		
		АдресВоВременномХранилище = Новый УникальныйИдентификатор;
		
		СохранитьФайлВоВременноеХранилище(ТекстФайла, АдресВоВременномХранилище);
		
		СоответствиеИменФайловИАдресов.Вставить(КаталогСохранения+ТекИмя, АдресВоВременномХранилище);
		
		// Сформируем информацию по файлу.
		Структура = Новый Структура;
		Структура.Вставить("ИмяФайла", ТекИмя);
		Структура.Вставить("КоличествоЗаписей", СтрЧислоСтрок(ТекстФайла));
		Если Индекс = 1 Тогда
			Структура.Вставить("Сумма1", Объект.Плательщики.Итог("СуммаНачисленнойПлаты"));
			Структура.Вставить("Сумма2", Объект.Плательщики.Итог("СуммаПлатыСЛьготой"));
			Структура.Вставить("Информация", "сведения о потребителях услуг");
		ИначеЕсли Индекс = 2 Тогда
			Структура.Вставить("Сумма1", Объект.Начисления.Итог("СуммаНачисленнойПлаты"));
			Структура.Вставить("Сумма2", Объект.Начисления.Итог("СуммаПлатыСЛьготой"));
			Структура.Вставить("Информация", "сведения о начислениях");
		ИначеЕсли Индекс = 3 Тогда
			Структура.Вставить("Сумма1", "-");
			Структура.Вставить("Сумма2", "-");
			Структура.Вставить("Информация", "сведения о составе семьи");
		КонецЕсли;
		
		СтруктураПараметровФайлов.Вставить("Структура" + Индекс, Структура);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
	Возврат СтруктураПараметровФайлов;
	
КонецФункции // СформироватьФайлыДляВыгрузки()

// Помещает файл во временное хранилище.
//
// Параметры
//  ТекстФайла                - Строка - содеримое файла.
//  АдресВоВременномХранилище - Строка - адрес файла во временном хранилище.
// 
Процедура СохранитьФайлВоВременноеХранилище(ТекстФайла, АдресВоВременномХранилище)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, "cp866");
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры // СохранитьФайлВоВременноеХранилище()

// Функция возвращает текст файла выгрузки.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  Строка - содержимое файла выгрузки.
//
Функция ПолучитьТекстФайлаДляВыгрузки(НомерФайла, ОбрезатьПрефиксЛС, КодОрганизации) Экспорт
	
	Текст = "";
	
	Если НомерФайла = 1 Тогда // файл типа I
		
		Для Каждого ТекПлательщик Из Плательщики Цикл
			
			// Дата, на которую формируются файлы.
			Текст = Текст + ФорматДата(Дата) + Символы.Таб;
			
			// Код организации-владельца жилого фонда: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник организаций).
			Текст = Текст + КодОрганизации + Символы.Таб;
			
			// Код организации, представившей сведения о начислениях: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник организаций).
			Текст = Текст + КодОрганизации + Символы.Таб;
			
			// Код района: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник районов).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодРайона) + Символы.Таб;
			
			// Фамилия: Фамилия плательщика, указывается полностью. 
			Текст = Текст + ТекПлательщик.ФамилияПлательщика + Символы.Таб;
			
			// Имя: Имя плательщика, указывается полностью.
			Текст = Текст + ТекПлательщик.ИмяПлательщика + Символы.Таб;
			
			// Отчество: Отчество плательщика, указывается полностью.
			Текст = Текст + ТекПлательщик.ОтчествоПлательщика + Символы.Таб;
			
			// Код улицы: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник улиц).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодУлицы) + Символы.Таб;
			
			// Дом: Номер дома.
			Текст = Текст + ТекПлательщик.Дом + Символы.Таб;
			
			// Корпус: номер корпуса
			Текст = Текст + ТекПлательщик.Строение + Символы.Таб;
			
			// Строение: номер строения.
			Текст = Текст + ТекПлательщик.Корпус + Символы.Таб;
			
			// Квартира: номер квартиры.
			Текст = Текст + ТекПлательщик.Квартира + Символы.Таб;
			
			// Код плательщика: код ответственного собственника нанимателя
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодПлательщика) + Символы.Таб;
			
			// Номер лицевого счета / карточки учета / абонента: Номер, присвоенный организацией.
			Текст = Текст + ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ТекПлательщик.ЛицевойСчет, ОбрезатьПрефиксЛС) + Символы.Таб;
			
			// Месяц, за который произведен расчет.
			Текст = Текст + ФорматДата(Период, Истина) + Символы.Таб;
			
			// Форма собственности: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник форм собственности).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодФормаСобственности) + Символы.Таб;
			
			// Тип заселения: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник типов заселения).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодТипЗаселения) + Символы.Таб;
			
			// Общая площадь: Общая площадь занимаемого помещения в кв.м.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.ОбщаяПлощадь * 100) + Символы.Таб;
			
			// Количество постоянно проживающих: Количество человек,  постоянно зарегистрированных по месту жительства на площади, занимаемой семьей.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КолвоЧеловек) + Символы.Таб;
			
			// Жилая площадь: Жилая площадь занимаемого помещения в кв.м.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.ЖилаяПлощадь * 100) + Символы.Таб;
			
			// Код типа запирающего устройства: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник типов запирающего устройства).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодТипЗапирающегоУстройства) + Символы.Таб;
			
			// Код типа плиты: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник типов плит).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодТипПлиты) + Символы.Таб;
			
			// Размер начисленной платы за услугу без перерасчета за прошедший период, без учета льгот.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.СуммаНачисленнойПлаты * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без учета перерасчета за прошедший период, за вычетом льгот.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.СуммаПлатыСЛьготой * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без перерасчета за прошедший период,
			// приходящейся на постоянно зарегистрированных граждан, без учета льгот.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.СуммаНачисленнойПлатыНаЗарегистрированных * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без учета перерасчета за прошедший период,
			// приходящейся на постоянно зарегистрированных граждан, за вычетом льгот.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.СуммаПлатыСЛьготойНаЗарегистрированных * 100) + Символы.Таб;
			
			// Рассчитывается исходя из задолженности, образовавшейся с 1 января 2007г.
			// Дробное число, округленное до десятых долей и умноженное на 10.
			Текст = Текст + ЧисловойФормат(ТекПлательщик.Задолженность * 10) + Символы.Таб;
			
			// Код дома: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник здания).
			Текст = Текст + ЧисловойФормат(ТекПлательщик.КодДома) + Символы.Таб;
			
			// Код квартиры: не заполняется.
			Текст = Текст + "0" + Символы.ПС;
			
		КонецЦикла;
		
	ИначеЕсли НомерФайла = 2 Тогда // файл типа II
		
		Для Каждого ТекПлатеж Из Начисления Цикл
			
			// Дата, на которую формируются файлы.
			Текст = Текст + ФорматДата(Дата) + Символы.Таб;
			
			// Код организации: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник организаций).
			Текст = Текст + КодОрганизации + Символы.Таб;

			// Номер лицевого счета / карточки учета / абонента: Номер, присвоенный организацией.
			Текст = Текст + ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ТекПлатеж.ЛицевойСчет, ОбрезатьПрефиксЛС) + Символы.Таб;
			
			// Код плательщика: код ответственного собственника нанимателя.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.КодПлательщика) + Символы.Таб;
			
			// Месяц, за который произведен расчет.
			Текст = Текст + ФорматДата(Период, Истина) + Символы.Таб;
			
			// Код услуги: Заполняется в соответствии со справочником ОАО «Банк Москвы». 
			Текст = Текст + ЧисловойФормат(ТекПлатеж.КодУслуги) + Символы.Таб;
			
			// Код поставщика услуги: не заполняется.
			Текст = Текст + "0" + Символы.Таб;
			
			// Объем, на который произведен расчет льготной скидки: В зависимости от кода услуги указывается количество человек, куб.м,  кв.м, кВт/час, гКал, антенн, радиоточек.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.Объем * 1000) + Символы.Таб;
			
			// Цена/ставка/тариф на услугу: Цена/ставка/тариф в рублях, по которой произведен расчет услуги.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.Тариф * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без перерасчета за прошедший период, без учета льгот.
			// Запись по услуге необходимо включать в файл даже при нулевом значении начисленной платы.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.СуммаНачисленнойПлаты * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без учета перерасчета за прошедший период, за вычетом льгот.
			// Запись по услуге необходимо включать в файл даже при нулевом значении начисленной платы.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.СуммаПлатыСЛьготой * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без перерасчета за прошедший период,
			// приходящейся на постоянно зарегистрированных граждан, без учета льгот.
			// Запись по услуге необходимо включать в файл даже при нулевом значении начисленной платы.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.СуммаНачисленнойПлатыНаЗарегистрированных * 100) + Символы.Таб;
			
			// Размер начисленной платы за услугу без учета перерасчета за прошедший период,
			// приходящейся на постоянно зарегистрированных граждан, за вычетом льгот.
			// Запись по услуге необходимо включать в файл даже при нулевом значении начисленной платы.
			// Целое неотрицательное число в копейках.
			Текст = Текст + ЧисловойФормат(ТекПлатеж.СуммаПлатыСЛьготойНаЗарегистрированных * 100) + Символы.Таб;
			
			// Признак вида начисления:
			//  0 – по ценам
			//  1 - по домовым ПУ
			//  2 – по квартирным ПУ
			Текст = Текст + ЧисловойФормат(ТекПлатеж.ПризнакВидаНачислений) + Символы.ПС;
			
			
		КонецЦикла;
		
	ИначеЕсли НомерФайла = 3 Тогда // файл типа III
		
		Для Каждого ТекЖилец Из ПотребителиУслуг Цикл
			
			// Дата, на которую формируются файлы.
			Текст = Текст + ФорматДата(Дата) + Символы.Таб;
			
			// Код организации: Заполняется в соответствии со справочником ГУ ГЦЖС (справочник организаций).
			Текст = Текст + КодОрганизации + Символы.Таб;
			
			// Код плательщика: код ответственного собственника нанимателя.
			Текст = Текст + ЧисловойФормат(ТекЖилец.КодПлательщика) + Символы.Таб;
			
			// Номер лицевого счета / карточки учета / абонента: Номер, присвоенный организацией.
			Текст = Текст + ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ТекЖилец.ЛицевойСчет, ОбрезатьПрефиксЛС) + Символы.Таб;
			
			// Месяц, за который произведен расчет.
			Текст = Текст + ФорматДата(Период, Истина) + Символы.Таб;
			
			// Номер жителя по порядку в пределах лицевого счета.
			Текст = Текст + ЧисловойФормат(ТекЖилец.Номер) + Символы.Таб;
			
			// Фамилия: Фамилия жильца, указывается полностью. 
			Текст = Текст + ТекЖилец.Фамилия + Символы.Таб;
			
			// Имя: Имя жильца, указывается полностью.
			Текст = Текст + ТекЖилец.Имя + Символы.Таб;
			
			// Отчество: Отчество жильца, указывается полностью.
			Текст = Текст + ТекЖилец.Отчество + Символы.Таб;
			
			// Дата рождения: Дата рождения жильца, заполняется по шаблону ДДММГГГГ
			Текст = Текст + ФорматДата(ТекЖилец.ДатаРождения) + Символы.Таб;
			
			// Пол: Пол жильца: М - мужчина Ж - женщина, заполняется русскими заглавными буквами.
			Текст = Текст + ТекЖилец.Пол + Символы.Таб;
			
			// Родственные отношения к плательщику.
			Текст = Текст + ТекЖилец.СтепеньРодства + Символы.Таб;
			
			// Отношение к собственности:
			//  0 – не собственник 
			//  1 – собственник
			Текст = Текст + ?(ТекЖилец.Собственник = Истина, "1", "0") + Символы.Таб;
			
			// Площадь (величина доли общей площади в кв.м.), находящаяся в собственности. Дробное число, округленное до сотых и умноженное на 100.
			Текст = Текст + ЧисловойФормат(ТекЖилец.ПлощадьВСобственности * 100) + Символы.Таб;
			
			// Вид регистрации:
			//  0 – гражданин не зарегистрирован;
			//  1 - гражданин зарегистрирован по месту жительства (постоянно);
			//  2 - гражданин зарегистрирован по месту пребывания (временно, т.е. на срок любой продолжительности).
			Текст = Текст + ЧисловойФормат(ТекЖилец.ВидРегистрации) + Символы.Таб;
			
			// Дата регистрации: Заполняется по шаблону ДДММГГГГ.
			Текст = Текст + ФорматДата(ТекЖилец.ДатаРегистрации) + Символы.Таб;
			
			// Дата окончания регистрации: Заполняется по шаблону ДДММГГГГ.
			Текст = Текст + ФорматДата(ТекЖилец.ДатаОкончанияРегистрации) + Символы.Таб;
			
			// Признак фактического проживания жильца:
			//  0 - не проживает;
			//  1 -  проживает.
			Текст = Текст + ?(ТекЖилец.ПризнакПроживания = Истина, "1", "0") + Символы.Таб;
			
			// Страховой номер(СНИЛС).
			// Номер индивидуального счета в системе обязательного пенсионного страхования, заполняется по шаблону 000-000-000 00.
			Текст = Текст + ТекЖилец.СтраховойНомер + Символы.ПС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Процедура проверяет заполнение документа.
//
Процедура ПроверитьЗаполнениеДокумента(Отказ)
	
	// проверка таблицы плательщиков
	НомерСтроки = 1;
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("Плательщик",            "Плательщик");
	СписокКолонок.Добавить("ЛицевойСчет",           "Лицевой счет");
	СписокКолонок.Добавить("ФамилияПлательщика",    "Фамилия");
	СписокКолонок.Добавить("ИмяПлательщика",        "Имя");
	СписокКолонок.Добавить("КодРайона",             "Код района");
	СписокКолонок.Добавить("КодУлицы",              "Код улицы");
	СписокКолонок.Добавить("Дом",                   "Дом");
	СписокКолонок.Добавить("Квартира",              "Квартира");
	СписокКолонок.Добавить("КодФормаСобственности", "Код форма собственности");
	СписокКолонок.Добавить("КодТипЗаселения",       "Код тип заселения");
	СписокКолонок.Добавить("ОбщаяПлощадь",          "Общая площадь");
	СписокКолонок.Добавить("ЖилаяПлощадь",          "Жилая площадь");
	СписокКолонок.Добавить("КодТипПлиты",           "Код тип плиты");
	
	Для Каждого ТекПлательщик Из Плательщики Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если Не ЗначениеЗаполнено(ТекПлательщик[ТекЭлемент.Значение]) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"Строка " + НомерСтроки + ", лицевой счет """ + ТекПлательщик.ЛицевойСчет + """:"
					 + " В таблице ""Плательщики"" (файл I) не заполнена колонка """ + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// проверка таблицы начислений
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("КодУслуги", "Код услуги");
	СписокКолонок.Добавить("Услуга",    "Услуга");
	
	Для Каждого ТекПлатеж Из Начисления Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если Не ЗначениеЗаполнено(ТекПлатеж[ТекЭлемент.Значение]) Тогда
				СтрокаПлательщики = Плательщики.Найти(ТекПлатеж.ЛицевойСчет, "ЛицевойСчет");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка " + СтрокаПлательщики.НомерСтроки 
												  + ", лицевой счет """ + ТекПлатеж.ЛицевойСчет + """:"
												  + " В таблице ""Начисления"" (файл II)" + ?(ЗначениеЗаполнено(ТекПлатеж.Услуга), 
												  " с услугой """ + ТекПлатеж.Услуга + """", "") 
												  + " не заполнена колонка """ + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// проверка таблицы потребителей услуг
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("Фамилия",        "Фамилия");
	СписокКолонок.Добавить("Имя",            "Имя");
	СписокКолонок.Добавить("СтепеньРодства", "Степень родства");
	
	Для Каждого ТекЖилец Из ПотребителиУслуг Цикл
		
		Для Каждого ТекЭлемент Из СписокКолонок Цикл
			Если Не ЗначениеЗаполнено(ТекЖилец[ТекЭлемент.Значение]) Тогда
				СтрокаПлательщики = Плательщики.Найти(ТекЖилец.ЛицевойСчет, "ЛицевойСчет");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка " + СтрокаПлательщики.НомерСтроки 
												  + ", лицевой счет """ + ТекЖилец.ЛицевойСчет + """:"
												  + " В таблице ""Потребители услуг"" (файл III) в строке """ + Строка(ТекЖилец.НомерСтроки) 
												  + """ не заполнена колонка """ + ТекЭлемент.Представление + """", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработчик события "ПроверкиЗаполнения" документа.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеДокумента(Отказ);
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Формируем номер лицевого счета без символов типа "л/с №".
//
// Параметры:
//  ЛицевойСчет  - Строка, ссылка на лицевой счет - лицевой счет, для которого
//                 необходимо определить номер.
//  ВозвращатьНаименованиеВСлучаеОтсутствияНомера  - Булево, признак, в зависимости
//                 от которого будет возвращаться наименование лицевого счета в случае,
//                 если лицевой счет задан без числовых значений (например, как ФИО собственника).
//
// Возвращаемое значение:
//  Срока - номер указанного лицевого счета.
//
Функция ПодготовитьНомерЛицевогоСчетаВТекущемДокументе(ЛицевойСчет, ОбрезатьПрефиксЛС = Ложь) Экспорт
	
	СтрокаЛС = НРег(Строка(ЛицевойСчет));
	
	// Если не нужно исключать префикс из наименования лицевого счета,
	// то возвращаем полное наименование.
	Если НЕ ОбрезатьПрефиксЛС Тогда
		Возврат СокрЛП(СтрокаЛС);
	КонецЕсли;
	
	// Ниже перечислены популярные префиксы, которые необходимо исключить при совпадении.
	#Область Популярные_префиксы_для_исключения
	
	// Первым делом пытаемся найти самый распространенный префикс "л/с №",
	// т.к. данный префикс по умолчанию устанавливается при создании нового элемента
	// справочника "Лицевые счета".
	Если Найти(СтрокаЛС, "л/с №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л/с №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л\с №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л\с №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "лс №") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "лс №", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л/с ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л/с ", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "л\с ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "л\с ", "");
	КонецЕсли;
	
	Если Найти(СтрокаЛС, "лс ") > 0 Тогда
		Возврат СтрЗаменить(СтрокаЛС, "лс ", "");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Обработка_Случае_С_Непопулярными_префиксами
	
	// Если есть пробел в наименовании л/с, тогда запускаем старый механизм, который отбрасывает все нечисловые символы.
	Если Найти(СтрокаЛС, " ") > 0 Тогда
		СписокЦифр = Новый СписокЗначений();
		Для Сч = 0 По 9 Цикл
			СписокЦифр.Добавить("" + Сч);
		КонецЦикла;
		
		Для Сч = 1 По СтрДлина(СтрокаЛС) Цикл
			Если Не СписокЦифр.НайтиПоЗначению(Сред(СтрокаЛС, Сч, 1)) = Неопределено Тогда
				Возврат Сред(СтрокаЛС, Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	// В противном случае передаем всю строку в качестве номера лицевого счета.
	Возврат СтрокаЛС;
	
КонецФункции // ПодготовитьНомерЛицевогоСчетаВТекущемДокументе()

#КонецОбласти

#КонецЕсли