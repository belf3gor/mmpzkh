#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.ВРедакции;
		
		// Заполнять отбор будем только тогда, когда создается форма нового документа.
		// Для имеющихся в базе документов перезаполнять отбор не нужно, чтобы
		// настройки отбора СМС рассылки сохранялись в документе.
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			ИнициализироватьКомпоновщикСервер(Неопределено);
		Иначе
			ИнициализироватьКомпоновщикСервер(Параметры.ЗначениеКопирования.КомпоновщикНастроек.Получить());
		КонецЕсли;
		
	КонецЕсли;
	
	ПодсчитатьПоляТаблицыПолучатели();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Инициализация компоновщика.
	СохраненныйКомпоновщикНастроек = ТекущийОбъект.КомпоновщикНастроек.Получить();
	ИнициализироватьКомпоновщикСервер(СохраненныйКомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИтогиДокумента();
	
	// Настроим доступность элементов
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.КомпоновщикНастроек = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодсчитатьПоляТаблицыПолучатели();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолучателиПолучатель".
//
Процедура ПолучателиПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ТекущиеДанные.Получатель;
	
	Отказ = Ложь;
	
	Если Не ПолучательУжеВыбран(ВыбранноеЗначение, Истина) Тогда
		
		НомерТелефона = смсНастройкаПереопределяемый.ПолучитьНомерТелефонаКонтрагента(ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(НомерТелефона) Тогда
			НомерТелефона = ОбработатьТелефонныйНомерПолучателя(НомерТелефона);
		КонецЕсли;
		
		Если смсПравилаОтбораПолучателей.НомерТелефонаВСтопЛисте(НомерТелефона) Тогда
			Отказ = Истина;
			смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Номер получателя находится в стоп-листе.'"));
		Иначе
			Если ЭлементЯвляетсяГруппой(ВыбранноеЗначение) Тогда
				Отказ = Истина;
				смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нельзя в качестве получателя указать группу.'"));
			Иначе
				ТекущиеДанные.НомерТелефона = НомерТелефона;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагент уже находится в списке получателей.'"));
	КонецЕсли;
	
	Если Отказ Тогда
		ТекущиеДанные.Получатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолучателиНомерТелефона".
//
Процедура ПолучателиНомерТелефонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверка на наличие введенного номера в стоп листе.
	Если смсПравилаОтбораПолучателей.НомерТелефонаВСтопЛисте(ТекущиеДанные.НомерТелефона) Тогда
		смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Введенный номер находится в стоп-листе.'"));
		ТекущиеДанные.НомерТелефона = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПолучателиКлючДополнительнойИдентификации".
//
Процедура ПолучателиКлючДополнительнойИдентификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора подбора.
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ПолучательУжеВыбран(ВыбранноеЗначение) Тогда
		
		НомерТелефона = смсНастройкаПереопределяемый.ПолучитьНомерТелефонаКонтрагента(ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(НомерТелефона) Тогда
			НомерТелефона = ОбработатьТелефонныйНомерПолучателя(НомерТелефона);
		КонецЕсли;
		
		Если смсПравилаОтбораПолучателей.НомерТелефонаВСтопЛисте(НомерТелефона) Тогда
			смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Номер получателя находится в стоп-листе.'"));
		Иначе
			Если ЭлементЯвляетсяГруппой(ВыбранноеЗначение) Тогда
				смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нельзя в качестве получателя указать группу.'"));
			Иначе
				НоваяСтрока               = Объект.Получатели.Добавить();
				НоваяСтрока.Получатель    = ВыбранноеЗначение;
				НоваяСтрока.НомерТелефона = НомерТелефона;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		смсОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагент уже находится в списке получателей.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Шаблон".
//
Процедура ШаблонПриИзменении(Элемент)
	
	// Отказ когда:
	// 1. Получатели заполнены.
	// 2. Шаблон не заполнен или был отказ от заполнения.
	Если Объект.Получатели.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
			
			ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("Оповещение_ОбработатьВыборОтветаЗаполнение", ЭтаФорма);
			ПоказатьВопрос(ОповещениеОВыбореОтвета, НСтр("ru=""При изменении шаблона будет очищена таблица получателей. Продолжить?"""), РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Продолжение_ШаблонПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьВыборОтветаЗаполнение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Продолжение_ШаблонПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Продолжение_ШаблонПриИзменении()
	
	ЗаполнитьОтборыИзКомпоновщикаШаблона();
	
	Объект.Получатели.Очистить();
	
	ОбновитьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" табличной части "Получатели".
//
Процедура ПолучателиПослеУдаления(Элемент)
	
	ОбновитьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолеТекстСообщения".
//
Процедура ПолеТекстСообщенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.РучнаяКорректировка = Истина;
		
		Структура = ПодсчитатьСтрокуТаблицыПолучатели(ТекущиеДанные.ТекстовоеСообщение);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
		
		ОбновитьИтогиДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаПодборПолучателей".
//
Процедура КомандаПодборПолучателей(Команда)
	
	// Тип справочника по умолчанию.
	ТипДляВыбора = "Контрагенты";
	
	СписокВыбораТиповПолучателей = ПолучитьСписокТиповПолучателейНаСервере();
	
	// Если всего один тип, то выбираем его.
	Если СписокВыбораТиповПолучателей.Количество() = 1 Тогда
		
		ТипДляВыбора = СписокВыбораТиповПолучателей[0].Значение;
		ОткрытьФормуВыбора(ТипДляВыбора);
		
	// Если типов несколько, то пользователь сам выбирает, какой тип использовать.
	ИначеЕсли СписокВыбораТиповПолучателей.Количество() > 1 Тогда
		
		ОповещениеОВыбореИзСписка = Новый ОписаниеОповещения("Оповещение_ОбработатьВыборИзСписка", ЭтаФорма);
		ПоказатьВыборИзСписка(ОповещениеОВыбореИзСписка, СписокВыбораТиповПолучателей, Элементы.ПолучателиПолучатель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьВыборИзСписка(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ТипДляВыбора = ВыбранныйЭлемент.Значение;
		ОткрытьФормуВыбора(ТипДляВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Открывает форму выбора по типу справочника.
//
Процедура ОткрытьФормуВыбора(ТипДляВыбора)
	
	// Получение формы выполняем в попытке.
	Попытка
		Форма = ПолучитьФорму("Справочник." + ТипДляВыбора + ".ФормаВыбора", , Элементы.Получатели);
	Исключение
		Возврат;
	КонецПопытки;
	
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаПроверитьДокумент".
//
Процедура КомандаПроверитьДокумент(Команда)
	
	ОчиститьСообщения();
	
	Результат = ПроверитьДокументКлиент();
	
КонецПроцедуры

&НаКлиенте
// Выполняет проверку корректного заполнения документа.
//
Функция ПроверитьДокументКлиент()
	
	Если ПроверитьДокументСервер() Тогда
		
		// Проверим правильность заполнения ТЧ получателей и возможность отправки по приоду запрета.
		Если ПроверитьВозможностьОтправки() И ТабличнаяЧастьБезОшибок() Тогда
			ПодсчитатьПоляТаблицыПолучатели();
			УправлениеДоступностью();
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПроверитьДокументСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.смсСообщение"));
	Результат = ДокументОбъект.ПроверитьДокумент();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Обработчик команды "КомандаОтправитьСообщения".
//
Процедура КомандаОтправитьСообщения(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьДокументКлиент() Тогда
		
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Записать();
		КонецЕсли;
		
		ОтправитьНовыеСМС();
		
		ЭтаФорма.Прочитать();
		
		Если Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.смсСтатусДокументаСообщение.Отправлено") Тогда
			Элементы.ФормаКнопкаОтправить.Видимость = Ложь;
		КонецЕсли;
		
		ЭтаФорма.Прочитать();
		ОбновитьИтогиДокумента();
		УправлениеДоступностью();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьПолучатели".
//
Процедура КомандаЗаполнитьПолучатели(Команда)
	
	Если Объект.Получатели.Количество() > 0 Тогда
		
		ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("Оповещение_ОбработатьОтветПользователяОчисткаПолучателей", ЭтаФорма);
		ПоказатьВопрос(ОповещениеОВыбореОтвета, НСтр("ru=""Будет очищена таблица 'Получатели'. Продолжить?"""), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Продолжение_ЗаполнитьПолучатели();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьОтветПользователяОчисткаПолучателей(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Продолжение_ЗаполнитьПолучатели();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу получателей по отбору.
Процедура Продолжение_ЗаполнитьПолучатели()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.смсСообщение"));
	
	ОписаниеОшибки = "";
	Если НЕ ДокументОбъект.ЗаполнитьПолучателей(ОписаниеОшибки, КомпоновщикНастроек) Тогда
		смсОбщегоНазначения.СообщитьПользователю(НСтр("ru=""" + ОписаниеОшибки + """"));
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаСервере
// Заполняет сообщения получателей по выбранному шаблону.
//
// Парамаетры:
//  ЕстьРучнаяКорректировка - Булево - истина, если в таблицу получателей
//                            были добавлены или отредактированы данные о получателях в ручную.
//  ЗаменятьРучнуюКорректировку - Булево - истина, если необходимо заменить
//                                отредактированные данные в ручную, данными по отбору.
Процедура ЗаполнитьСообщенияНаСервере(ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.смсСообщение"));
	ДокументОбъект.ЗаполнитьСообщения(ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьСообщения".
//
Процедура КомандаЗаполнитьСообщения(Команда)
	
	Если Объект.Получатели.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru=""Таблица получателей пуста."""));
		Возврат;
	КонецЕсли;
	
	ЕстьРучнаяКорректировка = Ложь;
	// Проверка на наличие флага ручной корректировки
	Для Каждого СтрокаПолучатель Из Объект.Получатели Цикл
		Если СтрокаПолучатель.РучнаяКорректировка Тогда
			ЕстьРучнаяКорректировка = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаменятьРучнуюКорректировку = Ложь;
	Если ЕстьРучнаяКорректировка Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЕстьРучнаяКорректировка", ЕстьРучнаяКорректировка);
		
		ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("Оповещение_ОбработатьВыбораОтветаРучнаяКорректировка", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОповещениеОВыбореОтвета, НСтр("ru=""В документе есть строки откорректированные вручную. Заменить данные строки?"""), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Продолжение_ЗаполнитьСообщения(ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьВыбораОтветаРучнаяКорректировка(Ответ, ДопПараметры) Экспорт
	
	ЗаменятьРучнуюКорректировку = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаменятьРучнуюКорректировку = Истина;
	КонецЕсли;
	
	Продолжение_ЗаполнитьСообщения(ДопПараметры.ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку);
	
КонецПроцедуры

&НаКлиенте
Процедура Продолжение_ЗаполнитьСообщения(ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку)
	
	ЗаполнитьСообщенияНаСервере(ЕстьРучнаяКорректировка, ЗаменятьРучнуюКорректировку);
	
	// Убираем все флаги ручной корректировки
	Если ЕстьРучнаяКорректировка И ЗаменятьРучнуюКорректировку Тогда
		Для каждого СтрокаПолучатель Из Объект.Получатели Цикл
			СтрокаПолучатель.РучнаяКорректировка = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ПодсчитатьПоляТаблицыПолучатели();
	
	ОбновитьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаПроверитьСостояниеСообщений".
//
Процедура КомандаПроверитьСостояниеСообщений(Команда)
	
	ПроверитьСостояниеСообщенийСервер();
	
	ЭтаФорма.Прочитать();
	
	Объект.ДатаПоследнегоОбновленияСтатусовДоставкиСообщений = НачалоДня(ТекущаяДата());
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеСообщенийСервер()
	
	смсСервер.ПроверитьСообщения(, Объект.Аккаунт, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОчиститьПолучателейСНекорректнымиНомерами".
Процедура КомандаОчиститьПолучателейСНекорректнымиНомерами(Команда)
	
	ОчиститьПолучателейСНекорректнымиНомерамиНаСервере();
	ПодсчитатьПоляТаблицыПолучатели();
	ОбновитьИтогиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПолучателейСНекорректнымиНомерамиНаСервере()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.смсСообщение"));
	ДокументОбъект.ОчиститьПолучателейСНекорректнымиНомерами();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОчиститьДублиПолучателей".
//
Процедура КомандаОчиститьДублиПолучателей(Команда)
	
	ОчиститьДублиПолучателейНаСервере();
	ПодсчитатьПоляТаблицыПолучатели();
	ОбновитьИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОчиститьПравилаОтбора".
//
Процедура КомандаОчиститьПравилаОтбора(Команда)
	
	ИнициализироватьКомпоновщикСервер();
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура инициализации компоновщика.
//
Процедура ИнициализироватьКомпоновщикСервер(НастройкаКомпоновки = Неопределено)
	
	СхемаКомпоновки = Справочники.смсПравилаОтбораПолучателей.ПолучитьМакет("СхемаПравилОтбораПереопределяемый");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки,УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Если НастройкаКомпоновки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет реквизит формы КомпоновщикНастроек из сохраненного в шаблоне правила отбора.
//
Процедура ЗаполнитьОтборыИзКомпоновщикаШаблона()
	
	НастройкаКомпоновки = Объект.Шаблон.ПравилоОтбораПолучателей.КомпоновщикНастроек.Получить();
	ИнициализироватьКомпоновщикСервер(НастройкаКомпоновки);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает параметры длины СМС по данным аккаунта.
Функция ПолучитьПараметрыДлиныСМС(Аккаунт)
	
	СтруктураПараметровДлиныСМС = Новый Структура;
	СтруктураПараметровДлиныСМС.Вставить("МаксимальнаяДлинаСМС",  0);
	
	Если Не Аккаунт.Пустая() Тогда
		СтруктураПараметровДлиныСМС.МаксимальнаяДлинаСМС = Аккаунт.МаксимальнаяДлинаСМС;
	КонецЕсли;
	
	Возврат СтруктураПараметровДлиныСМС;
	
КонецФункции

&НаКлиенте
// Процедура обновления итогов документа.
Процедура ОбновитьИтогиДокумента()
	
	КоличествоСМСВсего = Объект.Получатели.Итог("КоличествоСМС");
	
КонецПроцедуры

&НаКлиенте
// Процедура управления доступностью элементов формы.
Процедура УправлениеДоступностью()
	
	ДоступностьРедактирования = Ложь;
	
	Если Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.смсСтатусДокументаСообщение.ВРедакции") Тогда 
		// У документа статус "ВРедакции", возвращаем всем элементам доступность.
		ДоступностьРедактирования = Истина;
	КонецЕсли;
	
	Элементы.Шаблон.ТолькоПросмотр                             = НЕ ДоступностьРедактирования;
	Элементы.Дата.ТолькоПросмотр                               = НЕ ДоступностьРедактирования;
	Элементы.ДатаИВремяОтправки.ТолькоПросмотр                 = НЕ ДоступностьРедактирования;
	Элементы.КомпоновщикНастроекНастройкиОтбор.ТолькоПросмотр  = НЕ ДоступностьРедактирования;
	Элементы.Получатели.ТолькоПросмотр                         = НЕ ДоступностьРедактирования;
	Элементы.ПолеТекстСообщения.ТолькоПросмотр                 = НЕ ДоступностьРедактирования;
	Элементы.Аккаунт.ТолькоПросмотр                            = НЕ ДоступностьРедактирования;
	Элементы.ФормаКомандаПроверитьСостояниеСообщений.Видимость = НЕ ДоступностьРедактирования;
	Элементы.ПолучателиГруппаЗаполнить.Доступность             = ДоступностьРедактирования;
	Элементы.Подбор.Доступность                                = ДоступностьРедактирования;
	Элементы.ПолучателиОчистить.Доступность                    = ДоступностьРедактирования;
	Элементы.Очистить.Доступность                              = ДоступностьРедактирования;
	Элементы.ФормаКнопкаОтправить.Видимость                    = ДоступностьРедактирования;
	Элементы.ФормаКнопкаПроверить.Видимость                    = ДоступностьРедактирования;
	
	// Управление отображением картинки статуса документа.
	мСтатусДокумента = ?(ДоступностьРедактирования, 9, 1);
	
КонецПроцедуры

&НаСервере
// Функция проверяет возможность отправки сообщения по периоду запрета.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Возможность отправки сообщения.
//
Функция ПроверитьВозможностьОтправки()
	
	Ответ = Истина;
	
	Аккаунт = Объект.Аккаунт;
	
	Если НЕ ЗначениеЗаполнено(Объект.Аккаунт) Тогда
		смсОбщегоНазначения.СообщитьПользователю("Поле ""Аккаунт"" не заполнено!");
		Ответ = Ложь;
	КонецЕсли;
	
	Если Ответ Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаИВремяОтправки) Тогда
			
			Если Аккаунт.КонецПериодаЗапрета < Аккаунт.НачалоПериодаЗапрета Тогда
				Если  (Объект.ДатаИВремяОтправки - НачалоДня(Объект.ДатаИВремяОтправки)) >= (Аккаунт.НачалоПериодаЗапрета - Дата('00010101'))
					ИЛИ (Объект.ДатаИВремяОтправки - НачалоДня(Объект.ДатаИВремяОтправки)) <= (Аккаунт.КонецПериодаЗапрета - Дата('00010101')) Тогда
					смсОбщегоНазначения.СообщитьПользователю("Время отправки находится внутри периода запрета!");
					Ответ = Ложь;
				КонецЕсли;
			ИначеЕсли Аккаунт.КонецПериодаЗапрета > Аккаунт.НачалоПериодаЗапрета Тогда
				Если  (Объект.ДатаИВремяОтправки - НачалоДня(Объект.ДатаИВремяОтправки)) >= (Аккаунт.НачалоПериодаЗапрета - Дата('00010101'))
					И (Объект.ДатаИВремяОтправки - НачалоДня(Объект.ДатаИВремяОтправки)) <= (Аккаунт.КонецПериодаЗапрета - Дата('00010101')) Тогда
					смсОбщегоНазначения.СообщитьПользователю("Время отправки находится внутри периода запрета!");
					Ответ = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеОшибки = "";
		
		Если НЕ смсСервер.БалансПозволяетОтправитьСообщения(Объект.Аккаунт, ОписаниеОшибки) Тогда
			смсОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

&НаСервере
Процедура ОтправитьНовыеСМС()
	
	смсСервер.ПроверкаСМС(Объект.Ссылка, Объект.Аккаунт);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодсчитатьСтрокуТаблицыПолучатели(СтрокаСообщения)
	
	ИнформацияОСообщении = смсРаботаССообщениями.ПолучитьДлинуИКоличествоСМС(СтрокаСообщения);
	
	ДлинаСообщения = ИнформацияОСообщении.ДлинаСообщения;
	КоличествоСМС  = ИнформацияОСообщении.КоличествоСМС;
	
	Структура = Новый Структура();
	Структура.Вставить("ДлинаСообщения", ДлинаСообщения);
	Структура.Вставить("КоличествоСМС", КоличествоСМС);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ПодсчитатьПоляТаблицыПолучатели()
	
	Для каждого СтрокаПолучатель Из Объект.Получатели Цикл
		Структура = ПодсчитатьСтрокуТаблицыПолучатели(СтрокаПолучатель.ТекстовоеСообщение);
		ЗаполнитьЗначенияСвойств(СтрокаПолучатель, Структура);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Проверяет табличную часть "Получатели" на корректность заполнения.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если корректно заполнена.
//
Функция ТабличнаяЧастьБезОшибок()
	
	СтатусВозврата = Истина;
	
	// Проверка на дублирование получателей
	
	// Делаем копию таблицы
	ТаблицаПолучатели = Объект.Получатели.Выгрузить();
	ТаблицаПолучатели.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПолучатели.ЗаполнитьЗначения(1, "Количество");
	// Сворачиваем по Получателю для того чтобы определить их количество
	ТаблицаПолучатели.Свернуть("Получатель,КлючДополнительнойИдентификации", "Количество");
	// Сортируем в обратном порядке для удобства
	ТаблицаПолучатели.Сортировать("Количество УБЫВ");
	
	// Если есть Получатели, которые встречаются более 1го раза,
	// то сообщаем о них и их местоположении.
	Если ТаблицаПолучатели[0].Количество > 1 Тогда
		Для каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл
			Если СтрокаПолучатель.Количество = 1 Тогда
				Прервать;
			КонецЕсли; 
			
			// Находим все строки с данным Получателем и сообщаем о них
			Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда
				СтруктураПоиска = Новый Структура("Получатель", СтрокаПолучатель.Получатель);
				НайденныеСтроки = Объект.Получатели.НайтиСтроки(СтруктураПоиска);
				НомераСтрок = "";
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НомераСтрок = НомераСтрок + ?(НомераСтрок= "", "", ", ") + (Объект.Получатели.Индекс(НайденнаяСтрока) + 1);
				КонецЦикла; 
				смсОбщегоНазначения.СообщитьПользователю("Один и тот же получатель указан несколько раз: " + СтрокаПолучатель.Получатель + ". Строки:" + НомераСтрок + ".");
			КонецЕсли;
		КонецЦикла; 
		СтатусВозврата = Ложь;
	КонецЕсли; 
	
	СтруктураПараметровДлиныСМС = ПолучитьПараметрыДлиныСМС(Объект.Аккаунт);
	
	Для Каждого СтрокаПолучатель Из Объект.Получатели Цикл
		
		// Проверим заполнение обязательных полей ТЧ.
		Если НЕ ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда
			смсОбщегоНазначения.СообщитьПользователю("Не указан получатель в строке " + (Объект.Получатели.Индекс(СтрокаПолучатель) + 1) + ".");
			СтатусВозврата = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолучатель.НомерТелефона) Тогда
			смсОбщегоНазначения.СообщитьПользователю("Не указан номер телефона в строке " + (Объект.Получатели.Индекс(СтрокаПолучатель) + 1) + ".");
			СтатусВозврата = Ложь;
		КонецЕсли;
		
		// Исключим номера телефонов, не удовлетворяющих правилам написания номеров.
		// На длину номера должно быть 11 символов без плюса (+7...).
		ТекНомерТелефона = СтрокаПолучатель.НомерТелефона;
		
		Если Не смсСервер.НомерТелефонаКорректен(ТекНомерТелефона) Тогда
			
			ТекстСообщения = "Номер телефона получателя " + СтрокаПолучатель.Получатель + " в строке " + (Объект.Получатели.Индекс(СтрокаПолучатель) + 1) + " некорректен!";
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Номер телефона должен содержать 11 числовых символов начиная с цифры 7.";
			смсОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			СтатусВозврата = Ложь;
			
		КонецЕсли;
		
		// Проверим на превышение максимально допустимой и нежелательной длины сообщения.
		ДлинаСообщения = СтрДлина(СтрокаПолучатель.ТекстовоеСообщение);
		
		Если ДлинаСообщения = 0 Тогда
			смсОбщегоНазначения.СообщитьПользователю("Сообщение в строке " + (Объект.Получатели.Индекс(СтрокаПолучатель) + 1) + " является пустым.");
			СтатусВозврата = Ложь;
		КонецЕсли;
		
		Если ДлинаСообщения >= СтруктураПараметровДлиныСМС.МаксимальнаяДлинаСМС Тогда
			смсОбщегоНазначения.СообщитьПользователю("Длина сообщения в строке " + (Объект.Получатели.Индекс(СтрокаПолучатель) + 1) + " превышает максимально допустимую.");
		КонецЕсли;
		
	КонецЦикла; 
	
	// Проверка на дублирование мобильных телефонов
	
	ТаблицаПолучатели = Объект.Получатели.Выгрузить();
	ТаблицаПолучатели.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПолучатели.ЗаполнитьЗначения(1, "Количество");
	// Сворачиваем по Получателю для того чтобы определить их количество
	ТаблицаПолучатели.Свернуть("НомерТелефона,КлючДополнительнойИдентификации", "Количество");
	// Сортируем в обратном порядке для удобства
	ТаблицаПолучатели.Сортировать("Количество УБЫВ");
	
	Если ТаблицаПолучатели[0].Количество > 1 Тогда
		Для каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл
			Если СтрокаПолучатель.Количество = 1 Тогда
				Прервать;
			КонецЕсли; 
			
			// Находим все строки с данным Получателем и сообщаем о них
			СтруктураПоиска = Новый Структура("НомерТелефона", СтрокаПолучатель.НомерТелефона);
			НайденныеСтроки = Объект.Получатели.НайтиСтроки(СтруктураПоиска);
			НомераСтрок = "";
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок= "", "", ", ") + (Объект.Получатели.Индекс(НайденнаяСтрока) + 1);
			КонецЦикла; 
			смсОбщегоНазначения.СообщитьПользователю("Номер телефона " + СтрокаПолучатель.НомерТелефона + " повторяется несколько раз" + ". Строки:" + НомераСтрок);
		КонецЦикла; 
		СтатусВозврата = Ложь;
	КонецЕсли; 
	
	Возврат СтатусВозврата;
	
КонецФункции

&НаСервере
// Проверяет находится ли контрагент в табличной части "Получатели".
//
// Параметры:
//	Получатель - Ссылка на элемент справочника "Контрагенты.
//
// Возвращаемое значение:
//	Булево	- Получатель уже находится в списке.
//
Функция ПолучательУжеВыбран(Получатель, НаличиеПолучателяДопускается = Ложь)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Получатель", Получатель);
	РезультатПоиска = Объект.Получатели.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимоеКоличество = 0;
	Если НаличиеПолучателяДопускается Тогда
		ДопустимоеКоличество = 1;
	КонецЕсли;
	
	Возврат (РезультатПоиска.Количество() > ДопустимоеКоличество);
	
КонецФункции

&НаСервереБезКонтекста
// Функция определяет, является ли элемент группой.
Функция ЭлементЯвляетсяГруппой(ЭлементСправочника)
	
	ЭлементЯвляетсяГруппой = Ложь;
	
	Если ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЭлементЯвляетсяГруппой = ЭлементСправочника.ЭтоГруппа;
	КонецЕсли;
	
	Возврат ЭлементЯвляетсяГруппой;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает список типов получателей.
Функция ПолучитьСписокТиповПолучателейНаСервере()
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТипов = Метаданные.Документы.смсСообщение.ТабличныеЧасти.Получатели.Реквизиты.Получатель.Тип.Типы();
	Для Каждого ТекТип Из МассивТипов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекТип);
		Если Не ОбъектМетаданных = Неопределено Тогда
			СписокТипов.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

&НаСервере
// Процедура очищает дубли получателей, оставляя только первые из них.
//
Процедура ОчиститьДублиПолучателейНаСервере()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.смсСообщение"));
	ДокументОбъект.ОчиститьДублиПолучателей();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Удаляет из номера телефона получателя все нечисловые символы.
//
// Параметры:
//  НомерТелефона - Строка - номер телефона который необходимо проверить на корректность и удалить лишние символы.
//
// Возвращаемое значение:
//   Строка - исправленный корректный номер.
//
Функция ОбработатьТелефонныйНомерПолучателя(НомерТелефона)
	
	ИтоговаяСтрока = "";
	
	Для НомерСимвола = 1 По СтрДлина(НомерТелефона) Цикл
		ТекущийСимвол = Сред(НомерТелефона, НомерСимвола, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

#КонецОбласти
