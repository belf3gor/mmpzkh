////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресХранилища = "";
	Если Параметры.Свойство("АдресХранилищаЗачетАвансов", АдресХранилища) Тогда
		ЗагрузитьТаблицуЗачетАвансовИзВременногоХранилища(АдресХранилища);
	КонецЕсли;

	// Сохраним в реквизитах формы ее параметры
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата,ДоговорКонтрагента,Контрагент,Организация,СпособЗачетаАвансов,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансамПолученным,
		|СчетУчетаРасчетовЗаПосредническиеУслуги, СчетУчетаРасчетовПоАвансамВыданным");

	ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьУсловноеОформление();
	ОбновитьИтоги(ЭтаФорма);

	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ОтчетКомиссионераОПродажах",
		"ФормаПорядокУчетаРасчетов",
		НСтр("ru='Новости: Отчет комиссионера (агента) о продажах'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		
		Отказ = Истина;
		
	ИначеЕсли Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохраненияДанныхЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	ИначеЕсли ПеренестиВДокумент Тогда
		
		Отказ = НЕ ПроверитьЗаполнение();
		
		Если Отказ Тогда
			Модифицированность = Истина;
			ПеренестиВДокумент = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	СтруктураВозврата = Новый Структура;

	Если ПеренестиВДокумент Тогда
		СтруктураВозврата.Вставить("АдресХранилищаЗачетАвансов", 				АдресХранилищаЗачетАвансов);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовСКонтрагентом",			СчетУчетаРасчетовСКонтрагентом);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовПоАвансамПолученным",		СчетУчетаРасчетовПоАвансамПолученным);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги",	СчетУчетаРасчетовЗаПосредническиеУслуги);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовПоАвансамВыданным",		СчетУчетаРасчетовПоАвансамВыданным);
		СтруктураВозврата.Вставить("СпособЗачетаАвансов", 		 				СпособЗачетаАвансов);
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансамПолученным) Тогда
		Если СпособЗачетаАвансов <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать") Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Заполнение", НСтр("ru = 'Счет расчетов по авансам полученным'"));
			Поле = "СчетУчетаРасчетовПоАвансамПолученным";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда

		Если ЗачетАвансов.Количество() = 0 Тогда
		
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
			Поле = "ЗачетАвансов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		Иначе
		
			НомерСтроки = 0;
			Для Каждого СтрокаАванса Из ЗачетАвансов Цикл
			
				НомерСтроки = НомерСтроки + 1;
				Префикс = "ЗачетАвансов[%1].";
				Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Префикс, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
				
				Если НЕ ЗначениеЗаполнено(СтрокаАванса.ДокументАванса) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""Документ аванса"" в строке %1 списка'"),
						НомерСтроки);
					Поле = Префикс + "ДокументАванса";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;

	// Чтобы дважды не вызывать сервер, сразу поместим во временное хранилище 
	// таблицу ЗачетАвансов.
	Если Не Отказ Тогда
		АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилище();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически")
			ИЛИ СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать") Тогда
		ЗачетАвансов.Очистить();
		ЕстьСтрокиЗачетАвансов = Ложь;
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗачетАвансов

&НаКлиенте
Процедура ЗачетАвансовПриИзменении(Элемент)
	
	ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовПослеУдаления(Элемент)

	ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗачетАвансов.ТекущиеДанные;
	ТекущиеДанные.СуммаЗачета = 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , СчетУчетаРасчетовПоАвансамПолученным);
	ПараметрыОбъекта.Вставить("Организация"          , Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ОтчетКомиссионераОПродажах.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовСуммаЗачетаПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ЗачетАвансовСуммаЗачета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗачетАвансовСуммаЗачета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЗачетАвансов.СуммаЗачета", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ЗачетАвансов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗачетАвансов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособЗачетаАвансов", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыЗачетаАвансов.ПоДокументу);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиЗачетАвансов", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// ЗачетАвансов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗачетАвансов");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыЗачетаАвансов.Автоматически);
	СписокЗначений.Добавить(Перечисления.СпособыЗачетаАвансов.НеЗачитывать);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособЗачетаАвансов", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаФормы);


	// СчетУчетаРасчетовПоАвансамПолученным

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоАвансамПолученным");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособЗачетаАвансов", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыЗачетаАвансов.НеЗачитывать);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогСуммаЗачета = Форма.ЗачетАвансов.Итог("СуммаЗачета");

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуЗачетАвансовИзВременногоХранилища(АдресХранилища)

	ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилище()

	ТаблицаЗачетАвансов = ЗачетАвансов.Выгрузить();
	
	АдресЗачетАвансовВХранилище = ПоместитьВоВременноеХранилище(ТаблицаЗачетАвансов, УникальныйИдентификатор);

	Возврат АдресЗачетАвансовВХранилище;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	СпособЗачетаАвансов = Форма.СпособЗачетаАвансов;
	Элементы = Форма.Элементы;
	
	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать")
		ИЛИ СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически") Тогда
		Элементы.ЗачетАвансов.Доступность 	= Ложь;
	Иначе
		Элементы.ЗачетАвансов.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры