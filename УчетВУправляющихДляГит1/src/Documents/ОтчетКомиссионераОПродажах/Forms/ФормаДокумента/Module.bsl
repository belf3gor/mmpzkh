// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// Служебные переменные для функций обновления общих итогов на закладке "Реализация"
&НаКлиенте
Перем СуммаПоСтрокеДоИзменения;
&НаКлиенте
Перем СуммаНДСПоСтрокеДоИзменения;
&НаКлиенте
Перем ЭтоУдалениеСтроки;
&НаКлиенте
Перем КлючСтрокиДоИзменения;

// Служебные переменные для функций обновления общих итогов на закладке "Возвраты"
&НаКлиенте
Перем СуммаПоСтрокеДоИзмененияВозвраты;
&НаКлиенте
Перем СуммаНДСПоСтрокеДоИзмененияВозвраты;
&НаКлиенте
Перем ЭтоУдалениеСтрокиВозвраты;
&НаКлиенте
Перем КлючСтрокиДоИзмененияВозвраты;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	
	ЗаполнитьКлючиСтрокРеализацийВЕАЭС();
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	СуммаПоСтрокеДоИзмененияВозвраты 	= 0;
	СуммаНДСПоСтрокеДоИзмененияВозвраты = 0;
	ЭтоУдалениеСтрокиВозвраты			= Ложь;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ОтчетКомиссионераОПродажах",
		"ФормаДокумента",
		НСтр("ru='Новости: Отчет комиссионера (агента) о продажах'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

	// Событие "Запись_СчетФактураВыданный" обрабатывать незачем
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		ДанныеПокупателиУстановитьОтборСтрок();

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионераОПродажах.Форма.ФормаПорядокУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетКомиссионераОПродажах";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ТекущийОбъект.Ссылка, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, ,СтруктураОтбора);
		
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, Результат);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтчетКомиссионераОПродажах", ПараметрыЗаписи, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетФактураВыданный"));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	Если Объект.Дата < '20150101' Тогда
		СчетаФактурыСводно = Ложь;
	ИначеЕсли ТекущаяДатаДокумента < '20150101'Тогда
		СчетаФактурыСводно = Истина;
	Иначе
		СчетаФактурыСводно = Объект.ВыписыватьСчетаФактурыСводно;
	КонецЕсли;
	Если Объект.ВыписыватьСчетаФактурыСводно <> СчетаФактурыСводно Тогда
		Объект.ВыписыватьСчетаФактурыСводно = СчетаФактурыСводно;
		Если НЕ ТребуетсяВызовСервера Тогда
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СтавкаНДСВознаграждения) Тогда
		СтавкаНДСВознагражденияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
 
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"	   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"	, АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"  			, 			Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", 			Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансамПолученным", 	Объект.СчетУчетаРасчетовПоАвансамПолученным);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги", 	Объект.СчетУчетаРасчетовЗаПосредническиеУслуги);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансамВыданным", 		Объект.СчетУчетаРасчетовПоАвансамВыданным);

	ОткрытьФорму("Документ.ОтчетКомиссионераОПродажах.Форма.ФормаПорядокУчетаРасчетов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат1ПриИзменении(Элемент)

	ПриИзмененииСубконто(1);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат2ПриИзменении(Элемент)

	ПриИзмененииСубконто(2);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат3ПриИзменении(Элемент)

	ПриИзмененииСубконто(3);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатрат3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупателиТовары

&НаКлиенте
Процедура ПокупателиТоварыПриАктивизацииСтроки(Элемент)
	
	ДанныеПокупателиУстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанныеТовары = Элементы.Покупатели.ТекущиеДанные;
		ТекДанныеТовары.КлючСтроки = ПолучитьНовыйКлючСтроки();
		
		Если Копирование Тогда
			ТекДанныеТовары.ВыставленСФ = Ложь;
			ТекДанныеТовары.СчетФактура = Неопределено;
		КонецЕсли;
		
		ДанныеПокупателиУстановитьОтборСтрок();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Покупатели.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Покупатели.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхКлючей.Добавить();
			НоваяСтрока.КлючСтроки = ТекДанные.КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыВыставленСФПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Покупатели.ТекущиеДанные;
	ДанныеСтроки.ВсегоПоСФ = ?(ДанныеСтроки.ВыставленСФ, ДанныеСтроки.Всего, 0);
	ДанныеСтроки.НДСПоСФ   = ?(ДанныеСтроки.ВыставленСФ, ДанныеСтроки.НДС, 0);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПокупательПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Покупатели.ТекущиеДанные;
	ЗаполнитьКлючиСтрокРеализацийВЕАЭС(ДанныеСтроки.КлючСтроки);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Покупатели);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПокупательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПокупательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиТоварыДатаСФПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Покупатели);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(Элементы.Покупатели.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если ЭтоУдалениеСтроки = Истина Тогда
		ЭтоУдалениеСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СуммаПоСтрокеДоИзменения = Неопределено Тогда
 		СуммаПоСтрокеДоИзменения = 0;
	КонецЕсли;
	
	Если СуммаНДСПоСтрокеДоИзменения = Неопределено Тогда
		СуммаНДСПоСтрокеДоИзменения = 0;
    КонецЕсли;
    
    Если КлючСтрокиДоИзменения = Неопределено Тогда
        Если Элементы.Покупатели.ТекущиеДанные = Неопределено Тогда
        
		    КлючСтрокиДоИзменения = 0;
        
        Иначе
        
		    КлючСтрокиДоИзменения = Элементы.Покупатели.ТекущиеДанные.КлючСтроки;
        
        КонецЕсли; 
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		
		ОбновитьСуммыПоСтрокеПокупателя(
			КлючСтрокиДоИзменения, Элементы.Товары.ТекущиеДанные.Сумма, Элементы.Товары.ТекущиеДанные.СуммаНДС);
			
	ИначеЕсли Элементы.Покупатели.ТекущиеДанные <> Неопределено Тогда
			
		ОбновитьСуммыПоСтрокеПокупателя(
			Элементы.Покупатели.ТекущиеДанные.КлючСтроки, 0, 0);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияСтрокиТоваровУслуг(
		Элементы.Товары.ТекущиеДанные, Элементы.Покупатели.ТекущиеДанные, НоваяСтрока, Копирование);
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьСуммыПоСтрокеПокупателя(
			Элементы.Товары.ТекущиеДанные.КлючСтроки, -Элементы.Товары.ТекущиеДанные.Сумма, -Элементы.Товары.ТекущиеДанные.СуммаНДС);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СуммаПоСтрокеДоИзменения    = Элементы.Товары.ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзменения = Элементы.Товары.ТекущиеДанные.СуммаНДС;
	КлючСтрокиДоИзменения		= Элементы.Товары.ТекущиеДанные.КлючСтроки
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьСуммыПоСтрокеПокупателя(КлючСтрокиДоИзменения, 0, 0);
	ДанныеПокупателиУстановитьОтборСтрок();
	
	СуммаПоСтрокеДоИзменения    = 0;
	СуммаНДСПоСтрокеДоИзменения = 0;
	КлючСтрокиДоИзменения		= 0;
	
	ЭтоУдалениеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, ЦенаПередачи, СуммаПередачи, СтавкаНДС, СуммаНДС,
		|СуммаВознаграждения, СуммаНДСВознаграждения,
		|СчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
		|НомерГТД, СтранаПроисхождения,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам, КодТНВЭД");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения, СтавкаНДСВознаграждения,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,РеализацияВЕАЭС, ВедетсяУчетНДСПоФЗ150,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150      = ВедетсяУчетНДСПоФЗ150;
	
	Если КлючиСтрокРеализацийВЕАЭС.НайтиПоЗначению(ТекущиеДанные.КлючСтроки) <> Неопределено Тогда 
		ДанныеОбъекта.РеализацияВЕАЭС = Истина;
	Иначе
		ДанныеОбъекта.РеализацияВЕАЭС = Ложь;
	КонецЕсли;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПередачиПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаПередачи = ДанныеСтроки.Ценапередачи * ДанныеСтроки.Количество;
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПередачиПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.Ценапередачи = ДанныеСтроки.СуммаПередачи / ?(ДанныеСтроки.Количество=0, 1, ДанныеСтроки.Количество);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ОтчетКомиссионераОПродажах.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	Если (НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам)
		И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(СтрокаТаблицы.СчетДоходов) Тогда
		
		СтрокаТаблицы.Субконто 	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
		
	ИначеЕсли СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) Тогда
		
		СтрокаТаблицы.Субконто 	= ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходовТовары = ОтобразитьСубконтоСчетаДоходовТовары ИЛИ НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыНомерГТДЗавершение", 
		ЭтотОбъект, Новый Структура("Форма", ЭтотОбъект));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги
	
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(Элементы.Покупатели.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	Если ЭтоУдалениеСтроки = Истина Тогда
		ЭтоУдалениеСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СуммаПоСтрокеДоИзменения = Неопределено Тогда
 		СуммаПоСтрокеДоИзменения = 0;
	КонецЕсли;
	
	Если СуммаНДСПоСтрокеДоИзменения = Неопределено Тогда
		СуммаНДСПоСтрокеДоИзменения = 0;
    КонецЕсли;
    
    Если КлючСтрокиДоИзменения = Неопределено Тогда
        Если Элементы.Покупатели.ТекущиеДанные = Неопределено Тогда
		    КлючСтрокиДоИзменения = 0;
        Иначе
		    КлючСтрокиДоИзменения = Элементы.Покупатели.ТекущиеДанные.КлючСтроки;
        КонецЕсли; 
    КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Элементы.Услуги.ТекущиеДанные <> Неопределено Тогда
		
		ОбновитьСуммыПоСтрокеПокупателя(
			КлючСтрокиДоИзменения, Элементы.Услуги.ТекущиеДанные.Сумма, Элементы.Услуги.ТекущиеДанные.СуммаНДС);
			
	ИначеЕсли Элементы.Покупатели.ТекущиеДанные <> Неопределено Тогда
			
		ОбновитьСуммыПоСтрокеПокупателя(
			Элементы.Покупатели.ТекущиеДанные.КлючСтроки, 0, 0);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияСтрокиТоваровУслуг(
		Элементы.Услуги.ТекущиеДанные, Элементы.Покупатели.ТекущиеДанные, НоваяСтрока, Копирование);
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры
	
&НаКлиенте
Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьСуммыПоСтрокеПокупателя(
			Элементы.Услуги.ТекущиеДанные.КлючСтроки, -Элементы.Услуги.ТекущиеДанные.Сумма, -Элементы.Услуги.ТекущиеДанные.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СуммаПоСтрокеДоИзменения    = Элементы.Услуги.ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзменения = Элементы.Услуги.ТекущиеДанные.СуммаНДС;
	КлючСтрокиДоИзменения		= Элементы.Услуги.ТекущиеДанные.КлючСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	ОбновитьСуммыПоСтрокеПокупателя(КлючСтрокиДоИзменения, 0, 0);
	ДанныеПокупателиУстановитьОтборСтрок();
	
	СуммаПоСтрокеДоИзменения    = 0;
	СуммаНДСПоСтрокеДоИзменения = 0;
	КлючСтрокиДоИзменения		= 0;
	
	ЭтоУдалениеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаВознаграждения, СуммаНДСВознаграждения,
		|СчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения, СтавкаНДСВознаграждения,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Услуги.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Услуги.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Услуги.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Услуги.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Услуги", Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Услуги.ТекущиеДанные;
	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.СуммаВознаграждения, Объект.СуммаВключаетНДС,
	    УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	Если СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) Тогда
		
		СтрокаТаблицы.Субконто 	= ОсновнаяНоменклатурнаяГруппа;
	
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходовУслуги = ОтобразитьСубконтоСчетаДоходовУслуги ИЛИ НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыВозвраты

&НаКлиенте
Процедура ВозвратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанныеТовары = Элементы.Возвраты.ТекущиеДанные;
		ТекДанныеТовары.КлючСтроки = Новый УникальныйИдентификатор();
		
		Если Копирование Тогда
			ТекДанныеТовары.ВыставленСФ = Ложь;
			ТекДанныеТовары.СчетФактура = Неопределено;
		КонецЕсли;
		
		ДанныеВозвратыУстановитьОтборСтрок();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПриАктивизацииСтроки(Элемент)
	ДанныеВозвратыУстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Возвраты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Возвраты.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхКлючейВозвраты.Добавить();
			НоваяСтрока.КлючСтроки = ТекДанные.КлючСтроки;
		КонецЕсли;
	КонецЦикла;

	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПокупательПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Возвраты);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПокупательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПокупательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыДатаСФПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Возвраты);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыВозвращенные

&НаКлиенте
Процедура ТоварыВозвращенныеПриИзменении(Элемент)
	
	Если ЭтоУдалениеСтрокиВозвраты = Истина Тогда
		ЭтоУдалениеСтрокиВозвраты = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если КлючСтрокиДоИзмененияВозвраты <> Неопределено Тогда
		
		ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		ОбновитьСуммыПоСтрокеВозвраты(
			КлючСтрокиДоИзмененияВозвраты, ДанныеСтроки.Сумма, ДанныеСтроки.СуммаНДС);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПередУдалением(Элемент, Отказ)
	
	СуммаПоСтрокеДоИзмененияВозвраты    = Элементы.ТоварыВозвращенные.ТекущиеДанные.Сумма;
	СуммаНДСПоСтрокеДоИзмененияВозвраты = Элементы.ТоварыВозвращенные.ТекущиеДанные.СуммаНДС;
	КлючСтрокиДоИзмененияВозвраты		= Элементы.ТоварыВозвращенные.ТекущиеДанные.КлючСтроки
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДанныеСтрокиВозвраты = Элементы.Возвраты.ТекущиеДанные;
	
	Если ДанныеСтрокиВозвраты = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в списке Возвраты!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Возвраты", "Объект", Отказ);
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеСтрокиВозвраты.Покупатель) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка",, "Покупатель", ДанныеСтрокиВозвраты.НомерСтроки, "Возвраты");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Возвраты", ДанныеСтрокиВозвраты.НомерСтроки, "Покупатель");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным, "Объект", Отказ);
	Иначе 
		СуммаПоСтрокеДоИзмененияВозвраты    = 0;
		СуммаНДСПоСтрокеДоИзмененияВозвраты = 0;
		КлючСтрокиДоИзмененияВозвраты		= ДанныеСтрокиВозвраты.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтрокиВозвраты = Элементы.Возвраты.ТекущиеДанные;
	ДанныеСтрокиТовары = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование Тогда
			ДанныеСтрокиТовары.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		КонецЕсли; 
		
		Если ДанныеСтрокиВозвраты <> Неопределено Тогда
			ДанныеСтрокиТовары.КлючСтроки = ДанныеСтрокиВозвраты.КлючСтроки;	
		КонецЕсли;
		
		ДанныеСтрокиТовары.Себестоимость = 0;
		
		СуммаПоСтрокеДоИзмененияВозвраты	= 0;
		СуммаНДСПоСтрокеДоИзмененияВозвраты = 0;
	Иначе
		СуммаПоСтрокеДоИзмененияВозвраты 	= ДанныеСтрокиТовары.Сумма;
		СуммаНДСПоСтрокеДоИзмененияВозвраты = ДанныеСтрокиТовары.СуммаНДС;
	КонецЕсли; 
	
	КлючСтрокиДоИзмененияВозвраты = ДанныеСтрокиТовары.КлючСтроки;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
		ОбновитьСуммыПоСтрокеВозвраты(
			ДанныеСтроки.КлючСтроки, 
			-ДанныеСтроки.Сумма, 
			-ДанныеСтроки.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеПослеУдаления(Элемент)
	
	ОбновитьСуммыПоСтрокеВозвраты(КлючСтрокиДоИзмененияВозвраты, 0, 0);
	ДанныеВозвратыУстановитьОтборСтрок();
	
	СуммаПоСтрокеДоИзмененияВозвраты    = 0;
	СуммаНДСПоСтрокеДоИзмененияВозвраты = 0;
	КлючСтрокиДоИзмененияВозвраты		= 0;
	
	ЭтоУдалениеСтрокиВозвраты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СуммаВознаграждения, СуммаНДСВознаграждения,
		|СчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов,
		|НомерГТД, СтранаПроисхождения,СпособУчетаНДС, ОтражениеВУСН,
		|СчетДоходовВедетсяУчетПоНоменклатурнымГруппам");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения, СтавкаНДСВознаграждения,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|Реализация, ПрименяютсяСтавки4и2, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	ТоварыВозвращенныеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеКоличествоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСуммаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеЦенаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "ТоварыВозвращенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСтавкаНДСПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "ТоварыВозвращенные", Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ТоварыВозвращенные.ТекущиеДанные;
	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозвращенныеСчетДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы	= Элементы.ТоварыВозвращенные.ТекущиеДанные;
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
	Если (НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам)
		И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(СтрокаТаблицы.СчетДоходов) Тогда
		
		СтрокаТаблицы.Субконто 	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
		
	ИначеЕсли СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) Тогда
		
		СтрокаТаблицы.Субконто 	= ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные = ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные ИЛИ НЕ СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

&НаКлиенте
Процедура ДенежныеСредстваСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ДенежныеСредства.ТекущиеДанные;
	ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ДенежныеСредства.ТекущиеДанные;
	ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПокупательПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.ДенежныеСредства);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПокупательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПокупательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваДатаСобытияПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.ДенежныеСредства);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьТоварыИзРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор! Добавление невозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьТоварыИзРеализацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыИзРеализацииЗавершение(РезультатЗакрытия, Дополнительныепараметры) Экспорт
	
	Результат = РезультатЗакрытия;
	
	МаксимальныйКлючСтроки = ?(Объект.Покупатели.Количество() = 1, ПолучитьНовыйКлючСтроки() + 1, ПолучитьНовыйКлючСтроки());
	ЗаполнитьПоРеализации(Результат, "Добавить", МаксимальныйКлючСтроки);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор! Заполнение невозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ОткрытьФормуВыбораРеализации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализацииЗавершение(РезультатЗакрытия, Дополнительныепараметры) Экспорт
	
	Результат = РезультатЗакрытия;
	
	ЗаполнитьПоРеализации(Результат, "Заполнить");
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	Отказ = Ложь;
	ДанныеСтрокиПокупателя = Элементы.Покупатели.ТекущиеДанные;
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(ДанныеСтрокиПокупателя, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКлючСтроки = ДанныеСтрокиПокупателя.КлючСтроки;
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	Отказ = Ложь;
	ДанныеСтрокиПокупателя = Элементы.Покупатели.ТекущиеДанные;
	
	ПередНачаломДобавленияСтрокиТоваровУслуг(ДанныеСтрокиПокупателя, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКлючСтроки = Элементы.Покупатели.ТекущиеДанные.КлючСтроки;
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвраты(Команда)
	ТекстВопроса = НСтр("ru = 'Заполнить по документу реализации?'");
	
	Оповещение = Новый ОписаниеОповещения("ВозвратыСделкаОбработкаВыбораЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыСделкаОбработкаВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
	
		ДанныеВозвраты = Элементы.Возвраты.ТекущиеДанные;
		Если ДанныеВозвраты <> Неопределено Тогда
			
			ЗаполнитьПоДокументу(ДанныеВозвраты.Сделка, ДанныеВозвраты.Покупатель, ДанныеВозвраты.КлючСтроки);
			СформироватьНадписьЦеныИВалюта(ЭтаФорма);
			
		КонецЕсли;
			
	КонецЕсли; 
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Служебные процедуры и функции БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГлавная Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("КомиссияТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКомиссияТовары Тогда

		Форма.УстановитьУсловноеОформлениеКомиссияТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ВозвратыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВозвраты Тогда

		Форма.УстановитьУсловноеОформлениеВозвраты();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ДенежныеСредстваПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДенежныеСредства Тогда

		Форма.УстановитьУсловноеОформлениеДенежныеСредства();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьДокументОприходования", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВозвращенныеСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Возвраты.Сделка", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты не отображаются, если документ выставлен неплательщиком НДС.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПокупателиТоварыНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПокупателиТоварыВыставленСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПокупателиТоварыДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПокупателиТоварыСчетФактура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыВыставленСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыНомерСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыСчетФактура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТовары", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовУслуги", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	УстановитьУсловноеОформлениеВидимостьТНВЭД();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимостьТНВЭД()
	
	// ТоварыКодТНВЭД Видимость = ЛОЖЬ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"Объект.Товары.КлючСтроки", ВидСравненияКомпоновкиДанных.НеВСписке, КлючиСтрокРеализацийВЕАЭС);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыКодТНВЭД Видимость = ИСТИНА
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.КлючСтроки", ВидСравненияКомпоновкиДанных.ВСписке, КлючиСтрокРеализацийВЕАЭС);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// СчетУчетаЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогВсегоВознаграждение", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПроцентКомиссионногоВознаграждения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроцентКомиссионногоВознаграждения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СпособРасчетаКомиссионногоВознаграждения", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СпособРасчетаКомиссионногоВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеКомиссияТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("КомиссияТоварыПроинициализировано", Истина);


	// ТоварыСчетУчетаНДСПоРеализации, ТоварыСчетДоходов, ТоварыСчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасходов");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	СписокЗначений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетУчета", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПокупателиТоварыДатаСФ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПокупателиТоварыДатаСФ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Покупатели.ВыставленСФ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто", ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТовары", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовУслуги", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетРасходовПоОказаниюУслуг", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	//ТоварыСебестоимость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьДокументОприходования", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	// ТоварыКодТНВЭД
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.КлючСтроки", ВидСравненияКомпоновкиДанных.ВСписке, КлючиСтрокРеализацийВЕАЭС);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВозвраты() Экспорт

	НастройкиУсловногоОформления.Вставить("ВозвратыПроинициализировано", Истина);


	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВозвращенные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыВозвращенныеСубконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСубконто");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.Субконто", ВидСравненияКомпоновкиДанных.Заполнено,);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыВозвращенные.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользоватьОднуНоменклатурнуюГруппу", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыВозвращенныеСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВозвращенныеСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РаздельныйУчетНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыВозвращенные.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ВозвратыДатаСФ, ВозвратыНомерСФ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыДатаСФ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВозвратыНомерСФ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Возвраты.ВыставленСФ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДенежныеСредства() Экспорт

	НастройкиУсловногоОформления.Вставить("ДенежныеСредстваПроинициализировано", Истина);


	// ДенежныеСредстваСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДенежныеСредстваСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	// Вознаграждение
	Элементы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Доступность            = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения)
		И Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
	Элементы.СпособУчетаНДС.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	// Счета-фактуры на реализованные товары и услуги.
	Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Объект.Дата >= '20150101';
	
	// Счет-Фактура на вознаграждение.
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Ложь,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	// Расчеты
	Элементы.ПорядокУчетаРасчетов.Доступность 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Гиперссылка 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если Объект.ДокументБезНДС Тогда
		Элементы.ТоварыИтогСуммаНДС.Видимость           = Ложь;
		Элементы.ИтогНДСВозвраты.Видимость              = Ложь;
		//Группа реализация
		Элементы.НадписьСчетФактураРеализация.Видимость = Ложь;
		Элементы.ВыписыватьСчетаФактурыСводно.Видимость = Ложь;
		//Группа возвраты
		Элементы.НадписьСчетФактураВозвраты.Видимость   = Ложь;
	Иначе
		Элементы.ТоварыИтогСуммаНДС.Видимость           = Истина;
		Элементы.ИтогНДСВозвраты.Видимость              = Истина;
		//Группа реализация
		Элементы.НадписьСчетФактураРеализация.Видимость = Истина;
		Элементы.ВыписыватьСчетаФактурыСводно.Видимость = Истина;
		//Группа возвраты
		Элементы.НадписьСчетФактураВозвраты.Видимость   = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);

	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.СтавкаНДСВознаграждения.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетФактуру(Форма)
	
	Объект = Форма.Объект;
	
	// Надпись про счета-фактуры
	ВыписаноСчетовФактурСумма = Форма.ИтогВсегоПоСФВыставленным;
	ВыписаноСчетовФактурНДС   = Форма.ИтогВсегоНДСПоСФВыставленным;
	
	МассивДат = Новый Массив;
	Для каждого ДанныеСтроки Из Объект.Покупатели Цикл
		Если ДанныеСтроки.ВыставленСФ
			И (НЕ Объект.ВыписыватьСчетаФактурыСводно ИЛИ МассивДат.Найти(ДанныеСтроки.ДатаСФ) = Неопределено) Тогда
			МассивДат.Добавить(ДанныеСтроки.ДатаСФ);
		КонецЕсли;
	КонецЦикла;
	КолСФ = МассивДат.Количество();
	Форма.НадписьСчетФактураРеализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выписано счетов-фактур - %1, на сумму %2 %3, в том числе НДС %4 %5'"),
		КолСФ,
		Формат(ВыписаноСчетовФактурСумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Форма.ВалютаРасчетов),
		Формат(ВыписаноСчетовФактурНДС,   "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Форма.ВалютаРасчетов));
		
	ВыписаноСчетовФактурСумма = Форма.ИтогВсегоПоСФПолученным;
	ВыписаноСчетовФактурНДС   = Форма.ИтогВсегоНДСПоСФПолученным;
		
	НайденныеСтроки = Объект.Возвраты.НайтиСтроки(Новый Структура("ВыставленСФ", Истина));
	КолСФ = НайденныеСтроки.Количество();
	Форма.НадписьСчетФактурыВозвраты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Зарегистрировано счетов-фактур - %1, на сумму %2 %3, в том числе НДС %4 %5'"),
		КолСФ,
		Формат(ВыписаноСчетовФактурСумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Форма.ВалютаРасчетов),
		Формат(ВыписаноСчетовФактурНДС,   "ЧЦ=15; ЧДЦ=2; ЧН=0"), СокрП(Форма.ВалютаРасчетов));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(Форма, РеквизитыСФ = Неопределено)
	
	СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура,
		СтруктураОтбора,
		"СчетФактура");
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСчетаВзаиморасчетов()

	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(Неопределено, Истина, Объект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВознаграждениеВСтроке(СтрокаТаблицы, ИмяТабличнойЧасти, Объект, ПрименяютсяСтавки4и2)

	Если Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		СтрокаТаблицы.СуммаВознаграждения = 0;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТаблицы.СуммаВознаграждения = Окр(Объект.ПроцентКомиссионногоВознаграждения * СтрокаТаблицы.Сумма / 100, 2);
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		СуммаПередачи = ?(СтрокаТаблицы.Свойство("СуммаПередачи"), СтрокаТаблицы.СуммаПередачи, 0);
		СтрокаТаблицы.СуммаВознаграждения = Окр(Объект.ПроцентКомиссионногоВознаграждения 
			* (СтрокаТаблицы.Сумма - СуммаПередачи) / 100, 2);
	Иначе
		СтрокаТаблицы.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТаблицы.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));

КонецПроцедуры

&НаСервере
Процедура ПересчитатьВознаграждениеВТабличнойЧасти(ИмяТабличнойЧасти = "")

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда

		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			РассчитатьВознаграждениеВСтроке(СтрокаДокумента, "Товары", Объект, ПрименяютсяСтавки4и2);
		КонецЦикла;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда

		Для Каждого СтрокаДокумента Из Объект.Услуги Цикл
			РассчитатьВознаграждениеВСтроке(СтрокаДокумента, "Услуги", Объект, ПрименяютсяСтавки4и2);
		КонецЦикла;

	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;		
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 0);
	КонецЦикла;
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	Для Каждого Строка Из Объект.ТоварыВозвращенные Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	
    ЗаполнитьДобавленныеКолонкиТаблиц("Покупатели");
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЗначениеПустогоКоличества)

	Вознаграждение   = Строка.СуммаВознаграждения;
	Если Строка.Свойство("ЦенаПередачи") Тогда
		ЦенаПередачи = Строка.ЦенаПередачи;
	Иначе
		ЦенаПередачи = 0;
	КонецЕсли;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента,
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Вознаграждение = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Вознаграждение, ВалютаПередИзменением,
				Объект.ВалютаДокумента, СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если Объект.ДокументБезНДС Тогда 
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;	
	
	Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Строка.Сумма, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.СуммаВознаграждения = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Вознаграждение, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));
	Строка.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Строка.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения, ПрименяютсяСтавки4и2));

КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",       Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",             Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",     	  Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",               Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",           Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",         Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость",  Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр",        ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И ВалютаРасчетов <> ВалютаРегламентированногоУчета)
		ИЛИ Не РаздельныйУчетНДСНаСчете19 Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Модифицированность      = Истина;
		
		ВалютаДоИзменения	 = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	
		Объект.ТипЦен           = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента  = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения, 
				КратностьДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	Если ДанныеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если в результате выбора пришло только значение,
	// то переложим его в структуру.
	Если ТипЗнч(ДанныеВыбора) = Тип("СправочникСсылка.НомераГТД") Тогда
		ДанныеВыбора = Новый Структура("НомерГТД", ДанныеВыбора);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент          = СведенияОНоменклатуре.Коэффициент;
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена         = СведенияОНоменклатуре.Цена;
			СтрокаТабличнойЧасти.ЦенаПередачи = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.НомерГТД             = СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения  = СведенияОНоменклатуре.СтранаПроисхождения;
	
	СтрокаТабличнойЧасти.СуммаПередачи        = Окр(СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество, 2);
	
	// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
	// Дополнительно устанавливаем ставку 0%.
	Если ДанныеОбъекта.РеализацияВЕАЭС
		И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 Тогда
		СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, "Товары", ДанныеОбъекта, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, "Услуги", ДанныеОбъекта, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыВозвращенныеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, "ТоварыВозвращенные", ДанныеОбъекта, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ТоварыВозвращенные", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ЗначениеПустогоКоличества = ?(ИмяТабличнойЧасти = "Услуги", 1, 0);
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ДанныеСтроки, Объект.СуммаВключаетНДС, ЗначениеПустогоКоличества);
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ДанныеСтроки.СуммаПередачи = ДанныеСтроки.Ценапередачи * ДанныеСтроки.Количество;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, ИмяТабличнойЧасти, Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);

	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, ИмяТабличнойЧасти, Объект, ПрименяютсяСтавки4и2);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРеализации(Реализация, СпособЗаполнения = "Заполнить", КлючСтроки = Неопределено)

	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.Покупатели.Очистить();
		Объект.Товары.Очистить();
		МаксимальныйКлючСтроки = 0;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТовары(Реализация, КлючСтроки);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "")

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ТоварыВозвращенные" Тогда
		Для Каждого СтрокаТаблицы Из Объект.ТоварыВозвращенные Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Покупатели" Тогда
		
		СуммыПоКлючам = Объект.Товары.Выгрузить(,"КлючСтроки,Сумма,СуммаНДС");
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			НоваяСтрока = СуммыПоКлючам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		СуммыПоКлючам.Свернуть("КлючСтроки", "Сумма,СуммаНДС");
		
		Если НЕ Объект.СуммаВключаетНДС Тогда
			Для каждого СтрокаТаблицы Из СуммыПоКлючам Цикл
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		СуммыПоКлючам.Колонки.Сумма.Имя = "Всего";
		СуммыПоКлючам.Колонки.СуммаНДС.Имя = "НДС";
		СуммыПоКлючам.Индексы.Добавить("КлючСтроки");
		
		Для каждого СтрокаТаблицы Из Объект.Покупатели Цикл
			СуммыПоКлючу = СуммыПоКлючам.Найти(СтрокаТаблицы.КлючСтроки, "КлючСтроки");
			Если СуммыПоКлючу <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СуммыПоКлючу);
			КонецЕсли;
			СтрокаТаблицы.ВсегоПоСФ = ?(СтрокаТаблицы.ВыставленСФ, СтрокаТаблицы.Всего, 0);
			СтрокаТаблицы.НДСПоСФ   = ?(СтрокаТаблицы.ВыставленСФ, СтрокаТаблицы.НДС, 0);
		КонецЦикла;
		
	КонецЕсли;

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Возвраты" Тогда
		
		СуммыПоКлючам = Объект.ТоварыВозвращенные.Выгрузить(,"КлючСтроки,Сумма,СуммаНДС");
		СуммыПоКлючам.Свернуть("КлючСтроки", "Сумма,СуммаНДС");
		
		Если НЕ Объект.СуммаВключаетНДС Тогда
			Для каждого СтрокаТаблицы Из СуммыПоКлючам Цикл
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		СуммыПоКлючам.Колонки.Сумма.Имя = "Всего";
		СуммыПоКлючам.Колонки.СуммаНДС.Имя = "НДС";
		СуммыПоКлючам.Индексы.Добавить("КлючСтроки");
		
		Для каждого СтрокаТаблицы Из Объект.Возвраты Цикл
			СуммыПоКлючу = СуммыПоКлючам.Найти(СтрокаТаблицы.КлючСтроки, "КлючСтроки");
			Если СуммыПоКлючу <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СуммыПоКлючу);
			КонецЕсли;
			СтрокаТаблицы.ВсегоПоСФ = ?(СтрокаТаблицы.ВыставленСФ, СтрокаТаблицы.Всего, 0);
			СтрокаТаблицы.НДСПоСФ   = ?(СтрокаТаблицы.ВыставленСФ, СтрокаТаблицы.НДС, 0);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы)

	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы)

	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТоварыВозвращенные(СтрокаТаблицы)
	
	СтрокаТаблицы.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(СтрокаТаблицы.СчетДоходов);
		
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));

	Возврат МассивВидовДоговоров;

КонецФункции

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	Возврат (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ТоварыВозвращенные.Количество() > 0);

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Услуги, Объект.Дата, ТекущаяДатаДокумента);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
		Объект.НДСВключенВСтоимость = Ложь;
	Иначе
		Объект.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если НЕ (ЗначениеЗаполнено(Объект.ПодразделениеЗатрат)
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Объект.ПодразделениеЗатрат, Объект.Организация)) Тогда
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
		Объект.НДСВключенВСтоимость = Ложь;
	Иначе
		Объект.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ТоварыВозвращенные" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ТоварыВозвращенные");
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ПересчитатьВознаграждение = Ложь;
	
	РеквизитыДоговорКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ПроцентКомиссионногоВознаграждения,СпособРасчетаКомиссионногоВознаграждения,
		|ВалютаВзаиморасчетов,ТипЦен,РасчетыВУсловныхЕдиницах,НДСПоСтавкам4и2");
		
	СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);
	ПрименяютсяСтавки4и2 = РеквизитыДоговорКонтрагента.НДСПоСтавкам4и2;
	
	Если Объект.ПроцентКомиссионногоВознаграждения <> РеквизитыДоговорКонтрагента.ПроцентКомиссионногоВознаграждения
		ИЛИ Объект.СпособРасчетаКомиссионногоВознаграждения <> РеквизитыДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения Тогда
		ПересчитатьВознаграждение  = Истина;
		Объект.ПроцентКомиссионногоВознаграждения       = РеквизитыДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Объект.СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
		КонецЕсли;
	КонецЕсли;
	
	СтавкаНДСИзменилась = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС 
		   И Объект.СтавкаНДСВознаграждения <> Перечисления.СтавкиНДС.БезНДС Тогда
			Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС;
			СтавкаНДСИзменилась = Истина;
		ИначеЕсли СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры
			    И Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС Тогда
			Объект.СтавкаНДСВознаграждения = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата);
			СтавкаНДСИзменилась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтавкаНДСИзменилась Тогда
		СтавкаНДСВознагражденияПриИзмененииНаСервере();
	КонецЕсли;
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения   	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 	 = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	Объект.ВалютаДокумента 			= РеквизитыДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов 	= СтруктураКурсаДокумента.Кратность;
	
	Если ЗначениеЗаполнено(РеквизитыДоговорКонтрагента.ТипЦен) Тогда
		РеквизитыТипЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыДоговорКонтрагента.ТипЦен, 
			"ЦенаВключаетНДС");
		
		Объект.ТипЦен           = РеквизитыДоговорКонтрагента.ТипЦен;
		Объект.СуммаВключаетНДС = РеквизитыТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	ТребуетсяСчетФактура = Истина;

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	ПересчитатьВознаграждение = ПересчитатьВознаграждение ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;

	ЗаполнитьСчетаВзаиморасчетов();

	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Объект.ЗачетАвансов.Очистить();
	УстановитьПорядокУчетаРасчетов();
	
	Если ПересчитатьВознаграждение Тогда 
		ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
		ПересчитатьВознаграждениеВТабличнойЧасти("Услуги");
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	ПересчитатьВознаграждениеВТабличнойЧасти("Услуги");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	ПересчитатьВознаграждениеВТабличнойЧасти("Услуги");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	ПересчитатьВознаграждениеВТабличнойЧасти("Услуги");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("Реализация"				, Истина);
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"			, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ИмяТаблицы = "Товары" Тогда
		ВидПодбора = "Комиссионер";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогНДСОтгрузки   = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогСуммаОтгрузки = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма") 
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогНДСОтгрузки);
		
	Форма.ИтогНДСВозвраты   = Объект.ТоварыВозвращенные.Итог("СуммаНДС");
	Форма.ИтогСуммаВозвраты = Объект.ТоварыВозвращенные.Итог("Сумма")
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогНДСВозвраты);
	
	Форма.ИтогВсегоНДСВознаграждения = Объект.Товары.Итог("СуммаНДСВознаграждения") 
		+ Объект.Услуги.Итог("СуммаНДСВознаграждения") - Объект.ТоварыВозвращенные.Итог("СуммаНДСВознаграждения");
	Форма.ИтогВсегоВознаграждение = Объект.Товары.Итог("СуммаВознаграждения") 
		+ Объект.Услуги.Итог("СуммаВознаграждения") - Объект.ТоварыВозвращенные.Итог("СуммаВознаграждения") 
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогВсегоНДСВознаграждения);
	
	Форма.ИтогВсегоПоСФВыставленным    = Объект.Покупатели.Итог("ВсегоПоСФ");
	Форма.ИтогВсегоНДСПоСФВыставленным = Объект.Покупатели.Итог("НДСПоСФ");
	
	Форма.ИтогВсегоПоСФПолученным    = Объект.Возвраты.Итог("ВсегоПоСФ");
	Форма.ИтогВсегоНДСПоСФПолученным = Объект.Возвраты.Итог("НДСПоСФ");
	
	ЗаполнитьТекстПроСчетФактуру(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация, ДокументБезНДС, ТипЦен");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	ЗначениеПустогоКоличества = ?(ИмяТаблицы = "Услуги", 1, 0);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена, КлючСтроки", СтрокаТовара.Номенклатура, СтрокаТовара.Цена, ТекущийКлючСтроки);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, ИмяТаблицы, Объект, ПрименяютсяСтавки4и2);
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			СтрокаТабличнойЧасти.КлючСтроки = ЭтаФорма.ТекущийКлючСтроки;
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент         = СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
				ОтобразитьСубконтоСчетаДоходовТовары = ОтобразитьСубконтоСчетаДоходовТовары ИЛИ НЕ СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
				
				// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
				// Дополнительно устанавливаем ставку 0%.
				Если ВедетсяУчетНДСПоФЗ150 
					И КлючиСтрокРеализацийВЕАЭС.НайтиПоЗначению(ТекущийКлючСтроки) <> Неопределено Тогда 
					СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
				КонецЕсли;
				
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СведенияОНоменклатуре.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				Иначе
					СтрокаТабличнойЧасти.ЦенаПередачи = СведенияОНоменклатуре.Цена;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СуммаПередачи = Окр(СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество, 2);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
				ОтобразитьСубконтоСчетаДоходовУслуги = ОтобразитьСубконтоСчетаДоходовУслуги ИЛИ НЕ СтрокаТабличнойЧасти.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам;
				
			КонецЕсли;
			
			Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ (ЗначениеПустогоКоличества = 1 И СтрокаТабличнойЧасти.Сумма = 0) Тогда
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, ИмяТаблицы, Объект, ПрименяютсяСтавки4и2);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
	ЗаполнитьДобавленныеКолонкиТаблиц("Покупатели");
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	Если ИспользоватьОднуНоменклатурнуюГруппу Тогда
		ОтобразитьСубконтоСчетаДоходовТовары = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Товары);
		ОтобразитьСубконтоСчетаДоходовУслуги = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.Услуги);
		ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные = СчетаУчетаВДокументах.ОтобразитьСубконтоСчетаДоходов(Объект.ТоварыВозвращенные);
	Иначе
		ОтобразитьСубконтоСчетаДоходовТовары = Истина;
		ОтобразитьСубконтоСчетаДоходовУслуги = Истина;
		ОтобразитьСубконтоСчетаДоходовТоварыВозвращенные = Истина;
	КонецЕсли;
	
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора 	 = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);
		ВалютаРасчетов    	 = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
		ТребуетсяСчетФактура = Истина;
	Иначе
		ВалютаРасчетов    	 = ВалютаРегламентированногоУчета;
		ПрименяютсяСтавки4и2 = Ложь;
		ТребуетсяСчетФактура = Ложь;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	// Прочие подписи и реквизиты:
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));

	МаксимальныйКлючСтроки = Документы.ОтчетКомиссионераОПродажах.ПолучитьМаксимальныйКлючСтроки(Объект.Покупатели);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПорядокУчетаРасчетов();
	
	ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма);
	
	// Настраиваем внешний вид формы:
	УправлениеФормой(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		Элементы.ВыписыватьСчетаФактурыСводно.Заголовок = НСтр("ru = 'Выписывать счета-фактуры сводно (не поддерживается ЭДО)'");		
		Элементы.ВыписыватьСчетаФактурыСводно.Подсказка = НСтр("ru = 'Подсистема электронного документооборота не поддерживает обмен 
			|сводными счетами-фактурами. ФНС не утвержден соответствующий формат обмена'");		
		Элементы.ВыписыватьСчетаФактурыСводно.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПоказыватьДокументОприходования = 
		УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) <> Перечисления.СпособыОценки.ПоСредней;
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19 		 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВедетсяУчетНДСПоФЗ150 = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	
	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);

	// Используется в условном оформлении
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Объект.Дата, Объект.Организация);
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, НДСВключенВСтоимость, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		?(Объект.ДокументБезНДС, Ложь, Объект.НДСВключенВСтоимость),
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНаВознаграждениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовыйКлючСтроки()
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.
	Если Объект.Покупатели.Количество() > 1 Тогда
		МаксимальныйКлючСтроки = МаксимальныйКлючСтроки + 1;
	КонецЕсли;

	Возврат МаксимальныйКлючСтроки;
	
КонецФункции

&НаКлиенте
Процедура ДанныеПокупателиУстановитьОтборСтрок()
	
	ТекДанныеПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекДанныеПокупатели <> Неопределено Тогда
		КлючСтрокиТовары = Объект.Покупатели.Индекс(ТекДанныеПокупатели) + 1;
		Элементы.Покупатели.ТекущаяСтрока = ТекДанныеПокупатели.ПолучитьИдентификатор();
		КлючСтроки = ТекДанныеПокупатели.КлючСтроки;
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
		Элементы.Услуги.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
	Иначе
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", 0);
		Элементы.Услуги.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", 0);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВозвратыУстановитьОтборСтрок()
	
	ТекДанныеВозвраты = Элементы.Возвраты.ТекущиеДанные;
	Если ТекДанныеВозвраты <> Неопределено Тогда
		КлючСтроки = ТекДанныеВозвраты.КлючСтроки;
		Элементы.ТоварыВозвращенные.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
	Иначе
		Элементы.ТоварыВозвращенные.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", 0);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ДатаСчетаФактурыПолученного = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуруНаВознаграждение(Команда)
	
	СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма, , , СтруктураОтбора);
	
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСтрокиТоваровУслуг(ДанныеСтрокиПокупателя, Отказ)
	
	Если ДанныеСтрокиПокупателя = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в списке Покупатели!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Покупатели", "Объект", Отказ);
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеСтрокиПокупателя.Покупатель) Тогда
		Отказ = Истина;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка",, "Покупатель", ДанныеСтрокиПокупателя.НомерСтроки, "Покупатели");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Покупатели", ДанныеСтрокиПокупателя.НомерСтроки, "Покупатель");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным, "Объект", Отказ);
    Иначе
		СуммаПоСтрокеДоИзменения    = 0;
		СуммаНДСПоСтрокеДоИзменения = 0;
        КлючСтрокиДоИзменения = ДанныеСтрокиПокупателя.КлючСтроки; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияСтрокиТоваровУслуг(ДанныеСтроки, ДанныеСтрокиПокупателя, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ДанныеСтроки.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	КонецЕсли;

	Если НоваяСтрока И ДанныеСтрокиПокупателя <> Неопределено Тогда
		ДанныеСтроки.КлючСтроки = ДанныеСтрокиПокупателя.КлючСтроки;	
	КонецЕсли;
	Если НоваяСтрока Тогда
		СуммаПоСтрокеДоИзменения    = 0;
		СуммаНДСПоСтрокеДоИзменения = 0;
		
		ЗаполнитьЗначенияСвойств(
			ДанныеСтроки, 
			Новый Структура("Себестоимость, ДокументОприходования", 0, Неопределено));
	Иначе
		СуммаПоСтрокеДоИзменения    = ДанныеСтроки.Сумма;
		СуммаНДСПоСтрокеДоИзменения = ДанныеСтроки.СуммаНДС;
	КонецЕсли;
	
	КлючСтрокиДоИзменения = ДанныеСтроки.КлючСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыПоСтрокеПокупателя(КлючСтроки, НоваяСуммаПоСтроке, НоваяСуммаНДСПоСтроке)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	
	МассивСтрок = Объект.Покупатели.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиПокупателя = МассивСтрок[0];
	
	РазницаСумм = НоваяСуммаПоСтроке - СуммаПоСтрокеДоИзменения;
	РазницаНДС  = НоваяСуммаНДСПоСтроке - СуммаНДСПоСтрокеДоИзменения;
    
    СуммаПоСтрокеДоИзменения    = НоваяСуммаПоСтроке; 
    СуммаНДСПоСтрокеДоИзменения = НоваяСуммаНДСПоСтроке;
    
	ДанныеСтрокиПокупателя.Всего = ДанныеСтрокиПокупателя.Всего + РазницаСумм + ?(Объект.СуммаВключаетНДС, 0, РазницаНДС);
	ДанныеСтрокиПокупателя.НДС   = ДанныеСтрокиПокупателя.НДС + РазницаНДС;
	ДанныеСтрокиПокупателя.ВсегоПоСФ = ?(ДанныеСтрокиПокупателя.ВыставленСФ, ДанныеСтрокиПокупателя.Всего, 0);
	ДанныеСтрокиПокупателя.НДСПоСФ   = ?(ДанныеСтрокиПокупателя.ВыставленСФ, ДанныеСтрокиПокупателя.НДС, 0);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыПоСтрокеВозвраты(КлючСтроки, НоваяСуммаПоСтроке, НоваяСуммаНДСПоСтроке)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	
	МассивСтрок = Объект.Возвраты.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиПокупателя = МассивСтрок[0];
	
	РазницаСумм = НоваяСуммаПоСтроке - СуммаПоСтрокеДоИзмененияВозвраты;
	РазницаНДС  = НоваяСуммаНДСПоСтроке - СуммаНДСПоСтрокеДоИзмененияВозвраты;
	
	СуммаПоСтрокеДоИзмененияВозвраты    = НоваяСуммаПоСтроке; 
	СуммаНДСПоСтрокеДоИзмененияВозвраты = НоваяСуммаНДСПоСтроке;
	
	ДанныеСтрокиПокупателя.Всего = ДанныеСтрокиПокупателя.Всего + РазницаСумм + ?(Объект.СуммаВключаетНДС, 0, РазницаНДС);
	ДанныеСтрокиПокупателя.НДС   = ДанныеСтрокиПокупателя.НДС + РазницаНДС;
	ДанныеСтрокиПокупателя.ВсегоПоСФ = ?(ДанныеСтрокиПокупателя.ВыставленСФ, ДанныеСтрокиПокупателя.Всего, 0);
	ДанныеСтрокиПокупателя.НДСПоСФ   = ?(ДанныеСтрокиПокупателя.ВыставленСФ, ДанныеСтрокиПокупателя.НДС, 0);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
	
	ВидыУдаляемыхСтрок.Вставить("Товары", ТаблицаУдаленныхКлючей);
	ВидыУдаляемыхСтрок.Вставить("Услуги", ТаблицаУдаленныхКлючей);
	ВидыУдаляемыхСтрок.Вставить("ТоварыВозвращенные", ТаблицаУдаленныхКлючейВозвраты);
	
	Для каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение;
		Для каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
			КлючПоиска = Новый Структура("КлючСтроки", СтрокаКлюча.КлючСтроки);
			МассивСтрокТовары = Объект[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				Объект[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораРеализации()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоРеализацииЗавершение", ЭтотОбъект);	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораРеализации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(Сделка, Покупатель, КлючСтроки)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоДокументу(Сделка, Покупатель, КлючСтроки);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура УстановитьПорядокУчетаРасчетов()

	ПорядокУчетаРасчетов = СформироватьНадписьПорядокУчетаРасчетов();
		
	Если СтрНайти(ПорядокУчетаРасчетов, "<...>") = 0 Тогда
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Истина;
		СчетаРасчетовЗаполнены = Истина;
	Иначе
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Ложь;
		СчетаРасчетовЗаполнены = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьНадписьПорядокУчетаРасчетов()

	ТекстСчетРасчетов 	= "";
	ТекстСчетАвансов 	= "";
	ТекстЗачетАвансов 	= "";
	ТекстСчетРасчетовПоВознаграждению = "";
	ТекстСчетАвансовПоВознаграждению  = "";

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
		ТекстСчетРасчетов = СвойствоСчета.Код;
	Иначе
		ТекстСчетРасчетов = "<...>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамПолученным) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовПоАвансамПолученным);
		ТекстСчетАвансов = СвойствоСчета.Код;
	Иначе
		ТекстСчетАвансов = "<...>";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги);
		ТекстСчетРасчетовПоВознаграждению = СвойствоСчета.Код;
	Иначе
		ТекстСчетРасчетовПоВознаграждению = "<...>";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансамВыданным) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовПоАвансамВыданным);
		ТекстСчетАвансовПоВознаграждению = СвойствоСчета.Код;
	Иначе
		ТекстСчетАвансовПоВознаграждению = "<...>";
	КонецЕсли;

	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'за товары %1, %2, по вознаграждению %3, %4'"), 
		ТекстСчетРасчетов, ТекстСчетАвансов,
		ТекстСчетРасчетовПоВознаграждению, ТекстСчетАвансовПоВознаграждению);
	
	Возврат ТекстНадписи;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаЗачетАвансов);
	
	Объект.ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);
	Объект.СпособЗачетаАвансов 						= ВыбранноеЗначение.СпособЗачетаАвансов;
	Объект.СчетУчетаРасчетовСКонтрагентом 			= ВыбранноеЗначение.СчетУчетаРасчетовСКонтрагентом;
	Объект.СчетУчетаРасчетовПоАвансамПолученным 	= ВыбранноеЗначение.СчетУчетаРасчетовПоАвансамПолученным;
	Объект.СчетУчетаРасчетовЗаПосредническиеУслуги 	= ВыбранноеЗначение.СчетУчетаРасчетовЗаПосредническиеУслуги;
	Объект.СчетУчетаРасчетовПоАвансамВыданным 		= ВыбранноеЗначение.СчетУчетаРасчетовПоАвансамВыданным;
	
	Модифицированность = Истина;

	УстановитьПорядокУчетаРасчетов();

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьКлючиСтрокРеализацийВЕАЭС(ПокупательКлючСтроки = Неопределено)
	
	Если ПокупательКлючСтроки = Неопределено Тогда 
		// Перезаполним всю таблицу ключей реализаций в ЕАЭС
		КлючиСтрокРеализацийВЕАЭС.Очистить();
		Если ВедетсяУчетНДСПоФЗ150 Тогда 
			КонтрагентыИзЕАЭС = УчетНДС.КонтрагентыРезидентыЕАЭС(Объект.Покупатели.Выгрузить().ВыгрузитьКолонку("Покупатель"));
			Для каждого СтрокаТаблицы Из Объект.Покупатели Цикл
				Если КонтрагентыИзЕАЭС.Найти(СтрокаТаблицы.Покупатель) <> Неопределено Тогда 
					КлючиСтрокРеализацийВЕАЭС.Добавить(СтрокаТаблицы.КлючСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Актуализируем таблицу ключей реализаций в ЕАЭС по покупателю
		ОтборПокупатель = Новый Структура("КлючСтроки", ПокупательКлючСтроки);
		СтрокиПокупатель = Объект.Покупатели.НайтиСтроки(ОтборПокупатель);
		Если СтрокиПокупатель.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиПокупатель[0].Покупатель, "СтранаРегистрации");
		РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
		
		Если РеализацияВЕАЭС Тогда 
			// Добавим КлючСтроки по реализации в ЕАЭС.
			Если КлючиСтрокРеализацийВЕАЭС.НайтиПоЗначению(ПокупательКлючСтроки) = Неопределено Тогда 
				КлючиСтрокРеализацийВЕАЭС.Добавить(ПокупательКлючСтроки);
			КонецЕсли;
		Иначе
			// Удалим КлючСтроки по реализации в ЕАЭС.
			СтрокаКУдалению = КлючиСтрокРеализацийВЕАЭС.НайтиПоЗначению(ПокупательКлючСтроки);
			Если СтрокаКУдалению <> Неопределено Тогда 
				КлючиСтрокРеализацийВЕАЭС.Удалить(СтрокаКУдалению);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформлениеВидимостьТНВЭД();
	
КонецПроцедуры

// ПодключаемыеОбработчики
&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоСчетУчетаЗатрат", "ПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетУчетаЗатрат");
		
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"), 
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.УслугиКомиссионеров"));
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

#КонецОбласти
