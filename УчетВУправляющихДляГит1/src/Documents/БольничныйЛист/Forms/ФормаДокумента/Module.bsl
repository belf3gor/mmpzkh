#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	Если ЭтоВебКлиент Тогда
		Элементы.ПричинаНетрудоспособностиТекст.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		Если Параметры.Свойство("Дата") И ЗначениеЗаполнено(Параметры.Дата) Тогда 
			Объект.Дата = Параметры.Дата;
		Иначе
			// Заполнение "пустого" документа.
			ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
				"Объект.Организация",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Если Объект.СтажЛет = 0 И Объект.СтажМесяцев = 0 Тогда
			Объект.СтажЛет = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
			Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		КонецЕсли;
		
		Если НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		ОбработатьИзменениеМесяцаНачисленияНаСервере();
		
		ЗаполнитьТекущиеДанныеСотрудника(Истина);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	Элементы.МесяцНачисленияСтрокой.Видимость = НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.ПериодРегистрации);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора.ВладелецФормы) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ВладелецФормы = ЭтотОбъект И ЗначениеЗаполнено(ВыбранноеЗначение) 
		И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		
	    Объект.ПервичныйБольничныйЛист = ВыбранноеЗначение;
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
		ЗаполнитьПоПервичномуБольничномуЛисту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ВведеныДанныеЛисткаНетрудоспособности" И Источник = ЭтаФорма Тогда
		ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ЗаписаноЗаявлениеСотрудникаНаВыплатуПособия" И Параметр.Основание = Объект.Ссылка Тогда
		ОбновитьСведенияОПрямыхВыплатах();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_БольничныйЛист", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ИмяПроцедурыПослеЗаписи") Тогда
		Обработчик = Новый ОписаниеОповещения(ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи, ЭтотОбъект, ПараметрыЗаписи);
		ПараметрыЗаписи.Удалить("ИмяПроцедурыПослеЗаписи");
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Элементы.МесяцНачисленияСтрокой, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодРегистрации = РезультатВыбора.НачалоПериода;
	
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПараметрыОтбора.Вставить("ДатаОкончания", НачалоДня(НачалоДня(Объект.ДатаНачала)-1));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПараметрыОтбора.Вставить("Сотрудник", Объект.Сотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
		ПараметрыОтбора.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	КонецЕсли;
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	ПараметрыОткрытияФормыВыбора.Вставить("РежимВыбораПервичногоБольничногоЛиста", Истина);
	
	Если ПараметрыОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ПервичныйБольничныйЛист", Объект.ПервичныйБольничныйЛист);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФНаНачалоСобытияПриИзменении(Элемент)
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоВремениПриИзменении(Элемент)
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыБезЛьготПриИзменении(Элемент)
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйПродолжениеПриИзменении(Элемент)
	
	Объект.ЯвляетсяПродолжениемБолезни = ПервичныйПродолжение;
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
	КонецЕсли;
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНарушенияРежимаПриИзменении(Элемент)
	
	ИзменениеКодаНарушенияРежима();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНарушенияРежимаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодНарушенияРежима);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Если НачалоМесяца(Объект.ПериодРегистрации) <> НачалоМесяца(Объект.Дата) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(Объект.Дата);
			ОбработатьИзменениеМесяцаНачисленияНаСервере();
		Иначе
			ОбработатьИзменениеДатыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛИтогНалогНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ КлючевыеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтотОбъект, Объект.ПериодРегистрации, Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленоИтогНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ КлючевыеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеРасчетаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",            Объект.ЯвляетсяПродолжениемБолезни);
	
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаПодробнееОРасчете", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиТекстПриИзменении(Элемент)
	
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьОповещениеОбИзмененииПричиныЗаболевания", ЭтотОбъект);
	
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаВыбораПричиныЗаболевания", ,ЭтотОбъект, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтруктураПоиска = Новый Структура("Наименование", ВыбранноеЗначение);
	МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОбработатьОповещениеОбИзмененииПричиныЗаболевания", ЭтотОбъект);
		ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаВыбораПричиныЗаболевания", ,ЭтотОбъект, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Объект.ПричинаНетрудоспособности = МассивСтрок[0].ПричинаНетрудоспособности;
		Объект.СлучайУходаЗаБольнымРебенком = МассивСтрок[0].СлучайУходаЗаБольнымРебенком;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОбщееЗаболевание     = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание");
	ПоБеременностиИРодам = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам");
	ПоУходуЗаРебенком    = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком");
	До7ЛетАмбулаторно    = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно");
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураПоиска = Новый Структура("ПричинаНетрудоспособности",
										ОбщееЗаболевание);
	МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
	ДанныеВыбора.Добавить(МассивСтрок[0].Наименование);
	
	СтруктураПоиска = Новый Структура("ПричинаНетрудоспособности",
										ПоБеременностиИРодам);
	МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
	ДанныеВыбора.Добавить(МассивСтрок[0].Наименование);
	
	СтруктураПоиска = Новый Структура("ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком",
										ПоУходуЗаРебенком, До7ЛетАмбулаторно);
	МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
	ДанныеВыбора.Добавить(МассивСтрок[0].Наименование);
	
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)
		И Объект.ПричинаНетрудоспособности <> ОбщееЗаболевание
		И Объект.ПричинаНетрудоспособности <> ПоБеременностиИРодам 
		И НЕ (Объект.ПричинаНетрудоспособности = ПоУходуЗаРебенком 
		И Объект.СлучайУходаЗаБольнымРебенком = До7ЛетАмбулаторно) Тогда
		
		Если Объект.ПричинаНетрудоспособности = ПоУходуЗаРебенком Тогда
			СтруктураПоиска = Новый Структура("ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком",
												Объект.ПричинаНетрудоспособности, Объект.СлучайУходаЗаБольнымРебенком);
		Иначе
			СтруктураПоиска = Новый Структура("ПричинаНетрудоспособности", 
												Объект.ПричинаНетрудоспособности);
		КонецЕсли;
		
		МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
		ДанныеВыбора.Добавить(МассивСтрок[0].Наименование);
		
	КонецЕсли;
	
	Если ЭтоВебКлиент Тогда
		ДанныеВыбора.Добавить(НСтр("ru = 'Показать все...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтажЛетПриИзменении(Элемент)
	
	ИзменитьСтажИПересчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ЗакрытьБаннер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЗаявлениеСотрудникаНаВыплатуПособияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ИмяПроцедурыПослеЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
		ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи = "ОткрытьЗаявлениеСотрудникаНаВыплатуПособия";
		Записать(ПараметрыЗаписи);
	Иначе
		ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВводДополнительныхДанныхНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИменаРеквизитов = ИменаРеквизитовДляРеестровФСС();
	ПараметрыФормы = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("СтрокаВозвращаемыхРеквизитов", ИменаРеквизитов);
	ОткрытьФорму("ОбщаяФорма.ВводДанныхЛисткаНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзФСС(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана организация.'"), , "Объект.Организация");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран сотрудник.'"), , "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен номер листка нетрудоспособности.'"), , "Объект.НомерЛисткаНетрудоспособности");
		Возврат;
	КонецЕсли;
	
	// Формирование параметров запроса к сервису получения ЭЛН.
	ЗапросДляПолученияЭЛН = ВыгрузитьЗапросДляПолученияЭЛН();
	Если ЗапросДляПолученияЭЛН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзФССЗавершение", ЭтотОбъект);
	
	// Подписание и отправка запроса, расшифровка ответа.
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьДанныеЭЛНИзФСС(Оповещение, ЗапросДляПолученияЭЛН);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПослеВыбораФайла", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml|Все файлы (*.*)|*'");
	ПараметрыЗагрузки.Диалог.ИндексФильтра = 0;
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите файл ЭЛН, полученный из ФСС'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Выплатить(Команда)
	
	Если НЕ Объект.ПометкаУдаления И НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Вставить(0, КодВозвратаДиалога.Да,     "Провести");
		Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, "Отмена");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередВыплатойСледуетПровестиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед выплатой документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
	Иначе
		СформироватьДокументыВыплаты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	ЦветГиперссылка       = ЦветаСтиля.ГиперссылкаЦвет;
	ЦветПустойГиперссылки = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	ВидОплатыЗаСчетРаботодателя = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);

	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности));
	ВидОплатыПособия = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);

	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	ВидНеоплачиваемогоВремени = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);

	ПервичныйПродолжение = Объект.ЯвляетсяПродолжениемБолезни;
	КодНарушенияРежима   = Объект.КодНарушенияРежима;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);

	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораКодНарушенияРежима();
	УстановитьСвойстваПолейСтажЛьготы();
	УстановитьСвойстваПолейОтметкиОНарушенииРежима(ЭтотОбъект);
	ОтобразитьРазмерОплаты(ЭтотОбъект);
	
	ЗаполнитьТекущиеДанныеСотрудника();
	ЗаполнитьИтоговыеСуммыНачислений();
	ОтобразитьЗначокВнимание();
	
	ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
	
	ПодготовитьТаблицуЗаболеваний();
	
	ОтобразитьпризнакКорректировкиНДФЛ();
	
	ОбновитьСведенияОПрямыхВыплатах();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере()
	
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		
		Объект.ПервичныйБольничныйЛист = Документы.БольничныйЛист.ПустаяСсылка();
		УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);
		
	КонецЕсли;
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(Форма)
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ПроцентОплатыБезЛьгот");
	ИменаЭлементов.Добавить("ОграничениеПособияБезЛьгот");
	ИменаЭлементов.Добавить("ПрименятьЛьготыПриНачисленииПособия");
	ИменаЭлементов.Добавить("ФинансированиеФедеральнымБюджетом");
	ИменаЭлементов.Добавить("ДатаНачала");
	ИменаЭлементов.Добавить("РайонныйКоэффициентРФНаНачалоСобытия");
	ИменаЭлементов.Добавить("ОграничениеПособия");
	ИменаЭлементов.Добавить("ОграничениеПособияБезЛьгот");
	ИменаЭлементов.Добавить("ОграничениеПособияЗаСчетФБ");
	ИменаЭлементов.Добавить("СтажЛет");
	ИменаЭлементов.Добавить("ПроцентОплаты");
	ИменаЭлементов.Добавить("ДекорацияПроцент");
	ИменаЭлементов.Добавить("СтажЛетЛьготыРадиация");
	ИменаЭлементов.Добавить("ПроцентОплатыБезЛьготРадиация");
	ИменаЭлементов.Добавить("ДекорацияПроцентЛьготыРадиация1");
	ИменаЭлементов.Добавить("СтажЛетЛьготыСлужба");
	ИменаЭлементов.Добавить("ПроцентОплатыБезЛьготСлужба");
	ИменаЭлементов.Добавить("ДекорацияПроцентЛьготыСлужба1");
	ИменаЭлементов.Добавить("ПроцентОплатыЛьготыСлужба");
	ИменаЭлементов.Добавить("ДекорацияПроцентЛьготыСлужба2");
	ИменаЭлементов.Добавить("ПроцентОплатыТравма");
	ИменаЭлементов.Добавить("ДекорацияПроцентТравма");
	
	ДоступностьЭлементов = Не ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", ДоступностьЭлементов);
	КонецЦикла;
	
	Если ДоступностьЭлементов Тогда
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Изменить'");
	Иначе
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Подробнее'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОткрытьСреднийЗаработок",
		"Заголовок",
		ЗаголовокКомандыОткрытьСреднийЗаработок);
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Не ДоступностьЭлементов И ЗначениеЗаполнено(Форма.Объект.ПричинаНетрудоспособности) Тогда
		
		ПричиныНетрудоспособности = Новый Массив;
		ПричиныНетрудоспособности.Добавить(Форма.Объект.ПричинаНетрудоспособности);
		ПособиеПриДолечивании = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании");
		
		Если Форма.Объект.ПричинаНетрудоспособности <> ПособиеПриДолечивании Тогда
			ПричиныНетрудоспособности.Добавить(ПособиеПриДолечивании);
		КонецЕсли; 
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ПричиныНетрудоспособности)));
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПричинаНетрудоспособности",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
	
	МассивПараметровВыбора = Новый Массив;
	Если Не ДоступностьЭлементов
		И Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком") Тогда
		
		СлучаиУходаЗаБольнымиДетьми = Новый Массив;
		Если ЗначениеЗаполнено(Форма.Объект.СлучайУходаЗаБольнымРебенком) Тогда
			
			СлучаиУходаЗаБольнымиДетьми.Добавить(Форма.Объект.СлучайУходаЗаБольнымРебенком);
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно"));
			КонецЕсли; 
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СлучаиУходаЗаБольнымиДетьми)));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СлучайУходаЗаБольнымРебенком",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПервичногоБольничногоЛиста(Форма)

	Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.Доступность = Форма.Объект.ЯвляетсяПродолжениемБолезни;
	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист) Тогда
		Форма.НадписьПервичныйЛистокНетрудоспособности = Строка(Форма.Объект.ПервичныйБольничныйЛист);
		Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.ЦветТекста = Форма.ЦветГиперссылка;
	Иначе
		Форма.НадписьПервичныйЛистокНетрудоспособности = Нстр("ru = 'Больничный лист'");
		Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.ЦветТекста = Форма.ЦветПустойГиперссылки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейОсвобожденияОтРаботы(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДатаОкончания) И ЗначениеЗаполнено(Форма.Объект.ДатаНачала)
		И Форма.Объект.ДатаНачала <= Форма.Объект.ДатаОкончания Тогда
		
		ДнейОсвобожденияОтРаботы = КонецДня(Форма.Объект.ДатаОкончания) - НачалоДня(Форма.Объект.ДатаНачала) + 1;
		ДнейОсвобожденияОтРаботы = ДнейОсвобожденияОтРаботы / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		НадписьДней = СтрокаСЧислом( "; день; ; дня; дней; дня",
								ДнейОсвобожденияОтРаботы,
								ВидЧисловогоЗначения.Количественное,
								"L=ru_RU");
		Форма.НадписьДнейОсвобожденияОтРаботы = СтрШаблон(НСтр("ru='%1 %2'"), ДнейОсвобожденияОтРаботы, НадписьДней);
		
	Иначе
		
		Форма.НадписьДнейОсвобожденияОтРаботы = "";
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПервичномуБольничномуЛисту()
	
	Если Не ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПервичномуБольничномуЛисту(Объект.ПервичныйБольничныйЛист);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ГодНачалаСобытия = Неопределено;
	СтажЛет = 0;
	УстановитьСвойстваПолейСтажЛьготы();
	
	РассчитатьСреднийЗаработок();
	
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтотОбъект);
	УстановитьСвойстваПолейОтметкиОНарушенииРежима(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДнейОплаты()
	
	Если Не Объект.НазначитьПособие
		Или Не ЗначениеЗаполнено(Объект.ДатаНачала)
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		Объект.ДнейОплаты = 0;
		
	Иначе
		Если Объект.ДатаНачалаСобытия <> Объект.ДатаНачала Тогда
			ОплаченоРанее = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Объект.ДатаНачалаСобытия, Объект.ДатаНачала - 1, Истина);
		Иначе
			ОплаченоРанее = 0;
		КонецЕсли;
		Объект.ДнейОплаты = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Объект.ДатаНачалаСобытия, Объект.ДатаОкончания, Истина);
		МаксимальноеКоличествоОплачиваемыхДней = Документы.БольничныйЛист.МаксимальноеКоличествоОплачиваемыхДнейПоПричинеНетрудоспособности(
			Объект.ПричинаНетрудоспособности, Объект.СлучайУходаЗаБольнымРебенком);
		Если МаксимальноеКоличествоОплачиваемыхДней = Неопределено Тогда
			Объект.ДнейОплаты = Макс(Объект.ДнейОплаты - ОплаченоРанее, 0);
		Иначе
			Объект.ДнейОплаты = Макс(Мин(Объект.ДнейОплаты, МаксимальноеКоличествоОплачиваемыхДней) - ОплаченоРанее, 0);
		КонецЕсли;
		
		Объект.ДатаОкончанияОплаты = ЗарплатаКадрыКлиентСервер.ДобавитьДней(Объект.ДатаНачалаОплаты, Объект.ДнейОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьРазмерыПособияПоСтажу(Форма)
	
	Объект =  Форма.Объект;
	ДатаУвольненияСотрудника  = Форма.ДатаУвольненияСотрудника;
 	
	Если Объект.ПрименятьЛьготыПриНачисленииПособия 
		И Не Объект.ФинансированиеФедеральнымБюджетом = ПредопределенноеЗначение("Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов") Тогда
		
		Объект.ПроцентОплаты = 100;
		Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"); 
		
	Иначе
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
			Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
			
			Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
			Объект.ПроцентОплаты = 100;
			
			Возврат	
			
		КонецЕсли;
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
			
			Объект.ПроцентОплаты = 100;
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
			И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
			
			// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
			Объект.ПроцентОплаты = 60;
			Возврат;
			
		КонецЕсли;
		
		ИзменитьСтаж(Форма);
		
		Если НЕ (Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ")
			И Форма.СтажЛет = 0) Тогда
			Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
		Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
		
		Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
		Объект.ПроцентОплатыБезЛьгот = 100;
		
		Возврат	
		
	КонецЕсли;
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
		
		Объект.ПроцентОплатыБезЛьгот = 100;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		
		// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
		Объект.ПроцентОплатыБезЛьгот = 60;
		
		Возврат;
		
	КонецЕсли;
	
	ИзменитьСтаж(Форма);
	
	Если НЕ (Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ")
		И Форма.СтажЛет = 0) Тогда
		Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Объект.ПрименятьЛьготыПриНачисленииПособия = Ложь;
	Объект.ФинансированиеФедеральнымБюджетом   = Неопределено;
	
	ОчиститьТаблицыНДФЛ();
	ЗаполнитьТекущиеДанныеСотрудника(Истина);
	
	Объект.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплаты();
	
	УстановитьСвойстваПолейСтажЛьготы();
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеДанныеСотрудника(ЗаполнитьОбъект = Ложь)
	
	ДатаУвольненияСотрудника = Неопределено;
	ПодразделениеСотрудника = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо,Подразделение,ДатаУвольнения,ВидЗанятости", Объект.ДатаНачалаСобытия);
		Если КадровыеДанные.Количество() > 0 Тогда 
			ДатаУвольненияСотрудника = КадровыеДанные[0].ДатаУвольнения;
			ПодразделениеСотрудника = КадровыеДанные[0].Подразделение;
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
			Объект.ОсновноеМестоРаботы = КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		КонецЕсли;
		
	Иначе
		Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполнитьОбъект И ЗначениеЗаполнено(ПодразделениеСотрудника) Тогда
		Объект.РайонныйКоэффициентРФНаНачалоСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеСотрудника, "РайонныйКоэффициентРФ");
	КонецЕсли;
	
	Если ЗаполнитьОбъект И ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Объект.ФинансированиеФедеральнымБюджетом   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФизическоеЛицо, "ЛьготаПриНачисленииПособий");
		Объект.ПрименятьЛьготыПриНачисленииПособия = ЗначениеЗаполнено(Объект.ФинансированиеФедеральнымБюджетом);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	ОтобразитьЗначокВнимание();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		И ЗначениеЗаполнено(Объект.Сотрудник)
		И ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)  Тогда
		
		ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		
		Объект.СреднийДневнойЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		Объект.МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
		
		РассчитатьНачисленияНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
	
		Если ГодНачалаСобытия <> Год(Объект.ДатаНачалаСобытия) Тогда
			
			Объект.СреднийЗаработокФСС.Очистить();
			Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
			
			РасчетныеГоды = Новый Массив;
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
			
			СведенияОЗаработке = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеОЗаработкеДляРасчетаСреднегоФСС(
				Объект.Сотрудник, Объект.Организация, Объект.ДатаНачалаСобытия, РасчетныеГоды);
			
			Если СведенияОЗаработке.Количество() = 0 Тогда
				
				Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
					Объект, РасчетныеГоды);
				
			ИначеЕсли СведенияОЗаработке.Количество() = 1 Тогда
				
				Если СведенияОЗаработке.Получить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод) = Неопределено Тогда
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод));
					
				Иначе
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод));
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДнейБолезниУходаЗаДетьми = 0;
			
			ПособиеЗаНеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(Объект.ФизическоеЛицо, Объект.ДатаНачалаСобытия);
			
			Для каждого СведенияГода Из СведенияОЗаработке Цикл
				
				ЗаработокГода = 0;
				Для каждого СведенияМесяца Из СведенияГода.Значение Цикл
					
					Если СведенияМесяца.Значение.Сумма <> 0 Тогда
						
						СтрокаСведений = Объект.СреднийЗаработокФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.Сумма = СведенияМесяца.Значение.Сумма;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод) Тогда
							ЗаработокГода = ЗаработокГода + СтрокаСведений.Сумма;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми <> 0 Тогда
						
						СтрокаСведений = Объект.ОтработанноеВремяДляСреднегоФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.ДнейБолезниУходаЗаДетьми = СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод)  Тогда
							ДнейБолезниУходаЗаДетьми = ДнейБолезниУходаЗаДетьми + СтрокаСведений.ДнейБолезниУходаЗаДетьми;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Дата(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));
	ПараметрыРасчета.РасчетныеГоды = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	
	ФизическоеЛицо = Неопределено;
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если НЕ КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	ПараметрыРасчета.НеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, Объект.ДатаНачалаСобытия);
	
	ПараметрыРасчета.ДанныеНачислений = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
													И Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.Профзаболевание; 
	ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	ПараметрыРасчета.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
	ПараметрыРасчета.ДоляНеполногоВремени = Объект.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник = Объект.Сотрудник;
		
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаСервере
Функция ДанныеОЗаработкеДляРасчетаСреднегоЗаработка()
	
	ДанныеОЗаработкеДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.СреднийЗаработокФСС Цикл
		СтрокаДанныхОЗаработке = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОЗаработке.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОЗаработке.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		СтрокаДанныхОЗаработке.Период = СтрокаДанных.Период;
		СтрокаДанныхОЗаработке.Сумма = СтрокаДанных.Сумма;
	КонецЦикла;
	
	Возврат ДанныеОЗаработкеДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Функция ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.ОтработанноеВремяДляСреднегоФСС Цикл
		СтрокаДанныхОбОтработанномВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОбОтработанномВремени.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОбОтработанномВремени.Период = СтрокаДанных.Период;
		СтрокаДанныхОбОтработанномВремени.ДнейБолезниУходаЗаДетьми = СтрокаДанных.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Возврат ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Процедура ПересчитатьНДФЛ()
	
	ФиксРасчет = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Если ФиксРасчет.Количество() = 0 Тогда
		ОбъектФормы = РеквизитФормыВЗначение("Объект");
		Документы.БольничныйЛист.ПересчитатьНДФЛ(Объект, ОбъектФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговыеСуммыНачислений()
	
	КВыплате = Объект.Начисления.Итог("Результат") - Объект.НДФЛ.Итог("Налог");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КатегорияНачисленияПоПричинеНетрудоспособности(ПричинаНетрудоспособности)
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста");
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам");
	ИначеЕсли ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве");
	ИначеЕсли ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание");
	КонецЕсли;
	
	Возврат КатегорияНачисления;
	
КонецФункции

&НаСервере
Процедура СкорректироватьДатуНачалаПоловиннойОплаты()
	
	Объект.ДатаНачалаПоловиннойОплаты = Неопределено;
	
	ДатаНачалаПоловиннойОплаты = Объект.ДатаНачалаСобытия + 10 * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком") 
		Или НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		Или НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) 
		Или Объект.ДатаОкончания < НачалоДня(ДатаНачалаПоловиннойОплаты) - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно") 
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно") Тогда
		Объект.ДатаНачалаПоловиннойОплаты = ДатаНачалаПоловиннойОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьДнейОплатыИДатуОкончания()
	
	// Дата окончания оплаты вычисляется исходя из максимального количества доступных дней оплаты.
	УстановитьДнейОплаты();
	
	Если Объект.ДнейОплаты = 0 Тогда
		Объект.НазначитьПособие = Ложь;
		Объект.ДатаНачалаОплаты = Неопределено;
		Объект.ДатаОкончанияОплаты = Неопределено;
	Иначе
		Объект.НазначитьПособие = Истина;
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаОплаты) Тогда
			Объект.ДатаНачалаОплаты = Объект.ДатаНачала;
		КонецЕсли;
		Объект.ДатаОкончанияОплаты = ЗарплатаКадрыКлиентСервер.ДобавитьДней(Объект.ДатаНачалаОплаты, Объект.ДнейОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПричинаНетрудоспособностиПриИзмененииНаСервере()
	
	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности));
	ВидОплатыПособия = ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
	
	УстановитьСвойстваПолейСтажЛьготы();
	
	УстановитьДнейОплаты();
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	ОпределитьРазмерыПособияПоСтажу(ЭтотОбъект);
	СкорректироватьДатуНачалаПоловиннойОплаты();
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОплаты) Тогда
		СкорректироватьДнейОплатыИДатуОкончания();
	КонецЕсли;
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	УстановитьДатыНачалаИОкончанияОплаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		СкорректироватьДатуНачалаПоловиннойОплаты();
	КонецЕсли;
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатыНачалаИОкончанияОплаты()
	
	Если Объект.НазначитьПособие Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаОплаты)
			Или Не Объект.ЯвляетсяПродолжениемБолезни Тогда
			Объект.ДатаНачалаОплаты = Объект.ДатаНачала;
		КонецЕсли;
		
		Если Объект.ДатаОкончанияОплаты < Объект.ДатаНачалаОплаты Тогда
			Объект.ДатаОкончанияОплаты = Макс(Объект.ДатаОкончания, Объект.ДатаНачалаОплаты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	СкорректироватьДатуНачалаПоловиннойОплаты();
	СкорректироватьДнейОплатыИДатуОкончания();
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтотОбъект);
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьСведенияОПрямыхВыплатах();
	
	Объект.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплаты();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцаНачисленияНаСервере()
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	
	ОбновитьСведенияОПрямыхВыплатах();
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплаты();
		ПересчитатьНДФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	// Вставить содержимое обработчика.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РайонныйКоэффициентРФНаНачалоСобытия",
		"Видимость",
		ПолучитьФункциональнуюОпциюФормы("ПрименятьРайонныйКоэффициент"));
		
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	Возврат Документы.БольничныйЛист.АдресПараметровВХранилище(Объект, ДополнительныеПараметрыРасчета());
	
КонецФункции

#Область ПилотныйПроектФСС

&НаСервере
Процедура ОбновитьСведенияОПрямыхВыплатах()
	
	Элементы.ГруппаДанныеДляФСС.Видимость = 
		ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации);
		
	ОбновитьГиперссылкиПрямыхВыплатИЭЛН();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеСотрудникаНаВыплатуПособия(ОбъектЗаписан, ПараметрыЗаписи) Экспорт
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьЗаявлениеСотрудникаПоОснованию(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЛисткаНетрудоспособностиПослеРедактированияНаСервере(Параметр)
	ИменаРеквизитов = ИменаРеквизитовДляРеестровФСС();
	
	ТекущиеДанные = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, ИменаРеквизитов);
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(ТекущиеДанные, Параметр) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр, ИменаРеквизитов);
		ОбновитьГиперссылкиПрямыхВыплатИЭЛН();
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкиПрямыхВыплатИЭЛН()
	Если ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности)
		И ЗначениеЗаполнено(Объект.ДатаВыдачиЛисткаНетрудоспособности) Тогда
		ЗаголовокГиперссылкиЭЛН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнены данные ЛН №%1 от %2'"),
			Объект.НомерЛисткаНетрудоспособности,
			Формат(Объект.ДатаВыдачиЛисткаНетрудоспособности, "ДЛФ=D"));
	Иначе
		ЗаголовокГиперссылкиЭЛН = "";
	КонецЕсли;
	
	Если Элементы.ГруппаДанныеДляФСС.Видимость Тогда
		ГиперссылкаЗаявлениеСотрудникаНаВыплатуПособия = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗаголовокГиперссылкиЗаявления(Объект.Ссылка);
		ГиперссылкаВводДополнительныхДанных = ?(
			ЗаголовокГиперссылкиЭЛН = "",
			НСтр("ru = 'Заполнить данные для реестра сведений, передаваемого в ФСС'"),
			ЗаголовокГиперссылкиЭЛН);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияИсчисленияДляПилотногоПроекта()
	
	Если Объект.УсловияИсчисленияКод1 = "47" Тогда
		Объект.УсловияИсчисленияКод1 = Неопределено;
	КонецЕсли;
	
	Если НЕ ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника  = ДатаУвольненияСотрудника;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		Объект.УсловияИсчисленияКод1 = "47";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовДляРеестровФСС()
	Возврат "ПредоставленДубликатЛисткаНетрудоспособности,МедицинскаяОрганизация,НаименованиеМедицинскойОрганизации,АдресМедицинскойОрганизации,
	|ОГРНМедицинскойОрганизации,ДатаВыдачиЛисткаНетрудоспособности,КодПричиныНетрудоспособности,
	|ДополнительныйКодПричиныНетрудоспособности,ВторойКодПричиныНетрудоспособности,НаименованиеОрганизацииВЛисткеНетрудоспособности,
	|ОсновноеМестоРаботы,НомерЛисткаПоОсновномуМестуРаботы,ДатаИзмененияКодаПричиныНетрудоспособности,ДатаОкончанияПутевки,НомерПутевки,
	|ОГРН_Санатория,ПоУходуВозрастЛет1,ПоУходуВозрастМесяцев1,ПоУходуРодственнаяСвязь1,ПоУходуФИО1,ПоУходуИспользованоДней1,ПоУходуВозрастЛет2,ПоУходуВозрастМесяцев2,
	|ПоУходуРодственнаяСвязь2,ПоУходуФИО2,ПоУходуИспользованоДней2,ПоставленаНаУчетВРанниеСрокиБеременности,КодНарушенияРежима,ДатаНарушенияРежима,
	|ПериодНахожденияВСтационареСРебенкомС,ПериодНахожденияВСтационареСРебенкомПо,ДатаНаправленияВБюроМСЭ,ДатаРегистрацииДокументовМСЭ,
	|ДатаОсвидетельствованияМСЭ,ГруппаИнвалидности,ОсвобождениеДатаНачала1,ОсвобождениеДатаОкончания1,ОсвобождениеДолжностьВрача1,
	|ОсвобождениеФИОВрача1,ОсвобождениеИдентификационныйНомерВрача1,ОсвобождениеФИОВрачаПредседателяВК1,ОсвобождениеДолжностьВрачаПредседателяВК1,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1,ОсвобождениеДатаНачала2,ОсвобождениеДатаОкончания2,ОсвобождениеДолжностьВрача2,
	|ОсвобождениеФИОВрача2,ОсвобождениеИдентификационныйНомерВрача2,ОсвобождениеФИОВрачаПредседателяВК2,ОсвобождениеДолжностьВрачаПредседателяВК2,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2,ОсвобождениеДатаНачала3,ОсвобождениеДатаОкончания3,ОсвобождениеДолжностьВрача3,
	|ОсвобождениеФИОВрача3,ОсвобождениеИдентификационныйНомерВрача3,ОсвобождениеФИОВрачаПредседателяВК3,ОсвобождениеДолжностьВрачаПредседателяВК3,
	|ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3,ПриступитьКРаботеС,ДатаНовыйСтатусНетрудоспособного,НовыйСтатусНетрудоспособного,
	|НомерЛисткаПродолжения,УсловияИсчисленияКод1,УсловияИсчисленияКод2,УсловияИсчисленияКод3,ДатаАктаН1,ДатаНачалаРаботы";
КонецФункции

#КонецОбласти

#Область ЭЛН

&НаКлиенте
Процедура ПолучитьДанныеИзФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбменВыполненУспешно = ЗагрузитьОтветСервисаФСС(Результат.АдресРасшифрованногоОтветаSOAP, Ложь);
	Если ОбменВыполненУспешно Тогда
		ПодписьПрошлаПроверку = (Результат.ПодписьВалидна <> Ложь);
		Если ПодписьПрошлаПроверку Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			ПараметрыЗаписи.Вставить("ОчиститьСообщения", Ложь);
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляПолученияЭЛН()
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляПолученияЭЛН(Объект);
КонецФункции

&НаСервере
Функция ЗагрузитьОтветСервисаФСС(Знач АдресРасшифрованногоОтветаSOAP, Знач ЗагрузкаИзФайла)
	Документ = РеквизитФормыВЗначение("Объект");
	
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		Документ,
		"getPrivateLNData",
		АдресРасшифрованногоОтветаSOAP,
		ЗагрузкаИзФайла);
	ОбменВыполненУспешно = Не РезультатОбмена.Отказ;
	
	Если ОбменВыполненУспешно Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ЗаполнитьПоПервичномуБольничномуЛисту();
		ПричинаНетрудоспособностиПриИзмененииНаСервере();
		ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
		ДатаНачалаПриИзмененииНаСервере();
		ДатаОкончанияПриИзмененииНаСервере();
		ОбновитьГиперссылкиПрямыхВыплатИЭЛН();
	КонецЕсли;
	
	Возврат ОбменВыполненУспешно;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаПослеВыбораФайла(ОписаниеФайла, ПустойПараметр) Экспорт
	Если ОписаниеФайла = Неопределено Или Не ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	
	Попытка
		ФайлЗагружен = ЗагрузитьОтветСервисаФСС(ОписаниеФайла.Хранение, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = СтрШаблон(
			НСтр("ru = 'При загрузке ЭЛН из файла возникла ошибка: ""%1"".'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Подробно = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки файла ""%1"":
				|%2
				|
				|Вероятно, файл не соответствует спецификации ответа веб-сервиса ФСС ЭЛН.'"), 
			ОписаниеФайла.Имя,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗарплатаКадрыКлиент.ВывестиИнформациюОбОшибке(Кратко, Подробно, НСтр("ru = 'Ошибка загрузки ЭЛН из файла'"));
		ФайлЗагружен = Ложь;
	КонецПопытки;
	Если ФайлЗагружен Тогда
		Записать(Новый Структура("ОчиститьСообщения", Ложь));
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СведенияОбНДФЛ(ВходящиеДанные = Неопределено, ФизическоеЛицо = Неопределено) Экспорт
	
	Если ВходящиеДанные = Неопределено Тогда
		Форма = ЭтотОбъект;
		ОбъектФормы    = Объект;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		Форма = ВходящиеДанные;
		ОбъектФормы    = ВходящиеДанные.Объект;
		ДокументОбъект = ВходящиеДанные.Объект;
	КонецЕсли;
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = ОбъектФормы.ПериодРегистрации;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = ОбъектФормы.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(ОбъектФормы, "Начисления", ДополнительныеСведения);
	АдресСведенийОбНДФЛ = УчетНДФЛФормы.СведенияОбНДФЛ(Форма);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам",   СведенияОДоходахНДФЛ.ВычетыКДоходам);
	ДанныеОбНДФЛ.Вставить("Сотрудник",        ОбъектФормы.Сотрудник);
	ДанныеОбНДФЛ.Вставить("Объект",           ДокументОбъект);
	ДанныеОбНДФЛ.Вставить("ИмяТипа",          "БольничныйЛист");
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, Форма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	Объект.КорректировкиВыплаты.Загрузить(Параметр.КорректировкиВыплаты);
	ОтобразитьпризнакКорректировкиНДФЛ();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыНДФЛ()
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	ОтобразитьПризнакКорректировкиНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьпризнакКорректировкиНДФЛ()
	
	ФиксРасчетНДФЛ = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	ФиксРасчетКорректировки = Объект.КорректировкиВыплаты.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Элементы.ДекорацияНДФЛ.Видимость = 
		ФиксРасчетНДФЛ.Количество() <> 0
		ИЛИ ФиксРасчетКорректировки.Количество() <> 0;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗначокВнимание()
	
	Если СтажЛет = 0 Тогда
		Элементы.ГруппаРезультатРасчетаПодвал.Видимость = Ложь;
	Иначе
		ПодсчитатьИтог();
		Если ЗначениеЗаполнено(Объект.Сотрудник)
			И ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Элементы.ГруппаРезультатРасчетаПодвал.Видимость = ИтогГод1 = 0 ИЛИ ИтогГод2 = 0;
		Иначе
			Элементы.ГруппаРезультатРасчетаПодвал.Видимость = Ложь;
		КонецЕсли;
		
		Если НЕ БаннерПогашен Тогда
			ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиОтображенияБольничныхЛистов",
				"БольничныеЛистыНулевыеПериоды",
				Новый Массив);
				
				Элементы.Баннер.Видимость = ОтключенныеПредупреждения.Найти(Объект.Ссылка) = Неопределено;
				БаннерПогашен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодсчитатьИтог()
	
	ИтогГод1 = 0;
	ИтогГод2 = 0;
	
	Для каждого СтрокаСреднегоЗаработкаФСС  Из Объект.СреднийЗаработокФСС Цикл
		
		Год = Год(СтрокаСреднегоЗаработкаФСС.Период);
		Если Год = Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод Тогда
			НомерГода = 1;
		ИначеЕсли Год = Объект.ПериодРасчетаСреднегоЗаработкаВторойГод Тогда
			НомерГода = 2;
		Иначе
			НомерГода = Неопределено;
		КонецЕсли;
			
		Если НомерГода <> Неопределено Тогда
			
			ЭтотОбъект["ИтогГод" + НомерГода] = СтрокаСреднегоЗаработкаФСС.Сумма;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПланируемаяДатаВыплаты()
	
	Если НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.ПериодРегистрации)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ДатаВыплаты = КонецМесяца(Объект.ПериодРегистрации) + 5 * 86400;
		
	Иначе
		
		Настройки = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Объект.Организация));
		
		// выплата зарплаты текущего месяца
		ТекущийМесяц = Объект.ПериодРегистрации;
		ДатаВыплаты = Дата(Год(ТекущийМесяц), Месяц(ТекущийМесяц),
			Мин(Настройки.ДатаВыплатыЗарплаты, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ТекущийМесяц)));
		
		Если ДатаВыплаты <= Объект.Дата Тогда
			
			// выплата аванса текущего месяца
			ДатаВыплаты = Дата(Год(ТекущийМесяц), Месяц(ТекущийМесяц),
				Мин(Настройки.ДатаВыплатыАванса, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ТекущийМесяц)));
				
			Если ДатаВыплаты <= Объект.Дата Тогда
				// выплата зарплаты следующего месяца
				СледующийМесяц = ДобавитьМесяц(Объект.ПериодРегистрации, 1);
				ДатаВыплаты = Дата(Год(СледующийМесяц), Месяц(СледующийМесяц), 
						Мин(Настройки.ДатаВыплатыЗарплаты, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СледующийМесяц)));
	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника)
		И НачалоМесяца(ДатаУвольненияСотрудника) = Объект.ПериодРегистрации Тогда
		ДатаВыплаты = Мин(ДатаУвольненияСотрудника, ДатаВыплаты);
	КонецЕсли;
	
	Возврат ДатаВыплаты;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеДатыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплаты();
		ПересчитатьНДФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		КодНарушенияРежима = ВыбранныйКод.Значение;
		ИзменениеКодаНарушенияРежима();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКодаНарушенияРежима()
	
	Если КодНарушенияРежима = "Отсутствует" Тогда
		Объект.КодНарушенияРежима = "";
		Объект.ДатаНарушенияРежима = "";
		РассчитатьНачисленияНаСервере();
	Иначе
		Объект.КодНарушенияРежима = КодНарушенияРежима;
	КонецЕсли;
	УстановитьСвойстваПолейОтметкиОНарушенииРежима(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере()
	
	Документы.БольничныйЛист.РассчитатьНачисления(Объект, ДополнительныеПараметрыРасчета());
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	ОтобразитьЗначокВнимание();
	
КонецПроцедуры

&НаСервере
Функция ДополнительныеПараметрыРасчета()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодразделениеСотрудника",     ПодразделениеСотрудника);
	ДополнительныеПараметры.Вставить("ВидОплатыЗаСчетРаботодателя", ВидОплатыЗаСчетРаботодателя);
	ДополнительныеПараметры.Вставить("ВидОплатыПособия",            ВидОплатыПособия);
	ДополнительныеПараметры.Вставить("ВидНеоплачиваемогоВремени",   ВидНеоплачиваемогоВремени);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор",     УникальныйИдентификатор);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасчетаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(РезультатРедактирования) Тогда
		ЗаполнитьНачисленияПересчитатьНалог(РезультатРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПересчитатьНалог(АдресВХранилище)
	
	ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыОповещения.Объект, "ПериодРасчетаСреднегоЗаработкаПервыйГод, ПериодРасчетаСреднегоЗаработкаВторойГод, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок");
	
	Объект.ОтработанноеВремяДляСреднегоФСС.Загрузить(ПараметрыОповещения.ОтработанноеВремяДляСреднегоФСС);
	Объект.СреднийЗаработокФСС.Загрузить(ПараметрыОповещения.СреднийЗаработокФСС);
	Объект.Начисления.Загрузить(ПараметрыОповещения.Начисления);
	
	НачисленияПриОкончанииРедактированияНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКодНарушенияРежима()
	
	Элементы.КодНарушенияРежима.СписокВыбора.Добавить("Отсутствует", Нстр("ru = 'Отсутствует'"));
	ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодНарушенияРежима(Элементы.КодНарушенияРежима);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПолейСтажЛьготы()
	
	ТравмаНаПроизводстве = 
		Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	ПрименятьЛьготы = 
		Объект.ПрименятьЛьготыПриНачисленииПособия;
	ЗачетНестраховыхПериодов = 
		Объект.ФинансированиеФедеральнымБюджетом =
			Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов;
	
	Элементы.ГруппаСтажПроцентОплатыСтандартная.Видимость =
		НЕ ТравмаНаПроизводстве И НЕ ПрименятьЛьготы;
	Элементы.ГруппаСтажПроцентОплатыЛьготыРадиация.Видимость =
		НЕ ТравмаНаПроизводстве И ПрименятьЛьготы И НЕ ЗачетНестраховыхПериодов;
	Элементы.ГруппаСтажПроцентОплатыЛьготыСлужба.Видимость =
		НЕ ТравмаНаПроизводстве И ПрименятьЛьготы И ЗачетНестраховыхПериодов;
	Элементы.ГруппаСтажПроцентОплатыТравма.Видимость =
		ТравмаНаПроизводстве;
	
	Если СтажЛет = 0 Тогда
		Если Объект.СтажЛет = 0 Тогда
			Если Объект.СтажМесяцев < 6 Тогда
				СтажЛет = 0;
			Иначе
				СтажЛет = 1;
			КонецЕсли;
		ИначеЕсли Объект.СтажЛет < 5 Тогда
			СтажЛет = 1;
		ИначеЕсли Объект.СтажЛет < 8 Тогда
			СтажЛет = 5;
		Иначе
			СтажЛет = 8;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуЗаболеваний();
	
	ТаблицаЗаболеваний.Загрузить(Документы.БольничныйЛист.ПредставлениеПричиныЗаболевания());
	
	Если Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
	Иначе
		СлучайУходаЗаБольнымРебенком = Объект.СлучайУходаЗаБольнымРебенком;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(
		"ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком",
		Объект.ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком);
	МассивСтрок = ТаблицаЗаболеваний.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() <> 0 Тогда
		ПричинаНетрудоспособностиТекст = МассивСтрок[0].Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииПричиныЗаболевания(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		Объект.ПричинаНетрудоспособности    = РезультатРедактирования.ПричинаНетрудоспособности;
		Объект.СлучайУходаЗаБольнымРебенком = РезультатРедактирования.СлучайУходаЗаБольнымРебенком;
		
		ПричинаНетрудоспособностиТекст = РезультатРедактирования.Наименование;
		
		ПричинаНетрудоспособностиПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПолейОтметкиОНарушенииРежима(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ДатаНарушенияРежима.Доступность = ЗначениеЗаполнено(Объект.КодНарушенияРежима);
	Если НЕ ЗначениеЗаполнено(Объект.КодНарушенияРежима) Тогда
		Форма.КодНарушенияРежима = Элементы.КодНарушенияРежима.СписокВыбора.Получить(0);
	Иначе
		Форма.КодНарушенияРежима = Объект.КодНарушенияРежима;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтажИПересчитать()
	
	ИзменитьСтаж(ЭтотОбъект);
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтаж(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") Тогда
		Объект.ПроцентОплаты         = 100;
		Объект.ПроцентОплатыБезЛьгот = 100;
		Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
		Объект.ОграничениеПособия         = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
	ИначеЕсли Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		Объект.ПроцентОплаты         = 100;
		Объект.ПроцентОплатыБезЛьгот = 100;
		УстановитьЗначениеСтажа(Форма);
	ИначеЕсли Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		УстановитьЗначениеПроцентаОплаты(Форма, "ПроцентОплатыБезЛьгот");
	Иначе
		УстановитьЗначениеСтажа(Форма);
		УстановитьЗначениеПроцентаОплаты(Форма, "ПроцентОплатыБезЛьгот");
		УстановитьЗначениеПроцентаОплаты(Форма, "ПроцентОплаты");
	КонецЕсли;
	
	Если Форма.СтажЛет =0 Тогда
		Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ");
		Объект.ОграничениеПособия         = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ");
	Иначе
		Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
		Объект.ОграничениеПособия         = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
	КонецЕсли;
	
	ОтобразитьРазмерОплаты(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеСтажа(Форма)
	
	Объект = Форма.Объект;
	Если Форма.СтажЛет =0 Тогда
		Объект.СтажЛет       = 0;
		Объект.СтажМесяцев   = ?(Объект.СтажМесяцев >= 6, 0, Объект.СтажМесяцев);
	ИначеЕсли Форма.СтажЛет < 5 Тогда
		Объект.СтажЛет = ?((Объект.СтажЛет > 0 И Объект.СтажЛет < 5) ИЛИ (Объект.СтажЛет = 0 И Объект.СтажМесяцев >= 6), Объект.СтажЛет, 1);
	ИначеЕсли Форма.СтажЛет < 8 Тогда
		Объект.СтажЛет = ?(Объект.СтажЛет >= 5 И Объект.СтажЛет < 8, Объект.СтажЛет, 5);
	Иначе
		Объект.СтажЛет = ?(Объект.СтажЛет >= 8 , Объект.СтажЛет, 8);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПроцентаОплаты(Форма, ИмяРеквизита)
	
	Объект = Форма.Объект;
	Если Форма.СтажЛет =0 Тогда
		Объект[ИмяРеквизита] = 60;
	ИначеЕсли Форма.СтажЛет < 5 Тогда
		Объект[ИмяРеквизита] = 60;
	ИначеЕсли Форма.СтажЛет < 8 Тогда
		Объект[ИмяРеквизита] = 80;
	Иначе
		Объект[ИмяРеквизита] = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРазмерОплаты(Форма)
	
	Элементы = Форма.Элементы;
	ВидимостьНадписиМРОТ = Форма.СтажЛет = 0;
	
	Элементы.ДекорацияМРОТ.Видимость               = ВидимостьНадписиМРОТ;
	Элементы.ДекорацияМРОТЛьготыРадиация.Видимость = ВидимостьНадписиМРОТ;
	Элементы.ДекорацияМРОТЛьготыСлужба.Видимость   = ВидимостьНадписиМРОТ;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	// Закроем баннер на форме.
	Элементы.Баннер.Видимость = Ложь;
	
	ОтключенныеПредупреждения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияБольничныхЛистов",
		"БольничныеЛистыНулевыеПериоды",
		Новый Массив);
		
	Если ОтключенныеПредупреждения.Найти(Объект.Ссылка) = Неопределено Тогда
		
		ОтключенныеПредупреждения.Добавить(Объект.Ссылка);
	
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиОтображенияБольничныхЛистов",
				"БольничныеЛистыНулевыеПериоды",
				ОтключенныеПредупреждения);
	
		БаннерПогашен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КлючевыеРеквизитыЗаполнены()
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)
		Или Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		ТекстСообщения = НСтр("ru='Не указан зарплатный проект'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Необходимо заполнить обязательные для заполнения поля'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область ВыплатаДокумента

&НаКлиенте
Процедура ВопросПередВыплатойСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если ДокументПроведен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", Объект.Ссылка));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВыплаты();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыВыплаты()
	
	Если МожноСоздатьВедомостиПоРасчетномуДокументу(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",             Объект.Организация);
		ПараметрыФормы.Вставить("РасчетныйДокумент",       Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимВыплатыПоДокументу", Истина);
		ПараметрыФормы.Вставить("ПериодСобытия",           Объект.ПериодРегистрации);
		ПараметрыФормы.Вставить("ФизическоеЛицо",          Объект.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ДатаВыплаты",             Объект.ПланируемаяДатаВыплаты);
		
		ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.Форма", ПараметрыФормы, Объект.Ссылка); 
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент)
	
	МожноСоздатьВедомости = Истина;
	ВзаиморасчетыССотрудникамиПереопределяемый.МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент, МожноСоздатьВедомости);
	Возврат МожноСоздатьВедомости;
	
КонецФункции

#КонецОбласти

#КонецОбласти
