#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает данные для заполнения документа по первичному листку нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 см. описание метода ПоследнийДеньБолезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ДанныеПервичногоБольничногоЛиста(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА БольничныйЛист.ЯвляетсяПродолжениемБолезни
		|			ТОГДА БольничныйЛист.ПервичныйБольничныйЛист
		|		ИНАЧЕ БольничныйЛист.Ссылка
		|	КОНЕЦ КАК ПервичныйБольничныйЛист,
		|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
		|	БольничныйЛист.*
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПервичныйБольничныйЛист);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеПервичногоДокумента = Новый Структура;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ДанныеПервичногоДокумента.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;
	
	ДатаНачала = ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы) + 86400;
	ДанныеПервичногоДокумента.Вставить("ДатаНачала", ДатаНачала);
	
	Возврат ДанныеПервичногоДокумента;
	
КонецФункции

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 массив листков нетрудоспособности, которые не нужно учитывать при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы  = Неопределено) Экспорт 

	ДатаОкончанияБолезни = '00010101';
	
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат	ДатаОкончанияБолезни;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &ПервичныйБольничныйЛист
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|	И НЕ БольничныйЛист.Ссылка В (&ИсключаемыеДокументы)
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Новый Массив, ИсключаемыеДокументы));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДатаОкончанияБолезни = Выборка.ДатаОкончания;
	КонецЕсли;

	Возврат	ДатаОкончанияБолезни;
	
КонецФункции

Процедура ЗаполнитьВидПособияВПособияхСоциальногоСтрахования() Экспорт
	
	ПричиныНетрудоспособности = Новый Массив;
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым);
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.Карантин);
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.Протезирование);
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПособияПоСоциальномуСтрахованию.Регистратор
		|ИЗ
		|	РегистрНакопления.ПособияПоСоциальномуСтрахованию КАК ПособияПоСоциальномуСтрахованию
		|ГДЕ
		|	ПособияПоСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПустаяСсылка)
		|	И ПособияПоСоциальномуСтрахованию.Регистратор ССЫЛКА Документ.БольничныйЛист";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыНакопления.ПособияПоСоциальномуСтрахованию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.ВидПособияСоциальногоСтрахования) Тогда
					Запись.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность;
				КонецЕсли; 
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПособиеВыплачиваетсяФССВСуществующихБольничныхЛистах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
	|		ПО БольничныйЛистНачисления.Начисление = ПланВидовРасчетаНачисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
	|			ПО БольничныйЛист.Организация = НастройкиУчетаПособийСоциальногоСтрахования.Организация
	|		ПО БольничныйЛистНачисления.Ссылка = БольничныйЛист.Ссылка
	|ГДЕ
	|	НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий <= БольничныйЛист.ПериодРегистрации
	|	И ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорияНачисленияИлиНеоплаченногоВремени)
	|	И БольничныйЛист.ПособиеВыплачиваетсяФСС = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени", ПрямыеВыплатыПособийСоциальногоСтрахования.КатегорииНачисленийПособийПоПрямымВыплатамФСС());
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Документ.ПособиеВыплачиваетсяФСС = Истина;
			Документ.ОбменДанными.Загрузка = Истина;
			Документ.Записать();
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.Ссылка,
	|	БольничныйЛист.ПричинаНетрудоспособности
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		Если Выборка.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ВидСтажа = Перечисления.ВидыСтажаПФР2014.Декрет;		
		Иначе	
			ВидСтажа = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
		КонецЕсли;	
						
		ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
		ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
		ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
		ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
		ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
				
		РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
												 					
		УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажа);		
	КонецЦикла;	

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции	

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
	КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
	КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПроверитьДокументыДляПечати(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru = 'Расчет среднего заработка'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.Дата КАК ДатаДокумента,
	|	БольничныйЛист.Номер КАК НомерДокумента,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияОтсутствия,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ВТКадровыеДанныеСотрудников.Организация КАК Страхователь,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО БольничныйЛист.Организация = Организации.Ссылка
	|		ПО ДанныеДокументов.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
			
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаНачало = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));

			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			ДанныеДокумента.ПараметрыРасчета = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ПараметрыРасчета;
			ДанныеДокумента.ДанныеРасчетаСреднего = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ДанныеРасчетаСреднего;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

// Возвращает описание документов с полями ПараметрыРасчета и ДанныеРасчетаСреднего. 
// 	ПараметрыРасчета - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
// 	ДанныеРасчетаСреднего - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
// Параметры:
//	 МассивСсылок 		- массив ссылок на документ БольничныйЛист, по которым получаем данные.
// 
// Возвращаемое значение: Соответствие, ключ - ссылка на больничный лист, значение - Структура("ПараметрыРасчета,ДанныеРасчетаСреднего").
//
Функция ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Сотрудник КАК Сотрудник,
	|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокументов.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину КАК ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми КАК ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод КАК ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.РайонныйКоэффициентРФ КАК РайонныйКоэффициентРФ,
	|	ДанныеДокументов.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ КАК МинимальныйРазмерОплатыТрудаРФ
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаНачало = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаОкончание = Дата(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31);
			
			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			
			ДанныеДокументов.Вставить(Выборка.Ссылка, ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Организация,ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(Объект, Годы) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
		Запрос.УстановитьПараметр("Годы", Годы);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	БольничныйЛист.Ссылка,
			|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод КАК Год,
			|	БольничныйЛист.Дата КАК Дата
			|ПОМЕСТИТЬ ВТДокументыСГодами
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|ГДЕ
			|	БольничныйЛист.Проведен
			|	И БольничныйЛист.Сотрудник = &Сотрудник
			|	И БольничныйЛист.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод В(&Годы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БольничныйЛист.Ссылка,
			|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод,
			|	БольничныйЛист.Дата
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|ГДЕ
			|	БольничныйЛист.Проведен
			|	И БольничныйЛист.Сотрудник = &Сотрудник
			|	И БольничныйЛист.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод В(&Годы)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыСГодами.Год,
			|	МАКСИМУМ(ДокументыСГодами.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТДокументыГодовСПоследнимиДатами
			|ИЗ
			|	ВТДокументыСГодами КАК ДокументыСГодами
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыСГодами.Год
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДокументыСГодами.Ссылка) КАК Ссылка,
			|	ДокументыСГодами.Год
			|ПОМЕСТИТЬ ВТДокументыСоСреднимЗаработком
			|ИЗ
			|	ВТДокументыСГодами КАК ДокументыСГодами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыГодовСПоследнимиДатами КАК ДокументыГодовСПоследнимиДатами
			|		ПО ДокументыСГодами.Год = ДокументыГодовСПоследнимиДатами.Год
			|			И ДокументыСГодами.Дата = ДокументыГодовСПоследнимиДатами.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыСГодами.Год";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	БольничныйЛистСреднийЗаработокФСС.ФизическоеЛицо,
			|	БольничныйЛистСреднийЗаработокФСС.Период,
			|	БольничныйЛистСреднийЗаработокФСС.Сумма
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.СреднийЗаработокФСС КАК БольничныйЛистСреднийЗаработокФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистСреднийЗаработокФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистСреднийЗаработокФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистСреднийЗаработокФСС.Период))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БольничныйЛистСреднийЗаработокФСС.ФизическоеЛицо,
			|	БольничныйЛистСреднийЗаработокФСС.Период,
			|	БольничныйЛистСреднийЗаработокФСС.Сумма
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.СреднийЗаработокФСС КАК БольничныйЛистСреднийЗаработокФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистСреднийЗаработокФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистСреднийЗаработокФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистСреднийЗаработокФСС.Период))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Объект.СреднийЗаработокФСС.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК БольничныйЛистОтработанноеВремяДляСреднегоФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаПервыйГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период,
			|	БольничныйЛистОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми
			|ИЗ
			|	ВТДокументыСоСреднимЗаработком КАК ПоследнийБольничный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК БольничныйЛистОтработанноеВремяДляСреднегоФСС
			|		ПО ПоследнийБольничный.Ссылка = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка
			|			И ПоследнийБольничный.Год = БольничныйЛистОтработанноеВремяДляСреднегоФСС.Ссылка.ПериодРасчетаСреднегоЗаработкаВторойГод
			|			И (ПоследнийБольничный.Год = ГОД(БольничныйЛистОтработанноеВремяДляСреднегоФСС.Период))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремяДляСреднегоФСС.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЭЛН

// Возвращает соответствие, в котором ключ - имя поля больничного, а значение - имя поля ЭЛН.
Функция СоответствиеПолейЭЛН() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("НомерПервичногоЛисткаНетрудоспособности", 		"PREV_LN_CODE");
	СоответствиеПолей.Вставить("ПредоставленДубликатЛисткаНетрудоспособности", 	"DUPLICATE_FLAG");
	СоответствиеПолей.Вставить("ДатаВыдачиЛисткаНетрудоспособности", 			"LN_DATE");
	СоответствиеПолей.Вставить("НаименованиеМедицинскойОрганизации", 			"LPU_NAME");
	СоответствиеПолей.Вставить("АдресМедицинскойОрганизации", 					"LPU_ADDRESS");
	СоответствиеПолей.Вставить("ОГРНМедицинскойОрганизации", 					"LPU_OGRN");
	СоответствиеПолей.Вставить("КодПричиныНетрудоспособности", 					"REASON1");
	СоответствиеПолей.Вставить("ДополнительныйКодПричиныНетрудоспособности", 	"REASON2");
	СоответствиеПолей.Вставить("ВторойКодПричиныНетрудоспособности", 			"REASON3");
	СоответствиеПолей.Вставить("НомерЛисткаПоОсновномуМестуРаботы", 			"PARENT_CODE");
	СоответствиеПолей.Вставить("ДатаИзмененияКодаПричиныНетрудоспособности", 	"DATE1");
	СоответствиеПолей.Вставить("ДатаОкончанияПутевки", 							"DATE2");
	СоответствиеПолей.Вставить("НомерПутевки", 									"VOUCHER_NO");
	СоответствиеПолей.Вставить("ОГРН_Санатория", 								"VOUCHER_OGRN");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет1", 							"SERV1_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев1", 						"SERV1_MM");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь1", 						"SERV1_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуФИО1", 									"SERV1_FIO");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет2", 							"SERV2_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев2", 						"SERV2_MM");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь2", 						"SERV2_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуФИО2", 									"SERV2_FIO");
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомС", 		"HOSPITAL_DT1");
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомПо", 		"HOSPITAL_DT2");
	СоответствиеПолей.Вставить("ДатаНаправленияВБюроМСЭ", 						"MSE_DT1");
	СоответствиеПолей.Вставить("ДатаРегистрацииДокументовМСЭ", 					"MSE_DT2");
	СоответствиеПолей.Вставить("ДатаОсвидетельствованияМСЭ", 					"MSE_DT3");
	СоответствиеПолей.Вставить("ГруппаИнвалидности", 							"MSE_INVALID_GROUP");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Процедура ПослеЗагрузкиЭЛН(ДокументОбъект, ДанныеИзСервиса) Экспорт
	
	ЗаполнитьФлагПостановкиНаУчетВРанниеСрокиБеременности(ДокументОбъект, ДанныеИзСервиса);
	ЗаполнитьМедицинскуюОрганизацию(ДокументОбъект);
	ЗаполнитьДаты(ДокументОбъект);
	ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(ДокументОбъект);
	
КонецПроцедуры

// Заполнение поля ПоставленаНаУчетВРанниеСрокиБеременности.
Процедура ЗаполнитьФлагПостановкиНаУчетВРанниеСрокиБеременности(ДокументОбъект, ДанныеИзСервиса) Экспорт
	ФлагПостановки = ОбменЛисткамиНетрудоспособностиФСС.ЗначениеИзСтрокиXMLПоТипу(ДанныеИзСервиса.PREGN12W_FLAG, Тип("Число"));
	Если ФлагПостановки = 1 Тогда
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
	ИначеЕсли ФлагПостановки = 0 Тогда
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
	Иначе
		ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно;
	КонецЕсли;
КонецПроцедуры

// Заполнение медицинской организации.
Процедура ЗаполнитьМедицинскуюОрганизацию(Документ)
	Если Не ЗначениеЗаполнено(Документ.ОГРНМедицинскойОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МедицинскиеОрганизации.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеОрганизации КАК МедицинскиеОрганизации
	|ГДЕ
	|	МедицинскиеОрганизации.ОГРН = &ОГРН";
	Запрос.УстановитьПараметр("ОГРН", Документ.ОГРНМедицинскойОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ.МедицинскаяОрганизация = Выборка.Ссылка;
	Иначе
		МедОрганизация = Справочники.МедицинскиеОрганизации.СоздатьЭлемент();
		МедОрганизация.Наименование = Документ.НаименованиеМедицинскойОрганизации;
		МедОрганизация.ОГРН         = Документ.ОГРНМедицинскойОрганизации;
		МедОрганизация.Адрес        = Документ.АдресМедицинскойОрганизации;
		МедОрганизация.Записать();
		Документ.МедицинскаяОрганизация = МедОрганизация.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение дат оплаты и освобождения от работы.
Процедура ЗаполнитьДаты(Документ)
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала1) Тогда
		Документ.ДатаНачала    = Документ.ОсвобождениеДатаНачала1;
		Документ.ДатаОкончания = Документ.ОсвобождениеДатаОкончания1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала2)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания2) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала2);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала2;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала3)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания3) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала3);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала3;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания3);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет причину нетрудоспособности и случай ухода за ребенком.
Процедура ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Документ)
	Стационар = ЗначениеЗаполнено(Документ.ПериодНахожденияВСтационареСРебенкомС);
	
	Если Документ.КодПричиныНетрудоспособности = "01"
		Или Документ.КодПричиныНетрудоспособности = "02" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "03" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "04"
		Или Документ.КодПричиныНетрудоспособности = "07" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "05" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "06" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "08" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "09" Тогда
		
		ПоУходуВозраст1 = Документ.ПоУходуВозрастЛет1 + Окр(Документ.ПоУходуВозрастМесяцев1 / 12, 1);
		ПоУходуВозраст2 = Документ.ПоУходуВозрастЛет2 + Окр(Документ.ПоУходуВозрастМесяцев2 / 12, 1);
		
		Если ПоУходуВозраст2 > 0 И ПоУходуВозраст2 < ПоУходуВозраст1 Тогда
			НаименьшийВозрастПоУходу = ПоУходуВозраст2;
		Иначе
			НаименьшийВозрастПоУходу = ПоУходуВозраст1;
		КонецЕсли;
		
		Если НаименьшийВозрастПоУходу = 0 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		ИначеЕсли НаименьшийВозрастПоУходу < 7 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
			Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно);
		ИначеЕсли НаименьшийВозрастПоУходу >= 7 И НаименьшийВозрастПоУходу < 15 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
			Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре,
				Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно);
		ИначеЕсли НаименьшийВозрастПоУходу >= 15 Тогда
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым;
		КонецЕсли;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "10"
		Или Документ.КодПричиныНетрудоспособности = "11" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "12" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "13" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "14" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "15" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ;
		
	Иначе
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
	КонецЕсли;
	
КонецПроцедуры

// Получает предыдущий проведенный документ в цепочке исправлений по переданной ссылке на документ.
Функция ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(БольничныйОбъект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БольничныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности
	|	И БольничныйЛист.Проведен
	|	И НЕ БольничныйЛист.ПометкаУдаления
	|	И БольничныйЛист.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольничныйЛист.ПериодРегистрации УБЫВ,
	|	БольничныйЛист.Дата УБЫВ";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("Ссылка", БольничныйОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено; // Другой проведенный больничный по номеру ЛН не найден.
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДатыОплаты(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.НазначитьПособие
		|	И БольничныйЛист.ДатаНачалаОплаты = ДАТАВРЕМЯ(1, 1, 1)
		|	И БольничныйЛист.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ОбработкаЗавершена = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.БольничныйЛист", "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектДокумента.ДатаНачалаОплаты = ОбъектДокумента.ДатаНачала;
			ОбъектДокумента.ДатаОкончанияОплаты = ОбъектДокумента.ДатаОкончания;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

// Определяет максимальное оплачиваемое количество дней нетрудоспособности для указанной причины.
//
// Параметры:
//  ПричинаНетрудоспособности	 - Перечисления.ПричиныНетрудоспособности
//  СлучайУходаЗаБольнымРебенком - Перечисления.СлучаиУходаЗаБольнымиДетьми.
// 
// Возвращаемое значение:
//  МаксимальноеКоличествоОплачиваемыхДней - Число.
//
Функция МаксимальноеКоличествоОплачиваемыхДнейПоПричинеНетрудоспособности(ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком) Экспорт
	
	МаксимальноеКоличествоОплачиваемыхДней = Неопределено;
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 24; // П.2 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 7; // Пп. 6 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 15; // Пп. 2 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	КонецЕсли;
	
	Если МаксимальноеКоличествоОплачиваемыхДней = Неопределено
		И ЗначениеЗаполнено(СлучайУходаЗаБольнымРебенком) Тогда
		
		МаксимальноеКоличествоОплачиваемыхДней = МаксимальноеКоличествоДнейУходаЗаБольнымРодственникомВГод(СлучайУходаЗаБольнымРебенком);
		
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоОплачиваемыхДней;
	
КонецФункции

Функция МаксимальноеКоличествоДнейУходаЗаБольнымРодственникомВГод(СлучайУходаЗаБольнымРебенком)
	
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре Тогда
		Возврат 60;
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре Тогда
		Возврат 90;
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		Возврат 45;
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре Тогда
		Возврат 120;
	Иначе
		Возврат 30;
	КонецЕсли;
	
КонецФункции

#Область УчетПособий

// Возникает при заполнении документа ЗаявлениеСотрудникаНаВыплатуПособия на основании текущего документа.
Процедура ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Больничный, Заявление, РеквизитыДокумента, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	ДанныеДляРасчетаСреднегоЗаработка = ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Больничный)).Получить(Больничный);
	
	НеобходимыеРеквизиты = "Организация, Сотрудник, ПричинаНетрудоспособности, НомерЛисткаНетрудоспособности, "
		+ "ДатаВыдачиЛисткаНетрудоспособности, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок, "
		+ "ПоставленаНаУчетВРанниеСрокиБеременности, Дата";
	РеквизитыБольничного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Больничный, НеобходимыеРеквизиты);
	
	ПричинаНетрудоспособности = РеквизитыБольничного.ПричинаНетрудоспособности;
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Если РеквизитыБольничного.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена Тогда
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки);
		Иначе
			РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
		КонецЕсли;
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве);
	Иначе
		РеквизитыДокумента.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Организация", РеквизитыБольничного.Организация);
	РеквизитыДокумента.Вставить("Сотрудник", РеквизитыБольничного.Сотрудник);
	РеквизитыДокумента.Вставить("НомерЛисткаНетрудоспособности", РеквизитыБольничного.НомерЛисткаНетрудоспособности);
	РеквизитыДокумента.Вставить("ДатаЛисткаНетрудоспособности", РеквизитыБольничного.ДатаВыдачиЛисткаНетрудоспособности);
	РеквизитыДокумента.Вставить("СреднийЗаработокЗаРасчетныйПериод", Макс(РеквизитыБольничного.СреднийДневнойЗаработок, РеквизитыБольничного.МинимальныйСреднедневнойЗаработок));
	РеквизитыДокумента.Вставить("ДатаПредставленияПакетаДокументов", РеквизитыБольничного.Дата);
КонецПроцедуры

#КонецОбласти

Функция ПредставлениеПричиныЗаболевания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПричиныНетрудоспособности.Ссылка КАК ПричинаНетрудоспособности,
	|	СлучаиУходаЗаБольнымиДетьми.Ссылка КАК СлучайУходаЗаБольнымРебенком
	|ИЗ
	|	Перечисление.ПричиныНетрудоспособности КАК ПричиныНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СлучаиУходаЗаБольнымиДетьми КАК СлучаиУходаЗаБольнымиДетьми
	|		ПО (ПричиныНетрудоспособности.Ссылка = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(120)));
	Результат.Колонки.Добавить("Порядок",      Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		СтрокаТаблицы.Наименование = Строка(СтрокаТаблицы.ПричинаНетрудоспособности);
		Если СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
			СтрокаТаблицы.Порядок = 1;
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин Тогда
			СтрокаТаблицы.Порядок = 3
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			СтрокаТаблицы.Порядок = 4;
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			СтрокаТаблицы.Порядок = 5
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование Тогда
			СтрокаТаблицы.Порядок = 6
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание Тогда
			СтрокаТаблицы.Порядок = 7;
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
			СтрокаТаблицы.Порядок = 8;
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
			СтрокаТаблицы.Порядок = 95;
		ИначеЕсли СтрокаТаблицы.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
			Если СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(09) Уход за больным ребенком до 7 лет, амбулаторно'");
				СтрокаТаблицы.Порядок = 91;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(09) Уход за больным ребенком до 7 лет, в стационаре'");
				СтрокаТаблицы.Порядок = 92;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(09) Уход за больным ребенком от 7 до 15 лет, амбулаторно'");
				СтрокаТаблицы.Порядок = 93;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(09) Уход за больным ребенком от 7 до 15 лет, в стационаре'");
				СтрокаТаблицы.Порядок = 94;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(12) Уход за больным ребенком до 7 лет, амбулаторно, заболевание включено в Перечень'");
				СтрокаТаблицы.Порядок = 121;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(12) Уход за больным ребенком до 7 лет, в стационаре, заболевание включено в Перечень'");
				СтрокаТаблицы.Порядок = 121;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(13) Уход за больным ребенком-инвалидом до 18 лет, амбулаторно (до 2015 г. - до 15 лет)'");
				СтрокаТаблицы.Порядок = 131;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(13) Уход за больным ребенком-инвалидом до 18 лет, в стационаре (до 2015 г. - до 15 лет)'");
				СтрокаТаблицы.Порядок = 132;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(14) Уход за больным ребенком до 18 лет при поствакцинальном осложнении, амбулаторно (до 2015 г. - до 15 лет)'");
				СтрокаТаблицы.Порядок = 141;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(14) Уход за больным ребенком до 18 лет при поствакцинальном осложнении, в стационаре (до 2015 г. - до 15 лет)'");
				СтрокаТаблицы.Порядок = 142;
			ИначеЕсли СтрокаТаблицы.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ Тогда
				СтрокаТаблицы.Наименование = НСтр("ru = '(15) Уход за больным ребенком до 18 лет, ВИЧ-инфицированным, в стационаре (до 2015 г. - до 15 лет)'");
				СтрокаТаблицы.Порядок = 151;
			Иначе
				СтрокаТаблицы.Порядок = 190;
			КонецЕсли;
		Иначе
				СтрокаТаблицы.Порядок = 200;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Сортировать("Порядок");
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДокументыДляПечати(МассивОбъектов)
	
	МассивПроверенныхДокументов = Новый Массив;
	Для Каждого ПроверяемыйДокумент ИЗ МассивОбъектов Цикл
		ДокументОбъект = ПроверяемыйДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			МассивПроверенныхДокументов.Добавить(ПроверяемыйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	МассивОбъектов = МассивПроверенныхДокументов;
	
КонецПроцедуры

#Область РасчетДокумента

// Функция формирует набор параметров для передачи во вспомогательные формы,
// помещает их во временное хранилище и возвращает адрес этого хранилища.
//
// Параметры:
//	Объект                  - ДокументОбъект.БольничныйЛист - исходый документ.
//	ДополнительныеПараметры - Структура - дополнительные параметры из формы документа.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище.
//
Функция АдресПараметровВХранилище(Объект, ДополнительныеПараметры) Экспорт
	
	ПараметрыРасчетаСреднегоЗаработка = Новый Структура;
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Объект",                          Объект);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("СреднийЗаработокФСС",             Объект.СреднийЗаработокФСС.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ОтработанноеВремяДляСреднегоФСС", Объект.ОтработанноеВремяДляСреднегоФСС.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Начисления",                      Объект.Начисления.Выгрузить());
	
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ПодразделениеСотрудника",              ДополнительныеПараметры.ПодразделениеСотрудника);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ВидОплатыЗаСчетРаботодателя",          ДополнительныеПараметры.ВидОплатыЗаСчетРаботодателя);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ВидОплатыПособия",                     ДополнительныеПараметры.ВидОплатыПособия);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ВидНеоплачиваемогоВремени",            ДополнительныеПараметры.ВидНеоплачиваемогоВремени);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчетаСреднегоЗаработка, ДополнительныеПараметры.УникальныйИдентификатор);
	
КонецФункции

// Производит перерасчет начисления.
// 
// Параметры:
//  Объект                  - ДокументОбъект.БольничныйЛист - исходый документ.
//  ДополнительныеПараметры - Структура - дополнительные параметры из формы документа.
//
Процедура РассчитатьНачисления(Объект, ДополнительныеПараметры) Экспорт
	
	ПодразделениеСотрудника = ДополнительныеПараметры.ПодразделениеСотрудника;
	ВидОплатыПособия        = ДополнительныеПараметры.ВидОплатыПособия;
	
	// Заполнение начислений
	ТаблицаИнтервалов = ТаблицаИнтерваловОплаты(Объект, ДополнительныеПараметры);
	ГраницыИнтервалов = ГраницыИнтервалов(ТаблицаИнтервалов);
	
	Объект.Начисления.Очистить();
	
	ТаблицаРасчета = Объект.Начисления.Выгрузить();
	ТаблицаРасчета.Колонки.Добавить("МРОТ", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("КалендарныеДни", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("РайонныйКоэффициентРФ", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
		Если Не ЗначениеЗаполнено(СтрокаИнтервалов.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		ДатаНачала = СтрокаИнтервалов.ДатаНачала;
		ДатаОкончания = СтрокаИнтервалов.ДатаОкончания;
		Пока ДатаНачала <= ДатаОкончания Цикл
			СтрокаНачислений = ТаблицаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, СтрокаИнтервалов);
			СтрокаНачислений.ДатаНачала = ДатаНачала;
			Если КонецМесяца(ДатаНачала) >= ДатаОкончания Тогда
				СтрокаНачислений.ДатаОкончания = ДатаОкончания;
			Иначе
				СтрокаНачислений.ДатаОкончания = КонецМесяца(ДатаНачала);
			КонецЕсли;
			СтрокаНачислений.Сотрудник = Объект.Сотрудник;
			СтрокаНачислений.Подразделение = ПодразделениеСотрудника;
			СтрокаНачислений.КалендарныеДни = (НачалоДня(СтрокаНачислений.ДатаОкончания) - НачалоДня(СтрокаНачислений.ДатаНачала)) / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток() + 1;
			СтрокаНачислений.МРОТ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(СтрокаНачислений.ДатаНачала);
			СтрокаНачислений.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
			ДатаНачала = КонецМесяца(ДатаНачала) + 1;
		КонецЦикла; 
	КонецЦикла;
	
	СтруктурыЗаписей = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРасчета);
	
	ТаблицаРасчета.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("ЗаписьРасчета");
	ТаблицаСДанными.Колонки.Добавить("Показатели");
	ТаблицаСДанными.Колонки.Добавить("ДатаНачала");
	ТаблицаСДанными.Колонки.Добавить("Результат");
	ТаблицаСДанными.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	ТаблицаСДанными.Колонки.Добавить("ТерриторииУсловияТруда", Новый ОписаниеТипов("Массив"));
	
	Для НомерСтроки = 0 По ТаблицаРасчета.Количество() - 1 Цикл
		
		СтрокаТаблицыРасчета = ТаблицаРасчета[НомерСтроки];
		Если СтрокаТаблицыРасчета.Начисление = ДополнительныеПараметры.ВидНеоплачиваемогоВремени Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСДанными = ТаблицаСДанными.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСДанными, ТаблицаРасчета[НомерСтроки]);
		СтрокаСДанными.ЗаписьРасчета = ТаблицаРасчета[НомерСтроки];
		СтрокаСДанными.Показатели = СтруктурыЗаписей[НомерСтроки];
	КонецЦикла;
	
	ПараметрыОплаты = Новый Структура("ПараметрыРасчетаПособияПоНетрудоспособности");
	ПараметрыОплаты.ПараметрыРасчетаПособияПоНетрудоспособности = Объект;
	
	УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(ТаблицаСДанными, ПараметрыОплаты, Ложь);
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации);
	Для Каждого СтрокаТаблицыСДанными Из ТаблицаСДанными Цикл
		СтрокаНачисления = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаТаблицыСДанными.Показатели);
		СтрокаНачисления.ОплаченоДней = СтрокаТаблицыСДанными.Показатели.КалендарныеДни;
		СтрокаНачисления.Результат = СтрокаТаблицыСДанными.Результат;
		СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСДанными.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
		Если СтрокаТаблицыСДанными.Показатели.Начисление <> ВидОплатыПособия Тогда
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли; 
		Если ПособиеПлатитУчастникПилотногоПроекта И СтрокаТаблицыСДанными.Показатели.Начисление = ВидОплатыПособия Тогда
			СтрокаНачисления.Результат = 0;
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли;
		
		ТаблицаРасчета.Удалить(СтрокаТаблицыСДанными.ЗаписьРасчета);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыРасчета Из ТаблицаРасчета Цикл
		СтрокаНачисления = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаТаблицыРасчета);
		СтрокаНачисления.ОплаченоДней = СтрокаТаблицыРасчета.КалендарныеДни;
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыИзменений(Объект, ДополнительныеПараметры)
	
	ВидОплатыПособия            = ДополнительныеПараметры.ВидОплатыПособия;
	ВидОплатыЗаСчетРаботодателя = ДополнительныеПараметры.ВидОплатыЗаСчетРаботодателя;
	ВидНеоплачиваемогоВремени   = ДополнительныеПараметры.ВидНеоплачиваемогоВремени;
	
	// Создаем таблицу точек на оси времени и начислений которые с ними связаны
	// затем строим из этих точек интервалы.
	ДатыИзменений = Новый ТаблицаЗначений;
	ДатыИзменений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДатыИзменений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Если Не Объект.НазначитьПособие Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = ВидНеоплачиваемогоВремени;
		Возврат ДатыИзменений;
	КонецЕсли;
	
	ДатаНачалаОплатыЗаСчетФСС = 
		Объект.ДатаНачалаСобытия +
		УчетПособийСоциальногоСтрахованияКлиентСервер.КоличествоДнейЗаСчетРаботодателя(Объект.ДатаНачалаСобытия) *
		УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
		
		Если ДатаНачалаОплатыЗаСчетФСС > Объект.ДатаНачала Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачала;
			НоваяДата.Начисление = ВидОплатыЗаСчетРаботодателя;
			// Оплата за счет ФСС
			Если ДатаНачалаОплатыЗаСчетФСС <= Объект.ДатаОкончания Тогда
				НоваяДата = ДатыИзменений.Добавить();
				НоваяДата.Дата = ДатаНачалаОплатыЗаСчетФСС;
				НоваяДата.Начисление = ВидОплатыПособия;
			КонецЕсли;
		Иначе
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачала;
			НоваяДата.Начисление = ВидОплатыПособия;
		КонецЕсли;
	Иначе
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = ВидОплатыПособия;
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончания)
			И Объект.ДатаНачалаПоловиннойОплаты > Объект.ДатаНачала
			И Объект.ДатаНачалаПоловиннойОплаты <= Объект.ДатаОкончания Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачалаПоловиннойОплаты;
			НоваяДата.Начисление = ВидОплатыПособия;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНарушенияРежима) 
		И Объект.ДатаНарушенияРежима > Объект.ДатаНачала
		И Объект.ДатаНарушенияРежима <= Объект.ДатаОкончания
		И ДатыИзменений.Найти(Объект.ДатаНарушенияРежима, "Дата") = Неопределено Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНарушенияРежима;
		Если Объект.ДатаНарушенияРежима >= ДатаНачалаОплатыЗаСчетФСС Тогда
			НоваяДата.Начисление = ВидОплатыПособия;
		Иначе
			НоваяДата.Начисление = ВидОплатыЗаСчетРаботодателя;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДатаОкончанияОплаты < Объект.ДатаОкончания Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаОкончанияОплаты + УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		НоваяДата.Начисление = ВидНеоплачиваемогоВремени;
	КонецЕсли;
	
	Возврат ДатыИзменений;
	
КонецФункции

Функция ГраницыИнтервалов(ТаблицаИнтервалов)
	
	Границы = Новый СтандартныйПериод;
	
	Границы.ДатаНачала = Дата(1, 1, 1);
	Границы.ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаИнтервалов Цикл
		Если Не ЗначениеЗаполнено(Границы.ДатаНачала) Тогда
			Границы.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		КонецЕсли;
		Границы.ДатаНачала = Мин(Границы.ДатаНачала, СтрокаТаблицы.ДатаНачала);
		Границы.ДатаОкончания = Макс(Границы.ДатаОкончания, СтрокаТаблицы.ДатаОкончания);
	КонецЦикла;
	
	Возврат Границы;
	
КонецФункции

Функция ТаблицаИнтерваловОплаты(Объект, ДополнительныеПараметры)
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начисление");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("Длительность");
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) 
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) 
		Или Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		Возврат ТаблицаИнтервалов;
	КонецЕсли;
	
	ДатыИзменений = ДатыИзменений(Объект, ДополнительныеПараметры);
	ДатыИзменений.Сортировать("Дата");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаДаты Из ДатыИзменений Цикл
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.ДатаНачала = СтрокаДаты.Дата;
		НовыйИнтервал.Начисление = СтрокаДаты.Начисление;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ПредыдущаяСтрока.ДатаОкончания = СтрокаДаты.Дата - 1;
		КонецЕсли;
		ПредыдущаяСтрока = НовыйИнтервал;
	КонецЦикла;
	
	НовыйИнтервал.ДатаОкончания = Объект.ДатаОкончания;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

// Процедура инициирует перерасчет НДФЛ.
// Вызывается из основной или вспомогательной формы документа.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура.
//  ОбъектФормы - ДокументОбъект.
//
Процедура ПересчитатьНДФЛ(Объект, ОбъектФормы) Экспорт
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	ДокументОбъект = ОбъектФормы.Скопировать();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.СформироватьДоходыНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(
		Запрос.МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.ПериодРегистрации, Ложь, Объект.ПланируемаяДатаВыплаты, ДокументОбъект.Движения);
	
	ОтменитьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Объект.НДФЛ.Добавить(), ДанныеНДФЛ);
	КонецЦикла;
	
	Для каждого ДанныеВычетов Из РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПримененныеВычетыНаДетейИИмущественные.Добавить(), ДанныеВычетов);
	КонецЦикла;
	
	РасчетЗарплатыБазовый.ЗаполнитьКорректировкиВыплаты(Объект, "ПериодРегистрации");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
