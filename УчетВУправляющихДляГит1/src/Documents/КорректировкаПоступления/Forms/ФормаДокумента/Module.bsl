
#Область Переменные

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
			ДокументСсылка    = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
			ДокументОснование = Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка, Объект.Ссылка);
			
			Объект.КорректироватьБУиНУ  = ДоступнаКорректировкаБУиНУ;
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументПоступления, "Дата");
				РеквизитыДокументаОснования   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата");
			
				Если Объект.ДокументПоступления <> ДокументОснование 
					И РеквизитыДокументаПоступления.Дата < РеквизитыДокументаОснования.Дата Тогда
					ПоследнийДокументИсправления = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.КорректировкаПоступления",
		"ФормаДокумента",
		НСтр("ru='Новости: Корректировка поступления'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПоследнийДокументИсправления) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
			|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююКорректировкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СчетФактура) И ОшибкаЗаполненияРеквизитовСФ Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните номер и дату корректировочного счета-фактуры'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьСчетФактура");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводГрузоотправителяГрузополучателя" Тогда
		Объект.Грузоотправитель = ВыбранноеЗначение.Грузоотправитель;
		Объект.Грузополучатель  = ВыбранноеЗначение.Грузополучатель;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_СчетФактураПолученныйКорректировочный"
			ИЛИ ИмяСобытия = "Запись_СчетФактураПолученныйИсправлениеСобственнойОшибки")
			И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования")
			И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		СчетФактура = Источник;
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Параметр.РеквизитыСФ);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ОшибкиЗаполненияСчетаФактуры();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеКорректировкаПоступления";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Отказ = НЕ ПроверитьЗаполнение();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ПредставлениеДокумента = Документы.КорректировкаПоступления.ПолучитьПредставлениеДокумента(Объект.Ссылка);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	ЗарегистрироватьСчетФактуруНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка,
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		ОповеститьОбИзменении(СчетФактура);
	КонецЕсли;
	
	Оповестить("Запись_КорректировкаПоступления", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		ПроверитьРеквизитыСчетаФактурыНаИсправлениеСобственнойОшибки(Отказ);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьДату = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
		
		ТекстНеЗаполненНомер = НСтр("ru = 'Номер исправления'");
		ТекстНеЗаполненаДата = НСтр("ru = 'Дата исправления'");
		
		Если НЕ ЗначениеЗаполнено(НомерИсправления)
			И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ТекстНеЗаполненНомер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерИсправления",, Отказ);
			
		КонецЕсли;
		
		ПроверятьДату = ЗначениеЗаполнено(НомерИсправления);
		
	Иначе
		
		ТекстНеЗаполненНомер = НСтр("ru = 'Номер корректировочного счета-фактуры'"); 
		ТекстНеЗаполненаДата = НСтр("ru = 'Дата корректировочного счета-фактуры'"); 
		
		Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) 
			И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ТекстНеЗаполненНомер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
			
		КонецЕсли;
		
		ПроверятьДату = ЗначениеЗаполнено(НомерСчетаФактурыПолученного);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ПроверятьДату Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненаДата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	Иначе
		ТекущийВидОперации = Объект.ВидОперации;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
		Объект.Дата = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)
	
	Если Объект.Дата < Объект.ДатаИсправления Тогда
		Объект.Дата = Объект.ДатаИсправления;
	КонецЕсли;
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерИсправленияПриИзменении(Элемент)
	
	ДатаСчетаФактурыПолученного = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	ДокументПоступленияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИсправляемогоДокумента = СведенияОбИсправляемомДокументе(ВыбранноеЗначение, Объект.Ссылка);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Если (НЕ ЗначениеЗаполнено(РеквизитыИсправляемогоДокумента.ДокументОснование)
			ИЛИ ТипЗнч(РеквизитыИсправляемогоДокумента.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ РеквизитыИсправляемогоДокумента.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")
			ИЛИ РеквизитыИсправляемогоДокумента.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАванс"))
			И НЕ (ТипЗнч(РеквизитыИсправляемогоДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			И РеквизитыИсправляемогоДокумента.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")) Тогда
			
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru = 'В качестве основания можно выбрать только счет-фактуру по поступлению,
				|введенный на основании документа ""Авансовый отчет""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки")
		И НЕ ЗначениеЗаполнено(РеквизитыИсправляемогоДокумента.СчетФактура) Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru = 'У выбранного документа не зарегистрирован счет-фактура.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	Иначе
		
		Если ВыбранноеЗначение <> РеквизитыИсправляемогоДокумента.ПоследнийДокумент Тогда
			СтандартнаяОбработка = Ложь;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПоследнийДокумент", РеквизитыИсправляемогоДокумента.ПоследнийДокумент);
			ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?'");
			Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительГрузополучательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр"                   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Грузоотправитель"                 , Объект.Грузоотправитель);
	ПараметрыФормы.Вставить("ГрузоотправительПоУмолчанию"      , Объект.Контрагент);
	ПараметрыФормы.Вставить("Грузополучатель"                  , Объект.Грузополучатель);
	ПараметрыФормы.Вставить("ГрузополучательПоУмолчанию"       , Объект.Организация);
	ПараметрыФормы.Вставить("ПоставщикРезидентТаможенногоСоюза", Ложь);
	ПараметрыФормы.Вставить("КодВидаТранспорта"                , "");
	
	ОткрытьФорму("ОбщаяФорма.ВводГрузоотправителяГрузополучателя", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьБУиНУПриИзменении(Элемент)
	
	КорректироватьБУиНУПриИзмененииНаСервере();
	
	Если Корректировать = 1 И ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по основанию?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПерезаполнитьПоОснованиюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Перезаполнение документа'"));
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииСчетаФактурыПослеИзмененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Ложь);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперацииСчетаФактурыПослеИзменения);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзмененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Истина);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	ДатаСчетаФактурыПолученного = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСчетФактураИсправляемыйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, СчетФактураИсправляемый);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтотОбъект, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если Объект.КорректироватьБУиНУ Тогда
		Если СтрокаТаблицы.Номенклатура = Неопределено Тогда
			СтрокаТаблицы.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	Если НоваяСтрока Тогда
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения          = 0;
			СтрокаТаблицы.ЦенаДоИзменения                = 0;
			СтрокаТаблицы.СуммаДоИзменения               = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения            = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения           = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			СтрокаТаблицы.НомерГТДДоИзменения            = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
			СтрокаТаблицы.СтранаПроисхожденияДоИзменения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаВРозницеДоИзменения  = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НомерГТД, НомерГТДДоИзменения,
		|СтранаПроисхождения, СтранаПроисхожденияДоИзменения,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|ОтражениеВУСН, Всего, ВсегоДоКорректировки, ВсегоДоИзменения, СчетУчетаЗабалансовый");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КорректироватьБУиНУ, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения, ПрименяютсяСтавки4и2);
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		ЗначениеСтавкиНДС,
		0);
		
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		ЗначениеСтавкиНДС,
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНДСНаКлиенте(
		СтрокаТаблицы,
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииСуммаНДСНаКлиенте(
		СтрокаТаблицы,
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Товары.Контрагент");
	ПричиныИзменения.Добавить("Товары.ДоговорКонтрагента"); // На сервере договор может измениться
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
		
	Изменения = КомитентПриИзмененииСервер(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "Товары", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Товары);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.ДоговорКонтрагента",
		Объект,
		Элементы.Товары.ТекущиеДанные);
		
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчета)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета).Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		СтрокаТаблицы,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект,
		СтрокаТаблицы,
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения = 0;
			СтрокаТаблицы.ЦенаДоИзменения       = 0;
			СтрокаТаблицы.СуммаДоИзменения      = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения   = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, СодержаниеДоИзменения, Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|ОтражениеВУСН, ПодразделениеЗатратДоступность,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность,
		|СубконтоНУ1Доступность, СубконтоНУ2Доступность, СубконтоНУ3Доступность,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, ПрименяютсяСтавки4и2, КорректироватьБУиНУ");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ДанныеСтрокиТаблицы.Свойство("СчетЗатрат") Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	Если ДанныеСтрокиТаблицы.Свойство("СчетЗатратНУ") Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения, ПрименяютсяСтавки4и2);
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		ЗначениеСтавкиНДС,
		0);
		
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		ЗначениеСтавкиНДС,
		0);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетЗатратНУ <> ТекущиеДанные.СчетЗатрат Тогда
		
		ТекущиеДанные.СчетЗатратНУ = ТекущиеДанные.СчетЗатрат;
		
		Для Индекс = 1 По 3 Цикл
			ТекущиеДанные["СубконтоНУ" + Индекс] = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект,
		СтрокаТаблицы,
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ1ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ2ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ3ПриИзменении(Элемент)
	
	ПриИзмененииСубконтоНУ(3);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения = 0;
			СтрокаТаблицы.ЦенаДоИзменения       = 0;
			СтрокаТаблицы.СуммаДоИзменения      = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения   = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, СодержаниеДоИзменения, Количество,
		|Цена, ЦенаДоКорректировки, ЦенаДоИзменения,
		|Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС, СтавкаНДСДоИзменения,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС, КорректироватьБУиНУ, ВалютаДокумента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ИсправлениеКорректировки", ИсправлениеКорректировки);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииКоличествоЦенаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоИзмененияПриИзменении(Элемент)
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоКорректировкиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС(СтрокаТаблицы), ПрименяютсяСтавки4и2),
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения);
	
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
		ЗначениеСтавкиНДС,
		1);
		
	ПриИзмененииСуммаНаКлиенте(
		СтрокаТаблицы, 
		"КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ВсегоДоКорректировки", 
		ЗначениеСтавкиНДС,
		1);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("АгентскиеУслуги.Контрагент");
	ПричиныИзменения.Добавить("АгентскиеУслуги.ДоговорКонтрагента"); // На сервере договор может измениться
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
		
	Изменения = КомитентПриИзмененииСервер(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "АгентскиеУслуги", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.АгентскиеУслуги);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"АгентскиеУслуги.ДоговорКонтрагента",
		Объект,
		Элементы.АгентскиеУслуги.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	Отказ = Не ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления);
	
	Если Отказ Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументПоступления", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтотОбъект, Ложь, Истина);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуруНаИсправлениеСобственнойОшибки(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	Объект   = ЭтотОбъект.Объект;
	
	// Установить видимость реквизитов и заголовков колонок.
	Элементы.ГруппаТовары.Видимость = НЕ (ЗначениеЗаполнено(ЭтотОбъект.ДокументПоступленияСсылка)
		И ТипЗнч(ЭтотОбъект.ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
		ИЛИ Объект.Товары.Количество() > 0;
	
	Элементы.ГруппаУслуги.Видимость = НЕ ЭтотОбъект.ЭтоКомиссияПоПродаже ИЛИ Объект.Услуги.Количество() > 0;
	Элементы.ГруппаАгентскиеУслуги.Видимость = ЭтотОбъект.ВозможнаКомиссияПоЗакупке ИЛИ Объект.АгентскиеУслуги.Количество() > 0;
	
	Элементы.ГруппаНомерДата.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки");
	Элементы.ГруппаНомерДатаДокумента.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ГруппаНомерДатаИсправления.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	Элементы.ГруппаДатаНомерПолучения.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	
	Элементы.ИсправляемыйДокументПоступления.Видимость =
		ЗначениеЗаполнено(Объект.ДокументПоступления) И НЕ Объект.ДокументПоступления = Объект.ИсправляемыйДокументПоступления;
	
	Если ЭтотОбъект.ДоступнаКорректировкаБУиНУ Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Вставить(0, 1, НСтр("ru='Во всех разделах учета'"));
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если ЭтотОбъект.Корректировать = 1 Тогда
				ЭтотОбъект.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Добавить(2, НСтр("ru='Только в печатной форме'"));
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если ЭтотОбъект.Корректировать = 2 Тогда
				ЭтотОбъект.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КорректировочныйСчетФактура =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	
	ИсправлениеКорректировки =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	ЭтоИсправлениеСобственнойОшибки = ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления)
		И Год(ЭтотОбъект.ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		// Прошлые года
		Элементы.ГруппаОтражениеДоходовИРасходов.Видимость   = Истина;
		Элементы.СтатьяПрочихДоходовИРасходов.Видимость      = Истина;
		Элементы.ГруппаСпособОтраженияУслугТекГода.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументПоступления)
		И Месяц(ЭтотОбъект.ДатаДокументаПоступления) < Месяц(Объект.Дата)
		И Объект.Услуги.Количество() > 0
		И Объект.КорректироватьБУиНУ Тогда
		// Услуги прошлых месяцев года
		Элементы.ГруппаОтражениеДоходовИРасходов.Видимость   = Истина;
		Элементы.СтатьяПрочихДоходовИРасходов.Видимость      = Ложь;
		Элементы.ГруппаСпособОтраженияУслугТекГода.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтражениеДоходовИРасходов.Видимость   = Ложь;
	КонецЕсли;
	
	Если КорректировочныйСчетФактура Тогда
		ТекстЗаголовка = НСтр("ru='Корр. счет-фактура №'");
		Элементы.НомерСчетаФактурыПолученного.Видимость = Истина;
		Элементы.НомерИсправленияСчетаФактуры.Видимость = Ложь;
		Элементы.НомерСчетаФактурыПолученного.Заголовок = ТекстЗаголовка;
	Иначе
		Если ЭтотОбъект.ИсправлениеКорректировки Тогда
			ТекстЗаголовка = НСтр("ru='Корр. счет-фактура исправление №'");
		Иначе
			ТекстЗаголовка = НСтр("ru='Счет-фактура исправление №'");
		КонецЕсли;
		Элементы.НомерСчетаФактурыПолученного.Видимость = Ложь;
		Элементы.НомерИсправленияСчетаФактуры.Видимость = Истина;
		Элементы.НомерИсправленияСчетаФактуры.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	ТребуетсяСчетФактура = ЭтотОбъект.ТребуетсяСчетФактура
		ИЛИ ТребуетсяАктуализироватьСчетФактуру(ЭтотОбъект.СчетФактура, ЭтотОбъект.Объект.ВидОперации);
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Ложь,
		ТребуетсяСчетФактура,
		ЭтотОбъект.СчетФактура);
	
	Элементы.ГруппаНомерДатаСчетФактуры.Видимость  = НЕ ЭтоИсправлениеСобственнойОшибки;
	Элементы.ДекорацияНадписьСчетФактура.Видимость = ЭтоИсправлениеСобственнойОшибки;
	Элементы.ГруппаРеквизитыСчетаФактуры.Видимость = ЭтоИсправлениеСобственнойОшибки;
	
	Если ЭтоИсправлениеСобственнойОшибки Тогда
		Если ЭтотОбъект.ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(ЭтотОбъект.СчетФактура)
			ИЛИ ТребуетсяАктуализироватьСчетФактуру(ЭтотОбъект.СчетФактура, ЭтотОбъект.Объект.ВидОперации) Тогда
			Элементы.ЗарегистрироватьСчетФактуруНаИсправлениеСобственнойОшибки.Видимость = Истина;
			Элементы.ЗарегистрироватьСчетФактуру.Видимость                               = Ложь;
		Иначе
			Элементы.ЗарегистрироватьСчетФактуруНаИсправлениеСобственнойОшибки.Видимость = Ложь;
			Элементы.ЗарегистрироватьСчетФактуру.Видимость                               = Истина;
		КонецЕсли;
		
		УправлениеВидимостьюРеквизитовИсправляемогоСчетаФактуры(ЭтотОбъект);
		
	КонецЕсли;
	
	Элементы.ГруппаРеквизитыСчетаФактуры.ТолькоПросмотр = НЕ ДоступноРедактированиеРеквизитовИсправляемогоСчетаФактуры(
		ЭтотОбъект.СчетФактураИсправляемый,
		ЭтотОбъект.СчетФактура,
		ЭтотОбъект.Объект.ДокументПоступления,
		ЭтотОбъект.Объект.ВидОперации);
	
	Элементы.ВосстановитьНДС.Видимость =
		(КорректировочныйСчетФактура ИЛИ ИсправлениеКорректировки) И НЕ ЭтотОбъект.РаздельныйУчетНДСНаСчете19;
	
	ЗаполнитьСписокВыбораСтавокНДС(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступноРедактированиеРеквизитовИсправляемогоСчетаФактуры(Знач СчетФактураИсправляемый, Знач СчетФактура, Знач ДокументПоступления, Знач ВидОперации)
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ЗначениеЗаполнено(СчетФактураИсправляемый) И НЕ ЗначениеЗаполнено(СчетФактура);
	Если НЕ Результат Тогда
		Результат = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправляемыйСчетФактура") = СчетФактураИсправляемый;
	КонецЕсли;
	Если НЕ Результат Тогда
		Результат = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправлениеСобственнойОшибки")
			И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветГиперссылкаТабличнойЧасти = ЦветаСтиля.ЦветГиперссылки;
	ЦветНезаполненныйРеквизит     = ЦветаСтиля.НезаполненныйРеквизит;
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах         = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ДокументПоступленияСсылка   = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	
	РеквизитыДокументаПоступления = Неопределено;
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата, ВидОперации");
		ВидОперацииПоступления = РеквизитыДокументаПоступления.ВидОперации;
	ИначеЕсли ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
	КонецЕсли;
	
	ДатаДокументаПоступления   = ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
	ДоступнаКорректировкаБУиНУ = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(Объект.ДокументПоступления);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС, НДСПоСтавкам4и2");
	
	ВидДоговораДокумента = РеквизитыДоговора.ВидДоговора;
	УчетАгентскогоНДС    = РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
	
	ТипСкладаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	
	ЭтоКомиссияПоПродаже = ВидДоговораДокумента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		И НЕ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный");
	ВозможнаКомиссияПоЗакупке = НЕ ЭтоКомиссияПоПродаже
		И ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	
	ЭтоНТТ = ТипСкладаДокумента = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	РозницаВПродажныхЦенах = НЕ ТипСкладаДокумента = Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах И НЕ ЭтоКомиссияПоПродаже;
	
	Если ЭтоНТТ И РозницаВПродажныхЦенах И Объект.Товары.Количество() > 0 Тогда
		ТоварыСвернуты = Истина;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСвернуты = Ложь;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	Корректировать = ?(Объект.КорректироватьБУиНУ, 1, ?(Объект.КорректироватьНДС, 0, 2));
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.Ссылка);
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		УстановитьПризнакСчетФактураИСО();
		ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
	КонецЕсли;
	
	ТребуетсяСчетФактура = ТребуетсяСчетФактура();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	
	ПредставлениеДокумента = Документы.КорректировкаПоступления.ПолучитьПредставлениеДокумента(Объект.Ссылка);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокКодовОпераций();
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	НадписьСтароеЗначение = НСтр("ru='Старое значение'");
	НадписьНовоеЗначение  = НСтр("ru='Новое значение'");
	ГрузоотправительГрузополучатель = НСтр("ru = 'Грузоотправитель и грузополучатель'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(ЭтотОбъект, СтруктураПредставленияДокумента)
	
	ЭтотОбъект.Заголовок = СтруктураПредставленияДокумента.ПредставлениеДокумента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПлательщикНДС              = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяУСН             = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы        = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ             = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ВерсияКодовВидовОпераций   = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакСчетФактураИСО()
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		СчетФактураИСО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправлениеСобственнойОшибки");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, РеквизитыСФ = Неопределено, ОбновитьРеквизитыИсправляемогоСчетаФактуры = Истина)
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		ЭтотОбъект,
		РеквизитыСФ,
		ЭтотОбъект.ТребуетсяСчетФактура);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДСДоИзменения.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДСДоИзменения.СписокВыбора);
	
	Для Каждого СписокВыбора Из МассивЭлементов Цикл
		
		Если ЭтотОбъект.ПрименяютсяСтавки4и2 Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		Иначе
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюРеквизитовИсправляемогоСчетаФактуры(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	ИсправлениеСчетФактуры = ЭтотОбъект.ИсправлениеСчетФактураИсправляемый;
	ЭтоЮрЛицо = СтрДлина(СокрЛП(ЭтотОбъект.ИННКонтрагентаДоИзменения)) = 10;
	ИСОКорректировочногоСФ = ТипЗнч(ЭтотОбъект.Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	Элементы.ГруппаНомерИсправления.Видимость            = ИсправлениеСчетФактуры;
	Элементы.ГруппаВходящийНомер.Видимость               = НЕ ИсправлениеСчетФактуры;
	Элементы.ГруппаКППКонтрагента.Видимость              = ЭтоЮрЛицо;
	Элементы.ГруппаКодВидаОперацииНаУменьшение.Видимость = ИСОКорректировочногоСФ;
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаГлавное Тогда
		
		Если НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("ГруппаГлавноеПроинициализировано") Тогда
			ЭтотОбъект.УстановитьУсловноеОформлениеГруппыГлавное();
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если ЭтотОбъект.ПрименяютсяСтавки4и2
			И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			ЭтотОбъект.УстановитьУсловноеОформлениеТовары();
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если НЕ (ЭтотОбъект.ПрименяетсяУСН ИЛИ ЭтотОбъект.ПлательщикНДФЛ)
			И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если ЭтотОбъект.ПрименяютсяСтавки4и2
			И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			ЭтотОбъект.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАгентскиеУслуги
		И НЕ ЭтотОбъект.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано") Тогда
		
		ЭтотОбъект.УстановитьУсловноеОформлениеАгентскиеУслуги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыЦенаВРознице, ТоварыСуммаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРозницеДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделениеПоСтавкамВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ Товары, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ Услуги, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ АгентскиеУслуги, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСчетЗатратНУ, УслугиСубконтоНУ1, УслугиСубконтоНУ2, УслугиСубконтоНУ3

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ3");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСДоИзменения, УслугиСтавкаНДСДоИзменения, АгентскиеУслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссияПоПродаже", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);


	// ТоварыСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);


	// УслугиОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВозможнаКомиссияПоЗакупке", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоНУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	
	// Субконто БУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Субконто НУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГруппыГлавное() Экспорт
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("ГруппаГлавноеПроинициализировано", Истина);
	СчетФактураФормы.УстановитьУсловноеОформлениеИсправлениеСобственнойОшибки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее()

	НастройкиУсловногоОформления.Вставить("ТоварыОбщееПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРозницеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТДДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхожденияДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются из документа-основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Товары свернуты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);


	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ТоварыПрименяютсяСтавки4и2Проинициализировано", Истина);


	// ТоварыСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиНУ();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто3");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОтражениеВУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Услуги.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Услуги.ПодразделениеЗатратНУДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиНУ()

	Если ПрименяетсяУСН ИЛИ ПлательщикНДФЛ Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиНУПроинициализировано", Истина);


	// УслугиСчетЗатратНУ, УслугиСубконтоНУ1, УслугиСубконтоНУ2, УслугиСубконтоНУ3

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ3");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// АгентскиеУслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормыПродолжение

&НаКлиенте
Процедура ВопросИспользоватьПоследнююКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДокументПоступления(ПоследнийДокументИсправления);
		ОбновитьСчетФактуруПоПоступлению();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		Элементы.КодВидаОперацииСчетаФактурыПослеИзменения.СписокВыбора,
		Объект.Дата);
		
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
			Элементы.КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения.СписокВыбора,
			Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДокументПоступления(НовыйДокументПоступления)
	
	Объект.ДокументПоступления = НовыйДокументПоступления;
	ДокументПоступленияПриИзмененииСервер();
	Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыСчетаФактурыНаИсправлениеСобственнойОшибки(Отказ)
	
	Отказ = НЕ СчетФактураФормы.ФорматныйКонтрольИННКППИсправлениеСобственнойОшибкиПройден(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru='Документ-основание'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументПоступления", , Отказ);
	КонецЕсли;
	
	ПроверяемыеПоляФормы = НовыйСтруктураПроверяемыхПолейСчетаФактурыНаИсправлениеСобственнойОшибки();
	
	Для Каждого КлючЗначение Из ПроверяемыеПоляФормы Цикл
		ИмяПроверяемогоПоля = КлючЗначение.Ключ;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяПроверяемогоПоля]) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", КлючЗначение.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПроверяемогоПоля, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйСтруктураПроверяемыхПолейСчетаФактурыНаИсправлениеСобственнойОшибки()
	
	// Ключ - имя реквизита формы, значение - текст сообщения об ошибке.
	Результат = Новый Структура;
	
	Если ИсправлениеСчетФактураИсправляемый Тогда
		Результат.Вставить("НомерИсправленияСчетаФактурыДоИзменения"   , НСтр("ru='Номер исправления исходного счета-фактуры'"));
		Результат.Вставить("НомерИсправленияСчетаФактурыПослеИзменения", НСтр("ru='Номер исправления счета-фактуры'"));
	Иначе
		Результат.Вставить("НомерСчетаФактурыДоИзменения"   , НСтр("ru='Номер исходного счета-фактуры'"));
		Результат.Вставить("НомерСчетаФактурыПослеИзменения", НСтр("ru='Номер счета-фактуры после исправления'"));
	КонецЕсли;
	
	Результат.Вставить("ДатаСчетаФактурыДоИзменения"   , НСтр("ru='Дата исходного счета-фактуры'"));
	Результат.Вставить("ДатаСчетаФактурыПослеИзменения", НСтр("ru='Дата счета-фактуры после исправления'"));
	Результат.Вставить("ИННКонтрагентаДоИзменения"     , НСтр("ru='ИНН контрагента до исправления'"));
	Результат.Вставить("ИННКонтрагента"                , НСтр("ru='ИНН контрагента после исправления'"));
	Если СтрДлина(ИННКонтрагентаДоИзменения) = 10 Тогда
		Результат.Вставить("КППКонтрагентаДоИзменения", НСтр("ru='КПП контрагента до исправления'"));
		Результат.Вставить("КППКонтрагента"           , НСтр("ru='КПП контрагента после исправления'"));
	КонецЕсли;
	
	Результат.Вставить("КодВидаОперацииСчетаФактурыДоИзменения"   , НСтр("ru='Код вида операции исходного счета-фактуры'"));
	Результат.Вставить("КодВидаОперацииСчетаФактурыПослеИзменения", НСтр("ru='Код вида операции счета-фактуры после исправления'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыПродолжение

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И Год(ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзмененииКлиент()
	
	СчетФактура = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Объект.Контрагент         = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
		СчетФактураИсправляемый   = Неопределено;
	КонецЕсли;
	
	ДокументПоступленияПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) И Объект.КорректироватьБУиНУ Тогда
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.АгентскиеУслуги.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Заполнить документ по основанию?'");
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
		Иначе
			ЗаполнитьДокументСервер();
			ОбновитьСчетФактуруПоПоступлению();
		КонецЕсли;
	Иначе
		ОбновитьСчетФактуруПоПоступлению();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументСервер();
		
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
		
	КонецЕсли;
	
	ОбновитьСчетФактуруПоПоступлению();
	
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьСвойстваШапки();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ДоступнаКорректировкаБУиНУ  = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(Объект.ДокументПоступления);
	ДокументПоступленияСсылка   = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	
	Объект.КорректироватьБУиНУ  = ДоступнаКорректировкаБУиНУ;
	Объект.КорректироватьНДС = Истина;
	
	Корректировать = ?(Объект.КорректироватьБУиНУ, 1, ?(Объект.КорректироватьНДС, 0, 2));
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС, НДСПоСтавкам4и2");
	
	ВидДоговораДокумента = РеквизитыДоговора.ВидДоговора;
	УчетАгентскогоНДС    = РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
	
	РеквизитыДокументаПоступления = Неопределено;
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата, ВидОперации");
		ВидОперацииПоступления = РеквизитыДокументаПоступления.ВидОперации;
	ИначеЕсли ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
	КонецЕсли;
	
	ТипСкладаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	
	ЭтоКомиссияПоПродаже = ВидДоговораДокумента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		И НЕ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный");
	ВозможнаКомиссияПоЗакупке = НЕ ЭтоКомиссияПоПродаже
		И ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	
	ЭтоНТТ = ТипСкладаДокумента = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	РозницаВПродажныхЦенах = НЕ ТипСкладаДокумента = Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах И НЕ ЭтоКомиссияПоПродаже;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДатаДокументаПоступления = ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
	
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И Год(ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов =
				ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления);
	
	ИсправлениеКорректировки =
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
		
	
	ТребуетсяСчетФактура = ТребуетсяСчетФактура();
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект, ОбновитьРеквизитыИсправляемогоСчетаФактуры = Истина)
	
	Элементы = ЭтотОбъект.Элементы;
	КорректировкаПоступления = ЭтотОбъект.Объект;
	
	Если НЕ ЗначениеЗаполнено(КорректировкаПоступления.ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(
		КорректировкаПоступления.ДокументПоступления);
	
	Если ЗначениеЗаполнено(РеквизитыСФ) Тогда
		ЭтотОбъект.СчетФактураИсправляемый = РеквизитыСФ.Ссылка;
		ЭтотОбъект.ПредставлениеСчетаФактураИсправляемый = НСтр("ru='Счет-фактура'")
			+ " " + РеквизитыСФ.КраткоеПредставление;
		Элементы.ПредставлениеСчетаФактураИсправляемый.Гиперссылка = Истина;
		Элементы.ПредставлениеСчетаФактураИсправляемый.ЦветТекста = ЭтотОбъект.ЦветГиперссылкаТабличнойЧасти;
		ЭтотОбъект.ИсправлениеСчетФактураИсправляемый = РеквизитыСФ.Исправление;
		
	Иначе
		ЭтотОбъект.СчетФактураИсправляемый = Неопределено;
		ЭтотОбъект.ПредставлениеСчетаФактураИсправляемый = НСтр("ru='<Не выбрано основание>'");
		Элементы.ПредставлениеСчетаФактураИсправляемый.Гиперссылка = Ложь;
		Элементы.ПредставлениеСчетаФактураИсправляемый.ЦветТекста = ЭтотОбъект.ЦветНезаполненныйРеквизит;
		ЭтотОбъект.ИсправлениеСчетФактураИсправляемый = Ложь;
		
	КонецЕсли;
	
	Если ОбновитьРеквизитыИсправляемогоСчетаФактуры Тогда
		ОбновитьРеквизитыИсправляемогоСчетаФактуры(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыИсправляемогоСчетаФактуры(ЭтотОбъект)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Объект.ДокументПоступления)
		ИЛИ НЕ ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		СчетФактура = Неопределено;
	Иначе
		СчетФактура = ЭтотОбъект.СчетФактура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И НЕ ЭтотОбъект.СчетФактураИСО Тогда
		СчетФактура = Неопределено;
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСВызовСервера.РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(
		СчетФактура,
		ЭтотОбъект.СчетФактураИсправляемый);
	
	Элементы = ЭтотОбъект.Элементы;
	ЭтоЮрЛицо = СтрДлина(СокрЛП(РеквизитыСФ.ИННКонтрагентаДоИзменения)) = 10;
	Если ЭтоЮрЛицо Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		Маска = "9999999999";
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
		Маска = "999999999999";
	КонецЕсли;
	
	Элементы.ИННКонтрагентаДоИзменения.ОграничениеТипа = ОграничениеТипа;
	Элементы.ИННКонтрагентаДоИзменения.Маска           = Маска;
	Элементы.ИННКонтрагента.ОграничениеТипа            = ОграничениеТипа;
	Элементы.ИННКонтрагента.Маска                      = Маска;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыСФ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИсправлениеСобственнойОшибки(Знач ЭтотОбъект)
	
	Результат = ЭтотОбъект.Объект.ВидОперации =
		ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяСчетФактура()
	
	Результат = НЕ Корректировать = 2 И НЕ УчетАгентскогоНДС И НЕ ЭтоКомиссияПоПродаже
		И ВидОперацииПоступления <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяАктуализироватьСчетФактуру(Знач СчетФактура, Знач ВидОперации)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправлениеСобственнойОшибки");
	
	Если НЕ Результат Тогда
		Результат = НЕ ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ИсправлениеСобственнойОшибки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСервер()
	
	Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетФактуруПоПоступлению()
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		УстановитьПризнакСчетФактураИСО();
		ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОшибкиЗаполненияСчетаФактуры()
	
	РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, 
		"ПометкаУдаления, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	ОшибкаЗаполненияРеквизитовСФ = НЕ РеквизитыСФ.ПометкаУдаления
		И НЕ ЗначениеЗаполнено(РеквизитыСФ.НомерВходящегоДокумента)
		И НЕ ЗначениеЗаполнено(РеквизитыСФ.ДатаВходящегоДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ДокументыОснования.Количество() > 1 Тогда
		
		ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыПолученногоПоТипуОснования(Объект.Ссылка);
		Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
			ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			Исправление = Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			
			Если НЕ СчетФактура.ВидСчетаФактуры = ВидСчетаФактурыПоОснованию
				ИЛИ Исправление <> СчетФактура.Исправление Тогда
				
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Попытка
					СчетФактураОбъект.Заблокировать();
					СтруктураПоиска = Новый Структура("ДокументОснование", Объект.Ссылка);
					СтрокиСОснованием = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаСОснованием Из СтрокиСОснованием Цикл
						СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаСОснованием);
					КонецЦикла;
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					СчетФактура = Неопределено;
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"), СчетФактура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления")
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		УстановитьПризнакСчетФактураИСО();
		ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	ТребуетсяСчетФактура = ТребуетсяСчетФактура();
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Организация", Объект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИсправляемомДокументе(ВыбранноеЗначение, СсылкаНаТекущийДокумент)
	
	СтруктураРезультата = Новый Структура();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		СтруктураРезультата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВыбранноеЗначение, "ДокументОснование, ВидСчетаФактуры, ДоговорКонтрагента");
		СтруктураРезультата.Вставить("ВидДоговораКонтрагента", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРезультата.ДоговорКонтрагента, "ВидДоговора"));
		
	Иначе
		
		ДокументСсылка    = ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Ложь);
		ПоследнийДокумент = Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(
			ДокументСсылка, СсылкаНаТекущийДокумент);
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ВыбранноеЗначение);
		
		РеквизитыВыбранногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВыбранноеЗначение, "ДоговорКонтрагента, ВалютаДокумента");
		РасчетыВУсловныхЕдиницахВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыВыбранногоДокумента.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		
		// Запомним сразу как данные и первичного и последнего исправляемого документа.
		СтруктураРезультата.Вставить("ВыбранныйДокумент"                  , ВыбранноеЗначение);
		СтруктураРезультата.Вставить("ВыбранныйДокументДоговорКонтрагента", РеквизитыВыбранногоДокумента.ДоговорКонтрагента);
		СтруктураРезультата.Вставить("ВыбранныйДокументВалюта"            , РеквизитыВыбранногоДокумента.ВалютаДокумента);
		СтруктураРезультата.Вставить("ВыбранныйДокументРасчетыВУЕ"        , РасчетыВУсловныхЕдиницахВыбранногоДокумента);
		СтруктураРезультата.Вставить("СчетФактура"                        , СчетФактура);
		
		СтруктураРезультата.Вставить("ПоследнийДокумент"                  , ПоследнийДокумент);
		СтруктураРезультата.Вставить("ПоследнийДокументДоговорКонтрагента", РеквизитыВыбранногоДокумента.ДоговорКонтрагента);
		СтруктураРезультата.Вставить("ПоследнийДокументВалюта"            , РеквизитыВыбранногоДокумента.ВалютаДокумента);
		СтруктураРезультата.Вставить("ПоследнийДокументРасчетыВУЕ"        , РасчетыВУсловныхЕдиницахВыбранногоДокумента);
		
		Если ВыбранноеЗначение <> ПоследнийДокумент Тогда
			// Также сразу получим реквизиты последнего исправляемого документа, чтобы
			// потом в зависимости от ответа пользователя использовать либо данные выбранного
			// либо данные последнего исправляемого документа.
			РеквизитыПоследнегоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПоследнийДокумент, "ДоговорКонтрагента, ВалютаДокумента");
			РасчетыВУсловныхЕдиницахПоследнегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыПоследнегоДокумента.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
			
			СтруктураРезультата.Вставить("ПоследнийДокументДоговорКонтрагента", РеквизитыПоследнегоДокумента.ДоговорКонтрагента);
			СтруктураРезультата.Вставить("ПоследнийДокументВалюта"            , РеквизитыПоследнегоДокумента.ВалютаДокумента);
			СтруктураРезультата.Вставить("ПоследнийДокументРасчетыВУЕ"        , РасчетыВУсловныхЕдиницахПоследнегоДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиенте
Процедура ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументПоступления = ДополнительныеПараметры.ПоследнийДокумент;
	Иначе
		Объект.ДокументПоступления = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	ДокументПоступленияПриИзмененииКлиент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный)
	
	Возврат УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный);
	
КонецФункции

&НаСервере
Процедура КорректироватьБУиНУПриИзмененииНаСервере()
	
	Объект.КорректироватьБУиНУ = (Корректировать = 1);
	Объект.КорректироватьНДС = (Корректировать <> 2);
	
	ТребуетсяСчетФактура = ТребуетсяСчетФактура();
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект);
	Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
		УстановитьПризнакСчетФактураИСО();
		ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументСервер();
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
		Корректировать = 0;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Уменьшение Тогда
			КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения = ВыбранныйКод.Значение;
		Иначе
			КодВидаОперацииСчетаФактурыПослеИзменения = ВыбранныйКод.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродолжение

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(ЭтотОбъект)
	
	КорректировкаПоступления = ЭтотОбъект.Объект;
	
	МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");
	
	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;
	
	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + КорректировкаПоступления[ТекущаяТабличнаяЧасть].Итог("Всего");
		СуммаНДСИтогов = СуммаНДСИтогов + КорректировкаПоступления[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
	КонецЦикла;
	
	ЭтотОбъект.ИтогиВсего    = СуммаИтогов;
	ЭтотОбъект.ИтогиВсегоНДС = СуммаНДСИтогов;
	
КонецПроцедуры

// Перегружает данные из одной коллекции в другую с переименованием ключей
//
// Параметры:
//  <Источник>            - Структура, ДанныеФормыКоллекция - коллекция из которой выгружаем
//  <ИменаПолейИсточник>  - Строка - строка свойств коллекции источника через запятую
//  <ИменаПолейИсточник>  - Строка - строка свойств коллекции источника через запятую
//
// Возвращаемое значение:
//   Структура             - структура с ключами из ИменаПолейПриемник содержащая данные исходной коллекции
//
&НаКлиенте
Функция ПреобразоватьКоллекцию(Источник, ИменаПолейИсточник, ИменаПолейПриемник)
	Приемник = Новый Структура;
	
	ПоляИсточник = СтрРазделить(ИменаПолейИсточник, ",");
	ПоляПриемник = СтрРазделить(ИменаПолейПриемник, ",");
	
	Для НомерПоля = 0 По ПоляИсточник.Количество() - 1 Цикл
		ИмяПоляИсточник = СокрЛП(ПоляИсточник[НомерПоля]);
		ИмяПоляПриемник = СокрЛП(ПоляПриемник[НомерПоля]);
		
		Если ЗначениеЗаполнено(ИмяПоляПриемник) Тогда
			Приемник.Вставить(
				ИмяПоляПриемник, 
				?(ЗначениеЗаполнено(ИмяПоляИсточник), Источник[ИмяПоляИсточник], Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Приемник;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, ЗначениеСтавкиНДС)
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
	СтрокаТабличнойЧасти.Всего    = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦенаНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей, ЗначениеСтавкиНДС, ЗначениеПустогоКоличества)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ПриведеннаяСтрока, ЗначениеПустогоКоличества);
	
	ПересчитатьСуммуНДС(ПриведеннаяСтрока, ЗначениеСтавкиНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры
	
&НаКлиенте
Процедура ПриИзмененииСуммаНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей, ЗначениеСтавкиНДС, ЗначениеПустогоКоличества)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(ПриведеннаяСтрока, ЗначениеПустогоКоличества);
	
	ПересчитатьСуммуНДС(ПриведеннаяСтрока, ЗначениеСтавкиНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииСуммаНДСНаКлиенте(СтрокаТабличнойЧасти, ИменаПолей)
	ПриведеннаяСтрока = ПреобразоватьКоллекцию(СтрокаТабличнойЧасти, ИменаПолей, "Количество, Цена, Сумма, СуммаНДС, Всего");
	
	ПриведеннаяСтрока.Всего = ПриведеннаяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, ПриведеннаяСтрока.СуммаНДС);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаТабличнойЧасти, 
		ПреобразоватьКоллекцию(ПриведеннаяСтрока, "Количество, Цена, Сумма, СуммаНДС, Всего", ИменаПолей));
КонецПроцедуры 
&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(Элемент, ИмяТабличнойЧасти)
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	
	Если ИмяТабличнойЧасти = "Услуги"
		ИЛИ ИмяТабличнойЧасти = "АгентскиеУслуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
			ПрименяютсяСтавки4и2 И ИмяТабличнойЧасти <> "АгентскиеУслуги");
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СуммаВРознице") Тогда
		СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(Элемент)
	
	ИмяТЧ = Элемент.Родитель.Родитель.Имя;
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если СтрокаТаблицы.Свойство("Количество") Тогда
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, 
			ПрименяютсяСтавки4и2 И ИмяТЧ <> "АгентскиеУслуги");
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(Элемент)
	
	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки = НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     = НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  = НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаКлиенте
Функция СтавкаНДС(СтрокаТаблицы)
	
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение"),
		СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.СтавкаНДСДоИзменения);
	
	Возврат СтавкаНДС;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПродолжение

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена                = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
		
		Если НЕ ДанныеОбъекта.КорректироватьБУиНУ Тогда
			СтрокаТабличнойЧасти.ЦенаДоИзменения                = СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.НомерГТДДоИзменения            = СтрокаТабличнойЧасти.НомерГТД;
			СтрокаТабличнойЧасти.СтранаПроисхожденияДоИзменения = СтрокаТабличнойЧасти.СтранаПроисхождения;
			СтрокаТабличнойЧасти.СуммаДоИзменения               = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСДоИзменения            = СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СтавкаНДСДоИзменения           = СведенияОНоменклатуре.СтавкаНДС;
			Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
				СтрокаТабличнойЧасти.ЦенаДоКорректировки     = СтрокаТабличнойЧасти.Цена;
				СтрокаТабличнойЧасти.СуммаДоКорректировки    = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСДоКорректировки = СтрокаТабличнойЧасти.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомитентПриИзмененииСервер(Знач СтрокаТаблицы, Знач Объект, Знач ИмяТабличнойЧасти, Знач СчетаУчетаКЗаполнению)
	
	Изменения = Новый Структура;
	
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент,
		Объект.Организация,
		МассивВидовАгентскихДоговоров) Тогда
		
		Изменения.Вставить("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента);
		
	КонецЕсли;
	
	ИзмененияСчетов = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		Объект,
		ИмяТабличнойЧасти,
		СтрокаТаблицы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Изменения, ИзмененияСчетов, Истина);
	
	Возврат Изменения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	Если СтрокаТаблицы.Свойство("СчетУчета") Тогда
		СтрокаТаблицы.СчетУчетаЗабалансовый =
			ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета).Забалансовый;
	КонецЕсли;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслугиПродолжение

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ЭтоКомиссия",
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если НЕ СведенияОНоменклатуре = Неопределено Тогда
		СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
		СтрокаТабличнойЧасти.Цена       = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
		
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС,
			ДанныеОбъекта.ПрименяютсяСтавки4и2);
		
		Если НЕ ДанныеОбъекта.КорректироватьБУиНУ Тогда
			СтрокаТабличнойЧасти.СодержаниеДоИзменения = СтрокаТабличнойЧасти.Содержание;
			СтрокаТабличнойЧасти.ЦенаДоИзменения       = СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаДоИзменения      = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСДоИзменения   = СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СтавкаНДСДоИзменения  = СведенияОНоменклатуре.СтавкаНДС;
			Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
				СтрокаТабличнойЧасти.ЦенаДоКорректировки     = СтрокаТабличнойЧасти.Цена;
				СтрокаТабличнойЧасти.СуммаДоКорректировки    = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСДоКорректировки = СтрокаТабличнойЧасти.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслугиПродолжение

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена       = СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	Если НЕ ДанныеОбъекта.КорректироватьБУиНУ Тогда
		СтрокаТаблицы.СодержаниеДоИзменения = СтрокаТаблицы.Содержание;
		СтрокаТаблицы.ЦенаДоИзменения       = СтрокаТаблицы.Цена;
		СтрокаТаблицы.СуммаДоИзменения      = СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СуммаНДСДоИзменения   = СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СтавкаНДСДоИзменения  = СтрокаТаблицы.СтавкаНДС;
		Если ДанныеОбъекта.ИсправлениеКорректировки Тогда
			СтрокаТаблицы.ЦенаДоКорректировки     = СтрокаТаблицы.Цена;
			СтрокаТаблицы.СуммаДоКорректировки    = СтрокаТаблицы.Сумма;
			СтрокаТаблицы.СуммаНДСДоКорректировки = СтрокаТаблицы.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего                = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения     = СтрокаТаблицы.СуммаДоИзменения
		+ ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки
		+ ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПродолжение

&НаСервере
Процедура ЗарегистрироватьСчетФактуруНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного)
		И ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Объект.Ссылка,
			НомерСчетаФактурыПолученного,
			ДатаСчетаФактурыПолученного);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Результат);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ЗначениеЗаполнено(НомерИсправления)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного)
		И ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Объект.Ссылка,
			НомерИсправления,
			ДатаСчетаФактурыПолученного);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Результат);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСчетаФактурыНаИсправлениеСобственнойОшибки();
		
		Результат = УчетНДСВызовСервера.СоздатьАктуализироватьИсправлениеСобственнойОшибки(ПараметрыЗаполнения);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, Результат);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.Ссылка);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтотОбъект, , Ложь);
		Если ЭтоИсправлениеСобственнойОшибки(ЭтотОбъект) Тогда
			УстановитьПризнакСчетФактураИСО();
			ЗаполнитьРеквизитСчетФактураИсправляемый(ЭтотОбъект, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияСчетаФактурыНаИсправлениеСобственнойОшибки()
	
	Результат = Новый Структура;
	
	Если ИсправлениеСчетФактураИсправляемый Тогда
		НомерСчетаФактуры = НомерИсправленияСчетаФактурыПослеИзменения;
	Иначе
		НомерСчетаФактуры = НомерСчетаФактурыПослеИзменения;
	КонецЕсли;
	
	Результат.Вставить("ДокументОснование"          , Объект.Ссылка);
	Результат.Вставить("СчетФактураИсправляемый"    , СчетФактураИсправляемый);
	Результат.Вставить("СчетФактура"                , СчетФактура);
	Результат.Вставить("НомерСчетаФактуры"          , НомерСчетаФактуры);
	Результат.Вставить("ДатаСчетаФактуры"           , ДатаСчетаФактурыПослеИзменения);
	Результат.Вставить("КодВидаОперации"            , КодВидаОперацииСчетаФактурыПослеИзменения);
	Результат.Вставить("КодВидаОперацииНаУменьшение", КодВидаОперацииСчетаФактурыНаУменьшениеПослеИзменения);
	Результат.Вставить("ИННКонтрагентаДоИзменения"  , ИННКонтрагентаДоИзменения);
	Результат.Вставить("КППКонтрагентаДоИзменения"  , КППКонтрагентаДоИзменения);
	Результат.Вставить("ИННКонтрагента"             , ИННКонтрагента);
	Результат.Вставить("КППКонтрагента"             , КППКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВозможностьСозданияСчетаФактуры(ДокументПоступления)
	
	ПодчиненныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументПоступления);
	
	Возврат ЗначениеЗаполнено(ПодчиненныйСчетФактура);
	
КонецФункции

#КонецОбласти

#Область БЭД

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"КорректировкаПоступления",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
		
	// 1. Заполняемые реквизиты
	// Товары.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;
	
	// Товары.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Товары.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Услуги.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.СчетЗатратНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.Субконто1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
	КонецЕсли;

	// Услуги.Субконто2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
	КонецЕсли;

	// Услуги.Субконто3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// АгентскиеУслуги.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// АгентскиеУслуги.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// АгентскиеУслуги.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Товары.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// Услуги.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Услуги.СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Услуги.СчетЗатратНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
		КонецЕсли;

		// Услуги.Субконто1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Субконто2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Субконто3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// АгентскиеУслуги.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// АгентскиеУслуги.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// АгентскиеУслуги.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетРасчетов");
	ЭлементыСчетов.Добавить("УслугиСчетЗатрат");
	ЭлементыСчетов.Добавить("УслугиПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("УслугиСубконто1");
	ЭлементыСчетов.Добавить("УслугиСубконто2");
	ЭлементыСчетов.Добавить("УслугиСубконто3");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратНУ");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ1");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ2");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ3");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСпособУчетаНДС");
	ЭлементыСчетов.Добавить("АгентскиеУслугиСчетРасчетов");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
			ЭтотОбъект, 
			СтрокаТаблицы,
			ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоНУ(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		Элементы.Услуги.ТекущиеДанные,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "УслугиПодразделениеЗатрат", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратНУДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНУ(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконтоНУ", "УслугиПодразделениеЗатрат", "СубконтоНУ", "ПодразделениеЗатрат", "СчетЗатратНУ");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратНУДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции


#КонецОбласти
