#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 9, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// Табличная часть Товары
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ЗапасыКромеПринятыхНаКомиссиюИлиВПереработку");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Номенклатура_ОбъектСтроительства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Номенклатура_НематериальныйАктив");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ОбъектыСтроительства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОбъектСтроительства", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",        "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Номенклатура_ОбъектСтроительства");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "НематериальныеАктивы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Номенклатура_НематериальныйАктив");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПродажаТоваровКомитента");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ТоварыПриобретенныеДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",     "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Номенклатура_ОбъектСтроительства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Номенклатура_НематериальныйАктив");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_ОбъектыСтроительства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОбъектСтроительства", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",        "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",            "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Номенклатура_ОбъектСтроительства");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_НематериальныеАктивы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",        "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",            "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",            "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Номенклатура_НематериальныйАктив");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",     "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",     "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПриобретениеТоваровДляКомитента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПродажаТоваровКомитента");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетРасчетов",      "РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Комитент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеТоваровДляКомитента");
	
	// Табличная часть Услуги
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",     "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетЗатрат",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",                "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",                "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",                "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат",      "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДС",             "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СчетЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто3");
	
	// Табличная часть АгентскиеУслуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "АгентскиеУслуги", "СчетРасчетов",  "РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение",  "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");   
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВременнаяТаблицаНаличиеТоваров",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаРеквизитыРеквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте",  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",          НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицыТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НаличиеТоваров
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ТаблицаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.КорректировкаПоступления.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &ДокументОснование) КАК ТаблицыТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяПостановлениеНДС1137
	|				И Реквизиты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
	|			ТОГДА ВЫРАЗИТЬ(&СчетФактура КАК Документ.СчетФактураПолученный).Продавец
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Грузополучатель КАК Грузополучатель,
	|	Реквизиты.Грузоотправитель КАК Грузоотправитель,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВременнаяТаблицаРеквизиты
	|ИЗ
	|	Документ.КорректировкаПоступления КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Реквизиты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	Реквизиты.Контрагент.ИНН КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель.ОбособленноеПодразделение
	|				И Реквизиты.Грузоотправитель.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Грузоотправитель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	ВЫБОР
	|		КОГДА НаличиеТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТовары,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом
	|ИЗ
	|	ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаличиеТоваров КАК НаличиеТоваров
	|		ПО Реквизиты.Ссылка = НаличиеТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего > 0
	|			ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоРуб,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС > 0
	|			ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРуб,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС > 0
	|			ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСРуб
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаДоИзменения КАК СуммаДоИзменения,
	|	ТаблицаТовары.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТаблицаТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	ТаблицаТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб, 0) КАК СуммаБезНДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб, 0) КАК НДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	НЕОПРЕДЕЛЕНО КАК ПериодичностьУслуги,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ТаблицаТовары.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Номенклатура.Код,
	|	ТаблицаУслуги.Номенклатура.Артикул,
	|	ТаблицаУслуги.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаДоИзменения,
	|	ТаблицаУслуги.СуммаНДСДоИзменения,
	|	ТаблицаУслуги.СуммаДоКорректировки,
	|	ТаблицаУслуги.СуммаНДСДоКорректировки,
	|	ИСТИНА,
	|	ТаблицаУслуги.Ссылка.СуммаВключаетНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб, 0),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаУслуги.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ТаблицаУслуги.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &ДокументОснование
	|	И ТаблицаУслуги.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Номенклатура.Код,
	|	ТаблицаАгентскиеУслуги.Номенклатура.Артикул,
	|	ТаблицаАгентскиеУслуги.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ТаблицаАгентскиеУслуги.Цена,
	|	ТаблицаАгентскиеУслуги.Сумма,
	|	ТаблицаАгентскиеУслуги.СуммаНДС,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ТаблицаАгентскиеУслуги.СуммаДоИзменения,
	|	ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения,
	|	ТаблицаАгентскиеУслуги.СуммаДоКорректировки,
	|	ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки,
	|	ИСТИНА,
	|	ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС,
	|	ТаблицаАгентскиеУслуги.Ссылка,
	|	ИСТИНА,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб, 0),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|ИЗ
	|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаАгентскиеУслуги.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаАгентскиеУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|			И (ТаблицаАгентскиеУслуги.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаАгентскиеУслуги.Ссылка = &ДокументОснование
	|	И ТаблицаАгентскиеУслуги.Сумма <> 0";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВалютаРегламентированногоУчета",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНоменклатуры",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонстантаВалютаРегламентированногоУчета.Значение КАК ВалютаРеглУчета
	|ПОМЕСТИТЬ КонстантаВалютаРегламентированногоУчета
	|ИЗ
	|	Константа.ВалютаРегламентированногоУчета КАК КонстантаВалютаРегламентированногоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяПостановлениеНДС1137
	|				И Реквизиты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
	|			ТОГДА ВЫРАЗИТЬ(&СчетФактура КАК Документ.СчетФактураПолученный).Продавец
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Грузополучатель КАК Грузополучатель,
	|	Реквизиты.Грузоотправитель КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета
	|		ИНАЧЕ Реквизиты.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БратьСуммыИзРегистраРублевыеСуммы,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы
	|ПОМЕСТИТЬ ВременнаяТаблицаРеквизиты
	|ИЗ
	|	Документ.КорректировкаПоступления КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонстантаВалютаРегламентированногоУчета КАК КонстантаВалютаРегламентированногоУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	"""" КАК АдресПоставщика,
	|	"""" КАК ИННКПППоставщика,
	|	Реквизиты.Контрагент.ИНН КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель.ОбособленноеПодразделение
	|				И Реквизиты.Грузоотправитель.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Грузоотправитель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРеглУчета) КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
	|	Реквизиты.СопроводительныеДокументы КАК СопроводительныеДокументы
	|ИЗ
	|	ВременнаяТаблицаРеквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ КАК ТабличнаяЧастьДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДСРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС > 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК ВсегоРубДоИзменения,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК СуммаБезНДСРубДоИзменения,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС < 0
	|				ТОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК НДСРубДоИзменения
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|	И РегистрСведенийРублевыеСуммыДокументовВВалюте.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|	1 КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Номенклатура КАК Товар,
	|	ТаблицаНоменклатуры.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.КоличествоДоИзменения
	|	КОНЕЦ КАК КоличествоДоИзменения,
	|	ТаблицаНоменклатуры.Количество КАК КоличествоПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|												ТОГДА 0
	|											КОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки = 0
	|												ТОГДА ТаблицаНоменклатуры.ЦенаДоКорректировки
	|											ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|										КОНЕЦ
	|								ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Реквизиты.СуммаВключаетНДС
	|										ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|									ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|											ТОГДА 0
	|										КОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения = 0
	|											ТОГДА ТаблицаНоменклатуры.ЦенаДоИзменения
	|										ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|									КОНЕЦ
	|							ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоИзменения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|								ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаНоменклатуры.Количество = 0
	|									ТОГДА 0
	|								КОГДА ТаблицаНоменклатуры.СуммаНДС = 0
	|									ТОГДА ТаблицаНоменклатуры.Цена
	|								ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаНоменклатуры.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Количество = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Реквизиты.СуммаВключаетНДС
	|							ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|					ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|				ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДС
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|	КОНЕЦ КАК СуммаНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРубДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки + ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения + ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма + ТаблицаНоменклатуры.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаНоменклатуры.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаНоменклатуры.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныечастиДокументов.Товары))
	|			И (ТаблицаНоменклатуры.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка,
	|	2,
	|	ТаблицаНоменклатуры.НомерСтроки,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.Код,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул,
	|	ТаблицаНоменклатуры.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.КоличествоДоИзменения
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.Количество,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|												ТОГДА 0
	|											КОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки = 0
	|												ТОГДА ТаблицаНоменклатуры.ЦенаДоКорректировки
	|											ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|										КОНЕЦ
	|								ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Реквизиты.СуммаВключаетНДС
	|										ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|									ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|											ТОГДА 0
	|										КОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения = 0
	|											ТОГДА ТаблицаНоменклатуры.ЦенаДоИзменения
	|										ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|									КОНЕЦ
	|							ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоИзменения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|								ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаНоменклатуры.Количество = 0
	|									ТОГДА 0
	|								КОГДА ТаблицаНоменклатуры.СуммаНДС = 0
	|									ТОГДА ТаблицаНоменклатуры.Цена
	|								ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаНоменклатуры.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Количество = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Реквизиты.СуммаВключаетНДС
	|							ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|					ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|				ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДС
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРубДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки + ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения + ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма + ТаблицаНоменклатуры.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаНоменклатуры.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаНоменклатуры.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныечастиДокументов.Услуги))
	|			И (ТаблицаНоменклатуры.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка,
	|	3,
	|	ТаблицаНоменклатуры.НомерСтроки,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.Код,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул,
	|	ТаблицаНоменклатуры.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.КоличествоДоИзменения
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.Количество,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|												ТОГДА 0
	|											КОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки = 0
	|												ТОГДА ТаблицаНоменклатуры.ЦенаДоКорректировки
	|											ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|										КОНЕЦ
	|								ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Реквизиты.СуммаВключаетНДС
	|										ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|									ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоКорректировки КАК ЧИСЛО(15, 2))
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|											ТОГДА 0
	|										КОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения = 0
	|											ТОГДА ТаблицаНоменклатуры.ЦенаДоИзменения
	|										ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|									КОНЕЦ
	|							ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоИзменения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|								ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения) / ТаблицаНоменклатуры.КоличествоДоИзменения КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаНоменклатуры.Количество = 0
	|									ТОГДА 0
	|								КОГДА ТаблицаНоменклатуры.СуммаНДС = 0
	|									ТОГДА ТаблицаНоменклатуры.Цена
	|								ИНАЧЕ ВЫРАЗИТЬ((ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаНоменклатуры.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Количество = 0
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Реквизиты.СуммаВключаетНДС
	|							ТОГДА ВЫРАЗИТЬ(РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ВЫРАЗИТЬ((РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб - РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|						ТОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|					ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|					ТОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|				ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРубДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДС
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.НДСРуб
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРубДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.СуммаБезНДСРуб
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.Исправление
	|						ТОГДА ВЫБОР
	|								КОГДА Реквизиты.СуммаВключаетНДС
	|									ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки
	|								ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки + ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Реквизиты.СуммаВключаетНДС
	|								ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения
	|							ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения + ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРубДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Реквизиты.БратьСуммыИзРегистраРублевыеСуммы
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.Сумма
	|					ИНАЧЕ ТаблицаНоменклатуры.Сумма + ТаблицаНоменклатуры.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ РегистрСведенийРублевыеСуммыДокументовВВалюте.ВсегоРуб
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаНоменклатуры.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ТаблицаНоменклатуры.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныечастиДокументов.АгентскиеУслуги))
	|			И (ТаблицаНоменклатуры.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Товар КАК Товар,
	|	ТаблицаНоменклатуры.ТоварКод КАК ТоварКод,
	|	ТаблицаНоменклатуры.ТоварАртикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаНоменклатуры.ПредставлениеСтраны КАК ПредставлениеСтраны,
	|	ТаблицаНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаНоменклатуры.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	ТаблицаНоменклатуры.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТаблицаНоменклатуры.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	ТаблицаНоменклатуры.ЦенаПослеИзменения КАК ЦенаПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения КАК СтоимостьБезНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения > ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения - ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения > ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения - ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения > ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения - ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения > ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения > ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения - ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения > ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения - ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДСПослеИзменения,
	|	ТаблицаНоменклатуры.ЭтоУслуга КАК ЭтоУслуга,
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭДДоИзменения
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(ТаблицаНоменклатуры.КоличествоПослеИзменения <> ТаблицаНоменклатуры.КоличествоДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения <> ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.СуммаНДСПослеИзменения <> ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.ЦенаПослеИзменения <> ТаблицаНоменклатуры.ЦенаДоИзменения)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК ДокументОснование,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансов,
	|	&РасчетнаяСтавкаНДСПоУмолчанию КАК СтавкаНДС,
	|	1 КАК Сумма,
	|	0 КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.КорректировкаПоступления КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	КорректировкаПоступленияТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.Номенклатура ССЫЛКА Справочник.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПоступленияАгентскиеУслуги.Номенклатура,
	|	КорректировкаПоступленияАгентскиеУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК КорректировкаПоступленияАгентскиеУслуги
	|ГДЕ
	|	КорректировкаПоступленияАгентскиеУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбновитьРеквизитыСвязанныхДокументовКорректировки(ДокументОбъект, Отказ) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументМетаданные = ДокументОбъект.Ссылка.Метаданные();
	ЕстьРеквизитыВходящегоДокумента = ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", ДокументМетаданные);
	
	Если ЕстьРеквизитыВходящегоДокумента Тогда
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, "НомерВходящегоДокумента, ДатаВходящегоДокумента, Номер");
		РеквизитыСсылки.Вставить("ДатаВходящегоДокумента", 	 НачалоДня(РеквизитыСсылки.ДатаВходящегоДокумента));
		РеквизитыСсылки.Вставить("Ссылка", 					 ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("НомерВходящегоДокумента", ДокументОбъект.НомерВходящегоДокумента);
		РеквизитыОбъекта.Вставить("ДатаВходящегоДокумента",  НачалоДня(ДокументОбъект.ДатаВходящегоДокумента));
		РеквизитыОбъекта.Вставить("Номер", 					 ДокументОбъект.Номер);
		
	Иначе
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, "Номер");
		РеквизитыСсылки.Вставить("НомерВходящегоДокумента",  "");
		РеквизитыСсылки.Вставить("ДатаВходящегоДокумента", 	 Дата('00010101000000'));
		РеквизитыСсылки.Вставить("Ссылка", 					 ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("НомерВходящегоДокумента", "");
		РеквизитыОбъекта.Вставить("ДатаВходящегоДокумента",  Дата('00010101000000'));
		РеквизитыОбъекта.Вставить("Номер", 					 ДокументОбъект.Номер);
		
	КонецЕсли;
	
	Если РеквизитыСсылки.Номер <> РеквизитыОбъекта.Номер
		ИЛИ РеквизитыСсылки.НомерВходящегоДокумента <> РеквизитыОбъекта.НомерВходящегоДокумента
		ИЛИ РеквизитыСсылки.ДатаВходящегоДокумента <> РеквизитыОбъекта.ДатаВходящегоДокумента
		Тогда
		
		ОбновитьРеквизитыДокументовКорректировкиПоступления(РеквизитыСсылки, РеквизитыОбъекта, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоПоступлению(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.АгентскиеУслуги.Очистить();
	
	МетаданныеДокумента = Объект.ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Цена КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТДДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРозницеДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице,";
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
		|	ПоступлениеТоваровУслугТовары.КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеПоступления,
	|	""Товары"" КАК ТЧ,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения,
	|	NULL КАК СчетЗатрат,
	|	NULL КАК Субконто1,
	|	NULL КАК Субконто2,
	|	NULL КАК Субконто3,
	|	NULL КАК СчетЗатратНУ,
	|	NULL КАК СубконтоНУ1,
	|	NULL КАК СубконтоНУ2,
	|	NULL КАК СубконтоНУ3,
	|	NULL КАК ПодразделениеЗатрат,
	|	ПоступлениеТоваровУслугТовары.Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.СпособУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
		|	ПоступлениеТоваровУслугУслуги.КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА,
	|	""Услуги"",
	|	ПоступлениеТоваровУслугУслуги.Содержание,
	|	ПоступлениеТоваровУслугУслуги.Содержание,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.Субконто1,
	|	ПоступлениеТоваровУслугУслуги.Субконто2,
	|	ПоступлениеТоваровУслугУслуги.Субконто3,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ1,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ2,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ3,
	|	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Количество,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Количество,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Цена,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Цена,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Сумма,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Сумма,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
		|	ПоступлениеТоваровУслугАгентскиеУслуги.КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугАгентскиеУслуги.ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДСДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА,
	|	""АгентскиеУслуги"",
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Содержание,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Содержание,
	|	NULL КАК СчетЗатрат,
	|	NULL КАК Субконто1,
	|	NULL КАК Субконто2,
	|	NULL КАК Субконто3,
	|	NULL КАК СчетЗатратНУ,
	|	NULL КАК СубконтоНУ1,
	|	NULL КАК СубконтоНУ2,
	|	NULL КАК СубконтоНУ3,
	|	NULL КАК ПодразделениеЗатрат,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Контрагент,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СчетРасчетов
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка";
	
	Если ИмяВидаДокумента = "ПоступлениеТоваровУслуг" Тогда
		Текст = Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.Номенклатура,
		|	ПоступлениеТоваровУслугОборудование.Номенклатура,
		|	ПоступлениеТоваровУслугОборудование.Количество,
		|	ПоступлениеТоваровУслугОборудование.Количество,
		|	ПоступлениеТоваровУслугОборудование.Цена,
		|	ПоступлениеТоваровУслугОборудование.Цена,
		|	ПоступлениеТоваровУслугОборудование.Сумма,
		|	ПоступлениеТоваровУслугОборудование.Сумма,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
		|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
		|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
		|	ПоступлениеТоваровУслугОборудование.НомерГТД,
		|	ПоступлениеТоваровУслугОборудование.НомерГТД,
		|	ПоступлениеТоваровУслугОборудование.СтранаПроисхождения,
		|	ПоступлениеТоваровУслугОборудование.СтранаПроисхождения,
		|	ПоступлениеТоваровУслугОборудование.СчетУчета,
		|	ПоступлениеТоваровУслугОборудование.СчетУчетаНДС,
		|	ПоступлениеТоваровУслугОборудование.СпособУчетаНДС,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА,
		|	""Товары"",
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
	РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументПоступления, "Организация, Дата, НДСВключенВСтоимость");
	РаздельныйУчетНДСНаСчете19ДокументаПоступления = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(РеквизитыДокументаПоступления.Организация, РеквизитыДокументаПоступления.Дата);
	
	СпособУчетаНДСПоПоступлению = Ложь;
	Если РаздельныйУчетНДСНаСчете19 И НЕ РаздельныйУчетНДСНаСчете19ДокументаПоступления Тогда
		СпособУчетаНДСПоПоступлению = Истина;
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		Если Результат.ТЧ = "Товары" Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
			Если СпособУчетаНДСПоПоступлению Тогда 
				СтрокаТоваров.СпособУчетаНДС = ?(РеквизитыДокументаПоступления.НДСВключенВСтоимость, 
					Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету)
			КонецЕсли;
		ИначеЕсли Результат.ТЧ = "Услуги" Тогда
			СтрокаУслуг = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
			Если СпособУчетаНДСПоПоступлению Тогда 
				СтрокаУслуг.СпособУчетаНДС = ?(РеквизитыДокументаПоступления.НДСВключенВСтоимость, 
					Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости, Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету)
			КонецЕсли;
		ИначеЕсли Результат.ТЧ = "АгентскиеУслуги" Тогда
			СтрокаУслуг = Объект.АгентскиеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ЕстьРеквизитыДокумента(МетаданныеДокумента, СтрокаМетаданных) 
	СписокРеквизитов = Новый Структура(СтрокаМетаданных);
	
	Для каждого НаименованиеРеквизита Из СписокРеквизитов Цикл
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(НаименованиеРеквизита.Ключ, МетаданныеДокумента) Тогда
			
			Возврат Ложь;
			
		КонецЕсли; 
	КонецЦикла;   
	
	Возврат Истина;	
КонецФункции

Процедура ЗаполнитьПоДопРасходам(Объект)Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	ПартионныйУчет  = ?(СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО, Истина, Ложь);
	ДанныеДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументПоступления,
		"Сумма, СуммаНДС, СпособРаспределения");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоТовара,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаТовара,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетЗатрат,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ КАК СчетЗатратНУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.СтатьяЗатратНУ,
	|	ПоступлениеТоваровУслугТовары.ДокументПартии,
	|	ИСТИНА КАК ЕстьВДокументеПоступления,
	|	""Услуги"" КАК ТЧ,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Содержание КАК Содержание,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Содержание КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеДокументаПоступления.Сумма <> 0 тогда
		СуммаКРаспределению = ДанныеДокументаПоступления.Сумма;
		НДСКРаспределению   = ДанныеДокументаПоступления.СуммаНДС;
		КолонкаБазиса       = ?(ДанныеДокументаПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "КоличествоТовара",
								?(ДанныеДокументаПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме, "СуммаТовара",""));
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
		ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
		КонецЕсли;
		БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
		ИтогРаспределения  = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКРаспределению, БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСКРаспределению, БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
				ТаблицаТоваров[НомерСтрокиТаблицы].СуммаДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма;
			КонецЕсли;
			Если Не(НДСКРаспределению = 0) тогда
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДСДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ ТаблицаТоваров Цикл
		
		СтрокаУслуг = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, СтрокаТЧ);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТЧ.СчетЗатрат);
		ЧислоАктивныхСубконто = СвойстваСчета.КоличествоСубконто;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПартии) И ЕстьРеквизитыДокумента(СтрокаТЧ.ДокументПартии.Метаданные(), "Склад, ПодразделениеОрганизации")  Тогда
			РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДокументПартии,
				"Склад, ПодразделениеОрганизации");
		Иначе
			РеквизитыПартии = Неопределено;
		КонецЕсли;
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			ВидСубконто = СвойстваСчета["ВидСубконто" + Сч];
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
				СтрокаУслуг["Субконто" + Сч] = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				СтрокаУслуг["Субконто" + Сч] = ?(РеквизитыПартии <> Неопределено, РеквизитыПартии.Склад, Справочники.Склады.ПустаяСсылка());
			КонецЕсли;
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии И ПартионныйУчет Тогда
				СтрокаУслуг["Субконто" + Сч] = СтрокаТЧ.ДокументПартии;
			КонецЕсли;
		КонецЦикла;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТЧ.СчетЗатратНУ);
		ЧислоАктивныхСубконто = СвойстваСчета.КоличествоСубконто;
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			ВидСубконто = СвойстваСчета["ВидСубконто" + Сч];
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
				СтрокаУслуг["СубконтоНУ" + Сч] = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				СтрокаУслуг["СубконтоНУ" + Сч] = ?(РеквизитыПартии <> Неопределено, РеквизитыПартии.Склад, Справочники.Склады.ПустаяСсылка());
			КонецЕсли;
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии И ПартионныйУчет Тогда
				СтрокаУслуг["СубконтоНУ" + Сч] = СтрокаТЧ.ДокументПартии;
			КонецЕсли;
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				СтрокаУслуг["СубконтоНУ" + Сч] = СтрокаТЧ.СтатьяЗатратНУ;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаУслуг.ПодразделениеЗатрат = ?(РеквизитыПартии <> Неопределено, РеквизитыПартии.ПодразделениеОрганизации, 
			БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		
		СтрокаУслуг.Цена = СтрокаУслуг.Сумма;
		СтрокаУслуг.ЦенаДоИзменения = СтрокаУслуг.СуммаДоИзменения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументу(Объект) Экспорт
	
	Если ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ЗаполнитьПоПоступлению(Объект);
	ИначеЕсли ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ЗаполнитьПоДопРасходам(Объект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка, СсылкаНаТекущийДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"      , ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", СсылкаНаТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	КорректировкаПоступления.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Корректировки
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &Ссылка
	|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
	|	И КорректировкаПоступления.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Дата
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Сделка = &Ссылка
	|	И ВозвратТоваровПоставщику.КорректировочныйСчетФактураПолученОтПоставщика
	|	И ВозвратТоваровПоставщику.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Корректировки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Корректировки КАК ВТ_Корректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Корректировки.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

Функция ДоступнаКорректировкаБУиНУ(ДокументПоступления) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДанныеДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления,
			"ВидОперации, ДоговорКонтрагента");
		Результат = (ДанныеДокументаПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
						ИЛИ ДанныеДокументаПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
						ИЛИ ДанныеДокументаПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
						ИЛИ ДанныеДокументаПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга
						ИЛИ ДанныеДокументаПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
				И ЗначениеЗаполнено(ДанныеДокументаПоступления.ДоговорКонтрагента);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Результат = Истина;
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Результат = Истина;
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "КорректироватьБУиНУ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьОстаткамиДопРасходы(РеквизитыДокумента, ТаблицаПоУслугам)
	
	ТаблицаПоУслугам.Колонки.Добавить("КоличествоНачалоМесяца", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаПоУслугам.Колонки.Добавить("КоличествоНачалоГода", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешнийИсточник.Номенклатура,
	|	ВнешнийИсточник.СчетЗатрат КАК СчетУчета,
	|	ВнешнийИсточник.НомерСтроки,
	|	ВнешнийИсточник.Субконто2,
	|	ВнешнийИсточник.Субконто3
	|
	|ПОМЕСТИТЬ ТаблицаПоТоварам
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник";
	
	Если ТаблицаПоУслугам.Колонки.Найти("СчетЗатрат") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗатрат", "СчетУчета");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоУслугам);
	Запрос.Выполнить();
	
	ТекстДопУсловия = "";
	СвойстваСчетаТоварыНаСкладах = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если РеквизитыДокумента.ВестиСуммовойУчетПоСкладам Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		Если РеквизитыДокумента.ВестиПартионныйУчет Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			ТекстУсловия = "Организация = &Организация И Субконто2 = &Склад";
			Если СвойстваСчетаТоварыНаСкладах.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				ТекстДопУсловия = "
				|	И ТаблицаПоТоварам.Субконто2 = ХозрасчетныйОстаткиНачалоМесяца.Субконто3";
			ИначеЕсли СвойстваСчетаТоварыНаСкладах.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				ТекстДопУсловия = "
				|	И ТаблицаПоТоварам.Субконто3 = ХозрасчетныйОстаткиНачалоМесяца.Субконто3";
			КонецЕсли;
		Иначе
			ТекстУсловия = "Организация = &Организация И Субконто2 = &Склад";
		КонецЕсли;
	ИначеЕсли РеквизитыДокумента.ВестиПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		ТекстУсловия = "Организация = &Организация";
		ТекстДопУсловия = "
		|	И ТаблицаПоТоварам.Субконто2 = ХозрасчетныйОстаткиНачалоМесяца.Субконто2";		
	Иначе
		ТекстУсловия = "Организация = &Организация";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ВидСубконто" , ВидыСубконто);
	Запрос.УстановитьПараметр("Организация" , РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("Склад"       , РеквизитыДокумента.Склад);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(РеквизитыДокумента.Период));
	Запрос.УстановитьПараметр("НачалоГода"  , НачалоГода(РеквизитыДокумента.Период));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиНачалоМесяца.Счет КАК Счет,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиНачалоМесяца
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоМесяца, , &ВидСубконто, " + ТекстУсловия + ") КАК ХозрасчетныйОстаткиНачалоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиНачалоГода.Счет КАК Счет,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &ВидСубконто, " + ТекстУсловия + ") КАК ХозрасчетныйОстаткиНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт КОНЕЦ) КАК КоличествоНачалоМесяца,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт КОНЕЦ) КАК КоличествоНачалоГода,
	|	ТаблицаПоТоварам.Номенклатура КАК Номенклатура,
	|	ТаблицаПоТоварам.СчетУчета КАК СчетУчета,
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаПоТоварам КАК ТаблицаПоТоварам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиНачалоМесяца КАК ХозрасчетныйОстаткиНачалоМесяца
	|		ПО ТаблицаПоТоварам.Номенклатура = ХозрасчетныйОстаткиНачалоМесяца.Субконто1
	|			И ТаблицаПоТоварам.СчетУчета = ХозрасчетныйОстаткиНачалоМесяца.Счет " + ТекстДопУсловия + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиНачалоГода КАК ХозрасчетныйОстаткиНачалоГода
	|		ПО (ТаблицаПоТоварам.Номенклатура = ХозрасчетныйОстаткиНачалоГода.Субконто1)
	|			И (ТаблицаПоТоварам.СчетУчета = ХозрасчетныйОстаткиНачалоГода.Счет) " + ТекстДопУсловия + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ВидыСубконто.Количество() < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиНачалоМесяца.Субконто3 КАК Субконто3", "NULL КАК Субконто3");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиНачалоГода.Субконто3 КАК Субконто3", 	"NULL КАК Субконто3");		
	КонецЕсли;
	Если ВидыСубконто.Количество() < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиНачалоМесяца.Субконто2 КАК Субконто2", "NULL КАК Субконто2");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиНачалоГода.Субконто2 КАК Субконто2", 	"NULL КАК Субконто2");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ТаблицаПоУслугам[Результат.НомерСтроки - 1].КоличествоНачалоМесяца = Результат.КоличествоНачалоМесяца;
		ТаблицаПоУслугам[Результат.НомерСтроки - 1].КоличествоНачалоГода = Результат.КоличествоНачалоГода;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьПервичныйДокументПоступления(ТекущийДокументПоступления)
	
	ПервичныйДокументПоступления = ТекущийДокументПоступления;
	
	Если ТипЗнч(ПервичныйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ПервичныйДокументПоступления = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(
			ПервичныйДокументПоступления, Истина);
	КонецЕсли; 
	
	Возврат ПервичныйДокументПоступления;
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ПолучитьПредставлениеДокумента(ДокументСсылка) Экспорт
	
	ТекстПредставлениеКраткое	= "";
	ТекстПредставление 			= "";
	ТекстОсновноеПредставление	= "Корректировка поступления";
			
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПредставлениеНомера, Дата");
			
		ТекстПредставлениеКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 от %2'"),
			РеквизитыДокумента.ПредставлениеНомера, Формат(РеквизитыДокумента.Дата,	"ДЛФ=Д"));
		ТекстПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 %2'"), ТекстОсновноеПредставление, ТекстПредставлениеКраткое);

	Иначе
		ТекстПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (создание)'"), ТекстОсновноеПредставление);
	КонецЕсли;
	
	СтруктураПредставления = Новый Структура;
	СтруктураПредставления.Вставить("ПредставлениеДокументаКраткое", ТекстПредставлениеКраткое);
	СтруктураПредставления.Вставить("ПредставлениеДокумента", 		 ТекстПредставление);
	
	Возврат СтруктураПредставления;
	
КонецФункции

Функция СформироватьПараметрыИсправленияКорректировочногоДокумента(ВидОперации, Дата, ДокументПоступления) Экспорт
	
	СтруктураПараметров = Новый Структура("");
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) 
			ИЛИ	ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СтруктураПараметров.Вставить("НомерИсправления", Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправления",  Неопределено);
		КонецЕсли;
		
		Возврат СтруктураПараметров;
		
	КонецЕсли;  	
		
	Если НЕ ЗначениеЗаполнено(ВидОперации) 
		ИЛИ	ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда 
			
			РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, 
				"НомерВходящегоДокумента, ДатаВходящегоДокумента, НомерИсправления, ДатаИсправления");
				
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			РеквизитыДокументаПоступления.НомерВходящегоДокумента);
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				РеквизитыДокументаПоступления.ДатаВходящегоДокумента);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	РеквизитыДокументаПоступления.НомерИсправления);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	РеквизитыДокументаПоступления.ДатаИсправления);
   			СтруктураПараметров.Вставить("НомерИсправления", 					Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправления", 					Неопределено);

		Иначе
			
			МетаданныеДокументаПоступления = ДокументПоступления.Метаданные();

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокументаПоступления) Тогда 
				РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, 
					"НомерВходящегоДокумента, ДатаВходящегоДокумента");
				
				СтруктураПараметров.Вставить("НомерИсходногоДокумента", 		РеквизитыДокументаПоступления.НомерВходящегоДокумента);
				СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 			РеквизитыДокументаПоступления.ДатаВходящегоДокумента);
			Иначе
				СтруктураПараметров.Вставить("НомерИсходногоДокумента", 		Неопределено);
				СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 			Неопределено);
			КонецЕсли;
			
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("НомерИсправления", 					Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправления", 					Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда 

			РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, 
				"НомерВходящегоДокумента, ДатаВходящегоДокумента, НомерИсправления, ДатаИсправления,
				|НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
				
			СтруктураПараметров.Вставить("НомерВходящегоДокумента", 			РеквизитыДокументаПоступления.НомерВходящегоДокумента);
			СтруктураПараметров.Вставить("ДатаВходящегоДокумента", 				РеквизитыДокументаПоступления.ДатаВходящегоДокумента);
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			РеквизитыДокументаПоступления.НомерИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				РеквизитыДокументаПоступления.ДатаИсходногоДокумента);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	РеквизитыДокументаПоступления.НомерИсправленияИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	РеквизитыДокументаПоступления.ДатаИсправленияИсходногоДокумента);
   			
		Иначе
			
			МетаданныеДокументаПоступления = ДокументПоступления.Метаданные();
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокументаПоступления) Тогда 
				РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, 
					"НомерВходящегоДокумента, ДатаВходящегоДокумента");
				СтруктураПараметров.Вставить("НомерВходящегоДокумента", 	 	РеквизитыДокументаПоступления.НомерВходящегоДокумента);
				СтруктураПараметров.Вставить("ДатаВходящегоДокумента", 			РеквизитыДокументаПоступления.ДатаВходящегоДокумента);
			КонецЕсли;
				
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			Неопределено);
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				Неопределено);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ОбновитьРеквизитыДокументовКорректировкиПоступления(РеквизитыСсылки, РеквизитыОбъекта, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйДокументПоступления", РеквизитыСсылки.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК ДокументСсылка,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменятьРеквизитыИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменятьПредставлениеНомера,
	|	КорректировкаПоступления.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &ИсправляемыйДокументПоступления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	КорректировкаПоступления.НомерИсправления
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК ИсправляемыеДокументыПоступления
	|		ПО КорректировкаПоступления.ИсправляемыйДокументПоступления = ИсправляемыеДокументыПоступления.Ссылка
	|ГДЕ
	|	ИсправляемыеДокументыПоступления.ИсправляемыйДокументПоступления = &ИсправляемыйДокументПоступления
	|	И КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСвязанныхДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаСвязанныхДокументов.Следующий() Цикл
		
		ДокументКорректировкиОбъект = ВыборкаСвязанныхДокументов.ДокументСсылка.ПолучитьОбъект();	
		
		Если ВыборкаСвязанныхДокументов.ИзменятьРеквизитыИсходногоДокумента Тогда
			ДокументКорректировкиОбъект.НомерИсходногоДокумента = РеквизитыОбъекта.НомерВходящегоДокумента;
			ДокументКорректировкиОбъект.ДатаИсходногоДокумента  = РеквизитыОбъекта.ДатаВходящегоДокумента;
		Иначе
			ДокументКорректировкиОбъект.НомерВходящегоДокумента = РеквизитыОбъекта.НомерВходящегоДокумента;
			ДокументКорректировкиОбъект.ДатаВходящегоДокумента  = РеквизитыОбъекта.ДатаВходящегоДокумента;
		КонецЕсли;
		
		Если ВыборкаСвязанныхДокументов.ИзменятьПредставлениеНомера Тогда
			НомерПредставления 	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОбъекта.Номер, Истина, Ложь); 
			ДокументКорректировкиОбъект.ПредставлениеНомера = НомерПредставления + " (испр. " + ВыборкаСвязанныхДокументов.НомерИсправления + ")";
		КонецЕсли;
		
		ДокументКорректировкиОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах", Истина);
		
		Попытка
			ДокументКорректировкиОбъект.Записать(?(ДокументКорректировкиОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			Отказ = Истина;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ.
                                    |%1'");

			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление реквизитов связанных документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.КорректировкаПоступления,
				ВыборкаСвязанныхДокументов.ДокументСсылка, 
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

// Обработчик обновления на версию 3.0.26
//
// Процедура заполняет реквизиты документа: НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента,
// НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента, ПредставлениеНомера
// в тех документах, в которых они не заполнены
// 
Процедура ЗаполнитьРеквизитыИсправленияКорректировкиПоступления() Экспорт
	
	СвойстваИсправления = "НомерИсправления, ДатаИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента, 
		|НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента, ПредставлениеНомера";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК ДокументСсылка,
	|	КорректировкаПоступления.ВидОперации КАК ВидОперации,
	|	КорректировкаПоступления.ДокументПоступления КАК ДокументПоступления,
	|	ЕСТЬNULL(ПервичныеДанныеКорректировкиПоступления.НомерРегистратора, """") КАК НомерКорректировки,
	|	ЕСТЬNULL(ПервичныеДанныеКорректировкиПоступления.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаКорректировки,
	|	ЕСТЬNULL(ПервичныеДанныеКорректировкиПоступления.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ПервичныеДанныеКорректировкиПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ПервичныеДанныеИсправляемогоДокументаОснования.НомерРегистратора, """") КАК НомерИсправляемогоДокументаОснования,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.НомерИсправления = 0
	|				И КорректировкаПоступления.ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1)
	|				И КорректировкаПоступления.НомерИсходногоДокумента = """"
	|				И КорректировкаПоступления.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|				И КорректировкаПоступления.НомерИсправленияИсходногоДокумента = 0
	|				И КорректировкаПоступления.ДатаИсправленияИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|				И КорректировкаПоступления.ПредставлениеНомера = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеОбрабатыватьДокументКорректировки,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ДокументПоступления ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненыРеквизитыИсправления,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ДокументПоступления ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА КорректировкаПоступления.НомерИсправления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ДокументПоступления ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА КорректировкаПоступления.ДатаИсправления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|					ТОГДА ЕСТЬNULL(ПервичныеДанныеКорректировкиПоступления.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ДокументПоступления ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА КорректировкаПоступления.НомерИсходногоДокумента
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|					ТОГДА """"
	|				ИНАЧЕ ЕСТЬNULL(ПервичныеДанныеДокументаОснования.Номер, """")
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.ДокументПоступления ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА КорректировкаПоступления.ДатаИсходногоДокумента
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|				ИНАЧЕ ЕСТЬNULL(ПервичныеДанныеДокументаОснования.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	КорректировкаПоступления.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	КорректировкаПоступления.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	КорректировкаПоступления.ПредставлениеНомера КАК ПредставлениеНомера
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ПервичныеДанныеКорректировкиПоступления
	|		ПО КорректировкаПоступления.Организация = ПервичныеДанныеКорректировкиПоступления.Организация
	|			И КорректировкаПоступления.Ссылка = ПервичныеДанныеКорректировкиПоступления.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ПервичныеДанныеДокументаОснования
	|		ПО КорректировкаПоступления.Организация = ПервичныеДанныеДокументаОснования.Организация
	|			И КорректировкаПоступления.ДокументПоступления = ПервичныеДанныеДокументаОснования.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ПервичныеДанныеИсправляемогоДокументаОснования
	|		ПО КорректировкаПоступления.Организация = ПервичныеДанныеИсправляемогоДокументаОснования.Организация
	|			И КорректировкаПоступления.ИсправляемыйДокументПоступления = ПервичныеДанныеИсправляемогоДокументаОснования.Документ
	|ГДЕ
	|	КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ПустаяСсылка)
	|	И НЕ КорректировкаПоступления.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКорректировки,
	|	ДокументСсылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДокументовКорректировки = Результат.Выгрузить();
	ТаблицаДокументовКорректировки.Индексы.Добавить("ДокументСсылка");
	
	// рекурсивная обработка строк таблицы документов корректировки
	Для Каждого СтрокаДокументаКорректировки ИЗ ТаблицаДокументовКорректировки Цикл
		
		Если СтрокаДокументаКорректировки.НеОбрабатыватьДокументКорректировки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДокументаКорректировки.ЗаполненыРеквизитыИсправления Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьРеквизитыИсправленияВСтрокеТаблицыДокументовКорректировки(СтрокаДокументаКорректировки, ТаблицаДокументовКорректировки);
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументаКорректировки ИЗ ТаблицаДокументовКорректировки Цикл
		
		Если СтрокаДокументаКорректировки.НеОбрабатыватьДокументКорректировки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДокументаКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СтрокаДокументаКорректировки.ПредставлениеНомера = 
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаДокументаКорректировки.НомерКорректировки, Истина, Ложь);   
		ИначеЕсли СтрокаДокументаКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			СтрокаДокументаКорректировки.ПредставлениеНомера = 
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаДокументаКорректировки.НомерИсправляемогоДокументаОснования, Истина, Ложь) + 
				" (испр. " + СтрокаДокументаКорректировки.НомерИсправления + ")";
		КонецЕсли;
		
		ОбрабатываемыйДокумент = СтрокаДокументаКорректировки.ДокументСсылка;
			
		ОбрабатываемыйОбъект = ОбрабатываемыйДокумент.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект, СтрокаДокументаКорректировки, СвойстваИсправления);
		ОбрабатываемыйОбъект.ОбменДанными.Загрузка 					= Истина;
		ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах", Истина);
		
		НачатьТранзакцию();
		
		Попытка
			ОбрабатываемыйОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ.
                                    |%1'");

			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.КорректировкаПоступления,
				ОбрабатываемыйОбъект.Ссылка, 
				ТекстСообщения);
				
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления на версию 3.0.36.18
Процедура УстановитьРеквизитКорректироватьНДС() Экспорт
	
	Запрос = Новый Запрос;
	//Возможно, обновление уже выполнено
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаПоступления.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.КорректироватьНДС";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	НЕ КорректировкаПоступления.КорректироватьНДС";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ОбрабатываемыйОбъект.КорректироватьНДС = Истина;
		ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
		ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах", Истина);
		
		НачатьТранзакцию();
		
		Попытка
			ОбрабатываемыйОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ.
                                    |%1'");

			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.КорректировкаПоступления,
				ОбрабатываемыйОбъект.Ссылка, 
				ТекстСообщения);
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРеквизитСуммаВРозницеДоИзменения() Экспорт
	
	Запрос = Новый Запрос;
	//Возможно, обновление уже выполнено
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаПоступленияТовары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.СуммаВРозницеДоИзменения <> 0";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПоступленияТовары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.СуммаВРознице <> 0";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТовара Из ОбрабатываемыйОбъект.Товары Цикл
			СтрокаТовара.СуммаВРозницеДоИзменения = СтрокаТовара.СуммаВРознице;
		КонецЦикла;
		
		ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
		ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах", Истина);
		
		НачатьТранзакцию();
		
		Попытка
			ОбрабатываемыйОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ.
                                    |%1'");

			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.КорректировкаПоступления,
				ОбрабатываемыйОбъект.Ссылка, 
				ТекстСообщения);
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИсправленияВСтрокеТаблицыДокументовКорректировки(СтрокаТаблицы, ТаблицаДокументов)

	Если СтрокаТаблицы.ЗаполненыРеквизитыИсправления Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокументаОснования = ТаблицаДокументов.Найти(СтрокаТаблицы.ДокументПоступления, "ДокументСсылка");
	Если СтрокаДокументаОснования <> Неопределено Тогда
		
		Если СтрокаДокументаОснования.ЗаполненыРеквизитыИсправления Тогда
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда

				СтрокаТаблицы.НомерИсправления 					 = 0;
				СтрокаТаблицы.ДатаИсправления 					 = Дата('00010101000000');
	
				СтрокаТаблицы.НомерИсходногоДокумента 			 = СтрокаДокументаОснования.НомерВходящегоДокумента;
				СтрокаТаблицы.ДатаИсходногоДокумента  			 = СтрокаДокументаОснования.ДатаВходящегоДокумента;
				
				Если СтрокаДокументаОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда 
					СтрокаТаблицы.НомерИсправленияИсходногоДокумента = 0;
					СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = Дата('00010101000000');
				Иначе
					СтрокаТаблицы.НомерИсправленияИсходногоДокумента = СтрокаТаблицы.НомерИсправления;
					СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = СтрокаТаблицы.ДатаИсправления;
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				
				СтрокаТаблицы.НомерИсправления 					 = СтрокаДокументаОснования.НомерИсправления + 1;
				СтрокаТаблицы.ДатаИсправления  					 = СтрокаТаблицы.ДатаКорректировки;
				
				СтрокаТаблицы.НомерВходящегоДокумента 			 = СтрокаДокументаОснования.НомерВходящегоДокумента;
				СтрокаТаблицы.ДатаВходящегоДокумента  			 = СтрокаДокументаОснования.ДатаВходящегоДокумента;
				
				СтрокаТаблицы.НомерИсходногоДокумента 			 = СтрокаДокументаОснования.НомерИсходногоДокумента;
				СтрокаТаблицы.ДатаИсходногоДокумента 			 = СтрокаДокументаОснования.ДатаИсходногоДокумента;
				СтрокаТаблицы.НомерИсправленияИсходногоДокумента = СтрокаДокументаОснования.НомерИсправленияИсходногоДокумента;
				СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = СтрокаДокументаОснования.ДатаИсправленияИсходногоДокумента;
				
			КонецЕсли;
				
			СтрокаТаблицы.ЗаполненыРеквизитыИсправления = Истина;	
			
		Иначе
			// рекурсивный вызов
			ЗаполнитьРеквизитыИсправленияВСтрокеТаблицыДокументовКорректировки(СтрокаДокументаОснования, ТаблицаДокументов);
		КонецЕсли;	
		
	Иначе
		СтрокаТаблицы.ЗаполненыРеквизитыИсправления = Истина;	
	КонецЕсли;
	
КонецПроцедуры

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если НЕ (Реквизиты.ЕстьТовары или Реквизиты.ЕстьУслуги или Реквизиты.ЕстьАгентскиеУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ (Реквизиты.КорректироватьБУиНУ или Реквизиты.КорректироватьНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",  Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",   Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", Реквизиты.СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ЕстьТовары", Реквизиты.ЕстьТовары);
	
	ДокументПоступленияСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(
		Реквизиты.ДокументПоступления, Истина);
	ДанныеДокументаПоступленияСсылка = Новый Структура(
		"Дата,СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СуммаВключаетНДС",
		'00010101', Неопределено, Неопределено, Истина);
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		МетаданныеДокументаПоступления = ДокументПоступленияСсылка.Метаданные();
		ЕстьСчетРасчетов = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокументаПоступления);
		ЕстьСчетАвансов  = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетУчетаРасчетовПоАвансам", МетаданныеДокументаПоступления);
		ЕстьСуммаВключаетНДС = ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаПоступления);
		СписокРеквизитов = "Дата" 
			+ ?(ЕстьСчетРасчетов, ",СчетУчетаРасчетовСКонтрагентом", "")
			+ ?(ЕстьСчетАвансов, ",СчетУчетаРасчетовПоАвансам", "")
			+ ?(ЕстьСуммаВключаетНДС, ",СуммаВключаетНДС", "");
		РеквизитыПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(ДанныеДокументаПоступленияСсылка, РеквизитыПоступления);
	КонецЕсли;
	
	БратьПоПоследнейКорректировке = Ложь;
	
	Если ТипЗнч(Реквизиты.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		БратьПоПоследнейКорректировке = Истина;
		ПервичныйДокументПоступелния = ПолучитьПервичныйДокументПоступления(Реквизиты.ИсправляемыйДокументПоступления);
	Иначе
		ПервичныйДокументПоступелния = Реквизиты.ИсправляемыйДокументПоступления
	КонецЕсли;
	
	ПустоеПодразделение = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	
	Запрос.УстановитьПараметр("ПервичныйДокументПоступления", ПервичныйДокументПоступелния); 
		
	Если Реквизиты.РасчетыВВалюте или Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		
		КопияНомеровТаблиц = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НомераТаблиц);
		
		НомераТаблиц.Очистить();
		
		Реквизиты.Вставить("БратьПоПоследнейКорректировке", БратьПоПоследнейКорректировке);
		
		Если БратьПоПоследнейКорректировке Тогда
			
			ЗапросДляОпределенияКурсаПервичногоДокумента = Новый Запрос;
			
			ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("СуммаВключаетНДС", Реквизиты.СуммаВключаетНДС);
			ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("Ссылка", Реквизиты.ДокументПоступления);
			
			ЗапросДляОпределенияКурсаПервичногоДокумента.Текст = ТекстЗапорсаПоТаблицамДокументаДляРасчетаКурсовПриИзмененииКорректировки();
			
			СтрокаСуммДокументаВВалютеВзаиморсчетов = ЗапросДляОпределенияКурсаПервичногоДокумента.Выполнить().Выгрузить()[0];
			
			СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу = СтрокаСуммДокументаВВалютеВзаиморсчетов.ВсегоВзаиморасчетовДоКорректировки;
			РублеваяСуммаДляРасчетаКурсаПоПервичномуДокументу       = СтрокаСуммДокументаВВалютеВзаиморсчетов.ВсегоРубДоКорректировки;
			
			СуммаВзаиморасчетовДляРасчетаКурсаИзменения             = СтрокаСуммДокументаВВалютеВзаиморсчетов.ВсегоВзаиморасчетов;
			РублеваяСуммаДляРасчетаКурсаИзменения                   = СтрокаСуммДокументаВВалютеВзаиморсчетов.ВсегоРуб;
			
		Иначе
			
			ИмяДокументаПоступления = Реквизиты.ДокументПоступления.Метаданные().Имя;
			
			Если СтрНайти(ИмяДокументаПоступления, "СчетФактура") = 0 
				И НЕ ТипЗнч(Реквизиты.ДокументПоступления) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				
				ЗапросДляОпределенияКурсаПервичногоДокумента = Новый Запрос;
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ДокументОснование", Реквизиты.ДокументПоступления);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("СуммаВключаетНДС",  Реквизиты.СуммаВключаетНДС);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137", ЛОЖЬ);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("СводныйСФКомиссияПоЗакупке", ЛОЖЬ);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("СводныйСФКомиссияПоПродаже", ЛОЖЬ);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ПредставлениеПоставщика",			"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("АдресПоставщика",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("Грузоотправитель",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ИННКПППоставщика",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ПредставлениеПокупателя",			"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("АдресПокупателя",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("Грузополучатель",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ИННКПППокупателя",					"");
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("СчетФактура", Документы.СчетФактураПолученный.ПустаяСсылка());
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ВалютаРеглУчета", Реквизиты.ВалютаРеглУчета);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ПустоеПодразделение", ПустоеПодразделение);
				ЗапросДляОпределенияКурсаПервичногоДокумента.УстановитьПараметр("ЦифровойИндексОбособленногоПодразделения", "");
				
				ЗапросДляОпределенияКурсаПервичногоДокумента.Текст = Документы[Реквизиты.ДокументПоступления.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц);
				
				НомераТаблиц.Вставить("ИтоговаяСуммаПоДокументу", НомераТаблиц.Количество());
				
				ЗапросДляОпределенияКурсаПервичногоДокумента.Текст = ЗапросДляОпределенияКурсаПервичногоДокумента.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокумента.Ссылка,
				|	СУММА(ВЫБОР КОГДА &СуммаВключаетНДС ТОГДА ТаблицаДокумента.Сумма ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС КОНЕЦ) КАК СуммаВсегоВзаиморасчетов,
				|	СУММА(ТаблицаДокумента.ВсегоРуб) КАК ВсегоРуб
				|ИЗ
				|	ТаблицаДокумента КАК ТаблицаДокумента
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаДокумента.Ссылка";
				
				РезультатПакетаДляОпределенияКурса = ЗапросДляОпределенияКурсаПервичногоДокумента.ВыполнитьПакет();
				
				СтрокаСуммДокументаВВалютеВзаиморсчетов = РезультатПакетаДляОпределенияКурса[НомераТаблиц.ИтоговаяСуммаПоДокументу].Выгрузить()[0];
				
				СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу = СтрокаСуммДокументаВВалютеВзаиморсчетов.СуммаВсегоВзаиморасчетов;
				РублеваяСуммаДляРасчетаКурсаПоПервичномуДокументу       = СтрокаСуммДокументаВВалютеВзаиморсчетов.ВсегоРуб;
				
				СуммаВзаиморасчетовДляРасчетаКурсаИзменения             = СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу;
				РублеваяСуммаДляРасчетаКурсаИзменения                   = РублеваяСуммаДляРасчетаКурсаПоПервичномуДокументу;
				
			Иначе
				
				СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу = 0;
				РублеваяСуммаДляРасчетаКурсаПоПервичномуДокументу       = 0;
				
				СуммаВзаиморасчетовДляРасчетаКурсаИзменения             = 0;
				РублеваяСуммаДляРасчетаКурсаИзменения                   = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Реквизиты.ВалютаВзаиморасчетов, ДанныеДокументаПоступленияСсылка.Дата);
			
		Иначе
			
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
			
		КонецЕсли;
		
		Реквизиты.Вставить("КурсВзаиморасчетов",      СтруктураКурсаВзаиморасчетов.Курс);
		Реквизиты.Вставить("КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
		// Если документ оформлен в рублях - берем курс на дату первичного документа
		Если Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРеглУчета Тогда
			СтруктураКурсаПервичногоДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Реквизиты.ВалютаВзаиморасчетов, ДанныеДокументаПоступленияСсылка.Дата);
			Реквизиты.Вставить("КурсДвиженийПервичногоДокумента",    СтруктураКурсаПервичногоДокумента.Курс);
			
			СтруктураКурсаПоследнейКорректировки = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
			Реквизиты.Вставить("КурсДвиженийПоследнейКорректировки", СтруктураКурсаПоследнейКорректировки.Курс);
		// Иначе берем расчетный курс
		Иначе
			Реквизиты.Вставить("КурсДвиженийПервичногоДокумента",    ?(СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу = 0, СтруктураКурсаВзаиморасчетов.Курс, (РублеваяСуммаДляРасчетаКурсаПоПервичномуДокументу/СуммаВзаиморасчетовДляРасчетаКурсаПоПервичномуДокументу)*СтруктураКурсаВзаиморасчетов.Кратность));
			Реквизиты.Вставить("КурсДвиженийПоследнейКорректировки", ?(СуммаВзаиморасчетовДляРасчетаКурсаИзменения = 0, СтруктураКурсаВзаиморасчетов.Курс, (РублеваяСуммаДляРасчетаКурсаИзменения/СуммаВзаиморасчетовДляРасчетаКурсаИзменения)*СтруктураКурсаВзаиморасчетов.Кратность));
		КонецЕсли;

		НомераТаблиц = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КопияНомеровТаблиц);
			
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты, НомераТаблиц);
		
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимУслуги", НСтр("ru = 'Услуги'"));
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ПлательщикНДС", ПлательщикНДС);
	УпрощенныйУчетНДС = Реквизиты.ПлательщикНДС 
		И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	Реквизиты.Вставить("РаздельныйУчетНДС", Реквизиты.ПлательщикНДС 
		И УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("РаздельныйУчетНДСНаСчете19", Реквизиты.ПлательщикНДС 
		И УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период));
		
	Реквизиты.Вставить("ПлательщикНДФЛ", 
		УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПлательщикНДФЛ", Реквизиты.ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период));
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	ВестиСуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	УчетВПродажныхЦенах = (УчетнаяПолитика.СпособОценкиТоваровВРознице(
		Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;

	РозницаВПродажныхЦенах = УчетВПродажныхЦенах
		И Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад 
		И Реквизиты.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Реквизиты.Вставить("РозницаВПродажныхЦенах", РозницаВПродажныхЦенах);
		
	// Параметры для сторнирующих таблиц
	ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(
		Реквизиты.ДокументПоступления);
	ДатаИсправляемогоДокумента = ?(ЗначениеЗаполнено(ИсправляемыйДокумент), 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "Дата"), Реквизиты.Период);
	Запрос.УстановитьПараметр("Период",      Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура",       ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ДатаИсправляемогоСчетаФактуры", ДатаИсправляемогоДокумента);
	Запрос.УстановитьПараметр("ОснованиеКорректировка",
		ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления"));

	Запрос.УстановитьПараметр("МоментДокумента",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, ДокументСсылка), ВидГраницы.Исключая));
	
	// Параметры для шапки
	Запрос.УстановитьПараметр("ВестиПартионныйУчет",         ПартионныйУчет);
	Запрос.УстановитьПараметр("ВестиСуммовойУчетПоСкладам",  ВестиСуммовойУчетПоСкладам);
	Запрос.УстановитьПараметр("ПлательщикНДС",               ПлательщикНДС);
	Запрос.УстановитьПараметр("УпрощенныйУчетНДС",           УпрощенныйУчетНДС);
	Запрос.УстановитьПараметр("РаздельныйУчетНДС",           Реквизиты.РаздельныйУчетНДС);
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19",  Реквизиты.РаздельныйУчетНДСНаСчете19);
	Запрос.УстановитьПараметр("ПоддержкаПБУ18",              ПоддержкаПБУ18);
	Запрос.УстановитьПараметр("УчетВПродажныхЦенах",         УчетВПродажныхЦенах);
	Запрос.УстановитьПараметр("РозницаВПродажныхЦенах",      РозницаВПродажныхЦенах);
	Запрос.УстановитьПараметр("РазделениеПоСтавкамВРознице", РазделениеПоСтавкамВРознице);
	
	ДокументПоступленияДата = ?(ЗначениеЗаполнено(Реквизиты.ДокументПоступления),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументПоступления, "Дата"),
		Реквизиты.Период);
	Запрос.УстановитьПараметр("ДокументОснованиеДата", ДокументПоступленияДата);
	Запрос.УстановитьПараметр("ДокументПоступленияСсылка", ДокументПоступленияСсылка);
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		Запрос.УстановитьПараметр("ДокументПоступленияДата", Реквизиты.Период);
	Иначе
		Запрос.УстановитьПараметр("ДокументПоступленияДата", ДанныеДокументаПоступленияСсылка.Дата);
	КонецЕсли;
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, ДокументПоступленияДата);
	Запрос.УстановитьПараметр("КурсДокумента",      СтруктураКурсаДокумента.Курс);
	Запрос.УстановитьПараметр("КратностьДокумента", СтруктураКурсаДокумента.Кратность);
	
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДанныеДокументаПоступленияСсылка.СчетУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам",     ДанныеДокументаПоступленияСсылка.СчетУчетаРасчетовПоАвансам);
	Реквизиты.СуммаВключаетНДС = ДанныеДокументаПоступленияСсылка.СуммаВключаетНДС;	
	Запрос.УстановитьПараметр("СуммаВключаетНДС", Реквизиты.СуммаВключаетНДС);
	
	// Параметры для движений НДС
	Запрос.УстановитьПараметр("ИсправленныйСчетФактура",
		?(Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, 
		ДокументСсылка, Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка()));

	Запрос.УстановитьПараметр("СчетФактураДата", 
		?(Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ИсправляемыйДокументПоступления, "Дата"), 
		Реквизиты.Период));
		
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		СчетФактура = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Реквизиты.ДокументПоступления);
	ИначеЕсли Реквизиты.РаздельныйУчетНДСНаСчете19 ИЛИ Реквизиты.ВосстановитьНДС Тогда 
		СчетФактура = ДокументСсылка;
	Иначе
		СчетФактура = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Реквизиты.ДокументПоступления);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		СчетФактураПриУвеличенииСтоимости = ДокументСсылка;
	Иначе
		СчетФактураПриУвеличенииСтоимости = СчетФактура;
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетФактураПриУвеличенииСтоимости", СчетФактураПриУвеличенииСтоимости);

	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления")
	 ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ЭтоКорректировочныйСчетФактура = Истина;
	Иначе
		ЭтоКорректировочныйСчетФактура = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоКорректировочныйСчетФактура",    ЭтоКорректировочныйСчетФактура);
	
	// Параметры для движений УСН - значения получаются на дату документа поступления
	Реквизиты.Вставить("ПрименяетсяУСН",                          УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, ДокументПоступленияДата));
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы",        УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, ДокументПоступленияДата));
	Реквизиты.Вставить("ПрименяетсяУСНДоходы",                    УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, ДокументПоступленияДата));
	Запрос.УстановитьПараметр("ПрименяетсяУСН",                   Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", Реквизиты.ПрименяетсяУСНДоходыМинусРасходы);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы",             Реквизиты.ПрименяетсяУСНДоходы);
	Запрос.УстановитьПараметр("ПорядокПризнанияРасходовПоНДС",    УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, ДокументПоступленияДата));
	Запрос.УстановитьПараметр("ЭтоКорректировкаПрошлогоПериода",  (Год(Реквизиты.Период) > Год(ДокументПоступленияДата)) );
	Запрос.УстановитьПараметр("Счета10",                          БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	Запрос.УстановитьПараметр("Счета97",                          БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов));
	
	Запрос.УстановитьПараметр("ОтражатьВНалоговомУчете", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение",     ПустоеПодразделение);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаКорректировкаПоступления(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТаблицСторнирующихНДСЗаписей(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТаблицВычетНДСНаОснованииДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТаблицКорректировочныеДвиженияНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТаблицаКорректировокаНДСКосвенныхРасходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)  // добавляем реквизиты и таблицы для УСН
		+ ТекстЗапросаКорректировкаПоступленияУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКорректировкаПоступленияМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРублевыеСуммыДокументовВВалюте(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗакупленныеТоварыКомитента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
		
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;	
	КонецЕсли; 	
	
	Если ПараметрыПроведения.ЗачетАвансовРеквизиты = Неопределено 
		ИЛИ НЕ ПараметрыПроведения.ЗачетАвансовРеквизиты[0].ЭтоВозврат Тогда
		ПараметрыПроведения.Вставить("ВыделениеАвансаРеквизиты", Неопределено);
	Иначе
		ПараметрыПроведения.Вставить("ВыделениеАвансаРеквизиты", ПараметрыПроведения.ЗачетАвансовРеквизиты.Скопировать());
		ПараметрыПроведения.ЗачетАвансовРеквизиты = Неопределено;
	КонецЕсли;
	
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.ТаблицаТовары, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.ТаблицаУслуги, Реквизиты, Неопределено, "СчетЗатрат");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.ТаблицаВосстановление, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.ТаблицаВычет, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.ВычетНДСНаОснованииДокумента, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(
		ПараметрыПроведения.КорректировкаНДСКосвенныхРасходов, Реквизиты, Неопределено, "СчетЗатрат");
	
	НДСТаблицыДокумента = Новый Структура;
	// Таблицы сторнирующих записей
	НДСТаблицыДокумента.Вставить("КнигаПокупок",                      ПараметрыПроведения.КнигаПокупок);
	НДСТаблицыДокумента.Вставить("КнигаПродаж",                       ПараметрыПроведения.КнигаПродаж);
	НДСТаблицыДокумента.Вставить("НДСПредъявленный",                  ПараметрыПроведения.НДСПредъявленный);
	// Таблицы движений по документу
	НДСТаблицыДокумента.Вставить("ТаблицаВосстановление",             ПараметрыПроведения.ТаблицаВосстановление);
	НДСТаблицыДокумента.Вставить("ТаблицаВычет",                      ПараметрыПроведения.ТаблицаВычет);
	НДСТаблицыДокумента.Вставить("ВычетНДСНаОснованииДокумента",      ПараметрыПроведения.ВычетНДСНаОснованииДокумента);
	НДСТаблицыДокумента.Вставить("КорректировкаНДСКосвенныхРасходов", ПараметрыПроведения.КорректировкаНДСКосвенныхРасходов);
	ПараметрыПроведения.Вставить("НДСТаблицыДокумента",               НДСТаблицыДокумента);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	// В отличие от обычных документов поступления для корректировки поступления
	// получение данных табличных частей необходимо на любом этапе проведения: 
	// и при оперативном проведении и актуализации отложенных расчетов, 
	// т.к. они используются для выделения/зачета авансов.

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьТоварыКомитента) КАК ЕстьТоварыКомитента
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьАгентскиеУслуги,
	|		ЛОЖЬ КАК ЕстьТоварыКомитента
	|	ИЗ
	|		Документ.КорректировкаПоступления.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.КорректировкаПоступления.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.СчетУчета.Забалансовый
	|		И ТаблицаДокумента.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.КорректировкаПоступления.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.КорректироватьБУиНУ КАК КорректироватьБУиНУ,
	|	Реквизиты.КорректироватьНДС КАК КорректироватьНДС,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ДокументПоступления КАК ДокументПоступления,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДокументПоступления.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументПоступлениеДата,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДокументПоступления ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|					И ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Реквизиты.ВалютаДокумента
	|		ИНАЧЕ Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)) КАК ВидДоговора,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДокументПоступления ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭлектронныеУслуги,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидАгентскогоДоговора, НЕОПРЕДЕЛЕНО) КАК ВидАгентскогоДоговора,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВосстановитьНДС КАК ВосстановитьНДС,
	|	Реквизиты.ИсправляемыйДокументПоступления КАК ИсправляемыйДокументПоступления,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СпособОтраженияУслугТекГода КАК СпособОтраженияУслугТекГода,
	|	Реквизиты.СтатьяПрочихДоходовИРасходов КАК СтатьяПрочихДоходовИРасходов,
	|	Реквизиты.ПризнаватьЗачитыватьАванс КАК ПризнаватьЗачитыватьАванс,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.КорректировкаПоступления КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДокументПоступления
	|		ПО Реквизиты.ДокументПоступления = ДанныеПервичныхДокументовДокументПоступления.Документ
	|			И Реквизиты.Организация = ДанныеПервичныхДокументовДокументПоступления.Организация
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.КорректироватьБУиНУ КАК КорректироватьБУиНУ,
	|	Реквизиты.КорректироватьНДС КАК КорректироватьНДС,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ДокументПоступления КАК ДокументПоступления,
	|	Реквизиты.ДокументПоступления КАК Сделка,
	|	Реквизиты.ДокументПоступлениеДата КАК ДокументПоступлениеДата,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги КАК ЭлектронныеУслуги,
	|	Реквизиты.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	Реквизиты.ПризнаватьЗачитыватьАванс КАК ПризнаватьЗачитыватьАванс,
	|	Реквизиты.ИсправляемыйДокументПоступления КАК ИсправляемыйДокументПоступления,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАгентскиеУслуги, ЛОЖЬ) КАК ЕстьАгентскиеУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыКомитента, ЛОЖЬ) КАК ЕстьТоварыКомитента,
	|	Реквизиты.ВосстановитьНДС КАК ВосстановитьНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ЛОЖЬ КАК Услуга,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ТаблицаТовары.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ ТаблицаТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения + ТаблицаТовары.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаТовары.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения + ТаблицаТовары.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаТовары.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения - ТаблицаТовары.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки + ТаблицаТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаТовары.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки + ТаблицаТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаТовары.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки - ТаблицаТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.НомерГТДДоИзменения КАК НомерГТДДоИзменения,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчета.Забалансовый КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.ОтражениеВУСН,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СуммаВРознице,
		|	ТаблицаТовары.СуммаВРозницеДоИзменения,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ТаблицаТовары.Контрагент КАК Комитент,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета.Забалансовый
		|				И ТаблицаТовары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КомиссияПоЗакупке,
		|	ТаблицаТовары.ДоговорКонтрагента КАК ДоговорКомиссии,
		|	ТаблицаТовары.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаТовары.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораСКомитентом,
		|	ТаблицаТовары.СчетРасчетов КАК СчетРасчетовСКомитентом,
		|	ТаблицаТовары.ЕстьВДокументеПоступления
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИСТИНА КАК Услуга,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Содержание КАК Содержание,
		|	ТаблицаУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма - ТаблицаУслуги.СуммаНДС 
		|		ИНАЧЕ ТаблицаУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения + ТаблицаУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаУслуги.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения + ТаблицаУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаУслуги.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения - ТаблицаУслуги.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки + ТаблицаУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки + ТаблицаУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки - ТаблицаУслуги.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки,
		|	ТаблицаУслуги.СчетЗатрат,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3,
		|	ТаблицаУслуги.СубконтоНУ1,
		|	ТаблицаУслуги.СубконтоНУ2,
		|	ТаблицаУслуги.СубконтоНУ3,
		|	ТаблицаУслуги.ОтражениеВУСН,
		|	ТаблицаУслуги.ЕстьВДокументеПоступления
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ИСТИНА КАК Услуга,
		|	ТаблицаАгентскиеУслуги.Содержание КАК Содержание,
		|	ТаблицаАгентскиеУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
		|	ТаблицаАгентскиеУслуги.Количество КАК Количество,
		|	ТаблицаАгентскиеУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаАгентскиеУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма - ТаблицаАгентскиеУслуги.СуммаНДС
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения + ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения + ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения - ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки + ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки + ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки - ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.Контрагент КАК Комитент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКомиссии,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораСКомитентом,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов КАК СчетРасчетовСКомитентом
		|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
		|ИЗ
		|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|ГДЕ
		|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаДляОбработки, Реквизиты)
	
	// В зависимости от того в какой валюте оформлен документ пользователь может управлять одной из сумм.
	// В случае если документ оформлен в валюте, то пользователь управляет СуммаВзаиморасчетов 
	// и корректировать стоит СуммаРуб.
	// В случае если документ оформлен в валюте регламентированного учета, то пользователь управляет СуммаРуб 
	// и корректировать стоит СуммаВзаиморасчетов
	ДокументОформленВРублях = (Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРеглУчета);
	
	Если ДокументОформленВРублях Тогда
		ПодготовитьТаблицуДокументаРасчетыВВалютеОформленныйВРублях(ТаблицаДляОбработки, Реквизиты);
	Иначе
		ПодготовитьТаблицуДокументаРасчетыВВалютеОформленныйВВалюте(ТаблицаДляОбработки, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуДокументаРасчетыВВалютеОформленныйВРублях(ТаблицаДляОбработки, Реквизиты)

	// Добавим колонки для отбора строк, которые следует обработать
	ТаблицаДляОбработки.Колонки.Добавить("ПризнакДляСтрокДоИзменения");
	ТаблицаДляОбработки.Колонки.Добавить("ПризнакДляСтрок");
	
	Если НЕ Реквизиты.БратьПоПоследнейКорректировке Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
			// Приведем суммы к общему виду - заполнены суммы до корректировки, До изменения, после изменения
			СтрокаТаблицы.СуммаРубДоКорректировки    = СтрокаТаблицы.СуммаРубДоИзменения;
			СтрокаТаблицы.СуммаНДСРубДоКорректировки = СтрокаТаблицы.СуммаНДСРубДоИзменения;
		КонецЦикла;
	КонецЕсли;
	
	// Определим используемые курсы
	КурсВзаиморасчетов                 = ?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов);
	КурсДвиженийПервичногоДокумента    = ?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсДвиженийПервичногоДокумента / Реквизиты.КратностьВзаиморасчетов);
	КурсДвиженийПоследнейКорректировки = ?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсДвиженийПоследнейКорректировки / Реквизиты.КратностьВзаиморасчетов);
	
	// До корректировки
	
	// Приведем сумму взаиморасчетов до корректировки к курсу на дату документа
	СуммаРубДоКорректировки = ТаблицаДляОбработки.Итог("СуммаРубДоКорректировки");
	СуммаВзаиморасчетовДляПересчетаСуммДоКорректировки = Окр(СуммаРубДоКорректировки / КурсДвиженийПервичногоДокумента, 2);
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаВзаиморасчетовДляПересчетаСуммДоКорректировки, ТаблицаДляОбработки, "СуммаВзаиморасчетовДоКорректировки", "СуммаРубДоКорректировки");
	
	// Приведем сумму НДС до корректировки к курсу на дату документа
	СуммаНДСРубДоКорректировки = ТаблицаДляОбработки.Итог("СуммаНДСРубДоКорректировки");
	Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоКорректировки = Окр(СуммаНДСРубДоКорректировки / КурсДвиженийПервичногоДокумента, 2);
	Иначе
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоКорректировки = Окр(СуммаНДСРубДоКорректировки / КурсВзаиморасчетов, 2);
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоКорректировки, ТаблицаДляОбработки, "СуммаНДСВзаиморасчетовДоКорректировки", "СуммаРубДоКорректировки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
		
		// Если суммы изменились, то пометим их для обработки далее
		Если СтрокаТаблицы.СуммаРубДоИзменения <> СтрокаТаблицы.СуммаРубДоКорректировки Тогда
			СтрокаТаблицы.ПризнакДляСтрокДоИзменения = Истина;
			СтрокаТаблицы.ПризнакДляСтрок            = Истина;
		// Если ничего не изменилось, то установим суммы до изменения
		Иначе
			СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения    = СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки;
			СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения = СтрокаТаблицы.СуммаНДСВзаиморасчетовДоКорректировки;
			СтрокаТаблицы.ПризнакДляСтрокДоИзменения        = Ложь;
			Если СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРубДоКорректировки Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов    = СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки;
				СтрокаТаблицы.СуммаНДСВзаиморасчетов = СтрокаТаблицы.СуммаНДСВзаиморасчетовДоКорректировки;
				СтрокаТаблицы.ПризнакДляСтрок        = Ложь;
			Иначе
				СтрокаТаблицы.ПризнакДляСтрок        = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// До изменения
	
	ТаблицаДоИзменения = ТаблицаДляОбработки.Скопировать(Новый Структура("ПризнакДляСтрокДоИзменения", Истина));
	ТаблицаДоИзменения.Индексы.Добавить("ИмяСписка");
	ТаблицаДоИзменения.Индексы.Добавить("НомерСтроки");
		
	// Приведем сумму взаиморасчетов до изменения к курсу на дату документа
	СуммаРубДоИзменения = ТаблицаДоИзменения.Итог("СуммаРубДоИзменения");
	СуммаВзаиморасчетовДляПересчетаСуммДоИзменения = Окр(СуммаРубДоИзменения / КурсДвиженийПоследнейКорректировки, 2);
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаВзаиморасчетовДляПересчетаСуммДоИзменения, ТаблицаДоИзменения, "СуммаВзаиморасчетовДоИзменения", "СуммаРубДоИзменения");
		
	// Приведем сумму НДС до изменения к курсу на дату документа
	СуммаНДСРубДоИзменения = ТаблицаДляОбработки.Итог("СуммаНДСРубДоИзменения");
	Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоИзменения = Окр(СуммаНДСРубДоИзменения / КурсДвиженийПоследнейКорректировки, 2);
	Иначе
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоИзменения = Окр(СуммаНДСРубДоИзменения / КурсВзаиморасчетов, 2);
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаНДСВзаиморасчетовДляПересчетаСуммДоИзменения, ТаблицаДляОбработки, "СуммаНДСВзаиморасчетовДоИзменения", "СуммаРубДоИзменения");
		
	Для Каждого СтрокаТаблицы Из ТаблицаДоИзменения Цикл
		
		ОтборСтрок  = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
		МассивСтрок = ТаблицаДляОбработки.НайтиСтроки(ОтборСтрок);
			
		СтрокаТаблицыДляОбработки = МассивСтрок[0];
		СтрокаТаблицыДляОбработки.СуммаВзаиморасчетовДоИзменения    = СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения;
		СтрокаТаблицыДляОбработки.СуммаНДСВзаиморасчетовДоИзменения = СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения;
			
		Если СтрокаТаблицы.СуммаРубДоИзменения = СтрокаТаблицы.СуммаРуб Тогда
			СтрокаТаблицыДляОбработки.СуммаВзаиморасчетов    = СтрокаТаблицыДляОбработки.СуммаВзаиморасчетовДоИзменения;
			СтрокаТаблицыДляОбработки.СуммаНДСВзаиморасчетов = СтрокаТаблицыДляОбработки.СуммаНДСВзаиморасчетовДоИзменения;
			СтрокаТаблицыДляОбработки.ПризнакДляСтрок        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоИзменения = Неопределено; // ТаблицаДоИзменения больше не требуется
	
	// Текущая корректировка
	
	ТаблицаПоТекущейКорректировке = ТаблицаДляОбработки.Скопировать(Новый Структура("ПризнакДляСтрок", Истина));
	ТаблицаПоТекущейКорректировке.Индексы.Добавить("ИмяСписка");
	ТаблицаПоТекущейКорректировке.Индексы.Добавить("НомерСтроки");
	
	ТаблицаДляРасчетаПоКурсуВзаиморасчетов    = Неопределено;
	СуммаРубПоТекущейКорректировке            = ТаблицаПоТекущейКорректировке.Итог("СуммаРуб");
	СуммаРубДоИзмененияПоТекущейКорректировки = ТаблицаПоТекущейКорректировке.Итог("СуммаРубДоИзменения");
	СуммаНДСРубПоТекущейКорректировке            = ТаблицаПоТекущейКорректировке.Итог("СуммаНДСРуб");
	СуммаНДСРубДоИзмененияПоТекущейКорректировки = ТаблицаПоТекущейКорректировке.Итог("СуммаНДСРубДоИзменения");
	
	Если СуммаРубДоИзмененияПоТекущейКорректировки < СуммаРубПоТекущейКорректировке Тогда
		
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов = Новый ТаблицаЗначений;
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("ИмяСписка");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("НомерСтроки");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаСамогоУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаНДСВзаиморасчетовУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Индексы.Добавить("ИмяСписка");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Индексы.Добавить("НомерСтроки");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТекущейКорректировке Цикл
			
			Если СтрокаТаблицы.СуммаРуб > СтрокаТаблицы.СуммаРубДоИзменения 
				И СтрокаТаблицы.СуммаРуб > СтрокаТаблицы.СуммаРубДоКорректировки Тогда
				
				НоваяСтрока                                  = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Добавить();
				НоваяСтрока.ИмяСписка                        = СтрокаТаблицы.ИмяСписка;
				НоваяСтрока.НомерСтроки                      = СтрокаТаблицы.НомерСтроки;
				НоваяСтрока.СуммаСамогоУвеличения            = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаРубДоИзменения;
				НоваяСтрока.СуммаВзаиморасчетовУвеличения    = 0;
				НоваяСтрока.СуммаНДСВзаиморасчетовУвеличения = 0;
				НоваяСтрока.СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		УвеличениеСуммаРубПодлежащаяРаспределению = СуммаРубПоТекущейКорректировке - СуммаРубДоИзмененияПоТекущейКорректировки;
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			УвеличениеСуммаРубПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов", "СуммаСамогоУвеличения");
			
		СуммаВзаиморасчетовПодлежащаяРаспределению = Окр(УвеличениеСуммаРубПодлежащаяРаспределению / КурсВзаиморасчетов, 2);
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаВзаиморасчетовПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаВзаиморасчетовУвеличения", "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
			
		УвеличениеСуммаНДСРубПодлежащаяРаспределению = СуммаНДСРубПоТекущейКорректировке - СуммаНДСРубДоИзмененияПоТекущейКорректировки;
		СуммаВзаиморасчетовНДСПодлежащаяРаспределению = Окр(УвеличениеСуммаНДСРубПодлежащаяРаспределению / КурсВзаиморасчетов, 2);
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СуммаВзаиморасчетовНДСПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаНДСВзаиморасчетовУвеличения", "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТекущейКорректировке Цикл
			
			ОтборСтрок  = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
			МассивСтрок = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.НайтиСтроки(ОтборСтрок);
			
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения = МассивСтрок[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов;
			Если СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРубДоИзменения Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов       = СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения;
				СтрокаТаблицы.СуммаНДСВзаиморасчетов    = СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения;
				СтрокаТаблицы.ПризнакДляСтрок = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Окончательные преобразования
	
	ТаблицаОкончательныхПреобразований = ТаблицаПоТекущейКорректировке.Скопировать(Новый Структура("ПризнакДляСтрок", Истина));
	ТаблицаОкончательныхПреобразований.Индексы.Добавить("ИмяСписка");
	ТаблицаОкончательныхПреобразований.Индексы.Добавить("НомерСтроки");
	
	СуммаРубДляРаспределения = ТаблицаОкончательныхПреобразований.Итог("СуммаРуб");
	СуммаВзаиморасчетовДляРаспределения = Окр(СуммаРубДляРаспределения / КурсДвиженийПоследнейКорректировки, 2);
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаВзаиморасчетовДляРаспределения, ТаблицаОкончательныхПреобразований, "СуммаВзаиморасчетов", "СуммаРуб");
		
	СуммаНДСРубДляРаспределения = ТаблицаОкончательныхПреобразований.Итог("СуммаНДСРуб");
	Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СуммаНДСВзаиморасчетовДляРаспределения = Окр(СуммаНДСРубДляРаспределения / КурсДвиженийПоследнейКорректировки, 2);
	Иначе
		СуммаНДСВзаиморасчетовДляРаспределения = Окр(СуммаНДСРубДляРаспределения / КурсВзаиморасчетов, 2);
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		СуммаНДСВзаиморасчетовДляРаспределения, ТаблицаОкончательныхПреобразований, "СуммаНДСВзаиморасчетов", "СуммаРуб");
		
	//Теперь соберем все в одной таблице, переданной в процедуру
	Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
		
		ОтборСтрок = Новый Структура("ИмяСписка, НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
		
		Если ТаблицаДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
			СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено;
		Иначе
			МассивСтрок = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = МассивСтрок[0];
			Иначе
				СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивСтрок = ТаблицаОкончательныхПреобразований.НайтиСтроки(ОтборСтрок);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицыОкончательныхПреобразований = МассивСтрок[0];
		Иначе
			СтрокаТаблицыОкончательныхПреобразований = Неопределено;
		КонецЕсли;
		
		МассивСтрок = ТаблицаПоТекущейКорректировке.НайтиСтроки(ОтборСтрок);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицыПоТекущейКорректировке = МассивСтрок[0];
		Иначе
			СтрокаТаблицыПоТекущейКорректировке = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицыОкончательныхПреобразований = Неопределено Тогда
			Если СтрокаТаблицыПоТекущейКорректировке = Неопределено Тогда
				Продолжить;
			Иначе
				СтрокаТаблицы.СуммаВзаиморасчетов    = СтрокаТаблицыПоТекущейКорректировке.СуммаВзаиморасчетов;
				СтрокаТаблицы.СуммаНДСВзаиморасчетов = СтрокаТаблицыПоТекущейКорректировке.СуммаНДСВзаиморасчетов;
				
				Если НЕ СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
					
					СтрокаТаблицы.СуммаВзаиморасчетов    = СтрокаТаблицы.СуммаВзаиморасчетов    + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаВзаиморасчетовУвеличения;
					СтрокаТаблицы.СуммаНДСВзаиморасчетов = СтрокаТаблицы.СуммаНДСВзаиморасчетов + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаНДСВзаиморасчетовУвеличения;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			СтрокаТаблицы.СуммаВзаиморасчетов    = СтрокаТаблицыОкончательныхПреобразований.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаНДСВзаиморасчетов = СтрокаТаблицыОкончательныхПреобразований.СуммаНДСВзаиморасчетов;
			
			Если НЕ СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов    = СтрокаТаблицы.СуммаВзаиморасчетов    + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаВзаиморасчетовУвеличения;
				СтрокаТаблицы.СуммаНДСВзаиморасчетов = СтрокаТаблицы.СуммаНДСВзаиморасчетов + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаНДСВзаиморасчетовУвеличения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуДокументаРасчетыВВалютеОформленныйВВалюте(ТаблицаДляОбработки, Реквизиты)
	
	Если НЕ Реквизиты.БратьПоПоследнейКорректировке Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
			
			СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки    = СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения;
			СтрокаТаблицы.СуммаНДСВзаиморасчетовДоКорректировки = СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	СуммаВзаиморасчетовДоКорректировки = ТаблицаДляОбработки.Итог("СуммаВзаиморасчетовДоКорректировки");
	СуммаВзаиморасчетовДоИзменения     = ТаблицаДляОбработки.Итог("СуммаВзаиморасчетовДоИзменения");
	СуммаВзаиморасчетов                = ТаблицаДляОбработки.Итог("СуммаВзаиморасчетов");
	
	//Пересчитаем ту часть табличной части, которая ДоКорректировки
	РублеваяСуммаДляПересчетаСуммДоКорректировки = Окр(СуммаВзаиморасчетовДоКорректировки*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсДвиженийПервичногоДокумента/Реквизиты.КратностьВзаиморасчетов), 2);
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаДляПересчетаСуммДоКорректировки, ТаблицаДляОбработки, "СуммаРубДоКорректировки", "СуммаВзаиморасчетовДоКорректировки");
	
	Если НЕ Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		РублеваяСуммаДляПересчетаСуммДоКорректировки = Окр(СуммаВзаиморасчетовДоКорректировки*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов/Реквизиты.КратностьВзаиморасчетов), 2);
	КонецЕсли;	
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаДляПересчетаСуммДоКорректировки, ТаблицаДляОбработки, "СуммаБезНДСРубДоКорректировки", "СуммаВзаиморасчетовДоКорректировки");
	
	//Подсчитаем СуммаНДСРубДокорректировки, и для тех строк, которые вообще не менялись пропишем сумы до корректировки
	ТаблицаДляОбработки.Колонки.Добавить("ПризнакДляСтрокДоИзменения");
	ТаблицаДляОбработки.Колонки.Добавить("ПризнакДляСтрок");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
		
		ПроцентНДСДоКорректировки = ?(СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки = 0, 0, Окр(СтрокаТаблицы.СуммаНДСВзаиморасчетовДоКорректировки/(СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки - СтрокаТаблицы.СуммаНДСВзаиморасчетовДоКорректировки), 2)*100);
		
		СтрокаТаблицы.СуммаНДСРубДоКорректировки = Окр(СтрокаТаблицы.СуммаБезНДСРубДоКорректировки*ПроцентНДСДоКорректировки/(100 + ПроцентНДСДоКорректировки), 2);	
		
		Если СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения = СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки Тогда
			
			СтрокаТаблицы.СуммаРубДоИзменения = СтрокаТаблицы.СуммаРубДоКорректировки;
			
			СтрокаТаблицы.СуммаБезНДСРубДоИзменения = СтрокаТаблицы.СуммаБезНДСРубДоКорректировки;
			
			ПроцентНДСДоИзменения = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения);
			
			Если ПроцентНДСДоКорректировки <> ПроцентНДСДоИзменения Тогда
				СтрокаТаблицы.СуммаНДСРубДоИзменения = Окр(СтрокаТаблицы.СуммаБезНДСРубДоИзменения*ПроцентНДСДоИзменения/(100 + ПроцентНДСДоИзменения), 2);
			Иначе
				СтрокаТаблицы.СуммаНДСРубДоИзменения = СтрокаТаблицы.СуммаНДСРубДоКорректировки;
			КонецЕсли;	
			
			СтрокаТаблицы.СуммаБезНДСРубДоИзменения = СтрокаТаблицы.СуммаБезНДСРубДоИзменения - СтрокаТаблицы.СуммаНДСРубДоИзменения;
			
			СтрокаТаблицы.ПризнакДляСтрокДоИзменения = Ложь;
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки Тогда
				
				СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРубДоКорректировки;
				
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРубДоКорректировки;
				
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				
				Если ПроцентНДСДоКорректировки <> ПроцентНДС Тогда
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаБезНДСРубДоИзменения*ПроцентНДС/(100 + ПроцентНДС), 2);
				Иначе
					СтрокаТаблицы.СуммаНДСРуб = СтрокаТаблицы.СуммаНДСРубДоКорректировки;
				КонецЕсли;	
				
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.СуммаНДСРуб;
				
				СтрокаТаблицы.ПризнакДляСтрок = Ложь;
				
			Иначе
				СтрокаТаблицы.ПризнакДляСтрок = Истина;
			КонецЕсли;	
			
		Иначе
			
			СтрокаТаблицы.ПризнакДляСтрокДоИзменения = Истина;
			СтрокаТаблицы.ПризнакДляСтрок = Истина;
			
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДСРубДоКорректировки = СтрокаТаблицы.СуммаБезНДСРубДоКорректировки - СтрокаТаблицы.СуммаНДСРубДоКорректировки;
		
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ИмяСписка, НомерСтроки");
	
	//Теперь пересчитаем ту часть таблицы, которая ДоИзменения
	Отбор = Новый Структура("ПризнакДляСтрокДоИзменения", Истина);
	ТаблицаДоИзменения = ТаблицаДляОбработки.Скопировать(Отбор);
	
	ТаблицаДоИзменения.Индексы.Добавить("ИмяСписка");
	ТаблицаДоИзменения.Индексы.Добавить("НомерСтроки");
	
	СуммаВзаиморасчетовДоИзмененияПодлежащаяПересчетуПоКурсуДвиженийДокумента = ТаблицаДоИзменения.Итог("СуммаВзаиморасчетовДоИзменения");
	
	РублеваяСуммаПодлежащаяРаспределению = Окр(СуммаВзаиморасчетовДоИзмененияПодлежащаяПересчетуПоКурсуДвиженийДокумента*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсДвиженийПоследнейКорректировки/Реквизиты.КратностьВзаиморасчетов), 2);
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаПодлежащаяРаспределению, ТаблицаДоИзменения, "СуммаРубДоИзменения", "СуммаВзаиморасчетовДоИзменения");
	
	Если НЕ Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		РублеваяСуммаПодлежащаяРаспределению = Окр(СуммаВзаиморасчетовДоИзмененияПодлежащаяПересчетуПоКурсуДвиженийДокумента*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов/Реквизиты.КратностьВзаиморасчетов), 2);
	КонецЕсли;	
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаПодлежащаяРаспределению, ТаблицаДоИзменения, "СуммаБезНДСРубДоИзменения", "СуммаВзаиморасчетовДоИзменения");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДоИзменения Цикл
		
		ОтборСтрок.ИмяСписка   = СтрокаТаблицы.ИмяСписка;
		ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		
		ПроцентНДС = УчетНДСвызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения);
		
		СтрокаТаблицы.СуммаНДСРубДоИзменения = Окр(СтрокаТаблицы.СуммаБезНДСРубДоИзменения*ПроцентНДС/(100 + ПроцентНДС), 2);
		
		СтрокаТаблицы.СуммаБезНДСРубДоИзменения = СтрокаТаблицы.СуммаБезНДСРубДоИзменения - СтрокаТаблицы.СуммаНДСРубДоИзменения;
		
		МассивСтрок = ТаблицаДляОбработки.НайтиСтроки(ОтборСтрок);
		
		СтрокаТаблицыДляОбработки = МассивСтрок[0];
		
		СтрокаТаблицыДляОбработки.СуммаРубДоИзменения            = СтрокаТаблицы.СуммаРубДоИзменения;
		СтрокаТаблицыДляОбработки.СуммаНДСРубДоИзменения         = СтрокаТаблицы.СуммаНДСРубДоИзменения;
		СтрокаТаблицыДляОбработки.СуммаБезНДСРубДоИзменения      = СтрокаТаблицы.СуммаБезНДСРубДоИзменения;
		
		Если СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения = СтрокаТаблицы.СуммаВзаиморасчетов Тогда
			
			СтрокаТаблицыДляОбработки.СуммаРуб        = СтрокаТаблицыДляОбработки.СуммаРубДоИзменения;
			СтрокаТаблицыДляОбработки.СуммаНДСРуб     = СтрокаТаблицыДляОбработки.СуммаНДСРубДоИзменения;
			СтрокаТаблицыДляОбработки.СуммаБезНДСРуб  = СтрокаТаблицыДляОбработки.СуммаБезНДСРубДоИзменения;
			СтрокаТаблицыДляОбработки.ПризнакДляСтрок = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоИзменения = "";
	
	//Теперь выполним пересчет для той части таблицы, которая по текущей корректировке.
	Отбор = Новый Структура("ПризнакДляСтрок", Истина);
	ТаблицаПоТекущейКорректировке = ТаблицаДляОбработки.Скопировать(Отбор);
	
	ТаблицаПоТекущейКорректировке.Индексы.Добавить("ИмяСписка");
	ТаблицаПоТекущейКорректировке.Индексы.Добавить("НомерСтроки");
	
	ОбновленнаяТаблицаПоТекущейкорректировкиДляДальнейшихПреобразований = Неопределено;
	
	ТаблицаДляРасчетаПоКурсуВзаиморасчетов                              = Неопределено;
	
	СуммаВзаиморасчетовПоТекущейКорректировке                = ТаблицаПоТекущейКорректировке.Итог("СуммаВзаиморасчетов");
	СуммаВзаиморасчетовДоИзмененияПоТекущейКорректировки     = ТаблицаПоТекущейКорректировке.Итог("СуммаВзаиморасчетовДоИзменения");
			
	Если СуммаВзаиморасчетовДоИзмененияПоТекущейКорректировки < СуммаВзаиморасчетовПоТекущейКорректировке Тогда
		
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов = Новый ТаблицаЗначений;
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("ИмяСписка");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("НомерСтроки");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаСамогоУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаРубУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаБезНДСРубУвеличения");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Колонки.Добавить("СуммаНДСРубУвеличения");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТекущейКорректировке Цикл
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов > СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения 
				и СтрокаТаблицы.СуммаВзаиморасчетов > СтрокаТаблицы.СуммаВзаиморасчетовДоКорректировки Тогда
				
				НоваяСтрока = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Добавить();
				
				НоваяСтрока.ИмяСписка             = СтрокаТаблицы.ИмяСписка;
				НоваяСтрока.НомерСтроки           = СтрокаТаблицы.НомерСтроки;
				НоваяСтрока.СуммаСамогоУвеличения = СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения;
				НоваяСтрока.СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов = 0;
				НоваяСтрока.СуммаРубУвеличения       = 0;
				НоваяСтрока.СуммаБезНДСРубУвеличения = 0;
				НоваяСтрока.СуммаНДСРубУвеличения    = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Индексы.Добавить("ИмяСписка");
		ТаблицаДляРасчетаПоКурсуВзаиморасчетов.Индексы.Добавить("НомерСтроки");
		
		УвеличениеСуммаВзаиморасчетовПодлежащаяРаспределению = СуммаВзаиморасчетовПоТекущейКорректировке - СуммаВзаиморасчетовДоИзмененияПоТекущейКорректировки;
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		УвеличениеСуммаВзаиморасчетовПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов", "СуммаСамогоУвеличения");
		
		РублеваяСуммаПодлежащаяРаспределению = Окр(УвеличениеСуммаВзаиморасчетовПодлежащаяРаспределению*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов/Реквизиты.КратностьВзаиморасчетов), 2);
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		РублеваяСуммаПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаРубУвеличения", "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
		
		Если НЕ Реквизиты.РасчетыВУсловныхЕдиницах Тогда
			РублеваяСуммаПодлежащаяРаспределению = Окр(УвеличениеСуммаВзаиморасчетовПодлежащаяРаспределению*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов/Реквизиты.КратностьВзаиморасчетов), 2);
		КонецЕсли;	
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
		РублеваяСуммаПодлежащаяРаспределению, ТаблицаДляРасчетаПоКурсуВзаиморасчетов, "СуммаБезНДСРубУвеличения", "СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТекущейКорректировке Цикл
			
			ОтборСтрок.ИмяСписка   = СтрокаТаблицы.ИмяСписка;
			ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
			
			МассивСтрок = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.НайтиСтроки(ОтборСтрок);
			
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения = МассивСтрок[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПроцентНДСУвеличения = УчетНДСвызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			
			СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаНДСРубУвеличения    = Окр(СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаБезНДСРубУвеличения*ПроцентНДСУвеличения/(100+ПроцентНДСУвеличения), 2);
			СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаБезНДСРубУвеличения = СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаБезНДСРубУвеличения - СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаНДСРубУвеличения;
			
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицыДляРаспределенияУвеличенияДоИзменения.СуммаУвеличенияДляРасчетаПоКурсуВзаиморасчетов;
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетовДоИзменения Тогда
				
				СтрокаТаблицы.СуммаРуб       = СтрокаТаблицы.СуммаРубДоИзменения;
				СтрокаТаблицы.СуммаНДСРуб    = СтрокаТаблицы.СуммаНДСРубДоИзменения;
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаНДСРубДоИзменения;
				
				СтрокаТаблицы.ПризнакДляСтрок = Ложь;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОкончательныхПреобразований = ТаблицаПоТекущейКорректировке.Скопировать(Отбор);
	
	ТаблицаОкончательныхПреобразований.Индексы.Добавить("ИмяСписка");
	ТаблицаОкончательныхПреобразований.Индексы.Добавить("НомерСтроки");
	
	СуммаВзаиморасчетовДляРаспределения = ТаблицаОкончательныхПреобразований.Итог("СуммаВзаиморасчетов");
	
	РублеваяСуммаДляРаспределения = Окр(СуммаВзаиморасчетовДляРаспределения*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсДвиженийПоследнейКорректировки/Реквизиты.КратностьВзаиморасчетов), 2);
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаДляРаспределения, ТаблицаОкончательныхПреобразований, "СуммаРуб", "СуммаВзаиморасчетов");
	
	Если НЕ Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		РублеваяСуммаДляРаспределения = Окр(СуммаВзаиморасчетовДляРаспределения*?(Реквизиты.КратностьВзаиморасчетов = 0, 0, Реквизиты.КурсВзаиморасчетов/Реквизиты.КратностьВзаиморасчетов), 2);
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	РублеваяСуммаДляРаспределения, ТаблицаОкончательныхПреобразований, "СуммаБезНДСРуб", "СуммаВзаиморасчетов");
	
	//Теперь соберем все в одной таблице, переданной в процедуру
	Для Каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
		
		ОтборСтрок.ИмяСписка   = СтрокаТаблицы.ИмяСписка;
		ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		
		Если ТаблицаДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
			СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено;
		Иначе
			
			МассивСтрок = ТаблицаДляРасчетаПоКурсуВзаиморасчетов.НайтиСтроки(ОтборСтрок);
			
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = МассивСтрок[0];
			Иначе
				СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено;
			КонецЕсли;	
				
		КонецЕсли;
		
		МассивСтрок = ТаблицаОкончательныхПреобразований.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицыОкончательныхПреобразований = МассивСтрок[0];
		Иначе
			СтрокаТаблицыОкончательныхПреобразований = Неопределено;
		КонецЕсли;
		
		МассивСтрок = ТаблицаПоТекущейКорректировке.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицыПоТекущейКорректировке = МассивСтрок[0];
		Иначе
			СтрокаТаблицыПоТекущейКорректировке = Неопределено;
		КонецЕсли;	
		
		Если СтрокаТаблицыОкончательныхПреобразований = Неопределено Тогда
			
			Если СтрокаТаблицыПоТекущейКорректировке = Неопределено Тогда
				Продолжить;
			Иначе
				
				СтрокаТаблицы.СуммаРуб       = СтрокаТаблицыПоТекущейКорректировке.СуммаРуб;
				СтрокаТаблицы.СуммаНДСРуб    = СтрокаТаблицыПоТекущейКорректировке.СуммаНДСРуб;
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицыПоТекущейКорректировке.СуммаБезНДСРуб;
				
				Если НЕ СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
					
					СтрокаТаблицы.СуммаРуб       = СтрокаТаблицы.СуммаРуб       + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаРубУвеличения;
					СтрокаТаблицы.СуммаНДСРуб    = СтрокаТаблицы.СуммаНДСРуб    + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаНДСРубУвеличения;
					СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаБезНДСРубУвеличения;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			
			СтрокаТаблицыОкончательныхПреобразований.СуммаНДСРуб = Окр(СтрокаТаблицыОкончательныхПреобразований.СуммаБезНДСРуб*ПроцентНДС/(100+ПроцентНДС), 2);
			СтрокаТаблицыОкончательныхПреобразований.СуммаБезНДСРуб = СтрокаТаблицыОкончательныхПреобразований.СуммаБезНДСРуб - СтрокаТаблицыОкончательныхПреобразований.СуммаНДСРуб;
			
			СтрокаТаблицы.СуммаРуб       = СтрокаТаблицыОкончательныхПреобразований.СуммаРуб;
			СтрокаТаблицы.СуммаНДСРуб    = СтрокаТаблицыОкончательныхПреобразований.СуммаНДСРуб;
			СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицыОкончательныхПреобразований.СуммаБезНДСРуб;
			
			Если НЕ СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов = Неопределено Тогда
				
				СтрокаТаблицы.СуммаРуб       = СтрокаТаблицы.СуммаРуб       + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаРубУвеличения;
				СтрокаТаблицы.СуммаНДСРуб    = СтрокаТаблицы.СуммаНДСРуб    + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаНДСРубУвеличения;
				СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб + СтрокаТаблицыДляРасчетаПоКурсуВзаиморасчетов.СуммаБезНДСРубУвеличения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
						
КонецПроцедуры

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты, НомераТаблиц)
	
	ЗапросПолученияТаблицДокументаДляРасчетаВалютныхСумм = Новый Запрос;
	
	ЗапросПолученияТаблицДокументаДляРасчетаВалютныхСумм.Текст = ТекстЗапросаПолученияТаблицДокументаДляРасчетаВалютныхСумм(Реквизиты);
	
	ЗапросПолученияТаблицДокументаДляРасчетаВалютныхСумм.УстановитьПараметр("Ссылка",           Реквизиты.Регистратор);
	ЗапросПолученияТаблицДокументаДляРасчетаВалютныхСумм.УстановитьПараметр("СуммаВключаетНДС", Реквизиты.СуммаВключаетНДС);
	
	ТаблицаДляОбработки = ЗапросПолученияТаблицДокументаДляРасчетаВалютныхСумм.Выполнить().Выгрузить();
	
	ТаблицаДляОбработки.Индексы.Добавить("ИмяСписка");
	ТаблицаДляОбработки.Индексы.Добавить("НомерСтроки");
	
	ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаДляОбработки, Реквизиты);
	
	Запрос.УстановитьПараметр("ТаблицаПосчитанныхРублевыхСумм", ТаблицаДляОбработки);
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаПолученияТаблицДокументаДляРасчетаВалютныхСумм(Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ ТаблицаТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения + ТаблицаТовары.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаТовары.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения + ТаблицаТовары.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаТовары.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоИзменения - ТаблицаТовары.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаТовары.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки + ТаблицаТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаТовары.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки + ТаблицаТовары.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаТовары.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаДоКорректировки - ТаблицаТовары.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаТовары.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка";
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары и Реквизиты.ЕстьУслуги Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
	КонецЕсли;	
	
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма - ТаблицаУслуги.СуммаНДС 
		|		ИНАЧЕ ТаблицаУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения + ТаблицаУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаУслуги.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения + ТаблицаУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаУслуги.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоИзменения - ТаблицаУслуги.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки + ТаблицаУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки + ТаблицаУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.СуммаДоКорректировки - ТаблицаУслуги.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаУслуги.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка";
	КонецЕсли;
	
	Если (Реквизиты.ЕстьТовары или Реквизиты.ЕстьУслуги) и Реквизиты.ЕстьАгентскиеУслуги Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
	КонецЕсли;	
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	""АгентскиеУслуги"" КАК ИмяСписка,
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма - ТаблицаАгентскиеУслуги.СуммаНДС
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДСРуб,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения + ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения + ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|	КОНЕЦ КАК СуммаРубДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения КАК СуммаНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоИзменения - ТаблицаАгентскиеУслуги.СуммаНДСДоИзменения
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоИзменения
		|	КОНЕЦ КАК СуммаБезНДСРубДоИзменения,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки + ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки КАК СуммаНДСВзаиморасчетовДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки + ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|	КОНЕЦ КАК СуммаРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки КАК СуммаНДСРубДоКорректировки,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.СуммаДоКорректировки - ТаблицаАгентскиеУслуги.СуммаНДСДоКорректировки
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.СуммаДоКорректировки
		|	КОНЕЦ КАК СуммаБезНДСРубДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|ГДЕ
		|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ВременнаяТаблицаПосчитанныхРублевыхСумм", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПосчитанныхРублевыхСумм.Ссылка,
	|	ТаблицаПосчитанныхРублевыхСумм.ИмяСписка,
	|	ТаблицаПосчитанныхРублевыхСумм.НомерСтроки,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетов,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетов,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаРуб,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРуб,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРуб,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоИзменения,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоИзменения,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоИзменения,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоИзменения,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоИзменения,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоКорректировки,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоКорректировки,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоКорректировки,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоКорректировки,
	|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоКорректировки
	|ПОМЕСТИТЬ ТаблицаПосчитанныхРублевыхСумм
	|ИЗ
	|	&ТаблицаПосчитанныхРублевыхСумм КАК ТаблицаПосчитанныхРублевыхСумм
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ИмяСписка,
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ЛОЖЬ КАК Услуга,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(19,3)) КАК Количество,
		|	ТаблицаТовары.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоКорректировки,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.НомерГТДДоИзменения КАК НомерГТДДоИзменения,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчета.Забалансовый КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.ОтражениеВУСН,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СуммаВРознице,
		|	ТаблицаТовары.СуммаВРозницеДоИзменения,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ТаблицаТовары.Контрагент КАК Комитент,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета.Забалансовый
		|				И ТаблицаТовары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КомиссияПоЗакупке,
		|	ТаблицаТовары.ДоговорКонтрагента КАК ДоговорКомиссии,
		|	ТаблицаТовары.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаТовары.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораСКомитентом,
		|	ТаблицаТовары.СчетРасчетов КАК СчетРасчетовСКомитентом,
		|	ТаблицаТовары.ЕстьВДокументеПоступления
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПосчитанныхРублевыхСумм КАК ТаблицаПосчитанныхРублевыхСумм
		|	ПО ТаблицаТовары.Ссылка = ТаблицаПосчитанныхРублевыхСумм.Ссылка
		|	И ТаблицаТовары.НомерСтроки = ТаблицаПосчитанныхРублевыхСумм.НомерСтроки
		|	И (ТаблицаПосчитанныхРублевыхСумм.ИмяСписка = ""Товары"")"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаУслуги.Номенклатура КАК Справочник.Номенклатура).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИСТИНА КАК Услуга,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Содержание КАК Содержание,
		|	ТаблицаУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоКорректировки,
		|	ТаблицаУслуги.СчетЗатрат,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3,
		|	ТаблицаУслуги.СубконтоНУ1,
		|	ТаблицаУслуги.СубконтоНУ2,
		|	ТаблицаУслуги.СубконтоНУ3,
		|	ТаблицаУслуги.ОтражениеВУСН,
		|	ТаблицаУслуги.ЕстьВДокументеПоступления
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаУслуги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПосчитанныхРублевыхСумм КАК ТаблицаПосчитанныхРублевыхСумм
		|	ПО ТаблицаУслуги.Ссылка = ТаблицаПосчитанныхРублевыхСумм.Ссылка
		|	И ТаблицаУслуги.НомерСтроки = ТаблицаПосчитанныхРублевыхСумм.НомерСтроки
		|	И (ТаблицаПосчитанныхРублевыхСумм.ИмяСписка = ""Услуги"")"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ИСТИНА КАК Услуга,
		|	ТаблицаАгентскиеУслуги.Содержание КАК Содержание,
		|	ТаблицаАгентскиеУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
		|	ТаблицаАгентскиеУслуги.Количество КАК Количество,
		|	ТаблицаАгентскиеУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
		|	ТаблицаАгентскиеУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетов,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРуб,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоИзменения,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаНДСРубДоКорректировки,
		|	ТаблицаПосчитанныхРублевыхСумм.СуммаБезНДСРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.Контрагент КАК Комитент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКомиссии,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораСКомитентом,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов КАК СчетРасчетовСКомитентом
		|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
		|ИЗ
		|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПосчитанныхРублевыхСумм КАК ТаблицаПосчитанныхРублевыхСумм
		|	ПО ТаблицаАгентскиеУслуги.Ссылка = ТаблицаПосчитанныхРублевыхСумм.Ссылка
		|	И ТаблицаАгентскиеУслуги.НомерСтроки = ТаблицаПосчитанныхРублевыхСумм.НомерСтроки
		|	И (ТаблицаПосчитанныхРублевыхСумм.ИмяСписка = ""АгентскиеУслуги"")"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапорсаПоТаблицамДокументаДляРасчетаКурсовПриИзмененииКорректировки()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА РублевыеСуммыДокументовВВалюте.Всего > 0
	|				ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоРуб,
	|	СУММА(ВЫБОР
	|			КОГДА РублевыеСуммыДокументовВВалюте.Всего < 0
	|				ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|			ИНАЧЕ 0
	|		КОНЕЦ) * -1 КАК ВсегоРубДоКорректировки
	|ПОМЕСТИТЬ РублевыеСуммыДокуемнтовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РублевыеСуммыДокументовВВалюте.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РублевыеСуммыДокументовВВалюте.Регистратор,
	|	ВЫБОР
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары)
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги)
	|		КОГДА РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги)
	|		ИНАЧЕ РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента
	|	КОНЕЦ,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Ссылка,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки
	|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаДоКорректировки + КорректировкаПоступленияТовары.СуммаНДСДоКорректировки
	|	КОНЕЦ КАК ВсегоВзаиморасчетовДоКорректировки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.Сумма
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
	|	КОНЕЦ КАК ВсегоВзаиморасчетов,
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРуб, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРубДоКорректировки, 0) КАК ВсегоРубДоКорректировки
	|ПОМЕСТИТЬ ТаблицаДокументаДляРасчетаКурса
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РублевыеСуммыДокуемнтовВВалюте КАК РублевыеСуммыДокуемнтовВВалюте
	|		ПО КорректировкаПоступленияТовары.Ссылка = РублевыеСуммыДокуемнтовВВалюте.Регистратор
	|			И КорректировкаПоступленияТовары.НомерСтроки = РублевыеСуммыДокуемнтовВВалюте.НомерСтрокиДокумента
	|			И (РублевыеСуммыДокуемнтовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияУслуги.Ссылка,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки
	|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаДоКорректировки + КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.Сумма
	|		ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРуб, 0),
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРубДоКорректировки, 0)
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РублевыеСуммыДокуемнтовВВалюте КАК РублевыеСуммыДокуемнтовВВалюте
	|		ПО КорректировкаПоступленияУслуги.Ссылка = РублевыеСуммыДокуемнтовВВалюте.Регистратор
	|			И КорректировкаПоступленияУслуги.НомерСтроки = РублевыеСуммыДокуемнтовВВалюте.НомерСтрокиДокумента
	|			И (РублевыеСуммыДокуемнтовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияАгентскиеУслуги.Ссылка,
	|	КорректировкаПоступленияАгентскиеУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияАгентскиеУслуги.СуммаДоКорректировки
	|		ИНАЧЕ КорректировкаПоступленияАгентскиеУслуги.СуммаДоКорректировки + КорректировкаПоступленияАгентскиеУслуги.СуммаНДСДоКорректировки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияАгентскиеУслуги.Сумма
	|		ИНАЧЕ КорректировкаПоступленияАгентскиеУслуги.Сумма + КорректировкаПоступленияАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРуб, 0),
	|	ЕСТЬNULL(РублевыеСуммыДокуемнтовВВалюте.ВсегоРубДоКорректировки, 0)
	|ИЗ
	|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК КорректировкаПоступленияАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РублевыеСуммыДокуемнтовВВалюте КАК РублевыеСуммыДокуемнтовВВалюте
	|		ПО КорректировкаПоступленияАгентскиеУслуги.Ссылка = РублевыеСуммыДокуемнтовВВалюте.Регистратор
	|			И КорректировкаПоступленияАгентскиеУслуги.НомерСтроки = РублевыеСуммыДокуемнтовВВалюте.НомерСтрокиДокумента
	|			И (РублевыеСуммыДокуемнтовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|ГДЕ
	|	КорректировкаПоступленияАгентскиеУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РублевыеСуммыДокуемнтовВВалюте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаДляРасчетаКурса.Ссылка,
	|	СУММА(ТаблицаДокументаДляРасчетаКурса.ВсегоВзаиморасчетовДоКорректировки) КАК ВсегоВзаиморасчетовДоКорректировки,
	|	СУММА(ТаблицаДокументаДляРасчетаКурса.ВсегоВзаиморасчетов) КАК ВсегоВзаиморасчетов,
	|	СУММА(ТаблицаДокументаДляРасчетаКурса.ВсегоРуб) КАК ВсегоРуб,
	|	СУММА(ТаблицаДокументаДляРасчетаКурса.ВсегоРубДоКорректировки) КАК ВсегоРубДоКорректировки
	|ИЗ
	|	ТаблицаДокументаДляРасчетаКурса КАК ТаблицаДокументаДляРасчетаКурса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументаДляРасчетаКурса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДокументаДляРасчетаКурса";
	
	Возврат ТекстЗапроса;
	
Конецфункции

Функция ТекстЗапросаКорректировкаПоступления(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.КорректироватьБУиНУ КАК КорректироватьБУиНУ,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СтатьяПрочихДоходовИРасходов КАК СтатьяПрочихДоходовИРасходов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ДокументПоступления КАК ДокументОснование,
	|	&ПлательщикНДС КАК ПлательщикНДС,
	|	&ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	&ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	&ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	&СчетФактура КАК СчетФактура,
	|	&ДокументПоступленияСсылка КАК ДокументПоступленияСсылка,
	|	&ДокументПоступленияДата КАК ДокументПоступленияДата,
	|	&ДокументПоступленияСсылка КАК Сделка,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	|	Реквизиты.ВосстановитьНДС КАК ВосстановитьНДС,
	|	&ВестиПартионныйУчет КАК ВестиПартионныйУчет,
	|	&ВестиСуммовойУчетПоСкладам КАК ВестиСуммовойУчетПоСкладам,
	|	&УпрощенныйУчетНДС КАК УпрощенныйУчетНДС,
	|	&РаздельныйУчетНДС КАК РаздельныйУчетНДС,
	|	&РаздельныйУчетНДСНаСчете19 КАК РаздельныйУчетНДСНаСчете19,
	|	&ПоддержкаПБУ18 КАК ПоддержкаПБУ18,
	|	&УчетВПродажныхЦенах КАК УчетВПродажныхЦенах,
	|	&РозницаВПродажныхЦенах КАК РозницаВПродажныхЦенах,
	|	&РазделениеПоСтавкамВРознице КАК РазделениеПоСтавкамВРознице,
	|	&ВалютаРеглУчета КАК ВалютаРеглУчета,
	|	&КурсДокумента КАК КурсДокумента,
	|	&КратностьДокумента КАК КратностьДокумента,
	|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	&ПрименяетсяУСН КАК ОрганизацияПрименяетУСН,
	|	&ПрименяетсяУСНДоходыМинусРасходы КАК ОрганизацияПрименяетУСНДоходыМинусРасходы,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги КАК ЭлектронныеУслуги,
	|	Реквизиты.СпособОтраженияУслугТекГода КАК СпособОтраженияУслугТекГода,
	|	&СчетФактураПриУвеличенииСтоимости КАК СчетФактураПриУвеличенииСтоимости,
	|	&ЭтоКорректировочныйСчетФактура КАК ЭтоКорректировочныйСчетФактура
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.КорректироватьБУиНУ Тогда
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаУслуги", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаАгентскиеУслуги", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Услуга,
		|	ТаблицаТовары.НоменклатурнаяГруппа,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.КоличествоДоИзменения,
		|	ТаблицаТовары.КоличествоДоКорректировки,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтавкаНДСДоИзменения,
		|	ТаблицаТовары.СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаРуб,
		|	ТаблицаТовары.СуммаНДСРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБУ,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаНУ,
		|	ТаблицаТовары.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаТовары.СуммаРубДоИзменения,
		|	ТаблицаТовары.СуммаНДСРубДоИзменения,
		|	ТаблицаТовары.СуммаРубДоИзменения - ТаблицаТовары.СуммаНДСРубДоИзменения КАК СуммаБУДоИзменения,
		|	ТаблицаТовары.СуммаРубДоИзменения - ТаблицаТовары.СуммаНДСРубДоИзменения КАК СуммаНУДоИзменения,
		|	ТаблицаТовары.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаТовары.СуммаРубДоКорректировки,
		|	ТаблицаТовары.СуммаНДСРубДоКорректировки,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.НомерГТДДоИзменения,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.СтранаПроисхожденияДоИзменения,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.ОтражениеВУСН,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СуммаВРознице,
		|	ТаблицаТовары.СуммаВРозницеДоИзменения,
		|	ТаблицаТовары.СтавкаНДСВРознице,
		|	ТаблицаТовары.Комитент,
		|	ТаблицаТовары.ДоговорКомиссии,
		|	ТаблицаТовары.ВалютаРасчетовСКомитентом,
		|	ТаблицаТовары.СчетРасчетовСКомитентом,
		|	ТаблицаТовары.ЕстьВДокументеПоступления
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ТаблицаУслуги", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТаблицаУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Услуга,
		|	ТаблицаУслуги.НоменклатурнаяГруппа,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Содержание,
		|	ТаблицаУслуги.СодержаниеДоИзменения,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.КоличествоДоИзменения,
		|	ТаблицаУслуги.КоличествоДоКорректировки,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНДСДоИзменения,
		|	ТаблицаУслуги.СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СуммаРуб,
		|	ТаблицаУслуги.СуммаНДСРуб,
		|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб КАК СуммаБУ,
		|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб КАК СуммаНУ,
		|	ТаблицаУслуги.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаУслуги.СуммаРубДоИзменения,
		|	ТаблицаУслуги.СуммаНДСРубДоИзменения,
		|	ТаблицаУслуги.СуммаРубДоИзменения - ТаблицаУслуги.СуммаНДСРубДоИзменения КАК СуммаБУДоИзменения,
		|	ТаблицаУслуги.СуммаРубДоИзменения - ТаблицаУслуги.СуммаНДСРубДоИзменения КАК СуммаНУДоИзменения,
		|	ТаблицаУслуги.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаУслуги.СуммаРубДоКорректировки,
		|	ТаблицаУслуги.СуммаНДСРубДоКорректировки,
		|	ТаблицаУслуги.СчетЗатрат,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	ТаблицаУслуги.СчетЗатратНУ,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3,
		|	ТаблицаУслуги.СубконтоНУ1,
		|	ТаблицаУслуги.СубконтоНУ2,
		|	ТаблицаУслуги.СубконтоНУ3,
		|	ТаблицаУслуги.ОтражениеВУСН,
		|	ТаблицаУслуги.ЕстьВДокументеПоступления
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("ТаблицаАгентскиеУслуги", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТаблицаАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""АгентскиеУслуги"" КАК ИмяСписка,
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	ТаблицаАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Услуга,
		|	ТаблицаАгентскиеУслуги.Содержание,
		|	ТаблицаАгентскиеУслуги.СодержаниеДоИзменения,
		|	ТаблицаАгентскиеУслуги.Количество,
		|	ТаблицаАгентскиеУслуги.КоличествоДоИзменения,
		|	ТаблицаАгентскиеУслуги.КоличествоДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.СтавкаНДСДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|	ТаблицаАгентскиеУслуги.СуммаРуб - ТаблицаАгентскиеУслуги.СуммаНДСРуб КАК СуммаБУ,
		|	ТаблицаАгентскиеУслуги.СуммаРуб - ТаблицаАгентскиеУслуги.СуммаНДСРуб КАК СуммаНУ,
		|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетовДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетовДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаРубДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаНДСРубДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаРубДоИзменения - ТаблицаАгентскиеУслуги.СуммаНДСРубДоИзменения КАК СуммаБУДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаРубДоИзменения - ТаблицаАгентскиеУслуги.СуммаНДСРубДоИзменения КАК СуммаНУДоИзменения,
		|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетовДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетовДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.СуммаНДСРубДоКорректировки,
		|	ТаблицаАгентскиеУслуги.Комитент,
		|	ТаблицаАгентскиеУслуги.ДоговорКомиссии,
		|	ТаблицаАгентскиеУслуги.ВалютаРасчетовСКомитентом,
		|	ТаблицаАгентскиеУслуги.СчетРасчетовСКомитентом
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗакупленныеТоварыКомитента(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТоварыКомитента и НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("ЗакупленныеТоварыКомитента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВТ_ТоварыКомитента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗакупленныеТоварыКомитента", НомераТаблиц.Количество());
	
	Если Реквизиты.ЕстьТоварыКомитента Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Комитент КАК Комитент,
		|	ТаблицаТовары.ДоговорКомиссии КАК ДоговорКомиссии,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.ВалютаРасчетовСКомитентом КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаТовары.Количество - ТаблицаТовары.КоличествоДоИзменения КАК Количество,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетовДоИзменения КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаВзаиморасчетовДоИзменения КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаНДСРубДоИзменения КАК СуммаНДСРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаРубДоИзменения КАК СуммаБУ
		|ПОМЕСТИТЬ ВТ_ТоварыКомитента
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.КомиссияПоЗакупке";
		
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли; 
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		
		ТекстЗапроса = ТекстЗапроса + ?(Реквизиты.ЕстьТоварыКомитента,"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|","")+"
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Комитент КАК Комитент,
		|	ТаблицаУслуги.ДоговорКомиссии КАК ДоговорКомиссии,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.ВалютаРасчетовСКомитентом КАК ВалютаРасчетовСКомитентом,
		|	ТаблицаУслуги.Количество - ТаблицаУслуги.КоличествоДоИзменения КАК Количество,
		|	ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения КАК СуммаНДСРуб,
		|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаРубДоИзменения КАК СуммаБУ,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов - ТаблицаУслуги.СуммаНДСВзаиморасчетовДоИзменения КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаУслуги.СуммаВзаиморасчетов - ТаблицаУслуги.СуммаВзаиморасчетовДоИзменения КАК СуммаВзаиморасчетов"+?(Реквизиты.ЕстьТоварыКомитента, "", "
		|ПОМЕСТИТЬ ВТ_ТоварыКомитента")+"
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаУслуги";
		
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + "
	|ВЫБРАТЬ
	|	ВТ_ТоварыКомитента.Комитент,
	|	ВТ_ТоварыКомитента.ДоговорКомиссии,
	|	ВТ_ТоварыКомитента.Номенклатура,
	|	ВТ_ТоварыКомитента.ВалютаРасчетовСКомитентом КАК ВалютаРасчетовСКомитентом,
	|	СУММА(ВТ_ТоварыКомитента.Количество) КАК Количество,
	|	СУММА(ВТ_ТоварыКомитента.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ВТ_ТоварыКомитента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВТ_ТоварыКомитента.СуммаНДСРуб) КАК СуммаНДСРуб,
	|	СУММА(ВТ_ТоварыКомитента.СуммаБУ) КАК СуммаБУ
	|ИЗ
	|	ВТ_ТоварыКомитента КАК ВТ_ТоварыКомитента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТоварыКомитента.ДоговорКомиссии,
	|	ВТ_ТоварыКомитента.ВалютаРасчетовСКомитентом,
	|	ВТ_ТоварыКомитента.Номенклатура,
	|	ВТ_ТоварыКомитента.Комитент";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.КорректироватьБУиНУ
		ИЛИ НЕ Реквизиты.ПризнаватьЗачитыватьАванс
		ИЛИ Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаЗачетАвансов",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаЗачетАвансов",		  НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСРуб) КАК СуммаНДСРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаРуб,
	|		0 КАК СуммаНДСРуб,
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов"
	+ ?(Реквизиты.ЕстьТовары, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаРубДоИзменения,
	|		ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаНДСРубДоИзменения,
	|		ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаВзаиморасчетовДоИзменения,
	|		ТаблицаТовары.СуммаНДСВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетовДоИзменения
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	ГДЕ НЕ ТаблицаТовары.СчетУчетаЗабалансовый", "")
	+ ?(Реквизиты.ЕстьУслуги, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаРубДоИзменения,
	|		ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения,
	|		ТаблицаУслуги.СуммаВзаиморасчетов - ТаблицаУслуги.СуммаВзаиморасчетовДоИзменения,
	|		ТаблицаУслуги.СуммаНДСВзаиморасчетов - ТаблицаУслуги.СуммаНДСВзаиморасчетовДоИзменения
	|	ИЗ
	|		ТаблицаУслуги КАК ТаблицаУслуги", "")
	+ ?(Реквизиты.ЕстьАгентскиеУслуги, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаАгентскиеУслуги.СуммаРуб - ТаблицаАгентскиеУслуги.СуммаРубДоИзменения,
	|		ТаблицаАгентскиеУслуги.СуммаНДСРуб - ТаблицаАгентскиеУслуги.СуммаНДСРубДоИзменения,
	|		ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов - ТаблицаАгентскиеУслуги.СуммаВзаиморасчетовДоИзменения,
	|		ТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов - ТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетовДоИзменения
	|	ИЗ
	|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги", "") + ") КАК ТаблицаСуммВзаиморасчетов"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&ДокументПоступленияСсылка КАК ДокументПоступленияСсылка,
	|	&СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	&СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|	КОНЕЦ КАК СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА ""Поступление""
	|		ИНАЧЕ ""Выбытие""
	|	КОНЕЦ КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА &СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ &СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА &СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ &СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги КАК ЭлектронныеУслуги,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА Реквизиты.УчетАгентскогоНДС
	|					И ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|				ТОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов - ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|			КОГДА Реквизиты.УчетАгентскогоНДС
	|					И ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов < 0
	|				ТОГДА -1 * (ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов - ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов)
	|			КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов < 0
	|				ТОГДА -1 * ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов 
	|			ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК СуммаВзаиморасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА Реквизиты.УчетАгентскогоНДС
	|					И ТаблицаСуммВзаиморасчетов.СуммаРуб >= 0
	|				ТОГДА ТаблицаСуммВзаиморасчетов.СуммаРуб - ТаблицаСуммВзаиморасчетов.СуммаНДСРуб
	|			КОГДА Реквизиты.УчетАгентскогоНДС
	|					И ТаблицаСуммВзаиморасчетов.СуммаРуб < 0
	|				ТОГДА -1 * (ТаблицаСуммВзаиморасчетов.СуммаРуб - ТаблицаСуммВзаиморасчетов.СуммаНДСРуб)
	|			КОГДА ТаблицаСуммВзаиморасчетов.СуммаРуб < 0
	|				ТОГДА -1 * ТаблицаСуммВзаиморасчетов.СуммаРуб 
	|			ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаРуб
	|		КОНЕЦ) КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА &СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ &СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов >= 0
	|			ТОГДА &СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ &СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги,
	|	Реквизиты.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	&СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	&СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	&ПервичныйДокументПоступления КАК ДокументАванса,
	|	0 КАК СуммаЗачета
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаТаблицСторнирующихНДСЗаписей(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("КнигаПокупок",     Неопределено);
		ПараметрыПроведения.Вставить("КнигаПродаж",      Неопределено);
		ПараметрыПроведения.Вставить("НДСПредъявленный", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КнигаПокупок",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КнигаПродаж",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("НДСПредъявленный", НомераТаблиц.Количество());
	
	// Для пакетов запроса "КнигаПродаж" и "НДСПредъявленный" применено автоупорядочивание для обеспечения
	// одинакового порядка строк в движениях в не зависимости от СУБД.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование вычета НДС"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ЗаписиКнигиПокупок.Поставщик КАК Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности КАК ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС КАК СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие КАК Событие,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.ДатаСобытия, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.ДатаСобытия, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.ДатаСобытия, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.ДатаСобытия, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС,
	|	ЗаписиКнигиПокупок.СчетУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование восстановления НДС"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаИсправляемогоСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаИсправляемогоСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаИсправляемогоСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ДатаИсправляемогоСчетаФактуры, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС,
	|	"""" КАК КодВидаОперации
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация КАК Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.ДатаОплаты КАК ДатаОплаты,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки
	|АВТОУПОРЯДОЧИВАНИЕ";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицВычетНДСНаОснованииДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ПлательщикНДС 
		ИЛИ НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ВычетНДСНаОснованииДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВычетНДСНаОснованииДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДС,
		|	ТаблицаТовары.СуммаНДСРуб КАК НДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК НДСВал,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Поставщик,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком) КАК Событие,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	&ИсправляемыйСчетФактура КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	ЛОЖЬ КАК Услуга,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка) КАК СтатьяЗатрат,
		|	&ПустоеПодразделение КАК ПодразделениеЗатрат,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК Субконто3
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаТовары.СчетУчетаЗабалансовый";
	КонецЕсли;
	Если Реквизиты.ЕстьТовары И Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб КАК СуммаБезНДС,
		|	ТаблицаУслуги.СуммаНДСРуб КАК НДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК НДСВал,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Поставщик,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком) КАК Событие,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	&ИсправляемыйСчетФактура КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	ИСТИНА КАК Услуга,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто2
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
    	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицКорректировочныеДвиженияНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ПлательщикНДС 
		ИЛИ НЕ Реквизиты.ЕстьТовары 
		И НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ТаблицаВосстановление", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаВычет",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	НомераТаблиц.Вставить("ТаблицаВосстановление", НомераТаблиц.Количество());
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&СчетФактура КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	""Восстановление НДС"" КАК Содержание,
		|	ЛОЖЬ КАК Услуга,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	(ТаблицаТовары.СуммаРубДоКорректировки - ТаблицаТовары.СуммаРуб) - (ТаблицаТовары.СуммаНДСРубДоКорректировки - ТаблицаТовары.СуммаНДСРуб) КАК СуммаБезНДС,
		|	ТаблицаТовары.СуммаНДСРубДоКорректировки - ТаблицаТовары.СуммаНДСРуб КАК НДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетовДоКорректировки - ТаблицаТовары.СуммаНДСВзаиморасчетов КАК НДСВал,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	Реквизиты.Организация,
		|	Реквизиты.Контрагент КАК Покупатель,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
		|	ТаблицаТовары.НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	NULL КАК СтатьяЗатрат,
		|	NULL КАК ПодразделениеЗатрат,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК Субконто3,
		|	"""" КАК КодВидаОперации
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.СуммаРубДоКорректировки - ТаблицаТовары.СуммаРуб > 0
		|	И НЕ ТаблицаТовары.СчетУчетаЗабалансовый";
	КонецЕсли;
	Если Реквизиты.ЕстьТовары И Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&СчетФактура КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	""Восстановление НДС"" КАК Содержание,
		|	ИСТИНА КАК Услуга,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаУслуги.СтавкаНДС,
		|	(ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб) - (ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб) КАК СуммаБезНДС,
		|	ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб КАК НДС,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетовДоКорректировки - ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК НДСВал,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	Реквизиты.Организация,
		|	Реквизиты.Контрагент КАК Покупатель,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
		|	ТаблицаУслуги.НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто2
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3,
		|	"""" КАК КодВидаОперации
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб > 0"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	НомераТаблиц.Вставить("ТаблицаВычет", НомераТаблиц.Количество());
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&СчетФактураПриУвеличенииСтоимости КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	""НДС"" КАК Содержание,
		|	ЛОЖЬ КАК Услуга,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком) КАК Событие,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	((ТаблицаТовары.СуммаРубДоКорректировки - ТаблицаТовары.СуммаРуб) - (ТаблицаТовары.СуммаНДСРубДоКорректировки - ТаблицаТовары.СуммаНДСРуб)) * -1 КАК СуммаБезНДС,
		|	(ТаблицаТовары.СуммаНДСРубДоКорректировки - ТаблицаТовары.СуммаНДСРуб) * -1 КАК НДС,
		|	(ТаблицаТовары.СуммаНДСВзаиморасчетовДоКорректировки - ТаблицаТовары.СуммаНДСВзаиморасчетов) * -1 КАК НДСВал,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация,
		|	Реквизиты.Контрагент КАК Поставщик,
		|	ТаблицаТовары.НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	NULL КАК СтатьяЗатрат,
		|	NULL КАК ПодразделениеЗатрат,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК Субконто3
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.СуммаРубДоКорректировки - ТаблицаТовары.СуммаРуб < 0
		|	И НЕ ТаблицаТовары.СчетУчетаЗабалансовый"
	КонецЕсли;
	Если Реквизиты.ЕстьТовары И Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&СчетФактураПриУвеличенииСтоимости КАК СчетФактура,
		|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	""НДС"" КАК Содержание,
		|	ИСТИНА КАК Услуга,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком) КАК Событие,
		|	Реквизиты.Дата КАК ДатаСобытия,
		|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаУслуги.СтавкаНДС,
		|	((ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб) - (ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб)) * -1 КАК СуммаБезНДС,
		|	(ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб) * -1 КАК НДС,
		|	(ТаблицаУслуги.СуммаНДСВзаиморасчетовДоКорректировки - ТаблицаУслуги.СуммаНДСВзаиморасчетов) * -1 КАК НДСВал,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	ТаблицаУслуги.СчетУчетаНДС,
		|	ТаблицаУслуги.СпособУчетаНДС,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Поставщик,
		|	ТаблицаУслуги.НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто2
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаУслуги.Субконто3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ТаблицаУслуги.ПодразделениеЗатрат,
		|	ТаблицаУслуги.Субконто1,
		|	ТаблицаУслуги.Субконто2,
		|	ТаблицаУслуги.Субконто3
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб < 0";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
		
КонецФункции	

Функция ТекстЗапросаТаблицаКорректировокаНДСКосвенныхРасходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.РаздельныйУчетНДС 
		ИЛИ НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("КорректировкаНДСКосвенныхРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("КорректировкаНДСКосвенныхРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	ИСТИНА КАК Услуга,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &ОснованиеКорректировка
	|			ТОГДА (ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаРубДоКорректировки) - (ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоКорректировки)
	|		ИНАЧЕ (ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаРубДоИзменения) - (ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА &ОснованиеКорректировка
	|			ТОГДА ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоКорректировки
	|		ИНАЧЕ ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения
	|	КОНЕЦ КАК НДС,
	|	ТаблицаУслуги.СчетЗатрат,
	|	ТаблицаУслуги.СчетУчетаНДС,
	|	ТаблицаУслуги.СпособУчетаНДС,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Поставщик,
	|	ТаблицаУслуги.НомерСтроки,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто1
	|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто2
	|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ТаблицаУслуги.ПодразделениеЗатрат,
	|	ТаблицаУслуги.Субконто1,
	|	ТаблицаУслуги.Субконто2,
	|	ТаблицаУслуги.Субконто3
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаУслуги.СтавкаНДС = ТаблицаУслуги.СтавкаНДСДоИзменения
	|	И (ТаблицаУслуги.СуммаРубДоИзменения - ТаблицаУслуги.СуммаРуб <> 0
	|			ИЛИ ТаблицаУслуги.СуммаНДСРубДоИзменения - ТаблицаУслуги.СуммаНДСРуб <> 0)
	|	И ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб < 0
	|	И ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаУслуги.СтавкаНДСДоИзменения,
	|	(ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРубДоИзменения) - (ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРубДоИзменения),
	|	ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРубДоИзменения,
	|	ТаблицаУслуги.СчетЗатрат,
	|	ТаблицаУслуги.СчетУчетаНДС,
	|	ТаблицаУслуги.СпособУчетаНДС,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	ТаблицаУслуги.НомерСтроки,
	|	Реквизиты.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто1
	|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто2
	|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаУслуги.ПодразделениеЗатрат,
	|	ТаблицаУслуги.Субконто1,
	|	ТаблицаУслуги.Субконто2,
	|	ТаблицаУслуги.Субконто3
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаУслуги.СтавкаНДС <> ТаблицаУслуги.СтавкаНДСДоИзменения
	|	И (ТаблицаУслуги.СуммаРубДоИзменения - ТаблицаУслуги.СуммаРуб <> 0
	|			ИЛИ ТаблицаУслуги.СуммаНДСРубДоИзменения - ТаблицаУслуги.СуммаНДСРуб <> 0)
	|	И ТаблицаУслуги.ЕстьВДокументеПоступления
	|	И ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРубДоИзменения < 0
	|	И ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРубДоИзменения < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаУслуги.СтавкаНДС,
	|	(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаРубДоКорректировки) - (ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоКорректировки),
	|	ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоКорректировки,
	|	ТаблицаУслуги.СчетЗатрат,
	|	ТаблицаУслуги.СчетУчетаНДС,
	|	ТаблицаУслуги.СпособУчетаНДС,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	ТаблицаУслуги.НомерСтроки,
	|	Реквизиты.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто1
	|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто2
	|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ТаблицаУслуги.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаУслуги.ПодразделениеЗатрат,
	|	ТаблицаУслуги.Субконто1,
	|	ТаблицаУслуги.Субконто2,
	|	ТаблицаУслуги.Субконто3
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаУслуги.СтавкаНДС <> ТаблицаУслуги.СтавкаНДСДоИзменения
	|	И (ТаблицаУслуги.СуммаРубДоИзменения - ТаблицаУслуги.СуммаРуб <> 0
	|			ИЛИ ТаблицаУслуги.СуммаНДСРубДоИзменения - ТаблицаУслуги.СуммаНДСРуб <> 0)
	|	И ТаблицаУслуги.СуммаРубДоКорректировки - ТаблицаУслуги.СуммаРуб < 0
	|	И ТаблицаУслуги.СуммаНДСРубДоКорректировки - ТаблицаУслуги.СуммаНДСРуб < 0";
    
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаКорректировкаПоступленияУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.КорректироватьБУиНУ
		ИЛИ НЕ Реквизиты.ПрименяетсяУСН 
		ИЛИ Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ПараметрыПроведения.Вставить("УСНРеквизиты",            Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаПриход",        Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаКорректировка", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("УСНРеквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	&КурсДокумента КАК КурсДокумента,
	|	&КратностьДокумента КАК КратностьДокумента,
	|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПорядокПризнанияРасходовПоНДС КАК ПорядокПризнанияРасходовПоНДС,
	|	&ЭтоКорректировкаПрошлогоПериода КАК ЭтоКорректировкаПрошлогоПериода,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	&ДокументПоступленияСсылка КАК ДокументПоступленияСсылка,
	|	&ДокументПоступленияДата КАК ДокументПоступленияДата,
	|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	УчестьРасходыУСНУслуги = Реквизиты.ЕстьУслуги
		И Реквизиты.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	УчестьРасходыУСНТовары = Реквизиты.ЕстьТовары
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И Реквизиты.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		И (НЕ Реквизиты.РозницаВПродажныхЦенах 
			ИЛИ Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
			
	Если НЕ УчестьРасходыУСНТовары И НЕ УчестьРасходыУСНУслуги Тогда
		ПараметрыПроведения.Вставить("УСНТаблицаПриход",        Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаКорректировка", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Сгруппированные таблицы товаров и услуг - без дублей по номенклатуре и счетам учета.
	
	Если УчестьРасходыУСНТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТоварыУСН", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.КоличествоДоИзменения) КАК КоличествоДоИзменения,
		|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаТовары.СуммаВзаиморасчетовДоИзменения) КАК СуммаВзаиморасчетовДоИзменения,
		|	СУММА(ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
		|	СУММА(ТаблицаТовары.СуммаНДСВзаиморасчетовДоИзменения) КАК СуммаНДСВзаиморасчетовДоИзменения,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНДоходы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ТаблицаТовары.ОтражениеВУСН
		|	КОНЕЦ КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ТаблицаТоварыУСН
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ ТаблицаТовары.КомиссияПоЗакупке
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СчетУчета,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНДоходы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ТаблицаТовары.ОтражениеВУСН
		|	КОНЕЦ"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если УчестьРасходыУСНУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаУслугиУСН", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаУслуги.Субконто1 КАК Субконто1,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНДоходы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ТаблицаУслуги.ОтражениеВУСН
		|	КОНЕЦ КАК ОтражениеВУСН,
		|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетовДоИзменения) КАК СуммаВзаиморасчетовДоИзменения,
		|	СУММА(ТаблицаУслуги.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
		|	СУММА(ТаблицаУслуги.СуммаНДСВзаиморасчетовДоИзменения) КАК СуммаНДСВзаиморасчетовДоИзменения
		|ПОМЕСТИТЬ ТаблицаУслугиУСН
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.СчетЗатрат,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНДоходы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ТаблицаУслуги.ОтражениеВУСН
		|	КОНЕЦ,
		|	ТаблицаУслуги.Субконто1"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	// таблица приход
	НомераТаблиц.Вставить("УСНТаблицаПриход", НомераТаблиц.Количество());
	Если УчестьРасходыУСНТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТоварыУСН.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТоварыУСН.СчетУчета В (&Счета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТоварыУСН.СчетУчета В (&Счета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТоварыУСН.СчетУчета КАК СчетУчета,
		|	&ДокументПоступленияСсылка КАК Партия,
		|	ТаблицаТоварыУСН.Количество - ТаблицаТоварыУСН.КоличествоДоИзменения КАК Количество,
		|	ТаблицаТоварыУСН.СуммаВзаиморасчетов - ТаблицаТоварыУСН.СуммаВзаиморасчетовДоИзменения КАК Сумма,
		|	ТаблицаТоварыУСН.СуммаНДСВзаиморасчетов - ТаблицаТоварыУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДС,
		|	ТаблицаТоварыУСН.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТоварыУСН КАК ТаблицаТоварыУСН
		|ГДЕ
		|	ТаблицаТоварыУСН.Количество - ТаблицаТоварыУСН.КоличествоДоИзменения > 0";
	КонецЕсли;
	Если УчестьРасходыУСНТовары
		И УчестьРасходыУСНУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	Если УчестьРасходыУСНУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаУслугиУСН.СчетЗатрат В (&Счета97)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
		|	КОНЕЦ КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ВЫБОР
		|		КОГДА ТаблицаУслугиУСН.СчетЗатрат В (&Счета97)
		|			ТОГДА ТаблицаУслугиУСН.Субконто1
		|		ИНАЧЕ ТаблицаУслугиУСН.Номенклатура
		|	КОНЕЦ КАК ЭлементРасхода,
		|	ЛОЖЬ КАК ЭтоТовар,
		|	ЛОЖЬ КАК ЭтоМатериал,
		|	ТаблицаУслугиУСН.СчетЗатрат КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК Количество,
		|	ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения КАК Сумма,
		|	ТаблицаУслугиУСН.СуммаНДСВзаиморасчетов - ТаблицаУслугиУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДС,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСНДоходы
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ТаблицаУслугиУСН.ОтражениеВУСН
		|	КОНЕЦ КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаУслугиУСН КАК ТаблицаУслугиУСН
		|ГДЕ
		|	(ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения > 0
		|			ИЛИ ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения = 0
		|				И ТаблицаУслугиУСН.СуммаНДСВзаиморасчетов - ТаблицаУслугиУСН.СуммаНДСВзаиморасчетовДоИзменения > 0)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	// таблица корректировка
	НомераТаблиц.Вставить("УСНТаблицаКорректировка", НомераТаблиц.Количество());
	Если УчестьРасходыУСНТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТоварыУСН.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТоварыУСН.СчетУчета В (&Счета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТоварыУСН.СчетУчета В (&Счета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТоварыУСН.СчетУчета КАК СчетУчета,
		|	&ДокументПоступленияСсылка КАК Партия,
		|	ТаблицаТоварыУСН.Количество - ТаблицаТоварыУСН.КоличествоДоИзменения КАК Количество,
		|	ТаблицаТоварыУСН.СуммаВзаиморасчетов - ТаблицаТоварыУСН.СуммаВзаиморасчетовДоИзменения КАК Сумма,
		|	ТаблицаТоварыУСН.СуммаНДСВзаиморасчетов - ТаблицаТоварыУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДС,
		|	ТаблицаТоварыУСН.КоличествоДоИзменения КАК КоличествоПоПоступлению,
		|	ТаблицаТоварыУСН.СуммаВзаиморасчетовДоИзменения КАК СуммаПоПоступлению,
		|	ТаблицаТоварыУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДСПоПоступлению,
		|	ТаблицаТоварыУСН.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТоварыУСН КАК ТаблицаТоварыУСН
		|ГДЕ
		|	(ТаблицаТоварыУСН.Количество - ТаблицаТоварыУСН.КоличествоДоИзменения < 0
		|			ИЛИ ТаблицаТоварыУСН.Количество - ТаблицаТоварыУСН.КоличествоДоИзменения = 0
		|				И (ТаблицаТоварыУСН.СуммаВзаиморасчетов - ТаблицаТоварыУСН.СуммаВзаиморасчетовДоИзменения <> 0
		|					ИЛИ ТаблицаТоварыУСН.СуммаНДСВзаиморасчетов - ТаблицаТоварыУСН.СуммаНДСВзаиморасчетовДоИзменения <> 0))";
	КонецЕсли;
	Если УчестьРасходыУСНТовары
		И УчестьРасходыУСНУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	Если УчестьРасходыУСНУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаУслугиУСН.СчетЗатрат В (&Счета97)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
		|	КОНЕЦ КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ВЫБОР
		|		КОГДА ТаблицаУслугиУСН.СчетЗатрат В (&Счета97)
		|			ТОГДА ТаблицаУслугиУСН.Субконто1
		|		ИНАЧЕ ТаблицаУслугиУСН.Номенклатура
		|	КОНЕЦ КАК ЭлементРасхода,
		|	ЛОЖЬ КАК ЭтоТовар,
		|	ЛОЖЬ КАК ЭтоМатериал,
		|	ТаблицаУслугиУСН.СчетЗатрат КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК Количество,
		|	ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения КАК Сумма,
		|	ТаблицаУслугиУСН.СуммаНДСВзаиморасчетов - ТаблицаУслугиУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДС,
		|	0 КАК КоличествоПоПоступлению,
		|	ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения КАК СуммаПоПоступлению,
		|	ТаблицаУслугиУСН.СуммаНДСВзаиморасчетовДоИзменения КАК НДСПоПоступлению,
		|	ТаблицаУслугиУСН.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаУслугиУСН КАК ТаблицаУслугиУСН
		|ГДЕ
		|	(ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения < 0
		|			ИЛИ ТаблицаУслугиУСН.СуммаВзаиморасчетов - ТаблицаУслугиУСН.СуммаВзаиморасчетовДоИзменения = 0
		|				И ТаблицаУслугиУСН.СуммаНДСВзаиморасчетов - ТаблицаУслугиУСН.СуммаНДСВзаиморасчетовДоИзменения < 0)";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	
КонецФункции

Функция ТекстЗапросаРублевыеСуммыДокументовВВалюте(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета Тогда
		
		НомераТаблиц.Вставить("РеквизитыРублевыеСуммыДокументыВВалюте", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("РублевыеСуммыДокументовВВалюте",         НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация,
		|	Реквизиты.ВалютаДокумента
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		Если Реквизиты.ЕстьТовары Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""Товары"" КАК ИмяСписка,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
			|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
			|	ТаблицаТовары.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
			|	ТаблицаТовары.СуммаРубДоИзменения КАК СуммаБУДоИзменения,
			|	ТаблицаТовары.СуммаНДСРубДоИзменения КАК СуммаНДСРубДоИзменения,
			|	ТаблицаТовары.СуммаБезНДСРубДоИзменения КАК СуммаБезНДСРубДоИзменения
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""ТоварыДоИзменения"",
			|	ТаблицаТовары.НомерСтроки,
			|	ТаблицаТовары.СуммаРубДоКорректировки * (-1) КАК СуммаБУ,
			|	ТаблицаТовары.СуммаНДСРубДоКорректировки * (-1) КАК СуммаНДСРуб,
			|	ТаблицаТовары.СуммаБезНДСРубДоКорректировки * (-1) КАК СуммаБезНДСРуб,
			|	0,
			|	0,
			|	0
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары";
			
		КонецЕсли;
		
		Если Реквизиты.ЕстьТовары и Реквизиты.ЕстьУслуги Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Если Реквизиты.ЕстьУслуги Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""Услуги"" КАК ИмяСписка,
			|	ТаблицаУслуги.НомерСтроки,
			|	ТаблицаУслуги.СуммаРуб КАК СуммаБУ,
			|	ТаблицаУслуги.СуммаНДСРуб КАК СуммаНДСРуб,
			|	ТаблицаУслуги.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
			|	ТаблицаУслуги.СуммаРубДоИзменения КАК СуммаБУДоИзменения,
			|	ТаблицаУслуги.СуммаНДСРубДоИзменения КАК СуммаНДСРубДоИзменения,
			|	ТаблицаУслуги.СуммаБезНДСРубДоИзменения КАК СуммаБезНДСРубДоИзменения
			|ИЗ
			|	ТаблицаУслуги КАК ТаблицаУслуги
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""УслугиДоИзменения"",
			|	ТаблицаУслуги.НомерСтроки,
			|	ТаблицаУслуги.СуммаРубДоКорректировки * (-1) КАК СуммаБУ,
			|	ТаблицаУслуги.СуммаНДСРубДоКорректировки * (-1) КАК СуммаНДСРуб,
			|	ТаблицаУслуги.СуммаБезНДСРубДоКорректировки * (-1) КАК СуммаБезНДСРуб,
			|	0,
			|	0,
			|	0
			|ИЗ
			|	ТаблицаУслуги КАК ТаблицаУслуги";
		КонецЕсли;
		
		Если (Реквизиты.ЕстьТовары или Реквизиты.ЕстьУслуги) и (Реквизиты.ЕстьАгентскиеУслуги) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Если Реквизиты.ЕстьАгентскиеУслуги Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""АгентскиеУслуги"" КАК ИмяСписка,
			|	ТаблицаАгентскиеУслуги.НомерСтроки,
			|	ТаблицаАгентскиеУслуги.СуммаРуб КАК СуммаБУ,
			|	ТаблицаАгентскиеУслуги.СуммаНДСРуб КАК СуммаНДСРуб,
			|	ТаблицаАгентскиеУслуги.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
			|	ТаблицаАгентскиеУслуги.СуммаРубДоИзменения КАК СуммаБУДоИзменения,
			|	ТаблицаАгентскиеУслуги.СуммаНДСРубДоИзменения КАК СуммаНДСРубДоИзменения,
			|	ТаблицаАгентскиеУслуги.СуммаБезНДСРубДоИзменения КАК СуммаБезНДСРубДоИзменения
			|ИЗ
			|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""АгентскиеУслугиДоИзменения"",
			|	ТаблицаАгентскиеУслуги.НомерСтроки,
			|	ТаблицаАгентскиеУслуги.СуммаРубДоКорректировки * (-1) КАК СуммаБУ,
			|	ТаблицаАгентскиеУслуги.СуммаНДСРубДоКорректировки * (-1) КАК СуммаНДСРуб,
			|	ТаблицаАгентскиеУслуги.СуммаБезНДСРубДоКорректировки * (-1) КАК СуммаБезНДСРуб,
			|	0,
			|	0,
			|	0
			|ИЗ
			|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги";
		КонецЕсли;
		
		Если ТекстЗапроса = "" Тогда
			
			ПараметрыПроведения.Вставить("РублевыеСуммыДокументовВВалюте",         Неопределено);
			ПараметрыПроведения.Вставить("РеквизитыРублевыеСуммыДокументыВВалюте", Неопределено);
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|"
			+ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
			
		КонецЕсли;	
		
	Иначе
		
		ПараметрыПроведения.Вставить("РублевыеСуммыДокументовВВалюте",         Неопределено);
		ПараметрыПроведения.Вставить("РеквизитыРублевыеСуммыДокументыВВалюте", Неопределено);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПодготовитьПараметрыТаблицыАвансовОплат(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаВзаиморасчетов

	СписокОбязательныхКолонок = ""
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты>
	+ "ВидДоговора,"                     // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
	+ "ДатаДокументаРасчетов,"           // <Дата>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка.ПоступлениеНаРасчетныйСчет>
	+ "Контрагент,"	                     // <СправочникСсылка.Контрагенты>
	+ "ОстатокВзаиморасчетов,"           // <Число>
	+ "Подразделение,"                   // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПодразделениеРасчетов,"           // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "РасчетыВВалюте,"                  // <Булево>
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево>
	+ "СуммаВзаиморасчетов,"             // <Число>
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число>
	+ "СуммаВзаиморасчетовКомитента,"    // <Число>
	+ "СуммаВзаиморасчетовПатент,"       // <Число>
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число>
	+ "СуммаРуб,"                        // <Число>
	+ "СуммаРуб_ЕНВД,"                   // <Число>
	+ "СуммаРуб_Комитента,"              // <Число>
	+ "СуммаРуб_Патент,"                 // <Число>
	+ "СуммаРуб_ТорговыйСбор,"           // <Число>
	+ "СуммаРубПоКурсуАванса,"           // <Число>
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетРасчетов";                    // <ПланСчетовСсылка.Хозрасчетный>
	
	Параметры.Вставить("ТаблицаВзаиморасчетов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  // <ДокументСсылка.КорректировкаПоступления>  
	+ "Период,"                       // <Дата> - период движений - дата документа
	+ "ВалютаДокумента,"              // <СправочникСсылка.Валюты>
	+ "ВидОперации," 		          // <Перечисления.ВидыОперацийИсправленияПоступленияРеализации>
	+ "ДокументПоступленияДата,"      // <Дата> - дата корректируемого документа
	+ "ДоговорКонтрагента";           // <СправочникСсылка.ДоговорыКонтрагентов> 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции // ПодготовитьПараметрыТаблицыАвансовОплат()

Функция ПодготовитьТаблицыАвансовОплат(ТаблицаВзаиморасчетов, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыАвансовОплат(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаАвансовОплат = Параметры.ТаблицаВзаиморасчетов;
	
	ТаблицаАвансовОплат.Колонки.Добавить("НужноВключатьВИтоговуюТаблицу");
	ТаблицаАвансовОплат.Колонки.Добавить("НужноУчитыватьПриЗачетеАванса");
	
	Если Реквизиты.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			ДатаРегистратора = Реквизиты.ДокументПоступленияДата;
		Иначе
			ДатаРегистратора = Реквизиты.Период;
		КонецЕсли;	
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, ДатаРегистратора);
		
		Для Каждого СтрокаТаблицы Из ТаблицаАвансовОплат Цикл
			
			Если СтрокаТаблицы.ОстатокВзаиморасчетов <> 0 Тогда
				СтрокаТаблицы.НужноУчитыватьПриЗачетеАванса = Истина;
			Иначе
				СтрокаТаблицы.НужноУчитыватьПриЗачетеАванса = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ТаблицаАвансовОплат;
	
КонецФункции	

Функция ПодготовитьПараметрыТаблицыДокументаПоВыделениюАванса(ТаблицаРеквизиты, ТаблицыВыделенияАвансов)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата> - период движений - дата документа
	+ "ВалютаДокумента,"              // <СправочникСсылка.Валюты>
	+ "Регистратор"; 		          // <Перечисления.ВидыОперацийИсправленияПоступленияРеализации>

	Параметры.Вставить("РеквизитыВыделенияАвансов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаВзаиморасчетов

	СписокОбязательныхКолонок = ""
	+ "ВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты>
	+ "ВидДоговора,"                  // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
	+ "ДатаДокументаРасчетов,"        // <Дата>
	+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"             // <ДокументСсылка.ПоступлениеНаРасчетныйСчет>
	+ "Контрагент,"	                  // <СправочникСсылка.Контрагенты>
	+ "ОстатокВзаиморасчетов,"        // <Число>
	+ "Подразделение,"                // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПодразделениеРасчетов,"        // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "РасчетыВВалюте,"               // <Булево>
	+ "РасчетыВУсловныхЕдиницах,"     // <Булево>
	+ "СуммаВзаиморасчетов,"          // <Число>
	+ "СуммаВзаиморасчетовЕНВД,"      // <Число>
	+ "СуммаВзаиморасчетовКомитента," // <Число>
	+ "СуммаВзаиморасчетовПатент,"    // <Число>
	+ "СуммаРуб,"                     // <Число>
	+ "СуммаРуб_ЕНВД,"                // <Число>
	+ "СуммаРуб_Комитента,"           // <Число>
	+ "СуммаРуб_Патент,"              // <Число>
	+ "СуммаРубПоКурсуАванса,"        // <Число>
	+ "СчетАвансов,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетРасчетов";                 // <ПланСчетовСсылка.Хозрасчетный>
	
	Параметры.Вставить("ТаблицаВыделенияАвансов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицыВыделенияАвансов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции	

Функция ПодготовитьТаблицуВыделениеАвансов(ТаблицаВзаиморасчетыВозврат, ТаблицаРеквизиты, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетыВозврат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицаВзаиморасчетыВозврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыДокументаПоВыделениюАванса(ТаблицаРеквизиты, ТаблицаВзаиморасчетыВозврат);
	Реквизиты = Параметры.РеквизитыВыделенияАвансов[0];
	
	ТаблицаВыделенияАвансов = Параметры.ТаблицаВыделенияАвансов;
	СтрокаВыделяемогоАванса = ТаблицаВыделенияАвансов.Найти(Реквизиты.Регистратор, "ДокументРасчетов");
	Если Реквизиты.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить()
	 Или СтрокаВыделяемогоАванса = Неопределено Тогда
		Возврат ТаблицаВыделенияАвансов;
	КонецЕсли;	
	
	ЕдинаяТаблица = ПодготовитьЕдинуюТаблицуПоПереданным(ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам);
	
	КурсВыделяемогоАванса = ЕдинаяТаблица.Итог("СуммаРубДоИзменения")/ЕдинаяТаблица.Итог("СуммаВзаиморасчетовДоИзменения");
	
	СтрокаВыделяемогоАванса.СуммаРубПоКурсуАванса = СтрокаВыделяемогоАванса.СуммаВзаиморасчетов*КурсВыделяемогоАванса;
	
	Возврат ТаблицаВыделенияАвансов;
	
КонецФункции	

Функция ПодготовитьТаблицуТоварыУслугиКомиссияПоЗакупке(ИсходнаяТаблица, ТаблицаПараметры, Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсходнаяТаблица) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда 
		Возврат ИсходнаяТаблица;
	КонецЕсли;
	
	МассивВалютРасчетовСКомитентами = ИсходнаяТаблица.ВыгрузитьКолонку("ВалютаРасчетовСКомитентом");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТаблицаПараметры[0].Период); 
	Запрос.УстановитьПараметр("МассивВалют", МассивВалютРасчетовСКомитентами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&МассивВалют)) КАК КурсыВалютСрезПоследних";
	
	ВыборкаВалют = Запрос.Выполнить().Выбрать();
	
	ТаблицаРезультат = ИсходнаяТаблица.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		// Если валюты расчетов не совпадают, то необходимо пересчитать сумму взаиморасчетов комитента по курсу.
		Если СтрокаТаблицы.ВалютаРасчетовСКомитентом <> ТаблицаПараметры[0].ВалютаВзаиморасчетов Тогда
			ВыборкаВалют.Сбросить();
			Если ВыборкаВалют.НайтиСледующий(СтрокаТаблицы.ВалютаРасчетовСКомитентом, "Валюта") Тогда
				
				Если НЕ ВыборкаВалют.Курс = 0 Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = Окр(СтрокаТаблицы.СуммаБУ*ВыборкаВалют.Кратность/ВыборкаВалют.Курс,2);
					СтрокаТаблицы.СуммаНДСВзаиморасчетов = Окр(СтрокаТаблицы.СуммаНДСРуб*ВыборкаВалют.Кратность/ВыборкаВалют.Курс,2); 
				Иначе
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					СтрокаТаблицы.СуммаНДСВзаиморасчетов = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				СтрокаТаблицы.СуммаНДСВзаиморасчетов = 0;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции 

Функция ПодготовитьТаблицыТоваровУслуг(РеквизитыДокумента, ТаблицаДокумента, ЭтоУслуги = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаДокумента) Тогда
		Возврат ТаблицаДокумента;
	КонецЕсли;
	
	Реквизиты = РеквизитыДокумента[0];
	Если Не Реквизиты.КорректироватьБУиНУ Тогда
		Возврат ТаблицаДокумента;
	КонецЕсли;
		
	Если ЭтоУслуги 
	   И ТипЗнч(Реквизиты.ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ДополнитьОстаткамиДопРасходы(Реквизиты, ТаблицаДокумента);
	КонецЕсли;
	
	// Вид ценностей объекта учета для данной строки
	ТаблицаДокумента.Колонки.Добавить("Ценность");
	
	Если ЭтоУслуги
	 Или Не Реквизиты.УчетВПродажныхЦенах
	 Или Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		Возврат ТаблицаДокумента;
	КонецЕсли;
	 
	Параметры = ПолучитьТаблицыКорректировкиПоступленияТоваровУслуг(РеквизитыДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаДокумента.Колонки.Добавить("РозничнаяЦена");
	ТаблицаДокумента.Колонки.Добавить("УчетнаяЦена");
	
	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	МассивНоменклатуры = ТаблицаДокумента.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           Реквизиты.Склад);
	Запрос.УстановитьПараметр("КонецПериода",    Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",     Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",   Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Счет",            ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("Номенклатура",    МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
	|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0 
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Субконто1
	|";
	
	ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Номенклатура", Истина);
	
	ТаблицаРозничныхЦен = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, 
		Реквизиты.ТипЦенРозничнойТорговли, Реквизиты.Период);
	
	Для Каждого Строка из ТаблицаДокумента Цикл
		СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
		Если СтрокаТаблицыЦен <> Неопределено Тогда
			Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
		Иначе
			Строка.УчетнаяЦена = 0;
		КонецЕсли;
		
		СтрокаРозничныхЦен = ТаблицаРозничныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
		Если СтрокаРозничныхЦен <> Неопределено Тогда
			Строка.РозничнаяЦена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаРозничныхЦен.Цена, 
				СтрокаРозничныхЦен.Валюта, Реквизиты.ВалютаРеглУчета,
				СтрокаРозничныхЦен.Курс, 1,
				СтрокаРозничныхЦен.Кратность, 1);
		Иначе
			Строка.РозничнаяЦена = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДокумента;

КонецФункции

Функция ПолучитьТаблицыКорректировкиПоступленияТоваровУслуг(РеквизитыДокумента) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                		// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Склад,"
	+ "ТипСклада,"
	+ "ТипЦенРозничнойТорговли,"
	+ "УчетВПродажныхЦенах,"
	+ "Организация,"
	+ "Подразделение,"         		// <СправочникСсылка.ПодразделенияОрганизации> - 
	+ "ВалютаРеглУчета,"
	+ "КорректироватьБУиНУ,"
	+ "ДокументПоступленияСсылка,"
	+ "Регистратор,"           		// <Регистратор...> - документ, записывающий движения в регистры
	+ "ВестиСуммовойУчетПоСкладам," // <Булево>
	+ "ВестиПартионныйУчет"  		// <Булево>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ДополнитьОстаткамиБУТаблицуКорректировкиТоваров(РеквизитыДокумента, ТаблицаПоТоварам) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПоТоварам)
	 Или Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		Возврат ТаблицаПоТоварам;
	КонецЕсли;
	
	Реквизиты = РеквизитыДокумента[0];
	
	ДополнитьОстаткамиБУЗабалансовыеТаблицуКорректировкиТоваров(Реквизиты, ТаблицаПоТоварам);
	
	Если НачалоМесяца(Реквизиты.ДокументПоступленияДата) = НачалоМесяца(Реквизиты.Период) Тогда
		Возврат ТаблицаПоТоварам;
	КонецЕсли;
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияДляЗаполненияОстаткамиБУ(РеквизитыДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПоТоварам.Колонки.Добавить("КоличествоНачалоМесяца", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаПоТоварам.Колонки.Добавить("КоличествоНачалоГода",   ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПоТоварам, "Номенклатура", Истина);
	
	ТипНоменклатура = Тип("СправочникСсылка.Номенклатура");
	Инд = МассивНоменклатуры.Количество() - 1;
	Пока Инд >= 0 Цикл
		Если ТипЗнч(МассивНоменклатуры[Инд]) <> ТипНоменклатура Тогда
			МассивНоменклатуры.Удалить(Инд);
		КонецЕсли;
		Инд = Инд - 1;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		Возврат ТаблицаПоТоварам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешнийИсточник.Номенклатура,
	|	ВнешнийИсточник.СчетУчета,
	|	ВнешнийИсточник.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаПоТоварам
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоТоварам);
	Запрос.Выполнить();
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если Реквизиты.ВестиСуммовойУчетПоСкладам Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		Если Реквизиты.ВестиПартионныйУчет Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			ТекстУсловия = "Организация = &Организация И Субконто2 = &Склад И Субконто3 = &Партия";
		Иначе
			ТекстУсловия = "Организация = &Организация И Субконто2 = &Склад";
		КонецЕсли;
	ИначеЕсли Реквизиты.ВестиПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		ТекстУсловия = "Организация = &Организация И Субконто2 = &Партия";
	Иначе
		ТекстУсловия = "Организация = &Организация";
	КонецЕсли;
	ТекстУсловия = ТекстУсловия + " И Субконто1 В (&МассивНоменклатуры)";
		
	Запрос.УстановитьПараметр("ВидСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад",        Реквизиты.Склад);
	Запрос.УстановитьПараметр("Партия",       Реквизиты.ДокументПоступленияСсылка);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиНачалоМесяца.Счет КАК Счет,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиНачалоМесяца.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиНачалоМесяца
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоМесяца, , &ВидСубконто, " + ТекстУсловия + ") КАК ХозрасчетныйОстаткиНачалоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиНачалоГода.Счет КАК Счет,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиНачалоГода.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &ВидСубконто, " + ТекстУсловия + ") КАК ХозрасчетныйОстаткиНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиНачалоМесяца.КоличествоОстатокДт КОНЕЦ) КАК КоличествоНачалоМесяца,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиНачалоГода.КоличествоОстатокДт КОНЕЦ) КАК КоличествоНачалоГода,
	|	ТаблицаПоТоварам.Номенклатура КАК Номенклатура,
	|	ТаблицаПоТоварам.СчетУчета КАК СчетУчета,
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаПоТоварам КАК ТаблицаПоТоварам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиНачалоМесяца КАК ХозрасчетныйОстаткиНачалоМесяца
	|		ПО ТаблицаПоТоварам.Номенклатура = ХозрасчетныйОстаткиНачалоМесяца.Субконто1
	|			И ТаблицаПоТоварам.СчетУчета = ХозрасчетныйОстаткиНачалоМесяца.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиНачалоГода КАК ХозрасчетныйОстаткиНачалоГода
	|		ПО ТаблицаПоТоварам.Номенклатура = ХозрасчетныйОстаткиНачалоГода.Субконто1
	|			И ТаблицаПоТоварам.СчетУчета = ХозрасчетныйОстаткиНачалоГода.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ВидыСубконто.Количество() < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиНачалоМесяца.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиНачалоГода.Субконто3 КАК Субконто3", "");
	КонецЕсли;
	Если ВидыСубконто.Количество() < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиНачалоМесяца.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиНачалоГода.Субконто2 КАК Субконто2", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ТаблицаПоТоварам[Результат.НомерСтроки - 1].КоличествоНачалоМесяца = Результат.КоличествоНачалоМесяца;
		ТаблицаПоТоварам[Результат.НомерСтроки - 1].КоличествоНачалоГода = Результат.КоличествоНачалоГода;
	КонецЦикла;
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьРеквизитыКорректировкиПоступленияДляЗаполненияОстаткамиБУ(РеквизитыДокумента) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация,"
	+ "Подразделение,"
	+ "Склад,"
	+ "ДокументПоступленияДата,"
	+ "ВестиПартионныйУчет,"
	+ "ВестиСуммовойУчетПоСкладам,"
	+ "ДокументПоступленияСсылка,"
	+ "Регистратор,"           // <Регистратор...> - документ, записывающий движения в регистры
	+ "Контрагент,"
	+ "НДСВключенВСтоимость"
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура ДополнитьОстаткамиБУЗабалансовыеТаблицуКорректировкиТоваров(Реквизиты, ТаблицаПоТоварам)
	
	Если ТаблицаПоТоварам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// По забалансовым счетам учетам товаров, если на момент проведения корректировки 
	// остатков уже нет, то проводки не формируются, т.к. ценности уже списаны с учета, 
	// а изменения учетной стоимости для них в доходах / расходах отражать не требуется.

	ТаблицаПоТоварам.Колонки.Добавить("КоличествоЗабалансВПроводку", 	ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаПоТоварам.Колонки.Добавить("СуммаБУЗабалансВПроводку", 		ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	СтруктураПоиска = Новый Структура("СчетУчетаЗабалансовый", Истина);
	НайденныеСтроки = ТаблицаПоТоварам.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		//Нет забалансовых счетов учета, дополнительных действий не требуется.
		Возврат;
	КонецЕсли;
	
	// 002 - Номенклатура, Контрагенты
	// 003.01 - Номенклатура, Контрагенты, [Склады]
	// 004.01 - Номенклатура, Партии, [Склады]
	// Остальные забалансовые счета возникают при проведении документов, отличных от поступлений, 
	// поэтому в корректировке поступления не обрабатываются.
	
	ТаблицаПоТоварамЗабалансовые = ТаблицаПоТоварам.Скопировать(НайденныеСтроки, 
		"НомерСтроки,Номенклатура,СчетУчета,Комитент,Количество,КоличествоДоИзменения,СуммаБУ,СуммаБУДоИзменения,СуммаНДСРуб,СуммаНДСРубДоИзменения");
	Для Каждого СтрокаТовары Из ТаблицаПоТоварамЗабалансовые Цикл
		ЕстьКонтрагентНаСчете = БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СтрокаТовары.СчетУчета);
	
		Если ЕстьКонтрагентНаСчете Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Комитент) Тогда
				СтрокаТовары.Комитент = Реквизиты.Контрагент;
			КонецЕсли;
		Иначе
			СтрокаТовары.Комитент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		СписатьПоСтрКоличество 	= СтрокаТовары.Количество - СтрокаТовары.КоличествоДоИзменения;
		СписатьПоСтрСуммаБУ		= СтрокаТовары.СуммаБУ - СтрокаТовары.СуммаБУДоИзменения;
		СписатьПоСтрНДС			= СтрокаТовары.СуммаНДСРуб - СтрокаТовары.СуммаНДСРубДоИзменения;

		СписатьПоСтрСуммаБУ = СписатьПоСтрСуммаБУ + СписатьПоСтрНДС;
		
		СтрокаТовары.Количество	 = СписатьПоСтрКоличество;
		СтрокаТовары.СуммаБУ 	 = СписатьПоСтрСуммаБУ;
			
	КонецЦикла;
	
	ТаблицаПоТоварамЗабалансовые.Свернуть("Номенклатура,СчетУчета,Комитент", "Количество,СуммаБУ");
	
	ТаблицаОстатковБУЗабалансовые = ПолучитьТаблицуОстатковБУЗабалансовые(Реквизиты, ТаблицаПоТоварамЗабалансовые);
	
	СтруктураПоиска = Новый Структура("Номенклатура,СчетУчета,Комитент");
	ТаблицаПоТоварам.Индексы.Добавить("Номенклатура,СчетУчета,Комитент");
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатковБУЗабалансовые Цикл
	
		КоличествоОстатокПослеПроведения = СтрокаОстатков.КоличествоОстаток + СтрокаОстатков.Количество;
		СуммаОстатокПослеПроведения = СтрокаОстатков.СуммаОстаток + СтрокаОстатков.СуммаБУ;
		
		// Если после проведения получается отрицательное количество или сумма без количества,
		// то не требуется формировать проводки.
		КоличествоВПроводку = СтрокаОстатков.Количество;
		СуммаВПроводку      = СтрокаОстатков.СуммаБУ;
		
		Если КоличествоОстатокПослеПроведения < 0 Тогда
			Если СтрокаОстатков.КоличествоОстаток > 0 Тогда
				КоличествоВПроводку = СтрокаОстатков.КоличествоОстаток;
			Иначе
				КоличествоВПроводку = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаОстатокПослеПроведения < 0 Тогда
			Если СтрокаОстатков.СуммаОстаток > 0 Тогда
				СуммаВПроводку = СтрокаОстатков.СуммаОстаток;
			Иначе
				СуммаВПроводку = 0;
			КонецЕсли;
		ИначеЕсли СуммаОстатокПослеПроведения > 0 И (СтрокаОстатков.КоличествоОстаток + КоличествоВПроводку) <= 0 Тогда
			СуммаВПроводку = 0;
		КонецЕсли;
		
		// Заполним в ТаблицеПоТоварам вычисленные суммы.
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстатков);
		Если СтрокаОстатков.Комитент = Реквизиты.Контрагент Тогда
			// В таблице в поле Комитент хранится пустая ссылка, контрагент был подставлен из шапки документа.
			СтруктураПоиска.Комитент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПоТоварам.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из НайденныеСтроки Цикл
		
			СписатьПоСтрКоличество 	= СтрокаТовары.Количество - СтрокаТовары.КоличествоДоИзменения;
			СписатьПоСтрСуммаБУ		= СтрокаТовары.СуммаБУ - СтрокаТовары.СуммаБУДоИзменения;
			СписатьПоСтрНДС			= СтрокаТовары.СуммаНДСРуб - СтрокаТовары.СуммаНДСРубДоИзменения;

			СписатьПоСтрСуммаБУ = СписатьПоСтрСуммаБУ + СписатьПоСтрНДС;
		
			УчтеноКоличество = 0;
			УчтеноСумма = 0;
			Если СписатьПоСтрКоличество > 0 Тогда
				УчтеноКоличество = Мин(СписатьПоСтрКоличество, КоличествоВПроводку);
			Иначе
				УчтеноКоличество = Макс(СписатьПоСтрКоличество, КоличествоВПроводку);
			КонецЕсли;
			
			Если СписатьПоСтрСуммаБУ > 0 Тогда
				УчтеноСумма = Мин(СписатьПоСтрСуммаБУ, СуммаВПроводку);
			Иначе
				УчтеноСумма = Макс(СписатьПоСтрСуммаБУ, СуммаВПроводку);
			КонецЕсли;
			
			СтрокаТовары.КоличествоЗабалансВПроводку 	= УчтеноКоличество;
			СтрокаТовары.СуммаБУЗабалансВПроводку		= УчтеноСумма;
			
			КоличествоВПроводку = КоличествоВПроводку - УчтеноКоличество;
		    СуммаВПроводку		= СуммаВПроводку - УчтеноСумма;
		КонецЦикла;
	
		Если КоличествоВПроводку <> 0 ИЛИ СуммаВПроводку <> 0 Тогда
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТовары = НайденныеСтроки[0];
				СтрокаТовары.КоличествоЗабалансВПроводку = СтрокаТовары.КоличествоЗабалансВПроводку + КоличествоВПроводку;
				СтрокаТовары.СуммаБУЗабалансВПроводку 	= СтрокаТовары.КоличествоЗабалансВПроводку + СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуОстатковБУЗабалансовые(Реквизиты, ТаблицаПоТоварамЗабалансовые)

	МассивСчетаУчета = ТаблицаПоТоварамЗабалансовые.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетаУчета);
	
	МассивНоменклатура = ТаблицаПоТоварамЗабалансовые.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатура);
	
	МассивКонтрагенты = ТаблицаПоТоварамЗабалансовые.ВыгрузитьКолонку("Комитент");
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивКонтрагенты);
	МассивКонтрагенты.Добавить(Реквизиты.Контрагент); // контрагент из шапки документа
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКонтрагенты);
	
	ЕстьСубконтоСклады = Ложь;
	МассивСчетаУчетаБезСклада = Новый Массив;
	МассивСчетаУчетаСоСкладом = Новый Массив;
	Для Каждого СчетУчета Из МассивСчетаУчета Цикл
		ЕстьСкладНаСчете = БухгалтерскийУчет.ВедетсяУчетПоСкладам(СчетУчета);
	
		ЕстьСубконтоСклады = ЕстьСубконтоСклады ИЛИ ЕстьСкладНаСчете;
		
		Если ЕстьСкладНаСчете Тогда
			МассивСчетаУчетаСоСкладом.Добавить(СчетУчета);
		Иначе
			МассивСчетаУчетаБезСклада.Добавить(СчетУчета);
		КонецЕсли;

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", 	Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", 	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", 	Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Склад", 			Реквизиты.Склад);
	Запрос.УстановитьПараметр("СчетаУчета", 	МассивСчетаУчета);
	Запрос.УстановитьПараметр("СчетаУчетаСоСкладом", МассивСчетаУчетаСоСкладом);
	Запрос.УстановитьПараметр("СчетаУчетаБезСклада", МассивСчетаУчетаБезСклада);
	Запрос.УстановитьПараметр("Номенклатура", 	МассивНоменклатура);
	Запрос.УстановитьПараметр("Контрагенты", 	МассивКонтрагенты);
	Запрос.УстановитьПараметр("ДокументПартия", Реквизиты.ДокументПоступленияСсылка);
	Запрос.УстановитьПараметр("ТаблицаПоТоварамЗабалансовые", ТаблицаПоТоварамЗабалансовые);
	
	ВидыСубконтоНК = Новый Массив;
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоНКС = Новый Массив;
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Если ЕстьСубконтоСклады Тогда
		ВидыСубконтоНКС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ВидыСубконтоНП = Новый Массив;
	ВидыСубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Если ЕстьСубконтоСклады Тогда
		ВидыСубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыСубконтоНК", 	ВидыСубконтоНК);
	Запрос.УстановитьПараметр("ВидыСубконтоНКС", 	ВидыСубконтоНКС);
	Запрос.УстановитьПараметр("ВидыСубконтоНП", 	ВидыСубконтоНП);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварамЗабалансовые.Номенклатура,
	|	ТаблицаПоТоварамЗабалансовые.СчетУчета,
	|	ТаблицаПоТоварамЗабалансовые.Комитент,
	|	ТаблицаПоТоварамЗабалансовые.Количество,
	|	ТаблицаПоТоварамЗабалансовые.СуммаБУ
	|ПОМЕСТИТЬ ВТ_ТаблицаПоТоварамЗабалансовые
	|ИЗ
	|	&ТаблицаПоТоварамЗабалансовые КАК ТаблицаПоТоварамЗабалансовые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаПоТоварамЗабалансовые.Номенклатура,
	|	ТаблицаПоТоварамЗабалансовые.Комитент,
	|	ТаблицаПоТоварамЗабалансовые.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто2 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_НеСгруппированныеОстаткиПоСчетам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&СчетаУчетаБезСклада),
	|			&ВидыСубконтоНК,
	|			Организация = &Организация
	|				И (Подразделение ЕСТЬ NULL 
	|					ИЛИ Подразделение = &Подразделение)
	|				И Субконто1 В (&Номенклатура)
	|				И Субконто2 В (&Контрагенты)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&СчетаУчета),
	|			&ВидыСубконтоНП,
	|			Организация = &Организация
	|				И (Подразделение ЕСТЬ NULL 
	|					ИЛИ Подразделение = &Подразделение)
	|				И Субконто1 В (&Номенклатура)
	|				И Субконто2 = &ДокументПартия
	|				И Субконто3 = &Склад) КАК ХозрасчетныйОстатки";
	Если ЕстьСубконтоСклады Тогда
		Запрос.Текст = Запрос.Текст + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Контрагент,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В (&СчетаУчетаСоСкладом),
		|			&ВидыСубконтоНКС,
		|			Организация = &Организация
		|				И (Подразделение ЕСТЬ NULL 
		|					ИЛИ Подразделение = &Подразделение)
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 В (&Контрагенты)
		|				И Субконто3 = &Склад) КАК ХозрасчетныйОстатки
		|";
	КонецЕсли;
	
	ТекстЗапросаОстаткиПоСчетам = 
	"ВЫБРАТЬ
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Счет КАК СчетУчета,
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Номенклатура КАК Номенклатура,
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Контрагент КАК Контрагент,
	|	СУММА(ВТ_НеСгруппированныеОстаткиПоСчетам.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВТ_НеСгруппированныеОстаткиПоСчетам.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоСчетам
	|ИЗ
	|	ВТ_НеСгруппированныеОстаткиПоСчетам КАК ВТ_НеСгруппированныеОстаткиПоСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Счет,
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Номенклатура,
	|	ВТ_НеСгруппированныеОстаткиПоСчетам.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Контрагент,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоТоварамЗабалансовые.СчетУчета КАК СчетУчета,
	|	ВТ_ТаблицаПоТоварамЗабалансовые.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаПоТоварамЗабалансовые.Комитент КАК Комитент,
	|	ВТ_ТаблицаПоТоварамЗабалансовые.Количество,
	|	ВТ_ТаблицаПоТоварамЗабалансовые.СуммаБУ,
	|	ЕСТЬNULL(ВТ_ОстаткиПоСчетам.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВТ_ОстаткиПоСчетам.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ВТ_ТаблицаПоТоварамЗабалансовые КАК ВТ_ТаблицаПоТоварамЗабалансовые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	|		ПО ВТ_ТаблицаПоТоварамЗабалансовые.Номенклатура = ВТ_ОстаткиПоСчетам.Номенклатура
	|			И ВТ_ТаблицаПоТоварамЗабалансовые.Комитент = ВТ_ОстаткиПоСчетам.Контрагент
	|			И ВТ_ТаблицаПоТоварамЗабалансовые.СчетУчета = ВТ_ОстаткиПоСчетам.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Комитент
	|"; 
	
	Запрос.Текст = Запрос.Текст 
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() 
		+ ТекстЗапросаОстаткиПоСчетам;
	
	Если НЕ ЕстьСубконтоСклады Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Субконто3 = &Склад", "");
	КонецЕсли;
	
	// Блокируем регистр Хозрасчетный для получения остатков
	
	Блокировка = Новый БлокировкаДанных;
	
	ТаблицаПоТоварамЗабалансовые.Индексы.Добавить("СчетУчета");
	
	Для каждого СчетУчета Из МассивСчетаУчета Цикл
	
		// Отдельная блокировка по каждому счету учета
		СуммовойУчетПоСкладам 		= БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СчетУчета);
		ВедетсяУчетПоКонтрагентам 	= БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СчетУчета);
		
		Если ВедетсяУчетПоКонтрагентам Тогда
			ТаблицаСписанияПоСчету = ТаблицаПоТоварамЗабалансовые.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура,Комитент");
			ТаблицаСписанияПоСчету.Свернуть("Номенклатура,Комитент");
		Иначе
			ТаблицаСписанияПоСчету = ТаблицаПоТоварамЗабалансовые.Скопировать(Новый Структура("СчетУчета", СчетУчета), "Номенклатура");
			ТаблицаСписанияПоСчету.Свернуть("Номенклатура");
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУчета);
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			ЭлементБлокировки.УстановитьЗначение("Подразделение", Реквизиты.Подразделение);
		КонецЕсли;
		ЭлементБлокировки.ИсточникДанных = ТаблицаСписанияПоСчету;
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				И НЕ СчетУчета = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение Тогда // Обход ошибки при наложении блокировки
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "Номенклатура");
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады 
				И СуммовойУчетПоСкладам Тогда
				// Если нет суммового учета по складам - суммы получаются запросом без отбора по складам,
				// поэтому блокировать склады не нужно
				ЭлементБлокировки.УстановитьЗначение(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, Реквизиты.Склад);
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Комитент");
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция ПодготовитьЕдинуюТаблицуПоПереданным(ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам)
	
	ЕдинаяТаблица = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("Число"));
	
	ТипЧисло15_2 = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	ЕдинаяТаблица.Колонки.Добавить("ИмяСписка");
	ЕдинаяТаблица.Колонки.Добавить("НомерСтроки");
	ЕдинаяТаблица.Колонки.Добавить("ПревышаетСуммуДоИзменения");
	ЕдинаяТаблица.Колонки.Добавить("СтавкаНДС");
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",                                                  ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовДоИзменения",                                       ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаРуб",                                                             ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаРубДоИзменения",                                                  ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаНДСРуб",                                                          ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаБУ",                                                              ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПревышениеДоИзменения",                             ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения", ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПоКурсуДоИзменения",                                ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаРубПоКурсуДоИзменения",                                           ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПоКурсуАвансов",                                    ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАвансов",                                               ТипЧисло15_2);
	ЕдинаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПоКурсуВзаиморасчетов",                             ТипЧисло15_2);
	
	Если НЕ ТаблицаПоТоварам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			НоваяСтрока = ЕдинаяТаблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.ПревышаетСуммуДоИзменения = НоваяСтрока.СуммаВзаиморасчетов > НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			НоваяСтрока.СуммаВзаиморасчетовПревышениеДоИзменения = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТаблицаПоУслугам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			
			НоваяСтрока = ЕдинаяТаблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.ПревышаетСуммуДоИзменения = НоваяСтрока.СуммаВзаиморасчетов > НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			НоваяСтрока.СуммаВзаиморасчетовПревышениеДоИзменения = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТаблицаПоАгентскимУслугам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАгентскимУслугам Цикл
			
			НоваяСтрока = ЕдинаяТаблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.ПревышаетСуммуДоИзменения = НоваяСтрока.СуммаВзаиморасчетов > НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			НоваяСтрока.СуммаВзаиморасчетовПревышениеДоИзменения = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетовДоИзменения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЕдинаяТаблица.Индексы.Добавить("ИмяСписка");
	ЕдинаяТаблица.Индексы.Добавить("НомерСтроки");
	ЕдинаяТаблица.Индексы.Добавить("ПревышаетСуммуДоИзменения");
	
	Возврат ЕдинаяТаблица;
	
КонецФункции	

Функция  ПодготовитьПараметрыТаблицыДокументаПоЗачетуАванса(ТаблицаРеквизиты, ТаблицаАвансов)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата> - период движений - дата документа
	+ "ВалютаДокумента,"              // <СправочникСсылка.Валюты>
	+ "ВидОперации," 		          // <Перечисления.ВидыОперацийИсправленияПоступленияРеализации>
	+ "ДокументПоступленияДата,"      // <Дата> - дата корректируемого документа
	+ "РасчетыВУсловныхЕдиницах,"     // <Булево>
	+ "НДСВключенВСтоимость";         // <Булево>

	Параметры.Вставить("РеквизитыЗачетАвансов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаВзаиморасчетов

	СписокОбязательныхКолонок = ""
	+ "ВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты>
	+ "ВидДоговора,"                  // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>
	+ "ДатаДокументаРасчетов,"        // <Дата>
	+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"             // <ДокументСсылка.ПоступлениеНаРасчетныйСчет>
	+ "Контрагент,"	                  // <СправочникСсылка.Контрагенты>
	+ "ОстатокВзаиморасчетов,"        // <Число>
	+ "Подразделение,"                // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПодразделениеРасчетов,"        // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "РасчетыВВалюте,"               // <Булево>
	+ "РасчетыВУсловныхЕдиницах,"     // <Булево>
	+ "СуммаВзаиморасчетов,"          // <Число>
	+ "СуммаВзаиморасчетовЕНВД,"      // <Число>
	+ "СуммаВзаиморасчетовКомитента," // <Число>
	+ "СуммаВзаиморасчетовПатент,"    // <Число>
	+ "СуммаРуб,"                     // <Число>
	+ "СуммаРуб_ЕНВД,"                // <Число>
	+ "СуммаРуб_Комитента,"           // <Число>
	+ "СуммаРуб_Патент,"              // <Число>
	+ "СуммаРубПоКурсуАванса,"        // <Число>
	+ "СчетАвансов,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетРасчетов,"                 // <ПланСчетовСсылка.Хозрасчетный>
	+ "НужноУчитыватьПриЗачетеАванса";// <Булево>
	
	Параметры.Вставить("ТаблицаАвансов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаАвансов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции	

Функция ПодготовитьТаблицуДокументаПоКурсуАвансов(ТаблицаРеквизиты, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам, ТаблицаАвансов) Экспорт
	
	ТаблицыПоКурсуАвансов = Новый Структура;
	ТаблицыПоКурсуАвансов.Вставить("ТаблицаПоТоварам",          ТаблицаПоТоварам);
	ТаблицыПоКурсуАвансов.Вставить("ТаблицаПоУслугам",          ТаблицаПоУслугам);
	ТаблицыПоКурсуАвансов.Вставить("ТаблицаПоАгентскимУслугам", ТаблицаПоАгентскимУслугам);
	
	Если Не ЗначениеЗаполнено(ТаблицаАвансов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицыПоКурсуАвансов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаПоТоварам)
	   И Не ЗначениеЗаполнено(ТаблицаПоУслугам)
	   И Не ЗначениеЗаполнено(ТаблицаПоАгентскимУслугам) Тогда
		Возврат ТаблицыПоКурсуАвансов;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить()
	 Или ТаблицаАвансов.Найти(Истина, "НужноУчитыватьПриЗачетеАванса") = Неопределено Тогда
		Возврат ТаблицыПоКурсуАвансов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыДокументаПоЗачетуАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.РеквизитыЗачетАвансов[0];
	
	ТаблицаИстинныхАвансов = Параметры.ТаблицаАвансов.Скопировать(Новый Структура("НужноУчитыватьПриЗачетеАванса", Истина));
	ЕдинаяТаблица = ПодготовитьЕдинуюТаблицуПоПереданным(ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам);

	ОтборСтрок = Новый Структура("ИмяСписка, НомерСтроки");
	
	СуммаВзаиморасчетовДоИзменения     = ЕдинаяТаблица.Итог("СуммаВзаиморасчетовДоИзменения");
	СуммаВзаиморасчетов                = ЕдинаяТаблица.Итог("СуммаВзаиморасчетов");
	
	ТаблицаДляРасчетаСуммыДоИзменения = ЕдинаяТаблица.Скопировать(Новый Структура("ПревышаетСуммуДоИзменения", Истина));
	
	СуммаВзаиморасчетовДляРаспределения = СуммаВзаиморасчетов - СуммаВзаиморасчетовДоИзменения;
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	СуммаВзаиморасчетовДляРаспределения, ТаблицаДляРасчетаСуммыДоИзменения, "СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения", "СуммаВзаиморасчетовПревышениеДоИзменения");
	
	СуммаВзаиморасчетовАванса = ТаблицаИстинныхАвансов.Итог("СуммаВзаиморасчетов");
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	СуммаВзаиморасчетовАванса, ТаблицаДляРасчетаСуммыДоИзменения, "СуммаВзаиморасчетовПоКурсуАвансов", "СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения");
	
	СуммаРубПоКурсуАвансов = ТаблицаИстинныхАвансов.Итог("СуммаРубПоКурсуАванса");
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	СуммаРубПоКурсуАвансов, ТаблицаДляРасчетаСуммыДоИзменения, "СуммаРубПоКурсуАвансов", "СуммаВзаиморасчетовПоКурсуАвансов");
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Реквизиты.ВалютаДокумента, Реквизиты.ДокументПоступленияДата);
		
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
	Иначе
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЕдинаяТаблица Цикл
		
		ОтборСтрок.ИмяСписка   = СтрокаТаблицы.ИмяСписка;
		ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		
		МассивСтрок = ТаблицаДляРасчетаСуммыДоИзменения.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			НайденнаяСтрокаТаблицы = МассивСтрок[0];
		
			СтрокаТаблицы.СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения = НайденнаяСтрокаТаблицы.СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения;
			
			СтрокаТаблицы.СуммаВзаиморасчетовПоКурсуДоИзменения = СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения;
			
		Иначе
			СтрокаТаблицы.СуммаВзаиморасчетовПоКурсуДоИзменения = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;	
			
		
	КонецЦикла;
	
	СуммаБУДляРаспределения = ЕдинаяТаблица.Итог("СуммаРубДоИзменения");
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
	СуммаБУДляРаспределения, ЕдинаяТаблица, "СуммаРубПоКурсуДоИзменения", "СуммаВзаиморасчетовПоКурсуДоИзменения");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляРасчетаСуммыДоИзменения Цикл
		
		ОтборСтрок.ИмяСписка = СтрокаТаблицы.ИмяСписка;
		ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		
		МассивСтрок = ЕдинаяТаблица.НайтиСтроки(ОтборСтрок);
		
		СтрокаЕдинойТаблицы = МассивСтрок[0];
		
		СтрокаЕдинойТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаРубПоКурсуДоИзменения + СтрокаТаблицы.СуммаРубПоКурсуАвансов;
		Если КратностьВзаиморасчетов <> 0 Тогда
			СтрокаЕдинойТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаБУ
				+ (СтрокаТаблицы.СуммаПревышенияСуммыВзаиморасчетовНадСуммойВзаиморасчетовДоИзменения
					- СтрокаТаблицы.СуммаВзаиморасчетовПоКурсуАвансов)
				* КурсВзаиморасчетов / КратностьВзаиморасчетов;
		КонецЕсли;
		
		Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
			
			ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаЕдинойТаблицы.СтавкаНДС);
			
			СтрокаЕдинойТаблицы.СуммаНДСРуб = СтрокаЕдинойТаблицы.СуммаБУ*ПроцентНДС/(100 + ПроцентНДС);
			
		КонецЕсли;
		
		СтрокаЕдинойТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаБУ - СтрокаЕдинойТаблицы.СуммаНДСРуб;
		
	КонецЦикла;
	
	Если НЕ ТаблицаПоТоварам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			ОтборСтрок.ИмяСписка = СтрокаТаблицы.ИмяСписка;
			ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
			
			МассивСтрок = ЕдинаяТаблица.НайтиСтроки(ОтборСтрок);
			
			СтрокаЕдинойТаблицы = МассивСтрок[0];
			
			СтрокаТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНДСРуб = СтрокаЕдинойТаблицы.СуммаНДСРуб;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТаблицаПоУслугам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			
			ОтборСтрок.ИмяСписка = СтрокаТаблицы.ИмяСписка;
			ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
			
			МассивСтрок = ЕдинаяТаблица.НайтиСтроки(ОтборСтрок);
			
			СтрокаЕдинойТаблицы = МассивСтрок[0];
			
			СтрокаТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНДСРуб = СтрокаЕдинойТаблицы.СуммаНДСРуб;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТаблицаПоАгентскимУслугам = Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАгентскимУслугам Цикл
			
			ОтборСтрок.ИмяСписка = СтрокаТаблицы.ИмяСписка;
			ОтборСтрок.НомерСтроки = СтрокаТаблицы.НомерСтроки;
			
			МассивСтрок = ЕдинаяТаблица.НайтиСтроки(ОтборСтрок);
			
			СтрокаЕдинойТаблицы = МассивСтрок[0];
			
			СтрокаТаблицы.СуммаБУ = СтрокаЕдинойТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.СуммаБУ;
			
			СтрокаТаблицы.СуммаНДСРуб = СтрокаЕдинойТаблицы.СуммаНДСРуб;
			
		КонецЦикла;
		
	КонецЕсли;
	
	 Возврат ТаблицыПоКурсуАвансов;
	
КонецФункции	

Функция ПодготовитьТаблицуДляПроведенияПоРублевымСуммам(Реквизиты, СтруктураТаблицДокумента, РублевыеСуммыДокументовВВалюте) Экспорт
	
	Если НЕ РублевыеСуммыДокументовВВалюте = Неопределено Тогда
	
		Для Каждого ЭлементСтруктуры Из СтруктураТаблицДокумента Цикл
			
			ОбрабатываемаяТаблица = ЭлементСтруктуры.Значение;
			
			Если ОбрабатываемаяТаблица = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ОтборПоТаблицам = Новый Структура("ИмяСписка, НомерСтроки");
			
			Для Каждого СтрокаТаблицы Из ОбрабатываемаяТаблица Цикл
				
				ОтборПоТаблицам.ИмяСписка   = СтрокаТаблицы.ИмяСписка;
				ОтборПоТаблицам.НомерСтроки = СтрокаТаблицы.НомерСтроки;
				
				СтрокаТаблицыВозврата = РублевыеСуммыДокументовВВалюте.НайтиСтроки(ОтборПоТаблицам)[0];

				СтрокаТаблицыВозврата.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБУ;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат РублевыеСуммыДокументовВВалюте;
	
КонецФункции	

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.КорректироватьБУиНУ
		ИЛИ Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		// Если в документе введена только номенклатура, учитываемая на забалансовых счетах,
		// то такие операции не влияют на взаиморасчеты и их не требуется актуализировать.
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|			ИЛИ ТаблицаТовары.КомиссияПоЗакупке)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.Комитент,
		|	ТаблицаТовары.ДоговорКомиссии,
		|	ТаблицаТовары.ВалютаРасчетовСКомитентом,
		|	ТаблицаТовары.ВидДоговораСКомитентом,
		|	Реквизиты.Дата
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.КомиссияПоЗакупке";
		
	КонецЕсли;

	Если Реквизиты.ЕстьУслуги
		ИЛИ Реквизиты.ЕстьАгентскиеУслуги Тогда
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	Реквизиты.Контрагент КАК Контрагент,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Реквизиты.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда

		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАгентскиеУслуги.Комитент КАК Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКомиссии КАК ДоговорКонтрагента,
		|	ТаблицаАгентскиеУслуги.ВалютаРасчетовСКомитентом КАК ВалютаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.ВидДоговораСКомитентом КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РеквизитыРегистрацияВПоследовательности", Неопределено);
		ПараметрыПроведения.Вставить("ТоварыРегистрацияВПоследовательности", Неопределено);
		ПараметрыПроведения.Вставить("УслугиРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	&ДокументПоступленияДата КАК ДокументПоступленияДата,
	|	&ДокументПоступленияСсылка КАК ДокументПоступленияСсылка,
	|	&ЕстьТовары КАК ЕстьТовары
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ТоварыРегистрацияВПоследовательности", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетСписания
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	Иначе
		ПараметрыПроведения.Вставить("ТоварыРегистрацияВПоследовательности", Неопределено);
	КонецЕсли;

	Если Реквизиты.ЕстьУслуги Тогда
		НомераТаблиц.Вставить("УслугиРегистрацияВПоследовательности", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУслуги.СчетЗатрат КАК СчетЗатрат
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	Иначе
		ПараметрыПроведения.Вставить("УслугиРегистрацияВПоследовательности", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, Отказ) Экспорт

	ВключенВПоследовательность = РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		Объект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		ПараметрыПроведения.ТоварыРегистрацияВПоследовательности,
		Перечисления.ВидыРегламентныхОпераций.ПустаяСсылка());
		
	Если ВключенВПоследовательность Тогда
		// Документ включен в последовательность, больше с ним ничего делать не требуется.
		Возврат;
	КонецЕсли;

	// Корректировке поступлений по товарам за прошлые месяцы требуется
	// определять количество товаров на начало месяца и на начало года, 
	// поэтому такие документы всегда регистрируем в последовательности, 
	// чтобы при закрытии месяца они перепроводились по актуальным данным.

	ОбязательноРегистрироватьВПоследовательности = Ложь;

	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.РеквизитыРегистрацияВПоследовательности,
		ПараметрыПроведения.УслугиРегистрацияВПоследовательности);
	
	ТаблицаУслуги = Параметры.ТаблицаУслуги;
		
	// Если параметры проведения для регистрации в последовательности заполнены, то анализируем их, 
	// иначе безусловно регистрируем в последовательности.
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ЕстьТовары Тогда
		Если НачалоМесяца(Реквизиты.ДокументПоступленияДата) <> НачалоМесяца(Реквизиты.Период) Тогда
			ОбязательноРегистрироватьВПоследовательности = Истина;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Реквизиты.ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		// Доп. расходы, относимые на стоимость приобретенных товаров.
		// При проведении получаются остатки на начало месяца и на начало года, поэтому регистрируем в последовательности всегда
		ОбязательноРегистрироватьВПоследовательности = Истина;

	КонецЕсли;

	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);

	ИначеЕсли НЕ ВключенВПоследовательность Тогда
		РаботаСПоследовательностями.ЗарегистрироватьУстареваниеРегламентныхОперацийПриПоступленииЗатрат(
			Объект, ТаблицаУслуги.ВыгрузитьКолонку("СчетЗатрат"))
			
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаРеквизиты, ТаблицаУслуги)

	Параметры = Новый Структура;
	
	// Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата> - период движений - дата документа
	+ "ДокументПоступленияДата,"      // <Дата> - дата корректируемого документа поступления
	+ "ДокументПоступленияСсылка,"	  // <ДокументСсылка.*> - Ссылка на корректируемый документ
	+ "ЕстьТовары"; 		          // <Булево> - Истина, если есть заполнена табличная часть Товары

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Услуги
	СписокОбязательныхКолонок = ""
	+ "СчетЗатрат"                    // <ПланСчетовСсылка.Хозрасчетный> - Счет затрат по услугам
	;

	Параметры.Вставить("ТаблицаУслуги",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаУслуги, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
	
	ТаблицаВзаиморасчетыВозврат = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов,
		ПараметрыПроведения.ВыделениеАвансаРеквизиты,
		Отказ);

	СформироватьДвиженияВыделениеАванса(
		ТаблицаВзаиморасчетыВозврат,
		ПараметрыПроведения.ВыделениеАвансаРеквизиты,
		Параметры.Движения,
		Отказ,
		Истина);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);

КонецПроцедуры

// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

//
// Подготовка параметров для процедуры СформироватьДвиженияЗачетАвансов
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//
// Возвращаемое значение:
//   <Структура> - структура из 2 таблиц: Взаиморасчеты, Реквизиты
//
Функция ПодготовитьПараметрыДвиженияВыделениеАванса(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СпособЗачетаАвансов,"
	+ "СчетУчетаРасчетовПоАвансам,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "ДокументПоступленияСсылка,"
	+ "Контрагент,"                   // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ВалютаВзаиморасчетов,"
	+ "ВидДоговора,"
	+ "Подразделение";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"             // <ДокументСсылка>  
		+ "СуммаРуб,"                     // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
		+ "СуммаВзаиморасчетов";          // <Число,15,2> - сумма в валюте взаиморасчетов
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВыделениеАванса(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоОтложенноеПроведение
	   И ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период)
	   И Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
	   И Не УчетВзаиморасчетов.ЭтоВидДоговораРасчетыПоКомиссии(Реквизиты.ВидДоговора) Тогда
		// При включенном отложенном проведении в момент оперативного проведения остатки по рублевым взаиморасчетам не получаем,
		// они будут актуализированы при выполнении отложенных расчетов.
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженияВыделениеАванса(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
    ПрименениеПБУ18 		= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводки = Движения.Хозрасчетный;

	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = Реквизиты.период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "Выделение аванса поставщику";
			Проводка.Сумма       = СтрокаВзаиморасчетов.СуммаРуб;

			СчетАванса = ?(ЗначениеЗаполнено(Реквизиты.СчетУчетаРасчетовПоАвансам),
				Реквизиты.СчетУчетаРасчетовПоАвансам,
				Реквизиты.СчетУчетаРасчетовСКонтрагентом);

			Проводка.СчетДт = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументПоступленияСсылка);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
				
			Если ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаВзаиморасчетов.СуммаРуб, СтрокаВзаиморасчетов.СуммаРуб,,,,,
					Проводка, ПрименениеПБУ18);
 			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаКорректировкаПоступленияМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ИПРеквизиты",      Неопределено);
		ПараметрыПроведения.Вставить("ИПТаблицаТоваров", Неопределено);
		ПараметрыПроведения.Вставить("ИПТаблицаУслуг",   Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("ИПРеквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	&ДокументПоступленияСсылка КАК Партия,
	|	&ДокументПоступленияДата КАК ПартияДата
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ИПТаблицаТоваров", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ИПТаблицаТоваров", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаРубДоИзменения + ТаблицаТовары.СуммаНДСРубДоИзменения КАК Сумма,
		|	ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаНДСРубДоИзменения КАК НДС,
		|	ТаблицаТовары.Количество - ТаблицаТовары.КоличествоДоИзменения КАК Количество,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		ИНАЧЕ ТаблицаТовары.Номенклатура.НоменклатурнаяГруппа
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	НЕОПРЕДЕЛЕНО КАК СтатьяЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасходовНУ,
		|	ИСТИНА КАК ПринятиеКналоговомуУчету,
		|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	&ДокументПоступленияСсылка КАК Партия
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаРубДоИзменения + ТаблицаТовары.СуммаНДСРубДоИзменения <> 0
		|			ИЛИ ТаблицаТовары.СуммаНДСРуб - ТаблицаТовары.СуммаНДСРубДоИзменения <> 0
		|			ИЛИ ТаблицаТовары.Количество - ТаблицаТовары.КоличествоДоИзменения <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ИПТаблицаУслуг", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ИПТаблицаУслуг", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Услуги"" КАК ИмяСписка,
		|	&СинонимУслуги КАК СинонимСписка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаРубДоИзменения + ТаблицаУслуги.СуммаНДСРубДоИзменения КАК Сумма,
		|	ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения КАК НДС,
		|	ТаблицаУслуги.Количество - ТаблицаУслуги.КоличествоДоИзменения КАК Количество,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаУслуги.Субконто2
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаУслуги.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаУслуги.Субконто2
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаУслуги.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидРасходовНУ,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаУслуги.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаУслуги.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаУслуги.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	&ДокументПоступленияСсылка КАК Партия
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаРубДоИзменения + ТаблицаУслуги.СуммаНДСРубДоИзменения <> 0
		|			ИЛИ ТаблицаУслуги.СуммаНДСРуб - ТаблицаУслуги.СуммаНДСРубДоИзменения <> 0
		|			ИЛИ ТаблицаУслуги.Количество - ТаблицаУслуги.КоличествоДоИзменения <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Соглашение об изменение стоимости
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СоглашениеОбИзмененииСтоимости";
	КомандаПечати.Представление = НСтр("ru = 'Соглашение об изменении стоимости'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Акт об оказании услуг за поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг за поставщика'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 70;
	
	// Товарная накладная (ТОРГ-12) на возврат
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12_Возврат";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12) на возврат'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 80;
	
	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12_БезУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12) за поставщика'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 90;

	// Товарная накладная (ТОРГ-12) с услугами
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12) с услугами за поставщика'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 90;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Корректировка поступления""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12_Возврат") Тогда
		ВключатьУслуги = Ложь;
		ЭтоВозврат     = Истина;
		ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12Покупатель(МассивОбъектов, ВключатьУслуги, ЭтоВозврат);
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_ТОРГ12");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12_Возврат", "ТОРГ-12 (Товарная накладная на возврат)",
			ПечатьТорговыхДокументов.ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ПараметрыПечати),,"ОбщийМакет.ПФ_MXL_ТОРГ12");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		ВключатьУслуги = Истина;
		ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12Покупатель(МассивОбъектов, ВключатьУслуги);
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_ТОРГ12");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ-12 (Товарная накладная за поставщика с услугами)",
			ПечатьТорговыхДокументов.ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ПараметрыПечати),,"ОбщийМакет.ПФ_MXL_ТОРГ12");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг") Тогда
		ВключатьУслуги = Ложь;
		ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12Покупатель(МассивОбъектов, ВключатьУслуги);
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_ТОРГ12");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг", "ТОРГ-12 (Товарная накладная за поставщика)",
			ПечатьТорговыхДокументов.ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ПараметрыПечати),,"ОбщийМакет.ПФ_MXL_ТОРГ12");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СоглашениеОбИзмененииСтоимости") Тогда
		ТаблицаСведенийСоглашенияОбИзмененииСтоимости = ПолучитьТаблицуСведенийСоглашенияОбИзмененииСтоимости(МассивОбъектов);
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_СоглашениеОбИзмененииСтоимости");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СоглашениеОбИзмененииСтоимости", "Соглашение об изменении стоимости", 
			ПечатьТорговыхДокументов.ПечатьСоглашенияОбИзмененииСтоимости(ТаблицаСведенийСоглашенияОбИзмененииСтоимости, ОбъектыПечати, ПараметрыПечати),,
				"ОбщийМакет.ПФ_MXL_СоглашениеОбИзмененииСтоимости");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		ПараметрыПечати.Вставить("ВидДокументаПечати",  "КорректировкаПоступления");
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаПоступления_Акт");
		ПараметрыПечати.Вставить("ИмяМакетаПечати",     "Документ.КорректировкаПоступления.ПФ_MXL_Акт");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт об оказании услуг за поставщика", 
			ПечатьТорговыхДокументов.ПечатьАктаОбОказанииУслуг(ТаблицаСведенийАктаОбОказанииУслуг, ОбъектыПечати, ПараметрыПечати),,
					"Документ.КорректировкаПоступления.ПФ_MXL_Акт");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаПоступления.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В(&СписокДокументов)
	|	И КорректировкаПоступления.ВидОперации = &ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	КорректировкаПоступления.Дата КАК ДатаДляПолученияСведений,
	|	КорректировкаПоступления.НомерВходящегоДокумента КАК НомерДокумента,
	|	КорректировкаПоступления.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА """"
	|		ИНАЧЕ КорректировкаПоступления.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА """"
	|		ИНАЧЕ КорректировкаПоступления.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	КорректировкаПоступления.Организация КАК Организация,
	|	КорректировкаПоступления.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА КорректировкаПоступления.Организация
	|		ИНАЧЕ КорректировкаПоступления.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА КорректировкаПоступления.Контрагент
	|		ИНАЧЕ КорректировкаПоступления.Организация
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступления.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА КорректировкаПоступления.Организация
	|					ИНАЧЕ КорректировкаПоступления.Грузоотправитель
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА КорректировкаПоступления.Контрагент
	|				ИНАЧЕ КорректировкаПоступления.Грузоотправитель
	|			КОНЕЦ
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступления.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА КорректировкаПоступления.Контрагент
	|					ИНАЧЕ КорректировкаПоступления.Грузополучатель
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступления.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА КорректировкаПоступления.Организация
	|				ИНАЧЕ КорректировкаПоступления.Грузополучатель
	|			КОНЕЦ
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаПоступления.ДоговорКонтрагента КАК Договор,
	|	КорректировкаПоступления.ДоговорКонтрагента.Представление КАК Основание,
	|	КорректировкаПоступления.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	КорректировкаПоступления.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	КорректировкаПоступления.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаПоступления.ДокументПоступления КАК ДокументПоступления,
	|	КорректировкаПоступления.ИсправляемыйДокументПоступления КАК ИсправляемыйДокументПоступления
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	КорректировкаПоступления.НомерСтроки КАК НомерСтроки,
	|	КорректировкаПоступления.Номенклатура КАК Товар,
	|	КорректировкаПоступления.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ИЛИ &ЭтоВозврат
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА КорректировкаПоступления.КоличествоДоКорректировки - КорректировкаПоступления.Количество
	|		ИНАЧЕ КорректировкаПоступления.Количество
	|	КОНЕЦ КАК Количество,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|						ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения - (КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС)
	|					ИНАЧЕ КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|					ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|				ИНАЧЕ КорректировкаПоступления.Сумма
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА КорректировкаПоступления.СуммаНДСДоИзменения - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	КорректировкаПоступления.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК КорректировкаПоступленияНоменклатура
	|		ПО (КорректировкаПоступления.Номенклатура = КорректировкаПоступленияНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА КорректировкаПоступления.КоличествоДоИзменения > КорректировкаПоступления.Количество
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	КорректировкаПоступления.НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	КорректировкаПоступления.Количество,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	0,
	|	КорректировкаПоступления.Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступления.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	4,
	|	КорректировкаПоступления.НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	КорректировкаПоступления.Количество,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	0,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступления.СуммаНДС,
	|	КорректировкаПоступления.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.АгентскиеУслуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийТОРГ12Покупатель(Знач СписокДокументов, Знач ВключатьУслуги, ЭтоВозврат = Ложь) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеТОРГ12();
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СписокДокументов", СписокДокументов);
	Запрос.Параметры.Вставить("ВидОперации", ?(ЭтоВозврат, 
		Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение,
		Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки));
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Параметры.Вставить("ВключатьУслуги", ВключатьУслуги);
	Запрос.Параметры.Вставить("ЭтоВозврат",     ЭтоВозврат);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12(); 
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.ИсправляемыйДокументПоступления) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		СведенияОДокументе.Валюта             = ВалютаРегУчета;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыТОРГ12();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Если Выборка.ВалютаДокумента <> ВалютаРегУчета
			И ЗначениеЗаполнено(Выборка.ИсправляемыйДокументПоступления)Тогда
			ДатаПолученияКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ИсправляемыйДокументПоступления, "Дата");
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаДокумента, ДатаПолученияКурса);
		Иначе
			КурсВалюты = Неопределено;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			Если КурсВалюты <> Неопределено Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС = Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС = Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(КурсВалюты.Кратность = 0, 1, КурсВалюты.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС = Строка.СуммаНДС * КурсВалюты.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС = (Строка.СуммаБезНДС + Строка.СуммаНДС) * КурсВалюты.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			СтрокаТаблицыДокумента.Цена = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		Если ЭтоВозврат Тогда 
			ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКладовщика");
			ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
			
			Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(СведенияОДокументе.Организация) Тогда
				ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Организация, "ИндивидуальныйПредприниматель");
				Если ИндивидуальныйПредприниматель = СведенияОДокументе.Руководитель Тогда
					СведенияОДокументе.РуководительДолжностьНаименование = "Индивидуальный предприниматель";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСоглашенияОбИзмененииСтоимости()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаПоступления.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В(&СписокДокументов)
	|	И (КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|			ИЛИ КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|				И КорректировкаПоступления.ИсправляемыйДокументПоступления ССЫЛКА Документ.КорректировкаПоступления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	КорректировкаПоступления.Дата КАК ДатаДляПолученияСведений,
	|	КорректировкаПоступления.Дата КАК ДатаПодписанияДокумента,
	|	КорректировкаПоступления.НомерВходящегоДокумента КАК НомерДокумента,
	|	КорректировкаПоступления.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	КорректировкаПоступления.НомерИсправления КАК НомерИсправления,
	|	КорректировкаПоступления.ДатаИсправления КАК ДатаИсправления,
	|	КорректировкаПоступления.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	КорректировкаПоступления.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	КорректировкаПоступления.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	КорректировкаПоступления.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	КорректировкаПоступления.Организация КАК Организация,
	|	КорректировкаПоступления.Контрагент КАК Поставщик,
	|	КорректировкаПоступления.Организация КАК Покупатель,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаПоступления.Контрагент
	|		ИНАЧЕ КорректировкаПоступления.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступления.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаПоступления.Организация
	|		ИНАЧЕ КорректировкаПоступления.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаПоступления.ДоговорКонтрагента КАК Договор,
	|	КорректировкаПоступления.ДоговорКонтрагента.Представление КАК Основание,
	|	КорректировкаПоступления.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	КорректировкаПоступления.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	КорректировкаПоступления.ДокументПоступления КАК ДокументОснование,
	|	КорректировкаПоступления.ИсправляемыйДокументПоступления КАК ИсправляемыйДокументПоступления,
	|	КорректировкаПоступления.ВидОперации КАК ВидОперации,
	|	КорректировкаПоступления.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаПоступления.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерИсправления,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	КорректировкаПоступления.НомерСтроки КАК НомерСтроки,
	|	КорректировкаПоступления.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступления.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК НоменклатураКод,
	|	КорректировкаПоступления.Количество КАК Количество,
	|	КорректировкаПоступления.КоличествоДоИзменения КАК КоличествоДоКорректировки,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КорректировкаПоступленияНоменклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	0 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДС = 0
	|			ТОГДА КорректировкаПоступления.Цена
	|		КОГДА КорректировкаПоступления.Количество = 0
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ (КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС)/КорректировкаПоступления.Количество
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДСДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.ЦенаДоИзменения
	|		КОГДА КорректировкаПоступления.КоличествоДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ (КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения)/КорректировкаПоступления.КоличествоДоИзменения
	|	КОНЕЦ КАК ЦенаДоКорректировки,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаПоступления.СуммаДоИзменения
	|	КОНЕЦ КАК СуммаБезНДСДоКорректировки,
	|	КорректировкаПоступления.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступления.СуммаНДСДоИзменения КАК СуммаНДСДоКорректировки,
	|	КорректировкаПоступления.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаПоступления.СтавкаНДСДоИзменения КАК СтавкаНДСДоКорректировки,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Всего, 0) КАК ВсегоВРубляхДоКорректировки,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НДС, 0) КАК НДСВРубляхДоКорректировки,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК КорректировкаПоступленияНоменклатура
	|		ПО (КорректировкаПоступления.Номенклатура = КорректировкаПоступленияНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ТоварыДоИзменения))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	КорректировкаПоступления.НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	КорректировкаПоступления.Количество,
	|	КорректировкаПоступления.КоличествоДоИзменения,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	0,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДС = 0
	|			ТОГДА КорректировкаПоступления.Цена
	|		КОГДА КорректировкаПоступления.Количество = 0
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ (КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС)/КорректировкаПоступления.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДСДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.ЦенаДоИзменения
	|		КОГДА КорректировкаПоступления.КоличествоДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ (КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения)/КорректировкаПоступления.КоличествоДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаПоступления.СуммаДоИзменения
	|	КОНЕЦ,
	|	КорректировкаПоступления.СуммаНДС,
	|	КорректировкаПоступления.СуммаНДСДоИзменения,
	|	КорректировкаПоступления.СтавкаНДС,
	|	КорректировкаПоступления.СтавкаНДСДоИзменения,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.УслугиДоИзменения))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	4,
	|	КорректировкаПоступления.НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	КорректировкаПоступления.Количество,
	|	КорректировкаПоступления.КоличествоДоИзменения,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	0,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДС = 0
	|			ТОГДА КорректировкаПоступления.Цена
	|		КОГДА КорректировкаПоступления.Количество = 0
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ (КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС)/КорректировкаПоступления.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыДляПечати.СуммаВключаетНДС ИЛИ КорректировкаПоступления.СуммаНДСДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.ЦенаДоИзменения
	|		КОГДА КорректировкаПоступления.КоличествоДоИзменения = 0
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ (КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения)/КорректировкаПоступления.КоличествоДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.СуммаДоИзменения - КорректировкаПоступления.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаПоступления.СуммаДоИзменения
	|	КОНЕЦ,
	|	КорректировкаПоступления.СуммаНДС,
	|	КорректировкаПоступления.СуммаНДСДоИзменения,
	|	КорректировкаПоступления.СтавкаНДС,
	|	КорректировкаПоступления.СтавкаНДСДоИзменения,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(-РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.АгентскиеУслуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалютеДоИзменения.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийСоглашенияОбИзмененииСтоимости(Знач СписокДокументов) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеСоглашенияОбИзмененииСтоимости();
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСоглашенияОбИзмененииСтоимости();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		СведенияОДокументе.НомерДокумента	  = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерДокумента, Истина, Ложь);
		СведенияОДокументе.Валюта             = Валюта;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалюты.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалюты.Наименование;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыСоглашенияОбИзмененииСтоимости();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.ВалютаДокумента <> Валюта
			И ЗначениеЗаполнено(Выборка.ИсправляемыйДокументПоступления) Тогда
			ДатаПолученияКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ИсправляемыйДокументПоступления, "Дата");
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаДокумента, ДатаПолученияКурса);
			НуженПересчетВРубли = Истина;
		КонецЕсли;
		
		ЕстьТовары = Ложь;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					
					СтрокаТаблицыДокумента.СуммаНДС 					= Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаНДСДоКорректировки 		= Строка.НДСВРубляхДоКорректировки;
					
					СтрокаТаблицыДокумента.СуммаБезНДС 					= Строка.ВсегоВРублях - Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки 	= Строка.ВсегоВРубляхДоКорректировки - Строка.НДСВРубляхДоКорректировки;
					
				Иначе
					Кратность = ?(КурсВалюты.Кратность = 0, 1, КурсВалюты.Кратность);
					
					СтрокаТаблицыДокумента.СуммаНДС 					= Строка.СуммаНДС * КурсВалюты.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаНДСДоКорректировки 		= Строка.СуммаНДСДоКорректировки * КурсВалюты.Курс / Кратность;;
					
					СтрокаТаблицыДокумента.СуммаБезНДС 					= (Строка.СуммаБезНДС + Строка.СуммаНДС) * КурсВалюты.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
					СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки 	= 
						(Строка.СуммаБезНДСДоКорректировки + Строка.СуммаНДСДоКорректировки) * КурсВалюты.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДСДоКорректировки;
					
				КонецЕсли;
					
				СтрокаТаблицыДокумента.Цена = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
				СтрокаТаблицыДокумента.ЦенаДоКорректировки = ?(СтрокаТаблицыДокумента.КоличествоДоКорректировки = 0, СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки, 
							СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки / СтрокаТаблицыДокумента.КоличествоДоКорректировки);
				
			КонецЕсли;
			
			СтрокаТаблицыДокумента.СуммаСНДС 				= СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			СтрокаТаблицыДокумента.СуммаСНДСДоКорректировки = СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки + СтрокаТаблицыДокумента.СуммаНДСДоКорректировки;
			
			ЕстьТовары = ЕстьТовары ИЛИ Строка.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Товары;
	
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		СведенияОДокументе.ЗаголовокДокументаОснования = ОпределитьТипДокументаОснованияДляЗаголовка(ЕстьТовары, Выборка.ВидОперации, Выборка.ИсправляемыйДокументПоступления);
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Ссылка,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаПоступления.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В(&СписокДокументов)
	|	И КорректировкаПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	КорректировкаПоступления.Дата КАК ДатаДляПолученияСведений,
	|	КорректировкаПоступления.НомерВходящегоДокумента КАК НомерДокумента,
	|	КорректировкаПоступления.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	КорректировкаПоступления.НомерИсправления КАК НомерИсправления,
	|	КорректировкаПоступления.ДатаИсправления КАК ДатаИсправления,
	|	КорректировкаПоступления.Контрагент КАК Поставщик,
	|	ПРЕДСТАВЛЕНИЕ(КорректировкаПоступления.ДоговорКонтрагента) КАК ПредставлениеДоговора,
	|	КорректировкаПоступления.Организация КАК Получатель,
	|	КорректировкаПоступления.Организация КАК Организация,
	|	КорректировкаПоступления.ПодразделениеОрганизации КАК Подразделение,
	|	КорректировкаПоступления.СуммаДокумента КАК СуммаДокумента,
	|	КорректировкаПоступления.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(КорректировкаПоступления.ВалютаДокумента.Код, """") КАК ВалютаКод,
	|	ЕСТЬNULL(КорректировкаПоступления.ВалютаДокумента.Наименование, """") КАК ВалютаНаименование,
	|	ЕСТЬNULL(КорректировкаПоступления.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	"""" КАК Руководитель,
	|	"""" КАК ЗаРуководителяНаОсновании,
	|	КорректировкаПоступления.ДокументПоступления КАК ДокументОснование,
	|	КорректировкаПоступления.ИсправляемыйДокументПоступления КАК ИсправляемыйДокументПоступления
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	КорректировкаПоступления.НомерСтроки КАК НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК НоменклатураКод,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	КорректировкаПоступления.Количество,
	|	КорректировкаПоступления.Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	КорректировкаПоступления.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступления.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм,
	|	КорректировкаПоступления.Цена
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступления.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	2,
	|	КорректировкаПоступления.НомерСтроки,
	|	КорректировкаПоступления.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступления.Содержание ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Содержание
	|		КОГДА НЕ КорректировкаПоступления.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА КорректировкаПоступления.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ КорректировкаПоступления.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА КорректировкаПоступления.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(КорректировкаПоступления.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	КорректировкаПоступления.Количество,
	|	КорректировкаПоступления.Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступления.Сумма - КорректировкаПоступления.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступления.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступления.СуммаНДС,
	|	КорректировкаПоступления.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	КорректировкаПоступления.Цена
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.АгентскиеУслуги КАК КорректировкаПоступления
	|		ПО ДокументыДляПечати.Ссылка = КорректировкаПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (КорректировкаПоступления.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (КорректировкаПоступления.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса
	
КонецФункции

Функция ПолучитьТаблицуСведенийАктаОбОказанииУслуг(Знач СписокДокументов) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеАктаОбОказанииУслуг();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг();
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.ИсправляемыйДокументПоступления) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			И ТипЗнч(Выборка.ИсправляемыйДокументПоступления) <> Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			СведенияОДокументе.Валюта             = ВалютаРегУчета;
			СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
			СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		КонецЕсли;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыАктаОбОказанииУслуг();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.Валюта <> ВалютаРегламентированногоУчета
			И Выборка.РасчетыВУсловныхЕдиницах
			И ЗначениеЗаполнено(Выборка.ИсправляемыйДокументПоступления) Тогда
			ДатаПолученияКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ИсправляемыйДокументПоступления, "Дата");
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ДатаПолученияКурса);
			НуженПересчетВРубли = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС = Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС = Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(КурсВалюты.Кратность = 0, 1, КурсВалюты.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС = Строка.СуммаНДС * КурсВалюты.Курс / Кратность;
					СтрокаТаблицыДокумента.СуммаБезНДС = (Строка.СуммаБезНДС + Строка.СуммаНДС) * КурсВалюты.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
				СтрокаТаблицыДокумента.Сумма = СтрокаТаблицыДокумента.СуммаБезНДС + ?(Выборка.СуммаВключаетНДС, СтрокаТаблицыДокумента.СуммаНДС, 0);
				СтрокаТаблицыДокумента.Цена  = ?(СтрокаТаблицыДокумента.Количество=0, СтрокаТаблицыДокумента.Сумма, СтрокаТаблицыДокумента.Сумма / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, Новый Структура("ЗаполнятьРуководителя"));
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ОпределитьТипДокументаОснованияДляЗаголовка(ЕстьТовары, ВидОперации, ИсправляемыйДокументПоступления)
	
	СоглашениеКСоглашению = Ложь;
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) И ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СоглашениеКСоглашению = Истина;	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			СоглашениеКСоглашению = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументПоступления, 
										"ИсправляемыйДокументПоступления")) = Тип("ДокументСсылка.КорректировкаПоступления");
		КонецЕсли;
	КонецЕсли;
	
	Если СоглашениеКСоглашению Тогда
		ЗаголовокДокументаОснования = НСтр("ru='к соглашению'"); 
	ИначеЕсли ЕстьТовары Тогда
		ЗаголовокДокументаОснования = НСтр("ru='к накладной'");
	Иначе
		ЗаголовокДокументаОснования = НСтр("ru='к накладной'");
	КонецЕсли;	
	
	Возврат ЗаголовокДокументаОснования;
	
КонецФункции

Процедура ЗаполнитьПоВозвратуПоставщику(Объект) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	Объект.АгентскиеУслуги.Очистить();
	
	МетаданныеДокумента = Объект.ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Сделка КАК Сделка,
	|	ВозвратТоваровПоставщику.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ВТ_Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	СУММА(ВозвратТоваровПоставщикуТовары.Количество) КАК Количество,
	|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма) КАК Сумма,
	|	СУММА(ВозвратТоваровПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТД,
	|	Реквизиты.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_ВозвратТоваровПоставщикуТовары
	|ИЗ
	|	ВТ_Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО Реквизиты.Сделка = ВозвратТоваровПоставщикуТовары.Ссылка.Сделка
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка.МоментВремени <= Реквизиты.МоментВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Цена,
	|	ВозвратТоваровПоставщикуТовары.НомерГТД,
	|	Реквизиты.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Количество - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Количество, 0) КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Цена КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.Сумма - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Сумма, 0) КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.СуммаНДС, 0) КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС - ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.СуммаНДС, 0) КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТДДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРозницеДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ИСТИНА КАК ЕстьВДокументеПоступления,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения,
	|	NULL КАК СчетЗатрат,
	|	NULL КАК Субконто1,
	|	NULL КАК Субконто2,
	|	NULL КАК Субконто3,
	|	NULL КАК СчетЗатратНУ,
	|	NULL КАК СубконтоНУ1,
	|	NULL КАК СубконтоНУ2,
	|	NULL КАК СубконтоНУ3,
	|	NULL КАК ПодразделениеЗатрат,
	|	ПоступлениеТоваровУслугТовары.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов КАК СчетРасчетов
	|ИЗ
	|	ВТ_Реквизиты КАК ВТ_Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ВТ_Реквизиты.Сделка = ПоступлениеТоваровУслугТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВозвратТоваровПоставщикуТовары КАК ВозвратТоваровПоставщикуТовары
	|		ПО (ВозвратТоваровПоставщикуТовары.Сделка = ПоступлениеТоваровУслугТовары.Ссылка)
	|			И (ВозвратТоваровПоставщикуТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура)
	|			И (ВозвратТоваровПоставщикуТовары.Цена = ПоступлениеТоваровУслугТовары.Цена)
	|			И (ВозвратТоваровПоставщикуТовары.НомерГТД = ПоступлениеТоваровУслугТовары.НомерГТД)
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
	РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументПоступления, "Организация, Дата, НДСВключенВСтоимость");
	РаздельныйУчетНДСНаСчете19ДокументаПоступления = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(РеквизитыДокументаПоступления.Организация, РеквизитыДокументаПоступления.Дата);
	
	СпособУчетаНДСПоПоступлению = Ложь;
	Если РаздельныйУчетНДСНаСчете19 И НЕ РаздельныйУчетНДСНаСчете19ДокументаПоступления Тогда
		СпособУчетаНДСПоПоступлению = Истина;
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		СтрокаТоваров = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
		Если СпособУчетаНДСПоПоступлению Тогда 
			СтрокаТоваров.СпособУчетаНДС = ?(РеквизитыДокументаПоступления.НДСВключенВСтоимость, 
				Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецЕсли
