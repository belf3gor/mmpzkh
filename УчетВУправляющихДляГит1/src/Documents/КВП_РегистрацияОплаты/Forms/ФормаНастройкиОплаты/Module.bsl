
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииУправленияВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.ВариантРаспределения = "" Тогда
		
		Элементы.ВариантОплаты.Видимость = Ложь;
		Элементы.ПанельНастройки.ТекущаяСтраница = Элементы.Автоматически;
		
	Иначе
		
		Элементы.ВариантОплаты.Видимость = Истина;
		
		Если Форма.ВариантРаспределения = "ПоУслугам" Тогда
			Элементы.ПанельНастройки.ТекущаяСтраница = Элементы.Услуги;
		ИначеЕсли Форма.ВариантРаспределения = "ПоМесяцам" Тогда
			Элементы.ПанельНастройки.ТекущаяСтраница = Элементы.Месяцы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура заполняет таблицу услуг действующими услугами по объекту на дату документа.
//
Процедура ТаблицаУслугЗаполнить()
	
	ТаблицаУслуг.Очистить();
	
	СписокУслуг         = Новый Массив;
	СписокУслугВТаблицу = Новый Массив;
	
	// Если производится возврат оплаты, то таблица услуг будет заполнена последними оплаченными услугами.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		
		ДеревоСведенийПоОплате = ДеревоЗадолженностиПолучить();
		Для Каждого СтрокаОбъекта ИЗ ДеревоСведенийПоОплате.Строки Цикл
			Для Каждого СтрокаМесяца ИЗ СтрокаОбъекта.Строки Цикл
				Для Каждого СтрокаОплаты ИЗ СтрокаМесяца.Строки Цикл
					СписокУслуг.Добавить(СтрокаОплаты.Услуга);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокУслугВТаблицу, СписокУслуг);
		
	КонецЕсли;
	
	Если СписокУслугВТаблицу.Количество() = 0 Тогда
		// получим список услуг, действоваших на начало периода и назначенных в периоде
		СписокНазначенныхУслуг = КВП_ПолучитьТаблицуДействующихУслугВПериоде(Дата, Объект, ,
		                         Новый Структура("Организация", Организация)).ВыгрузитьКолонку("Услуга");
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокУслугВТаблицу, СписокНазначенныхУслуг);
		
		// получим список зависимых услуг
		СписокЗданий = Новый СписокЗначений;
		СписокЗданий.Добавить(Объект.Адрес.Владелец);
		
		СписокЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата), СписокНазначенныхУслуг, , СписокЗданий).ВыгрузитьКолонку("Услуга");
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокУслугВТаблицу, СписокЗависимыхУслуг);
		
		// получим список услуг, по которым есть долги
		ДеревоДолговНачислений = ДеревоЗадолженностиПолучить(Истина);
		Для Каждого СтрокаОбъекта ИЗ ДеревоДолговНачислений.Строки Цикл
			Для Каждого СтрокаМесяца ИЗ СтрокаОбъекта.Строки Цикл
				Для Каждого СтрокаЗадолженности ИЗ СтрокаМесяца.Строки Цикл
					СписокУслуг.Добавить(СтрокаЗадолженности.Услуга);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокУслугВТаблицу, СписокУслуг);
		
	КонецЕсли;
	
	Для Каждого Услуга Из СписокУслугВТаблицу Цикл
		
		УслугаКапРемонта = (НЕ мСтруктураНастроекКапРемонта.СписокУслуг.НайтиПоЗначению(Услуга) = Неопределено);
		Если ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт") Тогда
			
			Если УслугаКапРемонта Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт") Тогда
			
			Если НЕ УслугаКапРемонта Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.Услуга       = Услуга;
		НоваяСтрока.Использовать = Истина;
		
	КонецЦикла;
		
	ТаблицаУслуг.Сортировать("Услуга ВОЗР");
	
КонецПроцедуры // ЗаполнитьТаблицуНазначенныхУслуг()

&НаСервере
// Процедура заполняет дерево задолженности долгами по начислениям и пени в разрезе месяцев.
//
Функция ДеревоЗадолженностиПолучить(ФормироватьПоДолгам = Ложь)
	
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	СтруктураНастроекКапРемонта.Вставить("ВариантРаспределенияОплатКапРемонт", ВариантРаспределенияОплатКапРемонт);
	
	Возврат Документы.КВП_РегистрацияОплаты.ПолучитьДеревоЗадолженностиПоОбъекту(Дата, Организация, ВидОперации, Объект, СтруктураНастроекКапРемонта, ФормироватьПоДолгам);
	
КонецФункции // ДеревоЗадолженностиЗаполнить()

&НаКлиенте
// Пересчитывает итоговые суммы в колонках "Сумма" и "Пени" Дерева платежей.
//
// нет параметров.
//
Процедура ПересчитатьИтогСуммы()
	
	врДолгСуммаИтог  = 0;
	врДолгПениИтог   = 0;
	
	Для Каждого ТекВетка Из ДеревоЗадолженности.ПолучитьЭлементы() Цикл
		ДолгСуммаИтог = ДолгСуммаИтог + ТекВетка.ДолгСумма;
		ДолгПениИтог  = ДолгПениИтог + ТекВетка.ДолгПени;
	КонецЦикла;
	
	ДолгСуммаИтог = Формат(врДолгСуммаИтог, "ЧДЦ=2");
	ДолгПениИтог  = Формат(врДолгПениИтог,  "ЧДЦ=2");
	
КонецПроцедуры // ПересчитатьИтогСуммы()

&НаСервере
// Заполняет таблицу услуг/дерево задолженности ранее сохраненными настройками.
//
Процедура ВосстановитьНастройкиОплаты()
	
	Если ВариантРаспределения = "ПоУслугам" Тогда
		
		Для Каждого ТекНастройка Из НастройкиОплаты Цикл
			
			Если НЕ ТипЗнч(ТекНастройка.Параметр) = Тип("СправочникСсылка.КВП_Услуги") Тогда
				Продолжить;
			КонецЕсли;
				
			НоваяСтрока = ТаблицаУслуг.Добавить();
			НоваяСтрока.Услуга       = ТекНастройка.Параметр;
			НоваяСтрока.Использовать = ТекНастройка.Использовать;
			
		КонецЦикла;
		
	ИначеЕсли ВариантРаспределения = "ПоМесяцам" Тогда
		
		ДеревоДолговНачислений = ДеревоЗадолженностиПолучить();
		ДеревоДолговНачислений.Колонки.Добавить("УчитыватьМесяц");
		
		Для Каждого СтрокаИтогов Из ДеревоДолговНачислений.Строки Цикл
			
			ЕстьНастройки = (НастройкиОплаты.Количество() > 0);
			
			// дополним дерево ранее сохраненными настройками
			Для Каждого ТекНастройка Из НастройкиОплаты Цикл
				
				Если НЕ ТипЗнч(ТекНастройка.Параметр) = Тип("Дата") Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = СтрокаИтогов.Строки.Найти(НачалоДня(КонецМесяца(ТекНастройка.Параметр)), "МесяцНачисления");
				Если НайденнаяСтрока = Неопределено Тогда
					СтрокаМесяца = СтрокаИтогов.Строки.Добавить();
					СтрокаМесяца.МесяцНачисления = НачалоДня(КонецМесяца(ТекНастройка.Параметр));
					СтрокаМесяца.УчитыватьМесяц = ТекНастройка.Использовать;
				Иначе
					НайденнаяСтрока.УчитыватьМесяц = ТекНастройка.Использовать;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаИтогов.Строки.Сортировать("МесяцНачисления Возр", Истина);
			
			Для Каждого СтрокаМесяца Из СтрокаИтогов.Строки Цикл
				
				СтрокаЗадолженности = ДеревоЗадолженности.ПолучитьЭлементы().Добавить();
				
				Если ЕстьНастройки Тогда
					СтрокаЗадолженности.УчитыватьМесяц = СтрокаМесяца.УчитыватьМесяц;
				Иначе
					СтрокаЗадолженности.УчитыватьМесяц = Истина;
				КонецЕсли;
				
				СтрокаЗадолженности.Месяц          = СтрокаМесяца.МесяцНачисления;
				СтрокаЗадолженности.ДолгСумма      = СтрокаМесяца.СуммаДолгаНачисления;
				СтрокаЗадолженности.ДолгПени       = СтрокаМесяца.СуммаДолгаПени;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиОплаты()

&НаСервере
// Процедура выводит основную информацию:
//  - по лицевому счету: наименование, адрес, ФИО владельца;
//  - настройки учетной политики.
//
Процедура ЗаполнитьИнформационныеПоля(ВариантРаспределенияОплат, НастройкаРасчетаПени)
	
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Объект.Адрес.Владелец);
	АдресЛицевогоСчета = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	ВладелецЛицевогоСчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект,
	                                                Дата);
	
	Если ЗначениеЗаполнено(ВариантРаспределенияОплат) Тогда
		НадписьСпособРаспределения = "Вариант распределения: " + ВариантРаспределенияОплат + ".";
	Иначе
		НадписьСпособРаспределения = "Вариант распределения: <не указано>" + ".";
	КонецЕсли;
	
	Если НЕ НастройкаРасчетаПени = Справочники.УПЖКХ_НастройкиРасчетаПени.ПустаяСсылка()
		И ЗначениеЗаполнено(НастройкаРасчетаПени.ВариантОплатыПени) Тогда
		НадписьСпособПогашенияПени = "Вариант оплаты пени: " + НастройкаРасчетаПени.ВариантОплатыПени + ".";
	Иначе
		НадписьСпособПогашенияПени = "Вариант оплаты пени: <не указано>" + ".";
	КонецЕсли;
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		Элементы.НадписьВариантРаспределенияОплатКапРемонтСтрахование.Видимость = Истина;
		
		Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги Тогда
			
			Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
				Если НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
					НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги, кроме добровольного страхования.";
				Иначе
					НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги, в том числе на добровольное страхование.";
				КонецЕсли;
				
			Иначе
				НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги.";
			КонецЕсли;
			
			
		ИначеЕсли ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
			
			НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится только на услуги капитального ремонта.";
			
		ИначеЕсли ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт Тогда
			
			Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
				Если НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
					НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на услуги, кроме кап. ремонта и добровольного страхования.";
				Иначе
					НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на услуги, в том числе на добровольное страхование, но кроме кап. ремонта.";
				КонецЕсли;
			Иначе
				НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги, кроме кап. ремонта.";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		Элементы.НадписьВариантРаспределенияОплатКапРемонтСтрахование.Видимость = Истина;
		
		Если НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
			НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги, кроме добровольного страхования.";
		Иначе
			НадписьВариантРаспределенияОплатКапРемонтСтрахование = "Распределение оплаты производится на все услуги, в том числе на добровольное страхование.";
		КонецЕсли;
		
	Иначе
		
		Элементы.НадписьВариантРаспределенияОплатКапРемонтСтрахование.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИнформационныеПоля()

&НаСервере
// Процедура выводит дерево задолженности.
//
Процедура ДеревоЗадолженностиВывести(ДеревоДолговНачислений)
	
	ДеревоЗадолженности.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаИтогов Из ДеревоДолговНачислений.Строки Цикл
		
		Для Каждого СтрокаМесяца Из СтрокаИтогов.Строки Цикл
			
			СтрокаЗадолженности = ДеревоЗадолженности.ПолучитьЭлементы().Добавить();
			СтрокаЗадолженности.УчитыватьМесяц = Истина;
			СтрокаЗадолженности.Месяц          = СтрокаМесяца.МесяцНачисления;
			СтрокаЗадолженности.ДолгСумма      = СтрокаМесяца.СуммаДолгаНачисления;
			СтрокаЗадолженности.ДолгПени       = СтрокаМесяца.СуммаДолгаПени;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиДеревоЗадолженности()

&НаСервере
// Заполняет дерево на сервере.
Процедура ЗаполнитьДеревоЗадолженностиНаСервере()
	
	ДеревоДолговНачислений = ДеревоЗадолженностиПолучить();
	ДеревоЗадолженностиВывести(ДеревоДолговНачислений);
	
КонецПроцедуры

&НаСервере
// Помещает настройки в хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	МассивНастроекОплаты = Новый Массив;
	
	Если ВариантРаспределения = "ПоУслугам" Тогда
		
		Если ТаблицаУслуг.Количество() > 0
		   И ТаблицаУслуг.НайтиСтроки(Новый Структура("Использовать", Истина)).Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбраны услуги!");
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ТаблицаУслуг Цикл
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",       Объект);
			СтруктураСтроки.Вставить("Параметр",     ТекСтрока.Услуга);
			СтруктураСтроки.Вставить("Использовать", ТекСтрока.Использовать);
			МассивНастроекОплаты.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
	ИначеЕсли ВариантРаспределения = "ПоМесяцам" Тогда
		
		Если ДеревоЗадолженности.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ЕстьУстановленныеМесяцы = Ложь;
			Для Каждого ТекСтрока Из ДеревоЗадолженности.ПолучитьЭлементы() Цикл
				Если ТекСтрока.УчитыватьМесяц Тогда
					ЕстьУстановленныеМесяцы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьУстановленныеМесяцы Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбраны месяцы погашения задолженности!");
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаЗадолженности Из ДеревоЗадолженности.ПолучитьЭлементы() Цикл
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",       Объект);
			СтруктураСтроки.Вставить("Параметр",     СтрокаЗадолженности.Месяц);
			СтруктураСтроки.Вставить("Использовать", СтрокаЗадолженности.УчитыватьМесяц);
			МассивНастроекОплаты.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("МассивНастроекОплаты", МассивНастроекОплаты);
	
	СтруктураНастроек.Вставить("ВариантРаспределения",           ВариантРаспределения);
	СтруктураНастроек.Вставить("ВариантОплаты",                  ?(ВариантРаспределения = "", "", ВариантОплаты));
	СтруктураНастроек.Вставить("РаспределятьПоУказаннымУслугам", ?(ВариантРаспределения = "ПоУслугам" И РаспределятьПоУказаннымУслугам = 1,
																   Истина,
																   Ложь));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресХранилищаНастроек") Тогда
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаНастроек);
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Дата                           = СтруктураНастроек.Дата;
	Организация                    = СтруктураНастроек.Организация;
	ВидОперации                    = СтруктураНастроек.ВидОперации;
	Объект                         = СтруктураНастроек.Объект;
	ВариантРаспределения           = СтруктураНастроек.ВариантРаспределения;
	ВариантОплаты                  = СтруктураНастроек.ВариантОплаты;
	РаспределятьПоУказаннымУслугам = ?(СтруктураНастроек.РаспределятьПоУказаннымУслугам, 1, 0);
	
	// Получим настройки распределения оплат по услугам кап. ремонта.
	ВариантРаспределенияОплатКапРемонт = СтруктураНастроек.ВариантРаспределенияОплатКапРемонт;
	мСтруктураНастроекКапРемонта       = СтруктураНастроек.СтруктураНастроекКапРемонта;
	
	ВестиУчетНачисленийПоДобровольномуСтрахованию = СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	НеРаспределятьОплатуНаДобровольноеСтрахование = СтруктураНастроек.НеРаспределятьОплатуНаДобровольноеСтрахование;
	
	Для Каждого СтрокаНастройки Из СтруктураНастроек.МассивНастроекОплаты Цикл
		
		ТекСтрока = НастройкиОплаты.Добавить();
		ТекСтрока.Объект       = СтрокаНастройки.Объект;
		ТекСтрока.Параметр     = СтрокаНастройки.Параметр;
		ТекСтрока.Использовать = СтрокаНастройки.Использовать;
		
	КонецЦикла;
	
	Если НЕ ВариантРаспределения = "" Тогда
		ВосстановитьНастройкиОплаты();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		Элементы.ДеревоЗадолженностиДолгСумма.Заголовок = "Оплата (начисления)";
		Элементы.ДеревоЗадолженностиДолгПени.Заголовок = "Оплата (пени)";
	Иначе
		Элементы.ДеревоЗадолженностиДолгСумма.Заголовок = "Долг (начисления)";
		Элементы.ДеревоЗадолженностиДолгПени.Заголовок = "Долг (пени)";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьИнформационныеПоля(СтруктураНастроек.ВариантРаспределенияОплат, СтруктураНастроек.НастройкаРасчетаПени);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьИтогСуммы();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВариантРаспределения".
Процедура ВариантРаспределенияПриИзменении(Элемент)
	
	Если ВариантРаспределения = "ПоУслугам" Тогда
		
		Если НЕ ТаблицаУслуг.Количество() = 0 Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОкончанияУстановкиВариантаРаспределенияПоУслугам", ЭтаФорма),
						   "Для лицевого счета ранее производилась настройка оплаты по услугам.
						   |Перезаполнить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуУслугПриУстановкеВариантаПоУслугам();
		
	ИначеЕсли ВариантРаспределения = "ПоМесяцам" Тогда
		
		Если Не ДеревоЗадолженности.ПолучитьЭлементы().Количество() = 0 Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОкончанияУстановкиВариантаРаспределенияПоМесяцам", ЭтаФорма),
						   "Для лицевого счета ранее производилась настройка оплаты по месяца.
						   |Перезаполнить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуУслугПриУстановкеВариантаПоМесяцам();
		
	Иначе
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения изменения варианта распределения на вариант "По услугам".
//
Процедура ОбработчикОкончанияУстановкиВариантаРаспределенияПоУслугам(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуУслугПриУстановкеВариантаПоУслугам();
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура производит заполнение таблицы услуг после установки варианта распределения "По услугам".
Процедура ЗаполнитьТаблицуУслугПриУстановкеВариантаПоУслугам()
	
	ТаблицаУслугЗаполнить();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения изменения варианта распределения на вариант "По месяцам".
//
Процедура ОбработчикОкончанияУстановкиВариантаРаспределенияПоМесяцам(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуУслугПриУстановкеВариантаПоМесяцам();
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура производит заполнение таблицы услуг после установки варианта распределения "По месяцам".
Процедура ЗаполнитьТаблицуУслугПриУстановкеВариантаПоМесяцам()
	
	ЗаполнитьДеревоЗадолженностиНаСервере();
	ПересчитатьИтогСуммы();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ТаблицаУслугУслуга".
Процедура ТаблицаУслугУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановитьФлажки".
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажки".
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаТаблицаУслугЗаполнить".
Процедура КомандаТаблицаУслугЗаполнить(Команда)
	
	ТаблицаУслугЗаполнить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоЗадолженностиУстановитьФлажки".
Процедура ДеревоЗадолженностиУстановитьФлажки(Команда)
	
	Для Каждого СтрокаЗадолженности Из ДеревоЗадолженности.ПолучитьЭлементы() Цикл
		
		СтрокаЗадолженности.УчитыватьМесяц = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоЗадолженностиСнятьФлажки".
Процедура ДеревоЗадолженностиСнятьФлажки(Команда)
	
	Для Каждого СтрокаЗадолженности Из ДеревоЗадолженности.ПолучитьЭлементы() Цикл
		
		СтрокаЗадолженности.УчитыватьМесяц = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоЗадолженностиСнятьФлажки".
Процедура ДеревоЗадолженностиЗаполнить(Команда)
	
	ЗаполнитьДеревоЗадолженностиНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоЗадолженностиСнятьФлажки".
Процедура КомандаОК(Команда)
	
	АдресХранилищаНастроек = ПоместитьНастройкиВХранилище();
	
	Если Не АдресХранилищаНастроек = Неопределено Тогда
		Закрыть(АдресХранилищаНастроек);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти