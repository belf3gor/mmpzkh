
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Заполняет дерево значений данными из табличной части РасшифровкаПлатежа.
//
Процедура ЗаполнитьДеревоПлатежей()
	
	ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
	ТаблицаПлатежей.Сортировать("МесяцНачисления, Услуга");
	
	СтрокиПредоплатыРассрочки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("МесяцНачисления", "Остаток по рассрочке"));
	Если Не СтрокиПредоплатыРассрочки.Количество() = 0
	 И Не СтрокиПредоплатыРассрочки.Количество() = ТаблицаПлатежей.Количество() Тогда	 
		ВсегоСтрок = ТаблицаПлатежей.Количество();
		
		Для Каждого СтрокаПредоплатыРассрочки Из СтрокиПредоплатыРассрочки Цикл
			ИндексСтроки = ТаблицаПлатежей.Индекс(СтрокаПредоплатыРассрочки);
			
			ТаблицаПлатежей.Сдвинуть(СтрокаПредоплатыРассрочки, ВсегоСтрок - ИндексСтроки - 1);
		КонецЦикла;
	КонецЕсли;
	
	ДеревоРасшифровкиПлатежа.ПолучитьЭлементы().Очистить();
	
	ПервыйОбходРезультата = Истина;
	
	Для Каждого ТекЗначение Из ТаблицаПлатежей Цикл
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийМесяц = ТекЗначение.МесяцНачисления;
			
			ВеткаМесяц                 = ДеревоРасшифровкиПлатежа.ПолучитьЭлементы().Добавить();
			ВеткаМесяц.МесяцУслуга     = ТекЗначение.МесяцНачисления;
			ВеткаМесяц.ЭтоСтрокаМесяца = Истина;
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
			ПервыйОбходРезультата = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ТекЗначение.МесяцНачисления = ТекущийМесяц Тогда
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
		Иначе
			
			ВеткаМесяц                 = ДеревоРасшифровкиПлатежа.ПолучитьЭлементы().Добавить();
			ВеткаМесяц.МесяцУслуга     = ТекЗначение.МесяцНачисления;
			ВеткаМесяц.ЭтоСтрокаМесяца = Истина;
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
		КонецЕсли;
		
		ТекущийМесяц = ТекЗначение.МесяцНачисления;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьДеревоПлатежей()

&НаСервере
// Процедура выводит основную информацию по лицевому счету: наименование, адрес, ФИО владельца.
//
Процедура ВывестиИнформациюПоЛС()
	
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(ЛицевойСчет.Адрес.Владелец);
	НадписьЛицевойСчет = "" + ЛицевойСчет.Наименование + " (" + ПолучитьАдресПомещения(АдресДома, ЛицевойСчет.Адрес) + ")";
	ВладелецЛицевогоСчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет);
	
КонецПроцедуры // ВывестиИнформациюПоЛС()

&НаКлиенте
// Процедура выводит надписи с суммами оплаты и корректировки.
//
Процедура ВывестиНадписи()
	
	СтрокиДерева = ДеревоРасшифровкиПлатежа.ПолучитьЭлементы();
	
	СуммаКорректировки = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Сумма")
					   + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Пени")
					   + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Рассрочка");
	
	НадписьСуммаОплаты = "Сумма оплаты: " + Формат(СуммаОплаты, "ЧДЦ=2; ЧН=");
	НадписьСуммаКорректировки = "Сумма корректировки: " + Формат(СуммаКорректировки, "ЧДЦ=2; ЧН=");
	
	Если СуммаОплаты = СуммаКорректировки Тогда
		Картинка = БиблиотекаКартинок.ЗеленыйШар;
		НадписьРазницаСумм = "";
	Иначе
		Картинка = БиблиотекаКартинок.Внимание16;
		НадписьРазницаСумм = "Разница: " + Формат(СуммаОплаты - СуммаКорректировки, "ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры // ВывестиНадписи()

&НаСервере
// Помещает настройки в хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	МассивРасшифровкиПлатежа = Новый Массив;
	
	СтруктураНастроек = Новый Структура;
	
	Для Каждого ВеткаМесяц Из ДеревоРасшифровкиПлатежа.ПолучитьЭлементы() Цикл
		Для Каждого ВеткаУслуги Из ВеткаМесяц.ПолучитьЭлементы() Цикл
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",          ЛицевойСчет);
			СтруктураСтроки.Вставить("МесяцНачисления", ВеткаМесяц.МесяцУслуга);
			СтруктураСтроки.Вставить("Услуга",          ВеткаУслуги.МесяцУслуга);
			СтруктураСтроки.Вставить("Сумма",           ВеткаУслуги.Сумма);
			СтруктураСтроки.Вставить("Пени",            ВеткаУслуги.Пени);
			СтруктураСтроки.Вставить("Рассрочка",       ВеткаУслуги.Рассрочка);
			СтруктураСтроки.Вставить("ДолгСумма",       ВеткаУслуги.ДолгСумма);
			СтруктураСтроки.Вставить("ДолгПени",        ВеткаУслуги.ДолгПени);
			СтруктураСтроки.Вставить("АвансСумма",      ВеткаУслуги.АвансСумма);
			СтруктураСтроки.Вставить("АвансПени",       ВеткаУслуги.АвансПени);
			СтруктураСтроки.Вставить("ДолгРассрочка",   ВеткаУслуги.ДолгРассрочка);
			МассивРасшифровкиПлатежа.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураНастроек.Вставить("РасшифровкаПлатежа", МассивРасшифровкиПлатежа);
	
	МассивДобровольногоСтрахования = Новый Массив;
	Для Каждого СтрокаДобровольногоСтрахования Из СведенияОДобровольномСтраховании Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ЛицевойСчет",     СтрокаДобровольногоСтрахования.ЛицевойСчет);
		СтруктураСтроки.Вставить("Услуга",          СтрокаДобровольногоСтрахования.Услуга);
		СтруктураСтроки.Вставить("МесяцНачисления", СтрокаДобровольногоСтрахования.МесяцНачисления);
		СтруктураСтроки.Вставить("Договор",         СтрокаДобровольногоСтрахования.Договор);
		СтруктураСтроки.Вставить("Тариф",           СтрокаДобровольногоСтрахования.Тариф);
		СтруктураСтроки.Вставить("Количество",      СтрокаДобровольногоСтрахования.Количество);
		СтруктураСтроки.Вставить("СуммаНачисления", СтрокаДобровольногоСтрахования.СуммаНачисления);
		МассивДобровольногоСтрахования.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураНастроек.Вставить("МассивДобровольногоСтрахования", МассивДобровольногоСтрахования);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Записывает в таблицу "СведенияОДобровольномСтраховании" сведения об оплаченных начислениях по добровольному страхованию.
Процедура ЗаполнитьСведенияОСтрахованииНаСервере()
	
	ТаблицаНачисленияПоСтрахованию = КВП_ПолучитьНачисленияПоДобровольномуСтрахованию(ТекущийДокумент, МесяцДобровольногоСтрахования, Организация, ЛицевойСчет, УслугаДобровольногоСтрахования);
	
	Для Каждого СтрокаНачисленияПоСтрахованию Из ТаблицаНачисленияПоСтрахованию Цикл
		ЗаполнитьЗначенияСвойств(СведенияОДобровольномСтраховании.Добавить(), СтрокаНачисленияПоСтрахованию);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Проверяет корректность редактирования суммы оплаты добровольного страхования.
Процедура ОбработатьИзменениеСуммыДобровольногоСтрахования(ТекущиеДанные)
	
	// Если ранее сумма оплаты была отлична от нуля, то сведения об оплате добровольного страхования надо удалить из
	// таблицы "СведенияОДобровольномСтраховании".
	Если ТекущиеДанные.Сумма = 0 Тогда
		СтрокиСтрахования = СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, ТекущиеДанные.МесяцУслуга));
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
				СведенияОДобровольномСтраховании.Удалить(СтрокаСтрахования);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		// Если сумма оплаты отлична от нуля, то она должна быть равна сумме начисления (т.к. добровольное страхование нельзя оплачивать частично).
		// При этом надо убедиться, что сведения об оплате добровольного страхования зафиксированы в таблице "СведенияОДобровольномСтраховании".
		Если ТекущиеДанные.Сумма = ТекущиеДанные.ДолгСумма Тогда
			СтрокиСтрахования = СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, ТекущиеДанные.МесяцУслуга));
			Если СтрокиСтрахования.Количество() = 0 Тогда
				ЗаполнитьСведенияОСтрахованииНаСервере();
			КонецЕсли;
		Иначе
			ТекущиеДанные.Сумма = ТекущиеДанные.ДолгСумма;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начисления по добровольному страхованию нельзя оплачивать частично. Сумма оплаты должна быть равна сумме начисления.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресХранилищаНастроек") Тогда
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаНастроек);
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Организация     = СтруктураНастроек.Организация;
	ЛицевойСчет     = СтруктураНастроек.ЛицевойСчет;
	СуммаОплаты     = СтруктураНастроек.СуммаОплаты;
	ТекущийДокумент = СтруктураНастроек.ТекущийДокумент;
	
	ВестиУчетНачисленийПоДобровольномуСтрахованию = СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = СтруктураНастроек.УслугаДобровольногоСтрахования;
	МесяцДобровольногоСтрахования                 = СтруктураНастроек.МесяцДобровольногоСтрахования;
	МассивДобровольногоСтрахования                = СтруктураНастроек.МассивДобровольногоСтрахования;
	
	Для Каждого СтрокаНастройки Из СтруктураНастроек.РасшифровкаПлатежа Цикл
		
		ТекСтрока = РасшифровкаПлатежа.Добавить();
		ТекСтрока.Объект          = СтрокаНастройки.Объект;
		ТекСтрока.Услуга          = СтрокаНастройки.Услуга;
		ТекСтрока.Сумма           = СтрокаНастройки.Сумма;
		ТекСтрока.Пени            = СтрокаНастройки.Пени;
		ТекСтрока.Рассрочка       = СтрокаНастройки.Рассрочка;
		ТекСтрока.МесяцНачисления = СтрокаНастройки.МесяцНачисления;
		ТекСтрока.ДолгСумма       = СтрокаНастройки.ДолгСумма;
		ТекСтрока.АвансСумма      = СтрокаНастройки.АвансСумма;
		ТекСтрока.ДолгПени        = СтрокаНастройки.ДолгПени;
		ТекСтрока.АвансПени       = СтрокаНастройки.АвансПени;
		ТекСтрока.ДолгРассрочка   = СтрокаНастройки.ДолгРассрочка;
		
	КонецЦикла;
	
	Для Каждого СтрокаСтрахования Из МассивДобровольногоСтрахования Цикл
		ЗаполнитьЗначенияСвойств(СведенияОДобровольномСтраховании.Добавить(), СтрокаСтрахования);
	КонецЦикла;
	
	// Установим видимость колонок рассрочки.
	Если РасшифровкаПлатежа.Итог("ДолгРассрочка") = 0 Тогда
		Элементы.ДеревоПлатежейНачисленияРассрочка.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейНачисленияРассрочка.Видимость = Истина;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Итог("АвансСумма") = 0 Тогда
		Элементы.ДеревоПлатежейАвансСумма.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейАвансСумма.Видимость = Истина;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Итог("АвансПени") = 0 Тогда
		Элементы.ДеревоПлатежейАвансПени.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейАвансПени.Видимость = Истина;
	КонецЕсли;
	
	ЗаполнитьДеревоПлатежей();
	
	ВывестиИнформациюПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоРасшифровкиПлатежа, ЭтаФорма);
	
	ВывестиНадписи();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура обрабатывает событие "ПередНачаломДобавления" таблицы "ДеревоПлатежей".
Процедура ДеревоПлатежейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает событие "ПередУдалением" таблицы "ДеревоПлатежей".
Процедура ДеревоПлатежейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает событие "ПриОкончанииРедактирования" таблицы "ДеревоПлатежей".
Процедура ДеревоПлатежейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Надо проверить: были ли отредактированы начисления по добровольному страхованию.
	// Если были отредактированы, надо внести соответствующие корректировки в таблицу "СведенияОДобровольномСтраховании".
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ТекущиеДанные = Элементы.ДеревоРасшифровкиПлатежа.ТекущиеДанные;
		Если ТекущиеДанные.МесяцУслуга = УслугаДобровольногоСтрахования Тогда
			ОбработатьИзменениеСуммыДобровольногоСтрахования(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоРасшифровкиПлатежа, ЭтаФорма);
	
	мДеревоИзменено = Истина;
	
	ВывестиНадписи();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// обработчик команды "Свернуть".
Процедура Свернуть(Команда)
	
	Для Каждого ТекВетка Из ДеревоРасшифровкиПлатежа.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРасшифровкиПлатежа.Свернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// обработчик команды "Развернуть".
Процедура Развернуть(Команда)
	
	Для Каждого ТекВетка Из ДеревоРасшифровкиПлатежа.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРасшифровкиПлатежа.Развернуть(ТекВетка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// обработчик команды "КомандаОК".
Процедура КомандаОК(Команда)
	
	Если мДеревоИзменено Тогда
		
		СтрокиДерева = ДеревоРасшифровкиПлатежа.ПолучитьЭлементы();
		
		СуммаКорректировки = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Сумма")
						   + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Пени")
						   + УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Рассрочка");
		Если НЕ СуммаОплаты = СуммаКорректировки Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сумма оплаты не совпадает с суммой корректировки!");
			Возврат;
		КонецЕсли;
		
		АдресХранилищаНастроек = ПоместитьНастройкиВХранилище();
		
		Если Не АдресХранилищаНастроек = Неопределено Тогда
			Закрыть(АдресХранилищаНастроек);
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти