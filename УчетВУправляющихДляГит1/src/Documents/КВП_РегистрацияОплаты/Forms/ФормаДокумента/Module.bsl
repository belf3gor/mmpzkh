&НаКлиенте
// Хранит данные активной строки табличной части "Лицевые счета".
Перем ПредыдущаяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииУправленияВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью и доступностью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДополнительныеРеквизиты.Видимость = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет") Тогда
		Элементы.ДополнительныеРеквизиты.ТекущаяСтраница = Элементы.БанковскийСчет;
		
		// Скрываем ненужные элементы для экономии места на форме.
		Элементы.АСПриемаОплаты.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты") Тогда
		Элементы.ДополнительныеРеквизиты.ТекущаяСтраница = Элементы.АСПриемаОплаты;
		
		// Скрываем ненужные элементы для экономии места на форме.
		Элементы.АСПриемаОплаты.Видимость = Истина;
		Элементы.БанковскийСчет.Видимость = Ложь;
		
	Иначе
		Элементы.ДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПанельРасшифровки.Видимость = Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка;
	
	ОперацииПоКассе = ОперацииПоКассе(Объект.ВидОперации);
	ОперацииПоБанку = ОперацииПоБанку(Объект.ВидОперации);
	
	Если ОперацииПоКассе И Форма.мПечататьЧекиИзРегистрацииОплаты
	 ИЛИ ОперацииПоБанку Тогда
		ВидимостьПробитыхЧеков = Истина;
	Иначе
		ВидимостьПробитыхЧеков = Ложь;
	КонецЕсли;
	
	// Печать чеков возможна при кассовых операциях или при работе с банком (в случае оплаты с помощью 
	// пластиковой карты), если разрешена данная возможность в настройках программы ЖКХ. 
	Если ОперацииПоКассе ИЛИ ОперацииПоБанку Тогда
		ВидимостьЧеков = Истина;
	Иначе
		ВидимостьЧеков = Ложь;
	КонецЕсли;
	
	Элементы.ЛицевыеСчетаПробитыйЧек.Видимость = ВидимостьПробитыхЧеков;
	Элементы.ФормаНапечататьЧек.Доступность              = ВидимостьЧеков;
	Элементы.ФормаНапечататьЧекПоВсемСтрокам.Доступность = ВидимостьЧеков;
	
	Если Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка Тогда
		
		ЭтоОперацияВозврата = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы")
								Или Объект.ВидОперации = ПредопределенноеЗначение(
															"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета"));
		
		Если ЭтоОперацияВозврата Тогда
			Элементы.ДеревоПлатежейСумма.Заголовок          = "Сумма возврата";
			Элементы.ДеревоПлатежейДолгСумма.Заголовок      = "Оплата";
			Элементы.ДеревоПлатежейПени.Заголовок           = "Сумма возврата";
			Элементы.ДеревоПлатежейДолгПени.Заголовок       = "Оплата";
			Элементы.ДеревоПлатежейРассрочка.Заголовок      = "Сумма возврата";
			Элементы.ДеревоПлатежейДолгРассрочка.Заголовок  = "Оплата";
		Иначе
			Элементы.ДеревоПлатежейСумма.Заголовок          = "Сумма";
			Элементы.ДеревоПлатежейДолгСумма.Заголовок      = "Долг";
			Элементы.ДеревоПлатежейПени.Заголовок           = "Сумма";
			Элементы.ДеревоПлатежейДолгПени.Заголовок       = "Долг";
			Элементы.ДеревоПлатежейРассрочка.Заголовок      = "Сумма";
			Элементы.ДеревоПлатежейДолгРассрочка.Заголовок  = "Долг";
		КонецЕсли;
		
	КонецЕсли;
	
	// Управление видимостью поля ввода варианта распределения оплат по кап. ремонту.
	Элементы.ВариантРаспределенияОплатКапРемонт.Видимость = Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
	// Управление видимостью поля ввода "Вид оплаты".
	Элементы.ВидОплаты.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты"));
	
	Если Объект.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета") Тогда
		// Если распределяем оплату только на кап. ремонт, нет смысла анализировать настройки распределения оплаты на добровольное страхование.
		// Кроме того, было принято, что оплату по добровольному страхованию возвращать нельзя.
		Элементы.НеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = Ложь;
	Иначе
		Элементы.НеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьИДоступностьюЭлементовФормы()

&НаКлиенте
// Управляет видимостью колонок таблицы "Расшифровка платежа".
//
Процедура УстановитьВидимостьКолонокТаблицыРасшифровки()
	
	Если ЭтаФорма.ДеревоПлатежейДолгРассрочкаИтог = 0 Тогда
		Элементы.ДеревоПлатежейНачисленияРассрочка.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейНачисленияРассрочка.Видимость = Истина;
	КонецЕсли;
	
	Если ЭтаФорма.ДеревоПлатежейАвансСуммаИтог = 0 Тогда
		Элементы.ДеревоПлатежейАвансСумма.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейАвансСумма.Видимость = Истина;
	КонецЕсли;
	
	Если ЭтаФорма.ДеревоПлатежейАвансПениИтог = 0 Тогда
		Элементы.ДеревоПлатежейАвансПени.Видимость = Ложь;
	Иначе
		Элементы.ДеревоПлатежейАвансПени.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьКолонокТаблицыРасшифровки()

&НаСервере
// Процедура устанавливает условное оформление формы.
//
Процедура УстановитьУсловноеОформление()
	
	// Условное оформление устанавливается программно.
	УсловноеОформление.Элементы.Очистить();
	
	// Оформление дерева распределения.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейМесяцУслуга.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейСумма.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейДолгСумма.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейПени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейДолгПени.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейРассрочка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПлатежейДолгРассрочка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПлатежей.ЭтоСтрокаМесяца");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 251, 240));
	
	// Автоматический вариант распределения.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛицевыеСчетаФлагРедактированияНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактированияНастроек");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'автоматически'"));
	
	// Вариант распределения "По месяцам".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛицевыеСчетаФлагРедактированияНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактированияНастроек");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ВариантРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ПоМесяцам";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по месяцам'"));
	
	// Вариант распределения "По услугам".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛицевыеСчетаФлагРедактированияНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактированияНастроек");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ВариантРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ПоУслугам";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по услугам'"));
	
	// Вариант распределения "Вручную".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛицевыеСчетаФлагРедактированияНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЛицевыеСчета.ФлагРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'вручную'"));
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВЬЯМИ ЗНАЧЕНИЙ

#Область РаботаСДеревьямиЗначений

&НаКлиентеНаСервереБезКонтекста
// Определяет, является ли операция операцией по кассе.
Функция ОперацииПоКассе(ВидОперации)
	
	Возврат (ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу")
		 ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы")
		 ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Определяет, является ли операция операцией по банку.
Функция ОперацииПоБанку(ВидОперации)
	
	Возврат (ВидОперации = ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет")
			 ИЛИ ВидОперации = ПредопределенноеЗначение(
			 					"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция определяет является ли операция возвратной операцией по кассе или банку.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОперацииВозврата(ВидОперации)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы")
	 ИЛИ ВидОперации = ПредопределенноеЗначение(
	 					"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ОперацииВозврата()

&НаКлиентеНаСервереБезКонтекста
// Функция определяет является ли операция возвратной операцией по кассе или банку.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОперацииПоПлатежнымКартам(ВидОперации)
	
	Возврат (ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты"));
	
КонецФункции // ОперацииПоПлатежнымКартам()

&НаКлиенте
// Процедура строит дерево платежей текущего лицевого счета.
Процедура ЗаполнитьДеревоПлатежей(МассивРасшифровки)
	
	ДеревоПлатежей.ПолучитьЭлементы().Очистить();
	
	ПервыйОбходРезультата = Истина;
	
	Для Каждого ТекЗначение Из МассивРасшифровки Цикл
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийМесяц = ТекЗначение.МесяцНачисления;
			
			ВеткаМесяц                = ДеревоПлатежей.ПолучитьЭлементы().Добавить();
			ВеткаМесяц.МесяцУслуга    = ТекЗначение.МесяцНачисления;
			ВеткаМесяц.ЭтоСтрокаМесяца = Истина;
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
			ПервыйОбходРезультата = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ТекЗначение.МесяцНачисления = ТекущийМесяц Тогда
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
		Иначе
			
			ВеткаМесяц                 = ДеревоПлатежей.ПолучитьЭлементы().Добавить();
			ВеткаМесяц.МесяцУслуга     = ТекЗначение.МесяцНачисления;
			ВеткаМесяц.ЭтоСтрокаМесяца = Истина;
			
			ВеткаУслуг               = ВеткаМесяц.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.МесяцУслуга   = ТекЗначение.Услуга;
			ВеткаУслуг.Сумма         = ТекЗначение.Сумма;
			ВеткаУслуг.Пени          = ТекЗначение.Пени;
			ВеткаУслуг.Рассрочка     = ТекЗначение.Рассрочка;
			ВеткаУслуг.ДолгСумма     = ТекЗначение.ДолгСумма;
			ВеткаУслуг.АвансСумма    = ТекЗначение.АвансСумма;
			ВеткаУслуг.ДолгПени      = ТекЗначение.ДолгПени;
			ВеткаУслуг.АвансПени     = ТекЗначение.АвансПени;
			ВеткаУслуг.ДолгРассрочка = ТекЗначение.ДолгРассрочка;
			
		КонецЕсли;
		
		ТекущийМесяц = ТекЗначение.МесяцНачисления;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьДеревоПлатежей()

&НаСервереБезКонтекста
// Функция получает расшифровку платежа указанного лицевого счета.
Функция ПолучитьРасшифровкуПоЛицевомуСчету(ЛицевойСчет, РасшифровкаПлатежа)
	
	ТаблицаПлатежей = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Дата"));
	ТаблицаПлатежей.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов(МассивТипов));
	ТаблицаПлатежей.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаПлатежей.Колонки.Добавить("Сумма",           Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("Пени",            Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("Рассрочка",       Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("ДолгСумма",       Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("АвансСумма",      Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("ДолгПени",        Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("АвансПени",       Новый ОписаниеТипов("Число"));
	ТаблицаПлатежей.Колонки.Добавить("ДолгРассрочка",   Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаМассива Из РасшифровкаПлатежа Цикл
		
		СтрокаТаблицаДляДереваПлатежей = ТаблицаПлатежей.Добавить();
		СтрокаТаблицаДляДереваПлатежей.МесяцНачисления = СтрокаМассива.МесяцНачисления;
		СтрокаТаблицаДляДереваПлатежей.Услуга          = СтрокаМассива.Услуга;
		СтрокаТаблицаДляДереваПлатежей.Сумма           = СтрокаМассива.Сумма;
		СтрокаТаблицаДляДереваПлатежей.Пени            = СтрокаМассива.Пени;
		СтрокаТаблицаДляДереваПлатежей.Рассрочка       = СтрокаМассива.Рассрочка;
		СтрокаТаблицаДляДереваПлатежей.ДолгСумма       = СтрокаМассива.ДолгСумма;
		СтрокаТаблицаДляДереваПлатежей.ДолгПени        = СтрокаМассива.ДолгПени;
		СтрокаТаблицаДляДереваПлатежей.АвансСумма      = СтрокаМассива.АвансСумма;
		СтрокаТаблицаДляДереваПлатежей.АвансПени       = СтрокаМассива.АвансПени;
		СтрокаТаблицаДляДереваПлатежей.ДолгРассрочка   = СтрокаМассива.ДолгРассрочка;
		
	КонецЦикла;
	
	ТаблицаПлатежей.Сортировать("МесяцНачисления, Услуга");
	
	СтрокиПредоплатыРассрочки = ТаблицаПлатежей.НайтиСтроки(Новый Структура("МесяцНачисления", "Остаток по рассрочке"));
	
	Если Не СтрокиПредоплатыРассрочки.Количество() = 0
	 И Не СтрокиПредоплатыРассрочки.Количество() = ТаблицаПлатежей.Количество() Тогда	 
		ВсегоСтрок = ТаблицаПлатежей.Количество();
		
		Для Каждого СтрокаПредоплатыРассрочки Из СтрокиПредоплатыРассрочки Цикл
			ИндексСтроки = ТаблицаПлатежей.Индекс(СтрокаПредоплатыРассрочки);
			
			ТаблицаПлатежей.Сдвинуть(СтрокаПредоплатыРассрочки, ВсегоСтрок - ИндексСтроки - 1);
		КонецЦикла;
	КонецЕсли;
	
	МассивРасшифровкиЛСОтсортированный = Новый Массив;
	
	Для Каждого СтрокаРасшифровки Из ТаблицаПлатежей Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("МесяцНачисления", СтрокаРасшифровки.МесяцНачисления);
		СтруктураСтроки.Вставить("Услуга",          СтрокаРасшифровки.Услуга);
		СтруктураСтроки.Вставить("Сумма",           СтрокаРасшифровки.Сумма);
		СтруктураСтроки.Вставить("Пени",            СтрокаРасшифровки.Пени);
		СтруктураСтроки.Вставить("Рассрочка",       СтрокаРасшифровки.Рассрочка);
		СтруктураСтроки.Вставить("ДолгСумма",       СтрокаРасшифровки.ДолгСумма);
		СтруктураСтроки.Вставить("ДолгПени",        СтрокаРасшифровки.ДолгПени);
		СтруктураСтроки.Вставить("АвансСумма",      СтрокаРасшифровки.АвансСумма);
		СтруктураСтроки.Вставить("АвансПени",       СтрокаРасшифровки.АвансПени);
		СтруктураСтроки.Вставить("ДолгРассрочка",   СтрокаРасшифровки.ДолгРассрочка);
		МассивРасшифровкиЛСОтсортированный.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивРасшифровкиЛСОтсортированный;
	
КонецФункции  //ПолучитьРасшифровкуПоЛицевомуСчету()

&НаКлиенте
// Удаляет расшифровку по указанной строке.
//
// Параметры:
//  СтрокаТабличнойЧасти – Строка ТЧ "Лицевые счета" или лицевой счет.
//  ЗапрашиватьПодтверждение - Булево - запрашивать ли подтверждение
//                 перед выполнением.
//
Функция УдалитьРасшифровкуПоСтрокеОбъекта(ТекущаяСтрока, ЗапрашиватьПодтверждение = Ложь)
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ТекОбъект = ТекущаяСтрока;
	Иначе
		СтрокаТабличнойЧасти = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекОбъект = СтрокаТабличнойЧасти.Объект;
	КонецЕсли;
	СтруктОтбор = Новый Структура("Объект", ТекОбъект);
	
	СтрокиНаУдаление = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктОтбор);

	Для Каждого ТекСтрока Из СтрокиНаУдаление Цикл
		Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа.Индекс(ТекСтрока));
	КонецЦикла;
	
	СтрокиНаУдалениеРассрочка = Объект.РасшифровкаРассрочки.НайтиСтроки(СтруктОтбор);
	Для Каждого ТекСтрока Из СтрокиНаУдалениеРассрочка Цикл
		Объект.РасшифровкаРассрочки.Удалить(Объект.РасшифровкаРассрочки.Индекс(ТекСтрока));
	КонецЦикла;
	
	СтрокиНаУдалениеСтрахование = Объект.СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекОбъект));
	Для Каждого ТекСтрока Из СтрокиНаУдалениеСтрахование Цикл
		Объект.СведенияОДобровольномСтраховании.Удалить(Объект.СведенияОДобровольномСтраховании.Индекс(ТекСтрока));
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // УдалитьРасшифровкуПоСтрокеОбъекта()

// Данная процедура выступает прослойкой между клиент-серверными вызовами.
&НаКлиенте
Процедура РаспределитьСуммуОбъекта(ТекущаяСтрока, ЗапрашиватьПодтверждение = Ложь)
	
	Если НЕ УдалитьРасшифровкуПоСтрокеОбъекта(ТекущаяСтрока, ЗапрашиватьПодтверждение) Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьСуммуОбъектаПродолжение(ТекущаяСтрока, ЗапрашиватьПодтверждение = Ложь);
	
КонецПроцедуры // РаспределитьСуммуОбъекта()

&НаСервере
// Распределяет сумму из указанной строки по услугам пропорционально долгу и пени.
//
// Параметры:
//  СтрокаТабличнойЧасти – Строка ТЧ "Лицевые счета".
//  ЗапрашиватьПодтверждение - Булево - запрашивать ли подтверждение
//                 перед выполнением.
//
Процедура РаспределитьСуммуОбъектаПродолжение(ТекущаяСтрока, ЗапрашиватьПодтверждение = Ложь)
	
	СтрокаТабличнойЧасти = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РегистрацияОплаты"));
	
	// В функцию распределения передаем признак "ЭтоРаспределениеОднойСтроки = Истина".
	// Это позволит с отбрать данные по начислениям в функции "СформироватьЗапросТаблицыНачислений".
	ДокументОбъект.РаспределитьСуммуОбъекта(СтрокаТабличнойЧасти,,, Истина);
	
	Объект.РасшифровкаПлатежа.Загрузить(ДокументОбъект.РасшифровкаПлатежа.Выгрузить());
	Объект.РасшифровкаРассрочки.Загрузить(ДокументОбъект.РасшифровкаРассрочки.Выгрузить());
	Объект.СведенияОДобровольномСтраховании.Загрузить(ДокументОбъект.СведенияОДобровольномСтраховании.Выгрузить());
	
КонецПроцедуры // РаспределитьСуммуОбъекта()

&НаСервере
// Распределяет сумму из всех строк по услугам пропорционально долгу и пени.
//
Процедура РаспределитьСуммуВсехОбъектов()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РегистрацияОплаты"));
	ДокументОбъект.РаспределитьСуммуВсехОбъектов(ДокументОбъект.ЛицевыеСчета);
	
	Объект.РасшифровкаПлатежа.Загрузить(ДокументОбъект.РасшифровкаПлатежа.Выгрузить());
	Объект.РасшифровкаРассрочки.Загрузить(ДокументОбъект.РасшифровкаРассрочки.Выгрузить());
	Объект.СведенияОДобровольномСтраховании.Загрузить(ДокументОбъект.СведенияОДобровольномСтраховании.Выгрузить());

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
// Процедура сохраняет настройки пользователя на сервере.
Процедура СохранитьНастройкиНаСервере(СтруктураДанных)
	
	Если СтруктураДанных.Свойство("ОтображатьРасшифровку") Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыДокумента_КВП_РегистрацияОплаты",
																		"ОтображатьРасшифровку", СтруктураДанных.ОтображатьРасшифровку);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВидОплаты") И ЗначениеЗаполнено(СтруктураДанных.ВидОплаты) Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыДокумента_КВП_РегистрацияОплаты",
																		"ВидОплаты", СтруктураДанных.ВидОплаты);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

&НаСервере
// Загружает настройки пользователя из хранилища общих настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты") 
	   И НЕ ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Объект.ВидОплаты = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(
								"ПараметрыДокумента_КВП_РегистрацияОплаты", "ВидОплаты");
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервереБезКонтекста
// Функция возвращает ссылку на договор контрагента-оператора с отбором по текущей организации.
//
Функция ПолучитьДоговорОператораПлатежейНаСервере(ОператорПлатежей, Организация)
	
	Возврат Документы.КВП_РегистрацияОплаты.ПолучитьДоговорОператораПлатежей(ОператорПлатежей, Организация);
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает настройки учетной политики.
Функция ПолучитьНастройкиУчетнойПолитикиЖКХ(ОбновитьНастройки = Ложь, СтруктураНастроек)
	
	мНастройкиУчетнойПолитикиТСЖ = Неопределено;
	
	Если Не ПустаяСтрока(СтруктураНастроек.АдресНастроекУчетнойПолитикиЖКХ) Тогда
		мНастройкиУчетнойПолитикиТСЖ = ПолучитьИзВременногоХранилища(СтруктураНастроек.АдресНастроекУчетнойПолитикиЖКХ);
	КонецЕсли;
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Или ОбновитьНастройки Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(СтруктураНастроек.Дата,
																										СтруктураНастроек.Организация);
		АдресНастроекУчетнойПолитикиЖКХ = ПоместитьВоВременноеХранилище(мНастройкиУчетнойПолитикиТСЖ,
																		Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат мНастройкиУчетнойПолитикиТСЖ;
	
КонецФункции // ПолучитьНастройкиУчетнойПолитикиЖКХ()

&НаСервереБезКонтекста
// Функция возвращает настройки формирования платежного документа.
Функция ПолучитьНастройкиФормированияПДЖКХ(ОбновитьНастройки = Ложь, СтруктураНастроек)
	
	мНастройкиФормированияПДЖКХ = Неопределено;
	
	Если Не ПустаяСтрока(СтруктураНастроек.АдресНастроекФормированияПДЖКХ) Тогда
		мНастройкиФормированияПДЖКХ = ПолучитьИзВременногоХранилища(СтруктураНастроек.АдресНастроекФормированияПДЖКХ);
	КонецЕсли;
	
	Если мНастройкиФормированияПДЖКХ = Неопределено Или ОбновитьНастройки Тогда
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(СтруктураНастроек.Организация);
		
		АдресНастроекФормированияПДЖКХ = ПоместитьВоВременноеХранилище(мНастройкиФормированияПДЖКХ,
																		Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат мНастройкиФормированияПДЖКХ;
	
КонецФункции // ПолучитьНастройкиФормированияПДЖКХ()

&НаСервере
// Помечает документа, не соответствующие операции документа.
Процедура ПометитьНаУдалениеНеСоответствующиеОперацииДокументы(ТекущийВид, МассивСтрокДляОчистки)
	
	Для Каждого ТекСтрокаОчисткиТабличнойЧасти Из МассивСтрокДляОчистки Цикл
		
		ДанныеСтроки = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекСтрокаОчисткиТабличнойЧасти);
		
		ДокументОплатыОбъект = ДанныеСтроки.ДокументОплаты.ПолучитьОбъект();
		ДокументОплатыОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОплатыОбъект.Записать();
		
		ДанныеСтроки.ДокументОплаты = ПредопределенноеЗначение("Документ." + ТекущийВид + ".ПустаяСсылка");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция врзвращает наименование вида документа отражения оплаты для текущего вида операции РО.
//
Функция ПолучитьНаименованиеВидаДокументаОтраженияОплатыПоВидуОперации()
	
	ВидыДокументов = Новый Соответствие();
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы"), "РасходныйКассовыйОрдер");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета"), "СписаниеСРасчетногоСчета");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу"), "ПриходныйКассовыйОрдер");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты"),
							"КорректировкаДолга");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет"), "ПоступлениеНаРасчетныйСчет");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты"), "ОплатаПлатежнойКартой");
	
	Возврат ВидыДокументов.Получить(Объект.ВидОперации);
	
КонецФункции

&НаКлиенте
// Процедура проверяет на соответствие вид операции и типы сформированных документов.
// Если типы не соответствует, то предлагается пометить на удаление некорректные документы
// и очистить значения поля "Документ оплаты".
//
Процедура ПроверитьСоответствиеСозданныхДокументовОплатыИВидаОперации()
	
	ТекущийВид = ПолучитьНаименованиеВидаДокументаОтраженияОплатыПоВидуОперации();
	
	МассивСтрокДляОчистки = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти ИЗ Объект.ЛицевыеСчета Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			Если Не ТипЗнч(СтрокаТабличнойЧасти.ДокументОплаты) = Тип("ДокументСсылка." + ТекущийВид) Тогда
				МассивСтрокДляОчистки.Добавить(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.ДокументОплаты = ПредопределенноеЗначение("Документ." + ТекущийВид + ".ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляОчистки.Количество() > 0 Тогда
		
		ТекстВопроса = "Пометить на удаление сформированные документы, не соответствующие виду операции?";
		ДопПараметры = Новый Структура("ТекущийВид, МассивСтрокДляОчистки", ТекущийВид, МассивСтрокДляОчистки);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПометитьНаУдаление", ЭтаФорма, ДопПараметры),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеСозданныхДокументовОплатыИВидаОперации()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПроверитьСоответствиеСозданныхДокументовОплатыИВидаОперации()".
Процедура ОбработатьРезультатВопросаПометитьНаУдаление(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПометитьНаУдалениеНеСоответствующиеОперацииДокументы(ДополнительныеПараметры.ТекущийВид, 
															 ДополнительныеПараметры.МассивСтрокДляОчистки);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПометитьНаУдаление()

&НаСервере
// Процедура заполняет табличную часть "Лицевые счета".
//
// Параметры
//  "ТолькоЛицевыеСчетаИмеющиеЗадолженность" - Истина,если выбрана команда подменю "ЗаполнитьЛицевымиСчетамиСЗадолженностью";
//                                             Ложь,  если выбрана команда подменю "ЗаполнитьТаблицуВсемиЛицевымиСчетами".
//
Процедура ЗаполнитьТабличнуюЧастьЛицевыеСчетаНаСервере(ТолькоЛицевыеСчетаИмеющиеЗадолженность = Ложь)
	
	Объект.ЛицевыеСчета.Очистить();
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.РасшифровкаРассрочки.Очистить();
	Объект.СведенияОДобровольномСтраховании.Очистить();
	
	// Запрос возвращает список лицевых счетов в зависимости от выбранной пользователем команды "ПодменюЗаполнить":
	// 1. Осуществляется выбор всех счетов, относящихся к выбранному зданию из справочника"КВП_ЛицевыеСчета";
	// 2. Производится отбор действующих счетов среди полученных в п.1, и данные передаются во временную таблицу "втСписокДействующихЛицевыхСчетов";
	// 3. Из действующих лицевых счетов отбираем только те, по которым есть сведения для взаиморасчетов в организации документа, помещаем итоговый список
	//    лицевых счетов во временную таблицу втЛицевыеСчетаИзСведенийДляВзаиморасчетов;
	// 4. Из полученных в п.3 счетов выбираем счета с имеющейся задолженностью и помещаем их во Временную таблицу "втСписокЛицевыхСчетовСЗадолженностью";
	// 5. Соединяем таблицы "втЛицевыеСчетаИзСведенийДляВзаиморасчетов" и "втСписокЛицевыхСчетовСЗадолженностью" левым соединением,
	//    получаем список лицевых счетов, исходя из выбранного пользователем параметра "ТолькоЛицевыеСчетаИмеющиеЗадолженность",
	//    если выбрана команда подменю "ЗаполнитьТаблицуВсемиЛицевымиСчетами" выводятся все действующие лицевые счета из таблицы "втСписокДействующихЛицевыхСчетов",
	//    если выбрана команда подменю "ЗаполнитьЛицевымиСчетамиСЗадолженностью" выводятся все действующие лицевые счета из таблицы "втСписокЛицевыхСчетовСЗадолженностью".
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                  Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Здание",                  Объект.Дом);
	Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(ДобавитьМесяц(Объект.Дата, - 1)));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  КонецМесяца(ДобавитьМесяц(Объект.Дата, - 1)));
	Запрос.УстановитьПараметр("СледующийМесяц",          КонецМесяца(ДобавитьМесяц(Объект.Дата, 1)));
	Запрос.УстановитьПараметр("УслугаСтрахования",       УслугаДобровольногоСтрахования);
	
	Запрос.УстановитьПараметр("ТолькоЛицевыеСчетаИмеющиеЗадолженность", ТолькоЛицевыеСчетаИмеющиеЗадолженность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСписокЛицевыхСчетов
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Адрес.Владелец В ИЕРАРХИИ(&Здание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчета.ЛицевойСчет
	|ПОМЕСТИТЬ втСписокДействующихЛицевыхСчетов
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСписокЛицевыхСчетов.ЛицевойСчет
	|				ИЗ
	|					втСписокЛицевыхСчетов КАК втСписокЛицевыхСчетов)) КАК ЛицевыеСчета
	|ГДЕ
	|	ЛицевыеСчета.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование
	|ПОМЕСТИТЬ втЛицевыеСчетаИзСведенийДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСписокДействующихЛицевыхСчетов.ЛицевойСчет
	|					ИЗ
	|						втСписокДействующихЛицевыхСчетов КАК втСписокДействующихЛицевыхСчетов)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет
	|ПОМЕСТИТЬ втСписокЛицевыхСчетовСоСтрахованием
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
	|			&НачалоПредыдущегоМесяца,
	|			&КонецПредыдущегоМесяца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСписокДействующихЛицевыхСчетов.ЛицевойСчет
	|					ИЗ
	|						втСписокДействующихЛицевыхСчетов КАК втСписокДействующихЛицевыхСчетов)
	|				И Услуга = &УслугаСтрахования
	|				И КОНЕЦПЕРИОДА(МесяцНачисления, МЕСЯЦ) = &СледующийМесяц) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.СуммаНачисленияОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втСписокЛицевыхСчетовСЗадолженностью
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаИзСведенийДляВзаиморасчетов КАК втЛицевыеСчетаИзСведенийДляВзаиморасчетов)
	|				И &УсловиеНаУслуги) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСписокЛицевыхСчетовСЗадолженностью.ЛицевойСчет, втСписокЛицевыхСчетовСоСтрахованием.ЛицевойСчет) КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСписокЛицевыхСчетовСДолгамиИНачислениями
	|ИЗ
	|	втСписокЛицевыхСчетовСоСтрахованием КАК втСписокЛицевыхСчетовСоСтрахованием
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСписокЛицевыхСчетовСЗадолженностью КАК втСписокЛицевыхСчетовСЗадолженностью
	|		ПО втСписокЛицевыхСчетовСоСтрахованием.ЛицевойСчет = втСписокЛицевыхСчетовСЗадолженностью.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет КАК Объект
	|ИЗ
	|	втЛицевыеСчетаИзСведенийДляВзаиморасчетов КАК втЛицевыеСчетаИзСведенийДляВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСписокЛицевыхСчетовСДолгамиИНачислениями КАК втСписокЛицевыхСчетовСДолгамиИНачислениями
	|		ПО втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчет = втСписокЛицевыхСчетовСДолгамиИНачислениями.ЛицевойСчет
	|ГДЕ
	|	(НЕ &ТолькоЛицевыеСчетаИмеющиеЗадолженность
	|			ИЛИ ВЫБОР
	|				КОГДА втСписокЛицевыхСчетовСДолгамиИНачислениями.ЛицевойСчет ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	втЛицевыеСчетаИзСведенийДляВзаиморасчетов.ЛицевойСчетНаименование";
	
	// Необходимо учесть возможность раздельного учета услуг кап. ремонта.
	УсловиеНаУслуги = "ИСТИНА";
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Если Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт Тогда
			УсловиеНаУслуги = "НЕ Услуга В (&СписокУслугКапРемонта)";
		ИначеЕсли Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
			УсловиеНаУслуги = "Услуга В (&СписокУслугКапРемонта)"
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаУслуги", УсловиеНаУслуги);
	Запрос.УстановитьПараметр("СписокУслугКапРемонта", мСтруктураНастроекКапРемонта.СписокУслуг);
	
	Объект.ЛицевыеСчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Вызываем процедуру "ЗаполнитьДопДанныеВТаблице" для заполнения следующих реквизитов:
	// "Помещение", "Владелец", "ФлагРедактированияНастроек" и "ПробитыйЧек".
	ЗаполнитьДопДанныеВТаблице();
	
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных данных
// в строках дерева.
Процедура ЗаполнитьДопДанныеВТаблице()
	
	СписокЛС = Объект.ЛицевыеСчета.Выгрузить().ВыгрузитьКолонку("Объект");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиТаблицы = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаТаблицы Из СтрокиТаблицы Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрокаТаблицы, ТекСтрока, "Помещение, Владелец, Здание");
			
			ТекСтрокаТаблицы.ФлагРедактированияНастроек = ?(ТекСтрокаТаблицы.ВариантРаспределения = "", 1, 0);
			ТекСтрокаТаблицы.ПробитыйЧек                = ?(ТекСтрокаТаблицы.НомерЧекаККМ = 0, 1, 0);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура заполнения служебных данных в строке лицевого счета.
// Процедура вызывается также из формы списка документа "Регистрация оплаты" при чтении строки штрихкода.
//
Процедура ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(НомерСтроки) Экспорт
	
	ДанныеСтроки = Объект.ЛицевыеСчета.НайтиПоИдентификатору(НомерСтроки);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление данных о помещении и владельце лицевого счета.
	ДанныеСтроки.Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Объект, "Адрес");
	ДанныеСтроки.Здание    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Помещение, "Владелец");
	ДанныеСтроки.Владелец  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ДанныеСтроки.Объект, Объект.Дата);
	
	ДанныеСтроки.ФлагРедактированияНастроек = ?(ДанныеСтроки.ВариантРаспределения = "", 1, 0);
	ДанныеСтроки.ПробитыйЧек = ?(ДанныеСтроки.НомерЧекаККМ = 0, 1, 0);
	
КонецПроцедуры

&НаКлиенте
// Устанавливает отбор в расшифровке платежа.
Процедура УстановитьОтборРашифровкиПлатежа(ЛицевойСчет)

	Если Не ЛицевойСчет = Неопределено Тогда
		
		МассивРасшифровкиПоЛС = ПолучитьРасшифровкуПоЛицевомуСчету(ЛицевойСчет, ПолучитьСтрокиРасшифровки(ЛицевойСчет));
		ЗаполнитьДеревоПлатежей(МассивРасшифровкиПоЛС);
		
		УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
		
		УстановитьВидимостьКолонокТаблицыРасшифровки();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Функция получает на клиенте строки текущего лицевого счета из табличной части "РасшифровкаПлатежа".
Функция ПолучитьСтрокиРасшифровки(ЛицевойСчет)
	
	МассивРасшифровкиЛС = Новый Массив;
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если СтрокаРасшифровки.Объект = ЛицевойСчет Тогда
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",          СтрокаРасшифровки.Объект);
			СтруктураСтроки.Вставить("Услуга",          СтрокаРасшифровки.Услуга);
			СтруктураСтроки.Вставить("Сумма",           СтрокаРасшифровки.Сумма);
			СтруктураСтроки.Вставить("Пени",            СтрокаРасшифровки.Пени);
			СтруктураСтроки.Вставить("Рассрочка",       СтрокаРасшифровки.Рассрочка);
			СтруктураСтроки.Вставить("МесяцНачисления", СтрокаРасшифровки.МесяцНачисления);
			СтруктураСтроки.Вставить("ДолгСумма",       СтрокаРасшифровки.ДолгСумма);
			СтруктураСтроки.Вставить("АвансСумма",      СтрокаРасшифровки.АвансСумма);
			СтруктураСтроки.Вставить("ДолгПени",        СтрокаРасшифровки.ДолгПени);
			СтруктураСтроки.Вставить("АвансПени",       СтрокаРасшифровки.АвансПени);
			СтруктураСтроки.Вставить("ДолгРассрочка",   СтрокаРасшифровки.ДолгРассрочка);
			МассивРасшифровкиЛС.Добавить(СтруктураСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРасшифровкиЛС;
	
КонецФункции // ПолучитьСтрокиРасшифровки()

&НаКлиенте
// Возникает при активизации строки лицевого счета.
Процедура ПриАктивизацииСтрокиЛицевыеСчета()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		УстановитьОтборРашифровкиПлатежа(ТекущиеДанные.Объект);
		
		СтруктураДолга = ПолучитьСуммуДолгаПоНачислениям(ТекущиеДанные.Объект, Объект.Организация, Объект.ИсточникОплаты, Объект.Дата, 
														 Объект.ВариантРаспределенияОплатКапРемонт, мСтруктураНастроекКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию);
		ВывестиСуммуДолгаПоНачислениям(СтруктураДолга);
		
	Иначе
		ДеревоПлатежей.ПолучитьЭлементы().Очистить();
		ДолгПоТекущемуЛС = "";
	КонецЕсли;
	
КонецПроцедуры // ПриАктивизацииСтрокиЛицевыеСчета()

&НаСервереБезКонтекста
// Функция возвращает структуру для заполнения суммы долга для текущего лицевого счета.
//
Функция ПолучитьСуммуДолгаПоНачислениям(ТекущийЛС, Организация, ИсточникОплаты, ДатаДокумента, ВариантРаспределенияОплатКапРемонт, НастройкиКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию)
	
	// Определим сумму долга по начислениям для текущего лицевого счета.
	мЗапросПоНачислениям = Новый Запрос;
	мЗапросПоНачислениям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленияНаЛицевыеСчетаОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|					И НЕ КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДолга,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДолгаПени,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)
	|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДолгаРассрочка
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаУслуги) КАК КВП_НачисленияНаЛицевыеСчетаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленияНаЛицевыеСчетаОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет,
	|	СУММА(УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.СуммаНачисленияОборот) КАК СуммаНачисленияПоСтрахованию
	|ПОМЕСТИТЬ НачисленияПоСтрахованию
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
	|			&НачалоПредыдущегоМесяца,
	|			&КонецПредыдущегоМесяца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И &УсловиеНаУслуги
	|				И КОНЕЦПЕРИОДА(МесяцНачисления, МЕСЯЦ) = &СледующийМесяц) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Остатки.ЛицевойСчет, НачисленияПоСтрахованию.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(Остатки.СуммаДолга, 0) КАК СуммаДолга,
	|	ЕСТЬNULL(Остатки.СуммаДолгаПени, 0) КАК СуммаДолгаПени,
	|	ЕСТЬNULL(Остатки.СуммаДолгаРассрочка, 0) КАК СуммаДолгаРассрочка,
	|	ЕСТЬNULL(НачисленияПоСтрахованию.СуммаНачисленияПоСтрахованию, 0) КАК СуммаНачисленияПоСтрахованию
	|ИЗ
	|	Остатки КАК Остатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ НачисленияПоСтрахованию КАК НачисленияПоСтрахованию
	|		ПО Остатки.ЛицевойСчет = НачисленияПоСтрахованию.ЛицевойСчет
	|ИТОГИ
	|	СУММА(СуммаДолга),
	|	СУММА(СуммаДолгаПени),
	|	СУММА(СуммаДолгаРассрочка),
	|	СУММА(СуммаНачисленияПоСтрахованию)
	|ПО
	|	ЛицевойСчет";
	
	УсловиеНаУслуги = "ИСТИНА";
	Если НастройкиКапРемонта.ВедетсяРаздельныйУчет Тогда
		Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт Тогда
			УсловиеНаУслуги = "НЕ Услуга В (&СписокУслугКапРемонта)";
		ИначеЕсли ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
			УсловиеНаУслуги = "Услуга В (&СписокУслугКапРемонта)"
		КонецЕсли;
	КонецЕсли;
	
	мЗапросПоНачислениям.Текст = СтрЗаменить(мЗапросПоНачислениям.Текст, "&УсловиеНаУслуги", УсловиеНаУслуги);
	мЗапросПоНачислениям.УстановитьПараметр("СписокУслугКапРемонта", НастройкиКапРемонта.СписокУслуг);
	
	мЗапросПоНачислениям.УстановитьПараметр("Организация",    Организация);
	мЗапросПоНачислениям.УстановитьПараметр("ИсточникОплаты", ИсточникОплаты);
	мЗапросПоНачислениям.УстановитьПараметр("ДатаДокумента",  ДатаДокумента);
	мЗапросПоНачислениям.УстановитьПараметр("ЛицевойСчет",    ТекущийЛС);
	// Добровольное страхование начисляется (для примера) в Январе за Март. Поэтому ищем начисления, проведенные в предыдущем месяце за ближайший следующий месяц.
	мЗапросПоНачислениям.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(ДобавитьМесяц(ДатаДокумента, - 1)));
	мЗапросПоНачислениям.УстановитьПараметр("КонецПредыдущегоМесяца",  КонецМесяца(ДобавитьМесяц(ДатаДокумента, - 1)));
	мЗапросПоНачислениям.УстановитьПараметр("СледующийМесяц",          КонецМесяца(ДобавитьМесяц(ДатаДокумента, 1)));
	
	ДолгПоНачислениям       = 0;
	ДолгПоПени              = 0;
	ДолгПоРассрочке         = 0;
	НачислениеПоСтрахованию = 0;
	
	Выборка = мЗапросПоНачислениям.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДолгПоНачислениям       = Выборка.СуммаДолга;
		ДолгПоПени              = Выборка.СуммаДолгаПени;
		ДолгПоРассрочке         = Выборка.СуммаДолгаРассрочка;
		НачислениеПоСтрахованию = Выборка.СуммаНачисленияПоСтрахованию;
	КонецЕсли;
	
	// Всегда выводим все параметры долга.
	ПредставлениеОбъекта = Строка(ТекущийЛС);
	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		ПредставлениеОбъекта = "<объект не определен>"
	КонецЕсли;
	ИнфСтрока = "Текущая задолженность " + ПредставлениеОбъекта + ": по начислениям = " + Формат(ДолгПоНачислениям, "ЧДЦ=2; ЧН=0,00")
								 + ", по пени = " + Формат(ДолгПоПени, "ЧДЦ=2; ЧН=0,00")
								 + ", по рассрочке = " + Формат(ДолгПоРассрочке, "ЧДЦ=2; ЧН=0,00") + "."
								 + ?(ВестиУчетНачисленийПоДобровольномуСтрахованию, " Начисления по добр. страхованию = " + Формат(НачислениеПоСтрахованию, "ЧДЦ=2; ЧН=0,00") + ".", "");
								
								
	ДолгПоТекущемуЛС = ИнфСтрока;
	
	СтруктураДолга = Новый Структура;
	СтруктураДолга.Вставить("ДолгПоТекущемуЛС",  ДолгПоТекущемуЛС);
	СтруктураДолга.Вставить("ДолгПоНачислениям", ДолгПоНачислениям);
	
	Возврат СтруктураДолга;
	
КонецФункции  //ПолучитьСуммуДолгаПоНачислениям()

&НаКлиенте
// Выводит сумму долга по начислениям.
Процедура ВывестиСуммуДолгаПоНачислениям(СтруктураДолга)
	
	ДолгПоТекущемуЛС = СтруктураДолга.ДолгПоТекущемуЛС;
	Если СтруктураДолга.ДолгПоНачислениям > 0 Тогда
		Элементы.ДолгПоТекущемуЛС.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.ДолгПоТекущемуЛС.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
	
КонецПроцедуры // ВывестиСуммуДолгаПоНачислениям()

&НаКлиенте
// Процедура формирует расшифровку платежа лицевого счета по услугам.
//
// Параметры:
//  СтрокаЛицевогоСчета      - строка табличной части "Лицевые счета".
//  ЗапрашиватьПодтверждение - флаг необходимости подтвержать удаление расшифровки платежа по текущему объекту.
//
Процедура СформироватьРасшифровкуПлатежа(ТекущаяСтрока, ЗапрашиватьПодтверждение = Ложь, ЗаполнятьДеревоПлатежей = Истина, ПроверятьНеобходимостьЗаписиДокумента = Истина)
	
	// Описание оповещения, которое выполнит непосредственное распределение оплаты.
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяСтрока",            ТекущаяСтрока);
	ДопПараметры.Вставить("ЗапрашиватьПодтверждение", ЗапрашиватьПодтверждение);
	ДопПараметры.Вставить("ЗаполнятьДеревоПлатежей",  ЗаполнятьДеревоПлатежей);
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьРасшифровкуПлатежаСтроки", ЭтотОбъект, ДопПараметры);
	
	// Если требуется проверить необходимость записи документа, переходим на проверку.
	Если ПроверятьНеобходимостьЗаписиДокумента Тогда
		ПроверитьНеобходимостьЗаписиДокументаПередРаспределениемОплаты(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	// Перенаправление на целевую процедуру распределения оплаты.
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры // СформироватьРасшифровкуПлатежа()

&НаКлиенте
// Процедура производит распределения оплаты строки.
//
Процедура СформироватьРасшифровкуПлатежаСтроки(Результат, ДопПараметры) Экспорт
	
	ТекущаяСтрока            = ДопПараметры.ТекущаяСтрока;
	ЗапрашиватьПодтверждение = ДопПараметры.ЗапрашиватьПодтверждение;
	ЗаполнятьДеревоПлатежей  = ДопПараметры.ЗаполнятьДеревоПлатежей;
	
	СтрокаЛицевогоСчета = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	РаспределитьСуммуОбъекта(ТекущаяСтрока, ЗапрашиватьПодтверждение);
	
	Если ЗаполнятьДеревоПлатежей Тогда
		
		МассивРасшифровкиПоЛС = ПолучитьРасшифровкуПоЛицевомуСчету(СтрокаЛицевогоСчета.Объект, ПолучитьСтрокиРасшифровки(СтрокаЛицевогоСчета.Объект));
		ЗаполнитьДеревоПлатежей(МассивРасшифровкиПоЛС);
		
		УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
		
		УстановитьВидимостьКолонокТаблицыРасшифровки();
		
	КонецЕсли;
	
	// Принудительно установим модифицированность документа,
	// так как перед распределением оплаты документ мог быть записан,
	// а модифицированность снята.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет необходимость записи документа перед распределением оплаты.
//
Процедура ПроверитьНеобходимостьЗаписиДокументаПередРаспределениемОплаты(ОбработчикПродолжения)
	
	ТребуетсяЗаписьДокумента = Ложь;
	
	// По умолчанию просто записываем документ.
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	// Необходимо записать документ, если он новый.
	Если Объект.Ссылка.Пустая() Тогда
		
		ТребуетсяЗаписьДокумента = Истина;
		ТекстВопроса = "Перед распределением оплат документ будет записан. Продолжить?";
		
	// Необходимо отменить проведение, если документ проведен,
	// а дата документа изменена в большую сторону.
	ИначеЕсли Объект.Проведен И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ссылка, "Дата") < Объект.Дата Тогда
		
		ТребуетсяЗаписьДокумента = Истина;
		ТекстВопроса = "Дата документа изменилась, перед распределением оплат будет выполнена отмена проведения документа. Продолжить?";
		
		// Необходимо отменить проведение документа.
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		
	КонецЕсли;
	
	Если ТребуетсяЗаписьДокумента Тогда
		
		// Если нужно записать документ, то задаем вопрос пользователю,
		// записываем документ и вызываем переданный обработчик продолжения.
		ДопПараметры = Новый Структура("РежимЗаписи, ОбработчикПродолженния", РежимЗаписи, ОбработчикПродолжения);
		ОбработчикЗавершенияВопроса = Новый ОписаниеОповещения("ОбработчикЗавершенияВопросаОЗаписиДокумента", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОбработчикЗавершенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		
		Возврат;
		
	Иначе
		
		// Просто выполняем обработчик без записи документа.
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения вопроса о записи документа.
//
Процедура ОбработчикЗавершенияВопросаОЗаписиДокумента(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		// Записываем документ в нужном режиме записи и вызываем обработчик продолжения.
		Если Записать(Новый Структура("РежимЗаписи", ДопПараметры.РежимЗаписи)) Тогда
			ВыполнитьОбработкуОповещения(ДопПараметры.ОбработчикПродолженния);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция определяет, есть ли сформированные документы оплат.
//
Функция ЕстьСформированныеДокументыОплат()
	
	ЕстьДокументыОплаты = Ложь;
	
	Для Каждого СтрокаЛицевогоСчета Из Объект.ЛицевыеСчета Цикл
		
		Если ЗначениеЗаполнено(СтрокаЛицевогоСчета.ДокументОплаты) Тогда
			ЕстьДокументыОплаты = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДокументыОплаты;
	
КонецФункции

&НаКлиенте
// Определяет минимальню и максимальную даты документов оплат.
Функция ОпределитьДатыДокументовОплаты(МинДата, МаксДата)
	
	СписокДокументовОтражения = Новый СписокЗначений();
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЛицевыеСчета Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			СписокДокументовОтражения.Добавить(СтрокаТабличнойЧасти.ДокументОплаты);
			ДатаДока = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.ДокументОплаты, "Дата");
			МинДата  = ?(МинДата  = Неопределено, ДатаДока, Мин(МинДата,   ДатаДока));
			МаксДата = ?(МаксДата = Неопределено, ДатаДока, Макс(МаксДата, ДатаДока));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДокументовОтражения;
	
КонецФункции

&НаКлиенте
// Открывает обработку регистрации счетов-фактур на аванс.
Процедура ОткрытьРегистрациюСчетовФактурНаАванс(ВыводитьСообщения = Истина)
	
	// Пробежимся по документам отражения, сформируем их список, определим
	// границы периода, в котором они расположены.
	МинДата  = Неопределено;
	МаксДата = Неопределено;
	
	СписокДокументовОтражения = ОпределитьДатыДокументовОплаты(МинДата, МаксДата);
	
	// Если документов нет - нет смысла вызывать обработку.
	Если СписокДокументовОтражения.Количество() = 0 Тогда
		Если ВыводитьСообщения Тогда
			ПоказатьПредупреждение(Неопределено, "Нет документов отражения оплат в регламентированном учете!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Создадим обработку
	ФормаОбработки = ПолучитьФорму("Обработка.РегистрацияСчетовФактурНаАванс.Форма");
	ФормаОбработки.Объект.Организация   = Объект.Организация;
	ФормаОбработки.Объект.НачалоПериода = ?(МинДата  = Неопределено, НачалоДня(Объект.Дата), МинДата);
	ФормаОбработки.Объект.КонецПериода  = ?(МаксДата = Неопределено, КонецДня(Объект.Дата),  МаксДата);
	
	// Раньше, если для организации применялась общая схема налогообложения, каждый раз при отражении оплат
	// открывалась форма регистрации счетов-фактур на аванс, даже, если авансов не было.
	// Пока решили вообще не открывать данную форму, так как авансы бывают не всегда, это типовая обработка
	// и при необходимости к ней можно перейти из интерфейса программы в пару кликов
	// (раздел "Банк и касса" - Счета-фактуры на аванс).
	
	//ФормаОбработки.Открыть();
	
КонецПроцедуры // ОткрытьРегистрациюСчетовФактурНаАванс()

&НаКлиенте
// Процедура вызывает форму для корректировки расшифроки платежа.
//
Процедура РедактироватьРасшифровкуПлатежа(ЛицевойСчет)
	
	СтрокиЛС = Новый Массив;
	Для Каждого СтрокаЛС Из Объект.ЛицевыеСчета Цикл
		Если СтрокаЛС.Объект = ЛицевойСчет Тогда
			СтрокиЛС.Добавить(СтрокаЛС);
		КонецЕсли;
	КонецЦикла;
	
	СуммаОплаты = 0;
	Для Каждого ТекСтрока Из СтрокиЛС Цикл
		СуммаОплаты = СуммаОплаты + ТекСтрока.Сумма;
	КонецЦикла;
	
	АдресХранилищаНастроек = ПоместитьРасшифровкуСтрокиВХранилище(ЛицевойСчет, СуммаОплаты);
	
	ДопПараметры = Новый Структура("ЛицевойСчет, СтрокиЛС", ЛицевойСчет, СтрокиЛС);
	ОткрытьФорму("Документ.КВП_РегистрацияОплаты.Форма.ФормаРедактированияРасшифровкиПлатежа",
				 Новый Структура("АдресХранилищаНастроек", АдресХранилищаНастроек),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыРедактированияРасшифровкиПлатежа", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // РедактироватьРасшифровкуПлатежа()

&НаКлиенте
// Обработка результата закрытия формы редактирования расшифровки платежа.
Процедура ОбработатьРезультатЗакрытияФормыРедактированияРасшифровкиПлатежа(АдресХранилищаНастроек, ДополнительныеПараметры) Экспорт
	
	Если Не АдресХранилищаНастроек = Неопределено Тогда
		
		ЛицевойСчет = ДополнительныеПараметры.ЛицевойСчет;
		СтрокиЛС    = ДополнительныеПараметры.СтрокиЛС;
		
		ЗагрузитьРасшифровкуСтрокиИзХранилища(ЛицевойСчет, АдресХранилищаНастроек);
		
		Для Каждого СтрокаЛицевогоСчета Из СтрокиЛС Цикл
			СтрокаЛицевогоСчета.ФлагРедактирования = Истина;
		КонецЦикла;
		
		МассивРасшифровкиПоЛС = ПолучитьРасшифровкуПоЛицевомуСчету(ЛицевойСчет, ПолучитьСтрокиРасшифровки(ЛицевойСчет));
		ЗаполнитьДеревоПлатежей(МассивРасшифровкиПоЛС);
		
		УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
		
		УстановитьВидимостьКолонокТаблицыРасшифровки();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыРедактированияРасшифровкиПлатежа()

&НаСервереБезКонтекста
// Устанавливает факт использования УСН.
//
Функция ПрименяетсяУСН(Организация, Дата)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПрименяетсяУСН(Организация, Дата);
	
КонецФункции // ПрименяетсяУСН()

&НаСервере
// Процедура устанавливает значение пометки на удаление документа оплаты.
//
Процедура ПометитьНаУдалениеДокументы(ТекущийВид)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РегистрацияОплаты"));
	
	Для Каждого СтрокаТабличнойЧасти ИЗ Объект.ЛицевыеСчета Цикл
		Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
			ДокументОбъект.ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
			СтрокаТабличнойЧасти.ДокументОплаты = ПредопределенноеЗначение("Документ." + ТекущийВид + ".ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПометитьНаУдалениеДокументы()

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

&НаКлиенте
// Процедура очищает документы отражения оплат в табличной части документа.
Процедура ВыполнитьОчисткуДокументовОтраженияОплат(ЗаписыватьДокумент = Истина)
	
	ВидыДокументов = Новый Соответствие();
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы"), "РасходныйКассовыйОрдер");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета"), "СписаниеСРасчетногоСчета");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу"), "ПриходныйКассовыйОрдер");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты"),
							"КорректировкаДолга");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет"), "ПоступлениеНаРасчетныйСчет");
	ВидыДокументов.Вставить(ПредопределенноеЗначение(
							"Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты"), "ОплатаПлатежнойКартой");
	
	ТекущийВид = ВидыДокументов.Получить(Объект.ВидОперации);
	
	ПометитьНаУдалениеДокументы(ТекущийВид);
	
	Если ЗаписыватьДокумент Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОчисткуДокументовОтраженияОплат()

&НаСервере
// Процедура сохраняет таблицу "Лицевые счета" для последующей обработки.
Процедура ПодготовитьКэшДополнительныхДанныхНаСервере()
	
	АдресКэшаДополнительныхДанныхТаблицыЛицевыеСчета = ПоместитьВоВременноеХранилище(Объект.ЛицевыеСчета.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дополнительные сведения о лицевом счете в таблице "Лицевые счета".
Процедура ЗаполнитьДополнительныеДанныеПоЛицевымСчетамИзКэша()
	
	ДанныеКэша = ПолучитьИзВременногоХранилища(АдресКэшаДополнительныхДанныхТаблицыЛицевыеСчета);
	Если ТипЗнч(ДанныеКэша) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекущаяСтрокаКэша Из ДанныеКэша Цикл
			НайденныеСтрокиЛицевогоСчета = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("НомерСтроки", ТекущаяСтрокаКэша.НомерСтроки));
			Если НайденныеСтрокиЛицевогоСчета.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтрокиЛицевогоСчета[0], ТекущаяСтрокаКэша, "ФлагРедактированияНастроек, ПробитыйЧек, Помещение, Владелец, Здание");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Очищает данные в документе при изменении настроек распределения оплаты.
Процедура ОчиститьДанныеВДокументе()
	
	// Выполним очистку документов отражения оплат.
	ВыполнитьОчисткуДокументовОтраженияОплат(Ложь);
	
	// Снимаем флаг изменения настроек расшифровки и устанавливаем настройки распределения в значение "Автоматически":
	Для Каждого СтрокаЛицевогоСчета Из Объект.ЛицевыеСчета Цикл
		СтрокаЛицевогоСчета.ФлагРедактирования         = Ложь;
		СтрокаЛицевогоСчета.ВариантРаспределения       = "";
		СтрокаЛицевогоСчета.ФлагРедактированияНастроек = 1;
	КонецЦикла;
	
	// Очистка таблиц документа.
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.НастройкиОплаты.Очистить();
	Объект.РасшифровкаРассрочки.Очистить();
	Объект.СведенияОДобровольномСтраховании.Очистить();
	
	// Очищаем дерево платежей на форме.
	ДеревоПлатежей.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаКлиенте
// Функция получает на клиенте строки текущего лицевого счета из табличной части "СведенияОДобровольномСтраховании".
Функция ПолучитьСтрокиРасшифровкиСтрахования(ЛицевойСчет)
	
	МассивДобровольногоСтрахования = Новый Массив;
	
	СтрокиСтрахования = Объект.СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	
	Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ЛицевойСчет",     СтрокаСтрахования.ЛицевойСчет);
		СтруктураСтроки.Вставить("Услуга",          СтрокаСтрахования.Услуга);
		СтруктураСтроки.Вставить("МесяцНачисления", СтрокаСтрахования.МесяцНачисления);
		СтруктураСтроки.Вставить("Договор",         СтрокаСтрахования.Договор);
		СтруктураСтроки.Вставить("Тариф",           СтрокаСтрахования.Тариф);
		СтруктураСтроки.Вставить("Количество",      СтрокаСтрахования.Количество);
		СтруктураСтроки.Вставить("СуммаНачисления", СтрокаСтрахования.СуммаНачисления);
		МассивДобровольногоСтрахования.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивДобровольногоСтрахования;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область ПроцедурыИФункцииРаботыСВременнымХранилищем

&НаКлиенте
// Функция получает настройки распределения строки.
Функция ПолучитьНастройкиРаспределенияСтроки(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Дата",                           Объект.Дата);
	СтруктураНастроек.Вставить("Организация",                    Объект.Организация);
	СтруктураНастроек.Вставить("ВидОперации",                    Объект.ВидОперации);
	СтруктураНастроек.Вставить("Объект",                         ТекущиеДанные.Объект);
	СтруктураНастроек.Вставить("ВариантРаспределения",           ТекущиеДанные.ВариантРаспределения);
	СтруктураНастроек.Вставить("ВариантОплаты",                  ТекущиеДанные.ВариантОплаты);
	СтруктураНастроек.Вставить("РаспределятьПоУказаннымУслугам", ТекущиеДанные.РаспределятьПоУказаннымУслугам);
	
	МассивНастроекОплаты = Новый Массив;
	Для Каждого СтрокаНастройки Из Объект.НастройкиОплаты Цикл
		
		Если СтрокаНастройки.Объект = ТекущиеДанные.Объект Тогда
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Объект",       СтрокаНастройки.Объект);
			СтруктураСтроки.Вставить("Параметр",     СтрокаНастройки.Параметр);
			СтруктураСтроки.Вставить("Использовать", СтрокаНастройки.Использовать);
			МассивНастроекОплаты.Добавить(СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	СтруктураНастроек.Вставить("МассивНастроекОплаты", МассивНастроекОплаты);
	
	// Добавим настройки учета услуг кап. ремонта и вариант распределения оплат.
	СтруктураНастроек.Вставить("СтруктураНастроекКапРемонта",                   мСтруктураНастроекКапРемонта);
	СтруктураНастроек.Вставить("ВариантРаспределенияОплатКапРемонт",            Объект.ВариантРаспределенияОплатКапРемонт);
	СтруктураНастроек.Вставить("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	СтруктураНастроек.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", Объект.НеРаспределятьОплатуНаДобровольноеСтрахование);
	
	СтруктураНастроек.Вставить("АдресНастроекУчетнойПолитикиЖКХ", АдресНастроекУчетнойПолитикиЖКХ);
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьНастройкиРаспределенияСтроки()

&НаСервереБезКонтекста
// Функция помещает настройки распределения строки в хранилище.
Функция ПоместитьНастройкиРаспределенияСтрокиВХранилище(СтруктураНастроек)
	
	мНастройкиУчетнойПолитикиТСЖ = ПолучитьНастройкиУчетнойПолитикиЖКХ(Ложь, СтруктураНастроек);
	
	СтруктураНастроек.Вставить("ВариантРаспределенияОплат",      мНастройкиУчетнойПолитикиТСЖ.ВариантРаспределенияОплат);
	СтруктураНастроек.Вставить("НастройкаРасчетаПени",           мНастройкиУчетнойПолитикиТСЖ.НастройкаРасчетаПени);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
// Функция загружает настройки распределения строки из хранилища.
Процедура ЗагрузитьНастройкиРаспределенияСтрокиИзХранилища(ТекущаяСтрока, АдресХранилищаНастроек)
	
	ЛицевойСчет = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока).Объект;
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	// Для всех строк одного лицевого счета в таблице "Лицевые счета" устанавливаем одинаковые настройки распределения,
	// так как по данному л/с распределение происходит по общей сумме оплаты данного л/с.
	НайденныеСтроки = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
	Для Каждого ТекущаяСтрокаПлатежа Из НайденныеСтроки Цикл
		
		ТекущаяСтрокаПлатежа.ВариантРаспределения           = СтруктураНастроек.ВариантРаспределения;
		ТекущаяСтрокаПлатежа.ВариантОплаты                  = СтруктураНастроек.ВариантОплаты;
		ТекущаяСтрокаПлатежа.РаспределятьПоУказаннымУслугам = СтруктураНастроек.РаспределятьПоУказаннымУслугам;
		
		// После закрытия формы настроек выполняется перераспределение оплаты,
		// результаты ручного редактирования сбрасываются, поэтому отключаем
		// признак ручного редактирования расшифровки оплаты.
		ТекущаяСтрокаПлатежа.ФлагРедактирования = Ложь;
		
		// Определяем вариант настроек распределения: "Автоматически" или нет.
		ТекущаяСтрокаПлатежа.ФлагРедактированияНастроек = ?(СтруктураНастроек.ВариантРаспределения = "", 1, 0);
		
	КонецЦикла;
	
	// Обновим настройки оплаты.
	НастройкиОбъекта = Объект.НастройкиОплаты.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
	Для Каждого ТекНастройка Из НастройкиОбъекта Цикл
		Объект.НастройкиОплаты.Удалить(Объект.НастройкиОплаты.Индекс(ТекНастройка));
	КонецЦикла;
	
	Для Каждого СтрокаЗадолженности Из СтруктураНастроек.МассивНастроекОплаты Цикл
		
		НоваяСтрока = Объект.НастройкиОплаты.Добавить();
		НоваяСтрока.Объект       = ЛицевойСчет;
		НоваяСтрока.Параметр     = СтрокаЗадолженности.Параметр;
		НоваяСтрока.Использовать = СтрокаЗадолженности.Использовать;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьНастройкиРаспределенияСтрокиИзХранилища()

&НаКлиенте
// Функция помещает расшифровку по строке в хранилище.
Функция ПоместитьРасшифровкуСтрокиВХранилище(ЛицевойСчет, СуммаОплаты)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Организация",        Объект.Организация);
	СтруктураНастроек.Вставить("ЛицевойСчет",        ЛицевойСчет);
	СтруктураНастроек.Вставить("СуммаОплаты",        СуммаОплаты);
	
	МассивРасшифровкиПоЛС = ПолучитьСтрокиРасшифровки(ЛицевойСчет);
	СтруктураНастроек.Вставить("РасшифровкаПлатежа", МассивРасшифровкиПоЛС);
	СтруктураНастроек.Вставить("ТекущийДокумент",    Объект.Ссылка);
	
	СтруктураНастроек.Вставить("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	СтруктураНастроек.Вставить("УслугаДобровольногоСтрахования",                УслугаДобровольногоСтрахования);
	// Передаем месяц начислений по добровольному страхованию для проверки корректности редактирования суммы оплаты по добровольному страхованию.
	СтруктураНастроек.Вставить("МесяцДобровольногоСтрахования",                 НачалоДня(КонецМесяца(ДобавитьМесяц(Объект.Дата, 1))));
	// Передаем сведения об оплаченном добровольном страховании, чтобы отредактировать их в случае, если пользователь изменит сумму оплаты
	// по добровольному страхованию.
	МассивДобровольногоСтрахования = ПолучитьСтрокиРасшифровкиСтрахования(ЛицевойСчет);
	СтруктураНастроек.Вставить("МассивДобровольногоСтрахования",                МассивДобровольногоСтрахования);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьРасшифровкуСтрокиВХранилище()

&НаКлиенте
// Функция загружает расшифровку по строке из хранилища.
Процедура ЗагрузитьРасшифровкуСтрокиИзХранилища(ЛицевойСчет, АдресХранилищаНастроек)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	// Обновим настройки оплаты.
	
	СтрокиРасшифровки = Объект.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
	Для Каждого ТекСтрока Из СтрокиРасшифровки Цикл
		Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа.Индекс(ТекСтрока));
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтруктураНастроек.РасшифровкаПлатежа Цикл
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	СтрокиДобровольногоСтрахования = Объект.СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	Для Каждого ТекСтрока Из СтрокиДобровольногоСтрахования Цикл
		Объект.СведенияОДобровольномСтраховании.Удалить(Объект.СведенияОДобровольномСтраховании.Индекс(ТекСтрока));
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтруктураНастроек.МассивДобровольногоСтрахования Цикл
		ЗаполнитьЗначенияСвойств(Объект.СведенияОДобровольномСтраховании.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьРасшифровкуСтрокиИзХранилища()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО ШТРИХКОДОМ

#Область ПроцедурыИФункцииРаботыСоШтрихкодом

&НаСервере
// Процедура обрабатывает штрих-код, который был прочитан при помощи сканера
// штрих-кодов или который был загружен из терминала сбора данных.
//
// Параметры:
//  Данные – <Строка> - строка, содержащая штрих-код.
//
Процедура ОбработатьШтрихКод(Знач Данные, Отказ = Ложь) Экспорт
	
	// Штрихкод не будем обрабатывать, если передано значение, отличное от строки
	// или пустая строка.
	Если Не ТипЗнч(Данные) = Тип("Строка") Или ПустаяСтрока(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Дата",                            Объект.Дата);
	СтруктураНастроек.Вставить("Организация",                     Объект.Организация);
	СтруктураНастроек.Вставить("АдресНастроекФормированияПДЖКХ",  АдресНастроекФормированияПДЖКХ);
	
	ДопПараметры = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруПараметровРазбораШК();
	ДопПараметры.ОбъектВывзоваМеханизмаРазбораШК = "Документы.КВП_РегистрацияОплаты";
	ДопПараметры.Организация                     = Объект.Организация;
	
	НастройкиФормированияПДОтказ = Ложь;
	НастройкиФормированияПД = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Объект.Организация, НастройкиФормированияПДОтказ);
	
	ДопПараметры.НастройкиФормированияПДЖКХОпределены     = НЕ НастройкиФормированияПДОтказ;
	ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	ДопПараметры.ПризнакОплатыПоКР                        = Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт;
	
	// Определяем формат считанного кода и производим его разбор.
	Если Не УПЖКХ_ПечатьКвитанцийСервер.ОбработатьИРазобратьШтрихКод(Данные, НастройкиФормированияПД, ДопПараметры) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = ДопПараметры.Организация;
		ОбработатьИзменениеОрганизации(Объект.Организация);
	ИначеЕсли Объект.Организация <> ДопПараметры.Организация Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Формат считанного штрихкода не соответствует настройкам формирования штрихкода для текущей организации.",,,, Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка на пустоту разреза по распределению оплат.
	Если ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта
	   И (Объект.ВариантРаспределенияОплатКапРемонт.Пустая() ИЛИ Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги) Тогда
		// Обрабатываем ситуацию, когда создается новый документ по Штрихкоду и ведется учет по капремонту
		Если ДопПараметры.ПризнакОплатыПоКР Тогда
			Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт;
		Иначе
			Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт;
		КонецЕсли;
		
	ИначеЕсли Не ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		// Выдаем предупреждение в случае, если раздельного учета по капремонту не ведется, но пришел Штрихкод по капремонту.
		Если ДопПараметры.ПризнакОплатыПоКР Тогда
			
			ТекстПредупреждения = НСтр("ru='Формат считанного штрихкода соответствует распределению на услуги капитального ремонта, но в Организации не ведется раздельный учет по услугам капитального ремонта.'") + Символы.ПС
								+ НСтр("ru='Распределение суммы оплаты будет произведено согласно текущим настройкам распределения.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем соответствие формата штрихкода варианту распределения оплат кап. ремонта,
	// если используется раздельный учет кап. ремонта.
	Если ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		ШтрихкодНеСоответствуетВариантуРаспределенияОплат = Ложь;
		Если Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
		   И ДопПараметры.ПризнакОплатыПоКР = Ложь Тогда
			
			ШтрихкодНеСоответствуетВариантуРаспределенияОплат = Истина;
			СтрокаПояснение = """Услуги, кроме кап. ремонта""";
			
		КонецЕсли;
		Если Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт
		   И ДопПараметры.ПризнакОплатыПоКР = Истина Тогда
			
			ШтрихкодНеСоответствуетВариантуРаспределенияОплат = Истина;
			СтрокаПояснение = """Услуги капитального ремонта""";
			
		КонецЕсли;
		
		Если ШтрихкодНеСоответствуетВариантуРаспределенияОплат Тогда
			
			ТекстОшибки = НСтр("ru='Формат считанного штрихкода не соответствует настройке ""Распределение на капремонт"".'") + Символы.ПС
						+ НСтр("ru='Создайте новый документ ""Регистрация оплат"" с вариантом распределения " + СтрокаПояснение + ".'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметры.Вставить("ОграничиватьУслугиДляРаспределения", мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	ДопПараметры.Вставить("СписокУслуг",                        мСтруктураНастроекКапРемонта.СписокУслуг);
	ДопПараметры.Вставить("ТипОграниченияСпискомУслуг",         ?(ДопПараметры.ПризнакОплатыПоКР, ВидСравнения.ВСписке, ВидСравнения.НеВСписке));
	
	СтруктураНастроек.Вставить("АдресНастроекУчетнойПолитикиЖКХ", АдресНастроекУчетнойПолитикиЖКХ);
	
	мНастройкиУчетнойПолитикиТСЖ = ПолучитьНастройкиУчетнойПолитикиЖКХ(Ложь, СтруктураНастроек);
	
	ДопПараметры.Вставить("Объект", ДопПараметры.ЛицевойСчет);
	
	НастройкиПлатежа = Новый ТаблицаЗначений;
	НастройкиПлатежа.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	НастройкиПлатежа.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(ДопПараметры.МесяцНачисления)
	   И мНастройкиУчетнойПолитикиТСЖ.РегистрацияОплатыПоШКНаУказанныйМесяц Тогда
		СтрокаНастроек                 = НастройкиПлатежа.Добавить();
		СтрокаНастроек.МесяцНачисления = ДопПараметры.МесяцНачисления;
	КонецЕсли;
	
	Если НастройкиПлатежа.Количество() = 0 Тогда
		НастройкиПлатежа = Неопределено;
	КонецЕсли;
	
	ДобавитьСтрокуОплатыПоОбъектуНаСервере(ДопПараметры, НастройкиПлатежа);
	
	Модифицированность = Истина;
	
	// Позиционируемся на новой строке, добавленной по штрихкоду.
	КоличествоСтрокЛицевыхСчетов = Объект.ЛицевыеСчета.Количество();
	Если КоличествоСтрокЛицевыхСчетов > 0 Тогда
		Элементы.ЛицевыеСчета.ТекущаяСтрока = Объект.ЛицевыеСчета[КоличествоСтрокЛицевыхСчетов - 1].ПолучитьИдентификатор();
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьШтрихКод()

&НаСервере
// Функция для получения таблицы по которым возможна печать чеков.
//
// Параметры:
//  ТекущаяСтрока - Структура - выделенная строка в табличной части документа "Лицевые счета".
//  ВыдаватьПредупреждение - Булево - выводить текст предупреждения или нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит таблицу объектов, по которым возможна печать. 
//
Функция ПолучитьТаблицуДляПечатиЧеков(ТекущаяСтрока = Неопределено, ВыдаватьПредупреждение = Ложь)
	
	Если ОперацииПоКассе(Объект.ВидОперации) ИЛИ ОперацииПоБанку(Объект.ВидОперации) Тогда 
	
		// Сформируем список ключевых колонок.
		КолонкиКлючей = ?(ОперацииПоКассе(Объект.ВидОперации) И мПечататьЧекиИзРегистрацииОплаты
		                  ИЛИ ОперацииПоБанку(Объект.ВидОперации), "Объект", "ДокументОплаты");
		
		// Сформируем список колонок для работы с табличной частью.
		Колонки = КолонкиКлючей + ", НомерЧекаККМ, Сумма, НомерСтроки";
		
		// Получаем список всех строк с ключами, которые нужно распечатать.
		Если ТекущаяСтрока = Неопределено Тогда
			СписокДляПечати = Объект.ЛицевыеСчета.Выгрузить(, Колонки);
		Иначе
			ПараметрыОтбора = Новый Структура(КолонкиКлючей);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока));
			СписокДляПечати = Объект.ЛицевыеСчета.Выгрузить(ПараметрыОтбора, Колонки);
		КонецЕсли;
		
		// Убираем из списка строки, у которых нет ПКО/РКО.
		Если ОперацииПоКассе(Объект.ВидОперации) И НЕ мПечататьЧекиИзРегистрацииОплаты Тогда 
			
			мТекстСообщенияОбОшибкеПриПечатиЧеков = "";
			// Получаем массив строк, в которых есть ПКО/РКО.
			МассивСтрок = Новый Массив;
			Для Каждого СтрокаДляПроверки Из СписокДляПечати Цикл
				Если ЗначениеЗаполнено(СтрокаДляПроверки.ДокументОплаты) Тогда
					МассивСтрок.Добавить(СтрокаДляПроверки);
				Иначе
					мТекстСообщенияОбОшибкеПриПечатиЧеков = мТекстСообщенияОбОшибкеПриПечатиЧеков + " В строке №" + СтрокаДляПроверки.НомерСтроки + " отсутствует документ оплаты: Чек на оплату не будет сформирован." + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(мТекстСообщенияОбОшибкеПриПечатиЧеков) Тогда
				Если ТекущаяСтрока = Неопределено Тогда
					мТекстСообщенияОбОшибкеПриПечатиЧеков = мТекстСообщенияОбОшибкеПриПечатиЧеков
														  + "Для формирования документов оплаты в указанных выше строках воспользуйтесь пунктом меню ""Документы оплаты -> Отразить оплаты"".";
				Иначе
					мТекстСообщенияОбОшибкеПриПечатиЧеков = мТекстСообщенияОбОшибкеПриПечатиЧеков
														  + "Для формирования документа оплаты в указанной выше строке воспользуйтесь пунктом меню ""Документы оплаты -> Отразить оплаты"".";
				КонецЕсли;
			КонецЕсли;
			
			СписокДляПечати = СписокДляПечати.Скопировать(МассивСтрок);
			
		КонецЕсли;
		
		// Проверим возможность печати по полученным строкам. Строки, печать которых невозможна - отсеем.
		СписокДляПечати = УдалитьСтрокиБезВозможностиПечати(КолонкиКлючей, СписокДляПечати);
		
		// Сворачиваем таблицу по ключевым колонкам. Номер чека тут уже должен быть нулевым.
		СписокДляПечати.Свернуть(КолонкиКлючей, "НомерЧекаККМ, Сумма");
		
		МассивДляПечати = Новый Массив;
		
		Для Каждого ТекСтрокаПечати Из СписокДляПечати Цикл
			
			СтруктураПечати = Новый Структура(КолонкиКлючей + ",НомерЧекаККМ,Сумма");
			ЗаполнитьЗначенияСвойств(СтруктураПечати, ТекСтрокаПечати);
			
			МассивДляПечати.Добавить(СтруктураПечати);
			
		КонецЦикла;
		
		Возврат МассивДляПечати;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
// Функция удаляет строки, по которым не возможна печать чеков.
//
// Параметры
//  СписокДляПечати - ТаблицаЗначений - содержит таблицу объектов, которые необходимо
//                 проверить на возможность печати.
//  ВыдаватьПредупреждение - Булево - выводить текст предупреждения или нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит таблицу объектов схожая по структуре, 
//                    с "СписокДляПечати", по которым возможна печать.
//
Функция УдалитьСтрокиБезВозможностиПечати(КолонкиКлючей, СписокДляПечати)
	
	// Создадим таблицу той же структуры, что и переданная.
	ТаблицаРезультата = СписокДляПечати.СкопироватьКолонки();
	
	// Сформируем таблицу с ключами проверки.
	ТаблицаДляПроверки = СписокДляПечати.Скопировать(, КолонкиКлючей);
	ТаблицаДляПроверки.Свернуть(КолонкиКлючей, "");
	
	// Проверим каждый ключ из полученной таблицы.
	СтруктПоиск = Новый Структура(КолонкиКлючей);
	Для Каждого СтрокаДляПроверки Из ТаблицаДляПроверки Цикл
		
		Если ОперацииПоКассе(Объект.ВидОперации) И НЕ мПечататьЧекиИзРегистрацииОплаты Тогда
			Если ОперацииПоПлатежнымКартам(Объект.ВидОперации) Тогда
				ВидДокумента = "ОплатаПлатежнойКартой";
			ИначеЕсли ОперацииВозврата(Объект.ВидОперации) Тогда
				ВидДокумента = "РасходныйКассовыйОрдер";
			Иначе
				ВидДокумента = "ПриходныйКассовыйОрдер";
			КонецЕсли;
			
			Если НЕ ТипЗнч(СтрокаДляПроверки.ДокументОплаты) = Тип("ДокументСсылка." + ВидДокумента) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктПоиск, СтрокаДляПроверки);
		СтрокиДляПроверки = СписокДляПечати.НайтиСтроки(СтруктПоиск);
		
		// Проверим возможность печати чека.
		Если ОперацииПоКассе(Объект.ВидОперации)
		  И мПечататьЧекиИзРегистрацииОплаты ИЛИ ОперацииПоБанку(Объект.ВидОперации) Тогда
			МожноПечатать = Истина;
			Для Каждого СтрокаДляПроверки Из СтрокиДляПроверки Цикл
				Если НЕ СтрокаДляПроверки.НомерЧекаККМ = 0 Тогда
					МожноПечатать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Для оптимизации в случае с документами проверяем сразу:
			// печать возможна только в случае, если в документе еще не производилась печать.
			МожноПечатать = СтрокаДляПроверки.ДокументОплаты.НомерЧекаККМ = 0;
		КонецЕсли;
		
		// Если печать возможна - копируем строки, если нет - выводим сообщение.
		Если МожноПечатать Тогда
			Для Каждого СтрокаДляПроверки Из СтрокиДляПроверки Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаРезультата.Добавить(), СтрокаДляПроверки);
			КонецЦикла;
		Иначе
			Если ОперацииПоКассе(Объект.ВидОперации) И мПечататьЧекиИзРегистрацииОплаты ИЛИ ОперацииПоБанку(Объект.ВидОперации) Тогда
				СтрокаОбъекта = "лицевому счету " + СтрокаДляПроверки.Объект;
				Сумма         = СтрокаДляПроверки.Сумма;
			Иначе
				СтрокаОбъекта = "документу " + СтрокаДляПроверки.ДокументОплаты;
				Сумма         = СтрокаДляПроверки.ДокументОплаты.СуммаДокумента;
			КонецЕсли;
			
			ТекстСообщения = "По " + СтрокаОбъекта + " уже есть распечатанный чек!
							|Для печати чека необходимо создать новый документ оплаты по текущему "
							+ СтрокаОбъекта + " на сумму """ + Формат(Сумма, "ЧДЦ=2") + """.";
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // УдалитьСтрокиБезВозможностиПечати()

&НаКлиенте
// Обработчик процедуры подключения оборудования для печати чеков.
//
Процедура РеквизитыОтправкиЧекаЗавершение(РеквизитыОтправкиЧека, ДопПараметры) Экспорт
	
	Если НЕ РеквизитыОтправкиЧека = Неопределено Тогда
		
		Если ДопПараметры.КонтактыОбязательны
		   И НЕ ЗначениеЗаполнено(РеквизитыОтправкиЧека.Телефон)
		   И НЕ ЗначениеЗаполнено(РеквизитыОтправкиЧека.АдресЭП) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Обязательно необходимо указать контакты получателя чека.");
			Возврат;
		КонецЕсли;
		
		ДанныеДляПечатиЧека = ДопПараметры.МассивЧеков[0];
		
		ДанныеДляПечатиЧека.ПокупательНомер = РеквизитыОтправкиЧека.Телефон;
		ДанныеДляПечатиЧека.ПокупательEmail = РеквизитыОтправкиЧека.АдресЭП;
		
		ДанныеДляПечатиЧека.Электронно      = НЕ РеквизитыОтправкиЧека.ПечататьЧек;
		
		Оповещение = Новый ОписаниеОповещения("НапечататьОдинЧекЗавершение", ЭтотОбъект, ДопПараметры);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
			УникальныйИдентификатор,
			ДанныеДляПечатиЧека,
			ДопПараметры.ИдентификаторУстройства,
			,,);
		
	КонецЕсли;
	
КонецПроцедуры // РеквизитыОтправкиЧекаЗавершение()

&НаКлиенте
// Обработчик результата печати текущего чека. Если в очереди есть данные для печати чека, то
// вызывает механизм печати следующего чека.
//
Процедура НапечататьОдинЧекЗавершение(РезультатВыполнения, ДопПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		
		ДанныеЧека = ДопПараметры.МассивЧеков[0];
		
		Отбор    = Новый Структура("Объект", ДанныеЧека.ЛицевойСчет);
		СтрокиЛС = Объект.ЛицевыеСчета.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока Из СтрокиЛС Цикл
			ТекСтрока.НомерЧекаККМ                  = НомерЧекаККМ;
			ТекСтрока.ИдентификаторФискальнойЗаписи = ДанныеЧека.ИдентификаторФискальнойЗаписи;
			ТекСтрока.ПробитыйЧек                   = ?(НомерЧекаККМ = 0, 1, 0); // Для обновления картинки.
		КонецЦикла;
		
		ДопПараметры.МассивЧеков.Удалить(0);
		ДопПараметры.Вставить("НомерЧекаККМ", НомерЧекаККМ);
		
		Если ДопПараметры.МассивЧеков.Количество() > 0 Тогда
			ПолучитьРеквизитыОтправкиЧекаПередПечатью(ДопПараметры);
		Иначе
			Модифицированность = Истина;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПЕЧАТИ НА ФИСКАЛЬНЫЙ РЕГИСТРАТОР

#Область ФункцииПечатиНаФискальныйРегистратор

&НаКлиенте
// Процедура для печати чеков.
//
// Параметры:
//  ТекущаяСтрока - Структура - выделенная строка в табличной части документа "Лицевые счета".
//  ВыдаватьПредупреждение - Булево - выводить текст предупреждения или нет.
//
Процедура НапечататьЧек(ТекущаяСтрока = Неопределено)
	
	// Получаем список для печати чеков
	СуммыПлатежей = ПолучитьТаблицуДляПечатиЧеков(ТекущаяСтрока);
	
	Если СуммыПлатежей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОперацииПоКассе(Объект.ВидОперации) И мПечататьЧекиИзРегистрацииОплаты
	  ИЛИ ОперацииПоБанку(Объект.ВидОперации) Тогда
		
		Если УПЖКХ_ТиповыеМетодыКлиент.ПроверитьВозможностьПечатиЧека(ЭтаФорма) Тогда
			
			// Получим список лицевых счетов, по которым не печатались чеки.
			СписокЛицевыхСчетов = ПолучитьСписокЛицевыхСчетовДляПечатиЧеков(СуммыПлатежей);
			
			Если СписокЛицевыхСчетов.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет данных для печати чеков.");
				Возврат;
			КонецЕсли;
			
			Если УПЖКХ_ТиповыеМетодыКлиент.ОбновитьРабочееМестоКлиента() Тогда
				ДопПараметры       = Новый Структура("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораУстройстваДляПечатиЧеков", ЭтотОбъект, ДопПараметры);
				
				ПоддерживаемыеТипыВО = Новый Массив();
				ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
				ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
				ПоддерживаемыеТипыВО.Добавить("ККТ");
				УПЖКХ_ТиповыеМетодыКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
																	  "Выберите фискальное устройство", "Фискальное устройство не подключено.");
			Иначе
				ТекстСообщения = "Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать();
		
		ОбновитьОтображениеДанных(Элементы.ЛицевыеСчета);
		
	Иначе
		
		Для Каждого ДанныеПечати Из СуммыПлатежей Цикл
			ПараметрыВыполненияКоманды = Новый Структура;
			Если ТипЗнч(ДанныеПечати.ДокументОплаты) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				ФормаДокумента = ПолучитьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта",
												Новый Структура("Ключ", ДанныеПечати.ДокументОплаты));
				ПараметрыВыполненияКоманды.Вставить("Источник", ФормаДокумента);
				УПЖКХ_ТиповыеМетодыКлиент.НапечататьЧекВыполнить(ПараметрыВыполненияКоманды);
				ФормаДокумента = Неопределено;
			ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ФормаДокумента = ПолучитьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
												Новый Структура("Ключ", ДанныеПечати.ДокументОплаты));
				ПараметрыВыполненияКоманды.Вставить("Источник", ФормаДокумента);
				УПЖКХ_ТиповыеМетодыКлиент.НапечататьЧекВыполнить(ПараметрыВыполненияКоманды);
				ФормаДокумента = Неопределено;
			ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОплаты) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
				ФормаДокумента = ПолучитьФорму("Документ.ОплатаПлатежнойКартой.Форма.ФормаДокументаОбщая",
								Новый Структура("Ключ", ДанныеПечати.ДокументОплаты));
				ПараметрыВыполненияКоманды.Вставить("Источник", ФормаДокумента);
				УПЖКХ_ТиповыеМетодыКлиент.НапечататьЧекВыполнить(ПараметрыВыполненияКоманды);
				ФормаДокумента = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПечатьСписаниеТоваров()

&НаКлиенте
// Функция формирует список лицевых счетов для печати чеков.
//
// Параметры:
//  СуммыПлатежей	 - Массив - суммы оплат по лицевым счетам.
// 
// Возвращаемое значение:
//   Список значений - список лицевых счетов.
//
Функция ПолучитьСписокЛицевыхСчетовДляПечатиЧеков(СуммыПлатежей)
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из СуммыПлатежей Цикл
		Если ТекущаяСтрока.НомерЧекаККМ = 0 Тогда
			СписокЛицевыхСчетов.Добавить(ТекущаяСтрока.Объект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции

&НаКлиенте
// Обработчик выбора устройства для печати чеков.
//
Процедура ОбработчикВыбораУстройстваДляПечатиЧеков(ИдентификаторУстройства, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства    = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	ДопПараметры = Новый Структура("СписокЛицевыхСчетов, ИдентификаторУстройства, ТипУстройства", ДопПараметры.СписокЛицевыхСчетов, ИдентификаторУстройства, ТипУстройства);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, ДопПараметры);
	
	Если ТипУстройства = "ККТ" Тогда
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Ложь);
	Иначе
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Получает данные по лицевым счетам для печати чеков и вызывает форму для ввода реквизитов
// для отправки чеков перед печатью.
// 
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, ДопПараметры) Экспорт
	
	ОписаниеОшибки = "";
	Если НЕ ПараметрыФискальногоУстройства.Результат Тогда
		
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
		
	ИначеЕсли ДопПараметры.ТипУстройства = "ККТ" Тогда
		ВерсияФормата = ПечатьФискальныхДокументовКлиент.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН,
																		 ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	Иначе
		ВерсияФормата = "1.1.0.0";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		МассивЧеков = Новый Массив;
		
	Иначе
		
		НомерСекции = 2;
		
		ТекущиеПараметрыПодключенияПО = Неопределено;
		Для Каждого ПараметрПодключенияПО ИЗ глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
			Если ПараметрПодключенияПО.Ссылка = ДопПараметры.ИдентификаторУстройства Тогда
				ТекущиеПараметрыПодключенияПО = ПараметрПодключенияПО;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТекущиеПараметрыПодключенияПО = Неопределено Тогда
			
			ТекущиеПараметрыПодключенияПО.ПараметрыПодключения.Вставить("ИдентификаторУстройства", ДопПараметры.ИдентификаторУстройства);
			
			МассивЧеков = СобратьДанныеЧековНаСервере(ДопПараметры.СписокЛицевыхСчетов, ТекущиеПараметрыПодключенияПО.ПараметрыПодключения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ТекстСообщения = "При подключении устройства произошла ошибка.
						 |Чек не напечатан на фискальном устройстве.
						 |Дополнительное описание:
						 |%ДополнительноеОписание%";
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли МассивЧеков.Количество() > 0 Тогда
		
		КонтактыОбязательны = Ложь;
		Если ПараметрыФискальногоУстройства.ВыходныеПараметры.Свойство("ПризнакРасчетовТолькоВИнтернет")
		   И ПараметрыФискальногоУстройства.ВыходныеПараметры.ПризнакРасчетовТолькоВИнтернет = Истина Тогда
			КонтактыОбязательны = Истина;
		КонецЕсли;
		
		ПараметрыПечатиЧека = Новый Структура("МассивЧеков, ИдентификаторУстройства, ВерсияФормата, ТипУстройства, КонтактыОбязательны",
											  МассивЧеков, ДопПараметры.ИдентификаторУстройства, ВерсияФормата, ДопПараметры.ТипУстройства, КонтактыОбязательны);
		
		ПолучитьРеквизитыОтправкиЧекаПередПечатью(ПараметрыПечатиЧека);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура для ККТ открывает форму для получения резвизитов отправки чека.
//
Процедура ПолучитьРеквизитыОтправкиЧекаПередПечатью(ПараметрыПечатиЧека)
	
	Контекст = Новый Структура();
	Контекст.Вставить("МассивЧеков",             ПараметрыПечатиЧека.МассивЧеков);
	Контекст.Вставить("ИдентификаторУстройства", ПараметрыПечатиЧека.ИдентификаторУстройства);
	Контекст.Вставить("ВерсияФормата",           ПараметрыПечатиЧека.ВерсияФормата);
	Контекст.Вставить("ТипУстройства",           ПараметрыПечатиЧека.ТипУстройства);
	Контекст.Вставить("КонтактыОбязательны",     ПараметрыПечатиЧека.КонтактыОбязательны);
	
	Если ПараметрыПечатиЧека.ТипУстройства = "ККТ" Тогда
		
		ФормаВводаРеквизитовОтправки = ПолучитьФорму("Документ.КВП_РегистрацияОплаты.Форма.РеквизитыОтправкиЧека", , ЭтотОбъект);
		
		// Дополняем к заголовоку окна лицевой счет.
		ЛицевойСчетСтрокой = " для лиц.счета """ + ПараметрыПечатиЧека.МассивЧеков[0].ЛицевойСчет + """.";
		ФормаВводаРеквизитовОтправки.Заголовок = "" + ФормаВводаРеквизитовОтправки.Заголовок + ЛицевойСчетСтрокой;
		
		ФормаВводаРеквизитовОтправки.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РеквизитыОтправкиЧекаЗавершение", ЭтотОбъект, Контекст);
		ФормаВводаРеквизитовОтправки.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ФормаВводаРеквизитовОтправки.Открыть();
	Иначе
		РеквизитыОтправкиЧека = Новый Структура("Телефон, АдресЭП, ПечататьЧек", "", "", ИСТИНА);
		РеквизитыОтправкиЧекаЗавершение(РеквизитыОтправкиЧека, Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Собирает данные по лицевым счетам для вывода на печать в чеке.
//
// Параметры:
//  СписокЛицевыхСчетов	  - Список значений	 - список лицевых счетов, по которым печатаются чеки.
//  ПараметрыПодключения  - Структура - параметры подключения ПО.
// 
// Возвращаемое значение:
//  Массив - массив структур данных по каждому лицевому счету.
//
Функция СобратьДанныеЧековНаСервере(СписокЛицевыхСчетов, ПараметрыПодключения)
	
	ОтборОбъектов = Новый Массив;
	ОтборОбъектов.Добавить(Новый Структура("Документ, ЛицевыеСчета", Объект.Ссылка, СписокЛицевыхСчетов));
	
	Возврат Документы.КВП_РегистрацияОплаты.СобратьДанныеЧеков(ОтборОбъектов, ПараметрыПодключения);
	
КонецФункции

&НаКлиенте
// Обработчик подключения сканера штрихкодов.
Процедура ОбработатьПодключениеСканераШтрихкода(РезультатПодключения, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодключения) = Тип("Структура") И РезультатПодключения.Результат = Ложь Тогда
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		ТекстСообщения = "При подключении сканера штрихкода произошла ошибка: ""%ОписаниеОшибки%"".";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПодключениеСканераШтрихкода()

&НаСервере
// Формирует массив структур данных об оплатах для вывода в фискальный чек.
//
Функция СформироватьДанныеОбОплатах(ОбъектЛС, ПараметрыУстройства, ВидСтавкиНДСИзПерсональныхНастроек, ОтражатьПениПоСтавкеБезНДС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга КАК Услуга,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма КАК Сумма,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени КАК Пени
	|ПОМЕСТИТЬ втИсходнаяТаблица
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
	|ГДЕ
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект = &Объект
	|	И КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма + КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходнаяТаблица.Услуга КАК Услуга,
	|	втИсходнаяТаблица.Сумма КАК Сумма,
	|	втИсходнаяТаблица.Пени КАК Пени,
	|	КВП_Услуги.Услуга КАК Номенклатура
	|ПОМЕСТИТЬ втИсходнаяТаблицаСНоменклатурой
	|ИЗ
	|	втИсходнаяТаблица КАК втИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО втИсходнаяТаблица.Услуга = КВП_Услуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходнаяТаблицаСНоменклатурой.Услуга КАК Услуга,
	|	втИсходнаяТаблицаСНоменклатурой.Сумма КАК Сумма,
	|	втИсходнаяТаблицаСНоменклатурой.Пени КАК Пени,
	|	НоменклатураСправочник.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	НоменклатураСправочник.Услуга КАК УслугаПризнак
	|ПОМЕСТИТЬ втИсходнаяТаблицаСДопДанными
	|ИЗ
	|	втИсходнаяТаблицаСНоменклатурой КАК втИсходнаяТаблицаСНоменклатурой
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО втИсходнаяТаблицаСНоменклатурой.Номенклатура = НоменклатураСправочник.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(втИсходнаяТаблицаСДопДанными.Услуга) КАК Услуга,
	|	втИсходнаяТаблицаСДопДанными.Сумма КАК Сумма,
	|	втИсходнаяТаблицаСДопДанными.Пени КАК Пени,
	|	ЕСТЬNULL(втИсходнаяТаблицаСДопДанными.ВидСтавкиНДС, ВЫБОР
	|			КОГДА &ОплатаКапремонта
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|			ИНАЧЕ &ВидСтавкиНДСИзПерсональныхНастроек
	|		КОНЕЦ) КАК ВидСтавкиНДС,
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьПризнакПредметаРасчета
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ЕСТЬNULL(втИсходнаяТаблицаСДопДанными.УслугаПризнак, ИСТИНА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	ВЫБОР
	|		КОГДА &ВыводитьПризнакСпособаРасчета
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПризнакСпособаРасчета
	|ПОМЕСТИТЬ втТаблицаРасшифровка
	|ИЗ
	|	втИсходнаяТаблицаСДопДанными КАК втИсходнаяТаблицаСДопДанными
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаРасшифровка.Услуга КАК Услуга,
	|	втТаблицаРасшифровка.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	втТаблицаРасшифровка.Сумма КАК Сумма,
	|	ЛОЖЬ КАК ЭтоПени,
	|	втТаблицаРасшифровка.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	втТаблицаРасшифровка.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	|ПОМЕСТИТЬ втДанныеПоВидамОплат
	|ИЗ
	|	втТаблицаРасшифровка КАК втТаблицаРасшифровка
	|ГДЕ
	|	втТаблицаРасшифровка.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаРасшифровка.Услуга,
	|	ВЫБОР
	|		КОГДА &ОтражатьПениПоСтавкеБезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|		ИНАЧЕ втТаблицаРасшифровка.ВидСтавкиНДС
	|	КОНЕЦ,
	|	втТаблицаРасшифровка.Пени,
	|	ИСТИНА,
	|	втТаблицаРасшифровка.ПризнакПредметаРасчета,
	|	втТаблицаРасшифровка.ПризнакСпособаРасчета
	|ИЗ
	|	втТаблицаРасшифровка КАК втТаблицаРасшифровка
	|ГДЕ
	|	втТаблицаРасшифровка.Пени > 0";
	
	// Если чек печатается с расшифровкой, то получим суммы в разрезе услуг и ставок НДС,
	// если без расшифровки, то получим суммы только в разрезе ставок НДС.
	Если мПечататьЧекиСРасшифровкойПоУслугам Тогда
		
		ТекстЗапроса = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеПоВидамОплат.Услуга КАК Услуга,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	СУММА(втДанныеПоВидамОплат.Сумма) КАК Сумма,
		|	втДанныеПоВидамОплат.ЭтоПени КАК ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
		|ИЗ
		|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеПоВидамОплат.Услуга,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета";
		
	Иначе
		
		ТекстЗапроса = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеПоВидамОплат.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	СУММА(втДанныеПоВидамОплат.Сумма) КАК Сумма,
		|	втДанныеПоВидамОплат.ЭтоПени КАК ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
		|ИЗ
		|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета";
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Запрос.Текст);
	МассивСтрок.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивСтрок);
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа",                 Объект.РасшифровкаПлатежа.Выгрузить());
	Запрос.УстановитьПараметр("ВидСтавкиНДСИзПерсональныхНастроек", ВидСтавкиНДСИзПерсональныхНастроек);
	Запрос.УстановитьПараметр("Объект",                             ОбъектЛС);
	Запрос.УстановитьПараметр("Ссылка",                             Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтражатьПениПоСтавкеБезНДС",         ОтражатьПениПоСтавкеБезНДС);
	Запрос.УстановитьПараметр("ВыводитьПризнакСпособаРасчета",      ПараметрыУстройства.ВыводитьПризнакСпособаРасчета ИЛИ ПараметрыУстройства.ЭтоВерсия105);
	Запрос.УстановитьПараметр("ВыводитьПризнакПредметаРасчета",     ПараметрыУстройства.ВыводитьПризнакПредметаРасчета ИЛИ ПараметрыУстройства.ЭтоВерсия105);
	Запрос.УстановитьПараметр("ОплатаКапремонта",                   Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт);
	
	ТаблицаРасшифровка = Запрос.Выполнить().Выгрузить();
	
	МассивСумм = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ТаблицаРасшифровка Цикл
		
		СтруктураСтроки = Новый Структура;
		
		Если мПечататьЧекиСРасшифровкойПоУслугам Тогда
			
			Если ТекущаяСтрока.ЭтоПени Тогда
				СтруктураСтроки.Вставить("Услуга", ТекущаяСтрока.Услуга + " (пени)");
			Иначе
				СтруктураСтроки.Вставить("Услуга", ТекущаяСтрока.Услуга);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Сумма",                  ТекущаяСтрока.Сумма);
		СтруктураСтроки.Вставить("ПризнакПредметаРасчета", ТекущаяСтрока.ПризнакПредметаРасчета);
		СтруктураСтроки.Вставить("ПризнакСпособаРасчета",  ТекущаяСтрока.ПризнакСпособаРасчета);
		
		Если ТекущаяСтрока.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС Тогда
			СтавкаНДС = Неопределено;
		Иначе
			СтавкаНДС = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.СтавкаНДС(ТекущаяСтрока.ВидСтавкиНДС, Объект.Дата));
		КонецЕсли;
		
		СтруктураСтроки.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураСтроки.Вставить("ЭтоПени",   ТекущаяСтрока.ЭтоПени);
		
		МассивСумм.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивСумм;
	
КонецФункции // СформироватьДанныеОбОплатах()

#КонецОбласти

///////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЦЕДУРАМИ МОДУЛЯ ДОКУМЕНТА

#Область РаботаСПроцедурамиМодуляДокумента

&НаСервере
// Добавляет строку оплаты по объекту.
Процедура ДобавитьСтрокуОплатыПоОбъектуНаСервере(Парам, НастройкиПлатежа)
	
	ПодготовитьКэшДополнительныхДанныхНаСервере();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РегистрацияОплаты"));
	ДокументОбъект.ДобавитьСтрокуОплатыПоОбъекту(Парам, НастройкиПлатежа);
	ДокументОбъект.ОбработатьСтрокиОплат(Ложь);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДополнительныеДанныеПоЛицевымСчетамИзКэша();
	
КонецПроцедуры

&НаСервере
// Добавляет строку оплаты по объекту.
Процедура СформироватьДокументыОтраженияОплатНаСервере(ПерезаполнятьСформированныеДокументы)
	
	ПодготовитьКэшДополнительныхДанныхНаСервере();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РегистрацияОплаты"));
	ДокументОбъект.СформироватьДокументыОтраженияОплат(ПерезаполнятьСформированныеДокументы);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДополнительныеДанныеПоЛицевымСчетамИзКэша();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	ЗаполнитьДопДанныеВТаблице();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установка условного оформления формы.
	УстановитьУсловноеОформление();
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Дата",                            Объект.Дата);
	СтруктураНастроек.Вставить("Организация",                     Объект.Организация);
	СтруктураНастроек.Вставить("АдресНастроекУчетнойПолитикиЖКХ", АдресНастроекУчетнойПолитикиЖКХ);
	СтруктураНастроек.Вставить("АдресНастроекФормированияПДЖКХ",  АдресНастроекФормированияПДЖКХ);
	
	ПолучитьНастройкиУчетнойПолитикиЖКХ(Истина, СтруктураНастроек);
	ПолучитьНастройкиФормированияПДЖКХ(Истина, СтруктураНастроек);
	
	ПараметрКопирования = Параметры.ЗначениеКопирования;
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.ИсточникОплаты = УПЖКХ_ОбщегоНазначенияСервер.ЗаполнениеИсточникаОплаты(Объект.Организация,
																						"КВП_РегистрацияОплаты", Объект.ВидОперации);
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
		ВосстановитьНастройкиНаСервере();
		
		Если ЗначениеЗаполнено(ПараметрКопирования) Тогда
			ЗаполнитьДопДанныеВТаблице();
		КонецЕсли;
	Иначе
		ЗаполнитьДопДанныеВТаблице();
	КонецЕсли;
	
	НастройкиУчетаДобровольногоСтрахования        = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетаДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетаДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	мПечататьЧекиИзРегистрацииОплаты       = Константы.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты.Получить();
	мПечататьЧекиПриОплатеБанковскойКартой = Константы.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой.Получить();
	мПечататьЧекиСРасшифровкойПоУслугам    = Константы.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам.Получить();
	
	Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка = 
		(УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыДокумента_КВП_РегистрацияОплаты",
																			"ОтображатьРасшифровку") = Истина);
	
	// Получение настроек учета кап. ремонта.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	Если Объект.ВариантРаспределенияОплатКапРемонт.Пустая() Тогда
		
		Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ПустаяСсылка();
		Иначе
			Объект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка списка выбора поля "ВариантРаспределенияОплатКапРемонт".
	// Список выбора поля нужно устанавливать после первоначального заполнения реквизита,
	// так как список выбора зависит от текущего значения реквизита.
	УстановитьСписокВыбораВариантаРаспределенияОплатКапРемонт(ЭтаФорма);
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	
	// Проверяем подключение сканера штрихкода.
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПодключениеСканераШтрихкода", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.НачатьПодключениеОборудованиеПоТипу(Оповещение, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
	// Конец МеханизмВнешнегоОборудования
	
	Если ЗначениеЗаполнено(ПараметрКопирования) Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.РасшифровкаРассрочки.Очистить();
		Объект.СведенияОДобровольномСтраховании.Очистить();
		
		ТекстВопроса = "Перед распределением сумм оплаты необходимо записать документ. Выполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПриОткрытии", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре-обработчике "ПриОткрытии()".
Процедура ОбработатьРезультатВопросаПриОткрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Для Каждого СтрокаЛицевогоСчета Из Объект.ЛицевыеСчета Цикл
			РаспределитьСуммуОбъекта(СтрокаЛицевогоСчета.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаПриОткрытии()

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	
	// ВводДоступен() - Истина, только в том случае, если данная форма активна.
	// Во всех остальных случаях Ложь, даже при трассировке конфигурации (при пошаговой отладке).
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			ТекКод = Неопределено;
			
			// Обработку параметров заключим в блок попытки.
			Попытка
				Если Параметр[1] = Неопределено Тогда
					ТекКод = Параметр[0];
				Иначе
					ТекКод = Параметр[1][1];
				КонецЕсли;
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Возникла ошибка при обработке данных штрихкода!");
				Возврат;
			КонецПопытки;
			
			Отказ = Ложь;
			ОбработатьШтрихКод(ТекКод, Отказ);
			
			Если НЕ Отказ Тогда
				ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
				Если ТекущаяСтрока <> Неопределено Тогда
					ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.РасшифровкаРассрочки.Сортировать("МесяцРассрочки");
	
	// Для организаций, у которых раздельный учет не ведется,
	// заполним вариант распределения оплат значением "Все услуги", если реквизит пуст.
	// Для организаций, у которых раздельный учет ведется, вариант распределения обязательно должен быть заполнен.
	// Получение настроек учета кап. ремонта.
	Если Объект.ВариантРаспределенияОплатКапРемонт.Пустая() Тогда
		
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
		Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено ""Распределение на кап. ремонт""!", Отказ);
			Возврат;
		Иначе
			ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги");
		КонецЕсли;
		
	КонецЕсли;
	
	// Подключим обработчик ожидания, который проверяет, были ли обнаружены ошибочные ("фантомные") расшифровки
	// платежа в табличной части "Расшифровка платежа". Если фантомные расшифровки обнаружены, то запись документа
	// не выполняется, а обработчик предлагает пользователю до выполнения записи либо удалить ошибочные расшифровки,
	// либо дополнить основную табличную часть документа оплатами по "фантомным расшифровкам".
	ПодключитьОбработчикОжидания("ОбработчикПроверитьНаличиеФантомныхРасшифровок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик ожидания - проверяет наличие "фантомных расшифровок" в расшифровке платежа
// и предлагает пользователю выбрать одно из рекомендуемых действий: либо удалить ошибочные расшифровки,
// либо дополнить основную табличную часть документа данными по оплатам "фантомных расшифровок".
// Запускается обработчик ожидания в процедуре обработчике события формы "ПередЗаписью"
// и отключается при первом срабатывании.
// 
Процедура ОбработчикПроверитьНаличиеФантомныхРасшифровок()
	
	Если СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.Количество() > 0 Тогда
		
		// Если список "фантомных" лицевых счетов не пустой, то предложим пользователю 2 варианта поведения:
		//  - добавить лицевые счета в основную таблицу оплат;
		//  - удалить ошибочные расшифровки платежа по таким лицевым счетам.
		
		ТекстВопроса = "Документ не может быть записан, так как в расшифровке платежа есть лицевые счета, отсутствующие 
						|в основной таблице оплат! Укажите, что необходимо сделать с такими лицевыми счетами.";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ДополнитьОплаты",    "Добавить в основную таблицу оплат");
		СписокКнопок.Добавить("УдалитьРасшифровки", "Удалить из расшифровки");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтотОбъект),
												ТекстВопроса,
												СписокКнопок, ,
												КодВозвратаДиалога.Отмена);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикПроверитьНаличиеФантомныхРасшифровок()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ПередЗаписью()".
// 
Процедура ОбработатьРезультатВопросаПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивОшибочныхЛицевыхСчетовРасшифровкиПлатежа = СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.ВыгрузитьЗначения();
	СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.Очистить();
	
	Если РезультатВопроса = "УдалитьРасшифровки" Тогда
		
		УдалитьОшибочныеРасшифровкиПлатежаНаСервере(МассивОшибочныхЛицевыхСчетовРасшифровкиПлатежа);
		Модифицированность = Истина;
		
	ИначеЕсли РезультатВопроса = "ДополнитьОплаты" Тогда
		
		ДополнитьОплатыИзРасшифровкиПлатежаНаСервере(МассивОшибочныхЛицевыхСчетовРасшифровкиПлатежа);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

&НаСервере
// Функция-прослойка между клиент-серверными вызовами. Вызывает процедуру по получению списка
// "фантомных" лицевых счетов, т.е. тех лицевых счетов, данные по оплатам которых присутствуют
// в табличной части "Расшифровка платежа", но отсутствуют в табличной части "Лицевые счета".
// 
Функция ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежаНаСервере()
	
	Возврат Документы.КВП_РегистрацияОплаты.ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа(Объект.ЛицевыеСчета, Объект.РасшифровкаПлатежа);
	
КонецФункции // ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежаНаСервере()

&НаСервере
// Процедура-прослойка между клиент-серверными вызовами. Вызывает процедуру по удалению
// из табличной части "Расшифровка платежа" данных по оплатам лицевых счетов, которые в ней присутствуют,
// но при этом отсутствуют в табличной части "Лицевые счета".
// 
Процедура УдалитьОшибочныеРасшифровкиПлатежаНаСервере(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа)
	
	Документы.КВП_РегистрацияОплаты.УдалитьОшибочныеРасшифровкиПлатежа(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа, Объект.РасшифровкаПлатежа);
	
КонецПроцедуры // УдалитьОшибочныеРасшифровкиПлатежаНаСервере()

&НаСервере
// Процедура-прослойка между клиент-серверными вызовами. Вызывает процедуру по дополнению
// табличной части "Лицевые счета" данными по оплатам лицевых счетов, которые в ней отсутствуют,
// но при этом присутствуют в табличной части "Расшифровка платежа".
// 
Процедура ДополнитьОплатыИзРасшифровкиПлатежаНаСервере(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа)
	
	Документы.КВП_РегистрацияОплаты.ДополнитьОплатыИзРасшифровкиПлатежа(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа, Объект.РасшифровкаПлатежа, Объект.ЛицевыеСчета, Объект.Дата);
	
КонецПроцедуры // ДополнитьОплатыИзРасшифровкиПлатежаНаСервере()

&НаСервере
// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьКэшДополнительныхДанныхНаСервере();
	
	// Получим список "фантомных" лицевых счетов, т.е. тех лицевых счетов, данные по оплатам которых присутствуют
	// в табличной части "Расшифровка платежа", но отсутствуют в табличной части "Лицевые счета".
	СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.ЗагрузитьЗначения(ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежаНаСервере());
	
	Если СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	ЗаполнитьДополнительныеДанныеПоЛицевымСчетамИзКэша();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОтображатьРасшифровку", Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка);
	СтруктураДанных.Вставить("ВидОплаты",             Объект.ВидОплаты);
	
	СохранитьНастройкиНаСервере(СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");

	УПЖКХ_ТиповыеМетодыКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Дата",                            Объект.Дата);
	СтруктураНастроек.Вставить("Организация",                     Объект.Организация);
	СтруктураНастроек.Вставить("АдресНастроекУчетнойПолитикиЖКХ", АдресНастроекУчетнойПолитикиЖКХ);
	СтруктураНастроек.Вставить("АдресНастроекФормированияПДЖКХ",  АдресНастроекФормированияПДЖКХ);
	
	ПолучитьНастройкиУчетнойПолитикиЖКХ(Истина, СтруктураНастроек);
	ПолучитьНастройкиФормированияПДЖКХ(Истина, СтруктураНастроек);
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////
// Обработчики изменения реквизита "Организация".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("НоваяОрганизация", ВыбранноеЗначение);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры),
					   "При изменении организации расшифровка платежей будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Нет);
	Иначе
		ОбработатьИзменениеОрганизации(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-завершение обработчика события "ОбработкаВыбора" поля "Организация".
Процедура ОрганизацияОбработкаВыбораЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеОрганизации(ДопПараметры.НоваяОрганизация);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияОбработкаВыбораЗавершение()

&НаСервере
// Процедура, возникающая после изменения организации.
//
Процедура ОбработатьИзменениеОрганизации(НоваяОрганизация)
	
	// Устанавливаем значение новой организации принудительно.
	Объект.Организация = НоваяОрганизация;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Дата",                            Объект.Дата);
	СтруктураНастроек.Вставить("Организация",                     Объект.Организация);
	СтруктураНастроек.Вставить("АдресНастроекУчетнойПолитикиЖКХ", АдресНастроекУчетнойПолитикиЖКХ);
	СтруктураНастроек.Вставить("АдресНастроекФормированияПДЖКХ",  АдресНастроекФормированияПДЖКХ);
	
	ПолучитьНастройкиУчетнойПолитикиЖКХ(Истина, СтруктураНастроек);
	ПолучитьНастройкиФормированияПДЖКХ(Истина, СтруктураНастроек);
	
	// Получение настроек учета кап. ремонта.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Объект.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ПустаяСсылка");
	Иначе
		Объект.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги");
	КонецЕсли;
	
	// Очистка таблиц документа.
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.НастройкиОплаты.Очистить();
	Объект.РасшифровкаРассрочки.Очистить();
	Объект.СведенияОДобровольномСтраховании.Очистить();
	
	// Очищаем дерево платежей на форме.
	ДеревоПлатежей.ПолучитьЭлементы().Очистить();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОбработатьИзменениеОрганизации()

////////////////////////////////////////////////////
// Обработчики изменения реквизита
// "Вариант распределения оплат".

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает список выбора поля "ВариантРаспределенияОплатКапРемонт".
//
Процедура УстановитьСписокВыбораВариантаРаспределенияОплатКапРемонт(Форма, ВыбранныйВариантРаспределенияОплатКапРемонт = Неопределено)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Определение списка выбора варианта оплаты по кап.ремонту.
	Элементы.ВариантРаспределенияОплатКапРемонт.СписокВыбора.Очистить();
	Элементы.ВариантРаспределенияОплатКапРемонт.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт"));
	Элементы.ВариантРаспределенияОплатКапРемонт.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт"));
	
	// Для проверки текущего варианта распределения сначала берем значение из реквизита,
	// но если значение передано в параметрах процедуры, то берем уже его.
	ТекущийВариантРаспределенияОплатКапРемонт = Объект.ВариантРаспределенияОплатКапРемонт;
	Если Не ВыбранныйВариантРаспределенияОплатКапРемонт = Неопределено Тогда
		ТекущийВариантРаспределенияОплатКапРемонт = ВыбранныйВариантРаспределенияОплатКапРемонт;
	КонецЕсли;
	
	// Если текущий вариант распределения "Все услуги", то добавим его в список выбора.
	// В противном случае вариант "Все услуги" будет скрыт, так как при раздельном учете капремонта
	// должны быть только два основных варианта распределения на капремонт и не на капремонт.
	Если ТекущийВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги") Тогда
		Элементы.ВариантРаспределенияОплатКапРемонт.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ВариантРаспределенияОплатКап".
Процедура ВариантРаспределенияОплатКапРемонтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Объект.ВариантРаспределенияОплатКапРемонт Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			
			ДопПараметры = Новый Структура("ИсходныйВариант, ВыбранноеЗначение", Объект.ВариантРаспределенияОплатКапРемонт, ВыбранноеЗначение);
			ПоказатьВопрос(Новый ОписаниеОповещения("ВариантРаспределенияОплатКапРемонтОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры),
						   "При изменении распределения на кап. ремонт настройки распределения, документы отражения и расшифровка платежей будут очищены. Продолжить?",
						   РежимДиалогаВопрос.ДаНет, 
						   ,
						   КодВозвратаДиалога.Нет);
		Иначе
			ОбработатьИзменениеВариантаРаспределенияОплатКапРемонт(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-завершение обработчика события "ОбработкаВыбора" поля "ВариантРаспределенияОплатКапРемонт".
Процедура ВариантРаспределенияОплатКапРемонтОбработкаВыбораЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеВариантаРаспределенияОплатКапРемонт(ДопПараметры.ВыбранноеЗначение);
	Иначе
		Объект.ВариантРаспределенияОплатКапРемонт = ДопПараметры.ИсходныйВариант;
	КонецЕсли;
	
КонецПроцедуры // ВариантРаспределенияОплатКапРемонтОбработкаВыбораЗавершение()

&НаКлиенте
// Процедура, возникающая после изменения варианта распределения оплат по кап. ремонту.
//
Процедура ОбработатьИзменениеВариантаРаспределенияОплатКапРемонт(ВыбранноеЗначение = Неопределено)
	
	// Установка списка выбора поля "ВариантРаспределенияОплатКапРемонт".
	// Список выбора поля нужно обновить после изменения значения реквизита,
	// так как список выбора зависит от текущего значения реквизита.
	УстановитьСписокВыбораВариантаРаспределенияОплатКапРемонт(ЭтаФорма, ВыбранноеЗначение);
	
	ОчиститьДанныеВДокументе();
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт") Тогда
		Элементы.НеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = Ложь;
	Иначе
		Элементы.НеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = ВестиУчетНачисленийПоДобровольномуСтрахованию;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеОрганизации()

////////////////////////////////////////////////////
// Обработчики изменения реквизитов

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИсточникОплаты = УПЖКХ_ОбщегоНазначенияСервер.ЗаполнениеИсточникаОплаты(Объект.Организация,
																						"КВП_РегистрацияОплаты", Объект.ВидОперации);
		ВосстановитьНастройкиНаСервере();
	КонецЕсли;
	
	ПроверитьСоответствиеСозданныхДокументовОплатыИВидаОперации();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОператорПлатежей".
Процедура ОператорПлатежейПриИзменении(Элемент)
	
	// Проверим документ расчета, подходит ли он для выбранного оператора.
	Если ЗначениеЗаполнено(Объект.ДокументРасчетаСОператоромПлатежей) Тогда
		
		СписокКонтрагентов = Новый СписокЗначений();
		Если ТипЗнч(Объект.ДокументРасчетаСОператоромПлатежей) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			СписокКонтрагентов.Добавить(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(
				Объект.ДокументРасчетаСОператоромПлатежей, "Контрагент"));
		КонецЕсли;
		
		Если СписокКонтрагентов.НайтиПоЗначению(Объект.ОператорПлатежей) = Неопределено Тогда
			Объект.ДокументРасчетаСОператоромПлатежей = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ДоговорОператораПлатежей = ПолучитьДоговорОператораПлатежейНаСервере(Объект.ОператорПлатежей, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДокументРасчетаСОператоромПлатежей".
Процедура ДокументРасчетаСОператоромПлатежейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если для документа уже определен тип, то откроем форму списка
	// нужного вида документов.
	Если Не Объект.ДокументРасчетаСОператоромПлатежей = Неопределено Тогда
		Если ТипЗнч(Объект.ДокументРасчетаСОператоромПлатежей) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
			Если ЗначениеЗаполнено(Объект.ОператорПлатежей) Тогда
				СтруктураОтбора.Вставить("Контрагент", Объект.ОператорПлатежей);
			КонецЕсли;
			ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаВыбора",
							Новый Структура("Отбор", СтруктураОтбора),
							Элемент,,,,
							Новый ОписаниеОповещения("ОбработатьРезультатВыбораДокументРасчетаСОператоромПлатежейНачалоВыбора", ЭтаФорма, СтруктураОтбора),
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ДокументРасчетаСОператоромПлатежейНачалоВыбора()".
Процедура ОбработатьРезультатВыбораДокументРасчетаСОператоромПлатежейНачалоВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры.Свойство("Контрагент") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.ОператорПлатежей = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Контрагент");
		Объект.ДоговорОператораПлатежей = ПолучитьДоговорОператораПлатежейНаСервере(Объект.ОператорПлатежей, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораДокументРасчетаСОператоромПлатежейНачалоВыбора()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаПомещение".
Процедура ЛицевыеСчетаЗданиеПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ЛицевыеСчетаПомещение".
Процедура ЛицевыеСчетаПомещениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаВладелец".
Процедура ЛицевыеСчетаВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ЛицевыеСчетаВладелец".
Процедура ЛицевыеСчетаВладелецОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЛицевыеСчетаФлагРедактированияНастроек" Тогда
		
		НачатьИзменениеНастройкиРаспределенияСтрокиОплаты();
		
	ИначеЕсли Поле.Имя = "ЛицевыеСчетаПробитыйЧек" Тогда
		
		ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.НомерЧекаККМ = 0 И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторФискальнойЗаписи) Тогда
			
			МассивКлюча = Новый Массив;
			МассивКлюча.Добавить(Новый Структура("ДокументОснование, ИдентификаторЗаписи", Объект.Ссылка, ТекущиеДанные.ИдентификаторФискальнойЗаписи));
			
			ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", Новый Структура("Ключ", Новый("РегистрСведенийКлючЗаписи.ФискальныеОперации", МассивКлюча)));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПриАктивизацииСтроки(Элемент)
	
	// Чтобы при открытии формы данный обработчик не вызывался дважды, будем запоминать текущую активную строку.
	Если Элементы.ЛицевыеСчета.ТекущиеДанные = ПредыдущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяСтрока = Элементы.ЛицевыеСчета.ТекущиеДанные;
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиЛицевыеСчета", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииПоКассе = ОперацииПоКассе(Объект.ВидОперации);
	ОперацииПоБанку = ОперацииПоБанку(Объект.ВидОперации);
	
	Если ОперацииПоКассе ИЛИ ОперацииПоБанку Тогда
		
		// Получаем номер ККМ в зависимости от способа печати чеков.
		ТекущийНомерЧекаККМ = ?(ОперацииПоКассе И мПечататьЧекиИзРегистрацииОплаты ИЛИ ОперацииПоБанку,
								ТекСтрока.НомерЧекаККМ,
								?(ЗначениеЗаполнено(ТекСтрока.ДокументОплаты),
									УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.ДокументОплаты, ТекСтрока.НомерЧекаККМ), 0));
		
		Если НЕ ТекущийНомерЧекаККМ = 0 Тогда
			
			ТекстВопроса = "На лицевой счет " + Строка(ТекСтрока.Объект) + " был распечатан чек! Удалить строку?";
			
			ДопПараметры = Новый Структура("Элемент, ТекСтрока", Элемент, ТекСтрока);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЛицевыеСчетаПередУдалением", ЭтаФорма, ДопПараметры),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет,,
						   КодВозвратаДиалога.Нет);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЛицевыеСчетаПередУдалениемПродолжение(Элемент, ТекСтрока);
	
КонецПроцедуры // ЛицевыеСчетаПередУдалением()

&НаКлиенте
// Обработка результата вопроса, вызваного в процедуре "ЛицевыеСчетаПередУдалением()".
Процедура ОбработатьРезультатВопросаЛицевыеСчетаПередУдалением(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЛицевыеСчетаПередУдалениемПродолжение(ДополнительныеПараметры.Элемент,
										  ДополнительныеПараметры.ТекСтрока);
	
КонецПроцедуры // ОбработатьРезультатВопросаЛицевыеСчетаПередУдалением()

&НаКлиенте
// Процедура-продолжение процедуры "ЛицевыеСчетаПередУдалением()".
Процедура ЛицевыеСчетаПередУдалениемПродолжение(Элемент, ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЛС = Новый Массив;
	Для Каждого СтрокаЛицевойСчет Из Объект.ЛицевыеСчета Цикл
		Если СтрокаЛицевойСчет.Объект = ТекСтрока.Объект Тогда
			СтрокиЛС.Добавить(СтрокаЛицевойСчет);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиЛС.Количество() > 1 Тогда
		
		ТекСтрока.Сумма = 0;
		РаспределитьСуммуОбъекта(Элемент.ТекущаяСтрока);
		Если ТекСтрока.ФлагРедактирования Тогда
			Для Каждого ТекСтрокаЛС Из СтрокиЛС Цикл
				ТекСтрокаЛС.ФлагРедактирования = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		УдалитьРасшифровкуПоСтрокеОбъекта(Элемент.ТекущаяСтрока);
		
		// Решили в оптимизационных целях вместо отбора средствами платформы ".НайтиСтроки(Новый Структура(...))"
		// использовать полный перебор строк табличной части. В итоге при удалении первой какой-либо строки
		// происходит замедление выполнения операции, зато все последующие удаления происходят мгновенно, за счет
		// кэширования самой платформы.
		НастройкиОплатыЛС = Новый Массив;
		Для Каждого СтрокаНастройки Из Объект.НастройкиОплаты Цикл
			Если СтрокаНастройки.Объект = ТекСтрока.Объект Тогда
				НастройкиОплатыЛС.Добавить(СтрокаНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаНастройки Из НастройкиОплатыЛС Цикл
			Объект.НастройкиОплаты.Удалить(Объект.НастройкиОплаты.Индекс(СтрокаНастройки));
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.ЛицевыеСчета.Удалить(Объект.ЛицевыеСчета.Индекс(ТекСтрока));
	
КонецПроцедуры // ЛицевыеСчетаПередУдалениемПродолжение()

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПослеУдаления(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
	
	УстановитьВидимостьКолонокТаблицыРасшифровки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	мСтруктураРедСтрокиЛС = Новый Структура;
	мСтруктураРедСтрокиЛС.Вставить("Объект", ТекСтрока.Объект);
	мСтруктураРедСтрокиЛС.Вставить("Сумма",  ТекСтрока.Сумма);
	
	АдресСтруктурыРеадктирования = ПоместитьВоВременноеХранилище(мСтруктураРедСтрокиЛС, Новый УникальныйИдентификатор);
	
	Если Копирование Тогда
	
		ТекСтрока.НомерЧекаККМ = 0;
		ТекСтрока.ПробитыйЧек  = 0;
		ТекСтрока.ДокументОплаты = Неопределено;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ЛицевыеСчета".
Процедура ЛицевыеСчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЛицевогоСчета = Элемент.ТекущиеДанные;
	
	мСтруктураРедСтрокиЛС = ПолучитьИзВременногоХранилища(АдресСтруктурыРеадктирования);
	
	// Если добавляемый объект уже имеется в табличной части, то продублируем настройки оплаты.
	ПредыдущаяСтрокаОбъекта = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", СтрокаЛицевогоСчета.Объект));
	Если ПредыдущаяСтрокаОбъекта.Количество() > 0 Тогда
		СтрокаЛицевогоСчета.ВариантРаспределения           = ПредыдущаяСтрокаОбъекта[0].ВариантРаспределения;
		СтрокаЛицевогоСчета.ВариантОплаты                  = ПредыдущаяСтрокаОбъекта[0].ВариантОплаты;
		СтрокаЛицевогоСчета.РаспределятьПоУказаннымУслугам = ПредыдущаяСтрокаОбъекта[0].РаспределятьПоУказаннымУслугам;
	КонецЕсли;
	
	Если НЕ СтрокаЛицевогоСчета.Объект = мСтруктураРедСтрокиЛС.Объект 
	 ИЛИ НЕ СтрокаЛицевогоСчета.Сумма  = мСтруктураРедСтрокиЛС.Сумма
	 ИЛИ НоваяСтрока Тогда
		
		Если СтрокаЛицевогоСчета.ФлагРедактирования Тогда
			ТекстВопроса = "Расшифровка платежа отредактирована вручную.
							|Выполнить распределение суммы в соответствии с текущими настройками?";
			
			ПараметрыВопроса = Новый Структура("ТекущаяСтрока, СтрокаЛицевогоСчета, мСтруктураРедСтрокиЛС",
												ТекущаяСтрока, СтрокаЛицевогоСчета, мСтруктураРедСтрокиЛС);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПерераспределениеРасшифровки", ЭтотОбъект, ПараметрыВопроса),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет, ,
						   КодВозвратаДиалога.Да);
		Иначе
			СформироватьРасшифровкуПлатежа(ТекущаяСтрока, Ложь);
			
			Если НЕ СтрокаЛицевогоСчета.Объект   = мСтруктураРедСтрокиЛС.Объект
			   И НЕ мСтруктураРедСтрокиЛС.Объект = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
				СтрокиЛС = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", мСтруктураРедСтрокиЛС.Объект));
				Если СтрокиЛС.Количество() > 0 Тогда
					// Если после изменения лицевого счета в строке оплаты
					// остались строки с предыдущим лицевым счетом, по тужно
					// перераспределить суммы в таких строках.
					Для Каждого ТекСтрока Из СтрокиЛС Цикл
						ТекСтрока.ФлагРедактирования = Ложь;
						РаспределитьСуммуОбъекта(ТекСтрока.ПолучитьИдентификатор());
					КонецЦикла;
				Иначе
					// Если строк с предыдущим лицевым счетом нет,
					// надо очистить расшифровку оплаты по исходному л/с.
					УдалитьРасшифровкуПоСтрокеОбъекта(мСтруктураРедСтрокиЛС.Объект);
				КонецЕсли;
			КонецЕсли;
			
			УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
			
			УстановитьВидимостьКолонокТаблицыРасшифровки();
			
			Если Не СтрокаЛицевогоСчета = Неопределено И ЗначениеЗаполнено(СтрокаЛицевогоСчета.Объект) Тогда
				СтруктураДолга = ПолучитьСуммуДолгаПоНачислениям(СтрокаЛицевогоСчета.Объект, Объект.Организация, Объект.ИсточникОплаты, Объект.Дата, 
																 Объект.ВариантРаспределенияОплатКапРемонт, мСтруктураНастроекКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию);
				ВывестиСуммуДолгаПоНачислениям(СтруктураДолга);
			КонецЕсли;
			
			СтрокаЛицевогоСчета.ФлагРедактированияНастроек = ?(СтрокаЛицевогоСчета.ВариантРаспределения = "", 1, 0);
			СтрокаЛицевогоСчета.ПробитыйЧек = ?(СтрокаЛицевогоСчета.НомерЧекаККМ = 0, 1, 0);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // ЛицевыеСчетаПриОкончанииРедактирования()

&НаКлиенте
// Обработчик вопроса о перераспределении сумм в таблице расшифровки платежей.
Процедура ОбработатьРезультатВопросаПерераспределениеРасшифровки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока         = ДополнительныеПараметры.ТекущаяСтрока;
	СтрокаЛицевогоСчета   = ДополнительныеПараметры.СтрокаЛицевогоСчета;
	мСтруктураРедСтрокиЛС = ДополнительныеПараметры.мСтруктураРедСтрокиЛС;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		СтрокаЛицевогоСчета.Объект = мСтруктураРедСтрокиЛС.Объект;
		СтрокаЛицевогоСчета.Сумма  = мСтруктураРедСтрокиЛС.Сумма;
		
		ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(ТекущаяСтрока);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьРасшифровкуПлатежа(ТекущаяСтрока, Ложь);
	СтрокаЛицевогоСчета.ФлагРедактирования = Ложь;
	
	Если НЕ СтрокаЛицевогоСчета.Объект   = мСтруктураРедСтрокиЛС.Объект
	   И НЕ мСтруктураРедСтрокиЛС.Объект = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
		СтрокиЛС = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", мСтруктураРедСтрокиЛС.Объект));
		Если СтрокиЛС.Количество() > 0 Тогда
			// Если после изменения лицевого счета в строке оплаты
			// остались строки с предыдущим лицевым счетом, по тужно
			// перераспределить суммы в таких строках.
			Для Каждого ТекСтрока Из СтрокиЛС Цикл
				ТекСтрока.ФлагРедактирования = Ложь;
				РаспределитьСуммуОбъекта(ТекСтрока.ПолучитьИдентификатор());
			КонецЦикла;
		Иначе
			// Если строк с предыдущим лицевым счетом нет,
			// надо очистить расшифровку оплаты по исзодному л/с.
			УдалитьРасшифровкуПоСтрокеОбъекта(мСтруктураРедСтрокиЛС.Объект);
		КонецЕсли;
	КонецЕсли;
	
	УПЖКХ_РаботаСДиалогамиКлиент.ПересчитатьИтогСуммы(ДеревоПлатежей, ЭтаФорма);
	
	УстановитьВидимостьКолонокТаблицыРасшифровки();
	
	Если Не СтрокаЛицевогоСчета = Неопределено И ЗначениеЗаполнено(СтрокаЛицевогоСчета.Объект) Тогда
		СтруктураДолга = ПолучитьСуммуДолгаПоНачислениям(СтрокаЛицевогоСчета.Объект, Объект.Организация, Объект.ИсточникОплаты, Объект.Дата, 
														 Объект.ВариантРаспределенияОплатКапРемонт, мСтруктураНастроекКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию);
		ВывестиСуммуДолгаПоНачислениям(СтруктураДолга);
	КонецЕсли;
	
	СтрокаЛицевогоСчета.ФлагРедактированияНастроек = ?(СтрокаЛицевогоСчета.ВариантРаспределения = "", 1, 0);
	СтрокаЛицевогоСчета.ПробитыйЧек = ?(СтрокаЛицевогоСчета.НомерЧекаККМ = 0, 1, 0);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевыеСчетаОбъект".
Процедура ЛицевыеСчетаОбъектПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(Элементы.ЛицевыеСчета.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевыеСчетаДокументОплаты".
//
Процедура ЛицевыеСчетаДокументОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаДокументОплаты".
//
Процедура ЛицевыеСчетаДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ТекущиеДанные.ДокументОплаты = Неопределено Тогда
		ТекущиеДанные.ДокументОплаты = ПредопределенноеЗначение("Документ." + ПолучитьНаименованиеВидаДокументаОтраженияОплатыПоВидуОперации() + ".ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ДеревоПлатежей".
Процедура ДеревоПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		РедактироватьРасшифровкуПлатежа(ТекущиеДанные.Объект)
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает изменение настройки распределения оплаты на добровольное страхование.
Процедура ОбработатьИзменениеНастройкиРаспределенияОплатыНаДобровольноеСтрахование()
	
	ОчиститьДанныеВДокументе();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага "НеРаспределятьОплатуНаДобровольноеСтрахование".
Процедура НеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзменении(Элемент)
	
	Если Не Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("НеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзмененииЗавершение", ЭтотОбъект), 
					   "При изменении настройки распределения оплаты на добровольное страхование документы отражения и расшифровка платежей будут очищены. Продолжить?",
					   РежимДиалогаВопрос.ДаНет,
					   ,
					   КодВозвратаДиалога.Нет);
					   
	Иначе
		
		ОбработатьИзменениеНастройкиРаспределенияОплатыНаДобровольноеСтрахование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-завершение обработчика события "ПриИзменении" поля "НеРаспределятьОплатуНаДобровольноеСтрахование".
Процедура НеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзмененииЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеНастройкиРаспределенияОплатыНаДобровольноеСтрахование();
	Иначе
		Объект.НеРаспределятьОплатуНаДобровольноеСтрахование = Не Объект.НеРаспределятьОплатуНаДобровольноеСтрахование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ПоказатьСкрытьРасшифровкуОплаты".
Процедура ПоказатьСкрытьРасшифровкуОплаты(Команда)
	
	Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка = (НЕ Элементы.ФормаПоказатьСкрытьРасшифровкуОплаты.Пометка);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоискПоШтрихКоду".
//
Процедура ПоискПоШтрихКоду(Команда)
	
	Результат = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработатьРезультатВводаШтрихКода", ЭтаФорма), Результат, "Введите Штрих-/QR-код");
	
КонецПроцедуры // ПоискПоШтрихКоду()

&НаКлиенте
// Обработка результата ввода строки, вызванного в процедуре "ПоискПоШтрихКоду()".
Процедура ОбработатьРезультатВводаШтрихКода(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ОбработатьШтрихКод(Результат, Отказ);
	
	Если НЕ Отказ Тогда
		ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВводаШтрихКода()

&НаКлиенте
// Обработчик команды "ЗаполнитьТаблицуВсемиЛицевымиСчетами".
Процедура ЗаполнитьТаблицуВсемиЛицевымиСчетами(Команда)
	
	Если НЕ Объект.ЛицевыеСчета.Количество() = 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнить", ЭтотОбъект),
					   "Перед заполнением табличные части документа будут очищены." + Символы.ПС + "Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
//ОбработчикКоманды "ЗаполнитьЛицевымиСчетамиСЗадолженностью"
Процедура ЗаполнитьЛицевымиСчетамиСЗадолженностью(Команда)
	
	Если НЕ Объект.ЛицевыеСчета.Количество() = 0 Тогда
		
		ДопПараметры = Новый Структура("ТолькоЛицевыеСчетаИмеющиеЗадолженность", Истина);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнить", ЭтотОбъект, ДопПараметры),
					   "Перед заполнением табличные части документа будут очищены." + Символы.ПС + "Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "Заполнить()".
Процедура ОбработатьРезультатВопросаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПродолжение(ДополнительныеПараметры);

КонецПроцедуры // ОбработатьРезультатВопросаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьПродолжение(ДополнительныеПараметры = Неопределено)
	
	ТолькоЛицевыеСчетаИмеющиеЗадолженность = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	   И ДополнительныеПараметры.Свойство("ТолькоЛицевыеСчетаИмеющиеЗадолженность") Тогда
		ТолькоЛицевыеСчетаИмеющиеЗадолженность = ДополнительныеПараметры.ТолькоЛицевыеСчетаИмеющиеЗадолженность;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьЛицевыеСчетаНаСервере(ТолькоЛицевыеСчетаИмеющиеЗадолженность);
	
КонецПроцедуры // ЗаполнитьПродолжение()

&НаКлиенте
// Обработчик команды "СформироватьДокументыОтраженияОплат".
Процедура СформироватьДокументыОтраженияОплат(Команда)
	
	// Признак отказа от формирования документов.
	Отказ = Ложь;
	
	// Если это поступление из автоматизированных систем, то должны быть указаны
	// оператор платежей и договор с оператором платежей.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты") Тогда
		
		Если Объект.ОператорПлатежей.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан оператор автоматизированной системы оплаты!",, "Объект.ОператорПлатежей",, Отказ);
		КонецЕсли;
		
		Если Объект.ДоговорОператораПлатежей.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан договор с оператором автоматизированной системы оплаты!",, "Объект.ДоговорОператораПлатежей",, Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты") Тогда
		
		Если Объект.ВидОплаты.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен ""Вид оплаты""!",, "Объект.ВидОплаты",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если обнаружены ошибки, то отказываемся от формирования документов.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Соответствие вида операции и варианта распределения оплат кап. ремонта не проверяется,
	// так как на апрель 2017 известно, что компании получают оплату за капремонт как в кассу,
	// так и через автоматизированные системы приема оплаты, а потом перечисляют эти средства
	// на расчетный счет по капремонту.
	// В соответствии с законодательством оплата за капремонт должна производиться
	// на специальный расчетный счет по капремонту регионального оператора или самого дома.
	
	Если Модифицированность Тогда
		ТекстВопроса       = "При формировании документов оплаты текущий документ будет проведен. Продложить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументыОтраженияОплат",
													   ЭтотОбъект,
													   Новый Структура("ТекстВопроса", ТекстВопроса));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	// Проверим, нужно ли перезаполнять уже сформированные документы отражения оплат.
	СформироватьДокументыОтраженияОплатПродолжение();
	
	Попытка
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецПопытки;
	
КонецПроцедуры // СформироватьДокументыОтраженияОплат()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "СформироватьДокументыОтраженияОплат()".
Процедура ОбработатьРезультатВопросаСформироватьДокументыОтраженияОплат(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет
	 Или Не ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись)) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыОтраженияОплатПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаСформироватьДокументыОтраженияОплат()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СформироватьДокументыОтраженияОплат".
Процедура СформироватьДокументыОтраженияОплатПродолжение()
	
	ЕстьДокументыОплат = ЕстьСформированныеДокументыОплат();
	
	Если ЕстьДокументыОплат Тогда
		ТекстВопроса = "Найдены уже созданные документы отражения оплат. Перезаполнить созданные документы?";
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьДокументыОтраженияОплатЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыОтраженияОплатФрагмент(Ложь);
	
КонецПроцедуры // СформироватьДокументыОтраженияОплатПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "СформироватьДокументыОтраженияОплатПродолжение()".
Процедура СформироватьДокументыОтраженияОплатЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПерезаполнятьСформированныеДокументы = Ложь;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПерезаполнятьСформированныеДокументы = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыОтраженияОплатФрагмент(ПерезаполнятьСформированныеДокументы);
	
КонецПроцедуры // СформироватьДокументыОтраженияОплатЗавершение()

&НаКлиенте
// Процедура формирует документы и записывает текущий документ.
Процедура СформироватьДокументыОтраженияОплатФрагмент(ПерезаполнятьСформированныеДокументы)
	
	СформироватьДокументыОтраженияОплатНаСервере(ПерезаполнятьСформированныеДокументы);
	
	ЭтоУСН = ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы")
	   И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета")
	   И НЕ ЭтоУСН Тогда
		ОткрытьРегистрациюСчетовФактурНаАванс(Ложь);
	КонецЕсли;
	
	Попытка
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецПопытки;
	
КонецПроцедуры // СформироватьДокументыОтраженияОплатФрагмент()

&НаКлиенте
// Обработчик команды "ОчиститьДокументыОтраженияОплат".
Процедура ОчиститьДокументыОтраженияОплат(Команда)
	
	ВыполнитьОчисткуДокументовОтраженияОплат();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НачатьИзменениеНастройкиРаспределенияСтрокиОплаты".
Процедура НачатьИзменениеНастройкиРаспределенияСтрокиОплаты()
	
	ТекущиеДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран лицевой счет.");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ФлагРедактирования Тогда
		ДопПараметры = Новый Структура("ТекущиеДанные, ТекущаяСтрока", ТекущиеДанные, ТекущаяСтрока);
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбИзмененииРучныхНастроекРаспределенияОплаты", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОбработкаОповещения, "Расшифровка текущего платежа отредактирована вручную и будет перезаполнена в соответствии с настройками распределения.
											|Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	Иначе
		ОткрытьНастройкиРаспределенияСтрокиОплаты(ТекущиеДанные, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // НачатьИзменениеНастройкиРаспределенияСтрокиОплаты()

&НаКлиенте
// Обработчик результата вопроса об изменении ручных настроек распределения оплаты.
//
Процедура ОбработатьРезультатВопросаОбИзмененииРучныхНастроекРаспределенияОплаты(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьНастройкиРаспределенияСтрокиОплаты(ДопПараметры.ТекущиеДанные, ДопПараметры.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьНастройкиРаспределенияСтрокиОплаты".
Процедура ОткрытьНастройкиРаспределенияСтрокиОплаты(ТекущиеДанные, ТекущаяСтрока)
	
	НастройкиРаспределенияСтроки = ПолучитьНастройкиРаспределенияСтроки(ТекущаяСтрока);
	АдресХранилищаНастроек = ПоместитьНастройкиРаспределенияСтрокиВХранилище(НастройкиРаспределенияСтроки);
	
	ДопПараметры = Новый Структура("ТекущаяСтрока, ТекущиеДанные", ТекущаяСтрока, ТекущиеДанные);
	ОткрытьФорму("Документ.КВП_РегистрацияОплаты.Форма.ФормаНастройкиОплаты",
				 Новый Структура("АдресХранилищаНастроек", АдресХранилищаНастроек),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыНастройкиОплаты", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьНастройкиРаспределенияСтрокиОплаты()

&НаКлиенте
// Обработка результата закрытия формы настройки оплат.
Процедура ОбработатьРезультатЗакрытияФормыНастройкиОплаты(АдресХранилищаНастроек, ДополнительныеПараметры) Экспорт
	
	Если Не АдресХранилищаНастроек = Неопределено Тогда
		
		ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ЗагрузитьНастройкиРаспределенияСтрокиИзХранилища(ТекущаяСтрока, АдресХранилищаНастроек);
		
		УправлениеФормой(ЭтаФорма);
		
		СформироватьРасшифровкуПлатежа(ТекущаяСтрока, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыНастройкиОплаты()

&НаКлиенте
// Обработчик команды "Свернуть".
Процедура Свернуть(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежей.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежей.Свернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Развернуть".
Процедура Развернуть(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежей.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежей.Развернуть(ТекВетка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "РаспределитьПоТекущей".
Процедура РаспределитьПоТекущей(Команда)
	
	СтрокаЛицевогоСчета = Элементы.ЛицевыеСчета.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	
	Если НЕ СтрокаЛицевогоСчета = Неопределено Тогда
		Если СтрокаЛицевогоСчета.ФлагРедактирования Тогда
			ДопПараметры = Новый Структура("СтрокаЛицевогоСчета, ТекущаяСтрока", СтрокаЛицевогоСчета, ТекущаяСтрока);
			ТекстВопроса = "Расшифровка платежа отредактирована вручную.
						   |Выполнить распределение суммы в соответствии с текущими настройками?";
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаРаспределитьПоТекущей", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			СформироватьРасшифровкуПлатежа(ТекущаяСтрока, Ложь);
		КонецЕсли;
		
		РаспределитьПоТекущейФрагмент(СтрокаЛицевогоСчета);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПоТекущей()

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаСортироватьПоВозрастанию".
Процедура ЛицевыеСчетаСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ЛицевыеСчета", Элементы.ЛицевыеСчета.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаСортироватьПоУбыванию".
Процедура ЛицевыеСчетаСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ЛицевыеСчета", Элементы.ЛицевыеСчета.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "РаспределитьПоТекущей()".
Процедура ОбработатьРезультатВопросаРаспределитьПоТекущей(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СтрокаЛицевогоСчета = ДополнительныеПараметры.СтрокаЛицевогоСчета;
	ТекущаяСтрока       = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		СформироватьРасшифровкуПлатежа(ТекущаяСтрока, Ложь);
		СтрокаЛицевогоСчета.ФлагРедактирования = Ложь;
	КонецЕсли;
	
	РаспределитьПоТекущейФрагмент(СтрокаЛицевогоСчета);

КонецПроцедуры // ОбработатьРезультатВопросаРаспределитьПоТекущей()

&НаКлиенте
// Процедура вызывает процедуру вывода суммы долга по начислениям.
Процедура РаспределитьПоТекущейФрагмент(Знач СтрокаЛицевогоСчета)
	
	СтруктураДолга = ПолучитьСуммуДолгаПоНачислениям(СтрокаЛицевогоСчета.Объект, Объект.Организация, Объект.ИсточникОплаты, Объект.Дата, 
													 Объект.ВариантРаспределенияОплатКапРемонт, мСтруктураНастроекКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию);
	ВывестиСуммуДолгаПоНачислениям(СтруктураДолга);
	
КонецПроцедуры // РаспределитьПоТекущейФрагмент()

&НаКлиенте
// Обработчик команды "РаспределитьПоВсем".
Процедура РаспределитьПоВсем(Команда)
	
	СтрокиКорректировки = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("ФлагРедактирования", Истина));
	Если СтрокиКорректировки.Количество() > 0 Тогда
		ТекстВопроса = "Есть строки оплат, для которых расшифровка платежа отредактирована вручную.
						|Выполнить распределение суммы в соответствии с текущими настройками?";

		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаРаспределитьПоВсем", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("РаспределитьПоВсемПродолжение", ЭтотОбъект);
	ПроверитьНеобходимостьЗаписиДокументаПередРаспределениемОплаты(ОбработчикПродолжения);
	
КонецПроцедуры // РаспределитьПоВсем()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре-обработчике команды "РаспределитьПоВсем()".
Процедура ОбработатьРезультатВопросаРаспределитьПоВсем(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("РаспределитьПоВсемПродолжение", ЭтотОбъект);
	ПроверитьНеобходимостьЗаписиДокументаПередРаспределениемОплаты(ОбработчикПродолжения);
	
КонецПроцедуры // ОбработатьРезультатВопросаРаспределитьПоВсем()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "РаспределитьПоВсем()".
Процедура РаспределитьПоВсемПродолжение(Результат, ДопПараметры) Экспорт
	
	РаспределитьСуммуВсехОбъектов();
	
	// Принудительно установим модифицированность документа,
	// так как перед распределением оплаты документ мог быть записан,
	// а модифицированность снята.
	Модифицированность = Истина;
	
	Для Каждого СтрокаЛицевогоСчета Из Объект.ЛицевыеСчета Цикл
		
		Если СтрокаЛицевогоСчета.ФлагРедактирования Тогда
			СтрокиЛС = Объект.ЛицевыеСчета.НайтиСтроки(Новый Структура("Объект", СтрокаЛицевогоСчета.Объект));
			Для Каждого ТекСтрока Из СтрокиЛС Цикл
				ТекСтрока.ФлагРедактирования = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЛицевогоСчета = Элементы.ЛицевыеСчета.ТекущиеДанные;
	Если НЕ СтрокаЛицевогоСчета = Неопределено Тогда
		УстановитьОтборРашифровкиПлатежа(СтрокаЛицевогоСчета.Объект);
		
		СтруктураДолга = ПолучитьСуммуДолгаПоНачислениям(СтрокаЛицевогоСчета.Объект, Объект.Организация, Объект.ИсточникОплаты, Объект.Дата, 
														 Объект.ВариантРаспределенияОплатКапРемонт, мСтруктураНастроекКапРемонта, ВестиУчетНачисленийПоДобровольномуСтрахованию);
		ВывестиСуммуДолгаПоНачислениям(СтруктураДолга);
	Иначе
		ДеревоПлатежей.ПолучитьЭлементы().Очистить();
		ДолгПоТекущемуЛС = "";
	КонецЕсли;

КонецПроцедуры // РаспределитьПоВсемПродолжение()

&НаКлиенте
// Обработчик команды "Настройка".
Процедура Настройка(Команда)
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ФормаНастройкиИсточникаОплаты",
				 Новый Структура("Документ", "КВП_РегистрацияОплаты"),
				 ЭтаФорма,,,,,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройка()

&НаКлиенте
// Обработчик команды "ОткрытьНастройкиРаспределенияОплатПоОрганизации".
Процедура ОткрытьНастройкиРаспределенияОплатПоОрганизации(Команда)
	
	КлючНастроекУП = УПЖКХ_ПараметрыУчетаСервер.ПолучитьКлючЗаписиУчетнойПолитикиЖКХПоОрганизацииНаДату(Объект.Дата, Объект.Организация);
	
	Если Не КлючНастроекУП = Неопределено Тогда
		// При открытии формы записи УП передадим в нее ключ записи и имя начальной страницы.
		ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.ФормаЗаписи", Новый Структура("Ключ, ИмяНачальнойСтраницы", КлючНастроекУП, "ГруппаРегистрацияОплат"));
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось получить Учетную политику (ЖКХ) по указанным организации и дате документа!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НапечататьЧекПоТекущейСтроке".
Процедура НапечататьЧекПоТекущейСтроке(Команда)
	
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	Если Не ТекущаяСтрока = Неопределено Тогда
		НапечататьЧек(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НапечататьЧекПоВсемСтрокам".
Процедура НапечататьЧекПоВсемСтрокам(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() > 0 Тогда
		НапечататьЧек();
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти
