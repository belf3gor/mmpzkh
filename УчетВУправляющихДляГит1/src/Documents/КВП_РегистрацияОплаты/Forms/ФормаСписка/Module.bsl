
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не Параметры.Отбор.Свойство("Ссылка") Тогда
		ОтборОрганизация = УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	ИначеЕсли Параметры.Свойство("Организация") Тогда
		ОтборОрганизация = Параметры.Организация;
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКоманднаяПанель);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ИспользоватьПодключаемоеОборудование = Истина;
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ВО"
		 И УПЖКХ_ТиповыеМетодыКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьПодключениеОборудования", ЭтотОбъект);
		УПЖКХ_ТиповыеМетодыКлиент.НачатьПодключениеОборудованиеПоТипу(Оповещение, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Выводит сообщение об ошибке подключения сканера штрихкода.
//
Процедура ОбработатьПодключениеОборудования(РезультатПодключения, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодключения) = Тип("Структура") И РезультатПодключения.Результат = Ложь Тогда
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПодключениеОборудования()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	
	// ВводДоступен() - Истина, только в том случае, если данная форма активна.
	// Во всех остальных случаях Ложь, даже при трассировке конфигурации (при пошаговой отладке).
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			ТекКод = Неопределено;
			
			// Обработку параметров заключим в блок попытки.
			Попытка
				Если Параметр[1] = Неопределено Тогда
					ТекКод = Параметр[0];
				Иначе
					ТекКод = Параметр[1][1];
				КонецЕсли;
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Возникла ошибка при обработке данных штрихкода!");
				Возврат;
			КонецПопытки;
			
			// При работе шсканера возникают ситуации, что сканер посылает
			// два сообщения, причем полученное от сканера значение в одном
			// из случаев отличается от строкового значения.
			Если ТипЗнч(ТекКод) = Тип("Строка") И Не ПустаяСтрока(ТекКод) Тогда
				СоздатьНовыйДокументПоШК(ТекКод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	
	УПЖКХ_ТиповыеМетодыКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтборОрганизация".
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация",
																ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ВычислитьСуммуДокументов");
	ПодключитьОбработчикОжидания("ВычислитьСуммуДокументов", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Рассчитывает сумму полей колонки "Сумма документа" выделенных строк таблицы.
Процедура ВычислитьСуммуДокументов()
	
	СуммаДокументов = УПЖКХ_РаботаСДиалогамиКлиент.ВычислитьСуммуДокументов(Элементы.Список, "СуммаДокумента");
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Реклама
&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()
// Конец Реклама

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ НОВОГО ДОКУМЕНТА ПО ШК

#Область ФормированиеНовогоДокументаПоШК

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЧТЕНИЯ ШК

&НаКлиенте
// Обработчик команды "ПоискПоШтрихКоду".
//
Процедура ПоискПоШтрихКоду(Команда)
	
	Результат = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработатьРезультатВводаШтрихКода", ЭтаФорма), Результат, "Введите Штрих-/QR-код");
	
КонецПроцедуры // ПоискПоШтрихКоду()

&НаКлиенте
// Обработчик результата ввода строки команды "ПоискПоШтрихКоду".
//
Процедура ОбработатьРезультатВводаШтрихКода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(Результат) Тогда
		СоздатьНовыйДокументПоШК(Результат);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВводаШтрихКода()

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ СОЗДАНИЯ НОВОГО ДОКУМЕНТА ПРИ ЧТЕНИИ ШК

&НаКлиенте
// Производит открытие формы нового документа с передачей в эту форму текст считанного штрихкода.
//
// Параметры:
//  Штрихкод - Строка - текст считанного штрихкода.
//
Процедура СоздатьНовыйДокументПоШК(Штрихкод)
	
	// Открываем форму нового документа, передаем в эту форму штрихкод.
	ФормаДокументаРО = ПолучитьФорму("Документ.КВП_РегистрацияОплаты.Форма.ФормаДокумента");
	
	// Значение организации устанавливаем в значение "Пустая ссылка", так как организация должна определяться по Настройкам
	// формирования платежного документа.
	ОсновнаяОрганизация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьНесколькоОрганизаций") Тогда
		Если Этаформа.ОтборОрганизация <> Неопределено
		   И ТипЗнч(Этаформа.ОтборОрганизация) = Тип("СправочникСсылка.Организации")
		   И Не Этаформа.ОтборОрганизация.Пустая() Тогда
			Организация = Этаформа.ОтборОрганизация;
		Иначе
			Если ОсновнаяОрганизация.Пустая() Тогда
				Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			Иначе
				Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
		ФормаДокументаРО.Объект.Организация = Организация;
	Иначе
		Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ФормаДокументаРО.Объект.Организация = Организация;
	
	Отказ = Ложь;
	ФормаДокументаРО.ОбработатьШтрихКод(Штрихкод, Отказ);
	
	Если НЕ Отказ Тогда
		// Заполняем дополнительные сведения о лицевом счете в таблице "Лицевые счета" документа.
		КоличествоСтрок = ФормаДокументаРО.Объект.ЛицевыеСчета.Количество();
		ФормаДокументаРО.ЗаполнитьСлужебныеДанныеВСтрокеЛицевогоСчета(КоличествоСтрок - 1);
	КонецЕсли;
	ФормаДокументаРО.Открыть();
	
КонецПроцедуры // СоздатьНовыйДокументПоШК()

#КонецОбласти

